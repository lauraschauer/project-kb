{
    "advisory_record": {
        "cve_id": "CVE-2018-12540",
        "description": "In version from 3.0.0 to 3.5.2 of Eclipse Vert.x, the CSRFHandler do not assert that the XSRF Cookie matches the returned XSRF header/form parameter. This allows replay attacks with previously issued tokens which are not expired yet.",
        "reserved_timestamp": 1529280000,
        "published_timestamp": 1531404000,
        "updated_timestamp": 1599555968,
        "repository_url": null,
        "references": {
            "": 186,
            "https://access.redhat.com/support/": 10,
            "https://access.redhat.com/downloads/": 8,
            "https://access.redhat.com/errata/": 6,
            "https://access.redhat.com/labs/": 6,
            "https://github.com/vert-x3/vertx-web/issues/970": 5,
            "https://bugs.eclipse.org/bugs/show_bug.cgi?id=536948": 4,
            "https://access.redhat.com/errata/RHSA-2018:2371": 4,
            "commit::98891b1d9e022b467a3e4674aca4d1889849b1d5": 4,
            "https://wiki.eclipse.org/ECA": 4,
            "https://access.redhat.com/management/": 4,
            "https://access.redhat.com/": 4,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 4,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 4,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 4,
            "https://access.redhat.com/products/": 4,
            "https://access.redhat.com/documentation": 4,
            "https://access.redhat.com/product-life-cycles/": 4,
            "https://access.redhat.com/security": 4,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 4,
            "https://access.redhat.com/security/security-updates/#/cve": 4,
            "https://access.redhat.com/support/contact/": 4,
            "https://status.redhat.com": 4,
            "commit::f42b193b15a29b772fc576b2d0f2497e7474a7e9": 3,
            "https://lists.apache.org/thread.html/r59482ebed302aa49ac7e0c51737499746b0d086fcdeb8f90e705951f%40%3Ccommits.pulsar.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r3fffda8e947edaa359152c8dc4c4ea9c96fd8ced1999bbce92bc6b25%40%3Ccommits.pulsar.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/rc5b4ae8a7caae6d3d5b3266cb050823b96dd62b30718b90b778d3d8b%40%3Ccommits.pulsar.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r10aef585c521f8ef603f5831f9d97a27d920624025131da950e0c62f%40%3Ccommits.pulsar.apache.org%3E": 2,
            "https://access.redhat.com/security/cve/cve-2018-12540": 2,
            "https://www.eclipse.org/": 2,
            "http://marketplace.eclipse.org": 2,
            "http://events.eclipse.org": 2,
            "http://www.planeteclipse.org/": 2,
            "https://www.eclipse.org/community/eclipse_newsletter/": 2,
            "https://www.youtube.com/user/EclipseFdn": 2,
            "https://bugs.eclipse.org/bugs/": 2,
            "https://www.eclipse.org/forums/": 2,
            "https://www.eclipse.org/mail/": 2,
            "https://wiki.eclipse.org/": 2,
            "https://wiki.eclipse.org/IRC": 2,
            "https://www.eclipse.org/contribute/": 2,
            "http://wiki.eclipse.org/Auto_IWG": 2,
            "http://iot.eclipse.org": 2,
            "http://locationtech.org": 2,
            "http://lts.eclipse.org": 2,
            "http://polarsys.org": 2,
            "http://science.eclipse.org": 2,
            "http://www.openmdm.org": 2,
            "https://bugzilla.readthedocs.org/en/5.0/using/understanding.html": 2,
            "http://www.eclipse.org/legal/termsofuse.php": 2,
            "http://www.eclipse.org/legal/copyright.php": 2,
            "https://dev.eclipse.org/committers/bugs/bugz_manager.php": 2,
            "https://access.redhat.com/downloads/content/package-browser": 2,
            "https://catalog.redhat.com/software/containers/explore/": 2,
            "https://access.redhat.com/articles/1202803": 2,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 2,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 2,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 2,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 2,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 2,
            "https://access.redhat.com/documentation/": 2,
            "https://access.redhat.com/security/": 2,
            "https://access.redhat.com/security/vulnerabilities": 2,
            "https://access.redhat.com/security/data": 2,
            "https://access.redhat.com/security/security-updates/#/security-labs": 2,
            "https://access.redhat.com/security/updates/backporting/": 2,
            "https://access.redhat.com/support/cases/": 2,
            "https://access.redhat.com/support/cases/#/troubleshoot": 2,
            "https://access.redhat.com/community": 2,
            "https://access.redhat.com/community/": 2,
            "https://access.redhat.com/discussions/": 2,
            "https://access.redhat.com/announcements/": 2,
            "https://access.redhat.com/accelerators/": 2,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 2,
            "https://cloud.redhat.com/insights": 2,
            "https://access.redhat.com/changeLanguage?language=en": 2,
            "https://access.redhat.com/changeLanguage?language=fr": 2,
            "https://access.redhat.com/changeLanguage?language=ko": 2,
            "https://access.redhat.com/changeLanguage?language=ja": 2,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 2,
            "https://access.redhat.com/products/red-hat-satellite/": 2,
            "https://access.redhat.com/products/red-hat-subscription-management/": 2,
            "https://access.redhat.com/products/red-hat-insights/": 2,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 2,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 2,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 2,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 2,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 2,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 2,
            "https://access.redhat.com/products/red-hat-quay/": 2,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 2,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 2,
            "https://access.redhat.com/products/red-hat-storage/": 2,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 2,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 2,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 2,
            "https://access.redhat.com/products/red-hat-runtimes/": 2,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 2,
            "https://access.redhat.com/products/red-hat-data-grid/": 2,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 2,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 2,
            "https://access.redhat.com/products/spring-boot/": 2,
            "https://access.redhat.com/products/nodejs/": 2,
            "https://access.redhat.com/products/quarkus/": 2,
            "https://access.redhat.com/products/red-hat-application-foundations/": 2,
            "https://access.redhat.com/products/red-hat-fuse/": 2,
            "https://access.redhat.com/products/red-hat-amq/": 2,
            "https://access.redhat.com/products/red-hat-3scale/": 2,
            "https://redhat.com/en": 2,
            "https://twitter.com/RedHat": 2,
            "https://access.redhat.com/management": 2,
            "https://access.redhat.com/support": 2,
            "https://access.redhat.com/support/customer-service": 2,
            "https://access.redhat.com/articles/33844": 2,
            "https://access.redhat.com/help/login_assistance": 2,
            "https://www.redhat.com/en/trust": 2,
            "https://www.redhat.com/en/about/browser-support": 2,
            "https://www.redhat.com/en/about/digital-accessibility": 2,
            "https://access.redhat.com/recognition/": 2,
            "https://access.redhat.com/help/colophon/": 2,
            "https://www.redhat.com/": 2,
            "http://developers.redhat.com/": 2,
            "https://connect.redhat.com/": 2,
            "https://cloud.redhat.com/": 2,
            "https://access.redhat.com/subscription-value": 2,
            "https://www.redhat.com/about/": 2,
            "http://jobs.redhat.com": 2,
            "https://redhat.com/en/about/company": 2,
            "https://redhat.com/en/jobs": 2,
            "https://redhat.com/en/events": 2,
            "https://redhat.com/en/about/office-locations": 2,
            "https://redhat.com/en/contact": 2,
            "https://redhat.com/en/blog": 2,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 2,
            "https://coolstuff.redhat.com/": 2,
            "https://www.redhat.com/en/summit": 2,
            "https://redhat.com/en/about/privacy-policy": 2,
            "https://redhat.com/en/about/terms-use": 2,
            "https://redhat.com/en/about/all-policies-guidelines": 2,
            "https://redhat.com/en/about/digital-accessibility": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/vert-x3/vertx-web/issues/979": 2,
            "https://www.eclipse.org/downloads/": 1,
            "https://www.eclipse.org/users/": 1,
            "https://www.eclipse.org/membership/": 1,
            "https://www.eclipse.org/projects/": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12540": 1,
            "https://cwe.mitre.org/data/definitions/352.html": 1,
            "https://github.com/CVEProject/cvelist/pull/703": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1591072": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1600666": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-12537.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-12540.html": 1,
            "https://access.redhat.com/security/updates/classification/#moderate": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&product=catRhoar.eclipse.vertx&version=3.5.3": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html-single/red_hat_openshift_application_runtimes_release_notes/": 1,
            "https://access.redhat.com/security/team/contact/": 1,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com/razzbee": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "Eclipse Vert.x",
            "XSRF",
            "CSRFHandler",
            "Eclipse",
            "Cookie"
        ],
        "versions": {
            "lessThan": "unspecified",
            "status": "affected",
            "version": "3.0",
            "versionType": "custom"
        },
        "files": [
            "x",
            "CSRFHandler",
            "Vert",
            "XSRF"
        ],
        "keywords": [
            "issue",
            "attack",
            "form",
            "expire",
            "assert",
            "parameter",
            "xsrf",
            "token",
            "cookie",
            "header",
            "match",
            "csrfhandler",
            "replay",
            "eclipse",
            "allow",
            "version",
            "return"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "3a6512695a9d610687081eb13d2a1681151fd7fb",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527071519,
            "hunks": 19,
            "message": "Http header CR / LF validation - fixes #2470",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpHeaders.java b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "index 5b1aaf1d9..6e6d1ac03 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "@@ -13,2 +13,5 @@ package io.vertx.core.http;",
                "+import io.netty.util.AsciiString;",
                "+import io.vertx.core.http.impl.HttpUtils;",
                "+",
                " /**",
                "@@ -326,3 +329,4 @@ public final class HttpHeaders {",
                "   public static CharSequence createOptimized(String value) {",
                "-    return io.netty.handler.codec.http.HttpHeaders.newEntity(value);",
                "+    HttpUtils.validateHeader(value);",
                "+    return new AsciiString(value);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "index d923d7564..1ef58bbad 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "@@ -136,2 +136,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(String name, String value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.add(toLowerCase(name), value);",
                "@@ -142,2 +143,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(String name, Iterable<String> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.add(toLowerCase(name), values);",
                "@@ -164,2 +166,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(String name, String value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.set(toLowerCase(name), value);",
                "@@ -170,2 +173,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(String name, Iterable<String> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.set(toLowerCase(name), values);",
                "@@ -232,2 +236,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(CharSequence name, CharSequence value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.add(toLowerCase(name), value);",
                "@@ -238,2 +243,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap add(CharSequence name, Iterable<CharSequence> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.add(toLowerCase(name), values);",
                "@@ -244,2 +250,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(CharSequence name, CharSequence value) {",
                "+    HttpUtils.validateHeader(name, value);",
                "     headers.set(toLowerCase(name), value);",
                "@@ -250,2 +257,3 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "   public MultiMap set(CharSequence name, Iterable<CharSequence> values) {",
                "+    HttpUtils.validateHeader(name, values);",
                "     headers.set(toLowerCase(name), values);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "index c2c0a58a6..a66c5aff2 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "@@ -15,3 +15,2 @@ import io.netty.buffer.ByteBuf;",
                " import io.netty.buffer.Unpooled;",
                "-import io.netty.channel.ChannelFuture;",
                " import io.netty.channel.ChannelFutureListener;",
                "@@ -28,3 +27,2 @@ import io.vertx.core.Handler;",
                " import io.vertx.core.MultiMap;",
                "-import io.vertx.core.VertxException;",
                " import io.vertx.core.buffer.Buffer;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "index 5cd43ed7d..617a1f3b2 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "@@ -19,3 +19,2 @@ import io.vertx.core.*;",
                " import io.vertx.core.buffer.Buffer;",
                "-import io.vertx.core.http.CaseInsensitiveHeaders;",
                " import io.vertx.core.http.HttpClientRequest;",
                "@@ -26,2 +25,3 @@ import io.vertx.core.http.HttpMethod;",
                " import io.vertx.core.http.HttpVersion;",
                "+import io.vertx.core.http.impl.headers.VertxHttpHeaders;",
                " import io.vertx.core.impl.ContextInternal;",
                "@@ -70,3 +70,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   private long written;",
                "-  private CaseInsensitiveHeaders headers;",
                "+  private VertxHttpHeaders headers;",
                "@@ -185,3 +185,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "     if (headers == null) {",
                "-      headers = new CaseInsensitiveHeaders();",
                "+      headers = new VertxHttpHeaders();",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpUtils.java b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "index 5fc2e69af..7e00b0118 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "@@ -533,2 +533,21 @@ public final class HttpUtils {",
                "   }",
                "+",
                "+  public static void validateHeader(CharSequence name, CharSequence value) {",
                "+    validateHeader(name);",
                "+    validateHeader(value);",
                "+  }",
                "+",
                "+  public static void validateHeader(CharSequence name, Iterable<? extends CharSequence> values) {",
                "+    validateHeader(name);",
                "+    values.forEach(HttpUtils::validateHeader);",
                "+  }",
                "+",
                "+  public static void validateHeader(CharSequence value) {",
                "+    for (int i = 0;i < value.length();i++) {",
                "+      char c = value.charAt(i);",
                "+      if (c == '\\r' || c == '\\n') {",
                "+        throw new IllegalArgumentException(\"Illegal header character: \" + ((int)c));",
                "+      }",
                "+    }",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "index 9d2620dde..60168d7df 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "@@ -17,2 +17,3 @@ import io.netty.util.HashingStrategy;",
                " import io.vertx.core.MultiMap;",
                "+import io.vertx.core.http.impl.HttpUtils;",
                "@@ -121,2 +122,9 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   private void add0(int h, int i, final CharSequence name, final CharSequence value) {",
                "+    if (!(name instanceof AsciiString)) {",
                "+      HttpUtils.validateHeader(name);",
                "+    }",
                "+    if (!(value instanceof AsciiString)) {",
                "+      HttpUtils.validateHeader(value);",
                "+    }",
                "+",
                "     // Update the hash table."
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpHeaders.java",
                "src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2470": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1bb6445226c39a95e7d07ce3caaf56828e8aab72"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java, src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java, src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java, src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java, src/main/java/io/vertx/core/http/impl/HttpUtils.java, src/main/java/io/vertx/core/http/HttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2470",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3ca2e6a192231a432d62d7ee1c095889dab64917",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526400545,
            "hunks": 2,
            "message": "Use Http2Headers.contains instead of default MultiMap implementation In netty/netty#7633, a method was added to check if a HTTP/2 header is present and has a given value. Now that Vert.x core requires Netty 4.1.22, we can use it instead of the slower default implementation. Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "index d923d7564..6c2a6d1b1 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                "@@ -102,2 +102,7 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "+  @Override",
                "+  public boolean contains(String name, String value, boolean caseInsensitive) {",
                "+    return headers.contains(toLowerCase(name), value, caseInsensitive);",
                "+  }",
                "+",
                "   @Override",
                "@@ -230,2 +235,7 @@ public class Http2HeadersAdaptor implements MultiMap {",
                "+  @Override",
                "+  public boolean contains(CharSequence name, CharSequence value, boolean caseInsensitive) {",
                "+    return headers.contains(toLowerCase(name), value, caseInsensitive);",
                "+  }",
                "+",
                "   @Override"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "7633": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 7633",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c126d1be7dbca1d965ec528337d0aa713ffe93c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533803704,
            "hunks": 1,
            "message": "Add CONTENT_DISPOSITION to HttpHeaders (#2579) Signed-off-by: George Gastaldi <gegastaldi@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpHeaders.java b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "index f24b833e5..08e74d54f 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "@@ -128,2 +128,7 @@ public final class HttpHeaders {",
                "+  /**",
                "+   * Content-Disposition header name",
                "+   */",
                "+  public static final CharSequence CONTENT_DISPOSITION = createOptimized(HttpHeaderNames.CONTENT_DISPOSITION.toString());",
                "+  ",
                "   /**"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpHeaders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2579": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/HttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2579",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "49dda6e685cc91fb7c0899a01d8544395aa141b9",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526307443,
            "hunks": 27,
            "message": "Vertx http headers refactor (#2448) * Move all private instance methods at the bottom of VertxHttpHeaders * Group overloaded methods in VertxHttpHeaders so it's easier to reason about their behavior * Refactor VertxHttpHeaders to remove duplicate code and delegate to CharSequence based methods - fixes #2447 * Make VertxHttpHeaders final",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "index 084f3c336..f202918c0 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "@@ -34,11 +34,3 @@ import static io.netty.util.AsciiString.*;",
                "  */",
                "-public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-",
                "-  private MultiMap set0(Iterable<Map.Entry<String, String>> map) {",
                "-    clear();",
                "-    for (Map.Entry<String, String> entry: map) {",
                "-      add(entry.getKey(), entry.getValue());",
                "-    }",
                "-    return this;",
                "-  }",
                "+public final class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "@@ -92,7 +84,4 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders add(final String name, final String strVal) {",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    add0(h, i, name, strVal);",
                "-    return this;",
                "+  public HttpHeaders add(String name, Object value) {",
                "+    return add((CharSequence) name, (CharSequence) value);",
                "   }",
                "@@ -100,3 +89,8 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders add(String name, Iterable values) {",
                "+  public VertxHttpHeaders add(String name, String strVal) {",
                "+    return add((CharSequence) name, strVal);",
                "+  }",
                "+",
                "+  @Override",
                "+  public VertxHttpHeaders add(CharSequence name, Iterable values) {",
                "     int h = AsciiString.hashCode(name);",
                "@@ -109,8 +103,10 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "+  @Override",
                "+  public VertxHttpHeaders add(String name, Iterable values) {",
                "+    return add((CharSequence) name, values);",
                "+  }",
                "+",
                "   @Override",
                "   public MultiMap addAll(MultiMap headers) {",
                "-    for (Map.Entry<String, String> entry: headers.entries()) {",
                "-      add(entry.getKey(), entry.getValue());",
                "-    }",
                "-    return this;",
                "+    return addAll(headers.entries());",
                "   }",
                "@@ -119,3 +115,7 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   public MultiMap addAll(Map<String, String> map) {",
                "-    for (Map.Entry<String, String> entry: map.entrySet()) {",
                "+    return addAll(map.entrySet());",
                "+  }",
                "+",
                "+  private MultiMap addAll(Iterable<Map.Entry<String, String>> headers) {",
                "+    for (Map.Entry<String, String> entry: headers) {",
                "       add(entry.getKey(), entry.getValue());",
                "@@ -125,15 +125,4 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  private void add0(int h, int i, final CharSequence name, final CharSequence value) {",
                "-    // Update the hash table.",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    VertxHttpHeaders.MapEntry newEntry;",
                "-    entries[i] = newEntry = new VertxHttpHeaders.MapEntry(h, name, value);",
                "-    newEntry.next = e;",
                "-",
                "-    // Update the linked list.",
                "-    newEntry.addBefore(head);",
                "-  }",
                "-",
                "   @Override",
                "-  public VertxHttpHeaders remove(final String name) {",
                "+  public VertxHttpHeaders remove(CharSequence name) {",
                "     Objects.requireNonNull(name, \"name\");",
                "@@ -145,36 +134,15 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  private void remove0(int h, int i, CharSequence name) {",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    if (e == null) {",
                "-      return;",
                "-    }",
                "+  @Override",
                "+  public VertxHttpHeaders remove(final String name) {",
                "+    return remove((CharSequence) name);",
                "+  }",
                "-    for (;;) {",
                "-      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        e.remove();",
                "-        VertxHttpHeaders.MapEntry next = e.next;",
                "-        if (next != null) {",
                "-          entries[i] = next;",
                "-          e = next;",
                "-        } else {",
                "-          entries[i] = null;",
                "-          return;",
                "-        }",
                "-      } else {",
                "-        break;",
                "-      }",
                "-    }",
                "+  @Override",
                "+  public VertxHttpHeaders set(CharSequence name, CharSequence value) {",
                "+    return set0(name, value);",
                "+  }",
                "-    for (;;) {",
                "-      VertxHttpHeaders.MapEntry next = e.next;",
                "-      if (next == null) {",
                "-        break;",
                "-      }",
                "-      if (next.hash == h && AsciiString.contentEqualsIgnoreCase(name, next.key)) {",
                "-        e.next = next.next;",
                "-        next.remove();",
                "-      } else {",
                "-        e = next;",
                "-      }",
                "-    }",
                "+  @Override",
                "+  public VertxHttpHeaders set(String name, String value) {",
                "+    return set((CharSequence)name, value);",
                "   }",
                "@@ -182,12 +150,9 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders set(final String name, final String strVal) {",
                "-    return set0(name, strVal);",
                "+  public VertxHttpHeaders set(String name, Object value) {",
                "+    return set((CharSequence)name, (CharSequence) value);",
                "   }",
                "-  private VertxHttpHeaders set0(final CharSequence name, final CharSequence strVal) {",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    remove0(h, i, name);",
                "-    add0(h, i, name, strVal);",
                "-    return this;",
                "+  @Override",
                "+  public VertxHttpHeaders set(CharSequence name, Object value) {",
                "+    return set(name, (CharSequence)value);",
                "   }",
                "@@ -195,3 +160,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders set(final String name, final Iterable values) {",
                "+  public VertxHttpHeaders set(CharSequence name, Iterable values) {",
                "     Objects.requireNonNull(values, \"values\");",
                "@@ -213,8 +178,4 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders clear() {",
                "-    for (int i = 0; i < entries.length; i ++) {",
                "-      entries[i] = null;",
                "-    }",
                "-    head.before = head.after = head;",
                "-    return this;",
                "+  public VertxHttpHeaders set(String name, Iterable values) {",
                "+    return set((CharSequence) name, values);",
                "   }",
                "@@ -222,3 +183,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public boolean contains(String name, String value, boolean ignoreCase) {",
                "+  public boolean contains(CharSequence name, CharSequence value, boolean ignoreCase) {",
                "     int h = AsciiString.hashCode(name);",
                "@@ -239,16 +200,21 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public boolean contains(CharSequence name, CharSequence value, boolean ignoreCase) {",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    HashingStrategy<CharSequence> strategy = ignoreCase ? CASE_INSENSITIVE_HASHER : CASE_SENSITIVE_HASHER;",
                "-    while (e != null) {",
                "-      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        if (strategy.equals(value, e.getValue())) {",
                "-          return true;",
                "-        }",
                "-      }",
                "-      e = e.next;",
                "-    }",
                "-    return false;",
                "+  public boolean contains(String name, String value, boolean ignoreCase) {",
                "+    return contains((CharSequence) name, value, ignoreCase);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean contains(CharSequence name) {",
                "+    return get0(name) != null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean contains(String name) {",
                "+    return contains((CharSequence) name);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String get(CharSequence name) {",
                "+    Objects.requireNonNull(name, \"name\");",
                "+    CharSequence ret = get0(name);",
                "+    return ret != null ? ret.toString() : null;",
                "   }",
                "@@ -256,3 +222,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public String get(final String name) {",
                "+  public String get(String name) {",
                "     return get((CharSequence) name);",
                "@@ -260,3 +226,8 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  private CharSequence get0(CharSequence name) {",
                "+  @Override",
                "+  public List<String> getAll(CharSequence name) {",
                "+    Objects.requireNonNull(name, \"name\");",
                "+",
                "+    LinkedList<String> values = new LinkedList<>();",
                "+",
                "     int h = AsciiString.hashCode(name);",
                "@@ -266,3 +237,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "       if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        return e.getValue();",
                "+        values.addFirst(e.getValue().toString());",
                "       }",
                "@@ -270,3 +241,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "     }",
                "-    return null;",
                "+    return values;",
                "   }",
                "@@ -274,3 +245,3 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public List<String> getAll(final String name) {",
                "+  public List<String> getAll(String name) {",
                "     return getAll((CharSequence) name);",
                "@@ -321,7 +292,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public boolean contains(String name) {",
                "-    return contains((CharSequence) name);",
                "-  }",
                "-",
                "   @Override",
                "@@ -343,52 +309,7 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public String get(CharSequence name) {",
                "-    Objects.requireNonNull(name, \"name\");",
                "-    CharSequence ret = get0(name);",
                "-    return ret != null ? ret.toString() : null;",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<String> getAll(CharSequence name) {",
                "-    Objects.requireNonNull(name, \"name\");",
                "-",
                "-    LinkedList<String> values = new LinkedList<>();",
                "-",
                "-    int h = AsciiString.hashCode(name);",
                "-    int i = index(h);",
                "-    VertxHttpHeaders.MapEntry e = entries[i];",
                "-    while (e != null) {",
                "-      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "-        values.addFirst(e.getValue().toString());",
                "-      }",
                "-      e = e.next;",
                "-    }",
                "-    return values;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean contains(CharSequence name) {",
                "-    return get0(name) != null;",
                "-  }",
                "-",
                "-  @Override",
                "-  public VertxHttpHeaders add(CharSequence name, Iterable values) {",
                "-    String n = name.toString();",
                "-    for (Object seq: values) {",
                "-      add(n, seq.toString());",
                "-    }",
                "-    return this;",
                "-  }",
                "-",
                "-  @Override",
                "-  public MultiMap set(CharSequence name, CharSequence value) {",
                "-    return set(name.toString(), value.toString());",
                "-  }",
                "-",
                "-  @Override",
                "-  public VertxHttpHeaders set(CharSequence name, Iterable values) {",
                "-    remove(name);",
                "-    String n = name.toString();",
                "-    for (Object seq: values) {",
                "-      add(n, seq.toString());",
                "+  public VertxHttpHeaders clear() {",
                "+    for (int i = 0; i < entries.length; i ++) {",
                "+      entries[i] = null;",
                "     }",
                "+    head.before = head.after = head;",
                "     return this;",
                "@@ -396,7 +317,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public VertxHttpHeaders remove(CharSequence name) {",
                "-    return remove(name.toString());",
                "-  }",
                "-",
                "   public String toString() {",
                "@@ -456,7 +372,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public HttpHeaders add(String name, Object value) {",
                "-    return add((CharSequence) name, (CharSequence) value);",
                "-  }",
                "-",
                "   @Override",
                "@@ -471,7 +382,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public HttpHeaders set(String name, Object value) {",
                "-    return set0(name, (CharSequence) value);",
                "-  }",
                "-",
                "   @Override",
                "@@ -534,2 +440,78 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   }",
                "+",
                "+  private void remove0(int h, int i, CharSequence name) {",
                "+    VertxHttpHeaders.MapEntry e = entries[i];",
                "+    if (e == null) {",
                "+      return;",
                "+    }",
                "+",
                "+    for (;;) {",
                "+      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "+        e.remove();",
                "+        VertxHttpHeaders.MapEntry next = e.next;",
                "+        if (next != null) {",
                "+          entries[i] = next;",
                "+          e = next;",
                "+        } else {",
                "+          entries[i] = null;",
                "+          return;",
                "+        }",
                "+      } else {",
                "+        break;",
                "+      }",
                "+    }",
                "+",
                "+    for (;;) {",
                "+      VertxHttpHeaders.MapEntry next = e.next;",
                "+      if (next == null) {",
                "+        break;",
                "+      }",
                "+      if (next.hash == h && AsciiString.contentEqualsIgnoreCase(name, next.key)) {",
                "+        e.next = next.next;",
                "+        next.remove();",
                "+      } else {",
                "+        e = next;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void add0(int h, int i, final CharSequence name, final CharSequence value) {",
                "+    // Update the hash table.",
                "+    VertxHttpHeaders.MapEntry e = entries[i];",
                "+    VertxHttpHeaders.MapEntry newEntry;",
                "+    entries[i] = newEntry = new VertxHttpHeaders.MapEntry(h, name, value);",
                "+    newEntry.next = e;",
                "+",
                "+    // Update the linked list.",
                "+    newEntry.addBefore(head);",
                "+  }",
                "+",
                "+  private VertxHttpHeaders set0(final CharSequence name, final CharSequence strVal) {",
                "+    int h = AsciiString.hashCode(name);",
                "+    int i = index(h);",
                "+    remove0(h, i, name);",
                "+    add0(h, i, name, strVal);",
                "+    return this;",
                "+  }",
                "+",
                "+  private CharSequence get0(CharSequence name) {",
                "+    int h = AsciiString.hashCode(name);",
                "+    int i = index(h);",
                "+    VertxHttpHeaders.MapEntry e = entries[i];",
                "+    while (e != null) {",
                "+      if (e.hash == h && AsciiString.contentEqualsIgnoreCase(name, e.key)) {",
                "+        return e.getValue();",
                "+      }",
                "+      e = e.next;",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  private MultiMap set0(Iterable<Map.Entry<String, String>> map) {",
                "+    clear();",
                "+    for (Map.Entry<String, String> entry: map) {",
                "+      add(entry.getKey(), entry.getValue());",
                "+    }",
                "+    return this;",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2448": "",
                "2447": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2448, 2447",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e392def68709e7be9327112032a4ad071ec86b2",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526281706,
            "hunks": 4,
            "message": "VertxHttpHeaders#add(CharSequence,CharSequence) does not used AsciiString cached hashcode value - fixes #2446",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "index 9d2620dde..084f3c336 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                "@@ -79,6 +79,6 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "   @Override",
                "-  public VertxHttpHeaders add(CharSequence name, Object value) {",
                "+  public VertxHttpHeaders add(CharSequence name, CharSequence value) {",
                "     int h = AsciiString.hashCode(name);",
                "     int i = index(h);",
                "-    add0(h, i, name, (CharSequence) value);",
                "+    add0(h, i, name, value);",
                "     return this;",
                "@@ -86,2 +86,7 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "+  @Override",
                "+  public VertxHttpHeaders add(CharSequence name, Object value) {",
                "+    return add(name, (CharSequence)value);",
                "+  }",
                "+",
                "   @Override",
                "@@ -367,7 +372,2 @@ public class VertxHttpHeaders extends HttpHeaders implements MultiMap {",
                "-  @Override",
                "-  public VertxHttpHeaders add(CharSequence name, CharSequence value) {",
                "-    return add(name.toString(), value.toString());",
                "-  }",
                "-",
                "   @Override"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2446": "Vert.x 3.5.4 umbrella issue vert-x3/issues#401"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2446",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "50898abc45cfa360dba887962c25db798a23729e",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529830326,
            "hunks": 2,
            "message": "HttpClient should behave according to the HTTP version returned by the server and not sent by the client - fixes #2514",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index 479915e72..95ce76efa 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -372,3 +372,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         String responseConnectionHeader = resp.headers().get(HttpHeaders.Names.CONNECTION);",
                "-        io.vertx.core.http.HttpVersion protocolVersion = conn.options.getProtocolVersion();",
                "+        io.netty.handler.codec.http.HttpVersion protocolVersion = resp.protocolVersion();",
                "         String requestConnectionHeader = request.headers().get(HttpHeaders.Names.CONNECTION);",
                "@@ -378,3 +378,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "           close = true;",
                "-        } else if (protocolVersion == io.vertx.core.http.HttpVersion.HTTP_1_0 && !HttpHeaders.Values.KEEP_ALIVE.equalsIgnoreCase(responseConnectionHeader)) {",
                "+        } else if (protocolVersion == io.netty.handler.codec.http.HttpVersion.HTTP_1_0 && !HttpHeaders.Values.KEEP_ALIVE.equalsIgnoreCase(responseConnectionHeader)) {",
                "           // In the HTTP/1.0 case both request/response need a keep-alive connection header the connection to be persistent"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2514": "Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "91868e1f7f66c377fb4da0fb720e51f0d9554405"
                ]
            ],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version, return",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2514",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ae34422122d5aaee0c9d7c35db7ac31ffb19197b",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529510833,
            "hunks": 62,
            "message": "Use Netty's HTTP header constants Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpHeaders.java b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "index 6e6d1ac03..f24b833e5 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpHeaders.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.http;",
                "+import io.netty.handler.codec.http.HttpHeaderNames;",
                "+import io.netty.handler.codec.http.HttpHeaderValues;",
                " import io.netty.util.AsciiString;",
                "@@ -29,3 +31,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCEPT = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCEPT);",
                "+  public static final CharSequence ACCEPT = createOptimized(HttpHeaderNames.ACCEPT.toString());",
                "@@ -34,3 +36,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCEPT_CHARSET = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCEPT_CHARSET);",
                "+  public static final CharSequence ACCEPT_CHARSET = createOptimized(HttpHeaderNames.ACCEPT_CHARSET.toString());",
                "@@ -39,3 +41,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCEPT_ENCODING = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCEPT_ENCODING);",
                "+  public static final CharSequence ACCEPT_ENCODING = createOptimized(HttpHeaderNames.ACCEPT_ENCODING.toString());",
                "@@ -44,3 +46,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCEPT_LANGUAGE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCEPT_LANGUAGE);",
                "+  public static final CharSequence ACCEPT_LANGUAGE = createOptimized(HttpHeaderNames.ACCEPT_LANGUAGE.toString());",
                "@@ -49,3 +51,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCEPT_RANGES = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCEPT_RANGES);",
                "+  public static final CharSequence ACCEPT_RANGES = createOptimized(HttpHeaderNames.ACCEPT_RANGES.toString());",
                "@@ -54,3 +56,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCEPT_PATCH = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCEPT_PATCH);",
                "+  public static final CharSequence ACCEPT_PATCH = createOptimized(HttpHeaderNames.ACCEPT_PATCH.toString());",
                "@@ -59,3 +61,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_ALLOW_CREDENTIALS = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS);",
                "+  public static final CharSequence ACCESS_CONTROL_ALLOW_CREDENTIALS = createOptimized(HttpHeaderNames.ACCESS_CONTROL_ALLOW_CREDENTIALS.toString());",
                "@@ -64,3 +66,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_ALLOW_HEADERS = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS);",
                "+  public static final CharSequence ACCESS_CONTROL_ALLOW_HEADERS = createOptimized(HttpHeaderNames.ACCESS_CONTROL_ALLOW_HEADERS.toString());",
                "@@ -69,3 +71,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_ALLOW_METHODS = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS);",
                "+  public static final CharSequence ACCESS_CONTROL_ALLOW_METHODS = createOptimized(HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS.toString());",
                "@@ -74,3 +76,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_ALLOW_ORIGIN = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);",
                "+  public static final CharSequence ACCESS_CONTROL_ALLOW_ORIGIN = createOptimized(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN.toString());",
                "@@ -79,3 +81,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_EXPOSE_HEADERS = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_EXPOSE_HEADERS);",
                "+  public static final CharSequence ACCESS_CONTROL_EXPOSE_HEADERS = createOptimized(HttpHeaderNames.ACCESS_CONTROL_EXPOSE_HEADERS.toString());",
                "@@ -84,3 +86,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_MAX_AGE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_MAX_AGE);",
                "+  public static final CharSequence ACCESS_CONTROL_MAX_AGE = createOptimized(HttpHeaderNames.ACCESS_CONTROL_MAX_AGE.toString());",
                "@@ -89,3 +91,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_REQUEST_HEADERS = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_REQUEST_HEADERS);",
                "+  public static final CharSequence ACCESS_CONTROL_REQUEST_HEADERS = createOptimized(HttpHeaderNames.ACCESS_CONTROL_REQUEST_HEADERS.toString());",
                "@@ -94,3 +96,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ACCESS_CONTROL_REQUEST_METHOD = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_REQUEST_METHOD);",
                "+  public static final CharSequence ACCESS_CONTROL_REQUEST_METHOD = createOptimized(HttpHeaderNames.ACCESS_CONTROL_REQUEST_METHOD.toString());",
                "@@ -99,3 +101,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence AGE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.AGE);",
                "+  public static final CharSequence AGE = createOptimized(HttpHeaderNames.AGE.toString());",
                "@@ -104,3 +106,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ALLOW = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ALLOW);",
                "+  public static final CharSequence ALLOW = createOptimized(HttpHeaderNames.ALLOW.toString());",
                "@@ -109,3 +111,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence AUTHORIZATION = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.AUTHORIZATION);",
                "+  public static final CharSequence AUTHORIZATION = createOptimized(HttpHeaderNames.AUTHORIZATION.toString());",
                "@@ -114,3 +116,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CACHE_CONTROL = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CACHE_CONTROL);",
                "+  public static final CharSequence CACHE_CONTROL = createOptimized(HttpHeaderNames.CACHE_CONTROL.toString());",
                "@@ -119,3 +121,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONNECTION = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONNECTION);",
                "+  public static final CharSequence CONNECTION = createOptimized(HttpHeaderNames.CONNECTION.toString());",
                "@@ -124,3 +126,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_BASE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_BASE);",
                "+  public static final CharSequence CONTENT_BASE = createOptimized(HttpHeaderNames.CONTENT_BASE.toString());",
                "@@ -129,3 +131,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_ENCODING = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_ENCODING);",
                "+  public static final CharSequence CONTENT_ENCODING = createOptimized(HttpHeaderNames.CONTENT_ENCODING.toString());",
                "@@ -134,3 +136,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_LANGUAGE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LANGUAGE);",
                "+  public static final CharSequence CONTENT_LANGUAGE = createOptimized(HttpHeaderNames.CONTENT_LANGUAGE.toString());",
                "@@ -139,3 +141,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_LENGTH = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LENGTH);",
                "+  public static final CharSequence CONTENT_LENGTH = createOptimized(HttpHeaderNames.CONTENT_LENGTH.toString());",
                "@@ -144,3 +146,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_LOCATION = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LOCATION);",
                "+  public static final CharSequence CONTENT_LOCATION = createOptimized(HttpHeaderNames.CONTENT_LOCATION.toString());",
                "@@ -149,3 +151,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_TRANSFER_ENCODING = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TRANSFER_ENCODING);",
                "+  public static final CharSequence CONTENT_TRANSFER_ENCODING = createOptimized(HttpHeaderNames.CONTENT_TRANSFER_ENCODING.toString());",
                "@@ -154,3 +156,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_MD5 = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_MD5);",
                "+  public static final CharSequence CONTENT_MD5 = createOptimized(HttpHeaderNames.CONTENT_MD5.toString());",
                "@@ -159,3 +161,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_RANGE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_RANGE);",
                "+  public static final CharSequence CONTENT_RANGE = createOptimized(HttpHeaderNames.CONTENT_RANGE.toString());",
                "@@ -164,3 +166,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTENT_TYPE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE);",
                "+  public static final CharSequence CONTENT_TYPE = createOptimized(HttpHeaderNames.CONTENT_TYPE.toString());",
                "@@ -169,3 +171,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence COOKIE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.COOKIE);",
                "+  public static final CharSequence COOKIE = createOptimized(HttpHeaderNames.COOKIE.toString());",
                "@@ -174,3 +176,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence DATE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.DATE);",
                "+  public static final CharSequence DATE = createOptimized(HttpHeaderNames.DATE.toString());",
                "@@ -179,3 +181,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ETAG = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ETAG);",
                "+  public static final CharSequence ETAG = createOptimized(HttpHeaderNames.ETAG.toString());",
                "@@ -184,3 +186,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence EXPECT = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.EXPECT);",
                "+  public static final CharSequence EXPECT = createOptimized(HttpHeaderNames.EXPECT.toString());",
                "@@ -189,3 +191,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence EXPIRES = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.EXPIRES);",
                "+  public static final CharSequence EXPIRES = createOptimized(HttpHeaderNames.EXPIRES.toString());",
                "@@ -194,3 +196,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence FROM = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.FROM);",
                "+  public static final CharSequence FROM = createOptimized(HttpHeaderNames.FROM.toString());",
                "@@ -199,3 +201,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence HOST = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.HOST);",
                "+  public static final CharSequence HOST = createOptimized(HttpHeaderNames.HOST.toString());",
                "@@ -204,3 +206,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence IF_MATCH = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.IF_MATCH);",
                "+  public static final CharSequence IF_MATCH = createOptimized(HttpHeaderNames.IF_MATCH.toString());",
                "@@ -209,3 +211,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence IF_MODIFIED_SINCE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.IF_MODIFIED_SINCE);",
                "+  public static final CharSequence IF_MODIFIED_SINCE = createOptimized(HttpHeaderNames.IF_MODIFIED_SINCE.toString());",
                "@@ -214,3 +216,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence IF_NONE_MATCH = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.IF_NONE_MATCH);",
                "+  public static final CharSequence IF_NONE_MATCH = createOptimized(HttpHeaderNames.IF_NONE_MATCH.toString());",
                "@@ -219,3 +221,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence LAST_MODIFIED = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.LAST_MODIFIED);",
                "+  public static final CharSequence LAST_MODIFIED = createOptimized(HttpHeaderNames.LAST_MODIFIED.toString());",
                "@@ -224,3 +226,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence LOCATION = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.LOCATION);",
                "+  public static final CharSequence LOCATION = createOptimized(HttpHeaderNames.LOCATION.toString());",
                "@@ -229,3 +231,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence ORIGIN = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.ORIGIN);",
                "+  public static final CharSequence ORIGIN = createOptimized(HttpHeaderNames.ORIGIN.toString());",
                "@@ -234,3 +236,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence PROXY_AUTHENTICATE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.PROXY_AUTHENTICATE);",
                "+  public static final CharSequence PROXY_AUTHENTICATE = createOptimized(HttpHeaderNames.PROXY_AUTHENTICATE.toString());",
                "@@ -239,3 +241,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence PROXY_AUTHORIZATION = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.PROXY_AUTHORIZATION);",
                "+  public static final CharSequence PROXY_AUTHORIZATION = createOptimized(HttpHeaderNames.PROXY_AUTHORIZATION.toString());",
                "@@ -244,3 +246,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence REFERER = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.REFERER);",
                "+  public static final CharSequence REFERER = createOptimized(HttpHeaderNames.REFERER.toString());",
                "@@ -249,3 +251,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence RETRY_AFTER = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.RETRY_AFTER);",
                "+  public static final CharSequence RETRY_AFTER = createOptimized(HttpHeaderNames.RETRY_AFTER.toString());",
                "@@ -254,3 +256,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence SERVER = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.SERVER);",
                "+  public static final CharSequence SERVER = createOptimized(HttpHeaderNames.SERVER.toString());",
                "@@ -259,3 +261,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence TRANSFER_ENCODING = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.TRANSFER_ENCODING);",
                "+  public static final CharSequence TRANSFER_ENCODING = createOptimized(HttpHeaderNames.TRANSFER_ENCODING.toString());",
                "@@ -264,3 +266,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence USER_AGENT = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.USER_AGENT);",
                "+  public static final CharSequence USER_AGENT = createOptimized(HttpHeaderNames.USER_AGENT.toString());",
                "@@ -269,3 +271,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence SET_COOKIE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Names.SET_COOKIE);",
                "+  public static final CharSequence SET_COOKIE = createOptimized(HttpHeaderNames.SET_COOKIE.toString());",
                "@@ -274,3 +276,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence APPLICATION_X_WWW_FORM_URLENCODED = createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED);",
                "+  public static final CharSequence APPLICATION_X_WWW_FORM_URLENCODED = createOptimized(HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED.toString());",
                "@@ -279,3 +281,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CHUNKED =  createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.CHUNKED);",
                "+  public static final CharSequence CHUNKED = createOptimized(HttpHeaderValues.CHUNKED.toString());",
                "   /**",
                "@@ -283,3 +285,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CLOSE =  createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.CLOSE);",
                "+  public static final CharSequence CLOSE = createOptimized(HttpHeaderValues.CLOSE.toString());",
                "@@ -288,3 +290,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence CONTINUE =  createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.CONTINUE);",
                "+  public static final CharSequence CONTINUE = createOptimized(HttpHeaderValues.CONTINUE.toString());",
                "@@ -293,3 +295,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence IDENTITY =  createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.IDENTITY);",
                "+  public static final CharSequence IDENTITY = createOptimized(HttpHeaderValues.IDENTITY.toString());",
                "   /**",
                "@@ -297,3 +299,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence KEEP_ALIVE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.KEEP_ALIVE);",
                "+  public static final CharSequence KEEP_ALIVE = createOptimized(HttpHeaderValues.KEEP_ALIVE.toString());",
                "@@ -302,3 +304,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence UPGRADE = createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.UPGRADE);",
                "+  public static final CharSequence UPGRADE = createOptimized(HttpHeaderValues.UPGRADE.toString());",
                "   /**",
                "@@ -306,3 +308,3 @@ public final class HttpHeaders {",
                "    */",
                "-  public static final CharSequence WEBSOCKET = createOptimized(io.netty.handler.codec.http.HttpHeaders.Values.WEBSOCKET);",
                "+  public static final CharSequence WEBSOCKET = createOptimized(HttpHeaderValues.WEBSOCKET.toString());",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index ab24bb892..237af0806 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -373,5 +373,5 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         // See https://tools.ietf.org/html/rfc7230#section-6.3",
                "-        String responseConnectionHeader = resp.headers().get(HttpHeaders.Names.CONNECTION);",
                "+        String responseConnectionHeader = resp.headers().get(HttpHeaderNames.CONNECTION);",
                "         io.netty.handler.codec.http.HttpVersion protocolVersion = resp.protocolVersion();",
                "-        String requestConnectionHeader = request.headers().get(HttpHeaders.Names.CONNECTION);",
                "+        String requestConnectionHeader = request.headers().get(HttpHeaderNames.CONNECTION);",
                "         // We don't need to protect against concurrent changes on forceClose as it only goes from false -> true",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "index 84bc9012f..3a6dfa481 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "@@ -14,3 +14,2 @@ package io.vertx.core.http.impl;",
                " import io.netty.handler.codec.http.*;",
                "-import io.netty.handler.codec.http.HttpHeaders;",
                " import io.netty.handler.codec.http.HttpMethod;",
                "@@ -437,3 +436,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "         if (decoder == null) {",
                "-          String contentType = request.headers().get(HttpHeaders.Names.CONTENT_TYPE);",
                "+          String contentType = request.headers().get(HttpHeaderNames.CONTENT_TYPE);",
                "           if (contentType != null) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpHeaders.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java, src/main/java/io/vertx/core/http/HttpHeaders.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "513b18b909a144b75ff755414cd0625150149a3d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527141754,
            "hunks": 5,
            "message": "Osgi support for issue 2126 (#2471) OSGi support for issue 2126",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "index 22b73f1c3..05b66d5a3 100644",
                "--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "@@ -124,17 +124,18 @@ public class FileResolver {",
                "         }",
                "+",
                "+        //https://github.com/eclipse/vert.x/issues/2126",
                "+        //Cache all elements in the parent directory if it exists",
                "+        //this is so that listing the directory after an individual file has",
                "+        //been read works.",
                "+        String parentFileName = file.getParent();",
                "+        if (parentFileName != null) {",
                "+          URL directoryContents = cl.getResource(parentFileName);",
                "+          if (directoryContents != null) {",
                "+            unpackUrlResource(directoryContents, parentFileName, cl, true);",
                "+          }",
                "+        }",
                "+",
                "         URL url = cl.getResource(fileName);",
                "         if (url != null) {",
                "-          String prot = url.getProtocol();",
                "-          switch (prot) {",
                "-            case \"file\":",
                "-              return unpackFromFileURL(url, fileName, cl);",
                "-            case \"jar\":",
                "-              return unpackFromJarURL(url, fileName, cl);",
                "-            case \"bundle\": // Apache Felix, Knopflerfish",
                "-            case \"bundleentry\": // Equinox",
                "-            case \"bundleresource\": // Equinox",
                "-              return unpackFromBundleURL(url);",
                "-            default:",
                "-              throw new IllegalStateException(\"Invalid url protocol: \" + prot);",
                "-          }",
                "+          return unpackUrlResource(url, fileName, cl, false);",
                "         }",
                "@@ -145,2 +146,19 @@ public class FileResolver {",
                "+  private File unpackUrlResource(URL url, String fileName, ClassLoader cl, boolean isDir) {",
                "+    String prot = url.getProtocol();",
                "+    switch (prot) {",
                "+      case \"file\":",
                "+        return unpackFromFileURL(url, fileName, cl);",
                "+      case \"jar\":",
                "+        return unpackFromJarURL(url, fileName, cl);",
                "+      case \"bundle\": // Apache Felix, Knopflerfish",
                "+      case \"bundleentry\": // Equinox",
                "+      case \"bundleresource\": // Equinox",
                "+        return unpackFromBundleURL(url, isDir);",
                "+      default:",
                "+        throw new IllegalStateException(\"Invalid url protocol: \" + prot);",
                "+    }",
                "+  }",
                "+",
                "+",
                "   private synchronized File unpackFromFileURL(URL url, String fileName, ClassLoader cl) {",
                "@@ -256,3 +274,3 @@ public class FileResolver {",
                "    */",
                "-  private synchronized File unpackFromBundleURL(URL url) {",
                "+  private synchronized File unpackFromBundleURL(URL url, boolean isDir) {",
                "     try {",
                "@@ -260,3 +278,3 @@ public class FileResolver {",
                "       file.getParentFile().mkdirs();",
                "-      if (url.toExternalForm().endsWith(\"/\")) {",
                "+      if (url.toExternalForm().endsWith(\"/\")  || isDir) {",
                "         // Directory"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/file/impl/FileResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2471": "Hydrate vert.x cache for directory on first access #2395"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "633f1a01ee9c01f7f90134d75b82228e0309a30b"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/file/impl/FileResolver.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2471",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "787e9c41df551ff4b62a2a812543d9ab07fe0a89",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530690320,
            "hunks": 3,
            "message": "Allow resource resolution as used by substrateVM Signed-off-by: Paulo Lopes <paulo@mlopes.net>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "index 05b66d5a3..2f5a98246 100644",
                "--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "@@ -15,3 +15,2 @@ import io.vertx.core.VertxException;",
                " import io.vertx.core.VertxOptions;",
                "-import io.vertx.core.file.impl.FileSystemImpl;",
                "@@ -156,2 +155,3 @@ public class FileResolver {",
                "       case \"bundleresource\": // Equinox",
                "+      case \"resource\":  // substratevm (graal native image)",
                "         return unpackFromBundleURL(url, isDir);",
                "@@ -304,2 +304,5 @@ public class FileResolver {",
                "     }",
                "+    if (cl == null) {",
                "+      cl = Object.class.getClassLoader();",
                "+    }",
                "     return cl;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/file/impl/FileResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "efc3b562715244a955df168f1c108fbae04c00e2"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/file/impl/FileResolver.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0f5d8a17c27c92287e5b68f791a8809291d69936",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1521735644,
            "hunks": 17,
            "message": "allow to store mutable objects in local map. fixes #2353 Signed-off-by: nolequen <nolequen@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/buffer/Buffer.java b/src/main/java/io/vertx/core/buffer/Buffer.java",
                "index f9e796a1e..bc86a03fd 100644",
                "--- a/src/main/java/io/vertx/core/buffer/Buffer.java",
                "+++ b/src/main/java/io/vertx/core/buffer/Buffer.java",
                "@@ -21,2 +21,3 @@ import io.vertx.core.json.JsonArray;",
                " import io.vertx.core.json.JsonObject;",
                "+import io.vertx.core.shareddata.Shareable;",
                " import io.vertx.core.shareddata.impl.ClusterSerializable;",
                "@@ -38,3 +39,3 @@ import java.nio.charset.Charset;",
                " @VertxGen",
                "-public interface Buffer extends ClusterSerializable {",
                "+public interface Buffer extends ClusterSerializable, Shareable {",
                "diff --git a/src/main/java/io/vertx/core/json/JsonArray.java b/src/main/java/io/vertx/core/json/JsonArray.java",
                "index f338c187c..ab9e07ba5 100644",
                "--- a/src/main/java/io/vertx/core/json/JsonArray.java",
                "+++ b/src/main/java/io/vertx/core/json/JsonArray.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.json;",
                " import io.vertx.core.buffer.Buffer;",
                "+import io.vertx.core.shareddata.Shareable;",
                " import io.vertx.core.shareddata.impl.ClusterSerializable;",
                "@@ -35,3 +36,3 @@ import static java.time.format.DateTimeFormatter.ISO_INSTANT;",
                "  */",
                "-public class JsonArray implements Iterable<Object>, ClusterSerializable {",
                "+public class JsonArray implements Iterable<Object>, ClusterSerializable, Shareable {",
                "@@ -573,2 +574,3 @@ public class JsonArray implements Iterable<Object>, ClusterSerializable {",
                "    */",
                "+  @Override",
                "   public JsonArray copy() {",
                "diff --git a/src/main/java/io/vertx/core/json/JsonObject.java b/src/main/java/io/vertx/core/json/JsonObject.java",
                "index 7c73a2fd3..c5509ec02 100644",
                "--- a/src/main/java/io/vertx/core/json/JsonObject.java",
                "+++ b/src/main/java/io/vertx/core/json/JsonObject.java",
                "@@ -14,2 +14,3 @@ import io.vertx.codegen.annotations.Fluent;",
                " import io.vertx.core.buffer.Buffer;",
                "+import io.vertx.core.shareddata.Shareable;",
                " import io.vertx.core.shareddata.impl.ClusterSerializable;",
                "@@ -36,3 +37,3 @@ import static java.time.format.DateTimeFormatter.ISO_INSTANT;",
                "  */",
                "-public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterSerializable {",
                "+public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterSerializable, Shareable {",
                "@@ -786,2 +787,3 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS",
                "    */",
                "+  @Override",
                "   public JsonObject copy() {",
                "diff --git a/src/main/java/io/vertx/core/shareddata/LocalMap.java b/src/main/java/io/vertx/core/shareddata/LocalMap.java",
                "index 05ee5afdb..16a4b6d3b 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/LocalMap.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/LocalMap.java",
                "@@ -26,4 +26,4 @@ import java.util.function.Function;",
                "  * <p>",
                "- * The map only allows immutable keys and values in the map, OR certain mutable objects such as {@link io.vertx.core.buffer.Buffer}",
                "- * instances which will be copied when they are added to the map.",
                "+ * By default the map allows immutable keys and values.",
                "+ * Custom keys and values should implement {@link Shareable} interface. The map returns their copies.",
                "  * <p>",
                "@@ -32,3 +32,2 @@ import java.util.function.Function;",
                "  * <p>",
                "- * Your own objects can be marked as immutable by implementing the {@link Shareable} interface.",
                "  *",
                "diff --git a/src/main/java/io/vertx/core/shareddata/Shareable.java b/src/main/java/io/vertx/core/shareddata/Shareable.java",
                "index 550613be0..0a7539643 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/Shareable.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/Shareable.java",
                "@@ -14,6 +14,5 @@ package io.vertx.core.shareddata;",
                " /**",
                "- * A marker interface which allows you to put arbitrary objects into a {@link io.vertx.core.shareddata.LocalMap}.",
                "+ * An interface which allows you to put arbitrary objects into a {@link io.vertx.core.shareddata.LocalMap}.",
                "  * <p>",
                "- * Normally local maps only allow immutable objects or other copiable objects such as {@link io.vertx.core.buffer.Buffer}",
                "- * instances in order to avoid shared access to mutable state.",
                "+ * Normally local maps only allow immutable or copiable objects in order to avoid shared access to mutable state.",
                "  * <p>",
                "@@ -22,2 +21,5 @@ package io.vertx.core.shareddata;",
                "  * <p>",
                "+ * Mutable object that you want to store in a {@link io.vertx.core.shareddata.LocalMap}",
                "+ * should override {@link Shareable#copy()} method.",
                "+ * <p>",
                "  * Use this interface with caution.",
                "@@ -28,2 +30,10 @@ package io.vertx.core.shareddata;",
                " public interface Shareable {",
                "+",
                "+  /**",
                "+   * Returns a copy of the object.",
                "+   * Only mutable objects should provide a custom implementation of the method.",
                "+   */",
                "+  default Shareable copy() {",
                "+    return this;",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/Checker.java b/src/main/java/io/vertx/core/shareddata/impl/Checker.java",
                "index 769b49d71..3c687ac69 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/Checker.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/Checker.java",
                "@@ -34,5 +34,2 @@ public class Checker {",
                "         obj instanceof byte[] ||",
                "-        obj instanceof Buffer ||",
                "-        obj instanceof JsonObject ||",
                "-        obj instanceof JsonArray ||",
                "         obj instanceof Shareable) {",
                "@@ -44,7 +41,3 @@ public class Checker {",
                "   static <T> T copyIfRequired(T obj) {",
                "-    if (obj instanceof JsonObject) {",
                "-      return (T)((JsonObject)obj).copy();",
                "-    } else if (obj instanceof JsonArray) {",
                "-      return (T) ((JsonArray) obj).copy();",
                "-    } else if (obj instanceof byte[]) {",
                "+    if (obj instanceof byte[]) {",
                "       //Copy it",
                "@@ -54,5 +47,4 @@ public class Checker {",
                "       return (T) copy;",
                "-    } else if (obj instanceof Buffer) {",
                "-      //Copy it",
                "-      return (T) ((Buffer) obj).copy();",
                "+    } else if (obj instanceof Shareable) {",
                "+      return (T) ((Shareable) obj).copy();",
                "     } else {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/buffer/Buffer.java",
                "src/main/java/io/vertx/core/json/JsonArray.java",
                "src/main/java/io/vertx/core/json/JsonObject.java",
                "src/main/java/io/vertx/core/shareddata/LocalMap.java",
                "src/main/java/io/vertx/core/shareddata/Shareable.java",
                "src/main/java/io/vertx/core/shareddata/impl/Checker.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2353": "Allow to store mutable objects in local map #2354"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/LocalMap.java, src/main/java/io/vertx/core/buffer/Buffer.java, src/main/java/io/vertx/core/json/JsonObject.java, src/main/java/io/vertx/core/shareddata/Shareable.java, src/main/java/io/vertx/core/json/JsonArray.java, src/main/java/io/vertx/core/shareddata/impl/Checker.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4e93a87708626d6a61eece967e8a88c9dc5f15b8",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526392566,
            "hunks": 2,
            "message": "Return null for JsonObject.mapFrom(null) - fixes #2450",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/json/JsonObject.java b/src/main/java/io/vertx/core/json/JsonObject.java",
                "index c5509ec02..804bf8013 100644",
                "--- a/src/main/java/io/vertx/core/json/JsonObject.java",
                "+++ b/src/main/java/io/vertx/core/json/JsonObject.java",
                "@@ -78,2 +78,4 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS",
                "    * Faster than calling `new JsonObject(Json.encode(obj))`.",
                "+   * <p/",
                "+   * Returns {@ode null} when {@code obj} is {@code null}.",
                "    *",
                "@@ -86,3 +88,7 @@ public class JsonObject implements Iterable<Map.Entry<String, Object>>, ClusterS",
                "   public static JsonObject mapFrom(Object obj) {",
                "-    return new JsonObject((Map<String, Object>) Json.mapper.convertValue(obj, Map.class));",
                "+    if (obj == null) {",
                "+      return null;",
                "+    } else {",
                "+      return new JsonObject((Map<String, Object>) Json.mapper.convertValue(obj, Map.class));",
                "+    }",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/json/JsonObject.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2450": "Return null for JsonObject.mapFrom(null) vert-x3/issues#370"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/json/JsonObject.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: return",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2450",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16ef94c3efbc7b161d5c2792bcc06b5c43adfe24",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523775412,
            "hunks": 25,
            "message": "Fix race condition in EventBus register/unregister on the same address - fixes #1531 The ConcurrentMap updates has been modified to use a compute operation in which the Handlers list is copied and updated. The compute operation ensures that there is no modification race, the Handlers list modification is side effect free and the copied list is safely published using final HandlerHolder array in the constructor. Since the HandlerHolder is not anymore accessible, the HandlerRegistration has been refactored so the HandlerHolder reference is kept instead on the HandlerRegistration where it replaces the registered boolean field instead. So now unregistration is done by providing the HandlerHolder instead of the HandlerRegistration reference. A test reproducing the issue has been added, the test performs intensive concurrency handler registration/unregistration of the same address by two threads",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "index 168450013..cb567557f 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "@@ -229,7 +229,8 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-  protected <T> void addRegistration(String address, HandlerRegistration<T> registration,",
                "+  protected <T> HandlerHolder<T> addRegistration(String address, HandlerRegistration<T> registration,",
                "                                      boolean replyHandler, boolean localOnly) {",
                "     Objects.requireNonNull(registration.getHandler(), \"handler\");",
                "-    boolean newAddress = addLocalRegistration(address, registration, replyHandler, localOnly);",
                "-    addRegistration(newAddress, address, replyHandler, localOnly, registration::setResult);",
                "+    LocalRegistrationResult result = addLocalRegistration(address, registration, replyHandler, localOnly);",
                "+    addRegistration(result.newAddress, address, replyHandler, localOnly, registration::setResult);",
                "+    return result.holder;",
                "   }",
                "@@ -242,4 +243,13 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-  protected <T> boolean addLocalRegistration(String address, HandlerRegistration<T> registration,",
                "-                                             boolean replyHandler, boolean localOnly) {",
                "+  private static class LocalRegistrationResult<T> {",
                "+    final HandlerHolder<T> holder;",
                "+    final boolean newAddress;",
                "+    public LocalRegistrationResult(HandlerHolder<T> holder, boolean newAddress) {",
                "+      this.holder = holder;",
                "+      this.newAddress = newAddress;",
                "+    }",
                "+  }",
                "+",
                "+  private <T> LocalRegistrationResult addLocalRegistration(String address, HandlerRegistration<T> registration,",
                "+                                                           boolean replyHandler, boolean localOnly) {",
                "     Objects.requireNonNull(address, \"address\");",
                "@@ -254,16 +264,6 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-    boolean newAddress = false;",
                "-",
                "-    HandlerHolder holder = new HandlerHolder<>(metrics, registration, replyHandler, localOnly, context);",
                "+    HandlerHolder<T> holder = new HandlerHolder<>(metrics, registration, replyHandler, localOnly, context);",
                "-    Handlers handlers = handlerMap.get(address);",
                "-    if (handlers == null) {",
                "-      handlers = new Handlers();",
                "-      Handlers prevHandlers = handlerMap.putIfAbsent(address, handlers);",
                "-      if (prevHandlers != null) {",
                "-        handlers = prevHandlers;",
                "-      }",
                "-      newAddress = true;",
                "-    }",
                "-    handlers.list.add(holder);",
                "+    Handlers handlers = new Handlers(holder);",
                "+    Handlers actual = handlerMap.merge(address, handlers, (prev, current) -> prev.add(current.first()));",
                "@@ -274,8 +274,9 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-    return newAddress;",
                "+    boolean newAddress = handlers == actual;",
                "+    return new LocalRegistrationResult<>(holder, newAddress);",
                "   }",
                "-  protected <T> void removeRegistration(String address, HandlerRegistration<T> handler, Handler<AsyncResult<Void>> completionHandler) {",
                "-    HandlerHolder holder = removeLocalRegistration(address, handler);",
                "-    removeRegistration(holder, address, completionHandler);",
                "+  protected <T> void removeRegistration(HandlerHolder<T> holder, Handler<AsyncResult<Void>> completionHandler) {",
                "+    boolean last = removeLocalRegistration(holder);",
                "+    removeRegistration(last ? holder : null, holder.getHandler().address(), completionHandler);",
                "   }",
                "@@ -287,26 +288,14 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-  protected <T> HandlerHolder removeLocalRegistration(String address, HandlerRegistration<T> handler) {",
                "-    Handlers handlers = handlerMap.get(address);",
                "-    HandlerHolder lastHolder = null;",
                "-    if (handlers != null) {",
                "-      synchronized (handlers) {",
                "-        int size = handlers.list.size();",
                "-        // Requires a list traversal. This is tricky to optimise since we can't use a set since",
                "-        // we need fast ordered traversal for the round robin",
                "-        for (int i = 0; i < size; i++) {",
                "-          HandlerHolder holder = handlers.list.get(i);",
                "-          if (holder.getHandler() == handler) {",
                "-            handlers.list.remove(i);",
                "-            holder.setRemoved();",
                "-            if (handlers.list.isEmpty()) {",
                "-              handlerMap.remove(address);",
                "-              lastHolder = holder;",
                "-            }",
                "-            holder.getContext().removeCloseHook(new HandlerEntry<>(address, holder.getHandler()));",
                "-            break;",
                "-          }",
                "-        }",
                "+  private <T> boolean removeLocalRegistration(HandlerHolder<T> holder) {",
                "+    String address = holder.getHandler().address();",
                "+    boolean last = handlerMap.compute(address, (key, val) -> {",
                "+      if (val == null) {",
                "+        return null;",
                "       }",
                "+      return val.remove(holder);",
                "+    }) == null;",
                "+    if (holder.setRemoved()) {",
                "+      holder.getContext().removeCloseHook(new HandlerEntry<>(address, holder.getHandler()));",
                "     }",
                "-    return lastHolder;",
                "+    return last;",
                "   }",
                "@@ -393,5 +382,5 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "         if (metrics != null) {",
                "-          metrics.messageReceived(msg.address(), !msg.isSend(), isMessageLocal(msg), handlers.list.size());",
                "+          metrics.messageReceived(msg.address(), !msg.isSend(), isMessageLocal(msg), handlers.size());",
                "         }",
                "-        for (HandlerHolder holder: handlers.list) {",
                "+        for (HandlerHolder holder: handlers) {",
                "           deliverToHandler(msg, holder);",
                "@@ -512,3 +501,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     for (Handlers handlers: handlerMap.values()) {",
                "-      for (HandlerHolder holder: handlers.list) {",
                "+      for (HandlerHolder holder: handlers) {",
                "         holder.getHandler().unregister();",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/HandlerHolder.java b/src/main/java/io/vertx/core/eventbus/impl/HandlerHolder.java",
                "index d15933026..73a2c2862 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/HandlerHolder.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/HandlerHolder.java",
                "@@ -38,4 +38,4 @@ public class HandlerHolder<T> {",
                "   // We use a synchronized block to protect removed as it can be unregistered from a different thread",
                "-  public void setRemoved() {",
                "-    boolean unregisterMetric = false;",
                "+  public boolean setRemoved() {",
                "+    boolean unregistered = false;",
                "     synchronized (this) {",
                "@@ -43,8 +43,9 @@ public class HandlerHolder<T> {",
                "         removed = true;",
                "-        unregisterMetric = true;",
                "+        unregistered = true;",
                "       }",
                "     }",
                "-    if (metrics != null && unregisterMetric) {",
                "+    if (metrics != null && unregistered) {",
                "       metrics.handlerUnregistered(handler.getMetric());",
                "     }",
                "+    return unregistered;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java b/src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java",
                "index cc97365ca..f66b0e919 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java",
                "@@ -50,3 +50,3 @@ public class HandlerRegistration<T> implements MessageConsumer<T>, Handler<Messa",
                "   private long timeoutID = -1;",
                "-  private boolean registered;",
                "+  private HandlerHolder<T> registered;",
                "   private Handler<Message<T>> handler;",
                "@@ -143,5 +143,6 @@ public class HandlerRegistration<T> implements MessageConsumer<T>, Handler<Messa",
                "     }",
                "-    if (registered) {",
                "-      registered = false;",
                "-      eventBus.removeRegistration(address, this, completionHandler);",
                "+    HandlerHolder<T> holder = registered;",
                "+    if (holder != null) {",
                "+      registered = null;",
                "+      eventBus.removeRegistration(holder, completionHandler);",
                "     } else {",
                "@@ -262,6 +263,5 @@ public class HandlerRegistration<T> implements MessageConsumer<T>, Handler<Messa",
                "     this.handler = handler;",
                "-    if (this.handler != null && !registered) {",
                "-      registered = true;",
                "-      eventBus.addRegistration(address, this, repliedAddress != null, localOnly);",
                "-    } else if (this.handler == null && registered) {",
                "+    if (this.handler != null && registered == null) {",
                "+      registered = eventBus.addRegistration(address, this, repliedAddress != null, localOnly);",
                "+    } else if (this.handler == null && registered != null) {",
                "       // This will set registered to false",
                "@@ -279,3 +279,3 @@ public class HandlerRegistration<T> implements MessageConsumer<T>, Handler<Messa",
                "   public synchronized boolean isRegistered() {",
                "-    return registered;",
                "+    return registered != null;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/Handlers.java b/src/main/java/io/vertx/core/eventbus/impl/Handlers.java",
                "index d9a1d4564..3a0d66640 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/Handlers.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/Handlers.java",
                "@@ -13,4 +13,3 @@ package io.vertx.core.eventbus.impl;",
                "-import java.util.List;",
                "-import java.util.concurrent.CopyOnWriteArrayList;",
                "+import java.util.*;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "@@ -20,6 +19,43 @@ import java.util.concurrent.atomic.AtomicInteger;",
                "  */",
                "-public class Handlers {",
                "+public class Handlers implements Iterable<HandlerHolder> {",
                "-  private final AtomicInteger pos = new AtomicInteger(0);",
                "-  public final List<HandlerHolder> list = new CopyOnWriteArrayList<>();",
                "+  private final AtomicInteger pos;",
                "+  private final HandlerHolder[] elements;",
                "+",
                "+  Handlers(HandlerHolder holder) {",
                "+    this(new AtomicInteger(0), new HandlerHolder[]{holder});",
                "+  }",
                "+",
                "+  private Handlers(AtomicInteger pos, HandlerHolder[] elements) {",
                "+    this.pos = pos;",
                "+    this.elements = elements;",
                "+  }",
                "+",
                "+  HandlerHolder first() {",
                "+    return elements[0];",
                "+  }",
                "+",
                "+  Handlers add(HandlerHolder holder) {",
                "+    int len = elements.length;",
                "+    HandlerHolder[] copy = Arrays.copyOf(elements, len + 1);",
                "+    copy[len] = holder;",
                "+    return new Handlers(pos, copy);",
                "+  }",
                "+",
                "+  Handlers remove(HandlerHolder holder) {",
                "+    int len = elements.length;",
                "+    for (int i = 0;i < len;i++) {",
                "+      if (holder == elements[i]) {",
                "+        if (len > 1) {",
                "+          HandlerHolder[] copy = new HandlerHolder[len - 1];",
                "+          System.arraycopy(elements,0, copy, 0, i);",
                "+          System.arraycopy(elements, i + 1, copy, i, len - i - 1);",
                "+          return new Handlers(pos, copy);",
                "+        } else {",
                "+          return null;",
                "+        }",
                "+      }",
                "+    }",
                "+    return this;",
                "+  }",
                "@@ -27,3 +63,3 @@ public class Handlers {",
                "     while (true) {",
                "-      int size = list.size();",
                "+      int size = elements.length;",
                "       if (size == 0) {",
                "@@ -36,4 +72,4 @@ public class Handlers {",
                "       try {",
                "-        return list.get(p);",
                "-      } catch (IndexOutOfBoundsException e) {",
                "+        return elements[p];",
                "+      } catch (ArrayIndexOutOfBoundsException e) {",
                "         // Can happen",
                "@@ -43,2 +79,11 @@ public class Handlers {",
                "   }",
                "+",
                "+  public int size() {",
                "+    return elements.length;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterator<HandlerHolder> iterator() {",
                "+    return Arrays.asList(elements).iterator();",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "src/main/java/io/vertx/core/eventbus/impl/HandlerHolder.java",
                "src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java",
                "src/main/java/io/vertx/core/eventbus/impl/Handlers.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1531": "Fix race condition in handler registration update #2392"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/eventbus/impl/HandlerHolder.java, src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java, src/main/java/io/vertx/core/eventbus/impl/Handlers.java, src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue, form",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1531",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "45faf61b3b3839cd59956dc7164125f873d22043",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528920466,
            "hunks": 35,
            "message": "Provide implementation for issue #2376 Signed-off-by: KowalczykBartek <bkowalczyyk@gmail.com>",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index 5ff4427fa..9381082e5 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -98,2 +98,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"idleTimeoutUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setIdleTimeoutUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"jdkSslEngineOptions\":",
                "@@ -278,2 +283,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+    if (obj.getIdleTimeoutUnit() != null) {",
                "+      json.put(\"idleTimeoutUnit\", obj.getIdleTimeoutUnit().name());",
                "+    }",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index 4b5021c49..ed8a913c4 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -53,2 +53,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"idleTimeoutUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setIdleTimeoutUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"jdkSslEngineOptions\":",
                "@@ -168,2 +173,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+    if (obj.getIdleTimeoutUnit() != null) {",
                "+      json.put(\"idleTimeoutUnit\", obj.getIdleTimeoutUnit().name());",
                "+    }",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientOptions.java b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "index aaa3e00e8..87b99e94f 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "@@ -23,2 +23,3 @@ import java.util.List;",
                " import java.util.Set;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -356,2 +357,8 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  @Override",
                "+  public HttpClientOptions setIdleTimeoutUnit(TimeUnit idleTimeoutUnit) {",
                "+    super.setIdleTimeoutUnit(idleTimeoutUnit);",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerOptions.java b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "index f88b0ce38..1960e8c6e 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "@@ -21,2 +21,3 @@ import io.vertx.core.net.*;",
                " import java.util.*;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -255,2 +256,8 @@ public class HttpServerOptions extends NetServerOptions {",
                "+  @Override",
                "+  public HttpServerOptions setIdleTimeoutUnit(TimeUnit idleTimeoutUnit) {",
                "+    super.setIdleTimeoutUnit(idleTimeoutUnit);",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index b2c532392..ae6a1c05c 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -199,3 +199,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     if (client.getOptions().getIdleTimeout() > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "+      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "     }",
                "@@ -218,3 +218,4 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     if (client.getOptions().getIdleTimeout() > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, client.getOptions().getIdleTimeout()));",
                "+      HttpClientOptions options = client.getOptions();",
                "+      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 0efdee2fb..757b443fe 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -292,3 +292,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "                   if (options.getIdleTimeout() > 0) {",
                "-                    pipeline.addLast(\"idle\", idle = new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "+                    pipeline.addLast(\"idle\", idle = new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "                   } else {",
                "@@ -442,3 +442,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     if (options.getIdleTimeout() > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "+      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "     }",
                "@@ -494,3 +494,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     if (options.getIdleTimeout() > 0) {",
                "-      pipeline.addBefore(\"handler\", \"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "+      pipeline.addBefore(\"handler\", \"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/net/ClientOptionsBase.java b/src/main/java/io/vertx/core/net/ClientOptionsBase.java",
                "index 35360592b..48d2a365c 100755",
                "--- a/src/main/java/io/vertx/core/net/ClientOptionsBase.java",
                "+++ b/src/main/java/io/vertx/core/net/ClientOptionsBase.java",
                "@@ -18,2 +18,3 @@ import io.vertx.core.json.JsonObject;",
                " import java.util.Objects;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -228,2 +229,7 @@ public abstract class ClientOptionsBase extends TCPSSLOptions {",
                "+  @Override",
                "+  public ClientOptionsBase setIdleTimeoutUnit(TimeUnit idleTimeoutUnit) {",
                "+    return (ClientOptionsBase) super.setIdleTimeoutUnit(idleTimeoutUnit);",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/net/NetClientOptions.java b/src/main/java/io/vertx/core/net/NetClientOptions.java",
                "index 8c87d7999..d2c4c74b3 100755",
                "--- a/src/main/java/io/vertx/core/net/NetClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/net/NetClientOptions.java",
                "@@ -19,2 +19,3 @@ import java.util.Objects;",
                " import java.util.Set;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -145,2 +146,8 @@ public class NetClientOptions extends ClientOptionsBase {",
                "+  @Override",
                "+  public NetClientOptions setIdleTimeoutUnit(TimeUnit idleTimeoutUnit) {",
                "+    super.setIdleTimeoutUnit(idleTimeoutUnit);",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java",
                "index bfa6b6cbe..7066a8bf9 100755",
                "--- a/src/main/java/io/vertx/core/net/NetServerOptions.java",
                "+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java",
                "@@ -19,2 +19,3 @@ import io.vertx.core.json.JsonObject;",
                " import java.util.Set;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -165,2 +166,8 @@ public class NetServerOptions extends TCPSSLOptions {",
                "+  @Override",
                "+  public NetServerOptions setIdleTimeoutUnit(TimeUnit idleTimeoutUnit) {",
                "+    super.setIdleTimeoutUnit(idleTimeoutUnit);",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/net/TCPSSLOptions.java b/src/main/java/io/vertx/core/net/TCPSSLOptions.java",
                "index 73aa5e013..46fd7fff5 100755",
                "--- a/src/main/java/io/vertx/core/net/TCPSSLOptions.java",
                "+++ b/src/main/java/io/vertx/core/net/TCPSSLOptions.java",
                "@@ -19,2 +19,3 @@ import io.vertx.core.json.JsonObject;",
                " import java.util.*;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -58,2 +59,7 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "+  /**",
                "+   * Default idle time unit = SECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT = TimeUnit.SECONDS;",
                "+",
                "   /**",
                "@@ -97,2 +103,3 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "   private int idleTimeout;",
                "+  private TimeUnit idleTimeoutUnit;",
                "   private boolean ssl;",
                "@@ -130,2 +137,3 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "     this.idleTimeout = other.getIdleTimeout();",
                "+    this.idleTimeoutUnit = other.getIdleTimeoutUnit() != null ? other.getIdleTimeoutUnit() : DEFAULT_IDLE_TIMEOUT_TIME_UNIT;",
                "     this.ssl = other.isSsl();",
                "@@ -172,2 +180,3 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "     idleTimeout = DEFAULT_IDLE_TIMEOUT;",
                "+    idleTimeoutUnit = DEFAULT_IDLE_TIMEOUT_TIME_UNIT;",
                "     ssl = DEFAULT_SSL;",
                "@@ -262,5 +271,7 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "   /**",
                "-   * Set the idle timeout, in seconds. zero means don't timeout.",
                "+   * Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "    * This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "    *",
                "+   * If you want change default time unit, use {@link #setIdleTimeoutUnit(TimeUnit)}",
                "+   *",
                "    * @param idleTimeout  the timeout, in seconds",
                "@@ -277,3 +288,3 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "   /**",
                "-   * @return  the idle timeout, in seconds",
                "+   * @return the idle timeout, in time unit specified by {@link #getIdleTimeoutUnit()}.",
                "    */",
                "@@ -283,2 +294,20 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "+  /**",
                "+   * Set the idle timeout unit. If not specified, default is seconds.",
                "+   *",
                "+   * @param idleTimeoutUnit specify time unit.",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public TCPSSLOptions setIdleTimeoutUnit(TimeUnit idleTimeoutUnit) {",
                "+    this.idleTimeoutUnit = idleTimeoutUnit;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the idle timeout unit.",
                "+   */",
                "+  public TimeUnit getIdleTimeoutUnit() {",
                "+    return idleTimeoutUnit;",
                "+  }",
                "+",
                "   /**",
                "@@ -696,2 +725,3 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "     if (idleTimeout != that.idleTimeout) return false;",
                "+    if (idleTimeoutUnit != null ? !idleTimeoutUnit.equals(that.idleTimeoutUnit) : that.idleTimeoutUnit != null) return false;",
                "     if (soLinger != that.soLinger) return false;",
                "@@ -728,2 +758,3 @@ public abstract class TCPSSLOptions extends NetworkOptions {",
                "     result = 31 * result + idleTimeout;",
                "+    result = 31 * result + (idleTimeoutUnit != null ? idleTimeoutUnit.hashCode() : 0);",
                "     result = 31 * result + (ssl ? 1 : 0);",
                "diff --git a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "index 76ef51537..a62e6310b 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "@@ -40,2 +40,3 @@ import java.util.Objects;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -51,2 +52,3 @@ public class NetClientImpl implements MetricsProvider, NetClient {",
                "   protected final int idleTimeout;",
                "+  private final TimeUnit idleTimeoutUnit;",
                "   protected final boolean logEnabled;",
                "@@ -89,2 +91,3 @@ public class NetClientImpl implements MetricsProvider, NetClient {",
                "     idleTimeout = options.getIdleTimeout();",
                "+    idleTimeoutUnit = options.getIdleTimeoutUnit();",
                "   }",
                "@@ -100,3 +103,3 @@ public class NetClientImpl implements MetricsProvider, NetClient {",
                "     if (idleTimeout > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, idleTimeout));",
                "+      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, idleTimeout, idleTimeoutUnit));",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/net/impl/NetServerImpl.java b/src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
                "index 03a1418a5..85c791388 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
                "@@ -143,3 +143,3 @@ public class NetServerImpl implements Closeable, MetricsProvider, NetServer {",
                "     if (options.getIdleTimeout() > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "+      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "     }"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "src/main/java/io/vertx/core/net/ClientOptionsBase.java",
                "src/main/java/io/vertx/core/net/NetClientOptions.java",
                "src/main/java/io/vertx/core/net/NetServerOptions.java",
                "src/main/java/io/vertx/core/net/TCPSSLOptions.java",
                "src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "src/main/java/io/vertx/core/net/impl/NetServerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2376": "Provide implementation for issue #2376 #2479 Provide implementation for issue #2376 #2499"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/java/io/vertx/core/net/impl/NetServerImpl.java, src/main/java/io/vertx/core/net/ClientOptionsBase.java, src/main/java/io/vertx/core/net/NetServerOptions.java, src/main/java/io/vertx/core/http/HttpServerOptions.java, src/main/java/io/vertx/core/net/impl/NetClientImpl.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/java/io/vertx/core/net/NetClientOptions.java, src/main/java/io/vertx/core/http/impl/HttpServerImpl.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java, src/main/java/io/vertx/core/http/HttpClientOptions.java, src/main/java/io/vertx/core/net/TCPSSLOptions.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2376",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6be4522f5345f017c1a1aae655cca6c43f913ed5",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530256563,
            "hunks": 2,
            "message": "HttpServer does not clean the channel pipeline after HTTP/1 upgrade to H2C - fixes #2519",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 8f3c78759..69027b56e 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -985,3 +985,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "                 } else {",
                "-                  iterator.remove();",
                "+                  pipeline.remove(handler.getKey());",
                "                 }",
                "@@ -990,2 +990,5 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "             }",
                "+          } else {",
                "+            // We might have left over buffer sent when removing the HTTP decoder that needs to be propagated to the HTTP handler",
                "+            super.channelRead(ctx, msg);",
                "           }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2519": "HTTP/2 is not working in Vert.x 3.5.2 Version, when 2 requests are sent vert-x3/issues#387 Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fc8b443a8b6a2e87a28935e4346775a647f64785"
                ],
                [
                    "no-tag",
                    "44b36ef496fb6021603495a76e1347952af35a6b"
                ]
            ],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2519",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5cbc74362e095f2ddc45b28e0987ed7d447ab3db",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530088439,
            "hunks": 16,
            "message": "Disable HttpClient TCP idle timeout when connection is in the pool - fixes #2517",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index 95ce76efa..c1ba2687a 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -111,2 +111,7 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "+  @Override",
                "+  public ChannelHandlerContext channelHandlerContext() {",
                "+    return chctx;",
                "+  }",
                "+",
                "   Object endpointMetric() {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "index fe56e2b18..8dec372d9 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "@@ -62,2 +62,7 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "+  @Override",
                "+  public ChannelHandlerContext channelHandlerContext() {",
                "+    return chctx;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                "index 6856db9bd..466ec37a1 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                "@@ -53,2 +53,7 @@ public class Http2UpgradedClientConnection implements HttpClientConnection {",
                "+  @Override",
                "+  public ChannelHandlerContext channelHandlerContext() {",
                "+    return current.channelHandlerContext();",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index 1e52efeaf..6e7ae69f1 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -102,2 +102,18 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "+  @Override",
                "+  public void activate(HttpClientConnection conn) {",
                "+    if (options.getIdleTimeout() > 0) {",
                "+      ChannelPipeline pipeline = conn.channelHandlerContext().pipeline();",
                "+      pipeline.addBefore(\"handler\", \"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void deactivate(HttpClientConnection conn) {",
                "+    if (options.getIdleTimeout() > 0) {",
                "+      ChannelPipeline pipeline = conn.channelHandlerContext().pipeline();",
                "+      pipeline.remove(\"idle\");",
                "+    }",
                "+  }",
                "+",
                "   private void doConnect(",
                "@@ -192,5 +208,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "   private void applyHttp2ConnectionOptions(ChannelPipeline pipeline) {",
                "-    if (client.getOptions().getIdleTimeout() > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "-    }",
                "+    // No specific options",
                "   }",
                "@@ -211,5 +225,2 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     }",
                "-    if (client.getOptions().getIdleTimeout() > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, client.getOptions().getIdleTimeout()));",
                "-    }",
                "   }",
                "@@ -262,6 +273,6 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     try {",
                "-      VertxHttp2ConnectionHandler<Http2ClientConnection> handler = Http2ClientConnection.createHttp2ConnectionHandler(client, metric, listener, context, (conn, concurrency) -> {",
                "+      VertxHttp2ConnectionHandler<Http2ClientConnection> clientHandler = Http2ClientConnection.createHttp2ConnectionHandler(client, metric, listener, context, (conn, concurrency) -> {",
                "         future.complete(new ConnectResult<>(conn, concurrency, ch, context, http2Weight));",
                "       });",
                "-      ch.pipeline().addLast(handler);",
                "+      ch.pipeline().addLast(\"handler\", clientHandler);",
                "       ch.flush();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java b/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "index 496b2caaf..e1e21947c 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.http.impl;",
                " import io.netty.channel.Channel;",
                "+import io.netty.channel.ChannelHandlerContext;",
                " import io.vertx.core.AsyncResult;",
                "@@ -26,2 +27,4 @@ interface HttpClientConnection extends HttpConnection {",
                "+  ChannelHandlerContext channelHandlerContext();",
                "+",
                "   void close();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "index e83278574..c557a634e 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "@@ -33,2 +33,16 @@ public interface ConnectionProvider<C> {",
                "+  /**",
                "+   * Callback before the connection becomes used (at least one usage).",
                "+   *",
                "+   * @param conn the connection",
                "+   */",
                "+  void activate(C conn);",
                "+",
                "+  /**",
                "+   * Callback before the connection becomes unused (no usage).",
                "+   *",
                "+   * @param conn the connection",
                "+   */",
                "+  void deactivate(C conn);",
                "+",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index b189f916b..44a60cdae 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -184,3 +184,4 @@ public class Pool<C> {",
                "       Holder<C> conn = available.peek();",
                "-      if (--conn.capacity == 0) {",
                "+      long capacity = conn.capacity--;",
                "+      if (capacity == 1) {",
                "         conn.expirationTimestamp = -1L;",
                "@@ -189,6 +190,7 @@ public class Pool<C> {",
                "       ContextImpl ctx = conn.context;",
                "+      waitersCount--;",
                "+      if (capacity == conn.concurrency) {",
                "+        connector.activate(conn.connection);",
                "+      }",
                "       ctx.nettyEventLoop().execute(() -> {",
                "-        synchronized (Pool.this) {",
                "-          waitersCount--;",
                "-        }",
                "         waiter.handler.handle(Future.succeededFuture(conn.connection));",
                "@@ -308,2 +310,3 @@ public class Pool<C> {",
                "           }",
                "+          connector.activate(holder.connection);",
                "         }",
                "@@ -371,2 +374,5 @@ public class Pool<C> {",
                "       conn.capacity = newCapacity;",
                "+      if (newCapacity == conn.concurrency) {",
                "+        connector.deactivate(conn.connection);",
                "+      }",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2517": "Disable HttpClient TCP idle timeout when connection is in the pool - \u2026 #2518 Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3df5412fef340efdaf170e4a12d161cb2a187e9d"
                ]
            ],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpClientConnection.java, src/main/java/io/vertx/core/http/impl/pool/Pool.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java, src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java, src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2517",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4751549d81712bf38e3aa1f8376f04df263b3e3c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528229143,
            "hunks": 5,
            "message": "FutureImpl shall release the handler after completion - fixes #2490",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/FutureImpl.java b/src/main/java/io/vertx/core/impl/FutureImpl.java",
                "index 089968dd7..7dbcf4550 100644",
                "--- a/src/main/java/io/vertx/core/impl/FutureImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/FutureImpl.java",
                "@@ -18,2 +18,3 @@ import io.vertx.core.Handler;",
                " class FutureImpl<T> implements Future<T>, Handler<AsyncResult<T>> {",
                "+",
                "   private boolean failed;",
                "@@ -71,4 +72,6 @@ class FutureImpl<T> implements Future<T>, Handler<AsyncResult<T>> {",
                "     synchronized (this) {",
                "-      this.handler = handler;",
                "       callHandler = isComplete();",
                "+      if (!callHandler) {",
                "+        this.handler = handler;",
                "+      }",
                "     }",
                "@@ -118,2 +121,3 @@ class FutureImpl<T> implements Future<T>, Handler<AsyncResult<T>> {",
                "       h = handler;",
                "+      handler = null;",
                "     }",
                "@@ -162,2 +166,3 @@ class FutureImpl<T> implements Future<T>, Handler<AsyncResult<T>> {",
                "       h = handler;",
                "+      handler = null;",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/FutureImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2490": "Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1db7623927338caea94f13cdb3be58b17f915ee4"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/FutureImpl.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2490",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9cc130fc6daff3ef89818d7b59309c2c0f05ce67",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528985566,
            "hunks": 6,
            "message": "Websocket client and server don't send back close frame in closing handshake - fixes #2486",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index 540231a3c..bb340f7ba 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -354,4 +354,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "           protected void handleMessage(NetSocketImpl connection, Object msg) {",
                "-            ByteBuf buf = (ByteBuf) msg;",
                "-            connection.handleMessageReceived(buf);",
                "+            connection.handleMessageReceived(msg);",
                "           }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "index 61ff4a5ed..ab61fdf57 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "@@ -16,2 +16,3 @@ import io.netty.channel.ChannelHandlerContext;",
                " import io.netty.handler.codec.http.HttpObject;",
                "+import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;",
                " import io.netty.handler.codec.http.websocketx.PongWebSocketFrame;",
                "@@ -111,3 +112,4 @@ class Http1xClientHandler extends VertxHttpHandler<Http1xClientConnection> {",
                "             // This is specified in the WebSockets RFC 6455 Section  5.4.1",
                "-            chctx.writeAndFlush(frame).addListener(ChannelFutureListener.CLOSE);",
                "+            CloseWebSocketFrame closeFrame = new CloseWebSocketFrame(frame.closeStatusCode(), frame.closeReason());",
                "+            chctx.writeAndFlush(closeFrame).addListener(ChannelFutureListener.CLOSE);",
                "             closeFrameSent = true;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index 85ca1748d..7d16ab354 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -293,4 +293,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "       protected void handleMessage(NetSocketImpl connection, Object msg) {",
                "-        ByteBuf buf = (ByteBuf) msg;",
                "-        connection.handleMessageReceived(buf);",
                "+        connection.handleMessageReceived(msg);",
                "       }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 8f9a921c0..0efdee2fb 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -40,6 +40,3 @@ import io.netty.handler.codec.http.HttpResponseStatus;",
                " import io.netty.handler.codec.http.LastHttpContent;",
                "-import io.netty.handler.codec.http.websocketx.PongWebSocketFrame;",
                "-import io.netty.handler.codec.http.websocketx.WebSocketHandshakeException;",
                "-import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;",
                "-import io.netty.handler.codec.http.websocketx.WebSocketVersion;",
                "+import io.netty.handler.codec.http.websocketx.*;",
                " import io.netty.handler.codec.http2.*;",
                "@@ -698,3 +695,4 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "               // This is specified in the WebSockets RFC 6455 Section  5.4.1",
                "-              ch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);",
                "+              CloseWebSocketFrame closeFrame = new CloseWebSocketFrame(wsFrame.closeStatusCode(), wsFrame.closeReason());",
                "+              ch.writeAndFlush(closeFrame).addListener(ChannelFutureListener.CLOSE);",
                "               closeFrameSent = true;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2486": "Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "27895678c0c90c607fd2491adfdf5dc72ac8607d"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/HttpServerImpl.java, src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2486",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "80235176fb1666e19a01ed46592fe8e58ef4f166",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528912067,
            "hunks": 6,
            "message": "Fixes #2484 Internal references to local Locks taken using SharedData.getLock() are not cleaned up Refactored local locks implementation to avoid keeping references to lock with no waiters. Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/AsynchronousLock.java b/src/main/java/io/vertx/core/shareddata/impl/AsynchronousLock.java",
                "deleted file mode 100644",
                "index 33da694e2..000000000",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/AsynchronousLock.java",
                "+++ /dev/null",
                "@@ -1,106 +0,0 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * This program and the accompanying materials are made available under the",
                "- * terms of the Eclipse Public License 2.0 which is available at",
                "- * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "- * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "- *",
                "- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "- */",
                "-",
                "-package io.vertx.core.shareddata.impl;",
                "-",
                "-import io.vertx.core.*;",
                "-import io.vertx.core.shareddata.Lock;",
                "-",
                "-import java.util.LinkedList;",
                "-import java.util.Queue;",
                "-",
                "-/**",
                "- * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "- */",
                "-public class AsynchronousLock implements Lock {",
                "-",
                "-  private final Vertx vertx;",
                "-  private final Queue<LockWaiter> waiters = new LinkedList<>();",
                "-  private boolean owned;",
                "-",
                "-  public AsynchronousLock(Vertx vertx) {",
                "-    this.vertx = vertx;",
                "-  }",
                "-",
                "-  public void acquire(long timeout, Handler<AsyncResult<Lock>> resultHandler) {",
                "-    Context context = vertx.getOrCreateContext();",
                "-    doAcquire(context, timeout, resultHandler);",
                "-  }",
                "-",
                "-  @Override",
                "-  public synchronized void release() {",
                "-    LockWaiter waiter = pollWaiters();",
                "-    if (waiter != null) {",
                "-      waiter.acquire(this);",
                "-    } else {",
                "-      owned = false;",
                "-    }",
                "-  }",
                "-",
                "-  public void doAcquire(Context context, long timeout, Handler<AsyncResult<Lock>> resultHandler) {",
                "-    synchronized (this) {",
                "-      if (!owned) {",
                "-        // We now have the lock",
                "-        owned = true;",
                "-        lockAcquired(context, resultHandler);",
                "-      } else {",
                "-        waiters.add(new LockWaiter(this, context, timeout, resultHandler));",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private void lockAcquired(Context context, Handler<AsyncResult<Lock>> resultHandler) {",
                "-    context.runOnContext(v -> resultHandler.handle(Future.succeededFuture(this)));",
                "-  }",
                "-",
                "-  private LockWaiter pollWaiters() {",
                "-    while (true) {",
                "-      LockWaiter waiter = waiters.poll();",
                "-      if (waiter == null) {",
                "-        return null;",
                "-      } else if (!waiter.timedOut) {",
                "-        return waiter;",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private static class LockWaiter {",
                "-    final AsynchronousLock lock;",
                "-    final Context context;",
                "-    final Handler<AsyncResult<Lock>> resultHandler;",
                "-    volatile boolean timedOut;",
                "-    volatile boolean acquired;",
                "-",
                "-    LockWaiter(AsynchronousLock lock, Context context, long timeout, Handler<AsyncResult<Lock>> resultHandler) {",
                "-      this.lock = lock;",
                "-      this.context = context;",
                "-      this.resultHandler = resultHandler;",
                "-      if (timeout != Long.MAX_VALUE) {",
                "-        context.owner().setTimer(timeout, tid -> timedOut());",
                "-      }",
                "-    }",
                "-",
                "-    void timedOut() {",
                "-      synchronized (lock) {",
                "-        if (!acquired) {",
                "-          timedOut = true;",
                "-          context.runOnContext(v -> resultHandler.handle(Future.failedFuture(new VertxException(\"Timed out waiting to get lock\"))));",
                "-        }",
                "-      }",
                "-    }",
                "-",
                "-    void acquire(AsynchronousLock lock) {",
                "-      acquired = true;",
                "-      lock.lockAcquired(context, resultHandler);",
                "-    }",
                "-",
                "-  }",
                "-}",
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "new file mode 100644",
                "index 000000000..03b80ec12",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "@@ -0,0 +1,117 @@",
                "+/*",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+",
                "+package io.vertx.core.shareddata.impl;",
                "+",
                "+import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Context;",
                "+import io.vertx.core.Future;",
                "+import io.vertx.core.Handler;",
                "+import io.vertx.core.shareddata.Lock;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentMap;",
                "+import java.util.concurrent.atomic.AtomicBoolean;",
                "+import java.util.concurrent.atomic.AtomicReference;",
                "+",
                "+/**",
                "+ * @author Thomas Segismont",
                "+ */",
                "+public class LocalAsyncLocks {",
                "+",
                "+  private enum Status {WAITING, ACQUIRED, TIMED_OUT}",
                "+",
                "+  private class LockWaiter {",
                "+",
                "+    final Context context;",
                "+    final String lockName;",
                "+    final Handler<AsyncResult<Lock>> handler;",
                "+    final AtomicReference<Status> status;",
                "+    final Long timerId;",
                "+",
                "+    LockWaiter(Context context, String lockName, long timeout, Handler<AsyncResult<Lock>> handler) {",
                "+      this.context = context;",
                "+      this.lockName = lockName;",
                "+      this.handler = handler;",
                "+      status = new AtomicReference<>(Status.WAITING);",
                "+      timerId = timeout != Long.MAX_VALUE ? context.owner().setTimer(timeout, tid -> timeout()) : null;",
                "+    }",
                "+",
                "+    boolean isWaiting() {",
                "+      return status.get() == Status.WAITING;",
                "+    }",
                "+",
                "+    void timeout() {",
                "+      if (status.compareAndSet(Status.WAITING, Status.TIMED_OUT)) {",
                "+        handler.handle(Future.failedFuture(\"Timed out waiting to get lock\"));",
                "+      }",
                "+    }",
                "+",
                "+    void acquireLock() {",
                "+      if (status.compareAndSet(Status.WAITING, Status.ACQUIRED)) {",
                "+        if (timerId != null) {",
                "+          context.owner().cancelTimer(timerId);",
                "+        }",
                "+        context.runOnContext(v -> handler.handle(Future.succeededFuture(new AsyncLock(lockName))));",
                "+      } else {",
                "+        context.runOnContext(v -> nextWaiter(lockName));",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private class AsyncLock implements Lock {",
                "+    final String lockName;",
                "+    final AtomicBoolean invoked = new AtomicBoolean();",
                "+",
                "+    AsyncLock(String lockName) {",
                "+      this.lockName = lockName;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void release() {",
                "+      if (invoked.compareAndSet(false, true)) {",
                "+        nextWaiter(lockName);",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  // Value should never be modified",
                "+  private final ConcurrentMap<String, List<LockWaiter>> waitersMap = new ConcurrentHashMap<>();",
                "+",
                "+  public void acquire(Context context, String name, long timeout, Handler<AsyncResult<Lock>> handler) {",
                "+    LockWaiter lockWaiter = new LockWaiter(context, name, timeout, handler);",
                "+    List<LockWaiter> waiters = waitersMap.compute(name, (s, list) -> {",
                "+      List<LockWaiter> result;",
                "+      if (list != null) {",
                "+        result = new ArrayList<>(list.size() + 1);",
                "+        result.addAll(list);",
                "+      } else {",
                "+        result = new ArrayList<>(1);",
                "+      }",
                "+      result.add(lockWaiter);",
                "+      return result;",
                "+    });",
                "+    if (waiters.size() == 1) {",
                "+      waiters.get(0).acquireLock();",
                "+    }",
                "+  }",
                "+",
                "+  private void nextWaiter(String lockName) {",
                "+    List<LockWaiter> waiters = waitersMap.compute(lockName, (s, list) -> {",
                "+      return list == null || list.size() == 1 ? null : new ArrayList<>(list.subList(1, list.size()));",
                "+    });",
                "+    if (waiters != null) {",
                "+      waiters.get(0).acquireLock();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java b/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java",
                "index 27ba70174..c359332a4 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java",
                "@@ -43,4 +43,4 @@ public class SharedDataImpl implements SharedData {",
                "   private final ClusterManager clusterManager;",
                "+  private final LocalAsyncLocks localAsyncLocks;",
                "   private final ConcurrentMap<String, LocalAsyncMapImpl<?, ?>> localAsyncMaps = new ConcurrentHashMap<>();",
                "-  private final ConcurrentMap<String, AsynchronousLock> localLocks = new ConcurrentHashMap<>();",
                "   private final ConcurrentMap<String, Counter> localCounters = new ConcurrentHashMap<>();",
                "@@ -51,2 +51,3 @@ public class SharedDataImpl implements SharedData {",
                "     this.clusterManager = clusterManager;",
                "+    localAsyncLocks = clusterManager == null ? new LocalAsyncLocks() : null;",
                "   }",
                "@@ -134,4 +135,3 @@ public class SharedDataImpl implements SharedData {",
                "   private void getLocalLock(String name, long timeout, Handler<AsyncResult<Lock>> resultHandler) {",
                "-    AsynchronousLock lock = localLocks.computeIfAbsent(name, n -> new AsynchronousLock(vertx));",
                "-    lock.acquire(timeout, resultHandler);",
                "+    localAsyncLocks.acquire(vertx.getOrCreateContext(), name, timeout, resultHandler);",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/impl/AsynchronousLock.java",
                "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2484": "Internal references to local Locks taken using SharedData.getLock() are not cleaned up #2501 Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "65de1c905351a41f42826fa10f4182050eb360d7"
                ]
            ],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java, src/main/java/io/vertx/core/shareddata/impl/AsynchronousLock.java, src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2484",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bc4a14fa3fd89b329ef4747f13b32d09962b7d01",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525338922,
            "hunks": 1,
            "message": "Few renames and headers updates",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "index 006dc4a9e..1d6d91196 100644",
                "--- a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "+++ b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "  *"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c0c5033e4d78d00c04f549e215ad6379e73f0383",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523361073,
            "hunks": 1,
            "message": "Fix @return documentation of JsonArray.getJsonObject Signed-off-by: Julian Ladisch <eclipse.org-rtn@ladisch.de>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/json/JsonArray.java b/src/main/java/io/vertx/core/json/JsonArray.java",
                "index 640a0af33..f338c187c 100644",
                "--- a/src/main/java/io/vertx/core/json/JsonArray.java",
                "+++ b/src/main/java/io/vertx/core/json/JsonArray.java",
                "@@ -172,3 +172,3 @@ public class JsonArray implements Iterable<Object>, ClusterSerializable {",
                "    * @param pos  the position in the array",
                "-   * @return  the Integer, or null if a null value present",
                "+   * @return  the JsonObject, or null if a null value present",
                "    * @throws java.lang.ClassCastException if the value cannot be converted to JsonObject"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/json/JsonArray.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/json/JsonArray.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: return",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8b584bb47a7c601513c14a678de49a3c9d2b4d30",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532511198,
            "hunks": 2,
            "message": "move resources under `META-INF/vertx` in order to simplify the usage of SVM",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/Starter.java b/src/main/java/io/vertx/core/Starter.java",
                "index 2e71c931c..0ce217f3b 100644",
                "--- a/src/main/java/io/vertx/core/Starter.java",
                "+++ b/src/main/java/io/vertx/core/Starter.java",
                "@@ -460,3 +460,3 @@ public class Starter {",
                "   public String getVersion() {",
                "-    try (InputStream is = getClass().getClassLoader().getResourceAsStream(\"vertx-version.txt\")) {",
                "+    try (InputStream is = getClass().getClassLoader().getResourceAsStream(\"META-INF/vertx/vertx-version.txt\")) {",
                "       if (is == null) {",
                "diff --git a/src/main/java/io/vertx/core/impl/launcher/commands/VersionCommand.java b/src/main/java/io/vertx/core/impl/launcher/commands/VersionCommand.java",
                "index a9df6d593..3fdafe1fc 100644",
                "--- a/src/main/java/io/vertx/core/impl/launcher/commands/VersionCommand.java",
                "+++ b/src/main/java/io/vertx/core/impl/launcher/commands/VersionCommand.java",
                "@@ -53,3 +53,3 @@ public class VersionCommand extends DefaultCommand {",
                "     }",
                "-    try (InputStream is = VersionCommand.class.getClassLoader().getResourceAsStream(\"vertx-version.txt\")) {",
                "+    try (InputStream is = VersionCommand.class.getClassLoader().getResourceAsStream(\"META-INF/vertx/vertx-version.txt\")) {",
                "       if (is == null) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/Starter.java",
                "src/main/java/io/vertx/core/impl/launcher/commands/VersionCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/launcher/commands/VersionCommand.java, src/main/java/io/vertx/core/Starter.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "37f281bee87f212e80dd5b5520cef0ff7bad56fb",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526826448,
            "hunks": 10,
            "message": "Simplify the worker executor close, the actual code before change was looking like it might be a leak and it's actually not, and also make sure we remove the close hooks when the worker executor is closed - fixes #2464",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index c07a2afa9..e23fb8415 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -1007,3 +1007,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "         if (--refCount == 0) {",
                "-          releaseWorkerExecutor(name);",
                "+          namedWorkerPools.remove(name);",
                "           super.close();",
                "@@ -1046,3 +1046,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     ContextImpl context = getOrCreateContext();",
                "-    WorkerExecutorImpl namedExec = new WorkerExecutorImpl(this, sharedWorkerPool, true);",
                "+    WorkerExecutorImpl namedExec = new WorkerExecutorImpl(context, sharedWorkerPool);",
                "     context.addCloseHook(namedExec);",
                "@@ -1051,6 +1051,2 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-  synchronized void releaseWorkerExecutor(String name) {",
                "-    namedWorkerPools.remove(name);",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java b/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java",
                "index bfe2b71b9..0d041e966 100644",
                "--- a/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java",
                "@@ -13,6 +13,3 @@ package io.vertx.core.impl;",
                "-import io.vertx.core.AsyncResult;",
                "-import io.vertx.core.Future;",
                "-import io.vertx.core.Handler;",
                "-import io.vertx.core.Vertx;",
                "+import io.vertx.core.*;",
                " import io.vertx.core.spi.metrics.Metrics;",
                "@@ -26,11 +23,9 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "-  private final Vertx vertx;",
                "-  private final WorkerPool pool;",
                "+  private final Context ctx;",
                "+  private final VertxImpl.SharedWorkerPool pool;",
                "   private boolean closed;",
                "-  private final boolean releaseOnClose;",
                "-  public WorkerExecutorImpl(Vertx vertx, WorkerPool pool, boolean releaseOnClose) {",
                "-    this.vertx = vertx;",
                "+  public WorkerExecutorImpl(Context ctx, VertxImpl.SharedWorkerPool pool) {",
                "+    this.ctx = ctx;",
                "     this.pool = pool;",
                "-    this.releaseOnClose = releaseOnClose;",
                "   }",
                "@@ -50,3 +45,3 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "   public Vertx vertx() {",
                "-    return vertx;",
                "+    return ctx.owner();",
                "   }",
                "@@ -62,3 +57,3 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "     }",
                "-    ContextImpl context = (ContextImpl) vertx.getOrCreateContext();",
                "+    ContextImpl context = (ContextImpl) ctx.owner().getOrCreateContext();",
                "     context.executeBlocking(blockingCodeHandler, asyncResultHandler, pool.executor(), ordered ? context.orderedTasks : null, pool.metrics());",
                "@@ -75,5 +70,4 @@ class WorkerExecutorImpl implements MetricsProvider, WorkerExecutorInternal {",
                "     }",
                "-    if (releaseOnClose && pool instanceof VertxImpl.SharedWorkerPool) {",
                "-      ((VertxImpl.SharedWorkerPool)pool).release();",
                "-    }",
                "+    ctx.removeCloseHook(this);",
                "+    pool.release();",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/VertxImpl.java",
                "src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2464": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ec08c0719784ace6909866e31b817e15ac71d00c"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/WorkerExecutorImpl.java, src/main/java/io/vertx/core/impl/VertxImpl.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2464",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0f21366a95baf832b6b315b7c7d3e01e65ea7932",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1531214233,
            "hunks": 1,
            "message": "HttpClient must use the http scheme for non SSL connections - fixes #2533",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "index 8dec372d9..83ec0b593 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "@@ -338,3 +338,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "         h.path(uri);",
                "-        h.scheme(\"https\");",
                "+        h.scheme(conn.isSSL() ? \"https\" : \"http\");",
                "         if (hostHeader != null) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2533": "HttpClient must use the http scheme for non SSL connections vert-x3/issues#390 Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6b05a2decaf32e24b734ac47207185f6f39ea1fa"
                ]
            ],
            "tags": [
                "3.5.3",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2533",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4d01348e4daac62f9936d046e63055c92d4f01a6",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529424449,
            "hunks": 54,
            "message": "Remove deprecation warnings Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "index adc41a5fa..7a92709ed 100644",
                "--- a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "+++ b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "@@ -16,2 +16,3 @@ import io.netty.channel.ChannelHandlerContext;",
                " import io.netty.channel.ChannelOption;",
                "+import io.netty.channel.MaxMessagesRecvByteBufAllocator;",
                " import io.netty.channel.socket.DatagramChannel;",
                "@@ -20,3 +21,2 @@ import io.netty.channel.socket.InternetProtocolFamily;",
                " import io.netty.handler.logging.LoggingHandler;",
                "-import io.netty.util.NetUtil;",
                " import io.vertx.core.AsyncResult;",
                "@@ -34,10 +34,9 @@ import io.vertx.core.net.impl.SocketAddressImpl;",
                " import io.vertx.core.net.impl.transport.Transport;",
                "-import io.vertx.core.spi.metrics.DatagramSocketMetrics;",
                "-import io.vertx.core.spi.metrics.Metrics;",
                "-import io.vertx.core.spi.metrics.MetricsProvider;",
                "-import io.vertx.core.spi.metrics.NetworkMetrics;",
                "-import io.vertx.core.spi.metrics.VertxMetrics;",
                "+import io.vertx.core.spi.metrics.*;",
                " import io.vertx.core.streams.WriteStream;",
                "-import java.net.*;",
                "+import java.net.InetAddress;",
                "+import java.net.InetSocketAddress;",
                "+import java.net.NetworkInterface;",
                "+import java.net.UnknownHostException;",
                " import java.util.Objects;",
                "@@ -72,3 +71,4 @@ public class DatagramSocketImpl implements DatagramSocket, MetricsProvider {",
                "     channel.config().setOption(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);",
                "-    channel.config().setMaxMessagesPerRead(1);",
                "+    MaxMessagesRecvByteBufAllocator bufAllocator = channel.config().getRecvByteBufAllocator();",
                "+    bufAllocator.maxMessagesPerRead(1);",
                "     context.nettyEventLoop().register(channel);",
                "diff --git a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "index b5a7736e5..2afe7f5ce 100644",
                "--- a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "@@ -13,17 +13,6 @@ package io.vertx.core.dns.impl;",
                "-import io.netty.channel.ChannelFutureListener;",
                "-import io.netty.channel.ChannelHandlerContext;",
                "-import io.netty.channel.ChannelOption;",
                "-import io.netty.channel.EventLoop;",
                "-import io.netty.channel.SimpleChannelInboundHandler;",
                "+import io.netty.channel.*;",
                " import io.netty.channel.socket.DatagramChannel;",
                " import io.netty.channel.socket.InternetProtocolFamily;",
                "-import io.netty.handler.codec.dns.DatagramDnsQuery;",
                "-import io.netty.handler.codec.dns.DatagramDnsQueryEncoder;",
                "-import io.netty.handler.codec.dns.DatagramDnsResponseDecoder;",
                "-import io.netty.handler.codec.dns.DefaultDnsQuestion;",
                "-import io.netty.handler.codec.dns.DnsRecord;",
                "-import io.netty.handler.codec.dns.DnsRecordType;",
                "-import io.netty.handler.codec.dns.DnsResponse;",
                "-import io.netty.handler.codec.dns.DnsSection;",
                "+import io.netty.handler.codec.dns.*;",
                " import io.netty.handler.logging.LoggingHandler;",
                "@@ -31,13 +20,5 @@ import io.netty.util.collection.IntObjectHashMap;",
                " import io.netty.util.collection.IntObjectMap;",
                "-import io.vertx.core.AsyncResult;",
                "-import io.vertx.core.Future;",
                "-import io.vertx.core.Handler;",
                "-import io.vertx.core.Vertx;",
                "-import io.vertx.core.VertxException;",
                "-import io.vertx.core.dns.DnsClient;",
                "-import io.vertx.core.dns.DnsClientOptions;",
                "-import io.vertx.core.dns.DnsException;",
                "+import io.vertx.core.*;",
                "+import io.vertx.core.dns.*;",
                " import io.vertx.core.dns.DnsResponseCode;",
                "-import io.vertx.core.dns.MxRecord;",
                "-import io.vertx.core.dns.SrvRecord;",
                " import io.vertx.core.dns.impl.decoder.RecordDecoder;",
                "@@ -77,3 +58,3 @@ public final class DnsClientImpl implements DnsClient {",
                "     this.options = new DnsClientOptions(options);",
                "-    ",
                "+",
                "     ContextInternal creatingContext = vertx.getContext();",
                "@@ -93,3 +74,4 @@ public final class DnsClientImpl implements DnsClient {",
                "     channel.config().setOption(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);",
                "-    channel.config().setMaxMessagesPerRead(1);",
                "+    MaxMessagesRecvByteBufAllocator bufAllocator = channel.config().getRecvByteBufAllocator();",
                "+    bufAllocator.maxMessagesPerRead(1);",
                "     channel.config().setAllocator(PartialPooledByteBufAllocator.INSTANCE);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/AssembledHttpRequest.java b/src/main/java/io/vertx/core/http/impl/AssembledHttpRequest.java",
                "index 437e2ee9f..9b5d5a039 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/AssembledHttpRequest.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/AssembledHttpRequest.java",
                "@@ -16,8 +16,3 @@ import io.netty.handler.codec.DecoderResult;",
                " import io.netty.handler.codec.UnsupportedMessageTypeException;",
                "-import io.netty.handler.codec.http.DefaultHttpContent;",
                "-import io.netty.handler.codec.http.HttpContent;",
                "-import io.netty.handler.codec.http.HttpHeaders;",
                "-import io.netty.handler.codec.http.HttpMethod;",
                "-import io.netty.handler.codec.http.HttpRequest;",
                "-import io.netty.handler.codec.http.HttpVersion;",
                "+import io.netty.handler.codec.http.*;",
                "@@ -94,3 +89,3 @@ class AssembledHttpRequest implements HttpContent, HttpRequest {",
                "   public HttpMethod getMethod() {",
                "-    return request.getMethod();",
                "+    return request.method();",
                "   }",
                "@@ -104,3 +99,3 @@ class AssembledHttpRequest implements HttpContent, HttpRequest {",
                "   public String getUri() {",
                "-    return request.getUri();",
                "+    return request.uri();",
                "   }",
                "@@ -124,3 +119,3 @@ class AssembledHttpRequest implements HttpContent, HttpRequest {",
                "   public HttpVersion getProtocolVersion() {",
                "-    return request.getProtocolVersion();",
                "+    return request.protocolVersion();",
                "   }",
                "@@ -144,3 +139,3 @@ class AssembledHttpRequest implements HttpContent, HttpRequest {",
                "   public DecoderResult getDecoderResult() {",
                "-    return request.getDecoderResult();",
                "+    return request.decoderResult();",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HeadersAdaptor.java b/src/main/java/io/vertx/core/http/impl/HeadersAdaptor.java",
                "index 59d1c167e..611b0682d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HeadersAdaptor.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HeadersAdaptor.java",
                "@@ -124,3 +124,3 @@ public class HeadersAdaptor implements MultiMap {",
                "   public Iterator<Map.Entry<String, String>> iterator() {",
                "-    return headers.iterator();",
                "+    return headers.iteratorAsString();",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index 18fd8bc6d..ab24bb892 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -14,3 +14,6 @@ package io.vertx.core.http.impl;",
                " import io.netty.buffer.ByteBuf;",
                "-import io.netty.channel.*;",
                "+import io.netty.channel.ChannelHandler;",
                "+import io.netty.channel.ChannelHandlerContext;",
                "+import io.netty.channel.ChannelInboundHandlerAdapter;",
                "+import io.netty.channel.ChannelPipeline;",
                " import io.netty.handler.codec.DecoderResult;",
                "@@ -41,9 +44,3 @@ import java.util.Queue;",
                "-import static io.vertx.core.http.HttpHeaders.ACCEPT_ENCODING;",
                "-import static io.vertx.core.http.HttpHeaders.CLOSE;",
                "-import static io.vertx.core.http.HttpHeaders.CONNECTION;",
                "-import static io.vertx.core.http.HttpHeaders.DEFLATE_GZIP;",
                "-import static io.vertx.core.http.HttpHeaders.HOST;",
                "-import static io.vertx.core.http.HttpHeaders.KEEP_ALIVE;",
                "-import static io.vertx.core.http.HttpHeaders.TRANSFER_ENCODING;",
                "+import static io.vertx.core.http.HttpHeaders.*;",
                "@@ -380,6 +377,6 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         // We don't need to protect against concurrent changes on forceClose as it only goes from false -> true",
                "-        if (HttpHeaders.Values.CLOSE.equalsIgnoreCase(responseConnectionHeader) || HttpHeaders.Values.CLOSE.equalsIgnoreCase(requestConnectionHeader)) {",
                "+        if (HttpHeaderValues.CLOSE.contentEqualsIgnoreCase(responseConnectionHeader) || HttpHeaderValues.CLOSE.contentEqualsIgnoreCase(requestConnectionHeader)) {",
                "           // In all cases, if we have a close connection option then we SHOULD NOT treat the connection as persistent",
                "           close = true;",
                "-        } else if (protocolVersion == io.netty.handler.codec.http.HttpVersion.HTTP_1_0 && !HttpHeaders.Values.KEEP_ALIVE.equalsIgnoreCase(responseConnectionHeader)) {",
                "+        } else if (protocolVersion == io.netty.handler.codec.http.HttpVersion.HTTP_1_0 && !HttpHeaderValues.KEEP_ALIVE.contentEqualsIgnoreCase(responseConnectionHeader)) {",
                "           // In the HTTP/1.0 case both request/response need a keep-alive connection header the connection to be persistent",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "index b592ef58a..5b6e5e29d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "@@ -86,3 +86,3 @@ public class Http1xServerHandler extends VertxHttpHandler<Http1xServerConnection",
                "-    if (request.getMethod() != HttpMethod.GET) {",
                "+    if (request.method() != HttpMethod.GET) {",
                "       HttpServerImpl.sendError(null, METHOD_NOT_ALLOWED, ch);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 7e9967702..fd105ae1f 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -16,9 +16,3 @@ import io.netty.buffer.ByteBuf;",
                " import io.netty.buffer.Unpooled;",
                "-import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelFutureListener;",
                "-import io.netty.channel.ChannelHandler;",
                "-import io.netty.channel.ChannelHandlerContext;",
                "-import io.netty.channel.ChannelInboundHandlerAdapter;",
                "-import io.netty.channel.ChannelInitializer;",
                "-import io.netty.channel.ChannelPipeline;",
                "+import io.netty.channel.*;",
                " import io.netty.channel.group.ChannelGroup;",
                "@@ -26,18 +20,7 @@ import io.netty.channel.group.ChannelGroupFuture;",
                " import io.netty.channel.group.DefaultChannelGroup;",
                "-import io.netty.handler.codec.http.DefaultFullHttpRequest;",
                "-import io.netty.handler.codec.http.DefaultFullHttpResponse;",
                "-import io.netty.handler.codec.http.FullHttpRequest;",
                "-import io.netty.handler.codec.http.FullHttpResponse;",
                "-import io.netty.handler.codec.http.HttpContent;",
                "-import io.netty.handler.codec.http.HttpContentDecompressor;",
                "-import io.netty.handler.codec.http.HttpHeaderNames;",
                "-import io.netty.handler.codec.http.HttpHeaderValues;",
                "-import io.netty.handler.codec.http.HttpHeaders;",
                "+import io.netty.handler.codec.http.*;",
                " import io.netty.handler.codec.http.HttpMethod;",
                "-import io.netty.handler.codec.http.HttpRequest;",
                "-import io.netty.handler.codec.http.HttpRequestDecoder;",
                "-import io.netty.handler.codec.http.HttpResponseStatus;",
                "-import io.netty.handler.codec.http.LastHttpContent;",
                " import io.netty.handler.codec.http.websocketx.*;",
                " import io.netty.handler.codec.http2.*;",
                "+import io.netty.handler.codec.http2.Http2Settings;",
                " import io.netty.handler.logging.LoggingHandler;",
                "@@ -55,8 +38,4 @@ import io.vertx.core.Handler;",
                " import io.vertx.core.buffer.Buffer;",
                "-import io.vertx.core.http.HttpConnection;",
                "-import io.vertx.core.http.HttpServer;",
                "-import io.vertx.core.http.HttpServerOptions;",
                "-import io.vertx.core.http.HttpServerRequest;",
                "+import io.vertx.core.http.*;",
                " import io.vertx.core.http.HttpVersion;",
                "-import io.vertx.core.http.ServerWebSocket;",
                " import io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler;",
                "@@ -87,3 +66,3 @@ import java.util.stream.Collectors;",
                " import static io.netty.handler.codec.http.HttpResponseStatus.*;",
                "-import static io.netty.handler.codec.http.HttpVersion.*;",
                "+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;",
                " import static io.vertx.core.spi.metrics.Metrics.METRICS_ENABLED;",
                "@@ -645,3 +624,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "-        if (log.isTraceEnabled()) log.trace(\"Server received request: \" + request.getUri());",
                "+        if (log.isTraceEnabled()) log.trace(\"Server received request: \" + request.uri());",
                "@@ -659,3 +638,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "-          if (request.getMethod() != HttpMethod.GET) {",
                "+          if (request.method() != HttpMethod.GET) {",
                "             handshakeErrorStatus = METHOD_NOT_ALLOWED;",
                "@@ -669,3 +648,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "             } else {",
                "-              wsRequest = new DefaultFullHttpRequest(request.getProtocolVersion(), request.getMethod(), request.getUri());",
                "+              wsRequest = new DefaultFullHttpRequest(request.protocolVersion(), request.method(), request.uri());",
                "               wsRequest.headers().set(request.headers());",
                "@@ -741,5 +720,5 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "         try {",
                "-          theURI = new URI(request.getUri());",
                "+          theURI = new URI(request.uri());",
                "         } catch (URISyntaxException e2) {",
                "-          throw new IllegalArgumentException(\"Invalid uri \" + request.getUri()); //Should never happen",
                "+          throw new IllegalArgumentException(\"Invalid uri \" + request.uri()); //Should never happen",
                "         }",
                "@@ -795,5 +774,5 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "       resp.content().writeBytes(err.toString().getBytes(CharsetUtil.UTF_8));",
                "-      HttpHeaders.setContentLength(resp, err.length());",
                "+      HttpUtil.setContentLength(resp, err.length());",
                "     } else {",
                "-      HttpHeaders.setContentLength(resp, 0);",
                "+      HttpUtil.setContentLength(resp, 0);",
                "     }",
                "@@ -810,5 +789,5 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     }",
                "-    URI uri = new URI(req.getUri());",
                "+    URI uri = new URI(req.uri());",
                "     String path = uri.getRawPath();",
                "-    String loc =  prefix + HttpHeaders.getHost(req) + path;",
                "+    String loc = prefix + req.headers().get(HttpHeaderNames.HOST) + path;",
                "     String query = uri.getRawQuery();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "index 4386c9629..84bc9012f 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "@@ -14,2 +14,4 @@ package io.vertx.core.http.impl;",
                " import io.netty.handler.codec.http.*;",
                "+import io.netty.handler.codec.http.HttpHeaders;",
                "+import io.netty.handler.codec.http.HttpMethod;",
                " import io.netty.handler.codec.http.multipart.Attribute;",
                "@@ -22,9 +24,4 @@ import io.vertx.core.MultiMap;",
                " import io.vertx.core.buffer.Buffer;",
                "-import io.vertx.core.http.CaseInsensitiveHeaders;",
                "-import io.vertx.core.http.HttpConnection;",
                "-import io.vertx.core.http.HttpServerFileUpload;",
                "-import io.vertx.core.http.HttpServerRequest;",
                "+import io.vertx.core.http.*;",
                " import io.vertx.core.http.HttpVersion;",
                "-import io.vertx.core.http.ServerWebSocket;",
                "-import io.vertx.core.http.HttpFrame;",
                " import io.vertx.core.impl.VertxInternal;",
                "@@ -43,2 +40,4 @@ import java.util.Deque;",
                "+import static io.netty.handler.codec.http.HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED;",
                "+import static io.netty.handler.codec.http.HttpHeaderValues.MULTIPART_FORM_DATA;",
                " import static io.vertx.core.spi.metrics.Metrics.METRICS_ENABLED;",
                "@@ -204,3 +203,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "     if (version == null) {",
                "-      io.netty.handler.codec.http.HttpVersion nettyVersion = request.getProtocolVersion();",
                "+      io.netty.handler.codec.http.HttpVersion nettyVersion = request.protocolVersion();",
                "       if (nettyVersion == io.netty.handler.codec.http.HttpVersion.HTTP_1_0) {",
                "@@ -440,8 +439,4 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "           if (contentType != null) {",
                "-            HttpMethod method = request.getMethod();",
                "-            String lowerCaseContentType = contentType.toLowerCase();",
                "-            boolean isURLEncoded = lowerCaseContentType.startsWith(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED);",
                "-            if ((lowerCaseContentType.startsWith(HttpHeaders.Values.MULTIPART_FORM_DATA) || isURLEncoded) &&",
                "-              (method.equals(HttpMethod.POST) || method.equals(HttpMethod.PUT) || method.equals(HttpMethod.PATCH)",
                "-                || method.equals(HttpMethod.DELETE))) {",
                "+            HttpMethod method = request.method();",
                "+            if (isValidMultipartContentType(contentType) && isValidMultipartMethod(method)) {",
                "               decoder = new HttpPostRequestDecoder(new NettyFileUploadDataFactory(conn.vertx(), this, () -> uploadHandler), request);",
                "@@ -457,2 +452,12 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "+  private boolean isValidMultipartContentType(String contentType) {",
                "+    return MULTIPART_FORM_DATA.regionMatches(true, 0, contentType, 0, MULTIPART_FORM_DATA.length())",
                "+      || APPLICATION_X_WWW_FORM_URLENCODED.regionMatches(true, 0, contentType, 0, APPLICATION_X_WWW_FORM_URLENCODED.length());",
                "+  }",
                "+",
                "+  private boolean isValidMultipartMethod(HttpMethod method) {",
                "+    return method.equals(HttpMethod.POST) || method.equals(HttpMethod.PUT) || method.equals(HttpMethod.PATCH)",
                "+      || method.equals(HttpMethod.DELETE);",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "index 521d0d0c8..addb08c6e 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "@@ -17,3 +17,2 @@ import io.netty.channel.ChannelPromise;",
                " import io.netty.handler.codec.http.*;",
                "-import io.netty.handler.codec.http.HttpVersion;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -23,7 +22,6 @@ import io.vertx.core.Handler;",
                " import io.vertx.core.MultiMap;",
                "-import io.vertx.core.VertxException;",
                " import io.vertx.core.buffer.Buffer;",
                "-import io.vertx.core.http.*;",
                " import io.vertx.core.http.HttpHeaders;",
                " import io.vertx.core.http.HttpMethod;",
                "+import io.vertx.core.http.HttpServerResponse;",
                " import io.vertx.core.http.impl.headers.VertxHttpHeaders;",
                "@@ -82,3 +80,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "     this.conn = conn;",
                "-    this.version = request.getProtocolVersion();",
                "+    this.version = request.protocolVersion();",
                "     this.headers = new VertxHttpHeaders();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttpHandler.java b/src/main/java/io/vertx/core/http/impl/VertxHttpHandler.java",
                "index 435e602a8..5d4606f93 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttpHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttpHandler.java",
                "@@ -43,3 +43,3 @@ public abstract class VertxHttpHandler<C extends ConnectionBase> extends VertxHa",
                "           LastHttpContent last = (LastHttpContent) msg;",
                "-          return new AssembledLastHttpContent(newBuf, last.trailingHeaders(), last.getDecoderResult());",
                "+          return new AssembledLastHttpContent(newBuf, last.trailingHeaders(), last.decoderResult());",
                "         } else {",
                "diff --git a/src/main/java/io/vertx/core/net/impl/PartialPooledByteBufAllocator.java b/src/main/java/io/vertx/core/net/impl/PartialPooledByteBufAllocator.java",
                "index 995c61a6a..6b2ce17ef 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/PartialPooledByteBufAllocator.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/PartialPooledByteBufAllocator.java",
                "@@ -14,14 +14,4 @@ package io.vertx.core.net.impl;",
                "-import io.netty.buffer.ByteBuf;",
                "-import io.netty.buffer.ByteBufAllocator;",
                "-import io.netty.buffer.CompositeByteBuf;",
                "-import io.netty.buffer.PooledByteBufAllocator;",
                "-import io.netty.buffer.UnpooledByteBufAllocator;",
                "-import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelFuture;",
                "-import io.netty.channel.ChannelHandler;",
                "-import io.netty.channel.ChannelHandlerContext;",
                "-import io.netty.channel.ChannelPipeline;",
                "-import io.netty.channel.ChannelProgressivePromise;",
                "-import io.netty.channel.ChannelPromise;",
                "+import io.netty.buffer.*;",
                "+import io.netty.channel.*;",
                " import io.netty.util.Attribute;",
                "@@ -164,3 +154,3 @@ public final class PartialPooledByteBufAllocator implements ByteBufAllocator {",
                "     public <T> boolean hasAttr(AttributeKey<T> attributeKey) {",
                "-      return ctx.hasAttr(attributeKey);",
                "+      return ctx.channel().hasAttr(attributeKey);",
                "     }",
                "@@ -378,3 +368,3 @@ public final class PartialPooledByteBufAllocator implements ByteBufAllocator {",
                "     public <T> Attribute<T> attr(AttributeKey<T> key) {",
                "-      return ctx.attr(key);",
                "+      return ctx.channel().attr(key);",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "src/main/java/io/vertx/core/http/impl/AssembledHttpRequest.java",
                "src/main/java/io/vertx/core/http/impl/HeadersAdaptor.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "src/main/java/io/vertx/core/http/impl/VertxHttpHandler.java",
                "src/main/java/io/vertx/core/net/impl/PartialPooledByteBufAllocator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerImpl.java, src/main/java/io/vertx/core/net/impl/PartialPooledByteBufAllocator.java, src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java, src/main/java/io/vertx/core/http/impl/VertxHttpHandler.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java, src/main/java/io/vertx/core/http/impl/AssembledHttpRequest.java, src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java, src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java, src/main/java/io/vertx/core/http/impl/HeadersAdaptor.java, src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java, src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "eb64079d6c40f3f135ea294554b1b82b82bbd90e",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524645338,
            "hunks": 1,
            "message": "Use a stack-less TimeoutException when timing out an HttpClientRequest - fixes #2419",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                "index 6a5f14e83..21bf3a322 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                "@@ -176,3 +176,10 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "   private void timeout(long timeoutMs) {",
                "-    handleException(new TimeoutException(\"The timeout period of \" + timeoutMs + \"ms has been exceeded while executing \" + method + \" \" + uri + \" for host \" + host));",
                "+    String msg = \"The timeout period of \" + timeoutMs + \"ms has been exceeded while executing \" + method + \" \" + uri + \" for host \" + host;",
                "+    // Use a stack-less exception",
                "+    handleException(new TimeoutException(msg) {",
                "+      @Override",
                "+      public synchronized Throwable fillInStackTrace() {",
                "+        return this;",
                "+      }",
                "+    });",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2419": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "087d9f48420ff657ca67cd6a36ce76c845abcac2"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2419",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "26a132258e1d0e424cf591ce7578e79cf8f81ea3",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525978742,
            "hunks": 1,
            "message": "Improve connection exception logging - fixes #2437",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "index b08dcfb70..e4dff795e 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "@@ -217,3 +217,7 @@ public abstract class ConnectionBase {",
                "     } else {",
                "-      log.error(\"Unhandled exception\", t);",
                "+      if (log.isDebugEnabled()) {",
                "+        log.error(t.getMessage());",
                "+      } else {",
                "+        log.error(t.getMessage(), t);",
                "+      }",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/net/impl/ConnectionBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2437": "java.io.IOException in Vert.x 3.5.2-SNAPSHOT vert-x3/issues#368 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ed1fb8e8109d28ff1e8e3e1e1812ec05d520506a"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2437",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6aad769aebd08de54425e4427f8c930197caa43f",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528987312,
            "hunks": 3,
            "message": "NetServer bootstrap should set SO_LINGER option on the child channel instead of the server channel - fixes #2498",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/Transport.java b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "index 28e06608d..22f6e48f1 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "@@ -201,3 +201,2 @@ public class Transport {",
                "   public void configure(ClientOptionsBase options, Bootstrap bootstrap) {",
                "-    BiConsumer<ChannelOption<Object>, Object> setter = bootstrap::option;",
                "     if (options.getLocalAddress() != null) {",
                "@@ -226,3 +225,2 @@ public class Transport {",
                "   public void configure(NetServerOptions options, ServerBootstrap bootstrap) {",
                "-    BiConsumer<ChannelOption<Object>, Object> setter = bootstrap::childOption;",
                "     bootstrap.childOption(ChannelOption.TCP_NODELAY, options.isTcpNoDelay());",
                "@@ -236,3 +234,3 @@ public class Transport {",
                "     if (options.getSoLinger() != -1) {",
                "-      bootstrap.option(ChannelOption.SO_LINGER, options.getSoLinger());",
                "+      bootstrap.childOption(ChannelOption.SO_LINGER, options.getSoLinger());",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/net/impl/transport/Transport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2498": "Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cc89d5447cc5ba7213a9c7d16b6d9d6114af05c0"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2498",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05b0c5a048fe599c7dea7385d4e33cf4a840f6c6",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526020035,
            "hunks": 10,
            "message": "Add missing covariant return in various options",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/EventBusOptions.java b/src/main/java/io/vertx/core/eventbus/EventBusOptions.java",
                "index 03263975c..75fe9a3f4 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/EventBusOptions.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/EventBusOptions.java",
                "@@ -21,2 +21,4 @@ import io.vertx.core.net.*;",
                "+import java.util.Set;",
                "+",
                " /**",
                "@@ -420,2 +422,57 @@ public class EventBusOptions extends TCPSSLOptions {",
                "+  @Override",
                "+  public EventBusOptions setUseAlpn(boolean useAlpn) {",
                "+    return (EventBusOptions) super.setUseAlpn(useAlpn);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setSslEngineOptions(SSLEngineOptions sslEngineOptions) {",
                "+    return (EventBusOptions) super.setSslEngineOptions(sslEngineOptions);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setJdkSslEngineOptions(JdkSSLEngineOptions sslEngineOptions) {",
                "+    return (EventBusOptions) super.setJdkSslEngineOptions(sslEngineOptions);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setOpenSslEngineOptions(OpenSSLEngineOptions sslEngineOptions) {",
                "+    return (EventBusOptions) super.setOpenSslEngineOptions(sslEngineOptions);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setEnabledSecureTransportProtocols(Set<String> enabledSecureTransportProtocols) {",
                "+    return (EventBusOptions) super.setEnabledSecureTransportProtocols(enabledSecureTransportProtocols);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions addEnabledSecureTransportProtocol(String protocol) {",
                "+    return (EventBusOptions) super.addEnabledSecureTransportProtocol(protocol);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions removeEnabledSecureTransportProtocol(String protocol) {",
                "+    return (EventBusOptions) super.removeEnabledSecureTransportProtocol(protocol);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setTcpFastOpen(boolean tcpFastOpen) {",
                "+    return (EventBusOptions) super.setTcpFastOpen(tcpFastOpen);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setTcpCork(boolean tcpCork) {",
                "+    return (EventBusOptions) super.setTcpCork(tcpCork);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setTcpQuickAck(boolean tcpQuickAck) {",
                "+    return (EventBusOptions) super.setTcpQuickAck(tcpQuickAck);",
                "+  }",
                "+",
                "+  @Override",
                "+  public EventBusOptions setLogActivity(boolean logEnabled) {",
                "+    return (EventBusOptions) super.setLogActivity(logEnabled);",
                "+  }",
                "+",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientOptions.java b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "index 0db67b6c4..aaa3e00e8 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "@@ -22,2 +22,3 @@ import java.util.Collections;",
                " import java.util.List;",
                "+import java.util.Set;",
                "@@ -459,2 +460,8 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  @Override",
                "+  public HttpClientOptions setEnabledSecureTransportProtocols(Set<String> enabledSecureTransportProtocols) {",
                "+    super.setEnabledSecureTransportProtocols(enabledSecureTransportProtocols);",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerOptions.java b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "index 27ae91adf..f88b0ce38 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "@@ -20,6 +20,3 @@ import io.vertx.core.net.*;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Collections;",
                "-import java.util.List;",
                "+import java.util.*;",
                "@@ -402,2 +399,7 @@ public class HttpServerOptions extends NetServerOptions {",
                "+  @Override",
                "+  public HttpServerOptions setEnabledSecureTransportProtocols(Set<String> enabledSecureTransportProtocols) {",
                "+    return (HttpServerOptions) super.setEnabledSecureTransportProtocols(enabledSecureTransportProtocols);",
                "+  }",
                "+",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/net/NetClientOptions.java b/src/main/java/io/vertx/core/net/NetClientOptions.java",
                "index 5e0102033..8c87d7999 100755",
                "--- a/src/main/java/io/vertx/core/net/NetClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/net/NetClientOptions.java",
                "@@ -18,2 +18,3 @@ import io.vertx.core.json.JsonObject;",
                " import java.util.Objects;",
                "+import java.util.Set;",
                "@@ -351,2 +352,7 @@ public class NetClientOptions extends ClientOptionsBase {",
                "+  @Override",
                "+  public NetClientOptions setEnabledSecureTransportProtocols(Set<String> enabledSecureTransportProtocols) {",
                "+    return (NetClientOptions) super.setEnabledSecureTransportProtocols(enabledSecureTransportProtocols);",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/net/NetServerOptions.java b/src/main/java/io/vertx/core/net/NetServerOptions.java",
                "index cb43d72a9..bfa6b6cbe 100755",
                "--- a/src/main/java/io/vertx/core/net/NetServerOptions.java",
                "+++ b/src/main/java/io/vertx/core/net/NetServerOptions.java",
                "@@ -18,2 +18,4 @@ import io.vertx.core.json.JsonObject;",
                "+import java.util.Set;",
                "+",
                " /**",
                "@@ -277,2 +279,7 @@ public class NetServerOptions extends TCPSSLOptions {",
                "+  @Override",
                "+  public NetServerOptions setEnabledSecureTransportProtocols(Set<String> enabledSecureTransportProtocols) {",
                "+    return (NetServerOptions) super.setEnabledSecureTransportProtocols(enabledSecureTransportProtocols);",
                "+  }",
                "+",
                "   /**"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/EventBusOptions.java",
                "src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "src/main/java/io/vertx/core/net/NetClientOptions.java",
                "src/main/java/io/vertx/core/net/NetServerOptions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/HttpServerOptions.java, src/main/java/io/vertx/core/net/NetClientOptions.java, src/main/java/io/vertx/core/eventbus/EventBusOptions.java, src/main/java/io/vertx/core/net/NetServerOptions.java, src/main/java/io/vertx/core/http/HttpClientOptions.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: return",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b3a9401a67cb710d2c633ccfb1637a78e83d41c4",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524601518,
            "hunks": 10,
            "message": "Don't capture stack trace for exception for connection close events - fixes #358",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/VertxException.java b/src/main/java/io/vertx/core/VertxException.java",
                "index 25f2be044..71ff19723 100644",
                "--- a/src/main/java/io/vertx/core/VertxException.java",
                "+++ b/src/main/java/io/vertx/core/VertxException.java",
                "@@ -51,2 +51,12 @@ public class VertxException extends RuntimeException {",
                "   }",
                "+",
                "+  /**",
                "+   * Create an instance given a message",
                "+   *",
                "+   * @param message  the message",
                "+   * @param noStackTrace  disable stack trace capture",
                "+   */",
                "+  public VertxException(String message, boolean noStackTrace) {",
                "+    super(message, null, !noStackTrace, !noStackTrace);",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index ac45c7709..540231a3c 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -737,4 +737,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     }",
                "-    Exception cause = new VertxException(\"Connection was closed\");",
                "-    failStreams(cause);",
                "+    failStreams(CLOSED_EXCEPTION);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index 246c7aa43..85ca1748d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -40,3 +40,2 @@ import io.vertx.core.Handler;",
                " import io.vertx.core.Vertx;",
                "-import io.vertx.core.VertxException;",
                " import io.vertx.core.buffer.Buffer;",
                "@@ -363,3 +362,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     if (currentRequest != null) {",
                "-      currentRequest.handleException(new VertxException(\"Connection was closed\"));",
                "+      currentRequest.handleException(CLOSED_EXCEPTION);",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "index 963c3fd6f..0c2460957 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "@@ -246,3 +246,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "         }",
                "-        handleException(new VertxException(\"Connection was closed\")); // Put that in utility class",
                "+        handleException(CLOSED_EXCEPTION);",
                "       }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "index 6b5854f4c..c2c0a58a6 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "@@ -35,2 +35,3 @@ import io.vertx.core.logging.Logger;",
                " import io.vertx.core.logging.LoggerFactory;",
                "+import io.vertx.core.net.impl.ConnectionBase;",
                " import io.vertx.core.spi.metrics.HttpServerMetrics;",
                "@@ -459,3 +460,3 @@ public class Http2ServerResponseImpl implements HttpServerResponse {",
                "       if (exceptionHandler != null) {",
                "-        conn.getContext().runOnContext(v -> exceptionHandler.handle(new VertxException(\"Connection was closed\")));",
                "+        conn.getContext().runOnContext(v -> exceptionHandler.handle(ConnectionBase.CLOSED_EXCEPTION));",
                "       }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "index e6fcc5ab6..dadb46410 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "@@ -33,2 +33,3 @@ import io.vertx.core.logging.Logger;",
                " import io.vertx.core.logging.LoggerFactory;",
                "+import io.vertx.core.net.impl.ConnectionBase;",
                "@@ -529,3 +530,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "         if (!written && exceptionHandler != null) {",
                "-          conn.getContext().runOnContext(v -> exceptionHandler.handle(new VertxException(\"Connection was closed\")));",
                "+          conn.getContext().runOnContext(v -> exceptionHandler.handle(ConnectionBase.CLOSED_EXCEPTION));",
                "         }",
                "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "index 646a50f9e..b08dcfb70 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "@@ -44,2 +44,8 @@ public abstract class ConnectionBase {",
                "+  /**",
                "+   * An exception used to signal a closed connection to an exception handler. Exception are",
                "+   * expensive to create, this instance can be used for this purpose. It does not capture a stack",
                "+   * trace to not be misleading.",
                "+   */",
                "+  public static final VertxException CLOSED_EXCEPTION = new VertxException(\"Connection was closed\", true);",
                "   private static final Logger log = LoggerFactory.getLogger(ConnectionBase.class);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/VertxException.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "src/main/java/io/vertx/core/net/impl/ConnectionBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "358": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e8360411d6342d281db4a58fbd9b99da20d4b394"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/VertxException.java, src/main/java/io/vertx/core/net/impl/ConnectionBase.java, src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java, src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java, src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java, src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 358",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a4facc3af9a68602a4e35c42ec3b1cc22d05673d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526724517,
            "hunks": 5,
            "message": "Incorrect VertxHttp2Stream checkNextTick implementation - fixes #2457",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java b/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "index b01bd4b09..e0ecbee62 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "@@ -38,2 +38,3 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "   private boolean ended;",
                "+  private boolean sentCheck;",
                "   private MultiMap trailers;",
                "@@ -66,3 +67,3 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "           pending.add(data);",
                "-          checkNextTick(null);",
                "+          checkNextTick();",
                "         }",
                "@@ -99,14 +100,22 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "    */",
                "-  private void checkNextTick(Void v) {",
                "-    synchronized (conn) {",
                "-      if (!paused) {",
                "-        Buffer buf = pending.poll();",
                "-        conn.handler.consume(stream, buf.length());",
                "-        handleData(buf);",
                "-        if (pending.size() > 0) {",
                "-          vertx.runOnContext(this::checkNextTick);",
                "-        } else if (ended) {",
                "-          handleEnd(trailers);",
                "+  private void checkNextTick() {",
                "+    if (!paused && pending.size() > 0 && !sentCheck) {",
                "+      sentCheck = true;",
                "+      context.runOnContext(v1 -> {",
                "+        synchronized (conn) {",
                "+          sentCheck = false;",
                "+          if (!paused) {",
                "+            Buffer buf = pending.poll();",
                "+            conn.handler.consume(stream, buf.length());",
                "+            handleData(buf);",
                "+            if (pending.isEmpty()) {",
                "+              if (ended) {",
                "+                handleEnd(trailers);",
                "+              }",
                "+            } else {",
                "+              checkNextTick();",
                "+            }",
                "+          }",
                "         }",
                "-      }",
                "+      });",
                "     }",
                "@@ -124,3 +133,3 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "     paused = false;",
                "-    context.runOnContext(this::checkNextTick);",
                "+    checkNextTick();",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2457": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "940f187773fdac4c7771bac8226bffe530a5d9cf"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2457",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "453d14e9988a8d672bb6b18cd09ca2bfdf3b46ea",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527606237,
            "hunks": 3,
            "message": "Windows redeploy does not provide valid inline verticle configuration - fixes #2480",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java b/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                "index 6cb3adb37..a1919142c 100644",
                "--- a/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                "+++ b/src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.impl.launcher.commands;",
                "+import io.vertx.core.impl.Utils;",
                "+",
                " import java.util.List;",
                "@@ -89,4 +91,8 @@ public class ExecUtils {",
                "       }",
                "-      return buf.append(SINGLE_QUOTE).append(cleanedArgument).append(",
                "+      if (Utils.isWindows()) {",
                "+        return buf.append(DOUBLE_QUOTE).append(cleanedArgument.replace(\"\\\"\", \"\\\\\\\"\")).append(DOUBLE_QUOTE).toString();",
                "+      } else {",
                "+        return buf.append(SINGLE_QUOTE).append(cleanedArgument).append(",
                "           SINGLE_QUOTE).toString();",
                "+      }",
                "     } else if (cleanedArgument.contains(SINGLE_QUOTE)"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2480": "Windows test fixes #2481 Vert.x 3.5.2 umbrella issue vert-x3/issues#352 Launcher system properties are not propagated when the verticle runs as background process (start) #2476"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "948632d3d6924bb9ef862b03c8c2dc8cdbe2fa65"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/launcher/commands/ExecUtils.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2480",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5ce130bc467c48ebeddd336ec17c7bb20ea3a646",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1531210173,
            "hunks": 1,
            "message": "HttpClient idle state handler should be added first when the connection is borrowed from the pool - fixes #2532",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index f189f9cd5..aa772757d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -112,3 +112,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "       ChannelPipeline pipeline = conn.channelHandlerContext().pipeline();",
                "-      pipeline.addBefore(\"handler\", \"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "+      pipeline.addFirst(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2532": "Vert.x 3.5.3 umbrella issue vert-x3/issues#384"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "de40daa332a2ab4ac8467ef1a5d7d820f59750f7"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2532",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "41fc797a3751459a4b9f0ee4aaee76b61b850911",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533810831,
            "hunks": 66,
            "message": "Provide default methods for metrics SPI - fixes #2588",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/metrics/Measured.java b/src/main/java/io/vertx/core/metrics/Measured.java",
                "index 53080d48f..0677afe31 100644",
                "--- a/src/main/java/io/vertx/core/metrics/Measured.java",
                "+++ b/src/main/java/io/vertx/core/metrics/Measured.java",
                "@@ -24,5 +24,10 @@ public interface Measured {",
                "    *",
                "-   * @return true if the metrics are enabled",
                "+   * @implSpec",
                "+   * The default implementation returns {@code false}",
                "+   *",
                "+   * @return {@code true} if metrics are enabled",
                "    */",
                "-  boolean isMetricsEnabled();",
                "+  default boolean isMetricsEnabled() {",
                "+    return false;",
                "+  }",
                "diff --git a/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java b/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "index de09825b7..03a534583 100644",
                "--- a/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "+++ b/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "@@ -13,18 +13,3 @@ package io.vertx.core.metrics.impl;",
                "-import io.vertx.core.Verticle;",
                "-import io.vertx.core.datagram.DatagramSocketOptions;",
                "-import io.vertx.core.eventbus.ReplyFailure;",
                "-import io.vertx.core.http.HttpClientOptions;",
                "-import io.vertx.core.http.HttpClientRequest;",
                "-import io.vertx.core.http.HttpClientResponse;",
                "-import io.vertx.core.http.HttpMethod;",
                "-import io.vertx.core.http.HttpServerOptions;",
                "-import io.vertx.core.http.HttpServerRequest;",
                "-import io.vertx.core.http.HttpServerResponse;",
                "-import io.vertx.core.http.ServerWebSocket;",
                "-import io.vertx.core.http.WebSocket;",
                " import io.vertx.core.spi.metrics.*;",
                "-import io.vertx.core.net.NetClientOptions;",
                "-import io.vertx.core.net.NetServerOptions;",
                "-import io.vertx.core.net.SocketAddress;",
                "@@ -37,67 +22,2 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "-  @Override",
                "-  public void verticleDeployed(Verticle verticle) {",
                "-  }",
                "-",
                "-  @Override",
                "-  public void verticleUndeployed(Verticle verticle) {",
                "-  }",
                "-",
                "-  @Override",
                "-  public void timerCreated(long id) {",
                "-  }",
                "-",
                "-  @Override",
                "-  public void timerEnded(long id, boolean cancelled) {",
                "-  }",
                "-",
                "-  @Override",
                "-  public EventBusMetrics createEventBusMetrics() {",
                "-    return DummyEventBusMetrics.INSTANCE;",
                "-  }",
                "-",
                "-  @Override",
                "-  public HttpServerMetrics createHttpServerMetrics(HttpServerOptions options, SocketAddress localAddress) {",
                "-    return DummyHttpServerMetrics.INSTANCE;",
                "-  }",
                "-",
                "-  @Override",
                "-  public HttpClientMetrics createHttpClientMetrics(HttpClientOptions options) {",
                "-    return DummyHttpClientMetrics.INSTANCE;",
                "-  }",
                "-",
                "-  @Override",
                "-  public TCPMetrics createNetServerMetrics(NetServerOptions options, SocketAddress localAddress) {",
                "-    return DummyTCPMetrics.INSTANCE;",
                "-  }",
                "-",
                "-  @Override",
                "-  public TCPMetrics createNetClientMetrics(NetClientOptions options) {",
                "-    return DummyTCPMetrics.INSTANCE;",
                "-  }",
                "-",
                "-  @Override",
                "-  public DatagramSocketMetrics createDatagramSocketMetrics(DatagramSocketOptions options) {",
                "-    return DummyDatagramMetrics.INSTANCE;",
                "-  }",
                "-",
                "-  @Override",
                "-  public PoolMetrics<?> createPoolMetrics(String poolType, String poolName, int maxPoolSize) {",
                "-    return DummyWorkerPoolMetrics.INSTANCE;",
                "-  }",
                "-",
                "-  @Override",
                "-  public void close() {",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isEnabled() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isMetricsEnabled() {",
                "-    return false;",
                "-  }",
                "-",
                "   public static class DummyEventBusMetrics implements EventBusMetrics<Void> {",
                "@@ -106,51 +26,2 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "-    @Override",
                "-    public void messageWritten(String address, int numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void messageRead(String address, int numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void handlerRegistered(String address, String repliedAddress) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void handlerUnregistered(Void handler) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void beginHandleMessage(Void handler, boolean local) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void scheduleMessage(Void handler, boolean local) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void endHandleMessage(Void handler, Throwable failure) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void messageSent(String address, boolean publish, boolean local, boolean remote) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void messageReceived(String address, boolean publish, boolean local, int handlers) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void replyFailure(String address, ReplyFailure failure) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean isEnabled() {",
                "-      return false;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void close() {",
                "-    }",
                "   }",
                "@@ -161,67 +32,2 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "-    @Override",
                "-    public Void requestBegin(Void socketMetric, HttpServerRequest request) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void requestReset(Void requestMetric) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void responseBegin(Void requestMetric, HttpServerResponse response) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void responsePushed(Void socketMetric, HttpMethod method, String uri, HttpServerResponse response) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void responseEnd(Void requestMetric, HttpServerResponse response) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void upgrade(Void requestMetric, ServerWebSocket serverWebSocket) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void connected(SocketAddress remoteAddress, String remoteName) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void disconnected(Void socketMetric, SocketAddress remoteAddress) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesRead(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesWritten(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void exceptionOccurred(Void socketMetric, SocketAddress remoteAddress, Throwable t) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void close() {",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean isEnabled() {",
                "-      return false;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void connected(Void socketMetric, ServerWebSocket serverWebSocket) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void disconnected(Void serverWebSocketMetric) {",
                "-    }",
                "   }",
                "@@ -232,92 +38,2 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "-    @Override",
                "-    public Void createEndpoint(String host, int port, int maxPoolSize) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void enqueueRequest(Void endpointMetric) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void dequeueRequest(Void endpointMetric, Void taskMetric) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void closeEndpoint(String host, int port, Void endpointMetric) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void endpointConnected(Void endpointMetric, Void socketMetric) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void connected(SocketAddress remoteAddress, String remoteName) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void disconnected(Void socketMetric, SocketAddress remoteAddress) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void endpointDisconnected(Void endpointMetric, Void socketMetric) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void requestBegin(Void endpointMetric, Void socketMetric, SocketAddress localAddress, SocketAddress remoteAddress, HttpClientRequest request) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void requestEnd(Void requestMetric) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void responseBegin(Void requestMetric, HttpClientResponse response) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void responsePushed(Void endpointMetric, Void socketMetric, SocketAddress localAddress, SocketAddress remoteAddress, HttpClientRequest request) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void requestReset(Void requestMetric) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void responseEnd(Void requestMetric, HttpClientResponse response) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesRead(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesWritten(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void exceptionOccurred(Void socketMetric, SocketAddress remoteAddress, Throwable t) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void close() {",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean isEnabled() {",
                "-      return false;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void connected(Void endpointMetric, Void socketMetric, WebSocket webSocket) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void disconnected(Void webSocketMetric) {",
                "-    }",
                "   }",
                "@@ -328,31 +44,2 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "-    @Override",
                "-    public Void connected(SocketAddress remoteAddress, String remoteName) {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void disconnected(Void socketMetric, SocketAddress remoteAddress) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesRead(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesWritten(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void exceptionOccurred(Void socketMetric, SocketAddress remoteAddress, Throwable t) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void close() {",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean isEnabled() {",
                "-      return false;",
                "-    }",
                "   }",
                "@@ -363,26 +50,2 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "-    @Override",
                "-    public void listening(String localName, SocketAddress localAddress) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesRead(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void bytesWritten(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void exceptionOccurred(Void socketMetric, SocketAddress remoteAddress, Throwable t) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void close() {",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean isEnabled() {",
                "-      return false;",
                "-    }",
                "   }",
                "@@ -393,27 +56,2 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "-    @Override",
                "-    public Void submitted() {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void rejected(Void t) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Void begin(Void t) {",
                "-      return t;",
                "-    }",
                "-",
                "-    public void end(Void t, boolean succeeded) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean isEnabled() {",
                "-      return false;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void close() {",
                "-    }",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/DatagramSocketMetrics.java b/src/main/java/io/vertx/core/spi/metrics/DatagramSocketMetrics.java",
                "index fdab057f9..1f4dff643 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/DatagramSocketMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/DatagramSocketMetrics.java",
                "@@ -43,3 +43,4 @@ public interface DatagramSocketMetrics extends NetworkMetrics<Void> {",
                "    */",
                "-  void listening(String localName, SocketAddress localAddress);",
                "+  default void listening(String localName, SocketAddress localAddress) {",
                "+  }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/EventBusMetrics.java b/src/main/java/io/vertx/core/spi/metrics/EventBusMetrics.java",
                "index 172876d78..14de4449b 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/EventBusMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/EventBusMetrics.java",
                "@@ -30,3 +30,5 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  H handlerRegistered(String address, String repliedAddress);",
                "+  default H handlerRegistered(String address, String repliedAddress) {",
                "+    return null;",
                "+  }",
                "@@ -39,3 +41,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void handlerUnregistered(H handler);",
                "+  default void handlerUnregistered(H handler) {",
                "+  }",
                "@@ -49,3 +52,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void scheduleMessage(H handler, boolean local);",
                "+  default void scheduleMessage(H handler, boolean local) {",
                "+  }",
                "@@ -67,3 +71,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void beginHandleMessage(H handler, boolean local);",
                "+  default void beginHandleMessage(H handler, boolean local) {",
                "+  }",
                "@@ -85,3 +90,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void endHandleMessage(H handler, Throwable failure);",
                "+  default void endHandleMessage(H handler, Throwable failure) {",
                "+  }",
                "@@ -97,3 +103,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void messageSent(String address, boolean publish, boolean local, boolean remote);",
                "+  default void messageSent(String address, boolean publish, boolean local, boolean remote) {",
                "+  }",
                "@@ -109,3 +116,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void messageReceived(String address, boolean publish, boolean local, int handlers);",
                "+  default void messageReceived(String address, boolean publish, boolean local, int handlers) {",
                "+  }",
                "@@ -119,3 +127,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void messageWritten(String address, int numberOfBytes);",
                "+  default void messageWritten(String address, int numberOfBytes) {",
                "+  }",
                "@@ -129,3 +138,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void messageRead(String address, int numberOfBytes);",
                "+  default void messageRead(String address, int numberOfBytes) {",
                "+  }",
                "@@ -140,3 +150,4 @@ public interface EventBusMetrics<H> extends Metrics {",
                "    */",
                "-  void replyFailure(String address, ReplyFailure failure);",
                "+  default void replyFailure(String address, ReplyFailure failure) {",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/HttpClientMetrics.java b/src/main/java/io/vertx/core/spi/metrics/HttpClientMetrics.java",
                "index 60eae4a55..36da2f976 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/HttpClientMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/HttpClientMetrics.java",
                "@@ -47,3 +47,5 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  E createEndpoint(String host, int port, int maxPoolSize);",
                "+  default E createEndpoint(String host, int port, int maxPoolSize) {",
                "+    return null;",
                "+  }",
                "@@ -56,3 +58,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void closeEndpoint(String host, int port, E endpointMetric);",
                "+  default void closeEndpoint(String host, int port, E endpointMetric) {",
                "+  }",
                "@@ -63,3 +66,5 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  T enqueueRequest(E endpointMetric);",
                "+  default T enqueueRequest(E endpointMetric) {",
                "+    return null;",
                "+  }",
                "@@ -70,3 +75,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void dequeueRequest(E endpointMetric, T taskMetric);",
                "+  default void dequeueRequest(E endpointMetric, T taskMetric) {",
                "+  }",
                "@@ -78,3 +84,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void endpointConnected(E endpointMetric, S socketMetric);",
                "+  default void endpointConnected(E endpointMetric, S socketMetric) {",
                "+  }",
                "@@ -86,3 +93,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void endpointDisconnected(E endpointMetric, S socketMetric);",
                "+  default void endpointDisconnected(E endpointMetric, S socketMetric) {",
                "+  }",
                "@@ -102,3 +110,5 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  R requestBegin(E endpointMetric, S socketMetric, SocketAddress localAddress, SocketAddress remoteAddress, HttpClientRequest request);",
                "+  default R requestBegin(E endpointMetric, S socketMetric, SocketAddress localAddress, SocketAddress remoteAddress, HttpClientRequest request) {",
                "+    return null;",
                "+  }",
                "@@ -109,3 +119,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void requestEnd(R requestMetric);",
                "+  default void requestEnd(R requestMetric) {",
                "+  }",
                "@@ -118,3 +129,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void responseBegin(R requestMetric, HttpClientResponse response);",
                "+  default void responseBegin(R requestMetric, HttpClientResponse response) {",
                "+  }",
                "@@ -130,3 +142,5 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  R responsePushed(E endpointMetric, S socketMetric, SocketAddress localAddress, SocketAddress remoteAddress, HttpClientRequest request);",
                "+  default R responsePushed(E endpointMetric, S socketMetric, SocketAddress localAddress, SocketAddress remoteAddress, HttpClientRequest request) {",
                "+    return null;",
                "+  }",
                "@@ -138,3 +152,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void requestReset(R requestMetric);",
                "+  default void requestReset(R requestMetric) {",
                "+  }",
                "@@ -146,3 +161,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void responseEnd(R requestMetric, HttpClientResponse response);",
                "+  default void responseEnd(R requestMetric, HttpClientResponse response) {",
                "+  }",
                "@@ -156,3 +172,5 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  W connected(E endpointMetric, S socketMetric, WebSocket webSocket);",
                "+  default W connected(E endpointMetric, S socketMetric, WebSocket webSocket) {",
                "+    return null;",
                "+  }",
                "@@ -163,3 +181,4 @@ public interface HttpClientMetrics<R, W, S, E, T> extends TCPMetrics<S> {",
                "    */",
                "-  void disconnected(W webSocketMetric);",
                "+  default void disconnected(W webSocketMetric) {",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java b/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java",
                "index ca8d59b85..7ef629b97 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java",
                "@@ -47,3 +47,5 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  R requestBegin(S socketMetric, HttpServerRequest request);",
                "+  default R requestBegin(S socketMetric, HttpServerRequest request) {",
                "+    return null;",
                "+  }",
                "@@ -55,3 +57,5 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  void requestReset(R requestMetric);",
                "+  default void requestReset(R requestMetric) {",
                "+",
                "+  }",
                "@@ -63,3 +67,4 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  void responseBegin(R requestMetric, HttpServerResponse response);",
                "+  default void responseBegin(R requestMetric, HttpServerResponse response) {",
                "+  }",
                "@@ -73,3 +78,5 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  R responsePushed(S socketMetric, HttpMethod method, String uri, HttpServerResponse response);",
                "+  default R responsePushed(S socketMetric, HttpMethod method, String uri, HttpServerResponse response) {",
                "+    return null;",
                "+  }",
                "@@ -81,3 +88,4 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  void responseEnd(R requestMetric, HttpServerResponse response);",
                "+  default void responseEnd(R requestMetric, HttpServerResponse response) {",
                "+  }",
                "@@ -90,3 +98,5 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  W upgrade(R requestMetric, ServerWebSocket serverWebSocket);",
                "+  default W upgrade(R requestMetric, ServerWebSocket serverWebSocket) {",
                "+    return null;",
                "+  }",
                "@@ -99,3 +109,5 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  W connected(S socketMetric, ServerWebSocket serverWebSocket);",
                "+  default W connected(S socketMetric, ServerWebSocket serverWebSocket) {",
                "+    return null;",
                "+  }",
                "@@ -106,3 +118,4 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "    */",
                "-  void disconnected(W serverWebSocketMetric);",
                "+  default void disconnected(W serverWebSocketMetric) {",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/Metrics.java b/src/main/java/io/vertx/core/spi/metrics/Metrics.java",
                "index ab986691e..f8f258a8a 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/Metrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/Metrics.java",
                "@@ -32,3 +32,5 @@ public interface Metrics {",
                "   @Deprecated",
                "-  boolean isEnabled();",
                "+  default boolean isEnabled() {",
                "+    return true;",
                "+  }",
                "@@ -39,3 +41,4 @@ public interface Metrics {",
                "    */",
                "-  void close();",
                "+  default void close() {",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/NetworkMetrics.java b/src/main/java/io/vertx/core/spi/metrics/NetworkMetrics.java",
                "index 983f1739c..0ab1c1f25 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/NetworkMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/NetworkMetrics.java",
                "@@ -30,3 +30,4 @@ public interface NetworkMetrics<S> extends Metrics {",
                "    */",
                "-  void bytesRead(S socketMetric, SocketAddress remoteAddress, long numberOfBytes);",
                "+  default void bytesRead(S socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "+  }",
                "@@ -39,3 +40,4 @@ public interface NetworkMetrics<S> extends Metrics {",
                "    */",
                "-  void bytesWritten(S socketMetric, SocketAddress remoteAddress, long numberOfBytes);",
                "+  default void bytesWritten(S socketMetric, SocketAddress remoteAddress, long numberOfBytes) {",
                "+  }",
                "@@ -48,3 +50,4 @@ public interface NetworkMetrics<S> extends Metrics {",
                "    */",
                "-  void exceptionOccurred(S socketMetric, SocketAddress remoteAddress, Throwable t);",
                "+  default void exceptionOccurred(S socketMetric, SocketAddress remoteAddress, Throwable t) {",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/PoolMetrics.java b/src/main/java/io/vertx/core/spi/metrics/PoolMetrics.java",
                "index 16354d93c..64e8097f2 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/PoolMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/PoolMetrics.java",
                "@@ -28,3 +28,5 @@ public interface PoolMetrics<T> extends Metrics {",
                "    */",
                "-  T submitted();",
                "+  default T submitted() {",
                "+    return null;",
                "+  }",
                "@@ -36,3 +38,5 @@ public interface PoolMetrics<T> extends Metrics {",
                "    */",
                "-  T begin(T t);",
                "+  default T begin(T t) {",
                "+    return null;",
                "+  }",
                "@@ -43,3 +47,4 @@ public interface PoolMetrics<T> extends Metrics {",
                "    */",
                "-  void rejected(T t);",
                "+  default void rejected(T t) {",
                "+  }",
                "@@ -51,4 +56,4 @@ public interface PoolMetrics<T> extends Metrics {",
                "    */",
                "-  void end(T t, boolean succeeded);",
                "-",
                "+  default void end(T t, boolean succeeded) {",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/TCPMetrics.java b/src/main/java/io/vertx/core/spi/metrics/TCPMetrics.java",
                "index e2a627502..6e2943509 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/TCPMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/TCPMetrics.java",
                "@@ -47,3 +47,5 @@ public interface TCPMetrics<S> extends NetworkMetrics<S> {",
                "    */",
                "-  S connected(SocketAddress remoteAddress, String remoteName);",
                "+  default S connected(SocketAddress remoteAddress, String remoteName) {",
                "+    return null;",
                "+  }",
                "@@ -55,3 +57,4 @@ public interface TCPMetrics<S> extends NetworkMetrics<S> {",
                "    */",
                "-  void disconnected(S socketMetric, SocketAddress remoteAddress);",
                "+  default void disconnected(S socketMetric, SocketAddress remoteAddress) {",
                "+  }",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java b/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java",
                "index 529dcc8c7..25376eead 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java",
                "@@ -41,3 +41,4 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  void verticleDeployed(Verticle verticle);",
                "+  default void verticleDeployed(Verticle verticle) {",
                "+  }",
                "@@ -51,3 +52,4 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  void verticleUndeployed(Verticle verticle);",
                "+  default void verticleUndeployed(Verticle verticle) {",
                "+  }",
                "@@ -60,3 +62,4 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  void timerCreated(long id);",
                "+  default void timerCreated(long id) {",
                "+  }",
                "@@ -70,3 +73,4 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  void timerEnded(long id, boolean cancelled);",
                "+  default void timerEnded(long id, boolean cancelled) {",
                "+  }",
                "@@ -81,3 +85,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  EventBusMetrics createEventBusMetrics();",
                "+  default EventBusMetrics createEventBusMetrics() {",
                "+    return null;",
                "+  }",
                "@@ -97,3 +103,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  HttpServerMetrics<?, ?, ?> createHttpServerMetrics(HttpServerOptions options, SocketAddress localAddress);",
                "+  default HttpServerMetrics<?, ?, ?> createHttpServerMetrics(HttpServerOptions options, SocketAddress localAddress) {",
                "+    return null;",
                "+  }",
                "@@ -107,3 +115,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  HttpClientMetrics<?, ?, ?, ?, ?> createHttpClientMetrics(HttpClientOptions options);",
                "+  default HttpClientMetrics<?, ?, ?, ?, ?> createHttpClientMetrics(HttpClientOptions options) {",
                "+    return null;",
                "+  }",
                "@@ -123,3 +133,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  TCPMetrics<?> createNetServerMetrics(NetServerOptions options, SocketAddress localAddress);",
                "+  default TCPMetrics<?> createNetServerMetrics(NetServerOptions options, SocketAddress localAddress) {",
                "+    return null;",
                "+  }",
                "@@ -133,3 +145,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  TCPMetrics<?> createNetClientMetrics(NetClientOptions options);",
                "+  default TCPMetrics<?> createNetClientMetrics(NetClientOptions options) {",
                "+    return null;",
                "+  }",
                "@@ -143,3 +157,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  DatagramSocketMetrics createDatagramSocketMetrics(DatagramSocketOptions options);",
                "+  default DatagramSocketMetrics createDatagramSocketMetrics(DatagramSocketOptions options) {",
                "+    return null;",
                "+  }",
                "@@ -153,3 +169,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  PoolMetrics<?> createPoolMetrics(String poolType, String poolName, int maxPoolSize);",
                "+  default PoolMetrics<?> createPoolMetrics(String poolType, String poolName, int maxPoolSize) {",
                "+    return null;",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/metrics/Measured.java",
                "src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/DatagramSocketMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/EventBusMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/HttpClientMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/Metrics.java",
                "src/main/java/io/vertx/core/spi/metrics/NetworkMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/PoolMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/TCPMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2588": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/metrics/Measured.java, src/main/java/io/vertx/core/spi/metrics/HttpClientMetrics.java, src/main/java/io/vertx/core/spi/metrics/EventBusMetrics.java, src/main/java/io/vertx/core/spi/metrics/Metrics.java, src/main/java/io/vertx/core/spi/metrics/TCPMetrics.java, src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java, src/main/java/io/vertx/core/spi/metrics/NetworkMetrics.java, src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java, src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java, src/main/java/io/vertx/core/spi/metrics/PoolMetrics.java, src/main/java/io/vertx/core/spi/metrics/DatagramSocketMetrics.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2588",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "82f81465c4f171bf0de1ee9f7d603088f7ed35fe",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526724766,
            "hunks": 3,
            "message": "Invoke endHandler immediately when a webSocket connection is closed. Signed-off-by: JinGan <jg_513@163.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "index 320748127..b9374a65b 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "@@ -422,7 +422,7 @@ public abstract class WebSocketImplBase<S extends WebSocketBase> implements WebS",
                "   void handleClosed() {",
                "+    Handler<Void> endHandler;",
                "     synchronized (conn) {",
                "       cleanupHandlers();",
                "-      if (endHandler != null) {",
                "-        conn.getContext().runOnContext(endHandler);",
                "-      }",
                "+      endHandler = this.endHandler;",
                "+      Handler<Void> closeHandler = this.closeHandler;",
                "       if (closeHandler != null) {",
                "@@ -431,2 +431,5 @@ public abstract class WebSocketImplBase<S extends WebSocketBase> implements WebS",
                "     }",
                "+    if (endHandler != null) {",
                "+      endHandler.handle(null);",
                "+    }",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ea14e2deffbb0a863bb2d11a74e2c4d13e188239"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f218f939a6d64e522e4ad5035c1ef43203e02bdd",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525880464,
            "hunks": 224,
            "message": "Move the data object converter generator to codegen - fixes #2436",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 53a1a79cd..0124c82f3 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -317,18 +317,2 @@",
                "           </execution>",
                "-          <execution>",
                "-            <id>generate-test-sources</id>",
                "-            <goals>",
                "-              <goal>process-test</goal>",
                "-            </goals>",
                "-            <phase>generate-test-sources</phase>",
                "-            <configuration>",
                "-              <processors>",
                "-                <processor>io.vertx.codegen.CodeGenProcessor</processor>",
                "-              </processors>",
                "-              <optionMap>",
                "-                <codegen.output>${project.basedir}/src/test</codegen.output>",
                "-                <codegen.output.data_object_converters>generated</codegen.output.data_object_converters>",
                "-              </optionMap>",
                "-            </configuration>",
                "-          </execution>",
                "         </executions>",
                "@@ -363,3 +347,2 @@",
                "                 <source>${project.basedir}/src/test/benchmarks</source>",
                "-                <source>${project.basedir}/src/test/generated</source>",
                "               </sources>",
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index 735bd5fc2..91815b9e3 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.DeploymentOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.DeploymentOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.DeploymentOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,45 +11,71 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, DeploymentOptions obj) {",
                "-    if (json.getValue(\"config\") instanceof JsonObject) {",
                "-      obj.setConfig(((JsonObject)json.getValue(\"config\")).copy());",
                "-    }",
                "-    if (json.getValue(\"extraClasspath\") instanceof JsonArray) {",
                "-      java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"extraClasspath\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setExtraClasspath(list);",
                "-    }",
                "-    if (json.getValue(\"ha\") instanceof Boolean) {",
                "-      obj.setHa((Boolean)json.getValue(\"ha\"));",
                "-    }",
                "-    if (json.getValue(\"instances\") instanceof Number) {",
                "-      obj.setInstances(((Number)json.getValue(\"instances\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"isolatedClasses\") instanceof JsonArray) {",
                "-      java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"isolatedClasses\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setIsolatedClasses(list);",
                "-    }",
                "-    if (json.getValue(\"isolationGroup\") instanceof String) {",
                "-      obj.setIsolationGroup((String)json.getValue(\"isolationGroup\"));",
                "-    }",
                "-    if (json.getValue(\"maxWorkerExecuteTime\") instanceof Number) {",
                "-      obj.setMaxWorkerExecuteTime(((Number)json.getValue(\"maxWorkerExecuteTime\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"multiThreaded\") instanceof Boolean) {",
                "-      obj.setMultiThreaded((Boolean)json.getValue(\"multiThreaded\"));",
                "-    }",
                "-    if (json.getValue(\"worker\") instanceof Boolean) {",
                "-      obj.setWorker((Boolean)json.getValue(\"worker\"));",
                "-    }",
                "-    if (json.getValue(\"workerPoolName\") instanceof String) {",
                "-      obj.setWorkerPoolName((String)json.getValue(\"workerPoolName\"));",
                "-    }",
                "-    if (json.getValue(\"workerPoolSize\") instanceof Number) {",
                "-      obj.setWorkerPoolSize(((Number)json.getValue(\"workerPoolSize\")).intValue());",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, DeploymentOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"config\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setConfig(((JsonObject)member.getValue()).copy());",
                "+            }",
                "+            break;",
                "+          case \"extraClasspath\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setExtraClasspath(list);",
                "+           }",
                "+            break;",
                "+          case \"ha\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setHa((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"instances\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setInstances(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"isolatedClasses\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setIsolatedClasses(list);",
                "+           }",
                "+            break;",
                "+          case \"isolationGroup\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setIsolationGroup((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"maxWorkerExecuteTime\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxWorkerExecuteTime(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"multiThreaded\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setMultiThreaded((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"worker\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setWorker((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"workerPoolName\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setWorkerPoolName((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"workerPoolSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setWorkerPoolSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -75,2 +84,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(DeploymentOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(DeploymentOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getConfig() != null) {",
                "@@ -82,5 +95,5 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"extraClasspath\", array);",
                "-    }",
                "-    json.put(\"ha\", obj.isHa());",
                "-    json.put(\"instances\", obj.getInstances());",
                "+     }",
                "+      json.put(\"ha\", obj.isHa());",
                "+      json.put(\"instances\", obj.getInstances());",
                "     if (obj.getIsolatedClasses() != null) {",
                "@@ -89,3 +102,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"isolatedClasses\", array);",
                "-    }",
                "+     }",
                "     if (obj.getIsolationGroup() != null) {",
                "@@ -93,5 +106,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "-    json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "-    json.put(\"worker\", obj.isWorker());",
                "+      json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+      json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "+      json.put(\"worker\", obj.isWorker());",
                "     if (obj.getWorkerPoolName() != null) {",
                "@@ -99,4 +112,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "+      json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 89d244db6..9d74044c2 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.VertxOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.VertxOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.VertxOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,68 +11,116 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, VertxOptions obj) {",
                "-    if (json.getValue(\"addressResolverOptions\") instanceof JsonObject) {",
                "-      obj.setAddressResolverOptions(new io.vertx.core.dns.AddressResolverOptions((JsonObject)json.getValue(\"addressResolverOptions\")));",
                "-    }",
                "-    if (json.getValue(\"blockedThreadCheckInterval\") instanceof Number) {",
                "-      obj.setBlockedThreadCheckInterval(((Number)json.getValue(\"blockedThreadCheckInterval\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"clusterHost\") instanceof String) {",
                "-      obj.setClusterHost((String)json.getValue(\"clusterHost\"));",
                "-    }",
                "-    if (json.getValue(\"clusterPingInterval\") instanceof Number) {",
                "-      obj.setClusterPingInterval(((Number)json.getValue(\"clusterPingInterval\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"clusterPingReplyInterval\") instanceof Number) {",
                "-      obj.setClusterPingReplyInterval(((Number)json.getValue(\"clusterPingReplyInterval\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"clusterPort\") instanceof Number) {",
                "-      obj.setClusterPort(((Number)json.getValue(\"clusterPort\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"clusterPublicHost\") instanceof String) {",
                "-      obj.setClusterPublicHost((String)json.getValue(\"clusterPublicHost\"));",
                "-    }",
                "-    if (json.getValue(\"clusterPublicPort\") instanceof Number) {",
                "-      obj.setClusterPublicPort(((Number)json.getValue(\"clusterPublicPort\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"clustered\") instanceof Boolean) {",
                "-      obj.setClustered((Boolean)json.getValue(\"clustered\"));",
                "-    }",
                "-    if (json.getValue(\"eventBusOptions\") instanceof JsonObject) {",
                "-      obj.setEventBusOptions(new io.vertx.core.eventbus.EventBusOptions((JsonObject)json.getValue(\"eventBusOptions\")));",
                "-    }",
                "-    if (json.getValue(\"eventLoopPoolSize\") instanceof Number) {",
                "-      obj.setEventLoopPoolSize(((Number)json.getValue(\"eventLoopPoolSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"fileResolverCachingEnabled\") instanceof Boolean) {",
                "-      obj.setFileResolverCachingEnabled((Boolean)json.getValue(\"fileResolverCachingEnabled\"));",
                "-    }",
                "-    if (json.getValue(\"haEnabled\") instanceof Boolean) {",
                "-      obj.setHAEnabled((Boolean)json.getValue(\"haEnabled\"));",
                "-    }",
                "-    if (json.getValue(\"haGroup\") instanceof String) {",
                "-      obj.setHAGroup((String)json.getValue(\"haGroup\"));",
                "-    }",
                "-    if (json.getValue(\"internalBlockingPoolSize\") instanceof Number) {",
                "-      obj.setInternalBlockingPoolSize(((Number)json.getValue(\"internalBlockingPoolSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxEventLoopExecuteTime\") instanceof Number) {",
                "-      obj.setMaxEventLoopExecuteTime(((Number)json.getValue(\"maxEventLoopExecuteTime\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"maxWorkerExecuteTime\") instanceof Number) {",
                "-      obj.setMaxWorkerExecuteTime(((Number)json.getValue(\"maxWorkerExecuteTime\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"metricsOptions\") instanceof JsonObject) {",
                "-      obj.setMetricsOptions(new io.vertx.core.metrics.MetricsOptions((JsonObject)json.getValue(\"metricsOptions\")));",
                "-    }",
                "-    if (json.getValue(\"preferNativeTransport\") instanceof Boolean) {",
                "-      obj.setPreferNativeTransport((Boolean)json.getValue(\"preferNativeTransport\"));",
                "-    }",
                "-    if (json.getValue(\"quorumSize\") instanceof Number) {",
                "-      obj.setQuorumSize(((Number)json.getValue(\"quorumSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"warningExceptionTime\") instanceof Number) {",
                "-      obj.setWarningExceptionTime(((Number)json.getValue(\"warningExceptionTime\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"workerPoolSize\") instanceof Number) {",
                "-      obj.setWorkerPoolSize(((Number)json.getValue(\"workerPoolSize\")).intValue());",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, VertxOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"addressResolverOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setAddressResolverOptions(new io.vertx.core.dns.AddressResolverOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"blockedThreadCheckInterval\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setBlockedThreadCheckInterval(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterHost\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setClusterHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPingInterval\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setClusterPingInterval(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPingReplyInterval\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setClusterPingReplyInterval(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPort\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setClusterPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPublicHost\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setClusterPublicHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPublicPort\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setClusterPublicPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"clustered\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setClustered((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"eventBusOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setEventBusOptions(new io.vertx.core.eventbus.EventBusOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"eventLoopPoolSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setEventLoopPoolSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"fileResolverCachingEnabled\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setFileResolverCachingEnabled((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"haEnabled\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setHAEnabled((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"haGroup\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHAGroup((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"internalBlockingPoolSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setInternalBlockingPoolSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxEventLoopExecuteTime\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxEventLoopExecuteTime(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"maxWorkerExecuteTime\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxWorkerExecuteTime(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"metricsOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setMetricsOptions(new io.vertx.core.metrics.MetricsOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"preferNativeTransport\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setPreferNativeTransport((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"quorumSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setQuorumSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"warningExceptionTime\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setWarningExceptionTime(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"workerPoolSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setWorkerPoolSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -98,2 +129,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(VertxOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(VertxOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getAddressResolverOptions() != null) {",
                "@@ -101,3 +136,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "+      json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "     if (obj.getClusterHost() != null) {",
                "@@ -105,5 +140,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "-    json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "-    json.put(\"clusterPort\", obj.getClusterPort());",
                "+      json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "+      json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "+      json.put(\"clusterPort\", obj.getClusterPort());",
                "     if (obj.getClusterPublicHost() != null) {",
                "@@ -111,4 +146,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "-    json.put(\"clustered\", obj.isClustered());",
                "+      json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "+      json.put(\"clustered\", obj.isClustered());",
                "     if (obj.getEventBusOptions() != null) {",
                "@@ -116,5 +151,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"eventLoopPoolSize\", obj.getEventLoopPoolSize());",
                "-    json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "-    json.put(\"haEnabled\", obj.isHAEnabled());",
                "+      json.put(\"eventLoopPoolSize\", obj.getEventLoopPoolSize());",
                "+      json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "+      json.put(\"haEnabled\", obj.isHAEnabled());",
                "     if (obj.getHAGroup() != null) {",
                "@@ -122,5 +157,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"internalBlockingPoolSize\", obj.getInternalBlockingPoolSize());",
                "-    json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "-    json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+      json.put(\"internalBlockingPoolSize\", obj.getInternalBlockingPoolSize());",
                "+      json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "+      json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "     if (obj.getMetricsOptions() != null) {",
                "@@ -128,7 +163,7 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"preferNativeTransport\", obj.getPreferNativeTransport());",
                "-    json.put(\"quorumSize\", obj.getQuorumSize());",
                "-    json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "-    json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "+      json.put(\"preferNativeTransport\", obj.getPreferNativeTransport());",
                "+      json.put(\"quorumSize\", obj.getQuorumSize());",
                "+      json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "+      json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index c8b80b89d..fc4dd677c 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.cli;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.cli.Argument}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.cli.Argument} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.cli.Argument} original class using Vert.x codegen.",
                "  */",
                "@@ -28,23 +11,41 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, Argument obj) {",
                "-    if (json.getValue(\"argName\") instanceof String) {",
                "-      obj.setArgName((String)json.getValue(\"argName\"));",
                "-    }",
                "-    if (json.getValue(\"defaultValue\") instanceof String) {",
                "-      obj.setDefaultValue((String)json.getValue(\"defaultValue\"));",
                "-    }",
                "-    if (json.getValue(\"description\") instanceof String) {",
                "-      obj.setDescription((String)json.getValue(\"description\"));",
                "-    }",
                "-    if (json.getValue(\"hidden\") instanceof Boolean) {",
                "-      obj.setHidden((Boolean)json.getValue(\"hidden\"));",
                "-    }",
                "-    if (json.getValue(\"index\") instanceof Number) {",
                "-      obj.setIndex(((Number)json.getValue(\"index\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"multiValued\") instanceof Boolean) {",
                "-      obj.setMultiValued((Boolean)json.getValue(\"multiValued\"));",
                "-    }",
                "-    if (json.getValue(\"required\") instanceof Boolean) {",
                "-      obj.setRequired((Boolean)json.getValue(\"required\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, Argument obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"argName\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setArgName((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"defaultValue\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setDefaultValue((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"description\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setDescription((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"hidden\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setHidden((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"index\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setIndex(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"multiValued\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setMultiValued((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"required\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setRequired((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -53,2 +54,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(Argument obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(Argument obj, java.util.Map<String, Object> json) {",
                "     if (obj.getArgName() != null) {",
                "@@ -62,7 +67,7 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"hidden\", obj.isHidden());",
                "-    json.put(\"index\", obj.getIndex());",
                "-    json.put(\"multiValued\", obj.isMultiValued());",
                "-    json.put(\"required\", obj.isRequired());",
                "+      json.put(\"hidden\", obj.isHidden());",
                "+      json.put(\"index\", obj.getIndex());",
                "+      json.put(\"multiValued\", obj.isMultiValued());",
                "+      json.put(\"required\", obj.isRequired());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index 7b35c9a19..e4be84d20 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.cli;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.cli.Option}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.cli.Option} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.cli.Option} original class using Vert.x codegen.",
                "  */",
                "@@ -28,43 +11,73 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, Option obj) {",
                "-    if (json.getValue(\"argName\") instanceof String) {",
                "-      obj.setArgName((String)json.getValue(\"argName\"));",
                "-    }",
                "-    if (json.getValue(\"choices\") instanceof JsonArray) {",
                "-      java.util.LinkedHashSet<java.lang.String> list = new java.util.LinkedHashSet<>();",
                "-      json.getJsonArray(\"choices\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setChoices(list);",
                "-    }",
                "-    if (json.getValue(\"defaultValue\") instanceof String) {",
                "-      obj.setDefaultValue((String)json.getValue(\"defaultValue\"));",
                "-    }",
                "-    if (json.getValue(\"description\") instanceof String) {",
                "-      obj.setDescription((String)json.getValue(\"description\"));",
                "-    }",
                "-    if (json.getValue(\"flag\") instanceof Boolean) {",
                "-      obj.setFlag((Boolean)json.getValue(\"flag\"));",
                "-    }",
                "-    if (json.getValue(\"help\") instanceof Boolean) {",
                "-      obj.setHelp((Boolean)json.getValue(\"help\"));",
                "-    }",
                "-    if (json.getValue(\"hidden\") instanceof Boolean) {",
                "-      obj.setHidden((Boolean)json.getValue(\"hidden\"));",
                "-    }",
                "-    if (json.getValue(\"longName\") instanceof String) {",
                "-      obj.setLongName((String)json.getValue(\"longName\"));",
                "-    }",
                "-    if (json.getValue(\"multiValued\") instanceof Boolean) {",
                "-      obj.setMultiValued((Boolean)json.getValue(\"multiValued\"));",
                "-    }",
                "-    if (json.getValue(\"required\") instanceof Boolean) {",
                "-      obj.setRequired((Boolean)json.getValue(\"required\"));",
                "-    }",
                "-    if (json.getValue(\"shortName\") instanceof String) {",
                "-      obj.setShortName((String)json.getValue(\"shortName\"));",
                "-    }",
                "-    if (json.getValue(\"singleValued\") instanceof Boolean) {",
                "-      obj.setSingleValued((Boolean)json.getValue(\"singleValued\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, Option obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"argName\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setArgName((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"choices\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setChoices(list);",
                "+           }",
                "+            break;",
                "+          case \"defaultValue\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setDefaultValue((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"description\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setDescription((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"flag\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setFlag((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"help\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setHelp((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"hidden\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setHidden((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"longName\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setLongName((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"multiValued\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setMultiValued((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"name\":",
                "+            break;",
                "+          case \"required\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setRequired((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"shortName\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setShortName((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"singleValued\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSingleValued((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -73,2 +86,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(Option obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(Option obj, java.util.Map<String, Object> json) {",
                "     if (obj.getArgName() != null) {",
                "@@ -80,3 +97,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"choices\", array);",
                "-    }",
                "+     }",
                "     if (obj.getDefaultValue() != null) {",
                "@@ -87,5 +104,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"flag\", obj.isFlag());",
                "-    json.put(\"help\", obj.isHelp());",
                "-    json.put(\"hidden\", obj.isHidden());",
                "+      json.put(\"flag\", obj.isFlag());",
                "+      json.put(\"help\", obj.isHelp());",
                "+      json.put(\"hidden\", obj.isHidden());",
                "     if (obj.getLongName() != null) {",
                "@@ -93,3 +110,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"multiValued\", obj.isMultiValued());",
                "+      json.put(\"multiValued\", obj.isMultiValued());",
                "     if (obj.getName() != null) {",
                "@@ -97,3 +114,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"required\", obj.isRequired());",
                "+      json.put(\"required\", obj.isRequired());",
                "     if (obj.getShortName() != null) {",
                "@@ -101,4 +118,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"singleValued\", obj.isSingleValued());",
                "+      json.put(\"singleValued\", obj.isSingleValued());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index 31f002197..7d69b7049 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.datagram;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.datagram.DatagramSocketOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.datagram.DatagramSocketOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.datagram.DatagramSocketOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,17 +11,31 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, DatagramSocketOptions obj) {",
                "-    if (json.getValue(\"broadcast\") instanceof Boolean) {",
                "-      obj.setBroadcast((Boolean)json.getValue(\"broadcast\"));",
                "-    }",
                "-    if (json.getValue(\"ipV6\") instanceof Boolean) {",
                "-      obj.setIpV6((Boolean)json.getValue(\"ipV6\"));",
                "-    }",
                "-    if (json.getValue(\"loopbackModeDisabled\") instanceof Boolean) {",
                "-      obj.setLoopbackModeDisabled((Boolean)json.getValue(\"loopbackModeDisabled\"));",
                "-    }",
                "-    if (json.getValue(\"multicastNetworkInterface\") instanceof String) {",
                "-      obj.setMulticastNetworkInterface((String)json.getValue(\"multicastNetworkInterface\"));",
                "-    }",
                "-    if (json.getValue(\"multicastTimeToLive\") instanceof Number) {",
                "-      obj.setMulticastTimeToLive(((Number)json.getValue(\"multicastTimeToLive\")).intValue());",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, DatagramSocketOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"broadcast\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setBroadcast((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"ipV6\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setIpV6((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"loopbackModeDisabled\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setLoopbackModeDisabled((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"multicastNetworkInterface\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setMulticastNetworkInterface((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"multicastTimeToLive\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMulticastTimeToLive(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -47,5 +44,9 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(DatagramSocketOptions obj, JsonObject json) {",
                "-    json.put(\"broadcast\", obj.isBroadcast());",
                "-    json.put(\"ipV6\", obj.isIpV6());",
                "-    json.put(\"loopbackModeDisabled\", obj.isLoopbackModeDisabled());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(DatagramSocketOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"broadcast\", obj.isBroadcast());",
                "+      json.put(\"ipV6\", obj.isIpV6());",
                "+      json.put(\"loopbackModeDisabled\", obj.isLoopbackModeDisabled());",
                "     if (obj.getMulticastNetworkInterface() != null) {",
                "@@ -53,4 +54,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"multicastTimeToLive\", obj.getMulticastTimeToLive());",
                "+      json.put(\"multicastTimeToLive\", obj.getMulticastTimeToLive());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index c6ae260b5..0d39b8a80 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.dns;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.dns.AddressResolverOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.dns.AddressResolverOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.dns.AddressResolverOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,51 +11,81 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, AddressResolverOptions obj) {",
                "-    if (json.getValue(\"cacheMaxTimeToLive\") instanceof Number) {",
                "-      obj.setCacheMaxTimeToLive(((Number)json.getValue(\"cacheMaxTimeToLive\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"cacheMinTimeToLive\") instanceof Number) {",
                "-      obj.setCacheMinTimeToLive(((Number)json.getValue(\"cacheMinTimeToLive\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"cacheNegativeTimeToLive\") instanceof Number) {",
                "-      obj.setCacheNegativeTimeToLive(((Number)json.getValue(\"cacheNegativeTimeToLive\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"hostsPath\") instanceof String) {",
                "-      obj.setHostsPath((String)json.getValue(\"hostsPath\"));",
                "-    }",
                "-    if (json.getValue(\"hostsValue\") instanceof String) {",
                "-      obj.setHostsValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)json.getValue(\"hostsValue\"))));",
                "-    }",
                "-    if (json.getValue(\"maxQueries\") instanceof Number) {",
                "-      obj.setMaxQueries(((Number)json.getValue(\"maxQueries\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"ndots\") instanceof Number) {",
                "-      obj.setNdots(((Number)json.getValue(\"ndots\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"optResourceEnabled\") instanceof Boolean) {",
                "-      obj.setOptResourceEnabled((Boolean)json.getValue(\"optResourceEnabled\"));",
                "-    }",
                "-    if (json.getValue(\"queryTimeout\") instanceof Number) {",
                "-      obj.setQueryTimeout(((Number)json.getValue(\"queryTimeout\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"rdFlag\") instanceof Boolean) {",
                "-      obj.setRdFlag((Boolean)json.getValue(\"rdFlag\"));",
                "-    }",
                "-    if (json.getValue(\"rotateServers\") instanceof Boolean) {",
                "-      obj.setRotateServers((Boolean)json.getValue(\"rotateServers\"));",
                "-    }",
                "-    if (json.getValue(\"searchDomains\") instanceof JsonArray) {",
                "-      java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"searchDomains\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setSearchDomains(list);",
                "-    }",
                "-    if (json.getValue(\"servers\") instanceof JsonArray) {",
                "-      java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"servers\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setServers(list);",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, AddressResolverOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"cacheMaxTimeToLive\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setCacheMaxTimeToLive(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"cacheMinTimeToLive\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setCacheMinTimeToLive(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"cacheNegativeTimeToLive\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setCacheNegativeTimeToLive(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"hostsPath\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHostsPath((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"hostsValue\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHostsValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+            }",
                "+            break;",
                "+          case \"maxQueries\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxQueries(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"ndots\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setNdots(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"optResourceEnabled\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setOptResourceEnabled((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"queryTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setQueryTimeout(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"rdFlag\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setRdFlag((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"rotateServers\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setRotateServers((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"searchDomains\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setSearchDomains(list);",
                "+           }",
                "+            break;",
                "+          case \"servers\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setServers(list);",
                "+           }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -81,5 +94,9 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(AddressResolverOptions obj, JsonObject json) {",
                "-    json.put(\"cacheMaxTimeToLive\", obj.getCacheMaxTimeToLive());",
                "-    json.put(\"cacheMinTimeToLive\", obj.getCacheMinTimeToLive());",
                "-    json.put(\"cacheNegativeTimeToLive\", obj.getCacheNegativeTimeToLive());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(AddressResolverOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"cacheMaxTimeToLive\", obj.getCacheMaxTimeToLive());",
                "+      json.put(\"cacheMinTimeToLive\", obj.getCacheMinTimeToLive());",
                "+      json.put(\"cacheNegativeTimeToLive\", obj.getCacheNegativeTimeToLive());",
                "     if (obj.getHostsPath() != null) {",
                "@@ -88,10 +105,10 @@ import io.vertx.core.json.JsonArray;",
                "     if (obj.getHostsValue() != null) {",
                "-      json.put(\"hostsValue\", obj.getHostsValue().getBytes());",
                "-    }",
                "-    json.put(\"maxQueries\", obj.getMaxQueries());",
                "-    json.put(\"ndots\", obj.getNdots());",
                "-    json.put(\"optResourceEnabled\", obj.isOptResourceEnabled());",
                "-    json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "-    json.put(\"rdFlag\", obj.getRdFlag());",
                "-    json.put(\"rotateServers\", obj.isRotateServers());",
                "+      json.put(\"hostsValue\", java.util.Base64.getEncoder().encodeToString(obj.getHostsValue().getBytes()));",
                "+    }",
                "+      json.put(\"maxQueries\", obj.getMaxQueries());",
                "+      json.put(\"ndots\", obj.getNdots());",
                "+      json.put(\"optResourceEnabled\", obj.isOptResourceEnabled());",
                "+      json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+      json.put(\"rdFlag\", obj.getRdFlag());",
                "+      json.put(\"rotateServers\", obj.isRotateServers());",
                "     if (obj.getSearchDomains() != null) {",
                "@@ -100,3 +117,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"searchDomains\", array);",
                "-    }",
                "+     }",
                "     if (obj.getServers() != null) {",
                "@@ -105,4 +122,4 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"servers\", array);",
                "-    }",
                "+     }",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index c43759378..d80c58ab3 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.dns;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.dns.DnsClientOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.dns.DnsClientOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.dns.DnsClientOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,11 +11,21 @@ public class DnsClientOptionsConverter {",
                "-  public static void fromJson(JsonObject json, DnsClientOptions obj) {",
                "-    if (json.getValue(\"host\") instanceof String) {",
                "-      obj.setHost((String)json.getValue(\"host\"));",
                "-    }",
                "-    if (json.getValue(\"port\") instanceof Number) {",
                "-      obj.setPort(((Number)json.getValue(\"port\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"queryTimeout\") instanceof Number) {",
                "-      obj.setQueryTimeout(((Number)json.getValue(\"queryTimeout\")).longValue());",
                "+  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, DnsClientOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"host\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"port\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"queryTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setQueryTimeout(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -41,2 +34,6 @@ public class DnsClientOptionsConverter {",
                "   public static void toJson(DnsClientOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+  public static void toJson(DnsClientOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getHost() != null) {",
                "@@ -44,5 +41,5 @@ public class DnsClientOptionsConverter {",
                "     }",
                "-    json.put(\"port\", obj.getPort());",
                "-    json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+      json.put(\"port\", obj.getPort());",
                "+      json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index e621ae771..c9a029b77 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.eventbus;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.eventbus.EventBusOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.eventbus.EventBusOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.eventbus.EventBusOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,139 +11,225 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, EventBusOptions obj) {",
                "-    if (json.getValue(\"acceptBacklog\") instanceof Number) {",
                "-      obj.setAcceptBacklog(((Number)json.getValue(\"acceptBacklog\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"clientAuth\") instanceof String) {",
                "-      obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)json.getValue(\"clientAuth\")));",
                "-    }",
                "-    if (json.getValue(\"clusterPingInterval\") instanceof Number) {",
                "-      obj.setClusterPingInterval(((Number)json.getValue(\"clusterPingInterval\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"clusterPingReplyInterval\") instanceof Number) {",
                "-      obj.setClusterPingReplyInterval(((Number)json.getValue(\"clusterPingReplyInterval\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"clusterPublicHost\") instanceof String) {",
                "-      obj.setClusterPublicHost((String)json.getValue(\"clusterPublicHost\"));",
                "-    }",
                "-    if (json.getValue(\"clusterPublicPort\") instanceof Number) {",
                "-      obj.setClusterPublicPort(((Number)json.getValue(\"clusterPublicPort\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"clustered\") instanceof Boolean) {",
                "-      obj.setClustered((Boolean)json.getValue(\"clustered\"));",
                "-    }",
                "-    if (json.getValue(\"connectTimeout\") instanceof Number) {",
                "-      obj.setConnectTimeout(((Number)json.getValue(\"connectTimeout\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"crlPaths\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"crlPaths\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addCrlPath((String)item);",
                "-      });",
                "-    }",
                "-    if (json.getValue(\"crlValues\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"crlValues\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-      });",
                "-    }",
                "-    if (json.getValue(\"enabledCipherSuites\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"enabledCipherSuites\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addEnabledCipherSuite((String)item);",
                "-      });",
                "-    }",
                "-    if (json.getValue(\"enabledSecureTransportProtocols\") instanceof JsonArray) {",
                "-      java.util.LinkedHashSet<java.lang.String> list = new java.util.LinkedHashSet<>();",
                "-      json.getJsonArray(\"enabledSecureTransportProtocols\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setEnabledSecureTransportProtocols(list);",
                "-    }",
                "-    if (json.getValue(\"host\") instanceof String) {",
                "-      obj.setHost((String)json.getValue(\"host\"));",
                "-    }",
                "-    if (json.getValue(\"idleTimeout\") instanceof Number) {",
                "-      obj.setIdleTimeout(((Number)json.getValue(\"idleTimeout\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"jdkSslEngineOptions\") instanceof JsonObject) {",
                "-      obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)json.getValue(\"jdkSslEngineOptions\")));",
                "-    }",
                "-    if (json.getValue(\"keyStoreOptions\") instanceof JsonObject) {",
                "-      obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)json.getValue(\"keyStoreOptions\")));",
                "-    }",
                "-    if (json.getValue(\"logActivity\") instanceof Boolean) {",
                "-      obj.setLogActivity((Boolean)json.getValue(\"logActivity\"));",
                "-    }",
                "-    if (json.getValue(\"openSslEngineOptions\") instanceof JsonObject) {",
                "-      obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)json.getValue(\"openSslEngineOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pemKeyCertOptions\") instanceof JsonObject) {",
                "-      obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)json.getValue(\"pemKeyCertOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pemTrustOptions\") instanceof JsonObject) {",
                "-      obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)json.getValue(\"pemTrustOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pfxKeyCertOptions\") instanceof JsonObject) {",
                "-      obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)json.getValue(\"pfxKeyCertOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pfxTrustOptions\") instanceof JsonObject) {",
                "-      obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)json.getValue(\"pfxTrustOptions\")));",
                "-    }",
                "-    if (json.getValue(\"port\") instanceof Number) {",
                "-      obj.setPort(((Number)json.getValue(\"port\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"receiveBufferSize\") instanceof Number) {",
                "-      obj.setReceiveBufferSize(((Number)json.getValue(\"receiveBufferSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"reconnectAttempts\") instanceof Number) {",
                "-      obj.setReconnectAttempts(((Number)json.getValue(\"reconnectAttempts\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"reconnectInterval\") instanceof Number) {",
                "-      obj.setReconnectInterval(((Number)json.getValue(\"reconnectInterval\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"reuseAddress\") instanceof Boolean) {",
                "-      obj.setReuseAddress((Boolean)json.getValue(\"reuseAddress\"));",
                "-    }",
                "-    if (json.getValue(\"reusePort\") instanceof Boolean) {",
                "-      obj.setReusePort((Boolean)json.getValue(\"reusePort\"));",
                "-    }",
                "-    if (json.getValue(\"sendBufferSize\") instanceof Number) {",
                "-      obj.setSendBufferSize(((Number)json.getValue(\"sendBufferSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"soLinger\") instanceof Number) {",
                "-      obj.setSoLinger(((Number)json.getValue(\"soLinger\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"ssl\") instanceof Boolean) {",
                "-      obj.setSsl((Boolean)json.getValue(\"ssl\"));",
                "-    }",
                "-    if (json.getValue(\"tcpCork\") instanceof Boolean) {",
                "-      obj.setTcpCork((Boolean)json.getValue(\"tcpCork\"));",
                "-    }",
                "-    if (json.getValue(\"tcpFastOpen\") instanceof Boolean) {",
                "-      obj.setTcpFastOpen((Boolean)json.getValue(\"tcpFastOpen\"));",
                "-    }",
                "-    if (json.getValue(\"tcpKeepAlive\") instanceof Boolean) {",
                "-      obj.setTcpKeepAlive((Boolean)json.getValue(\"tcpKeepAlive\"));",
                "-    }",
                "-    if (json.getValue(\"tcpNoDelay\") instanceof Boolean) {",
                "-      obj.setTcpNoDelay((Boolean)json.getValue(\"tcpNoDelay\"));",
                "-    }",
                "-    if (json.getValue(\"tcpQuickAck\") instanceof Boolean) {",
                "-      obj.setTcpQuickAck((Boolean)json.getValue(\"tcpQuickAck\"));",
                "-    }",
                "-    if (json.getValue(\"trafficClass\") instanceof Number) {",
                "-      obj.setTrafficClass(((Number)json.getValue(\"trafficClass\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"trustAll\") instanceof Boolean) {",
                "-      obj.setTrustAll((Boolean)json.getValue(\"trustAll\"));",
                "-    }",
                "-    if (json.getValue(\"trustStoreOptions\") instanceof JsonObject) {",
                "-      obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)json.getValue(\"trustStoreOptions\")));",
                "-    }",
                "-    if (json.getValue(\"useAlpn\") instanceof Boolean) {",
                "-      obj.setUseAlpn((Boolean)json.getValue(\"useAlpn\"));",
                "-    }",
                "-    if (json.getValue(\"usePooledBuffers\") instanceof Boolean) {",
                "-      obj.setUsePooledBuffers((Boolean)json.getValue(\"usePooledBuffers\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, EventBusOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"acceptBacklog\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setAcceptBacklog(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"clientAuth\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"clusterPingInterval\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setClusterPingInterval(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPingReplyInterval\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setClusterPingReplyInterval(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPublicHost\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setClusterPublicHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"clusterPublicPort\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setClusterPublicPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"clustered\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setClustered((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"connectTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setConnectTimeout(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"crlPaths\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addCrlPath((String)item);",
                "+              });",
                "+           }",
                "+            break;",
                "+          case \"crlValues\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+              });",
                "+           }",
                "+            break;",
                "+          case \"enabledCipherSuites\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addEnabledCipherSuite((String)item);",
                "+              });",
                "+           }",
                "+            break;",
                "+          case \"enabledSecureTransportProtocols\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setEnabledSecureTransportProtocols(list);",
                "+           }",
                "+            break;",
                "+          case \"host\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"idleTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setIdleTimeout(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"jdkSslEngineOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"keyStoreOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"logActivity\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setLogActivity((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"openSslEngineOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pemKeyCertOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pemTrustOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pfxKeyCertOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pfxTrustOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"port\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"receiveBufferSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setReceiveBufferSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"reconnectAttempts\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setReconnectAttempts(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"reconnectInterval\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setReconnectInterval(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"reuseAddress\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setReuseAddress((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"reusePort\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setReusePort((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"sendBufferSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setSendBufferSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"soLinger\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setSoLinger(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"ssl\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSsl((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpCork\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpCork((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpFastOpen\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpFastOpen((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpKeepAlive\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpKeepAlive((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpNoDelay\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpNoDelay((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpQuickAck\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpQuickAck((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"trafficClass\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setTrafficClass(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"trustAll\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTrustAll((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"trustStoreOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"useAlpn\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setUseAlpn((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"usePooledBuffers\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setUsePooledBuffers((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -169,3 +238,7 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(EventBusOptions obj, JsonObject json) {",
                "-    json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(EventBusOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "     if (obj.getClientAuth() != null) {",
                "@@ -173,4 +246,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "-    json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "+      json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "+      json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "     if (obj.getClusterPublicHost() != null) {",
                "@@ -178,5 +251,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "-    json.put(\"clustered\", obj.isClustered());",
                "-    json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "+      json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "+      json.put(\"clustered\", obj.isClustered());",
                "+      json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "     if (obj.getCrlPaths() != null) {",
                "@@ -185,8 +258,8 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"crlPaths\", array);",
                "-    }",
                "+     }",
                "     if (obj.getCrlValues() != null) {",
                "       JsonArray array = new JsonArray();",
                "-      obj.getCrlValues().forEach(item -> array.add(item.getBytes()));",
                "+      obj.getCrlValues().forEach(item -> array.add(java.util.Base64.getEncoder().encodeToString(item.getBytes())));",
                "       json.put(\"crlValues\", array);",
                "-    }",
                "+     }",
                "     if (obj.getEnabledCipherSuites() != null) {",
                "@@ -195,3 +268,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledCipherSuites\", array);",
                "-    }",
                "+     }",
                "     if (obj.getEnabledSecureTransportProtocols() != null) {",
                "@@ -200,3 +273,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledSecureTransportProtocols\", array);",
                "-    }",
                "+     }",
                "     if (obj.getHost() != null) {",
                "@@ -204,3 +277,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+      json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "@@ -211,3 +284,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"logActivity\", obj.getLogActivity());",
                "+      json.put(\"logActivity\", obj.getLogActivity());",
                "     if (obj.getOpenSslEngineOptions() != null) {",
                "@@ -227,18 +300,18 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"port\", obj.getPort());",
                "-    json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "-    json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "-    json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "-    json.put(\"reuseAddress\", obj.isReuseAddress());",
                "-    json.put(\"reusePort\", obj.isReusePort());",
                "-    json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "-    json.put(\"soLinger\", obj.getSoLinger());",
                "-    json.put(\"ssl\", obj.isSsl());",
                "-    json.put(\"tcpCork\", obj.isTcpCork());",
                "-    json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "-    json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "-    json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "-    json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "-    json.put(\"trafficClass\", obj.getTrafficClass());",
                "-    json.put(\"trustAll\", obj.isTrustAll());",
                "+      json.put(\"port\", obj.getPort());",
                "+      json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "+      json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "+      json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "+      json.put(\"reuseAddress\", obj.isReuseAddress());",
                "+      json.put(\"reusePort\", obj.isReusePort());",
                "+      json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "+      json.put(\"soLinger\", obj.getSoLinger());",
                "+      json.put(\"ssl\", obj.isSsl());",
                "+      json.put(\"tcpCork\", obj.isTcpCork());",
                "+      json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "+      json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "+      json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "+      json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "+      json.put(\"trafficClass\", obj.getTrafficClass());",
                "+      json.put(\"trustAll\", obj.isTrustAll());",
                "     if (obj.getTrustStoreOptions() != null) {",
                "@@ -246,5 +319,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"useAlpn\", obj.isUseAlpn());",
                "-    json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "+      json.put(\"useAlpn\", obj.isUseAlpn());",
                "+      json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index 2e77f66e6..940481452 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.file;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.file.CopyOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.file.CopyOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.file.CopyOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,14 +11,26 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, CopyOptions obj) {",
                "-    if (json.getValue(\"atomicMove\") instanceof Boolean) {",
                "-      obj.setAtomicMove((Boolean)json.getValue(\"atomicMove\"));",
                "-    }",
                "-    if (json.getValue(\"copyAttributes\") instanceof Boolean) {",
                "-      obj.setCopyAttributes((Boolean)json.getValue(\"copyAttributes\"));",
                "-    }",
                "-    if (json.getValue(\"nofollowLinks\") instanceof Boolean) {",
                "-      obj.setNofollowLinks((Boolean)json.getValue(\"nofollowLinks\"));",
                "-    }",
                "-    if (json.getValue(\"replaceExisting\") instanceof Boolean) {",
                "-      obj.setReplaceExisting((Boolean)json.getValue(\"replaceExisting\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, CopyOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"atomicMove\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setAtomicMove((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"copyAttributes\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setCopyAttributes((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"nofollowLinks\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setNofollowLinks((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"replaceExisting\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setReplaceExisting((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -44,7 +39,11 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(CopyOptions obj, JsonObject json) {",
                "-    json.put(\"atomicMove\", obj.isAtomicMove());",
                "-    json.put(\"copyAttributes\", obj.isCopyAttributes());",
                "-    json.put(\"nofollowLinks\", obj.isNofollowLinks());",
                "-    json.put(\"replaceExisting\", obj.isReplaceExisting());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(CopyOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"atomicMove\", obj.isAtomicMove());",
                "+      json.put(\"copyAttributes\", obj.isCopyAttributes());",
                "+      json.put(\"nofollowLinks\", obj.isNofollowLinks());",
                "+      json.put(\"replaceExisting\", obj.isReplaceExisting());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index 5acb4b487..ac2b0b66e 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.file;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.file.OpenOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.file.OpenOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.file.OpenOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,35 +11,61 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, OpenOptions obj) {",
                "-    if (json.getValue(\"append\") instanceof Boolean) {",
                "-      obj.setAppend((Boolean)json.getValue(\"append\"));",
                "-    }",
                "-    if (json.getValue(\"create\") instanceof Boolean) {",
                "-      obj.setCreate((Boolean)json.getValue(\"create\"));",
                "-    }",
                "-    if (json.getValue(\"createNew\") instanceof Boolean) {",
                "-      obj.setCreateNew((Boolean)json.getValue(\"createNew\"));",
                "-    }",
                "-    if (json.getValue(\"deleteOnClose\") instanceof Boolean) {",
                "-      obj.setDeleteOnClose((Boolean)json.getValue(\"deleteOnClose\"));",
                "-    }",
                "-    if (json.getValue(\"dsync\") instanceof Boolean) {",
                "-      obj.setDsync((Boolean)json.getValue(\"dsync\"));",
                "-    }",
                "-    if (json.getValue(\"perms\") instanceof String) {",
                "-      obj.setPerms((String)json.getValue(\"perms\"));",
                "-    }",
                "-    if (json.getValue(\"read\") instanceof Boolean) {",
                "-      obj.setRead((Boolean)json.getValue(\"read\"));",
                "-    }",
                "-    if (json.getValue(\"sparse\") instanceof Boolean) {",
                "-      obj.setSparse((Boolean)json.getValue(\"sparse\"));",
                "-    }",
                "-    if (json.getValue(\"sync\") instanceof Boolean) {",
                "-      obj.setSync((Boolean)json.getValue(\"sync\"));",
                "-    }",
                "-    if (json.getValue(\"truncateExisting\") instanceof Boolean) {",
                "-      obj.setTruncateExisting((Boolean)json.getValue(\"truncateExisting\"));",
                "-    }",
                "-    if (json.getValue(\"write\") instanceof Boolean) {",
                "-      obj.setWrite((Boolean)json.getValue(\"write\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, OpenOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"append\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setAppend((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"create\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setCreate((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"createNew\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setCreateNew((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"deleteOnClose\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setDeleteOnClose((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"dsync\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setDsync((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"perms\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setPerms((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"read\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setRead((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"sparse\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSparse((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"sync\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSync((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"truncateExisting\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTruncateExisting((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"write\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setWrite((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -65,7 +74,11 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(OpenOptions obj, JsonObject json) {",
                "-    json.put(\"append\", obj.isAppend());",
                "-    json.put(\"create\", obj.isCreate());",
                "-    json.put(\"createNew\", obj.isCreateNew());",
                "-    json.put(\"deleteOnClose\", obj.isDeleteOnClose());",
                "-    json.put(\"dsync\", obj.isDsync());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(OpenOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"append\", obj.isAppend());",
                "+      json.put(\"create\", obj.isCreate());",
                "+      json.put(\"createNew\", obj.isCreateNew());",
                "+      json.put(\"deleteOnClose\", obj.isDeleteOnClose());",
                "+      json.put(\"dsync\", obj.isDsync());",
                "     if (obj.getPerms() != null) {",
                "@@ -73,8 +86,8 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"read\", obj.isRead());",
                "-    json.put(\"sparse\", obj.isSparse());",
                "-    json.put(\"sync\", obj.isSync());",
                "-    json.put(\"truncateExisting\", obj.isTruncateExisting());",
                "-    json.put(\"write\", obj.isWrite());",
                "+      json.put(\"read\", obj.isRead());",
                "+      json.put(\"sparse\", obj.isSparse());",
                "+      json.put(\"sync\", obj.isSync());",
                "+      json.put(\"truncateExisting\", obj.isTruncateExisting());",
                "+      json.put(\"write\", obj.isWrite());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index 70db820cf..6388dd6e3 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.http;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.GoAway}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.GoAway} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.GoAway} original class using Vert.x codegen.",
                "  */",
                "@@ -28,11 +11,21 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, GoAway obj) {",
                "-    if (json.getValue(\"debugData\") instanceof String) {",
                "-      obj.setDebugData(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)json.getValue(\"debugData\"))));",
                "-    }",
                "-    if (json.getValue(\"errorCode\") instanceof Number) {",
                "-      obj.setErrorCode(((Number)json.getValue(\"errorCode\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"lastStreamId\") instanceof Number) {",
                "-      obj.setLastStreamId(((Number)json.getValue(\"lastStreamId\")).intValue());",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, GoAway obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"debugData\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setDebugData(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+            }",
                "+            break;",
                "+          case \"errorCode\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setErrorCode(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"lastStreamId\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setLastStreamId(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -41,8 +34,12 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(GoAway obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(GoAway obj, java.util.Map<String, Object> json) {",
                "     if (obj.getDebugData() != null) {",
                "-      json.put(\"debugData\", obj.getDebugData().getBytes());",
                "+      json.put(\"debugData\", java.util.Base64.getEncoder().encodeToString(obj.getDebugData().getBytes()));",
                "     }",
                "-    json.put(\"errorCode\", obj.getErrorCode());",
                "-    json.put(\"lastStreamId\", obj.getLastStreamId());",
                "+      json.put(\"errorCode\", obj.getErrorCode());",
                "+      json.put(\"lastStreamId\", obj.getLastStreamId());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 4d84d5f81..528883bc5 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.http;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.Http2Settings}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.Http2Settings} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.Http2Settings} original class using Vert.x codegen.",
                "  */",
                "@@ -28,20 +11,36 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, Http2Settings obj) {",
                "-    if (json.getValue(\"headerTableSize\") instanceof Number) {",
                "-      obj.setHeaderTableSize(((Number)json.getValue(\"headerTableSize\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"initialWindowSize\") instanceof Number) {",
                "-      obj.setInitialWindowSize(((Number)json.getValue(\"initialWindowSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxConcurrentStreams\") instanceof Number) {",
                "-      obj.setMaxConcurrentStreams(((Number)json.getValue(\"maxConcurrentStreams\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"maxFrameSize\") instanceof Number) {",
                "-      obj.setMaxFrameSize(((Number)json.getValue(\"maxFrameSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxHeaderListSize\") instanceof Number) {",
                "-      obj.setMaxHeaderListSize(((Number)json.getValue(\"maxHeaderListSize\")).longValue());",
                "-    }",
                "-    if (json.getValue(\"pushEnabled\") instanceof Boolean) {",
                "-      obj.setPushEnabled((Boolean)json.getValue(\"pushEnabled\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, Http2Settings obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"headerTableSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setHeaderTableSize(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"initialWindowSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setInitialWindowSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxConcurrentStreams\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxConcurrentStreams(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"maxFrameSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxFrameSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxHeaderListSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxHeaderListSize(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+          case \"pushEnabled\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setPushEnabled((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -50,9 +49,13 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(Http2Settings obj, JsonObject json) {",
                "-    json.put(\"headerTableSize\", obj.getHeaderTableSize());",
                "-    json.put(\"initialWindowSize\", obj.getInitialWindowSize());",
                "-    json.put(\"maxConcurrentStreams\", obj.getMaxConcurrentStreams());",
                "-    json.put(\"maxFrameSize\", obj.getMaxFrameSize());",
                "-    json.put(\"maxHeaderListSize\", obj.getMaxHeaderListSize());",
                "-    json.put(\"pushEnabled\", obj.isPushEnabled());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(Http2Settings obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"headerTableSize\", obj.getHeaderTableSize());",
                "+      json.put(\"initialWindowSize\", obj.getInitialWindowSize());",
                "+      json.put(\"maxConcurrentStreams\", obj.getMaxConcurrentStreams());",
                "+      json.put(\"maxFrameSize\", obj.getMaxFrameSize());",
                "+      json.put(\"maxHeaderListSize\", obj.getMaxHeaderListSize());",
                "+      json.put(\"pushEnabled\", obj.isPushEnabled());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index 24caa3ecc..c97ef4e05 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.http;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.HttpClientOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.HttpClientOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.HttpClientOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,91 +11,151 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, HttpClientOptions obj) {",
                "-    if (json.getValue(\"alpnVersions\") instanceof JsonArray) {",
                "-      java.util.ArrayList<io.vertx.core.http.HttpVersion> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"alpnVersions\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "-      });",
                "-      obj.setAlpnVersions(list);",
                "-    }",
                "-    if (json.getValue(\"decoderInitialBufferSize\") instanceof Number) {",
                "-      obj.setDecoderInitialBufferSize(((Number)json.getValue(\"decoderInitialBufferSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"defaultHost\") instanceof String) {",
                "-      obj.setDefaultHost((String)json.getValue(\"defaultHost\"));",
                "-    }",
                "-    if (json.getValue(\"defaultPort\") instanceof Number) {",
                "-      obj.setDefaultPort(((Number)json.getValue(\"defaultPort\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"forceSni\") instanceof Boolean) {",
                "-      obj.setForceSni((Boolean)json.getValue(\"forceSni\"));",
                "-    }",
                "-    if (json.getValue(\"http2ClearTextUpgrade\") instanceof Boolean) {",
                "-      obj.setHttp2ClearTextUpgrade((Boolean)json.getValue(\"http2ClearTextUpgrade\"));",
                "-    }",
                "-    if (json.getValue(\"http2ConnectionWindowSize\") instanceof Number) {",
                "-      obj.setHttp2ConnectionWindowSize(((Number)json.getValue(\"http2ConnectionWindowSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"http2KeepAliveTimeout\") instanceof Number) {",
                "-      obj.setHttp2KeepAliveTimeout(((Number)json.getValue(\"http2KeepAliveTimeout\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"http2MaxPoolSize\") instanceof Number) {",
                "-      obj.setHttp2MaxPoolSize(((Number)json.getValue(\"http2MaxPoolSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"http2MultiplexingLimit\") instanceof Number) {",
                "-      obj.setHttp2MultiplexingLimit(((Number)json.getValue(\"http2MultiplexingLimit\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"initialSettings\") instanceof JsonObject) {",
                "-      obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)json.getValue(\"initialSettings\")));",
                "-    }",
                "-    if (json.getValue(\"keepAlive\") instanceof Boolean) {",
                "-      obj.setKeepAlive((Boolean)json.getValue(\"keepAlive\"));",
                "-    }",
                "-    if (json.getValue(\"keepAliveTimeout\") instanceof Number) {",
                "-      obj.setKeepAliveTimeout(((Number)json.getValue(\"keepAliveTimeout\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxChunkSize\") instanceof Number) {",
                "-      obj.setMaxChunkSize(((Number)json.getValue(\"maxChunkSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxHeaderSize\") instanceof Number) {",
                "-      obj.setMaxHeaderSize(((Number)json.getValue(\"maxHeaderSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxInitialLineLength\") instanceof Number) {",
                "-      obj.setMaxInitialLineLength(((Number)json.getValue(\"maxInitialLineLength\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxPoolSize\") instanceof Number) {",
                "-      obj.setMaxPoolSize(((Number)json.getValue(\"maxPoolSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxRedirects\") instanceof Number) {",
                "-      obj.setMaxRedirects(((Number)json.getValue(\"maxRedirects\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxWaitQueueSize\") instanceof Number) {",
                "-      obj.setMaxWaitQueueSize(((Number)json.getValue(\"maxWaitQueueSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxWebsocketFrameSize\") instanceof Number) {",
                "-      obj.setMaxWebsocketFrameSize(((Number)json.getValue(\"maxWebsocketFrameSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxWebsocketMessageSize\") instanceof Number) {",
                "-      obj.setMaxWebsocketMessageSize(((Number)json.getValue(\"maxWebsocketMessageSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"pipelining\") instanceof Boolean) {",
                "-      obj.setPipelining((Boolean)json.getValue(\"pipelining\"));",
                "-    }",
                "-    if (json.getValue(\"pipeliningLimit\") instanceof Number) {",
                "-      obj.setPipeliningLimit(((Number)json.getValue(\"pipeliningLimit\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"poolCleanerPeriod\") instanceof Number) {",
                "-      obj.setPoolCleanerPeriod(((Number)json.getValue(\"poolCleanerPeriod\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"protocolVersion\") instanceof String) {",
                "-      obj.setProtocolVersion(io.vertx.core.http.HttpVersion.valueOf((String)json.getValue(\"protocolVersion\")));",
                "-    }",
                "-    if (json.getValue(\"sendUnmaskedFrames\") instanceof Boolean) {",
                "-      obj.setSendUnmaskedFrames((Boolean)json.getValue(\"sendUnmaskedFrames\"));",
                "-    }",
                "-    if (json.getValue(\"tryUseCompression\") instanceof Boolean) {",
                "-      obj.setTryUseCompression((Boolean)json.getValue(\"tryUseCompression\"));",
                "-    }",
                "-    if (json.getValue(\"verifyHost\") instanceof Boolean) {",
                "-      obj.setVerifyHost((Boolean)json.getValue(\"verifyHost\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, HttpClientOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"alpnVersions\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<io.vertx.core.http.HttpVersion> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "+              });",
                "+              obj.setAlpnVersions(list);",
                "+           }",
                "+            break;",
                "+          case \"decoderInitialBufferSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setDecoderInitialBufferSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"defaultHost\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setDefaultHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"defaultPort\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setDefaultPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"forceSni\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setForceSni((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"http2ClearTextUpgrade\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setHttp2ClearTextUpgrade((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"http2ConnectionWindowSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setHttp2ConnectionWindowSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"http2KeepAliveTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setHttp2KeepAliveTimeout(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"http2MaxPoolSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setHttp2MaxPoolSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"http2MultiplexingLimit\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setHttp2MultiplexingLimit(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"initialSettings\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"keepAlive\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setKeepAlive((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"keepAliveTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setKeepAliveTimeout(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxChunkSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxChunkSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxHeaderSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxHeaderSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxInitialLineLength\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxInitialLineLength(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxPoolSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxPoolSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxRedirects\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxRedirects(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxWaitQueueSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxWaitQueueSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxWebsocketFrameSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxWebsocketFrameSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxWebsocketMessageSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxWebsocketMessageSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"pipelining\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setPipelining((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"pipeliningLimit\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setPipeliningLimit(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"poolCleanerPeriod\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setPoolCleanerPeriod(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"protocolVersion\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setProtocolVersion(io.vertx.core.http.HttpVersion.valueOf((String)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"sendUnmaskedFrames\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSendUnmaskedFrames((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tryUseCompression\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTryUseCompression((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"verifyHost\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setVerifyHost((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -121,2 +164,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(HttpClientOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(HttpClientOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getAlpnVersions() != null) {",
                "@@ -125,4 +172,4 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"alpnVersions\", array);",
                "-    }",
                "-    json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "+     }",
                "+      json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "     if (obj.getDefaultHost() != null) {",
                "@@ -130,9 +177,9 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"defaultPort\", obj.getDefaultPort());",
                "-    json.put(\"forceSni\", obj.isForceSni());",
                "-    json.put(\"http2ClearTextUpgrade\", obj.isHttp2ClearTextUpgrade());",
                "-    json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "-    json.put(\"http2KeepAliveTimeout\", obj.getHttp2KeepAliveTimeout());",
                "-    json.put(\"http2MaxPoolSize\", obj.getHttp2MaxPoolSize());",
                "-    json.put(\"http2MultiplexingLimit\", obj.getHttp2MultiplexingLimit());",
                "+      json.put(\"defaultPort\", obj.getDefaultPort());",
                "+      json.put(\"forceSni\", obj.isForceSni());",
                "+      json.put(\"http2ClearTextUpgrade\", obj.isHttp2ClearTextUpgrade());",
                "+      json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "+      json.put(\"http2KeepAliveTimeout\", obj.getHttp2KeepAliveTimeout());",
                "+      json.put(\"http2MaxPoolSize\", obj.getHttp2MaxPoolSize());",
                "+      json.put(\"http2MultiplexingLimit\", obj.getHttp2MultiplexingLimit());",
                "     if (obj.getInitialSettings() != null) {",
                "@@ -140,15 +187,15 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"keepAlive\", obj.isKeepAlive());",
                "-    json.put(\"keepAliveTimeout\", obj.getKeepAliveTimeout());",
                "-    json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "-    json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "-    json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "-    json.put(\"maxPoolSize\", obj.getMaxPoolSize());",
                "-    json.put(\"maxRedirects\", obj.getMaxRedirects());",
                "-    json.put(\"maxWaitQueueSize\", obj.getMaxWaitQueueSize());",
                "-    json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "-    json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "-    json.put(\"pipelining\", obj.isPipelining());",
                "-    json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "-    json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "+      json.put(\"keepAlive\", obj.isKeepAlive());",
                "+      json.put(\"keepAliveTimeout\", obj.getKeepAliveTimeout());",
                "+      json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "+      json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "+      json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "+      json.put(\"maxPoolSize\", obj.getMaxPoolSize());",
                "+      json.put(\"maxRedirects\", obj.getMaxRedirects());",
                "+      json.put(\"maxWaitQueueSize\", obj.getMaxWaitQueueSize());",
                "+      json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "+      json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "+      json.put(\"pipelining\", obj.isPipelining());",
                "+      json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "+      json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "     if (obj.getProtocolVersion() != null) {",
                "@@ -156,6 +203,6 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"sendUnmaskedFrames\", obj.isSendUnmaskedFrames());",
                "-    json.put(\"tryUseCompression\", obj.isTryUseCompression());",
                "-    json.put(\"verifyHost\", obj.isVerifyHost());",
                "+      json.put(\"sendUnmaskedFrames\", obj.isSendUnmaskedFrames());",
                "+      json.put(\"tryUseCompression\", obj.isTryUseCompression());",
                "+      json.put(\"verifyHost\", obj.isVerifyHost());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index 06a0f1862..c816472a6 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.http;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.HttpServerOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.HttpServerOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.HttpServerOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,52 +11,86 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, HttpServerOptions obj) {",
                "-    if (json.getValue(\"acceptUnmaskedFrames\") instanceof Boolean) {",
                "-      obj.setAcceptUnmaskedFrames((Boolean)json.getValue(\"acceptUnmaskedFrames\"));",
                "-    }",
                "-    if (json.getValue(\"alpnVersions\") instanceof JsonArray) {",
                "-      java.util.ArrayList<io.vertx.core.http.HttpVersion> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"alpnVersions\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "-      });",
                "-      obj.setAlpnVersions(list);",
                "-    }",
                "-    if (json.getValue(\"compressionLevel\") instanceof Number) {",
                "-      obj.setCompressionLevel(((Number)json.getValue(\"compressionLevel\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"compressionSupported\") instanceof Boolean) {",
                "-      obj.setCompressionSupported((Boolean)json.getValue(\"compressionSupported\"));",
                "-    }",
                "-    if (json.getValue(\"decoderInitialBufferSize\") instanceof Number) {",
                "-      obj.setDecoderInitialBufferSize(((Number)json.getValue(\"decoderInitialBufferSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"decompressionSupported\") instanceof Boolean) {",
                "-      obj.setDecompressionSupported((Boolean)json.getValue(\"decompressionSupported\"));",
                "-    }",
                "-    if (json.getValue(\"handle100ContinueAutomatically\") instanceof Boolean) {",
                "-      obj.setHandle100ContinueAutomatically((Boolean)json.getValue(\"handle100ContinueAutomatically\"));",
                "-    }",
                "-    if (json.getValue(\"http2ConnectionWindowSize\") instanceof Number) {",
                "-      obj.setHttp2ConnectionWindowSize(((Number)json.getValue(\"http2ConnectionWindowSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"initialSettings\") instanceof JsonObject) {",
                "-      obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)json.getValue(\"initialSettings\")));",
                "-    }",
                "-    if (json.getValue(\"maxChunkSize\") instanceof Number) {",
                "-      obj.setMaxChunkSize(((Number)json.getValue(\"maxChunkSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxHeaderSize\") instanceof Number) {",
                "-      obj.setMaxHeaderSize(((Number)json.getValue(\"maxHeaderSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxInitialLineLength\") instanceof Number) {",
                "-      obj.setMaxInitialLineLength(((Number)json.getValue(\"maxInitialLineLength\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxWebsocketFrameSize\") instanceof Number) {",
                "-      obj.setMaxWebsocketFrameSize(((Number)json.getValue(\"maxWebsocketFrameSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"maxWebsocketMessageSize\") instanceof Number) {",
                "-      obj.setMaxWebsocketMessageSize(((Number)json.getValue(\"maxWebsocketMessageSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"websocketSubProtocols\") instanceof String) {",
                "-      obj.setWebsocketSubProtocols((String)json.getValue(\"websocketSubProtocols\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, HttpServerOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"acceptUnmaskedFrames\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setAcceptUnmaskedFrames((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"alpnVersions\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<io.vertx.core.http.HttpVersion> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "+              });",
                "+              obj.setAlpnVersions(list);",
                "+           }",
                "+            break;",
                "+          case \"compressionLevel\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setCompressionLevel(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"compressionSupported\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setCompressionSupported((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"decoderInitialBufferSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setDecoderInitialBufferSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"decompressionSupported\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setDecompressionSupported((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"handle100ContinueAutomatically\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setHandle100ContinueAutomatically((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"http2ConnectionWindowSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setHttp2ConnectionWindowSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"initialSettings\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"maxChunkSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxChunkSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxHeaderSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxHeaderSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxInitialLineLength\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxInitialLineLength(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxWebsocketFrameSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxWebsocketFrameSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"maxWebsocketMessageSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setMaxWebsocketMessageSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"websocketSubProtocols\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setWebsocketSubProtocols((String)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -82,3 +99,7 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(HttpServerOptions obj, JsonObject json) {",
                "-    json.put(\"acceptUnmaskedFrames\", obj.isAcceptUnmaskedFrames());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(HttpServerOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"acceptUnmaskedFrames\", obj.isAcceptUnmaskedFrames());",
                "     if (obj.getAlpnVersions() != null) {",
                "@@ -87,9 +108,9 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"alpnVersions\", array);",
                "-    }",
                "-    json.put(\"compressionLevel\", obj.getCompressionLevel());",
                "-    json.put(\"compressionSupported\", obj.isCompressionSupported());",
                "-    json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "-    json.put(\"decompressionSupported\", obj.isDecompressionSupported());",
                "-    json.put(\"handle100ContinueAutomatically\", obj.isHandle100ContinueAutomatically());",
                "-    json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "+     }",
                "+      json.put(\"compressionLevel\", obj.getCompressionLevel());",
                "+      json.put(\"compressionSupported\", obj.isCompressionSupported());",
                "+      json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "+      json.put(\"decompressionSupported\", obj.isDecompressionSupported());",
                "+      json.put(\"handle100ContinueAutomatically\", obj.isHandle100ContinueAutomatically());",
                "+      json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "     if (obj.getInitialSettings() != null) {",
                "@@ -97,7 +118,7 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "-    json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "-    json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "-    json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "-    json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "+      json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "+      json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "+      json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "+      json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "+      json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "     if (obj.getWebsocketSubProtocols() != null) {",
                "@@ -106,2 +127,2 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index 4c1a6f6bc..ea8f174db 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.metrics;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.metrics.MetricsOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.metrics.MetricsOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.metrics.MetricsOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,5 +11,11 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, MetricsOptions obj) {",
                "-    if (json.getValue(\"enabled\") instanceof Boolean) {",
                "-      obj.setEnabled((Boolean)json.getValue(\"enabled\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, MetricsOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"enabled\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setEnabled((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -35,4 +24,8 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(MetricsOptions obj, JsonObject json) {",
                "-    json.put(\"enabled\", obj.isEnabled());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(MetricsOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"enabled\", obj.isEnabled());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index b21c4e130..53ebe1b7a 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.ClientOptionsBase}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.ClientOptionsBase} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.ClientOptionsBase} original class using Vert.x codegen.",
                "  */",
                "@@ -28,17 +11,31 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, ClientOptionsBase obj) {",
                "-    if (json.getValue(\"connectTimeout\") instanceof Number) {",
                "-      obj.setConnectTimeout(((Number)json.getValue(\"connectTimeout\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"localAddress\") instanceof String) {",
                "-      obj.setLocalAddress((String)json.getValue(\"localAddress\"));",
                "-    }",
                "-    if (json.getValue(\"metricsName\") instanceof String) {",
                "-      obj.setMetricsName((String)json.getValue(\"metricsName\"));",
                "-    }",
                "-    if (json.getValue(\"proxyOptions\") instanceof JsonObject) {",
                "-      obj.setProxyOptions(new io.vertx.core.net.ProxyOptions((JsonObject)json.getValue(\"proxyOptions\")));",
                "-    }",
                "-    if (json.getValue(\"trustAll\") instanceof Boolean) {",
                "-      obj.setTrustAll((Boolean)json.getValue(\"trustAll\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, ClientOptionsBase obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"connectTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setConnectTimeout(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"localAddress\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setLocalAddress((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"metricsName\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setMetricsName((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"proxyOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setProxyOptions(new io.vertx.core.net.ProxyOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"trustAll\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTrustAll((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -47,3 +44,7 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(ClientOptionsBase obj, JsonObject json) {",
                "-    json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(ClientOptionsBase obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "     if (obj.getLocalAddress() != null) {",
                "@@ -57,4 +58,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"trustAll\", obj.isTrustAll());",
                "+      json.put(\"trustAll\", obj.isTrustAll());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "index e81d23987..33dfead12 100644",
                "--- a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.JksOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.JksOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.JksOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,11 +11,21 @@ public class JksOptionsConverter {",
                "-  public static void fromJson(JsonObject json, JksOptions obj) {",
                "-    if (json.getValue(\"password\") instanceof String) {",
                "-      obj.setPassword((String)json.getValue(\"password\"));",
                "-    }",
                "-    if (json.getValue(\"path\") instanceof String) {",
                "-      obj.setPath((String)json.getValue(\"path\"));",
                "-    }",
                "-    if (json.getValue(\"value\") instanceof String) {",
                "-      obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)json.getValue(\"value\"))));",
                "+  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, JksOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"password\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setPassword((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"path\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setPath((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"value\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -41,2 +34,6 @@ public class JksOptionsConverter {",
                "   public static void toJson(JksOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+  public static void toJson(JksOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getPassword() != null) {",
                "@@ -48,5 +45,5 @@ public class JksOptionsConverter {",
                "     if (obj.getValue() != null) {",
                "-      json.put(\"value\", obj.getValue().getBytes());",
                "+      json.put(\"value\", java.util.Base64.getEncoder().encodeToString(obj.getValue().getBytes()));",
                "     }",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index d84b85e14..b4eebf66d 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.NetClientOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.NetClientOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.NetClientOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,11 +11,21 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, NetClientOptions obj) {",
                "-    if (json.getValue(\"hostnameVerificationAlgorithm\") instanceof String) {",
                "-      obj.setHostnameVerificationAlgorithm((String)json.getValue(\"hostnameVerificationAlgorithm\"));",
                "-    }",
                "-    if (json.getValue(\"reconnectAttempts\") instanceof Number) {",
                "-      obj.setReconnectAttempts(((Number)json.getValue(\"reconnectAttempts\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"reconnectInterval\") instanceof Number) {",
                "-      obj.setReconnectInterval(((Number)json.getValue(\"reconnectInterval\")).longValue());",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, NetClientOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"hostnameVerificationAlgorithm\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHostnameVerificationAlgorithm((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"reconnectAttempts\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setReconnectAttempts(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"reconnectInterval\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setReconnectInterval(((Number)member.getValue()).longValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -41,2 +34,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(NetClientOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(NetClientOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getHostnameVerificationAlgorithm() != null) {",
                "@@ -44,5 +41,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "-    json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "+      json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "+      json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index 529719020..e65f86c84 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.NetServerOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.NetServerOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.NetServerOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,20 +11,36 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, NetServerOptions obj) {",
                "-    if (json.getValue(\"acceptBacklog\") instanceof Number) {",
                "-      obj.setAcceptBacklog(((Number)json.getValue(\"acceptBacklog\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"clientAuth\") instanceof String) {",
                "-      obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)json.getValue(\"clientAuth\")));",
                "-    }",
                "-    if (json.getValue(\"clientAuthRequired\") instanceof Boolean) {",
                "-      obj.setClientAuthRequired((Boolean)json.getValue(\"clientAuthRequired\"));",
                "-    }",
                "-    if (json.getValue(\"host\") instanceof String) {",
                "-      obj.setHost((String)json.getValue(\"host\"));",
                "-    }",
                "-    if (json.getValue(\"port\") instanceof Number) {",
                "-      obj.setPort(((Number)json.getValue(\"port\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"sni\") instanceof Boolean) {",
                "-      obj.setSni((Boolean)json.getValue(\"sni\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, NetServerOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"acceptBacklog\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setAcceptBacklog(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"clientAuth\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"clientAuthRequired\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setClientAuthRequired((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"host\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"port\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"sni\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSni((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -50,3 +49,7 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(NetServerOptions obj, JsonObject json) {",
                "-    json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(NetServerOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "     if (obj.getClientAuth() != null) {",
                "@@ -54,3 +57,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"clientAuthRequired\", obj.isClientAuthRequired());",
                "+      json.put(\"clientAuthRequired\", obj.isClientAuthRequired());",
                "     if (obj.getHost() != null) {",
                "@@ -58,5 +61,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"port\", obj.getPort());",
                "-    json.put(\"sni\", obj.isSni());",
                "+      json.put(\"port\", obj.getPort());",
                "+      json.put(\"sni\", obj.isSni());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index 702530b40..8d4b86a9d 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.NetworkOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.NetworkOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.NetworkOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,20 +11,36 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, NetworkOptions obj) {",
                "-    if (json.getValue(\"logActivity\") instanceof Boolean) {",
                "-      obj.setLogActivity((Boolean)json.getValue(\"logActivity\"));",
                "-    }",
                "-    if (json.getValue(\"receiveBufferSize\") instanceof Number) {",
                "-      obj.setReceiveBufferSize(((Number)json.getValue(\"receiveBufferSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"reuseAddress\") instanceof Boolean) {",
                "-      obj.setReuseAddress((Boolean)json.getValue(\"reuseAddress\"));",
                "-    }",
                "-    if (json.getValue(\"reusePort\") instanceof Boolean) {",
                "-      obj.setReusePort((Boolean)json.getValue(\"reusePort\"));",
                "-    }",
                "-    if (json.getValue(\"sendBufferSize\") instanceof Number) {",
                "-      obj.setSendBufferSize(((Number)json.getValue(\"sendBufferSize\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"trafficClass\") instanceof Number) {",
                "-      obj.setTrafficClass(((Number)json.getValue(\"trafficClass\")).intValue());",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, NetworkOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"logActivity\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setLogActivity((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"receiveBufferSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setReceiveBufferSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"reuseAddress\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setReuseAddress((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"reusePort\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setReusePort((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"sendBufferSize\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setSendBufferSize(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"trafficClass\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setTrafficClass(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -50,9 +49,13 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(NetworkOptions obj, JsonObject json) {",
                "-    json.put(\"logActivity\", obj.getLogActivity());",
                "-    json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "-    json.put(\"reuseAddress\", obj.isReuseAddress());",
                "-    json.put(\"reusePort\", obj.isReusePort());",
                "-    json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "-    json.put(\"trafficClass\", obj.getTrafficClass());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(NetworkOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"logActivity\", obj.getLogActivity());",
                "+      json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "+      json.put(\"reuseAddress\", obj.isReuseAddress());",
                "+      json.put(\"reusePort\", obj.isReusePort());",
                "+      json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "+      json.put(\"trafficClass\", obj.getTrafficClass());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index 75d1bcd97..063554868 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.OpenSSLEngineOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.OpenSSLEngineOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.OpenSSLEngineOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,5 +11,11 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, OpenSSLEngineOptions obj) {",
                "-    if (json.getValue(\"sessionCacheEnabled\") instanceof Boolean) {",
                "-      obj.setSessionCacheEnabled((Boolean)json.getValue(\"sessionCacheEnabled\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, OpenSSLEngineOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"sessionCacheEnabled\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSessionCacheEnabled((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -35,4 +24,8 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(OpenSSLEngineOptions obj, JsonObject json) {",
                "-    json.put(\"sessionCacheEnabled\", obj.isSessionCacheEnabled());",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(OpenSSLEngineOptions obj, java.util.Map<String, Object> json) {",
                "+      json.put(\"sessionCacheEnabled\", obj.isSessionCacheEnabled());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index b3925874c..f9564aeaa 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.PemKeyCertOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.PemKeyCertOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.PemKeyCertOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,46 +11,66 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, PemKeyCertOptions obj) {",
                "-    if (json.getValue(\"certPath\") instanceof String) {",
                "-      obj.setCertPath((String)json.getValue(\"certPath\"));",
                "-    }",
                "-    if (json.getValue(\"certPaths\") instanceof JsonArray) {",
                "-      java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"certPaths\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setCertPaths(list);",
                "-    }",
                "-    if (json.getValue(\"certValue\") instanceof String) {",
                "-      obj.setCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)json.getValue(\"certValue\"))));",
                "-    }",
                "-    if (json.getValue(\"certValues\") instanceof JsonArray) {",
                "-      java.util.ArrayList<io.vertx.core.buffer.Buffer> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"certValues\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-      });",
                "-      obj.setCertValues(list);",
                "-    }",
                "-    if (json.getValue(\"keyPath\") instanceof String) {",
                "-      obj.setKeyPath((String)json.getValue(\"keyPath\"));",
                "-    }",
                "-    if (json.getValue(\"keyPaths\") instanceof JsonArray) {",
                "-      java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"keyPaths\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setKeyPaths(list);",
                "-    }",
                "-    if (json.getValue(\"keyValue\") instanceof String) {",
                "-      obj.setKeyValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)json.getValue(\"keyValue\"))));",
                "-    }",
                "-    if (json.getValue(\"keyValues\") instanceof JsonArray) {",
                "-      java.util.ArrayList<io.vertx.core.buffer.Buffer> list = new java.util.ArrayList<>();",
                "-      json.getJsonArray(\"keyValues\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-      });",
                "-      obj.setKeyValues(list);",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, PemKeyCertOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"certPath\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setCertPath((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"certPaths\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setCertPaths(list);",
                "+           }",
                "+            break;",
                "+          case \"certValue\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+            }",
                "+            break;",
                "+          case \"certValues\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<io.vertx.core.buffer.Buffer> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+              });",
                "+              obj.setCertValues(list);",
                "+           }",
                "+            break;",
                "+          case \"keyPath\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setKeyPath((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"keyPaths\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setKeyPaths(list);",
                "+           }",
                "+            break;",
                "+          case \"keyValue\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setKeyValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+            }",
                "+            break;",
                "+          case \"keyValues\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.ArrayList<io.vertx.core.buffer.Buffer> list =  new java.util.ArrayList<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+              });",
                "+              obj.setKeyValues(list);",
                "+           }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -76,2 +79,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(PemKeyCertOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(PemKeyCertOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getCertPaths() != null) {",
                "@@ -80,8 +87,8 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"certPaths\", array);",
                "-    }",
                "+     }",
                "     if (obj.getCertValues() != null) {",
                "       JsonArray array = new JsonArray();",
                "-      obj.getCertValues().forEach(item -> array.add(item.getBytes()));",
                "+      obj.getCertValues().forEach(item -> array.add(java.util.Base64.getEncoder().encodeToString(item.getBytes())));",
                "       json.put(\"certValues\", array);",
                "-    }",
                "+     }",
                "     if (obj.getKeyPaths() != null) {",
                "@@ -90,9 +97,9 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"keyPaths\", array);",
                "-    }",
                "+     }",
                "     if (obj.getKeyValues() != null) {",
                "       JsonArray array = new JsonArray();",
                "-      obj.getKeyValues().forEach(item -> array.add(item.getBytes()));",
                "+      obj.getKeyValues().forEach(item -> array.add(java.util.Base64.getEncoder().encodeToString(item.getBytes())));",
                "       json.put(\"keyValues\", array);",
                "-    }",
                "+     }",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index b71ccbf10..bbdf139e5 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.PemTrustOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.PemTrustOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.PemTrustOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,14 +11,22 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, PemTrustOptions obj) {",
                "-    if (json.getValue(\"certPaths\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"certPaths\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addCertPath((String)item);",
                "-      });",
                "-    }",
                "-    if (json.getValue(\"certValues\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"certValues\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-      });",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, PemTrustOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"certPaths\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addCertPath((String)item);",
                "+              });",
                "+           }",
                "+            break;",
                "+          case \"certValues\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+              });",
                "+           }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -44,2 +35,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(PemTrustOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(PemTrustOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getCertPaths() != null) {",
                "@@ -48,9 +43,9 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"certPaths\", array);",
                "-    }",
                "+     }",
                "     if (obj.getCertValues() != null) {",
                "       JsonArray array = new JsonArray();",
                "-      obj.getCertValues().forEach(item -> array.add(item.getBytes()));",
                "+      obj.getCertValues().forEach(item -> array.add(java.util.Base64.getEncoder().encodeToString(item.getBytes())));",
                "       json.put(\"certValues\", array);",
                "-    }",
                "+     }",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "index 04a5feebc..047b677d3 100644",
                "--- a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.PfxOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.PfxOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.PfxOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,11 +11,21 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, PfxOptions obj) {",
                "-    if (json.getValue(\"password\") instanceof String) {",
                "-      obj.setPassword((String)json.getValue(\"password\"));",
                "-    }",
                "-    if (json.getValue(\"path\") instanceof String) {",
                "-      obj.setPath((String)json.getValue(\"path\"));",
                "-    }",
                "-    if (json.getValue(\"value\") instanceof String) {",
                "-      obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)json.getValue(\"value\"))));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, PfxOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"password\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setPassword((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"path\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setPath((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"value\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -41,2 +34,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(PfxOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(PfxOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getPassword() != null) {",
                "@@ -48,5 +45,5 @@ import io.vertx.core.json.JsonArray;",
                "     if (obj.getValue() != null) {",
                "-      json.put(\"value\", obj.getValue().getBytes());",
                "+      json.put(\"value\", java.util.Base64.getEncoder().encodeToString(obj.getValue().getBytes()));",
                "     }",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index 498385a40..748c4643e 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.ProxyOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.ProxyOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.ProxyOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,17 +11,31 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, ProxyOptions obj) {",
                "-    if (json.getValue(\"host\") instanceof String) {",
                "-      obj.setHost((String)json.getValue(\"host\"));",
                "-    }",
                "-    if (json.getValue(\"password\") instanceof String) {",
                "-      obj.setPassword((String)json.getValue(\"password\"));",
                "-    }",
                "-    if (json.getValue(\"port\") instanceof Number) {",
                "-      obj.setPort(((Number)json.getValue(\"port\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"type\") instanceof String) {",
                "-      obj.setType(io.vertx.core.net.ProxyType.valueOf((String)json.getValue(\"type\")));",
                "-    }",
                "-    if (json.getValue(\"username\") instanceof String) {",
                "-      obj.setUsername((String)json.getValue(\"username\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, ProxyOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"host\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setHost((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"password\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setPassword((String)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"port\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setPort(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"type\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setType(io.vertx.core.net.ProxyType.valueOf((String)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"username\":",
                "+            if (member.getValue() instanceof String) {",
                "+              obj.setUsername((String)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -47,2 +44,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(ProxyOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(ProxyOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getHost() != null) {",
                "@@ -53,3 +54,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"port\", obj.getPort());",
                "+      json.put(\"port\", obj.getPort());",
                "     if (obj.getType() != null) {",
                "@@ -61,2 +62,2 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index 2a77e4471..f1fda56da 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * Copyright (c) 2014 Red Hat, Inc. and others",
                "- *",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with the",
                "- * License.  You may obtain a copy of the License at:",
                "- *",
                "- * http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                " package io.vertx.core.net;",
                "@@ -23,4 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.TCPSSLOptions}.",
                "- *",
                "- * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.TCPSSLOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.TCPSSLOptions} original class using Vert.x codegen.",
                "  */",
                "@@ -28,82 +11,130 @@ import io.vertx.core.json.JsonArray;",
                "-   static void fromJson(JsonObject json, TCPSSLOptions obj) {",
                "-    if (json.getValue(\"crlPaths\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"crlPaths\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addCrlPath((String)item);",
                "-      });",
                "-    }",
                "-    if (json.getValue(\"crlValues\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"crlValues\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-      });",
                "-    }",
                "-    if (json.getValue(\"enabledCipherSuites\") instanceof JsonArray) {",
                "-      json.getJsonArray(\"enabledCipherSuites\").forEach(item -> {",
                "-        if (item instanceof String)",
                "-          obj.addEnabledCipherSuite((String)item);",
                "-      });",
                "-    }",
                "-    if (json.getValue(\"enabledSecureTransportProtocols\") instanceof JsonArray) {",
                "-      java.util.LinkedHashSet<java.lang.String> list = new java.util.LinkedHashSet<>();",
                "-      json.getJsonArray(\"enabledSecureTransportProtocols\").forEach( item -> {",
                "-        if (item instanceof String)",
                "-          list.add((String)item);",
                "-      });",
                "-      obj.setEnabledSecureTransportProtocols(list);",
                "-    }",
                "-    if (json.getValue(\"idleTimeout\") instanceof Number) {",
                "-      obj.setIdleTimeout(((Number)json.getValue(\"idleTimeout\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"jdkSslEngineOptions\") instanceof JsonObject) {",
                "-      obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)json.getValue(\"jdkSslEngineOptions\")));",
                "-    }",
                "-    if (json.getValue(\"keyStoreOptions\") instanceof JsonObject) {",
                "-      obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)json.getValue(\"keyStoreOptions\")));",
                "-    }",
                "-    if (json.getValue(\"openSslEngineOptions\") instanceof JsonObject) {",
                "-      obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)json.getValue(\"openSslEngineOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pemKeyCertOptions\") instanceof JsonObject) {",
                "-      obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)json.getValue(\"pemKeyCertOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pemTrustOptions\") instanceof JsonObject) {",
                "-      obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)json.getValue(\"pemTrustOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pfxKeyCertOptions\") instanceof JsonObject) {",
                "-      obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)json.getValue(\"pfxKeyCertOptions\")));",
                "-    }",
                "-    if (json.getValue(\"pfxTrustOptions\") instanceof JsonObject) {",
                "-      obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)json.getValue(\"pfxTrustOptions\")));",
                "-    }",
                "-    if (json.getValue(\"soLinger\") instanceof Number) {",
                "-      obj.setSoLinger(((Number)json.getValue(\"soLinger\")).intValue());",
                "-    }",
                "-    if (json.getValue(\"ssl\") instanceof Boolean) {",
                "-      obj.setSsl((Boolean)json.getValue(\"ssl\"));",
                "-    }",
                "-    if (json.getValue(\"tcpCork\") instanceof Boolean) {",
                "-      obj.setTcpCork((Boolean)json.getValue(\"tcpCork\"));",
                "-    }",
                "-    if (json.getValue(\"tcpFastOpen\") instanceof Boolean) {",
                "-      obj.setTcpFastOpen((Boolean)json.getValue(\"tcpFastOpen\"));",
                "-    }",
                "-    if (json.getValue(\"tcpKeepAlive\") instanceof Boolean) {",
                "-      obj.setTcpKeepAlive((Boolean)json.getValue(\"tcpKeepAlive\"));",
                "-    }",
                "-    if (json.getValue(\"tcpNoDelay\") instanceof Boolean) {",
                "-      obj.setTcpNoDelay((Boolean)json.getValue(\"tcpNoDelay\"));",
                "-    }",
                "-    if (json.getValue(\"tcpQuickAck\") instanceof Boolean) {",
                "-      obj.setTcpQuickAck((Boolean)json.getValue(\"tcpQuickAck\"));",
                "-    }",
                "-    if (json.getValue(\"trustStoreOptions\") instanceof JsonObject) {",
                "-      obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)json.getValue(\"trustStoreOptions\")));",
                "-    }",
                "-    if (json.getValue(\"useAlpn\") instanceof Boolean) {",
                "-      obj.setUseAlpn((Boolean)json.getValue(\"useAlpn\"));",
                "-    }",
                "-    if (json.getValue(\"usePooledBuffers\") instanceof Boolean) {",
                "-      obj.setUsePooledBuffers((Boolean)json.getValue(\"usePooledBuffers\"));",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, TCPSSLOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+          case \"crlPaths\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addCrlPath((String)item);",
                "+              });",
                "+           }",
                "+            break;",
                "+          case \"crlValues\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+              });",
                "+           }",
                "+            break;",
                "+          case \"enabledCipherSuites\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  obj.addEnabledCipherSuite((String)item);",
                "+              });",
                "+           }",
                "+            break;",
                "+          case \"enabledSecureTransportProtocols\":",
                "+           if (member.getValue() instanceof JsonArray) {",
                "+              java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "+              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+                if (item instanceof String)",
                "+                  list.add((String)item);",
                "+              });",
                "+              obj.setEnabledSecureTransportProtocols(list);",
                "+           }",
                "+            break;",
                "+          case \"idleTimeout\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setIdleTimeout(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"jdkSslEngineOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"keyStoreOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"openSslEngineOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pemKeyCertOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pemTrustOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pfxKeyCertOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"pfxTrustOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"soLinger\":",
                "+            if (member.getValue() instanceof Number) {",
                "+              obj.setSoLinger(((Number)member.getValue()).intValue());",
                "+            }",
                "+            break;",
                "+          case \"ssl\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setSsl((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpCork\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpCork((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpFastOpen\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpFastOpen((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpKeepAlive\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpKeepAlive((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpNoDelay\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpNoDelay((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"tcpQuickAck\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setTcpQuickAck((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"trustStoreOptions\":",
                "+            if (member.getValue() instanceof JsonObject) {",
                "+              obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+            }",
                "+            break;",
                "+          case \"useAlpn\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setUseAlpn((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+          case \"usePooledBuffers\":",
                "+            if (member.getValue() instanceof Boolean) {",
                "+              obj.setUsePooledBuffers((Boolean)member.getValue());",
                "+            }",
                "+            break;",
                "+      }",
                "     }",
                "@@ -112,2 +143,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(TCPSSLOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(TCPSSLOptions obj, java.util.Map<String, Object> json) {",
                "     if (obj.getCrlPaths() != null) {",
                "@@ -116,8 +151,8 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"crlPaths\", array);",
                "-    }",
                "+     }",
                "     if (obj.getCrlValues() != null) {",
                "       JsonArray array = new JsonArray();",
                "-      obj.getCrlValues().forEach(item -> array.add(item.getBytes()));",
                "+      obj.getCrlValues().forEach(item -> array.add(java.util.Base64.getEncoder().encodeToString(item.getBytes())));",
                "       json.put(\"crlValues\", array);",
                "-    }",
                "+     }",
                "     if (obj.getEnabledCipherSuites() != null) {",
                "@@ -126,3 +161,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledCipherSuites\", array);",
                "-    }",
                "+     }",
                "     if (obj.getEnabledSecureTransportProtocols() != null) {",
                "@@ -131,4 +166,4 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledSecureTransportProtocols\", array);",
                "-    }",
                "-    json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+     }",
                "+      json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "@@ -154,9 +189,9 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"soLinger\", obj.getSoLinger());",
                "-    json.put(\"ssl\", obj.isSsl());",
                "-    json.put(\"tcpCork\", obj.isTcpCork());",
                "-    json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "-    json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "-    json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "-    json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "+      json.put(\"soLinger\", obj.getSoLinger());",
                "+      json.put(\"ssl\", obj.isSsl());",
                "+      json.put(\"tcpCork\", obj.isTcpCork());",
                "+      json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "+      json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "+      json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "+      json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "     if (obj.getTrustStoreOptions() != null) {",
                "@@ -164,5 +199,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-    json.put(\"useAlpn\", obj.isUseAlpn());",
                "-    json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "+      json.put(\"useAlpn\", obj.isUseAlpn());",
                "+      json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "   }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/resources/codegen.json b/src/main/resources/codegen.json",
                "deleted file mode 100644",
                "index 0bd319b5b..000000000",
                "--- a/src/main/resources/codegen.json",
                "+++ /dev/null",
                "@@ -1,8 +0,0 @@",
                "-{",
                "-  \"name\": \"data_object_converters\",",
                "-  \"generators\": [{",
                "-    \"kind\": \"dataObject\",",
                "-    \"filename\": \"(model.isClass() && model.getGenerateConverter()) ? (fqn + 'Converter.java') : null\",",
                "-    \"templateFilename\": \"vertx-core/template/dataObjectConverter.templ\"",
                "-  }]",
                "-}",
                "diff --git a/src/main/resources/vertx-core/template/dataObjectConverter.templ b/src/main/resources/vertx-core/template/dataObjectConverter.templ",
                "deleted file mode 100644",
                "index c6f7f0a1e..000000000",
                "--- a/src/main/resources/vertx-core/template/dataObjectConverter.templ",
                "+++ /dev/null",
                "@@ -1,179 +0,0 @@",
                "-@includeNamed{'/vertx-java/template/common-lib.templ'}",
                "-",
                "-@declare{'genPropFromJson'}",
                "-\t@if{property.list || property.set}",
                "-\t@{indent}if (json.getValue(\"@{property.name}\") instanceof JsonArray) {\\n",
                "-\t\t@if{property.setter}",
                "-\t\t\t@code{coll = property.list ? 'java.util.ArrayList' : 'java.util.LinkedHashSet'}",
                "-\t\t\t@{indent}  @{coll}<@{propType.name}> list = new @{coll}<>();\\n",
                "-\t\t\t@{indent}  json.getJsonArray(\"@{property.name}\").forEach( item -> {\\n",
                "-\t\t\t@{indent}    if (item instanceof @{cast})\\n",
                "-\t\t\t@{indent}      list.add(@{before}item@{after});\\n",
                "-\t\t\t@{indent}  });\\n",
                "-\t\t\t@{indent}  obj.@{property.setterMethod}(list);\\n",
                "-\t\t@else{property.adder}",
                "-\t\t\t@{indent}  json.getJsonArray(\"@{property.name}\").forEach(item -> {\\n",
                "-\t\t\t@{indent}    if (item instanceof @{cast})\\n",
                "-\t\t\t@{indent}      obj.@{property.adderMethod}(@{before}item@{after});\\n",
                "-\t\t\t@{indent}  });\\n",
                "-\t\t@end{}",
                "-\t@{indent}}\\n",
                "-\t@else{property.map}",
                "-\t\t@{indent}if (json.getValue(\"@{property.name}\") instanceof JsonObject) {\\n",
                "-\t\t@if{property.adder}",
                "-\t\t\t@{indent}  json.getJsonObject(\"@{property.name}\").forEach(entry -> {\\n",
                "-\t\t\t@{indent}    if (entry.getValue() instanceof @{cast})\\n",
                "-\t\t\t@{indent}      obj.@{property.adderMethod}(entry.getKey(), @{before}entry.getValue()@{after});\\n",
                "-\t\t\t@{indent}  });\\n",
                "-\t\t@else{property.setter}",
                "-\t\t\t@{indent}  java.util.Map<String, @{propType.name}> map = new java.util.LinkedHashMap<>();\\n",
                "-\t\t\t@{indent}  json.getJsonObject(\"@{property.name}\").forEach(entry -> {\\n",
                "-\t\t\t@{indent}    if (entry.getValue() instanceof @{cast})\\n",
                "-\t\t\t@{indent}      map.put(entry.getKey(), @{before}entry.getValue()@{after});\\n",
                "-\t\t\t@{indent}  });\\n",
                "-\t\t\t@{indent}  obj.@{property.setterMethod}(map);\\n",
                "-\t\t@end{}",
                "-\t@{indent}}\\n",
                "-\t@else{}",
                "-\t\t@if{property.setter}",
                "-\t\t\t@{indent}if (json.getValue(\"@{property.name}\") instanceof @{cast}) {\\n",
                "-\t\t\t\t@{indent}  obj.@{property.setterMethod}(@{before}json.getValue(\"@{property.name}\")@{after});\\n",
                "-\t\t\t@{indent}}\\n",
                "-\t\t@end{}",
                "-\t@end{}",
                "-@end{}",
                "-",
                "-@code{",
                "-",
                "-  def computeConverterClassJavadoc(type) {",
                "-    var builder = new StringBuilder();",
                "-    builder.append(\" *\").append(\" Converter for {@link \").append(type).append(\"}.\");",
                "-    builder.append(\"\\n *\\n * NOTE: This class has been automatically generated from the {@link \" + type + \"} original class using Vert.x codegen.\");",
                "-    return builder.append(\"\\n\").toString();",
                "-  }",
                "-}",
                "-",
                "-",
                "-/*\\n",
                "- * Copyright (c) 2014 Red Hat, Inc. and others\\n",
                "- *\\n",
                "- * Red Hat licenses this file to you under the Apache License, version 2.0\\n",
                "- * (the \"License\"); you may not use this file except in compliance with the\\n",
                "- * License.  You may obtain a copy of the License at:\\n",
                "- *\\n",
                "- * http://www.apache.org/licenses/LICENSE-2.0\\n",
                "- *\\n",
                "- * Unless required by applicable law or agreed to in writing, software\\n",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\\n",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\\n",
                "- * License for the specific language governing permissions and limitations\\n",
                "- * under the License.\\n",
                "- */\\n\\n",
                "-package @{type.packageName};\\n",
                "-\\n",
                "-import io.vertx.core.json.JsonObject;\\n",
                "-import io.vertx.core.json.JsonArray;\\n",
                "-\\n",
                "-/**\\n",
                "-@{computeConverterClassJavadoc(type.name)}",
                "- */\\n",
                "-@code{visibility=publicConverter?'public ':' '}",
                "-@{visibility}class @{type.simpleName}Converter {\\n",
                "-\\n",
                "-  @{visibility}static void fromJson(JsonObject json, @{type.simpleName} obj) {\\n",
                "-\t\t@foreach{property:properties}",
                "-\t\t\t@if{property.declared || inheritConverter}",
                "-\t\t\t\t@code{propType=property.type}",
                "-\t\t\t\t@code{propKind=propType.kind}",
                "-\t\t\t\t@if{propKind == CLASS_API}",
                "-\t\t\t\t\t@if{propType.name == 'io.vertx.core.buffer.Buffer'}",
                "-\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='String';before='io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)';after='))';indent='    '}",
                "-\t\t\t\t\t@end{}",
                "-\t\t\t\t@else{propKind == CLASS_JSON_OBJECT}",
                "-\t\t\t\t\t@includeNamed{'genPropFromJson';cast='JsonObject';before='((JsonObject)';after=').copy()';indent='    '}",
                "-\t\t\t\t@else{propKind == CLASS_JSON_ARRAY}",
                "-\t\t\t\t\t@includeNamed{'genPropFromJson';cast='JsonArray';before='((JsonArray)';after=').copy()';indent='    '}",
                "-\t\t\t\t@else{propKind.basic}",
                "-\t\t\t\t\t@if{propKind == CLASS_STRING}",
                "-\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='String';before='(String)';after='';indent='    '}",
                "-\t\t\t\t\t@else{}",
                "-\t\t\t\t\t\t@if{propType.simpleName == 'boolean' || propType.simpleName == 'Boolean'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Boolean';before='(Boolean)';after='';indent='    '}",
                "-\t\t\t\t\t\t@else{propType.simpleName == 'byte' || propType.simpleName == 'Byte'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Number';before='((Number)';after=').byteValue()';indent='    '}",
                "-\t\t\t\t\t\t@else{propType.simpleName == 'short' || propType.simpleName == 'Short'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Number';before='((Number)';after=').shortValue()';indent='    '}",
                "-\t\t\t\t\t\t@else{propType.simpleName == 'int' || propType.simpleName == 'Integer'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Number';before='((Number)';after=').intValue()';indent='    '}",
                "-\t\t\t\t\t\t@else{propType.simpleName == 'long' || propType.simpleName == 'Long'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Number';before='((Number)';after=').longValue()';indent='    '}",
                "-\t\t\t\t\t\t@else{propType.simpleName == 'float' || propType.simpleName == 'Float'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Number';before='((Number)';after=').floatValue()';indent='    '}",
                "-\t\t\t\t\t\t@else{propType.simpleName == 'double' || propType.simpleName == 'Double'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Number';before='((Number)';after=').doubleValue()';indent='    '}",
                "-\t\t\t\t\t\t@else{propType.simpleName == 'char' || propType.simpleName == 'Character'}",
                "-\t\t\t\t\t\t\t@includeNamed{'genPropFromJson';cast='String';before='((String)';after=').charAt(0)';indent='    '}",
                "-\t\t\t\t\t\t@end{}",
                "-\t\t\t\t\t@end{}",
                "-\t\t\t\t@else{propKind == CLASS_DATA_OBJECT}",
                "-\t\t\t\t\t@includeNamed{'genPropFromJson';cast='JsonObject';before='new ' + propType.name + '((JsonObject)';after=')';indent='    '}",
                "-\t\t\t\t@else{propKind == CLASS_ENUM}",
                "-\t\t\t\t\t@includeNamed{'genPropFromJson';cast='String';before='' + propType.name + '.valueOf((String)';after=')';indent='    '}",
                "-\t\t\t\t@else{propKind == CLASS_OBJECT}",
                "-\t\t\t\t\t@includeNamed{'genPropFromJson';cast='Object';before='';after='';indent='    '}",
                "-\t\t\t\t@end{}",
                "-\t\t\t@end{}",
                "-\t\t@end{}",
                "-  }\\n",
                "-",
                "-@declare{'genPropToJson'}",
                "-\t@if{property.list || property.set}",
                "-\t\t@{indent}if (obj.@{property.getterMethod}() != null) {\\n",
                "-\t\t@{indent}  JsonArray array = new JsonArray();\\n",
                "-\t\t@{indent}  obj.@{property.getterMethod}().forEach(item -> array.add(@{before}item@{after}));\\n",
                "-\t\t@{indent}  json.put(\"@{property.name}\", array);\\n",
                "-\t\t@{indent}}\\n",
                "-\t@else{property.map}",
                "-\t\t@{indent}if (obj.@{property.getterMethod}() != null) {\\n",
                "-\t\t@{indent}  JsonObject map = new JsonObject();\\n",
                "-\t\t@{indent}  obj.@{property.getterMethod}().forEach((key,value) -> map.put(key, @{before}value@{after}));\\n",
                "-\t\t@{indent}  json.put(\"@{property.name}\", map);\\n",
                "-\t\t@{indent}}\\n",
                "-\t@else{}",
                "-\t\t@if{property.type.kind != CLASS_PRIMITIVE}@{indent}if (obj.@{property.getterMethod}() != null) {\\n  @end{}",
                "-\t\t@{indent}json.put(\"@{property.name}\", @{before}obj.@{property.getterMethod}()@{after});\\n",
                "-\t\t@if{property.type.kind != CLASS_PRIMITIVE}@{indent}}\\n@end{}",
                "-\t@end{}",
                "-@end{}",
                "-",
                "-\\n",
                "-  @{visibility}static void toJson(@{type.simpleName} obj, JsonObject json) {\\n",
                "-\t\t@foreach{property:properties}",
                "-\t\t\t@if{(property.declared || inheritConverter) && property.getterMethod != null && property.jsonifiable}",
                "-\t\t\t\t@code{propType=property.type}",
                "-\t\t\t\t@code{propKind=propType.kind}",
                "-\t\t\t\t@if{propKind == CLASS_API}",
                "-\t\t\t\t\t@if{propType.name == 'io.vertx.core.buffer.Buffer'}",
                "-\t\t\t\t\t\t@includeNamed{'genPropToJson';before='';after='.getBytes()';indent='    '}",
                "-\t\t\t\t\t@end{}",
                "-\t\t\t\t@else{propKind == CLASS_ENUM}",
                "-\t\t\t\t\t@includeNamed{'genPropToJson';before='';after='.name()';indent='    '}",
                "-\t\t\t\t@else{propKind == CLASS_JSON_OBJECT || propKind == CLASS_JSON_ARRAY}",
                "-\t\t\t\t\t@includeNamed{'genPropToJson';before='';after='';indent='    '}",
                "-\t\t\t\t@else{propKind.basic}",
                "-\t\t\t\t\t@if{propKind == CLASS_STRING || propKind == CLASS_JSON_OBJECT || propKind == CLASS_JSON_ARRAY}",
                "-\t\t\t\t\t\t@includeNamed{'genPropToJson';before='';after='';indent='    '}",
                "-\t\t\t\t\t@else{propType.simpleName == 'char' || propType.simpleName == 'Character'}",
                "-\t\t\t\t\t\t@includeNamed{'genPropToJson';before='Character.toString(';after=')';indent='    '}",
                "-\t\t\t\t\t@else{}",
                "-\t\t\t\t\t\t@includeNamed{'genPropToJson';before='';after='';indent='    '}",
                "-\t\t\t\t\t@end{}",
                "-\t\t\t\t@else{propKind == CLASS_DATA_OBJECT}",
                "-\t\t\t\t\t@includeNamed{'genPropToJson';before='';after='.toJson()';indent='    '}",
                "-\t\t\t\t@else{propKind == CLASS_OBJECT}",
                "-\t\t\t\t\t@includeNamed{'genPropToJson';before='';after='';indent='    '}",
                "-\t\t\t\t@end{}",
                "-\t\t\t@end{}",
                "-\t\t@end{}",
                "-  }\\n",
                "-}"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "src/main/resources/codegen.json",
                "src/main/resources/vertx-core/template/dataObjectConverter.templ"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2436": "Remove MVEL from code generation vert-x3/issues#367"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/net/PfxOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/JksOptionsConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/resources/vertx-core/template/dataObjectConverter.templ, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2436",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c5141b668fe18b6f18f3832bb4972559b8e0753c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530110792,
            "hunks": 56,
            "message": "HttpClient response chunk handling rework - fixes #2522",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientResponse.java b/src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "index d5b85d368..893e1d803 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "@@ -136,3 +136,5 @@ public interface HttpClientResponse extends ReadStream<Buffer> {",
                "    * <p>",
                "-   * USE THIS WITH CAUTION! Writing to the socket directly if you don't know what you're doing can easily break the HTTP protocol",
                "+   * USE THIS WITH CAUTION! Writing to the socket directly if you don't know what you're doing can easily break the HTTP protocol.",
                "+   * <p>",
                "+   * HTTP/1.1 pipe-lined requests cannot support net socket upgrade.",
                "    * <p>",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index 237af0806..02d5936f6 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -40,3 +40,2 @@ import java.net.URI;",
                " import java.util.ArrayDeque;",
                "-import java.util.Deque;",
                " import java.util.Map;",
                "@@ -72,8 +71,7 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-  private StreamImpl current;                                    // The request being sent",
                "-  private final Deque<StreamImpl> pending = new ArrayDeque<>();  // The request waiting for becoming the next current request",
                "-  private final Deque<StreamImpl> inflight = new ArrayDeque<>(); // The request waiting for a response",
                "+  private StreamImpl requestInProgress;                          // The request being sent",
                "+  private StreamImpl responseInProgress;                         // The request waiting for a response",
                "-  private boolean paused;",
                "-  private Buffer pausedChunk;",
                "+  private boolean close;",
                "+  private boolean upgraded;",
                "   private int keepAliveTimeout;",
                "@@ -112,2 +110,46 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "+  private synchronized NetSocket upgrade(StreamImpl stream) {",
                "+    if (options.isPipelining()) {",
                "+      throw new IllegalStateException(\"Cannot upgrade a pipe-lined request\");",
                "+    }",
                "+    if (upgraded) {",
                "+      throw new IllegalStateException(\"Request already upgraded to NetSocket\");",
                "+    }",
                "+    upgraded = true;",
                "+",
                "+    // connection was upgraded to raw TCP socket",
                "+    NetSocketImpl socket = new NetSocketImpl(vertx, chctx, context, client.getSslHelper(), metrics);",
                "+    socket.metric(metric());",
                "+",
                "+    // Flush out all pending data",
                "+    endReadAndFlush();",
                "+",
                "+    // remove old http handlers and replace the old handler with one that handle plain sockets",
                "+    ChannelPipeline pipeline = chctx.pipeline();",
                "+    ChannelHandler inflater = pipeline.get(HttpContentDecompressor.class);",
                "+    if (inflater != null) {",
                "+      pipeline.remove(inflater);",
                "+    }",
                "+    pipeline.remove(\"codec\");",
                "+    pipeline.replace(\"handler\", \"handler\",  new VertxNetHandler(socket) {",
                "+      @Override",
                "+      public void channelRead(ChannelHandlerContext chctx, Object msg) throws Exception {",
                "+        if (msg instanceof HttpContent) {",
                "+          if (msg instanceof LastHttpContent) {",
                "+            stream.endResponse((LastHttpContent) msg);",
                "+          }",
                "+          ReferenceCountUtil.release(msg);",
                "+          return;",
                "+        }",
                "+        super.channelRead(chctx, msg);",
                "+      }",
                "+      @Override",
                "+      protected void handleMessage(NetSocketImpl connection, Object msg) {",
                "+        connection.handleMessageReceived(msg);",
                "+      }",
                "+    }.removeHandler(sock -> listener.onDiscard()));",
                "+",
                "+    return socket;",
                "+  }",
                "+",
                "   private static class StreamImpl implements HttpClientStream {",
                "@@ -122,4 +164,6 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     private boolean reset;",
                "-    private boolean close;",
                "-    private boolean upgraded;",
                "+    private Buffer pausedChunk;",
                "+    private boolean paused;",
                "+    private MultiMap trailers;",
                "+    private StreamImpl next;",
                "@@ -131,2 +175,10 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "+    private void append(StreamImpl s) {",
                "+      StreamImpl c = this;",
                "+      while (c.next != null) {",
                "+        c = c.next;",
                "+      }",
                "+      c.next = s;",
                "+    }",
                "+",
                "     @Override",
                "@@ -165,2 +217,8 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       sendRequest(request, buf, end);",
                "+      if (conn.responseInProgress == null) {",
                "+        conn.responseInProgress = this;",
                "+      } else {",
                "+        conn.responseInProgress.append(this);",
                "+      }",
                "+      next = null;",
                "     }",
                "@@ -214,2 +272,25 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "+    private void handleChunk(Buffer buff) {",
                "+      HttpClientResponseImpl r;",
                "+      synchronized (conn) {",
                "+        if (paused) {",
                "+          if (pausedChunk == null) {",
                "+            pausedChunk = buff.copy();",
                "+          } else {",
                "+            pausedChunk.appendBuffer(buff);",
                "+          }",
                "+          return;",
                "+        } else {",
                "+          if (pausedChunk != null) {",
                "+            buff = pausedChunk.appendBuffer(buff);",
                "+            pausedChunk = null;",
                "+          }",
                "+        }",
                "+        r = response;",
                "+      }",
                "+      if (r != null) {",
                "+        r.handleChunk(buff);",
                "+      }",
                "+    }",
                "+",
                "     @Override",
                "@@ -244,3 +325,9 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     public void doPause() {",
                "-      conn.doPause();",
                "+      synchronized (conn) {",
                "+        if (paused) {",
                "+          return;",
                "+        }",
                "+        paused = true;",
                "+        conn.doPause();",
                "+      }",
                "     }",
                "@@ -249,3 +336,32 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     public void doResume() {",
                "-      conn.doResume();",
                "+      synchronized (conn) {",
                "+        if (!paused) {",
                "+          return;",
                "+        }",
                "+        paused = false;",
                "+      }",
                "+      conn.getContext().runOnContext(v -> {",
                "+        HttpClientResponseImpl resp;",
                "+        Buffer chunk;",
                "+        MultiMap mm;",
                "+        synchronized (conn) {",
                "+          if (paused) {",
                "+            return;",
                "+          }",
                "+          if (conn.responseInProgress == this) {",
                "+            conn.doResume();",
                "+          }",
                "+          if (pausedChunk == null) {",
                "+            return;",
                "+          }",
                "+          chunk = pausedChunk;",
                "+          resp = response;",
                "+          mm = responseEnded ? trailers : null;",
                "+          pausedChunk = null;",
                "+        }",
                "+        resp.handleChunk(chunk);",
                "+        if (mm != null) {",
                "+          resp.handleEnd(mm);",
                "+        }",
                "+      });",
                "     }",
                "@@ -257,4 +373,9 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "           reset = true;",
                "-          if (request == null) {",
                "-            conn.recycle();",
                "+          if (conn.requestInProgress == this) {",
                "+            if (request == null) {",
                "+              conn.requestInProgress = null;",
                "+              conn.recycle();",
                "+            } else {",
                "+              conn.close();",
                "+            }",
                "           } else if (!responseEnded) {",
                "@@ -269,5 +390,2 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       synchronized (conn) {",
                "-        if (conn.current != null) {",
                "-          throw new IllegalStateException(\"Connection is already writing another request\");",
                "-        }",
                "         if (request != null) {",
                "@@ -275,5 +393,6 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         }",
                "+        if (conn.requestInProgress != this) {",
                "+          throw new IllegalStateException(\"Connection is already writing another request\");",
                "+        }",
                "         request = req;",
                "-        conn.current = this;",
                "-        conn.inflight.add(this);",
                "         if (conn.metrics != null) {",
                "@@ -286,5 +405,6 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     public void endRequest() {",
                "-      StreamImpl next;",
                "+      boolean doRecycle;",
                "       synchronized (conn) {",
                "-        if (conn.current != this) {",
                "+        StreamImpl s = conn.requestInProgress;",
                "+        if (s != this) {",
                "           throw new IllegalStateException(\"No write in progress\");",
                "@@ -295,3 +415,2 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         requestEnded = true;",
                "-        conn.current = null;",
                "         if (conn.metrics != null) {",
                "@@ -299,12 +418,5 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         }",
                "-        // Should take care of pending list ????",
                "-        checkLifecycle();",
                "-        // Check pipelined pending request",
                "-        next = conn.pending.poll();",
                "-      }",
                "-",
                "-      // Should trampoline ?",
                "-      if (next != null) {",
                "-        next.fut.complete(next);",
                "+        doRecycle = responseEnded;",
                "       }",
                "+      conn.handleRequestEnd(doRecycle);",
                "     }",
                "@@ -315,43 +427,5 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         if (responseEnded) {",
                "-          throw new IllegalStateException(\"Request already ended\");",
                "+          throw new IllegalStateException(\"Response already ended\");",
                "         }",
                "-        if (upgraded) {",
                "-          throw new IllegalStateException(\"Request already upgraded to NetSocket\");",
                "-        }",
                "-        upgraded = true;",
                "-",
                "-",
                "-        // connection was upgraded to raw TCP socket",
                "-        NetSocketImpl socket = new NetSocketImpl(conn.vertx, conn.chctx, conn.context, conn.client.getSslHelper(), conn.metrics);",
                "-        socket.metric(conn.metric());",
                "-",
                "-        // Flush out all pending data",
                "-        conn.endReadAndFlush();",
                "-",
                "-        // remove old http handlers and replace the old handler with one that handle plain sockets",
                "-        ChannelPipeline pipeline = conn.chctx.pipeline();",
                "-        ChannelHandler inflater = pipeline.get(HttpContentDecompressor.class);",
                "-        if (inflater != null) {",
                "-          pipeline.remove(inflater);",
                "-        }",
                "-        pipeline.remove(\"codec\");",
                "-        pipeline.replace(\"handler\", \"handler\",  new VertxNetHandler(socket) {",
                "-          @Override",
                "-          public void channelRead(ChannelHandlerContext chctx, Object msg) throws Exception {",
                "-            if (msg instanceof HttpContent) {",
                "-              if (msg instanceof LastHttpContent) {",
                "-                endResponse((LastHttpContent) msg);",
                "-              }",
                "-              ReferenceCountUtil.release(msg);",
                "-              return;",
                "-            }",
                "-            super.channelRead(chctx, msg);",
                "-          }",
                "-          @Override",
                "-          protected void handleMessage(NetSocketImpl connection, Object msg) {",
                "-            connection.handleMessageReceived(msg);",
                "-          }",
                "-        }.removeHandler(sock -> conn.listener.onDiscard()));",
                "-",
                "-        return socket;",
                "+        return conn.upgrade(this);",
                "       }",
                "@@ -379,3 +453,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "           // In all cases, if we have a close connection option then we SHOULD NOT treat the connection as persistent",
                "-          close = true;",
                "+          conn.close = true;",
                "         } else if (protocolVersion == io.netty.handler.codec.http.HttpVersion.HTTP_1_0 && !HttpHeaderValues.KEEP_ALIVE.contentEqualsIgnoreCase(responseConnectionHeader)) {",
                "@@ -383,3 +457,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "           // currently Vertx forces the Connection header if keepalive is enabled for 1.0",
                "-          close = true;",
                "+          conn.close = true;",
                "         }",
                "@@ -396,3 +470,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-    private void endResponse(LastHttpContent trailer) {",
                "+    private boolean endResponse(LastHttpContent trailer) {",
                "       synchronized (conn) {",
                "@@ -407,15 +481,14 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         }",
                "-",
                "-        Buffer last = conn.pausedChunk;",
                "-        conn.pausedChunk = null;",
                "-        if (response != null) {",
                "-          response.handleEnd(last, new HeadersAdaptor(trailer.trailingHeaders()));",
                "+        trailers = new HeadersAdaptor(trailer.trailingHeaders());",
                "+        if (pausedChunk == null) {",
                "+          if (response != null) {",
                "+            response.handleEnd(trailers);",
                "+          }",
                "         }",
                "-",
                "-        // Also we keep the connection open for an HTTP CONNECT",
                "         responseEnded = true;",
                "-        if (!conn.options.isKeepAlive()) {",
                "-          close = true;",
                "+        conn.close |= !conn.options.isKeepAlive();",
                "+        if (paused) {",
                "+          conn.doResume();",
                "         }",
                "-        checkLifecycle();",
                "+        return requestEnded;",
                "       }",
                "@@ -439,13 +512,11 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     }",
                "+  }",
                "-    private void checkLifecycle() {",
                "-      if (requestEnded && responseEnded) {",
                "-        if (upgraded) {",
                "-          // Do nothing",
                "-        } else if (close) {",
                "-          conn.close();",
                "-        } else {",
                "-          conn.recycle();",
                "-        }",
                "-      }",
                "+  private void checkLifecycle() {",
                "+    if (upgraded) {",
                "+      // Do nothing",
                "+    } else if (close) {",
                "+      close();",
                "+    } else {",
                "+      recycle();",
                "     }",
                "@@ -458,3 +529,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       synchronized (this) {",
                "-        stream = inflight.peek();",
                "+        stream = responseInProgress;",
                "       }",
                "@@ -469,3 +540,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     } else if (obj instanceof HttpResponse) {",
                "-      handleResponseHeaders((HttpResponse) obj);",
                "+      handleResponseBegin((HttpResponse) obj);",
                "     } else if (obj instanceof HttpContent) {",
                "@@ -482,3 +553,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-  private void handleResponseHeaders(HttpResponse resp) {",
                "+  private void handleResponseBegin(HttpResponse resp) {",
                "     StreamImpl stream;",
                "@@ -488,3 +559,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     synchronized (this) {",
                "-      stream = inflight.peek();",
                "+      stream = responseInProgress;",
                "       request = stream.request;",
                "@@ -506,23 +577,9 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "   private void handleResponseChunk(Buffer buff) {",
                "-    HttpClientResponseImpl resp;",
                "+    StreamImpl resp;",
                "     synchronized (this) {",
                "-      if (paused) {",
                "-        if (pausedChunk == null) {",
                "-          pausedChunk = buff.copy();",
                "-        } else {",
                "-          pausedChunk.appendBuffer(buff);",
                "-        }",
                "-        return;",
                "-      } else {",
                "-        if (pausedChunk != null) {",
                "-          buff = pausedChunk.appendBuffer(buff);",
                "-          pausedChunk = null;",
                "-        }",
                "-        resp = inflight.peek().response;",
                "-        if (resp == null) {",
                "-          return;",
                "-        }",
                "-      }",
                "+      resp = responseInProgress;",
                "+    }",
                "+    if (resp != null) {",
                "+      resp.handleChunk(buff);",
                "     }",
                "-    resp.handleChunk(buff);",
                "   }",
                "@@ -530,11 +587,27 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "   private void handleResponseEnd(LastHttpContent trailer) {",
                "-    StreamImpl resp;",
                "+    StreamImpl stream;",
                "     synchronized (this) {",
                "-      resp = inflight.peek();",
                "+      stream = responseInProgress;",
                "       // We don't signal response end for a 100-continue response as a real response will follow",
                "-      if (resp.response == null || resp.response.statusCode() != 100) {",
                "-        inflight.poll();",
                "+      if (stream.response == null || stream.response.statusCode() != 100) {",
                "+        responseInProgress = responseInProgress.next;",
                "       }",
                "     }",
                "-    resp.endResponse(trailer);",
                "+    if (stream.endResponse(trailer)) {",
                "+      checkLifecycle();",
                "+    }",
                "+  }",
                "+",
                "+  private void handleRequestEnd(boolean recycle) {",
                "+    StreamImpl next;",
                "+    synchronized (this) {",
                "+      next = requestInProgress.next;",
                "+      requestInProgress = next;",
                "+    }",
                "+    if (recycle) {",
                "+      checkLifecycle();",
                "+    }",
                "+    if (next != null) {",
                "+      next.fut.complete(next);",
                "+    }",
                "   }",
                "@@ -692,4 +765,4 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     if (!isNotWritable()) {",
                "-      if (current != null) {",
                "-        current.request.handleDrained();",
                "+      if (requestInProgress != null) {",
                "+        requestInProgress.request.handleDrained();",
                "       } else if (ws != null) {",
                "@@ -700,21 +773,2 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-  public void doPause() {",
                "-    super.doPause();",
                "-    paused = true;",
                "-  }",
                "-",
                "-  public void doResume() {",
                "-    super.doResume();",
                "-    paused = false;",
                "-    if (pausedChunk != null) {",
                "-      context.runOnContext(v -> {",
                "-        if (pausedChunk != null) {",
                "-          Buffer chunk = pausedChunk;",
                "-          pausedChunk = null;",
                "-          inflight.peek().response.handleChunk(chunk);",
                "-        }",
                "-      });",
                "-    }",
                "-  }",
                "-",
                "   synchronized void handleWsFrame(WebSocketFrameInternal frame) {",
                "@@ -731,4 +785,4 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     if (metrics != null) {",
                "-      for (StreamImpl req: inflight) {",
                "-        metrics.requestReset(req.request.metric());",
                "+      for (StreamImpl r = responseInProgress;r != null;r = r.next) {",
                "+        metrics.requestReset(r.request.metric());",
                "       }",
                "@@ -740,7 +794,4 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     StreamImpl stream;",
                "-    while ((stream = pending.poll()) != null) {",
                "-      stream.handleException(cause);",
                "-    }",
                "-    while ((stream = inflight.poll()) != null) {",
                "-      stream.handleException(cause);",
                "+    for (StreamImpl r = responseInProgress;r != null;r = r.next) {",
                "+      r.handleException(cause);",
                "     }",
                "@@ -751,5 +802,5 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     super.handleException(e);",
                "-    inflight.forEach(stream -> {",
                "-      stream.handleException(e);",
                "-    });",
                "+    for (StreamImpl r = responseInProgress;r != null;r = r.next) {",
                "+      r.handleException(e);",
                "+    }",
                "   }",
                "@@ -784,6 +835,7 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       stream = new StreamImpl(this, seq++, handler);",
                "-      if (current != null) {",
                "-        pending.add(stream);",
                "+      if (requestInProgress != null) {",
                "+        requestInProgress.append(stream);",
                "         return;",
                "       }",
                "+      requestInProgress = stream;",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "index 7a55fdaad..0c4184c4a 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "@@ -15,3 +15,2 @@ import io.netty.buffer.ByteBuf;",
                " import io.netty.buffer.Unpooled;",
                "-import io.netty.channel.Channel;",
                " import io.netty.channel.ChannelHandlerContext;",
                "@@ -212,3 +211,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "       }",
                "-      response.handleEnd(null, trailers);",
                "+      response.handleEnd(trailers);",
                "     }",
                "@@ -261,3 +260,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "     void handleCustomFrame(int type, int flags, Buffer buff) {",
                "-      response.handleUnknowFrame(new HttpFrameImpl(type, flags, buff));",
                "+      response.handleUnknownFrame(new HttpFrameImpl(type, flags, buff));",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java",
                "index 288c93083..d50c64877 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java",
                "@@ -49,6 +49,2 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "   private Handler<Throwable> exceptionHandler;",
                "-  private boolean hasPausedEnd;",
                "-  private boolean paused;",
                "-  private Buffer pausedLastChunk;",
                "-  private MultiMap pausedTrailers;",
                "   private NetSocket netSocket;",
                "@@ -163,9 +159,4 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "   public HttpClientResponse pause() {",
                "-    synchronized (conn) {",
                "-      if (!paused) {",
                "-        paused = true;",
                "-        stream.doPause();",
                "-      }",
                "-      return this;",
                "-    }",
                "+    stream.doPause();",
                "+    return this;",
                "   }",
                "@@ -174,10 +165,4 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "   public HttpClientResponse resume() {",
                "-    synchronized (conn) {",
                "-      if (paused) {",
                "-        paused = false;",
                "-        doResume();",
                "-        stream.doResume();",
                "-      }",
                "-      return this;",
                "-    }",
                "+    stream.doResume();",
                "+    return this;",
                "   }",
                "@@ -200,14 +185,3 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "-  private void doResume() {",
                "-    if (hasPausedEnd) {",
                "-      final Buffer theChunk = pausedLastChunk;",
                "-      final MultiMap theTrailer = pausedTrailers;",
                "-      stream.getContext().runOnContext(v -> handleEnd(theChunk, theTrailer));",
                "-      hasPausedEnd = false;",
                "-      pausedTrailers = null;",
                "-      pausedLastChunk = null;",
                "-    }",
                "-  }",
                "-",
                "-  void handleUnknowFrame(HttpFrame frame) {",
                "+  void handleUnknownFrame(HttpFrame frame) {",
                "     synchronized (conn) {",
                "@@ -237,3 +211,3 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "-  void handleEnd(Buffer lastChunk, MultiMap trailers) {",
                "+  void handleEnd(MultiMap trailers) {",
                "     synchronized (conn) {",
                "@@ -241,17 +215,8 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "       bytesRead = 0;",
                "-      if (paused) {",
                "-        pausedLastChunk = lastChunk;",
                "-        hasPausedEnd = true;",
                "-        pausedTrailers = trailers;",
                "-      } else {",
                "-        if (lastChunk != null) {",
                "-          handleChunk(lastChunk);",
                "-        }",
                "-        this.trailers = trailers;",
                "-        if (endHandler != null) {",
                "-          try {",
                "-            endHandler.handle(null);",
                "-          } catch (Throwable t) {",
                "-            handleException(t);",
                "-          }",
                "+      this.trailers = trailers;",
                "+      if (endHandler != null) {",
                "+        try {",
                "+          endHandler.handle(null);",
                "+        } catch (Throwable t) {",
                "+          handleException(t);",
                "         }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2522": "HttpClient response chunk handling rework #2523"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java, src/main/java/io/vertx/core/http/HttpClientResponse.java, src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2522",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "878ed13533f68131ff8548e34c7398ae21813a10",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524572524,
            "hunks": 4,
            "message": "App Id in the start command doc is wrong - fixes #2341",
            "diff": [
                "diff --git a/src/main/asciidoc/java/index.adoc b/src/main/asciidoc/java/index.adoc",
                "index b13e0ddac..1ada91740 100644",
                "--- a/src/main/asciidoc/java/index.adoc",
                "+++ b/src/main/asciidoc/java/index.adoc",
                "@@ -1183,3 +1183,3 @@ You can also start an application in background using:",
                " ----",
                "-java -jar my-verticle-fat.jar start -Dvertx-id=my-app-name",
                "+java -jar my-verticle-fat.jar start --vertx-id=my-app-name",
                " ----",
                "@@ -1191,3 +1191,3 @@ options to the `start` command:",
                " ----",
                "-java -jar my-verticle-fat.jar start -Dvertx-id=my-app-name -cluster",
                "+java -jar my-verticle-fat.jar start \u00e2\u0080\u0094-vertx-id=my-app-name -cluster",
                " ----",
                "diff --git a/src/main/java/io/vertx/core/package-info.java b/src/main/java/io/vertx/core/package-info.java",
                "index d9849228a..fa45ab94a 100644",
                "--- a/src/main/java/io/vertx/core/package-info.java",
                "+++ b/src/main/java/io/vertx/core/package-info.java",
                "@@ -1081,3 +1081,3 @@",
                "  * ----",
                "- * java -jar my-verticle-fat.jar start -Dvertx-id=my-app-name",
                "+ * java -jar my-verticle-fat.jar start --vertx-id=my-app-name",
                "  * ----",
                "@@ -1089,3 +1089,3 @@",
                "  * ----",
                "- * java -jar my-verticle-fat.jar start -Dvertx-id=my-app-name -cluster",
                "+ * java -jar my-verticle-fat.jar start \u00e2\u0080\u0094-vertx-id=my-app-name -cluster",
                "  * ----"
            ],
            "changed_files": [
                "src/main/asciidoc/java/index.adoc",
                "src/main/java/io/vertx/core/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2341": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/package-info.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2341",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "73d9cf81080c315ebd6257e44011dbb183f16844",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1521702020,
            "hunks": 111,
            "message": "Implement HTTP client keep alive timeout - fixes #2326",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index 7979708d9..5e52cee40 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -806,2 +806,8 @@ Set the default HTTP/2 connection window size. It overrides the initial window",
                " +++",
                "+|[[http2KeepAliveTimeout]]`http2KeepAliveTimeout`|`Number (int)`|",
                "++++",
                "+Set the keep alive timeout for HTTP/2 connections, in seconds.",
                "+ <p/>",
                "+ This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "++++",
                " |[[http2MaxPoolSize]]`http2MaxPoolSize`|`Number (int)`|",
                "@@ -833,2 +839,8 @@ Set whether keep alive is enabled on the client",
                " +++",
                "+|[[keepAliveTimeout]]`keepAliveTimeout`|`Number (int)`|",
                "++++",
                "+Set the keep alive timeout for HTTP/1.x, in seconds.",
                "+ <p/>",
                "+ This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "++++",
                " |[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "@@ -909,2 +921,7 @@ Set the limit of pending requests a pipe-lined HTTP/1 connection can send.",
                " +++",
                "+|[[poolCleanerPeriod]]`poolCleanerPeriod`|`Number (int)`|",
                "++++",
                "+Set the connection pool cleaner period in milli seconds, a non positive value disables expiration checks and connections",
                "+ will remain in the pool until they are closed.",
                "++++",
                " |[[protocolVersion]]`protocolVersion`|`link:enums.html#HttpVersion[HttpVersion]`|",
                "diff --git a/src/main/asciidoc/http.adoc b/src/main/asciidoc/http.adoc",
                "new file mode 100644",
                "index 000000000..c50a11489",
                "--- /dev/null",
                "+++ b/src/main/asciidoc/http.adoc",
                "@@ -0,0 +1,1749 @@",
                "+== Writing HTTP servers and clients",
                "+",
                "+Vert.x allows you to easily write non blocking HTTP clients and servers.",
                "+",
                "+Vert.x supports the HTTP/1.0, HTTP/1.1 and HTTP/2 protocols.",
                "+",
                "+The base API for HTTP is the same for HTTP/1.x and HTTP/2, specific API features are available for dealing with the",
                "+HTTP/2 protocol.",
                "+",
                "+=== Creating an HTTP Server",
                "+",
                "+The simplest way to create an HTTP server, using all default options is as follows:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example1}",
                "+----",
                "+",
                "+=== Configuring an HTTP server",
                "+",
                "+If you don't want the default, a server can be configured by passing in a {@link io.vertx.core.http.HttpServerOptions}",
                "+instance when creating it:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example2}",
                "+----",
                "+",
                "+=== Configuring an HTTP/2 server",
                "+",
                "+Vert.x supports HTTP/2 over TLS `h2` and over TCP `h2c`.",
                "+",
                "+- `h2` identifies the HTTP/2 protocol when used over TLS negotiated by https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation[Application-Layer Protocol Negotiation] (ALPN)",
                "+- `h2c` identifies the HTTP/2 protocol when using in clear text over TCP, such connections are established either with",
                "+an HTTP/1.1 upgraded request or directly",
                "+",
                "+To handle `h2` requests, TLS must be enabled along with {@link io.vertx.core.http.HttpServerOptions#setUseAlpn(boolean)}:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example0}",
                "+----",
                "+",
                "+ALPN is a TLS extension that negotiates the protocol before the client and the server start to exchange data.",
                "+",
                "+Clients that don't support ALPN will still be able to do a _classic_ SSL handshake.",
                "+",
                "+ALPN will usually agree on the `h2` protocol, although `http/1.1` can be used if the server or the client decides",
                "+so.",
                "+",
                "+To handle `h2c` requests, TLS must be disabled, the server will upgrade to HTTP/2 any request HTTP/1.1 that wants to",
                "+upgrade to HTTP/2. It will also accept a direct `h2c` connection beginning with the `PRI * HTTP/2.0\\r\\nSM\\r\\n` preface.",
                "+",
                "+WARNING: most browsers won't support `h2c`, so for serving web sites you should use `h2` and not `h2c`.",
                "+",
                "+When a server accepts an HTTP/2 connection, it sends to the client its {@link io.vertx.core.http.HttpServerOptions#getInitialSettings initial settings}.",
                "+The settings define how the client can use the connection, the default initial settings for a server are:",
                "+",
                "+- {@link io.vertx.core.http.Http2Settings#getMaxConcurrentStreams}: {@code 100} as recommended by the HTTP/2 RFC",
                "+- the default HTTP/2 settings values for the others",
                "+",
                "+NOTE: Worker Verticles are not compatible with HTTP/2",
                "+",
                "+=== Logging network server activity",
                "+",
                "+For debugging purposes, network activity can be logged.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#exampleServerLogging}",
                "+----",
                "+",
                "+See the chapter on <<logging_network_activity, logging network activity>> for a detailed explanation.",
                "+",
                "+=== Start the Server Listening",
                "+",
                "+To tell the server to listen for incoming requests you use one of the {@link io.vertx.core.http.HttpServer#listen}",
                "+alternatives.",
                "+",
                "+To tell the server to listen at the host and port as specified in the options:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example3}",
                "+----",
                "+",
                "+Or to specify the host and port in the call to listen, ignoring what is configured in the options:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example4}",
                "+----",
                "+",
                "+The default host is `0.0.0.0` which means 'listen on all available addresses' and the default port is `80`.",
                "+",
                "+The actual bind is asynchronous so the server might not actually be listening until some time *after* the call to",
                "+listen has returned.",
                "+",
                "+If you want to be notified when the server is actually listening you can provide a handler to the `listen` call.",
                "+For example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example5}",
                "+----",
                "+",
                "+=== Getting notified of incoming requests",
                "+",
                "+To be notified when a request arrives you need to set a {@link io.vertx.core.http.HttpServer#requestHandler}:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example6}",
                "+----",
                "+",
                "+=== Handling requests",
                "+",
                "+When a request arrives, the request handler is called passing in an instance of {@link io.vertx.core.http.HttpServerRequest}.",
                "+This object represents the server side HTTP request.",
                "+",
                "+The handler is called when the headers of the request have been fully read.",
                "+",
                "+If the request contains a body, that body will arrive at the server some time after the request handler has been called.",
                "+",
                "+The server request object allows you to retrieve the {@link io.vertx.core.http.HttpServerRequest#uri},",
                "+{@link io.vertx.core.http.HttpServerRequest#path}, {@link io.vertx.core.http.HttpServerRequest#params} and",
                "+{@link io.vertx.core.http.HttpServerRequest#headers}, amongst other things.",
                "+",
                "+Each server request object is associated with one server response object. You use",
                "+{@link io.vertx.core.http.HttpServerRequest#response} to get a reference to the {@link io.vertx.core.http.HttpServerResponse}",
                "+object.",
                "+",
                "+Here's a simple example of a server handling a request and replying with \"hello world\" to it.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example7_1}",
                "+----",
                "+",
                "+==== Request version",
                "+",
                "+The version of HTTP specified in the request can be retrieved with {@link io.vertx.core.http.HttpServerRequest#version}",
                "+",
                "+==== Request method",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerRequest#method} to retrieve the HTTP method of the request.",
                "+(i.e. whether it's GET, POST, PUT, DELETE, HEAD, OPTIONS, etc).",
                "+",
                "+==== Request URI",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerRequest#uri} to retrieve the URI of the request.",
                "+",
                "+Note that this is the actual URI as passed in the HTTP request, and it's almost always a relative URI.",
                "+",
                "+The URI is as defined in http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html[Section 5.1.2 of the HTTP specification - Request-URI]",
                "+",
                "+==== Request path",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerRequest#path} to return the path part of the URI",
                "+",
                "+For example, if the request URI was:",
                "+",
                "+ a/b/c/page.html?param1=abc&param2=xyz",
                "+",
                "+Then the path would be",
                "+",
                "+ /a/b/c/page.html",
                "+",
                "+==== Request query",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerRequest#query} to return the query part of the URI",
                "+",
                "+For example, if the request URI was:",
                "+",
                "+ a/b/c/page.html?param1=abc&param2=xyz",
                "+",
                "+Then the query would be",
                "+",
                "+ param1=abc&param2=xyz",
                "+",
                "+==== Request headers",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerRequest#headers} to return the headers of the HTTP request.",
                "+",
                "+This returns an instance of {@link io.vertx.core.MultiMap} - which is like a normal Map or Hash but allows multiple",
                "+values for the same key - this is because HTTP allows multiple header values with the same key.",
                "+",
                "+It also has case-insensitive keys, that means you can do the following:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example8}",
                "+----",
                "+",
                "+==== Request host",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerRequest#host} to return the host of the HTTP request.",
                "+",
                "+For HTTP/1.x requests the `host` header is returned, for HTTP/1 requests the `:authority` pseudo header is returned.",
                "+",
                "+==== Request parameters",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerRequest#params} to return the parameters of the HTTP request.",
                "+",
                "+Just like {@link io.vertx.core.http.HttpServerRequest#headers} this returns an instance of {@link io.vertx.core.MultiMap}",
                "+as there can be more than one parameter with the same name.",
                "+",
                "+Request parameters are sent on the request URI, after the path. For example if the URI was:",
                "+",
                "+ /page.html?param1=abc&param2=xyz",
                "+",
                "+Then the parameters would contain the following:",
                "+",
                "+----",
                "+param1: 'abc'",
                "+param2: 'xyz",
                "+----",
                "+",
                "+Note that these request parameters are retrieved from the URL of the request. If you have form attributes that",
                "+have been sent as part of the submission of an HTML form submitted in the body of a `multi-part/form-data` request",
                "+then they will not appear in the params here.",
                "+",
                "+==== Remote address",
                "+",
                "+The address of the sender of the request can be retrieved with {@link io.vertx.core.http.HttpServerRequest#remoteAddress}.",
                "+",
                "+==== Absolute URI",
                "+",
                "+The URI passed in an HTTP request is usually relative. If you wish to retrieve the absolute URI corresponding",
                "+to the request, you can get it with {@link io.vertx.core.http.HttpServerRequest#absoluteURI}",
                "+",
                "+==== End handler",
                "+",
                "+The {@link io.vertx.core.http.HttpServerRequest#endHandler} of the request is invoked when the entire request,",
                "+including any body has been fully read.",
                "+",
                "+==== Reading Data from the Request Body",
                "+",
                "+Often an HTTP request contains a body that we want to read. As previously mentioned the request handler is called",
                "+when just the headers of the request have arrived so the request object does not have a body at that point.",
                "+",
                "+This is because the body may be very large (e.g. a file upload) and we don't generally want to buffer the entire",
                "+body in memory before handing it to you, as that could cause the server to exhaust available memory.",
                "+",
                "+To receive the body, you can use the {@link io.vertx.core.http.HttpServerRequest#handler}  on the request,",
                "+this will get called every time a chunk of the request body arrives. Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example9}",
                "+----",
                "+",
                "+The object passed into the handler is a {@link io.vertx.core.buffer.Buffer}, and the handler can be called",
                "+multiple times as data arrives from the network, depending on the size of the body.",
                "+",
                "+In some cases (e.g. if the body is small) you will want to aggregate the entire body in memory, so you could do",
                "+the aggregation yourself as follows:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example10}",
                "+----",
                "+",
                "+This is such a common case, that Vert.x provides a {@link io.vertx.core.http.HttpServerRequest#bodyHandler} to do this",
                "+for you. The body handler is called once when all the body has been received:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example11}",
                "+----",
                "+",
                "+==== Pumping requests",
                "+",
                "+The request object is a {@link io.vertx.core.streams.ReadStream} so you can pump the request body to any",
                "+{@link io.vertx.core.streams.WriteStream} instance.",
                "+",
                "+See the chapter on <<streams, streams and pumps>> for a detailed explanation.",
                "+",
                "+==== Handling HTML forms",
                "+",
                "+HTML forms can be submitted with either a content type of `application/x-www-form-urlencoded` or `multipart/form-data`.",
                "+",
                "+For url encoded forms, the form attributes are encoded in the url, just like normal query parameters.",
                "+",
                "+For multi-part forms they are encoded in the request body, and as such are not available until the entire body",
                "+has been read from the wire.",
                "+",
                "+Multi-part forms can also contain file uploads.",
                "+",
                "+If you want to retrieve the attributes of a multi-part form you should tell Vert.x that you expect to receive",
                "+such a form *before* any of the body is read by calling {@link io.vertx.core.http.HttpServerRequest#setExpectMultipart}",
                "+with true, and then you should retrieve the actual attributes using {@link io.vertx.core.http.HttpServerRequest#formAttributes}",
                "+once the entire body has been read:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example12}",
                "+----",
                "+",
                "+==== Handling form file uploads",
                "+",
                "+Vert.x can also handle file uploads which are encoded in a multi-part request body.",
                "+",
                "+To receive file uploads you tell Vert.x to expect a multi-part form and set an",
                "+{@link io.vertx.core.http.HttpServerRequest#uploadHandler} on the request.",
                "+",
                "+This handler will be called once for every",
                "+upload that arrives on the server.",
                "+",
                "+The object passed into the handler is a {@link io.vertx.core.http.HttpServerFileUpload} instance.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example13}",
                "+----",
                "+",
                "+File uploads can be large we don't provide the entire upload in a single buffer as that might result in memory",
                "+exhaustion, instead, the upload data is received in chunks:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example14}",
                "+----",
                "+",
                "+The upload object is a {@link io.vertx.core.streams.ReadStream} so you can pump the request body to any",
                "+{@link io.vertx.core.streams.WriteStream} instance. See the chapter on <<streams, streams and pumps>> for a",
                "+detailed explanation.",
                "+",
                "+If you just want to upload the file to disk somewhere you can use {@link io.vertx.core.http.HttpServerFileUpload#streamToFileSystem}:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example15}",
                "+----",
                "+",
                "+WARNING: Make sure you check the filename in a production system to avoid malicious clients uploading files",
                "+to arbitrary places on your filesystem. See <<Security notes, security notes>> for more information.",
                "+",
                "+==== Handling compressed body",
                "+",
                "+Vert.x can handle compressed body payloads which are encoded by the client with the _deflate_ or _gzip_",
                "+algorithms.",
                "+",
                "+To enable decompression set {@link io.vertx.core.http.HttpServerOptions#setDecompressionSupported(boolean)} on the",
                "+options when creating the server.",
                "+",
                "+By default decompression is disabled.",
                "+",
                "+==== Receiving custom HTTP/2 frames",
                "+",
                "+HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "+of frames to be sent and received.",
                "+",
                "+To receive custom frames, you can use the {@link io.vertx.core.http.HttpServerRequest#customFrameHandler} on the request,",
                "+this will get called every time a custom frame arrives. Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example1}",
                "+----",
                "+",
                "+HTTP/2 frames are not subject to flow control - the frame handler will be called immediatly when a",
                "+custom frame is received whether the request is paused or is not",
                "+",
                "+==== Non standard HTTP methods",
                "+",
                "+The {@link io.vertx.core.http.HttpMethod#OTHER} HTTP method is used for non standard methods, in this case",
                "+{@link io.vertx.core.http.HttpServerRequest#rawMethod()} returns the HTTP method as sent by the client.",
                "+",
                "+=== Sending back responses",
                "+",
                "+The server response object is an instance of {@link io.vertx.core.http.HttpServerResponse} and is obtained from the",
                "+request with {@link io.vertx.core.http.HttpServerRequest#response}.",
                "+",
                "+You use the response object to write a response back to the HTTP client.",
                "+",
                "+==== Setting status code and message",
                "+",
                "+The default HTTP status code for a response is `200`, representing `OK`.",
                "+",
                "+Use {@link io.vertx.core.http.HttpServerResponse#setStatusCode} to set a different code.",
                "+",
                "+You can also specify a custom status message with {@link io.vertx.core.http.HttpServerResponse#setStatusMessage}.",
                "+",
                "+If you don't specify a status message, the default one corresponding to the status code will be used.",
                "+",
                "+NOTE: for HTTP/2 the status won't be present in the response since the protocol won't transmit the message",
                "+to the client",
                "+",
                "+==== Writing HTTP responses",
                "+",
                "+To write data to an HTTP response, you use one the {@link io.vertx.core.http.HttpServerResponse#write} operations.",
                "+",
                "+These can be invoked multiple times before the response is ended. They can be invoked in a few ways:",
                "+",
                "+With a single buffer:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example16}",
                "+----",
                "+",
                "+With a string. In this case the string will encoded using UTF-8 and the result written to the wire.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example17}",
                "+----",
                "+",
                "+With a string and an encoding. In this case the string will encoded using the specified encoding and the",
                "+result written to the wire.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example18}",
                "+----",
                "+",
                "+Writing to a response is asynchronous and always returns immediately after the write has been queued.",
                "+",
                "+If you are just writing a single string or buffer to the HTTP response you can write it and end the response in a",
                "+single call to the {@link io.vertx.core.http.HttpServerResponse#end(String)}",
                "+",
                "+The first call to write results in the response header being being written to the response. Consequently, if you are",
                "+not using HTTP chunking then you must set the `Content-Length` header before writing to the response, since it will",
                "+be too late otherwise. If you are using HTTP chunking you do not have to worry.",
                "+",
                "+==== Ending HTTP responses",
                "+",
                "+Once you have finished with the HTTP response you should {@link io.vertx.core.http.HttpServerResponse#end} it.",
                "+",
                "+This can be done in several ways:",
                "+",
                "+With no arguments, the response is simply ended.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example19}",
                "+----",
                "+",
                "+It can also be called with a string or buffer in the same way `write` is called. In this case it's just the same as",
                "+calling write with a string or buffer followed by calling end with no arguments. For example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example20}",
                "+----",
                "+",
                "+==== Closing the underlying connection",
                "+",
                "+You can close the underlying TCP connection with {@link io.vertx.core.http.HttpServerResponse#close}.",
                "+",
                "+Non keep-alive connections will be automatically closed by Vert.x when the response is ended.",
                "+",
                "+Keep-alive connections are not automatically closed by Vert.x by default. If you want keep-alive connections to be",
                "+closed after an idle time, then you configure {@link io.vertx.core.http.HttpServerOptions#setIdleTimeout}.",
                "+",
                "+HTTP/2 connections send a {@literal GOAWAY} frame before closing the response.",
                "+",
                "+==== Setting response headers",
                "+",
                "+HTTP response headers can be added to the response by adding them directly to the",
                "+{@link io.vertx.core.http.HttpServerResponse#headers}:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example21}",
                "+----",
                "+",
                "+Or you can use {@link io.vertx.core.http.HttpServerResponse#putHeader}",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example22}",
                "+----",
                "+",
                "+Headers must all be added before any parts of the response body are written.",
                "+",
                "+==== Chunked HTTP responses and trailers",
                "+",
                "+Vert.x supports http://en.wikipedia.org/wiki/Chunked_transfer_encoding[HTTP Chunked Transfer Encoding].",
                "+",
                "+This allows the HTTP response body to be written in chunks, and is normally used when a large response body is",
                "+being streamed to a client and the total size is not known in advance.",
                "+",
                "+You put the HTTP response into chunked mode as follows:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example23}",
                "+----",
                "+",
                "+Default is non-chunked. When in chunked mode, each call to one of the {@link io.vertx.core.http.HttpServerResponse#write}",
                "+methods will result in a new HTTP chunk being written out.",
                "+",
                "+When in chunked mode you can also write HTTP response trailers to the response. These are actually written in",
                "+the final chunk of the response.",
                "+",
                "+NOTE: chunked response has no effect for an HTTP/2 stream",
                "+",
                "+To add trailers to the response, add them directly to the {@link io.vertx.core.http.HttpServerResponse#trailers}.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example24}",
                "+----",
                "+",
                "+Or use {@link io.vertx.core.http.HttpServerResponse#putTrailer}.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example25}",
                "+----",
                "+",
                "+==== Serving files directly from disk or the classpath",
                "+",
                "+If you were writing a web server, one way to serve a file from disk would be to open it as an {@link io.vertx.core.file.AsyncFile}",
                "+and pump it to the HTTP response.",
                "+",
                "+Or you could load it it one go using {@link io.vertx.core.file.FileSystem#readFile} and write it straight to the response.",
                "+",
                "+Alternatively, Vert.x provides a method which allows you to serve a file from disk or the filesystem to an HTTP response",
                "+in one operation.",
                "+Where supported by the underlying operating system this may result in the OS directly transferring bytes from the",
                "+file to the socket without being copied through user-space at all.",
                "+",
                "+This is done by using {@link io.vertx.core.http.HttpServerResponse#sendFile}, and is usually more efficient for large",
                "+files, but may be slower for small files.",
                "+",
                "+Here's a very simple web server that serves files from the file system using sendFile:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example26}",
                "+----",
                "+",
                "+Sending a file is asynchronous and may not complete until some time after the call has returned. If you want to",
                "+be notified when the file has been writen you can use {@link io.vertx.core.http.HttpServerResponse#sendFile(String,io.vertx.core.Handler)}",
                "+",
                "+Please see the chapter about <<classpath, serving files from the classpath>> for restrictions about the classpath resolution or disabling it.",
                "+",
                "+NOTE: If you use `sendFile` while using HTTPS it will copy through user-space, since if the kernel is copying data",
                "+directly from disk to socket it doesn't give us an opportunity to apply any encryption.",
                "+",
                "+WARNING: If you're going to write web servers directly using Vert.x be careful that users cannot exploit the",
                "+path to access files outside the directory from which you want to serve them or the classpath It may be safer instead to use",
                "+Vert.x Web.",
                "+",
                "+When there is a need to serve just a segment of a file, say starting from a given byte, you can achieve this by doing:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example26b}",
                "+----",
                "+",
                "+You are not required to supply the length if you want to send a file starting from an offset until the end, in this",
                "+case you can just do:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example26c}",
                "+----",
                "+",
                "+==== Pumping responses",
                "+",
                "+The server response is a {@link io.vertx.core.streams.WriteStream} instance so you can pump to it from any",
                "+{@link io.vertx.core.streams.ReadStream}, e.g. {@link io.vertx.core.file.AsyncFile}, {@link io.vertx.core.net.NetSocket},",
                "+{@link io.vertx.core.http.WebSocket} or {@link io.vertx.core.http.HttpServerRequest}.",
                "+",
                "+Here's an example which echoes the request body back in the response for any PUT methods.",
                "+It uses a pump for the body, so it will work even if the HTTP request body is much larger than can fit in memory",
                "+at any one time:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example27}",
                "+----",
                "+",
                "+==== Writing HTTP/2 frames",
                "+",
                "+HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "+of frames to be sent and received.",
                "+",
                "+To send such frames, you can use the {@link io.vertx.core.http.HttpServerResponse#writeCustomFrame} on the response.",
                "+Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example2}",
                "+----",
                "+",
                "+These frames are sent immediately and are not subject to flow control - when such frame is sent there it may be done",
                "+before other {@literal DATA} frames.",
                "+",
                "+==== Stream reset",
                "+",
                "+HTTP/1.x does not allow a clean reset of a request or a response stream, for example when a client uploads",
                "+a resource already present on the server, the server needs to accept the entire response.",
                "+",
                "+HTTP/2 supports stream reset at any time during the request/response:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example3}",
                "+----",
                "+",
                "+By default the `NO_ERROR` (0) error code is sent, another code can sent instead:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example4}",
                "+----",
                "+",
                "+The HTTP/2 specification defines the list of http://httpwg.org/specs/rfc7540.html#ErrorCodes[error codes] one can use.",
                "+",
                "+The request handler are notified of stream reset events with the {@link io.vertx.core.http.HttpServerRequest#exceptionHandler request handler} and",
                "+{@link io.vertx.core.http.HttpServerResponse#exceptionHandler response handler}:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example5}",
                "+----",
                "+",
                "+==== Server push",
                "+",
                "+Server push is a new feature of HTTP/2 that enables sending multiple responses in parallel for a single client request.",
                "+",
                "+When a server process a request, it can push a request/response to the client:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example6}",
                "+----",
                "+",
                "+When the server is ready to push the response, the push response handler is called and the handler can send the response.",
                "+",
                "+The push response handler may receive a failure, for instance the client may cancel the push because it already has `main.js` in its",
                "+cache and does not want it anymore.",
                "+",
                "+The {@link io.vertx.core.http.HttpServerResponse#push} method must be called before the initiating response ends, however",
                "+the pushed response can be written after.",
                "+",
                "+==== Handling exceptions",
                "+",
                "+You can set an {@link io.vertx.core.http.HttpServer#exceptionHandler(io.vertx.core.Handler)} to receive any",
                "+exceptions that happens before the connection is passed to the {@link io.vertx.core.http.HttpServer#requestHandler(io.vertx.core.Handler)}",
                "+or to the {@link io.vertx.core.http.HttpServer#websocketHandler(io.vertx.core.Handler)}, e.g during the TLS handshake.",
                "+",
                "+=== HTTP Compression",
                "+",
                "+Vert.x comes with support for HTTP Compression out of the box.",
                "+",
                "+This means you are able to automatically compress the body of the responses before they are sent back to the client.",
                "+",
                "+If the client does not support HTTP compression the responses are sent back without compressing the body.",
                "+",
                "+This allows to handle Client that support HTTP Compression and those that not support it at the same time.",
                "+",
                "+To enable compression use can configure it with {@link io.vertx.core.http.HttpServerOptions#setCompressionSupported}.",
                "+",
                "+By default compression is not enabled.",
                "+",
                "+When HTTP compression is enabled the server will check if the client includes an `Accept-Encoding` header which",
                "+includes the supported compressions. Commonly used are deflate and gzip. Both are supported by Vert.x.",
                "+",
                "+If such a header is found the server will automatically compress the body of the response with one of the supported",
                "+compressions and send it back to the client.",
                "+",
                "+Whenever the response needs to be sent without compression you can set the header `content-encoding` to `identity`:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#setIdentityContentEncodingHeader}",
                "+----",
                "+",
                "+Be aware that compression may be able to reduce network traffic but is more CPU-intensive.",
                "+",
                "+To address this latter issue Vert.x allows you to tune the 'compression level' parameter that is native of the gzip/deflate compression algorithms.",
                "+",
                "+Compression level allows to configure gizp/deflate algorithms in terms of the compression ratio of the resulting data and the computational cost of the compress/decompress operation.",
                "+",
                "+The compression level is an integer value ranged from '1' to '9', where '1' means lower compression ratio but fastest algorithm and '9' means maximum compression ratio available but a slower algorithm.",
                "+",
                "+Using compression levels higher that 1-2 usually allows to save just some bytes in size - the gain is not linear, and depends on the specific data to be compressed",
                "+- but it comports a non-trascurable cost in term of CPU cycles required to the server while generating the compressed response data",
                "+( Note that at moment Vert.x doesn't support any form caching of compressed response data, even for static files, so the compression is done on-the-fly",
                "+at every request body generation ) and in the same way it affects client(s) while decoding (inflating) received responses, operation that becomes more CPU-intensive",
                "+the more the level increases.",
                "+",
                "+By default - if compression is enabled via {@link io.vertx.core.http.HttpServerOptions#setCompressionSupported} - Vert.x will use '6' as compression level,",
                "+but the parameter can be configured to address any case with {@link io.vertx.core.http.HttpServerOptions#setCompressionLevel}.",
                "+",
                "+=== Creating an HTTP client",
                "+",
                "+You create an {@link io.vertx.core.http.HttpClient} instance with default options as follows:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example28}",
                "+----",
                "+",
                "+If you want to configure options for the client, you create it as follows:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example29}",
                "+----",
                "+",
                "+Vert.x supports HTTP/2 over TLS `h2` and over TCP `h2c`.",
                "+",
                "+By default the http client performs HTTP/1.1 requests, to perform HTTP/2 requests the {@link io.vertx.core.http.HttpClientOptions#setProtocolVersion}",
                "+must be set to {@link io.vertx.core.http.HttpVersion#HTTP_2}.",
                "+",
                "+For `h2` requests, TLS must be enabled with _Application-Layer Protocol Negotiation_:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example7}",
                "+----",
                "+",
                "+For `h2c` requests, TLS must be disabled, the client will do an HTTP/1.1 requests and try an upgrade to HTTP/2:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example8}",
                "+----",
                "+",
                "+`h2c` connections can also be established directly, i.e connection started with a prior knowledge, when",
                "+{@link io.vertx.core.http.HttpClientOptions#setHttp2ClearTextUpgrade(boolean)} options is set to false: after the",
                "+connection is established, the client will send the HTTP/2 connection preface and expect to receive",
                "+the same preface from the server.",
                "+",
                "+The http server may not support HTTP/2, the actual version can be checked",
                "+with {@link io.vertx.core.http.HttpClientResponse#version()} when the response arrives.",
                "+",
                "+When a clients connects to an HTTP/2 server, it sends to the server its {@link io.vertx.core.http.HttpClientOptions#getInitialSettings initial settings}.",
                "+The settings define how the server can use the connection, the default initial settings for a client are the default",
                "+values defined by the HTTP/2 RFC.",
                "+",
                "+=== Logging network client activity",
                "+",
                "+For debugging purposes, network activity can be logged.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#exampleClientLogging}",
                "+----",
                "+",
                "+See the chapter on <<logging_network_activity, logging network activity>> for a detailed explanation.",
                "+",
                "+=== Making requests",
                "+",
                "+The http client is very flexible and there are various ways you can make requests with it.",
                "+",
                "+",
                "+Often you want to make many requests to the same host/port with an http client. To avoid you repeating the host/port",
                "+every time you make a request you can configure the client with a default host/port:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example30}",
                "+----",
                "+",
                "+Alternatively if you find yourself making lots of requests to different host/ports with the same client you can",
                "+simply specify the host/port when doing the request.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example31}",
                "+----",
                "+",
                "+Both methods of specifying host/port are supported for all the different ways of making requests with the client.",
                "+",
                "+==== Simple requests with no request body",
                "+",
                "+Often, you'll want to make HTTP requests with no request body. This is usually the case with HTTP GET, OPTIONS and",
                "+HEAD requests.",
                "+",
                "+The simplest way to do this with the Vert.x http client is using the methods prefixed with `Now`. For example",
                "+{@link io.vertx.core.http.HttpClient#getNow}.",
                "+",
                "+These methods create the http request and send it in a single method call and allow you to provide a handler that will be",
                "+called with the http response when it comes back.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example32}",
                "+----",
                "+",
                "+==== Writing general requests",
                "+",
                "+At other times you don't know the request method you want to send until run-time. For that use case we provide",
                "+general purpose request methods such as {@link io.vertx.core.http.HttpClient#request} which allow you to specify",
                "+the HTTP method at run-time:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example33}",
                "+----",
                "+",
                "+==== Writing request bodies",
                "+",
                "+Sometimes you'll want to write requests which have a body, or perhaps you want to write headers to a request",
                "+before sending it.",
                "+",
                "+To do this you can call one of the specific request methods such as {@link io.vertx.core.http.HttpClient#post} or",
                "+one of the general purpose request methods such as {@link io.vertx.core.http.HttpClient#request}.",
                "+",
                "+These methods don't send the request immediately, but instead return an instance of {@link io.vertx.core.http.HttpClientRequest}",
                "+which can be used to write to the request body or write headers.",
                "+",
                "+Here are some examples of writing a POST request with a body:",
                "+m",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example34}",
                "+----",
                "+",
                "+Methods exist to write strings in UTF-8 encoding and in any specific encoding and to write buffers:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example35}",
                "+----",
                "+",
                "+If you are just writing a single string or buffer to the HTTP request you can write it and end the request in a",
                "+single call to the `end` function.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example36}",
                "+----",
                "+",
                "+When you're writing to a request, the first call to `write` will result in the request headers being written",
                "+out to the wire.",
                "+",
                "+The actual write is asynchronous and might not occur until some time after the call has returned.",
                "+",
                "+Non-chunked HTTP requests with a request body require a `Content-Length` header to be provided.",
                "+",
                "+Consequently, if you are not using chunked HTTP then you must set the `Content-Length` header before writing",
                "+to the request, as it will be too late otherwise.",
                "+",
                "+If you are calling one of the `end` methods that take a string or buffer then Vert.x will automatically calculate",
                "+and set the `Content-Length` header before writing the request body.",
                "+",
                "+If you are using HTTP chunking a a `Content-Length` header is not required, so you do not have to calculate the size",
                "+up-front.",
                "+",
                "+==== Writing request headers",
                "+",
                "+You can write headers to a request using the {@link io.vertx.core.http.HttpClientRequest#headers()} multi-map as follows:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example37}",
                "+----",
                "+",
                "+The headers are an instance of {@link io.vertx.core.MultiMap} which provides operations for adding, setting and removing",
                "+entries. Http headers allow more than one value for a specific key.",
                "+",
                "+You can also write headers using {@link io.vertx.core.http.HttpClientRequest#putHeader}",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example38}",
                "+----",
                "+",
                "+If you wish to write headers to the request you must do so before any part of the request body is written.",
                "+",
                "+==== Non standard HTTP methods",
                "+",
                "+The {@link io.vertx.core.http.HttpMethod#OTHER} HTTP method is used for non standard methods, when this method",
                "+is used, {@link io.vertx.core.http.HttpClientRequest#setRawMethod(java.lang.String)} must be used to",
                "+set the raw method to send to the server.",
                "+",
                "+==== Ending HTTP requests",
                "+",
                "+Once you have finished with the HTTP request you must end it with one of the {@link io.vertx.core.http.HttpClientRequest#end}",
                "+operations.",
                "+",
                "+Ending a request causes any headers to be written, if they have not already been written and the request to be marked",
                "+as complete.",
                "+",
                "+Requests can be ended in several ways. With no arguments the request is simply ended:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example39}",
                "+----",
                "+",
                "+Or a string or buffer can be provided in the call to `end`. This is like calling `write` with the string or buffer",
                "+before calling `end` with no arguments",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example40}",
                "+----",
                "+",
                "+==== Chunked HTTP requests",
                "+",
                "+Vert.x supports http://en.wikipedia.org/wiki/Chunked_transfer_encoding[HTTP Chunked Transfer Encoding] for requests.",
                "+",
                "+This allows the HTTP request body to be written in chunks, and is normally used when a large request body is being streamed",
                "+to the server, whose size is not known in advance.",
                "+",
                "+You put the HTTP request into chunked mode using {@link io.vertx.core.http.HttpClientRequest#setChunked(boolean)}.",
                "+",
                "+In chunked mode each call to write will cause a new chunk to be written to the wire. In chunked mode there is",
                "+no need to set the `Content-Length` of the request up-front.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example41}",
                "+----",
                "+",
                "+==== Request timeouts",
                "+",
                "+You can set a timeout for a specific http request using {@link io.vertx.core.http.HttpClientRequest#setTimeout(long)}.",
                "+",
                "+If the request does not return any data within the timeout period an exception will be passed to the exception handler",
                "+(if provided) and the request will be closed.",
                "+",
                "+==== Handling exceptions",
                "+",
                "+You can handle exceptions corresponding to a request by setting an exception handler on the",
                "+{@link io.vertx.core.http.HttpClientRequest} instance:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example42}",
                "+----",
                "+",
                "+This does not handle non _2xx_ response that need to be handled in the",
                "+{@link io.vertx.core.http.HttpClientResponse} code:",
                "+",
                "+[source, $lang]",
                "+----",
                "+{@link examples.HTTPExamples#statusCodeHandling}",
                "+----",
                "+",
                "+IMPORTANT: `XXXNow` methods cannot receive an exception handler.",
                "+",
                "+==== Specifying a handler on the client request",
                "+",
                "+Instead of providing a response handler in the call to create the client request object, alternatively, you can",
                "+not provide a handler when the request is created and set it later on the request object itself, using",
                "+{@link io.vertx.core.http.HttpClientRequest#handler(io.vertx.core.Handler)}, for example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example43}",
                "+----",
                "+",
                "+==== Using the request as a stream",
                "+",
                "+The {@link io.vertx.core.http.HttpClientRequest} instance is also a {@link io.vertx.core.streams.WriteStream} which means",
                "+you can pump to it from any {@link io.vertx.core.streams.ReadStream} instance.",
                "+",
                "+For, example, you could pump a file on disk to a http request body as follows:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example44}",
                "+----",
                "+",
                "+==== Writing HTTP/2 frames",
                "+",
                "+HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "+of frames to be sent and received.",
                "+",
                "+To send such frames, you can use the {@link io.vertx.core.http.HttpClientRequest#write} on the request. Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example9}",
                "+----",
                "+",
                "+==== Stream reset",
                "+",
                "+HTTP/1.x does not allow a clean reset of a request or a response stream, for example when a client uploads a resource already",
                "+present on the server, the server needs to accept the entire response.",
                "+",
                "+HTTP/2 supports stream reset at any time during the request/response:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example10}",
                "+----",
                "+",
                "+By default the NO_ERROR (0) error code is sent, another code can sent instead:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example11}",
                "+----",
                "+",
                "+The HTTP/2 specification defines the list of http://httpwg.org/specs/rfc7540.html#ErrorCodes[error codes] one can use.",
                "+",
                "+The request handler are notified of stream reset events with the {@link io.vertx.core.http.HttpClientRequest#exceptionHandler request handler} and",
                "+{@link io.vertx.core.http.HttpClientResponse#exceptionHandler response handler}:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example12}",
                "+----",
                "+",
                "+=== Handling HTTP responses",
                "+",
                "+You receive an instance of {@link io.vertx.core.http.HttpClientResponse} into the handler that you specify in of",
                "+the request methods or by setting a handler directly on the {@link io.vertx.core.http.HttpClientRequest} object.",
                "+",
                "+You can query the status code and the status message of the response with {@link io.vertx.core.http.HttpClientResponse#statusCode}",
                "+and {@link io.vertx.core.http.HttpClientResponse#statusMessage}.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example45}",
                "+----",
                "+",
                "+==== Using the response as a stream",
                "+",
                "+The {@link io.vertx.core.http.HttpClientResponse} instance is also a {@link io.vertx.core.streams.ReadStream} which means",
                "+you can pump it to any {@link io.vertx.core.streams.WriteStream} instance.",
                "+",
                "+==== Response headers and trailers",
                "+",
                "+Http responses can contain headers. Use {@link io.vertx.core.http.HttpClientResponse#headers} to get the headers.",
                "+",
                "+The object returned is a {@link io.vertx.core.MultiMap} as HTTP headers can contain multiple values for single keys.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example46}",
                "+----",
                "+",
                "+Chunked HTTP responses can also contain trailers - these are sent in the last chunk of the response body.",
                "+",
                "+You use {@link io.vertx.core.http.HttpClientResponse#trailers} to get the trailers. Trailers are also a {@link io.vertx.core.MultiMap}.",
                "+",
                "+==== Reading the request body",
                "+",
                "+The response handler is called when the headers of the response have been read from the wire.",
                "+",
                "+If the response has a body this might arrive in several pieces some time after the headers have been read. We",
                "+don't wait for all the body to arrive before calling the response handler as the response could be very large and we",
                "+might be waiting a long time, or run out of memory for large responses.",
                "+",
                "+As parts of the response body arrive, the {@link io.vertx.core.http.HttpClientResponse#handler} is called with",
                "+a {@link io.vertx.core.buffer.Buffer} representing the piece of the body:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example47}",
                "+----",
                "+",
                "+If you know the response body is not very large and want to aggregate it all in memory before handling it, you can",
                "+either aggregate it yourself:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example48}",
                "+----",
                "+",
                "+Or you can use the convenience {@link io.vertx.core.http.HttpClientResponse#bodyHandler(io.vertx.core.Handler)} which",
                "+is called with the entire body when the response has been fully read:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example49}",
                "+----",
                "+",
                "+==== Response end handler",
                "+",
                "+The response {@link io.vertx.core.http.HttpClientResponse#endHandler} is called when the entire response body has been read",
                "+or immediately after the headers have been read and the response handler has been called if there is no body.",
                "+",
                "+==== Reading cookies from the response",
                "+",
                "+You can retrieve the list of cookies from a response using {@link io.vertx.core.http.HttpClientResponse#cookies()}.",
                "+",
                "+Alternatively you can just parse the `Set-Cookie` headers yourself in the response.",
                "+",
                "+==== 30x redirection handling",
                "+",
                "+The client can be configured to follow HTTP redirections: when the client receives an",
                "+`301`, `302`, `303` or `307` status code, it follows the redirection provided by the `Location` response header",
                "+and the response handler is passed the redirected response instead of the original response.",
                "+",
                "+Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#exampleFollowRedirect01}",
                "+----",
                "+",
                "+The redirection policy is as follow",
                "+",
                "+* on a `301`, `302` or `303` status code, follow the redirection with a `GET` method",
                "+* on a `307` status code, follow the redirection with the same HTTP method and the cached body",
                "+",
                "+WARNING: following redirections caches the request body",
                "+",
                "+The maximum redirects is `16` by default and can be changed with {@link io.vertx.core.http.HttpClientOptions#setMaxRedirects(int)}.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#exampleFollowRedirect02}",
                "+----",
                "+",
                "+One size does not fit all and the default redirection policy may not be adapted to your needs.",
                "+",
                "+The default redirection policy can changed with a custom implementation:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#exampleFollowRedirect03}",
                "+----",
                "+",
                "+The policy handles the original {@link io.vertx.core.http.HttpClientResponse} received and returns either `null`",
                "+or a `Future<HttpClientRequest>`.",
                "+",
                "+- when `null` is returned, the original response is processed",
                "+- when a future is returned, the request will be sent on its successful completion",
                "+- when a future is returned, the exception handler set on the request is called on its failure",
                "+",
                "+The returned request must be unsent so the original request handlers can be sent and the client can send it after.",
                "+",
                "+Most of the original request settings will be propagated to the new request:",
                "+",
                "+* request headers, unless if you have set some headers (including {@link io.vertx.core.http.HttpClientRequest#setHost})",
                "+* request body unless the returned request uses a `GET` method",
                "+* response handler",
                "+* request exception handler",
                "+* request timeout",
                "+",
                "+==== 100-Continue handling",
                "+",
                "+According to the http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html[HTTP 1.1 specification] a client can set a",
                "+header `Expect: 100-Continue` and send the request header before sending the rest of the request body.",
                "+",
                "+The server can then respond with an interim response status `Status: 100 (Continue)` to signify to the client that",
                "+it is ok to send the rest of the body.",
                "+",
                "+The idea here is it allows the server to authorise and accept/reject the request before large amounts of data are sent.",
                "+Sending large amounts of data if the request might not be accepted is a waste of bandwidth and ties up the server",
                "+in reading data that it will just discard.",
                "+",
                "+Vert.x allows you to set a {@link io.vertx.core.http.HttpClientRequest#continueHandler(io.vertx.core.Handler)} on the",
                "+client request object",
                "+",
                "+This will be called if the server sends back a `Status: 100 (Continue)` response to signify that it is ok to send",
                "+the rest of the request.",
                "+",
                "+This is used in conjunction with {@link io.vertx.core.http.HttpClientRequest#sendHead()}to send the head of the request.",
                "+",
                "+Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example50}",
                "+----",
                "+",
                "+On the server side a Vert.x http server can be configured to automatically send back 100 Continue interim responses",
                "+when it receives an `Expect: 100-Continue` header.",
                "+",
                "+This is done by setting the option {@link io.vertx.core.http.HttpServerOptions#setHandle100ContinueAutomatically(boolean)}.",
                "+",
                "+If you'd prefer to decide whether to send back continue responses manually, then this property should be set to",
                "+`false` (the default), then you can inspect the headers and call {@link io.vertx.core.http.HttpServerResponse#writeContinue()}",
                "+to have the client continue sending the body:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example50_1}",
                "+----",
                "+",
                "+You can also reject the request by sending back a failure status code directly: in this case the body",
                "+should either be ignored or the connection should be closed (100-Continue is a performance hint and",
                "+cannot be a logical protocol constraint):",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example50_2}",
                "+----",
                "+",
                "+==== Client push",
                "+",
                "+Server push is a new feature of HTTP/2 that enables sending multiple responses in parallel for a single client request.",
                "+",
                "+A push handler can be set on a request to receive the request/response pushed by the server:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example13}",
                "+----",
                "+",
                "+If the client does not want to receive a pushed request, it can reset the stream:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example14}",
                "+----",
                "+",
                "+When no handler is set, any stream pushed will be automatically cancelled by the client with",
                "+a stream reset (`8` error code).",
                "+",
                "+==== Receiving custom HTTP/2 frames",
                "+",
                "+HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind of",
                "+frames to be sent and received.",
                "+",
                "+To receive custom frames, you can use the customFrameHandler on the request, this will get called every time a custom",
                "+frame arrives. Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example15}",
                "+----",
                "+",
                "+=== Enabling compression on the client",
                "+",
                "+The http client comes with support for HTTP Compression out of the box.",
                "+",
                "+This means the client can let the remote http server know that it supports compression, and will be able to handle",
                "+compressed response bodies.",
                "+",
                "+An http server is free to either compress with one of the supported compression algorithms or to send the body back",
                "+without compressing it at all. So this is only a hint for the Http server which it may ignore at will.",
                "+",
                "+To tell the http server which compression is supported by the client it will include an `Accept-Encoding` header with",
                "+the supported compression algorithm as value. Multiple compression algorithms are supported. In case of Vert.x this",
                "+will result in the following header added:",
                "+",
                "+ Accept-Encoding: gzip, deflate",
                "+",
                "+The server will choose then from one of these. You can detect if a server ompressed the body by checking for the",
                "+`Content-Encoding` header in the response sent back from it.",
                "+",
                "+If the body of the response was compressed via gzip it will include for example the following header:",
                "+",
                "+ Content-Encoding: gzip",
                "+",
                "+To enable compression set {@link io.vertx.core.http.HttpClientOptions#setTryUseCompression(boolean)} on the options",
                "+used when creating the client.",
                "+",
                "+By default compression is disabled.",
                "+",
                "+=== HTTP/1.x pooling and keep alive",
                "+",
                "+Http keep alive allows http connections to be used for more than one request. This can be a more efficient use of",
                "+connections when you're making multiple requests to the same server.",
                "+",
                "+For HTTP/1.x versions, the http client supports pooling of connections, allowing you to reuse connections between requests.",
                "+",
                "+For pooling to work, keep alive must be true using {@link io.vertx.core.http.HttpClientOptions#setKeepAlive(boolean)}",
                "+on the options used when configuring the client. The default value is true.",
                "+",
                "+When keep alive is enabled. Vert.x will add a `Connection: Keep-Alive` header to each HTTP/1.0 request sent.",
                "+When keep alive is disabled. Vert.x will add a `Connection: Close` header to each HTTP/1.1 request sent to signal",
                "+that the connection will be closed after completion of the response.",
                "+",
                "+The maximum number of connections to pool *for each server* is configured using {@link io.vertx.core.http.HttpClientOptions#setMaxPoolSize(int)}",
                "+",
                "+When making a request with pooling enabled, Vert.x will create a new connection if there are less than the maximum number of",
                "+connections already created for that server, otherwise it will add the request to a queue.",
                "+",
                "+Keep alive connections will be closed by the client automatically after a timeout. The timeout can be specified",
                "+by the server using the `keep-alive` header:",
                "+",
                "+----",
                "+ keep-alive: timeout=30",
                "+----",
                "+",
                "+You can set the default timeout using {@link io.vertx.core.http.HttpClientOptions#setKeepAliveTimeout(int)} - any",
                "+connections not used within this timeout will be closed. Please note the timeout value is in seconds not milliseconds.",
                "+",
                "+=== HTTP/1.1 pipe-lining",
                "+",
                "+The client also supports pipe-lining of requests on a connection.",
                "+",
                "+Pipe-lining means another request is sent on the same connection before the response from the preceding one has",
                "+returned. Pipe-lining is not appropriate for all requests.",
                "+",
                "+To enable pipe-lining, it must be enabled using {@link io.vertx.core.http.HttpClientOptions#setPipelining(boolean)}.",
                "+By default pipe-lining is disabled.",
                "+",
                "+When pipe-lining is enabled requests will be written to connections without waiting for previous responses to return.",
                "+",
                "+The number of pipe-lined requests over a single connection is limited by {@link io.vertx.core.http.HttpClientOptions#setPipeliningLimit}.",
                "+This option defines the maximum number of http requests sent to the server awaiting for a response. This limit ensures the",
                "+fairness of the distribution of the client requests over the connections to the same server.",
                "+",
                "+=== HTTP/2 multiplexing",
                "+",
                "+HTTP/2 advocates to use a single connection to a server, by default the http client uses a single",
                "+connection for each server, all the streams to the same server are multiplexed over the same connection.",
                "+",
                "+When the clients needs to use more than a single connection and use pooling, the {@link io.vertx.core.http.HttpClientOptions#setHttp2MaxPoolSize(int)}",
                "+shall be used.",
                "+",
                "+When it is desirable to limit the number of multiplexed streams per connection and use a connection",
                "+pool instead of a single connection, {@link io.vertx.core.http.HttpClientOptions#setHttp2MultiplexingLimit(int)}",
                "+can be used.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#useMaxStreams}",
                "+----",
                "+",
                "+The multiplexing limit for a connection is a setting set on the client that limits the number of streams",
                "+of a single connection. The effective value can be even lower if the server sets a lower limit",
                "+with the {@link io.vertx.core.http.Http2Settings#setMaxConcurrentStreams SETTINGS_MAX_CONCURRENT_STREAMS} setting.",
                "+",
                "+HTTP/2 connections will not be closed by the client automatically. To close them you can call {@link io.vertx.core.http.HttpConnection#close()}",
                "+or close the client instance.",
                "+",
                "+Alternatively you can set idle timeout using {@link io.vertx.core.http.HttpClientOptions#setIdleTimeout(int)} - any",
                "+connections not used within this timeout will be closed. Please note the idle timeout value is in seconds not milliseconds.",
                "+",
                "+=== HTTP connections",
                "+",
                "+The {@link io.vertx.core.http.HttpConnection} offers the API for dealing with HTTP connection events, lifecycle",
                "+and settings.",
                "+",
                "+HTTP/2 implements fully the {@link io.vertx.core.http.HttpConnection} API.",
                "+",
                "+HTTP/1.x implements partially the {@link io.vertx.core.http.HttpConnection} API: only the close operation,",
                "+the close handler and exception handler are implemented. This protocol does not provide semantics for",
                "+the other operations.",
                "+",
                "+==== Server connections",
                "+",
                "+The {@link io.vertx.core.http.HttpServerRequest#connection()} method returns the request connection on the server:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example16}",
                "+----",
                "+",
                "+A connection handler can be set on the server to be notified of any incoming connection:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example17}",
                "+----",
                "+",
                "+==== Client connections",
                "+",
                "+The {@link io.vertx.core.http.HttpClientRequest#connection()} method returns the request connection on the client:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example18}",
                "+----",
                "+",
                "+A connection handler can be set on the request to be notified when the connection happens:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example19}",
                "+----",
                "+",
                "+==== Connection settings",
                "+",
                "+The configuration of an HTTP/2 is configured by the {@link io.vertx.core.http.Http2Settings} data object.",
                "+",
                "+Each endpoint must respect the settings sent by the other side of the connection.",
                "+",
                "+When a connection is established, the client and the server exchange initial settings. Initial settings",
                "+are configured by {@link io.vertx.core.http.HttpClientOptions#setInitialSettings} on the client and",
                "+{@link io.vertx.core.http.HttpServerOptions#setInitialSettings} on the server.",
                "+",
                "+The settings can be changed at any time after the connection is established:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example20}",
                "+----",
                "+",
                "+As the remote side should acknowledge on reception of the settings update, it's possible to give a callback",
                "+to be notified of the acknowledgment:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example21}",
                "+----",
                "+",
                "+Conversely the {@link io.vertx.core.http.HttpConnection#remoteSettingsHandler(io.vertx.core.Handler)} is notified",
                "+when the new remote settings are received:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example22}",
                "+----",
                "+",
                "+NOTE: this only applies to the HTTP/2 protocol",
                "+",
                "+==== Connection ping",
                "+",
                "+HTTP/2 connection ping is useful for determining the connection round-trip time or check the connection",
                "+validity: {@link io.vertx.core.http.HttpConnection#ping} sends a {@literal PING} frame to the remote",
                "+endpoint:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example23}",
                "+----",
                "+",
                "+Vert.x will send automatically an acknowledgement when a {@literal PING} frame is received,",
                "+an handler can be set to be notified for each ping received:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example24}",
                "+----",
                "+",
                "+The handler is just notified, the acknowledgement is sent whatsoever. Such feature is aimed for",
                "+implementing  protocols on top of HTTP/2.",
                "+",
                "+NOTE: this only applies to the HTTP/2 protocol",
                "+",
                "+==== Connection shutdown and go away",
                "+",
                "+Calling {@link io.vertx.core.http.HttpConnection#shutdown()} will send a {@literal GOAWAY} frame to the",
                "+remote side of the connection, asking it to stop creating streams: a client will stop doing new requests",
                "+and a server will stop pushing responses. After the {@literal GOAWAY} frame is sent, the connection",
                "+waits some time (30 seconds by default) until all current streams closed and close the connection:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example25}",
                "+----",
                "+",
                "+The {@link io.vertx.core.http.HttpConnection#shutdownHandler} notifies when all streams have been closed, the",
                "+connection is not yet closed.",
                "+",
                "+It's possible to just send a {@literal GOAWAY} frame, the main difference with a shutdown is that",
                "+it will just tell the remote side of the connection to stop creating new streams without scheduling a connection",
                "+close:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example26}",
                "+----",
                "+",
                "+Conversely, it is also possible to be notified when {@literal GOAWAY} are received:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example27}",
                "+----",
                "+",
                "+The {@link io.vertx.core.http.HttpConnection#shutdownHandler} will be called when all current streams",
                "+have been closed and the connection can be closed:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTP2Examples#example28}",
                "+----",
                "+",
                "+This applies also when a {@literal GOAWAY} is received.",
                "+",
                "+NOTE: this only applies to the HTTP/2 protocol",
                "+",
                "+==== Connection close",
                "+",
                "+Connection {@link io.vertx.core.http.HttpConnection#close} closes the connection:",
                "+",
                "+- it closes the socket for HTTP/1.x",
                "+- a shutdown with no delay for HTTP/2, the {@literal GOAWAY} frame will still be sent before the connection is closed. *",
                "+",
                "+The {@link io.vertx.core.http.HttpConnection#closeHandler} notifies when a connection is closed.",
                "+",
                "+=== HttpClient usage",
                "+",
                "+The HttpClient can be used in a Verticle or embedded.",
                "+",
                "+When used in a Verticle, the Verticle *should use its own client instance*.",
                "+",
                "+More generally a client should not be shared between different Vert.x contexts as it can lead to unexpected behavior.",
                "+",
                "+For example a keep-alive connection will call the client handlers on the context of the request that opened the connection, subsequent requests will use",
                "+the same context.",
                "+",
                "+When this happen Vert.x detects it and log a warn:",
                "+",
                "+----",
                "+Reusing a connection with a different context: an HttpClient is probably shared between different Verticles",
                "+----",
                "+",
                "+The HttpClient can be embedded in a non Vert.x thread like a unit test or a plain java `main`: the client handlers",
                "+will be called by different Vert.x threads and contexts, such contexts are created as needed. For production this",
                "+usage is not recommended.",
                "+",
                "+=== Server sharing",
                "+",
                "+When several HTTP servers listen on the same port, vert.x orchestrates the request handling using a",
                "+round-robin strategy.",
                "+",
                "+Let's take a verticle creating a HTTP server such as:",
                "+",
                "+.io.vertx.examples.http.sharing.HttpServerVerticle",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#serversharing(io.vertx.core.Vertx)}",
                "+----",
                "+",
                "+This service is listening on the port 8080. So, when this verticle is instantiated multiple times as with:",
                "+`vertx run io.vertx.examples.http.sharing.HttpServerVerticle -instances 2`, what's happening ? If both",
                "+verticles would bind to the same port, you would receive a socket exception. Fortunately, vert.x is handling",
                "+this case for you. When you deploy another server on the same host and port as an existing server it doesn't",
                "+actually try and create a new server listening on the same host/port. It binds only once to the socket. When",
                "+receiving a request it calls the server handlers following a round robin strategy.",
                "+",
                "+Let's now imagine a client such as:",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#serversharingclient(io.vertx.core.Vertx)}",
                "+----",
                "+",
                "+Vert.x delegates the requests to one of the server sequentially:",
                "+",
                "+[source]",
                "+----",
                "+Hello from i.v.e.h.s.HttpServerVerticle@1",
                "+Hello from i.v.e.h.s.HttpServerVerticle@2",
                "+Hello from i.v.e.h.s.HttpServerVerticle@1",
                "+Hello from i.v.e.h.s.HttpServerVerticle@2",
                "+...",
                "+----",
                "+",
                "+Consequently the servers can scale over available cores while each Vert.x verticle instance remains strictly",
                "+single threaded, and you don't have to do any special tricks like writing load-balancers in order to scale your",
                "+server on your multi-core machine.",
                "+",
                "+=== Using HTTPS with Vert.x",
                "+",
                "+Vert.x http servers and clients can be configured to use HTTPS in exactly the same way as net servers.",
                "+",
                "+Please see <<ssl, configuring net servers to use SSL>> for more information.",
                "+",
                "+SSL can also be enabled/disabled per request with {@link io.vertx.core.http.RequestOptions} or when",
                "+specifying a scheme with {@link io.vertx.core.http.HttpClient#requestAbs(io.vertx.core.http.HttpMethod,java.lang.String)}",
                "+method.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#setSSLPerRequest(io.vertx.core.http.HttpClient)}",
                "+----",
                "+",
                "+The {@link io.vertx.core.http.HttpClientOptions#setSsl(boolean)} setting acts as the default client setting.",
                "+",
                "+The {@link io.vertx.core.http.RequestOptions#setSsl(boolean)} overrides the default client setting",
                "+",
                "+* setting the value to `false` will disable SSL/TLS even if the client is configured to use SSL/TLS",
                "+* setting the value to `true` will enable SSL/TLS  even if the client is configured to not use SSL/TLS, the actual",
                "+client SSL/TLS (such as trust, key/certificate, ciphers, ALPN, ...) will be reused",
                "+",
                "+Likewise {@link io.vertx.core.http.HttpClient#requestAbs(io.vertx.core.http.HttpMethod,java.lang.String)} scheme",
                "+also overrides the default client setting.",
                "+",
                "+==== Server Name Indication (SNI)",
                "+",
                "+Vert.x http servers can be configured to use SNI in exactly the same way as {@linkplain io.vertx.core.net net servers}.",
                "+",
                "+Vert.x http client will present the actual hostname as _server name_ during the TLS handshake.",
                "+",
                "+=== WebSockets",
                "+",
                "+http://en.wikipedia.org/wiki/WebSocket[WebSockets] are a web technology that allows a full duplex socket-like",
                "+connection between HTTP servers and HTTP clients (typically browsers).",
                "+",
                "+Vert.x supports WebSockets on both the client and server-side.",
                "+",
                "+==== WebSockets on the server",
                "+",
                "+There are two ways of handling WebSockets on the server side.",
                "+",
                "+===== WebSocket handler",
                "+",
                "+The first way involves providing a {@link io.vertx.core.http.HttpServer#websocketHandler(io.vertx.core.Handler)}",
                "+on the server instance.",
                "+",
                "+When a WebSocket connection is made to the server, the handler will be called, passing in an instance of",
                "+{@link io.vertx.core.http.ServerWebSocket}.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example51}",
                "+----",
                "+",
                "+You can choose to reject the WebSocket by calling {@link io.vertx.core.http.ServerWebSocket#reject()}.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example52}",
                "+----",
                "+",
                "+===== Upgrading to WebSocket",
                "+",
                "+The second way of handling WebSockets is to handle the HTTP Upgrade request that was sent from the client, and",
                "+call {@link io.vertx.core.http.HttpServerRequest#upgrade()} on the server request.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example53}",
                "+----",
                "+",
                "+===== The server WebSocket",
                "+",
                "+The {@link io.vertx.core.http.ServerWebSocket} instance enables you to retrieve the {@link io.vertx.core.http.ServerWebSocket#headers() headers},",
                "+{@link io.vertx.core.http.ServerWebSocket#path() path}, {@link io.vertx.core.http.ServerWebSocket#query() query} and",
                "+{@link io.vertx.core.http.ServerWebSocket#uri() URI} of the HTTP request of the WebSocket handshake.",
                "+",
                "+==== WebSockets on the client",
                "+",
                "+The Vert.x {@link io.vertx.core.http.HttpClient} supports WebSockets.",
                "+",
                "+You can connect a WebSocket to a server using one of the {@link io.vertx.core.http.HttpClient#websocket} operations and",
                "+providing a handler.",
                "+",
                "+The handler will be called with an instance of {@link io.vertx.core.http.WebSocket} when the connection has been made:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example54}",
                "+----",
                "+",
                "+==== Writing messages to WebSockets",
                "+",
                "+If you wish to write a single WebSocket message to the WebSocket you can do this with",
                "+{@link io.vertx.core.http.WebSocket#writeBinaryMessage(io.vertx.core.buffer.Buffer)} or",
                "+{@link io.vertx.core.http.WebSocket#writeTextMessage(java.lang.String)} :",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example55}",
                "+----",
                "+",
                "+If the WebSocket message is larger than the maximum websocket frame size as configured with",
                "+{@link io.vertx.core.http.HttpClientOptions#setMaxWebsocketFrameSize(int)}",
                "+then Vert.x will split it into multiple WebSocket frames before sending it on the wire.",
                "+",
                "+==== Writing frames to WebSockets",
                "+",
                "+A WebSocket message can be composed of multiple frames. In this case the first frame is either a _binary_ or _text_ frame",
                "+followed by zero or more _continuation_ frames.",
                "+",
                "+The last frame in the message is marked as _final_.",
                "+",
                "+To send a message consisting of multiple frames you create frames using",
                "+{@link io.vertx.core.http.WebSocketFrame#binaryFrame(io.vertx.core.buffer.Buffer,boolean)}",
                "+, {@link io.vertx.core.http.WebSocketFrame#textFrame(java.lang.String,boolean)} or",
                "+{@link io.vertx.core.http.WebSocketFrame#continuationFrame(io.vertx.core.buffer.Buffer,boolean)} and write them",
                "+to the WebSocket using {@link io.vertx.core.http.WebSocket#writeFrame(io.vertx.core.http.WebSocketFrame)}.",
                "+",
                "+Here's an example for binary frames:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example56}",
                "+----",
                "+",
                "+In many cases you just want to send a websocket message that consists of a single final frame, so we provide a couple",
                "+of shortcut methods to do that with {@link io.vertx.core.http.WebSocket#writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)}",
                "+and {@link io.vertx.core.http.WebSocket#writeFinalTextFrame(String)}.",
                "+",
                "+Here's an example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example56_1}",
                "+----",
                "+",
                "+==== Reading frames from WebSockets",
                "+",
                "+To read frames from a WebSocket you use the {@link io.vertx.core.http.WebSocket#frameHandler(io.vertx.core.Handler)}.",
                "+",
                "+The frame handler will be called with instances of {@link io.vertx.core.http.WebSocketFrame} when a frame arrives,",
                "+for example:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example57}",
                "+----",
                "+",
                "+==== Closing WebSockets",
                "+",
                "+Use {@link io.vertx.core.http.WebSocket#close()} to close the WebSocket connection when you have finished with it.",
                "+",
                "+==== Streaming WebSockets",
                "+",
                "+The {@link io.vertx.core.http.WebSocket} instance is also a {@link io.vertx.core.streams.ReadStream} and a",
                "+{@link io.vertx.core.streams.WriteStream} so it can be used with pumps.",
                "+",
                "+When using a WebSocket as a write stream or a read stream it can only be used with WebSockets connections that are",
                "+used with binary frames that are no split over multiple frames.",
                "+",
                "+=== Using a proxy for HTTP/HTTPS connections",
                "+",
                "+The http client supports accessing http/https URLs via a HTTP proxy (e.g. Squid) or _SOCKS4a_ or _SOCKS5_ proxy.",
                "+The CONNECT protocol uses HTTP/1.x but can connect to HTTP/1.x and HTTP/2 servers.",
                "+",
                "+Connecting to h2c (unencrypted HTTP/2 servers) is likely not supported by http proxies since they will support",
                "+HTTP/1.1 only.",
                "+",
                "+The proxy can be configured in the {@link io.vertx.core.http.HttpClientOptions} by setting a",
                "+{@link io.vertx.core.net.ProxyOptions} object containing proxy type, hostname, port and optionally username and password.",
                "+",
                "+Here's an example of using an HTTP proxy:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example58}",
                "+----",
                "+",
                "+When the client connects to an http URL, it connects to the proxy server and provides the full URL in the",
                "+HTTP request (\"GET http://www.somehost.com/path/file.html HTTP/1.1\").",
                "+",
                "+When the client connects to an https URL, it asks the proxy to create a tunnel to the remote host with",
                "+the CONNECT method.",
                "+",
                "+For a SOCKS5 proxy:",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example59}",
                "+----",
                "+",
                "+The DNS resolution is always done on the proxy server, to achieve the functionality of a SOCKS4 client, it is necessary",
                "+to resolve the DNS address locally.",
                "+",
                "+==== Handling of other protocols",
                "+",
                "+The HTTP proxy implementation supports getting ftp:// urls if the proxy supports",
                "+that, which isn't available in non-proxy getAbs requests.",
                "+",
                "+[source,$lang]",
                "+----",
                "+{@link examples.HTTPExamples#example60}",
                "+----",
                "+",
                "+Support for other protocols is not available since java.net.URL does not",
                "+support them (gopher:// for example).",
                "+",
                "+=== Automatic clean-up in verticles",
                "+",
                "+If you're creating http servers and clients from inside verticles, those servers and clients will be automatically closed",
                "+when the verticle is undeployed.",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index b02c5edac..24caa3ecc 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -55,2 +55,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "+    if (json.getValue(\"http2KeepAliveTimeout\") instanceof Number) {",
                "+      obj.setHttp2KeepAliveTimeout(((Number)json.getValue(\"http2KeepAliveTimeout\")).intValue());",
                "+    }",
                "     if (json.getValue(\"http2MaxPoolSize\") instanceof Number) {",
                "@@ -67,2 +70,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "+    if (json.getValue(\"keepAliveTimeout\") instanceof Number) {",
                "+      obj.setKeepAliveTimeout(((Number)json.getValue(\"keepAliveTimeout\")).intValue());",
                "+    }",
                "     if (json.getValue(\"maxChunkSize\") instanceof Number) {",
                "@@ -97,2 +103,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "+    if (json.getValue(\"poolCleanerPeriod\") instanceof Number) {",
                "+      obj.setPoolCleanerPeriod(((Number)json.getValue(\"poolCleanerPeriod\")).intValue());",
                "+    }",
                "     if (json.getValue(\"protocolVersion\") instanceof String) {",
                "@@ -125,2 +134,3 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "+    json.put(\"http2KeepAliveTimeout\", obj.getHttp2KeepAliveTimeout());",
                "     json.put(\"http2MaxPoolSize\", obj.getHttp2MaxPoolSize());",
                "@@ -131,2 +141,3 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"keepAlive\", obj.isKeepAlive());",
                "+    json.put(\"keepAliveTimeout\", obj.getKeepAliveTimeout());",
                "     json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "@@ -141,2 +152,3 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "+    json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "     if (obj.getProtocolVersion() != null) {",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientOptions.java b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "index 7846fe517..0db67b6c4 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "@@ -51,2 +51,7 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * The default keep alive timeout for HTTP/2 connection can send = 60 seconds",
                "+   */",
                "+  public static final int DEFAULT_HTTP2_KEEP_ALIVE_TIMEOUT = 60;",
                "+",
                "   /**",
                "@@ -66,2 +71,7 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * The default keep alive timeout for HTTP/1.1 connection can send = 60 seconds",
                "+   */",
                "+  public static final int DEFAULT_KEEP_ALIVE_TIMEOUT = 60;",
                "+",
                "   /**",
                "@@ -152,2 +162,7 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * Default pool cleaner period = 1000 ms (1 second)",
                "+   */",
                "+  public static final int DEFAULT_POOL_CLEANER_PERIOD = 1000;",
                "+",
                "   private boolean verifyHost = true;",
                "@@ -155,2 +170,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "   private boolean keepAlive;",
                "+  private int keepAliveTimeout;",
                "   private int pipeliningLimit;",
                "@@ -160,2 +176,4 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "   private int http2ConnectionWindowSize;",
                "+  private int http2KeepAliveTimeout;",
                "+  private int poolCleanerPeriod;",
                "@@ -197,2 +215,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     this.keepAlive = other.isKeepAlive();",
                "+    this.keepAliveTimeout = other.getKeepAliveTimeout();",
                "     this.pipelining = other.isPipelining();",
                "@@ -202,2 +221,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     this.http2ConnectionWindowSize = other.http2ConnectionWindowSize;",
                "+    this.http2KeepAliveTimeout = other.getHttp2KeepAliveTimeout();",
                "     this.tryUseCompression = other.isTryUseCompression();",
                "@@ -219,2 +239,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     this.decoderInitialBufferSize = other.getDecoderInitialBufferSize();",
                "+    this.poolCleanerPeriod = other.getPoolCleanerPeriod();",
                "   }",
                "@@ -247,2 +268,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     keepAlive = DEFAULT_KEEP_ALIVE;",
                "+    keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;",
                "     pipelining = DEFAULT_PIPELINING;",
                "@@ -252,2 +274,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     http2ConnectionWindowSize = DEFAULT_HTTP2_CONNECTION_WINDOW_SIZE;",
                "+    http2KeepAliveTimeout = DEFAULT_HTTP2_KEEP_ALIVE_TIMEOUT;",
                "     tryUseCompression = DEFAULT_TRY_USE_COMPRESSION;",
                "@@ -269,2 +292,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     decoderInitialBufferSize = DEFAULT_DECODER_INITIAL_BUFFER_SIZE;",
                "+    poolCleanerPeriod = DEFAULT_POOL_CLEANER_PERIOD;",
                "   }",
                "@@ -530,2 +554,25 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * @return the keep alive timeout value in seconds for HTTP/2 connections",
                "+   */",
                "+  public int getHttp2KeepAliveTimeout() {",
                "+    return http2KeepAliveTimeout;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the keep alive timeout for HTTP/2 connections, in seconds.",
                "+   * <p/>",
                "+   * This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "+   *",
                "+   * @param keepAliveTimeout the timeout, in seconds",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpClientOptions setHttp2KeepAliveTimeout(int keepAliveTimeout) {",
                "+    if (keepAliveTimeout < 0) {",
                "+      throw new IllegalArgumentException(\"HTTP/2 keepAliveTimeout must be >= 0\");",
                "+    }",
                "+    this.http2KeepAliveTimeout = keepAliveTimeout;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "@@ -550,2 +597,25 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * @return the keep alive timeout value in seconds for HTTP/1.x connections",
                "+   */",
                "+  public int getKeepAliveTimeout() {",
                "+    return keepAliveTimeout;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the keep alive timeout for HTTP/1.x, in seconds.",
                "+   * <p/>",
                "+   * This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "+   *",
                "+   * @param keepAliveTimeout the timeout, in seconds",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpClientOptions setKeepAliveTimeout(int keepAliveTimeout) {",
                "+    if (keepAliveTimeout < 0) {",
                "+      throw new IllegalArgumentException(\"keepAliveTimeout must be >= 0\");",
                "+    }",
                "+    this.keepAliveTimeout = keepAliveTimeout;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "@@ -981,2 +1051,21 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * @return the connection pool cleaner period in ms.",
                "+   */",
                "+  public int getPoolCleanerPeriod() {",
                "+    return poolCleanerPeriod;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the connection pool cleaner period in milli seconds, a non positive value disables expiration checks and connections",
                "+   * will remain in the pool until they are closed.",
                "+   *",
                "+   * @param poolCleanerPeriod the pool cleaner period",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpClientOptions setPoolCleanerPeriod(int poolCleanerPeriod) {",
                "+    this.poolCleanerPeriod = poolCleanerPeriod;",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "@@ -1010,2 +1099,5 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     if (decoderInitialBufferSize != that.decoderInitialBufferSize) return false;",
                "+    if (keepAliveTimeout != that.keepAliveTimeout) return false;",
                "+    if (http2KeepAliveTimeout != that.http2KeepAliveTimeout) return false;",
                "+    if (poolCleanerPeriod != that.poolCleanerPeriod) return false;",
                "@@ -1038,2 +1130,5 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     result = 31 * result + decoderInitialBufferSize;",
                "+    result = 31 * result + keepAliveTimeout;",
                "+    result = 31 * result + http2KeepAliveTimeout;",
                "+    result = 31 * result + poolCleanerPeriod;",
                "     return result;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "index 439597b26..203a74190 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "@@ -14,8 +14,4 @@ package io.vertx.core.http.impl;",
                " import io.netty.channel.Channel;",
                "-import io.vertx.core.Handler;",
                "-import io.vertx.core.http.HttpConnection;",
                " import io.vertx.core.http.HttpVersion;",
                " import io.vertx.core.http.impl.pool.Pool;",
                "-import io.vertx.core.http.impl.pool.Waiter;",
                "-import io.vertx.core.impl.ContextInternal;",
                " import io.vertx.core.spi.metrics.HttpClientMetrics;",
                "@@ -24,4 +20,4 @@ import java.util.*;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "-import java.util.function.BiConsumer;",
                "-import java.util.function.BiFunction;",
                "+import java.util.function.Consumer;",
                "+import java.util.function.Function;",
                "@@ -42,2 +38,3 @@ class ConnectionManager {",
                "   private final long maxSize;",
                "+  private long timerID;",
                "@@ -55,2 +52,13 @@ class ConnectionManager {",
                "+  synchronized void start() {",
                "+    long period = client.getOptions().getPoolCleanerPeriod();",
                "+    this.timerID = period > 0 ? client.getVertx().setTimer(period, id -> checkExpired(period)) : -1;",
                "+  }",
                "+",
                "+  private synchronized void checkExpired(long period) {",
                "+    long timestamp = System.currentTimeMillis();",
                "+    endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));",
                "+    timerID = client.getVertx().setTimer(period, id -> checkExpired(period));",
                "+  }",
                "+",
                "   private static final class EndpointKey {",
                "@@ -105,5 +113,4 @@ class ConnectionManager {",
                "   void getConnection(String peerHost, boolean ssl, int port, String host,",
                "-                     Handler<HttpConnection> connectionHandler,",
                "-                     BiFunction<ContextInternal, HttpClientConnection, Boolean> onSuccess,",
                "-                     BiConsumer<ContextInternal, Throwable> onFailure) {",
                "+                     Function<HttpClientConnection, Boolean> onSuccess,",
                "+                     Consumer<Throwable> onFailure) {",
                "     EndpointKey key = new EndpointKey(ssl, port, peerHost, host);",
                "@@ -131,3 +138,5 @@ class ConnectionManager {",
                "       }",
                "-      if (endpoint.pool.getConnection(new Waiter<HttpClientConnection>(client.getVertx().getOrCreateContext()) {",
                "+      if (endpoint.pool.getConnection(client.getVertx().getOrCreateContext(), ar -> {",
                "+        if (ar.succeeded()) {",
                "+          /*",
                "         @Override",
                "@@ -140,4 +149,6 @@ class ConnectionManager {",
                "         }",
                "-        @Override",
                "-        public void handleFailure(ContextInternal ctx, Throwable failure) {",
                "+           */",
                "+",
                "+          HttpClientConnection conn = ar.result();",
                "+",
                "           if (metrics != null) {",
                "@@ -145,6 +156,8 @@ class ConnectionManager {",
                "           }",
                "-          onFailure.accept(ctx, failure);",
                "-        }",
                "-        @Override",
                "-        public boolean handleConnection(ContextInternal ctx, HttpClientConnection conn) throws Exception {",
                "+",
                "+          boolean claimed = onSuccess.apply(conn);",
                "+          if (!claimed) {",
                "+            conn.recycle();",
                "+          }",
                "+        } else {",
                "           if (metrics != null) {",
                "@@ -152,3 +165,3 @@ class ConnectionManager {",
                "           }",
                "-          return onSuccess.apply(ctx, conn);",
                "+          onFailure.accept(ar.cause());",
                "         }",
                "@@ -161,2 +174,8 @@ class ConnectionManager {",
                "   public void close() {",
                "+    synchronized (this) {",
                "+      if (timerID >= 0) {",
                "+        client.getVertx().cancelTimer(timerID);",
                "+        timerID = -1;",
                "+      }",
                "+    }",
                "     endpointMap.clear();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index 63db21afd..f17e29372 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -63,2 +63,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "   private final HttpClientImpl client;",
                "+  private final HttpClientOptions options;",
                "   private final boolean ssl;",
                "@@ -80,2 +81,4 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "   private Buffer pausedChunk;",
                "+  private boolean initialized;",
                "+  private int keepAliveTimeout;",
                "@@ -94,2 +97,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     this.client = client;",
                "+    this.options = client.getOptions();",
                "     this.ssl = ssl;",
                "@@ -100,2 +104,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     this.endpointMetric = endpointMetric;",
                "+    this.keepAliveTimeout = options.getKeepAliveTimeout();",
                "   }",
                "@@ -160,3 +165,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       }",
                "-      if (conn.client.getOptions().isTryUseCompression() && request.headers().get(ACCEPT_ENCODING) == null) {",
                "+      if (conn.options.isTryUseCompression() && request.headers().get(ACCEPT_ENCODING) == null) {",
                "         // if compression should be used but nothing is specified by the user support deflate and gzip.",
                "@@ -164,5 +169,5 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       }",
                "-      if (!conn.client.getOptions().isKeepAlive() && conn.client.getOptions().getProtocolVersion() == io.vertx.core.http.HttpVersion.HTTP_1_1) {",
                "+      if (!conn.options.isKeepAlive() && conn.options.getProtocolVersion() == io.vertx.core.http.HttpVersion.HTTP_1_1) {",
                "         request.headers().set(CONNECTION, CLOSE);",
                "-      } else if (conn.client.getOptions().isKeepAlive() && conn.client.getOptions().getProtocolVersion() == io.vertx.core.http.HttpVersion.HTTP_1_0) {",
                "+      } else if (conn.options.isKeepAlive() && conn.options.getProtocolVersion() == io.vertx.core.http.HttpVersion.HTTP_1_0) {",
                "         request.headers().set(CONNECTION, KEEP_ALIVE);",
                "@@ -340,3 +345,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         String responseConnectionHeader = resp.headers().get(HttpHeaders.Names.CONNECTION);",
                "-        io.vertx.core.http.HttpVersion protocolVersion = conn.client.getOptions().getProtocolVersion();",
                "+        io.vertx.core.http.HttpVersion protocolVersion = conn.options.getProtocolVersion();",
                "         String requestConnectionHeader = request.headers().get(HttpHeaders.Names.CONNECTION);",
                "@@ -351,2 +356,9 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         }",
                "+        String keepAliveHeader = resp.headers().get(HttpHeaderNames.KEEP_ALIVE);",
                "+        if (keepAliveHeader != null) {",
                "+          int timeout = HttpUtils.parseKeepAliveHeaderTimeout(keepAliveHeader);",
                "+          if (timeout != -1) {",
                "+            conn.keepAliveTimeout = timeout;",
                "+          }",
                "+        }",
                "       }",
                "@@ -380,3 +392,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         responseEnded = true;",
                "-        if (!conn.client.getOptions().isKeepAlive()) {",
                "+        if (!conn.options.isKeepAlive()) {",
                "           close = true;",
                "@@ -394,3 +406,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         } else {",
                "-          conn.listener.onRecycle(1, true);",
                "+          conn.recycle();",
                "         }",
                "@@ -489,3 +501,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       handshaker = WebSocketClientHandshakerFactory.newHandshaker(wsuri, version, subProtocols, false,",
                "-                                                                  nettyHeaders, maxWebSocketFrameSize,!client.getOptions().isSendUnmaskedFrames(),false);",
                "+                                                                  nettyHeaders, maxWebSocketFrameSize,!options.isSendUnmaskedFrames(),false);",
                "       ChannelPipeline p = chctx.pipeline();",
                "@@ -594,4 +606,4 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       WebSocketImpl webSocket = new WebSocketImpl(vertx, Http1xClientConnection.this, supportsContinuation,",
                "-                                                  client.getOptions().getMaxWebsocketFrameSize(),",
                "-                                                  client.getOptions().getMaxWebsocketMessageSize());",
                "+                                                  options.getMaxWebsocketFrameSize(),",
                "+                                                  options.getMaxWebsocketMessageSize());",
                "       ws = webSocket;",
                "@@ -742,2 +754,15 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "   }",
                "+",
                "+  @Override",
                "+  public void recycle() {",
                "+    long expiration = keepAliveTimeout == 0 ? 0L : System.currentTimeMillis() + keepAliveTimeout * 1000;",
                "+    listener.onRecycle(expiration);",
                "+  }",
                "+",
                "+  @Override",
                "+  public synchronized boolean checkInitialized() {",
                "+    boolean ret = initialized;",
                "+    initialized = true;",
                "+    return ret;",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "index 63c9f855e..38f83ef0a 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "@@ -44,2 +44,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "   private final HttpClientImpl client;",
                "+  private boolean initialized;",
                "   final HttpClientMetrics metrics;",
                "@@ -60,2 +61,9 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "+  @Override",
                "+  public synchronized boolean checkInitialized() {",
                "+    boolean ret = initialized;",
                "+    initialized = true;",
                "+    return ret;",
                "+  }",
                "+",
                "   @Override",
                "@@ -102,2 +110,5 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "         Http2Connection conn = handler.connection();",
                "+",
                "+",
                "+",
                "         Http2Stream stream = conn.local().createStream(conn.local().incrementAndGetNextStreamId(), false);",
                "@@ -114,2 +125,9 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "+  @Override",
                "+  public void recycle() {",
                "+    int timeout = client.getOptions().getHttp2KeepAliveTimeout();",
                "+    long expired = timeout > 0 ? System.currentTimeMillis() + timeout * 1000 : 0L;",
                "+    listener.onRecycle(expired);",
                "+  }",
                "+",
                "   @Override",
                "@@ -212,3 +230,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "       if (request instanceof HttpClientRequestImpl) {",
                "-        conn.listener.onRecycle(1, false);",
                "+        conn.recycle();",
                "       } /* else {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index bef324a57..05ce9ac03 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -95,3 +95,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "   @Override",
                "-  public void connect(ConnectionListener<HttpClientConnection> listener, ContextInternal context) {",
                "+  public void connect(ConnectionListener<HttpClientConnection> listener, ContextImpl context) {",
                "     try {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java b/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "index 2c443bbb3..3b64e08c6 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "@@ -36,2 +36,6 @@ interface HttpClientConnection extends HttpConnection {",
                "+  boolean checkInitialized();",
                "+",
                "+  void recycle();",
                "+",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index be86f6d67..312f25aff 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -23,3 +23,2 @@ import io.vertx.core.http.HttpClientRequest;",
                " import io.vertx.core.http.HttpClientResponse;",
                "-import io.vertx.core.http.HttpConnection;",
                " import io.vertx.core.http.HttpHeaders;",
                "@@ -52,4 +51,3 @@ import java.util.List;",
                " import java.util.Objects;",
                "-import java.util.function.BiConsumer;",
                "-import java.util.function.BiFunction;",
                "+import java.util.function.Consumer;",
                " import java.util.function.Function;",
                "@@ -163,2 +161,4 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "     proxyType = options.getProxyOptions() != null ? options.getProxyOptions().getType() : null;",
                "+    httpCM.start();",
                "+    websocketCM.start();",
                "   }",
                "@@ -945,9 +945,9 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "   private void getConnectionForWebsocket(boolean ssl,",
                "-                                 int port,",
                "-                                 String host,",
                "-                                 Handler<Http1xClientConnection> handler,",
                "-                                 Handler<Throwable> connectionExceptionHandler,",
                "-                                 ContextImpl context) {",
                "-    websocketCM.getConnection(host, ssl, port, host, null, (ctx, conn) -> {",
                "-      ctx.executeFromIO(() -> {",
                "+                                         int port,",
                "+                                         String host,",
                "+                                         Handler<Http1xClientConnection> handler,",
                "+                                         Handler<Throwable> connectionExceptionHandler) {",
                "+    ContextInternal ctx = vertx.getOrCreateContext();",
                "+    websocketCM.getConnection(host, ssl, port, host, conn -> {",
                "+      conn.getContext().executeFromIO(() -> {",
                "         handler.handle((Http1xClientConnection) conn);",
                "@@ -955,3 +955,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "       return true;",
                "-    }, (ctx, failure) -> {",
                "+    }, (failure) -> {",
                "       ctx.executeFromIO(() -> {",
                "@@ -963,6 +963,5 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "   void getConnectionForRequest(String peerHost, boolean ssl, int port, String host,",
                "-                               Handler<HttpConnection> connectionHandler,",
                "-                               BiFunction<ContextInternal, HttpClientConnection, Boolean> onSuccess,",
                "-                               BiConsumer<ContextInternal, Throwable> onFailure) {",
                "-    httpCM.getConnection(peerHost, ssl, port, host, connectionHandler, onSuccess, onFailure);",
                "+                               Function<HttpClientConnection, Boolean> onSuccess,",
                "+                               Consumer<Throwable> onFailure) {",
                "+    httpCM.getConnection(peerHost, ssl, port, host, onSuccess, onFailure);",
                "   }",
                "@@ -972,3 +971,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "    */",
                "-  VertxInternal getVertx() {",
                "+  public VertxInternal getVertx() {",
                "     return vertx;",
                "@@ -1108,3 +1107,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "           conn.toWebSocket(requestURI, headers, version, subProtocols, options.getMaxWebsocketFrameSize(), wsConnect);",
                "-        }, connectionExceptionHandler, context);",
                "+        }, connectionExceptionHandler);",
                "       }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "index 4f6b32525..e23028eec 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "@@ -26,2 +26,3 @@ import io.vertx.core.http.HttpMethod;",
                " import io.vertx.core.http.HttpVersion;",
                "+import io.vertx.core.impl.ContextImpl;",
                " import io.vertx.core.impl.VertxInternal;",
                "@@ -634,2 +635,6 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "+      // Capture some stuff",
                "+      Handler<HttpConnection> initializer = connectionHandler;",
                "+      ContextImpl connectCtx = vertx.getOrCreateContext();",
                "+",
                "       // We defer actual connection until the first part of body is written or end is called",
                "@@ -637,3 +642,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "       // they can capture any exceptions on connection",
                "-      client.getConnectionForRequest(peerHost, ssl, port, host, connectionHandler, (ctx, conn) -> {",
                "+      client.getConnectionForRequest(peerHost, ssl, port, host, conn -> {",
                "         // No need to synchronize as the thread is the same that set exceptionOccurred to true",
                "@@ -643,3 +648,12 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "         }",
                "-        // checkContext(ctx);",
                "+",
                "+        //",
                "+        ContextImpl ctx = conn.getContext();",
                "+        if (!conn.checkInitialized() && initializer != null) {",
                "+          ctx.executeFromIO(() -> {",
                "+            initializer.handle(conn);",
                "+          });",
                "+        }",
                "+",
                "+        //",
                "         conn.createStream(HttpClientRequestImpl.this, ar -> {",
                "@@ -655,4 +669,4 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "         return true;",
                "-      }, (ctx, failure) -> {",
                "-        ctx.executeFromIO(() -> {",
                "+      }, failure -> {",
                "+        connectCtx.executeFromIO(() -> {",
                "           handleException(failure);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpUtils.java b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "index 6700b5053..b5fbc21ca 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "@@ -24,2 +24,3 @@ import io.netty.handler.codec.http2.Http2Headers;",
                " import io.netty.handler.codec.http2.Http2Settings;",
                "+import io.netty.util.AsciiString;",
                " import io.vertx.core.MultiMap;",
                "@@ -480,2 +481,45 @@ public final class HttpUtils {",
                "   }",
                "+",
                "+  private static final AsciiString TIMEOUT_EQ = AsciiString.of(\"timeout=\");",
                "+",
                "+  public static int parseKeepAliveHeaderTimeout(CharSequence value) {",
                "+    int len = value.length();",
                "+    int pos = 0;",
                "+    while (pos < len) {",
                "+      int idx = AsciiString.indexOf(value, ',', pos);",
                "+      int next;",
                "+      if (idx == -1) {",
                "+        idx = next = len;",
                "+      } else {",
                "+        next = idx + 1;",
                "+      }",
                "+      while (pos < idx && value.charAt(pos) == ' ') {",
                "+        pos++;",
                "+      }",
                "+      int to = idx;",
                "+      while (to > pos && value.charAt(to -1) == ' ') {",
                "+        to--;",
                "+      }",
                "+      if (AsciiString.regionMatches(value, true, pos, TIMEOUT_EQ, 0, TIMEOUT_EQ.length())) {",
                "+        pos += TIMEOUT_EQ.length();",
                "+        if (pos < to) {",
                "+          int ret = 0;",
                "+          while (pos < to) {",
                "+            int ch = value.charAt(pos++);",
                "+            if (ch >= '0' && ch < '9') {",
                "+              ret = ret * 10 + (ch - '0');",
                "+            } else {",
                "+              ret = -1;",
                "+              break;",
                "+            }",
                "+          }",
                "+          if (ret > -1) {",
                "+            return ret;",
                "+          }",
                "+        }",
                "+      }",
                "+      pos = next;",
                "+    }",
                "+    return -1;",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "index 12728a86d..831e628ec 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "@@ -23,3 +23,3 @@ public interface ConnectionListener<C> {",
                "   /**",
                "-   * Callback to signal the connection succeeded and provide all the info requires to manage the connection",
                "+   * Signals the connection succeeded, provide all the info required to manage the connection",
                "    *",
                "@@ -38,3 +38,3 @@ public interface ConnectionListener<C> {",
                "   /**",
                "-   * Callback to signal the connection failed.",
                "+   * Signals the connection failed.",
                "    *",
                "@@ -46,3 +46,3 @@ public interface ConnectionListener<C> {",
                "   /**",
                "-   * Signals the connrection changed to the {@code concurrency} value.",
                "+   * Signals the connection the concurrency changed to the {@code concurrency} value.",
                "    *",
                "@@ -53,11 +53,10 @@ public interface ConnectionListener<C> {",
                "   /**",
                "-   * Signals the connection can recycled, it must not give back more than it borrowed.",
                "+   * Recycles the connection.",
                "    *",
                "-   * @param capacity the capacity to recycle",
                "-   * @param disposable wether the connection can be disposed",
                "+   * @param expirationTimestamp the expiration timestamp or {@code 0L} to expire immediately",
                "    */",
                "-  void onRecycle(int capacity, boolean disposable);",
                "+  void onRecycle(long expirationTimestamp);",
                "   /**",
                "-   * Signals the connection must not be used anymore by the pool.",
                "+   * Discard the connection from the pool, it will now be fully managed by the borrower.",
                "    */",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index 4a4acda8d..c97e67a18 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -14,2 +14,4 @@ package io.vertx.core.http.impl.pool;",
                " import io.netty.channel.Channel;",
                "+import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Future;",
                " import io.vertx.core.Handler;",
                "@@ -51,5 +53,6 @@ import java.util.function.BiConsumer;",
                "  * When a connection is recycled and reaches its full capacity (i.e {@code Holder#concurrency == Holder#capacity},",
                "- * the behavior depends on the {@link ConnectionListener#onRecycle(int, boolean)} event that release this connection.",
                "- * When {@code disposable} is {@code true} the connection is closed, otherwise it is maintained in the pool, letting",
                "- * the borrower define the behavior. HTTP/1 will close the connection and HTTP/2 will maintain it.",
                "+ * the behavior depends on the {@link ConnectionListener#onRecycle(long)} event that releases this connection.",
                "+ * When {@code expirationTimestamp} is {@code 0L} the connection is closed, otherwise it is maintained in the pool,",
                "+ * letting the borrower define the expiration timestamp. The value is set according to the HTTP client connection",
                "+ * keep alive timeout.",
                "  *",
                "@@ -74,10 +77,15 @@ public class Pool<C> {",
                "-    boolean removed;     // Removed",
                "-    C connection;        // The connection instance",
                "-    long concurrency;    // How many times we can borrow from the connection",
                "-    long capacity;       // How many times the connection is currently borrowed (0 <= capacity <= concurrency)",
                "-    Channel channel;     // Transport channel",
                "-    ContextImpl context; // Context associated with the connection",
                "-    long weight;         // The weight that participates in the pool weight",
                "+    boolean removed;          // Removed",
                "+    C connection;             // The connection instance",
                "+    long concurrency;         // How many times we can borrow from the connection",
                "+    long capacity;            // How many times the connection is currently borrowed (0 <= capacity <= concurrency)",
                "+    Channel channel;          // Transport channel",
                "+    ContextImpl context;  // Context associated with the connection",
                "+    long weight;              // The weight that participates in the pool weight",
                "+    long expirationTimestamp; // The expiration timestamp when (concurrency == capacity) otherwise -1L",
                "+    @Override",
                "+    public String toString() {",
                "+      return \"Holder[removed=\" + removed + \",capacity=\" + capacity + \",concurrency=\" + concurrency + \",expirationTimestamp=\" + expirationTimestamp + \"]\";",
                "+    }",
                "   }",
                "@@ -138,6 +146,7 @@ public class Pool<C> {",
                "    *",
                "-   * @param waiter the waiter",
                "+   * @param context the context",
                "+   * @param handler the handler",
                "    * @return whether the pool can satisfy the request",
                "    */",
                "-  public synchronized boolean getConnection(Waiter<C> waiter) {",
                "+  public synchronized boolean getConnection(ContextImpl context, Handler<AsyncResult<C>> handler) {",
                "     if (closed) {",
                "@@ -145,2 +154,3 @@ public class Pool<C> {",
                "     }",
                "+    Waiter<C> waiter = new Waiter<>(context, handler);",
                "     int size = waitersQueue.size();",
                "@@ -153,3 +163,3 @@ public class Pool<C> {",
                "       waiter.context.nettyEventLoop().execute(() -> {",
                "-        waiter.handleFailure(waiter.context, new ConnectionPoolTooBusyException(\"Connection pool reached max wait queue size of \" + queueMaxSize));",
                "+        waiter.handler.handle(Future.failedFuture(new ConnectionPoolTooBusyException(\"Connection pool reached max wait queue size of \" + queueMaxSize)));",
                "       });",
                "@@ -170,2 +180,3 @@ public class Pool<C> {",
                "       if (--conn.capacity == 0) {",
                "+        conn.expirationTimestamp = -1L;",
                "         available.poll();",
                "@@ -174,12 +185,6 @@ public class Pool<C> {",
                "       ctx.nettyEventLoop().execute(() -> {",
                "-        boolean handled = deliverToWaiter(conn, waiter);",
                "         synchronized (Pool.this) {",
                "           waitersCount--;",
                "-          if (!handled) {",
                "-            synchronized (Pool.this) {",
                "-              recycleConnection(conn, 1,false);",
                "-              checkPending();",
                "-            }",
                "-          }",
                "         }",
                "+        waiter.handler.handle(Future.succeededFuture(conn.connection));",
                "       });",
                "@@ -197,2 +202,23 @@ public class Pool<C> {",
                "+  /**",
                "+   * Close all unused connections with a {@code timestamp} greater than expiration timestamp.",
                "+   *",
                "+   * @param timestamp the timestamp value",
                "+   * @return the number of closed connections when calling this method",
                "+   */",
                "+  public synchronized int closeIdle(long timestamp) {",
                "+    int removed = 0;",
                "+    if (waitersQueue.isEmpty() && available.size() > 0) {",
                "+      List<Holder<C>> copy = new ArrayList<>(available);",
                "+      for (Holder<C> conn : copy) {",
                "+        if (conn.capacity == conn.concurrency && conn.expirationTimestamp <= timestamp) {",
                "+          removed++;",
                "+          closeConnection(conn);",
                "+          connector.close(conn.connection);",
                "+        }",
                "+      }",
                "+    }",
                "+    return removed;",
                "+  }",
                "+",
                "   private void checkPending() {",
                "@@ -211,3 +237,2 @@ public class Pool<C> {",
                "     ConnectionListener<C> listener = new ConnectionListener<C>() {",
                "-      @Override",
                "       public void onConnectSuccess(C conn, long concurrency, Channel channel, ContextImpl context, long actualWeight) {",
                "@@ -218,3 +243,2 @@ public class Pool<C> {",
                "         // Init connection - state might change (i.e init could close the connection)",
                "-        waiter.initConnection(context, conn);",
                "         synchronized (Pool.this) {",
                "@@ -231,7 +255,4 @@ public class Pool<C> {",
                "         }",
                "-        boolean consumed = deliverToWaiter(holder, waiter);",
                "+        waiter.handler.handle(Future.succeededFuture(holder.connection));",
                "         synchronized (Pool.this) {",
                "-          if (!consumed) {",
                "-            recycleConnection(holder, 1,false);",
                "-          }",
                "           checkPending();",
                "@@ -241,3 +262,3 @@ public class Pool<C> {",
                "       public void onConnectFailure(ContextImpl context, Throwable err) {",
                "-        waiter.handleFailure(context, err);",
                "+        waiter.handler.handle(Future.failedFuture(err));",
                "         synchronized (Pool.this) {",
                "@@ -270,5 +291,5 @@ public class Pool<C> {",
                "       @Override",
                "-      public void onRecycle(int capacity, boolean disposable) {",
                "-        if (capacity < 0) {",
                "-          throw new IllegalArgumentException(\"Illegal capacity\");",
                "+      public void onRecycle(long expirationTimestamp) {",
                "+        if (expirationTimestamp < 0L) {",
                "+          throw new IllegalArgumentException(\"Invalid TTL\");",
                "         }",
                "@@ -278,3 +299,3 @@ public class Pool<C> {",
                "           }",
                "-          recycle(holder, capacity, disposable);",
                "+          recycle(holder, 1, expirationTimestamp);",
                "         }",
                "@@ -294,4 +315,4 @@ public class Pool<C> {",
                "-  private synchronized void recycle(Holder<C> holder, int capacity, boolean closeable) {",
                "-    recycleConnection(holder, capacity, closeable);",
                "+  private synchronized void recycle(Holder<C> holder, int capacity, long timestamp) {",
                "+    recycleConnection(holder, capacity, timestamp);",
                "     checkPending();",
                "@@ -316,18 +337,5 @@ public class Pool<C> {",
                "-  /**",
                "-   * Should not be called under the pool lock.",
                "-   */",
                "-  private boolean deliverToWaiter(Holder<C> conn, Waiter<C> waiter) {",
                "-    try {",
                "-      return waiter.handleConnection(conn.context, conn.connection);",
                "-    } catch (Exception e) {",
                "-      // Handle this case gracefully",
                "-      e.printStackTrace();",
                "-      return true;",
                "-    }",
                "-  }",
                "-",
                "   // These methods assume to be called under synchronization",
                "-  private void recycleConnection(Holder<C> conn, int c, boolean closeable) {",
                "+  private void recycleConnection(Holder<C> conn, int c, long timestamp) {",
                "     long newCapacity = conn.capacity + c;",
                "@@ -337,4 +345,5 @@ public class Pool<C> {",
                "     }",
                "-    if (closeable && newCapacity == conn.concurrency && waitersQueue.isEmpty()) {",
                "+    if (timestamp == 0L && newCapacity == conn.concurrency && waitersQueue.isEmpty()) {",
                "       available.remove(conn);",
                "+      conn.expirationTimestamp = -1L;",
                "       conn.capacity = 0;",
                "@@ -345,2 +354,3 @@ public class Pool<C> {",
                "       }",
                "+      conn.expirationTimestamp = timestamp;",
                "       conn.capacity = newCapacity;",
                "@@ -357,2 +367,3 @@ public class Pool<C> {",
                "     holder.capacity = concurrency;",
                "+    holder.expirationTimestamp = -1L;",
                "     connectionAdded.accept(holder.channel, holder.connection);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Waiter.java b/src/main/java/io/vertx/core/http/impl/pool/Waiter.java",
                "index cfa1eb944..867e0e13c 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Waiter.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Waiter.java",
                "@@ -14,3 +14,4 @@ package io.vertx.core.http.impl.pool;",
                " import io.vertx.core.impl.ContextImpl;",
                "-import io.vertx.core.impl.ContextInternal;",
                "+import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Handler;",
                "@@ -19,35 +20,11 @@ import io.vertx.core.impl.ContextInternal;",
                "  */",
                "-public abstract class Waiter<C> {",
                "+final class Waiter<C> {",
                "   public final ContextImpl context;",
                "+  public final Handler<AsyncResult<C>> handler;",
                "-  protected Waiter(ContextImpl context) {",
                "+  Waiter(ContextImpl context, Handler<AsyncResult<C>> handler) {",
                "     this.context = context;",
                "+    this.handler = handler;",
                "   }",
                "-",
                "-  /**",
                "-   * Handle connection failure, this callback is on a Netty even loop.",
                "-   *",
                "-   * @param ctx the context used to create the connection",
                "-   * @param failure the failure",
                "-   */",
                "-  public abstract void handleFailure(ContextInternal ctx, Throwable failure);",
                "-",
                "-  /**",
                "-   * Init connection, this callback is on a Netty event loop.",
                "-   *",
                "-   * @param ctx the context used to create the connection",
                "-   * @param conn the connection",
                "-   */",
                "-  public abstract void initConnection(ContextInternal ctx, C conn);",
                "-",
                "-  /**",
                "-   * Handle connection success, , this callback is on a Netty event loop.",
                "-   *",
                "-   * @param ctx the context used to create the connection",
                "-   * @param conn the connection",
                "-   * @return wether the waiter uses the connection",
                "-   */",
                "-  public abstract boolean handleConnection(ContextInternal ctx, C conn) throws Exception;",
                "-",
                " }"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/asciidoc/http.adoc",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "src/main/java/io/vertx/core/http/impl/pool/Waiter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2326": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352 Keep connections open on the pool based on timeout. vert-x3/vertx-web#870 Add support for max lifetime on HttpClient pool connections #1977"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/pool/Waiter.java, src/main/java/io/vertx/core/http/impl/ConnectionManager.java, src/main/java/io/vertx/core/http/impl/HttpClientConnection.java, src/main/java/io/vertx/core/http/impl/pool/Pool.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java, src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java, src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java, src/main/java/io/vertx/core/http/impl/HttpUtils.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java, src/main/java/io/vertx/core/http/HttpClientOptions.java, src/main/java/io/vertx/core/http/impl/HttpClientImpl.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2326",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5cb7da62c4510b7b531a9cfa13a266c3f993b9b5",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530428277,
            "hunks": 26,
            "message": "Regen",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index e2a9c9e08..d26c1fae6 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.DeploymentOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.DeploymentOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.DeploymentOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index fb0ba8bcd..fb225784e 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.VertxOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.VertxOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.VertxOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index e447ef56e..422aaaa9f 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.cli.Argument}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.cli.Argument} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.cli.Argument} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index 573c377d7..2ab608306 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.cli.Option}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.cli.Option} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.cli.Option} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index 0655bd233..82004bce3 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.datagram.DatagramSocketOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.datagram.DatagramSocketOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.datagram.DatagramSocketOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index 65b0b3322..d9efb409f 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.dns.AddressResolverOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.dns.AddressResolverOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.dns.AddressResolverOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index 1ef0c4b7e..bf6c6d407 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.dns.DnsClientOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.dns.DnsClientOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.dns.DnsClientOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index 9381082e5..00d1f836a 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.eventbus.EventBusOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.eventbus.EventBusOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.eventbus.EventBusOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index fd2e58d1e..139adbdb3 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.file.CopyOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.file.CopyOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.file.CopyOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index a4d130c45..1532daae3 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.file.OpenOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.file.OpenOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.file.OpenOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index 8759fe0ef..510e1ebc7 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.GoAway}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.GoAway} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.GoAway} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 1b969013b..2c7d7a854 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.Http2Settings}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.Http2Settings} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.Http2Settings} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index 74bf05c01..06a0feb17 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.HttpClientOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.HttpClientOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.HttpClientOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index b4bb830bb..4f32f4a9a 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.http.HttpServerOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.http.HttpServerOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.http.HttpServerOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index 4e8e3ecb1..f50ecd3a6 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.metrics.MetricsOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.metrics.MetricsOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.metrics.MetricsOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index 143ac4f2e..da5b170aa 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.ClientOptionsBase}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.ClientOptionsBase} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.ClientOptionsBase} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "index 20c302d34..e92abf810 100644",
                "--- a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.JksOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.JksOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.JksOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index a199d4d73..df2b42066 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.NetClientOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.NetClientOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.NetClientOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index 57b495235..f246511cd 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.NetServerOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.NetServerOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.NetServerOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index 5ae451029..f08ff4a6c 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.NetworkOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.NetworkOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.NetworkOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index 564a56f8f..49201afd5 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.OpenSSLEngineOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.OpenSSLEngineOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.OpenSSLEngineOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index 0731fb547..1919319f9 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.PemKeyCertOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.PemKeyCertOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.PemKeyCertOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index d588e65ec..b05ee9b59 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.PemTrustOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.PemTrustOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.PemTrustOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "index 1305209b1..129bd228d 100644",
                "--- a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.PfxOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.PfxOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.PfxOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index 07f4d5c06..6e9f99e31 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.ProxyOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.ProxyOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.ProxyOptions} original class using Vert.x codegen.",
                "  */",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index ed8a913c4..edd727911 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -7,3 +7,3 @@ import io.vertx.core.json.JsonArray;",
                "  * Converter for {@link io.vertx.core.net.TCPSSLOptions}.",
                "- * NOTE: This class has been automatically generated from the {@link \"io.vertx.core.net.TCPSSLOptions} original class using Vert.x codegen.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.net.TCPSSLOptions} original class using Vert.x codegen.",
                "  */"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "40b663fdbd3dd39d377d3539b095fd68294526fc"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/net/PfxOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/JksOptionsConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "03747cca2bb8d70442346012bf3664bea5f6f46c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523186899,
            "hunks": 1,
            "message": "Report HTTP client pool internal failures as connect errors - fixes #2414",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index e057d74f1..bef324a57 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -94,3 +94,12 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "-  public void connect(",
                "+  @Override",
                "+  public void connect(ConnectionListener<HttpClientConnection> listener, ContextInternal context) {",
                "+    try {",
                "+      doConnect(listener, context);",
                "+    } catch(Exception e) {",
                "+      listener.onConnectFailure(context, e);",
                "+    }",
                "+  }",
                "+",
                "+  private void doConnect(",
                "     ConnectionListener<HttpClientConnection> listener,"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2414": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2414",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66cd8a4ce1373001417bcf38d6a5665da8cb637d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523261623,
            "hunks": 3,
            "message": "Don't route connection write promise failures in the pipeline - fixes #2373",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "index 5563ffa05..aad5cfcc5 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "@@ -46,2 +46,3 @@ public abstract class ConnectionBase {",
                "+  private final VoidChannelPromise voidPromise;",
                "   protected final VertxInternal vertx;",
                "@@ -60,2 +61,3 @@ public abstract class ConnectionBase {",
                "     this.context = context;",
                "+    this.voidPromise = new VoidChannelPromise(chctx.channel(), false);",
                "   }",
                "@@ -121,3 +123,3 @@ public abstract class ConnectionBase {",
                "   public void writeToChannel(Object obj) {",
                "-    writeToChannel(obj, chctx.voidPromise());",
                "+    writeToChannel(obj, voidPromise);",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/net/impl/ConnectionBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2373": "Web connection closed with endless stacktrace vert-x3/issues#345 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2373",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3ed3fea53990e31bdf63762c0bd67f1a0a5d6dc3",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533044441,
            "hunks": 14,
            "message": "EventBus local only delivery When deploying verticles across the cluster, it can be useful to force delivery to a local consumer. For example, you might deploy audit verticles on all nodes, with local consumers only. Forcing local delivery avoids paying the price of a cluster manager lookup. This fixes #1764 Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/DeliveryOptions.java b/src/main/java/io/vertx/core/eventbus/DeliveryOptions.java",
                "index a4e2be3f3..bc41a9af8 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/DeliveryOptions.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/DeliveryOptions.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "  *",
                "@@ -39,2 +39,7 @@ public class DeliveryOptions {",
                "+  /**",
                "+   * Whether the message should be delivered to local consumers only by default = false.",
                "+   */",
                "+  public static final boolean DEFAULT_LOCAL_ONLY = false;",
                "+",
                "   private long timeout = DEFAULT_TIMEOUT;",
                "@@ -42,2 +47,3 @@ public class DeliveryOptions {",
                "   private MultiMap headers;",
                "+  private boolean localOnly = DEFAULT_LOCAL_ONLY;",
                "@@ -58,2 +64,3 @@ public class DeliveryOptions {",
                "     this.headers = other.getHeaders();",
                "+    this.localOnly = other.localOnly;",
                "   }",
                "@@ -78,2 +85,3 @@ public class DeliveryOptions {",
                "     }",
                "+    this.localOnly = json.getBoolean(\"localOnly\", DEFAULT_LOCAL_ONLY);",
                "   }",
                "@@ -94,2 +102,3 @@ public class DeliveryOptions {",
                "     }",
                "+    json.put(\"localOnly\", localOnly);",
                "     return json;",
                "@@ -190,2 +199,23 @@ public class DeliveryOptions {",
                "   }",
                "+",
                "+  /**",
                "+   * @return whether the message should be delivered to local consumers only",
                "+   */",
                "+  public boolean isLocalOnly() {",
                "+    return localOnly;",
                "+  }",
                "+",
                "+  /**",
                "+   * Whether a message should be delivered to local consumers only. Defaults to {@code false}.",
                "+   *",
                "+   * <p>",
                "+   * <strong>This option is effective in clustered mode only and does not apply to reply messages</strong>.",
                "+   *",
                "+   * @param localOnly {@code true} to deliver to local consumers only, {@code false} otherwise",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public DeliveryOptions setLocalOnly(boolean localOnly) {",
                "+    this.localOnly = localOnly;",
                "+    return this;",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "index dc8500274..d55178f6f 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "  *",
                "@@ -13,9 +13,3 @@ package io.vertx.core.eventbus.impl.clustered;",
                "-import io.vertx.core.AsyncResult;",
                "-import io.vertx.core.Context;",
                "-import io.vertx.core.Future;",
                "-import io.vertx.core.Handler;",
                "-import io.vertx.core.MultiMap;",
                "-import io.vertx.core.Vertx;",
                "-import io.vertx.core.VertxOptions;",
                "+import io.vertx.core.*;",
                " import io.vertx.core.buffer.Buffer;",
                "@@ -33,12 +27,3 @@ import io.vertx.core.logging.Logger;",
                " import io.vertx.core.logging.LoggerFactory;",
                "-import io.vertx.core.net.JksOptions;",
                "-import io.vertx.core.net.KeyCertOptions;",
                "-import io.vertx.core.net.NetServer;",
                "-import io.vertx.core.net.NetServerOptions;",
                "-import io.vertx.core.net.NetSocket;",
                "-import io.vertx.core.net.PemKeyCertOptions;",
                "-import io.vertx.core.net.PemTrustOptions;",
                "-import io.vertx.core.net.PfxOptions;",
                "-import io.vertx.core.net.TCPSSLOptions;",
                "-import io.vertx.core.net.TrustOptions;",
                "+import io.vertx.core.net.*;",
                " import io.vertx.core.net.impl.ServerID;",
                "@@ -233,25 +218,30 @@ public class ClusteredEventBus extends EventBusImpl {",
                "   protected <T> void sendOrPub(SendContextImpl<T> sendContext) {",
                "-    String address = sendContext.message.address();",
                "-    Handler<AsyncResult<ChoosableIterable<ClusterNodeInfo>>> resultHandler = asyncResult -> {",
                "-      if (asyncResult.succeeded()) {",
                "-        ChoosableIterable<ClusterNodeInfo> serverIDs = asyncResult.result();",
                "-        if (serverIDs != null && !serverIDs.isEmpty()) {",
                "-          sendToSubs(serverIDs, sendContext);",
                "-        } else {",
                "-          if (metrics != null) {",
                "-            metrics.messageSent(address, !sendContext.message.isSend(), true, false);",
                "-          }",
                "-          deliverMessageLocally(sendContext);",
                "-        }",
                "-      } else {",
                "-        log.error(\"Failed to send message\", asyncResult.cause());",
                "+    if (sendContext.options.isLocalOnly()) {",
                "+      if (metrics != null) {",
                "+        metrics.messageSent(sendContext.message.address(), !sendContext.message.isSend(), true, false);",
                "       }",
                "-    };",
                "-    if (Vertx.currentContext() == null) {",
                "+      deliverMessageLocally(sendContext);",
                "+    } else if (Vertx.currentContext() == null) {",
                "       // Guarantees the order when there is no current context",
                "       sendNoContext.runOnContext(v -> {",
                "-        subs.get(address, resultHandler);",
                "+        subs.get(sendContext.message.address(), ar -> onSubsReceived(ar, sendContext));",
                "       });",
                "     } else {",
                "-      subs.get(address, resultHandler);",
                "+      subs.get(sendContext.message.address(), ar -> onSubsReceived(ar, sendContext));",
                "+    }",
                "+  }",
                "+",
                "+  private <T> void onSubsReceived(AsyncResult<ChoosableIterable<ClusterNodeInfo>> asyncResult, SendContextImpl<T> sendContext) {",
                "+    if (asyncResult.succeeded()) {",
                "+      ChoosableIterable<ClusterNodeInfo> serverIDs = asyncResult.result();",
                "+      if (serverIDs != null && !serverIDs.isEmpty()) {",
                "+        sendToSubs(serverIDs, sendContext);",
                "+      } else {",
                "+        if (metrics != null) {",
                "+          metrics.messageSent(sendContext.message.address(), !sendContext.message.isSend(), true, false);",
                "+        }",
                "+        deliverMessageLocally(sendContext);",
                "+      }",
                "+    } else {",
                "+      log.error(\"Failed to send message\", asyncResult.cause());",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/DeliveryOptions.java",
                "src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1764": "EventBus local only delivery #2568 localCosumer 100x slower than consumer in Clustered mode #2617"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/eventbus/DeliveryOptions.java, src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1764",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "240ad4aa6c09b1e2db31b848a72f43d6129a1c88",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530691904,
            "hunks": 25,
            "message": "Avoid using reflection in the transports so substrateVM can build native images without having to manually whilelist classes Signed-off-by: Paulo Lopes <paulo@mlopes.net>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index f189f9cd5..3773d72b3 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -131,3 +131,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     bootstrap.group(context.nettyEventLoop());",
                "-    bootstrap.channel(client.getVertx().transport().channelType(false));",
                "+    bootstrap.channelFactory(client.getVertx().transport().channelType(false));",
                "diff --git a/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java b/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "index d7d74c756..ca6a3c099 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "@@ -68,3 +68,3 @@ public class AsyncResolveConnectHelper {",
                "     AsyncResolveConnectHelper asyncResolveConnectHelper = new AsyncResolveConnectHelper();",
                "-    bootstrap.channel(vertx.transport().serverChannelType(socketAddress.path() != null));",
                "+    bootstrap.channelFactory(vertx.transport().serverChannelType(socketAddress.path() != null));",
                "     if (socketAddress.path() != null) {",
                "diff --git a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "index a62e6310b..f045a4dba 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "@@ -177,3 +177,3 @@ public class NetClientImpl implements MetricsProvider, NetClient {",
                "     bootstrap.group(context.nettyEventLoop());",
                "-    bootstrap.channel(vertx.transport().channelType(remoteAddress.path() != null));",
                "+    bootstrap.channelFactory(vertx.transport().channelType(remoteAddress.path() != null));",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java b/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "index c029ff7af..ae43b8b95 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "@@ -15,6 +15,3 @@ import io.netty.bootstrap.Bootstrap;",
                " import io.netty.bootstrap.ServerBootstrap;",
                "-import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelOption;",
                "-import io.netty.channel.EventLoopGroup;",
                "-import io.netty.channel.ServerChannel;",
                "+import io.netty.channel.*;",
                " import io.netty.channel.epoll.Epoll;",
                "@@ -110,7 +107,7 @@ class EpollTransport extends Transport {",
                "   @Override",
                "-  public Class<? extends Channel> channelType(boolean domain) {",
                "+  public ChannelFactory<? extends Channel> channelType(boolean domain) {",
                "     if (domain) {",
                "-      return EpollDomainSocketChannel.class;",
                "+      return EpollDomainSocketChannel::new;",
                "     } else {",
                "-      return EpollSocketChannel.class;",
                "+      return EpollSocketChannel::new;",
                "     }",
                "@@ -118,7 +115,7 @@ class EpollTransport extends Transport {",
                "-  public Class<? extends ServerChannel> serverChannelType(boolean domain) {",
                "+  public ChannelFactory<? extends ServerChannel> serverChannelType(boolean domain) {",
                "     if (domain) {",
                "-      return EpollServerDomainSocketChannel.class;",
                "+      return EpollServerDomainSocketChannel::new;",
                "     }",
                "-    return EpollServerSocketChannel.class;",
                "+    return EpollServerSocketChannel::new;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "index dec702cd1..69793cde7 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "@@ -14,9 +14,5 @@ package io.vertx.core.net.impl.transport;",
                " import io.netty.bootstrap.ServerBootstrap;",
                "-import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelOption;",
                "-import io.netty.channel.EventLoopGroup;",
                "-import io.netty.channel.ServerChannel;",
                "+import io.netty.channel.*;",
                " import io.netty.channel.epoll.EpollChannelOption;",
                " import io.netty.channel.kqueue.KQueue;",
                "-import io.netty.channel.kqueue.KQueueChannelOption;",
                " import io.netty.channel.kqueue.KQueueDatagramChannel;",
                "@@ -29,3 +25,2 @@ import io.netty.channel.socket.DatagramChannel;",
                " import io.netty.channel.socket.InternetProtocolFamily;",
                "-import io.netty.channel.socket.SocketChannel;",
                " import io.netty.channel.unix.DomainSocketAddress;",
                "@@ -86,7 +81,7 @@ class KQueueTransport extends Transport {",
                "   @Override",
                "-  public Class<? extends Channel> channelType(boolean domain) {",
                "+  public ChannelFactory<? extends Channel> channelType(boolean domain) {",
                "     if (domain) {",
                "-      return KQueueDomainSocketChannel.class;",
                "+      return KQueueDomainSocketChannel::new;",
                "     } else {",
                "-      return KQueueSocketChannel.class;",
                "+      return KQueueSocketChannel::new;",
                "     }",
                "@@ -95,7 +90,7 @@ class KQueueTransport extends Transport {",
                "   @Override",
                "-  public Class<? extends ServerChannel> serverChannelType(boolean domain) {",
                "+  public ChannelFactory<? extends ServerChannel> serverChannelType(boolean domain) {",
                "     if (domain) {",
                "-      return KQueueServerDomainSocketChannel.class;",
                "+      return KQueueServerDomainSocketChannel::new;",
                "     } else {",
                "-      return KQueueServerSocketChannel.class;",
                "+      return KQueueServerSocketChannel::new;",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/Transport.java b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "index 22f6e48f1..d67054761 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "@@ -15,7 +15,3 @@ import io.netty.bootstrap.Bootstrap;",
                " import io.netty.bootstrap.ServerBootstrap;",
                "-import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelOption;",
                "-import io.netty.channel.EventLoopGroup;",
                "-import io.netty.channel.FixedRecvByteBufAllocator;",
                "-import io.netty.channel.ServerChannel;",
                "+import io.netty.channel.*;",
                " import io.netty.channel.nio.NioEventLoopGroup;",
                "@@ -36,3 +32,2 @@ import java.net.SocketException;",
                " import java.util.concurrent.ThreadFactory;",
                "-import java.util.function.BiConsumer;",
                "@@ -153,3 +148,3 @@ public class Transport {",
                "    */",
                "-  public Class<? extends Channel> channelType(boolean domain) {",
                "+  public ChannelFactory<? extends Channel> channelType(boolean domain) {",
                "     if (domain) {",
                "@@ -157,3 +152,3 @@ public class Transport {",
                "     }",
                "-    return NioSocketChannel.class;",
                "+    return NioSocketChannel::new;",
                "   }",
                "@@ -164,3 +159,3 @@ public class Transport {",
                "    */",
                "-  public Class<? extends ServerChannel> serverChannelType(boolean domain) {",
                "+  public ChannelFactory<? extends ServerChannel> serverChannelType(boolean domain) {",
                "     if (domain) {",
                "@@ -168,3 +163,3 @@ public class Transport {",
                "     }",
                "-    return NioServerSocketChannel.class;",
                "+    return NioServerSocketChannel::new;",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "src/main/java/io/vertx/core/net/impl/transport/Transport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a4d661b58bb1d05eb4d54fe77dfa4f5649527cc9"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java, src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java, src/main/java/io/vertx/core/net/impl/NetClientImpl.java, src/main/java/io/vertx/core/net/impl/transport/Transport.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java, src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fd35c839aa6f83e68c246d6ec0c41b00b4e43fda",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523399505,
            "hunks": 8,
            "message": "HttpClient pool should use a LIFO policy instead of a FIFO policy - fixes #2415 Signed-off-by: Michael Pogrebinsky <smichpog2@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "index 7807a29f3..6facf6f13 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "@@ -130,3 +130,4 @@ class ConnectionManager {",
                "           connectionMap::put,",
                "-          connectionMap::remove);",
                "+          connectionMap::remove,",
                "+          false);",
                "         return new Endpoint(pool, metric);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index b1e85e7d9..21a26bed9 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -154,2 +154,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "     websocketCM = new ConnectionManager(this, metrics, HttpVersion.HTTP_1_1, maxWeight, options.getMaxWaitQueueSize());",
                "+",
                "     httpCM = new ConnectionManager(this, metrics, options.getProtocolVersion(), maxWeight, options.getMaxWaitQueueSize());",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index c97e67a18..840780650 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -91,2 +91,3 @@ public class Pool<C> {",
                "   }",
                "+",
                "   private static final Logger log = LoggerFactory.getLogger(Pool.class);",
                "@@ -102,2 +103,3 @@ public class Pool<C> {",
                "   private final Deque<Holder<C>> available;                         // Available connections",
                "+  private final boolean fifo;                                       // Recycling policy",
                "@@ -110,2 +112,3 @@ public class Pool<C> {",
                "+",
                "   public Pool(ConnectionProvider<C> connector,",
                "@@ -116,3 +119,4 @@ public class Pool<C> {",
                "               BiConsumer<Channel, C> connectionAdded,",
                "-              BiConsumer<Channel, C> connectionRemoved) {",
                "+              BiConsumer<Channel, C> connectionRemoved,",
                "+              boolean fifo) {",
                "     this.maxWeight = maxWeight;",
                "@@ -125,2 +129,3 @@ public class Pool<C> {",
                "     this.connectionRemoved = connectionRemoved;",
                "+    this.fifo = fifo;",
                "   }",
                "@@ -352,3 +357,7 @@ public class Pool<C> {",
                "       if (conn.capacity == 0) {",
                "-        available.add(conn);",
                "+        if (fifo) {",
                "+          available.addLast(conn);",
                "+        } else {",
                "+          available.addFirst(conn);",
                "+        }",
                "       }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2415": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/pool/Pool.java, src/main/java/io/vertx/core/http/impl/ConnectionManager.java, src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2415",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3e48179d516c25a7f945a355ef4ca53e08d46b5a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523647057,
            "hunks": 2,
            "message": "HTTP client requests should always prefix request URI with / for absolute queries - fixes #2416 Signed-off-by: hradecek <ivohradek@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index 21a26bed9..c5157667f 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -493,2 +493,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "     int port = url.getPort();",
                "+    String relativeUri = url.getPath().isEmpty() ? \"/\" + url.getFile() : url.getFile();",
                "     String protocol = url.getProtocol();",
                "@@ -512,3 +513,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "     // if we do not know the protocol, the port still may be -1, we will handle that below",
                "-    return createRequest(method, protocol, url.getHost(), port, ssl, url.getFile(), null);",
                "+    return createRequest(method, protocol, url.getHost(), port, ssl, relativeUri, null);",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2416": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2416",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55f4a66f6199141c2c1f619fda89ce439c8f3594",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533243757,
            "hunks": 45,
            "message": "Add FileSystemOptions and use in FileResolver (#2561) * Add FileSystemOptions and use in FileResolver Signed-off-by: Mark Arbogast <mark.t.arbogast@gmail.com> * Add null checks and deprecate old methods in VertxOptions Signed-off-by: Mark Arbogast <mark.t.arbogast@gmail.com> * Use booleans instead of options in FileResolver Signed-off-by: Mark Arbogast <mark.t.arbogast@gmail.com> * Update documentation to reference FileSystemOptions Signed-off-by: Mark Arbogast <mark.t.arbogast@gmail.com> * Updated 2017 to 2018 in FileSystemOptions copyright Signed-off-by: Mark Arbogast <mark.t.arbogast@gmail.com> * Let null FileSystemOptions fail test directly Signed-off-by: Mark Arbogast <mark.t.arbogast@gmail.com>",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index 0e2d11c2b..2495eec6b 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -572,2 +572,20 @@ Set whether Netty pooled buffers are enabled",
                "+[[FileSystemOptions]]",
                "+== FileSystemOptions",
                "+",
                "+++++",
                "+ Vert.x file system base configuration, this class can be extended by provider implementations to configure",
                "+ those specific implementations.",
                "+",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[classPathResolvingEnabled]]`@classPathResolvingEnabled`|`Boolean`|-",
                "+|[[fileResolverCachingEnabled]]`@fileResolverCachingEnabled`|`Boolean`|-",
                "+|===",
                "+",
                " [[GoAway]]",
                "@@ -1962,3 +1980,8 @@ Set the number of event loop threads to be used by the Vert.x instance.",
                " |[[fileResolverCachingEnabled]]`@fileResolverCachingEnabled`|`Boolean`|+++",
                "-Set wether the Vert.x file resolver uses caching for classpath resources.",
                "+Set whether the Vert.x file resolver uses caching for classpath resources.",
                "+",
                "+ Deprecated. Use FileSystemOptions instead.",
                "++++",
                "+|[[fileSystemOptions]]`@fileSystemOptions`|`link:dataobjects.html#FileSystemOptions[FileSystemOptions]`|+++",
                "+Set the file system options",
                " +++",
                "diff --git a/src/main/asciidoc/filesystem.adoc b/src/main/asciidoc/filesystem.adoc",
                "index 0e4c65e1b..2fdcf12c8 100644",
                "--- a/src/main/asciidoc/filesystem.adoc",
                "+++ b/src/main/asciidoc/filesystem.adoc",
                "@@ -144,3 +144,3 @@ system).",
                "-This caching behaviour can be set on the {@link io.vertx.core.VertxOptions#setFileResolverCachingEnabled(boolean)}",
                "+This caching behaviour can be set on the {@link io.vertx.core.file.FileSystemOptions#setFileResolverCachingEnabled(boolean)}",
                " option. The default value of this option is `true` unless the system property `vertx.disableFileCaching` is",
                "@@ -151,8 +151,11 @@ property `vertx.cacheDirBase`.",
                "-The whole classpath resolving feature can be disabled by setting the system",
                "+The whole classpath resolving feature can be disabled system-wide by setting the system",
                " property `vertx.disableFileCPResolving` to `true`.",
                "-NOTE: these system properties are evaluated once when the the `io.vertx.core.impl.FileResolver` class is loaded, so",
                "+NOTE: these system properties are evaluated once when the the `io.vertx.core.file.FileSystemOptions` class is loaded, so",
                " these properties should be set before loading this class or as a JVM system property when launching it.",
                "+If you want to disable classpath resolving for a particular application but keep it enabled by default system-wide,",
                "+you can do so via the {@link io.vertx.core.file.FileSystemOptions#setClassPathResolvingEnabled(boolean)} option.",
                "+",
                " ==== Closing an AsyncFile",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 8fe26cb3a..833f42065 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -81,2 +81,7 @@ import java.time.format.DateTimeFormatter;",
                "           break;",
                "+        case \"fileSystemOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setFileSystemOptions(new io.vertx.core.file.FileSystemOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"haEnabled\":",
                "@@ -178,2 +183,5 @@ import java.time.format.DateTimeFormatter;",
                "     json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "+    if (obj.getFileSystemOptions() != null) {",
                "+      json.put(\"fileSystemOptions\", obj.getFileSystemOptions().toJson());",
                "+    }",
                "     json.put(\"haEnabled\", obj.isHAEnabled());",
                "diff --git a/src/main/generated/io/vertx/core/file/FileSystemOptionsConverter.java b/src/main/generated/io/vertx/core/file/FileSystemOptionsConverter.java",
                "new file mode 100644",
                "index 000000000..63fd2ca72",
                "--- /dev/null",
                "+++ b/src/main/generated/io/vertx/core/file/FileSystemOptionsConverter.java",
                "@@ -0,0 +1,39 @@",
                "+package io.vertx.core.file;",
                "+",
                "+import io.vertx.core.json.JsonObject;",
                "+import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "+",
                "+/**",
                "+ * Converter for {@link io.vertx.core.file.FileSystemOptions}.",
                "+ * NOTE: This class has been automatically generated from the {@link io.vertx.core.file.FileSystemOptions} original class using Vert.x codegen.",
                "+ */",
                "+ class FileSystemOptionsConverter {",
                "+",
                "+   static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, FileSystemOptions obj) {",
                "+    for (java.util.Map.Entry<String, Object> member : json) {",
                "+      switch (member.getKey()) {",
                "+        case \"classPathResolvingEnabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setClassPathResolvingEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"fileResolverCachingEnabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setFileResolverCachingEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+   static void toJson(FileSystemOptions obj, JsonObject json) {",
                "+    toJson(obj, json.getMap());",
                "+  }",
                "+",
                "+   static void toJson(FileSystemOptions obj, java.util.Map<String, Object> json) {",
                "+    json.put(\"classPathResolvingEnabled\", obj.isClassPathResolvingEnabled());",
                "+    json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "+  }",
                "+}",
                "diff --git a/src/main/java/io/vertx/core/VertxOptions.java b/src/main/java/io/vertx/core/VertxOptions.java",
                "index 062726e67..13cb52f10 100644",
                "--- a/src/main/java/io/vertx/core/VertxOptions.java",
                "+++ b/src/main/java/io/vertx/core/VertxOptions.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "  *",
                "@@ -16,2 +16,3 @@ import io.vertx.core.dns.AddressResolverOptions;",
                " import io.vertx.core.eventbus.EventBusOptions;",
                "+import io.vertx.core.file.FileSystemOptions;",
                " import io.vertx.core.impl.cpu.CpuCoreSensor;",
                "@@ -24,3 +25,3 @@ import java.util.concurrent.TimeUnit;",
                "-import static io.vertx.core.file.impl.FileResolver.DISABLE_FILE_CACHING_PROP_NAME;",
                "+import static io.vertx.core.file.FileSystemOptions.DEFAULT_FILE_CACHING_ENABLED;",
                "@@ -129,7 +130,2 @@ public class VertxOptions {",
                "-  /**",
                "-   * The default value for file resolver caching enabled = the value of the system property \"vertx.disableFileCaching\" or true",
                "-   */",
                "-  public static final boolean DEFAULT_FILE_CACHING_ENABLED = !Boolean.getBoolean(DISABLE_FILE_CACHING_PROP_NAME);",
                "-",
                "   /**",
                "@@ -162,2 +158,3 @@ public class VertxOptions {",
                "   private MetricsOptions metricsOptions = new MetricsOptions();",
                "+  private FileSystemOptions fileSystemOptions = new FileSystemOptions();",
                "   private long warningExceptionTime = DEFAULT_WARNING_EXCEPTION_TIME;",
                "@@ -165,3 +162,2 @@ public class VertxOptions {",
                "   private AddressResolverOptions addressResolverOptions = new AddressResolverOptions();",
                "-  private boolean fileResolverCachingEnabled = DEFAULT_FILE_CACHING_ENABLED;",
                "   private boolean preferNativeTransport = DEFAULT_PREFER_NATIVE_TRANSPORT;",
                "@@ -195,2 +191,3 @@ public class VertxOptions {",
                "     this.metricsOptions = other.getMetricsOptions() != null ? new MetricsOptions(other.getMetricsOptions()) : null;",
                "+    this.fileSystemOptions = other.getFileSystemOptions() != null ? new FileSystemOptions(other.getFileSystemOptions()) : null;",
                "     this.warningExceptionTime = other.warningExceptionTime;",
                "@@ -198,3 +195,2 @@ public class VertxOptions {",
                "     this.addressResolverOptions = other.addressResolverOptions != null ? new AddressResolverOptions() : null;",
                "-    this.fileResolverCachingEnabled = other.fileResolverCachingEnabled;",
                "     this.maxEventLoopExecuteTimeUnit = other.maxEventLoopExecuteTimeUnit;",
                "@@ -629,2 +625,9 @@ public class VertxOptions {",
                "+  /**",
                "+   * @return the file system options",
                "+   */",
                "+  public FileSystemOptions getFileSystemOptions() {",
                "+    return fileSystemOptions;",
                "+  }",
                "+",
                "   /**",
                "@@ -640,2 +643,13 @@ public class VertxOptions {",
                "+  /**",
                "+   * Set the file system options",
                "+   *",
                "+   * @param fileSystemOptions the options",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setFileSystemOptions(FileSystemOptions fileSystemOptions) {",
                "+    this.fileSystemOptions = fileSystemOptions;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "@@ -704,6 +718,13 @@ public class VertxOptions {",
                "   /**",
                "-   * @return wether the file resolver uses caching",
                "+   *",
                "+   * Deprecated. Use FileSystemOptions instead.",
                "+   *",
                "+   * @return whether the file resolver uses caching",
                "    */",
                "+  @Deprecated",
                "   public boolean isFileResolverCachingEnabled() {",
                "-    return fileResolverCachingEnabled;",
                "+    if (fileSystemOptions == null) {",
                "+      return DEFAULT_FILE_CACHING_ENABLED;",
                "+    }",
                "+    return fileSystemOptions.isFileResolverCachingEnabled();",
                "   }",
                "@@ -711,3 +732,5 @@ public class VertxOptions {",
                "   /**",
                "-   * Set wether the Vert.x file resolver uses caching for classpath resources.",
                "+   * Set whether the Vert.x file resolver uses caching for classpath resources.",
                "+   *",
                "+   * Deprecated. Use FileSystemOptions instead.",
                "    *",
                "@@ -716,4 +739,8 @@ public class VertxOptions {",
                "    */",
                "+  @Deprecated",
                "   public VertxOptions setFileResolverCachingEnabled(boolean fileResolverCachingEnabled) {",
                "-    this.fileResolverCachingEnabled = fileResolverCachingEnabled;",
                "+    if (fileSystemOptions == null) {",
                "+      fileSystemOptions = new FileSystemOptions();",
                "+    }",
                "+    this.fileSystemOptions.setFileResolverCachingEnabled(fileResolverCachingEnabled);",
                "     return this;",
                "@@ -838,4 +865,6 @@ public class VertxOptions {",
                "       return false;",
                "-    if (fileResolverCachingEnabled != that.fileResolverCachingEnabled) return false;",
                "     if (preferNativeTransport != that.preferNativeTransport) return false;",
                "+    if (fileSystemOptions != null ? !fileSystemOptions.equals(that.fileSystemOptions) : that.fileSystemOptions != null) {",
                "+      return false;",
                "+    }",
                "     return !(metricsOptions != null ? !metricsOptions.equals(that.metricsOptions) : that.metricsOptions != null);",
                "@@ -853,3 +882,2 @@ public class VertxOptions {",
                "     result = 31 * result + (haEnabled ? 1 : 0);",
                "-    result = 31 * result + (fileResolverCachingEnabled ? 1 : 0);",
                "     result = 31 * result + (preferNativeTransport ? 1 : 0);",
                "@@ -858,2 +886,3 @@ public class VertxOptions {",
                "     result = 31 * result + (metricsOptions != null ? metricsOptions.hashCode() : 0);",
                "+    result = 31 * result + (fileSystemOptions != null ? fileSystemOptions.hashCode() : 0);",
                "     result = 31 * result + (eventBusOptions != null ? eventBusOptions.hashCode() : 0);",
                "@@ -882,3 +911,2 @@ public class VertxOptions {",
                "         \", haEnabled=\" + haEnabled +",
                "-        \", fileCachingEnabled=\" + fileResolverCachingEnabled +",
                "         \", preferNativeTransport=\" + preferNativeTransport +",
                "@@ -887,2 +915,3 @@ public class VertxOptions {",
                "         \", metrics=\" + metricsOptions +",
                "+        \", fileSystemOptions=\" + fileSystemOptions +",
                "         \", addressResolver=\" + addressResolverOptions.toJson() +",
                "diff --git a/src/main/java/io/vertx/core/file/FileSystemOptions.java b/src/main/java/io/vertx/core/file/FileSystemOptions.java",
                "new file mode 100644",
                "index 000000000..5026cbf45",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/file/FileSystemOptions.java",
                "@@ -0,0 +1,117 @@",
                "+",
                "+/*",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+",
                "+package io.vertx.core.file;",
                "+",
                "+import io.vertx.codegen.annotations.DataObject;",
                "+import io.vertx.core.json.JsonObject;",
                "+",
                "+import static io.vertx.core.file.impl.FileResolver.DISABLE_CP_RESOLVING_PROP_NAME;",
                "+import static io.vertx.core.file.impl.FileResolver.DISABLE_FILE_CACHING_PROP_NAME;",
                "+",
                "+/**",
                "+ * Vert.x file system base configuration, this class can be extended by provider implementations to configure",
                "+ * those specific implementations.",
                "+ *",
                "+ */",
                "+@DataObject(generateConverter = true, publicConverter = false)",
                "+public class FileSystemOptions {",
                "+  public static final boolean DEFAULT_FILE_CACHING_ENABLED = !Boolean.getBoolean(DISABLE_FILE_CACHING_PROP_NAME);",
                "+  public static final boolean DEFAULT_CLASS_PATH_RESOLVING_ENABLED = !Boolean.getBoolean(DISABLE_CP_RESOLVING_PROP_NAME);",
                "+",
                "+  private boolean classPathResolvingEnabled = DEFAULT_CLASS_PATH_RESOLVING_ENABLED;",
                "+  private boolean fileResolverCachingEnabled = DEFAULT_FILE_CACHING_ENABLED;",
                "+",
                "+  /**",
                "+   * Default constructor",
                "+   */",
                "+  public FileSystemOptions() {",
                "+  }",
                "+",
                "+  /**",
                "+   * Copy constructor",
                "+   *",
                "+   * @param other The other {@link FileSystemOptions} to copy when creating this",
                "+   */",
                "+  public FileSystemOptions(FileSystemOptions other) {",
                "+    this.classPathResolvingEnabled = other.isClassPathResolvingEnabled();",
                "+    this.fileResolverCachingEnabled = other.isFileResolverCachingEnabled();",
                "+  }",
                "+",
                "+  /**",
                "+   * Creates a new instance of {@link FileSystemOptions} from the JSON object. This JSOn object has (generally)",
                "+   * been generated using {@link #toJson()}.",
                "+   *",
                "+   * @param json the json object",
                "+   */",
                "+  public FileSystemOptions(JsonObject json) {",
                "+    this();",
                "+",
                "+    FileSystemOptionsConverter.fromJson(json, this);",
                "+  }",
                "+",
                "+  /**",
                "+   * Builds a JSON object representing the current {@link FileSystemOptions}.",
                "+   *",
                "+   * @return the JSON representation",
                "+   */",
                "+  public JsonObject toJson() {",
                "+    JsonObject json = new JsonObject();",
                "+    FileSystemOptionsConverter.toJson(this, json);",
                "+    return json;",
                "+  }",
                "+",
                "+  public boolean isClassPathResolvingEnabled() {",
                "+    return this.classPathResolvingEnabled;",
                "+  }",
                "+",
                "+  public boolean isFileResolverCachingEnabled() {",
                "+    return this.fileResolverCachingEnabled;",
                "+  }",
                "+",
                "+  public FileSystemOptions setClassPathResolvingEnabled(boolean classPathResolvingEnabled) {",
                "+    this.classPathResolvingEnabled = classPathResolvingEnabled;",
                "+    return this;",
                "+  }",
                "+",
                "+  public FileSystemOptions setFileResolverCachingEnabled(boolean fileResolverCachingEnabled) {",
                "+    this.fileResolverCachingEnabled = fileResolverCachingEnabled;",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean equals(Object o) {",
                "+    if (this == o) return true;",
                "+    if (o == null || getClass() != o.getClass()) return false;",
                "+",
                "+    FileSystemOptions that = (FileSystemOptions) o;",
                "+",
                "+    if (classPathResolvingEnabled != that.isClassPathResolvingEnabled()) return false;",
                "+    return fileResolverCachingEnabled == that.isFileResolverCachingEnabled();",
                "+  }",
                "+",
                "+  @Override",
                "+  public int hashCode() {",
                "+    int result = (classPathResolvingEnabled ? 1 : 0);",
                "+    result += (fileResolverCachingEnabled ? 1 : 0);",
                "+    return 31 * result;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String toString() {",
                "+    return \"FileSystemOptions{\" +",
                "+    \"classPathResolvingEnabled=\" + classPathResolvingEnabled +",
                "+    \", fileResolverCachingEnabled=\" + fileResolverCachingEnabled +",
                "+    '}';",
                "+  }",
                "+",
                "+}",
                "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "index 747839ea7..9f9b217d4 100644",
                "--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.file.impl;",
                " import io.vertx.core.VertxException;",
                "+import io.vertx.core.file.FileSystemOptions;",
                " import io.vertx.core.VertxOptions;",
                "@@ -52,4 +53,5 @@ public class FileResolver {",
                "   public static final String DISABLE_CP_RESOLVING_PROP_NAME = \"vertx.disableFileCPResolving\";",
                "-  public static final String CACHE_DIR_BASE_PROP_NAME = \"vertx.cacheDirBase\";",
                "+",
                "+  public static final String CACHE_DIR_BASE_PROP_NAME = \"vertx.cacheDirBase\";",
                "   private static final String DEFAULT_CACHE_DIR_BASE = \".vertx\";",
                "@@ -57,3 +59,2 @@ public class FileResolver {",
                "   private static final boolean NON_UNIX_FILE_SEP = !FILE_SEP.equals(\"/\");",
                "-  private static final boolean ENABLE_CP_RESOLVING = !Boolean.getBoolean(DISABLE_CP_RESOLVING_PROP_NAME);",
                "   private static final String CACHE_DIR_BASE = System.getProperty(CACHE_DIR_BASE_PROP_NAME, DEFAULT_CACHE_DIR_BASE);",
                "@@ -66,5 +67,6 @@ public class FileResolver {",
                "   private final boolean enableCaching;",
                "+  private final boolean enableCpResolving;",
                "   public FileResolver() {",
                "-    this(VertxOptions.DEFAULT_FILE_CACHING_ENABLED);",
                "+    this(new FileSystemOptions());",
                "   }",
                "@@ -72,3 +74,8 @@ public class FileResolver {",
                "   public FileResolver(boolean enableCaching) {",
                "-    this.enableCaching = enableCaching;",
                "+    this(new FileSystemOptions().setFileResolverCachingEnabled(enableCaching));",
                "+  }",
                "+",
                "+  public FileResolver(FileSystemOptions fileSystemOptions) {",
                "+    this.enableCaching = fileSystemOptions.isFileResolverCachingEnabled();",
                "+    this.enableCpResolving = fileSystemOptions.isClassPathResolvingEnabled();",
                "     String cwdOverride = System.getProperty(\"vertx.cwd\");",
                "@@ -79,3 +86,3 @@ public class FileResolver {",
                "     }",
                "-    if (ENABLE_CP_RESOLVING) {",
                "+    if (this.enableCpResolving) {",
                "       setupCacheDir();",
                "@@ -106,3 +113,3 @@ public class FileResolver {",
                "     }",
                "-    if (!ENABLE_CP_RESOLVING) {",
                "+    if (!this.enableCpResolving) {",
                "       return file;",
                "@@ -115,3 +122,3 @@ public class FileResolver {",
                "         File cacheFile = new File(cacheDir, fileName);",
                "-        if (enableCaching && cacheFile.exists()) {",
                "+        if (this.enableCaching && cacheFile.exists()) {",
                "           return cacheFile;",
                "@@ -175,3 +182,3 @@ public class FileResolver {",
                "       try {",
                "-        if (enableCaching) {",
                "+        if (this.enableCaching) {",
                "           Files.copy(resource.toPath(), cacheFile.toPath());",
                "@@ -237,3 +244,3 @@ public class FileResolver {",
                "             try (InputStream is = zip.getInputStream(entry)) {",
                "-              if (enableCaching) {",
                "+              if (this.enableCaching) {",
                "                 Files.copy(is, file.toPath());",
                "@@ -284,3 +291,3 @@ public class FileResolver {",
                "         try (InputStream is = url.openStream()) {",
                "-          if (enableCaching) {",
                "+          if (this.enableCaching) {",
                "             Files.copy(is, file.toPath());",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index e23fb8415..c02f282c0 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -188,3 +188,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-    this.fileResolver = new FileResolver(options.isFileResolverCachingEnabled());",
                "+    this.fileResolver = new FileResolver(options.getFileSystemOptions());",
                "     this.addressResolverOptions = options.getAddressResolverOptions();"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/asciidoc/filesystem.adoc",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/FileSystemOptionsConverter.java",
                "src/main/java/io/vertx/core/VertxOptions.java",
                "src/main/java/io/vertx/core/file/FileSystemOptions.java",
                "src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2561": "Add file class path resolving option to VertxOptions #2554 Use VertxOptions to configure class path resolving #2550"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/file/FileSystemOptionsConverter.java, src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/java/io/vertx/core/file/FileSystemOptions.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/java/io/vertx/core/VertxOptions.java, src/main/java/io/vertx/core/file/impl/FileResolver.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2561",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d26e725ab6844abda394d85e7af257ef29fc8017",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530692993,
            "hunks": 10,
            "message": "Updates based on code review: * added a comment why we look at the class loader of `Object` * renamed internal method name to reflect it's new behavior Signed-off-by: Paulo Lopes <paulo@mlopes.net>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "index 2f5a98246..747839ea7 100644",
                "--- a/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "@@ -304,2 +304,6 @@ public class FileResolver {",
                "     }",
                "+    // when running on substratevm (graal) the access to class loaders",
                "+    // is very limited and might be only available from compile time",
                "+    // known classes. (Object is always known, so we do a final attempt",
                "+    // to get it here).",
                "     if (cl == null) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index 3773d72b3..7277efb9d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -131,3 +131,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     bootstrap.group(context.nettyEventLoop());",
                "-    bootstrap.channelFactory(client.getVertx().transport().channelType(false));",
                "+    bootstrap.channelFactory(client.getVertx().transport().channelFactory(false));",
                "diff --git a/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java b/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "index ca6a3c099..6ec25cafb 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "@@ -68,3 +68,3 @@ public class AsyncResolveConnectHelper {",
                "     AsyncResolveConnectHelper asyncResolveConnectHelper = new AsyncResolveConnectHelper();",
                "-    bootstrap.channelFactory(vertx.transport().serverChannelType(socketAddress.path() != null));",
                "+    bootstrap.channelFactory(vertx.transport().serverChannelFactory(socketAddress.path() != null));",
                "     if (socketAddress.path() != null) {",
                "diff --git a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "index f045a4dba..14121c372 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "@@ -177,3 +177,3 @@ public class NetClientImpl implements MetricsProvider, NetClient {",
                "     bootstrap.group(context.nettyEventLoop());",
                "-    bootstrap.channelFactory(vertx.transport().channelType(remoteAddress.path() != null));",
                "+    bootstrap.channelFactory(vertx.transport().channelFactory(remoteAddress.path() != null));",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java b/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "index ae43b8b95..5e3f3a170 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "@@ -107,3 +107,3 @@ class EpollTransport extends Transport {",
                "   @Override",
                "-  public ChannelFactory<? extends Channel> channelType(boolean domain) {",
                "+  public ChannelFactory<? extends Channel> channelFactory(boolean domain) {",
                "     if (domain) {",
                "@@ -115,3 +115,3 @@ class EpollTransport extends Transport {",
                "-  public ChannelFactory<? extends ServerChannel> serverChannelType(boolean domain) {",
                "+  public ChannelFactory<? extends ServerChannel> serverChannelFactory(boolean domain) {",
                "     if (domain) {",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "index 69793cde7..e63fc67ae 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "@@ -81,3 +81,3 @@ class KQueueTransport extends Transport {",
                "   @Override",
                "-  public ChannelFactory<? extends Channel> channelType(boolean domain) {",
                "+  public ChannelFactory<? extends Channel> channelFactory(boolean domain) {",
                "     if (domain) {",
                "@@ -90,3 +90,3 @@ class KQueueTransport extends Transport {",
                "   @Override",
                "-  public ChannelFactory<? extends ServerChannel> serverChannelType(boolean domain) {",
                "+  public ChannelFactory<? extends ServerChannel> serverChannelFactory(boolean domain) {",
                "     if (domain) {",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/Transport.java b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "index d67054761..fdb78e8a4 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "@@ -148,3 +148,3 @@ public class Transport {",
                "    */",
                "-  public ChannelFactory<? extends Channel> channelType(boolean domain) {",
                "+  public ChannelFactory<? extends Channel> channelFactory(boolean domain) {",
                "     if (domain) {",
                "@@ -159,3 +159,3 @@ public class Transport {",
                "    */",
                "-  public ChannelFactory<? extends ServerChannel> serverChannelType(boolean domain) {",
                "+  public ChannelFactory<? extends ServerChannel> serverChannelFactory(boolean domain) {",
                "     if (domain) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java",
                "src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "src/main/java/io/vertx/core/net/impl/transport/Transport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5556c0586ccd57885d6b3605ec865a23c8e63bec"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/AsyncResolveConnectHelper.java, src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java, src/main/java/io/vertx/core/net/impl/NetClientImpl.java, src/main/java/io/vertx/core/net/impl/transport/Transport.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java, src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java, src/main/java/io/vertx/core/file/impl/FileResolver.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9a3872a3dded7dd75086b00234f9bc49ede11c9a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1522598756,
            "hunks": 233,
            "message": "HTTP/2 via HTTP/1.1 connection upgrade does not respect the protocol - fixes #2362",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "index 203a74190..7807a29f3 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "@@ -14,2 +14,5 @@ package io.vertx.core.http.impl;",
                " import io.netty.channel.Channel;",
                "+import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Future;",
                "+import io.vertx.core.Handler;",
                " import io.vertx.core.http.HttpVersion;",
                "@@ -112,5 +115,3 @@ class ConnectionManager {",
                "-  void getConnection(String peerHost, boolean ssl, int port, String host,",
                "-                     Function<HttpClientConnection, Boolean> onSuccess,",
                "-                     Consumer<Throwable> onFailure) {",
                "+  void getConnection(String peerHost, boolean ssl, int port, String host, Handler<AsyncResult<HttpClientConnection>> handler) {",
                "     EndpointKey key = new EndpointKey(ssl, port, peerHost, host);",
                "@@ -138,2 +139,3 @@ class ConnectionManager {",
                "       }",
                "+",
                "       if (endpoint.pool.getConnection(client.getVertx().getOrCreateContext(), ar -> {",
                "@@ -157,6 +159,3 @@ class ConnectionManager {",
                "-          boolean claimed = onSuccess.apply(conn);",
                "-          if (!claimed) {",
                "-            conn.recycle();",
                "-          }",
                "+          handler.handle(Future.succeededFuture(conn));",
                "         } else {",
                "@@ -165,3 +164,3 @@ class ConnectionManager {",
                "           }",
                "-          onFailure.accept(ar.cause());",
                "+          handler.handle(Future.failedFuture(ar.cause()));",
                "         }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index f17e29372..7dbe65720 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -65,2 +65,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "   private final boolean ssl;",
                "+  private final String peerHost;",
                "   private final String host;",
                "@@ -90,2 +91,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "                          boolean ssl,",
                "+                         String peerHost,",
                "                          String host,",
                "@@ -99,2 +101,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     this.ssl = ssl;",
                "+    this.peerHost = peerHost;",
                "     this.host = host;",
                "@@ -107,7 +110,15 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "+  Object endpointMetric() {",
                "+    return endpointMetric;",
                "+  }",
                "+",
                "+  ConnectionListener<HttpClientConnection> listener() {",
                "+    return listener;",
                "+  }",
                "+",
                "   private static class StreamImpl implements HttpClientStream {",
                "-    private final Http1xClientConnection conn;",
                "-    private final Handler<AsyncResult<HttpClientStream>> handler;",
                "-    private final HttpClientRequestImpl request;",
                "+    protected final Http1xClientConnection conn;",
                "+    protected final Handler<AsyncResult<HttpClientStream>> handler;",
                "+    protected HttpClientRequestImpl request;",
                "     private HttpClientResponseImpl response;",
                "@@ -119,4 +130,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-    StreamImpl(Http1xClientConnection conn, HttpClientRequestImpl request, Handler<AsyncResult<HttpClientStream>> handler) {",
                "-      this.request = request;",
                "+    StreamImpl(Http1xClientConnection conn, Handler<AsyncResult<HttpClientStream>> handler) {",
                "       this.conn = conn;",
                "@@ -125,2 +135,12 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "+    @Override",
                "+    public void reportBytesWritten(long numberOfBytes) {",
                "+      conn.reportBytesWritten(numberOfBytes);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void reportBytesRead(long numberOfBytes) {",
                "+      conn.reportBytesRead(numberOfBytes);",
                "+    }",
                "+",
                "     @Override",
                "@@ -176,10 +196,17 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked) {",
                "-      HttpRequest request = createRequest(conn.version, method, rawMethod, uri, headers);",
                "-      prepareHeaders(request, hostHeader, chunked);",
                "-      conn.writeToChannel(request);",
                "+    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf buf, boolean end) {",
                "+      writeHead(conn.version, method, rawMethod, uri, headers, hostHeader, chunked, buf, end);",
                "     }",
                "-    public void writeHeadWithContent(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf buf, boolean end) {",
                "-      HttpRequest request = createRequest(conn.version, method, rawMethod, uri, headers);",
                "+    protected void writeHead(",
                "+      HttpVersion version,",
                "+      HttpMethod method,",
                "+      String rawMethod,",
                "+      String uri,",
                "+      MultiMap headers,",
                "+      String hostHeader,",
                "+      boolean chunked,",
                "+      ByteBuf buf,",
                "+      boolean end) {",
                "+      HttpRequest request = createRequest(version, method, rawMethod, uri, headers);",
                "       prepareHeaders(request, hostHeader, chunked);",
                "@@ -187,9 +214,12 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         if (buf != null) {",
                "-          conn.writeToChannel(new AssembledFullHttpRequest(request, buf));",
                "+          request = new AssembledFullHttpRequest(request, buf);",
                "         } else {",
                "-          conn.writeToChannel(new AssembledFullHttpRequest(request));",
                "+          request = new AssembledFullHttpRequest(request);",
                "         }",
                "       } else {",
                "-        conn.writeToChannel(new AssembledHttpRequest(request, buf));",
                "+        if (buf != null) {",
                "+          request = new AssembledHttpRequest(request, buf);",
                "+        }",
                "       }",
                "+      conn.writeToChannel(request);",
                "     }",
                "@@ -224,7 +254,2 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-    @Override",
                "-    public void checkDrained() {",
                "-      conn.handleInterestedOpsChanged();",
                "-    }",
                "-",
                "     @Override",
                "@@ -254,3 +279,4 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "-    public void beginRequest() {",
                "+    @Override",
                "+    public void beginRequest(HttpClientRequestImpl req) {",
                "       synchronized (conn) {",
                "@@ -259,2 +285,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         }",
                "+        request = req;",
                "         if (conn.metrics != null) {",
                "@@ -660,3 +687,17 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     while ((stream = pending.poll()) != null) {",
                "-      stream.request.retry();",
                "+      Handler<AsyncResult<HttpClientStream>> handler = stream.handler;",
                "+      client.getConnectionForRequest(peerHost, ssl, port, host, ar1 -> {",
                "+        if (ar1.succeeded()) {",
                "+          HttpClientConnection conn = ar1.result();",
                "+          conn.createStream(ar2 -> {",
                "+            if (ar2.succeeded()) {",
                "+              handler.handle(Future.succeededFuture(ar2.result()));",
                "+            } else {",
                "+              handler.handle(Future.failedFuture(ar2.cause()));",
                "+            }",
                "+          });",
                "+        } else {",
                "+          handler.handle(Future.failedFuture(ar1.cause()));",
                "+        }",
                "+      });",
                "     }",
                "@@ -669,2 +710,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "     }",
                "+",
                "     retryPending();",
                "@@ -743,4 +785,4 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "   @Override",
                "-  public void createStream(HttpClientRequestImpl req, Handler<AsyncResult<HttpClientStream>> handler) {",
                "-    StreamImpl stream = new StreamImpl(this, req, handler);",
                "+  public void createStream(Handler<AsyncResult<HttpClientStream>> handler) {",
                "+    StreamImpl stream = new StreamImpl(this, handler);",
                "     synchronized (this) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "index e2cc4a294..e7608d400 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "@@ -36,2 +36,3 @@ class Http1xClientHandler extends VertxHttpHandler<Http1xClientConnection> {",
                "   private final HttpVersion version;",
                "+  private final String peerHost;",
                "   private final String host;",
                "@@ -47,2 +48,3 @@ class Http1xClientHandler extends VertxHttpHandler<Http1xClientConnection> {",
                "                              HttpVersion version,",
                "+                             String peerHost,",
                "                              String host,",
                "@@ -56,2 +58,3 @@ class Http1xClientHandler extends VertxHttpHandler<Http1xClientConnection> {",
                "     this.client = client;",
                "+    this.peerHost = peerHost;",
                "     this.host = host;",
                "@@ -67,3 +70,3 @@ class Http1xClientHandler extends VertxHttpHandler<Http1xClientConnection> {",
                "     chctx = ctx;",
                "-    Http1xClientConnection conn = new Http1xClientConnection(listener, version, client, endpointMetric, ctx, ssl, host, port, context, metrics);",
                "+    Http1xClientConnection conn = new Http1xClientConnection(listener, version, client, endpointMetric, ctx, ssl, peerHost, host, port, context, metrics);",
                "     if (metrics != null) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index 4376f22b5..d0715f504 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -79,4 +79,2 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private static final Handler<HttpServerRequest> NULL_REQUEST_HANDLER = req -> {};",
                "-",
                "   private static final int CHANNEL_PAUSE_QUEUE_SIZE = 5;",
                "@@ -90,3 +88,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   private Object requestMetric;",
                "-  private Handler<HttpServerRequest> requestHandler = NULL_REQUEST_HANDLER;",
                "+  private Handler<HttpServerRequest> requestHandler;",
                "   private Handler<ServerWebSocket> wsHandler;",
                "@@ -187,9 +185,19 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  synchronized void requestHandler(Handler<HttpServerRequest> handler) {",
                "-    this.requestHandler = handler;",
                "+  synchronized void requestHandlers(HttpHandlers handlers) {",
                "+    Handler<HttpServerRequest> handler = handlers.requestHandler;",
                "+    if (handlers.connectionHandler != null) {",
                "+      handler = req -> {",
                "+        requestHandler = handlers.requestHandler;",
                "+        handlers.connectionHandler.handle(this);",
                "+        handlers.requestHandler.handle(req);",
                "+      };",
                "+    }",
                "+    requestHandler = handler;",
                "+    exceptionHandler(handlers.exceptionHandler);",
                "   }",
                "-  synchronized void wsHandler(WebSocketServerHandshaker handshaker, Handler<ServerWebSocket> handler) {",
                "+  synchronized void wsHandler(WebSocketServerHandshaker handshaker, HttpHandlers handlers) {",
                "     this.handshaker = handshaker;",
                "-    this.wsHandler = handler;",
                "+    this.wsHandler = handlers.wsHandler;",
                "+    exceptionHandler(handlers.exceptionHandler);",
                "   }",
                "@@ -444,3 +452,5 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "       }",
                "-      requestHandler.handle(req);",
                "+      if (requestHandler != null) {",
                "+        requestHandler.handle(req);",
                "+      }",
                "     } else if (msg == LastHttpContent.EMPTY_LAST_CONTENT) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "index 65f230e9c..8fec20956 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "@@ -19,5 +19,3 @@ import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;",
                " import io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;",
                "-import io.vertx.core.Handler;",
                " import io.vertx.core.VertxException;",
                "-import io.vertx.core.http.HttpConnection;",
                " import io.vertx.core.http.HttpServerOptions;",
                "@@ -65,12 +63,8 @@ public class Http1xServerHandler extends VertxHttpHandler<Http1xServerConnection",
                "     setConnection(conn);",
                "-    conn.requestHandler(holder.handler.requesthHandler);",
                "-    holder.context.executeFromIO(() -> {",
                "-      if (metrics != null) {",
                "+    conn.requestHandlers(holder.handler);",
                "+    if (metrics != null) {",
                "+      holder.context.executeFromIO(() -> {",
                "         conn.metric(metrics.connected(conn.remoteAddress(), conn.remoteName()));",
                "-      }",
                "-      Handler<HttpConnection> connHandler = holder.handler.connectionHandler;",
                "-      if (connHandler != null) {",
                "-        connHandler.handle(conn);",
                "-      }",
                "-    });",
                "+      });",
                "+    }",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "index 38f83ef0a..9c2d0798e 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "@@ -34,2 +34,3 @@ import io.vertx.core.spi.metrics.HttpClientMetrics;",
                " import java.util.Map;",
                "+import java.util.function.BiConsumer;",
                "@@ -80,7 +81,2 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "-  @Override",
                "-  public Channel channel() {",
                "-    return chctx.channel();",
                "-  }",
                "-",
                "   @Override",
                "@@ -104,4 +100,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "-  @Override",
                "-  public void createStream(HttpClientRequestImpl req, Handler<AsyncResult<HttpClientStream>> completionHandler) {",
                "+  void upgradeStream(HttpClientRequestImpl req, Handler<AsyncResult<HttpClientStream>> completionHandler) {",
                "     Future<HttpClientStream> fut;",
                "@@ -109,12 +104,22 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "       try {",
                "-        Http2Connection conn = handler.connection();",
                "-",
                "-",
                "+        Http2ClientStream stream = createStream(handler.connection().stream(1));",
                "+        stream.beginRequest(req);",
                "+        fut = Future.succeededFuture(stream);",
                "+      } catch (Exception e) {",
                "+        fut = Future.failedFuture(e);",
                "+      }",
                "+    }",
                "+    completionHandler.handle(fut);",
                "+  }",
                "-        Http2Stream stream = conn.local().createStream(conn.local().incrementAndGetNextStreamId(), false);",
                "-        boolean writable = handler.encoder().flowController().isWritable(stream);",
                "-        Http2ClientStream clientStream = new Http2ClientStream(this, req, stream, writable);",
                "-        streams.put(clientStream.stream.id(), clientStream);",
                "-        fut = Future.succeededFuture(clientStream);",
                "-      } catch (Http2Exception e) {",
                "+  @Override",
                "+  public void createStream(Handler<AsyncResult<HttpClientStream>> completionHandler) {",
                "+    Future<HttpClientStream> fut;",
                "+    synchronized (this) {",
                "+      Http2Connection conn = handler.connection();",
                "+      try {",
                "+        int id = conn.local().lastStreamCreated() == 0 ? 1 : conn.local().lastStreamCreated() + 2;",
                "+        Http2ClientStream stream = createStream(conn.local().createStream(id, false));",
                "+        fut = Future.succeededFuture(stream);",
                "+      } catch (Exception e) {",
                "         fut = Future.failedFuture(e);",
                "@@ -125,2 +130,9 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "+  private Http2ClientStream createStream(Http2Stream stream) {",
                "+    boolean writable = handler.encoder().flowController().isWritable(stream);",
                "+    Http2ClientStream clientStream = new Http2ClientStream(this, stream, writable);",
                "+    streams.put(clientStream.stream.id(), clientStream);",
                "+    return clientStream;",
                "+  }",
                "+",
                "   @Override",
                "@@ -171,3 +183,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "-    private final HttpClientRequestBase request;",
                "+    private HttpClientRequestBase request;",
                "     private HttpClientResponseImpl response;",
                "@@ -176,3 +188,7 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "-    public Http2ClientStream(Http2ClientConnection conn, HttpClientRequestBase request, Http2Stream stream, boolean writable) throws Http2Exception {",
                "+    Http2ClientStream(Http2ClientConnection conn, Http2Stream stream, boolean writable) {",
                "+      super(conn, stream, writable);",
                "+    }",
                "+",
                "+    Http2ClientStream(Http2ClientConnection conn, HttpClientRequestPushPromise request, Http2Stream stream, boolean writable) {",
                "       super(conn, stream, writable);",
                "@@ -243,9 +259,2 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "-    @Override",
                "-    public void checkDrained() {",
                "-      synchronized (conn) {",
                "-        handleInterestedOpsChanged();",
                "-      }",
                "-    }",
                "-",
                "     @Override",
                "@@ -314,8 +323,3 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "     @Override",
                "-    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked) {",
                "-      writeHeadWithContent(method, rawMethod, uri, headers, hostHeader, chunked, null, false);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void writeHeadWithContent(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf content, boolean end) {",
                "+    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf content, boolean end) {",
                "       Http2Headers h = new DefaultHttp2Headers();",
                "@@ -371,2 +375,12 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "+    @Override",
                "+    public void reportBytesWritten(long numberOfBytes) {",
                "+      conn.reportBytesWritten(numberOfBytes);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void reportBytesRead(long numberOfBytes) {",
                "+      conn.reportBytesRead(numberOfBytes);",
                "+    }",
                "+",
                "     @Override",
                "@@ -386,3 +400,4 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "     @Override",
                "-    public void beginRequest() {",
                "+    public void beginRequest(HttpClientRequestImpl req) {",
                "+      request = req;",
                "     }",
                "@@ -419,2 +434,41 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon",
                "   }",
                "+",
                "+  public static VertxHttp2ConnectionHandler<Http2ClientConnection> createHttp2ConnectionHandler(",
                "+    HttpClientImpl client,",
                "+    Object queueMetric,",
                "+    ConnectionListener<HttpClientConnection> listener,",
                "+    ContextImpl context,",
                "+    BiConsumer<Http2ClientConnection, Long> c) {",
                "+    long http2MaxConcurrency = client.getOptions().getHttp2MultiplexingLimit() <= 0 ? Long.MAX_VALUE : client.getOptions().getHttp2MultiplexingLimit();",
                "+    HttpClientOptions options = client.getOptions();",
                "+    HttpClientMetrics metrics = client.metrics();",
                "+    VertxHttp2ConnectionHandler<Http2ClientConnection> handler = new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>()",
                "+      .server(false)",
                "+      .useCompression(client.getOptions().isTryUseCompression())",
                "+      .initialSettings(client.getOptions().getInitialSettings())",
                "+      .connectionFactory(connHandler -> new Http2ClientConnection(listener, queueMetric, client, context, connHandler, metrics))",
                "+      .logEnabled(options.getLogActivity())",
                "+      .build();",
                "+    handler.addHandler(conn -> {",
                "+      if (options.getHttp2ConnectionWindowSize() > 0) {",
                "+        conn.setWindowSize(options.getHttp2ConnectionWindowSize());",
                "+      }",
                "+      if (metrics != null) {",
                "+        Object metric = metrics.connected(conn.remoteAddress(), conn.remoteName());",
                "+        conn.metric(metric);",
                "+      }",
                "+      long concurrency = conn.remoteSettings().getMaxConcurrentStreams();",
                "+      if (http2MaxConcurrency > 0) {",
                "+        concurrency = Math.min(concurrency, http2MaxConcurrency);",
                "+      }",
                "+      c.accept(conn, concurrency);",
                "+    });",
                "+    handler.removeHandler(conn -> {",
                "+      if (metrics != null) {",
                "+        metrics.endpointDisconnected(queueMetric, conn.metric());",
                "+      }",
                "+      listener.onDiscard();",
                "+    });",
                "+    return handler;",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java b/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "index 7b33f79dd..463605416 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "@@ -207,5 +207,2 @@ abstract class Http2ConnectionBase extends ConnectionBase implements Http2FrameL",
                "-  protected void onConnect() {",
                "-  }",
                "-",
                "   protected void concurrencyChanged(long concurrency) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java",
                "index b6d73ff39..080283f16 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java",
                "@@ -16,2 +16,3 @@ import io.netty.handler.codec.http.HttpHeaderNames;",
                " import io.netty.handler.codec.http.HttpHeaderValues;",
                "+import io.netty.handler.codec.http.HttpRequest;",
                " import io.netty.handler.codec.http2.DefaultHttp2Headers;",
                "@@ -96,2 +97,10 @@ public class Http2ServerConnection extends Http2ConnectionBase {",
                "+  private Http2ServerRequestImpl createRequest(int streamId, Http2Headers headers) {",
                "+    Http2Stream stream = handler.connection().stream(streamId);",
                "+    String contentEncoding = options.isCompressionSupported() ? HttpUtils.determineContentEncoding(headers) : null;",
                "+    boolean writable = handler.encoder().flowController().isWritable(stream);",
                "+    Http2ServerRequestImpl request = new Http2ServerRequestImpl(this, stream, metrics, serverOrigin, headers, contentEncoding, writable);",
                "+    return request;",
                "+  }",
                "+",
                "   @Override",
                "@@ -105,6 +114,3 @@ public class Http2ServerConnection extends Http2ConnectionBase {",
                "       }",
                "-      String contentEncoding = options.isCompressionSupported() ? HttpUtils.determineContentEncoding(headers) : null;",
                "-      Http2Stream s = handler.connection().stream(streamId);",
                "-      boolean writable = handler.encoder().flowController().isWritable(s);",
                "-      Http2ServerRequestImpl req = new Http2ServerRequestImpl(this, s, metrics, serverOrigin, headers, contentEncoding, writable);",
                "+      Http2ServerRequestImpl req = createRequest(streamId, headers);",
                "       stream = req;",
                "@@ -190,2 +196,14 @@ public class Http2ServerConnection extends Http2ConnectionBase {",
                "+  Http2ServerRequestImpl createUpgradeRequest(HttpRequest request) {",
                "+    DefaultHttp2Headers headers = new DefaultHttp2Headers();",
                "+    headers.method(request.method().name());",
                "+    headers.path(request.uri());",
                "+    headers.authority(request.headers().get(\"host\"));",
                "+    headers.scheme(\"http\");",
                "+    request.headers().remove(\"http2-settings\");",
                "+    request.headers().remove(\"host\");",
                "+    request.headers().forEach(header -> headers.set(header.getKey().toLowerCase(), header.getValue()));",
                "+    return createRequest(1, headers);",
                "+  }",
                "+",
                "   private class Push extends VertxHttp2Stream<Http2ServerConnection> {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                "new file mode 100644",
                "index 000000000..6856db9bd",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                "@@ -0,0 +1,389 @@",
                "+/*",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+package io.vertx.core.http.impl;",
                "+",
                "+import io.netty.buffer.ByteBuf;",
                "+import io.netty.channel.Channel;",
                "+import io.netty.channel.ChannelHandlerContext;",
                "+import io.netty.channel.ChannelInboundHandlerAdapter;",
                "+import io.netty.channel.ChannelPipeline;",
                "+import io.netty.handler.codec.http.*;",
                "+import io.vertx.codegen.annotations.Nullable;",
                "+import io.vertx.core.*;",
                "+import io.vertx.core.buffer.Buffer;",
                "+import io.vertx.core.http.*;",
                "+import io.vertx.core.http.HttpMethod;",
                "+import io.vertx.core.http.HttpVersion;",
                "+import io.vertx.core.http.impl.pool.ConnectionListener;",
                "+import io.vertx.core.impl.ContextImpl;",
                "+import io.vertx.core.net.NetSocket;",
                "+import io.vertx.core.net.SocketAddress;",
                "+",
                "+import javax.net.ssl.SSLPeerUnverifiedException;",
                "+import javax.net.ssl.SSLSession;",
                "+import javax.security.cert.X509Certificate;",
                "+",
                "+/**",
                "+ * An HTTP/2 connection in clear text that upgraded from an HTTP/1 upgrade.",
                "+ */",
                "+public class Http2UpgradedClientConnection implements HttpClientConnection {",
                "+",
                "+  private HttpClientImpl client;",
                "+  private HttpClientConnection current;",
                "+",
                "+  private Handler<Void> closeHandler;",
                "+  private Handler<Void> shutdownHandler;",
                "+  private Handler<GoAway> goAwayHandler;",
                "+  private Handler<Throwable> exceptionHandler;",
                "+  private Handler<Buffer> pingHandler;",
                "+  private Handler<Http2Settings> remoteSettingsHandler;",
                "+",
                "+  Http2UpgradedClientConnection(HttpClientImpl client, Http1xClientConnection connection) {",
                "+    this.client = client;",
                "+    this.current = connection;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Channel channel() {",
                "+    return current.channel();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    current.close();",
                "+  }",
                "+",
                "+  /**",
                "+   * The first stream that will send the request using HTTP/1, upgrades the connection when the protocol",
                "+   * switches and receives the response with HTTP/2 frames.",
                "+   */",
                "+  private class UpgradingStream implements HttpClientStream {",
                "+",
                "+    private HttpClientRequestImpl request;",
                "+    private Http1xClientConnection conn;",
                "+    private HttpClientStream stream;",
                "+",
                "+    UpgradingStream(HttpClientStream stream, Http1xClientConnection conn) {",
                "+      this.conn = conn;",
                "+      this.stream = stream;",
                "+    }",
                "+",
                "+    @Override",
                "+    public HttpClientConnection connection() {",
                "+      return current == null ? conn : current;",
                "+    }",
                "+",
                "+    /**",
                "+     * HTTP/2 clear text upgrade here.",
                "+     */",
                "+    @Override",
                "+    public void writeHead(HttpMethod method,",
                "+                          String rawMethod,",
                "+                          String uri,",
                "+                          MultiMap headers,",
                "+                          String hostHeader,",
                "+                          boolean chunked,",
                "+                          ByteBuf buf,",
                "+                          boolean end) {",
                "+      ChannelPipeline pipeline = conn.channel().pipeline();",
                "+      HttpClientCodec httpCodec = pipeline.get(HttpClientCodec.class);",
                "+      class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {",
                "+        @Override",
                "+        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {",
                "+          super.userEventTriggered(ctx, evt);",
                "+          ChannelPipeline pipeline = ctx.pipeline();",
                "+          if (evt == HttpClientUpgradeHandler.UpgradeEvent.UPGRADE_SUCCESSFUL) {",
                "+            // Upgrade handler will remove itself and remove the HttpClientCodec",
                "+            pipeline.remove(conn.handler());",
                "+          }",
                "+        }",
                "+",
                "+        @Override",
                "+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {",
                "+          if (msg instanceof HttpResponse) {",
                "+            pipeline.remove(this);",
                "+            HttpResponse resp = (HttpResponse) msg;",
                "+            if (resp.status() != HttpResponseStatus.SWITCHING_PROTOCOLS) {",
                "+              // Insert the cloe headers to let the HTTP/1 stream close the connection",
                "+              resp.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);",
                "+            }",
                "+          }",
                "+          super.channelRead(ctx, msg);",
                "+        }",
                "+      }",
                "+      VertxHttp2ClientUpgradeCodec upgradeCodec = new VertxHttp2ClientUpgradeCodec(client.getOptions().getInitialSettings()) {",
                "+        @Override",
                "+        public void upgradeTo(ChannelHandlerContext ctx, FullHttpResponse upgradeResponse) throws Exception {",
                "+",
                "+          // Now we need to upgrade this to an HTTP2",
                "+          ConnectionListener<HttpClientConnection> listener = conn.listener();",
                "+          VertxHttp2ConnectionHandler<Http2ClientConnection> handler = Http2ClientConnection.createHttp2ConnectionHandler(client, conn.endpointMetric(), listener, conn.getContext(), (conn, concurrency) -> {",
                "+            conn.upgradeStream(request, ar -> {",
                "+              UpgradingStream.this.conn.closeHandler(null);",
                "+              UpgradingStream.this.conn.exceptionHandler(null);",
                "+              if (ar.succeeded()) {",
                "+                current = conn;",
                "+                conn.closeHandler(closeHandler);",
                "+                conn.exceptionHandler(exceptionHandler);",
                "+                conn.pingHandler(pingHandler);",
                "+                conn.goAwayHandler(goAwayHandler);",
                "+                conn.shutdownHandler(shutdownHandler);",
                "+                conn.remoteSettingsHandler(remoteSettingsHandler);",
                "+                listener.onConcurrencyChange(concurrency);",
                "+              } else {",
                "+                // Handle me",
                "+                ar.cause().printStackTrace();",
                "+              }",
                "+            });",
                "+          });",
                "+          conn.channel().pipeline().addLast(handler);",
                "+          handler.clientUpgrade(ctx);",
                "+        }",
                "+      };",
                "+      HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(httpCodec, upgradeCodec, 65536);",
                "+      pipeline.addAfter(\"codec\", null, new UpgradeRequestHandler());",
                "+      pipeline.addAfter(\"codec\", null, upgradeHandler);",
                "+      stream.writeHead(method, rawMethod, uri, headers, hostHeader, chunked, buf, end);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int id() {",
                "+      return 1;",
                "+    }",
                "+",
                "+    @Override",
                "+    public HttpVersion version() {",
                "+      return HttpVersion.HTTP_2;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Context getContext() {",
                "+      return stream.getContext();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void writeBuffer(ByteBuf buf, boolean end) {",
                "+      stream.writeBuffer(buf, end);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void writeFrame(int type, int flags, ByteBuf payload) {",
                "+      stream.writeFrame(type, flags, payload);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void reportBytesWritten(long numberOfBytes) {",
                "+      stream.reportBytesWritten(numberOfBytes);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void reportBytesRead(long numberOfBytes) {",
                "+      stream.reportBytesRead(numberOfBytes);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void doSetWriteQueueMaxSize(int size) {",
                "+      stream.doSetWriteQueueMaxSize(size);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isNotWritable() {",
                "+      return stream.isNotWritable();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void doPause() {",
                "+      stream.doPause();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void doResume() {",
                "+      stream.doResume();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void reset(long code) {",
                "+      stream.reset(code);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void beginRequest(HttpClientRequestImpl req) {",
                "+      request = req;",
                "+      stream.beginRequest(req);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void endRequest() {",
                "+      stream.endRequest();",
                "+    }",
                "+",
                "+    @Override",
                "+    public NetSocket createNetSocket() {",
                "+      return stream.createNetSocket();",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void createStream(Handler<AsyncResult<HttpClientStream>> handler) {",
                "+    if (current instanceof Http1xClientConnection) {",
                "+      current.createStream(ar -> {",
                "+        if (ar.succeeded()) {",
                "+          HttpClientStream stream = ar.result();",
                "+          UpgradingStream upgradingStream = new UpgradingStream(stream, (Http1xClientConnection) current);",
                "+          handler.handle(Future.succeededFuture(upgradingStream));",
                "+        } else {",
                "+          handler.handle(ar);",
                "+        }",
                "+      });",
                "+    } else {",
                "+      current.createStream(handler);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public ContextImpl getContext() {",
                "+    return current.getContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean checkInitialized() {",
                "+    return current.checkInitialized();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void recycle() {",
                "+    current.recycle();",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection closeHandler(Handler<Void> handler) {",
                "+    closeHandler = handler;",
                "+    current.closeHandler(handler);",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection exceptionHandler(Handler<Throwable> handler) {",
                "+    exceptionHandler = handler;",
                "+    current.exceptionHandler(handler);",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection remoteSettingsHandler(Handler<Http2Settings> handler) {",
                "+    if (current instanceof Http1xClientConnection) {",
                "+      remoteSettingsHandler = handler;",
                "+    } else {",
                "+      current.remoteSettingsHandler(handler);",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection pingHandler(@Nullable Handler<Buffer> handler) {",
                "+    if (current instanceof Http1xClientConnection) {",
                "+      pingHandler = handler;",
                "+    } else {",
                "+      current.pingHandler(handler);",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection goAwayHandler(@Nullable Handler<GoAway> handler) {",
                "+    if (current instanceof Http1xClientConnection) {",
                "+      goAwayHandler = handler;",
                "+    } else {",
                "+      current.goAwayHandler(handler);",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection shutdownHandler(@Nullable Handler<Void> handler) {",
                "+    if (current instanceof Http1xClientConnection) {",
                "+      shutdownHandler = handler;",
                "+    } else {",
                "+      current.shutdownHandler(handler);",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection goAway(long errorCode, int lastStreamId, Buffer debugData) {",
                "+    return current.goAway(errorCode, lastStreamId, debugData);",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection shutdown() {",
                "+    return current.shutdown();",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection shutdown(long timeoutMs) {",
                "+    return current.shutdown(timeoutMs);",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection updateSettings(Http2Settings settings) {",
                "+    return current.updateSettings(settings);",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection updateSettings(Http2Settings settings, Handler<AsyncResult<Void>> completionHandler) {",
                "+    return current.updateSettings(settings, completionHandler);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Http2Settings settings() {",
                "+    return current.settings();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Http2Settings remoteSettings() {",
                "+    return current.remoteSettings();",
                "+  }",
                "+",
                "+  @Override",
                "+  public HttpConnection ping(Buffer data, Handler<AsyncResult<Buffer>> pongHandler) {",
                "+    return current.ping(data, pongHandler);",
                "+  }",
                "+",
                "+  @Override",
                "+  public SocketAddress remoteAddress() {",
                "+    return current.remoteAddress();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SocketAddress localAddress() {",
                "+    return current.localAddress();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isSsl() {",
                "+    return current.isSsl();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SSLSession sslSession() {",
                "+    return current.sslSession();",
                "+  }",
                "+",
                "+  @Override",
                "+  public X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException {",
                "+    return current.peerCertificateChain();",
                "+  }",
                "+",
                "+  @Override",
                "+  public String indicatedServerName() {",
                "+    return current.indicatedServerName();",
                "+  }",
                "+}",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index 05ce9ac03..7d2864f9f 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -15,4 +15,2 @@ import io.netty.bootstrap.Bootstrap;",
                " import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelHandlerContext;",
                "-import io.netty.channel.ChannelInboundHandlerAdapter;",
                " import io.netty.channel.ChannelPipeline;",
                "@@ -53,3 +51,2 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "   private final long http2Weight;",
                "-  private final long http2MaxConcurrency;",
                "   private final long http1MaxConcurrency;",
                "@@ -77,3 +74,2 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     this.weight = version == HttpVersion.HTTP_2 ? http2Weight : http1Weight;",
                "-    this.http2MaxConcurrency = client.getOptions().getHttp2MultiplexingLimit() <= 0 ? Long.MAX_VALUE : client.getOptions().getHttp2MultiplexingLimit();",
                "     this.http1MaxConcurrency = client.getOptions().isPipelining() ? client.getOptions().getPipeliningLimit() : 1;",
                "@@ -141,3 +137,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                   HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1;",
                "-                http1xConnected(listener, fallbackProtocol, host, port, true, context, ch);",
                "+                http1xConnected(listener, fallbackProtocol, host, port, true, context, ch, http1Weight);",
                "               }",
                "@@ -145,3 +141,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "               applyHttp1xConnectionOptions(ch.pipeline());",
                "-              http1xConnected(listener, version, host, port, true, context, ch);",
                "+              http1xConnected(listener, version, host, port, true, context, ch, http1Weight);",
                "             }",
                "@@ -154,45 +150,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "           if (client.getOptions().isHttp2ClearTextUpgrade()) {",
                "-            HttpClientCodec httpCodec = new HttpClientCodec();",
                "-            class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {",
                "-              @Override",
                "-              public void channelActive(ChannelHandlerContext ctx) throws Exception {",
                "-                DefaultFullHttpRequest upgradeRequest =",
                "-                    new DefaultFullHttpRequest(io.netty.handler.codec.http.HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");",
                "-                String hostHeader = peerHost;",
                "-                if (port != 80) {",
                "-                  hostHeader += \":\" + port;",
                "-                }",
                "-                upgradeRequest.headers().set(HttpHeaderNames.HOST, hostHeader);",
                "-                ctx.writeAndFlush(upgradeRequest);",
                "-                ctx.fireChannelActive();",
                "-              }",
                "-              @Override",
                "-              public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {",
                "-                if (msg instanceof LastHttpContent) {",
                "-                  ChannelPipeline p = ctx.pipeline();",
                "-                  p.remove(httpCodec);",
                "-                  p.remove(this);",
                "-                  // Upgrade handler will remove itself",
                "-                  applyHttp1xConnectionOptions(ch.pipeline());",
                "-                  http1xConnected(listener, HttpVersion.HTTP_1_1, host, port, false, context, ch);",
                "-                }",
                "-              }",
                "-              @Override",
                "-              public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {",
                "-                super.userEventTriggered(ctx, evt);",
                "-                if (evt == HttpClientUpgradeHandler.UpgradeEvent.UPGRADE_SUCCESSFUL) {",
                "-                  ctx.pipeline().remove(this);",
                "-                  // Upgrade handler will remove itself",
                "-                }",
                "-              }",
                "-            }",
                "-            VertxHttp2ClientUpgradeCodec upgradeCodec = new VertxHttp2ClientUpgradeCodec(client.getOptions().getInitialSettings()) {",
                "-              @Override",
                "-              public void upgradeTo(ChannelHandlerContext ctx, FullHttpResponse upgradeResponse) throws Exception {",
                "-                applyHttp2ConnectionOptions(pipeline);",
                "-                http2Connected(listener, context, ch);",
                "-              }",
                "-            };",
                "-            HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(httpCodec, upgradeCodec, 65536);",
                "-            ch.pipeline().addLast(httpCodec, upgradeHandler, new UpgradeRequestHandler());",
                "+            applyHttp1xConnectionOptions(pipeline);",
                "           } else {",
                "@@ -211,10 +165,10 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "         if (!ssl) {",
                "-          if (ch.pipeline().get(HttpClientUpgradeHandler.class) != null) {",
                "-            // Upgrade handler do nothing",
                "-          } else {",
                "-            if (version == HttpVersion.HTTP_2 && !client.getOptions().isHttp2ClearTextUpgrade()) {",
                "-              http2Connected(listener, context, ch);",
                "+          if (version == HttpVersion.HTTP_2) {",
                "+            if (client.getOptions().isHttp2ClearTextUpgrade()) {",
                "+              http1xConnected(listener, version, host, port, false, context, ch, http2Weight);",
                "             } else {",
                "-              http1xConnected(listener, version, host, port, false, context, ch);",
                "+              http2Connected(listener, context, ch);",
                "             }",
                "+          } else {",
                "+            http1xConnected(listener, version, host, port, false, context, ch, http1Weight);",
                "           }",
                "@@ -272,3 +226,4 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                                ContextImpl context,",
                "-                               Channel ch) {",
                "+                               Channel ch, long weight) {",
                "+    boolean upgrade = version == HttpVersion.HTTP_2 && options.isHttp2ClearTextUpgrade();",
                "     Http1xClientHandler clientHandler = new Http1xClientHandler(",
                "@@ -276,3 +231,4 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "       context,",
                "-      version,",
                "+      upgrade ? HttpVersion.HTTP_1_1 : version,",
                "+      peerHost,",
                "       host,",
                "@@ -284,3 +240,7 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     clientHandler.addHandler(conn -> {",
                "-      listener.onConnectSuccess(conn, http1MaxConcurrency, ch, context, http1Weight);",
                "+      if (upgrade) {",
                "+        listener.onConnectSuccess(new Http2UpgradedClientConnection(client, conn), 1, ch, context, http2Weight);",
                "+      } else {",
                "+        listener.onConnectSuccess(conn, http1MaxConcurrency, ch, context, http1Weight);",
                "+      }",
                "     });",
                "@@ -296,32 +256,7 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     try {",
                "-      boolean upgrade;",
                "-      upgrade = ch.pipeline().get(SslHandler.class) == null && options.isHttp2ClearTextUpgrade();",
                "-      VertxHttp2ConnectionHandler<Http2ClientConnection> handler = new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>(ch)",
                "-        .server(false)",
                "-        .clientUpgrade(upgrade)",
                "-        .useCompression(client.getOptions().isTryUseCompression())",
                "-        .initialSettings(client.getOptions().getInitialSettings())",
                "-        .connectionFactory(connHandler -> new Http2ClientConnection(listener, metric, client, context, connHandler, metrics))",
                "-        .logEnabled(options.getLogActivity())",
                "-        .build();",
                "-      handler.addHandler(conn -> {",
                "-        if (options.getHttp2ConnectionWindowSize() > 0) {",
                "-          conn.setWindowSize(options.getHttp2ConnectionWindowSize());",
                "-        }",
                "-        if (metrics != null) {",
                "-          Object metric = metrics.connected(conn.remoteAddress(), conn.remoteName());",
                "-          conn.metric(metric);",
                "-        }",
                "-        long concurrency = conn.remoteSettings().getMaxConcurrentStreams();",
                "-        if (http2MaxConcurrency > 0) {",
                "-          concurrency = Math.min(concurrency, http2MaxConcurrency);",
                "-        }",
                "+      VertxHttp2ConnectionHandler<Http2ClientConnection> handler = Http2ClientConnection.createHttp2ConnectionHandler(client, metric, listener, context, (conn, concurrency) -> {",
                "         listener.onConnectSuccess(conn, concurrency, ch, context, http2Weight);",
                "       });",
                "-      handler.removeHandler(conn -> {",
                "-        if (metrics != null) {",
                "-          metrics.endpointDisconnected(metric, conn.metric());",
                "-        }",
                "-        listener.onDiscard();",
                "-      });",
                "+      ch.pipeline().addLast(handler);",
                "+      ch.flush();",
                "     } catch (Exception e) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java b/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "index 3b64e08c6..496b2caaf 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "@@ -26,9 +26,5 @@ interface HttpClientConnection extends HttpConnection {",
                "-  void reportBytesWritten(long numberOfBytes);",
                "-",
                "-  void reportBytesRead(long s);",
                "-",
                "   void close();",
                "-  void createStream(HttpClientRequestImpl req, Handler<AsyncResult<HttpClientStream>> handler);",
                "+  void createStream(Handler<AsyncResult<HttpClientStream>> handler);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index 312f25aff..b1e85e7d9 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -13,8 +13,3 @@ package io.vertx.core.http.impl;",
                "-import io.vertx.core.Closeable;",
                "-import io.vertx.core.Context;",
                "-import io.vertx.core.Future;",
                "-import io.vertx.core.Handler;",
                "-import io.vertx.core.MultiMap;",
                "-import io.vertx.core.VertxException;",
                "+import io.vertx.core.*;",
                " import io.vertx.core.http.HttpClient;",
                "@@ -950,11 +945,13 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "     ContextInternal ctx = vertx.getOrCreateContext();",
                "-    websocketCM.getConnection(host, ssl, port, host, conn -> {",
                "-      conn.getContext().executeFromIO(() -> {",
                "-        handler.handle((Http1xClientConnection) conn);",
                "-      });",
                "-      return true;",
                "-    }, (failure) -> {",
                "-      ctx.executeFromIO(() -> {",
                "-        connectionExceptionHandler.handle(failure);",
                "-      });",
                "+    websocketCM.getConnection(host, ssl, port, host, ar -> {",
                "+      if (ar.succeeded()) {",
                "+        HttpClientConnection conn = ar.result();",
                "+        conn.getContext().executeFromIO(() -> {",
                "+          handler.handle((Http1xClientConnection) conn);",
                "+        });",
                "+      } else {",
                "+        ctx.executeFromIO(() -> {",
                "+          connectionExceptionHandler.handle(ar.cause());",
                "+        });",
                "+      }",
                "     });",
                "@@ -963,5 +960,4 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "   void getConnectionForRequest(String peerHost, boolean ssl, int port, String host,",
                "-                               Function<HttpClientConnection, Boolean> onSuccess,",
                "-                               Consumer<Throwable> onFailure) {",
                "-    httpCM.getConnection(peerHost, ssl, port, host, onSuccess, onFailure);",
                "+                               Handler<AsyncResult<HttpClientConnection>> handler) {",
                "+    httpCM.getConnection(peerHost, ssl, port, host, handler);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                "index 06928a4b9..6a5f14e83 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                "@@ -62,3 +62,2 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "-  protected abstract Object getLock();",
                "   protected abstract void doHandleResponse(HttpClientResponseImpl resp, long timeoutMs);",
                "@@ -97,18 +96,14 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "   @Override",
                "-  public HttpClientRequest exceptionHandler(Handler<Throwable> handler) {",
                "-    synchronized (getLock()) {",
                "-      if (handler != null) {",
                "-        checkComplete();",
                "-        this.exceptionHandler = handler;",
                "-      } else {",
                "-        this.exceptionHandler = null;",
                "-      }",
                "-      return this;",
                "+  public synchronized HttpClientRequest exceptionHandler(Handler<Throwable> handler) {",
                "+    if (handler != null) {",
                "+      checkComplete();",
                "+      this.exceptionHandler = handler;",
                "+    } else {",
                "+      this.exceptionHandler = null;",
                "     }",
                "+    return this;",
                "   }",
                "-  Handler<Throwable> exceptionHandler() {",
                "-    synchronized (getLock()) {",
                "-      return exceptionHandler;",
                "-    }",
                "+  synchronized Handler<Throwable> exceptionHandler() {",
                "+    return exceptionHandler;",
                "   }",
                "@@ -116,9 +111,7 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "   @Override",
                "-  public HttpClientRequest setTimeout(long timeoutMs) {",
                "-    synchronized (getLock()) {",
                "-      cancelOutstandingTimeoutTimer();",
                "-      currentTimeoutMs = timeoutMs;",
                "-      currentTimeoutTimerId = client.getVertx().setTimer(timeoutMs, id -> handleTimeout(timeoutMs));",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest setTimeout(long timeoutMs) {",
                "+    cancelOutstandingTimeoutTimer();",
                "+    currentTimeoutMs = timeoutMs;",
                "+    currentTimeoutTimerId = client.getVertx().setTimer(timeoutMs, id -> handleTimeout(timeoutMs));",
                "+    return this;",
                "   }",
                "@@ -126,3 +119,4 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "   public void handleException(Throwable t) {",
                "-    synchronized (getLock()) {",
                "+    Handler<Throwable> handler;",
                "+    synchronized (this) {",
                "       cancelOutstandingTimeoutTimer();",
                "@@ -130,7 +124,8 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "       if (exceptionHandler != null) {",
                "-        exceptionHandler.handle(t);",
                "+        handler = exceptionHandler;",
                "       } else {",
                "-        log.error(t);",
                "+        handler = log::error;",
                "       }",
                "     }",
                "+    handler.handle(t);",
                "   }",
                "@@ -138,13 +133,14 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "   void handleResponse(HttpClientResponseImpl resp) {",
                "-    synchronized (getLock()) {",
                "+    long timeoutMS;",
                "+    synchronized (this) {",
                "       // If an exception occurred (e.g. a timeout fired) we won't receive the response.",
                "-      if (exceptionOccurred == null) {",
                "-        long timeoutMS = currentTimeoutMs;",
                "-        cancelOutstandingTimeoutTimer();",
                "-        try {",
                "-          doHandleResponse(resp, timeoutMS);",
                "-        } catch (Throwable t) {",
                "-          handleException(t);",
                "-        }",
                "+      if (exceptionOccurred != null) {",
                "+        return;",
                "       }",
                "+      timeoutMS = cancelOutstandingTimeoutTimer();",
                "+    }",
                "+    try {",
                "+      doHandleResponse(resp, timeoutMS);",
                "+    } catch (Throwable t) {",
                "+      handleException(t);",
                "     }",
                "@@ -152,8 +148,11 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "-  private void cancelOutstandingTimeoutTimer() {",
                "-    if (currentTimeoutTimerId != -1) {",
                "+  private long cancelOutstandingTimeoutTimer() {",
                "+    long ret;",
                "+    if ((ret = currentTimeoutTimerId) != -1) {",
                "       client.getVertx().cancelTimer(currentTimeoutTimerId);",
                "       currentTimeoutTimerId = -1;",
                "+      ret = currentTimeoutMs;",
                "       currentTimeoutMs = 0;",
                "     }",
                "+    return ret;",
                "   }",
                "@@ -183,7 +182,5 @@ abstract class HttpClientRequestBase implements HttpClientRequest {",
                "-  void dataReceived() {",
                "-    synchronized (getLock()) {",
                "-      if (currentTimeoutTimerId != -1) {",
                "-        lastDataReceived = System.currentTimeMillis();",
                "-      }",
                "+  synchronized void dataReceived() {",
                "+    if (currentTimeoutTimerId != -1) {",
                "+      lastDataReceived = System.currentTimeMillis();",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "index e23028eec..5cd43ed7d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "@@ -26,3 +26,3 @@ import io.vertx.core.http.HttpMethod;",
                " import io.vertx.core.http.HttpVersion;",
                "-import io.vertx.core.impl.ContextImpl;",
                "+import io.vertx.core.impl.ContextInternal;",
                " import io.vertx.core.impl.VertxInternal;",
                "@@ -44,2 +44,5 @@ import static io.vertx.core.http.HttpHeaders.*;",
                "  *",
                "+ * This class uses {@code this} for synchronization purpose. The {@link #client}  or{@link #stream} instead are",
                "+ * called must not be called under this lock to avoid deadlocks.",
                "+ *",
                "  * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "@@ -57,4 +60,2 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   private Handler<Void> continueHandler;",
                "-  private HttpClientStream stream;",
                "-  private volatile Object lock;",
                "   private Handler<Void> drainHandler;",
                "@@ -62,3 +63,2 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   private Handler<HttpConnection> connectionHandler;",
                "-  private Handler<HttpVersion> headersCompletionHandler;",
                "   private boolean completed;",
                "@@ -69,3 +69,2 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   private int followRedirects;",
                "-  private boolean connecting;",
                "   private long written;",
                "@@ -73,2 +72,5 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "+  private HttpClientStream stream;",
                "+  private boolean connecting;",
                "+",
                "   // completed => drainHandler = null",
                "@@ -84,5 +86,9 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public int streamId() {",
                "-    synchronized (getLock()) {",
                "-      return stream != null ? stream.id() : -1;",
                "+    HttpClientStream s;",
                "+    synchronized (this) {",
                "+      if ((s = stream) == null) {",
                "+        return -1;",
                "+      }",
                "     }",
                "+    return s.id();",
                "   }",
                "@@ -90,12 +96,10 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public  HttpClientRequest handler(Handler<HttpClientResponse> handler) {",
                "-    synchronized (getLock()) {",
                "-      if (handler != null) {",
                "-        checkComplete();",
                "-        respHandler = checkConnect(method, handler);",
                "-      } else {",
                "-        respHandler = null;",
                "-      }",
                "-      return this;",
                "+  public  synchronized HttpClientRequest handler(Handler<HttpClientResponse> handler) {",
                "+    if (handler != null) {",
                "+      checkComplete();",
                "+      respHandler = checkConnect(method, handler);",
                "+    } else {",
                "+      respHandler = null;",
                "     }",
                "+    return this;",
                "   }",
                "@@ -114,3 +118,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public HttpClientRequest setFollowRedirects(boolean followRedirects) {",
                "-    synchronized (getLock()) {",
                "+    synchronized (this) {",
                "       checkComplete();",
                "@@ -126,8 +130,8 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest endHandler(Handler<Void> endHandler) {",
                "-    synchronized (getLock()) {",
                "-      if (endHandler != null) {",
                "+  public HttpClientRequest endHandler(Handler<Void> handler) {",
                "+    synchronized (this) {",
                "+      if (handler != null) {",
                "         checkComplete();",
                "       }",
                "-      this.endHandler = endHandler;",
                "+      endHandler = handler;",
                "       return this;",
                "@@ -138,7 +142,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public HttpClientRequestImpl setChunked(boolean chunked) {",
                "-",
                "-    // If connecting -> write buffer in list",
                "-    // If connected -> check if the buffer needs to be written",
                "-",
                "-    synchronized (getLock()) {",
                "+    synchronized (this) {",
                "       checkComplete();",
                "@@ -156,6 +156,4 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public boolean isChunked() {",
                "-    synchronized (getLock()) {",
                "-      return chunked;",
                "-    }",
                "+  public synchronized boolean isChunked() {",
                "+    return chunked;",
                "   }",
                "@@ -163,6 +161,4 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public String getRawMethod() {",
                "-    synchronized (getLock()) {",
                "-      return rawMethod;",
                "-    }",
                "+  public synchronized String getRawMethod() {",
                "+    return rawMethod;",
                "   }",
                "@@ -170,7 +166,5 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest setRawMethod(String method) {",
                "-    synchronized (getLock()) {",
                "-      this.rawMethod = method;",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest setRawMethod(String method) {",
                "+    this.rawMethod = method;",
                "+    return this;",
                "   }",
                "@@ -178,7 +172,5 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest setHost(String host) {",
                "-    synchronized (getLock()) {",
                "-      this.hostHeader = host;",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest setHost(String host) {",
                "+    this.hostHeader = host;",
                "+    return this;",
                "   }",
                "@@ -186,6 +178,4 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public String getHost() {",
                "-    synchronized (getLock()) {",
                "-      return hostHeader;",
                "-    }",
                "+  public synchronized String getHost() {",
                "+    return hostHeader;",
                "   }",
                "@@ -193,9 +183,7 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public MultiMap headers() {",
                "-    synchronized (getLock()) {",
                "-      if (headers == null) {",
                "-        headers = new CaseInsensitiveHeaders();",
                "-      }",
                "-      return headers;",
                "+  public synchronized MultiMap headers() {",
                "+    if (headers == null) {",
                "+      headers = new CaseInsensitiveHeaders();",
                "     }",
                "+    return headers;",
                "   }",
                "@@ -203,8 +191,6 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest putHeader(String name, String value) {",
                "-    synchronized (getLock()) {",
                "-      checkComplete();",
                "-      headers().set(name, value);",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest putHeader(String name, String value) {",
                "+    checkComplete();",
                "+    headers().set(name, value);",
                "+    return this;",
                "   }",
                "@@ -212,8 +198,6 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest putHeader(String name, Iterable<String> values) {",
                "-    synchronized (getLock()) {",
                "-      checkComplete();",
                "-      headers().set(name, values);",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest putHeader(String name, Iterable<String> values) {",
                "+    checkComplete();",
                "+    headers().set(name, values);",
                "+    return this;",
                "   }",
                "@@ -222,11 +206,12 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public HttpClientRequest setWriteQueueMaxSize(int maxSize) {",
                "-    synchronized (getLock()) {",
                "+    HttpClientStream s;",
                "+    synchronized (this) {",
                "       checkComplete();",
                "-      if (stream != null) {",
                "-        stream.doSetWriteQueueMaxSize(maxSize);",
                "-      } else {",
                "+      if ((s = stream) == null) {",
                "         pendingMaxSize = maxSize;",
                "+        return this;",
                "       }",
                "-      return this;",
                "     }",
                "+    s.doSetWriteQueueMaxSize(maxSize);",
                "+    return this;",
                "   }",
                "@@ -235,6 +220,11 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public boolean writeQueueFull() {",
                "-    synchronized (getLock()) {",
                "+    HttpClientStream s;",
                "+    synchronized (this) {",
                "       checkComplete();",
                "-      return stream != null && stream.isNotWritable();",
                "+      if ((s = stream) == null) {",
                "+        // Should actually check with max queue size and not always blindly return false",
                "+        return false;",
                "+      }",
                "     }",
                "+    return s.isNotWritable();",
                "   }",
                "@@ -243,3 +233,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public HttpClientRequest drainHandler(Handler<Void> handler) {",
                "-    synchronized (getLock()) {",
                "+    synchronized (this) {",
                "       if (handler != null) {",
                "@@ -247,11 +237,13 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "         drainHandler = handler;",
                "-        if (stream != null) {",
                "-          stream.getContext().runOnContext(v -> {",
                "-            synchronized (getLock()) {",
                "-              if (stream != null) {",
                "-                stream.checkDrained();",
                "-              }",
                "-            }",
                "-          });",
                "+        HttpClientStream s;",
                "+        if ((s = stream) == null) {",
                "+          return this;",
                "         }",
                "+        s.getContext().runOnContext(v -> {",
                "+          synchronized (HttpClientRequestImpl.this) {",
                "+            if (!stream.isNotWritable()) {",
                "+              handleDrained();",
                "+            }",
                "+          }",
                "+        });",
                "       } else {",
                "@@ -264,10 +256,8 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest continueHandler(Handler<Void> handler) {",
                "-    synchronized (getLock()) {",
                "-      if (handler != null) {",
                "-        checkComplete();",
                "-      }",
                "-      this.continueHandler = handler;",
                "-      return this;",
                "+  public synchronized HttpClientRequest continueHandler(Handler<Void> handler) {",
                "+    if (handler != null) {",
                "+      checkComplete();",
                "     }",
                "+    this.continueHandler = handler;",
                "+    return this;",
                "   }",
                "@@ -280,14 +270,11 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest sendHead(Handler<HttpVersion> completionHandler) {",
                "-    synchronized (getLock()) {",
                "-      checkComplete();",
                "-      checkResponseHandler();",
                "-      if (stream != null) {",
                "-        throw new IllegalStateException(\"Head already written\");",
                "-      } else {",
                "-        headersCompletionHandler = completionHandler;",
                "-        connect();",
                "-      }",
                "-      return this;",
                "+  public synchronized HttpClientRequest sendHead(Handler<HttpVersion> headersHandler) {",
                "+    checkComplete();",
                "+    checkResponseHandler();",
                "+    if (stream != null) {",
                "+      throw new IllegalStateException(\"Head already written\");",
                "+    } else {",
                "+      connect(headersHandler);",
                "     }",
                "+    return this;",
                "   }",
                "@@ -295,8 +282,6 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest putHeader(CharSequence name, CharSequence value) {",
                "-    synchronized (getLock()) {",
                "-      checkComplete();",
                "-      headers().set(name, value);",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest putHeader(CharSequence name, CharSequence value) {",
                "+    checkComplete();",
                "+    headers().set(name, value);",
                "+    return this;",
                "   }",
                "@@ -304,8 +289,6 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest putHeader(CharSequence name, Iterable<CharSequence> values) {",
                "-    synchronized (getLock()) {",
                "-      checkComplete();",
                "-      headers().set(name, values);",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest putHeader(CharSequence name, Iterable<CharSequence> values) {",
                "+    checkComplete();",
                "+    headers().set(name, values);",
                "+    return this;",
                "   }",
                "@@ -313,6 +296,4 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest pushHandler(Handler<HttpClientRequest> handler) {",
                "-    synchronized (getLock()) {",
                "-      pushHandler = handler;",
                "-    }",
                "+  public synchronized HttpClientRequest pushHandler(Handler<HttpClientRequest> handler) {",
                "+    pushHandler = handler;",
                "     return this;",
                "@@ -322,17 +303,19 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public boolean reset(long code) {",
                "-    synchronized (getLock()) {",
                "-      if (reset == null) {",
                "-        reset = code;",
                "-        if (tryComplete()) {",
                "-          if (completionHandler != null) {",
                "-            completionHandler.handle(null);",
                "-          }",
                "-        }",
                "-        if (stream != null) {",
                "-          stream.reset(code);",
                "+    HttpClientStream s;",
                "+    synchronized (this) {",
                "+      if (reset != null) {",
                "+        return false;",
                "+      }",
                "+      reset = code;",
                "+      if (tryComplete()) {",
                "+        if (completionHandler != null) {",
                "+          completionHandler.handle(null);",
                "         }",
                "-        return true;",
                "       }",
                "-      return false;",
                "+      s = stream;",
                "     }",
                "+    if (s != null) {",
                "+      s.reset(code);",
                "+    }",
                "+    return true;",
                "   }",
                "@@ -351,5 +334,9 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   public HttpConnection connection() {",
                "-    synchronized (getLock()) {",
                "-      return stream != null ? stream.connection() : null;",
                "+    HttpClientStream s;",
                "+    synchronized (this) {",
                "+      if ((s = stream) == null) {",
                "+        return null;",
                "+      }",
                "     }",
                "+    return s.connection();",
                "   }",
                "@@ -357,7 +344,5 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest connectionHandler(@Nullable Handler<HttpConnection> handler) {",
                "-    synchronized (getLock()) {",
                "-      connectionHandler = handler;",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest connectionHandler(@Nullable Handler<HttpConnection> handler) {",
                "+    connectionHandler = handler;",
                "+    return this;",
                "   }",
                "@@ -365,9 +350,11 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   @Override",
                "-  public HttpClientRequest writeCustomFrame(int type, int flags, Buffer payload) {",
                "-    synchronized (getLock()) {",
                "-      if (stream == null) {",
                "+  public synchronized HttpClientRequest writeCustomFrame(int type, int flags, Buffer payload) {",
                "+    HttpClientStream s;",
                "+    synchronized (this) {",
                "+      checkComplete();",
                "+      if ((s = stream) == null) {",
                "         throw new IllegalStateException(\"Not yet connected\");",
                "       }",
                "-      stream.writeFrame(type, flags, payload.getByteBuf());",
                "     }",
                "+    s.writeFrame(type, flags, payload.getByteBuf());",
                "     return this;",
                "@@ -376,11 +363,13 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   void handleDrained() {",
                "-    synchronized (getLock()) {",
                "-      if (drainHandler != null) {",
                "-        try {",
                "-          drainHandler.handle(null);",
                "-        } catch (Throwable t) {",
                "-          handleException(t);",
                "-        }",
                "+    Handler<Void> handler;",
                "+    synchronized (this) {",
                "+      if ((handler = drainHandler) == null) {",
                "+        return;",
                "       }",
                "     }",
                "+    try {",
                "+      handler.handle(null);",
                "+    } catch (Throwable t) {",
                "+      handleException(t);",
                "+    }",
                "   }",
                "@@ -467,21 +456,2 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "-  // After connecting we should synchronize on the client connection instance to prevent deadlock conditions",
                "-  // but there is a catch - the client connection is null before connecting so we synchronized on this before that",
                "-  // point",
                "-  protected Object getLock() {",
                "-    // We do the initial check outside the synchronized block to prevent the hit of synchronized once the conn has",
                "-    // been set",
                "-    if (lock != null) {",
                "-      return lock;",
                "-    } else {",
                "-      synchronized (this) {",
                "-        if (lock != null) {",
                "-          return lock;",
                "-        } else {",
                "-          return this;",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "   private Handler<HttpClientResponse> checkConnect(io.vertx.core.http.HttpMethod method, Handler<HttpClientResponse> handler) {",
                "@@ -616,3 +586,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "-  private synchronized void connect() {",
                "+  private synchronized void connect(Handler<HttpVersion> headersHandler) {",
                "     if (!connecting) {",
                "@@ -637,3 +607,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "       Handler<HttpConnection> initializer = connectionHandler;",
                "-      ContextImpl connectCtx = vertx.getOrCreateContext();",
                "+      ContextInternal connectCtx = vertx.getOrCreateContext();",
                "@@ -642,35 +612,33 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "       // they can capture any exceptions on connection",
                "-      client.getConnectionForRequest(peerHost, ssl, port, host, conn -> {",
                "-        // No need to synchronize as the thread is the same that set exceptionOccurred to true",
                "-        // exceptionOccurred=true getting the connection => it's a TimeoutException",
                "-        if (exceptionOccurred != null || reset != null) {",
                "-          return false;",
                "-        }",
                "-",
                "-        //",
                "-        ContextImpl ctx = conn.getContext();",
                "-        if (!conn.checkInitialized() && initializer != null) {",
                "-          ctx.executeFromIO(() -> {",
                "-            initializer.handle(conn);",
                "-          });",
                "-        }",
                "-",
                "-        //",
                "-        conn.createStream(HttpClientRequestImpl.this, ar -> {",
                "-          if (ar.succeeded()) {",
                "-            HttpClientStream stream = ar.result();",
                "+      connecting = true;",
                "+      client.getConnectionForRequest(peerHost, ssl, port, host, ar1 -> {",
                "+        if (ar1.succeeded()) {",
                "+          HttpClientConnection conn = ar1.result();",
                "+          // No need to synchronize as the thread is the same that set exceptionOccurred to true",
                "+          // exceptionOccurred=true getting the connection => it's a TimeoutException",
                "+          if (exceptionOccurred != null || reset != null) {",
                "+            conn.recycle();",
                "+            return;",
                "+          }",
                "+          ContextInternal ctx = conn.getContext();",
                "+          if (!conn.checkInitialized() && initializer != null) {",
                "             ctx.executeFromIO(() -> {",
                "-              connected(stream, HttpClientRequestImpl.this.headersCompletionHandler);",
                "+              initializer.handle(conn);",
                "             });",
                "-          } else {",
                "-            throw new RuntimeException(ar.cause());",
                "           }",
                "-        });",
                "-        return true;",
                "-      }, failure -> {",
                "-        connectCtx.executeFromIO(() -> {",
                "-          handleException(failure);",
                "-        });",
                "+          conn.createStream(ar2 -> {",
                "+            ctx.executeFromIO(() -> {",
                "+              if (ar2.succeeded()) {",
                "+                connected(headersHandler, ar2.result());",
                "+              } else {",
                "+                handleException(ar2.cause());",
                "+              }",
                "+            });",
                "+          });",
                "+        } else {",
                "+          connectCtx.executeFromIO(() -> {",
                "+            handleException(ar1.cause());",
                "+          });",
                "+        }",
                "       });",
                "-      connecting = true;",
                "     }",
                "@@ -678,10 +646,4 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "-  synchronized void retry() {",
                "-    connecting = false;",
                "-    connect();",
                "-  }",
                "-",
                "-  private void connected(HttpClientStream stream, Handler<HttpVersion> headersCompletionHandler) {",
                "-",
                "-    HttpClientConnection conn = stream.connection();",
                "+  private void connected(Handler<HttpVersion> headersHandler, HttpClientStream stream) {",
                "+    HttpConnection conn = stream.connection();",
                "@@ -689,3 +651,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "       this.stream = stream;",
                "-      stream.beginRequest();",
                "+      stream.beginRequest(this);",
                "@@ -695,3 +657,3 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "       if (pendingMaxSize != -1) {",
                "-        this.stream.doSetWriteQueueMaxSize(pendingMaxSize);",
                "+        stream.doSetWriteQueueMaxSize(pendingMaxSize);",
                "       }",
                "@@ -704,12 +666,7 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "           // we also need to write the head so optimize this and write all out in once",
                "-          stream.writeHeadWithContent(method, rawMethod, uri, headers, hostHeader(), chunked, pending, true);",
                "-          conn.reportBytesWritten(written);",
                "-          if (respHandler != null) {",
                "-            this.stream.endRequest();",
                "-          }",
                "+          stream.writeHead(method, rawMethod, uri, headers, hostHeader(), chunked, pending, true);",
                "+          stream.reportBytesWritten(written);",
                "+          stream.endRequest();",
                "         } else {",
                "-          stream.writeHeadWithContent(method, rawMethod, uri, headers, hostHeader(), chunked, pending, false);",
                "-          if (headersCompletionHandler != null) {",
                "-            headersCompletionHandler.handle(stream.version());",
                "-          }",
                "+          stream.writeHead(method, rawMethod, uri, headers, hostHeader(), chunked, pending, false);",
                "         }",
                "@@ -718,18 +675,14 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "           // we also need to write the head so optimize this and write all out in once",
                "-          stream.writeHeadWithContent(method, rawMethod, uri, headers, hostHeader(), chunked, null, true);",
                "-          conn.reportBytesWritten(written);",
                "-          if (respHandler != null) {",
                "-            this.stream.endRequest();",
                "-          }",
                "+          stream.writeHead(method, rawMethod, uri, headers, hostHeader(), chunked, null, true);",
                "+          stream.reportBytesWritten(written);",
                "+          stream.endRequest();",
                "         } else {",
                "-          stream.writeHead(method, rawMethod, uri, headers, hostHeader(), chunked);",
                "-          if (headersCompletionHandler != null) {",
                "-            headersCompletionHandler.handle(stream.version());",
                "-          }",
                "+          stream.writeHead(method, rawMethod, uri, headers, hostHeader(), chunked, null, false);",
                "         }",
                "       }",
                "-",
                "-      // Set the lock at the end of the block so we are sure that another non vertx thread will get access to the connection",
                "-      // when this callback runs on the 'this' lock",
                "-      this.lock = conn;",
                "+      this.connecting = false;",
                "+      this.stream = stream;",
                "+    }",
                "+    if (headersHandler != null) {",
                "+      headersHandler.handle(stream.version());",
                "     }",
                "@@ -781,65 +734,63 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "   private void write(ByteBuf buff, boolean end) {",
                "-    synchronized (getLock()) {",
                "+    HttpClientStream s;",
                "+    synchronized (this) {",
                "       checkComplete();",
                "       checkResponseHandler();",
                "-      _write(buff, end);",
                "-    }",
                "-  }",
                "-",
                "-  private void _write(ByteBuf buff, boolean end) {",
                "-    if (buff == null && !end) {",
                "-      // nothing to write to the connection just return",
                "-      return;",
                "-    }",
                "-",
                "-    if (end) {",
                "-      if (buff != null && !chunked && !contentLengthSet()) {",
                "-        headers().set(CONTENT_LENGTH, String.valueOf(buff.readableBytes()));",
                "-      }",
                "-    } else {",
                "-      if (!chunked && !contentLengthSet()) {",
                "-        throw new IllegalStateException(\"You must set the Content-Length header to be the total size of the message \"",
                "+      if (end) {",
                "+        if (buff != null && !chunked && !contentLengthSet()) {",
                "+          headers().set(CONTENT_LENGTH, String.valueOf(buff.readableBytes()));",
                "+        }",
                "+      } else {",
                "+        if (!chunked && !contentLengthSet()) {",
                "+          throw new IllegalStateException(\"You must set the Content-Length header to be the total size of the message \"",
                "             + \"body BEFORE sending any data if you are not using HTTP chunked encoding.\");",
                "+        }",
                "+      }",
                "+      if (buff == null && !end) {",
                "+        // nothing to write to the connection just return",
                "+        return;",
                "       }",
                "-    }",
                "-",
                "-    if (buff != null) {",
                "-      written += buff.readableBytes();",
                "-    }",
                "-",
                "-    if (stream == null) {",
                "       if (buff != null) {",
                "-        if (pendingChunks == null) {",
                "-          pendingChunks = buff;",
                "-        } else {",
                "-          CompositeByteBuf pending;",
                "-          if (pendingChunks instanceof CompositeByteBuf) {",
                "-            pending = (CompositeByteBuf) pendingChunks;",
                "+        written += buff.readableBytes();",
                "+      }",
                "+      if ((s = stream) == null) {",
                "+        if (buff != null) {",
                "+          if (pendingChunks == null) {",
                "+            pendingChunks = buff;",
                "           } else {",
                "-            pending = Unpooled.compositeBuffer();",
                "-            pending.addComponent(true, pendingChunks);",
                "-            pendingChunks = pending;",
                "+            CompositeByteBuf pending;",
                "+            if (pendingChunks instanceof CompositeByteBuf) {",
                "+              pending = (CompositeByteBuf) pendingChunks;",
                "+            } else {",
                "+              pending = Unpooled.compositeBuffer();",
                "+              pending.addComponent(true, pendingChunks);",
                "+              pendingChunks = pending;",
                "+            }",
                "+            pending.addComponent(true, buff);",
                "           }",
                "-          pending.addComponent(true, buff);",
                "         }",
                "-      }",
                "-      if (end) {",
                "-        tryComplete();",
                "-        if (completionHandler != null) {",
                "-          completionHandler.handle(null);",
                "+        if (end) {",
                "+          tryComplete();",
                "+          if (completionHandler != null) {",
                "+            completionHandler.handle(null);",
                "+          }",
                "         }",
                "+        connect(null);",
                "+        return;",
                "       }",
                "-      connect();",
                "-    } else {",
                "-      stream.writeBuffer(buff, end);",
                "-      if (end) {",
                "-        stream.connection().reportBytesWritten(written);",
                "-        if (respHandler != null) {",
                "-          stream.endRequest();",
                "-        }",
                "+    }",
                "+    s.writeBuffer(buff, end);",
                "+    if (end) {",
                "+      s.reportBytesWritten(written); // MUST BE READ UNDER SYNCHRONIZATION",
                "+    }",
                "+    if (end) {",
                "+      Handler<Void> handler;",
                "+      synchronized (this) {",
                "         tryComplete();",
                "-        if (completionHandler != null) {",
                "-          completionHandler.handle(null);",
                "+        s.endRequest();",
                "+        if ((handler = completionHandler) == null) {",
                "+          return;",
                "         }",
                "       }",
                "+      handler.handle(null);",
                "     }",
                "@@ -859,6 +810,4 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http",
                "-  Handler<HttpClientRequest> pushHandler() {",
                "-    synchronized (getLock()) {",
                "-      return pushHandler;",
                "-    }",
                "+  synchronized Handler<HttpClientRequest> pushHandler() {",
                "+    return pushHandler;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestPushPromise.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestPushPromise.java",
                "index 2be867402..4ab5f7f53 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestPushPromise.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestPushPromise.java",
                "@@ -58,14 +58,11 @@ class HttpClientRequestPushPromise extends HttpClientRequestBase {",
                "-  @Override",
                "-  protected Object getLock() {",
                "-    return this; //",
                "-  }",
                "-",
                "   @Override",
                "   protected void doHandleResponse(HttpClientResponseImpl resp, long timeoutMs) {",
                "-    synchronized (getLock()) {",
                "-      if (respHandler != null) {",
                "-        respHandler.handle(resp);",
                "+    Handler<HttpClientResponse> handler;",
                "+    synchronized (this) {",
                "+      if ((handler = respHandler) == null) {",
                "+        return;",
                "       }",
                "     }",
                "+    handler.handle(resp);",
                "   }",
                "@@ -77,7 +74,5 @@ class HttpClientRequestPushPromise extends HttpClientRequestBase {",
                "   @Override",
                "-  public HttpClientRequest handler(Handler<HttpClientResponse> handler) {",
                "-    synchronized (getLock()) {",
                "-      respHandler = handler;",
                "-      return this;",
                "-    }",
                "+  public synchronized HttpClientRequest handler(Handler<HttpClientResponse> handler) {",
                "+    respHandler = handler;",
                "+    return this;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java",
                "index e1e9bc6b4..daec47e91 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java",
                "@@ -17,6 +17,3 @@ import io.vertx.core.MultiMap;",
                " import io.vertx.core.buffer.Buffer;",
                "-import io.vertx.core.http.HttpClientResponse;",
                "-import io.vertx.core.http.HttpFrame;",
                "-import io.vertx.core.http.HttpHeaders;",
                "-import io.vertx.core.http.HttpVersion;",
                "+import io.vertx.core.http.*;",
                " import io.vertx.core.logging.Logger;",
                "@@ -45,3 +42,3 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "   private final HttpClientRequestBase request;",
                "-  private final HttpClientConnection conn;",
                "+  private final HttpConnection conn;",
                "   private final HttpClientStream stream;",
                "@@ -242,3 +239,3 @@ public class HttpClientResponseImpl implements HttpClientResponse  {",
                "     synchronized (conn) {",
                "-      conn.reportBytesRead(bytesRead);",
                "+      stream.reportBytesRead(bytesRead);",
                "       bytesRead = 0;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientStream.java b/src/main/java/io/vertx/core/http/impl/HttpClientStream.java",
                "index 67a008b49..d93843a95 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientStream.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientStream.java",
                "@@ -16,2 +16,3 @@ import io.vertx.core.Context;",
                " import io.vertx.core.MultiMap;",
                "+import io.vertx.core.http.HttpConnection;",
                " import io.vertx.core.http.HttpMethod;",
                "@@ -35,7 +36,6 @@ interface HttpClientStream {",
                "-  HttpClientConnection connection();",
                "+  HttpConnection connection();",
                "   Context getContext();",
                "-  void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked);",
                "-  void writeHeadWithContent(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf buf, boolean end);",
                "+  void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf buf, boolean end);",
                "   void writeBuffer(ByteBuf buf, boolean end);",
                "@@ -43,5 +43,7 @@ interface HttpClientStream {",
                "+  void reportBytesWritten(long numberOfBytes);",
                "+  void reportBytesRead(long numberOfBytes);",
                "+",
                "   void doSetWriteQueueMaxSize(int size);",
                "   boolean isNotWritable();",
                "-  void checkDrained();",
                "   void doPause();",
                "@@ -51,3 +53,3 @@ interface HttpClientStream {",
                "-  void beginRequest();",
                "+  void beginRequest(HttpClientRequestImpl req);",
                "   void endRequest();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpHandlers.java b/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "index e7e7c75ab..433a5393d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "@@ -27,3 +27,3 @@ public class HttpHandlers {",
                "-  final Handler<HttpServerRequest> requesthHandler;",
                "+  final Handler<HttpServerRequest> requestHandler;",
                "   final Handler<ServerWebSocket> wsHandler;",
                "@@ -33,3 +33,3 @@ public class HttpHandlers {",
                "   public HttpHandlers(",
                "-    Handler<HttpServerRequest> requesthHandler,",
                "+    Handler<HttpServerRequest> requestHandler,",
                "     Handler<ServerWebSocket> wsHandler,",
                "@@ -37,3 +37,3 @@ public class HttpHandlers {",
                "     Handler<Throwable> exceptionHandler) {",
                "-    this.requesthHandler = requesthHandler;",
                "+    this.requestHandler = requestHandler;",
                "     this.wsHandler = wsHandler;",
                "@@ -50,3 +50,3 @@ public class HttpHandlers {",
                "-    if (!Objects.equals(requesthHandler, that.requesthHandler)) return false;",
                "+    if (!Objects.equals(requestHandler, that.requestHandler)) return false;",
                "     if (!Objects.equals(wsHandler, that.wsHandler)) return false;",
                "@@ -61,4 +61,4 @@ public class HttpHandlers {",
                "     int result = 0;",
                "-    if (requesthHandler != null) {",
                "-      result = 31 * result + requesthHandler.hashCode();",
                "+    if (requestHandler != null) {",
                "+      result = 31 * result + requestHandler.hashCode();",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 3bd1b3cb3..7680a56c2 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.http.impl;",
                " import io.netty.bootstrap.ServerBootstrap;",
                "+import io.netty.buffer.ByteBuf;",
                " import io.netty.buffer.Unpooled;",
                "@@ -43,4 +44,3 @@ import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;",
                " import io.netty.handler.codec.http.websocketx.WebSocketVersion;",
                "-import io.netty.handler.codec.http2.Http2CodecUtil;",
                "-import io.netty.handler.codec.http2.Http2Settings;",
                "+import io.netty.handler.codec.http2.*;",
                " import io.netty.handler.logging.LoggingHandler;",
                "@@ -71,10 +71,3 @@ import io.vertx.core.logging.LoggerFactory;",
                " import io.vertx.core.net.SocketAddress;",
                "-import io.vertx.core.net.impl.AsyncResolveConnectHelper;",
                "-import io.vertx.core.net.impl.HandlerHolder;",
                "-import io.vertx.core.net.impl.HandlerManager;",
                "-import io.vertx.core.net.impl.SSLHelper;",
                "-import io.vertx.core.net.impl.ServerID;",
                "-import io.vertx.core.net.impl.SocketAddressImpl;",
                "-import io.vertx.core.net.impl.VertxEventLoopGroup;",
                "-import io.vertx.core.net.impl.VertxSniHandler;",
                "+import io.vertx.core.net.impl.*;",
                " import io.vertx.core.spi.metrics.HttpServerMetrics;",
                "@@ -89,2 +82,3 @@ import java.net.URISyntaxException;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.Iterator;",
                " import java.util.List;",
                "@@ -114,3 +108,2 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "   private final boolean DISABLE_H2C = Boolean.getBoolean(DISABLE_H2C_PROP_NAME);",
                "-  private static final String[] H2C_HANDLERS_TO_REMOVE = { \"idle\", \"flashpolicy\", \"deflater\", \"chunkwriter\" };",
                "@@ -120,4 +113,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "   private final ContextImpl creatingContext;",
                "-  private final Map<Channel, Http1xServerConnection> connectionMap = new ConcurrentHashMap<>();",
                "-  private final Map<Channel, Http2ServerConnection> connectionMap2 = new ConcurrentHashMap<>();",
                "+  private final Map<Channel, ConnectionBase> connectionMap = new ConcurrentHashMap<>();",
                "   private final VertxEventLoopGroup availableWorkers = new VertxEventLoopGroup();",
                "@@ -392,6 +384,5 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "-  private VertxHttp2ConnectionHandler<Http2ServerConnection> setHandler(HandlerHolder<HttpHandlers> holder, Http2Settings upgrade, Channel ch) {",
                "-    VertxHttp2ConnectionHandler<Http2ServerConnection> handler = new VertxHttp2ConnectionHandlerBuilder<Http2ServerConnection>(ch)",
                "+  private VertxHttp2ConnectionHandler<Http2ServerConnection> buildHttp2ConnectionHandler(HandlerHolder<HttpHandlers> holder) {",
                "+    VertxHttp2ConnectionHandler<Http2ServerConnection> handler = new VertxHttp2ConnectionHandlerBuilder<Http2ServerConnection>()",
                "       .server(true)",
                "-      .serverUpgrade(upgrade)",
                "       .useCompression(options.isCompressionSupported())",
                "@@ -400,12 +391,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "       .initialSettings(options.getInitialSettings())",
                "-      .connectionFactory(connHandler -> {",
                "-        Http2ServerConnection conn = new Http2ServerConnection(holder.context, serverOrigin, connHandler, options, holder.handler.requesthHandler, metrics);",
                "-        if (metrics != null) {",
                "-          conn.metric(metrics.connected(conn.remoteAddress(), conn.remoteName()));",
                "-        }",
                "-        if (options.getHttp2ConnectionWindowSize() > 0) {",
                "-          conn.setWindowSize(options.getHttp2ConnectionWindowSize());",
                "-        }",
                "-        return conn;",
                "-      })",
                "+      .connectionFactory(connHandler -> new Http2ServerConnection(holder.context, serverOrigin, connHandler, options, holder.handler.requestHandler, metrics))",
                "       .logEnabled(logEnabled)",
                "@@ -413,3 +395,9 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     handler.addHandler(conn -> {",
                "-      connectionMap2.put(conn.channel(), conn);",
                "+      connectionMap.put(conn.channel(), conn);",
                "+      if (metrics != null) {",
                "+        conn.metric(metrics.connected(conn.remoteAddress(), conn.remoteName()));",
                "+      }",
                "+      if (options.getHttp2ConnectionWindowSize() > 0) {",
                "+        conn.setWindowSize(options.getHttp2ConnectionWindowSize());",
                "+      }",
                "       if (holder.handler.connectionHandler != null) {",
                "@@ -421,3 +409,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     handler.removeHandler(conn -> {",
                "-      connectionMap2.remove(conn.channel());",
                "+      connectionMap.remove(conn.channel());",
                "     });",
                "@@ -492,4 +480,5 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     }",
                "+    VertxHttp2ConnectionHandler<Http2ServerConnection> handler = buildHttp2ConnectionHandler(holder);",
                "+    ch.pipeline().addLast(\"handler\", handler);",
                "     configureHttp2(ch.pipeline());",
                "-    setHandler(holder, null, ch);",
                "   }",
                "@@ -498,3 +487,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     if (options.getIdleTimeout() > 0) {",
                "-      pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "+      pipeline.addBefore(\"handler\", \"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout()));",
                "     }",
                "@@ -603,6 +592,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "-    for (Http1xServerConnection conn : connectionMap.values()) {",
                "-      conn.close();",
                "-    }",
                "-    for (Http2ServerConnection conn : connectionMap2.values()) {",
                "+    for (ConnectionBase conn : connectionMap.values()) {",
                "       conn.close();",
                "@@ -696,3 +682,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "             // Echo back the content of the PING frame as PONG frame as specified in RFC 6455 Section 5.5.2",
                "-            chctx.writeAndFlush(new PongWebSocketFrame(wsFrame.getBinaryData().copy()));",
                "+            conn.channel().writeAndFlush(new PongWebSocketFrame(wsFrame.getBinaryData().copy()));",
                "             break;",
                "@@ -756,3 +742,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "           }",
                "-          conn.wsHandler(shake, wsHandler.handler.wsHandler);",
                "+          conn.wsHandler(shake, wsHandler.handler);",
                "@@ -916,3 +902,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "-    private Http2Settings settings;",
                "+    private VertxHttp2ConnectionHandler<Http2ServerConnection> handler;",
                "@@ -947,5 +933,37 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "             if (settingsHeader != null) {",
                "-              settings = HttpUtils.decodeSettings(settingsHeader);",
                "+              Http2Settings settings = HttpUtils.decodeSettings(settingsHeader);",
                "+              if (settings != null) {",
                "+                HandlerHolder<HttpHandlers> reqHandler = httpHandlerMgr.chooseHandler(ctx.channel().eventLoop());",
                "+                if (reqHandler != null && reqHandler.context.isEventLoopContext()) {",
                "+                  ChannelPipeline pipeline = ctx.pipeline();",
                "+                  DefaultFullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, SWITCHING_PROTOCOLS, Unpooled.EMPTY_BUFFER, false);",
                "+                  res.headers().add(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE);",
                "+                  res.headers().add(HttpHeaderNames.UPGRADE, Http2CodecUtil.HTTP_UPGRADE_PROTOCOL_NAME);",
                "+                  res.headers().add(HttpHeaderNames.CONTENT_LENGTH, HttpHeaderValues.ZERO);",
                "+                  ctx.writeAndFlush(res);",
                "+                  pipeline.remove(\"httpEncoder\");",
                "+                  pipeline.remove(\"handler\");",
                "+                  handler = buildHttp2ConnectionHandler(reqHandler);",
                "+                  pipeline.addLast(\"handler\", handler);",
                "+                  handler.serverUpgrade(ctx, settings, request);",
                "+                  DefaultHttp2Headers headers = new DefaultHttp2Headers();",
                "+                  headers.method(request.method().name());",
                "+                  headers.path(request.uri());",
                "+                  headers.authority(request.headers().get(\"host\"));",
                "+                  headers.scheme(\"http\");",
                "+                  request.headers().remove(\"http2-settings\");",
                "+                  request.headers().remove(\"host\");",
                "+                  request.headers().forEach(header -> headers.set(header.getKey().toLowerCase(), header.getValue()));",
                "+                  ctx.fireChannelRead(new DefaultHttp2HeadersFrame(headers, false));",
                "+                } else {",
                "+                  log.warn(\"Cannot perform HTTP/2 upgrade in a worker verticle\");",
                "+                }",
                "+              }",
                "             }",
                "           }",
                "+          if (handler == null) {",
                "+            DefaultFullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, BAD_REQUEST, Unpooled.EMPTY_BUFFER, false);",
                "+            res.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);",
                "+            ctx.writeAndFlush(res);",
                "+          }",
                "         } else {",
                "@@ -954,31 +972,24 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "         }",
                "-      } else if (msg instanceof LastHttpContent) {",
                "-        if (settings != null) {",
                "-          HandlerHolder<HttpHandlers> reqHandler = httpHandlerMgr.chooseHandler(ctx.channel().eventLoop());",
                "-          if (reqHandler != null && reqHandler.context.isEventLoopContext()) {",
                "-            ChannelPipeline pipeline = ctx.pipeline();",
                "-            DefaultFullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, SWITCHING_PROTOCOLS, Unpooled.EMPTY_BUFFER, false);",
                "-            res.headers().add(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE);",
                "-            res.headers().add(HttpHeaderNames.UPGRADE, Http2CodecUtil.HTTP_UPGRADE_PROTOCOL_NAME);",
                "-            res.headers().add(HttpHeaderNames.CONTENT_LENGTH, HttpHeaderValues.ZERO);",
                "-            ctx.writeAndFlush(res).addListener(v -> {",
                "-              // Clean more pipeline ?",
                "-              pipeline.remove(\"handler\");",
                "-              pipeline.remove(\"httpDecoder\");",
                "-              pipeline.remove(\"httpEncoder\");",
                "-            });",
                "-            for (String name : H2C_HANDLERS_TO_REMOVE) {",
                "-              if (pipeline.get(name) != null) {",
                "-                pipeline.remove(name);",
                "+      } else {",
                "+        if (handler != null) {",
                "+          if (msg instanceof HttpContent) {",
                "+            HttpContent content = (HttpContent) msg;",
                "+            ByteBuf buf = VertxHandler.safeBuffer(content.content(), ctx.alloc());",
                "+            boolean end = msg instanceof LastHttpContent;",
                "+            ctx.fireChannelRead(new DefaultHttp2DataFrame(buf, end, 0));",
                "+            if (end) {",
                "+              ChannelPipeline pipeline = ctx.pipeline();",
                "+              Iterator<Map.Entry<String, ChannelHandler>> iterator = pipeline.iterator();",
                "+              while (iterator.hasNext()) {",
                "+                Map.Entry<String, ChannelHandler> handler = iterator.next();",
                "+                if (handler.getValue() instanceof Http2ConnectionHandler) {",
                "+                  // Continue",
                "+                } else {",
                "+                  iterator.remove();",
                "+                }",
                "               }",
                "+              configureHttp2(pipeline);",
                "             }",
                "-            configureHttp2(pipeline);",
                "-            setHandler(reqHandler, settings, ctx.channel());",
                "-            ctx.pipeline().remove(this);",
                "-            return;",
                "           }",
                "         }",
                "-        DefaultFullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, BAD_REQUEST, Unpooled.EMPTY_BUFFER, false);",
                "-        res.headers().set(HttpHeaderNames.CONNECTION, \"close\");",
                "-        ctx.writeAndFlush(res);",
                "       }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpUtils.java b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "index b5fbc21ca..5fc2e69af 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "@@ -382,2 +382,11 @@ public final class HttpUtils {",
                "+  public static String encodeSettings(io.vertx.core.http.Http2Settings settings) {",
                "+    Buffer buffer = Buffer.buffer();",
                "+    fromVertxSettings(settings).forEach((c, l) -> {",
                "+      buffer.appendUnsignedShort(c);",
                "+      buffer.appendUnsignedInt(l);",
                "+    });",
                "+    return Base64.getUrlEncoder().encodeToString(buffer.getBytes());",
                "+  }",
                "+",
                "   public static ByteBuf generateWSCloseFrameByteBuf(short statusCode, String reason) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "index d567a4e87..a2bd18b5a 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "@@ -17,2 +17,3 @@ import io.netty.channel.ChannelHandlerContext;",
                " import io.netty.channel.ChannelPromise;",
                "+import io.netty.handler.codec.http.HttpRequest;",
                " import io.netty.handler.codec.http2.*;",
                "@@ -24,2 +25,3 @@ import io.vertx.core.Future;",
                " import io.vertx.core.Handler;",
                "+import io.vertx.core.impl.ContextInternal;",
                "@@ -38,4 +40,2 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   private final boolean useDecompressor;",
                "-  private final Http2Settings serverUpgradeSettings;",
                "-  private final boolean upgrade;",
                "@@ -46,5 +46,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "       Http2ConnectionEncoder encoder,",
                "-      Http2Settings initialSettings,",
                "-      Http2Settings serverUpgradeSettings,",
                "-      boolean upgrade) {",
                "+      Http2Settings initialSettings) {",
                "     super(decoder, encoder, initialSettings);",
                "@@ -52,4 +50,2 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "     this.useDecompressor = useDecompressor;",
                "-    this.serverUpgradeSettings = serverUpgradeSettings;",
                "-    this.upgrade = upgrade;",
                "     encoder().flowController().listener(s -> {",
                "@@ -96,3 +92,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {",
                "-    super.exceptionCaught(ctx, cause);",
                "+    onError(ctx, cause);",
                "     ctx.close();",
                "@@ -100,14 +96,14 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "-  @Override",
                "-  public void channelActive(ChannelHandlerContext ctx) throws Exception {",
                "-    super.channelActive(ctx);",
                "-",
                "-    if (upgrade) {",
                "-      if (serverUpgradeSettings != null) {",
                "-        onHttpServerUpgrade(serverUpgradeSettings);",
                "-      } else {",
                "-        onHttpClientUpgrade();",
                "-      }",
                "-    }",
                "+  public void serverUpgrade(",
                "+    ChannelHandlerContext ctx,",
                "+    Http2Settings serverUpgradeSettings,",
                "+    HttpRequest request) throws Exception {",
                "+    onHttpServerUpgrade(serverUpgradeSettings);",
                "+    onSettingsRead(ctx, serverUpgradeSettings);",
                "+    // Http2ServerConnection c = (Http2ServerConnection) connection;",
                "+    // return c.createUpgradeRequest(request);",
                "+  }",
                "+  public void clientUpgrade(ChannelHandlerContext ctx) throws Exception {",
                "+    onHttpClientUpgrade();",
                "     // super call writes the connection preface",
                "@@ -119,7 +115,10 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   @Override",
                "-  public void channelInactive(ChannelHandlerContext ctx) throws Exception {",
                "-    super.channelInactive(ctx);",
                "-    connection.getContext().executeFromIO(connection::handleClosed);",
                "-    if (removeHandler != null) {",
                "-      removeHandler.handle(connection);",
                "+  public void channelInactive(ChannelHandlerContext chctx) throws Exception {",
                "+    super.channelInactive(chctx);",
                "+    if (connection != null) {",
                "+      ContextInternal ctx = connection.getContext();",
                "+      ctx.executeFromIO(() -> connection.handleClosed());",
                "+      if (removeHandler != null) {",
                "+        removeHandler.handle(connection);",
                "+      }",
                "     }",
                "@@ -203,3 +202,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   private void _writeHeaders(Http2Stream stream, Http2Headers headers, boolean end) {",
                "-    encoder().writeHeaders(chctx, stream.id(), headers, 0, end, chctx.newPromise());;",
                "+    encoder().writeHeaders(chctx, stream.id(), headers, 0, end, chctx.newPromise());",
                "   }",
                "@@ -399,2 +398,18 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "+  @Override",
                "+  public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {",
                "+    if (msg instanceof Http2StreamFrame) {",
                "+      // Handle HTTP/2 clear text upgrade request",
                "+      if (msg instanceof Http2HeadersFrame) {",
                "+        Http2HeadersFrame frame = (Http2HeadersFrame) msg;",
                "+        connection.onHeadersRead(ctx, 1, frame.headers(), frame.padding(), frame.isEndStream());",
                "+      } else if (msg instanceof Http2DataFrame) {",
                "+        Http2DataFrame frame = (Http2DataFrame) msg;",
                "+        connection.onDataRead(ctx, 1, frame.content(), frame.padding(), frame.isEndStream());",
                "+      }",
                "+    } else {",
                "+      super.channelRead(ctx, msg);",
                "+    }",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                "index 8a975d53c..276532529 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                "@@ -14,3 +14,2 @@ package io.vertx.core.http.impl;",
                " import io.netty.buffer.ByteBuf;",
                "-import io.netty.channel.Channel;",
                " import io.netty.channel.ChannelHandlerContext;",
                "@@ -38,3 +37,2 @@ class VertxHttp2ConnectionHandlerBuilder<C extends Http2ConnectionBase> extends",
                "-  private final Channel channel;",
                "   private boolean useCompression;",
                "@@ -45,8 +43,2 @@ class VertxHttp2ConnectionHandlerBuilder<C extends Http2ConnectionBase> extends",
                "   private boolean logEnabled;",
                "-  private boolean upgrade;",
                "-  private Http2Settings serverUpgradeSettings;",
                "-",
                "-  VertxHttp2ConnectionHandlerBuilder(Channel channel) {",
                "-    this.channel = channel;",
                "-  }",
                "@@ -66,13 +58,2 @@ class VertxHttp2ConnectionHandlerBuilder<C extends Http2ConnectionBase> extends",
                "-  public VertxHttp2ConnectionHandlerBuilder<C> clientUpgrade(boolean upgrade) {",
                "-    this.upgrade = upgrade;",
                "-    return this;",
                "-  }",
                "-",
                "-  public VertxHttp2ConnectionHandlerBuilder<C> serverUpgrade(Http2Settings upgradeSettings) {",
                "-    this.serverUpgradeSettings = upgradeSettings;",
                "-    this.upgrade = serverUpgradeSettings != null;",
                "-    return this;",
                "-  }",
                "-",
                "   /**",
                "@@ -188,4 +169,3 @@ class VertxHttp2ConnectionHandlerBuilder<C extends Http2ConnectionBase> extends",
                "       }",
                "-      VertxHttp2ConnectionHandler<C> handler = new VertxHttp2ConnectionHandler<>(connectionFactory, useDecompression, decoder, encoder, initialSettings, serverUpgradeSettings, upgrade);",
                "-      channel.pipeline().addLast(handler);",
                "+      VertxHttp2ConnectionHandler<C> handler = new VertxHttp2ConnectionHandler<>(connectionFactory, useDecompression, decoder, encoder, initialSettings);",
                "       decoder.frameListener(handler);",
                "@@ -193,4 +173,3 @@ class VertxHttp2ConnectionHandlerBuilder<C extends Http2ConnectionBase> extends",
                "     } else {",
                "-      VertxHttp2ConnectionHandler<C> handler = new VertxHttp2ConnectionHandler<>(connectionFactory, useCompression, decoder, encoder, initialSettings, null, upgrade);",
                "-      channel.pipeline().addLast(handler);",
                "+      VertxHttp2ConnectionHandler<C> handler = new VertxHttp2ConnectionHandler<>(connectionFactory, useCompression, decoder, encoder, initialSettings);",
                "       decoder.frameListener(handler);",
                "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "index aad5cfcc5..6e4acd797 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "@@ -74,2 +74,6 @@ public abstract class ConnectionBase {",
                "+  public ChannelHandler handler() {",
                "+    return chctx.handler();",
                "+  }",
                "+",
                "   public synchronized final void startRead() {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientRequestPushPromise.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientStream.java",
                "src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpUtils.java",
                "src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                "src/main/java/io/vertx/core/net/impl/ConnectionBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2362": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpHandlers.java, src/main/java/io/vertx/core/http/impl/Http1xClientHandler.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java, src/main/java/io/vertx/core/http/impl/HttpClientImpl.java, src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java, src/main/java/io/vertx/core/http/impl/HttpClientConnection.java, src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/HttpClientStream.java, src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java, src/main/java/io/vertx/core/http/impl/HttpClientRequestPushPromise.java, src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java, src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java, src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java, src/main/java/io/vertx/core/http/impl/HttpClientRequestBase.java, src/main/java/io/vertx/core/http/impl/HttpUtils.java, src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java, src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java, src/main/java/io/vertx/core/http/impl/HttpClientResponseImpl.java, src/main/java/io/vertx/core/http/impl/ConnectionManager.java, src/main/java/io/vertx/core/net/impl/ConnectionBase.java, src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java, src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2362",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e2dda5e54009a2cd89bfe0f0620d49eae72a0db7",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523188859,
            "hunks": 37,
            "message": "Don't keep a reference in the HTTP pool connection listener to the connection waiter - fixes #2477",
            "diff": [
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 1482091bb..45272f8f7 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2.CR2</version>",
                "+  <version>3.5.2-SNAPSHOT</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2.CR2'",
                "+  compile 'io.vertx:vertx-core:3.5.2-SNAPSHOT'",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index 7d2864f9f..1e52efeaf 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -21,2 +21,3 @@ import io.netty.handler.timeout.IdleStateHandler;",
                " import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Future;",
                " import io.vertx.core.Handler;",
                "@@ -24,2 +25,3 @@ import io.vertx.core.http.HttpClientOptions;",
                " import io.vertx.core.http.HttpVersion;",
                "+import io.vertx.core.http.impl.pool.ConnectResult;",
                " import io.vertx.core.http.impl.pool.ConnectionListener;",
                "@@ -91,7 +93,8 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "   @Override",
                "-  public void connect(ConnectionListener<HttpClientConnection> listener, ContextImpl context) {",
                "+  public void connect(ConnectionListener<HttpClientConnection> listener, ContextImpl context, Handler<AsyncResult<ConnectResult<HttpClientConnection>>> handler) {",
                "+    Future<ConnectResult<HttpClientConnection>> future = Future.<ConnectResult<HttpClientConnection>>future().setHandler(handler);",
                "     try {",
                "-      doConnect(listener, context);",
                "+      doConnect(listener, context, future);",
                "     } catch(Exception e) {",
                "-      listener.onConnectFailure(context, e);",
                "+      future.tryFail(e);",
                "     }",
                "@@ -101,3 +104,4 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     ConnectionListener<HttpClientConnection> listener,",
                "-    ContextImpl context) {",
                "+    ContextImpl context,",
                "+    Future<ConnectResult<HttpClientConnection>> future) {",
                "@@ -132,3 +136,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                 applyHttp2ConnectionOptions(ch.pipeline());",
                "-                http2Connected(listener, context, ch);",
                "+                http2Connected(listener, context, ch, future);",
                "               } else {",
                "@@ -137,3 +141,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                   HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1;",
                "-                http1xConnected(listener, fallbackProtocol, host, port, true, context, ch, http1Weight);",
                "+                http1xConnected(listener, fallbackProtocol, host, port, true, context, ch, http1Weight, future);",
                "               }",
                "@@ -141,6 +145,6 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "               applyHttp1xConnectionOptions(ch.pipeline());",
                "-              http1xConnected(listener, version, host, port, true, context, ch, http1Weight);",
                "+              http1xConnected(listener, version, host, port, true, context, ch, http1Weight, future);",
                "             }",
                "           } else {",
                "-            handshakeFailure(context, ch, fut.cause(), listener);",
                "+            handshakeFailure(ch, fut.cause(), listener, future);",
                "           }",
                "@@ -167,8 +171,8 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "             if (client.getOptions().isHttp2ClearTextUpgrade()) {",
                "-              http1xConnected(listener, version, host, port, false, context, ch, http2Weight);",
                "+              http1xConnected(listener, version, host, port, false, context, ch, http2Weight, future);",
                "             } else {",
                "-              http2Connected(listener, context, ch);",
                "+              http2Connected(listener, context, ch, future);",
                "             }",
                "           } else {",
                "-            http1xConnected(listener, version, host, port, false, context, ch, http1Weight);",
                "+            http1xConnected(listener, version, host, port, false, context, ch, http1Weight, future);",
                "           }",
                "@@ -176,3 +180,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "       } else {",
                "-        connectFailed(context, null, listener, res.cause());",
                "+        connectFailed(null, listener, res.cause(), future);",
                "       }",
                "@@ -212,3 +216,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "-  private void handshakeFailure(ContextImpl context, Channel ch, Throwable cause, ConnectionListener<HttpClientConnection> listener) {",
                "+  private void handshakeFailure(Channel ch, Throwable cause, ConnectionListener<HttpClientConnection> listener, Future<ConnectResult<HttpClientConnection>> future) {",
                "     SSLHandshakeException sslException = new SSLHandshakeException(\"Failed to create SSL connection\");",
                "@@ -217,3 +221,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     }",
                "-    connectFailed(context, ch, listener, sslException);",
                "+    connectFailed(ch, listener, sslException, future);",
                "   }",
                "@@ -226,3 +230,4 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                                ContextImpl context,",
                "-                               Channel ch, long weight) {",
                "+                               Channel ch, long weight,",
                "+                               Future<ConnectResult<HttpClientConnection>> future) {",
                "     boolean upgrade = version == HttpVersion.HTTP_2 && options.isHttp2ClearTextUpgrade();",
                "@@ -241,5 +246,5 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "       if (upgrade) {",
                "-        listener.onConnectSuccess(new Http2UpgradedClientConnection(client, conn), 1, ch, context, http2Weight);",
                "+        future.complete(new ConnectResult<>(new Http2UpgradedClientConnection(client, conn), 1, ch, context, http2Weight));",
                "       } else {",
                "-        listener.onConnectSuccess(conn, http1MaxConcurrency, ch, context, http1Weight);",
                "+        future.complete(new ConnectResult<>(conn, http1MaxConcurrency, ch, context, http1Weight));",
                "       }",
                "@@ -254,6 +259,7 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "                               ContextImpl context,",
                "-                              Channel ch) {",
                "+                              Channel ch,",
                "+                              Future<ConnectResult<HttpClientConnection>> future) {",
                "     try {",
                "       VertxHttp2ConnectionHandler<Http2ClientConnection> handler = Http2ClientConnection.createHttp2ConnectionHandler(client, metric, listener, context, (conn, concurrency) -> {",
                "-        listener.onConnectSuccess(conn, concurrency, ch, context, http2Weight);",
                "+        future.complete(new ConnectResult<>(conn, concurrency, ch, context, http2Weight));",
                "       });",
                "@@ -262,3 +268,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     } catch (Exception e) {",
                "-      connectFailed(context, ch, listener, e);",
                "+      connectFailed(ch, listener, e, future);",
                "     }",
                "@@ -266,3 +272,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "-  private void connectFailed(ContextImpl context, Channel ch, ConnectionListener<HttpClientConnection> listener, Throwable t) {",
                "+  private void connectFailed(Channel ch, ConnectionListener<HttpClientConnection> listener, Throwable t, Future<ConnectResult<HttpClientConnection>> future) {",
                "     if (ch != null) {",
                "@@ -273,3 +279,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     }",
                "-    listener.onConnectFailure(context, t);",
                "+    future.tryFail(t);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java",
                "new file mode 100644",
                "index 000000000..9acc3b20c",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+package io.vertx.core.http.impl.pool;",
                "+",
                "+import io.netty.channel.Channel;",
                "+import io.vertx.core.impl.ContextImpl;",
                "+",
                "+public class ConnectResult<C> {",
                "+",
                "+  private final C conn;",
                "+  private final long concurrency;",
                "+  private final Channel channel;",
                "+  private final ContextImpl context;",
                "+  private final long weight;",
                "+",
                "+  public ConnectResult(C connection, long concurrency, Channel channel, ContextImpl context, long weight) {",
                "+    this.conn = connection;",
                "+    this.concurrency = concurrency;",
                "+    this.channel = channel;",
                "+    this.context = context;",
                "+    this.weight = weight;",
                "+  }",
                "+",
                "+  public C connection() {",
                "+    return conn;",
                "+  }",
                "+",
                "+  public long concurrency() {",
                "+    return concurrency;",
                "+  }",
                "+",
                "+  public Channel channel() {",
                "+    return channel;",
                "+  }",
                "+",
                "+  public ContextImpl context() {",
                "+    return context;",
                "+  }",
                "+",
                "+  public long weight() {",
                "+    return weight;",
                "+  }",
                "+}",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "index 831e628ec..3770a3e97 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "@@ -13,5 +13,2 @@ package io.vertx.core.http.impl.pool;",
                "-import io.netty.channel.Channel;",
                "-import io.vertx.core.impl.ContextImpl;",
                "-",
                " /**",
                "@@ -22,25 +19,2 @@ public interface ConnectionListener<C> {",
                "-  /**",
                "-   * Signals the connection succeeded, provide all the info required to manage the connection",
                "-   *",
                "-   * @param conn the connection",
                "-   * @param concurrency the connection concurrency",
                "-   * @param channel the channel",
                "-   * @param context the context",
                "-   * @param actualWeight the actual weight",
                "-   */",
                "-  void onConnectSuccess(C conn,",
                "-                        long concurrency,",
                "-                        Channel channel,",
                "-                        ContextImpl context,",
                "-                        long actualWeight);",
                "-",
                "-  /**",
                "-   * Signals the connection failed.",
                "-   *",
                "-   * @param context the context",
                "-   * @param err the error",
                "-   */",
                "-  void onConnectFailure(ContextImpl context, Throwable err);",
                "-",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "index 92173ffc8..e83278574 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.http.impl.pool;",
                "+import io.vertx.core.AsyncResult;",
                "+import io.vertx.core.Handler;",
                " import io.vertx.core.impl.ContextImpl;",
                "@@ -23,4 +25,3 @@ public interface ConnectionProvider<C> {",
                "   /**",
                "-   * Connect to the server and signals the {@code listener} the success with {@link ConnectionListener#onConnectSuccess}",
                "-   * or the failure with {@link ConnectionListener#onConnectFailure}.",
                "+   * Connect to the server.",
                "    *",
                "@@ -28,4 +29,5 @@ public interface ConnectionProvider<C> {",
                "    * @param context the context to use for the connection",
                "+   * @param resultHandler the handler notified with the connection success or failure",
                "    */",
                "-  void connect(ConnectionListener<C> listener, ContextImpl context);",
                "+  void connect(ConnectionListener<C> listener, ContextImpl context, Handler<AsyncResult<ConnectResult<C>>> resultHandler);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index 840780650..b189f916b 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -239,39 +239,4 @@ public class Pool<C> {",
                "-  private void createConnection(Waiter<C> waiter) {",
                "-    Holder<C> holder  = new Holder<>();",
                "-    ConnectionListener<C> listener = new ConnectionListener<C>() {",
                "-      public void onConnectSuccess(C conn, long concurrency, Channel channel, ContextImpl context, long actualWeight) {",
                "-        // Update state",
                "-        synchronized (Pool.this) {",
                "-          initConnection(holder, context, concurrency, conn, channel, actualWeight);",
                "-        }",
                "-        // Init connection - state might change (i.e init could close the connection)",
                "-        synchronized (Pool.this) {",
                "-          if (holder.capacity == 0) {",
                "-            waitersQueue.add(waiter);",
                "-            checkPending();",
                "-            return;",
                "-          }",
                "-          waitersCount--;",
                "-          holder.capacity--;",
                "-          if (holder.capacity > 0) {",
                "-            available.add(holder);",
                "-          }",
                "-        }",
                "-        waiter.handler.handle(Future.succeededFuture(holder.connection));",
                "-        synchronized (Pool.this) {",
                "-          checkPending();",
                "-        }",
                "-      }",
                "-      @Override",
                "-      public void onConnectFailure(ContextImpl context, Throwable err) {",
                "-        waiter.handler.handle(Future.failedFuture(err));",
                "-        synchronized (Pool.this) {",
                "-          waitersCount--;",
                "-          Pool.this.weight -= initialWeight;",
                "-          holder.removed = true;",
                "-          checkPending();",
                "-          checkClose();",
                "-        }",
                "-      }",
                "+  private ConnectionListener<C> createListener(Holder<C> holder) {",
                "+    return new ConnectionListener<C>() {",
                "       @Override",
                "@@ -295,2 +260,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -307,2 +273,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -317,3 +284,42 @@ public class Pool<C> {",
                "     };",
                "-    connector.connect(listener, waiter.context);",
                "+  }",
                "+",
                "+  private void createConnection(Waiter<C> waiter) {",
                "+    Holder<C> holder  = new Holder<>();",
                "+    ConnectionListener<C> listener = createListener(holder);",
                "+    connector.connect(listener, waiter.context, ar -> {",
                "+      if (ar.succeeded()) {",
                "+        ConnectResult<C> result = ar.result();",
                "+        // Update state",
                "+        synchronized (Pool.this) {",
                "+          initConnection(holder, result.context(), result.concurrency(), result.connection(), result.channel(), result.weight());",
                "+        }",
                "+        // Init connection - state might change (i.e init could close the connection)",
                "+        synchronized (Pool.this) {",
                "+          if (holder.capacity == 0) {",
                "+            waitersQueue.add(waiter);",
                "+            checkPending();",
                "+            return;",
                "+          }",
                "+          waitersCount--;",
                "+          holder.capacity--;",
                "+          if (holder.capacity > 0) {",
                "+            available.add(holder);",
                "+          }",
                "+        }",
                "+        waiter.handler.handle(Future.succeededFuture(holder.connection));",
                "+        synchronized (Pool.this) {",
                "+          checkPending();",
                "+        }",
                "+      } else {",
                "+        waiter.handler.handle(Future.failedFuture(ar.cause()));",
                "+        synchronized (Pool.this) {",
                "+          waitersCount--;",
                "+          Pool.this.weight -= initialWeight;",
                "+          holder.removed = true;",
                "+          checkPending();",
                "+          checkClose();",
                "+        }",
                "+      }",
                "+    });",
                "   }"
            ],
            "changed_files": [
                "src/main/asciidoc/java/override/dependencies.adoc",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2477": "Http1xClientConnection holds unnecessary references to ended client request/response objects vert-x3/issues#375 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/pool/ConnectResult.java, src/main/java/io/vertx/core/http/impl/pool/Pool.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2477",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb9272ca3b04d9c54d8ecc543a3e3c7003a59a53",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525504564,
            "hunks": 9,
            "message": "Decouple the FileResolver from a Vertx instance - fixes #2428",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index 5e52cee40..e1b578b40 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -1139,3 +1139,3 @@ Set to true to enabled network activity logging: Netty's pipeline is configured",
                " +++",
                "-Set the maximum HTTP chunk size",
                "+Set the maximum HTTP chunk size that link will receive",
                " +++",
                "diff --git a/src/main/java/io/vertx/core/VertxOptions.java b/src/main/java/io/vertx/core/VertxOptions.java",
                "index d8d5644fb..1a45b4f28 100644",
                "--- a/src/main/java/io/vertx/core/VertxOptions.java",
                "+++ b/src/main/java/io/vertx/core/VertxOptions.java",
                "@@ -23,3 +23,3 @@ import java.util.Objects;",
                "-import static io.vertx.core.impl.FileResolver.DISABLE_FILE_CACHING_PROP_NAME;",
                "+import static io.vertx.core.file.impl.FileResolver.DISABLE_FILE_CACHING_PROP_NAME;",
                "diff --git a/src/main/java/io/vertx/core/file/impl/FileResolver.java b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "new file mode 100644",
                "index 000000000..22b73f1c3",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "@@ -0,0 +1,323 @@",
                "+/*",
                "+ * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+",
                "+package io.vertx.core.file.impl;",
                "+",
                "+import io.vertx.core.VertxException;",
                "+import io.vertx.core.VertxOptions;",
                "+import io.vertx.core.file.impl.FileSystemImpl;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.net.URL;",
                "+import java.net.URLDecoder;",
                "+import java.nio.file.FileAlreadyExistsException;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.StandardCopyOption;",
                "+import java.util.Enumeration;",
                "+import java.util.UUID;",
                "+import java.util.concurrent.CountDownLatch;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.regex.Pattern;",
                "+import java.util.zip.ZipEntry;",
                "+import java.util.zip.ZipFile;",
                "+",
                "+/**",
                "+ * Sometimes the file resources of an application are bundled into jars, or are somewhere on the classpath but not",
                "+ * available on the file system, e.g. in the case of a Vert.x webapp bundled as a fat jar.",
                "+ *",
                "+ * In this case we want the application to access the resource from the classpath as if it was on the file system.",
                "+ *",
                "+ * We can do this by looking for the file on the classpath, and if found, copying it to a temporary cache directory",
                "+ * on disk and serving it from there.",
                "+ *",
                "+ * There is one cache dir per Vert.x instance and they are deleted on Vert.x shutdown.",
                "+ *",
                "+ * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "+ * @author <a href=\"https://github.com/rworsnop/\">Rob Worsnop</a>",
                "+ */",
                "+public class FileResolver {",
                "+",
                "+  public static final String DISABLE_FILE_CACHING_PROP_NAME = \"vertx.disableFileCaching\";",
                "+  public static final String DISABLE_CP_RESOLVING_PROP_NAME = \"vertx.disableFileCPResolving\";",
                "+  public static final String CACHE_DIR_BASE_PROP_NAME = \"vertx.cacheDirBase\";",
                "+",
                "+  private static final String DEFAULT_CACHE_DIR_BASE = \".vertx\";",
                "+  private static final String FILE_SEP = System.getProperty(\"file.separator\");",
                "+  private static final boolean NON_UNIX_FILE_SEP = !FILE_SEP.equals(\"/\");",
                "+  private static final boolean ENABLE_CP_RESOLVING = !Boolean.getBoolean(DISABLE_CP_RESOLVING_PROP_NAME);",
                "+  private static final String CACHE_DIR_BASE = System.getProperty(CACHE_DIR_BASE_PROP_NAME, DEFAULT_CACHE_DIR_BASE);",
                "+  private static final String JAR_URL_SEP = \"!/\";",
                "+  private static final Pattern JAR_URL_SEP_PATTERN = Pattern.compile(JAR_URL_SEP);",
                "+",
                "+  private final File cwd;",
                "+  private File cacheDir;",
                "+  private Thread shutdownHook;",
                "+  private final boolean enableCaching;",
                "+",
                "+  public FileResolver() {",
                "+    this(VertxOptions.DEFAULT_FILE_CACHING_ENABLED);",
                "+  }",
                "+",
                "+  public FileResolver(boolean enableCaching) {",
                "+    this.enableCaching = enableCaching;",
                "+    String cwdOverride = System.getProperty(\"vertx.cwd\");",
                "+    if (cwdOverride != null) {",
                "+      cwd = new File(cwdOverride).getAbsoluteFile();",
                "+    } else {",
                "+      cwd = null;",
                "+    }",
                "+    if (ENABLE_CP_RESOLVING) {",
                "+      setupCacheDir();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Close this file resolver, this is a blocking operation.",
                "+   */",
                "+  public void close() throws IOException {",
                "+    deleteCacheDir();",
                "+    synchronized (this) {",
                "+      if (shutdownHook != null) {",
                "+        // May throw IllegalStateException if called from other shutdown hook so ignore that",
                "+        try {",
                "+          Runtime.getRuntime().removeShutdownHook(shutdownHook);",
                "+        } catch (IllegalStateException ignore) {",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  public File resolveFile(String fileName) {",
                "+    // First look for file with that name on disk",
                "+    File file = new File(fileName);",
                "+    if (cwd != null && !file.isAbsolute()) {",
                "+      file = new File(cwd, fileName);",
                "+    }",
                "+    if (!ENABLE_CP_RESOLVING) {",
                "+      return file;",
                "+    }",
                "+    // We need to synchronized here to avoid 2 different threads to copy the file to the cache directory and so",
                "+    // corrupting the content.",
                "+    synchronized (this) {",
                "+      if (!file.exists()) {",
                "+        // Look for it in local file cache",
                "+        File cacheFile = new File(cacheDir, fileName);",
                "+        if (enableCaching && cacheFile.exists()) {",
                "+          return cacheFile;",
                "+        }",
                "+        // Look for file on classpath",
                "+        ClassLoader cl = getClassLoader();",
                "+        if (NON_UNIX_FILE_SEP) {",
                "+          fileName = fileName.replace(FILE_SEP, \"/\");",
                "+        }",
                "+        URL url = cl.getResource(fileName);",
                "+        if (url != null) {",
                "+          String prot = url.getProtocol();",
                "+          switch (prot) {",
                "+            case \"file\":",
                "+              return unpackFromFileURL(url, fileName, cl);",
                "+            case \"jar\":",
                "+              return unpackFromJarURL(url, fileName, cl);",
                "+            case \"bundle\": // Apache Felix, Knopflerfish",
                "+            case \"bundleentry\": // Equinox",
                "+            case \"bundleresource\": // Equinox",
                "+              return unpackFromBundleURL(url);",
                "+            default:",
                "+              throw new IllegalStateException(\"Invalid url protocol: \" + prot);",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+    return file;",
                "+  }",
                "+",
                "+  private synchronized File unpackFromFileURL(URL url, String fileName, ClassLoader cl) {",
                "+    File resource;",
                "+    try {",
                "+      resource = new File(URLDecoder.decode(url.getPath(), \"UTF-8\"));",
                "+    } catch (UnsupportedEncodingException e) {",
                "+      throw new VertxException(e);",
                "+    }",
                "+    boolean isDirectory = resource.isDirectory();",
                "+    File cacheFile = new File(cacheDir, fileName);",
                "+    if (!isDirectory) {",
                "+      cacheFile.getParentFile().mkdirs();",
                "+      try {",
                "+        if (enableCaching) {",
                "+          Files.copy(resource.toPath(), cacheFile.toPath());",
                "+        } else {",
                "+          Files.copy(resource.toPath(), cacheFile.toPath(), StandardCopyOption.REPLACE_EXISTING);",
                "+        }",
                "+      } catch (FileAlreadyExistsException ignore) {",
                "+      } catch (IOException e) {",
                "+        throw new VertxException(e);",
                "+      }",
                "+    } else {",
                "+      cacheFile.mkdirs();",
                "+      String[] listing = resource.list();",
                "+      for (String file: listing) {",
                "+        String subResource = fileName + \"/\" + file;",
                "+        URL url2 = cl.getResource(subResource);",
                "+        unpackFromFileURL(url2, subResource, cl);",
                "+      }",
                "+    }",
                "+    return cacheFile;",
                "+  }",
                "+",
                "+  private synchronized File unpackFromJarURL(URL url, String fileName, ClassLoader cl) {",
                "+    ZipFile zip = null;",
                "+    try {",
                "+      String path = url.getPath();",
                "+      int idx1 = path.lastIndexOf(\".jar!\");",
                "+      if (idx1 == -1) {",
                "+        idx1 = path.lastIndexOf(\".zip!\");",
                "+      }",
                "+      int idx2 = path.lastIndexOf(\".jar!\", idx1 - 1);",
                "+      if (idx2 == -1) {",
                "+        idx2 = path.lastIndexOf(\".zip!\", idx1 - 1);",
                "+      }",
                "+      if (idx2 == -1) {",
                "+        File file = new File(URLDecoder.decode(path.substring(5, idx1 + 4), \"UTF-8\"));",
                "+        zip = new ZipFile(file);",
                "+      } else {",
                "+        String s = path.substring(idx2 + 6, idx1 + 4);",
                "+        File file = resolveFile(s);",
                "+        zip = new ZipFile(file);",
                "+      }",
                "+",
                "+      String inJarPath = path.substring(idx1 + 6);",
                "+      String[] parts = JAR_URL_SEP_PATTERN.split(inJarPath);",
                "+      StringBuilder prefixBuilder = new StringBuilder();",
                "+      for (int i = 0; i < parts.length - 1; i++) {",
                "+        prefixBuilder.append(parts[i]).append(\"/\");",
                "+      }",
                "+      String prefix = prefixBuilder.toString();",
                "+",
                "+      Enumeration<? extends ZipEntry> entries = zip.entries();",
                "+      while (entries.hasMoreElements()) {",
                "+        ZipEntry entry = entries.nextElement();",
                "+        String name = entry.getName();",
                "+        if (name.startsWith(prefix.isEmpty() ? fileName : prefix + fileName)) {",
                "+          File file = new File(cacheDir, prefix.isEmpty() ? name : name.substring(prefix.length()));",
                "+          if (name.endsWith(\"/\")) {",
                "+            // Directory",
                "+            file.mkdirs();",
                "+          } else {",
                "+            file.getParentFile().mkdirs();",
                "+            try (InputStream is = zip.getInputStream(entry)) {",
                "+              if (enableCaching) {",
                "+                Files.copy(is, file.toPath());",
                "+              } else {",
                "+                Files.copy(is, file.toPath(), StandardCopyOption.REPLACE_EXISTING);",
                "+              }",
                "+            } catch (FileAlreadyExistsException ignore) {",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    } catch (IOException e) {",
                "+      throw new VertxException(e);",
                "+    } finally {",
                "+      closeQuietly(zip);",
                "+    }",
                "+",
                "+    return new File(cacheDir, fileName);",
                "+  }",
                "+",
                "+  private void closeQuietly(Closeable zip) {",
                "+    if (zip != null) {",
                "+      try {",
                "+        zip.close();",
                "+      } catch (IOException e) {",
                "+        // Ignored.",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * bundle:// urls are used by OSGi implementations to refer to a file contained in a bundle, or in a fragment. There",
                "+   * is not much we can do to get the file from it, except reading it from the url. This method copies the files by",
                "+   * reading it from the url.",
                "+   *",
                "+   * @param url      the url",
                "+   * @return the extracted file",
                "+   */",
                "+  private synchronized File unpackFromBundleURL(URL url) {",
                "+    try {",
                "+      File file = new File(cacheDir, url.getHost() + File.separator + url.getFile());",
                "+      file.getParentFile().mkdirs();",
                "+      if (url.toExternalForm().endsWith(\"/\")) {",
                "+        // Directory",
                "+        file.mkdirs();",
                "+      } else {",
                "+        file.getParentFile().mkdirs();",
                "+        try (InputStream is = url.openStream()) {",
                "+          if (enableCaching) {",
                "+            Files.copy(is, file.toPath());",
                "+          } else {",
                "+            Files.copy(is, file.toPath(), StandardCopyOption.REPLACE_EXISTING);",
                "+          }",
                "+        } catch (FileAlreadyExistsException ignore) {",
                "+        }",
                "+      }",
                "+    } catch (IOException e) {",
                "+      throw new VertxException(e);",
                "+    }",
                "+    return new File(cacheDir, url.getHost() + File.separator + url.getFile());",
                "+  }",
                "+",
                "+",
                "+  private ClassLoader getClassLoader() {",
                "+    ClassLoader cl = Thread.currentThread().getContextClassLoader();",
                "+    if (cl == null) {",
                "+      cl = getClass().getClassLoader();",
                "+    }",
                "+    return cl;",
                "+  }",
                "+",
                "+  private void setupCacheDir() {",
                "+    String cacheDirName = CACHE_DIR_BASE + \"/file-cache-\" + UUID.randomUUID().toString();",
                "+    cacheDir = new File(cacheDirName);",
                "+    if (!cacheDir.mkdirs()) {",
                "+      throw new IllegalStateException(\"Failed to create cache dir\");",
                "+    }",
                "+    // Add shutdown hook to delete on exit",
                "+    synchronized (this) {",
                "+      shutdownHook = new Thread(() -> {",
                "+        CountDownLatch latch = new CountDownLatch(1);",
                "+        new Thread(() -> {",
                "+          try {",
                "+            deleteCacheDir();",
                "+          } catch (IOException ignore) {",
                "+          }",
                "+          latch.countDown();",
                "+        }).run();",
                "+        try {",
                "+          latch.await(10, TimeUnit.SECONDS);",
                "+        } catch (InterruptedException e) {",
                "+          Thread.currentThread().interrupt();",
                "+        }",
                "+      });",
                "+      Runtime.getRuntime().addShutdownHook(shutdownHook);",
                "+    }",
                "+  }",
                "+",
                "+  private void deleteCacheDir() throws IOException {",
                "+    if (cacheDir != null && cacheDir.exists()) {",
                "+      FileSystemImpl.delete(cacheDir.toPath(), true);",
                "+    }",
                "+  }",
                "+}",
                "+",
                "diff --git a/src/main/java/io/vertx/core/file/impl/FileSystemImpl.java b/src/main/java/io/vertx/core/file/impl/FileSystemImpl.java",
                "index 939382584..4603b4195 100644",
                "--- a/src/main/java/io/vertx/core/file/impl/FileSystemImpl.java",
                "+++ b/src/main/java/io/vertx/core/file/impl/FileSystemImpl.java",
                "@@ -618,20 +618,3 @@ public class FileSystemImpl implements FileSystem {",
                "           Path source = vertx.resolveFile(path).toPath();",
                "-          if (recursive) {",
                "-            Files.walkFileTree(source, new SimpleFileVisitor<Path>() {",
                "-              public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {",
                "-                Files.delete(file);",
                "-                return FileVisitResult.CONTINUE;",
                "-              }",
                "-              public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException {",
                "-                if (e == null) {",
                "-                  Files.delete(dir);",
                "-                  return FileVisitResult.CONTINUE;",
                "-                } else {",
                "-                  throw e;",
                "-                }",
                "-              }",
                "-            });",
                "-          } else {",
                "-            Files.delete(source);",
                "-          }",
                "+          delete(source, recursive);",
                "         } catch (IOException e) {",
                "@@ -644,2 +627,23 @@ public class FileSystemImpl implements FileSystem {",
                "+  public static void delete(Path path, boolean recursive) throws IOException {",
                "+    if (recursive) {",
                "+      Files.walkFileTree(path, new SimpleFileVisitor<Path>() {",
                "+        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {",
                "+          Files.delete(file);",
                "+          return FileVisitResult.CONTINUE;",
                "+        }",
                "+        public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException {",
                "+          if (e == null) {",
                "+            Files.delete(dir);",
                "+            return FileVisitResult.CONTINUE;",
                "+          } else {",
                "+            throw e;",
                "+          }",
                "+        }",
                "+      });",
                "+    } else {",
                "+      Files.delete(path);",
                "+    }",
                "+  }",
                "+",
                "   private BlockingAction<Void> mkdirInternal(String path, Handler<AsyncResult<Void>> handler) {",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index d185a3fec..a85529ab0 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -40,2 +40,3 @@ import io.vertx.core.eventbus.impl.clustered.ClusteredEventBus;",
                " import io.vertx.core.file.FileSystem;",
                "+import io.vertx.core.file.impl.FileResolver;",
                " import io.vertx.core.file.impl.FileSystemImpl;",
                "@@ -71,2 +72,3 @@ import io.vertx.core.spi.metrics.VertxMetrics;",
                " import java.io.File;",
                "+import java.io.IOException;",
                " import java.net.InetAddress;",
                "@@ -182,3 +184,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-    this.fileResolver = new FileResolver(this, options.isFileResolverCachingEnabled());",
                "+    this.fileResolver = new FileResolver(options.isFileResolverCachingEnabled());",
                "     this.addressResolverOptions = options.getAddressResolverOptions();",
                "@@ -794,3 +796,10 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   private void deleteCacheDirAndShutdown(Handler<AsyncResult<Void>> completionHandler) {",
                "-    fileResolver.close(res -> {",
                "+    executeBlockingInternal(fut -> {",
                "+      try {",
                "+        fileResolver.close();",
                "+        fut.complete();",
                "+      } catch (IOException e) {",
                "+        fut.tryFail(e);",
                "+      }",
                "+    }, ar -> {"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/java/io/vertx/core/VertxOptions.java",
                "src/main/java/io/vertx/core/file/impl/FileResolver.java",
                "src/main/java/io/vertx/core/file/impl/FileSystemImpl.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2428": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/file/impl/FileSystemImpl.java, src/main/java/io/vertx/core/VertxOptions.java, src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/java/io/vertx/core/file/impl/FileResolver.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2428",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16a5607583282d9ea6bef8e897611547118ca492",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523348350,
            "hunks": 3,
            "message": "The http server request exception handler should observe the response as closed on a close event - fixes #2377",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index 88841f044..4376f22b5 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -346,3 +346,2 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    super.handleClosed();",
                "     if (ws != null) {",
                "@@ -359,2 +358,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "+    super.handleClosed();",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "index 0a543d327..717c171b3 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "@@ -423,4 +423,5 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "     synchronized (conn) {",
                "-      if (exceptionHandler != null) {",
                "-        exceptionHandler.handle(t);",
                "+      Handler<Throwable> handler = this.exceptionHandler;",
                "+      if (handler != null) {",
                "+        conn.getContext().runOnContext(v -> handler.handle(t));",
                "       }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2377": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2377",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8d420ce4620723f7b49acdd7a3215e109938fd34",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1522817036,
            "hunks": 15,
            "message": "HTTP server connection keeps processing pending pipelined requests when connection closed - fixes #2365",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index 4d76adfca..88841f044 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -83,3 +83,2 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private final Deque<Object> pending = new ArrayDeque<>(8);",
                "   private final String serverOrigin;",
                "@@ -96,8 +95,11 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   private ServerWebSocketImpl ws;",
                "-  private boolean channelPaused;",
                "-  private boolean paused;",
                "-  private boolean sentCheck;",
                "   private long bytesRead;",
                "   private long bytesWritten;",
                "+",
                "+  // (queueing == true) <=> (paused || pending.size() > 0)",
                "+  private final Deque<Object> pending = new ArrayDeque<>(8);",
                "+  private boolean paused;",
                "+  private boolean sentCheck;",
                "   private boolean queueing;",
                "+  private boolean channelPaused;",
                "@@ -132,3 +134,7 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "       paused = false;",
                "-      checkNextTick();",
                "+      if (pending.isEmpty()) {",
                "+        unsetQueueing();",
                "+      } else {",
                "+        checkNextTick();",
                "+      }",
                "     }",
                "@@ -137,10 +143,16 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   synchronized void handleMessage(Object msg) {",
                "-    if (queueing) {",
                "+    if (queueing || !processMessage(msg)) {",
                "       enqueue(msg);",
                "-    } else {",
                "-      if (processMessage(msg)) {",
                "-        checkNextTick();",
                "-      } else {",
                "-        enqueue(msg);",
                "-      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Set in non queueing mode, i.e (pending.size() == 0 && !paused)",
                "+   */",
                "+  private void unsetQueueing() {",
                "+    queueing = false;",
                "+    if (channelPaused) {",
                "+      // Resume the actual channel",
                "+      channelPaused = false;",
                "+      doResume();",
                "     }",
                "@@ -149,3 +161,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   private void enqueue(Object msg) {",
                "-    //We queue requests if paused or a request is in progress to prevent responses being written in the wrong order",
                "+    // We queue requests if paused or a request is in progress to prevent responses being written in the wrong order",
                "     queueing = true;",
                "@@ -153,5 +165,5 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     if (pending.size() == CHANNEL_PAUSE_QUEUE_SIZE) {",
                "-      //We pause the channel too, to prevent the queue growing too large, but we don't do this",
                "-      //until the queue reaches a certain size, to avoid pausing it too often",
                "-      super.doPause();",
                "+      // We pause the channel too, to prevent the queue growing too large, but we don't do this",
                "+      // until the queue reaches a certain size, to avoid pausing it too often",
                "+      doPause();",
                "       channelPaused = true;",
                "@@ -480,5 +492,5 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     // Check if there are more pending messages in the queue that can be processed next time around",
                "-    if (!paused && !sentCheck) {",
                "+    if (!paused && queueing && !sentCheck) {",
                "       sentCheck = true;",
                "-      vertx.runOnContext(v -> {",
                "+      context.runOnContext(v -> {",
                "         synchronized (Http1xServerConnection.this) {",
                "@@ -486,20 +498,13 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "           if (!paused) {",
                "+            // The only place we poll the pending queue, so we are sure that pending.size() > 0",
                "+            // since we got there because queueing was true",
                "             Object msg = pending.poll();",
                "-            if (msg != null) {",
                "-              if (processMessage(msg)) {",
                "-                checkNextTick();",
                "+            if (processMessage(msg)) {",
                "+              if (pending.isEmpty()) {",
                "+                unsetQueueing();",
                "               } else {",
                "-                pending.addFirst(msg);",
                "-              }",
                "-            }",
                "-            if (pending.isEmpty()) {",
                "-              queueing = false;",
                "-              if (channelPaused) {",
                "-                // Resume the actual channel",
                "-                channelPaused = false;",
                "-                Http1xServerConnection.super.doResume();",
                "+                checkNextTick();",
                "               }",
                "             } else {",
                "-              queueing = true;",
                "-              checkNextTick();",
                "+              pending.addFirst(msg);",
                "             }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2365": "HTTP server connection keeps processing pending pipelined requests #2366 Web connection closed with endless stacktrace vert-x3/issues#345 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2365",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "57cbc081d3c5cb1390e8b501b8cf4fa3a4fe977d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525980356,
            "hunks": 2,
            "message": "Actually debug enabled => log the throwable and not the other way around",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "index e4dff795e..4c8323f27 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                "@@ -218,5 +218,5 @@ public abstract class ConnectionBase {",
                "       if (log.isDebugEnabled()) {",
                "-        log.error(t.getMessage());",
                "-      } else {",
                "         log.error(t.getMessage(), t);",
                "+      } else {",
                "+        log.error(t.getMessage());",
                "       }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/net/impl/ConnectionBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5002a0b1955939a1e5b3a6dd852bab580b41f6dc"
                ]
            ],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/ConnectionBase.java",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a0013c0dc501d6acb5f9f147432d173bf38e8407",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526057983,
            "hunks": 28,
            "message": "ClusteredEventBus racy initialization - fixes #2438 - fixes #2439",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "index d9784a589..807c4e5c0 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "@@ -74,3 +74,2 @@ public class ClusteredEventBus extends EventBusImpl {",
                "   private final ClusterManager clusterManager;",
                "-  private final HAManager haManager;",
                "   private final ConcurrentMap<ServerID, ConnectionHolder> connections = new ConcurrentHashMap<>();",
                "@@ -87,4 +86,3 @@ public class ClusteredEventBus extends EventBusImpl {",
                "                            VertxOptions options,",
                "-                           ClusterManager clusterManager,",
                "-                           HAManager haManager) {",
                "+                           ClusterManager clusterManager) {",
                "     super(vertx);",
                "@@ -92,5 +90,3 @@ public class ClusteredEventBus extends EventBusImpl {",
                "     this.clusterManager = clusterManager;",
                "-    this.haManager = haManager;",
                "     this.sendNoContext = vertx.getOrCreateContext();",
                "-    setClusterViewChangedHandler(haManager);",
                "   }",
                "@@ -134,2 +130,5 @@ public class ClusteredEventBus extends EventBusImpl {",
                "   public void start(Handler<AsyncResult<Void>> resultHandler) {",
                "+    // Get the HA manager, it has been constructed but it's not yet initialized",
                "+    HAManager haManager = vertx.haManager();",
                "+    setClusterViewChangedHandler(haManager);",
                "     clusterManager.<String, ClusterNodeInfo>getAsyncMultiMap(SUBS_MAP_NAME, ar2 -> {",
                "diff --git a/src/main/java/io/vertx/core/impl/HAManager.java b/src/main/java/io/vertx/core/impl/HAManager.java",
                "index 93f376022..97c4c7eda 100644",
                "--- a/src/main/java/io/vertx/core/impl/HAManager.java",
                "+++ b/src/main/java/io/vertx/core/impl/HAManager.java",
                "@@ -135,7 +135,12 @@ public class HAManager {",
                "     this.enabled = enabled;",
                "-    this.haInfo = new JsonObject();",
                "-    haInfo.put(\"verticles\", new JsonArray());",
                "-    haInfo.put(\"group\", this.group);",
                "+    this.haInfo = new JsonObject().put(\"verticles\", new JsonArray()).put(\"group\", this.group);",
                "     this.clusterMap = clusterManager.getSyncMap(CLUSTER_MAP_NAME);",
                "     this.nodeID = clusterManager.getNodeID();",
                "+  }",
                "+",
                "+  /**",
                "+   * Initialize the ha manager, i.e register the node listener to propagates the node events and",
                "+   * start the quorum timer. The quorum will be checked as well.",
                "+   */",
                "+  void init() {",
                "     synchronized (haInfo) {",
                "@@ -148,3 +153,2 @@ public class HAManager {",
                "       }",
                "-",
                "       @Override",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxFactoryImpl.java b/src/main/java/io/vertx/core/impl/VertxFactoryImpl.java",
                "index bfd237d40..ac2d9b69b 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxFactoryImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxFactoryImpl.java",
                "@@ -29,3 +29,3 @@ public class VertxFactoryImpl implements VertxFactory {",
                "   public Vertx vertx() {",
                "-    return new VertxImpl();",
                "+    return vertx(new VertxOptions());",
                "   }",
                "@@ -37,3 +37,3 @@ public class VertxFactoryImpl implements VertxFactory {",
                "     }",
                "-    return new VertxImpl(options);",
                "+    return VertxImpl.vertx(options);",
                "   }",
                "@@ -44,3 +44,3 @@ public class VertxFactoryImpl implements VertxFactory {",
                "     options.setClustered(true);",
                "-    new VertxImpl(options, resultHandler);",
                "+    VertxImpl.clusteredVertx(options, resultHandler);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index c2d309df0..685031ad3 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -109,2 +109,13 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "+  static VertxImpl vertx(VertxOptions options) {",
                "+    VertxImpl vertx = new VertxImpl(options);",
                "+    vertx.init();",
                "+    return vertx;",
                "+  }",
                "+",
                "+  static void clusteredVertx(VertxOptions options, Handler<AsyncResult<Vertx>> resultHandler) {",
                "+    VertxImpl vertx = new VertxImpl(options);",
                "+    vertx.initClustered(options, resultHandler);",
                "+  }",
                "+",
                "   private final FileSystem fileSystem = getFileSystem();",
                "@@ -125,7 +136,6 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   private final BlockedThreadChecker checker;",
                "-  private final boolean haEnabled;",
                "   private final AddressResolver addressResolver;",
                "   private final AddressResolverOptions addressResolverOptions;",
                "-  private EventBus eventBus;",
                "-  private HAManager haManager;",
                "+  private final EventBus eventBus;",
                "+  private volatile HAManager haManager;",
                "   private boolean closed;",
                "@@ -138,11 +148,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-  VertxImpl() {",
                "-    this(new VertxOptions());",
                "-  }",
                "-",
                "-  VertxImpl(VertxOptions options) {",
                "-    this(options, null);",
                "-  }",
                "-",
                "-  VertxImpl(VertxOptions options, Handler<AsyncResult<Vertx>> resultHandler) {",
                "+  private VertxImpl(VertxOptions options) {",
                "     // Sanity check",
                "@@ -188,22 +190,8 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     this.deploymentManager = new DeploymentManager(this);",
                "-    this.haEnabled = options.isClustered() && options.isHAEnabled();",
                "     if (options.isClustered()) {",
                "       this.clusterManager = getClusterManager(options);",
                "-      this.clusterManager.setVertx(this);",
                "-      this.clusterManager.join(ar -> {",
                "-        if (ar.failed()) {",
                "-          log.error(\"Failed to join cluster\", ar.cause());",
                "-          resultHandler.handle(Future.failedFuture(ar.cause()));",
                "-        } else {",
                "-          // Provide a memory barrier as we are setting from a different thread",
                "-          synchronized (VertxImpl.this) {",
                "-            haManager = new HAManager(this, deploymentManager, clusterManager, options.getQuorumSize(),",
                "-                                      options.getHAGroup(), haEnabled);",
                "-            createAndStartEventBus(options, resultHandler);",
                "-          }",
                "-        }",
                "-      });",
                "+      this.eventBus = new ClusteredEventBus(this, options, clusterManager);",
                "     } else {",
                "       this.clusterManager = null;",
                "-      createAndStartEventBus(options, resultHandler);",
                "+      this.eventBus = new EventBusImpl(this);",
                "     }",
                "@@ -212,14 +200,28 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-  private void createAndStartEventBus(VertxOptions options, Handler<AsyncResult<Vertx>> resultHandler) {",
                "-    if (options.isClustered()) {",
                "-      eventBus = new ClusteredEventBus(this, options, clusterManager, haManager);",
                "-    } else {",
                "-      eventBus = new EventBusImpl(this);",
                "-    }",
                "-    eventBus.start(ar -> {",
                "-      if (ar.succeeded()) {",
                "-        if (resultHandler != null) resultHandler.handle(Future.succeededFuture(this));",
                "+  private void init() {",
                "+    eventBus.start(ar -> {});",
                "+  }",
                "+",
                "+  private void initClustered(VertxOptions options, Handler<AsyncResult<Vertx>> resultHandler) {",
                "+    clusterManager.setVertx(this);",
                "+    clusterManager.join(ar1 -> {",
                "+      if (ar1.failed()) {",
                "+        log.error(\"Failed to join cluster\", ar1.cause());",
                "+        resultHandler.handle(Future.failedFuture(ar1.cause()));",
                "       } else {",
                "-        log.error(\"Failed to start event bus\", ar.cause());",
                "-        if (resultHandler != null) resultHandler.handle(Future.failedFuture(ar.cause()));",
                "+        haManager = new HAManager(this, deploymentManager, clusterManager, options.getQuorumSize(), options.getHAGroup(), options.isHAEnabled());",
                "+        eventBus.start(ar2 -> {",
                "+          AsyncResult<Vertx> res;",
                "+          if (ar2.succeeded()) {",
                "+            // Init the manager (i.e register listener and check the quorum)",
                "+            // after the event bus has been fully started and updated its state",
                "+            // it will have also set the clustered changed view handler on the ha manager",
                "+            haManager.init();",
                "+            res = Future.succeededFuture(this);",
                "+          } else {",
                "+            log.error(\"Failed to start event bus\", ar2.cause());",
                "+            res = Future.failedFuture(ar2.cause());",
                "+          }",
                "+          resultHandler.handle(res);",
                "+        });",
                "       }",
                "@@ -300,9 +302,2 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   public EventBus eventBus() {",
                "-    if (eventBus == null) {",
                "-      // If reading from different thread possibility that it's been set but not visible - so provide",
                "-      // memory barrier",
                "-      synchronized (this) {",
                "-        return eventBus;",
                "-      }",
                "-    }",
                "     return eventBus;",
                "@@ -443,27 +438,21 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   private ClusterManager getClusterManager(VertxOptions options) {",
                "-    if (options.isClustered()) {",
                "-      if (options.getClusterManager() != null) {",
                "-        return options.getClusterManager();",
                "+    ClusterManager mgr = options.getClusterManager();",
                "+    if (mgr == null) {",
                "+      String clusterManagerClassName = System.getProperty(\"vertx.cluster.managerClass\");",
                "+      if (clusterManagerClassName != null) {",
                "+        // We allow specify a sys prop for the cluster manager factory which overrides ServiceLoader",
                "+        try {",
                "+          Class<?> clazz = Class.forName(clusterManagerClassName);",
                "+          mgr = (ClusterManager) clazz.newInstance();",
                "+        } catch (Exception e) {",
                "+          throw new IllegalStateException(\"Failed to instantiate \" + clusterManagerClassName, e);",
                "+        }",
                "       } else {",
                "-        ClusterManager mgr;",
                "-        String clusterManagerClassName = System.getProperty(\"vertx.cluster.managerClass\");",
                "-        if (clusterManagerClassName != null) {",
                "-          // We allow specify a sys prop for the cluster manager factory which overrides ServiceLoader",
                "-          try {",
                "-            Class<?> clazz = Class.forName(clusterManagerClassName);",
                "-            mgr = (ClusterManager) clazz.newInstance();",
                "-          } catch (Exception e) {",
                "-            throw new IllegalStateException(\"Failed to instantiate \" + clusterManagerClassName, e);",
                "-          }",
                "-        } else {",
                "-          mgr = ServiceHelper.loadFactoryOrNull(ClusterManager.class);",
                "-          if (mgr == null) {",
                "-            throw new IllegalStateException(\"No ClusterManagerFactory instances found on classpath\");",
                "-          }",
                "+        mgr = ServiceHelper.loadFactoryOrNull(ClusterManager.class);",
                "+        if (mgr == null) {",
                "+          throw new IllegalStateException(\"No ClusterManagerFactory instances found on classpath\");",
                "         }",
                "-        return mgr;",
                "       }",
                "-    } else {",
                "-      return null;",
                "     }",
                "+    return mgr;",
                "   }",
                "@@ -834,12 +823,4 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-  private HAManager haManager() {",
                "-    // If reading from different thread possibility that it's been set but not visible - so provide",
                "-    // memory barrier",
                "-    if (haManager == null && haEnabled) {",
                "-      synchronized (this) {",
                "-        return haManager;",
                "-      }",
                "-    } else {",
                "-      return haManager;",
                "-    }",
                "+  public HAManager haManager() {",
                "+    return haManager;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxInternal.java b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "index 889c2252d..170af7588 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "@@ -104,2 +104,4 @@ public interface VertxInternal extends Vertx {",
                "+  HAManager haManager();",
                "+",
                "   /**"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "src/main/java/io/vertx/core/impl/HAManager.java",
                "src/main/java/io/vertx/core/impl/VertxFactoryImpl.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java",
                "src/main/java/io/vertx/core/impl/VertxInternal.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2438": "ClusteredEventBus racy initialization - fixes #2438 - fixes #2439 #2440",
                "2439": "ClusteredEventBus racy initialization - fixes #2438 - fixes #2439 #2440"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java, src/main/java/io/vertx/core/impl/VertxInternal.java, src/main/java/io/vertx/core/impl/VertxFactoryImpl.java, src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/java/io/vertx/core/impl/HAManager.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2438, 2439",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f61422f1d664e9c5d7f9778badacac36329005f",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523877778,
            "hunks": 91,
            "message": "Time values can be specified with a time unit - fixes #2391 Signed-off-by: okou19900722<ilayan19900722@gmail.com>",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index e1b578b40..e7cd2854f 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -441,2 +441,3 @@ Sets the value of max worker execute time, in ns.",
                " +++",
                "+|[[maxWorkerExecuteTimeUnit]]`maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|-",
                " |[[multiThreaded]]`multiThreaded`|`Boolean`|",
                "@@ -2291,2 +2292,6 @@ Sets the value of max event loop execute time, in ns.",
                " +++",
                "+|[[maxEventLoopExecuteTimeUnit]]`maxEventLoopExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "++++",
                "+Set the time unit of <code>maxEventLoopExecuteTime</code>",
                "++++",
                " |[[maxWorkerExecuteTime]]`maxWorkerExecuteTime`|`Number (long)`|",
                "@@ -2295,2 +2300,6 @@ Sets the value of max worker execute time, in ns.",
                " +++",
                "+|[[maxWorkerExecuteTimeUnit]]`maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "++++",
                "+Set the time unit of <code>maxWorkerExecuteTime</code>",
                "++++",
                " |[[metricsOptions]]`metricsOptions`|`link:dataobjects.html#MetricsOptions[MetricsOptions]`|",
                "@@ -2311,2 +2320,6 @@ Set the threshold value above this, the blocked warning contains a stack trace.",
                " +++",
                "+|[[warningExceptionTimeUnit]]`warningExceptionTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "++++",
                "+Set the time unit of <code>warningExceptionTime</code>",
                "++++",
                " |[[workerPoolSize]]`workerPoolSize`|`Number (int)`|",
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index 80677da99..e2a9c9e08 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -59,2 +59,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"maxWorkerExecuteTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMaxWorkerExecuteTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"multiThreaded\":",
                "@@ -107,2 +112,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    if (obj.getMaxWorkerExecuteTimeUnit() != null) {",
                "+      json.put(\"maxWorkerExecuteTimeUnit\", obj.getMaxWorkerExecuteTimeUnit().name());",
                "+    }",
                "     json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 9df7be9af..fb0ba8bcd 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -24,2 +24,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"blockedThreadCheckIntervalUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setBlockedThreadCheckIntervalUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"clusterHost\":",
                "@@ -94,2 +99,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"maxEventLoopExecuteTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMaxEventLoopExecuteTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"maxWorkerExecuteTime\":",
                "@@ -99,2 +109,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"maxWorkerExecuteTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMaxWorkerExecuteTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"metricsOptions\":",
                "@@ -119,2 +134,7 @@ import io.vertx.core.json.JsonArray;",
                "           break;",
                "+        case \"warningExceptionTimeUnit\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setWarningExceptionTimeUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "         case \"workerPoolSize\":",
                "@@ -137,2 +157,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "+    if (obj.getBlockedThreadCheckIntervalUnit() != null) {",
                "+      json.put(\"blockedThreadCheckIntervalUnit\", obj.getBlockedThreadCheckIntervalUnit().name());",
                "+    }",
                "     if (obj.getClusterHost() != null) {",
                "@@ -159,3 +182,9 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "+    if (obj.getMaxEventLoopExecuteTimeUnit() != null) {",
                "+      json.put(\"maxEventLoopExecuteTimeUnit\", obj.getMaxEventLoopExecuteTimeUnit().name());",
                "+    }",
                "     json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    if (obj.getMaxWorkerExecuteTimeUnit() != null) {",
                "+      json.put(\"maxWorkerExecuteTimeUnit\", obj.getMaxWorkerExecuteTimeUnit().name());",
                "+    }",
                "     if (obj.getMetricsOptions() != null) {",
                "@@ -166,2 +195,5 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "+    if (obj.getWarningExceptionTimeUnit() != null) {",
                "+      json.put(\"warningExceptionTimeUnit\", obj.getWarningExceptionTimeUnit().name());",
                "+    }",
                "     json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "diff --git a/src/main/java/examples/CoreExamples.java b/src/main/java/examples/CoreExamples.java",
                "index 198f9e526..780c7e48b 100644",
                "--- a/src/main/java/examples/CoreExamples.java",
                "+++ b/src/main/java/examples/CoreExamples.java",
                "@@ -29,2 +29,3 @@ import io.vertx.core.net.SocketAddress;",
                " import java.util.Arrays;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -100,5 +101,6 @@ public class CoreExamples {",
                "     // 2 minutes",
                "-    long maxExecuteTime = 120000;",
                "+    long maxExecuteTime = 2;",
                "+    TimeUnit maxExecuteTimeUnit = TimeUnit.SECONDS;",
                "-    WorkerExecutor executor = vertx.createSharedWorkerExecutor(\"my-worker-pool\", poolSize, maxExecuteTime);",
                "+    WorkerExecutor executor = vertx.createSharedWorkerExecutor(\"my-worker-pool\", poolSize, maxExecuteTime, maxExecuteTimeUnit);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/DeploymentOptions.java b/src/main/java/io/vertx/core/DeploymentOptions.java",
                "index 91c4e8d3c..632d67607 100644",
                "--- a/src/main/java/io/vertx/core/DeploymentOptions.java",
                "+++ b/src/main/java/io/vertx/core/DeploymentOptions.java",
                "@@ -19,2 +19,3 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -47,2 +48,3 @@ public class DeploymentOptions {",
                "   private List<String> isolatedClasses;",
                "+  private TimeUnit maxWorkerExecuteTimeUnit;",
                "@@ -61,2 +63,3 @@ public class DeploymentOptions {",
                "     this.maxWorkerExecuteTime = VertxOptions.DEFAULT_MAX_WORKER_EXECUTE_TIME;",
                "+    this.maxWorkerExecuteTimeUnit = VertxOptions.DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT;",
                "   }",
                "@@ -80,2 +83,3 @@ public class DeploymentOptions {",
                "     setMaxWorkerExecuteTime(other.maxWorkerExecuteTime);",
                "+    this.maxWorkerExecuteTimeUnit = other.maxWorkerExecuteTimeUnit;",
                "   }",
                "@@ -327,3 +331,3 @@ public class DeploymentOptions {",
                "   /**",
                "-   * Get the value of max worker execute time, in ns.",
                "+   * Get the value of max worker execute time, in {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * <p>",
                "@@ -334,3 +338,3 @@ public class DeploymentOptions {",
                "    *",
                "-   * @return The value of max worker execute time, in ns.",
                "+   * @return The value of max worker execute time, the default value of {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit} {@code maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    */",
                "@@ -341,5 +345,7 @@ public class DeploymentOptions {",
                "   /**",
                "-   * Sets the value of max worker execute time, in ns.",
                "+   * Sets the value of max worker execute time, in {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @param maxWorkerExecuteTime the value of max worker execute time, in ns.",
                "+   * @param maxWorkerExecuteTime the value of max worker execute time, in in {@link DeploymentOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -354,2 +360,19 @@ public class DeploymentOptions {",
                "+  /**",
                "+   * @return the time unit of {@code maxWorkerExecuteTime}",
                "+   */",
                "+  public TimeUnit getMaxWorkerExecuteTimeUnit() {",
                "+    return maxWorkerExecuteTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code maxWorkerExecuteTime}",
                "+   * @param maxWorkerExecuteTimeUnit the time unit of {@code maxWorkerExecuteTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public DeploymentOptions setMaxWorkerExecuteTimeUnit(TimeUnit maxWorkerExecuteTimeUnit) {",
                "+    this.maxWorkerExecuteTimeUnit = maxWorkerExecuteTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/Starter.java b/src/main/java/io/vertx/core/Starter.java",
                "index 0559be61a..2e71c931c 100644",
                "--- a/src/main/java/io/vertx/core/Starter.java",
                "+++ b/src/main/java/io/vertx/core/Starter.java",
                "@@ -382,2 +382,4 @@ public class Starter {",
                "             arg = Boolean.valueOf(propVal);",
                "+          } else if (argType.isEnum()){",
                "+            arg = Enum.valueOf((Class<? extends Enum>)argType, propVal);",
                "           } else {",
                "diff --git a/src/main/java/io/vertx/core/Vertx.java b/src/main/java/io/vertx/core/Vertx.java",
                "index fc504b728..f90a9207f 100644",
                "--- a/src/main/java/io/vertx/core/Vertx.java",
                "+++ b/src/main/java/io/vertx/core/Vertx.java",
                "@@ -41,2 +41,3 @@ import io.vertx.core.streams.ReadStream;",
                " import java.util.Set;",
                "+import java.util.concurrent.TimeUnit;",
                " import java.util.function.Supplier;",
                "@@ -546,2 +547,7 @@ public interface Vertx extends Measured {",
                "+  /**",
                "+   * Like {@link #createSharedWorkerExecutor(String, int, long, TimeUnit)} but with the {@link TimeUnit#NANOSECONDS ns unit}.",
                "+   */",
                "+  WorkerExecutor createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime);",
                "+",
                "   /**",
                "@@ -551,3 +557,3 @@ public interface Vertx extends Measured {",
                "    * This method can be called mutiple times with the same {@code name}. Executors with the same name will share",
                "-   * the same worker pool. The worker pool size and max execute time are set when the worker pool is created and",
                "+   * the same worker pool. The worker pool size , max execute time and unit of max execute time are set when the worker pool is created and",
                "    * won't change after.<p>",
                "@@ -558,6 +564,7 @@ public interface Vertx extends Measured {",
                "    * @param poolSize the size of the pool",
                "-   * @param maxExecuteTime the value of max worker execute time, in ns",
                "+   * @param maxExecuteTime the value of max worker execute time",
                "+   * @param maxExecuteTimeUnit the value of unit of max worker execute time",
                "    * @return the named worker executor",
                "    */",
                "-  WorkerExecutor createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime);",
                "+  WorkerExecutor createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime, TimeUnit maxExecuteTimeUnit);",
                "diff --git a/src/main/java/io/vertx/core/VertxOptions.java b/src/main/java/io/vertx/core/VertxOptions.java",
                "index 1a45b4f28..062726e67 100644",
                "--- a/src/main/java/io/vertx/core/VertxOptions.java",
                "+++ b/src/main/java/io/vertx/core/VertxOptions.java",
                "@@ -22,2 +22,3 @@ import io.vertx.core.spi.cluster.ClusterManager;",
                " import java.util.Objects;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -88,2 +89,7 @@ public class VertxOptions {",
                "+  /**",
                "+   * The default value of blocked thread check interval unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT = TimeUnit.MILLISECONDS;",
                "+",
                "   /**",
                "@@ -93,2 +99,7 @@ public class VertxOptions {",
                "+  /**",
                "+   * The default value of max event loop execute time unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT = TimeUnit.NANOSECONDS;",
                "+",
                "   /**",
                "@@ -98,2 +109,7 @@ public class VertxOptions {",
                "+  /**",
                "+   * The default value of max worker execute time unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT = TimeUnit.NANOSECONDS;",
                "+",
                "   /**",
                "@@ -128,3 +144,8 @@ public class VertxOptions {",
                "    */",
                "-  private static final long DEFAULT_WARNING_EXCEPTION_TIME = 5L * 1000 * 1000000;",
                "+  private static final long DEFAULT_WARNING_EXCEPTION_TIME = TimeUnit.SECONDS.toNanos(5);",
                "+",
                "+  /**",
                "+   * The default value of warning exception time unit = TimeUnit.NANOSECONDS",
                "+   */",
                "+  public static final TimeUnit DEFAULT_WARNING_EXCEPTION_TIME_UNIT = TimeUnit.NANOSECONDS;",
                "@@ -146,2 +167,6 @@ public class VertxOptions {",
                "   private boolean preferNativeTransport = DEFAULT_PREFER_NATIVE_TRANSPORT;",
                "+  private TimeUnit maxEventLoopExecuteTimeUnit = DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT;",
                "+  private TimeUnit maxWorkerExecuteTimeUnit = DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT;",
                "+  private TimeUnit warningExceptionTimeUnit = DEFAULT_WARNING_EXCEPTION_TIME_UNIT;",
                "+  private TimeUnit blockedThreadCheckIntervalUnit = DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT;",
                "@@ -174,2 +199,6 @@ public class VertxOptions {",
                "     this.fileResolverCachingEnabled = other.fileResolverCachingEnabled;",
                "+    this.maxEventLoopExecuteTimeUnit = other.maxEventLoopExecuteTimeUnit;",
                "+    this.maxWorkerExecuteTimeUnit = other.maxWorkerExecuteTimeUnit;",
                "+    this.warningExceptionTimeUnit = other.warningExceptionTimeUnit;",
                "+    this.blockedThreadCheckIntervalUnit = other.blockedThreadCheckIntervalUnit;",
                "   }",
                "@@ -383,7 +412,9 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the value of blocked thread check period, in ms.",
                "+   * Get the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "    * <p>",
                "    * This setting determines how often Vert.x will check whether event loop threads are executing for too long.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit} is {@link TimeUnit#MILLISECONDS}.",
                "    *",
                "-   * @return the value of blocked thread check period, in ms.",
                "+   * @return the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "    */",
                "@@ -394,5 +425,7 @@ public class VertxOptions {",
                "   /**",
                "-   * Sets the value of blocked thread check period, in ms.",
                "+   * Sets the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit} is {@link TimeUnit#MILLISECONDS}",
                "    *",
                "-   * @param blockedThreadCheckInterval the value of blocked thread check period, in ms.",
                "+   * @param blockedThreadCheckInterval the value of blocked thread check period, in {@link VertxOptions#setBlockedThreadCheckIntervalUnit blockedThreadCheckIntervalUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -408,3 +441,3 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the value of max event loop execute time, in ns.",
                "+   * Get the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "    * <p>",
                "@@ -414,4 +447,6 @@ public class VertxOptions {",
                "    * holy Event Loop.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @return the value of max event loop execute time, in ns.",
                "+   * @return the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "    */",
                "@@ -422,5 +457,7 @@ public class VertxOptions {",
                "   /**",
                "-   * Sets the value of max event loop execute time, in ns.",
                "+   * Sets the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @param maxEventLoopExecuteTime the value of max event loop execute time, in ns.",
                "+   * @param maxEventLoopExecuteTime the value of max event loop execute time, in {@link VertxOptions#setMaxEventLoopExecuteTimeUnit maxEventLoopExecuteTimeUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -436,3 +473,3 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the value of max worker execute time, in ns.",
                "+   * Get the value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * <p>",
                "@@ -442,4 +479,6 @@ public class VertxOptions {",
                "    * can be blocked longer than event loop threads, they shouldn't be blocked for long periods of time.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @return The value of max worker execute time, in ns.",
                "+   * @return The value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    */",
                "@@ -450,5 +489,7 @@ public class VertxOptions {",
                "   /**",
                "-   * Sets the value of max worker execute time, in ns.",
                "+   * Sets the value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "-   * @param maxWorkerExecuteTime the value of max worker execute time, in ns.",
                "+   * @param maxWorkerExecuteTime the value of max worker execute time, in {@link VertxOptions#setMaxWorkerExecuteTimeUnit maxWorkerExecuteTimeUnit}.",
                "    * @return a reference to this, so the API can be used fluently",
                "@@ -600,3 +641,5 @@ public class VertxOptions {",
                "   /**",
                "-   * Get the threshold value above this, the blocked warning contains a stack trace.",
                "+   * Get the threshold value above this, the blocked warning contains a stack trace. in {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit}.",
                "+   * <p>",
                "+   * The default value of {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "@@ -609,3 +652,4 @@ public class VertxOptions {",
                "   /**",
                "-   * Set the threshold value above this, the blocked warning contains a stack trace.",
                "+   * Set the threshold value above this, the blocked warning contains a stack trace. in {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit}.",
                "+   * The default value of {@link VertxOptions#setWarningExceptionTimeUnit warningExceptionTimeUnit} is {@link TimeUnit#NANOSECONDS}",
                "    *",
                "@@ -695,2 +739,74 @@ public class VertxOptions {",
                "+  /**",
                "+   * @return the time unit of {@code maxEventLoopExecuteTime}",
                "+   */",
                "+  public TimeUnit getMaxEventLoopExecuteTimeUnit() {",
                "+    return maxEventLoopExecuteTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code maxEventLoopExecuteTime}.",
                "+   *",
                "+   * @param maxEventLoopExecuteTimeUnit the time unit of {@code maxEventLoopExecuteTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setMaxEventLoopExecuteTimeUnit(TimeUnit maxEventLoopExecuteTimeUnit) {",
                "+    this.maxEventLoopExecuteTimeUnit = maxEventLoopExecuteTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the time unit of {@code maxWorkerExecuteTime}",
                "+   */",
                "+  public TimeUnit getMaxWorkerExecuteTimeUnit() {",
                "+    return maxWorkerExecuteTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code maxWorkerExecuteTime}.",
                "+   *",
                "+   * @param maxWorkerExecuteTimeUnit the time unit of {@code maxWorkerExecuteTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setMaxWorkerExecuteTimeUnit(TimeUnit maxWorkerExecuteTimeUnit) {",
                "+    this.maxWorkerExecuteTimeUnit = maxWorkerExecuteTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the time unit of {@code warningExceptionTime}",
                "+   */",
                "+  public TimeUnit getWarningExceptionTimeUnit() {",
                "+    return warningExceptionTimeUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code warningExceptionTime}.",
                "+   *",
                "+   * @param warningExceptionTimeUnit the time unit of {@code warningExceptionTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setWarningExceptionTimeUnit(TimeUnit warningExceptionTimeUnit) {",
                "+    this.warningExceptionTimeUnit = warningExceptionTimeUnit;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the time unit of {@code blockedThreadCheckInterval}",
                "+   */",
                "+  public TimeUnit getBlockedThreadCheckIntervalUnit() {",
                "+    return blockedThreadCheckIntervalUnit;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the time unit of {@code blockedThreadCheckInterval}.",
                "+   *",
                "+   * @param blockedThreadCheckIntervalUnit the time unit of {@code warningExceptionTime}",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public VertxOptions setBlockedThreadCheckIntervalUnit(TimeUnit blockedThreadCheckIntervalUnit) {",
                "+    this.blockedThreadCheckIntervalUnit = blockedThreadCheckIntervalUnit;",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "@@ -706,4 +822,7 @@ public class VertxOptions {",
                "     if (blockedThreadCheckInterval != that.blockedThreadCheckInterval) return false;",
                "+    if (blockedThreadCheckIntervalUnit != that.blockedThreadCheckIntervalUnit) return false;",
                "     if (maxEventLoopExecuteTime != that.maxEventLoopExecuteTime) return false;",
                "+    if (maxEventLoopExecuteTimeUnit != that.maxEventLoopExecuteTimeUnit) return false;",
                "     if (maxWorkerExecuteTime != that.maxWorkerExecuteTime) return false;",
                "+    if (maxWorkerExecuteTimeUnit != that.maxWorkerExecuteTimeUnit) return false;",
                "     if (haEnabled != that.haEnabled) return false;",
                "@@ -711,2 +830,3 @@ public class VertxOptions {",
                "     if (warningExceptionTime != that.warningExceptionTime) return false;",
                "+    if (warningExceptionTimeUnit != that.warningExceptionTimeUnit) return false;",
                "     if (clusterManager != null ? !clusterManager.equals(that.clusterManager) : that.clusterManager != null)",
                "@@ -741,2 +861,6 @@ public class VertxOptions {",
                "     result = 31 * result + (int) (warningExceptionTime ^ (warningExceptionTime >>> 32));",
                "+    result = 31 * result + (maxEventLoopExecuteTimeUnit != null ? maxEventLoopExecuteTimeUnit.hashCode() : 0);",
                "+    result = 31 * result + (maxWorkerExecuteTimeUnit != null ? maxWorkerExecuteTimeUnit.hashCode() : 0);",
                "+    result = 31 * result + (warningExceptionTimeUnit != null ? warningExceptionTimeUnit.hashCode() : 0);",
                "+    result = 31 * result + (blockedThreadCheckIntervalUnit != null ? blockedThreadCheckIntervalUnit.hashCode() : 0);",
                "     return result;",
                "@@ -750,4 +874,7 @@ public class VertxOptions {",
                "         \", internalBlockingPoolSize=\" + internalBlockingPoolSize +",
                "+        \", blockedThreadCheckIntervalUnit=\" + blockedThreadCheckIntervalUnit +",
                "         \", blockedThreadCheckInterval=\" + blockedThreadCheckInterval +",
                "+        \", maxEventLoopExecuteTimeUnit=\" + maxEventLoopExecuteTimeUnit +",
                "         \", maxEventLoopExecuteTime=\" + maxEventLoopExecuteTime +",
                "+        \", maxWorkerExecuteTimeUnit=\" + maxWorkerExecuteTimeUnit +",
                "         \", maxWorkerExecuteTime=\" + maxWorkerExecuteTime +",
                "@@ -763,2 +890,3 @@ public class VertxOptions {",
                "         \", eventbus=\" + eventBusOptions.toJson() +",
                "+        \", warningExceptionTimeUnit=\" + warningExceptionTimeUnit +",
                "         \", warningExceptionTime=\" + warningExceptionTime +",
                "diff --git a/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java b/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "index 781a7d84d..fc545fa49 100644",
                "--- a/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "+++ b/src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "@@ -21,2 +21,3 @@ import java.util.TimerTask;",
                " import java.util.WeakHashMap;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -33,3 +34,3 @@ public class BlockedThreadChecker {",
                "-  BlockedThreadChecker(long interval, long warningExceptionTime) {",
                "+  BlockedThreadChecker(long interval, TimeUnit intervalUnit, long warningExceptionTime, TimeUnit warningExceptionTimeUnit) {",
                "     timer = new Timer(\"vertx-blocked-thread-checker\", true);",
                "@@ -44,5 +45,7 @@ public class BlockedThreadChecker {",
                "             final long timeLimit = thread.getMaxExecTime();",
                "-            if (execStart != 0 && dur > timeLimit) {",
                "-              final String message = \"Thread \" + thread + \" has been blocked for \" + (dur / 1000000) + \" ms, time limit is \" + (timeLimit / 1000000);",
                "-              if (dur <= warningExceptionTime) {",
                "+            TimeUnit maxExecTimeUnit = thread.getMaxExecTimeUnit();",
                "+            long val = maxExecTimeUnit.convert(dur, TimeUnit.NANOSECONDS);",
                "+            if (execStart != 0 && val >= timeLimit) {",
                "+              final String message = \"Thread \" + thread + \" has been blocked for \" + (dur / 1_000_000) + \" ms, time limit is \" + TimeUnit.MILLISECONDS.convert(timeLimit, maxExecTimeUnit) + \" ms\";",
                "+              if (warningExceptionTimeUnit.convert(dur, TimeUnit.NANOSECONDS) <= warningExceptionTime) {",
                "                 log.warn(message);",
                "@@ -57,3 +60,3 @@ public class BlockedThreadChecker {",
                "       }",
                "-    }, interval, interval);",
                "+    }, intervalUnit.toMillis(interval), intervalUnit.toMillis(interval));",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/impl/DeploymentManager.java b/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "index 48d676a13..14d7efb09 100644",
                "--- a/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "+++ b/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "@@ -469,3 +469,3 @@ public class DeploymentManager {",
                "     for (Verticle verticle: verticles) {",
                "-      WorkerExecutorInternal workerExec = poolName != null ? vertx.createSharedWorkerExecutor(poolName, options.getWorkerPoolSize(), options.getMaxWorkerExecuteTime()) : null;",
                "+      WorkerExecutorInternal workerExec = poolName != null ? vertx.createSharedWorkerExecutor(poolName, options.getWorkerPoolSize(), options.getMaxWorkerExecuteTime(), options.getMaxWorkerExecuteTimeUnit()) : null;",
                "       WorkerPool pool = workerExec != null ? workerExec.getPool() : null;",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index 91f01eed3..c07a2afa9 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -145,2 +145,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   private final long defaultWorkerMaxExecTime;",
                "+  private final TimeUnit defaultWorkerMaxExecTimeUnit;",
                "   private final CloseHooks closeHooks;",
                "@@ -164,6 +165,6 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     closeHooks = new CloseHooks(log);",
                "-    checker = new BlockedThreadChecker(options.getBlockedThreadCheckInterval(), options.getWarningExceptionTime());",
                "-    eventLoopThreadFactory = new VertxThreadFactory(\"vert.x-eventloop-thread-\", checker, false, options.getMaxEventLoopExecuteTime());",
                "+    checker = new BlockedThreadChecker(options.getBlockedThreadCheckInterval(), options.getBlockedThreadCheckIntervalUnit(), options.getWarningExceptionTime(), options.getWarningExceptionTimeUnit());",
                "+    eventLoopThreadFactory = new VertxThreadFactory(\"vert.x-eventloop-thread-\", checker, false, options.getMaxEventLoopExecuteTime(), options.getMaxEventLoopExecuteTimeUnit());",
                "     eventLoopGroup = transport.eventLoopGroup(options.getEventLoopPoolSize(), eventLoopThreadFactory, NETTY_IO_RATIO);",
                "-    ThreadFactory acceptorEventLoopThreadFactory = new VertxThreadFactory(\"vert.x-acceptor-thread-\", checker, false, options.getMaxEventLoopExecuteTime());",
                "+    ThreadFactory acceptorEventLoopThreadFactory = new VertxThreadFactory(\"vert.x-acceptor-thread-\", checker, false, options.getMaxEventLoopExecuteTime(), options.getMaxEventLoopExecuteTimeUnit());",
                "     // The acceptor event loop thread needs to be from a different pool otherwise can get lags in accepted connections",
                "@@ -175,6 +176,6 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     ExecutorService workerExec = Executors.newFixedThreadPool(options.getWorkerPoolSize(),",
                "-        new VertxThreadFactory(\"vert.x-worker-thread-\", checker, true, options.getMaxWorkerExecuteTime()));",
                "+        new VertxThreadFactory(\"vert.x-worker-thread-\", checker, true, options.getMaxWorkerExecuteTime(), options.getMaxWorkerExecuteTimeUnit()));",
                "     PoolMetrics workerPoolMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", \"vert.x-worker-thread\", options.getWorkerPoolSize()) : null;",
                "     ExecutorService internalBlockingExec = Executors.newFixedThreadPool(options.getInternalBlockingPoolSize(),",
                "-        new VertxThreadFactory(\"vert.x-internal-blocking-\", checker, true, options.getMaxWorkerExecuteTime()));",
                "+        new VertxThreadFactory(\"vert.x-internal-blocking-\", checker, true, options.getMaxWorkerExecuteTime(), options.getMaxWorkerExecuteTimeUnit()));",
                "     PoolMetrics internalBlockingPoolMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", \"vert.x-internal-blocking\", options.getInternalBlockingPoolSize()) : null;",
                "@@ -185,2 +186,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     defaultWorkerMaxExecTime = options.getMaxWorkerExecuteTime();",
                "+    defaultWorkerMaxExecTimeUnit = options.getMaxWorkerExecuteTimeUnit();",
                "@@ -1024,2 +1026,7 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   public synchronized WorkerExecutorImpl createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime) {",
                "+    return createSharedWorkerExecutor(name, poolSize, maxExecuteTime, TimeUnit.NANOSECONDS);",
                "+  }",
                "+",
                "+  @Override",
                "+  public synchronized WorkerExecutorImpl createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime, TimeUnit maxExecuteTimeUnit) {",
                "     if (poolSize < 1) {",
                "@@ -1032,3 +1039,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     if (sharedWorkerPool == null) {",
                "-      ExecutorService workerExec = Executors.newFixedThreadPool(poolSize, new VertxThreadFactory(name + \"-\", checker, true, maxExecuteTime));",
                "+      ExecutorService workerExec = Executors.newFixedThreadPool(poolSize, new VertxThreadFactory(name + \"-\", checker, true, maxExecuteTime, maxExecuteTimeUnit));",
                "       PoolMetrics workerMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", name, poolSize) : null;",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxInternal.java b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "index 170af7588..c44ef08f9 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "@@ -31,2 +31,3 @@ import java.util.Map;",
                " import java.util.concurrent.ExecutorService;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -83,2 +84,5 @@ public interface VertxInternal extends Vertx {",
                "+  @Override",
                "+  WorkerExecutorInternal createSharedWorkerExecutor(String name, int poolSize, long maxExecuteTime, TimeUnit maxExecuteTimeUnit);",
                "+",
                "   void simulateKill();",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxThread.java b/src/main/java/io/vertx/core/impl/VertxThread.java",
                "index f472b2d4e..5d22b4891 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxThread.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxThread.java",
                "@@ -15,2 +15,4 @@ import io.netty.util.concurrent.FastThreadLocalThread;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                " /**",
                "@@ -22,2 +24,3 @@ public final class VertxThread extends FastThreadLocalThread {",
                "   private final long maxExecTime;",
                "+  private final TimeUnit maxExecTimeUnit;",
                "   private long execStart;",
                "@@ -25,3 +28,3 @@ public final class VertxThread extends FastThreadLocalThread {",
                "-  public VertxThread(Runnable target, String name, boolean worker, long maxExecTime) {",
                "+  public VertxThread(Runnable target, String name, boolean worker, long maxExecTime, TimeUnit maxExecTimeUnit) {",
                "     super(target, name);",
                "@@ -29,2 +32,3 @@ public final class VertxThread extends FastThreadLocalThread {",
                "     this.maxExecTime = maxExecTime;",
                "+    this.maxExecTimeUnit = maxExecTimeUnit;",
                "   }",
                "@@ -58,2 +62,6 @@ public final class VertxThread extends FastThreadLocalThread {",
                "   }",
                "+",
                "+  public TimeUnit getMaxExecTimeUnit() {",
                "+    return maxExecTimeUnit;",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxThreadFactory.java b/src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "index 3450d5eac..dc4d0c781 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.impl;",
                "+import io.vertx.core.VertxOptions;",
                "+",
                " import java.util.Map;",
                "@@ -16,2 +18,3 @@ import java.util.WeakHashMap;",
                " import java.util.concurrent.ThreadFactory;",
                "+import java.util.concurrent.TimeUnit;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "@@ -37,4 +40,5 @@ public class VertxThreadFactory implements ThreadFactory {",
                "   private final long maxExecTime;",
                "+  private final TimeUnit maxExecTimeUnit;",
                "-  VertxThreadFactory(String prefix, BlockedThreadChecker checker, boolean worker, long maxExecTime) {",
                "+  VertxThreadFactory(String prefix, BlockedThreadChecker checker, boolean worker, long maxExecTime, TimeUnit maxExecTimeUnit) {",
                "     this.prefix = prefix;",
                "@@ -43,2 +47,3 @@ public class VertxThreadFactory implements ThreadFactory {",
                "     this.maxExecTime = maxExecTime;",
                "+    this.maxExecTimeUnit = maxExecTimeUnit;",
                "   }",
                "@@ -54,3 +59,3 @@ public class VertxThreadFactory implements ThreadFactory {",
                "   public Thread newThread(Runnable runnable) {",
                "-    VertxThread t = new VertxThread(runnable, prefix + threadCount.getAndIncrement(), worker, maxExecTime);",
                "+    VertxThread t = new VertxThread(runnable, prefix + threadCount.getAndIncrement(), worker, maxExecTime, maxExecTimeUnit);",
                "     // Vert.x threads are NOT daemons - we want them to prevent JVM exit so embededd user doesn't",
                "diff --git a/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java b/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java",
                "index cb59f53a6..79deb1372 100644",
                "--- a/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java",
                "+++ b/src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java",
                "@@ -278,2 +278,4 @@ public class BareCommand extends ClasspathHandler {",
                "             arg = Boolean.valueOf(propVal);",
                "+          } else if (argType.isEnum()){",
                "+            arg = Enum.valueOf((Class<? extends Enum>)argType, propVal);",
                "           } else {"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/java/examples/CoreExamples.java",
                "src/main/java/io/vertx/core/DeploymentOptions.java",
                "src/main/java/io/vertx/core/Starter.java",
                "src/main/java/io/vertx/core/Vertx.java",
                "src/main/java/io/vertx/core/VertxOptions.java",
                "src/main/java/io/vertx/core/impl/BlockedThreadChecker.java",
                "src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java",
                "src/main/java/io/vertx/core/impl/VertxInternal.java",
                "src/main/java/io/vertx/core/impl/VertxThread.java",
                "src/main/java/io/vertx/core/impl/VertxThreadFactory.java",
                "src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2391": "closed #2393 fix typo of comment and support custom time unit of max execute time #2394"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/Starter.java, src/main/java/io/vertx/core/impl/BlockedThreadChecker.java, src/main/java/io/vertx/core/DeploymentOptions.java, src/main/java/io/vertx/core/Vertx.java, src/main/java/io/vertx/core/impl/VertxInternal.java, src/main/java/io/vertx/core/impl/VertxThread.java, src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/java/io/vertx/core/impl/VertxThreadFactory.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/java/io/vertx/core/impl/DeploymentManager.java, src/main/java/io/vertx/core/impl/launcher/commands/BareCommand.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/java/io/vertx/core/VertxOptions.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2391",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "47d15d66dcd56381ee07754545258d3c48537784",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526472096,
            "hunks": 17,
            "message": "DnsClient: no option to enable the netty logger - fixes #2445 (#2451) * implements #2445 - DnsClient: no option to enable the netty logger Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2445 - incorporated feedback from vietj Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2445 - the new method TestUtils.testLogging() is now used in DatagramTest, HttpTest and NetTest",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index 8a1ff5914..7205835fd 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -19,2 +19,7 @@ public class DnsClientOptionsConverter {",
                "           break;",
                "+        case \"logActivity\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setLogActivity((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "         case \"port\":",
                "@@ -41,2 +46,3 @@ public class DnsClientOptionsConverter {",
                "     }",
                "+    json.put(\"logActivity\", obj.getLogActivity());",
                "     json.put(\"port\", obj.getPort());",
                "diff --git a/src/main/java/io/vertx/core/dns/DnsClientOptions.java b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "index f03ec07ed..824641d50 100644",
                "--- a/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "@@ -40,2 +40,7 @@ public class DnsClientOptions {",
                "+  /**",
                "+   * The default log enabled = false",
                "+   */",
                "+  public static final boolean DEFAULT_LOG_ENABLED = false;",
                "+",
                "   private int port = DEFAULT_PORT;",
                "@@ -43,2 +48,3 @@ public class DnsClientOptions {",
                "   private long queryTimeout = DEFAULT_QUERY_TIMEOUT;",
                "+  private boolean logActivity = DEFAULT_LOG_ENABLED;",
                "@@ -55,2 +61,3 @@ public class DnsClientOptions {",
                "     queryTimeout = other.queryTimeout;",
                "+    logActivity = other.logActivity;",
                "   }",
                "@@ -72,2 +79,5 @@ public class DnsClientOptions {",
                "   public DnsClientOptions setPort(int port) {",
                "+    if (port<1 && port!=DEFAULT_PORT) {",
                "+      throw new IllegalArgumentException(\"DNS client port \" + port + \" must be > 0 or equal to DEFAULT_PORT\");",
                "+    }",
                "     this.port = port;",
                "@@ -116,2 +126,20 @@ public class DnsClientOptions {",
                "+  /**",
                "+   * @return {@code true} when network activity logging is enabled",
                "+   */",
                "+  public boolean getLogActivity() {",
                "+    return logActivity;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "+   *",
                "+   * @param logActivity true for logging the network activity",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public DnsClientOptions setLogActivity(boolean logActivity) {",
                "+    this.logActivity = logActivity;",
                "+    return this;",
                "+  }",
                "+",
                "   public JsonObject toJson() {",
                "diff --git a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "index a124c7e97..720e1b488 100644",
                "--- a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "@@ -28,2 +28,3 @@ import io.netty.handler.codec.dns.DnsResponse;",
                " import io.netty.handler.codec.dns.DnsSection;",
                "+import io.netty.handler.logging.LoggingHandler;",
                " import io.netty.util.collection.IntObjectHashMap;",
                "@@ -36,2 +37,3 @@ import io.vertx.core.VertxException;",
                " import io.vertx.core.dns.DnsClient;",
                "+import io.vertx.core.dns.DnsClientOptions;",
                " import io.vertx.core.dns.DnsException;",
                "@@ -68,9 +70,10 @@ public final class DnsClientImpl implements DnsClient {",
                "   private final DatagramChannel channel;",
                "-  private final long timeoutMillis;",
                "+  private final DnsClientOptions options;",
                "-  public DnsClientImpl(VertxInternal vertx, int port, String host, long timeoutMillis) {",
                "-    if (timeoutMillis < 0) {",
                "-      throw new IllegalArgumentException(\"DNS client timeout \" + timeoutMillis + \" must be > 0\");",
                "-    }",
                "+  public DnsClientImpl(VertxInternal vertx, DnsClientOptions options) {",
                "+    Objects.requireNonNull(options, \"no null options accepted\");",
                "+    Objects.requireNonNull(options.getHost(), \"no null host accepted\");",
                "+    this.options = new DnsClientOptions(options);",
                "+    ",
                "     ContextInternal creatingContext = vertx.getContext();",
                "@@ -80,5 +83,4 @@ public final class DnsClientImpl implements DnsClient {",
                "-    this.dnsServer = new InetSocketAddress(host, port);",
                "+    this.dnsServer = new InetSocketAddress(options.getHost(), options.getPort());",
                "     this.vertx = vertx;",
                "-    this.timeoutMillis = timeoutMillis;",
                "@@ -91,2 +93,5 @@ public final class DnsClientImpl implements DnsClient {",
                "     actualCtx.nettyEventLoop().register(channel);",
                "+    if (options.getLogActivity()) {",
                "+      channel.pipeline().addLast(\"logging\", new LoggingHandler());",
                "+    }",
                "     channel.pipeline().addLast(new DatagramDnsQueryEncoder());",
                "@@ -303,3 +308,3 @@ public final class DnsClientImpl implements DnsClient {",
                "       inProgressMap.put(msg.id(), this);",
                "-      timerID = vertx.setTimer(timeoutMillis, id -> {",
                "+      timerID = vertx.setTimer(options.getQueryTimeout(), id -> {",
                "         timerID = -1;",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index 685031ad3..91f01eed3 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -398,3 +398,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   public DnsClient createDnsClient(int port, String host) {",
                "-    return new DnsClientImpl(this, port, host, DnsClientOptions.DEFAULT_QUERY_TIMEOUT);",
                "+    return createDnsClient(new DnsClientOptions().setHost(host).setPort(port));",
                "   }",
                "@@ -413,6 +413,8 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "       InetSocketAddress address = provider.nameServerAddresses().get(0);",
                "-      host = address.getAddress().getHostAddress();",
                "-      port = address.getPort();",
                "+      // provide the host and port",
                "+      options = new DnsClientOptions(options)",
                "+      .setHost(address.getAddress().getHostAddress())",
                "+      .setPort(address.getPort());",
                "     }",
                "-    return new DnsClientImpl(this, port, host, options.getQueryTimeout());",
                "+    return new DnsClientImpl(this, options);",
                "   }"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2445": "",
                "2451": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java, src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2445, 2451",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "477694dda0d3377ca33c289daca3e498ff7fa224",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523863099,
            "hunks": 1,
            "message": "Remove HttpClientImpl#close method synchronization - fixes #1358",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index c5157667f..e433b1cea 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -898,3 +898,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "   @Override",
                "-  public synchronized void close() {",
                "+  public void close() {",
                "     synchronized (this) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1358": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1358",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "46b9cbfdc655c4d4e3855c875cef3b78c5635e89",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525553415,
            "hunks": 45,
            "message": "Metrics SPI should not be exposed measured instances - fixes #2430",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "index 1fae7d207..a8c967137 100644",
                "--- a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "+++ b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "@@ -77,3 +77,3 @@ public class DatagramSocketImpl implements DatagramSocket, MetricsProvider {",
                "     VertxMetrics metrics = vertx.metricsSPI();",
                "-    this.metrics = metrics != null ? metrics.createMetrics(this, options) : null;",
                "+    this.metrics = metrics != null ? metrics.createDatagramSocketMetrics(options) : null;",
                "     this.channel = channel;",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "index 1ff9a784d..162828ce4 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "@@ -65,3 +65,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     this.vertx = vertx;",
                "-    this.metrics = metrics != null ? metrics.createMetrics(this) : null;",
                "+    this.metrics = metrics != null ? metrics.createEventBusMetrics() : null;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index 04aff3251..9c9e24e08 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -45,3 +45,2 @@ import java.util.List;",
                " import java.util.Objects;",
                "-import java.util.function.Consumer;",
                " import java.util.function.Function;",
                "@@ -116,3 +115,3 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "     this.vertx = vertx;",
                "-    this.metrics = vertx.metricsSPI() != null ? vertx.metricsSPI().createMetrics(this, options) : null;",
                "+    this.metrics = vertx.metricsSPI() != null ? vertx.metricsSPI().createHttpClientMetrics(options) : null;",
                "     this.options = new HttpClientOptions(options);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 01f7384aa..8f9a921c0 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -224,3 +224,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "   }",
                "-    ",
                "+",
                "   public synchronized HttpServer listen(SocketAddress address, Handler<AsyncResult<HttpServer>> listenHandler) {",
                "@@ -350,3 +350,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "               VertxMetrics metrics = vertx.metricsSPI();",
                "-              this.metrics = metrics != null ? metrics.createMetrics(this, address, options) : null;",
                "+              this.metrics = metrics != null ? metrics.createHttpServerMetrics(options, address) : null;",
                "             }",
                "@@ -372,3 +372,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "         VertxMetrics metrics = vertx.metricsSPI();",
                "-        this.metrics = metrics != null ? metrics.createMetrics(this, address, options) : null;",
                "+        this.metrics = metrics != null ? metrics.createHttpServerMetrics(options, address) : null;",
                "       }",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index a85529ab0..c2d309df0 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -174,6 +174,6 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "         new VertxThreadFactory(\"vert.x-worker-thread-\", checker, true, options.getMaxWorkerExecuteTime()));",
                "-    PoolMetrics workerPoolMetrics = metrics != null ? metrics.createMetrics(workerExec, \"worker\", \"vert.x-worker-thread\", options.getWorkerPoolSize()) : null;",
                "+    PoolMetrics workerPoolMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", \"vert.x-worker-thread\", options.getWorkerPoolSize()) : null;",
                "     ExecutorService internalBlockingExec = Executors.newFixedThreadPool(options.getInternalBlockingPoolSize(),",
                "         new VertxThreadFactory(\"vert.x-internal-blocking-\", checker, true, options.getMaxWorkerExecuteTime()));",
                "-    PoolMetrics internalBlockingPoolMetrics = metrics != null ? metrics.createMetrics(internalBlockingExec, \"worker\", \"vert.x-internal-blocking\", options.getInternalBlockingPoolSize()) : null;",
                "+    PoolMetrics internalBlockingPoolMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", \"vert.x-internal-blocking\", options.getInternalBlockingPoolSize()) : null;",
                "     internalBlockingPool = new WorkerPool(internalBlockingExec, internalBlockingPoolMetrics);",
                "@@ -220,7 +220,2 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "       if (ar.succeeded()) {",
                "-        if (metrics != null) {",
                "-          // If the metric provider wants to use the event bus, it cannot use it in its constructor as the event bus",
                "-          // may not be initialized yet. We invokes the eventBusInitialized so it can starts using the event bus.",
                "-          metrics.eventBusInitialized(eventBus);",
                "-        }",
                "         if (resultHandler != null) resultHandler.handle(Future.succeededFuture(this));",
                "@@ -439,3 +434,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "       if (factory != null) {",
                "-        VertxMetrics metrics = factory.metrics(this, options);",
                "+        VertxMetrics metrics = factory.metrics(options);",
                "         Objects.requireNonNull(metrics, \"The metric instance created from \" + factory + \" cannot be null\");",
                "@@ -1055,3 +1050,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "       ExecutorService workerExec = Executors.newFixedThreadPool(poolSize, new VertxThreadFactory(name + \"-\", checker, true, maxExecuteTime));",
                "-      PoolMetrics workerMetrics = metrics != null ? metrics.createMetrics(workerExec, \"worker\", name, poolSize) : null;",
                "+      PoolMetrics workerMetrics = metrics != null ? metrics.createPoolMetrics(\"worker\", name, poolSize) : null;",
                "       namedWorkerPools.put(name, sharedWorkerPool = new SharedWorkerPool(name, workerExec, workerMetrics));",
                "diff --git a/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java b/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "index 999e770b8..8dc0c50cc 100644",
                "--- a/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "+++ b/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "@@ -14,7 +14,4 @@ package io.vertx.core.metrics.impl;",
                " import io.vertx.core.Verticle;",
                "-import io.vertx.core.datagram.DatagramSocket;",
                " import io.vertx.core.datagram.DatagramSocketOptions;",
                "-import io.vertx.core.eventbus.EventBus;",
                " import io.vertx.core.eventbus.ReplyFailure;",
                "-import io.vertx.core.http.HttpClient;",
                " import io.vertx.core.http.HttpClientOptions;",
                "@@ -23,3 +20,2 @@ import io.vertx.core.http.HttpClientResponse;",
                " import io.vertx.core.http.HttpMethod;",
                "-import io.vertx.core.http.HttpServer;",
                " import io.vertx.core.http.HttpServerOptions;",
                "@@ -58,3 +54,3 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "   @Override",
                "-  public EventBusMetrics createMetrics(EventBus eventBus) {",
                "+  public EventBusMetrics createEventBusMetrics() {",
                "     return DummyEventBusMetrics.INSTANCE;",
                "@@ -63,3 +59,3 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "   @Override",
                "-  public HttpServerMetrics createMetrics(HttpServer server, SocketAddress localAddress, HttpServerOptions options) {",
                "+  public HttpServerMetrics createHttpServerMetrics(HttpServerOptions options, SocketAddress localAddress) {",
                "     return DummyHttpServerMetrics.INSTANCE;",
                "@@ -68,3 +64,3 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "   @Override",
                "-  public HttpClientMetrics createMetrics(HttpClient client, HttpClientOptions options) {",
                "+  public HttpClientMetrics createHttpClientMetrics(HttpClientOptions options) {",
                "     return DummyHttpClientMetrics.INSTANCE;",
                "@@ -73,3 +69,3 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "   @Override",
                "-  public TCPMetrics createMetrics(SocketAddress localAddress, NetServerOptions options) {",
                "+  public TCPMetrics createNetServerMetrics(NetServerOptions options, SocketAddress localAddress) {",
                "     return DummyTCPMetrics.INSTANCE;",
                "@@ -78,3 +74,3 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "   @Override",
                "-  public TCPMetrics createMetrics(NetClientOptions options) {",
                "+  public TCPMetrics createNetClientMetrics(NetClientOptions options) {",
                "     return DummyTCPMetrics.INSTANCE;",
                "@@ -83,3 +79,3 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "   @Override",
                "-  public DatagramSocketMetrics createMetrics(DatagramSocket socket, DatagramSocketOptions options) {",
                "+  public DatagramSocketMetrics createDatagramSocketMetrics(DatagramSocketOptions options) {",
                "     return DummyDatagramMetrics.INSTANCE;",
                "@@ -88,3 +84,3 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "   @Override",
                "-  public <P> PoolMetrics<?> createMetrics(P pool, String poolType, String poolName, int maxPoolSize) {",
                "+  public PoolMetrics<?> createPoolMetrics(String poolType, String poolName, int maxPoolSize) {",
                "     return DummyWorkerPoolMetrics.INSTANCE;",
                "diff --git a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "index d80359ed6..76ef51537 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "@@ -86,3 +86,3 @@ public class NetClientImpl implements MetricsProvider, NetClient {",
                "     VertxMetrics metrics = vertx.metricsSPI();",
                "-    this.metrics = metrics != null ? metrics.createMetrics(options) : null;",
                "+    this.metrics = metrics != null ? metrics.createNetClientMetrics(options) : null;",
                "     logEnabled = options.getLogActivity();",
                "diff --git a/src/main/java/io/vertx/core/net/impl/NetServerImpl.java b/src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
                "index b37a074e8..03a1418a5 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
                "@@ -231,3 +231,3 @@ public class NetServerImpl implements Closeable, MetricsProvider, NetServer {",
                "               if (metrics != null) {",
                "-                this.metrics = metrics.createMetrics(new SocketAddressImpl(id.port, id.host), options);",
                "+                this.metrics = metrics.createNetServerMetrics(options, new SocketAddressImpl(id.port, id.host));",
                "               }",
                "@@ -258,3 +258,3 @@ public class NetServerImpl implements Closeable, MetricsProvider, NetServer {",
                "         VertxMetrics metrics = vertx.metricsSPI();",
                "-        this.metrics = metrics != null ? metrics.createMetrics(new SocketAddressImpl(id.port, id.host), options) : null;",
                "+        this.metrics = metrics != null ? metrics.createNetServerMetrics(options, new SocketAddressImpl(id.port, id.host)) : null;",
                "         actualServer.handlerManager.addHandler(new Handlers(handler, exceptionHandler), listenContext);",
                "diff --git a/src/main/java/io/vertx/core/spi/VertxMetricsFactory.java b/src/main/java/io/vertx/core/spi/VertxMetricsFactory.java",
                "index 5b6b36700..267c5a5f8 100644",
                "--- a/src/main/java/io/vertx/core/spi/VertxMetricsFactory.java",
                "+++ b/src/main/java/io/vertx/core/spi/VertxMetricsFactory.java",
                "@@ -13,3 +13,2 @@ package io.vertx.core.spi;",
                "-import io.vertx.core.Vertx;",
                " import io.vertx.core.VertxOptions;",
                "@@ -30,3 +29,2 @@ public interface VertxMetricsFactory {",
                "    *",
                "-   * @param vertx the vertx instance",
                "    * @param options the metrics configuration option",
                "@@ -34,3 +32,3 @@ public interface VertxMetricsFactory {",
                "    */",
                "-  VertxMetrics metrics(Vertx vertx, VertxOptions options);",
                "+  VertxMetrics metrics(VertxOptions options);",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java b/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java",
                "index 36326c388..529dcc8c7 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java",
                "@@ -16,3 +16,2 @@ import io.vertx.core.datagram.DatagramSocket;",
                " import io.vertx.core.datagram.DatagramSocketOptions;",
                "-import io.vertx.core.eventbus.EventBus;",
                " import io.vertx.core.http.HttpClient;",
                "@@ -80,6 +79,5 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    *",
                "-   * @param eventBus the Vert.x event bus",
                "    * @return the event bus metrics SPI or {@code null} when metrics are disabled",
                "    */",
                "-  EventBusMetrics createMetrics(EventBus eventBus);",
                "+  EventBusMetrics createEventBusMetrics();",
                "@@ -95,8 +93,7 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    *",
                "-   * @param server       the Vert.x http server",
                "+   * @param options      the options used to create the {@link HttpServer}",
                "    * @param localAddress localAddress the local address the net socket is listening on",
                "-   * @param options      the options used to create the {@link io.vertx.core.http.HttpServer}",
                "    * @return the http server metrics SPI or {@code null} when metrics are disabled",
                "    */",
                "-  HttpServerMetrics<?, ?, ?> createMetrics(HttpServer server, SocketAddress localAddress, HttpServerOptions options);",
                "+  HttpServerMetrics<?, ?, ?> createHttpServerMetrics(HttpServerOptions options, SocketAddress localAddress);",
                "@@ -107,7 +104,6 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    *",
                "-   * @param client  the Vert.x http client",
                "-   * @param options the options used to create the {@link io.vertx.core.http.HttpClient}",
                "+   * @param options the options used to create the {@link HttpClient}",
                "    * @return the http client metrics SPI or {@code null} when metrics are disabled",
                "    */",
                "-  HttpClientMetrics<?, ?, ?, ?, ?> createMetrics(HttpClient client, HttpClientOptions options);",
                "+  HttpClientMetrics<?, ?, ?, ?, ?> createHttpClientMetrics(HttpClientOptions options);",
                "@@ -123,7 +119,7 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    *",
                "-   * @param localAddress localAddress the local address the net socket is listening on",
                "    * @param options      the options used to create the {@link NetServer}",
                "+   * @param localAddress localAddress the local address the net socket is listening on",
                "    * @return the net server metrics SPI or {@code null} when metrics are disabled",
                "    */",
                "-  TCPMetrics<?> createMetrics(SocketAddress localAddress, NetServerOptions options);",
                "+  TCPMetrics<?> createNetServerMetrics(NetServerOptions options, SocketAddress localAddress);",
                "@@ -137,3 +133,3 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  TCPMetrics<?> createMetrics(NetClientOptions options);",
                "+  TCPMetrics<?> createNetClientMetrics(NetClientOptions options);",
                "@@ -144,18 +140,6 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    *",
                "-   * @param socket  the Vert.x datagram socket",
                "-   * @param options the options used to create the {@link io.vertx.core.datagram.DatagramSocket}",
                "+   * @param options the options used to create the {@link DatagramSocket}",
                "    * @return the datagram metrics SPI or {@code null} when metrics are disabled",
                "    */",
                "-  DatagramSocketMetrics createMetrics(DatagramSocket socket, DatagramSocketOptions options);",
                "-",
                "-  /**",
                "-   * Metrics cannot use the event bus in their constructor as the event bus is not yet initialized. When the event",
                "-   * bus is initialized, this method is called with the event bus instance as parameter. By default, this method does",
                "-   * nothing.",
                "-   *",
                "-   * @param bus the event bus",
                "-   */",
                "-  default void eventBusInitialized(EventBus bus) {",
                "-    // Do nothing by default.",
                "-  }",
                "+  DatagramSocketMetrics createDatagramSocketMetrics(DatagramSocketOptions options);",
                "@@ -164,3 +148,2 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    *",
                "-   * @param pool the pool of resource, it can be used by the metrics implementation to gather extra statistics",
                "    * @param poolType the type of the pool e.g worker, datasource, etc..",
                "@@ -170,3 +153,3 @@ public interface VertxMetrics extends Metrics, Measured {",
                "    */",
                "-  <P> PoolMetrics<?> createMetrics(P pool, String poolType, String poolName, int maxPoolSize);",
                "+  PoolMetrics<?> createPoolMetrics(String poolType, String poolName, int maxPoolSize);",
                " }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java",
                "src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
                "src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
                "src/main/java/io/vertx/core/spi/VertxMetricsFactory.java",
                "src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2430": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/NetServerImpl.java, src/main/java/io/vertx/core/spi/VertxMetricsFactory.java, src/main/java/io/vertx/core/net/impl/NetClientImpl.java, src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/java/io/vertx/core/spi/metrics/VertxMetrics.java, src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java, src/main/java/io/vertx/core/http/impl/HttpServerImpl.java, src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java, src/main/java/io/vertx/core/http/impl/HttpClientImpl.java, src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2430",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c30be905504ca53a704f7491cebbc3d251dc04e",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526559602,
            "hunks": 2,
            "message": "DnsClient throws an exception when calling a Dns server over IpV6 (#2458) * DnsClient throws an exception when calling a Dns server over IpV6 - fixes #2456 Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * incorporated comments after review - fixes #2456 Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "index 720e1b488..2096bed9b 100644",
                "--- a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "@@ -84,2 +84,5 @@ public final class DnsClientImpl implements DnsClient {",
                "     this.dnsServer = new InetSocketAddress(options.getHost(), options.getPort());",
                "+    if (this.dnsServer.isUnresolved()) {",
                "+    \tthrow new IllegalArgumentException(\"Cannot resolve the host to a valid ip address\");",
                "+    }",
                "     this.vertx = vertx;",
                "@@ -88,3 +91,3 @@ public final class DnsClientImpl implements DnsClient {",
                "     actualCtx = vertx.getOrCreateContext();",
                "-    channel = transport.datagramChannel(InternetProtocolFamily.IPv4);",
                "+    channel = transport.datagramChannel(this.dnsServer.getAddress() instanceof Inet4Address ? InternetProtocolFamily.IPv4 : InternetProtocolFamily.IPv6);",
                "     channel.config().setOption(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2458": "",
                "2456": "DnsClient throws an exception when calling a Dns server over IpV6 #2458"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2458, 2456",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9854d3e229a88696c5c36307026b216a883e060a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529092538,
            "hunks": 59,
            "message": "HttpServer connection lifecycle rework - fixes #2508",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index 7d16ab354..bcef3b146 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -23,10 +23,3 @@ import io.netty.handler.codec.DecoderResult;",
                " import io.netty.handler.codec.TooLongFrameException;",
                "-import io.netty.handler.codec.http.DefaultFullHttpResponse;",
                "-import io.netty.handler.codec.http.HttpContent;",
                "-import io.netty.handler.codec.http.HttpObject;",
                "-import io.netty.handler.codec.http.HttpRequest;",
                "-import io.netty.handler.codec.http.HttpResponseStatus;",
                "-import io.netty.handler.codec.http.HttpUtil;",
                "-import io.netty.handler.codec.http.HttpVersion;",
                "-import io.netty.handler.codec.http.LastHttpContent;",
                "+import io.netty.handler.codec.http.*;",
                " import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;",
                "@@ -78,15 +71,7 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private static final int CHANNEL_PAUSE_QUEUE_SIZE = 5;",
                "-",
                "   private final String serverOrigin;",
                "   private final SSLHelper sslHelper;",
                "-  final HttpServerOptions options;",
                "   private WebSocketServerHandshaker handshaker;",
                "-  private final HttpServerMetrics metrics;",
                "   private boolean requestFailed;",
                "-  private Object requestMetric;",
                "-  private Handler<HttpServerRequest> requestHandler;",
                "   private Handler<ServerWebSocket> wsHandler;",
                "-  private HttpServerRequestImpl currentRequest;",
                "-  private HttpServerResponseImpl pendingResponse;",
                "   private ServerWebSocketImpl ws;",
                "@@ -95,10 +80,12 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  // (queueing == true) <=> (paused || pending.size() > 0)",
                "-  private final Deque<Object> pending = new ArrayDeque<>(8);",
                "-  private boolean paused;",
                "-  private boolean sentCheck;",
                "-  private boolean queueing;",
                "+  private HttpServerRequestImpl pendingRequest;  // tail",
                "+  private HttpServerRequestImpl pendingResponse; // head",
                "   private boolean channelPaused;",
                "-  public Http1xServerConnection(VertxInternal vertx,",
                "+  final Handler<HttpServerRequest> requestHandler;",
                "+  final HttpServerMetrics metrics;",
                "+  final boolean handle100ContinueAutomatically;",
                "+  final HttpServerOptions options;",
                "+",
                "+  Http1xServerConnection(VertxInternal vertx,",
                "                                 SSLHelper sslHelper,",
                "@@ -108,4 +95,6 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "                                 String serverOrigin,",
                "+                                HttpHandlers handlers,",
                "                                 HttpServerMetrics metrics) {",
                "     super(vertx, channel, context);",
                "+    this.requestHandler = handlers.requestHandler();",
                "     this.serverOrigin = serverOrigin;",
                "@@ -114,2 +103,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     this.metrics = metrics;",
                "+    this.handle100ContinueAutomatically = options.isHandle100ContinueAutomatically();",
                "+    exceptionHandler(handlers.exceptionHandler);",
                "   }",
                "@@ -121,6 +112,25 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  synchronized void pause() {",
                "-    if (!paused) {",
                "-      paused = true;",
                "-      queueing = true;",
                "+  synchronized void handleMessage(Object msg) {",
                "+    if (msg instanceof HttpRequest) {",
                "+      DefaultHttpRequest request = (DefaultHttpRequest) msg;",
                "+      if (request.decoderResult() != DecoderResult.SUCCESS) {",
                "+        handleError(request);",
                "+        return;",
                "+      }",
                "+      HttpServerRequestImpl req = new HttpServerRequestImpl(this, request);",
                "+      pendingRequest = req;",
                "+      if (pendingResponse == null) {",
                "+        pendingResponse = pendingRequest;",
                "+        req.handleBegin();",
                "+      } else {",
                "+        // Deferred until the current response completion",
                "+        req.pause();",
                "+        pendingResponse.appendRequest(req);",
                "+      }",
                "+    } else if (msg == LastHttpContent.EMPTY_LAST_CONTENT) {",
                "+      handleEnd();",
                "+    } else if (msg instanceof HttpContent) {",
                "+      handleContent(msg);",
                "+    } else {",
                "+      handleOther(msg);",
                "     }",
                "@@ -128,9 +138,51 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  synchronized void resume() {",
                "-    if (paused) {",
                "-      paused = false;",
                "-      if (pending.isEmpty()) {",
                "-        unsetQueueing();",
                "-      } else {",
                "-        checkNextTick();",
                "+  private void handleContent(Object msg) {",
                "+    HttpContent content = (HttpContent) msg;",
                "+    if (content.decoderResult() != DecoderResult.SUCCESS) {",
                "+      handleError(content);",
                "+      return;",
                "+    }",
                "+    Buffer buffer = Buffer.buffer(content.content());",
                "+    if (METRICS_ENABLED) {",
                "+      reportBytesRead(buffer);",
                "+    }",
                "+    pendingRequest.handleContent(buffer);",
                "+    //TODO chunk trailers",
                "+    if (content instanceof LastHttpContent) {",
                "+      handleEnd();",
                "+    }",
                "+  }",
                "+",
                "+  private void handleEnd() {",
                "+    if (METRICS_ENABLED) {",
                "+      reportRequestComplete();",
                "+    }",
                "+    HttpServerRequestImpl request = pendingRequest;",
                "+    pendingRequest = null;",
                "+    request.handleEnd();",
                "+  }",
                "+",
                "+  synchronized void responseComplete() {",
                "+    if (METRICS_ENABLED) {",
                "+      reportResponseComplete();",
                "+    }",
                "+    HttpServerRequestImpl request = pendingResponse;",
                "+    pendingResponse = null;",
                "+    HttpServerRequestImpl next = request.nextRequest();",
                "+    if (request.isEnded() && next != null) {",
                "+      // Handle pipelined request",
                "+      handleNext(next);",
                "+    }",
                "+  }",
                "+",
                "+  private void handleNext(HttpServerRequestImpl request) {",
                "+    pendingResponse = request;",
                "+    getContext().runOnContext(v -> pendingResponse.handlePipelined());",
                "+  }",
                "+",
                "+  private void handleOther(Object msg) {",
                "+    if (msg instanceof WebSocketFrameInternal) {",
                "+      WebSocketFrameInternal frame = (WebSocketFrameInternal) msg;",
                "+      if (ws != null) {",
                "+        ws.handleFrame(frame);",
                "       }",
                "@@ -139,7 +191,7 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  synchronized void handleMessage(Object msg) {",
                "-    if (queueing) {",
                "-      enqueue(msg);",
                "-    } else {",
                "-      processMessage(msg);",
                "+  @Override",
                "+  public void doPause() {",
                "+    if (!channelPaused) {",
                "+      channelPaused = true;",
                "+      super.doPause();",
                "     }",
                "@@ -147,11 +199,7 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  /**",
                "-   * Set in non queueing mode, i.e (pending.size() == 0 && !paused)",
                "-   */",
                "-  private void unsetQueueing() {",
                "-    queueing = false;",
                "+  @Override",
                "+  public void doResume() {",
                "     if (channelPaused) {",
                "-      // Resume the actual channel",
                "       channelPaused = false;",
                "-      doResume();",
                "+      super.doResume();",
                "     }",
                "@@ -159,11 +207,5 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private void enqueue(Object msg) {",
                "-    // We queue requests if paused or a request is in progress to prevent responses being written in the wrong order",
                "-    queueing = true;",
                "-    pending.add(msg);",
                "-    if (pending.size() == CHANNEL_PAUSE_QUEUE_SIZE) {",
                "-      // We pause the channel too, to prevent the queue growing too large, but we don't do this",
                "-      // until the queue reaches a certain size, to avoid pausing it too often",
                "-      doPause();",
                "-      channelPaused = true;",
                "+  private void reportBytesRead(Buffer buffer) {",
                "+    if (metrics != null) {",
                "+      bytesRead += buffer.length();",
                "     }",
                "@@ -171,16 +213,17 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  synchronized void responseComplete() {",
                "-    if (METRICS_ENABLED && metrics != null) {",
                "-      reportBytesWritten(bytesWritten);",
                "-      bytesWritten = 0;",
                "-      if (requestFailed) {",
                "-        metrics.requestReset(requestMetric);",
                "-        requestFailed = false;",
                "+  private void reportBytesWritten(Object msg) {",
                "+    if (metrics != null) {",
                "+      long bytes = getBytes(msg);",
                "+      if (bytes == -1) {",
                "+        log.warn(\"Metrics could not be updated to include bytes written because of unknown object \" + msg.getClass() + \" being written.\");",
                "       } else {",
                "-        metrics.responseEnd(requestMetric, pendingResponse);",
                "+        bytesWritten += bytes;",
                "       }",
                "     }",
                "-    pendingResponse = null;",
                "-    if (currentRequest == null && paused) {",
                "-      resume();",
                "+  }",
                "+",
                "+  private void reportRequestComplete() {",
                "+    if (metrics != null) {",
                "+      reportBytesRead(bytesRead);",
                "+      bytesRead = 0;",
                "     }",
                "@@ -188,13 +231,13 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  synchronized void requestHandlers(HttpHandlers handlers) {",
                "-    Handler<HttpServerRequest> handler = handlers.requestHandler;",
                "-    if (handlers.connectionHandler != null) {",
                "-      handler = req -> {",
                "-        requestHandler = handlers.requestHandler;",
                "-        handlers.connectionHandler.handle(this);",
                "-        handlers.requestHandler.handle(req);",
                "-      };",
                "+  private void reportResponseComplete() {",
                "+    if (metrics != null) {",
                "+      reportBytesWritten(bytesWritten);",
                "+      if (requestFailed) {",
                "+        metrics.requestReset(pendingResponse.metric());",
                "+        requestFailed = false;",
                "+      } else {",
                "+        metrics.responseEnd(pendingResponse.metric(), pendingResponse.response());",
                "+      }",
                "+      bytesWritten = 0;",
                "     }",
                "-    requestHandler = handler;",
                "-    exceptionHandler(handlers.exceptionHandler);",
                "   }",
                "@@ -217,9 +260,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   public void writeToChannel(Object msg, ChannelPromise promise) {",
                "-    if (METRICS_ENABLED && metrics != null) {",
                "-      long bytes = getBytes(msg);",
                "-      if (bytes == -1) {",
                "-        log.warn(\"Metrics could not be updated to include bytes written because of unknown object \" + msg.getClass() + \" being written.\");",
                "-      } else {",
                "-        bytesWritten += bytes;",
                "-      }",
                "+    if (METRICS_ENABLED) {",
                "+      reportBytesWritten(msg);",
                "     }",
                "@@ -228,3 +266,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  ServerWebSocket upgrade(HttpServerRequest request, HttpRequest nettyReq) {",
                "+  ServerWebSocket upgrade(HttpServerRequestImpl request, HttpRequest nettyReq) {",
                "     if (ws != null) {",
                "@@ -254,3 +292,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     if (METRICS_ENABLED && metrics != null) {",
                "-      ws.setMetric(metrics.upgrade(requestMetric, ws));",
                "+      ws.setMetric(metrics.upgrade(request.metric(), ws));",
                "     }",
                "@@ -302,9 +340,2 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private void handleChunk(Buffer chunk) {",
                "-    if (METRICS_ENABLED && metrics != null) {",
                "-      bytesRead += chunk.length();",
                "-    }",
                "-    currentRequest.handleData(chunk);",
                "-  }",
                "-",
                "   @Override",
                "@@ -313,3 +344,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "       if (pendingResponse != null) {",
                "-        pendingResponse.handleDrained();",
                "+        pendingResponse.response().handleDrained();",
                "       } else if (ws != null) {",
                "@@ -360,10 +391,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    if (currentRequest != null) {",
                "-      currentRequest.handleException(CLOSED_EXCEPTION);",
                "-    }",
                "     if (pendingResponse != null) {",
                "-      if (METRICS_ENABLED && metrics != null) {",
                "-        metrics.requestReset(requestMetric);",
                "-      }",
                "-      pendingResponse.handleClosed();",
                "+      pendingResponse.handleException(CLOSED_EXCEPTION);",
                "     }",
                "@@ -378,5 +403,2 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    if (currentRequest != null) {",
                "-      currentRequest.handleException(t);",
                "-    }",
                "     if (pendingResponse != null) {",
                "@@ -410,4 +432,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "         version = ((HttpRequest) obj).protocolVersion();",
                "-      } else if (currentRequest != null) {",
                "-        version = currentRequest.version() == io.vertx.core.http.HttpVersion.HTTP_1_0 ? HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1;",
                "+      } else if (pendingRequest != null) {",
                "+        version = pendingRequest.version() == io.vertx.core.http.HttpVersion.HTTP_1_0 ? HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1;",
                "       } else {",
                "@@ -431,96 +453,2 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private void processMessage(Object msg) {",
                "-    if (msg instanceof HttpRequest) {",
                "-      HttpRequest request = (HttpRequest) msg;",
                "-      if (request.decoderResult().isFailure()) {",
                "-        handleError(request);",
                "-        return;",
                "-      }",
                "-      if (options.isHandle100ContinueAutomatically() && HttpUtil.is100ContinueExpected(request)) {",
                "-        write100Continue();",
                "-      }",
                "-      HttpServerResponseImpl resp = new HttpServerResponseImpl(vertx, this, request);",
                "-      HttpServerRequestImpl req = new HttpServerRequestImpl(this, request, resp);",
                "-      currentRequest = req;",
                "-      pendingResponse = resp;",
                "-      if (METRICS_ENABLED && metrics != null) {",
                "-        requestMetric = metrics.requestBegin(metric(), req);",
                "-      }",
                "-      if (requestHandler != null) {",
                "-        requestHandler.handle(req);",
                "-      }",
                "-    } else if (msg == LastHttpContent.EMPTY_LAST_CONTENT) {",
                "-      handleEnd();",
                "-    } else if (msg instanceof HttpContent) {",
                "-      handleContent(msg);",
                "-    } else {",
                "-      handleOther(msg);",
                "-    }",
                "-  }",
                "-",
                "-  private void handleContent(Object msg) {",
                "-    HttpContent content = (HttpContent) msg;",
                "-    if (content.decoderResult().isFailure()) {",
                "-      handleError(content);",
                "-      return;",
                "-    }",
                "-    ByteBuf chunk = content.content();",
                "-    if (chunk.isReadable()) {",
                "-      Buffer buff = Buffer.buffer(chunk);",
                "-      handleChunk(buff);",
                "-    }",
                "-    //TODO chunk trailers",
                "-    if (content instanceof LastHttpContent) {",
                "-      handleEnd();",
                "-    }",
                "-  }",
                "-",
                "-  private void handleEnd() {",
                "-    currentRequest.handleEnd();",
                "-    if (METRICS_ENABLED) {",
                "-      reportBytesRead(bytesRead);",
                "-      bytesRead = 0;",
                "-    }",
                "-    currentRequest = null;",
                "-    if (pendingResponse != null) {",
                "-      pause();",
                "-    } else if (paused) {",
                "-      resume();",
                "-    }",
                "-  }",
                "-",
                "-  private void handleOther(Object msg) {",
                "-    if (msg instanceof WebSocketFrameInternal) {",
                "-      WebSocketFrameInternal frame = (WebSocketFrameInternal) msg;",
                "-      if (ws != null) {",
                "-        ws.handleFrame(frame);",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private void checkNextTick() {",
                "-    // Check if there are more pending messages in the queue that can be processed next time around",
                "-    if (!paused && queueing && !sentCheck) {",
                "-      sentCheck = true;",
                "-      context.runOnContext(v -> {",
                "-        synchronized (Http1xServerConnection.this) {",
                "-          sentCheck = false;",
                "-          if (!paused) {",
                "-            // The only place we poll the pending queue, so we are sure that pending.size() > 0",
                "-            // since we got there because queueing was true",
                "-            Object msg = pending.poll();",
                "-            if (pending.isEmpty()) {",
                "-              // paused == false && pending.size() == 0 => queueing == false",
                "-              unsetQueueing();",
                "-            }",
                "-            // Process message, it might pause the connection",
                "-            processMessage(msg);",
                "-            // Check next tick in case we still have pending messages and the connection is not paused",
                "-            checkNextTick();",
                "-          }",
                "-        }",
                "-      });",
                "-    }",
                "-  }",
                "-",
                "   private long getBytes(Object obj) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "index f55284fb6..b592ef58a 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "@@ -60,5 +60,5 @@ public class Http1xServerHandler extends VertxHttpHandler<Http1xServerConnection",
                "       serverOrigin,",
                "+      holder.handler,",
                "       metrics);",
                "     setConnection(conn);",
                "-    conn.requestHandlers(holder.handler);",
                "     if (metrics != null) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpHandlers.java b/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "index 433a5393d..a502ce683 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "@@ -43,2 +43,21 @@ public class HttpHandlers {",
                "+  Handler<HttpServerRequest> requestHandler() {",
                "+    if (connectionHandler != null) {",
                "+      class Adapter implements Handler<HttpServerRequest> {",
                "+        private boolean isFirst = true;",
                "+        @Override",
                "+        public void handle(HttpServerRequest request) {",
                "+          if (isFirst) {",
                "+            isFirst = false;",
                "+            connectionHandler.handle(request.connection());",
                "+          }",
                "+          requestHandler.handle(request);",
                "+        }",
                "+      }",
                "+      return new Adapter();",
                "+    } else {",
                "+      return requestHandler;",
                "+    }",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "index f2c055496..4386c9629 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "@@ -13,9 +13,3 @@ package io.vertx.core.http.impl;",
                "-import io.netty.handler.codec.http.DefaultHttpContent;",
                "-import io.netty.handler.codec.http.HttpHeaderNames;",
                "-import io.netty.handler.codec.http.HttpHeaders;",
                "-import io.netty.handler.codec.http.HttpMethod;",
                "-import io.netty.handler.codec.http.HttpRequest;",
                "-import io.netty.handler.codec.http.LastHttpContent;",
                "-import io.netty.handler.codec.http.QueryStringDecoder;",
                "+import io.netty.handler.codec.http.*;",
                " import io.netty.handler.codec.http.multipart.Attribute;",
                "@@ -32,3 +26,2 @@ import io.vertx.core.http.HttpServerFileUpload;",
                " import io.vertx.core.http.HttpServerRequest;",
                "-import io.vertx.core.http.HttpServerResponse;",
                " import io.vertx.core.http.HttpVersion;",
                "@@ -36,2 +29,3 @@ import io.vertx.core.http.ServerWebSocket;",
                " import io.vertx.core.http.HttpFrame;",
                "+import io.vertx.core.impl.VertxInternal;",
                " import io.vertx.core.logging.Logger;",
                "@@ -40,2 +34,3 @@ import io.vertx.core.net.NetSocket;",
                " import io.vertx.core.net.SocketAddress;",
                "+import io.vertx.core.spi.metrics.Metrics;",
                "@@ -45,2 +40,6 @@ import javax.security.cert.X509Certificate;",
                " import java.net.URISyntaxException;",
                "+import java.util.ArrayDeque;",
                "+import java.util.Deque;",
                "+",
                "+import static io.vertx.core.spi.metrics.Metrics.METRICS_ENABLED;",
                "@@ -62,4 +61,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "   private final Http1xServerConnection conn;",
                "-  private final HttpRequest request;",
                "-  private final HttpServerResponse response;",
                "+  private final DefaultHttpRequest request;",
                "@@ -72,2 +70,6 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "+  private HttpServerResponseImpl response;",
                "+  private HttpServerRequestImpl next;",
                "+  private Object metric;",
                "+",
                "   private Handler<Buffer> dataHandler;",
                "@@ -88,9 +90,111 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "+  private Deque<Buffer> pending;",
                "+  private boolean paused;",
                "+  private boolean sentCheck;",
                "-  HttpServerRequestImpl(Http1xServerConnection conn,",
                "-                        HttpRequest request,",
                "-                        HttpServerResponse response) {",
                "+  HttpServerRequestImpl(Http1xServerConnection conn, DefaultHttpRequest request) {",
                "     this.conn = conn;",
                "     this.request = request;",
                "-    this.response = response;",
                "+  }",
                "+",
                "+  private void checkNextTick() {",
                "+    if (!paused) {",
                "+      if (pending != null && pending.size() > 0) {",
                "+        if (!sentCheck) {",
                "+          sentCheck = true;",
                "+          conn.getContext().runOnContext(v -> {",
                "+            synchronized (conn) {",
                "+              sentCheck = false;",
                "+              if (!paused) {",
                "+                // The only place we poll the pending queue, so we are sure that pending.size() > 0",
                "+                // since we got there because queueing was true",
                "+                Buffer msg = pending.poll();",
                "+                // Process message, it might pause the connection",
                "+                handleData(msg);",
                "+                // Check next tick in case we still have pending messages and the connection is not paused",
                "+                checkNextTick();",
                "+              }",
                "+            }",
                "+          });",
                "+        }",
                "+      } else {",
                "+        if (ended) {",
                "+          doEnd();",
                "+        } else {",
                "+          // We only resume the connection when the request is not yet ended",
                "+          conn.doResume();",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void enqueueData(Buffer chunk) {",
                "+    // We queue requests if paused or a request is in progress to prevent responses being written in the wrong order",
                "+    if (pending == null) {",
                "+      pending = new ArrayDeque<>(8);",
                "+    }",
                "+    pending.add(chunk);",
                "+    if (pending.size() == 5) {",
                "+      // We pause the channel too, to prevent the queue growing too large, but we don't do this",
                "+      // until the queue reaches a certain size, to avoid pausing it too often",
                "+",
                "+      // We only pause when we are actively called by the connection",
                "+      conn.doPause();",
                "+    }",
                "+  }",
                "+",
                "+  void handleContent(Buffer buffer) {",
                "+    if (paused || (pending != null && pending.size() > 0)) {",
                "+      enqueueData(buffer);",
                "+    } else {",
                "+      handleData(buffer);",
                "+    }",
                "+  }",
                "+",
                "+  void handleBegin() {",
                "+    if (Metrics.METRICS_ENABLED) {",
                "+      reportRequestBegin();",
                "+    }",
                "+    response = new HttpServerResponseImpl((VertxInternal) conn.vertx(), conn, request);",
                "+    if (conn.handle100ContinueAutomatically) {",
                "+      check100();",
                "+    }",
                "+    conn.requestHandler.handle(this);",
                "+  }",
                "+",
                "+  void appendRequest(HttpServerRequestImpl next) {",
                "+    HttpServerRequestImpl current = this;",
                "+    while (current.next != null) {",
                "+      current = current.next;",
                "+    }",
                "+    current.next = next;",
                "+  }",
                "+",
                "+  HttpServerRequestImpl nextRequest() {",
                "+    return next;",
                "+  }",
                "+",
                "+  void handlePipelined() {",
                "+    paused = false;",
                "+    boolean end = ended;",
                "+    ended = false;",
                "+    handleBegin();",
                "+    ended = end;",
                "+    checkNextTick();",
                "+  }",
                "+",
                "+  private void reportRequestBegin() {",
                "+    if (conn.metrics != null) {",
                "+      metric = conn.metrics.requestBegin(conn.metric(), this);",
                "+    }",
                "+  }",
                "+",
                "+  private void check100() {",
                "+    if (HttpUtil.is100ContinueExpected(request)) {",
                "+      conn.write100Continue();",
                "+    }",
                "+  }",
                "+",
                "+  Object metric() {",
                "+    return metric;",
                "   }",
                "@@ -171,3 +275,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "   @Override",
                "-  public HttpServerResponse response() {",
                "+  public HttpServerResponseImpl response() {",
                "     return response;",
                "@@ -228,4 +332,4 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "     synchronized (conn) {",
                "-      if (!ended) {",
                "-        conn.pause();",
                "+      if (!isEnded()) {",
                "+        paused = true;",
                "       }",
                "@@ -238,4 +342,5 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "     synchronized (conn) {",
                "-      if (!ended) {",
                "-        conn.resume();",
                "+      if (!isEnded()) {",
                "+        paused = false;",
                "+        checkNextTick();",
                "       }",
                "@@ -367,3 +472,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "     synchronized (conn) {",
                "-      return ended;",
                "+      return response != null && ended && (pending == null || pending.isEmpty());",
                "     }",
                "@@ -381,3 +486,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "-  void handleData(Buffer data) {",
                "+  private void handleData(Buffer data) {",
                "     synchronized (conn) {",
                "@@ -400,29 +505,39 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "       ended = true;",
                "-      if (decoder != null) {",
                "-        try {",
                "-          decoder.offer(LastHttpContent.EMPTY_LAST_CONTENT);",
                "-          while (decoder.hasNext()) {",
                "-            InterfaceHttpData data = decoder.next();",
                "-            if (data instanceof Attribute) {",
                "-              Attribute attr = (Attribute) data;",
                "-              try {",
                "-                attributes().add(attr.getName(), attr.getValue());",
                "-              } catch (Exception e) {",
                "-                // Will never happen, anyway handle it somehow just in case",
                "-                handleException(e);",
                "-              }",
                "-            }",
                "+      if (isEnded()) {",
                "+        doEnd();",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void doEnd() {",
                "+    if (decoder != null) {",
                "+      endDecode();",
                "+    }",
                "+    // If there have been uploads then we let the last one call the end handler once any fileuploads are complete",
                "+    if (endHandler != null) {",
                "+      endHandler.handle(null);",
                "+    }",
                "+  }",
                "+",
                "+  private void endDecode() {",
                "+    try {",
                "+      decoder.offer(LastHttpContent.EMPTY_LAST_CONTENT);",
                "+      while (decoder.hasNext()) {",
                "+        InterfaceHttpData data = decoder.next();",
                "+        if (data instanceof Attribute) {",
                "+          Attribute attr = (Attribute) data;",
                "+          try {",
                "+            attributes().add(attr.getName(), attr.getValue());",
                "+          } catch (Exception e) {",
                "+            // Will never happen, anyway handle it somehow just in case",
                "+            handleException(e);",
                "           }",
                "-        } catch (HttpPostRequestDecoder.ErrorDataDecoderException e) {",
                "-          handleException(e);",
                "-        } catch (HttpPostRequestDecoder.EndOfDataDecoderException e) {",
                "-          // ignore this as it is expected",
                "-        } finally {",
                "-          decoder.destroy();",
                "         }",
                "       }",
                "-      // If there have been uploads then we let the last one call the end handler once any fileuploads are complete",
                "-      if (endHandler != null) {",
                "-        endHandler.handle(null);",
                "-      }",
                "+    } catch (HttpPostRequestDecoder.ErrorDataDecoderException e) {",
                "+      handleException(e);",
                "+    } catch (HttpPostRequestDecoder.EndOfDataDecoderException e) {",
                "+      // ignore this as it is expected",
                "+    } finally {",
                "+      decoder.destroy();",
                "     }",
                "@@ -432,5 +547,13 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "     synchronized (conn) {",
                "-      Handler<Throwable> handler = this.exceptionHandler;",
                "-      if (handler != null) {",
                "-        conn.getContext().runOnContext(v -> handler.handle(t));",
                "+      if (!isEnded()) {",
                "+        Handler<Throwable> handler = this.exceptionHandler;",
                "+        if (handler != null) {",
                "+          conn.getContext().runOnContext(v -> handler.handle(t));",
                "+        }",
                "+      }",
                "+      if (!response.ended()) {",
                "+        if (METRICS_ENABLED) {",
                "+          reportRequestReset();",
                "+        }",
                "+        response.handleException(t);",
                "       }",
                "@@ -439,2 +562,8 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "+  private void reportRequestReset() {",
                "+    if (conn.metrics != null) {",
                "+      conn.metrics.requestReset(metric);",
                "+    }",
                "+  }",
                "+",
                "   private void sendNotImplementedAndClose() {",
                "@@ -445,3 +574,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "   private void checkEnded() {",
                "-    if (ended) {",
                "+    if (isEnded()) {",
                "       throw new IllegalStateException(\"Request has already been read\");",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "index dadb46410..521d0d0c8 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "@@ -79,3 +79,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "-  HttpServerResponseImpl(final VertxInternal vertx, Http1xServerConnection conn, HttpRequest request) {",
                "+  HttpServerResponseImpl(final VertxInternal vertx, Http1xServerConnection conn, DefaultHttpRequest request) {",
                "     this.vertx = vertx;",
                "@@ -519,4 +519,8 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "     synchronized (conn) {",
                "-      if (exceptionHandler != null) {",
                "-        exceptionHandler.handle(t);",
                "+      if (t == Http1xServerConnection.CLOSED_EXCEPTION) {",
                "+        handleClosed();",
                "+      } else {",
                "+        if (exceptionHandler != null) {",
                "+          exceptionHandler.handle(t);",
                "+        }",
                "       }",
                "@@ -525,15 +529,13 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "-  void handleClosed() {",
                "-    synchronized (conn) {",
                "-      if (!closed) {",
                "-        closed = true;",
                "-        if (!written && exceptionHandler != null) {",
                "-          conn.getContext().runOnContext(v -> exceptionHandler.handle(ConnectionBase.CLOSED_EXCEPTION));",
                "-        }",
                "-        if (endHandler != null) {",
                "-          conn.getContext().runOnContext(endHandler);",
                "-        }",
                "-        if (closeHandler != null) {",
                "-          conn.getContext().runOnContext(closeHandler);",
                "-        }",
                "+  private void handleClosed() {",
                "+    if (!closed) {",
                "+      closed = true;",
                "+      if (!written && exceptionHandler != null) {",
                "+        conn.getContext().runOnContext(v -> exceptionHandler.handle(ConnectionBase.CLOSED_EXCEPTION));",
                "+      }",
                "+      if (endHandler != null) {",
                "+        conn.getContext().runOnContext(endHandler);",
                "+      }",
                "+      if (closeHandler != null) {",
                "+        conn.getContext().runOnContext(closeHandler);",
                "       }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2508": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpHandlers.java, src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java, src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java, src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2508",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f70e0aefbb48ec414b60130f15152bed91fb7a66",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523082423,
            "hunks": 31,
            "message": "Simplify the connection pool since we the initial weight counted by the pool is actually constant which was preventing the connection provider connect method to be run asynchronously. Run the connection provider connect method on the context event loop to ensure that we don't get a synchronous callback inside the pool that can make the state inconsistent - fixes #2370",
            "diff": [
                "diff --git a/src/main/asciidoc/enums.adoc b/src/main/asciidoc/enums.adoc",
                "index 4394a7270..47eb82786 100644",
                "--- a/src/main/asciidoc/enums.adoc",
                "+++ b/src/main/asciidoc/enums.adoc",
                "@@ -148,2 +148,36 @@ ID 14, bad timestamp",
                "+[[JsonEventType]]",
                "+== JsonEventType",
                "+",
                "+++++",
                "+ The possibles types of link emitted by the link.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[START_OBJECT]]`START_OBJECT`|",
                "++++",
                "+Signals the start of a JSON object.",
                "++++",
                "+|[[END_OBJECT]]`END_OBJECT`|",
                "++++",
                "+Signals the end of a JSON object.",
                "++++",
                "+|[[START_ARRAY]]`START_ARRAY`|",
                "++++",
                "+Signals the start of a JSON array.",
                "++++",
                "+|[[END_ARRAY]]`END_ARRAY`|",
                "++++",
                "+Signals the end of a JSON array.",
                "++++",
                "+|[[VALUE]]`VALUE`|",
                "++++",
                "+Signals a JSON value.",
                "++++",
                "+|===",
                "+",
                " [[ProxyType]]",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 862300cb7..45272f8f7 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.1</version>",
                "+  <version>3.5.2-SNAPSHOT</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.1'",
                "+  compile 'io.vertx:vertx-core:3.5.2-SNAPSHOT'",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "index 4a489dcf8..439597b26 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "@@ -114,3 +114,3 @@ class ConnectionManager {",
                "         HttpChannelConnector connector = new HttpChannelConnector(client, metric, version, ssl, peerHost, host, port);",
                "-        Pool<HttpClientConnection> pool = new Pool<>(connector, maxWaitQueueSize, maxSize,",
                "+        Pool<HttpClientConnection> pool = new Pool<>(connector, maxWaitQueueSize, connector.weight(), maxSize,",
                "           v -> {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index 695c007bb..e057d74f1 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -85,2 +85,6 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "+  public long weight() {",
                "+    return weight;",
                "+  }",
                "+",
                "   @Override",
                "@@ -90,3 +94,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "-  public long connect(",
                "+  public void connect(",
                "     ConnectionListener<HttpClientConnection> listener,",
                "@@ -214,4 +218,2 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     channelProvider.connect(client.getVertx(), bootstrap, client.getOptions().getProxyOptions(), SocketAddress.inetSocketAddress(port, host), channelInitializer, channelHandler);",
                "-",
                "-    return weight;",
                "   }",
                "@@ -273,3 +275,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     clientHandler.addHandler(conn -> {",
                "-      listener.onConnectSuccess(conn, http1MaxConcurrency, ch, context, weight, http1Weight);",
                "+      listener.onConnectSuccess(conn, http1MaxConcurrency, ch, context, http1Weight);",
                "     });",
                "@@ -307,3 +309,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "         }",
                "-        listener.onConnectSuccess(conn, concurrency, ch, context, weight, http2Weight);",
                "+        listener.onConnectSuccess(conn, concurrency, ch, context, http2Weight);",
                "       });",
                "@@ -327,3 +329,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     }",
                "-    listener.onConnectFailure(context, t, weight);",
                "+    listener.onConnectFailure(context, t);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "index e0d8eba76..12728a86d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "@@ -29,3 +29,2 @@ public interface ConnectionListener<C> {",
                "    * @param context the context",
                "-   * @param initialWeight the initial weight",
                "    * @param actualWeight the actual weight",
                "@@ -36,3 +35,2 @@ public interface ConnectionListener<C> {",
                "                         ContextImpl context,",
                "-                        long initialWeight,",
                "                         long actualWeight);",
                "@@ -44,5 +42,4 @@ public interface ConnectionListener<C> {",
                "    * @param err the error",
                "-   * @param weight the weight",
                "    */",
                "-  void onConnectFailure(ContextImpl context, Throwable err, long weight);",
                "+  void onConnectFailure(ContextImpl context, Throwable err);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "index 01a6fae1b..92173ffc8 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "@@ -28,5 +28,4 @@ public interface ConnectionProvider<C> {",
                "    * @param context the context to use for the connection",
                "-   * @return the initial weight of the connection, which will eventually be corrected when calling the listener",
                "    */",
                "-  long connect(ConnectionListener<C> listener, ContextImpl context);",
                "+  void connect(ConnectionListener<C> listener, ContextImpl context);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index f64680a39..4a4acda8d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -44,4 +44,4 @@ import java.util.function.BiConsumer;",
                "  *",
                "- * When a connection is created an initial weight is returned by the {@link ConnectionProvider#connect} method and is",
                "- * added to the current weight. When the channel is connected the {@link ConnectionListener#onConnectSuccess} callback",
                "+ * When a connection is created an {@link #initialWeight} is added to the current weight.",
                "+ * When the channel is connected the {@link ConnectionListener#onConnectSuccess} callback",
                "  * provides the initial weight returned by the connect method and the actual connection weight so it can be used to",
                "@@ -95,2 +95,3 @@ public class Pool<C> {",
                "+  private final long initialWeight;                                 // The initial weight of a connection",
                "   private final long maxWeight;                                     // The max weight (equivalent to max pool size)",
                "@@ -103,2 +104,3 @@ public class Pool<C> {",
                "               int queueMaxSize,",
                "+              long initialWeight,",
                "               long maxWeight,",
                "@@ -108,2 +110,3 @@ public class Pool<C> {",
                "     this.maxWeight = maxWeight;",
                "+    this.initialWeight = initialWeight;",
                "     this.connector = connector;",
                "@@ -184,3 +187,6 @@ public class Pool<C> {",
                "     } else if (weight < maxWeight) {",
                "-      weight += createConnection(waiter);",
                "+      weight += initialWeight;",
                "+      waiter.context.nettyEventLoop().execute(() -> {",
                "+        createConnection(waiter);",
                "+      });",
                "       return true;",
                "@@ -202,3 +208,3 @@ public class Pool<C> {",
                "-  private long createConnection(Waiter<C> waiter) {",
                "+  private void createConnection(Waiter<C> waiter) {",
                "     Holder<C> holder  = new Holder<>();",
                "@@ -206,6 +212,6 @@ public class Pool<C> {",
                "       @Override",
                "-      public void onConnectSuccess(C conn, long concurrency, Channel channel, ContextImpl context, long initialWeight, long actualWeight) {",
                "+      public void onConnectSuccess(C conn, long concurrency, Channel channel, ContextImpl context, long actualWeight) {",
                "         // Update state",
                "         synchronized (Pool.this) {",
                "-          initConnection(holder, context, concurrency, conn, channel, initialWeight, actualWeight);",
                "+          initConnection(holder, context, concurrency, conn, channel, actualWeight);",
                "         }",
                "@@ -234,3 +240,3 @@ public class Pool<C> {",
                "       @Override",
                "-      public void onConnectFailure(ContextImpl context, Throwable err, long weight) {",
                "+      public void onConnectFailure(ContextImpl context, Throwable err) {",
                "         waiter.handleFailure(context, err);",
                "@@ -238,3 +244,3 @@ public class Pool<C> {",
                "           waitersCount--;",
                "-          Pool.this.weight -= weight;",
                "+          Pool.this.weight -= initialWeight;",
                "           holder.removed = true;",
                "@@ -285,3 +291,3 @@ public class Pool<C> {",
                "     };",
                "-    return connector.connect(listener, waiter.context);",
                "+    connector.connect(listener, waiter.context);",
                "   }",
                "@@ -343,4 +349,4 @@ public class Pool<C> {",
                "-  private void initConnection(Holder<C> holder, ContextImpl context, long concurrency, C conn, Channel channel, long oldWeight, long newWeight) {",
                "-    weight += newWeight - oldWeight;",
                "+  private void initConnection(Holder<C> holder, ContextImpl context, long concurrency, C conn, Channel channel, long weight) {",
                "+    this.weight += initialWeight - weight;",
                "     holder.context = context;",
                "@@ -349,3 +355,3 @@ public class Pool<C> {",
                "     holder.channel = channel;",
                "-    holder.weight = newWeight;",
                "+    holder.weight = weight;",
                "     holder.capacity = concurrency;",
                "diff --git a/src/main/java/io/vertx/core/spi/resolver/ResolverProvider.java b/src/main/java/io/vertx/core/spi/resolver/ResolverProvider.java",
                "index cf6e5f28e..901fc074b 100644",
                "--- a/src/main/java/io/vertx/core/spi/resolver/ResolverProvider.java",
                "+++ b/src/main/java/io/vertx/core/spi/resolver/ResolverProvider.java",
                "@@ -32,3 +32,2 @@ public interface ResolverProvider {",
                "   String DISABLE_DNS_RESOLVER_PROP_NAME = \"vertx.disableDnsResolver\";",
                "-  boolean DISABLE_DNS_RESOLVER = Boolean.getBoolean(DISABLE_DNS_RESOLVER_PROP_NAME);",
                "@@ -38,3 +37,3 @@ public interface ResolverProvider {",
                "     try {",
                "-      if (!DISABLE_DNS_RESOLVER) {",
                "+      if (!Boolean.getBoolean(DISABLE_DNS_RESOLVER_PROP_NAME)) {",
                "         return new DnsResolverProvider((VertxImpl) vertx, options);"
            ],
            "changed_files": [
                "src/main/asciidoc/enums.adoc",
                "src/main/asciidoc/java/override/dependencies.adoc",
                "src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java",
                "src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java",
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "src/main/java/io/vertx/core/spi/resolver/ResolverProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2370": "Handling DNS Resolution Errors vert-x3/issues#349 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/ConnectionManager.java, src/main/java/io/vertx/core/http/impl/pool/Pool.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionProvider.java, src/main/java/io/vertx/core/http/impl/pool/ConnectionListener.java, src/main/java/io/vertx/core/spi/resolver/ResolverProvider.java, src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2370",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48041fee0e8a87ebebc32f085634a6cd231dd33d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524234580,
            "hunks": 2,
            "message": "Fixed #2406 Don't search for timed out keep-alive Connections every Millisecond. This burns CPU. Just search every 1000ms",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "index f08d6d2a3..1117d58f2 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "@@ -55,3 +55,3 @@ class ConnectionManager {",
                "   synchronized void start(boolean checkExpired) {",
                "-    this.timerID = checkExpired ? client.getVertx().setTimer(1, id -> checkExpired()) : -1;",
                "+    this.timerID = checkExpired ? client.getVertx().setTimer(1000, id -> checkExpired()) : -1;",
                "   }",
                "@@ -61,3 +61,3 @@ class ConnectionManager {",
                "     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));",
                "-    timerID = client.getVertx().setTimer(1, id -> checkExpired());",
                "+    timerID = client.getVertx().setTimer(1000, id -> checkExpired());",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/ConnectionManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2406": "Fixes #2406 #2408"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2406",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f5e91df6b6352d5049ed1b3cf61053dea33c1c21",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1521536604,
            "hunks": 2,
            "message": "Add missing VertxGen annotation - fixes #2412 Signed-off-by: Paulo Lopes <pmlopes@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/parsetools/JsonEventType.java b/src/main/java/io/vertx/core/parsetools/JsonEventType.java",
                "index 2ca64b1a9..11caf37e5 100644",
                "--- a/src/main/java/io/vertx/core/parsetools/JsonEventType.java",
                "+++ b/src/main/java/io/vertx/core/parsetools/JsonEventType.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.parsetools;",
                "+import io.vertx.codegen.annotations.VertxGen;",
                "+",
                " /**",
                "@@ -18,2 +20,3 @@ package io.vertx.core.parsetools;",
                "  */",
                "+@VertxGen",
                " public enum JsonEventType {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/parsetools/JsonEventType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2412": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/parsetools/JsonEventType.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2412",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dc1cfbde85bb801d92f35ac839ef7e8c7738d8a4",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523425406,
            "hunks": 19,
            "message": "The HTTP server should always resume the request when the last chunk is processed - fixes #2380",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index d0715f504..04a291cb3 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -141,4 +141,6 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   synchronized void handleMessage(Object msg) {",
                "-    if (queueing || !processMessage(msg)) {",
                "+    if (queueing) {",
                "       enqueue(msg);",
                "+    } else {",
                "+      processMessage(msg);",
                "     }",
                "@@ -182,3 +184,5 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     pendingResponse = null;",
                "-    checkNextTick();",
                "+    if (currentRequest == null && paused) {",
                "+      resume();",
                "+    }",
                "   }",
                "@@ -432,7 +436,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private boolean processMessage(Object msg) {",
                "+  private void processMessage(Object msg) {",
                "     if (msg instanceof HttpRequest) {",
                "-      if (pendingResponse != null) {",
                "-        return false;",
                "-      }",
                "       HttpRequest request = (HttpRequest) msg;",
                "@@ -440,3 +441,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "         handleError(request);",
                "-        return false;",
                "+        return;",
                "       }",
                "@@ -456,3 +457,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     } else if (msg == LastHttpContent.EMPTY_LAST_CONTENT) {",
                "-      handleLastHttpContent();",
                "+      handleEnd();",
                "     } else if (msg instanceof HttpContent) {",
                "@@ -462,3 +463,2 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    return true;",
                "   }",
                "@@ -478,3 +478,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     if (content instanceof LastHttpContent) {",
                "-      handleLastHttpContent();",
                "+      handleEnd();",
                "     }",
                "@@ -482,3 +482,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private void handleLastHttpContent() {",
                "+  private void handleEnd() {",
                "     currentRequest.handleEnd();",
                "@@ -489,2 +489,7 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     currentRequest = null;",
                "+    if (pendingResponse != null) {",
                "+      pause();",
                "+    } else if (paused) {",
                "+      resume();",
                "+    }",
                "   }",
                "@@ -511,11 +516,10 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "             Object msg = pending.poll();",
                "-            if (processMessage(msg)) {",
                "-              if (pending.isEmpty()) {",
                "-                unsetQueueing();",
                "-              } else {",
                "-                checkNextTick();",
                "-              }",
                "-            } else {",
                "-              pending.addFirst(msg);",
                "+            if (pending.isEmpty()) {",
                "+              // paused == false && pending.size() == 0 => queueing = false",
                "+              unsetQueueing();",
                "             }",
                "+            // Process message, it might pause the connection",
                "+            processMessage(msg);",
                "+            // Check next tick in case we still have pending messages and the connection is not paused",
                "+            checkNextTick();",
                "           }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java b/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "index 7976ba2a3..b01bd4b09 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                "@@ -29,4 +29,2 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "-  private static final Object END = new Object(); // Marker",
                "-",
                "   protected final C conn;",
                "@@ -37,5 +35,7 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "-  private final ArrayDeque<Object> pending = new ArrayDeque<>(8);",
                "+  private final ArrayDeque<Buffer> pending = new ArrayDeque<>(8);",
                "   private boolean paused;",
                "-  private boolean writable = true;",
                "+  private boolean ended;",
                "+  private MultiMap trailers;",
                "+  private boolean writable;",
                "@@ -86,11 +86,7 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "-  void onEnd(MultiMap trailers) {",
                "+  void onEnd(MultiMap map) {",
                "     synchronized (conn) {",
                "-      if (paused || pending.size() > 0) {",
                "-        if (trailers != null) {",
                "-          pending.add(trailers);",
                "-        } else {",
                "-          pending.add(END);",
                "-        }",
                "-      } else {",
                "+      trailers = map;",
                "+      ended = true;",
                "+      if (pending.isEmpty()) {",
                "         handleEnd(trailers);",
                "@@ -106,14 +102,9 @@ abstract class VertxHttp2Stream<C extends Http2ConnectionBase> {",
                "       if (!paused) {",
                "-        Object msg = pending.poll();",
                "-        if (msg instanceof Buffer) {",
                "-          Buffer buf = (Buffer) msg;",
                "-          conn.handler.consume(stream, buf.length());",
                "-          handleData(buf);",
                "-          if (pending.size() > 0) {",
                "-            vertx.runOnContext(this::checkNextTick);",
                "-          }",
                "-        } else if (msg == END) {",
                "-          handleEnd(null);",
                "-        } else if (msg instanceof MultiMap) {",
                "-          handleEnd((MultiMap) msg);",
                "+        Buffer buf = pending.poll();",
                "+        conn.handler.consume(stream, buf.length());",
                "+        handleData(buf);",
                "+        if (pending.size() > 0) {",
                "+          vertx.runOnContext(this::checkNextTick);",
                "+        } else if (ended) {",
                "+          handleEnd(trailers);",
                "         }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2380": "refresh a file upload request in firefox cause vertx to print exception forever vert-x3/issues#344 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/VertxHttp2Stream.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2380",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "415d92ccdf36f7e7d2b4647c3fb8b8c509048c6b",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524559504,
            "hunks": 14,
            "message": "Native transport improvements - fixes #2413 - fixes #2379",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java b/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "index 8d9832210..c029ff7af 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "@@ -13,2 +13,4 @@ package io.vertx.core.net.impl.transport;",
                "+import io.netty.bootstrap.Bootstrap;",
                "+import io.netty.bootstrap.ServerBootstrap;",
                " import io.netty.channel.Channel;",
                "@@ -28,2 +30,5 @@ import io.netty.channel.socket.InternetProtocolFamily;",
                " import io.netty.channel.unix.DomainSocketAddress;",
                "+import io.vertx.core.datagram.DatagramSocketOptions;",
                "+import io.vertx.core.net.ClientOptionsBase;",
                "+import io.vertx.core.net.NetServerOptions;",
                "@@ -38,2 +43,25 @@ class EpollTransport extends Transport {",
                "+  private static volatile int pendingFastOpenRequestsThreshold = 256;",
                "+",
                "+  /**",
                "+   * Return the number of of pending TFO connections in SYN-RCVD state for TCP_FASTOPEN.",
                "+   *",
                "+   * {@see #setPendingFastOpenRequestsThreshold}",
                "+   */",
                "+  public static int getPendingFastOpenRequestsThreshold() {",
                "+    return pendingFastOpenRequestsThreshold;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the number of of pending TFO connections in SYN-RCVD state for TCP_FASTOPEN",
                "+   * <p/>",
                "+   * If this value goes over a certain limit the server disables all TFO connections.",
                "+   */",
                "+  public static void setPendingFastOpenRequestsThreshold(int value) {",
                "+    if (value < 0) {",
                "+      throw new IllegalArgumentException(\"Invalid \" + value);",
                "+    }",
                "+    pendingFastOpenRequestsThreshold = value;",
                "+  }",
                "+",
                "   EpollTransport() {",
                "@@ -98,15 +126,26 @@ class EpollTransport extends Transport {",
                "   @Override",
                "-  public ChannelOption<?> channelOption(String name) {",
                "-    switch (name) {",
                "-      case \"SO_REUSEPORT\":",
                "-        return EpollChannelOption.SO_REUSEPORT;",
                "-      case \"TCP_QUICKACK\":",
                "-        return EpollChannelOption.TCP_QUICKACK;",
                "-      case \"TCP_CORK\":",
                "-        return EpollChannelOption.TCP_CORK;",
                "-      case \"TCP_FASTOPEN\":",
                "-        return EpollChannelOption.TCP_FASTOPEN;",
                "-      default:",
                "-        return null;",
                "+  public void configure(DatagramChannel channel, DatagramSocketOptions options) {",
                "+    channel.config().setOption(EpollChannelOption.SO_REUSEPORT, options.isReusePort());",
                "+    super.configure(channel, options);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void configure(NetServerOptions options, ServerBootstrap bootstrap) {",
                "+    bootstrap.option(EpollChannelOption.SO_REUSEPORT, options.isReusePort());",
                "+    if (options.isTcpFastOpen()) {",
                "+      bootstrap.option(EpollChannelOption.TCP_FASTOPEN, options.isTcpFastOpen() ? pendingFastOpenRequestsThreshold : 0);",
                "+    }",
                "+    bootstrap.childOption(EpollChannelOption.TCP_QUICKACK, options.isTcpQuickAck());",
                "+    bootstrap.childOption(EpollChannelOption.TCP_CORK, options.isTcpCork());",
                "+    super.configure(options, bootstrap);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void configure(ClientOptionsBase options, Bootstrap bootstrap) {",
                "+    if (options.isTcpFastOpen()) {",
                "+      bootstrap.option(EpollChannelOption.TCP_FASTOPEN_CONNECT, options.isTcpFastOpen());",
                "     }",
                "+    bootstrap.option(EpollChannelOption.TCP_QUICKACK, options.isTcpQuickAck());",
                "+    bootstrap.option(EpollChannelOption.TCP_CORK, options.isTcpCork());",
                "+    super.configure(options, bootstrap);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "index d6c847a93..dec702cd1 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "@@ -13,2 +13,3 @@ package io.vertx.core.net.impl.transport;",
                "+import io.netty.bootstrap.ServerBootstrap;",
                " import io.netty.channel.Channel;",
                "@@ -17,2 +18,3 @@ import io.netty.channel.EventLoopGroup;",
                " import io.netty.channel.ServerChannel;",
                "+import io.netty.channel.epoll.EpollChannelOption;",
                " import io.netty.channel.kqueue.KQueue;",
                "@@ -29,2 +31,3 @@ import io.netty.channel.socket.SocketChannel;",
                " import io.netty.channel.unix.DomainSocketAddress;",
                "+import io.vertx.core.net.NetServerOptions;",
                "@@ -101,8 +104,5 @@ class KQueueTransport extends Transport {",
                "   @Override",
                "-  public ChannelOption<?> channelOption(String name) {",
                "-    switch (name) {",
                "-      case \"SO_REUSEPORT\":",
                "-        return KQueueChannelOption.SO_REUSEPORT;",
                "-    }",
                "-    return null;",
                "+  public void configure(NetServerOptions options, ServerBootstrap bootstrap) {",
                "+    bootstrap.option(EpollChannelOption.SO_REUSEPORT, options.isReusePort());",
                "+    super.configure(options, bootstrap);",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/Transport.java b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "index faabd0aeb..28e06608d 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                "@@ -23,3 +23,2 @@ import io.netty.channel.socket.DatagramChannel;",
                " import io.netty.channel.socket.InternetProtocolFamily;",
                "-import io.netty.channel.socket.SocketChannel;",
                " import io.netty.channel.socket.nio.NioDatagramChannel;",
                "@@ -172,9 +171,2 @@ public class Transport {",
                "-  private void setOption(String name, Object value, BiConsumer<ChannelOption<Object>, Object> consumer) {",
                "-    ChannelOption<Object> option = (ChannelOption<Object>) channelOption(name);",
                "-    if (option != null) {",
                "-      consumer.accept(option, value);",
                "-    }",
                "-  }",
                "-",
                "   public void configure(DatagramChannel channel, DatagramSocketOptions options) {",
                "@@ -188,3 +180,2 @@ public class Transport {",
                "     }",
                "-    setOption(\"SO_REUSEPORT\", options.isReusePort(), channel.config()::setOption);",
                "     channel.config().setOption(ChannelOption.SO_REUSEADDR, options.isReuseAddress());",
                "@@ -211,6 +202,2 @@ public class Transport {",
                "     BiConsumer<ChannelOption<Object>, Object> setter = bootstrap::option;",
                "-    setOption(\"TCK_CORK\", options.isTcpCork(), setter);",
                "-    setOption(\"TCK_QUICKACK\", options.isTcpQuickAck(), setter);",
                "-    setOption(\"TCK_FASTOPEN\", options.isTcpFastOpen(), setter);",
                "-    setOption(\"SO_REUSEPORT\", options.isReusePort(), setter);",
                "     if (options.getLocalAddress() != null) {",
                "@@ -240,6 +227,2 @@ public class Transport {",
                "     BiConsumer<ChannelOption<Object>, Object> setter = bootstrap::childOption;",
                "-    setOption(\"TCK_CORK\", options.isTcpCork(), setter);",
                "-    setOption(\"TCK_QUICKACK\", options.isTcpQuickAck(), setter);",
                "-    setOption(\"TCK_FASTOPEN\", options.isTcpFastOpen(), setter);",
                "-    setOption(\"SO_REUSEPORT\", options.isReusePort(), setter);",
                "     bootstrap.childOption(ChannelOption.TCP_NODELAY, options.isTcpNoDelay());"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java",
                "src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "src/main/java/io/vertx/core/net/impl/transport/Transport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2413": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352",
                "2379": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/transport/EpollTransport.java, src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java, src/main/java/io/vertx/core/net/impl/transport/Transport.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2413, 2379",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "07be6b3fd44888493862aff51148243e4d2451ec",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1534286760,
            "hunks": 4,
            "message": "NullPointerException when reporting a deployment failure without a completion handler - fixes #2590",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/DeploymentManager.java b/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "index 14d7efb09..a7c2894fd 100644",
                "--- a/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "+++ b/src/main/java/io/vertx/core/impl/DeploymentManager.java",
                "@@ -104,3 +104,5 @@ public class DeploymentManager {",
                "       } catch (Exception e) {",
                "-        completionHandler.handle(Future.failedFuture(e));",
                "+        if (completionHandler != null) {",
                "+          completionHandler.handle(Future.failedFuture(e));",
                "+        }",
                "         return;",
                "@@ -108,3 +110,5 @@ public class DeploymentManager {",
                "       if (verticle == null) {",
                "-        completionHandler.handle(Future.failedFuture(\"Supplied verticle is null\"));",
                "+        if (completionHandler != null) {",
                "+          completionHandler.handle(Future.failedFuture(\"Supplied verticle is null\"));",
                "+        }",
                "         return;",
                "@@ -114,3 +118,5 @@ public class DeploymentManager {",
                "     if (verticles.size() != nbInstances) {",
                "-      completionHandler.handle(Future.failedFuture(\"Same verticle supplied more than once\"));",
                "+      if (completionHandler != null) {",
                "+        completionHandler.handle(Future.failedFuture(\"Same verticle supplied more than once\"));",
                "+      }",
                "       return;",
                "@@ -178,3 +184,5 @@ public class DeploymentManager {",
                "             } catch (Exception e) {",
                "-              completionHandler.handle(Future.failedFuture(e));",
                "+              if (completionHandler != null) {",
                "+                completionHandler.handle(Future.failedFuture(e));",
                "+              }",
                "             }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/DeploymentManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2590": "Vert.x 3.5.4 umbrella issue vert-x3/issues#401"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/DeploymentManager.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2590",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "57d49c498d6db2816bfba9908c1aca9fecf34a7c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533555535,
            "hunks": 3,
            "message": "DnsException improvements #2493 (#2570) Signed-off-by: KowalczykBartek <bkowalczyyk@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/dns/DnsException.java b/src/main/java/io/vertx/core/dns/DnsException.java",
                "index 7a8ebbc9b..a177b52be 100644",
                "--- a/src/main/java/io/vertx/core/dns/DnsException.java",
                "+++ b/src/main/java/io/vertx/core/dns/DnsException.java",
                "@@ -13,2 +13,3 @@ package io.vertx.core.dns;",
                "+import io.vertx.core.impl.NoStackTraceThrowable;",
                " import java.util.Objects;",
                "@@ -21,4 +22,5 @@ import java.util.Objects;",
                "  */",
                "-public final class DnsException extends Exception {",
                "+public final class DnsException extends NoStackTraceThrowable {",
                "+  private static final String ERROR_MESSAGE_PREFIX = \"DNS query error occurred: \";",
                "   private DnsResponseCode code;",
                "@@ -26,2 +28,3 @@ public final class DnsException extends Exception {",
                "   public DnsException(DnsResponseCode code) {",
                "+    super(ERROR_MESSAGE_PREFIX + code);",
                "     Objects.requireNonNull(code, \"code\");"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/dns/DnsException.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2493": "DnsException improvements #2493 #2570",
                "2570": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/dns/DnsException.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2493, 2570",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "91c014d3f534dc01dadc6763012c10ed230f3dae",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525786666,
            "hunks": 18,
            "message": "Upgrade to netty-4.1.22.Final - fixes #2390",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java b/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "index 36c848476..7459a9b93 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "@@ -228,6 +228,6 @@ abstract class Http2ConnectionBase extends ConnectionBase implements Http2FrameL",
                "   @Override",
                "-  public synchronized void onPingRead(ChannelHandlerContext ctx, ByteBuf data) {",
                "+  public void onPingRead(ChannelHandlerContext ctx, long data) throws Http2Exception {",
                "     Handler<Buffer> handler = pingHandler;",
                "     if (handler != null) {",
                "-      Buffer buff = Buffer.buffer(safeBuffer(data, ctx.alloc()));",
                "+      Buffer buff = Buffer.buffer().appendLong(data);",
                "       context.executeFromIO(v -> handler.handle(buff));",
                "@@ -237,3 +237,3 @@ abstract class Http2ConnectionBase extends ConnectionBase implements Http2FrameL",
                "   @Override",
                "-  public synchronized void onPingAckRead(ChannelHandlerContext ctx, ByteBuf data) {",
                "+  public void onPingAckRead(ChannelHandlerContext ctx, long data) throws Http2Exception {",
                "     Handler<AsyncResult<Buffer>> handler = pongHandlers.poll();",
                "@@ -241,3 +241,3 @@ abstract class Http2ConnectionBase extends ConnectionBase implements Http2FrameL",
                "       context.executeFromIO(v -> {",
                "-        Buffer buff = Buffer.buffer(safeBuffer(data, ctx.alloc()));",
                "+        Buffer buff = Buffer.buffer().appendLong(data);",
                "         handler.handle(Future.succeededFuture(buff));",
                "@@ -440,3 +440,3 @@ abstract class Http2ConnectionBase extends ConnectionBase implements Http2FrameL",
                "     }",
                "-    handler.writePing(data.getByteBuf()).addListener(fut -> {",
                "+    handler.writePing(data.getLong(0)).addListener(fut -> {",
                "       if (fut.isSuccess()) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "index d1ba9e423..9f4c5519e 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "@@ -92,3 +92,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {",
                "-    onError(ctx, cause);",
                "+    super.exceptionCaught(ctx, cause);",
                "     ctx.close();",
                "@@ -127,3 +127,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   @Override",
                "-  protected void onConnectionError(ChannelHandlerContext ctx, Throwable cause, Http2Exception http2Ex) {",
                "+  protected void onConnectionError(ChannelHandlerContext ctx, boolean outbound, Throwable cause, Http2Exception http2Ex) {",
                "     connection.getContext().executeFromIO(v -> {",
                "@@ -132,3 +132,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "     // Default behavior send go away",
                "-    super.onConnectionError(ctx, cause, http2Ex);",
                "+    super.onConnectionError(ctx, outbound, cause, http2Ex);",
                "   }",
                "@@ -136,3 +136,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   @Override",
                "-  protected void onStreamError(ChannelHandlerContext ctx, Throwable cause, Http2Exception.StreamException http2Ex) {",
                "+  protected void onStreamError(ChannelHandlerContext ctx, boolean outbound, Throwable cause, Http2Exception.StreamException http2Ex) {",
                "     connection.getContext().executeFromIO(v -> {",
                "@@ -141,3 +141,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "     // Default behavior reset stream",
                "-    super.onStreamError(ctx, cause, http2Ex);",
                "+    super.onStreamError(ctx, outbound, cause, http2Ex);",
                "   }",
                "@@ -223,3 +223,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "       } catch (Http2Exception e) {",
                "-        onError(chctx, e);",
                "+        onError(chctx, true, e);",
                "       }",
                "@@ -229,3 +229,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "-  ChannelFuture writePing(ByteBuf data) {",
                "+  ChannelFuture writePing(long data) {",
                "     ChannelPromise promise = chctx.newPromise();",
                "@@ -242,3 +242,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "-  private void _writePing(ByteBuf data, ChannelPromise promise) {",
                "+  private void _writePing(long data, ChannelPromise promise) {",
                "     encoder().writePing(chctx, false, data, promise);",
                "@@ -257,3 +257,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "     } catch (Http2Exception e) {",
                "-      onError(chctx, e);",
                "+      onError(chctx, true, e);",
                "     }",
                "@@ -415,3 +415,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   @Override",
                "-  public void onPingRead(ChannelHandlerContext ctx, ByteBuf data) throws Http2Exception {",
                "+  public void onPingRead(ChannelHandlerContext ctx, long data) throws Http2Exception {",
                "     throw new UnsupportedOperationException();",
                "@@ -420,3 +420,3 @@ class VertxHttp2ConnectionHandler<C extends Http2ConnectionBase> extends Http2Co",
                "   @Override",
                "-  public void onPingAckRead(ChannelHandlerContext ctx, ByteBuf data) throws Http2Exception {",
                "+  public void onPingAckRead(ChannelHandlerContext ctx, long data) throws Http2Exception {",
                "     throw new UnsupportedOperationException();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                "index 276532529..28d3e1228 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                "@@ -136,3 +136,3 @@ class VertxHttp2ConnectionHandlerBuilder<C extends Http2ConnectionBase> extends",
                "       @Override",
                "-      public void onPingRead(ChannelHandlerContext ctx, ByteBuf data) throws Http2Exception {",
                "+      public void onPingRead(ChannelHandlerContext channelHandlerContext, long l) throws Http2Exception {",
                "         throw new UnsupportedOperationException();",
                "@@ -140,3 +140,3 @@ class VertxHttp2ConnectionHandlerBuilder<C extends Http2ConnectionBase> extends",
                "       @Override",
                "-      public void onPingAckRead(ChannelHandlerContext ctx, ByteBuf data) throws Http2Exception {",
                "+      public void onPingAckRead(ChannelHandlerContext channelHandlerContext, long l) throws Http2Exception {",
                "         throw new UnsupportedOperationException();"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java",
                "src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java",
                "src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2390": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java, src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandler.java, src/main/java/io/vertx/core/http/impl/VertxHttp2ConnectionHandlerBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2390",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "45e32251e4431e8b6493aadcc739305c91d9851f",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1522390951,
            "hunks": 2,
            "message": "Json#decodeValue cannot deserialize a JSON null/number/boolean from a Buffer - fixes #2361",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/json/Json.java b/src/main/java/io/vertx/core/json/Json.java",
                "index 4f7e2a664..dcd0c0a80 100644",
                "--- a/src/main/java/io/vertx/core/json/Json.java",
                "+++ b/src/main/java/io/vertx/core/json/Json.java",
                "@@ -23,2 +23,3 @@ import java.io.DataInput;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.math.BigDecimal;",
                "@@ -164,3 +165,3 @@ public class Json {",
                "     try {",
                "-      return mapper.readValue((DataInput) new ByteBufInputStream(buf.getByteBuf()), clazz);",
                "+      return mapper.readValue((InputStream) new ByteBufInputStream(buf.getByteBuf()), clazz);",
                "     } catch (Exception e) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/json/Json.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2361": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/json/Json.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2361",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81d530c0fbfb142929f547e362563c699b96f806",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533586223,
            "hunks": 16,
            "message": "HttpServerRequest#netSocket() improvements - fixes #2577",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerRequest.java b/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "index 588267581..871725802 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "@@ -216,10 +216,31 @@ public interface HttpServerRequest extends ReadStream<Buffer> {",
                "    * Get a net socket for the underlying connection of this request.",
                "-   * <p>",
                "-   * USE THIS WITH CAUTION!",
                "-   * <p>",
                "-   * Once you have called this method, you must handle writing to the connection yourself using the net socket,",
                "-   * the server request instance will no longer be usable as normal.",
                "-   * Writing to the socket directly if you don't know what you're doing can easily break the HTTP protocol.",
                "+   * <p/>",
                "+   * This method must be called before the server response is ended.",
                "+   * <p/>",
                "+   * With {@code CONNECT} requests, a {@code 200} response is sent with no {@code content-length} header set",
                "+   * before returning the socket.",
                "+   * <p/>",
                "+   * <pre>",
                "+   * server.requestHandler(req -> {",
                "+   *   if (req.method() == HttpMethod.CONNECT) {",
                "+   *     // Send a 200 response to accept the connect",
                "+   *     NetSocket socket = req.netSocket();",
                "+   *     socket.handler(buff -> {",
                "+   *       socket.write(buff);",
                "+   *     });",
                "+   *   }",
                "+   *   ...",
                "+   * });",
                "+   * </pre>",
                "+   * <p/>",
                "+   * For other HTTP/1 requests once you have called this method, you must handle writing to the connection yourself using",
                "+   * the net socket, the server request instance will no longer be usable as normal. USE THIS WITH CAUTION! Writing to the socket directly if you don't know what you're",
                "+   * doing can easily break the HTTP protocol.",
                "+   * <p/>",
                "+   * With HTTP/2, a {@code 200} response is always sent with no {@code content-length} header set before returning the socket",
                "+   * like in the {@code CONNECT} case above.",
                "+   * <p/>",
                "    *",
                "    * @return the net socket",
                "+   * @throws IllegalStateException when the socket can't be created",
                "    */",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index 01ed6c394..4cef17259 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -346,3 +346,8 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "       }",
                "-    }.removeHandler(sock -> connectionMap.remove(chctx.channel())));",
                "+    }.removeHandler(sock -> {",
                "+      if (metrics != null) {",
                "+        metrics.responseEnd(responseInProgress.metric(), responseInProgress.response());",
                "+      }",
                "+      connectionMap.remove(chctx.channel());",
                "+    }));",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerRequestImpl.java b/src/main/java/io/vertx/core/http/impl/Http2ServerRequestImpl.java",
                "index 2873eb3ee..07614eeb8 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ServerRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerRequestImpl.java",
                "@@ -82,5 +82,2 @@ public class Http2ServerRequestImpl extends VertxHttp2Stream<Http2ServerConnecti",
                "-  private NetSocket netSocket;",
                "-",
                "-",
                "   public Http2ServerRequestImpl(Http2ServerConnection conn, Http2Stream stream, HttpServerMetrics metrics,",
                "@@ -411,8 +408,3 @@ public class Http2ServerRequestImpl extends VertxHttp2Stream<Http2ServerConnecti",
                "     synchronized (conn) {",
                "-      checkEnded();",
                "-      if (netSocket == null) {",
                "-        response.toNetSocket();",
                "-        netSocket = conn.toNetSocket(this);",
                "-      }",
                "-      return netSocket;",
                "+      return response.netSocket();",
                "     }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "index a66c5aff2..d768dd95c 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "@@ -33,2 +33,3 @@ import io.vertx.core.logging.Logger;",
                " import io.vertx.core.logging.LoggerFactory;",
                "+import io.vertx.core.net.NetSocket;",
                " import io.vertx.core.net.impl.ConnectionBase;",
                "@@ -74,2 +75,3 @@ public class Http2ServerResponseImpl implements HttpServerResponse {",
                "   private boolean inHandler;",
                "+  private NetSocket netSocket;",
                "@@ -370,6 +372,14 @@ public class Http2ServerResponseImpl implements HttpServerResponse {",
                "-  void toNetSocket() {",
                "+  NetSocket netSocket() {",
                "     checkEnded();",
                "-    checkSendHeaders(false);",
                "-    handleEnded(false);",
                "+    if (netSocket == null) {",
                "+      statusCode = 200;",
                "+      if (!checkSendHeaders(false)) {",
                "+        throw new IllegalStateException(\"Response for CONNECT already sent\");",
                "+      }",
                "+      ctx.flush();",
                "+      handleEnded(false);",
                "+      netSocket = conn.toNetSocket(stream);",
                "+    }",
                "+    return netSocket;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index a52960f30..a2206c1f6 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -280,3 +280,5 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "                     HandlerHolder<HttpHandlers> handler = httpHandlerMgr.chooseHandler(ch.eventLoop());",
                "-                    handler.context.executeFromIO(v -> handler.handler.exceptionHandler.handle(future.cause()));",
                "+                    handler.context.executeFromIO(v -> {",
                "+                      handler.handler.exceptionHandler.handle(future.cause());",
                "+                    });",
                "                   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "index 3a6dfa481..5fac1749b 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "@@ -80,3 +80,2 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "-  private NetSocket netSocket;",
                "   private Handler<HttpServerFileUpload> uploadHandler;",
                "@@ -398,6 +397,5 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "   public NetSocket netSocket() {",
                "-    if (netSocket == null) {",
                "-      netSocket = conn.createNetSocket();",
                "+    synchronized (conn) {",
                "+      return response.netSocket(method() == io.vertx.core.http.HttpMethod.CONNECT);",
                "     }",
                "-    return netSocket;",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "index addb08c6e..86b33e4f9 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "@@ -31,2 +31,3 @@ import io.vertx.core.logging.Logger;",
                " import io.vertx.core.logging.LoggerFactory;",
                "+import io.vertx.core.net.NetSocket;",
                " import io.vertx.core.net.impl.ConnectionBase;",
                "@@ -76,2 +77,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "   private long bytesWritten;",
                "+  private NetSocket netSocket;",
                "@@ -593,2 +595,19 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "+  NetSocket netSocket(boolean isConnect) {",
                "+    checkValid();",
                "+    if (netSocket == null) {",
                "+      if (isConnect) {",
                "+        if (headWritten) {",
                "+          throw new IllegalStateException(\"Response for CONNECT already sent\");",
                "+        }",
                "+        status = HttpResponseStatus.OK;",
                "+        prepareHeaders(-1);",
                "+        conn.writeToChannel(new AssembledHttpResponse(head, version, status, headers));",
                "+      }",
                "+      written = true;",
                "+      netSocket = conn.createNetSocket();",
                "+    }",
                "+    return netSocket;",
                "+  }",
                "+",
                "   @Override"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http2ServerRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2577": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java, src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java, src/main/java/io/vertx/core/http/impl/Http2ServerRequestImpl.java, src/main/java/io/vertx/core/http/impl/HttpServerImpl.java, src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java, src/main/java/io/vertx/core/http/HttpServerRequest.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2577",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "94af5360027543bbf43f7403b544106aef719bfe",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523292266,
            "hunks": 2,
            "message": "Http1xOrH2CHandler should remove itself before firing the buffer - fixes #2375",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xOrH2CHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xOrH2CHandler.java",
                "index 121fedfc5..5369c9d77 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xOrH2CHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xOrH2CHandler.java",
                "@@ -59,4 +59,4 @@ public class Http1xOrH2CHandler extends ChannelInboundHandlerAdapter {",
                "     configure(ctx, h2c);",
                "-    ctx.fireChannelRead(buf);",
                "     ctx.pipeline().remove(this);",
                "+    ctx.fireChannelRead(buf);",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xOrH2CHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2375": "refresh a file upload request in firefox cause vertx to print exception forever vert-x3/issues#344 Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xOrH2CHandler.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2375",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a7f115b6cad5a1bf5203b406f31cfb06cfe17ec5",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526635481,
            "hunks": 7,
            "message": "Dns client recursion desired - fixes #2441 (#2455) * implements #2445 - DnsClient: no option to enable the netty logger Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2445 - incorporated feedback from vietj Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com> * implements #2441 - DNS requests are always sent with the flag 'RecursionDesired' set to true Signed-off-by: Stephane Bastian <stephane.bastian.dev@gmail.com>",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index 7205835fd..1ef0c4b7e 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -34,2 +34,7 @@ public class DnsClientOptionsConverter {",
                "           break;",
                "+        case \"recursionDesired\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setRecursionDesired((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -49,2 +54,3 @@ public class DnsClientOptionsConverter {",
                "     json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+    json.put(\"recursionDesired\", obj.isRecursionDesired());",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/dns/DnsClientOptions.java b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "index 824641d50..3fce222d7 100644",
                "--- a/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "@@ -45,2 +45,7 @@ public class DnsClientOptions {",
                "+  /**",
                "+  * The default value for the recursion desired flag (RD) = {@code true}",
                "+  */",
                "+  public static final boolean DEFAULT_RECURSION_DESIRED = true;",
                "+  ",
                "   private int port = DEFAULT_PORT;",
                "@@ -49,3 +54,4 @@ public class DnsClientOptions {",
                "   private boolean logActivity = DEFAULT_LOG_ENABLED;",
                "-",
                "+  private boolean recursionDesired = DEFAULT_RECURSION_DESIRED;",
                "+  ",
                "   public DnsClientOptions() {",
                "@@ -62,2 +68,3 @@ public class DnsClientOptions {",
                "     logActivity = other.logActivity;",
                "+    recursionDesired = other.recursionDesired;",
                "   }",
                "@@ -144,2 +151,22 @@ public class DnsClientOptions {",
                "+  /**",
                "+   * Return whether or not recursion is desired",
                "+   *",
                "+   * @return {@code true} when recursion is desired",
                "+   */",
                "+  public boolean isRecursionDesired() {",
                "+    return recursionDesired;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Set whether or not recursion is desired",
                "+   *",
                "+   * @param recursionDesired the new value",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public DnsClientOptions setRecursionDesired(boolean recursionDesired) {",
                "+    this.recursionDesired = recursionDesired;",
                "+    return this;",
                "+  }",
                "+  ",
                "   public JsonObject toJson() {",
                "diff --git a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "index 2096bed9b..b5a7736e5 100644",
                "--- a/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java",
                "@@ -265,3 +265,3 @@ public final class DnsClientImpl implements DnsClient {",
                "     public Query(String name, DnsRecordType[] types, Handler<AsyncResult<List<T>>> handler) {",
                "-      this.msg = new DatagramDnsQuery(null, dnsServer, ThreadLocalRandom.current().nextInt()).setRecursionDesired(true);",
                "+      this.msg = new DatagramDnsQuery(null, dnsServer, ThreadLocalRandom.current().nextInt()).setRecursionDesired(options.isRecursionDesired());",
                "       for (DnsRecordType type: types) {"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                "src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2441": "the class DnsClientOptions now supports the property recursionDesired #2442 implements #2441 - the class DnsClientOptions now supports the property recursionDesired #2443 implements #2441 - DnsClientOptions now supports the property recursionDesired #2444 Dns client recursion desired - fixes #2441 #2455",
                "2455": "",
                "2445": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/java/io/vertx/core/dns/impl/DnsClientImpl.java, src/main/java/io/vertx/core/dns/DnsClientOptions.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2441, 2455, 2445",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0948407f1927f698d57fe737e246a3cc50dd90e8",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1531817947,
            "hunks": 6,
            "message": "Update to netty 4.1.25.Final and netty-tcnative 2.0.8.Final - fixes #2539",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "index dec702cd1..e61bb4c1f 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "@@ -15,18 +15,9 @@ import io.netty.bootstrap.ServerBootstrap;",
                " import io.netty.channel.Channel;",
                "-import io.netty.channel.ChannelOption;",
                " import io.netty.channel.EventLoopGroup;",
                " import io.netty.channel.ServerChannel;",
                "-import io.netty.channel.epoll.EpollChannelOption;",
                "-import io.netty.channel.kqueue.KQueue;",
                "-import io.netty.channel.kqueue.KQueueChannelOption;",
                "-import io.netty.channel.kqueue.KQueueDatagramChannel;",
                "-import io.netty.channel.kqueue.KQueueDomainSocketChannel;",
                "-import io.netty.channel.kqueue.KQueueEventLoopGroup;",
                "-import io.netty.channel.kqueue.KQueueServerDomainSocketChannel;",
                "-import io.netty.channel.kqueue.KQueueServerSocketChannel;",
                "-import io.netty.channel.kqueue.KQueueSocketChannel;",
                "+import io.netty.channel.kqueue.*;",
                " import io.netty.channel.socket.DatagramChannel;",
                " import io.netty.channel.socket.InternetProtocolFamily;",
                "-import io.netty.channel.socket.SocketChannel;",
                " import io.netty.channel.unix.DomainSocketAddress;",
                "+import io.vertx.core.datagram.DatagramSocketOptions;",
                " import io.vertx.core.net.NetServerOptions;",
                "@@ -105,5 +96,11 @@ class KQueueTransport extends Transport {",
                "   public void configure(NetServerOptions options, ServerBootstrap bootstrap) {",
                "-    bootstrap.option(EpollChannelOption.SO_REUSEPORT, options.isReusePort());",
                "+    bootstrap.option(KQueueChannelOption.SO_REUSEPORT, options.isReusePort());",
                "     super.configure(options, bootstrap);",
                "   }",
                "+",
                "+  @Override",
                "+  public void configure(DatagramChannel channel, DatagramSocketOptions options) {",
                "+    channel.config().setOption(KQueueChannelOption.SO_REUSEPORT, options.isReusePort());",
                "+    super.configure(channel, options);",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2539": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2539",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ff73dc2fb0a96e0d9dde1972111565739bedc7e7",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530086577,
            "hunks": 2,
            "message": "The waitersCount field can be decremented synchronously when a connection is acquired from the pool",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index c456718cd..828bd5504 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -188,6 +188,4 @@ public class Pool<C> {",
                "       ContextInternal ctx = conn.context;",
                "+      waitersCount--;",
                "       ctx.nettyEventLoop().execute(() -> {",
                "-        synchronized (Pool.this) {",
                "-          waitersCount--;",
                "-        }",
                "         waiter.handler.handle(Future.succeededFuture(conn.connection));"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "67cb08ad3d855dea698948b0d915b875e7a950fe",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530027880,
            "hunks": 4,
            "message": "Add discriminator to internal eventbus addresses Addresses are now like: \"__vertx.[net|ws|reply].randomUUID\" Signed-off-by: Joel Takvorian <joel.takvorian@qaraywa.net>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "index 162828ce4..0aada6839 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "@@ -409,3 +409,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "   protected String generateReplyAddress() {",
                "-    return Long.toString(replySequence.incrementAndGet());",
                "+    return \"__vertx.reply.\" + Long.toString(replySequence.incrementAndGet());",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "index 807c4e5c0..dc8500274 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "@@ -262,3 +262,3 @@ public class ClusteredEventBus extends EventBusImpl {",
                "     // The address is a cryptographically secure id that can't be guessed",
                "-    return UUID.randomUUID().toString();",
                "+    return \"__vertx.reply.\" + UUID.randomUUID().toString();",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "index dd4f9c424..541dc1472 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "@@ -65,4 +65,4 @@ public abstract class WebSocketImplBase<S extends WebSocketBase> implements WebS",
                "     this.supportsContinuation = supportsContinuation;",
                "-    this.textHandlerID = UUID.randomUUID().toString();",
                "-    this.binaryHandlerID = UUID.randomUUID().toString();",
                "+    this.textHandlerID = \"__vertx.ws.\" + UUID.randomUUID().toString();",
                "+    this.binaryHandlerID = \"__vertx.ws.\" + UUID.randomUUID().toString();",
                "     this.conn = conn;",
                "diff --git a/src/main/java/io/vertx/core/net/impl/NetSocketImpl.java b/src/main/java/io/vertx/core/net/impl/NetSocketImpl.java",
                "index 452a99c4d..bb8150b66 100644",
                "--- a/src/main/java/io/vertx/core/net/impl/NetSocketImpl.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/NetSocketImpl.java",
                "@@ -86,3 +86,3 @@ public class NetSocketImpl extends ConnectionBase implements NetSocketInternal {",
                "     this.helper = helper;",
                "-    this.writeHandlerID = UUID.randomUUID().toString();",
                "+    this.writeHandlerID = \"__vertx.net.\" + UUID.randomUUID().toString();",
                "     this.remoteAddress = remoteAddress;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "src/main/java/io/vertx/core/net/impl/NetSocketImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java, src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java, src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java, src/main/java/io/vertx/core/net/impl/NetSocketImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "365416187b37f69e2bda139c4acfce3d7fa69c6d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528616522,
            "hunks": 2,
            "message": "Minor comment improvements and corrections",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index 30c91d7a8..b2c532392 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -73,2 +73,8 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     this.version = version;",
                "+    // this is actually normal (although it sounds weird)",
                "+    // the pool uses a weight mechanism to keep track of the max number of connections",
                "+    // for instance when http2Size = 2 and http1Size= 5 then maxWeight = 10",
                "+    // which means that the pool can contain",
                "+    // - maxWeight / http1Weight = 5 HTTP/1.1 connections",
                "+    // - maxWeight / http2Weight = 2 HTTP/2 connections",
                "     this.http1Weight = client.getOptions().getHttp2MaxPoolSize();",
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index d7af13fe9..c456718cd 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -47,6 +47,5 @@ import java.util.function.BiConsumer;",
                "  * When a connection is created an {@link #initialWeight} is added to the current weight.",
                "- * When the channel is connected the {@link ConnectionListener#onConnectSuccess} callback",
                "- * provides the initial weight returned by the connect method and the actual connection weight so it can be used to",
                "- * correct the current weight. When the channel fails to connect the {@link ConnectionListener#onConnectFailure} failure",
                "- * provides the initial weight so it can be used to correct the current weight.",
                "+ * When the channel is connected the {@link ConnectResult} callback value provides actual connection weight so it",
                "+ * can be used to correct the pool weight. When the channel fails to connect the initial weight is used",
                "+ * to correct the pool weight.",
                "  *"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java, src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "042d3fff1c536ecf5c6a0bd035309d692a8cbbdf",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523985320,
            "hunks": 15,
            "message": "Addressed feedback from PR - made the Handlers class more reusable as a CyclicSequence",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "index cb567557f..0555125aa 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "@@ -30,2 +30,3 @@ import io.vertx.core.eventbus.SendContext;",
                " import io.vertx.core.impl.VertxInternal;",
                "+import io.vertx.core.impl.utils.CyclicSequence;",
                " import io.vertx.core.logging.Logger;",
                "@@ -57,3 +58,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "   protected final EventBusMetrics metrics;",
                "-  protected final ConcurrentMap<String, Handlers> handlerMap = new ConcurrentHashMap<>();",
                "+  protected final ConcurrentMap<String, CyclicSequence<HandlerHolder>> handlerMap = new ConcurrentHashMap<>();",
                "   protected final CodecManager codecManager = new CodecManager();",
                "@@ -232,3 +233,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     Objects.requireNonNull(registration.getHandler(), \"handler\");",
                "-    LocalRegistrationResult result = addLocalRegistration(address, registration, replyHandler, localOnly);",
                "+    LocalRegistrationResult<T> result = addLocalRegistration(address, registration, replyHandler, localOnly);",
                "     addRegistration(result.newAddress, address, replyHandler, localOnly, registration::setResult);",
                "@@ -246,3 +247,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     final boolean newAddress;",
                "-    public LocalRegistrationResult(HandlerHolder<T> holder, boolean newAddress) {",
                "+    LocalRegistrationResult(HandlerHolder<T> holder, boolean newAddress) {",
                "       this.holder = holder;",
                "@@ -252,3 +253,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-  private <T> LocalRegistrationResult addLocalRegistration(String address, HandlerRegistration<T> registration,",
                "+  private <T> LocalRegistrationResult<T> addLocalRegistration(String address, HandlerRegistration<T> registration,",
                "                                                            boolean replyHandler, boolean localOnly) {",
                "@@ -266,4 +267,7 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-    Handlers handlers = new Handlers(holder);",
                "-    Handlers actual = handlerMap.merge(address, handlers, (prev, current) -> prev.add(current.first()));",
                "+    CyclicSequence<HandlerHolder> handlers = new CyclicSequence<HandlerHolder>().add(holder);",
                "+    CyclicSequence<HandlerHolder> newHandlers = handlerMap.merge(",
                "+      address,",
                "+      handlers,",
                "+      (oldHandlers, current) -> oldHandlers.add(current.first()));",
                "@@ -274,3 +278,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-    boolean newAddress = handlers == actual;",
                "+    boolean newAddress = handlers == newHandlers;",
                "     return new LocalRegistrationResult<>(holder, newAddress);",
                "@@ -283,3 +287,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-  protected <T> void removeRegistration(HandlerHolder handlerHolder, String address,",
                "+  protected <T> void removeRegistration(HandlerHolder<T> handlerHolder, String address,",
                "                                         Handler<AsyncResult<Void>> completionHandler) {",
                "@@ -294,3 +298,4 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "       }",
                "-      return val.remove(holder);",
                "+      CyclicSequence<HandlerHolder> next = val.remove(holder);",
                "+      return next.size() == 0 ? null : next;",
                "     }) == null;",
                "@@ -368,3 +373,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     msg.setBus(this);",
                "-    Handlers handlers = handlerMap.get(msg.address());",
                "+    CyclicSequence<HandlerHolder> handlers = handlerMap.get(msg.address());",
                "     if (handlers != null) {",
                "@@ -372,3 +377,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "         //Choose one",
                "-        HandlerHolder holder = handlers.choose();",
                "+        HandlerHolder holder = handlers.next();",
                "         if (metrics != null) {",
                "@@ -500,3 +505,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     // Unregister all handlers explicitly - don't rely on context hooks",
                "-    for (Handlers handlers: handlerMap.values()) {",
                "+    for (CyclicSequence<HandlerHolder> handlers: handlerMap.values()) {",
                "       for (HandlerHolder holder: handlers) {",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/Handlers.java b/src/main/java/io/vertx/core/eventbus/impl/Handlers.java",
                "deleted file mode 100644",
                "index 3a0d66640..000000000",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/Handlers.java",
                "+++ /dev/null",
                "@@ -1,90 +0,0 @@",
                "-/*",
                "- * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "- *",
                "- * This program and the accompanying materials are made available under the",
                "- * terms of the Eclipse Public License 2.0 which is available at",
                "- * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "- * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "- *",
                "- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "- */",
                "-",
                "-package io.vertx.core.eventbus.impl;",
                "-",
                "-import java.util.*;",
                "-import java.util.concurrent.atomic.AtomicInteger;",
                "-",
                "-/**",
                "- * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "- */",
                "-public class Handlers implements Iterable<HandlerHolder> {",
                "-",
                "-  private final AtomicInteger pos;",
                "-  private final HandlerHolder[] elements;",
                "-",
                "-  Handlers(HandlerHolder holder) {",
                "-    this(new AtomicInteger(0), new HandlerHolder[]{holder});",
                "-  }",
                "-",
                "-  private Handlers(AtomicInteger pos, HandlerHolder[] elements) {",
                "-    this.pos = pos;",
                "-    this.elements = elements;",
                "-  }",
                "-",
                "-  HandlerHolder first() {",
                "-    return elements[0];",
                "-  }",
                "-",
                "-  Handlers add(HandlerHolder holder) {",
                "-    int len = elements.length;",
                "-    HandlerHolder[] copy = Arrays.copyOf(elements, len + 1);",
                "-    copy[len] = holder;",
                "-    return new Handlers(pos, copy);",
                "-  }",
                "-",
                "-  Handlers remove(HandlerHolder holder) {",
                "-    int len = elements.length;",
                "-    for (int i = 0;i < len;i++) {",
                "-      if (holder == elements[i]) {",
                "-        if (len > 1) {",
                "-          HandlerHolder[] copy = new HandlerHolder[len - 1];",
                "-          System.arraycopy(elements,0, copy, 0, i);",
                "-          System.arraycopy(elements, i + 1, copy, i, len - i - 1);",
                "-          return new Handlers(pos, copy);",
                "-        } else {",
                "-          return null;",
                "-        }",
                "-      }",
                "-    }",
                "-    return this;",
                "-  }",
                "-",
                "-  public HandlerHolder choose() {",
                "-    while (true) {",
                "-      int size = elements.length;",
                "-      if (size == 0) {",
                "-        return null;",
                "-      }",
                "-      int p = pos.getAndIncrement();",
                "-      if (p >= size - 1) {",
                "-        pos.set(0);",
                "-      }",
                "-      try {",
                "-        return elements[p];",
                "-      } catch (ArrayIndexOutOfBoundsException e) {",
                "-        // Can happen",
                "-        pos.set(0);",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  public int size() {",
                "-    return elements.length;",
                "-  }",
                "-",
                "-  @Override",
                "-  public Iterator<HandlerHolder> iterator() {",
                "-    return Arrays.asList(elements).iterator();",
                "-  }",
                "-}",
                "-",
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "index 2cdcf86c6..d9784a589 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "@@ -217,3 +217,3 @@ public class ClusteredEventBus extends EventBusImpl {",
                "   @Override",
                "-  protected <T> void removeRegistration(HandlerHolder lastHolder, String address,",
                "+  protected <T> void removeRegistration(HandlerHolder<T> lastHolder, String address,",
                "                                         Handler<AsyncResult<Void>> completionHandler) {",
                "diff --git a/src/main/java/io/vertx/core/impl/utils/CyclicSequence.java b/src/main/java/io/vertx/core/impl/utils/CyclicSequence.java",
                "new file mode 100644",
                "index 000000000..f368d1f33",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/impl/utils/CyclicSequence.java",
                "@@ -0,0 +1,137 @@",
                "+/*",
                "+ * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+",
                "+package io.vertx.core.impl.utils;",
                "+",
                "+import java.util.*;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+/**",
                "+ * A thread safe cyclic sequence of elements that can be used for round robin.",
                "+ * <p/>",
                "+ * A sequence is immutable and mutations uses {@link #add(Object)} and {@link #remove(Object)}",
                "+ * to return a modified copy of the current instance.",
                "+ * <p/>",
                "+ * The iterator uses a volatile index, so it can be incremented concurrently by several",
                "+ * threads with locking.",
                "+ *",
                "+ * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>",
                "+ */",
                "+public class CyclicSequence<T> implements Iterable<T>, Iterator<T> {",
                "+",
                "+  private final AtomicInteger pos;",
                "+  private final Object[] elements;",
                "+",
                "+  /**",
                "+   * Create a new empty sequence.",
                "+   */",
                "+  public CyclicSequence() {",
                "+    this(0, new Object[0]);",
                "+  }",
                "+",
                "+  private CyclicSequence(int pos, Object[] elements) {",
                "+    this.pos = new AtomicInteger(elements.length > 0 ? pos % elements.length : 0);",
                "+    this.elements = elements;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the current index",
                "+   */",
                "+  public int index() {",
                "+    return pos.get();",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the first element",
                "+   */",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  public T first() {",
                "+    return (T) (elements.length > 0 ? elements[0] : null);",
                "+  }",
                "+",
                "+  /**",
                "+   * Copy the current sequence, add {@code element} at the tail of this sequence and returns it.",
                "+   * @param element the element to add",
                "+   * @return the result",
                "+   */",
                "+  public CyclicSequence<T> add(T element) {",
                "+    int len = elements.length;",
                "+    Object[] copy = Arrays.copyOf(elements, len + 1);",
                "+    copy[len] = element;",
                "+    return new CyclicSequence<>(pos.get(), copy);",
                "+  }",
                "+",
                "+  /**",
                "+   * Remove the first occurrence of {@code element} in this sequence and returns it.",
                "+   * <p/>",
                "+   * If the sequence does not contains {@code element}, this instance is returned instead.",
                "+   *",
                "+   * @param element the element to remove",
                "+   * @return the result",
                "+   */",
                "+  public CyclicSequence<T> remove(T element) {",
                "+    int len = elements.length;",
                "+    for (int i = 0;i < len;i++) {",
                "+      if (Objects.equals(element, elements[i])) {",
                "+        if (len > 1) {",
                "+          Object[] copy = new Object[len - 1];",
                "+          System.arraycopy(elements,0, copy, 0, i);",
                "+          System.arraycopy(elements, i + 1, copy, i, len - i - 1);",
                "+          return new CyclicSequence<>(pos.get(), copy);",
                "+        } else {",
                "+          return new CyclicSequence<>();",
                "+        }",
                "+      }",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean hasNext() {",
                "+    return true;",
                "+  }",
                "+",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  @Override",
                "+  public T next() {",
                "+    int len = elements.length;",
                "+    switch (len) {",
                "+      case 0:",
                "+        return null;",
                "+      case 1:",
                "+        return (T) elements[0];",
                "+      default:",
                "+        int p = pos.getAndIncrement();",
                "+        if (p >= len) {",
                "+          p = p % len;",
                "+          if (p == 0) {",
                "+            pos.addAndGet(-len);",
                "+          }",
                "+        }",
                "+        return (T) elements[p];",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the size of this sequence",
                "+   */",
                "+  public int size() {",
                "+    return elements.length;",
                "+  }",
                "+",
                "+  @Override",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  public Iterator<T> iterator() {",
                "+    return Arrays.<T>asList((T[]) elements).iterator();",
                "+  }",
                "+}",
                "+"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "src/main/java/io/vertx/core/eventbus/impl/Handlers.java",
                "src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "src/main/java/io/vertx/core/impl/utils/CyclicSequence.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/utils/CyclicSequence.java, src/main/java/io/vertx/core/eventbus/impl/Handlers.java, src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java, src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "a491f4dfdbe37df99b111ddfa442169c4154d9ee",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533220792,
            "hunks": 12,
            "message": "Put back a few @GenIgnore as I was too optimistic",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index d9082ebb9..0e2d11c2b 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -329,2 +329,8 @@ Add a message header.",
                " +++",
                "+|[[localOnly]]`@localOnly`|`Boolean`|+++",
                "+Whether a message should be delivered to local consumers only. Defaults to <code>false</code>.",
                "+",
                "+ <p>",
                "+ <strong>This option is effective in clustered mode only and does not apply to reply messages</strong>.",
                "++++",
                " |[[sendTimeout]]`@sendTimeout`|`Number (long)`|+++",
                "diff --git a/src/main/java/io/vertx/core/Context.java b/src/main/java/io/vertx/core/Context.java",
                "index b3c3a8f0a..abb2cf961 100644",
                "--- a/src/main/java/io/vertx/core/Context.java",
                "+++ b/src/main/java/io/vertx/core/Context.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core;",
                " import io.vertx.codegen.annotations.Fluent;",
                "+import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -228,3 +229,3 @@ public interface Context {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   @Nullable",
                "diff --git a/src/main/java/io/vertx/core/Vertx.java b/src/main/java/io/vertx/core/Vertx.java",
                "index 92912fd8e..fa8092396 100644",
                "--- a/src/main/java/io/vertx/core/Vertx.java",
                "+++ b/src/main/java/io/vertx/core/Vertx.java",
                "@@ -584,3 +584,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   @Nullable Handler<Throwable> exceptionHandler();",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClient.java b/src/main/java/io/vertx/core/http/HttpClient.java",
                "index 9e66bcc44..0207ab027 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpClient.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClient.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.http;",
                " import io.vertx.codegen.annotations.Fluent;",
                "+import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.VertxGen;",
                "@@ -1417,3 +1418,3 @@ public interface HttpClient extends Measured {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   Function<HttpClientResponse, Future<HttpClientRequest>> redirectHandler();",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServer.java b/src/main/java/io/vertx/core/http/HttpServer.java",
                "index f7413da93..fcf089adc 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServer.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServer.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.http;",
                " import io.vertx.codegen.annotations.CacheReturn;",
                "+import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.core.AsyncResult;",
                "@@ -57,3 +58,3 @@ public interface HttpServer extends Measured {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   Handler<HttpServerRequest> requestHandler();",
                "@@ -99,3 +100,3 @@ public interface HttpServer extends Measured {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   Handler<ServerWebSocket> websocketHandler();",
                "diff --git a/src/main/java/io/vertx/core/net/NetServer.java b/src/main/java/io/vertx/core/net/NetServer.java",
                "index b2915240f..2163fe1da 100644",
                "--- a/src/main/java/io/vertx/core/net/NetServer.java",
                "+++ b/src/main/java/io/vertx/core/net/NetServer.java",
                "@@ -13,2 +13,3 @@ package io.vertx.core.net;",
                "+import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -47,3 +48,3 @@ public interface NetServer extends Measured {",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   Handler<NetSocket> connectHandler();",
                "@@ -148,2 +149,3 @@ public interface NetServer extends Measured {",
                "    */",
                "+  @GenIgnore",
                "   @Fluent"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/java/io/vertx/core/Context.java",
                "src/main/java/io/vertx/core/Vertx.java",
                "src/main/java/io/vertx/core/http/HttpClient.java",
                "src/main/java/io/vertx/core/http/HttpServer.java",
                "src/main/java/io/vertx/core/net/NetServer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/Context.java, src/main/java/io/vertx/core/http/HttpClient.java, src/main/java/io/vertx/core/Vertx.java, src/main/java/io/vertx/core/net/NetServer.java, src/main/java/io/vertx/core/http/HttpServer.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "597a2ca3c241ccb851cfc855d3846c3bc11fc37a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529308813,
            "hunks": 3,
            "message": "Create waiters list with expected size upfront Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "index 2e41314cf..e4d35ae86 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "@@ -20,2 +20,3 @@ import io.vertx.core.shareddata.Lock;",
                "+import java.util.ArrayList;",
                " import java.util.Collections;",
                "@@ -26,3 +27,2 @@ import java.util.concurrent.atomic.AtomicBoolean;",
                " import java.util.concurrent.atomic.AtomicReference;",
                "-import java.util.stream.Stream;",
                "@@ -53,3 +53,6 @@ public class LocalAsyncLocks {",
                "     WaitersList add(LockWaiter waiter) {",
                "-      return new WaitersList(Stream.concat(waiters.stream(), Stream.of(waiter)).collect(toList()));",
                "+      List<LockWaiter> list = new ArrayList<>(waiters.size() + 1);",
                "+      list.addAll(waiters);",
                "+      list.add(waiter);",
                "+      return new WaitersList(list);",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "749ff3c472896150e08fc082b08848d758bdc3f0",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533226920,
            "hunks": 28,
            "message": "Make sure haInfo sync map is not invoked on an event-loop Most often, code in HAManager is invoked from cluster manager threads. Some parts though need to be called from a worker thread. Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "index d55178f6f..02e0c8da4 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "@@ -118,5 +118,5 @@ public class ClusteredEventBus extends EventBusImpl {",
                "     setClusterViewChangedHandler(haManager);",
                "-    clusterManager.<String, ClusterNodeInfo>getAsyncMultiMap(SUBS_MAP_NAME, ar2 -> {",
                "-      if (ar2.succeeded()) {",
                "-        subs = ar2.result();",
                "+    clusterManager.<String, ClusterNodeInfo>getAsyncMultiMap(SUBS_MAP_NAME, ar1 -> {",
                "+      if (ar1.succeeded()) {",
                "+        subs = ar1.result();",
                "         server = vertx.createNetServer(getServerOptions());",
                "@@ -130,13 +130,15 @@ public class ClusteredEventBus extends EventBusImpl {",
                "             nodeInfo = new ClusterNodeInfo(clusterManager.getNodeID(), serverID);",
                "-            haManager.addDataToAHAInfo(SERVER_ID_HA_KEY, new JsonObject().put(\"host\", serverID.host).put(\"port\", serverID.port));",
                "-            if (resultHandler != null) {",
                "-              started = true;",
                "-              resultHandler.handle(Future.succeededFuture());",
                "-            }",
                "+            vertx.executeBlocking(fut -> {",
                "+              haManager.addDataToAHAInfo(SERVER_ID_HA_KEY, new JsonObject().put(\"host\", serverID.host).put(\"port\", serverID.port));",
                "+              fut.complete();",
                "+            }, false, ar2 -> {",
                "+              if (ar2.succeeded()) {",
                "+                started = true;",
                "+                resultHandler.handle(Future.succeededFuture());",
                "+              } else {",
                "+                resultHandler.handle(Future.failedFuture(ar2.cause()));",
                "+              }",
                "+            });",
                "           } else {",
                "-            if (resultHandler != null) {",
                "-              resultHandler.handle(Future.failedFuture(asyncResult.cause()));",
                "-            } else {",
                "-              log.error(asyncResult.cause());",
                "-            }",
                "+            resultHandler.handle(Future.failedFuture(asyncResult.cause()));",
                "           }",
                "@@ -144,7 +146,3 @@ public class ClusteredEventBus extends EventBusImpl {",
                "       } else {",
                "-        if (resultHandler != null) {",
                "-          resultHandler.handle(Future.failedFuture(ar2.cause()));",
                "-        } else {",
                "-          log.error(ar2.cause());",
                "-        }",
                "+        resultHandler.handle(Future.failedFuture(ar1.cause()));",
                "       }",
                "diff --git a/src/main/java/io/vertx/core/impl/HAManager.java b/src/main/java/io/vertx/core/impl/HAManager.java",
                "index 97c4c7eda..7edfc7b65 100644",
                "--- a/src/main/java/io/vertx/core/impl/HAManager.java",
                "+++ b/src/main/java/io/vertx/core/impl/HAManager.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "  *",
                "@@ -24,9 +24,3 @@ import io.vertx.core.spi.cluster.NodeListener;",
                "-import java.util.ArrayList;",
                "-import java.util.HashSet;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Queue;",
                "-import java.util.Set;",
                "+import java.util.*;",
                " import java.util.concurrent.ConcurrentLinkedQueue;",
                "@@ -37,3 +31,4 @@ import java.util.function.Consumer;",
                "-import static java.util.concurrent.TimeUnit.*;",
                "+import static java.util.concurrent.TimeUnit.MINUTES;",
                "+import static java.util.concurrent.TimeUnit.NANOSECONDS;",
                "@@ -105,3 +100,2 @@ public class HAManager {",
                "-  private static final String CLUSTER_MAP_NAME = \"__vertx.haInfo\";",
                "   private static final long QUORUM_CHECK_PERIOD = 1000;",
                "@@ -127,4 +121,4 @@ public class HAManager {",
                "-  public HAManager(VertxInternal vertx, DeploymentManager deploymentManager,",
                "-                   ClusterManager clusterManager, int quorumSize, String group, boolean enabled) {",
                "+  public HAManager(VertxInternal vertx, DeploymentManager deploymentManager, ClusterManager clusterManager,",
                "+                   Map<String, String> clusterMap, int quorumSize, String group, boolean enabled) {",
                "     this.vertx = vertx;",
                "@@ -132,2 +126,3 @@ public class HAManager {",
                "     this.clusterManager = clusterManager;",
                "+    this.clusterMap = clusterMap;",
                "     this.quorumSize = enabled ? quorumSize : 0;",
                "@@ -136,3 +131,2 @@ public class HAManager {",
                "     this.haInfo = new JsonObject().put(\"verticles\", new JsonArray()).put(\"group\", this.group);",
                "-    this.clusterMap = clusterManager.getSyncMap(CLUSTER_MAP_NAME);",
                "     this.nodeID = clusterManager.getNodeID();",
                "@@ -206,3 +200,2 @@ public class HAManager {",
                "       if (clusterManager.isActive()) {",
                "-",
                "         clusterMap.remove(nodeID);",
                "@@ -273,12 +266,19 @@ public class HAManager {",
                "                                 final Handler<AsyncResult<String>> doneHandler) {",
                "-    final Handler<AsyncResult<String>> wrappedHandler = asyncResult -> {",
                "-      if (asyncResult.succeeded()) {",
                "-        // Tell the other nodes of the cluster about the verticle for HA purposes",
                "-        addToHA(asyncResult.result(), verticleName, deploymentOptions);",
                "-      }",
                "-      if (doneHandler != null) {",
                "-        doneHandler.handle(asyncResult);",
                "-      } else if (asyncResult.failed()) {",
                "-        log.error(\"Failed to deploy verticle\", asyncResult.cause());",
                "-      }",
                "+    final Handler<AsyncResult<String>> wrappedHandler = ar1 -> {",
                "+      vertx.<String>executeBlocking(fut -> {",
                "+        if (ar1.succeeded()) {",
                "+          // Tell the other nodes of the cluster about the verticle for HA purposes",
                "+          String deploymentID = ar1.result();",
                "+          addToHA(deploymentID, verticleName, deploymentOptions);",
                "+          fut.complete(deploymentID);",
                "+        } else {",
                "+          fut.fail(ar1.cause());",
                "+        }",
                "+      }, false, ar2 -> {",
                "+        if (doneHandler != null) {",
                "+          doneHandler.handle(ar2);",
                "+        } else if (ar2.failed()) {",
                "+          log.error(\"Failed to deploy verticle\", ar2.cause());",
                "+        }",
                "+      });",
                "     };",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index c02f282c0..e2202aab9 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation",
                "  *",
                "@@ -18,13 +18,4 @@ import io.netty.util.ResourceLeakDetector;",
                " import io.netty.util.concurrent.GenericFutureListener;",
                "-import io.vertx.core.AsyncResult;",
                "-import io.vertx.core.Closeable;",
                "-import io.vertx.core.Context;",
                "-import io.vertx.core.DeploymentOptions;",
                "+import io.vertx.core.*;",
                " import io.vertx.core.Future;",
                "-import io.vertx.core.Handler;",
                "-import io.vertx.core.ServiceHelper;",
                "-import io.vertx.core.TimeoutStream;",
                "-import io.vertx.core.Verticle;",
                "-import io.vertx.core.Vertx;",
                "-import io.vertx.core.VertxOptions;",
                " import io.vertx.core.datagram.DatagramSocket;",
                "@@ -60,5 +51,5 @@ import io.vertx.core.net.impl.NetServerImpl;",
                " import io.vertx.core.net.impl.ServerID;",
                "+import io.vertx.core.net.impl.transport.Transport;",
                " import io.vertx.core.shareddata.SharedData;",
                " import io.vertx.core.shareddata.impl.SharedDataImpl;",
                "-import io.vertx.core.net.impl.transport.Transport;",
                " import io.vertx.core.spi.VerticleFactory;",
                "@@ -75,14 +66,4 @@ import java.net.InetAddress;",
                " import java.net.InetSocketAddress;",
                "-import java.util.ArrayList;",
                "-import java.util.HashMap;",
                "-import java.util.HashSet;",
                "-import java.util.Map;",
                "-import java.util.Objects;",
                "-import java.util.Set;",
                "-import java.util.concurrent.ConcurrentHashMap;",
                "-import java.util.concurrent.ConcurrentMap;",
                "-import java.util.concurrent.ExecutorService;",
                "-import java.util.concurrent.Executors;",
                "-import java.util.concurrent.ThreadFactory;",
                "-import java.util.concurrent.TimeUnit;",
                "+import java.util.*;",
                "+import java.util.concurrent.*;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "@@ -99,2 +80,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "+  private static final String CLUSTER_MAP_NAME = \"__vertx.haInfo\";",
                "   private static final String NETTY_IO_RATIO_PROPERTY_NAME = \"vertx.nettyIORatio\";",
                "@@ -117,3 +99,3 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "     VertxImpl vertx = new VertxImpl(options);",
                "-    vertx.initClustered(options, resultHandler);",
                "+    vertx.joinCluster(options, resultHandler);",
                "   }",
                "@@ -206,24 +188,53 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "-  private void initClustered(VertxOptions options, Handler<AsyncResult<Vertx>> resultHandler) {",
                "+  private void joinCluster(VertxOptions options, Handler<AsyncResult<Vertx>> resultHandler) {",
                "     clusterManager.setVertx(this);",
                "-    clusterManager.join(ar1 -> {",
                "-      if (ar1.failed()) {",
                "-        log.error(\"Failed to join cluster\", ar1.cause());",
                "-        resultHandler.handle(Future.failedFuture(ar1.cause()));",
                "+    clusterManager.join(ar -> {",
                "+      if (ar.succeeded()) {",
                "+        createHaManager(options, resultHandler);",
                "       } else {",
                "-        haManager = new HAManager(this, deploymentManager, clusterManager, options.getQuorumSize(), options.getHAGroup(), options.isHAEnabled());",
                "-        eventBus.start(ar2 -> {",
                "-          AsyncResult<Vertx> res;",
                "-          if (ar2.succeeded()) {",
                "-            // Init the manager (i.e register listener and check the quorum)",
                "-            // after the event bus has been fully started and updated its state",
                "-            // it will have also set the clustered changed view handler on the ha manager",
                "-            haManager.init();",
                "-            res = Future.succeededFuture(this);",
                "-          } else {",
                "-            log.error(\"Failed to start event bus\", ar2.cause());",
                "-            res = Future.failedFuture(ar2.cause());",
                "-          }",
                "-          resultHandler.handle(res);",
                "-        });",
                "+        log.error(\"Failed to join cluster\", ar.cause());",
                "+        resultHandler.handle(Future.failedFuture(ar.cause()));",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  private void createHaManager(VertxOptions options, Handler<AsyncResult<Vertx>> resultHandler) {",
                "+    this.<Map<String, String>>executeBlocking(fut -> {",
                "+      fut.complete(clusterManager.getSyncMap(CLUSTER_MAP_NAME));",
                "+    }, false, ar -> {",
                "+      if (ar.succeeded()) {",
                "+        Map<String, String> clusterMap = ar.result();",
                "+        haManager = new HAManager(this, deploymentManager, clusterManager, clusterMap, options.getQuorumSize(), options.getHAGroup(), options.isHAEnabled());",
                "+        startEventBus(resultHandler);",
                "+      } else {",
                "+        log.error(\"Failed to start HAManager\", ar.cause());",
                "+        resultHandler.handle(Future.failedFuture(ar.cause()));",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  private void startEventBus(Handler<AsyncResult<Vertx>> resultHandler) {",
                "+    eventBus.start(ar -> {",
                "+      if (ar.succeeded()) {",
                "+        initializeHaManager(resultHandler);",
                "+      } else {",
                "+        log.error(\"Failed to start event bus\", ar.cause());",
                "+        resultHandler.handle(Future.failedFuture(ar.cause()));",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  private void initializeHaManager(Handler<AsyncResult<Vertx>> resultHandler) {",
                "+    this.executeBlocking(fut -> {",
                "+      // Init the manager (i.e register listener and check the quorum)",
                "+      // after the event bus has been fully started and updated its state",
                "+      // it will have also set the clustered changed view handler on the ha manager",
                "+      haManager.init();",
                "+      fut.complete();",
                "+    }, false, ar -> {",
                "+      if (ar.succeeded()) {",
                "+        resultHandler.handle(Future.succeededFuture(this));",
                "+      } else {",
                "+        log.error(\"Failed to initialize HAManager\", ar.cause());",
                "+        resultHandler.handle(Future.failedFuture(ar.cause()));",
                "       }",
                "@@ -527,36 +538,40 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "       deploymentManager.undeployAll(ar1 -> {",
                "-        if (haManager() != null) {",
                "-          haManager().stop();",
                "-        }",
                "-        addressResolver.close(ar2 -> {",
                "-          eventBus.close(ar3 -> {",
                "-            closeClusterManager(ar4 -> {",
                "-              // Copy set to prevent ConcurrentModificationException",
                "-              Set<HttpServer> httpServers = new HashSet<>(sharedHttpServers.values());",
                "-              Set<NetServerImpl> netServers = new HashSet<>(sharedNetServers.values());",
                "-              sharedHttpServers.clear();",
                "-              sharedNetServers.clear();",
                "-",
                "-              int serverCount = httpServers.size() + netServers.size();",
                "-",
                "-              AtomicInteger serverCloseCount = new AtomicInteger();",
                "-",
                "-              Handler<AsyncResult<Void>> serverCloseHandler = res -> {",
                "-                if (res.failed()) {",
                "-                  log.error(\"Failure in shutting down server\", res.cause());",
                "+        this.executeBlocking(fut -> {",
                "+          if (haManager() != null) {",
                "+            haManager().stop();",
                "+          }",
                "+          fut.complete();",
                "+        }, false, ar2 -> {",
                "+          addressResolver.close(ar3 -> {",
                "+            eventBus.close(ar4 -> {",
                "+              closeClusterManager(ar5 -> {",
                "+                // Copy set to prevent ConcurrentModificationException",
                "+                Set<HttpServer> httpServers = new HashSet<>(sharedHttpServers.values());",
                "+                Set<NetServerImpl> netServers = new HashSet<>(sharedNetServers.values());",
                "+                sharedHttpServers.clear();",
                "+                sharedNetServers.clear();",
                "+",
                "+                int serverCount = httpServers.size() + netServers.size();",
                "+",
                "+                AtomicInteger serverCloseCount = new AtomicInteger();",
                "+",
                "+                Handler<AsyncResult<Void>> serverCloseHandler = res -> {",
                "+                  if (res.failed()) {",
                "+                    log.error(\"Failure in shutting down server\", res.cause());",
                "+                  }",
                "+                  if (serverCloseCount.incrementAndGet() == serverCount) {",
                "+                    deleteCacheDirAndShutdown(completionHandler);",
                "+                  }",
                "+                };",
                "+",
                "+                for (HttpServer server : httpServers) {",
                "+                  server.close(serverCloseHandler);",
                "+                }",
                "+                for (NetServerImpl server : netServers) {",
                "+                  server.close(serverCloseHandler);",
                "                 }",
                "-                if (serverCloseCount.incrementAndGet() == serverCount) {",
                "+                if (serverCount == 0) {",
                "                   deleteCacheDirAndShutdown(completionHandler);",
                "                 }",
                "-              };",
                "-",
                "-              for (HttpServer server : httpServers) {",
                "-                server.close(serverCloseHandler);",
                "-              }",
                "-              for (NetServerImpl server : netServers) {",
                "-                server.close(serverCloseHandler);",
                "-              }",
                "-              if (serverCount == 0) {",
                "-                deleteCacheDirAndShutdown(completionHandler);",
                "-              }",
                "+              });",
                "             });",
                "@@ -670,6 +685,14 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   public void undeploy(String deploymentID, Handler<AsyncResult<Void>> completionHandler) {",
                "-    if (haManager() != null && haManager().isEnabled()) {",
                "-      haManager().removeFromHA(deploymentID);",
                "-    }",
                "-    deploymentManager.undeployVerticle(deploymentID, completionHandler);",
                "+    this.executeBlocking(fut -> {",
                "+      if (haManager() != null && haManager().isEnabled()) {",
                "+        haManager().removeFromHA(deploymentID);",
                "+      }",
                "+      fut.complete();",
                "+    }, false, ar -> {",
                "+      if (ar.succeeded()) {",
                "+        deploymentManager.undeployVerticle(deploymentID, completionHandler);",
                "+      } else {",
                "+        completionHandler.handle(Future.failedFuture(ar.cause()));",
                "+      }",
                "+    });",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java",
                "src/main/java/io/vertx/core/impl/HAManager.java",
                "src/main/java/io/vertx/core/impl/VertxImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/eventbus/impl/clustered/ClusteredEventBus.java, src/main/java/io/vertx/core/impl/VertxImpl.java, src/main/java/io/vertx/core/impl/HAManager.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8e69231df56672da43ee5f069ef8c9b8e884b280",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524665723,
            "hunks": 12,
            "message": "Add support for listening on a SocketAddress to HttpServer. This enables DomainSockets support when using native transports (BSD & Linux). Signed-off-by: Thomas Cataldo <thomas.cataldo@blue-mind.net>",
            "diff": [
                "diff --git a/src/main/asciidoc/index.adoc b/src/main/asciidoc/index.adoc",
                "index ae9f57a76..95bab4e41 100644",
                "--- a/src/main/asciidoc/index.adoc",
                "+++ b/src/main/asciidoc/index.adoc",
                "@@ -1580,3 +1580,3 @@ Native on BSD gives you extra networking options:",
                "-Natives provide support domain sockets for `NetServer`:",
                "+Natives provide domain sockets support for `NetServer` and `HttpServer`:",
                "@@ -1585,3 +1585,18 @@ Natives provide support domain sockets for `NetServer`:",
                " {@link examples.CoreExamples#serverWithDomainSockets}",
                "+----`",
                "+",
                "+Or for http:",
                "+[source,$lang]",
                " ----",
                "+vertx.createHttpServer().requestHandler(req -> {",
                "+  // Handle application",
                "+}).listen(SocketAddress.domainSocketAddress(\"/var/tmp/http.sock\"), ar -> {",
                "+  if (ar.succeeded()) {",
                "+    // Bound to socket",
                "+  } else {",
                "+    ar.cause().printStackTrace();",
                "+  }",
                "+});",
                "+----`",
                "+",
                "@@ -1594,3 +1609,3 @@ As well as `NetClient`:",
                "-NOTE: support for `HttpServer` and `HttpClient` can be expected in later versions of Vert.x",
                "+NOTE: support for `HttpClient` can be expected in later versions of Vert.x",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServer.java b/src/main/java/io/vertx/core/http/HttpServer.java",
                "index af27d456a..1442e89b5 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServer.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServer.java",
                "@@ -21,2 +21,3 @@ import io.vertx.codegen.annotations.VertxGen;",
                " import io.vertx.core.metrics.Measured;",
                "+import io.vertx.core.net.SocketAddress;",
                " import io.vertx.core.streams.ReadStream;",
                "@@ -139,2 +140,13 @@ public interface HttpServer extends Measured {",
                "+  /**",
                "+   * Tell the server to start listening on the given address supplying",
                "+   * a handler that will be called when the server is actually",
                "+   * listening (or has failed).",
                "+   *",
                "+   * @param address the address to listen on",
                "+   * @param listenHandler  the listen handler",
                "+   */",
                "+  @Fluent",
                "+  HttpServer listen(SocketAddress address, Handler<AsyncResult<HttpServer>> listenHandler);",
                "+    ",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index c4b87bc73..01f7384aa 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -221,3 +221,7 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "-  public synchronized HttpServer listen(int port, String host, Handler<AsyncResult<HttpServer>> listenHandler) {",
                "+  public HttpServer listen(int port, String host, Handler<AsyncResult<HttpServer>> listenHandler) {",
                "+    return listen(SocketAddress.inetSocketAddress(port, host), listenHandler);",
                "+  }",
                "+    ",
                "+  public synchronized HttpServer listen(SocketAddress address, Handler<AsyncResult<HttpServer>> listenHandler) {",
                "     if (requestStream.handler() == null && wsStream.handler() == null) {",
                "@@ -230,2 +234,4 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     listening = true;",
                "+    String host = address.host() != null ? address.host() : \"localhost\";",
                "+    int port = address.port();",
                "     serverOrigin = (options.isSsl() ? \"https\" : \"http\") + \"://\" + host + \":\" + port;",
                "@@ -331,3 +337,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "         try {",
                "-          bindFuture = AsyncResolveConnectHelper.doBind(vertx, SocketAddress.inetSocketAddress(port, host), bootstrap);",
                "+          bindFuture = AsyncResolveConnectHelper.doBind(vertx, address, bootstrap);",
                "           bindFuture.addListener(res -> {",
                "@@ -337,6 +343,10 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "               Channel serverChannel = res.result();",
                "-              HttpServerImpl.this.actualPort = ((InetSocketAddress)serverChannel.localAddress()).getPort();",
                "+\t      if (serverChannel.localAddress() instanceof InetSocketAddress) {",
                "+\t\tHttpServerImpl.this.actualPort = ((InetSocketAddress)serverChannel.localAddress()).getPort();",
                "+\t      } else {",
                "+\t\tHttpServerImpl.this.actualPort = address.port();",
                "+\t      }",
                "               serverChannelGroup.add(serverChannel);",
                "               VertxMetrics metrics = vertx.metricsSPI();",
                "-              this.metrics = metrics != null ? metrics.createMetrics(this, new SocketAddressImpl(port, host), options) : null;",
                "+              this.metrics = metrics != null ? metrics.createMetrics(this, address, options) : null;",
                "             }",
                "@@ -362,3 +372,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "         VertxMetrics metrics = vertx.metricsSPI();",
                "-        this.metrics = metrics != null ? metrics.createMetrics(this, new SocketAddressImpl(port, host), options) : null;",
                "+        this.metrics = metrics != null ? metrics.createMetrics(this, address, options) : null;",
                "       }"
            ],
            "changed_files": [
                "src/main/asciidoc/index.adoc",
                "src/main/java/io/vertx/core/http/HttpServer.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerImpl.java, src/main/java/io/vertx/core/http/HttpServer.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "c913f0a51960a9f1c5ea118066e6347df79e631b",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526397066,
            "hunks": 14,
            "message": "Missing @Nullable in AsyncMap, Context, Vertx and WorkerExecutor Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/Context.java b/src/main/java/io/vertx/core/Context.java",
                "index b60085be2..a31933d81 100644",
                "--- a/src/main/java/io/vertx/core/Context.java",
                "+++ b/src/main/java/io/vertx/core/Context.java",
                "@@ -118,3 +118,3 @@ public interface Context {",
                "    */",
                "-  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered, Handler<AsyncResult<T>> resultHandler);",
                "+  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered, Handler<AsyncResult<@Nullable T>> resultHandler);",
                "@@ -126,3 +126,3 @@ public interface Context {",
                "    */",
                "-  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, Handler<AsyncResult<T>> resultHandler);",
                "+  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, Handler<AsyncResult<@Nullable T>> resultHandler);",
                "diff --git a/src/main/java/io/vertx/core/Vertx.java b/src/main/java/io/vertx/core/Vertx.java",
                "index f90a9207f..b8a4b4b15 100644",
                "--- a/src/main/java/io/vertx/core/Vertx.java",
                "+++ b/src/main/java/io/vertx/core/Vertx.java",
                "@@ -14,7 +14,3 @@ package io.vertx.core;",
                " import io.netty.channel.EventLoopGroup;",
                "-import io.vertx.codegen.annotations.CacheReturn;",
                "-import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                "-import io.vertx.codegen.annotations.Nullable;",
                "-import io.vertx.codegen.annotations.VertxGen;",
                "+import io.vertx.codegen.annotations.*;",
                " import io.vertx.core.datagram.DatagramSocket;",
                "@@ -522,3 +518,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered, Handler<AsyncResult<T>> resultHandler);",
                "+  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered, Handler<AsyncResult<@Nullable T>> resultHandler);",
                "@@ -527,3 +523,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, Handler<AsyncResult<T>> resultHandler);",
                "+  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, Handler<AsyncResult<@Nullable T>> resultHandler);",
                "diff --git a/src/main/java/io/vertx/core/WorkerExecutor.java b/src/main/java/io/vertx/core/WorkerExecutor.java",
                "index e4071d611..ad3f5eb9e 100644",
                "--- a/src/main/java/io/vertx/core/WorkerExecutor.java",
                "+++ b/src/main/java/io/vertx/core/WorkerExecutor.java",
                "@@ -13,2 +13,3 @@ package io.vertx.core;",
                "+import io.vertx.codegen.annotations.Nullable;",
                " import io.vertx.codegen.annotations.VertxGen;",
                "@@ -49,3 +50,3 @@ public interface WorkerExecutor extends Measured {",
                "    */",
                "-  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered, Handler<AsyncResult<T>> resultHandler);",
                "+  <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered, Handler<AsyncResult<@Nullable T>> resultHandler);",
                "@@ -54,3 +55,3 @@ public interface WorkerExecutor extends Measured {",
                "    */",
                "-  default <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, Handler<AsyncResult<T>> resultHandler) {",
                "+  default <T> void executeBlocking(Handler<Future<T>> blockingCodeHandler, Handler<AsyncResult<@Nullable T>> resultHandler) {",
                "     executeBlocking(blockingCodeHandler, true, resultHandler);",
                "diff --git a/src/main/java/io/vertx/core/shareddata/AsyncMap.java b/src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                "index 6ae4d4421..817276d18 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.shareddata;",
                " import io.vertx.codegen.annotations.GenIgnore;",
                "+import io.vertx.codegen.annotations.Nullable;",
                " import io.vertx.codegen.annotations.VertxGen;",
                "@@ -42,3 +43,3 @@ public interface AsyncMap<K, V> {",
                "    */",
                "-  void get(K k, Handler<AsyncResult<V>> resultHandler);",
                "+  void get(K k, Handler<AsyncResult<@Nullable V>> resultHandler);",
                "@@ -72,3 +73,3 @@ public interface AsyncMap<K, V> {",
                "    */",
                "-  void putIfAbsent(K k, V v, Handler<AsyncResult<V>> completionHandler);",
                "+  void putIfAbsent(K k, V v, Handler<AsyncResult<@Nullable V>> completionHandler);",
                "@@ -83,3 +84,3 @@ public interface AsyncMap<K, V> {",
                "    */",
                "-  void putIfAbsent(K k, V v, long ttl, Handler<AsyncResult<V>> completionHandler);",
                "+  void putIfAbsent(K k, V v, long ttl, Handler<AsyncResult<@Nullable V>> completionHandler);",
                "@@ -91,3 +92,3 @@ public interface AsyncMap<K, V> {",
                "    */",
                "-  void remove(K k, Handler<AsyncResult<V>> resultHandler);",
                "+  void remove(K k, Handler<AsyncResult<@Nullable V>> resultHandler);",
                "@@ -110,3 +111,3 @@ public interface AsyncMap<K, V> {",
                "    */",
                "-  void replace(K k, V v, Handler<AsyncResult<V>> resultHandler);",
                "+  void replace(K k, V v, Handler<AsyncResult<@Nullable V>> resultHandler);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/Context.java",
                "src/main/java/io/vertx/core/Vertx.java",
                "src/main/java/io/vertx/core/WorkerExecutor.java",
                "src/main/java/io/vertx/core/shareddata/AsyncMap.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/Vertx.java, src/main/java/io/vertx/core/WorkerExecutor.java, src/main/java/io/vertx/core/Context.java, src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "47bc80cd615dab4c5980e4d6d0015f64f4d41d81",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525337407,
            "hunks": 3,
            "message": "Improve HttpServerOptions max chunk size javadoc",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerOptions.java b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "index 00bc833a8..27ae91adf 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.http;",
                " import io.vertx.codegen.annotations.DataObject;",
                "+import io.vertx.core.Handler;",
                " import io.vertx.core.buffer.Buffer;",
                "@@ -549,3 +550,4 @@ public class HttpServerOptions extends NetServerOptions {",
                "   /**",
                "-   * Set the maximum HTTP chunk size",
                "+   * Set the maximum HTTP chunk size that {@link HttpServerRequest#handler(Handler)} will receive",
                "+   *",
                "    * @param maxChunkSize the maximum chunk size",
                "@@ -559,4 +561,3 @@ public class HttpServerOptions extends NetServerOptions {",
                "   /**",
                "-   * Returns the maximum HTTP chunk size",
                "-   * @return the maximum HTTP chunk size",
                "+   * @return the maximum HTTP chunk size that {@link HttpServerRequest#handler(Handler)} will receive",
                "    */"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpServerOptions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/HttpServerOptions.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "0f78fe89fdd3c89eb39e1d81a6d5c679f166715a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524902675,
            "hunks": 7,
            "message": "Document more the ConcurrentCyclicSequence and simplify the next() logic to use a plain mod operation, added also a micro benchmark",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "index fd7d00874..1ff9a784d 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "@@ -30,3 +30,3 @@ import io.vertx.core.eventbus.SendContext;",
                " import io.vertx.core.impl.VertxInternal;",
                "-import io.vertx.core.impl.utils.CyclicSequence;",
                "+import io.vertx.core.impl.utils.ConcurrentCyclicSequence;",
                " import io.vertx.core.logging.Logger;",
                "@@ -58,3 +58,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "   protected final EventBusMetrics metrics;",
                "-  protected final ConcurrentMap<String, CyclicSequence<HandlerHolder>> handlerMap = new ConcurrentHashMap<>();",
                "+  protected final ConcurrentMap<String, ConcurrentCyclicSequence<HandlerHolder>> handlerMap = new ConcurrentHashMap<>();",
                "   protected final CodecManager codecManager = new CodecManager();",
                "@@ -267,4 +267,4 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-    CyclicSequence<HandlerHolder> handlers = new CyclicSequence<HandlerHolder>().add(holder);",
                "-    CyclicSequence<HandlerHolder> actualHandlers = handlerMap.merge(",
                "+    ConcurrentCyclicSequence<HandlerHolder> handlers = new ConcurrentCyclicSequence<HandlerHolder>().add(holder);",
                "+    ConcurrentCyclicSequence<HandlerHolder> actualHandlers = handlerMap.merge(",
                "       address,",
                "@@ -298,3 +298,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "       }",
                "-      CyclicSequence<HandlerHolder> next = val.remove(holder);",
                "+      ConcurrentCyclicSequence<HandlerHolder> next = val.remove(holder);",
                "       return next.size() == 0 ? null : next;",
                "@@ -373,3 +373,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     msg.setBus(this);",
                "-    CyclicSequence<HandlerHolder> handlers = handlerMap.get(msg.address());",
                "+    ConcurrentCyclicSequence<HandlerHolder> handlers = handlerMap.get(msg.address());",
                "     if (handlers != null) {",
                "@@ -505,3 +505,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     // Unregister all handlers explicitly - don't rely on context hooks",
                "-    for (CyclicSequence<HandlerHolder> handlers: handlerMap.values()) {",
                "+    for (ConcurrentCyclicSequence<HandlerHolder> handlers: handlerMap.values()) {",
                "       for (HandlerHolder holder: handlers) {",
                "diff --git a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "new file mode 100644",
                "index 000000000..0924b25da",
                "--- /dev/null",
                "+++ b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "@@ -0,0 +1,148 @@",
                "+/*",
                "+ * Copyright (c) 2011-2017 Contributors to the Eclipse Foundation",
                "+ *",
                "+ * This program and the accompanying materials are made available under the",
                "+ * terms of the Eclipse Public License 2.0 which is available at",
                "+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0",
                "+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.",
                "+ *",
                "+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0",
                "+ */",
                "+",
                "+package io.vertx.core.impl.utils;",
                "+",
                "+import java.util.*;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+/**",
                "+ * A concurrent cyclic sequence of elements that can be used for round robin.",
                "+ * <p/>",
                "+ * The sequence is immutable and modifications are done with copy-on-write using",
                "+ * {@link #add(Object)} and {@link #remove(Object)} to return a modified copy of the current instance.",
                "+ * <p/>",
                "+ * The internal counter uses a volatile index, so it can be incremented concurrently by several",
                "+ * threads without locking.",
                "+ *",
                "+ * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "+ * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>",
                "+ */",
                "+public class ConcurrentCyclicSequence<T> implements Iterable<T>, Iterator<T> {",
                "+",
                "+  private final AtomicInteger pos;",
                "+  private final Object[] elements;",
                "+",
                "+  /**",
                "+   * Create a new empty sequence.",
                "+   */",
                "+  public ConcurrentCyclicSequence() {",
                "+    this(0, new Object[0]);",
                "+  }",
                "+",
                "+  /**",
                "+   * Create a new empty sequence.",
                "+   */",
                "+  public ConcurrentCyclicSequence(T... elements) {",
                "+    this(0, elements.clone());",
                "+  }",
                "+",
                "+  private ConcurrentCyclicSequence(int pos, Object[] elements) {",
                "+    this.pos = new AtomicInteger(pos);",
                "+    this.elements = elements;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the current index",
                "+   */",
                "+  public int index() {",
                "+    return elements.length > 0 ? pos.get() % elements.length : 0;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the first element or {@code null} when the sequence is empty",
                "+   */",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  public T first() {",
                "+    return (T) (elements.length > 0 ? elements[0] : null);",
                "+  }",
                "+",
                "+  /**",
                "+   * Copy the current sequence, add {@code element} at the tail of this sequence and returns it.",
                "+   * @param element the element to add",
                "+   * @return the resulting sequence",
                "+   */",
                "+  public ConcurrentCyclicSequence<T> add(T element) {",
                "+    int len = elements.length;",
                "+    Object[] copy = Arrays.copyOf(elements, len + 1);",
                "+    copy[len] = element;",
                "+    return new ConcurrentCyclicSequence<>(pos.get(), copy);",
                "+  }",
                "+",
                "+  /**",
                "+   * Remove the first occurrence of {@code element} in this sequence and returns it.",
                "+   * <p/>",
                "+   * If the sequence does not contains {@code element}, this instance is returned instead.",
                "+   *",
                "+   * @param element the element to remove",
                "+   * @return the resulting sequence",
                "+   */",
                "+  public ConcurrentCyclicSequence<T> remove(T element) {",
                "+    int len = elements.length;",
                "+    for (int i = 0;i < len;i++) {",
                "+      if (Objects.equals(element, elements[i])) {",
                "+        if (len > 1) {",
                "+          Object[] copy = new Object[len - 1];",
                "+          System.arraycopy(elements,0, copy, 0, i);",
                "+          System.arraycopy(elements, i + 1, copy, i, len - i - 1);",
                "+          return new ConcurrentCyclicSequence<>(pos.get() % copy.length, copy);",
                "+        } else {",
                "+          return new ConcurrentCyclicSequence<>();",
                "+        }",
                "+      }",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return always {@code true}",
                "+   */",
                "+  @Override",
                "+  public boolean hasNext() {",
                "+    return true;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the next element in the sequence",
                "+   */",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  @Override",
                "+  public T next() {",
                "+    int len = elements.length;",
                "+    switch (len) {",
                "+      case 0:",
                "+        return null;",
                "+      case 1:",
                "+        return (T) elements[0];",
                "+      default:",
                "+        int p;",
                "+        p = pos.getAndIncrement();",
                "+        return (T) elements[Math.abs(p % len)];",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the size of this sequence",
                "+   */",
                "+  public int size() {",
                "+    return elements.length;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return an iterator starting at the first element of the sequence, the iterator will not throw {@link ConcurrentModificationException}",
                "+   */",
                "+  @Override",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  public Iterator<T> iterator() {",
                "+    return Arrays.asList((T[]) elements).iterator();",
                "+  }",
                "+}",
                "+"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java, src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "357af84886367ef31dc61f00a646e6455f1ac8c8",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528616662,
            "hunks": 26,
            "message": "Regen data object converters",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index e2a9c9e08..c6723aee0 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -122,2 +122,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index fb0ba8bcd..7a1f9ad2a 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -200,2 +200,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index e447ef56e..9659e371c 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -72,2 +72,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index 573c377d7..2cf0b9875 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -120,2 +120,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index 0655bd233..46811cbe0 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -56,2 +56,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index 65b0b3322..9c37d54c2 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -124,2 +124,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index 1ef0c4b7e..e4c2d90ce 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -56,2 +56,3 @@ public class DnsClientOptionsConverter {",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index 5ff4427fa..658bf0955 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -322,2 +322,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index fd2e58d1e..7f890a152 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -48,2 +48,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index a4d130c45..4c92d678f 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -92,2 +92,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index 8759fe0ef..1ea67f0c2 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -44,2 +44,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 1b969013b..72b397778 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -60,2 +60,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index 74bf05c01..b0691dec6 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -207,2 +207,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index b4bb830bb..c8184a8dc 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -127,2 +127,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index 4e8e3ecb1..dff26f4f9 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -30,2 +30,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index 143ac4f2e..de5ae2cd3 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -60,2 +60,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "index 20c302d34..58180f6bb 100644",
                "--- a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "@@ -48,2 +48,3 @@ public class JksOptionsConverter {",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index a199d4d73..08a2b2944 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -44,2 +44,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index 57b495235..be7e32bb2 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -64,2 +64,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index 5ae451029..77eb79c5b 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -60,2 +60,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index 564a56f8f..078b85248 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -30,2 +30,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index 0731fb547..0f9f91608 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -104,2 +104,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index d588e65ec..bcce03eeb 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -50,2 +50,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "index 1305209b1..89d2c3844 100644",
                "--- a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "@@ -48,2 +48,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index 07f4d5c06..221354ab3 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -62,2 +62,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index 4b5021c49..a02aa1af1 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -202,2 +202,3 @@ import io.vertx.core.json.JsonArray;",
                "   }",
                "+",
                " }"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/net/PfxOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/JksOptionsConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "f13cf9c43dfc1a05761d1f5ad8f8ced7b9de8574",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525338757,
            "hunks": 2,
            "message": "Avoid to allocate an empty array at each instance creation of ConcurrentCyclicSequence",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "index db1d19b9b..006dc4a9e 100644",
                "--- a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "+++ b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "@@ -30,2 +30,4 @@ public class ConcurrentCyclicSequence<T> implements Iterable<T>, Iterator<T> {",
                "+  private static final Object[] EMPTY_ARRAY = new Object[0];",
                "+",
                "   private final AtomicInteger pos;",
                "@@ -37,3 +39,3 @@ public class ConcurrentCyclicSequence<T> implements Iterable<T>, Iterator<T> {",
                "   public ConcurrentCyclicSequence() {",
                "-    this(0, new Object[0]);",
                "+    this(0, EMPTY_ARRAY);",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "3f55a145d40cd706725d45af17617bea18110577",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528912448,
            "hunks": 26,
            "message": "Generated files Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index c6723aee0..60df39c2a 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 7a1f9ad2a..35bbdc11d 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index 9659e371c..f6cab9778 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index 2cf0b9875..2fd9ccbc6 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index 46811cbe0..66159e0e1 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index 9c37d54c2..cae73db1d 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index e4c2d90ce..ec47b1f9b 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index 658bf0955..75910960a 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index 7f890a152..7012e73ad 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index 4c92d678f..138f07ac3 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index 1ea67f0c2..acec07025 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 72b397778..eb62b7f83 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index b0691dec6..70d44f470 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index c8184a8dc..ca7ca9c5d 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index dff26f4f9..0dca62f49 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index de5ae2cd3..a681d3f0e 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "index 58180f6bb..1d11349fd 100644",
                "--- a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index 08a2b2944..1a3730973 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index be7e32bb2..f3f67bcc6 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index 77eb79c5b..b424dd50e 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index 078b85248..7edf853bb 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index 0f9f91608..4d8265c6b 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index bcce03eeb..ebcff403c 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "index 89d2c3844..1a245c7f6 100644",
                "--- a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index 221354ab3..05a498e48 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index a02aa1af1..814fcbecf 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -4,2 +4,3 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.util.Objects;"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/net/PfxOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/JksOptionsConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "de8041aca73e6c3f89290b011f5543ae66efe6c7",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533810351,
            "hunks": 11,
            "message": "Add HttpServerMetrics#responseBegin method",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "index d768dd95c..a26a814ec 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "@@ -36,2 +36,3 @@ import io.vertx.core.net.impl.ConnectionBase;",
                " import io.vertx.core.spi.metrics.HttpServerMetrics;",
                "+import io.vertx.core.spi.metrics.Metrics;",
                "@@ -397,2 +398,5 @@ public class Http2ServerResponseImpl implements HttpServerResponse {",
                "       }",
                "+      if (Metrics.METRICS_ENABLED && metric != null) {",
                "+        conn.metrics().responseBegin(metric, this);",
                "+      }",
                "       headWritten = true;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "index 5fac1749b..d8897039b 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "@@ -154,3 +154,3 @@ public class HttpServerRequestImpl implements HttpServerRequest {",
                "     }",
                "-    response = new HttpServerResponseImpl((VertxInternal) conn.vertx(), conn, request);",
                "+    response = new HttpServerResponseImpl((VertxInternal) conn.vertx(), conn, request, metric);",
                "     if (conn.handle100ContinueAutomatically) {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "index 86b33e4f9..83222d8e0 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "@@ -33,2 +33,3 @@ import io.vertx.core.net.NetSocket;",
                " import io.vertx.core.net.impl.ConnectionBase;",
                "+import io.vertx.core.spi.metrics.Metrics;",
                "@@ -61,2 +62,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "   private final boolean head;",
                "+  private final Object requestMetric;",
                "@@ -79,3 +81,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "-  HttpServerResponseImpl(final VertxInternal vertx, Http1xServerConnection conn, DefaultHttpRequest request) {",
                "+  HttpServerResponseImpl(final VertxInternal vertx, Http1xServerConnection conn, DefaultHttpRequest request, Object requestMetric) {",
                "     this.vertx = vertx;",
                "@@ -85,2 +87,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "     this.status = HttpResponseStatus.OK;",
                "+    this.requestMetric = requestMetric;",
                "     this.keepAlive = (version == HttpVersion.HTTP_1_1 && !request.headers().contains(io.vertx.core.http.HttpHeaders.CONNECTION, HttpHeaders.CLOSE, true))",
                "@@ -570,2 +573,5 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "     }",
                "+    if (Metrics.METRICS_ENABLED) {",
                "+      reportResponseBegin();",
                "+    }",
                "     headWritten = true;",
                "@@ -573,2 +579,8 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "+  private void reportResponseBegin() {",
                "+    if (conn.metrics != null) {",
                "+      conn.metrics.responseBegin(requestMetric, this);",
                "+    }",
                "+  }",
                "+",
                "   private HttpServerResponseImpl write(ByteBuf chunk) {",
                "diff --git a/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java b/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "index 8dc0c50cc..de09825b7 100644",
                "--- a/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "+++ b/src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "@@ -170,2 +170,6 @@ public class DummyVertxMetrics implements VertxMetrics {",
                "+    @Override",
                "+    public void responseBegin(Void requestMetric, HttpServerResponse response) {",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java b/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java",
                "index d29447494..ca8d59b85 100644",
                "--- a/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java",
                "+++ b/src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java",
                "@@ -57,2 +57,10 @@ public interface HttpServerMetrics<R, W, S> extends TCPMetrics<S> {",
                "+  /**",
                "+   * Called when an http server response begins.",
                "+   *",
                "+   * @param requestMetric the request metric",
                "+   * @param response the http server request",
                "+   */",
                "+  void responseBegin(R requestMetric, HttpServerResponse response);",
                "+",
                "   /**"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                "src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/spi/metrics/HttpServerMetrics.java, src/main/java/io/vertx/core/http/impl/HttpServerRequestImpl.java, src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java, src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java, src/main/java/io/vertx/core/metrics/impl/DummyVertxMetrics.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "fdb42095237e2f601083ea7cff49298ea73c4e0c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526282502,
            "hunks": 72,
            "message": "Regen properly indented converters",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index 2650781c8..80677da99 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setExtraClasspath(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -47,3 +47,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setIsolatedClasses(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -96,4 +96,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"ha\", obj.isHa());",
                "-      json.put(\"instances\", obj.getInstances());",
                "+    json.put(\"ha\", obj.isHa());",
                "+    json.put(\"instances\", obj.getInstances());",
                "     if (obj.getIsolatedClasses() != null) {",
                "@@ -106,5 +106,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "-      json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "-      json.put(\"worker\", obj.isWorker());",
                "+    json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    json.put(\"multiThreaded\", obj.isMultiThreaded());",
                "+    json.put(\"worker\", obj.isWorker());",
                "     if (obj.getWorkerPoolName() != null) {",
                "@@ -112,3 +112,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "+    json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 7d9101de4..9df7be9af 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -136,3 +136,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "+    json.put(\"blockedThreadCheckInterval\", obj.getBlockedThreadCheckInterval());",
                "     if (obj.getClusterHost() != null) {",
                "@@ -140,5 +140,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "-      json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "-      json.put(\"clusterPort\", obj.getClusterPort());",
                "+    json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "+    json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "+    json.put(\"clusterPort\", obj.getClusterPort());",
                "     if (obj.getClusterPublicHost() != null) {",
                "@@ -146,4 +146,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "-      json.put(\"clustered\", obj.isClustered());",
                "+    json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "+    json.put(\"clustered\", obj.isClustered());",
                "     if (obj.getEventBusOptions() != null) {",
                "@@ -151,5 +151,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"eventLoopPoolSize\", obj.getEventLoopPoolSize());",
                "-      json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "-      json.put(\"haEnabled\", obj.isHAEnabled());",
                "+    json.put(\"eventLoopPoolSize\", obj.getEventLoopPoolSize());",
                "+    json.put(\"fileResolverCachingEnabled\", obj.isFileResolverCachingEnabled());",
                "+    json.put(\"haEnabled\", obj.isHAEnabled());",
                "     if (obj.getHAGroup() != null) {",
                "@@ -157,5 +157,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"internalBlockingPoolSize\", obj.getInternalBlockingPoolSize());",
                "-      json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "-      json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "+    json.put(\"internalBlockingPoolSize\", obj.getInternalBlockingPoolSize());",
                "+    json.put(\"maxEventLoopExecuteTime\", obj.getMaxEventLoopExecuteTime());",
                "+    json.put(\"maxWorkerExecuteTime\", obj.getMaxWorkerExecuteTime());",
                "     if (obj.getMetricsOptions() != null) {",
                "@@ -163,6 +163,6 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"preferNativeTransport\", obj.getPreferNativeTransport());",
                "-      json.put(\"quorumSize\", obj.getQuorumSize());",
                "-      json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "-      json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "+    json.put(\"preferNativeTransport\", obj.getPreferNativeTransport());",
                "+    json.put(\"quorumSize\", obj.getQuorumSize());",
                "+    json.put(\"warningExceptionTime\", obj.getWarningExceptionTime());",
                "+    json.put(\"workerPoolSize\", obj.getWorkerPoolSize());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index 5518d3439..e447ef56e 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -67,6 +67,6 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"hidden\", obj.isHidden());",
                "-      json.put(\"index\", obj.getIndex());",
                "-      json.put(\"multiValued\", obj.isMultiValued());",
                "-      json.put(\"required\", obj.isRequired());",
                "+    json.put(\"hidden\", obj.isHidden());",
                "+    json.put(\"index\", obj.getIndex());",
                "+    json.put(\"multiValued\", obj.isMultiValued());",
                "+    json.put(\"required\", obj.isRequired());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index 95710c44d..573c377d7 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setChoices(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -104,5 +104,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"flag\", obj.isFlag());",
                "-      json.put(\"help\", obj.isHelp());",
                "-      json.put(\"hidden\", obj.isHidden());",
                "+    json.put(\"flag\", obj.isFlag());",
                "+    json.put(\"help\", obj.isHelp());",
                "+    json.put(\"hidden\", obj.isHidden());",
                "     if (obj.getLongName() != null) {",
                "@@ -110,3 +110,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"multiValued\", obj.isMultiValued());",
                "+    json.put(\"multiValued\", obj.isMultiValued());",
                "     if (obj.getName() != null) {",
                "@@ -114,3 +114,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"required\", obj.isRequired());",
                "+    json.put(\"required\", obj.isRequired());",
                "     if (obj.getShortName() != null) {",
                "@@ -118,3 +118,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"singleValued\", obj.isSingleValued());",
                "+    json.put(\"singleValued\", obj.isSingleValued());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index d24c59d29..0655bd233 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -48,5 +48,5 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(DatagramSocketOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"broadcast\", obj.isBroadcast());",
                "-      json.put(\"ipV6\", obj.isIpV6());",
                "-      json.put(\"loopbackModeDisabled\", obj.isLoopbackModeDisabled());",
                "+    json.put(\"broadcast\", obj.isBroadcast());",
                "+    json.put(\"ipV6\", obj.isIpV6());",
                "+    json.put(\"loopbackModeDisabled\", obj.isLoopbackModeDisabled());",
                "     if (obj.getMulticastNetworkInterface() != null) {",
                "@@ -54,3 +54,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"multicastTimeToLive\", obj.getMulticastTimeToLive());",
                "+    json.put(\"multicastTimeToLive\", obj.getMulticastTimeToLive());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index 5397419a5..65b0b3322 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -77,3 +77,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setSearchDomains(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -87,3 +87,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setServers(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -98,5 +98,5 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(AddressResolverOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"cacheMaxTimeToLive\", obj.getCacheMaxTimeToLive());",
                "-      json.put(\"cacheMinTimeToLive\", obj.getCacheMinTimeToLive());",
                "-      json.put(\"cacheNegativeTimeToLive\", obj.getCacheNegativeTimeToLive());",
                "+    json.put(\"cacheMaxTimeToLive\", obj.getCacheMaxTimeToLive());",
                "+    json.put(\"cacheMinTimeToLive\", obj.getCacheMinTimeToLive());",
                "+    json.put(\"cacheNegativeTimeToLive\", obj.getCacheNegativeTimeToLive());",
                "     if (obj.getHostsPath() != null) {",
                "@@ -107,8 +107,8 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"maxQueries\", obj.getMaxQueries());",
                "-      json.put(\"ndots\", obj.getNdots());",
                "-      json.put(\"optResourceEnabled\", obj.isOptResourceEnabled());",
                "-      json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "-      json.put(\"rdFlag\", obj.getRdFlag());",
                "-      json.put(\"rotateServers\", obj.isRotateServers());",
                "+    json.put(\"maxQueries\", obj.getMaxQueries());",
                "+    json.put(\"ndots\", obj.getNdots());",
                "+    json.put(\"optResourceEnabled\", obj.isOptResourceEnabled());",
                "+    json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+    json.put(\"rdFlag\", obj.getRdFlag());",
                "+    json.put(\"rotateServers\", obj.isRotateServers());",
                "     if (obj.getSearchDomains() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index e2131f73c..8a1ff5914 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -41,4 +41,4 @@ public class DnsClientOptionsConverter {",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "-      json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "+    json.put(\"port\", obj.getPort());",
                "+    json.put(\"queryTimeout\", obj.getQueryTimeout());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index 391f9dc0a..5ff4427fa 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -60,3 +60,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -68,3 +68,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -76,3 +76,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -86,3 +86,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setEnabledSecureTransportProtocols(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -242,3 +242,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(EventBusOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "+    json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "     if (obj.getClientAuth() != null) {",
                "@@ -246,4 +246,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "-      json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "+    json.put(\"clusterPingInterval\", obj.getClusterPingInterval());",
                "+    json.put(\"clusterPingReplyInterval\", obj.getClusterPingReplyInterval());",
                "     if (obj.getClusterPublicHost() != null) {",
                "@@ -251,5 +251,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "-      json.put(\"clustered\", obj.isClustered());",
                "-      json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "+    json.put(\"clusterPublicPort\", obj.getClusterPublicPort());",
                "+    json.put(\"clustered\", obj.isClustered());",
                "+    json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "     if (obj.getCrlPaths() != null) {",
                "@@ -277,3 +277,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+    json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "@@ -284,3 +284,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"logActivity\", obj.getLogActivity());",
                "+    json.put(\"logActivity\", obj.getLogActivity());",
                "     if (obj.getOpenSslEngineOptions() != null) {",
                "@@ -300,18 +300,18 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "-      json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "-      json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "-      json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "-      json.put(\"reuseAddress\", obj.isReuseAddress());",
                "-      json.put(\"reusePort\", obj.isReusePort());",
                "-      json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "-      json.put(\"soLinger\", obj.getSoLinger());",
                "-      json.put(\"ssl\", obj.isSsl());",
                "-      json.put(\"tcpCork\", obj.isTcpCork());",
                "-      json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "-      json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "-      json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "-      json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "-      json.put(\"trafficClass\", obj.getTrafficClass());",
                "-      json.put(\"trustAll\", obj.isTrustAll());",
                "+    json.put(\"port\", obj.getPort());",
                "+    json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "+    json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "+    json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "+    json.put(\"reuseAddress\", obj.isReuseAddress());",
                "+    json.put(\"reusePort\", obj.isReusePort());",
                "+    json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "+    json.put(\"soLinger\", obj.getSoLinger());",
                "+    json.put(\"ssl\", obj.isSsl());",
                "+    json.put(\"tcpCork\", obj.isTcpCork());",
                "+    json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "+    json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "+    json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "+    json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "+    json.put(\"trafficClass\", obj.getTrafficClass());",
                "+    json.put(\"trustAll\", obj.isTrustAll());",
                "     if (obj.getTrustStoreOptions() != null) {",
                "@@ -319,4 +319,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"useAlpn\", obj.isUseAlpn());",
                "-      json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "+    json.put(\"useAlpn\", obj.isUseAlpn());",
                "+    json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index 0ff20edbc..fd2e58d1e 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -43,6 +43,6 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(CopyOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"atomicMove\", obj.isAtomicMove());",
                "-      json.put(\"copyAttributes\", obj.isCopyAttributes());",
                "-      json.put(\"nofollowLinks\", obj.isNofollowLinks());",
                "-      json.put(\"replaceExisting\", obj.isReplaceExisting());",
                "+    json.put(\"atomicMove\", obj.isAtomicMove());",
                "+    json.put(\"copyAttributes\", obj.isCopyAttributes());",
                "+    json.put(\"nofollowLinks\", obj.isNofollowLinks());",
                "+    json.put(\"replaceExisting\", obj.isReplaceExisting());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index e787fbd55..a4d130c45 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -78,7 +78,7 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(OpenOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"append\", obj.isAppend());",
                "-      json.put(\"create\", obj.isCreate());",
                "-      json.put(\"createNew\", obj.isCreateNew());",
                "-      json.put(\"deleteOnClose\", obj.isDeleteOnClose());",
                "-      json.put(\"dsync\", obj.isDsync());",
                "+    json.put(\"append\", obj.isAppend());",
                "+    json.put(\"create\", obj.isCreate());",
                "+    json.put(\"createNew\", obj.isCreateNew());",
                "+    json.put(\"deleteOnClose\", obj.isDeleteOnClose());",
                "+    json.put(\"dsync\", obj.isDsync());",
                "     if (obj.getPerms() != null) {",
                "@@ -86,7 +86,7 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"read\", obj.isRead());",
                "-      json.put(\"sparse\", obj.isSparse());",
                "-      json.put(\"sync\", obj.isSync());",
                "-      json.put(\"truncateExisting\", obj.isTruncateExisting());",
                "-      json.put(\"write\", obj.isWrite());",
                "+    json.put(\"read\", obj.isRead());",
                "+    json.put(\"sparse\", obj.isSparse());",
                "+    json.put(\"sync\", obj.isSync());",
                "+    json.put(\"truncateExisting\", obj.isTruncateExisting());",
                "+    json.put(\"write\", obj.isWrite());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index d3943631c..8759fe0ef 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -41,4 +41,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"errorCode\", obj.getErrorCode());",
                "-      json.put(\"lastStreamId\", obj.getLastStreamId());",
                "+    json.put(\"errorCode\", obj.getErrorCode());",
                "+    json.put(\"lastStreamId\", obj.getLastStreamId());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 3b5040d6a..1b969013b 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -53,8 +53,8 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(Http2Settings obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"headerTableSize\", obj.getHeaderTableSize());",
                "-      json.put(\"initialWindowSize\", obj.getInitialWindowSize());",
                "-      json.put(\"maxConcurrentStreams\", obj.getMaxConcurrentStreams());",
                "-      json.put(\"maxFrameSize\", obj.getMaxFrameSize());",
                "-      json.put(\"maxHeaderListSize\", obj.getMaxHeaderListSize());",
                "-      json.put(\"pushEnabled\", obj.isPushEnabled());",
                "+    json.put(\"headerTableSize\", obj.getHeaderTableSize());",
                "+    json.put(\"initialWindowSize\", obj.getInitialWindowSize());",
                "+    json.put(\"maxConcurrentStreams\", obj.getMaxConcurrentStreams());",
                "+    json.put(\"maxFrameSize\", obj.getMaxFrameSize());",
                "+    json.put(\"maxHeaderListSize\", obj.getMaxHeaderListSize());",
                "+    json.put(\"pushEnabled\", obj.isPushEnabled());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index 1c3cc7e2f..74bf05c01 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -22,3 +22,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setAlpnVersions(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -173,3 +173,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "+    json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "     if (obj.getDefaultHost() != null) {",
                "@@ -177,9 +177,9 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"defaultPort\", obj.getDefaultPort());",
                "-      json.put(\"forceSni\", obj.isForceSni());",
                "-      json.put(\"http2ClearTextUpgrade\", obj.isHttp2ClearTextUpgrade());",
                "-      json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "-      json.put(\"http2KeepAliveTimeout\", obj.getHttp2KeepAliveTimeout());",
                "-      json.put(\"http2MaxPoolSize\", obj.getHttp2MaxPoolSize());",
                "-      json.put(\"http2MultiplexingLimit\", obj.getHttp2MultiplexingLimit());",
                "+    json.put(\"defaultPort\", obj.getDefaultPort());",
                "+    json.put(\"forceSni\", obj.isForceSni());",
                "+    json.put(\"http2ClearTextUpgrade\", obj.isHttp2ClearTextUpgrade());",
                "+    json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "+    json.put(\"http2KeepAliveTimeout\", obj.getHttp2KeepAliveTimeout());",
                "+    json.put(\"http2MaxPoolSize\", obj.getHttp2MaxPoolSize());",
                "+    json.put(\"http2MultiplexingLimit\", obj.getHttp2MultiplexingLimit());",
                "     if (obj.getInitialSettings() != null) {",
                "@@ -187,15 +187,15 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"keepAlive\", obj.isKeepAlive());",
                "-      json.put(\"keepAliveTimeout\", obj.getKeepAliveTimeout());",
                "-      json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "-      json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "-      json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "-      json.put(\"maxPoolSize\", obj.getMaxPoolSize());",
                "-      json.put(\"maxRedirects\", obj.getMaxRedirects());",
                "-      json.put(\"maxWaitQueueSize\", obj.getMaxWaitQueueSize());",
                "-      json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "-      json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "-      json.put(\"pipelining\", obj.isPipelining());",
                "-      json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "-      json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "+    json.put(\"keepAlive\", obj.isKeepAlive());",
                "+    json.put(\"keepAliveTimeout\", obj.getKeepAliveTimeout());",
                "+    json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "+    json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "+    json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "+    json.put(\"maxPoolSize\", obj.getMaxPoolSize());",
                "+    json.put(\"maxRedirects\", obj.getMaxRedirects());",
                "+    json.put(\"maxWaitQueueSize\", obj.getMaxWaitQueueSize());",
                "+    json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "+    json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "+    json.put(\"pipelining\", obj.isPipelining());",
                "+    json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "+    json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "     if (obj.getProtocolVersion() != null) {",
                "@@ -203,5 +203,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"sendUnmaskedFrames\", obj.isSendUnmaskedFrames());",
                "-      json.put(\"tryUseCompression\", obj.isTryUseCompression());",
                "-      json.put(\"verifyHost\", obj.isVerifyHost());",
                "+    json.put(\"sendUnmaskedFrames\", obj.isSendUnmaskedFrames());",
                "+    json.put(\"tryUseCompression\", obj.isTryUseCompression());",
                "+    json.put(\"verifyHost\", obj.isVerifyHost());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index 9ef8c2dd0..b4bb830bb 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setAlpnVersions(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -103,3 +103,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(HttpServerOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"acceptUnmaskedFrames\", obj.isAcceptUnmaskedFrames());",
                "+    json.put(\"acceptUnmaskedFrames\", obj.isAcceptUnmaskedFrames());",
                "     if (obj.getAlpnVersions() != null) {",
                "@@ -109,8 +109,8 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"compressionLevel\", obj.getCompressionLevel());",
                "-      json.put(\"compressionSupported\", obj.isCompressionSupported());",
                "-      json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "-      json.put(\"decompressionSupported\", obj.isDecompressionSupported());",
                "-      json.put(\"handle100ContinueAutomatically\", obj.isHandle100ContinueAutomatically());",
                "-      json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "+    json.put(\"compressionLevel\", obj.getCompressionLevel());",
                "+    json.put(\"compressionSupported\", obj.isCompressionSupported());",
                "+    json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "+    json.put(\"decompressionSupported\", obj.isDecompressionSupported());",
                "+    json.put(\"handle100ContinueAutomatically\", obj.isHandle100ContinueAutomatically());",
                "+    json.put(\"http2ConnectionWindowSize\", obj.getHttp2ConnectionWindowSize());",
                "     if (obj.getInitialSettings() != null) {",
                "@@ -118,7 +118,7 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "-      json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "-      json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "-      json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "-      json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "+    json.put(\"maxChunkSize\", obj.getMaxChunkSize());",
                "+    json.put(\"maxHeaderSize\", obj.getMaxHeaderSize());",
                "+    json.put(\"maxInitialLineLength\", obj.getMaxInitialLineLength());",
                "+    json.put(\"maxWebsocketFrameSize\", obj.getMaxWebsocketFrameSize());",
                "+    json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "     if (obj.getWebsocketSubProtocols() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index 7c4b08bda..4e8e3ecb1 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(MetricsOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"enabled\", obj.isEnabled());",
                "+    json.put(\"enabled\", obj.isEnabled());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index 669e12761..143ac4f2e 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -48,3 +48,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(ClientOptionsBase obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "+    json.put(\"connectTimeout\", obj.getConnectTimeout());",
                "     if (obj.getLocalAddress() != null) {",
                "@@ -58,3 +58,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"trustAll\", obj.isTrustAll());",
                "+    json.put(\"trustAll\", obj.isTrustAll());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index e5fc5981e..a199d4d73 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -41,4 +41,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "-      json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "+    json.put(\"reconnectAttempts\", obj.getReconnectAttempts());",
                "+    json.put(\"reconnectInterval\", obj.getReconnectInterval());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index 15a23f16b..57b495235 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -53,3 +53,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(NetServerOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "+    json.put(\"acceptBacklog\", obj.getAcceptBacklog());",
                "     if (obj.getClientAuth() != null) {",
                "@@ -57,3 +57,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"clientAuthRequired\", obj.isClientAuthRequired());",
                "+    json.put(\"clientAuthRequired\", obj.isClientAuthRequired());",
                "     if (obj.getHost() != null) {",
                "@@ -61,4 +61,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "-      json.put(\"sni\", obj.isSni());",
                "+    json.put(\"port\", obj.getPort());",
                "+    json.put(\"sni\", obj.isSni());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index 4a7df8034..5ae451029 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -53,8 +53,8 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(NetworkOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"logActivity\", obj.getLogActivity());",
                "-      json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "-      json.put(\"reuseAddress\", obj.isReuseAddress());",
                "-      json.put(\"reusePort\", obj.isReusePort());",
                "-      json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "-      json.put(\"trafficClass\", obj.getTrafficClass());",
                "+    json.put(\"logActivity\", obj.getLogActivity());",
                "+    json.put(\"receiveBufferSize\", obj.getReceiveBufferSize());",
                "+    json.put(\"reuseAddress\", obj.isReuseAddress());",
                "+    json.put(\"reusePort\", obj.isReusePort());",
                "+    json.put(\"sendBufferSize\", obj.getSendBufferSize());",
                "+    json.put(\"trafficClass\", obj.getTrafficClass());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index daaf23d12..564a56f8f 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "    static void toJson(OpenSSLEngineOptions obj, java.util.Map<String, Object> json) {",
                "-      json.put(\"sessionCacheEnabled\", obj.isSessionCacheEnabled());",
                "+    json.put(\"sessionCacheEnabled\", obj.isSessionCacheEnabled());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index e64da5513..0731fb547 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -27,3 +27,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setCertPaths(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -42,3 +42,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setCertValues(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -57,3 +57,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setKeyPaths(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -72,3 +72,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setKeyValues(list);",
                "-         }",
                "+          }",
                "           break;",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index 5186be9b3..d588e65ec 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -20,3 +20,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index b79ad843d..07f4d5c06 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -54,3 +54,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"port\", obj.getPort());",
                "+    json.put(\"port\", obj.getPort());",
                "     if (obj.getType() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index 151f90562..4b5021c49 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -20,3 +20,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -28,3 +28,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -36,3 +36,3 @@ import io.vertx.core.json.JsonArray;",
                "             });",
                "-         }",
                "+          }",
                "           break;",
                "@@ -46,3 +46,3 @@ import io.vertx.core.json.JsonArray;",
                "             obj.setEnabledSecureTransportProtocols(list);",
                "-         }",
                "+          }",
                "           break;",
                "@@ -167,3 +167,3 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "+    json.put(\"idleTimeout\", obj.getIdleTimeout());",
                "     if (obj.getJdkSslEngineOptions() != null) {",
                "@@ -189,9 +189,9 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"soLinger\", obj.getSoLinger());",
                "-      json.put(\"ssl\", obj.isSsl());",
                "-      json.put(\"tcpCork\", obj.isTcpCork());",
                "-      json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "-      json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "-      json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "-      json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "+    json.put(\"soLinger\", obj.getSoLinger());",
                "+    json.put(\"ssl\", obj.isSsl());",
                "+    json.put(\"tcpCork\", obj.isTcpCork());",
                "+    json.put(\"tcpFastOpen\", obj.isTcpFastOpen());",
                "+    json.put(\"tcpKeepAlive\", obj.isTcpKeepAlive());",
                "+    json.put(\"tcpNoDelay\", obj.isTcpNoDelay());",
                "+    json.put(\"tcpQuickAck\", obj.isTcpQuickAck());",
                "     if (obj.getTrustStoreOptions() != null) {",
                "@@ -199,4 +199,4 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "-      json.put(\"useAlpn\", obj.isUseAlpn());",
                "-      json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "+    json.put(\"useAlpn\", obj.isUseAlpn());",
                "+    json.put(\"usePooledBuffers\", obj.isUsePooledBuffers());",
                "   }"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "edbae69ef6148a9966e5b1e09d2c8f367df20e53",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530089526,
            "hunks": 10,
            "message": "Use options field instead of getting them from the client in HttpChannelConnector",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "index ae6a1c05c..cae0e0933 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                "@@ -79,6 +79,6 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     // - maxWeight / http2Weight = 2 HTTP/2 connections",
                "-    this.http1Weight = client.getOptions().getHttp2MaxPoolSize();",
                "-    this.http2Weight = client.getOptions().getMaxPoolSize();",
                "+    this.http1Weight = options.getHttp2MaxPoolSize();",
                "+    this.http2Weight = options.getMaxPoolSize();",
                "     this.weight = version == HttpVersion.HTTP_2 ? http2Weight : http1Weight;",
                "-    this.http1MaxConcurrency = client.getOptions().isPipelining() ? client.getOptions().getPipeliningLimit() : 1;",
                "+    this.http1MaxConcurrency = options.isPipelining() ? options.getPipeliningLimit() : 1;",
                "     this.ssl = ssl;",
                "@@ -159,3 +159,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "         if (version == HttpVersion.HTTP_2) {",
                "-          if (client.getOptions().isHttp2ClearTextUpgrade()) {",
                "+          if (options.isHttp2ClearTextUpgrade()) {",
                "             applyHttp1xConnectionOptions(pipeline);",
                "@@ -176,3 +176,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "           if (version == HttpVersion.HTTP_2) {",
                "-            if (client.getOptions().isHttp2ClearTextUpgrade()) {",
                "+            if (options.isHttp2ClearTextUpgrade()) {",
                "               http1xConnected(listener, version, host, port, false, context, ch, http2Weight, future);",
                "@@ -190,3 +190,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "-    channelProvider.connect(client.getVertx(), bootstrap, client.getOptions().getProxyOptions(), SocketAddress.inetSocketAddress(port, host), channelInitializer, channelHandler);",
                "+    channelProvider.connect(client.getVertx(), bootstrap, options.getProxyOptions(), SocketAddress.inetSocketAddress(port, host), channelInitializer, channelHandler);",
                "   }",
                "@@ -198,3 +198,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "   private void applyHttp2ConnectionOptions(ChannelPipeline pipeline) {",
                "-    if (client.getOptions().getIdleTimeout() > 0) {",
                "+    if (options.getIdleTimeout() > 0) {",
                "       pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));",
                "@@ -204,3 +204,3 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "   private void applyHttp1xConnectionOptions(ChannelPipeline pipeline) {",
                "-    if (client.getOptions().getLogActivity()) {",
                "+    if (options.getLogActivity()) {",
                "       pipeline.addLast(\"logging\", new LoggingHandler());",
                "@@ -208,13 +208,12 @@ class HttpChannelConnector implements ConnectionProvider<HttpClientConnection> {",
                "     pipeline.addLast(\"codec\", new HttpClientCodec(",
                "-      client.getOptions().getMaxInitialLineLength(),",
                "-      client.getOptions().getMaxHeaderSize(),",
                "-      client.getOptions().getMaxChunkSize(),",
                "+      options.getMaxInitialLineLength(),",
                "+      options.getMaxHeaderSize(),",
                "+      options.getMaxChunkSize(),",
                "       false,",
                "       false,",
                "-      client.getOptions().getDecoderInitialBufferSize()));",
                "-    if (client.getOptions().isTryUseCompression()) {",
                "+      options.getDecoderInitialBufferSize()));",
                "+    if (options.isTryUseCompression()) {",
                "       pipeline.addLast(\"inflater\", new HttpContentDecompressor(true));",
                "     }",
                "-    if (client.getOptions().getIdleTimeout() > 0) {",
                "-      HttpClientOptions options = client.getOptions();",
                "+    if (options.getIdleTimeout() > 0) {",
                "       pipeline.addLast(\"idle\", new IdleStateHandler(0, 0, options.getIdleTimeout(), options.getIdleTimeoutUnit()));"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpChannelConnector.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "d7e0117cb2b02d0ddcfd3660638e393cd9aa3b9a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525336879,
            "hunks": 2,
            "message": "Added javadoc to Closeable",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/Closeable.java b/src/main/java/io/vertx/core/Closeable.java",
                "index cd60ffeb6..adc6df026 100644",
                "--- a/src/main/java/io/vertx/core/Closeable.java",
                "+++ b/src/main/java/io/vertx/core/Closeable.java",
                "@@ -14,2 +14,6 @@ package io.vertx.core;",
                " /**",
                "+ * A closeable resource.",
                "+ * <p/>",
                "+ * This interface is mostly used for internal resource management of Vert.x.",
                "+ *",
                "  * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "@@ -18,2 +22,7 @@ public interface Closeable {",
                "+  /**",
                "+   * Close this resource, the {@code completionHandler} must be notified when the operation has completed.",
                "+   *",
                "+   * @param completionHandler the handler to notify when close has completed",
                "+   */",
                "   void close(Handler<AsyncResult<Void>> completionHandler);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/Closeable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/Closeable.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "12c288c6182de4f9d71e041468d104c4cfdca9fb",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525378202,
            "hunks": 1,
            "message": "Remove unnecessary clone operation for the copy on write of array elements",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "index 1d6d91196..f666db928 100644",
                "--- a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "+++ b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "@@ -47,3 +47,3 @@ public class ConcurrentCyclicSequence<T> implements Iterable<T>, Iterator<T> {",
                "   public ConcurrentCyclicSequence(T... elements) {",
                "-    this(0, Arrays.copyOf(elements.clone(), elements.length, Object[].class));",
                "+    this(0, Arrays.copyOf(elements, elements.length, Object[].class));",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "526252a5fa49721cc2cb1b5793111ad92c9d054c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533288294,
            "hunks": 6,
            "message": "Don't expose peerCertificateChain() and keep it ignored",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpConnection.java b/src/main/java/io/vertx/core/http/HttpConnection.java",
                "index 5b326d4e7..0baa42ffe 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpConnection.java",
                "@@ -270,3 +270,3 @@ public interface HttpConnection {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerRequest.java b/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "index 137703a4a..588267581 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "@@ -188,3 +188,3 @@ public interface HttpServerRequest extends ReadStream<Buffer> {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/http/ServerWebSocket.java b/src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "index 34bc35bb8..e539adc86 100644",
                "--- a/src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "+++ b/src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "@@ -14,2 +14,3 @@ package io.vertx.core.http;",
                " import io.vertx.codegen.annotations.CacheReturn;",
                "+import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -142,3 +143,3 @@ public interface ServerWebSocket extends WebSocketBase {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/http/WebSocketBase.java b/src/main/java/io/vertx/core/http/WebSocketBase.java",
                "index ca87502d7..2e4892540 100644",
                "--- a/src/main/java/io/vertx/core/http/WebSocketBase.java",
                "+++ b/src/main/java/io/vertx/core/http/WebSocketBase.java",
                "@@ -289,3 +289,3 @@ public interface WebSocketBase extends ReadStream<Buffer>, WriteStream<Buffer> {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/net/NetSocket.java b/src/main/java/io/vertx/core/net/NetSocket.java",
                "index 1dbe8314a..54defb702 100644",
                "--- a/src/main/java/io/vertx/core/net/NetSocket.java",
                "+++ b/src/main/java/io/vertx/core/net/NetSocket.java",
                "@@ -247,3 +247,3 @@ public interface NetSocket extends ReadStream<Buffer>, WriteStream<Buffer> {",
                "    */",
                "-  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @GenIgnore",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpConnection.java",
                "src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "src/main/java/io/vertx/core/http/WebSocketBase.java",
                "src/main/java/io/vertx/core/net/NetSocket.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/ServerWebSocket.java, src/main/java/io/vertx/core/http/HttpConnection.java, src/main/java/io/vertx/core/net/NetSocket.java, src/main/java/io/vertx/core/http/WebSocketBase.java, src/main/java/io/vertx/core/http/HttpServerRequest.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "d0994a15a6612e5f857d759a2532d63ffd89a18a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529488186,
            "hunks": 8,
            "message": "Simplified LocalAsyncLocks - Removed WaitersList abstraction - Do not skip timed out waiters when recomputing the list Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "index e4d35ae86..67254fe21 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "@@ -21,3 +21,2 @@ import io.vertx.core.shareddata.Lock;",
                " import java.util.ArrayList;",
                "-import java.util.Collections;",
                " import java.util.List;",
                "@@ -28,4 +27,2 @@ import java.util.concurrent.atomic.AtomicReference;",
                "-import static java.util.stream.Collectors.*;",
                "-",
                " /**",
                "@@ -35,37 +32,2 @@ public class LocalAsyncLocks {",
                "-  // Immutable",
                "-  private static class WaitersList {",
                "-",
                "-    final List<LockWaiter> waiters;",
                "-",
                "-    WaitersList(List<LockWaiter> waiters) {",
                "-      this.waiters = waiters;",
                "-    }",
                "-",
                "-    int size() {",
                "-      return waiters.size();",
                "-    }",
                "-",
                "-    LockWaiter first() {",
                "-      return waiters.get(0);",
                "-    }",
                "-",
                "-    WaitersList add(LockWaiter waiter) {",
                "-      List<LockWaiter> list = new ArrayList<>(waiters.size() + 1);",
                "-      list.addAll(waiters);",
                "-      list.add(waiter);",
                "-      return new WaitersList(list);",
                "-    }",
                "-",
                "-    WaitersList removeStale() {",
                "-      if (waiters.size() > 1) {",
                "-        List<LockWaiter> lockWaiters = this.waiters.stream().skip(1).filter(LockWaiter::isWaiting).collect(toList());",
                "-        if (!lockWaiters.isEmpty()) {",
                "-          return new WaitersList(lockWaiters);",
                "-        }",
                "-      }",
                "-      return null;",
                "-    }",
                "-  }",
                "-",
                "   private enum Status {WAITING, ACQUIRED, TIMED_OUT}",
                "@@ -126,3 +88,4 @@ public class LocalAsyncLocks {",
                "-  private final ConcurrentMap<String, WaitersList> waitersMap = new ConcurrentHashMap<>();",
                "+  // Value should never be modified",
                "+  private final ConcurrentMap<String, List<LockWaiter>> waitersMap = new ConcurrentHashMap<>();",
                "@@ -130,7 +93,15 @@ public class LocalAsyncLocks {",
                "     LockWaiter lockWaiter = new LockWaiter(context, name, timeout, handler);",
                "-    WaitersList waiters = waitersMap.compute(name, (s, list) -> {",
                "-      return list == null ? new WaitersList(Collections.singletonList(lockWaiter)) : list.add(lockWaiter);",
                "+    List<LockWaiter> waiters = waitersMap.compute(name, (s, list) -> {",
                "+      List<LockWaiter> result;",
                "+      if (list != null) {",
                "+        result = new ArrayList<>(list.size() + 1);",
                "+        result.addAll(list);",
                "+      } else {",
                "+        result = new ArrayList<>(1);",
                "+      }",
                "+      result.add(lockWaiter);",
                "+      return result;",
                "     });",
                "     if (waiters.size() == 1) {",
                "-      waiters.first().acquireLock();",
                "+      waiters.get(0).acquireLock();",
                "     }",
                "@@ -139,5 +110,7 @@ public class LocalAsyncLocks {",
                "   private void nextWaiter(String lockName) {",
                "-    WaitersList waiters = waitersMap.compute(lockName, (s, list) -> list == null ? null : list.removeStale());",
                "+    List<LockWaiter> waiters = waitersMap.compute(lockName, (s, list) -> {",
                "+      return list == null || list.size() == 1 ? null : new ArrayList<>(list.subList(1, list.size()));",
                "+    });",
                "     if (waiters != null) {",
                "-      waiters.first().acquireLock();",
                "+      waiters.get(0).acquireLock();",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "b4c611b2a0f4d18ad12d9a4c7e3d5ab129a3ca62",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530084022,
            "hunks": 1,
            "message": "Tab cleanup",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 757b443fe..7e9967702 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -340,7 +340,7 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "               Channel serverChannel = res.result();",
                "-\t      if (serverChannel.localAddress() instanceof InetSocketAddress) {",
                "-\t\tHttpServerImpl.this.actualPort = ((InetSocketAddress)serverChannel.localAddress()).getPort();",
                "-\t      } else {",
                "-\t\tHttpServerImpl.this.actualPort = address.port();",
                "-\t      }",
                "+              if (serverChannel.localAddress() instanceof InetSocketAddress) {",
                "+                HttpServerImpl.this.actualPort = ((InetSocketAddress)serverChannel.localAddress()).getPort();",
                "+              } else {",
                "+                HttpServerImpl.this.actualPort = address.port();",
                "+              }",
                "               serverChannelGroup.add(serverChannel);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "102fd55da5b3beeb98e0c43a12cf775071653391",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529614428,
            "hunks": 1,
            "message": "Actually we should always start a new request when a response ends wether the request is ended or not",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index bcef3b146..c2dc98848 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -171,3 +171,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     HttpServerRequestImpl next = request.nextRequest();",
                "-    if (request.isEnded() && next != null) {",
                "+    if (next != null) {",
                "       // Handle pipelined request"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "d64aebfbd9dc2cab65a236fe9aa31eb42c95ff52",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533554210,
            "hunks": 2,
            "message": "Add missing @Fluent annotations to HttpServerResponse methods Signed-off-by: David Gregory <davidgregory084@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerResponse.java b/src/main/java/io/vertx/core/http/HttpServerResponse.java",
                "index 03284f623..c3dd3c391 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServerResponse.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerResponse.java",
                "@@ -402,2 +402,3 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "+  @Fluent",
                "   HttpServerResponse push(HttpMethod method, String host, String path, Handler<AsyncResult<HttpServerResponse>> handler);",
                "@@ -407,2 +408,3 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "+  @Fluent",
                "   HttpServerResponse push(HttpMethod method, String path, MultiMap headers, Handler<AsyncResult<HttpServerResponse>> handler);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/HttpServerResponse.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/HttpServerResponse.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8a9449e9cd66e41ae8ec17785df425311d94ec6f",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532966179,
            "hunks": 1,
            "message": "Fixed Javadoc: can't reply a message directly with reply address In clustered mode, reply address is only registered locally, and reply is sent to sender using the server ID Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/Message.java b/src/main/java/io/vertx/core/eventbus/Message.java",
                "index 16f2542d4..e3094a2ab 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/Message.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/Message.java",
                "@@ -25,4 +25,3 @@ import io.vertx.core.MultiMap;",
                "  * <p>",
                "- * If the message was sent specifying a reply handler it will also have a {@link #replyAddress}. In that case the message",
                "- * can be replied to using that reply address, or, more simply by just using {@link #reply}.",
                "+ * If the message was sent specifying a reply handler, it can be replied to using {@link #reply}.",
                "  * <p>"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/Message.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/eventbus/Message.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "01372f16d8ec3d758334a9e96be4c6f8c94d7e1a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532349078,
            "hunks": 1,
            "message": "Fix regression introduced by previous commit that does not resume the http client connection read for empty responses",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index 02d5936f6..b342b8e79 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -489,5 +489,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "         conn.close |= !conn.options.isKeepAlive();",
                "-        if (paused) {",
                "-          conn.doResume();",
                "-        }",
                "+        conn.doResume();",
                "         return requestEnded;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "407001830066c8f819ce8d8f5a10188e21c0c3c7",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1507666577,
            "hunks": 46,
            "message": "Enable websocket compression Server support is enabled by default (but the client must request it). Client side must be specifically enabled in options.",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index e7cd2854f..90a13c170 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -1003,2 +1003,10 @@ Set whether compression is enabled",
                " +++",
                "+|[[tryWebsocketDeflateFrameCompression]]`tryWebsocketDeflateFrameCompression`|`Boolean`|",
                "++++",
                "+Set option to offer Deflate Frame websocket compression",
                "++++",
                "+|[[tryWebsocketTryPermessageDefalteCompression]]`tryWebsocketTryPermessageDefalteCompression`|`Boolean`|",
                "++++",
                "+Set option to offer Permessage Deflate websocket compression",
                "++++",
                " |[[useAlpn]]`useAlpn`|`Boolean`|",
                "@@ -1015,2 +1023,18 @@ Set whether hostname verification is enabled",
                " +++",
                "+|[[websocketCompressionAllowClientNoContext]]`websocketCompressionAllowClientNoContext`|`Boolean`|",
                "++++",
                "+Set the websocket compression allow client no context option",
                "++++",
                "+|[[websocketCompressionDeflateUseWebkitName]]`websocketCompressionDeflateUseWebkitName`|`Boolean`|",
                "++++",
                "+Sets the option to use the webkit name with the deflate frame compression",
                "++++",
                "+|[[websocketCompressionLevel]]`websocketCompressionLevel`|`Number (int)`|",
                "++++",
                "+Set websocket compression level",
                "++++",
                "+|[[websocketCompressionRequestServerNoContext]]`websocketCompressionRequestServerNoContext`|`Boolean`|",
                "++++",
                "+Set the websocket compression server no context option",
                "++++",
                " |===",
                "@@ -1245,2 +1269,26 @@ Set whether Netty pooled buffers are enabled",
                " +++",
                "+|[[websocketAllowServerNoContext]]`websocketAllowServerNoContext`|`Boolean`|",
                "++++",
                "+Set the WebSocket Allow Server No Context option",
                "++++",
                "+|[[websocketCompressionLevel]]`websocketCompressionLevel`|`Number (int)`|",
                "++++",
                "+Set the WebSocket compression level",
                "++++",
                "+|[[websocketFrameDeflateCompressionSupported]]`websocketFrameDeflateCompressionSupported`|`Boolean`|",
                "++++",
                "+Enable or disable support for WebSocket Defalte Frame compression",
                "++++",
                "+|[[websocketPermessageDeflateCompressionIsSupported]]`websocketPermessageDeflateCompressionIsSupported`|`Boolean`|",
                "++++",
                "+Get whether WebSocket Permessage Deflate compression is supported",
                "++++",
                "+|[[websocketPermessageDeflateCompressionSupported]]`websocketPermessageDeflateCompressionSupported`|`Boolean`|",
                "++++",
                "+Enable or disable support for WebSocket Permessage Deflate compression",
                "++++",
                "+|[[websocketPreferredClientNoContext]]`websocketPreferredClientNoContext`|`Boolean`|",
                "++++",
                "+Set the WebSocket Preferred Client No Context setting",
                "++++",
                " |[[websocketSubProtocols]]`websocketSubProtocols`|`String`|",
                "diff --git a/src/main/asciidocs/dataobjects.adoc b/src/main/asciidocs/dataobjects.adoc",
                "index 56f588b7a..d9082ebb9 100644",
                "--- a/src/main/asciidocs/dataobjects.adoc",
                "+++ b/src/main/asciidocs/dataobjects.adoc",
                "@@ -841,2 +841,8 @@ Set whether compression is enabled",
                " +++",
                "+|[[tryUsePerFrameWebsocketCompression]]`@tryUsePerFrameWebsocketCompression`|`Boolean`|+++",
                "+Set option to offer Deflate Frame websocket compression",
                "++++",
                "+|[[tryUsePerMessageWebsocketCompression]]`@tryUsePerMessageWebsocketCompression`|`Boolean`|+++",
                "+Set option to offer Permessage Deflate websocket compression",
                "++++",
                " |[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "@@ -850,2 +856,11 @@ Set whether hostname verification is enabled",
                " +++",
                "+|[[websocketCompressionAllowClientNoContext]]`@websocketCompressionAllowClientNoContext`|`Boolean`|+++",
                "+Set the websocket compression allow client no context option",
                "++++",
                "+|[[websocketCompressionLevel]]`@websocketCompressionLevel`|`Number (int)`|+++",
                "+Set websocket compression level",
                "++++",
                "+|[[websocketCompressionRequestServerNoContext]]`@websocketCompressionRequestServerNoContext`|`Boolean`|+++",
                "+Set the websocket compression server no context option",
                "++++",
                " |===",
                "@@ -980,2 +995,8 @@ Set the trust options in pem format",
                " +++",
                "+|[[perFrameWebsocketCompressionSupported]]`@perFrameWebsocketCompressionSupported`|`Boolean`|+++",
                "+Enable or disable support for WebSocket Defalte Frame compression",
                "++++",
                "+|[[perMessageWebsocketCompressionSupported]]`@perMessageWebsocketCompressionSupported`|`Boolean`|+++",
                "+Enable or disable support for WebSocket Permessage Deflate compression",
                "++++",
                " |[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "@@ -1039,2 +1060,11 @@ Set whether Netty pooled buffers are enabled",
                " +++",
                "+|[[websocketAllowServerNoContext]]`@websocketAllowServerNoContext`|`Boolean`|+++",
                "+Set the WebSocket Allow Server No Context option",
                "++++",
                "+|[[websocketCompressionLevel]]`@websocketCompressionLevel`|`Number (int)`|+++",
                "+Set the WebSocket compression level",
                "++++",
                "+|[[websocketPreferredClientNoContext]]`@websocketPreferredClientNoContext`|`Boolean`|+++",
                "+Set the WebSocket Preferred Client No Context setting",
                "++++",
                " |[[websocketSubProtocols]]`@websocketSubProtocols`|`String`|+++",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index f0e447176..b138e941b 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -156,2 +156,12 @@ import java.time.format.DateTimeFormatter;",
                "           break;",
                "+        case \"tryUsePerFrameWebsocketCompression\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTryUsePerFrameWebsocketCompression((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tryUsePerMessageWebsocketCompression\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTryUsePerMessageWebsocketCompression((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "         case \"verifyHost\":",
                "@@ -161,2 +171,17 @@ import java.time.format.DateTimeFormatter;",
                "           break;",
                "+        case \"websocketCompressionAllowClientNoContext\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setWebsocketCompressionAllowClientNoContext((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"websocketCompressionLevel\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setWebsocketCompressionLevel(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"websocketCompressionRequestServerNoContext\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setWebsocketCompressionRequestServerNoContext((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -208,2 +233,4 @@ import java.time.format.DateTimeFormatter;",
                "     json.put(\"verifyHost\", obj.isVerifyHost());",
                "+    json.put(\"websocketCompressionAllowClientNoContext\", obj.getWebsocketCompressionAllowClientNoContext());",
                "+    json.put(\"websocketCompressionRequestServerNoContext\", obj.getWebsocketCompressionRequestServerNoContext());",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index 3496ebe83..945de24c2 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -91,2 +91,27 @@ import java.time.format.DateTimeFormatter;",
                "           break;",
                "+        case \"perFrameWebsocketCompressionSupported\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setPerFrameWebsocketCompressionSupported((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"perMessageWebsocketCompressionSupported\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setPerMessageWebsocketCompressionSupported((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"websocketAllowServerNoContext\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setWebsocketAllowServerNoContext((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"websocketCompressionLevel\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setWebsocketCompressionLevel(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"websocketPreferredClientNoContext\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setWebsocketPreferredClientNoContext((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "         case \"websocketSubProtocols\":",
                "@@ -125,2 +150,4 @@ import java.time.format.DateTimeFormatter;",
                "     json.put(\"maxWebsocketMessageSize\", obj.getMaxWebsocketMessageSize());",
                "+    json.put(\"websocketAllowServerNoContext\", obj.getWebsocketAllowServerNoContext());",
                "+    json.put(\"websocketPreferredClientNoContext\", obj.getWebsocketPreferredClientNoContext());",
                "     if (obj.getWebsocketSubProtocols() != null) {",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientOptions.java b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "index 87b99e94f..f2bd08e0a 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "@@ -164,2 +164,28 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * Default offer WebSocket Deflate Frame compression = false",
                "+   */",
                "+  public static final boolean DEFAULT_TRY_USE_WEBSOCKET_DEFLATE_FRAME = false;",
                "+",
                "+  /**",
                "+   * Default offer WebSocket Permessage Deflate Compression = false",
                "+   */",
                "+  public static final boolean DEFAULT_TRY_USE_WEBSOCKET_PERMESSAGE_DEFLATE = false;",
                "+",
                "+  /**",
                "+   * Default WebSocket compression level = 6",
                "+   */",
                "+  public static final int DEFAULT_WEBSOCKET_COMPRESSION_LEVEL = 6;",
                "+",
                "+  /**",
                "+   * Default WebSocket Compression client no context allowance = false",
                "+   */",
                "+  public static final boolean DEFAULT_WEBSOCKET_COMPRESSION_ALLOW_CLIENT_NO_CONTEXT = false;",
                "+",
                "+  /**",
                "+   * Default WebSocket Compression server no context allowance = false",
                "+   */",
                "+  public static final boolean DEFAULT_WEBSOCKET_COMPRESSION_REQUEST_SERVER_NO_CONTEXT = false;",
                "+",
                "+",
                "   /**",
                "@@ -199,2 +225,9 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  private boolean websocketTryUseDeflateFrame;",
                "+  private boolean websocketTryUsePermessageDeflate;",
                "+  private int websocketCompressionLevel;",
                "+  private boolean websocketAllowClientNoContext;",
                "+  private boolean websocketRequestServerNoContext;",
                "+",
                "+",
                "   /**",
                "@@ -242,2 +275,7 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     this.poolCleanerPeriod = other.getPoolCleanerPeriod();",
                "+    this.websocketTryUseDeflateFrame = other.websocketTryUseDeflateFrame;",
                "+    this.websocketTryUsePermessageDeflate = other.websocketTryUsePermessageDeflate;",
                "+    this.websocketAllowClientNoContext = other.websocketAllowClientNoContext;",
                "+    this.websocketCompressionLevel = other.websocketCompressionLevel;",
                "+    this.websocketRequestServerNoContext = other.websocketRequestServerNoContext;",
                "   }",
                "@@ -294,2 +332,7 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     decoderInitialBufferSize = DEFAULT_DECODER_INITIAL_BUFFER_SIZE;",
                "+    websocketTryUseDeflateFrame = DEFAULT_TRY_USE_WEBSOCKET_DEFLATE_FRAME;",
                "+    websocketTryUsePermessageDeflate = DEFAULT_TRY_USE_WEBSOCKET_PERMESSAGE_DEFLATE;",
                "+    websocketCompressionLevel = DEFAULT_WEBSOCKET_COMPRESSION_LEVEL;",
                "+    websocketAllowClientNoContext = DEFAULT_WEBSOCKET_COMPRESSION_ALLOW_CLIENT_NO_CONTEXT;",
                "+    websocketRequestServerNoContext = DEFAULT_WEBSOCKET_COMPRESSION_REQUEST_SERVER_NO_CONTEXT;",
                "     poolCleanerPeriod = DEFAULT_POOL_CLEANER_PERIOD;",
                "@@ -1049,2 +1092,102 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * Set option to offer Deflate Frame websocket compression",
                "+   * @param tryDeflateFrame",
                "+   * @return  a reference to this, so the API can be used fluently",
                "+   */",
                "+ public HttpClientOptions setTryUsePerFrameWebsocketCompression (boolean tryUsePerFrameWebsocketCompression )",
                "+ {",
                "+\t this.websocketTryUseDeflateFrame = tryUsePerFrameWebsocketCompression;",
                "+\t return this;",
                "+ }",
                "+",
                "+ /**",
                "+  *",
                "+  * @return Whether Deflate Frame websocket compression will be offered",
                "+  */",
                "+ public boolean tryWebsocketDeflateFrameCompression()",
                "+ {",
                "+\t return this.websocketTryUseDeflateFrame;",
                "+ }",
                "+",
                "+/**",
                "+ * Set option to offer Permessage Deflate websocket compression",
                "+ * @param tryPermessageDeflate",
                "+ * @return  a reference to this, so the API can be used fluently",
                "+ */",
                "+ public HttpClientOptions setTryUsePerMessageWebsocketCompression (boolean tryUsePerMessageWebsocketCompression )",
                "+ {",
                "+\t this.websocketTryUsePermessageDeflate = tryUsePerMessageWebsocketCompression;",
                "+\t return this;",
                "+ }",
                "+",
                "+ /**",
                "+  *",
                "+  * @return whether Permessage Deflate websocket compression will be offered",
                "+  */",
                "+ public boolean tryUsePerMessageWebsocketCompression ()",
                "+ {",
                "+\t return this.websocketTryUsePermessageDeflate;",
                "+ }",
                "+",
                "+ /**",
                "+  * Set websocket compression level",
                "+  * @param compressionLevel",
                "+  * @return a reference to this, so the API can be used fluently",
                "+  */",
                "+ public HttpClientOptions setWebsocketCompressionLevel (int websocketCompressionLevel)",
                "+ {",
                "+\t this.websocketCompressionLevel = websocketCompressionLevel;",
                "+\t return this;",
                "+ }",
                "+",
                "+ /**",
                "+  *",
                "+  * @return websocket compression level",
                "+  */",
                "+ public int websocketCompressionLevel()",
                "+ {",
                "+\t return this.websocketCompressionLevel;",
                "+ }",
                "+",
                "+ /**",
                "+  * Set the websocket compression allow client no context option",
                "+  * @param allowClientNoContext",
                "+  * @return a reference to this, so the API can be used fluently",
                "+  */",
                "+ public HttpClientOptions setWebsocketCompressionAllowClientNoContext(boolean allowClientNoContext)",
                "+ {",
                "+\t this.websocketAllowClientNoContext = allowClientNoContext;",
                "+\t return this;",
                "+ }",
                "+",
                "+ /**",
                "+  *",
                "+  * @return the current websocket compression client no context setting",
                "+  */",
                "+ public boolean getWebsocketCompressionAllowClientNoContext()",
                "+ {",
                "+\t return this.websocketAllowClientNoContext;",
                "+ }",
                "+",
                "+ /**",
                "+  * Set the websocket compression server no context option",
                "+  * @param requestServerNoContext",
                "+  * @return a reference to this, so the API can be used fluently",
                "+  */",
                "+ public HttpClientOptions setWebsocketCompressionRequestServerNoContext(boolean requestServerNoContext)",
                "+ {",
                "+\tthis.websocketRequestServerNoContext = requestServerNoContext;",
                "+\treturn this;",
                "+ }",
                "+",
                "+ /**",
                "+  *",
                "+  * @return current setting of the websocket compression server no context option",
                "+  */",
                "+ public boolean getWebsocketCompressionRequestServerNoContext()",
                "+ {",
                "+\t return this.websocketRequestServerNoContext;",
                "+ }",
                "+",
                "   /**",
                "@@ -1117,2 +1260,8 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+    if (websocketTryUseDeflateFrame != that.websocketTryUseDeflateFrame) return false;",
                "+    if (websocketTryUsePermessageDeflate != that.websocketTryUsePermessageDeflate) return false;",
                "+    if (websocketCompressionLevel != that.websocketCompressionLevel) return false;",
                "+    if (websocketAllowClientNoContext != that.websocketAllowClientNoContext) return false;",
                "+    if (websocketRequestServerNoContext != that.websocketRequestServerNoContext) return false;",
                "+",
                "     return true;",
                "@@ -1147,2 +1296,7 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     result = 31 * result + poolCleanerPeriod;",
                "+    result = 31 * result + (websocketTryUseDeflateFrame ? 1 : 0);",
                "+    result = 31 * result + (websocketTryUsePermessageDeflate ? 1 : 0);",
                "+    result = 31 * result + websocketCompressionLevel;",
                "+    result = 31 * result + (websocketAllowClientNoContext ? 1 : 0);",
                "+    result = 31 * result + (websocketRequestServerNoContext ? 1: 0);",
                "     return result;",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerOptions.java b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "index 1960e8c6e..238741c25 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "@@ -106,2 +106,27 @@ public class HttpServerOptions extends NetServerOptions {",
                "   public static final int DEFAULT_DECODER_INITIAL_BUFFER_SIZE = 128;",
                "+  ",
                "+  /**",
                "+   * Default support for WebSockets deflate frame compression",
                "+   */",
                "+  public static final boolean DEFAULT_WEBSOCKET_SUPPORT_DEFLATE_FRAME_COMPRESSION = true;",
                "+  ",
                "+  /**",
                "+   * Default support for WebSockets Permessage Deflate compression",
                "+   */",
                "+  public static final boolean DEFAULT_WEBSOCKET_SUPPORT_PERMESSAGE_DEFLATE_COMPRESSION = true;",
                "+  ",
                "+  /**",
                "+   * Default WebSocket compression level",
                "+   */",
                "+  public static final int DEFAULT_WEBSOCKET_COMPRESSION_LEVEL = 6;",
                "+  ",
                "+  /**",
                "+   * Default Websocket compression server no context",
                "+   */",
                "+  public static final boolean DEFAULT_WEBSOCKET_COMPRESSION_ALLOW_SERVER_NO_CONTEXT = false;",
                "+  ",
                "+  /**",
                "+   * Default WebSocket compression client no context",
                "+   */",
                "+  public static final boolean DEFAULT_WEBSOCKET_COMPRESSION_PREFERRED_CLIENT_NO_CONTEXT = false;",
                "@@ -122,2 +147,7 @@ public class HttpServerOptions extends NetServerOptions {",
                "   private int decoderInitialBufferSize;",
                "+  private boolean websocketDeflateFrameCompressionSupported;",
                "+  private boolean websocketPermessageDeflateCompressionSupported;",
                "+  private int websocketCompressionLevel;",
                "+  private boolean websocketCompressionAllowServerNoContext;",
                "+  private boolean websocketCompressionPreferredClientNoContext;",
                "@@ -154,2 +184,7 @@ public class HttpServerOptions extends NetServerOptions {",
                "     this.decoderInitialBufferSize = other.getDecoderInitialBufferSize();",
                "+    this.websocketDeflateFrameCompressionSupported = other.websocketDeflateFrameCompressionSupported;",
                "+    this.websocketPermessageDeflateCompressionSupported = other.websocketPermessageDeflateCompressionSupported;",
                "+    this.websocketCompressionLevel = other.websocketCompressionLevel;",
                "+    this.websocketCompressionPreferredClientNoContext = other.websocketCompressionPreferredClientNoContext;",
                "+    this.websocketCompressionAllowServerNoContext = other.websocketCompressionAllowServerNoContext;",
                "   }",
                "@@ -194,2 +229,7 @@ public class HttpServerOptions extends NetServerOptions {",
                "     decoderInitialBufferSize = DEFAULT_DECODER_INITIAL_BUFFER_SIZE;",
                "+    websocketDeflateFrameCompressionSupported = DEFAULT_WEBSOCKET_SUPPORT_DEFLATE_FRAME_COMPRESSION;",
                "+    websocketPermessageDeflateCompressionSupported = DEFAULT_WEBSOCKET_SUPPORT_PERMESSAGE_DEFLATE_COMPRESSION;",
                "+    websocketCompressionLevel = DEFAULT_WEBSOCKET_COMPRESSION_LEVEL;",
                "+    websocketCompressionPreferredClientNoContext = DEFAULT_WEBSOCKET_COMPRESSION_PREFERRED_CLIENT_NO_CONTEXT;",
                "+    websocketCompressionAllowServerNoContext = DEFAULT_WEBSOCKET_COMPRESSION_ALLOW_SERVER_NO_CONTEXT;",
                "   }",
                "@@ -714,2 +754,92 @@ public class HttpServerOptions extends NetServerOptions {",
                "+  /**",
                "+   * Enable or disable support for WebSocket Defalte Frame compression",
                "+   * @param deflateCompressionSupported",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpServerOptions setPerFrameWebsocketCompressionSupported  (boolean perFrameWebsocketCompressionSupported ) {",
                "+\t  this.websocketDeflateFrameCompressionSupported = perFrameWebsocketCompressionSupported;",
                "+\t  return this;",
                "+  }",
                "+  ",
                "+  /** ",
                "+   * Get whether WebSocket Deflate Frame compression is supported",
                "+   * @return true if the http server will accept Deflate Frame compression ",
                "+   */",
                "+  public boolean perFrameWebsocketCompressionSupported  () {",
                "+\t  return this.websocketDeflateFrameCompressionSupported;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Enable or disable support for WebSocket Permessage Deflate compression",
                "+   * @param permessageDeflateSupported",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpServerOptions setPerMessageWebsocketCompressionSupported  (boolean perMessageWebsocketCompressionSupported ) {",
                "+\t  this.websocketPermessageDeflateCompressionSupported = perMessageWebsocketCompressionSupported;",
                "+\t  return this;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Get whether WebSocket Permessage Deflate compression is supported",
                "+   * @return true if the http server will accept Permessage Deflate compression",
                "+   */",
                "+  public boolean perMessageWebsocketCompressionSupported  () {",
                "+\t  return this.websocketPermessageDeflateCompressionSupported;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Set the WebSocket compression level ",
                "+   * @param compressionLevel",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpServerOptions setWebsocketCompressionLevel (int websocketCompressionLevel) {",
                "+\t  this.websocketCompressionLevel = compressionLevel;",
                "+\t  return this;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Get the WebSocket compression level",
                "+   * @return the current WebSocket compression level",
                "+   */",
                "+  public int websocketCompressionLevel () {",
                "+\t  return this.websocketCompressionLevel;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Set the WebSocket Allow Server No Context option",
                "+   * @param allowServerNoContext ",
                "+   * @return  a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpServerOptions setWebsocketAllowServerNoContext (boolean allowServerNoContext) {",
                "+\t  this.websocketCompressionAllowServerNoContext = allowServerNoContext;",
                "+\t  return this;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Get current setting to allow server no context for WebSocket compression",
                "+   * @return",
                "+   */",
                "+  public boolean getWebsocketAllowServerNoContext () {",
                "+\t  return this.websocketCompressionAllowServerNoContext;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Set the WebSocket Preferred Client No Context setting",
                "+   * @param preferredClientNoContext",
                "+   * @return  a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpServerOptions setWebsocketPreferredClientNoContext (boolean preferredClientNoContext) {",
                "+\t  this.websocketCompressionPreferredClientNoContext = preferredClientNoContext;",
                "+\t  return this;",
                "+  }",
                "+  ",
                "+  /**",
                "+   * Get the current setting of the WebSocket Compression Preferred Client no Context setting",
                "+   * @return",
                "+   */",
                "+  public boolean getWebsocketPreferredClientNoContext () {",
                "+\t  return this.websocketCompressionPreferredClientNoContext;",
                "+  }",
                "+  ",
                "   @Override",
                "@@ -735,2 +865,7 @@ public class HttpServerOptions extends NetServerOptions {",
                "     if (decoderInitialBufferSize != that.decoderInitialBufferSize) return false;",
                "+    if (websocketDeflateFrameCompressionSupported != that.websocketDeflateFrameCompressionSupported) return false;",
                "+    if (websocketPermessageDeflateCompressionSupported != that.websocketPermessageDeflateCompressionSupported) return false;",
                "+    if (websocketCompressionLevel != that.websocketCompressionLevel) return false;",
                "+    if (websocketCompressionAllowServerNoContext != that.websocketCompressionAllowServerNoContext) return false;",
                "+    if (websocketCompressionPreferredClientNoContext != that.websocketCompressionPreferredClientNoContext) return false;",
                "@@ -757,2 +892,7 @@ public class HttpServerOptions extends NetServerOptions {",
                "     result = 31 * result + decoderInitialBufferSize;",
                "+    result = 31 * result + (websocketDeflateFrameCompressionSupported ? 1 : 0);",
                "+    result = 31 * result + (websocketPermessageDeflateCompressionSupported ? 1 : 0);",
                "+    result = 31 * result + websocketCompressionLevel;",
                "+    result = 31 * result + (websocketCompressionAllowServerNoContext ? 1 : 0);",
                "+    result = 31 * result + (websocketCompressionPreferredClientNoContext ? 1 : 0);",
                "     return result;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index b342b8e79..baa5f9de3 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -19,2 +19,3 @@ import io.netty.channel.ChannelPipeline;",
                " import io.netty.handler.codec.DecoderResult;",
                "+import io.netty.handler.codec.compression.ZlibCodecFactory;",
                " import io.netty.handler.codec.http.*;",
                "@@ -22,2 +23,7 @@ import io.netty.handler.codec.http.HttpHeaders;",
                " import io.netty.handler.codec.http.websocketx.*;",
                "+import io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandler;",
                "+import io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandshaker;",
                "+import io.netty.handler.codec.http.websocketx.extensions.compression.DeflateFrameClientExtensionHandshaker;",
                "+import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateClientExtensionHandshaker;",
                "+import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker;",
                " import io.netty.util.ReferenceCountUtil;",
                "@@ -40,2 +46,3 @@ import java.net.URI;",
                " import java.util.ArrayDeque;",
                "+import java.util.ArrayList;",
                " import java.util.Map;",
                "@@ -640,5 +647,13 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       }",
                "-      handshaker = WebSocketClientHandshakerFactory.newHandshaker(wsuri, version, subProtocols, false,",
                "+",
                "+      ChannelPipeline p = chctx.channel().pipeline();",
                "+      ArrayList<WebSocketClientExtensionHandshaker> extensionHandshakers = initializeWebsocketExtensionHandshakers(client.getOptions());",
                "+      if (!extensionHandshakers.isEmpty()) {",
                "+        p.addBefore(\"handler\", \"websocketsExtensionsHandler\", new WebSocketClientExtensionHandler(",
                "+          extensionHandshakers.toArray(new WebSocketClientExtensionHandshaker[extensionHandshakers.size()])));",
                "+      }",
                "+",
                "+      handshaker = WebSocketClientHandshakerFactory.newHandshaker(wsuri, version, subProtocols, !extensionHandshakers.isEmpty(),",
                "                                                                   nettyHeaders, maxWebSocketFrameSize,!options.isSendUnmaskedFrames(),false);",
                "-      ChannelPipeline p = chctx.pipeline();",
                "+",
                "       p.addBefore(\"handler\", \"handshakeCompleter\", new HandshakeInboundHandler(wsConnect, version != WebSocketVersion.V00));",
                "@@ -655,2 +670,18 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "+  ArrayList<WebSocketClientExtensionHandshaker> initializeWebsocketExtensionHandshakers (HttpClientOptions options) {",
                "+    ArrayList<WebSocketClientExtensionHandshaker> extensionHandshakers = new ArrayList<WebSocketClientExtensionHandshaker>();",
                "+    if (options.tryWebsocketDeflateFrameCompression()) {",
                "+      extensionHandshakers.add(new DeflateFrameClientExtensionHandshaker(options.websocketCompressionLevel(),",
                "+        false));",
                "+    }",
                "+",
                "+    if (options.tryUsePerMessageWebsocketCompression ()) {",
                "+      extensionHandshakers.add(new PerMessageDeflateClientExtensionHandshaker(options.websocketCompressionLevel(),",
                "+        ZlibCodecFactory.isSupportingWindowSizeAndMemLevel(), PerMessageDeflateServerExtensionHandshaker.MAX_WINDOW_SIZE,",
                "+        options.getWebsocketCompressionAllowClientNoContext(), options.getWebsocketCompressionRequestServerNoContext()));",
                "+    }",
                "+",
                "+    return extensionHandshakers;",
                "+  }",
                "+",
                "   private final class HandshakeInboundHandler extends ChannelInboundHandlerAdapter {",
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "index 5b6e5e29d..e537b4f84 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "@@ -94,4 +94,7 @@ public class Http1xServerHandler extends VertxHttpHandler<Http1xServerConnection",
                "       WebSocketServerHandshakerFactory factory =",
                "-        new WebSocketServerHandshakerFactory(HttpServerImpl.getWebSocketLocation(ch.pipeline(), request), conn.options.getWebsocketSubProtocols(), false,",
                "+        new WebSocketServerHandshakerFactory(HttpServerImpl.getWebSocketLocation(ch.pipeline(), request),",
                "+          conn.options.getWebsocketSubProtocols(),",
                "+          conn.options.perMessageWebsocketCompressionSupported () || conn.options.perFrameWebsocketCompressionSupported (),",
                "           conn.options.getMaxWebsocketFrameSize(), conn.options.isAcceptUnmaskedFrames());",
                "+",
                "       WebSocketServerHandshaker shake = factory.newHandshaker(request);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index 9c9e24e08..6cfbbf4c3 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -13,2 +13,10 @@ package io.vertx.core.http.impl;",
                "+import com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;",
                "+import io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandshaker;",
                "+import io.vertx.core.Closeable;",
                "+import io.vertx.core.Context;",
                "+import io.vertx.core.Future;",
                "+import io.vertx.core.Handler;",
                "+import io.vertx.core.MultiMap;",
                "+import io.vertx.core.VertxException;",
                " import io.vertx.core.*;",
                "@@ -40,2 +48,3 @@ import java.net.URISyntaxException;",
                " import java.net.URL;",
                "+import java.util.ArrayList;",
                " import java.util.Arrays;",
                "@@ -1093,3 +1102,2 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "         checkClosed();",
                "-        ContextInternal context = vertx.getOrCreateContext();",
                "         Handler<Throwable> connectionExceptionHandler;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 2629386de..a52960f30 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -24,2 +24,16 @@ import io.netty.handler.codec.http.websocketx.*;",
                " import io.netty.handler.codec.http2.*;",
                "+import io.netty.handler.codec.http.HttpRequest;",
                "+import io.netty.handler.codec.http.HttpRequestDecoder;",
                "+import io.netty.handler.codec.http.HttpResponseStatus;",
                "+import io.netty.handler.codec.http.LastHttpContent;",
                "+import io.netty.handler.codec.http.websocketx.PongWebSocketFrame;",
                "+import io.netty.handler.codec.http.websocketx.WebSocketHandshakeException;",
                "+import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;",
                "+import io.netty.handler.codec.http.websocketx.WebSocketVersion;",
                "+import io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker;",
                "+import io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;",
                "+import io.netty.handler.codec.http.websocketx.extensions.compression.DeflateFrameServerExtensionHandshaker;",
                "+import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker;",
                "+import io.netty.handler.codec.compression.ZlibCodecFactory;",
                "+import io.netty.handler.codec.http2.Http2CodecUtil;",
                " import io.netty.handler.codec.http2.Http2Settings;",
                "@@ -53,2 +67,3 @@ import io.vertx.core.spi.metrics.VertxMetrics;",
                " import io.vertx.core.streams.ReadStream;",
                "+import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;",
                "@@ -59,2 +74,3 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.Iterator;",
                "+import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -95,2 +111,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "   private Handler<HttpConnection> connectionHandler;",
                "+  private final String subProtocols;",
                "   private String serverOrigin;",
                "@@ -119,2 +136,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     this.sslHelper = new SSLHelper(options, options.getKeyCertOptions(), options.getTrustOptions());",
                "+    this.subProtocols = options.getWebsocketSubProtocols();",
                "     this.logEnabled = options.getLogActivity();",
                "@@ -432,2 +450,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     } else {",
                "+      initializeWebsocketExtensions (pipeline);",
                "       handler = new ServerHandlerWithWebSockets(sslHelper, options, serverOrigin, holder, metrics);",
                "@@ -441,2 +460,24 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     pipeline.addLast(\"handler\", handler);",
                "+",
                "+  }",
                "+",
                "+  void initializeWebsocketExtensions (ChannelPipeline pipeline) {",
                "+\t  ArrayList<WebSocketServerExtensionHandshaker> extensionHandshakers = new ArrayList<WebSocketServerExtensionHandshaker>();",
                "+",
                "+\t  if (options.perFrameWebsocketCompressionSupported ()) {",
                "+\t\t  extensionHandshakers.add(new DeflateFrameServerExtensionHandshaker(options.websocketCompressionLevel()));",
                "+\t  }",
                "+",
                "+\t  if (options.perMessageWebsocketCompressionSupported ()) {",
                "+\t\t  extensionHandshakers.add(new PerMessageDeflateServerExtensionHandshaker(options.websocketCompressionLevel(),",
                "+\t\t\t\t  ZlibCodecFactory.isSupportingWindowSizeAndMemLevel(), PerMessageDeflateServerExtensionHandshaker.MAX_WINDOW_SIZE,",
                "+\t\t\t\t  options.getWebsocketAllowServerNoContext(), options.getWebsocketPreferredClientNoContext()));",
                "+\t  }",
                "+",
                "+\t  if (!extensionHandshakers.isEmpty()) {",
                "+\t\t  WebSocketServerExtensionHandler extensionHandler = new WebSocketServerExtensionHandler(",
                "+\t\t\t  extensionHandshakers.toArray(new WebSocketServerExtensionHandshaker[extensionHandshakers.size()]));",
                "+\t\t  pipeline.addLast(\"websocketExtensionHandler\", extensionHandler);",
                "+\t  }",
                "+",
                "   }",
                "@@ -675,2 +716,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "               CloseWebSocketFrame closeFrame = new CloseWebSocketFrame(wsFrame.closeStatusCode(), wsFrame.closeReason());",
                "+              //TODO check if .replace(wsFrame.getBinaryData()) is really needed",
                "               ch.writeAndFlush(closeFrame).addListener(ChannelFutureListener.CLOSE);",
                "diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "index 541dc1472..9b4fbd73d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
                "@@ -29,2 +29,3 @@ import javax.net.ssl.SSLSession;",
                " import javax.security.cert.X509Certificate;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.UUID;"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/asciidocs/dataobjects.adoc",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "src/main/java/io/vertx/core/http/HttpServerOptions.java",
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/java/io/vertx/core/http/HttpServerOptions.java, src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java, src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java, src/main/java/io/vertx/core/http/impl/HttpServerImpl.java, src/main/java/io/vertx/core/http/HttpClientOptions.java, src/main/java/io/vertx/core/http/impl/HttpClientImpl.java, src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "129c1ccd66cdaddde234a768df70c9f370dfd475",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532511163,
            "hunks": 1,
            "message": "remove bad imports",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index 6cfbbf4c3..97d0ba8ed 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -13,4 +13,2 @@ package io.vertx.core.http.impl;",
                "-import com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;",
                "-import io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandshaker;",
                " import io.vertx.core.Closeable;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "10d536a16c2abb3dda4c621d0ced4926f23c9224",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533199085,
            "hunks": 95,
            "message": "Remove @GenIgnore when it is possible",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/Context.java b/src/main/java/io/vertx/core/Context.java",
                "index a31933d81..b3c3a8f0a 100644",
                "--- a/src/main/java/io/vertx/core/Context.java",
                "+++ b/src/main/java/io/vertx/core/Context.java",
                "@@ -14,3 +14,2 @@ package io.vertx.core;",
                " import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -229,10 +228,10 @@ public interface Context {",
                "    */",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   @Nullable",
                "-  @GenIgnore",
                "   Handler<Throwable> exceptionHandler();",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void addCloseHook(Closeable hook);",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void removeCloseHook(Closeable hook);",
                "diff --git a/src/main/java/io/vertx/core/MultiMap.java b/src/main/java/io/vertx/core/MultiMap.java",
                "index 18741b1f7..40906e0cd 100644",
                "--- a/src/main/java/io/vertx/core/MultiMap.java",
                "+++ b/src/main/java/io/vertx/core/MultiMap.java",
                "@@ -14,3 +14,2 @@ package io.vertx.core;",
                " import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -45,3 +44,3 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   String get(CharSequence name);",
                "@@ -69,3 +68,3 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   List<String> getAll(CharSequence name);",
                "@@ -78,3 +77,3 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   List<Map.Entry<String, String>> entries();",
                "@@ -92,3 +91,3 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   boolean contains(CharSequence name);",
                "@@ -112,3 +111,3 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   default boolean contains(CharSequence name, CharSequence value, boolean caseInsensitive) {",
                "@@ -149,3 +148,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap add(CharSequence name, CharSequence value);",
                "@@ -159,3 +159,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap add(String name, Iterable<String> values);",
                "@@ -165,3 +166,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap add(CharSequence name, Iterable<CharSequence> values);",
                "@@ -181,3 +183,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap addAll(Map<String, String> headers);",
                "@@ -199,3 +202,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap set(CharSequence name, CharSequence value);",
                "@@ -209,3 +213,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap set(String name, Iterable<String> values);",
                "@@ -215,3 +220,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap set(CharSequence name, Iterable<CharSequence> values);",
                "@@ -231,3 +237,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap setAll(Map<String, String> headers);",
                "@@ -246,3 +253,4 @@ public interface MultiMap extends Iterable<Map.Entry<String, String>> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   MultiMap remove(CharSequence name);",
                "diff --git a/src/main/java/io/vertx/core/Vertx.java b/src/main/java/io/vertx/core/Vertx.java",
                "index b8a4b4b15..92912fd8e 100644",
                "--- a/src/main/java/io/vertx/core/Vertx.java",
                "+++ b/src/main/java/io/vertx/core/Vertx.java",
                "@@ -321,3 +321,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void deployVerticle(Verticle verticle);",
                "@@ -335,3 +335,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void deployVerticle(Verticle verticle, Handler<AsyncResult<String>> completionHandler);",
                "@@ -345,3 +345,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void deployVerticle(Verticle verticle, DeploymentOptions options);",
                "@@ -364,3 +364,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void deployVerticle(Supplier<Verticle> verticleSupplier, DeploymentOptions options);",
                "@@ -375,3 +375,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void deployVerticle(Verticle verticle, DeploymentOptions options, Handler<AsyncResult<String>> completionHandler);",
                "@@ -394,3 +394,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void deployVerticle(Supplier<Verticle> verticleSupplier, DeploymentOptions options, Handler<AsyncResult<String>> completionHandler);",
                "@@ -470,3 +470,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void registerVerticleFactory(VerticleFactory factory);",
                "@@ -478,3 +478,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   void unregisterVerticleFactory(VerticleFactory factory);",
                "@@ -486,3 +486,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   Set<VerticleFactory> verticleFactories();",
                "@@ -530,3 +530,3 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   EventLoopGroup nettyEventLoopGroup();",
                "@@ -584,3 +584,4 @@ public interface Vertx extends Measured {",
                "    */",
                "-  @Nullable @GenIgnore Handler<Throwable> exceptionHandler();",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Nullable Handler<Throwable> exceptionHandler();",
                "diff --git a/src/main/java/io/vertx/core/buffer/Buffer.java b/src/main/java/io/vertx/core/buffer/Buffer.java",
                "index bc86a03fd..a37add616 100644",
                "--- a/src/main/java/io/vertx/core/buffer/Buffer.java",
                "+++ b/src/main/java/io/vertx/core/buffer/Buffer.java",
                "@@ -16,3 +16,2 @@ import io.netty.buffer.ByteBuf;",
                " import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.VertxGen;",
                "@@ -90,3 +89,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   static Buffer buffer(byte[] bytes) {",
                "@@ -112,3 +111,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   static Buffer buffer(ByteBuf byteBuf) {",
                "@@ -130,3 +129,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   String toString(Charset enc);",
                "@@ -272,3 +271,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   byte[] getBytes();",
                "@@ -279,3 +278,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   byte[] getBytes(int start, int end);",
                "@@ -288,3 +287,4 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   Buffer getBytes(byte[] dst);",
                "@@ -297,3 +297,4 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   Buffer getBytes(byte[] dst, int dstIndex);",
                "@@ -307,3 +308,4 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   Buffer getBytes(int start, int end, byte[] dst);",
                "@@ -317,3 +319,4 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   Buffer getBytes(int start, int end, byte[] dst, int dstIndex);",
                "@@ -358,3 +361,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   @Fluent",
                "@@ -367,3 +370,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   @Fluent",
                "@@ -629,3 +632,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   @Fluent",
                "@@ -637,3 +640,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   @Fluent",
                "@@ -645,3 +648,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   @Fluent",
                "@@ -694,3 +697,3 @@ public interface Buffer extends ClusterSerializable, Shareable {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   ByteBuf getByteBuf();",
                "diff --git a/src/main/java/io/vertx/core/eventbus/EventBus.java b/src/main/java/io/vertx/core/eventbus/EventBus.java",
                "index 1159d10cb..1c4d9ff6a 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/EventBus.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/EventBus.java",
                "@@ -200,3 +200,3 @@ public interface EventBus extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   EventBus registerCodec(MessageCodec codec);",
                "@@ -209,3 +209,3 @@ public interface EventBus extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   EventBus unregisterCodec(String name);",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClient.java b/src/main/java/io/vertx/core/http/HttpClient.java",
                "index 0207ab027..9e66bcc44 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpClient.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClient.java",
                "@@ -14,3 +14,2 @@ package io.vertx.core.http;",
                " import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.VertxGen;",
                "@@ -1418,3 +1417,3 @@ public interface HttpClient extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   Function<HttpClientResponse, Future<HttpClientRequest>> redirectHandler();",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientRequest.java b/src/main/java/io/vertx/core/http/HttpClientRequest.java",
                "index 1e046c033..591c2c45b 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpClientRequest.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientRequest.java",
                "@@ -19,3 +19,2 @@ import io.vertx.codegen.annotations.CacheReturn;",
                " import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.VertxGen;",
                "@@ -171,3 +170,4 @@ public interface HttpClientRequest extends WriteStream<Buffer>, ReadStream<HttpC",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpClientRequest putHeader(CharSequence name, CharSequence value);",
                "@@ -181,3 +181,4 @@ public interface HttpClientRequest extends WriteStream<Buffer>, ReadStream<HttpC",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpClientRequest putHeader(String name, Iterable<String> values);",
                "@@ -187,3 +188,4 @@ public interface HttpClientRequest extends WriteStream<Buffer>, ReadStream<HttpC",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpClientRequest putHeader(CharSequence name, Iterable<CharSequence> values);",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientResponse.java b/src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "index 893e1d803..d2642d5e4 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "@@ -15,3 +15,2 @@ import io.vertx.codegen.annotations.CacheReturn;",
                " import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -90,3 +89,3 @@ public interface HttpClientResponse extends ReadStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   String getHeader(CharSequence headerName);",
                "diff --git a/src/main/java/io/vertx/core/http/HttpConnection.java b/src/main/java/io/vertx/core/http/HttpConnection.java",
                "index cfa161845..5b326d4e7 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpConnection.java",
                "@@ -13,7 +13,3 @@ package io.vertx.core.http;",
                "-import io.vertx.codegen.annotations.CacheReturn;",
                "-import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                "-import io.vertx.codegen.annotations.Nullable;",
                "-import io.vertx.codegen.annotations.VertxGen;",
                "+import io.vertx.codegen.annotations.*;",
                " import io.vertx.core.AsyncResult;",
                "@@ -260,3 +256,3 @@ public interface HttpConnection {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   SSLSession sslSession();",
                "@@ -274,3 +270,3 @@ public interface HttpConnection {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServer.java b/src/main/java/io/vertx/core/http/HttpServer.java",
                "index 1442e89b5..f7413da93 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServer.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServer.java",
                "@@ -14,4 +14,2 @@ package io.vertx.core.http;",
                " import io.vertx.codegen.annotations.CacheReturn;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                "-import io.vertx.codegen.annotations.Nullable;",
                " import io.vertx.core.AsyncResult;",
                "@@ -59,3 +57,3 @@ public interface HttpServer extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   Handler<HttpServerRequest> requestHandler();",
                "@@ -101,3 +99,3 @@ public interface HttpServer extends Measured {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   Handler<ServerWebSocket> websocketHandler();",
                "@@ -150,3 +148,3 @@ public interface HttpServer extends Measured {",
                "   HttpServer listen(SocketAddress address, Handler<AsyncResult<HttpServer>> listenHandler);",
                "-    ",
                "+",
                "   /**",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerRequest.java b/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "index 868d105fa..137703a4a 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "@@ -13,3 +13,3 @@ package io.vertx.core.http;",
                "-import io.vertx.codegen.annotations.Nullable;",
                "+import io.vertx.codegen.annotations.*;",
                " import io.vertx.core.Handler;",
                "@@ -17,6 +17,2 @@ import io.vertx.core.MultiMap;",
                " import io.vertx.core.buffer.Buffer;",
                "-import io.vertx.codegen.annotations.CacheReturn;",
                "-import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                "-import io.vertx.codegen.annotations.VertxGen;",
                " import io.vertx.core.net.NetSocket;",
                "@@ -142,3 +138,3 @@ public interface HttpServerRequest extends ReadStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   String getHeader(CharSequence headerName);",
                "@@ -178,3 +174,3 @@ public interface HttpServerRequest extends ReadStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   SSLSession sslSession();",
                "@@ -192,3 +188,3 @@ public interface HttpServerRequest extends ReadStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/http/HttpServerResponse.java b/src/main/java/io/vertx/core/http/HttpServerResponse.java",
                "index 7977cee90..03284f623 100644",
                "--- a/src/main/java/io/vertx/core/http/HttpServerResponse.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpServerResponse.java",
                "@@ -15,3 +15,2 @@ import io.vertx.codegen.annotations.CacheReturn;",
                " import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -131,3 +130,4 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpServerResponse putHeader(CharSequence name, CharSequence value);",
                "@@ -137,3 +137,4 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpServerResponse putHeader(String name, Iterable<String> values);",
                "@@ -143,3 +144,4 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpServerResponse putHeader(CharSequence name, Iterable<CharSequence> values);",
                "@@ -165,3 +167,4 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpServerResponse putTrailer(CharSequence name, CharSequence value);",
                "@@ -171,3 +174,4 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpServerResponse putTrailer(String name, Iterable<String> values);",
                "@@ -177,3 +181,4 @@ public interface HttpServerResponse extends WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "+  @Fluent",
                "   HttpServerResponse putTrailer(CharSequence name, Iterable<CharSequence> value);",
                "diff --git a/src/main/java/io/vertx/core/http/ServerWebSocket.java b/src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "index f53334a2d..34bc35bb8 100644",
                "--- a/src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "+++ b/src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "@@ -14,3 +14,2 @@ package io.vertx.core.http;",
                " import io.vertx.codegen.annotations.CacheReturn;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -129,3 +128,3 @@ public interface ServerWebSocket extends WebSocketBase {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   SSLSession sslSession();",
                "@@ -143,3 +142,3 @@ public interface ServerWebSocket extends WebSocketBase {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/http/WebSocketBase.java b/src/main/java/io/vertx/core/http/WebSocketBase.java",
                "index 89cf36454..ca87502d7 100644",
                "--- a/src/main/java/io/vertx/core/http/WebSocketBase.java",
                "+++ b/src/main/java/io/vertx/core/http/WebSocketBase.java",
                "@@ -13,8 +13,3 @@ package io.vertx.core.http;",
                "-import io.vertx.codegen.annotations.CacheReturn;",
                "-import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                "-import io.vertx.codegen.annotations.Nullable;",
                "-import io.vertx.codegen.annotations.VertxGen;",
                "-import io.vertx.core.AsyncResult;",
                "+import io.vertx.codegen.annotations.*;",
                " import io.vertx.core.Handler;",
                "@@ -280,3 +275,3 @@ public interface WebSocketBase extends ReadStream<Buffer>, WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   SSLSession sslSession();",
                "@@ -294,3 +289,3 @@ public interface WebSocketBase extends ReadStream<Buffer>, WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/impl/VertxInternal.java b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "index c44ef08f9..463a2c2e4 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxInternal.java",
                "@@ -16,3 +16,2 @@ import io.netty.channel.EventLoopGroup;",
                " import io.netty.resolver.AddressResolverGroup;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.core.*;",
                "@@ -128,6 +127,4 @@ public interface VertxInternal extends Vertx {",
                "-  @GenIgnore",
                "   void addCloseHook(Closeable hook);",
                "-  @GenIgnore",
                "   void removeCloseHook(Closeable hook);",
                "diff --git a/src/main/java/io/vertx/core/net/NetClient.java b/src/main/java/io/vertx/core/net/NetClient.java",
                "index 2af0f292e..52f81772b 100644",
                "--- a/src/main/java/io/vertx/core/net/NetClient.java",
                "+++ b/src/main/java/io/vertx/core/net/NetClient.java",
                "@@ -13,3 +13,2 @@ package io.vertx.core.net;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.core.AsyncResult;",
                "diff --git a/src/main/java/io/vertx/core/net/NetServer.java b/src/main/java/io/vertx/core/net/NetServer.java",
                "index a0f2e93c2..b2915240f 100644",
                "--- a/src/main/java/io/vertx/core/net/NetServer.java",
                "+++ b/src/main/java/io/vertx/core/net/NetServer.java",
                "@@ -13,3 +13,2 @@ package io.vertx.core.net;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.Nullable;",
                "@@ -48,3 +47,3 @@ public interface NetServer extends Measured {",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   Handler<NetSocket> connectHandler();",
                "diff --git a/src/main/java/io/vertx/core/net/NetSocket.java b/src/main/java/io/vertx/core/net/NetSocket.java",
                "index 3d8f06477..1dbe8314a 100644",
                "--- a/src/main/java/io/vertx/core/net/NetSocket.java",
                "+++ b/src/main/java/io/vertx/core/net/NetSocket.java",
                "@@ -13,9 +13,5 @@ package io.vertx.core.net;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                "-import io.vertx.codegen.annotations.Nullable;",
                "+import io.vertx.codegen.annotations.*;",
                " import io.vertx.core.AsyncResult;",
                " import io.vertx.core.Handler;",
                "-import io.vertx.codegen.annotations.CacheReturn;",
                "-import io.vertx.codegen.annotations.Fluent;",
                "-import io.vertx.codegen.annotations.VertxGen;",
                " import io.vertx.core.buffer.Buffer;",
                "@@ -237,3 +233,3 @@ public interface NetSocket extends ReadStream<Buffer>, WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   SSLSession sslSession();",
                "@@ -251,3 +247,3 @@ public interface NetSocket extends ReadStream<Buffer>, WriteStream<Buffer> {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   X509Certificate[] peerCertificateChain() throws SSLPeerUnverifiedException;",
                "diff --git a/src/main/java/io/vertx/core/parsetools/JsonEvent.java b/src/main/java/io/vertx/core/parsetools/JsonEvent.java",
                "index 62db5a563..9fbb9de43 100644",
                "--- a/src/main/java/io/vertx/core/parsetools/JsonEvent.java",
                "+++ b/src/main/java/io/vertx/core/parsetools/JsonEvent.java",
                "@@ -14,3 +14,2 @@ package io.vertx.core.parsetools;",
                " import com.fasterxml.jackson.core.type.TypeReference;",
                "-import io.vertx.codegen.annotations.GenIgnore;",
                " import io.vertx.codegen.annotations.VertxGen;",
                "@@ -119,3 +118,3 @@ public interface JsonEvent {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   Instant instantValue();",
                "@@ -163,3 +162,3 @@ public interface JsonEvent {",
                "    */",
                "-  @GenIgnore",
                "+  @SuppressWarnings(\"codegen-allow-any-java-type\")",
                "   <T> T mapTo(TypeReference<T> type);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/Context.java",
                "src/main/java/io/vertx/core/MultiMap.java",
                "src/main/java/io/vertx/core/Vertx.java",
                "src/main/java/io/vertx/core/buffer/Buffer.java",
                "src/main/java/io/vertx/core/eventbus/EventBus.java",
                "src/main/java/io/vertx/core/http/HttpClient.java",
                "src/main/java/io/vertx/core/http/HttpClientRequest.java",
                "src/main/java/io/vertx/core/http/HttpClientResponse.java",
                "src/main/java/io/vertx/core/http/HttpConnection.java",
                "src/main/java/io/vertx/core/http/HttpServer.java",
                "src/main/java/io/vertx/core/http/HttpServerRequest.java",
                "src/main/java/io/vertx/core/http/HttpServerResponse.java",
                "src/main/java/io/vertx/core/http/ServerWebSocket.java",
                "src/main/java/io/vertx/core/http/WebSocketBase.java",
                "src/main/java/io/vertx/core/impl/VertxInternal.java",
                "src/main/java/io/vertx/core/net/NetClient.java",
                "src/main/java/io/vertx/core/net/NetServer.java",
                "src/main/java/io/vertx/core/net/NetSocket.java",
                "src/main/java/io/vertx/core/parsetools/JsonEvent.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/HttpServerResponse.java, src/main/java/io/vertx/core/parsetools/JsonEvent.java, src/main/java/io/vertx/core/impl/VertxInternal.java, src/main/java/io/vertx/core/buffer/Buffer.java, src/main/java/io/vertx/core/MultiMap.java, src/main/java/io/vertx/core/http/HttpClientResponse.java, src/main/java/io/vertx/core/http/HttpServer.java, src/main/java/io/vertx/core/http/HttpServerRequest.java, src/main/java/io/vertx/core/http/ServerWebSocket.java, src/main/java/io/vertx/core/http/HttpConnection.java, src/main/java/io/vertx/core/net/NetServer.java, src/main/java/io/vertx/core/Context.java, src/main/java/io/vertx/core/net/NetClient.java, src/main/java/io/vertx/core/http/HttpClient.java, src/main/java/io/vertx/core/net/NetSocket.java, src/main/java/io/vertx/core/Vertx.java, src/main/java/io/vertx/core/eventbus/EventBus.java, src/main/java/io/vertx/core/http/WebSocketBase.java, src/main/java/io/vertx/core/http/HttpClientRequest.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "57f37e737f46aba7876760d16a6f12ab19cdbe7d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529486367,
            "hunks": 1,
            "message": "Pass the exception to the stream in client connection when there is actually one (there is no for websockets)",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index bb340f7ba..f0594450c 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -465,3 +465,5 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       super.handleException(cause);",
                "-      stream.handleException(cause);",
                "+      if (stream != null) {",
                "+        stream.handleException(cause);",
                "+      }",
                "       // Close the connection as Netty's HttpResponseDecoder will not try further processing"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "6e0d88df64d80aba0954e1d159e25ee456c2083f",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524151241,
            "hunks": 1,
            "message": "Revert \"Fix bytesWritten when sending files with range\"",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "index 8a99c47c8..e6fcc5ab6 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "@@ -442,3 +442,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "-      long contentLength = Math.min(length - offset, file.length() - offset);",
                "+      long contentLength = Math.min(length, file.length() - offset);",
                "       bytesWritten = contentLength;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "10b50161541775ce2ded24e49550ee5f476eaaaf",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527243010,
            "hunks": 3,
            "message": "Remove useless InetSocketAddress resolution bypass for IP (that did not work) since the address resolver does the same but that works",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "index a8c967137..adc41a5fa 100644",
                "--- a/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "+++ b/src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                "@@ -20,2 +20,3 @@ import io.netty.channel.socket.InternetProtocolFamily;",
                " import io.netty.handler.logging.LoggingHandler;",
                "+import io.netty.util.NetUtil;",
                " import io.vertx.core.AsyncResult;",
                "@@ -233,15 +234,12 @@ public class DatagramSocketImpl implements DatagramSocket, MetricsProvider {",
                "     Objects.requireNonNull(host, \"no null host accepted\");",
                "-    InetSocketAddress addr = InetSocketAddress.createUnresolved(host, port);",
                "-    if (addr.isUnresolved()) {",
                "-      context.owner().resolveAddress(host, res -> {",
                "-        if (res.succeeded()) {",
                "-          doSend(packet, new InetSocketAddress(res.result(), port), handler);",
                "-        } else {",
                "-          handler.handle(Future.failedFuture(res.cause()));",
                "-        }",
                "-      });",
                "-    } else {",
                "-      // If it's immediately resolved it means it was just an IP address so no need to async resolve",
                "-      doSend(packet, addr, handler);",
                "+    if (port < 0 || port > 65535) {",
                "+      throw new IllegalArgumentException(\"port out of range:\" + port);",
                "     }",
                "+    context.owner().resolveAddress(host, res -> {",
                "+      if (res.succeeded()) {",
                "+        doSend(packet, new InetSocketAddress(res.result(), port), handler);",
                "+      } else {",
                "+        handler.handle(Future.failedFuture(res.cause()));",
                "+      }",
                "+    });",
                "     if (metrics != null) {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/datagram/impl/DatagramSocketImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "81139711c4197fb571bbd7fa79f0a336c463f04d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532686352,
            "hunks": 2,
            "message": "Document lock semantics wrt single threaded ordering Signed-off-by: Tom Bentley <tbentley@redhat.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/SharedData.java b/src/main/java/io/vertx/core/shareddata/SharedData.java",
                "index b806f9b82..d339581b3 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/SharedData.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/SharedData.java",
                "@@ -64,2 +64,6 @@ public interface SharedData {",
                "    * Get an asynchronous lock with the specified name. The lock will be passed to the handler when it is available.",
                "+   * <p>",
                "+   *   In general lock acquision is unordered, so that sequential attempts to acquire a lock,",
                "+   *   even from a single thread, can happen in non-sequential order.",
                "+   * </p>",
                "    *",
                "@@ -72,3 +76,8 @@ public interface SharedData {",
                "    * Like {@link #getLock(String, Handler)} but specifying a timeout. If the lock is not obtained within the timeout",
                "-   * a failure will be sent to the handler",
                "+   * a failure will be sent to the handler.",
                "+   * <p>",
                "+   *   In general lock acquision is unordered, so that sequential attempts to acquire a lock,",
                "+   *   even from a single thread, can happen in non-sequential order.",
                "+   * </p>",
                "+   *",
                "    * @param name  the name of the lock"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/SharedData.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/SharedData.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "e3fc1caf798593e453037b94cd84b096d99db42b",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525337796,
            "hunks": 2,
            "message": "Added @SafeVarargs on ConcurrentCyclicSequence(T...) constructor and clone the array to Object[] instead of T[]",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "index 0924b25da..db1d19b9b 100644",
                "--- a/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "+++ b/src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                "@@ -43,4 +43,5 @@ public class ConcurrentCyclicSequence<T> implements Iterable<T>, Iterator<T> {",
                "    */",
                "+  @SafeVarargs",
                "   public ConcurrentCyclicSequence(T... elements) {",
                "-    this(0, elements.clone());",
                "+    this(0, Arrays.copyOf(elements.clone(), elements.length, Object[].class));",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/utils/ConcurrentCyclicSequence.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "0be6d53c60a710a0ebbe3d53c81d13368701822c",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532521224,
            "hunks": 12,
            "message": "Remove left over package-info docs",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/buffer/package-info.java b/src/main/java/io/vertx/core/buffer/package-info.java",
                "index 786bc3d62..d856e3863 100644",
                "--- a/src/main/java/io/vertx/core/buffer/package-info.java",
                "+++ b/src/main/java/io/vertx/core/buffer/package-info.java",
                "@@ -11,128 +11,2 @@",
                "-/**",
                "- * == Buffers",
                "- * :toc: left",
                "- *",
                "- * Most data is shuffled around inside Vert.x using buffers.",
                "- *",
                "- * A buffer is a sequence of zero or more bytes that can read from or written to and which expands automatically as",
                "- * necessary to accommodate any bytes written to it. You can perhaps think of a buffer as smart byte array.",
                "- *",
                "- * === Creating buffers",
                "- *",
                "- * Buffers can create by using one of the static {@link io.vertx.core.buffer.Buffer#buffer} methods.",
                "- *",
                "- * Buffers can be initialised from strings or byte arrays, or empty buffers can be created.",
                "- *",
                "- * Here are some examples of creating buffers:",
                "- *",
                "- * Create a new empty buffer:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example1}",
                "- * ----",
                "- *",
                "- * Create a buffer from a String. The String will be encoded in the buffer using UTF-8.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example2}",
                "- * ----",
                "- *",
                "- * Create a buffer from a String: The String will be encoded using the specified encoding, e.g:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example3}",
                "- * ----",
                "- *",
                "- * include::override/buffer_from_bytes.adoc[]",
                "- *",
                "- * Create a buffer with an initial size hint. If you know your buffer will have a certain amount of data written to it",
                "- * you can create the buffer and specify this size. This makes the buffer initially allocate that much memory and is",
                "- * more efficient than the buffer automatically resizing multiple times as data is written to it.",
                "- *",
                "- * Note that buffers created this way *are empty*. It does not create a buffer filled with zeros up to the specified size.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example5}",
                "- * ----",
                "- *",
                "- * === Writing to a Buffer",
                "- *",
                "- * There are two ways to write to a buffer: appending, and random access.",
                "- * In either case buffers will always expand automatically to encompass the bytes. It's not possible to get",
                "- * an {@code IndexOutOfBoundsException} with a buffer.",
                "- *",
                "- * ==== Appending to a Buffer",
                "- *",
                "- * To append to a buffer, you use the {@code appendXXX} methods.",
                "- * Append methods exist for appending various different types.",
                "- *",
                "- * The return value of the {@code appendXXX} methods is the buffer itself, so these can be chained:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example6}",
                "- * ----",
                "- *",
                "- * ==== Random access buffer writes",
                "- *",
                "- * You can also write into the buffer at a specific index, by using the {@code setXXX} methods.",
                "- * Set methods exist for various different data types. All the set methods take an index as the first argument - this",
                "- * represents the position in the buffer where to start writing the data.",
                "- *",
                "- * The buffer will always expand as necessary to accommodate the data.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example7}",
                "- * ----",
                "- *",
                "- * === Reading from a Buffer",
                "- *",
                "- * Data is read from a buffer using the {@code getXXX} methods. Get methods exist for various datatypes.",
                "- * The first argument to these methods is an index in the buffer from where to get the data.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example8}",
                "- * ----",
                "- *",
                "- * === Working with unsigned numbers",
                "- *",
                "- * Unsigned numbers can be read from or appended/set to a buffer with the {@code getUnsignedXXX},",
                "- * {@code appendUnsignedXXX} and {@code setUnsignedXXX} methods. This is useful when implementing a codec for a",
                "- * network protocol optimized to minimize bandwidth consumption.",
                "- *",
                "- * In the following example, value 200 is set at specified position with just one byte:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.BufferExamples#example9}",
                "- * ----",
                "- *",
                "- * The console shows '200'.",
                "- *",
                "- * === Buffer length",
                "- *",
                "- * Use {@link io.vertx.core.buffer.Buffer#length} to obtain the length of the buffer.",
                "- * The length of a buffer is the index of the byte in the buffer with the largest index + 1.",
                "- *",
                "- * === Copying buffers",
                "- *",
                "- * Use {@link io.vertx.core.buffer.Buffer#copy} to make a copy of the buffer",
                "- *",
                "- * === Slicing buffers",
                "- *",
                "- * A sliced buffer is a new buffer which backs onto the original buffer, i.e. it does not copy the underlying data.",
                "- * Use {@link io.vertx.core.buffer.Buffer#slice} to create a sliced buffers",
                "- *",
                "- * === Buffer re-use",
                "- *",
                "- * After writing a buffer to a socket or other similar place, they cannot be re-used.",
                "- *",
                "- */",
                " package io.vertx.core.buffer;",
                "diff --git a/src/main/java/io/vertx/core/cli/annotations/package-info.java b/src/main/java/io/vertx/core/cli/annotations/package-info.java",
                "index 53e9db863..f1258fde6 100644",
                "--- a/src/main/java/io/vertx/core/cli/annotations/package-info.java",
                "+++ b/src/main/java/io/vertx/core/cli/annotations/package-info.java",
                "@@ -11,86 +11,2 @@",
                "-/**",
                "- * === Typed options and arguments",
                "- *",
                "- * The described {@link io.vertx.core.cli.Option} and {@link io.vertx.core.cli.Argument} classes are _untyped_,",
                "- * meaning that the only get String values.",
                "- * {@link io.vertx.core.cli.TypedOption} and {@link io.vertx.core.cli.TypedArgument} let you specify a _type_, so the",
                "- * (String) raw value is converted to the specified type.",
                "- *",
                "- * Instead of",
                "- * {@link io.vertx.core.cli.Option} and {@link io.vertx.core.cli.Argument}, use {@link io.vertx.core.cli.TypedOption}",
                "- * and {@link io.vertx.core.cli.TypedArgument} in the {@link io.vertx.core.cli.CLI} definition:",
                "- *",
                "- * [source,java]",
                "- * ----",
                "- * {@link examples.cli.TypedCLIExamples#example1}",
                "- * ----",
                "- *",
                "- * Then you can retrieve the converted values as follows:",
                "- *",
                "- * [source,java]",
                "- * ----",
                "- * {@link examples.cli.TypedCLIExamples#example2}",
                "- * ----",
                "- *",
                "- * The vert.x CLI is able to convert to classes:",
                "- *",
                "- * * having a constructor with a single",
                "- * {@link java.lang.String} argument, such as {@link java.io.File} or {@link io.vertx.core.json.JsonObject}",
                "- * * with a static `from` or `fromString` method",
                "- * * with a static `valueOf` method, such as primitive types and enumeration",
                "- *",
                "- * In addition, you can implement your own {@link io.vertx.core.cli.converters.Converter} and instruct the CLI to use",
                "- * this converter:",
                "- *",
                "- * [source,java]",
                "- * ----",
                "- * {@link examples.cli.TypedCLIExamples#example3}",
                "- * ----",
                "- *",
                "- * For booleans, the boolean values are evaluated to {@code true}: `on`, `yes`, `1`, `true`.",
                "- *",
                "- * If one of your option has an `enum` as type, it computes the set of choices automatically.",
                "- *",
                "- * === Using annotations",
                "- *",
                "- * You can also define your CLI using annotations. Definition is done using annotation on the class and on _setter_",
                "- * methods:",
                "- *",
                "- * [source, java]",
                "- * ----",
                "- * &#64;Name(\"some-name\")",
                "- * &#64;Summary(\"some short summary.\")",
                "- * &#64;Description(\"some long description\")",
                "- * public class AnnotatedCli {",
                "- *",
                "- *   private boolean flag;",
                "- *   private String name;",
                "- *   private String arg;",
                "- *",
                "- *  &#64;Option(shortName = \"f\", flag = true)",
                "- *  public void setFlag(boolean flag) {",
                "- *    this.flag = flag;",
                "- *  }",
                "- *",
                "- *  &#64;Option(longName = \"name\")",
                "- *  public void setName(String name) {",
                "- *    this.name = name;",
                "- *  }",
                "- *",
                "- *  &#64;Argument(index = 0)",
                "- *  public void setArg(String arg) {",
                "- *   this.arg = arg;",
                "- *  }",
                "- * }",
                "- * ----",
                "- *",
                "- * Once annotated, you can define the {@link io.vertx.core.cli.CLI} and inject the values using:",
                "- *",
                "- * [source,java]",
                "- * ----",
                "- * {@link examples.cli.TypedCLIExamples#example4}",
                "- * ----",
                "- *",
                "- */",
                " package io.vertx.core.cli.annotations;",
                "diff --git a/src/main/java/io/vertx/core/cli/package-info.java b/src/main/java/io/vertx/core/cli/package-info.java",
                "index 44e3227bc..a880ed4eb 100644",
                "--- a/src/main/java/io/vertx/core/cli/package-info.java",
                "+++ b/src/main/java/io/vertx/core/cli/package-info.java",
                "@@ -11,182 +11,2 @@",
                "-/**",
                "- * Vert.x Core provides an API for parsing command line arguments passed to programs. It's also able to print help",
                "- * messages detailing the options available for a command line tool. Even if such features are far from",
                "- * the Vert.x core topics, this API is used in the {@link io.vertx.core.Launcher} class that you can use in _fat-jar_",
                "- * and in the `vertx` command line tools. In addition, it's polyglot (can be used from any supported language) and is",
                "- * used in Vert.x Shell.",
                "- *",
                "- * Vert.x CLI provides a model to describe your command line interface, but also a parser. This parser supports",
                "- * different types of syntax:",
                "- *",
                "- * * POSIX like options (ie. `tar -zxvf foo.tar.gz`)",
                "- * * GNU like long options (ie. `du --human-readable --max-depth=1`)",
                "- * * Java like properties (ie. `java -Djava.awt.headless=true -Djava.net.useSystemProxies=true Foo`)",
                "- * * Short options with value attached (ie. `gcc -O2 foo.c`)",
                "- * * Long options with single hyphen (ie. `ant -projecthelp`)",
                "- *",
                "- * Using the CLI api is a 3-steps process:",
                "- *",
                "- * 1. The definition of the command line interface",
                "- * 2. The parsing of the user command line",
                "- * 3. The query / interrogation",
                "- *",
                "- * === Definition Stage",
                "- *",
                "- * Each command line interface must define the set of options and arguments that will be used. It also requires a",
                "- * name. The CLI API uses the {@link io.vertx.core.cli.Option} and {@link io.vertx.core.cli.Argument} classes to",
                "- * describe options and arguments:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example1}",
                "- * ----",
                "- *",
                "- * As you can see, you can create a new {@link io.vertx.core.cli.CLI} using",
                "- * {@link io.vertx.core.cli.CLI#create(java.lang.String)}. The passed string is the name of the CLI. Once created you",
                "- * can set the summary and description. The summary is intended to be short (one line), while the description can",
                "- * contain more details. Each option and argument are also added on the {@code CLI} object using the",
                "- * {@link io.vertx.core.cli.CLI#addArgument(io.vertx.core.cli.Argument)} and",
                "- * {@link io.vertx.core.cli.CLI#addOption(io.vertx.core.cli.Option)} methods.",
                "- *",
                "- * ==== Options",
                "- *",
                "- * An {@link io.vertx.core.cli.Option} is a command line parameter identified by a _key_ present in the user command",
                "- * line. Options must have at least a long name or a short name. Long name are generally used using a `--` prefix,",
                "- * while short names are used with a single `-`. Options can get a description displayed in the usage (see below).",
                "- * Options can receive 0, 1 or several values. An option receiving 0 values is a `flag`, and must be declared using",
                "- * {@link io.vertx.core.cli.Option#setFlag(boolean)}. By default, options receive a single value, however, you can",
                "- * configure the option to receive several values using {@link io.vertx.core.cli.Option#setMultiValued(boolean)}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example2}",
                "- * ----",
                "- *",
                "- * Options can be marked as mandatory. A mandatory option not set in the user command line throws an exception during",
                "- * the parsing:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example3}",
                "- * ----",
                "- *",
                "- * Non-mandatory options can have a _default value_. This value would be used if the user does not set the option in",
                "- * the command line:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example4}",
                "- * ----",
                "- *",
                "- * An option can be _hidden_ using the {@link io.vertx.core.cli.Option#setHidden(boolean)} method. Hidden option are",
                "- * not listed in the usage, but can still be used in the user command line (for power-users).",
                "- *",
                "- * If the option value is contrained to a fixed set, you can set the different acceptable choices:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example41}",
                "- * ----",
                "- *",
                "- * Options can also be instantiated from their JSON form.",
                "- *",
                "- * ==== Arguments",
                "- *",
                "- * Unlike options, arguments do not have a _key_ and are identified by their _index_. For example, in",
                "- * `java com.acme.Foo`, `com.acme.Foo` is an argument.",
                "- *",
                "- * Arguments do not have a name, there are identified using a 0-based index. The first parameter has the",
                "- * index `0`:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example5}",
                "- * ----",
                "- *",
                "- * If you don't set the argument indexes, it computes it automatically by using the declaration order.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example51}",
                "- * ----",
                "- *",
                "- * The `argName` is optional and used in the usage message.",
                "- *",
                "- * As options, {@link io.vertx.core.cli.Argument} can:",
                "- *",
                "- * * be hidden using {@link io.vertx.core.cli.Argument#setHidden(boolean)}",
                "- * * be mandatory using {@link io.vertx.core.cli.Argument#setRequired(boolean)}",
                "- * * have a default value using {@link io.vertx.core.cli.Argument#setDefaultValue(java.lang.String)}",
                "- * * receive several values using {@link io.vertx.core.cli.Argument#setMultiValued(boolean)} - only the last argument",
                "- * can be multi-valued.",
                "- *",
                "- * Arguments can also be instantiated from their JSON form.",
                "- *",
                "- * ==== Usage generation",
                "- *",
                "- * Once your {@link io.vertx.core.cli.CLI} instance is configured, you can generate the _usage_ message:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example6}",
                "- * ----",
                "- *",
                "- * It generates an usage message like this one:",
                "- *",
                "- *[source]",
                "- * ----",
                "- * Usage: copy [-R] source target",
                "- *",
                "- * A command line interface to copy files.",
                "- *",
                "- *   -R,--directory   enables directory support",
                "- * ----",
                "- *",
                "- * If you need to tune the usage message, check the {@link io.vertx.core.cli.UsageMessageFormatter} class.",
                "- *",
                "- * === Parsing Stage",
                "- *",
                "- * Once your {@link io.vertx.core.cli.CLI} instance is configured, you can parse the user command line to evaluate",
                "- * each option and argument:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example7}",
                "- * ----",
                "- *",
                "- * The {@link io.vertx.core.cli.CLI#parse(java.util.List)} method returns a {@link io.vertx.core.cli.CommandLine}",
                "- * object containing the values. By default, it validates the user command line and checks that each mandatory options",
                "- * and arguments have been set as well as the number of values received by each option. You can disable the",
                "- * validation by passing `false` as second parameter of {@link io.vertx.core.cli.CLI#parse(java.util.List, boolean)}.",
                "- * This is useful if you want to check an argument or option is present even if the parsed command line is invalid.",
                "- *",
                "- * You can check whether or not the",
                "- * {@link io.vertx.core.cli.CommandLine} is valid using {@link io.vertx.core.cli.CommandLine#isValid()}.",
                "- *",
                "- * === Query / Interrogation Stage",
                "- *",
                "- * Once parsed, you can retrieve the values of the options and arguments from the",
                "- * {@link io.vertx.core.cli.CommandLine} object returned by the {@link io.vertx.core.cli.CLI#parse(java.util.List)}",
                "- * method:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example8}",
                "- * ----",
                "- *",
                "- * One of your option can have been marked as \"help\". If a user command line enabled a \"help\" option, the validation",
                "- * won't failed, but give you the opportunity to check if the user asks for help:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.cli.CLIExamples#example9}",
                "- * ----",
                "- *",
                "- * [language,java]",
                "- * ----",
                "- * include::cli-for-java.adoc[]",
                "- * ----",
                "- *",
                "- */",
                " package io.vertx.core.cli;",
                "diff --git a/src/main/java/io/vertx/core/datagram/package-info.java b/src/main/java/io/vertx/core/datagram/package-info.java",
                "index 08591896b..e03220c25 100644",
                "--- a/src/main/java/io/vertx/core/datagram/package-info.java",
                "+++ b/src/main/java/io/vertx/core/datagram/package-info.java",
                "@@ -11,189 +11,2 @@",
                "-/**",
                "- * == Datagram sockets (UDP)",
                "- *",
                "- * Using User Datagram Protocol (UDP) with Vert.x is a piece of cake.",
                "- *",
                "- * UDP is a connection-less transport which basically means you have no persistent connection to a remote peer.",
                "- *",
                "- * Instead you can send and receive packages and the remote address is contained in each of them.",
                "- *",
                "- * Beside this UDP is not as safe as TCP to use, which means there are no guarantees that a send Datagram packet will",
                "- * receive it's endpoint at all.",
                "- *",
                "- * The only guarantee is that it will either receive complete or not at all.",
                "- *",
                "- * Also you usually can't send data which is bigger then the MTU size of your network interface, this is because each",
                "- * packet will be send as one packet.",
                "- *",
                "- * But be aware even if the packet size is smaller then the MTU it may still fail.",
                "- *",
                "- * At which size it will fail depends on the Operating System etc. So rule of thumb is to try to send small packets.",
                "- *",
                "- * Because of the nature of UDP it is best fit for Applications where you are allowed to drop packets (like for",
                "- * example a monitoring application).",
                "- *",
                "- * The benefits are that it has a lot less overhead compared to TCP, which can be handled by the NetServer",
                "- * and NetClient (see above).",
                "- *",
                "- * === Creating a DatagramSocket",
                "- *",
                "- * To use UDP you first need t create a {@link io.vertx.core.datagram.DatagramSocket}. It does not matter here if you only want to send data or send",
                "- * and receive.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DatagramExamples#example1}",
                "- * ----",
                "- *",
                "- * The returned {@link io.vertx.core.datagram.DatagramSocket} will not be bound to a specific port. This is not a",
                "- * problem if you only want to send data (like a client), but more on this in the next section.",
                "- *",
                "- * === Sending Datagram packets",
                "- *",
                "- * As mentioned before, User Datagram Protocol (UDP) sends data in packets to remote peers but is not connected to",
                "- * them in a persistent fashion.",
                "- *",
                "- * This means each packet can be sent to a different remote peer.",
                "- *",
                "- * Sending packets is as easy as shown here:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DatagramExamples#example2}",
                "- * ----",
                "- *",
                "- * === Receiving Datagram packets",
                "- *",
                "- * If you want to receive packets you need to bind the {@link io.vertx.core.datagram.DatagramSocket} by calling",
                "- * `listen(...)}` on it.",
                "- *",
                "- * This way you will be able to receive {@link io.vertx.core.datagram.DatagramPacket}s that were sent to the address and port on",
                "- * which the {@link io.vertx.core.datagram.DatagramSocket} listens.",
                "- *",
                "- * Beside this you also want to set a `Handler` which will be called for each received {@link io.vertx.core.datagram.DatagramPacket}.",
                "- *",
                "- * The {@link io.vertx.core.datagram.DatagramPacket} has the following methods:",
                "- *",
                "- * - {@link io.vertx.core.datagram.DatagramPacket#sender()}: The InetSocketAddress which represent the sender of the packet",
                "- * - {@link io.vertx.core.datagram.DatagramPacket#data()}: The Buffer which holds the data which was received.",
                "- *",
                "- * So to listen on a specific address and port you would do something like shown here:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DatagramExamples#example3}",
                "- * ----",
                "- *",
                "- * Be aware that even if the {code AsyncResult} is successed it only means it might be written on the network",
                "- * stack, but gives no guarantee that it ever reached or will reach the remote peer at all.",
                "- *",
                "- * If you need such a guarantee then you want to use TCP with some handshaking logic build on top.",
                "- *",
                "- * === Multicast",
                "- *",
                "- * ==== Sending Multicast packets",
                "- *",
                "- * Multicast allows multiple sockets to receive the same packets. This works by having the sockets join the same multicast group",
                "- * to which you can then send packets.",
                "- *",
                "- * We will look at how you can join a Multicast Group and receive packets in the next section.",
                "- *",
                "- * Sending multicast packets is not different than sending normal Datagram packets.  The difference is that you pass",
                "- * in a multicast group address to the send method.",
                "- *",
                "- * This is show here:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DatagramExamples#example4}",
                "- * ----",
                "- *",
                "- * All sockets that have joined the multicast group 230.0.0.1 will receive the packet.",
                "- *",
                "- * ===== Receiving Multicast packets",
                "- *",
                "- * If you want to receive packets for specific Multicast group you need to bind the {@link io.vertx.core.datagram.DatagramSocket} by",
                "- * calling `listen(...)` on it to join the Multicast group.",
                "- *",
                "- * This way you will receive DatagramPackets that were sent to the address and port on which the",
                "- * {@link io.vertx.core.datagram.DatagramSocket} listens and also to those sent to the Multicast group.",
                "- *",
                "- * Beside this you also want to set a Handler which will be called for each received DatagramPacket.",
                "- *",
                "- * The {@link io.vertx.core.datagram.DatagramPacket} has the following methods:",
                "- *",
                "- * - `sender()`: The InetSocketAddress which represent the sender of the packet",
                "- * - `data()`: The Buffer which holds the data which was received.",
                "- *",
                "- * So to listen on a specific address and port and also receive packets for the Multicast group 230.0.0.1 you",
                "- * would do something like shown here:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DatagramExamples#example5}",
                "- * ----",
                "- *",
                "- * ===== Unlisten / leave a Multicast group",
                "- *",
                "- * There are sometimes situations where you want to receive packets for a Multicast group for a limited time.",
                "- *",
                "- * In this situations you can first start to listen for them and then later unlisten.",
                "- *",
                "- * This is shown here:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DatagramExamples#example6}",
                "- * ----",
                "- *",
                "- * ===== Blocking multicast",
                "- *",
                "- * Beside unlisten a Multicast address it's also possible to just block multicast for a specific sender address.",
                "- *",
                "- * Be aware this only work on some Operating Systems and kernel versions. So please check the Operating System",
                "- * documentation if it's supported.",
                "- *",
                "- * This an expert feature.",
                "- *",
                "- * To block multicast from a specific address you can call `blockMulticastGroup(...)` on the DatagramSocket",
                "- * like shown here:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DatagramExamples#example7}",
                "- * ----",
                "- *",
                "- * ==== DatagramSocket properties",
                "- *",
                "- * When creating a {@link io.vertx.core.datagram.DatagramSocket} there are multiple properties you can set to",
                "- * change it's behaviour with the {@link io.vertx.core.datagram.DatagramSocketOptions} object. Those are listed here:",
                "- *",
                "- * - {@link io.vertx.core.datagram.DatagramSocketOptions#setSendBufferSize(int)} Sets the send buffer size in bytes.",
                "- * - {@link io.vertx.core.datagram.DatagramSocketOptions#setReceiveBufferSize(int)} Sets the TCP receive buffer size",
                "- * in bytes.",
                "- * - {@link io.vertx.core.datagram.DatagramSocketOptions#setReuseAddress(boolean)} If true then addresses in TIME_WAIT",
                "- * state can be reused after they have been closed.",
                "- * - {@link io.vertx.core.datagram.DatagramSocketOptions#setTrafficClass(int)}",
                "- * - {@link io.vertx.core.datagram.DatagramSocketOptions#setBroadcast(boolean)} Sets or clears the SO_BROADCAST socket",
                "- * option. When this option is set, Datagram (UDP) packets may be sent to a local interface's broadcast address.",
                "- * - {@link io.vertx.core.datagram.DatagramSocketOptions#setMulticastNetworkInterface(java.lang.String)} Sets or clears",
                "- * the IP_MULTICAST_LOOP socket option. When this option is set, multicast packets will also be received on the",
                "- * local interface.",
                "- * - {@link io.vertx.core.datagram.DatagramSocketOptions#setMulticastTimeToLive(int)} Sets the IP_MULTICAST_TTL socket",
                "- * option. TTL stands for \"Time to Live,\" but in this context it specifies the number of IP hops that a packet is",
                "- * allowed to go through, specifically for multicast traffic. Each router or gateway that forwards a packet decrements",
                "- * the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.",
                "- *",
                "- * ==== DatagramSocket Local Address",
                "- *",
                "- * You can find out the local address of the socket (i.e. the address of this side of the UDP Socket) by calling",
                "- * {@link io.vertx.core.datagram.DatagramSocket#localAddress()}. This will only return an `InetSocketAddress` if you",
                "- * bound the {@link io.vertx.core.datagram.DatagramSocket} with `listen(...)` before, otherwise it will return null.",
                "- *",
                "- * ==== Closing a DatagramSocket",
                "- *",
                "- * You can close a socket by invoking the {@link io.vertx.core.datagram.DatagramSocket#close} method. This will close",
                "- * the socket and release all resources",
                "- */",
                " package io.vertx.core.datagram;",
                "diff --git a/src/main/java/io/vertx/core/dns/package-info.java b/src/main/java/io/vertx/core/dns/package-info.java",
                "index 8a015ee56..217693f03 100644",
                "--- a/src/main/java/io/vertx/core/dns/package-info.java",
                "+++ b/src/main/java/io/vertx/core/dns/package-info.java",
                "@@ -11,197 +11,2 @@",
                "-/**",
                "- * == DNS client",
                "- *",
                "- * Often you will find yourself in situations where you need to obtain DNS informations in an asynchronous fashion.",
                "- * Unfortunally this is not possible with the API that is shipped with the Java Virtual Machine itself. Because of",
                "- * this Vert.x offers it's own API for DNS resolution which is fully asynchronous.",
                "- *",
                "- * To obtain a DnsClient instance you will create a new via the Vertx instance.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example1}",
                "- * ----",
                "- *",
                "- * You can also create the client with options and configure the query timeout.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example1_}",
                "- * ----",
                "- *",
                "- * Creating the client with no arguments or omitting the server address will use the address of the server used internally",
                "- * for non blocking address resolution.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example1__}",
                "- * ----",
                "- *",
                "- * === lookup",
                "- *",
                "- * Try to lookup the A (ipv4) or AAAA (ipv6) record for a given name. The first which is returned will be used,",
                "- * so it behaves the same way as you may be used from when using \"nslookup\" on your operation system.",
                "- *",
                "- * To lookup the A / AAAA record for \"vertx.io\" you would typically use it like:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example2}",
                "- * ----",
                "- *",
                "- * === lookup4",
                "- *",
                "- * Try to lookup the A (ipv4) record for a given name. The first which is returned will be used, so it behaves",
                "- * the same way as you may be used from when using \"nslookup\" on your operation system.",
                "- *",
                "- * To lookup the A record for \"vertx.io\" you would typically use it like:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example3}",
                "- * ----",
                "- *",
                "- * === lookup6",
                "- *",
                "- * Try to lookup the AAAA (ipv6) record for a given name. The first which is returned will be used, so it behaves the",
                "- * same way as you may be used from when using \"nslookup\" on your operation system.",
                "- *",
                "- * To lookup the A record for \"vertx.io\" you would typically use it like:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example4}",
                "- * ----",
                "- *",
                "- * === resolveA",
                "- *",
                "- * Try to resolve all A (ipv4) records for a given name. This is quite similar to using \"dig\" on unix like operation",
                "- * systems.",
                "- *",
                "- * To lookup all the A records for \"vertx.io\" you would typically do:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example5}",
                "- * ----",
                "- *",
                "- * === resolveAAAA",
                "- *",
                "- * Try to resolve all AAAA (ipv6) records for a given name. This is quite similar to using \"dig\" on unix like",
                "- * operation systems.",
                "- *",
                "- * To lookup all the AAAAA records for \"vertx.io\" you would typically do:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example6}",
                "- * ----",
                "- *",
                "- * === resolveCNAME",
                "- *",
                "- * Try to resolve all CNAME records for a given name. This is quite similar to using \"dig\" on unix like operation",
                "- * systems.",
                "- *",
                "- * To lookup all the CNAME records for \"vertx.io\" you would typically do:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example7}",
                "- * ----",
                "- *",
                "- * === resolveMX",
                "- *",
                "- * Try to resolve all MX records for a given name. The MX records are used to define which Mail-Server accepts",
                "- * emails for a given domain.",
                "- *",
                "- * To lookup all the MX records for \"vertx.io\" you would typically do:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example8}",
                "- * ----",
                "- *",
                "- * Be aware that the List will contain the {@link io.vertx.core.dns.MxRecord} sorted by the priority of them, which",
                "- * means MX records with smaller priority coming first in the List.",
                "- *",
                "- * The {@link io.vertx.core.dns.MxRecord} allows you to access the priority and the name of the MX record by offer methods for it like:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example9}",
                "- * ----",
                "- *",
                "- * === resolveTXT",
                "- *",
                "- * Try to resolve all TXT records for a given name. TXT records are often used to define extra informations for a domain.",
                "- *",
                "- * To resolve all the TXT records for \"vertx.io\" you could use something along these lines:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example10}",
                "- * ----",
                "- *",
                "- * === resolveNS",
                "- *",
                "- * Try to resolve all NS records for a given name. The NS records specify which DNS Server hosts the DNS informations",
                "- * for a given domain.",
                "- *",
                "- * To resolve all the NS records for \"vertx.io\" you could use something along these lines:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example11}",
                "- * ----",
                "- *",
                "- * === resolveSRV",
                "- *",
                "- * Try to resolve all SRV records for a given name. The SRV records are used to define extra informations like port and",
                "- * hostname of services. Some protocols need this extra informations.",
                "- *",
                "- * To lookup all the SRV records for \"vertx.io\" you would typically do:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example12}",
                "- * ----",
                "- *",
                "- * Be aware that the List will contain the SrvRecords sorted by the priority of them, which means SrvRecords",
                "- * with smaller priority coming first in the List.",
                "- *",
                "- * The {@link io.vertx.core.dns.SrvRecord} allows you to access all informations contained in the SRV record itself:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example13}",
                "- * ----",
                "- *",
                "- * Please refer to the API docs for the exact details.",
                "- *",
                "- * === resolvePTR",
                "- *",
                "- * Try to resolve the PTR record for a given name. The PTR record maps an ipaddress to a name.",
                "- *",
                "- * To resolve the PTR record for the ipaddress 10.0.0.1 you would use the PTR notion of \"1.0.0.10.in-addr.arpa\"",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example14}",
                "- * ----",
                "- *",
                "- * === reverseLookup",
                "- *",
                "- * Try to do a reverse lookup for an ipaddress. This is basically the same as resolve a PTR record, but allows you to",
                "- * just pass in the ipaddress and not a valid PTR query string.",
                "- *",
                "- * To do a reverse lookup for the ipaddress 10.0.0.1 do something similar like this:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.DNSExamples#example15}",
                "- * ----",
                "- *",
                "- * include::override/dns.adoc[]",
                "- */",
                " package io.vertx.core.dns;",
                "diff --git a/src/main/java/io/vertx/core/eventbus/package-info.java b/src/main/java/io/vertx/core/eventbus/package-info.java",
                "index 03c9c450e..bae63db08 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/package-info.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/package-info.java",
                "@@ -11,317 +11,2 @@",
                "-/**",
                "- * == The Event Bus",
                "- * :toc: left",
                "- *",
                "- * The {@link io.vertx.core.eventbus.EventBus event bus} is the *nervous system* of Vert.x.",
                "- *",
                "- * There is a single event bus instance for every Vert.x instance and it is obtained using the method {@link io.vertx.core.Vertx#eventBus}.",
                "- *",
                "- * The event bus allows different parts of your application to communicate with each other irrespective of what language they are written in,",
                "- * and whether they're in the same Vert.x instance, or in a different Vert.x instance.",
                "- *",
                "- * It can even be bridged to allow client side JavaScript running in a browser to communicate on the same event bus.",
                "- *",
                "- * The event bus forms a distributed peer-to-peer messaging system spanning multiple server nodes and multiple browsers.",
                "- *",
                "- * The event bus supports publish/subscribe, point to point, and request-response messaging.",
                "- *",
                "- * The event bus API is very simple. It basically involves registering handlers, unregistering handlers and",
                "- * sending and publishing messages.",
                "- *",
                "- * First some theory:",
                "- *",
                "- * === The Theory",
                "- *",
                "- * ==== Addressing",
                "- *",
                "- * Messages are sent on the event bus to an *address*.",
                "- *",
                "- * Vert.x doesn't bother with any fancy addressing schemes. In Vert.x an address is simply a string.",
                "- * Any string is valid. However it is wise to use some kind of scheme, e.g. using periods to demarcate a namespace.",
                "- *",
                "- * Some examples of valid addresses are +europe.news.feed1+, +acme.games.pacman+, +sausages+, and +X+.",
                "- *",
                "- * ==== Handlers",
                "- *",
                "- * Messages are received in handlers. You register a handler at an address.",
                "- *",
                "- * Many different handlers can be registered at the same address.",
                "- *",
                "- * A single handler can be registered at many different addresses.",
                "- *",
                "- * ==== Publish / subscribe messaging",
                "- *",
                "- * The event bus supports *publishing* messages.",
                "- *",
                "- * Messages are published to an address. Publishing means delivering the message",
                "- * to all handlers that are registered at that address.",
                "- *",
                "- * This is the familiar *publish/subscribe* messaging pattern.",
                "- *",
                "- * ==== Point to point and Request-Response messaging",
                "- *",
                "- * The event bus also supports *point to point* messaging.",
                "- *",
                "- * Messages are sent to an address. Vert.x will then route it to just one of the handlers registered at that address.",
                "- *",
                "- * If there is more than one handler registered at the address,",
                "- * one will be chosen using a non-strict round-robin algorithm.",
                "- *",
                "- * With point to point messaging, an optional reply handler can be specified when sending the message.",
                "- *",
                "- * When a message is received by a recipient, and has been handled, the recipient can optionally decide to reply to",
                "- * the message. If they do so the reply handler will be called.",
                "- *",
                "- * When the reply is received back at the sender, it too can be replied to. This can be repeated ad-infinitum,",
                "- * and allows a dialog to be set-up between two different verticles.",
                "- *",
                "- * This is a common messaging pattern called the *request-response* pattern.",
                "- *",
                "- * ==== Best-effort delivery",
                "- *",
                "- * Vert.x does it's best to deliver messages and won't consciously throw them away. This is called *best-effort* delivery.",
                "- *",
                "- * However, in case of failure of all or parts of the event bus, there is a possibility messages will be lost.",
                "- *",
                "- * If your application cares about lost messages, you should code your handlers to be idempotent, and your senders",
                "- * to retry after recovery.",
                "- *",
                "- * ==== Types of messages",
                "- *",
                "- * Out of the box Vert.x allows any primitive/simple type, String, or {@link io.vertx.core.buffer.Buffer buffers} to",
                "- * be sent as messages.",
                "- *",
                "- * However it's a convention and common practice in Vert.x to send messages as http://json.org/[JSON]",
                "- *",
                "- * JSON is very easy to create, read and parse in all the languages that Vert.x supports so it has become a kind of",
                "- * _lingua franca_ for Vert.x.",
                "- *",
                "- * However you are not forced to use JSON if you don't want to.",
                "- *",
                "- * The event bus is very flexible and also supports sending arbitrary objects over the event bus.",
                "- * You do this by defining a {@link io.vertx.core.eventbus.MessageCodec codec} for the objects you want to send.",
                "- *",
                "- * === The Event Bus API",
                "- *",
                "- * Let's jump into the API",
                "- *",
                "- * ==== Getting the event bus",
                "- *",
                "- * You get a reference to the event bus as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example0_5}",
                "- * ----",
                "- *",
                "- * There is a single instance of the event bus per Vert.x instance.",
                "- *",
                "- * ==== Registering Handlers",
                "- *",
                "- * This simplest way to register a handler is using {@link io.vertx.core.eventbus.EventBus#consumer(String, io.vertx.core.Handler)}.",
                "- * Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example1}",
                "- * ----",
                "- *",
                "- * When a message arrives for your handler, your handler will be called, passing in the {@link io.vertx.core.eventbus.Message message}.",
                "- *",
                "- * The object returned from call to +consumer()+ is an instance of {@link io.vertx.core.eventbus.MessageConsumer}",
                "- *",
                "- * This object can subsequently be used to unregister the handler, or use the handler as a stream.",
                "- *",
                "- * Alternatively you can use {@link io.vertx.core.eventbus.EventBus#consumer(String, io.vertx.core.Handler)} to",
                "- * to return a +MessageConsumer+ with no handler set, and then set the handler on that. For example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example2}",
                "- * ----",
                "- *",
                "- * When registering a handler on a clustered event bus, it can take some time for the registration to reach all",
                "- * nodes of the cluster.",
                "- *",
                "- * If you want to be notified when this has completed, you can register a {@link io.vertx.core.eventbus.MessageConsumer#completionHandler completion handler}",
                "- * on the +MessageConsumer+ object.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example3}",
                "- * ----",
                "- *",
                "- * ==== Un-registering Handlers",
                "- *",
                "- * To unregister a handler, call {@link io.vertx.core.eventbus.MessageConsumer#unregister}.",
                "- *",
                "- * If you are on a clustered event bus, un-registering can take some time to propagate across the nodes, if you want to",
                "- * be notified when this is complete use {@link io.vertx.core.eventbus.MessageConsumer#unregister(io.vertx.core.Handler)}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example4}",
                "- * ----",
                "- *",
                "- * ==== Publishing messages",
                "- *",
                "- * Publishing a message is simple. Just use {@link io.vertx.core.eventbus.EventBus#publish} specifying the",
                "- * address to publish it to.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example5}",
                "- * ----",
                "- *",
                "- * That message will then be delivered to all handlers registered against the address +news.uk.sport+.",
                "- *",
                "- * ==== Sending messages",
                "- *",
                "- * Sending a message will result in only one handler registered at the address receiving the message.",
                "- * This is the point to point messaging pattern. The handler is chosen in a non-strict round-robin fashion.",
                "- *",
                "- * You can send a message with {@link io.vertx.core.eventbus.EventBus#send}",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example6}",
                "- * ----",
                "- *",
                "- * include::override/eventbus_headers.adoc[]",
                "- *",
                "- * ==== Message ordering",
                "- *",
                "- * Vert.x will deliver messages to any particular handler in the same order they were sent from any particular sender.",
                "- *",
                "- * ==== The Message object",
                "- *",
                "- * The object you receive in a message handler is a {@link io.vertx.core.eventbus.Message}.",
                "- *",
                "- * The {@link io.vertx.core.eventbus.Message#body} of the message corresponds to the object that was sent or published.",
                "- *",
                "- * The headers of the message are available with {@link io.vertx.core.eventbus.Message#headers}.",
                "- *",
                "- * ==== Acknowledging messages / sending replies",
                "- *",
                "- * When using {@link io.vertx.core.eventbus.EventBus#send} the event bus attempts to deliver the message to a",
                "- * {@link io.vertx.core.eventbus.MessageConsumer} registered with the event bus.",
                "- *",
                "- * In some cases it's useful for the sender to know when the consumer has received the message and \"processed\" it.",
                "- *",
                "- * To acknowledge that the message has been processed the consumer can reply to the message by calling {@link io.vertx.core.eventbus.Message#reply}.",
                "- *",
                "- * When this happens it causes a reply to be sent back to the sender and the reply handler is invoked with the reply.",
                "- *",
                "- * An example will make this clear:",
                "- *",
                "- * The receiver:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example8}",
                "- * ----",
                "- *",
                "- * The sender:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example9}",
                "- * ----",
                "- *",
                "- * The reply can contain a message body which can contain useful information.",
                "- *",
                "- * What the \"processing\" actually means is application defined and depends entirely on what the message consumer does",
                "- * and is not something that the Vert.x event bus itself knows or cares about.",
                "- *",
                "- * Some examples:",
                "- *",
                "- * * A simple message consumer which implements a service which returns the time of the day would acknowledge with a message",
                "- * containing the time of day in the reply body",
                "- * * A message consumer which implements a persistent queue, might acknowledge with `true` if the message was successfully",
                "- * persisted in storage, or `false` if not.",
                "- * * A message consumer which processes an order might acknowledge with `true` when the order has been successfully processed",
                "- * so it can be deleted from the database",
                "- *",
                "- * ==== Sending with timeouts",
                "- *",
                "- * When sending a message with a reply handler you can specify a timeout in the {@link io.vertx.core.eventbus.DeliveryOptions}.",
                "- *",
                "- * If a reply is not received within that time, the reply handler will be called with a failure.",
                "- *",
                "- * The default timeout is 30 seconds.",
                "- *",
                "- * ==== Send Failures",
                "- *",
                "- * Message sends can fail for other reasons, including:",
                "- *",
                "- * * There are no handlers available to send the message to",
                "- * * The recipient has explicitly failed the message using {@link io.vertx.core.eventbus.Message#fail}",
                "- *",
                "- * In all cases the reply handler will be called with the specific failure.",
                "- *",
                "- * include::override/eventbus.adoc[]",
                "- *",
                "- * ==== Clustered Event Bus",
                "- *",
                "- * The event bus doesn't just exist in a single Vert.x instance. By clustering different Vert.x instances together on",
                "- * your network they can form a single, distributed, event bus.",
                "- *",
                "- * ==== Clustering programmatically",
                "- *",
                "- * If you're creating your Vert.x instance programmatically you get a clustered event bus by configuring the Vert.x",
                "- * instance as clustered;",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example12}",
                "- * ----",
                "- *",
                "- * You should also make sure you have a {@link io.vertx.core.spi.cluster.ClusterManager} implementation on your classpath,",
                "- * for example the default {@code HazelcastClusterManager}.",
                "- *",
                "- * ==== Clustering on the command line",
                "- *",
                "- * You can run Vert.x clustered on the command line with",
                "- *",
                "- *  vertx run my-verticle.js -cluster",
                "- *",
                "- * === Automatic clean-up in verticles",
                "- *",
                "- * If you're registering event bus handlers from inside verticles, those handlers will be automatically unregistered",
                "- * when the verticle is undeployed.",
                "- *",
                "- * == Configuring the event bus",
                "- *",
                "- * The event bus can be configured. It is particularly useful when the event bus is clustered. Under the hood",
                "- * the event bus uses TCP connections to send and receive message, so the",
                "- * {@link io.vertx.core.eventbus.EventBusOptions} let you configure all aspects of these TCP connections. As",
                "- * the event bus acts as a server and client, the configuration is close to",
                "- * {@link io.vertx.core.net.NetClientOptions} and {@link io.vertx.core.net.NetServerOptions}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example13}",
                "- * ----",
                "- *",
                "- * The previous snippet depicts how you can use SSL connections for the event bus, instead of plain TCP",
                "- * connections.",
                "- *",
                "- * **WARNING**: to enforce the security in clustered mode, you **must** configure the",
                "- * cluster manager to use encryption or enforce security. Refer to the documentation of the cluster",
                "- * manager for further details.",
                "- *",
                "- * The event bus configuration needs to be consistent in all the cluster nodes.",
                "- *",
                "- * The {@link io.vertx.core.eventbus.EventBusOptions} also lets you specify whether or not the event bus is",
                "- * clustered, the port and host, as you would do with {@link io.vertx.core.VertxOptions#setClustered(boolean)},",
                "- *  {@link io.vertx.core.VertxOptions#getClusterHost()} and {@link io.vertx.core.VertxOptions#getClusterPort()}.",
                "- *",
                "- * When used in containers, you can also configure the public host and port:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.EventBusExamples#example14}",
                "- * ----",
                "- */",
                " package io.vertx.core.eventbus;",
                "diff --git a/src/main/java/io/vertx/core/file/package-info.java b/src/main/java/io/vertx/core/file/package-info.java",
                "index 34403e1bf..885796607 100644",
                "--- a/src/main/java/io/vertx/core/file/package-info.java",
                "+++ b/src/main/java/io/vertx/core/file/package-info.java",
                "@@ -11,166 +11,2 @@",
                "-/**",
                "- * == Using the file system with Vert.x",
                "- *",
                "- * The Vert.x {@link io.vertx.core.file.FileSystem} object provides many operations for manipulating the file system.",
                "- *",
                "- * There is one file system object per Vert.x instance, and you obtain it with  {@link io.vertx.core.Vertx#fileSystem()}.",
                "- *",
                "- * A blocking and a non blocking version of each operation is provided. The non blocking versions take a handler",
                "- * which is called when the operation completes or an error occurs.",
                "- *",
                "- * Here's an example of an asynchronous copy of a file:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.FileSystemExamples#example1}",
                "- * ----",
                "- * The blocking versions are named `xxxBlocking` and return the results or throw exceptions directly. In many",
                "- * cases, depending on the operating system and file system, some of the potentially blocking operations can return",
                "- * quickly, which is why we provide them, but it's highly recommended that you test how long they take to return in your",
                "- * particular application before using them from an event loop, so as not to break the Golden Rule.",
                "- *",
                "- * Here's the copy using the blocking API:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.FileSystemExamples#example2}",
                "- * ----",
                "- *",
                "- * Many operations exist to copy, move, truncate, chmod and many other file operations. We won't list them all here,",
                "- * please consult the {@link io.vertx.core.file.FileSystem API docs} for the full list.",
                "- *",
                "- * Let's see a couple of examples using asynchronous methods:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.FileSystemExamples#asyncAPIExamples}",
                "- * ----",
                "- *",
                "- * === Asynchronous files",
                "- *",
                "- * Vert.x provides an asynchronous file abstraction that allows you to manipulate a file on the file system.",
                "- *",
                "- * You open an {@link io.vertx.core.file.AsyncFile AsyncFile} as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.FileSystemExamples#example3}",
                "- * ----",
                "- *",
                "- * `AsyncFile` implements `ReadStream` and `WriteStream` so you can _pump_",
                "- * files to and from other stream objects such as net sockets, http requests and responses, and WebSockets.",
                "- *",
                "- * They also allow you to read and write directly to them.",
                "- *",
                "- * ==== Random access writes",
                "- *",
                "- * To use an `AsyncFile` for random access writing you use the",
                "- * {@link io.vertx.core.file.AsyncFile#write(io.vertx.core.buffer.Buffer, long, io.vertx.core.Handler) write} method.",
                "- *",
                "- * The parameters to the method are:",
                "- *",
                "- * * `buffer`: the buffer to write.",
                "- * * `position`: an integer position in the file where to write the buffer. If the position is greater or equal to the size",
                "- *  of the file, the file will be enlarged to accommodate the offset.",
                "- * * `handler`: the result handler",
                "- *",
                "- * Here is an example of random access writes:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.FileSystemExamples#asyncFileWrite()}",
                "- * ----",
                "- *",
                "- * ==== Random access reads",
                "- *",
                "- * To use an `AsyncFile` for random access reads you use the",
                "- * {@link io.vertx.core.file.AsyncFile#read(io.vertx.core.buffer.Buffer, int, long, int, io.vertx.core.Handler) read}",
                "- * method.",
                "- *",
                "- * The parameters to the method are:",
                "- *",
                "- * * `buffer`: the buffer into which the data will be read.",
                "- * * `offset`: an integer offset into the buffer where the read data will be placed.",
                "- * * `position`: the position in the file where to read data from.",
                "- * * `length`: the number of bytes of data to read",
                "- * * `handler`: the result handler",
                "- *",
                "- * Here's an example of random access reads:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.FileSystemExamples#asyncFileRead()}",
                "- * ----",
                "- *",
                "- * ==== Opening Options",
                "- *",
                "- * When opening an `AsyncFile`, you pass an {@link io.vertx.core.file.OpenOptions OpenOptions} instance.",
                "- * These options describe the behavior of the file access. For instance, you can configure the file permissions with the",
                "- * {@link io.vertx.core.file.OpenOptions#setRead(boolean)}, {@link io.vertx.core.file.OpenOptions#setWrite(boolean)}",
                "- * and {@link io.vertx.core.file.OpenOptions#setPerms(java.lang.String)} methods.",
                "- *",
                "- * You can also configure the behavior if the open file already exists with",
                "- * {@link io.vertx.core.file.OpenOptions#setCreateNew(boolean)} and",
                "- * {@link io.vertx.core.file.OpenOptions#setTruncateExisting(boolean)}.",
                "- *",
                "- * You can also mark the file to be deleted on",
                "- * close or when the JVM is shutdown with {@link io.vertx.core.file.OpenOptions#setDeleteOnClose(boolean)}.",
                "- *",
                "- * ==== Flushing data to underlying storage.",
                "- *",
                "- * In the `OpenOptions`, you can enable/disable the automatic synchronisation of the content on every write using",
                "- * {@link io.vertx.core.file.OpenOptions#setDsync(boolean)}. In that case, you can manually flush any writes from the OS",
                "- * cache by calling the {@link io.vertx.core.file.AsyncFile#flush()} method.",
                "- *",
                "- * This method can also be called with an handler which will be called when the flush is complete.",
                "- *",
                "- * ==== Using AsyncFile as ReadStream and WriteStream",
                "- *",
                "- * `AsyncFile` implements `ReadStream` and `WriteStream`. You can then",
                "- * use them with a _pump_ to pump data to and from other read and write streams. For example, this would",
                "- * copy the content to another `AsyncFile`:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.FileSystemExamples#asyncFilePump()}",
                "- * ----",
                "- *",
                "- * You can also use the _pump_ to write file content into HTTP responses, or more generally in any",
                "- * `WriteStream`.",
                "- *",
                "- * [[classpath]]",
                "- * ==== Accessing files from the classpath",
                "- *",
                "- * When vert.x cannot find the file on the filesystem it tries to resolve the",
                "- * file from the class path. Note that classpath resource paths never start with",
                "- * a `/`.",
                "- *",
                "- * Due to the fact that Java does not offer async access to classpath",
                "- * resources, the file is copied to the filesystem in a worker thread when the",
                "- * classpath resource is accessed the very first time and served from there",
                "- * asynchrously. When the same resource is accessed a second time, the file from",
                "- * the filesystem is served directly from the filesystem. The original content",
                "- * is served even if the classpath resource changes (e.g. in a development",
                "- * system).",
                "- *",
                "- * This caching behaviour can be set on the {@link io.vertx.core.VertxOptions#setFileResolverCachingEnabled(boolean)}",
                "- * option. The default value of this option is `true` unless the system property `vertx.disableFileCaching` is",
                "- * defined.",
                "- *",
                "- * The path where the files are cached is `.vertx` by default and can be customized by setting the system",
                "- * property `vertx.cacheDirBase`.",
                "- *",
                "- * The whole classpath resolving feature can be disabled by setting the system",
                "- * property `vertx.disableFileCPResolving` to `true`.",
                "- *",
                "- * NOTE: these system properties are evaluated once when the the `io.vertx.core.impl.FileResolver` class is loaded, so",
                "- * these properties should be set before loading this class or as a JVM system property when launching it.",
                "- *",
                "- * ==== Closing an AsyncFile",
                "- *",
                "- * To close an `AsyncFile` call the {@link io.vertx.core.file.AsyncFile#close()} method. Closing is asynchronous and",
                "- * if you want to be notified when the close has been completed you can specify a handler function as an argument.",
                "- *",
                "- */",
                " package io.vertx.core.file;",
                "diff --git a/src/main/java/io/vertx/core/http/package-info.java b/src/main/java/io/vertx/core/http/package-info.java",
                "index af9879014..0deb2d15a 100644",
                "--- a/src/main/java/io/vertx/core/http/package-info.java",
                "+++ b/src/main/java/io/vertx/core/http/package-info.java",
                "@@ -11,1749 +11,2 @@",
                "-/**",
                "- * == Writing HTTP servers and clients",
                "- *",
                "- * Vert.x allows you to easily write non blocking HTTP clients and servers.",
                "- *",
                "- * Vert.x supports the HTTP/1.0, HTTP/1.1 and HTTP/2 protocols.",
                "- *",
                "- * The base API for HTTP is the same for HTTP/1.x and HTTP/2, specific API features are available for dealing with the",
                "- * HTTP/2 protocol.",
                "- *",
                "- * === Creating an HTTP Server",
                "- *",
                "- * The simplest way to create an HTTP server, using all default options is as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example1}",
                "- * ----",
                "- *",
                "- * === Configuring an HTTP server",
                "- *",
                "- * If you don't want the default, a server can be configured by passing in a {@link io.vertx.core.http.HttpServerOptions}",
                "- * instance when creating it:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example2}",
                "- * ----",
                "- *",
                "- * === Configuring an HTTP/2 server",
                "- *",
                "- * Vert.x supports HTTP/2 over TLS `h2` and over TCP `h2c`.",
                "- *",
                "- * - `h2` identifies the HTTP/2 protocol when used over TLS negotiated by https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation[Application-Layer Protocol Negotiation] (ALPN)",
                "- * - `h2c` identifies the HTTP/2 protocol when using in clear text over TCP, such connections are established either with",
                "- * an HTTP/1.1 upgraded request or directly",
                "- *",
                "- * To handle `h2` requests, TLS must be enabled along with {@link io.vertx.core.http.HttpServerOptions#setUseAlpn(boolean)}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example0}",
                "- * ----",
                "- *",
                "- * ALPN is a TLS extension that negotiates the protocol before the client and the server start to exchange data.",
                "- *",
                "- * Clients that don't support ALPN will still be able to do a _classic_ SSL handshake.",
                "- *",
                "- * ALPN will usually agree on the `h2` protocol, although `http/1.1` can be used if the server or the client decides",
                "- * so.",
                "- *",
                "- * To handle `h2c` requests, TLS must be disabled, the server will upgrade to HTTP/2 any request HTTP/1.1 that wants to",
                "- * upgrade to HTTP/2. It will also accept a direct `h2c` connection beginning with the `PRI * HTTP/2.0\\r\\nSM\\r\\n` preface.",
                "- *",
                "- * WARNING: most browsers won't support `h2c`, so for serving web sites you should use `h2` and not `h2c`.",
                "- *",
                "- * When a server accepts an HTTP/2 connection, it sends to the client its {@link io.vertx.core.http.HttpServerOptions#getInitialSettings initial settings}.",
                "- * The settings define how the client can use the connection, the default initial settings for a server are:",
                "- *",
                "- * - {@link io.vertx.core.http.Http2Settings#getMaxConcurrentStreams}: {@code 100} as recommended by the HTTP/2 RFC",
                "- * - the default HTTP/2 settings values for the others",
                "- *",
                "- * NOTE: Worker Verticles are not compatible with HTTP/2",
                "- *",
                "- * === Logging network server activity",
                "- *",
                "- * For debugging purposes, network activity can be logged.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#exampleServerLogging}",
                "- * ----",
                "- *",
                "- * See the chapter on <<logging_network_activity, logging network activity>> for a detailed explanation.",
                "- *",
                "- * === Start the Server Listening",
                "- *",
                "- * To tell the server to listen for incoming requests you use one of the {@link io.vertx.core.http.HttpServer#listen}",
                "- * alternatives.",
                "- *",
                "- * To tell the server to listen at the host and port as specified in the options:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example3}",
                "- * ----",
                "- *",
                "- * Or to specify the host and port in the call to listen, ignoring what is configured in the options:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example4}",
                "- * ----",
                "- *",
                "- * The default host is `0.0.0.0` which means 'listen on all available addresses' and the default port is `80`.",
                "- *",
                "- * The actual bind is asynchronous so the server might not actually be listening until some time *after* the call to",
                "- * listen has returned.",
                "- *",
                "- * If you want to be notified when the server is actually listening you can provide a handler to the `listen` call.",
                "- * For example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example5}",
                "- * ----",
                "- *",
                "- * === Getting notified of incoming requests",
                "- *",
                "- * To be notified when a request arrives you need to set a {@link io.vertx.core.http.HttpServer#requestHandler}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example6}",
                "- * ----",
                "- *",
                "- * === Handling requests",
                "- *",
                "- * When a request arrives, the request handler is called passing in an instance of {@link io.vertx.core.http.HttpServerRequest}.",
                "- * This object represents the server side HTTP request.",
                "- *",
                "- * The handler is called when the headers of the request have been fully read.",
                "- *",
                "- * If the request contains a body, that body will arrive at the server some time after the request handler has been called.",
                "- *",
                "- * The server request object allows you to retrieve the {@link io.vertx.core.http.HttpServerRequest#uri},",
                "- * {@link io.vertx.core.http.HttpServerRequest#path}, {@link io.vertx.core.http.HttpServerRequest#params} and",
                "- * {@link io.vertx.core.http.HttpServerRequest#headers}, amongst other things.",
                "- *",
                "- * Each server request object is associated with one server response object. You use",
                "- * {@link io.vertx.core.http.HttpServerRequest#response} to get a reference to the {@link io.vertx.core.http.HttpServerResponse}",
                "- * object.",
                "- *",
                "- * Here's a simple example of a server handling a request and replying with \"hello world\" to it.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example7_1}",
                "- * ----",
                "- *",
                "- * ==== Request version",
                "- *",
                "- * The version of HTTP specified in the request can be retrieved with {@link io.vertx.core.http.HttpServerRequest#version}",
                "- *",
                "- * ==== Request method",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerRequest#method} to retrieve the HTTP method of the request.",
                "- * (i.e. whether it's GET, POST, PUT, DELETE, HEAD, OPTIONS, etc).",
                "- *",
                "- * ==== Request URI",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerRequest#uri} to retrieve the URI of the request.",
                "- *",
                "- * Note that this is the actual URI as passed in the HTTP request, and it's almost always a relative URI.",
                "- *",
                "- * The URI is as defined in http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html[Section 5.1.2 of the HTTP specification - Request-URI]",
                "- *",
                "- * ==== Request path",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerRequest#path} to return the path part of the URI",
                "- *",
                "- * For example, if the request URI was:",
                "- *",
                "- *  a/b/c/page.html?param1=abc&param2=xyz",
                "- *",
                "- * Then the path would be",
                "- *",
                "- *  /a/b/c/page.html",
                "- *",
                "- * ==== Request query",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerRequest#query} to return the query part of the URI",
                "- *",
                "- * For example, if the request URI was:",
                "- *",
                "- *  a/b/c/page.html?param1=abc&param2=xyz",
                "- *",
                "- * Then the query would be",
                "- *",
                "- *  param1=abc&param2=xyz",
                "- *",
                "- * ==== Request headers",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerRequest#headers} to return the headers of the HTTP request.",
                "- *",
                "- * This returns an instance of {@link io.vertx.core.MultiMap} - which is like a normal Map or Hash but allows multiple",
                "- * values for the same key - this is because HTTP allows multiple header values with the same key.",
                "- *",
                "- * It also has case-insensitive keys, that means you can do the following:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example8}",
                "- * ----",
                "- *",
                "- * ==== Request host",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerRequest#host} to return the host of the HTTP request.",
                "- *",
                "- * For HTTP/1.x requests the `host` header is returned, for HTTP/1 requests the `:authority` pseudo header is returned.",
                "- *",
                "- * ==== Request parameters",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerRequest#params} to return the parameters of the HTTP request.",
                "- *",
                "- * Just like {@link io.vertx.core.http.HttpServerRequest#headers} this returns an instance of {@link io.vertx.core.MultiMap}",
                "- * as there can be more than one parameter with the same name.",
                "- *",
                "- * Request parameters are sent on the request URI, after the path. For example if the URI was:",
                "- *",
                "- *  /page.html?param1=abc&param2=xyz",
                "- *",
                "- * Then the parameters would contain the following:",
                "- *",
                "- * ----",
                "- * param1: 'abc'",
                "- * param2: 'xyz",
                "- * ----",
                "- *",
                "- * Note that these request parameters are retrieved from the URL of the request. If you have form attributes that",
                "- * have been sent as part of the submission of an HTML form submitted in the body of a `multi-part/form-data` request",
                "- * then they will not appear in the params here.",
                "- *",
                "- * ==== Remote address",
                "- *",
                "- * The address of the sender of the request can be retrieved with {@link io.vertx.core.http.HttpServerRequest#remoteAddress}.",
                "- *",
                "- * ==== Absolute URI",
                "- *",
                "- * The URI passed in an HTTP request is usually relative. If you wish to retrieve the absolute URI corresponding",
                "- * to the request, you can get it with {@link io.vertx.core.http.HttpServerRequest#absoluteURI}",
                "- *",
                "- * ==== End handler",
                "- *",
                "- * The {@link io.vertx.core.http.HttpServerRequest#endHandler} of the request is invoked when the entire request,",
                "- * including any body has been fully read.",
                "- *",
                "- * ==== Reading Data from the Request Body",
                "- *",
                "- * Often an HTTP request contains a body that we want to read. As previously mentioned the request handler is called",
                "- * when just the headers of the request have arrived so the request object does not have a body at that point.",
                "- *",
                "- * This is because the body may be very large (e.g. a file upload) and we don't generally want to buffer the entire",
                "- * body in memory before handing it to you, as that could cause the server to exhaust available memory.",
                "- *",
                "- * To receive the body, you can use the {@link io.vertx.core.http.HttpServerRequest#handler}  on the request,",
                "- * this will get called every time a chunk of the request body arrives. Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example9}",
                "- * ----",
                "- *",
                "- * The object passed into the handler is a {@link io.vertx.core.buffer.Buffer}, and the handler can be called",
                "- * multiple times as data arrives from the network, depending on the size of the body.",
                "- *",
                "- * In some cases (e.g. if the body is small) you will want to aggregate the entire body in memory, so you could do",
                "- * the aggregation yourself as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example10}",
                "- * ----",
                "- *",
                "- * This is such a common case, that Vert.x provides a {@link io.vertx.core.http.HttpServerRequest#bodyHandler} to do this",
                "- * for you. The body handler is called once when all the body has been received:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example11}",
                "- * ----",
                "- *",
                "- * ==== Pumping requests",
                "- *",
                "- * The request object is a {@link io.vertx.core.streams.ReadStream} so you can pump the request body to any",
                "- * {@link io.vertx.core.streams.WriteStream} instance.",
                "- *",
                "- * See the chapter on <<streams, streams and pumps>> for a detailed explanation.",
                "- *",
                "- * ==== Handling HTML forms",
                "- *",
                "- * HTML forms can be submitted with either a content type of `application/x-www-form-urlencoded` or `multipart/form-data`.",
                "- *",
                "- * For url encoded forms, the form attributes are encoded in the url, just like normal query parameters.",
                "- *",
                "- * For multi-part forms they are encoded in the request body, and as such are not available until the entire body",
                "- * has been read from the wire.",
                "- *",
                "- * Multi-part forms can also contain file uploads.",
                "- *",
                "- * If you want to retrieve the attributes of a multi-part form you should tell Vert.x that you expect to receive",
                "- * such a form *before* any of the body is read by calling {@link io.vertx.core.http.HttpServerRequest#setExpectMultipart}",
                "- * with true, and then you should retrieve the actual attributes using {@link io.vertx.core.http.HttpServerRequest#formAttributes}",
                "- * once the entire body has been read:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example12}",
                "- * ----",
                "- *",
                "- * ==== Handling form file uploads",
                "- *",
                "- * Vert.x can also handle file uploads which are encoded in a multi-part request body.",
                "- *",
                "- * To receive file uploads you tell Vert.x to expect a multi-part form and set an",
                "- * {@link io.vertx.core.http.HttpServerRequest#uploadHandler} on the request.",
                "- *",
                "- * This handler will be called once for every",
                "- * upload that arrives on the server.",
                "- *",
                "- * The object passed into the handler is a {@link io.vertx.core.http.HttpServerFileUpload} instance.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example13}",
                "- * ----",
                "- *",
                "- * File uploads can be large we don't provide the entire upload in a single buffer as that might result in memory",
                "- * exhaustion, instead, the upload data is received in chunks:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example14}",
                "- * ----",
                "- *",
                "- * The upload object is a {@link io.vertx.core.streams.ReadStream} so you can pump the request body to any",
                "- * {@link io.vertx.core.streams.WriteStream} instance. See the chapter on <<streams, streams and pumps>> for a",
                "- * detailed explanation.",
                "- *",
                "- * If you just want to upload the file to disk somewhere you can use {@link io.vertx.core.http.HttpServerFileUpload#streamToFileSystem}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example15}",
                "- * ----",
                "- *",
                "- * WARNING: Make sure you check the filename in a production system to avoid malicious clients uploading files",
                "- * to arbitrary places on your filesystem. See <<Security notes, security notes>> for more information.",
                "- *",
                "- * ==== Handling compressed body",
                "- *",
                "- * Vert.x can handle compressed body payloads which are encoded by the client with the _deflate_ or _gzip_",
                "- * algorithms.",
                "- *",
                "- * To enable decompression set {@link io.vertx.core.http.HttpServerOptions#setDecompressionSupported(boolean)} on the",
                "- * options when creating the server.",
                "- *",
                "- * By default decompression is disabled.",
                "- *",
                "- * ==== Receiving custom HTTP/2 frames",
                "- *",
                "- * HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "- * of frames to be sent and received.",
                "- *",
                "- * To receive custom frames, you can use the {@link io.vertx.core.http.HttpServerRequest#customFrameHandler} on the request,",
                "- * this will get called every time a custom frame arrives. Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example1}",
                "- * ----",
                "- *",
                "- * HTTP/2 frames are not subject to flow control - the frame handler will be called immediatly when a",
                "- * custom frame is received whether the request is paused or is not",
                "- *",
                "- * ==== Non standard HTTP methods",
                "- *",
                "- * The {@link io.vertx.core.http.HttpMethod#OTHER} HTTP method is used for non standard methods, in this case",
                "- * {@link io.vertx.core.http.HttpServerRequest#rawMethod()} returns the HTTP method as sent by the client.",
                "- *",
                "- * === Sending back responses",
                "- *",
                "- * The server response object is an instance of {@link io.vertx.core.http.HttpServerResponse} and is obtained from the",
                "- * request with {@link io.vertx.core.http.HttpServerRequest#response}.",
                "- *",
                "- * You use the response object to write a response back to the HTTP client.",
                "- *",
                "- * ==== Setting status code and message",
                "- *",
                "- * The default HTTP status code for a response is `200`, representing `OK`.",
                "- *",
                "- * Use {@link io.vertx.core.http.HttpServerResponse#setStatusCode} to set a different code.",
                "- *",
                "- * You can also specify a custom status message with {@link io.vertx.core.http.HttpServerResponse#setStatusMessage}.",
                "- *",
                "- * If you don't specify a status message, the default one corresponding to the status code will be used.",
                "- *",
                "- * NOTE: for HTTP/2 the status won't be present in the response since the protocol won't transmit the message",
                "- * to the client",
                "- *",
                "- * ==== Writing HTTP responses",
                "- *",
                "- * To write data to an HTTP response, you use one the {@link io.vertx.core.http.HttpServerResponse#write} operations.",
                "- *",
                "- * These can be invoked multiple times before the response is ended. They can be invoked in a few ways:",
                "- *",
                "- * With a single buffer:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example16}",
                "- * ----",
                "- *",
                "- * With a string. In this case the string will encoded using UTF-8 and the result written to the wire.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example17}",
                "- * ----",
                "- *",
                "- * With a string and an encoding. In this case the string will encoded using the specified encoding and the",
                "- * result written to the wire.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example18}",
                "- * ----",
                "- *",
                "- * Writing to a response is asynchronous and always returns immediately after the write has been queued.",
                "- *",
                "- * If you are just writing a single string or buffer to the HTTP response you can write it and end the response in a",
                "- * single call to the {@link io.vertx.core.http.HttpServerResponse#end(String)}",
                "- *",
                "- * The first call to write results in the response header being being written to the response. Consequently, if you are",
                "- * not using HTTP chunking then you must set the `Content-Length` header before writing to the response, since it will",
                "- * be too late otherwise. If you are using HTTP chunking you do not have to worry.",
                "- *",
                "- * ==== Ending HTTP responses",
                "- *",
                "- * Once you have finished with the HTTP response you should {@link io.vertx.core.http.HttpServerResponse#end} it.",
                "- *",
                "- * This can be done in several ways:",
                "- *",
                "- * With no arguments, the response is simply ended.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example19}",
                "- * ----",
                "- *",
                "- * It can also be called with a string or buffer in the same way `write` is called. In this case it's just the same as",
                "- * calling write with a string or buffer followed by calling end with no arguments. For example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example20}",
                "- * ----",
                "- *",
                "- * ==== Closing the underlying connection",
                "- *",
                "- * You can close the underlying TCP connection with {@link io.vertx.core.http.HttpServerResponse#close}.",
                "- *",
                "- * Non keep-alive connections will be automatically closed by Vert.x when the response is ended.",
                "- *",
                "- * Keep-alive connections are not automatically closed by Vert.x by default. If you want keep-alive connections to be",
                "- * closed after an idle time, then you configure {@link io.vertx.core.http.HttpServerOptions#setIdleTimeout}.",
                "- *",
                "- * HTTP/2 connections send a {@literal GOAWAY} frame before closing the response.",
                "- *",
                "- * ==== Setting response headers",
                "- *",
                "- * HTTP response headers can be added to the response by adding them directly to the",
                "- * {@link io.vertx.core.http.HttpServerResponse#headers}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example21}",
                "- * ----",
                "- *",
                "- * Or you can use {@link io.vertx.core.http.HttpServerResponse#putHeader}",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example22}",
                "- * ----",
                "- *",
                "- * Headers must all be added before any parts of the response body are written.",
                "- *",
                "- * ==== Chunked HTTP responses and trailers",
                "- *",
                "- * Vert.x supports http://en.wikipedia.org/wiki/Chunked_transfer_encoding[HTTP Chunked Transfer Encoding].",
                "- *",
                "- * This allows the HTTP response body to be written in chunks, and is normally used when a large response body is",
                "- * being streamed to a client and the total size is not known in advance.",
                "- *",
                "- * You put the HTTP response into chunked mode as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example23}",
                "- * ----",
                "- *",
                "- * Default is non-chunked. When in chunked mode, each call to one of the {@link io.vertx.core.http.HttpServerResponse#write}",
                "- * methods will result in a new HTTP chunk being written out.",
                "- *",
                "- * When in chunked mode you can also write HTTP response trailers to the response. These are actually written in",
                "- * the final chunk of the response.",
                "- *",
                "- * NOTE: chunked response has no effect for an HTTP/2 stream",
                "- *",
                "- * To add trailers to the response, add them directly to the {@link io.vertx.core.http.HttpServerResponse#trailers}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example24}",
                "- * ----",
                "- *",
                "- * Or use {@link io.vertx.core.http.HttpServerResponse#putTrailer}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example25}",
                "- * ----",
                "- *",
                "- * ==== Serving files directly from disk or the classpath",
                "- *",
                "- * If you were writing a web server, one way to serve a file from disk would be to open it as an {@link io.vertx.core.file.AsyncFile}",
                "- * and pump it to the HTTP response.",
                "- *",
                "- * Or you could load it it one go using {@link io.vertx.core.file.FileSystem#readFile} and write it straight to the response.",
                "- *",
                "- * Alternatively, Vert.x provides a method which allows you to serve a file from disk or the filesystem to an HTTP response",
                "- * in one operation.",
                "- * Where supported by the underlying operating system this may result in the OS directly transferring bytes from the",
                "- * file to the socket without being copied through user-space at all.",
                "- *",
                "- * This is done by using {@link io.vertx.core.http.HttpServerResponse#sendFile}, and is usually more efficient for large",
                "- * files, but may be slower for small files.",
                "- *",
                "- * Here's a very simple web server that serves files from the file system using sendFile:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example26}",
                "- * ----",
                "- *",
                "- * Sending a file is asynchronous and may not complete until some time after the call has returned. If you want to",
                "- * be notified when the file has been writen you can use {@link io.vertx.core.http.HttpServerResponse#sendFile(String, io.vertx.core.Handler)}",
                "- *",
                "- * Please see the chapter about <<classpath, serving files from the classpath>> for restrictions about the classpath resolution or disabling it.",
                "- *",
                "- * NOTE: If you use `sendFile` while using HTTPS it will copy through user-space, since if the kernel is copying data",
                "- * directly from disk to socket it doesn't give us an opportunity to apply any encryption.",
                "- *",
                "- * WARNING: If you're going to write web servers directly using Vert.x be careful that users cannot exploit the",
                "- * path to access files outside the directory from which you want to serve them or the classpath It may be safer instead to use",
                "- * Vert.x Web.",
                "- *",
                "- * When there is a need to serve just a segment of a file, say starting from a given byte, you can achieve this by doing:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example26b}",
                "- * ----",
                "- *",
                "- * You are not required to supply the length if you want to send a file starting from an offset until the end, in this",
                "- * case you can just do:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example26c}",
                "- * ----",
                "- *",
                "- * ==== Pumping responses",
                "- *",
                "- * The server response is a {@link io.vertx.core.streams.WriteStream} instance so you can pump to it from any",
                "- * {@link io.vertx.core.streams.ReadStream}, e.g. {@link io.vertx.core.file.AsyncFile}, {@link io.vertx.core.net.NetSocket},",
                "- * {@link io.vertx.core.http.WebSocket} or {@link io.vertx.core.http.HttpServerRequest}.",
                "- *",
                "- * Here's an example which echoes the request body back in the response for any PUT methods.",
                "- * It uses a pump for the body, so it will work even if the HTTP request body is much larger than can fit in memory",
                "- * at any one time:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example27}",
                "- * ----",
                "- *",
                "- * ==== Writing HTTP/2 frames",
                "- *",
                "- * HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "- * of frames to be sent and received.",
                "- *",
                "- * To send such frames, you can use the {@link io.vertx.core.http.HttpServerResponse#writeCustomFrame} on the response.",
                "- * Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example2}",
                "- * ----",
                "- *",
                "- * These frames are sent immediately and are not subject to flow control - when such frame is sent there it may be done",
                "- * before other {@literal DATA} frames.",
                "- *",
                "- * ==== Stream reset",
                "- *",
                "- * HTTP/1.x does not allow a clean reset of a request or a response stream, for example when a client uploads",
                "- * a resource already present on the server, the server needs to accept the entire response.",
                "- *",
                "- * HTTP/2 supports stream reset at any time during the request/response:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example3}",
                "- * ----",
                "- *",
                "- * By default the `NO_ERROR` (0) error code is sent, another code can sent instead:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example4}",
                "- * ----",
                "- *",
                "- * The HTTP/2 specification defines the list of http://httpwg.org/specs/rfc7540.html#ErrorCodes[error codes] one can use.",
                "- *",
                "- * The request handler are notified of stream reset events with the {@link io.vertx.core.http.HttpServerRequest#exceptionHandler request handler} and",
                "- * {@link io.vertx.core.http.HttpServerResponse#exceptionHandler response handler}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example5}",
                "- * ----",
                "- *",
                "- * ==== Server push",
                "- *",
                "- * Server push is a new feature of HTTP/2 that enables sending multiple responses in parallel for a single client request.",
                "- *",
                "- * When a server process a request, it can push a request/response to the client:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example6}",
                "- * ----",
                "- *",
                "- * When the server is ready to push the response, the push response handler is called and the handler can send the response.",
                "- *",
                "- * The push response handler may receive a failure, for instance the client may cancel the push because it already has `main.js` in its",
                "- * cache and does not want it anymore.",
                "- *",
                "- * The {@link io.vertx.core.http.HttpServerResponse#push} method must be called before the initiating response ends, however",
                "- * the pushed response can be written after.",
                "- *",
                "- * ==== Handling exceptions",
                "- *",
                "- * You can set an {@link io.vertx.core.http.HttpServer#exceptionHandler(io.vertx.core.Handler)} to receive any",
                "- * exceptions that happens before the connection is passed to the {@link io.vertx.core.http.HttpServer#requestHandler(io.vertx.core.Handler)}",
                "- * or to the {@link io.vertx.core.http.HttpServer#websocketHandler(io.vertx.core.Handler)}, e.g during the TLS handshake.",
                "- *",
                "- * === HTTP Compression",
                "- *",
                "- * Vert.x comes with support for HTTP Compression out of the box.",
                "- *",
                "- * This means you are able to automatically compress the body of the responses before they are sent back to the client.",
                "- *",
                "- * If the client does not support HTTP compression the responses are sent back without compressing the body.",
                "- *",
                "- * This allows to handle Client that support HTTP Compression and those that not support it at the same time.",
                "- *",
                "- * To enable compression use can configure it with {@link io.vertx.core.http.HttpServerOptions#setCompressionSupported}.",
                "- *",
                "- * By default compression is not enabled.",
                "- *",
                "- * When HTTP compression is enabled the server will check if the client includes an `Accept-Encoding` header which",
                "- * includes the supported compressions. Commonly used are deflate and gzip. Both are supported by Vert.x.",
                "- *",
                "- * If such a header is found the server will automatically compress the body of the response with one of the supported",
                "- * compressions and send it back to the client.",
                "- *",
                "- * Whenever the response needs to be sent without compression you can set the header `content-encoding` to `identity`:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#setIdentityContentEncodingHeader}",
                "- * ----",
                "- *",
                "- * Be aware that compression may be able to reduce network traffic but is more CPU-intensive.",
                "- *",
                "- * To address this latter issue Vert.x allows you to tune the 'compression level' parameter that is native of the gzip/deflate compression algorithms.",
                "- *",
                "- * Compression level allows to configure gizp/deflate algorithms in terms of the compression ratio of the resulting data and the computational cost of the compress/decompress operation.",
                "- *",
                "- * The compression level is an integer value ranged from '1' to '9', where '1' means lower compression ratio but fastest algorithm and '9' means maximum compression ratio available but a slower algorithm.",
                "- *",
                "- * Using compression levels higher that 1-2 usually allows to save just some bytes in size - the gain is not linear, and depends on the specific data to be compressed",
                "- * - but it comports a non-trascurable cost in term of CPU cycles required to the server while generating the compressed response data",
                "- * ( Note that at moment Vert.x doesn't support any form caching of compressed response data, even for static files, so the compression is done on-the-fly",
                "- * at every request body generation ) and in the same way it affects client(s) while decoding (inflating) received responses, operation that becomes more CPU-intensive",
                "- * the more the level increases.",
                "- *",
                "- * By default - if compression is enabled via {@link io.vertx.core.http.HttpServerOptions#setCompressionSupported} - Vert.x will use '6' as compression level,",
                "- * but the parameter can be configured to address any case with {@link io.vertx.core.http.HttpServerOptions#setCompressionLevel}.",
                "- *",
                "- * === Creating an HTTP client",
                "- *",
                "- * You create an {@link io.vertx.core.http.HttpClient} instance with default options as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example28}",
                "- * ----",
                "- *",
                "- * If you want to configure options for the client, you create it as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example29}",
                "- * ----",
                "- *",
                "- * Vert.x supports HTTP/2 over TLS `h2` and over TCP `h2c`.",
                "- *",
                "- * By default the http client performs HTTP/1.1 requests, to perform HTTP/2 requests the {@link io.vertx.core.http.HttpClientOptions#setProtocolVersion}",
                "- * must be set to {@link io.vertx.core.http.HttpVersion#HTTP_2}.",
                "- *",
                "- * For `h2` requests, TLS must be enabled with _Application-Layer Protocol Negotiation_:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example7}",
                "- * ----",
                "- *",
                "- * For `h2c` requests, TLS must be disabled, the client will do an HTTP/1.1 requests and try an upgrade to HTTP/2:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example8}",
                "- * ----",
                "- *",
                "- * `h2c` connections can also be established directly, i.e connection started with a prior knowledge, when",
                "- * {@link io.vertx.core.http.HttpClientOptions#setHttp2ClearTextUpgrade(boolean)} options is set to false: after the",
                "- * connection is established, the client will send the HTTP/2 connection preface and expect to receive",
                "- * the same preface from the server.",
                "- *",
                "- * The http server may not support HTTP/2, the actual version can be checked",
                "- * with {@link io.vertx.core.http.HttpClientResponse#version()} when the response arrives.",
                "- *",
                "- * When a clients connects to an HTTP/2 server, it sends to the server its {@link io.vertx.core.http.HttpClientOptions#getInitialSettings initial settings}.",
                "- * The settings define how the server can use the connection, the default initial settings for a client are the default",
                "- * values defined by the HTTP/2 RFC.",
                "- *",
                "- * === Logging network client activity",
                "- *",
                "- * For debugging purposes, network activity can be logged.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#exampleClientLogging}",
                "- * ----",
                "- *",
                "- * See the chapter on <<logging_network_activity, logging network activity>> for a detailed explanation.",
                "- *",
                "- * === Making requests",
                "- *",
                "- * The http client is very flexible and there are various ways you can make requests with it.",
                "- *",
                "- *",
                "- * Often you want to make many requests to the same host/port with an http client. To avoid you repeating the host/port",
                "- * every time you make a request you can configure the client with a default host/port:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example30}",
                "- * ----",
                "- *",
                "- * Alternatively if you find yourself making lots of requests to different host/ports with the same client you can",
                "- * simply specify the host/port when doing the request.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example31}",
                "- * ----",
                "- *",
                "- * Both methods of specifying host/port are supported for all the different ways of making requests with the client.",
                "- *",
                "- * ==== Simple requests with no request body",
                "- *",
                "- * Often, you'll want to make HTTP requests with no request body. This is usually the case with HTTP GET, OPTIONS and",
                "- * HEAD requests.",
                "- *",
                "- * The simplest way to do this with the Vert.x http client is using the methods prefixed with `Now`. For example",
                "- * {@link io.vertx.core.http.HttpClient#getNow}.",
                "- *",
                "- * These methods create the http request and send it in a single method call and allow you to provide a handler that will be",
                "- * called with the http response when it comes back.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example32}",
                "- * ----",
                "- *",
                "- * ==== Writing general requests",
                "- *",
                "- * At other times you don't know the request method you want to send until run-time. For that use case we provide",
                "- * general purpose request methods such as {@link io.vertx.core.http.HttpClient#request} which allow you to specify",
                "- * the HTTP method at run-time:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example33}",
                "- * ----",
                "- *",
                "- * ==== Writing request bodies",
                "- *",
                "- * Sometimes you'll want to write requests which have a body, or perhaps you want to write headers to a request",
                "- * before sending it.",
                "- *",
                "- * To do this you can call one of the specific request methods such as {@link io.vertx.core.http.HttpClient#post} or",
                "- * one of the general purpose request methods such as {@link io.vertx.core.http.HttpClient#request}.",
                "- *",
                "- * These methods don't send the request immediately, but instead return an instance of {@link io.vertx.core.http.HttpClientRequest}",
                "- * which can be used to write to the request body or write headers.",
                "- *",
                "- * Here are some examples of writing a POST request with a body:",
                "- *m",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example34}",
                "- * ----",
                "- *",
                "- * Methods exist to write strings in UTF-8 encoding and in any specific encoding and to write buffers:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example35}",
                "- * ----",
                "- *",
                "- * If you are just writing a single string or buffer to the HTTP request you can write it and end the request in a",
                "- * single call to the `end` function.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example36}",
                "- * ----",
                "- *",
                "- * When you're writing to a request, the first call to `write` will result in the request headers being written",
                "- * out to the wire.",
                "- *",
                "- * The actual write is asynchronous and might not occur until some time after the call has returned.",
                "- *",
                "- * Non-chunked HTTP requests with a request body require a `Content-Length` header to be provided.",
                "- *",
                "- * Consequently, if you are not using chunked HTTP then you must set the `Content-Length` header before writing",
                "- * to the request, as it will be too late otherwise.",
                "- *",
                "- * If you are calling one of the `end` methods that take a string or buffer then Vert.x will automatically calculate",
                "- * and set the `Content-Length` header before writing the request body.",
                "- *",
                "- * If you are using HTTP chunking a a `Content-Length` header is not required, so you do not have to calculate the size",
                "- * up-front.",
                "- *",
                "- * ==== Writing request headers",
                "- *",
                "- * You can write headers to a request using the {@link io.vertx.core.http.HttpClientRequest#headers()} multi-map as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example37}",
                "- * ----",
                "- *",
                "- * The headers are an instance of {@link io.vertx.core.MultiMap} which provides operations for adding, setting and removing",
                "- * entries. Http headers allow more than one value for a specific key.",
                "- *",
                "- * You can also write headers using {@link io.vertx.core.http.HttpClientRequest#putHeader}",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example38}",
                "- * ----",
                "- *",
                "- * If you wish to write headers to the request you must do so before any part of the request body is written.",
                "- *",
                "- * ==== Non standard HTTP methods",
                "- *",
                "- * The {@link io.vertx.core.http.HttpMethod#OTHER} HTTP method is used for non standard methods, when this method",
                "- * is used, {@link io.vertx.core.http.HttpClientRequest#setRawMethod(java.lang.String)} must be used to",
                "- * set the raw method to send to the server.",
                "- *",
                "- * ==== Ending HTTP requests",
                "- *",
                "- * Once you have finished with the HTTP request you must end it with one of the {@link io.vertx.core.http.HttpClientRequest#end}",
                "- * operations.",
                "- *",
                "- * Ending a request causes any headers to be written, if they have not already been written and the request to be marked",
                "- * as complete.",
                "- *",
                "- * Requests can be ended in several ways. With no arguments the request is simply ended:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example39}",
                "- * ----",
                "- *",
                "- * Or a string or buffer can be provided in the call to `end`. This is like calling `write` with the string or buffer",
                "- * before calling `end` with no arguments",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example40}",
                "- * ----",
                "- *",
                "- * ==== Chunked HTTP requests",
                "- *",
                "- * Vert.x supports http://en.wikipedia.org/wiki/Chunked_transfer_encoding[HTTP Chunked Transfer Encoding] for requests.",
                "- *",
                "- * This allows the HTTP request body to be written in chunks, and is normally used when a large request body is being streamed",
                "- * to the server, whose size is not known in advance.",
                "- *",
                "- * You put the HTTP request into chunked mode using {@link io.vertx.core.http.HttpClientRequest#setChunked(boolean)}.",
                "- *",
                "- * In chunked mode each call to write will cause a new chunk to be written to the wire. In chunked mode there is",
                "- * no need to set the `Content-Length` of the request up-front.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example41}",
                "- * ----",
                "- *",
                "- * ==== Request timeouts",
                "- *",
                "- * You can set a timeout for a specific http request using {@link io.vertx.core.http.HttpClientRequest#setTimeout(long)}.",
                "- *",
                "- * If the request does not return any data within the timeout period an exception will be passed to the exception handler",
                "- * (if provided) and the request will be closed.",
                "- *",
                "- * ==== Handling exceptions",
                "- *",
                "- * You can handle exceptions corresponding to a request by setting an exception handler on the",
                "- * {@link io.vertx.core.http.HttpClientRequest} instance:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example42}",
                "- * ----",
                "- *",
                "- * This does not handle non _2xx_ response that need to be handled in the",
                "- * {@link io.vertx.core.http.HttpClientResponse} code:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#statusCodeHandling}",
                "- * ----",
                "- *",
                "- * IMPORTANT: `XXXNow` methods cannot receive an exception handler.",
                "- *",
                "- * ==== Specifying a handler on the client request",
                "- *",
                "- * Instead of providing a response handler in the call to create the client request object, alternatively, you can",
                "- * not provide a handler when the request is created and set it later on the request object itself, using",
                "- * {@link io.vertx.core.http.HttpClientRequest#handler(io.vertx.core.Handler)}, for example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example43}",
                "- * ----",
                "- *",
                "- * ==== Using the request as a stream",
                "- *",
                "- * The {@link io.vertx.core.http.HttpClientRequest} instance is also a {@link io.vertx.core.streams.WriteStream} which means",
                "- * you can pump to it from any {@link io.vertx.core.streams.ReadStream} instance.",
                "- *",
                "- * For, example, you could pump a file on disk to a http request body as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example44}",
                "- * ----",
                "- *",
                "- * ==== Writing HTTP/2 frames",
                "- *",
                "- * HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "- * of frames to be sent and received.",
                "- *",
                "- * To send such frames, you can use the {@link io.vertx.core.http.HttpClientRequest#write} on the request. Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example9}",
                "- * ----",
                "- *",
                "- * ==== Stream reset",
                "- *",
                "- * HTTP/1.x does not allow a clean reset of a request or a response stream, for example when a client uploads a resource already",
                "- * present on the server, the server needs to accept the entire response.",
                "- *",
                "- * HTTP/2 supports stream reset at any time during the request/response:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example10}",
                "- * ----",
                "- *",
                "- * By default the NO_ERROR (0) error code is sent, another code can sent instead:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example11}",
                "- * ----",
                "- *",
                "- * The HTTP/2 specification defines the list of http://httpwg.org/specs/rfc7540.html#ErrorCodes[error codes] one can use.",
                "- *",
                "- * The request handler are notified of stream reset events with the {@link io.vertx.core.http.HttpClientRequest#exceptionHandler request handler} and",
                "- * {@link io.vertx.core.http.HttpClientResponse#exceptionHandler response handler}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example12}",
                "- * ----",
                "- *",
                "- * === Handling HTTP responses",
                "- *",
                "- * You receive an instance of {@link io.vertx.core.http.HttpClientResponse} into the handler that you specify in of",
                "- * the request methods or by setting a handler directly on the {@link io.vertx.core.http.HttpClientRequest} object.",
                "- *",
                "- * You can query the status code and the status message of the response with {@link io.vertx.core.http.HttpClientResponse#statusCode}",
                "- * and {@link io.vertx.core.http.HttpClientResponse#statusMessage}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example45}",
                "- * ----",
                "- *",
                "- * ==== Using the response as a stream",
                "- *",
                "- * The {@link io.vertx.core.http.HttpClientResponse} instance is also a {@link io.vertx.core.streams.ReadStream} which means",
                "- * you can pump it to any {@link io.vertx.core.streams.WriteStream} instance.",
                "- *",
                "- * ==== Response headers and trailers",
                "- *",
                "- * Http responses can contain headers. Use {@link io.vertx.core.http.HttpClientResponse#headers} to get the headers.",
                "- *",
                "- * The object returned is a {@link io.vertx.core.MultiMap} as HTTP headers can contain multiple values for single keys.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example46}",
                "- * ----",
                "- *",
                "- * Chunked HTTP responses can also contain trailers - these are sent in the last chunk of the response body.",
                "- *",
                "- * You use {@link io.vertx.core.http.HttpClientResponse#trailers} to get the trailers. Trailers are also a {@link io.vertx.core.MultiMap}.",
                "- *",
                "- * ==== Reading the request body",
                "- *",
                "- * The response handler is called when the headers of the response have been read from the wire.",
                "- *",
                "- * If the response has a body this might arrive in several pieces some time after the headers have been read. We",
                "- * don't wait for all the body to arrive before calling the response handler as the response could be very large and we",
                "- * might be waiting a long time, or run out of memory for large responses.",
                "- *",
                "- * As parts of the response body arrive, the {@link io.vertx.core.http.HttpClientResponse#handler} is called with",
                "- * a {@link io.vertx.core.buffer.Buffer} representing the piece of the body:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example47}",
                "- * ----",
                "- *",
                "- * If you know the response body is not very large and want to aggregate it all in memory before handling it, you can",
                "- * either aggregate it yourself:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example48}",
                "- * ----",
                "- *",
                "- * Or you can use the convenience {@link io.vertx.core.http.HttpClientResponse#bodyHandler(io.vertx.core.Handler)} which",
                "- * is called with the entire body when the response has been fully read:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example49}",
                "- * ----",
                "- *",
                "- * ==== Response end handler",
                "- *",
                "- * The response {@link io.vertx.core.http.HttpClientResponse#endHandler} is called when the entire response body has been read",
                "- * or immediately after the headers have been read and the response handler has been called if there is no body.",
                "- *",
                "- * ==== Reading cookies from the response",
                "- *",
                "- * You can retrieve the list of cookies from a response using {@link io.vertx.core.http.HttpClientResponse#cookies()}.",
                "- *",
                "- * Alternatively you can just parse the `Set-Cookie` headers yourself in the response.",
                "- *",
                "- * ==== 30x redirection handling",
                "- *",
                "- * The client can be configured to follow HTTP redirections: when the client receives an",
                "- * `301`, `302`, `303` or `307` status code, it follows the redirection provided by the `Location` response header",
                "- * and the response handler is passed the redirected response instead of the original response.",
                "- *",
                "- * Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#exampleFollowRedirect01}",
                "- * ----",
                "- *",
                "- * The redirection policy is as follow",
                "- *",
                "- * * on a `301`, `302` or `303` status code, follow the redirection with a `GET` method",
                "- * * on a `307` status code, follow the redirection with the same HTTP method and the cached body",
                "- *",
                "- * WARNING: following redirections caches the request body",
                "- *",
                "- * The maximum redirects is `16` by default and can be changed with {@link io.vertx.core.http.HttpClientOptions#setMaxRedirects(int)}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#exampleFollowRedirect02}",
                "- * ----",
                "- *",
                "- * One size does not fit all and the default redirection policy may not be adapted to your needs.",
                "- *",
                "- * The default redirection policy can changed with a custom implementation:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#exampleFollowRedirect03}",
                "- * ----",
                "- *",
                "- * The policy handles the original {@link io.vertx.core.http.HttpClientResponse} received and returns either `null`",
                "- * or a `Future<HttpClientRequest>`.",
                "- *",
                "- * - when `null` is returned, the original response is processed",
                "- * - when a future is returned, the request will be sent on its successful completion",
                "- * - when a future is returned, the exception handler set on the request is called on its failure",
                "- *",
                "- * The returned request must be unsent so the original request handlers can be sent and the client can send it after.",
                "- *",
                "- * Most of the original request settings will be propagated to the new request:",
                "- *",
                "- * * request headers, unless if you have set some headers (including {@link io.vertx.core.http.HttpClientRequest#setHost})",
                "- * * request body unless the returned request uses a `GET` method",
                "- * * response handler",
                "- * * request exception handler",
                "- * * request timeout",
                "- *",
                "- * ==== 100-Continue handling",
                "- *",
                "- * According to the http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html[HTTP 1.1 specification] a client can set a",
                "- * header `Expect: 100-Continue` and send the request header before sending the rest of the request body.",
                "- *",
                "- * The server can then respond with an interim response status `Status: 100 (Continue)` to signify to the client that",
                "- * it is ok to send the rest of the body.",
                "- *",
                "- * The idea here is it allows the server to authorise and accept/reject the request before large amounts of data are sent.",
                "- * Sending large amounts of data if the request might not be accepted is a waste of bandwidth and ties up the server",
                "- * in reading data that it will just discard.",
                "- *",
                "- * Vert.x allows you to set a {@link io.vertx.core.http.HttpClientRequest#continueHandler(io.vertx.core.Handler)} on the",
                "- * client request object",
                "- *",
                "- * This will be called if the server sends back a `Status: 100 (Continue)` response to signify that it is ok to send",
                "- * the rest of the request.",
                "- *",
                "- * This is used in conjunction with {@link io.vertx.core.http.HttpClientRequest#sendHead()}to send the head of the request.",
                "- *",
                "- * Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example50}",
                "- * ----",
                "- *",
                "- * On the server side a Vert.x http server can be configured to automatically send back 100 Continue interim responses",
                "- * when it receives an `Expect: 100-Continue` header.",
                "- *",
                "- * This is done by setting the option {@link io.vertx.core.http.HttpServerOptions#setHandle100ContinueAutomatically(boolean)}.",
                "- *",
                "- * If you'd prefer to decide whether to send back continue responses manually, then this property should be set to",
                "- * `false` (the default), then you can inspect the headers and call {@link io.vertx.core.http.HttpServerResponse#writeContinue()}",
                "- * to have the client continue sending the body:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example50_1}",
                "- * ----",
                "- *",
                "- * You can also reject the request by sending back a failure status code directly: in this case the body",
                "- * should either be ignored or the connection should be closed (100-Continue is a performance hint and",
                "- * cannot be a logical protocol constraint):",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example50_2}",
                "- * ----",
                "- *",
                "- * ==== Client push",
                "- *",
                "- * Server push is a new feature of HTTP/2 that enables sending multiple responses in parallel for a single client request.",
                "- *",
                "- * A push handler can be set on a request to receive the request/response pushed by the server:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example13}",
                "- * ----",
                "- *",
                "- * If the client does not want to receive a pushed request, it can reset the stream:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example14}",
                "- * ----",
                "- *",
                "- * When no handler is set, any stream pushed will be automatically cancelled by the client with",
                "- * a stream reset (`8` error code).",
                "- *",
                "- * ==== Receiving custom HTTP/2 frames",
                "- *",
                "- * HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind of",
                "- * frames to be sent and received.",
                "- *",
                "- * To receive custom frames, you can use the customFrameHandler on the request, this will get called every time a custom",
                "- * frame arrives. Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example15}",
                "- * ----",
                "- *",
                "- * === Enabling compression on the client",
                "- *",
                "- * The http client comes with support for HTTP Compression out of the box.",
                "- *",
                "- * This means the client can let the remote http server know that it supports compression, and will be able to handle",
                "- * compressed response bodies.",
                "- *",
                "- * An http server is free to either compress with one of the supported compression algorithms or to send the body back",
                "- * without compressing it at all. So this is only a hint for the Http server which it may ignore at will.",
                "- *",
                "- * To tell the http server which compression is supported by the client it will include an `Accept-Encoding` header with",
                "- * the supported compression algorithm as value. Multiple compression algorithms are supported. In case of Vert.x this",
                "- * will result in the following header added:",
                "- *",
                "- *  Accept-Encoding: gzip, deflate",
                "- *",
                "- * The server will choose then from one of these. You can detect if a server ompressed the body by checking for the",
                "- * `Content-Encoding` header in the response sent back from it.",
                "- *",
                "- * If the body of the response was compressed via gzip it will include for example the following header:",
                "- *",
                "- *  Content-Encoding: gzip",
                "- *",
                "- * To enable compression set {@link io.vertx.core.http.HttpClientOptions#setTryUseCompression(boolean)} on the options",
                "- * used when creating the client.",
                "- *",
                "- * By default compression is disabled.",
                "- *",
                "- * === HTTP/1.x pooling and keep alive",
                "- *",
                "- * Http keep alive allows http connections to be used for more than one request. This can be a more efficient use of",
                "- * connections when you're making multiple requests to the same server.",
                "- *",
                "- * For HTTP/1.x versions, the http client supports pooling of connections, allowing you to reuse connections between requests.",
                "- *",
                "- * For pooling to work, keep alive must be true using {@link io.vertx.core.http.HttpClientOptions#setKeepAlive(boolean)}",
                "- * on the options used when configuring the client. The default value is true.",
                "- *",
                "- * When keep alive is enabled. Vert.x will add a `Connection: Keep-Alive` header to each HTTP/1.0 request sent.",
                "- * When keep alive is disabled. Vert.x will add a `Connection: Close` header to each HTTP/1.1 request sent to signal",
                "- * that the connection will be closed after completion of the response.",
                "- *",
                "- * The maximum number of connections to pool *for each server* is configured using {@link io.vertx.core.http.HttpClientOptions#setMaxPoolSize(int)}",
                "- *",
                "- * When making a request with pooling enabled, Vert.x will create a new connection if there are less than the maximum number of",
                "- * connections already created for that server, otherwise it will add the request to a queue.",
                "- *",
                "- * Keep alive connections will not be closed by the client automatically. To close them you can close the client instance.",
                "- *",
                "- * Alternatively you can set idle timeout using {@link io.vertx.core.http.HttpClientOptions#setIdleTimeout(int)} - any",
                "- * connections not used within this timeout will be closed. Please note the idle timeout value is in seconds not milliseconds.",
                "- *",
                "- * === HTTP/1.1 pipe-lining",
                "- *",
                "- * The client also supports pipe-lining of requests on a connection.",
                "- *",
                "- * Pipe-lining means another request is sent on the same connection before the response from the preceding one has",
                "- * returned. Pipe-lining is not appropriate for all requests.",
                "- *",
                "- * To enable pipe-lining, it must be enabled using {@link io.vertx.core.http.HttpClientOptions#setPipelining(boolean)}.",
                "- * By default pipe-lining is disabled.",
                "- *",
                "- * When pipe-lining is enabled requests will be written to connections without waiting for previous responses to return.",
                "- *",
                "- * The number of pipe-lined requests over a single connection is limited by {@link io.vertx.core.http.HttpClientOptions#setPipeliningLimit}.",
                "- * This option defines the maximum number of http requests sent to the server awaiting for a response. This limit ensures the",
                "- * fairness of the distribution of the client requests over the connections to the same server.",
                "- *",
                "- * === HTTP/2 multiplexing",
                "- *",
                "- * HTTP/2 advocates to use a single connection to a server, by default the http client uses a single",
                "- * connection for each server, all the streams to the same server are multiplexed over the same connection.",
                "- *",
                "- * When the clients needs to use more than a single connection and use pooling, the {@link io.vertx.core.http.HttpClientOptions#setHttp2MaxPoolSize(int)}",
                "- * shall be used.",
                "- *",
                "- * When it is desirable to limit the number of multiplexed streams per connection and use a connection",
                "- * pool instead of a single connection, {@link io.vertx.core.http.HttpClientOptions#setHttp2MultiplexingLimit(int)}",
                "- * can be used.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#useMaxStreams}",
                "- * ----",
                "- *",
                "- * The multiplexing limit for a connection is a setting set on the client that limits the number of streams",
                "- * of a single connection. The effective value can be even lower if the server sets a lower limit",
                "- * with the {@link io.vertx.core.http.Http2Settings#setMaxConcurrentStreams SETTINGS_MAX_CONCURRENT_STREAMS} setting.",
                "- *",
                "- * HTTP/2 connections will not be closed by the client automatically. To close them you can call {@link io.vertx.core.http.HttpConnection#close()}",
                "- * or close the client instance.",
                "- *",
                "- * Alternatively you can set idle timeout using {@link io.vertx.core.http.HttpClientOptions#setIdleTimeout(int)} - any",
                "- * connections not used within this timeout will be closed. Please note the idle timeout value is in seconds not milliseconds.",
                "- *",
                "- * === HTTP connections",
                "- *",
                "- * The {@link io.vertx.core.http.HttpConnection} offers the API for dealing with HTTP connection events, lifecycle",
                "- * and settings.",
                "- *",
                "- * HTTP/2 implements fully the {@link io.vertx.core.http.HttpConnection} API.",
                "- *",
                "- * HTTP/1.x implements partially the {@link io.vertx.core.http.HttpConnection} API: only the close operation,",
                "- * the close handler and exception handler are implemented. This protocol does not provide semantics for",
                "- * the other operations.",
                "- *",
                "- * ==== Server connections",
                "- *",
                "- * The {@link io.vertx.core.http.HttpServerRequest#connection()} method returns the request connection on the server:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example16}",
                "- * ----",
                "- *",
                "- * A connection handler can be set on the server to be notified of any incoming connection:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example17}",
                "- * ----",
                "- *",
                "- * ==== Client connections",
                "- *",
                "- * The {@link io.vertx.core.http.HttpClientRequest#connection()} method returns the request connection on the client:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example18}",
                "- * ----",
                "- *",
                "- * A connection handler can be set on the request to be notified when the connection happens:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example19}",
                "- * ----",
                "- *",
                "- * ==== Connection settings",
                "- *",
                "- * The configuration of an HTTP/2 is configured by the {@link io.vertx.core.http.Http2Settings} data object.",
                "- *",
                "- * Each endpoint must respect the settings sent by the other side of the connection.",
                "- *",
                "- * When a connection is established, the client and the server exchange initial settings. Initial settings",
                "- * are configured by {@link io.vertx.core.http.HttpClientOptions#setInitialSettings} on the client and",
                "- * {@link io.vertx.core.http.HttpServerOptions#setInitialSettings} on the server.",
                "- *",
                "- * The settings can be changed at any time after the connection is established:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example20}",
                "- * ----",
                "- *",
                "- * As the remote side should acknowledge on reception of the settings update, it's possible to give a callback",
                "- * to be notified of the acknowledgment:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example21}",
                "- * ----",
                "- *",
                "- * Conversely the {@link io.vertx.core.http.HttpConnection#remoteSettingsHandler(io.vertx.core.Handler)} is notified",
                "- * when the new remote settings are received:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example22}",
                "- * ----",
                "- *",
                "- * NOTE: this only applies to the HTTP/2 protocol",
                "- *",
                "- * ==== Connection ping",
                "- *",
                "- * HTTP/2 connection ping is useful for determining the connection round-trip time or check the connection",
                "- * validity: {@link io.vertx.core.http.HttpConnection#ping} sends a {@literal PING} frame to the remote",
                "- * endpoint:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example23}",
                "- * ----",
                "- *",
                "- * Vert.x will send automatically an acknowledgement when a {@literal PING} frame is received,",
                "- * an handler can be set to be notified for each ping received:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example24}",
                "- * ----",
                "- *",
                "- * The handler is just notified, the acknowledgement is sent whatsoever. Such feature is aimed for",
                "- * implementing  protocols on top of HTTP/2.",
                "- *",
                "- * NOTE: this only applies to the HTTP/2 protocol",
                "- *",
                "- * ==== Connection shutdown and go away",
                "- *",
                "- * Calling {@link io.vertx.core.http.HttpConnection#shutdown()} will send a {@literal GOAWAY} frame to the",
                "- * remote side of the connection, asking it to stop creating streams: a client will stop doing new requests",
                "- * and a server will stop pushing responses. After the {@literal GOAWAY} frame is sent, the connection",
                "- * waits some time (30 seconds by default) until all current streams closed and close the connection:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example25}",
                "- * ----",
                "- *",
                "- * The {@link io.vertx.core.http.HttpConnection#shutdownHandler} notifies when all streams have been closed, the",
                "- * connection is not yet closed.",
                "- *",
                "- * It's possible to just send a {@literal GOAWAY} frame, the main difference with a shutdown is that",
                "- * it will just tell the remote side of the connection to stop creating new streams without scheduling a connection",
                "- * close:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example26}",
                "- * ----",
                "- *",
                "- * Conversely, it is also possible to be notified when {@literal GOAWAY} are received:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example27}",
                "- * ----",
                "- *",
                "- * The {@link io.vertx.core.http.HttpConnection#shutdownHandler} will be called when all current streams",
                "- * have been closed and the connection can be closed:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTP2Examples#example28}",
                "- * ----",
                "- *",
                "- * This applies also when a {@literal GOAWAY} is received.",
                "- *",
                "- * NOTE: this only applies to the HTTP/2 protocol",
                "- *",
                "- * ==== Connection close",
                "- *",
                "- * Connection {@link io.vertx.core.http.HttpConnection#close} closes the connection:",
                "- *",
                "- * - it closes the socket for HTTP/1.x",
                "- * - a shutdown with no delay for HTTP/2, the {@literal GOAWAY} frame will still be sent before the connection is closed. *",
                "- *",
                "- * The {@link io.vertx.core.http.HttpConnection#closeHandler} notifies when a connection is closed.",
                "- *",
                "- * === HttpClient usage",
                "- *",
                "- * The HttpClient can be used in a Verticle or embedded.",
                "- *",
                "- * When used in a Verticle, the Verticle *should use its own client instance*.",
                "- *",
                "- * More generally a client should not be shared between different Vert.x contexts as it can lead to unexpected behavior.",
                "- *",
                "- * For example a keep-alive connection will call the client handlers on the context of the request that opened the connection, subsequent requests will use",
                "- * the same context.",
                "- *",
                "- * When this happen Vert.x detects it and log a warn:",
                "- *",
                "- * ----",
                "- * Reusing a connection with a different context: an HttpClient is probably shared between different Verticles",
                "- * ----",
                "- *",
                "- * The HttpClient can be embedded in a non Vert.x thread like a unit test or a plain java `main`: the client handlers",
                "- * will be called by different Vert.x threads and contexts, such contexts are created as needed. For production this",
                "- * usage is not recommended.",
                "- *",
                "- * === Server sharing",
                "- *",
                "- * When several HTTP servers listen on the same port, vert.x orchestrates the request handling using a",
                "- * round-robin strategy.",
                "- *",
                "- * Let's take a verticle creating a HTTP server such as:",
                "- *",
                "- * .io.vertx.examples.http.sharing.HttpServerVerticle",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#serversharing(io.vertx.core.Vertx)}",
                "- * ----",
                "- *",
                "- * This service is listening on the port 8080. So, when this verticle is instantiated multiple times as with:",
                "- * `vertx run io.vertx.examples.http.sharing.HttpServerVerticle -instances 2`, what's happening ? If both",
                "- * verticles would bind to the same port, you would receive a socket exception. Fortunately, vert.x is handling",
                "- * this case for you. When you deploy another server on the same host and port as an existing server it doesn't",
                "- * actually try and create a new server listening on the same host/port. It binds only once to the socket. When",
                "- * receiving a request it calls the server handlers following a round robin strategy.",
                "- *",
                "- * Let's now imagine a client such as:",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#serversharingclient(io.vertx.core.Vertx)}",
                "- * ----",
                "- *",
                "- * Vert.x delegates the requests to one of the server sequentially:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * Hello from i.v.e.h.s.HttpServerVerticle@1",
                "- * Hello from i.v.e.h.s.HttpServerVerticle@2",
                "- * Hello from i.v.e.h.s.HttpServerVerticle@1",
                "- * Hello from i.v.e.h.s.HttpServerVerticle@2",
                "- * ...",
                "- * ----",
                "- *",
                "- * Consequently the servers can scale over available cores while each Vert.x verticle instance remains strictly",
                "- * single threaded, and you don't have to do any special tricks like writing load-balancers in order to scale your",
                "- * server on your multi-core machine.",
                "- *",
                "- * === Using HTTPS with Vert.x",
                "- *",
                "- * Vert.x http servers and clients can be configured to use HTTPS in exactly the same way as net servers.",
                "- *",
                "- * Please see <<ssl, configuring net servers to use SSL>> for more information.",
                "- *",
                "- * SSL can also be enabled/disabled per request with {@link io.vertx.core.http.RequestOptions} or when",
                "- * specifying a scheme with {@link io.vertx.core.http.HttpClient#requestAbs(io.vertx.core.http.HttpMethod, java.lang.String)}",
                "- * method.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#setSSLPerRequest(io.vertx.core.http.HttpClient)}",
                "- * ----",
                "- *",
                "- * The {@link io.vertx.core.http.HttpClientOptions#setSsl(boolean)} setting acts as the default client setting.",
                "- *",
                "- * The {@link io.vertx.core.http.RequestOptions#setSsl(boolean)} overrides the default client setting",
                "- *",
                "- * * setting the value to `false` will disable SSL/TLS even if the client is configured to use SSL/TLS",
                "- * * setting the value to `true` will enable SSL/TLS  even if the client is configured to not use SSL/TLS, the actual",
                "- * client SSL/TLS (such as trust, key/certificate, ciphers, ALPN, ...) will be reused",
                "- *",
                "- * Likewise {@link io.vertx.core.http.HttpClient#requestAbs(io.vertx.core.http.HttpMethod, java.lang.String)} scheme",
                "- * also overrides the default client setting.",
                "- *",
                "- * ==== Server Name Indication (SNI)",
                "- *",
                "- * Vert.x http servers can be configured to use SNI in exactly the same way as {@linkplain io.vertx.core.net net servers}.",
                "- *",
                "- * Vert.x http client will present the actual hostname as _server name_ during the TLS handshake.",
                "- *",
                "- * === WebSockets",
                "- *",
                "- * http://en.wikipedia.org/wiki/WebSocket[WebSockets] are a web technology that allows a full duplex socket-like",
                "- * connection between HTTP servers and HTTP clients (typically browsers).",
                "- *",
                "- * Vert.x supports WebSockets on both the client and server-side.",
                "- *",
                "- * ==== WebSockets on the server",
                "- *",
                "- * There are two ways of handling WebSockets on the server side.",
                "- *",
                "- * ===== WebSocket handler",
                "- *",
                "- * The first way involves providing a {@link io.vertx.core.http.HttpServer#websocketHandler(io.vertx.core.Handler)}",
                "- * on the server instance.",
                "- *",
                "- * When a WebSocket connection is made to the server, the handler will be called, passing in an instance of",
                "- * {@link io.vertx.core.http.ServerWebSocket}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example51}",
                "- * ----",
                "- *",
                "- * You can choose to reject the WebSocket by calling {@link io.vertx.core.http.ServerWebSocket#reject()}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example52}",
                "- * ----",
                "- *",
                "- * ===== Upgrading to WebSocket",
                "- *",
                "- * The second way of handling WebSockets is to handle the HTTP Upgrade request that was sent from the client, and",
                "- * call {@link io.vertx.core.http.HttpServerRequest#upgrade()} on the server request.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example53}",
                "- * ----",
                "- *",
                "- * ===== The server WebSocket",
                "- *",
                "- * The {@link io.vertx.core.http.ServerWebSocket} instance enables you to retrieve the {@link io.vertx.core.http.ServerWebSocket#headers() headers},",
                "- * {@link io.vertx.core.http.ServerWebSocket#path() path}, {@link io.vertx.core.http.ServerWebSocket#query() query} and",
                "- * {@link io.vertx.core.http.ServerWebSocket#uri() URI} of the HTTP request of the WebSocket handshake.",
                "- *",
                "- * ==== WebSockets on the client",
                "- *",
                "- * The Vert.x {@link io.vertx.core.http.HttpClient} supports WebSockets.",
                "- *",
                "- * You can connect a WebSocket to a server using one of the {@link io.vertx.core.http.HttpClient#websocket} operations and",
                "- * providing a handler.",
                "- *",
                "- * The handler will be called with an instance of {@link io.vertx.core.http.WebSocket} when the connection has been made:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example54}",
                "- * ----",
                "- *",
                "- * ==== Writing messages to WebSockets",
                "- *",
                "- * If you wish to write a single WebSocket message to the WebSocket you can do this with",
                "- * {@link io.vertx.core.http.WebSocket#writeBinaryMessage(io.vertx.core.buffer.Buffer)} or",
                "- * {@link io.vertx.core.http.WebSocket#writeTextMessage(java.lang.String)} :",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example55}",
                "- * ----",
                "- *",
                "- * If the WebSocket message is larger than the maximum websocket frame size as configured with",
                "- * {@link io.vertx.core.http.HttpClientOptions#setMaxWebsocketFrameSize(int)}",
                "- * then Vert.x will split it into multiple WebSocket frames before sending it on the wire.",
                "- *",
                "- * ==== Writing frames to WebSockets",
                "- *",
                "- * A WebSocket message can be composed of multiple frames. In this case the first frame is either a _binary_ or _text_ frame",
                "- * followed by zero or more _continuation_ frames.",
                "- *",
                "- * The last frame in the message is marked as _final_.",
                "- *",
                "- * To send a message consisting of multiple frames you create frames using",
                "- * {@link io.vertx.core.http.WebSocketFrame#binaryFrame(io.vertx.core.buffer.Buffer, boolean)}",
                "- * , {@link io.vertx.core.http.WebSocketFrame#textFrame(java.lang.String, boolean)} or",
                "- * {@link io.vertx.core.http.WebSocketFrame#continuationFrame(io.vertx.core.buffer.Buffer, boolean)} and write them",
                "- * to the WebSocket using {@link io.vertx.core.http.WebSocket#writeFrame(io.vertx.core.http.WebSocketFrame)}.",
                "- *",
                "- * Here's an example for binary frames:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example56}",
                "- * ----",
                "- *",
                "- * In many cases you just want to send a websocket message that consists of a single final frame, so we provide a couple",
                "- * of shortcut methods to do that with {@link io.vertx.core.http.WebSocket#writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)}",
                "- * and {@link io.vertx.core.http.WebSocket#writeFinalTextFrame(String)}.",
                "- *",
                "- * Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example56_1}",
                "- * ----",
                "- *",
                "- * ==== Reading frames from WebSockets",
                "- *",
                "- * To read frames from a WebSocket you use the {@link io.vertx.core.http.WebSocket#frameHandler(io.vertx.core.Handler)}.",
                "- *",
                "- * The frame handler will be called with instances of {@link io.vertx.core.http.WebSocketFrame} when a frame arrives,",
                "- * for example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example57}",
                "- * ----",
                "- *",
                "- * ==== Closing WebSockets",
                "- *",
                "- * Use {@link io.vertx.core.http.WebSocket#close()} to close the WebSocket connection when you have finished with it.",
                "- *",
                "- * ==== Streaming WebSockets",
                "- *",
                "- * The {@link io.vertx.core.http.WebSocket} instance is also a {@link io.vertx.core.streams.ReadStream} and a",
                "- * {@link io.vertx.core.streams.WriteStream} so it can be used with pumps.",
                "- *",
                "- * When using a WebSocket as a write stream or a read stream it can only be used with WebSockets connections that are",
                "- * used with binary frames that are no split over multiple frames.",
                "- *",
                "- * === Using a proxy for HTTP/HTTPS connections",
                "- *",
                "- * The http client supports accessing http/https URLs via a HTTP proxy (e.g. Squid) or _SOCKS4a_ or _SOCKS5_ proxy.",
                "- * The CONNECT protocol uses HTTP/1.x but can connect to HTTP/1.x and HTTP/2 servers.",
                "- *",
                "- * Connecting to h2c (unencrypted HTTP/2 servers) is likely not supported by http proxies since they will support",
                "- * HTTP/1.1 only.",
                "- *",
                "- * The proxy can be configured in the {@link io.vertx.core.http.HttpClientOptions} by setting a",
                "- * {@link io.vertx.core.net.ProxyOptions} object containing proxy type, hostname, port and optionally username and password.",
                "- *",
                "- * Here's an example of using an HTTP proxy:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example58}",
                "- * ----",
                "- *",
                "- * When the client connects to an http URL, it connects to the proxy server and provides the full URL in the",
                "- * HTTP request (\"GET http://www.somehost.com/path/file.html HTTP/1.1\").",
                "- *",
                "- * When the client connects to an https URL, it asks the proxy to create a tunnel to the remote host with",
                "- * the CONNECT method.",
                "- *",
                "- * For a SOCKS5 proxy:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example59}",
                "- * ----",
                "- *",
                "- * The DNS resolution is always done on the proxy server, to achieve the functionality of a SOCKS4 client, it is necessary",
                "- * to resolve the DNS address locally.",
                "- *",
                "- * ==== Handling of other protocols",
                "- *",
                "- * The HTTP proxy implementation supports getting ftp:// urls if the proxy supports",
                "- * that, which isn't available in non-proxy getAbs requests.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.HTTPExamples#example60}",
                "- * ----",
                "- *",
                "- * Support for other protocols is not available since java.net.URL does not",
                "- * support them (gopher:// for example).",
                "- *",
                "- * === Automatic clean-up in verticles",
                "- *",
                "- * If you're creating http servers and clients from inside verticles, those servers and clients will be automatically closed",
                "- * when the verticle is undeployed.",
                "- *",
                "- */",
                " package io.vertx.core.http;",
                "diff --git a/src/main/java/io/vertx/core/net/package-info.java b/src/main/java/io/vertx/core/net/package-info.java",
                "index dadce982e..7d7f7df00 100644",
                "--- a/src/main/java/io/vertx/core/net/package-info.java",
                "+++ b/src/main/java/io/vertx/core/net/package-info.java",
                "@@ -11,772 +11,2 @@",
                "-/**",
                "- * == Writing TCP servers and clients",
                "- *",
                "- * Vert.x allows you to easily write non blocking TCP clients and servers.",
                "- *",
                "- * === Creating a TCP server",
                "- *",
                "- * The simplest way to create a TCP server, using all default options is as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example1}",
                "- * ----",
                "- *",
                "- * === Configuring a TCP server",
                "- *",
                "- * If you don't want the default, a server can be configured by passing in a {@link io.vertx.core.net.NetServerOptions}",
                "- * instance when creating it:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example2}",
                "- * ----",
                "- *",
                "- * === Start the Server Listening",
                "- *",
                "- * To tell the server to listen for incoming requests you use one of the {@link io.vertx.core.net.NetServer#listen}",
                "- * alternatives.",
                "- *",
                "- * To tell the server to listen at the host and port as specified in the options:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example3}",
                "- * ----",
                "- *",
                "- * Or to specify the host and port in the call to listen, ignoring what is configured in the options:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example4}",
                "- * ----",
                "- *",
                "- * The default host is `0.0.0.0` which means 'listen on all available addresses' and the default port is `0`, which is a",
                "- * special value that instructs the server to find a random unused local port and use that.",
                "- *",
                "- * The actual bind is asynchronous so the server might not actually be listening until some time *after* the call to",
                "- * listen has returned.",
                "- *",
                "- * If you want to be notified when the server is actually listening you can provide a handler to the `listen` call.",
                "- * For example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example5}",
                "- * ----",
                "- *",
                "- * === Listening on a random port",
                "- *",
                "- * If `0` is used as the listening port, the server will find an unused random port to listen on.",
                "- *",
                "- * To find out the real port the server is listening on you can call {@link io.vertx.core.net.NetServer#actualPort()}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example5_1}",
                "- * ----",
                "- *",
                "- * === Getting notified of incoming connections",
                "- *",
                "- * To be notified when a connection is made you need to set a {@link io.vertx.core.net.NetServer#connectHandler(io.vertx.core.Handler)}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example6}",
                "- * ----",
                "- *",
                "- * When a connection is made the handler will be called with an instance of {@link io.vertx.core.net.NetSocket}.",
                "- *",
                "- * This is a socket-like interface to the actual connection, and allows you to read and write data as well as do various",
                "- * other things like close the socket.",
                "- *",
                "- * === Reading data from the socket",
                "- *",
                "- * To read data from the socket you set the {@link io.vertx.core.net.NetSocket#handler(io.vertx.core.Handler)} on the",
                "- * socket.",
                "- *",
                "- * This handler will be called with an instance of {@link io.vertx.core.buffer.Buffer} every time data is received on",
                "- * the socket.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example7}",
                "- * ----",
                "- *",
                "- * === Writing data to a socket",
                "- *",
                "- * You write to a socket using one of {@link io.vertx.core.net.NetSocket#write}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example8}",
                "- * ----",
                "- *",
                "- * Write operations are asynchronous and may not occur until some time after the call to write has returned.",
                "- *",
                "- * === Closed handler",
                "- *",
                "- * If you want to be notified when a socket is closed, you can set a {@link io.vertx.core.net.NetSocket#closeHandler(io.vertx.core.Handler)}",
                "- * on it:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example9_1}",
                "- * ----",
                "- *",
                "- * === Handling exceptions",
                "- *",
                "- * You can set an {@link io.vertx.core.net.NetSocket#exceptionHandler(io.vertx.core.Handler)} to receive any",
                "- * exceptions that happen on the socket.",
                "- *",
                "- * You can set an {@link io.vertx.core.net.NetServer#exceptionHandler(io.vertx.core.Handler)} to receive any",
                "- * exceptions that happens before the connection is passed to the {@link io.vertx.core.net.NetServer#connectHandler(io.vertx.core.Handler)}",
                "- * , e.g during the TLS handshake.",
                "- *",
                "- * === Event bus write handler",
                "- *",
                "- * Every socket automatically registers a handler on the event bus, and when any buffers are received in this handler,",
                "- * it writes them to itself.",
                "- *",
                "- * This enables you to write data to a socket which is potentially in a completely different verticle or even in a",
                "- * different Vert.x instance by sending the buffer to the address of that handler.",
                "- *",
                "- * The address of the handler is given by {@link io.vertx.core.net.NetSocket#writeHandlerID()}",
                "- *",
                "- * === Local and remote addresses",
                "- *",
                "- * The local address of a {@link io.vertx.core.net.NetSocket} can be retrieved using {@link io.vertx.core.net.NetSocket#localAddress()}.",
                "- *",
                "- * The remote address, (i.e. the address of the other end of the connection) of a {@link io.vertx.core.net.NetSocket}",
                "- * can be retrieved using {@link io.vertx.core.net.NetSocket#remoteAddress()}.",
                "- *",
                "- * === Sending files or resources from the classpath",
                "- *",
                "- * Files and classpath resources can be written to the socket directly using {@link io.vertx.core.net.NetSocket#sendFile}. This can be a very",
                "- * efficient way to send files, as it can be handled by the OS kernel directly where supported by the operating system.",
                "- *",
                "- * Please see the chapter about <<classpath, serving files from the classpath>> for restrictions of the",
                "- * classpath resolution or disabling it.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example10}",
                "- * ----",
                "- *",
                "- * === Streaming sockets",
                "- *",
                "- * Instances of {@link io.vertx.core.net.NetSocket} are also {@link io.vertx.core.streams.ReadStream} and",
                "- * {@link io.vertx.core.streams.WriteStream} instances so they can be used to pump data to or from other",
                "- * read and write streams.",
                "- *",
                "- * See the chapter on <<streams, streams and pumps>> for more information.",
                "- *",
                "- * === Upgrading connections to SSL/TLS",
                "- *",
                "- * A non SSL/TLS connection can be upgraded to SSL/TLS using {@link io.vertx.core.net.NetSocket#upgradeToSsl(io.vertx.core.Handler)}.",
                "- *",
                "- * The server or client must be configured for SSL/TLS for this to work correctly. Please see the <<ssl, chapter on SSL/TLS>>",
                "- * for more information.",
                "- *",
                "- * === Closing a TCP Server",
                "- *",
                "- * Call {@link io.vertx.core.net.NetServer#close()} to close the server. Closing the server closes any open connections",
                "- * and releases all server resources.",
                "- *",
                "- * The close is actually asynchronous and might not complete until some time after the call has returned.",
                "- * If you want to be notified when the actual close has completed then you can pass in a handler.",
                "- *",
                "- * This handler will then be called when the close has fully completed.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example9}",
                "- * ----",
                "- *",
                "- * === Automatic clean-up in verticles",
                "- *",
                "- * If you're creating TCP servers and clients from inside verticles, those servers and clients will be automatically closed",
                "- * when the verticle is undeployed.",
                "- *",
                "- * === Scaling - sharing TCP servers",
                "- *",
                "- * The handlers of any TCP server are always executed on the same event loop thread.",
                "- *",
                "- * This means that if you are running on a server with a lot of cores, and you only have this one instance",
                "- * deployed then you will have at most one core utilised on your server.",
                "- *",
                "- * In order to utilise more cores of your server you will need to deploy more instances of the server.",
                "- *",
                "- * You can instantiate more instances programmatically in your code:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example11}",
                "- * ----",
                "- *",
                "- * or, if you are using verticles you can simply deploy more instances of your server verticle by using the `-instances` option",
                "- * on the command line:",
                "- *",
                "- *  vertx run com.mycompany.MyVerticle -instances 10",
                "- *",
                "- * or when programmatically deploying your verticle",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example12}",
                "- * ----",
                "- *",
                "- * Once you do this you will find the echo server works functionally identically to before, but all your cores on your",
                "- * server can be utilised and more work can be handled.",
                "- *",
                "- * At this point you might be asking yourself *'How can you have more than one server listening on the",
                "- same host and port? Surely you will get port conflicts as soon as you try and deploy more than one instance?'*",
                "- *",
                "- * _Vert.x does a little magic here.*_",
                "- *",
                "- * When you deploy another server on the same host and port as an existing server it doesn't actually try and create a",
                "- * new server listening on the same host/port.",
                "- *",
                "- * Instead it internally maintains just a single server, and, as incoming connections arrive it distributes",
                "- * them in a round-robin fashion to any of the connect handlers.",
                "- *",
                "- * Consequently Vert.x TCP servers can scale over available cores while each instance remains single threaded.",
                "- *",
                "- * === Creating a TCP client",
                "- *",
                "- * The simplest way to create a TCP client, using all default options is as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example13}",
                "- * ----",
                "- *",
                "- * === Configuring a TCP client",
                "- *",
                "- * If you don't want the default, a client can be configured by passing in a {@link io.vertx.core.net.NetClientOptions}",
                "- * instance when creating it:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example14}",
                "- * ----",
                "- *",
                "- * === Making connections",
                "- *",
                "- * To make a connection to a server you use {@link io.vertx.core.net.NetClient#connect(int, java.lang.String, io.vertx.core.Handler)},",
                "- * specifying the port and host of the server and a handler that will be called with a result containing the",
                "- * {@link io.vertx.core.net.NetSocket} when connection is successful or with a failure if connection failed.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example15}",
                "- * ----",
                "- *",
                "- * === Configuring connection attempts",
                "- *",
                "- * A client can be configured to automatically retry connecting to the server in the event that it cannot connect.",
                "- * This is configured with {@link io.vertx.core.net.NetClientOptions#setReconnectInterval(long)} and",
                "- * {@link io.vertx.core.net.NetClientOptions#setReconnectAttempts(int)}.",
                "- *",
                "- * NOTE: Currently Vert.x will not attempt to reconnect if a connection fails, reconnect attempts and interval",
                "- * only apply to creating initial connections.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example16}",
                "- * ----",
                "- *",
                "- * By default, multiple connection attempts are disabled.",
                "- *",
                "- * [[logging_network_activity]]",
                "- * === Logging network activity",
                "- *",
                "- * For debugging purposes, network activity can be logged:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#exampleNetworkActivityLoggingOnServer}",
                "- * ----",
                "- *",
                "- * for the client",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#exampleNetworkActivityLoggingOnClient}",
                "- * ----",
                "- *",
                "- * Network activity is logged by Netty with the `DEBUG` level and with the `io.netty.handler.logging.LoggingHandler`",
                "- * name. When using network activity logging there are a few things to keep in mind:",
                "- *",
                "- * - logging is not performed by Vert.x logging but by Netty",
                "- * - this is *not* a production feature",
                "- *",
                "- * You should read the <<netty-logging>> section.",
                "- *",
                "- * [[ssl]]",
                "- * === Configuring servers and clients to work with SSL/TLS",
                "- *",
                "- * TCP clients and servers can be configured to use http://en.wikipedia.org/wiki/Transport_Layer_Security[Transport Layer Security]",
                "- * - earlier versions of TLS were known as SSL.",
                "- *",
                "- * The APIs of the servers and clients are identical whether or not SSL/TLS is used, and it's enabled by configuring",
                "- * the {@link io.vertx.core.net.NetClientOptions} or {@link io.vertx.core.net.NetServerOptions} instances used",
                "- * to create the servers or clients.",
                "- *",
                "- * ==== Enabling SSL/TLS on the server",
                "- *",
                "- * SSL/TLS is enabled with  {@link io.vertx.core.net.NetServerOptions#setSsl(boolean) ssl}.",
                "- *",
                "- * By default it is disabled.",
                "- *",
                "- * ==== Specifying key/certificate for the server",
                "- *",
                "- * SSL/TLS servers usually provide certificates to clients in order verify their identity to clients.",
                "- *",
                "- * Certificates/keys can be configured for servers in several ways:",
                "- *",
                "- * The first method is by specifying the location of a Java key-store which contains the certificate and private key.",
                "- *",
                "- * Java key stores can be managed with the http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html[keytool]",
                "- * utility which ships with the JDK.",
                "- *",
                "- * The password for the key store should also be provided:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example17}",
                "- * ----",
                "- *",
                "- * Alternatively you can read the key store yourself as a buffer and provide that directly:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example18}",
                "- * ----",
                "- *",
                "- * Key/certificate in PKCS#12 format (http://en.wikipedia.org/wiki/PKCS_12), usually with the `.pfx`  or the `.p12`",
                "- * extension can also be loaded in a similar fashion than JKS key stores:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example19}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example20}",
                "- * ----",
                "- *",
                "- * Another way of providing server private key and certificate separately using `.pem` files.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example21}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example22}",
                "- * ----",
                "- *",
                "- * PKCS8, PKCS1 and X.509 certificates wrapped in a PEM block formats are supported.",
                "- *",
                "- * WARNING: keep in mind that pem configuration, the private key is not crypted.",
                "- *",
                "- * ==== Specifying trust for the server",
                "- *",
                "- * SSL/TLS servers can use a certificate authority in order to verify the identity of the clients.",
                "- *",
                "- * Certificate authorities can be configured for servers in several ways:",
                "- *",
                "- * Java trust stores can be managed with the http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html[keytool]",
                "- * utility which ships with the JDK.",
                "- *",
                "- * The password for the trust store should also be provided:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example23}",
                "- * ----",
                "- *",
                "- * Alternatively you can read the trust store yourself as a buffer and provide that directly:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example24}",
                "- * ----",
                "- *",
                "- * Certificate authority in PKCS#12 format (http://en.wikipedia.org/wiki/PKCS_12), usually with the `.pfx`  or the `.p12`",
                "- * extension can also be loaded in a similar fashion than JKS trust stores:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example25}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example26}",
                "- * ----",
                "- *",
                "- * Another way of providing server certificate authority using a list `.pem` files.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example27}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example28}",
                "- * ----",
                "- *",
                "- * ==== Enabling SSL/TLS on the client",
                "- *",
                "- * Net Clients can also be easily configured to use SSL. They have the exact same API when using SSL as when using standard sockets.",
                "- *",
                "- * To enable SSL on a NetClient the function setSSL(true) is called.",
                "- *",
                "- * ==== Client trust configuration",
                "- *",
                "- * If the {@link io.vertx.core.net.ClientOptionsBase#setTrustAll trustALl} is set to true on the client, then the client will",
                "- * trust all server certificates. The connection will still be encrypted but this mode is vulnerable to 'man in the middle' attacks. I.e. you can't",
                "- * be sure who you are connecting to. Use this with caution. Default value is false.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example29}",
                "- * ----",
                "- *",
                "- * If {@link io.vertx.core.net.ClientOptionsBase#setTrustAll trustAll} is not set then a client trust store must be",
                "- * configured and should contain the certificates of the servers that the client trusts.",
                "- *",
                "- * By default, host verification is disabled on the client.",
                "- * To enable host verification, set the algorithm to use on your client (only HTTPS and LDAPS is currently supported):",
                "- *",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example46}",
                "- * ----",
                "- *",
                "- * Likewise server configuration, the client trust can be configured in several ways:",
                "- *",
                "- * The first method is by specifying the location of a Java trust-store which contains the certificate authority.",
                "- *",
                "- * It is just a standard Java key store, the same as the key stores on the server side. The client",
                "- * trust store location is set by using the function {@link io.vertx.core.net.JksOptions#setPath path} on the",
                "- * {@link io.vertx.core.net.JksOptions jks options}. If a server presents a certificate during connection which is not",
                "- * in the client trust store, the connection attempt will not succeed.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example30}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example31}",
                "- * ----",
                "- *",
                "- * Certificate authority in PKCS#12 format (http://en.wikipedia.org/wiki/PKCS_12), usually with the `.pfx`  or the `.p12`",
                "- * extension can also be loaded in a similar fashion than JKS trust stores:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example32}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example33}",
                "- * ----",
                "- *",
                "- * Another way of providing server certificate authority using a list `.pem` files.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example34}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example35}",
                "- * ----",
                "- *",
                "- * ==== Specifying key/certificate for the client",
                "- *",
                "- * If the server requires client authentication then the client must present its own certificate to the server when",
                "- * connecting. The client can be configured in several ways:",
                "- *",
                "- * The first method is by specifying the location of a Java key-store which contains the key and certificate.",
                "- * Again it's just a regular Java key store. The client keystore location is set by using the function",
                "- * {@link io.vertx.core.net.JksOptions#setPath(java.lang.String) path} on the",
                "- * {@link io.vertx.core.net.JksOptions jks options}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example36}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example37}",
                "- * ----",
                "- *",
                "- * Key/certificate in PKCS#12 format (http://en.wikipedia.org/wiki/PKCS_12), usually with the `.pfx`  or the `.p12`",
                "- * extension can also be loaded in a similar fashion than JKS key stores:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example38}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example39}",
                "- * ----",
                "- *",
                "- * Another way of providing server private key and certificate separately using `.pem` files.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example40}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example41}",
                "- * ----",
                "- *",
                "- * Keep in mind that pem configuration, the private key is not crypted.",
                "- *",
                "- * ==== Self-signed certificates for testing and development purposes",
                "- *",
                "- * CAUTION: Do not use this in production settings, and note that the generated keys are very insecure.",
                "- *",
                "- * It is very often the case that self-signed certificates are required, be it for unit / integration tests or for",
                "- * running a development version of an application.",
                "- *",
                "- * {@link io.vertx.core.net.SelfSignedCertificate} can be used to provide self-signed PEM certificate helpers and",
                "- * give {@link io.vertx.core.net.KeyCertOptions} and {@link io.vertx.core.net.TrustOptions} configurations:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example48}",
                "- * ----",
                "- *",
                "- * The client can also be configured to trust all certificates:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example49}",
                "- * ----",
                "- *",
                "- * Note that self-signed certificates also work for other TCP protocols like HTTPS:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example50}",
                "- * ----",
                "- *",
                "- * ==== Revoking certificate authorities",
                "- *",
                "- * Trust can be configured to use a certificate revocation list (CRL) for revoked certificates that should no",
                "- * longer be trusted. The {@link io.vertx.core.net.NetClientOptions#addCrlPath(java.lang.String) crlPath} configures",
                "- * the crl list to use:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example42}",
                "- * ----",
                "- *",
                "- * Buffer configuration is also supported:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example43}",
                "- * ----",
                "- *",
                "- * ==== Configuring the Cipher suite",
                "- *",
                "- * By default, the TLS configuration will use the Cipher suite of the JVM running Vert.x. This Cipher suite can be",
                "- * configured with a suite of enabled ciphers:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example44}",
                "- * ----",
                "- *",
                "- * Cipher suite can be specified on the {@link io.vertx.core.net.NetServerOptions} or {@link io.vertx.core.net.NetClientOptions} configuration.",
                "- *",
                "- * ==== Configuring TLS protocol versions",
                "- *",
                "- * By default, the TLS configuration will use the following protocol versions: SSLv2Hello, TLSv1, TLSv1.1 and TLSv1.2. Protocol versions can be",
                "- * configured by explicitly adding enabled protocols:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#example45}",
                "- * ----",
                "- *",
                "- * Protocol versions can be specified on the {@link io.vertx.core.net.NetServerOptions} or {@link io.vertx.core.net.NetClientOptions} configuration.",
                "- *",
                "- * ==== SSL engine",
                "- *",
                "- * The engine implementation can be configured to use https://www.openssl.org[OpenSSL] instead of the JDK implementation.",
                "- * OpenSSL provides better performances and CPU usage than the JDK engine, as well as JDK version independence.",
                "- *",
                "- * The engine options to use is",
                "- *",
                "- * - the {@link io.vertx.core.net.TCPSSLOptions#getSslEngineOptions()} options when it is set",
                "- * - otherwise {@link io.vertx.core.net.JdkSSLEngineOptions}",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#exampleSSLEngine}",
                "- * ----",
                "- *",
                "- * ==== Server Name Indication (SNI)",
                "- *",
                "- * Server Name Indication (SNI) is a TLS extension by which a client specifies a hostname attempting to connect: during",
                "- * the TLS handshake the client gives a server name and the server can use it to respond with a specific certificate",
                "- * for this server name instead of the default deployed certificate.",
                "- * If the server requires client authentication the server can use a specific trusted CA certificate depending on the",
                "- * indicated server name.",
                "- *",
                "- * When SNI is active the server uses",
                "- *",
                "- * * the certificate CN or SAN DNS (Subject Alternative Name with DNS) to do an exact match, e.g `www.example.com`",
                "- * * the certificate CN or SAN DNS certificate to match a wildcard name, e.g `*.example.com`",
                "- * * otherwise the first certificate when the client does not present a server name or the presented server name cannot be matched",
                "- *",
                "- * When the server additionally requires client authentication:",
                "- *",
                "- * * if {@link io.vertx.core.net.JksOptions} were used to set the trust options",
                "- *  ({@link io.vertx.core.net.NetServerOptions#setTrustOptions options}) then an exact match with the trust store",
                "- *  alias is done",
                "- * * otherwise the available CA certificates are used in the same way as if no SNI is in place",
                "- *",
                "- * You can enable SNI on the server by setting {@link io.vertx.core.net.NetServerOptions#setSni(boolean)} to `true` and",
                "- * configured the server with multiple key/certificate pairs.",
                "- *",
                "- * Java KeyStore files or PKCS12 files can store multiple key/cert pairs out of the box.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#configureSNIServer}",
                "- * ----",
                "- *",
                "- * {@link io.vertx.core.net.PemKeyCertOptions} can be configured to hold multiple entries:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#configureSNIServerWithPems}",
                "- * ----",
                "- *",
                "- * The client implicitly sends the connecting host as an SNI server name for Fully Qualified Domain Name (FQDN).",
                "- *",
                "- * You can provide an explicit server name when connecting a socket",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.NetExamples#useSNIInClient}",
                "- * ----",
                "- *",
                "- * It can be used for different purposes:",
                "- *",
                "- * * present a server name different than the server host",
                "- * * present a server name while connecting to an IP",
                "- * * force to present a server name when using shortname",
                "- *",
                "- * ==== Application-Layer Protocol Negotiation (ALPN)",
                "- *",
                "- * Application-Layer Protocol Negotiation (ALPN) is a TLS extension for application layer protocol negotiation. It is used by",
                "- * HTTP/2: during the TLS handshake the client gives the list of application protocols it accepts and the server responds",
                "- * with a protocol it supports.",
                "- *",
                "- * If you are using Java 9, you are fine and you can use HTTP/2 out of the box without extra steps.",
                "- *",
                "- * Java 8 does not supports ALPN out of the box, so ALPN should be enabled by other means:",
                "- *",
                "- * - _OpenSSL_ support",
                "- * - _Jetty-ALPN_ support",
                "- *",
                "- * The engine options to use is",
                "- *",
                "- * - the {@link io.vertx.core.net.TCPSSLOptions#getSslEngineOptions()} options when it is set",
                "- * - {@link io.vertx.core.net.JdkSSLEngineOptions} when ALPN is available for JDK",
                "- * - {@link io.vertx.core.net.OpenSSLEngineOptions} when ALPN is available for OpenSSL",
                "- * - otherwise it fails",
                "- *",
                "- * ===== OpenSSL ALPN support",
                "- *",
                "- * OpenSSL provides native ALPN support.",
                "- *",
                "- * OpenSSL requires to configure {@link io.vertx.core.net.TCPSSLOptions#setOpenSslEngineOptions(OpenSSLEngineOptions)}",
                "- * and use http://netty.io/wiki/forked-tomcat-native.html[netty-tcnative] jar on the classpath. Using tcnative may require",
                "- * OpenSSL to be installed on your OS depending on the tcnative implementation.",
                "- *",
                "- * ===== Jetty-ALPN support",
                "- *",
                "- * Jetty-ALPN is a small jar that overrides a few classes of Java 8 distribution to support ALPN.",
                "- *",
                "- * The JVM must be started with the _alpn-boot-${version}.jar_ in its `bootclasspath`:",
                "- *",
                "- * ----",
                "- * -Xbootclasspath/p:/path/to/alpn-boot${version}.jar",
                "- * ----",
                "- *",
                "- * where ${version} depends on the JVM version, e.g. _8.1.7.v20160121_ for _OpenJDK 1.8.0u74_ . The complete",
                "- * list is available on the http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html[Jetty-ALPN page].",
                "- *",
                "- * The main drawback is that the version depends on the JVM.",
                "- *",
                "- * To solve this problem the _https://github.com/jetty-project/jetty-alpn-agent[Jetty ALPN agent]_ can be use instead. The agent is a JVM agent that will chose the correct",
                "- * ALPN version for the JVM running it:",
                "- *",
                "- * ----",
                "- * -javaagent:/path/to/alpn/agent",
                "- * ----",
                "- *",
                "- * === Using a proxy for client connections",
                "- *",
                "- * The {@link io.vertx.core.net.NetClient} supports either a HTTP/1.x _CONNECT_, _SOCKS4a_ or _SOCKS5_ proxy.",
                "- *",
                "- * The proxy can be configured in the {@link io.vertx.core.net.NetClientOptions} by setting a",
                "- * {@link io.vertx.core.net.ProxyOptions} object containing proxy type, hostname, port and optionally username and password.",
                "- *",
                "- * Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- *",
                "- * ----",
                "- * {@link examples.NetExamples#example47}",
                "- * ----",
                "- *",
                "- * The DNS resolution is always done on the proxy server, to achieve the functionality of a SOCKS4 client, it is necessary",
                "- * to resolve the DNS address locally.",
                "- */",
                " package io.vertx.core.net;",
                "diff --git a/src/main/java/io/vertx/core/package-info.java b/src/main/java/io/vertx/core/package-info.java",
                "index 79a19d653..3afdbfae6 100644",
                "--- a/src/main/java/io/vertx/core/package-info.java",
                "+++ b/src/main/java/io/vertx/core/package-info.java",
                "@@ -11,1765 +11,2 @@",
                "-/**",
                "- * = Vert.x Core Manual",
                "- * :toc: left",
                "- *",
                "- * At the heart of Vert.x is a set of Java APIs that we call *Vert.x Core*",
                "- *",
                "- * https://github.com/eclipse/vert.x[Repository].",
                "- *",
                "- * Vert.x core provides functionality for things like:",
                "- *",
                "- * * Writing TCP clients and servers",
                "- * * Writing HTTP clients and servers including support for WebSockets",
                "- * * The Event bus",
                "- * * Shared data - local maps and clustered distributed maps",
                "- * * Periodic and delayed actions",
                "- * * Deploying and undeploying Verticles",
                "- * * Datagram Sockets",
                "- * * DNS client",
                "- * * File system access",
                "- * * High availability",
                "- * * Native transports",
                "- * * Clustering",
                "- *",
                "- * The functionality in core is fairly low level - you won't find stuff like database access, authorisation or high level",
                "- * web functionality here - that kind of stuff you'll find in *Vert.x ext* (extensions).",
                "- *",
                "- * Vert.x core is small and lightweight. You just use the parts you want. It's also entirely embeddable in your",
                "- * existing applications - we don't force you to structure your applications in a special way just so you can use",
                "- * Vert.x.",
                "- *",
                "- * You can use core from any of the other languages that Vert.x supports. But here'a a cool bit - we don't force",
                "- * you to use the Java API directly from, say, JavaScript or Ruby - after all, different languages have different conventions",
                "- * and idioms, and it would be odd to force Java idioms on Ruby developers (for example).",
                "- * Instead, we automatically generate an *idiomatic* equivalent of the core Java APIs for each language.",
                "- *",
                "- * From now on we'll just use the word *core* to refer to Vert.x core.",
                "- *",
                "- * include::override/dependencies.adoc[]",
                "- *",
                "- * Let's discuss the different concepts and features in core.",
                "- *",
                "- * == In the beginning there was Vert.x",
                "- *",
                "- * ////",
                "- * TODO Much of this is Java specific - need someway of swapping in language specific parts",
                "- * ////",
                "- *",
                "- * You can't do much in Vert.x-land unless you can communicate with a {@link io.vertx.core.Vertx} object!",
                "- *",
                "- * It's the control centre of Vert.x and is how you do pretty much everything, including creating clients and servers,",
                "- * getting a reference to the event bus, setting timers, as well as many other things.",
                "- *",
                "- * So how do you get an instance?",
                "- *",
                "- * If you're embedding Vert.x then you simply create an instance as follows:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example1}",
                "- * ----",
                "- *",
                "- * NOTE: Most applications will only need a single Vert.x instance, but it's possible to create multiple Vert.x instances if you",
                "- * require, for example, isolation between the event bus or different groups of servers and clients.",
                "- *",
                "- * === Specifying options when creating a Vertx object",
                "- *",
                "- * When creating a Vertx object you can also specify options if the defaults aren't right for you:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example2}",
                "- * ----",
                "- *",
                "- * The {@link io.vertx.core.VertxOptions} object has many settings and allows you to configure things like clustering,",
                "- * high availability, pool sizes and various other settings. The Javadoc describes all the settings in detail.",
                "- *",
                "- * === Creating a clustered Vert.x object",
                "- *",
                "- * If you're creating a *clustered Vert.x* (See the section on the <<event_bus, event bus>> for more information",
                "- * on clustering the event bus), then you will normally use the asynchronous variant to create the Vertx object.",
                "- *",
                "- * This is because it usually takes some time (maybe a few seconds) for the different Vert.x instances in a cluster to",
                "- * group together. During that time, we don't want to block the calling thread, so we give the result to you asynchronously.",
                "- *",
                "- * == Are you fluent?",
                "- *",
                "- * You may have noticed that in the previous examples a *fluent* API was used.",
                "- *",
                "- * A fluent API is where multiple methods calls can be chained together. For example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example3}",
                "- * ----",
                "- *",
                "- * This is a common pattern throughout Vert.x APIs, so get used to it.",
                "- *",
                "- * Chaining calls like this allows you to write code that's a little bit less verbose. Of course, if you don't",
                "- * like the fluent approach *we don't force you* to do it that way, you can happily ignore it if you prefer and write",
                "- * your code like this:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example4}",
                "- * ----",
                "- *",
                "- * == Don't call us, we'll call you.",
                "- *",
                "- * The Vert.x APIs are largely _event driven_. This means that when things happen in Vert.x that you are interested in,",
                "- * Vert.x will call you by sending you events.",
                "- *",
                "- * Some example events are:",
                "- *",
                "- * * a timer has fired",
                "- * * some data has arrived on a socket,",
                "- * * some data has been read from disk",
                "- * * an exception has occurred",
                "- * * an HTTP server has received a request",
                "- *",
                "- * You handle events by providing _handlers_ to the Vert.x APIs. For example to receive a timer event every second you",
                "- * would do:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example5}",
                "- * ----",
                "- *",
                "- * Or to receive an HTTP request:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example6}",
                "- * ----",
                "- *",
                "- * Some time later when Vert.x has an event to pass to your handler Vert.x will call it *asynchronously*.",
                "- *",
                "- * This leads us to some important concepts in Vert.x:",
                "- *",
                "- * == Don't block me!",
                "- *",
                "- * With very few exceptions (i.e. some file system operations ending in 'Sync'), none of the APIs in Vert.x block the calling thread.",
                "- *",
                "- * If a result can be provided immediately, it will be returned immediately, otherwise you will usually provide a handler",
                "- * to receive events some time later.",
                "- *",
                "- * Because none of the Vert.x APIs block threads that means you can use Vert.x to handle a lot of concurrency using",
                "- * just a small number of threads.",
                "- *",
                "- * With a conventional blocking API the calling thread might block when:",
                "- *",
                "- * * Reading data from a socket",
                "- * * Writing data to disk",
                "- * * Sending a message to a recipient and waiting for a reply.",
                "- * * ... Many other situations",
                "- *",
                "- * In all the above cases, when your thread is waiting for a result it can't do anything else - it's effectively useless.",
                "- *",
                "- * This means that if you want a lot of concurrency using blocking APIs then you need a lot of threads to prevent your",
                "- * application grinding to a halt.",
                "- *",
                "- * Threads have overhead in terms of the memory they require (e.g. for their stack) and in context switching.",
                "- *",
                "- * For the levels of concurrency required in many modern applications, a blocking approach just doesn't scale.",
                "- *",
                "- * == Reactor and Multi-Reactor",
                "- *",
                "- * We mentioned before that Vert.x APIs are event driven - Vert.x passes events to handlers when they are available.",
                "- *",
                "- * In most cases Vert.x calls your handlers using a thread called an *event loop*.",
                "- *",
                "- * As nothing in Vert.x or your application blocks, the event loop can merrily run around delivering events to different handlers in succession",
                "- * as they arrive.",
                "- *",
                "- * Because nothing blocks, an event loop can potentially deliver huge amounts of events in a short amount of time.",
                "- * For example a single event loop can handle many thousands of HTTP requests very quickly.",
                "- *",
                "- * We call this the http://en.wikipedia.org/wiki/Reactor_pattern[Reactor Pattern].",
                "- *",
                "- * You may have heard of this before - for example Node.js implements this pattern.",
                "- *",
                "- * In a standard reactor implementation there is a *single event loop* thread which runs around in a loop delivering all",
                "- * events to all handlers as they arrive.",
                "- *",
                "- * The trouble with a single thread is it can only run on a single core at any one time, so if you want your single threaded",
                "- * reactor application (e.g. your Node.js application) to scale over your multi-core server you have to start up and",
                "- * manage many different processes.",
                "- *",
                "- * Vert.x works differently here. Instead of a single event loop, each Vertx instance maintains *several event loops*.",
                "- * By default we choose the number based on the number of available cores on the machine, but this can be overridden.",
                "- *",
                "- * This means a single Vertx process can scale across your server, unlike Node.js.",
                "- *",
                "- * We call this pattern the *Multi-Reactor Pattern* to distinguish it from the single threaded reactor pattern.",
                "- *",
                "- * NOTE: Even though a Vertx instance maintains multiple event loops, any particular handler will never be executed",
                "- * concurrently, and in most cases (with the exception of <<worker_verticles, worker verticles>>) will always be called",
                "- * using the *exact same event loop*.",
                "- *",
                "- * [[golden_rule]]",
                "- * == The Golden Rule - Don't Block the Event Loop",
                "- *",
                "- * We already know that the Vert.x APIs are non blocking and won't block the event loop, but that's not much help if",
                "- * you block the event loop *yourself* in a handler.",
                "- *",
                "- * If you do that, then that event loop will not be able to do anything else while it's blocked. If you block all of the",
                "- * event loops in Vertx instance then your application will grind to a complete halt!",
                "- *",
                "- * So don't do it! *You have been warned*.",
                "- *",
                "- * Examples of blocking include:",
                "- *",
                "- * * +Thread.sleep()+",
                "- * * Waiting on a lock",
                "- * * Waiting on a mutex or monitor (e.g. synchronized section)",
                "- * * Doing a long lived database operation and waiting for a result",
                "- * * Doing a complex calculation that takes some significant time.",
                "- * * Spinning in a loop",
                "- *",
                "- * If any of the above stop the event loop from doing anything else for a *significant amount of time* then you should",
                "- * go immediately to the naughty step, and await further instructions.",
                "- *",
                "- * So... what is a *significant amount of time*?",
                "- *",
                "- * How long is a piece of string? It really depends on your application and the amount of concurrency you require.",
                "- *",
                "- * If you have a single event loop, and you want to handle 10000 http requests per second, then it's clear that each request",
                "- * can't take more than 0.1 ms to process, so you can't block for any more time than that.",
                "- *",
                "- * *The maths is not hard and shall be left as an exercise for the reader.*",
                "- *",
                "- * If your application is not responsive it might be a sign that you are blocking an event loop somewhere. To help",
                "- * you diagnose such issues, Vert.x will automatically log warnings if it detects an event loop hasn't returned for",
                "- * some time. If you see warnings like these in your logs, then you should investigate.",
                "- *",
                "- * ----",
                "- * Thread vertx-eventloop-thread-3 has been blocked for 20458 ms",
                "- * ----",
                "- *",
                "- * Vert.x will also provide stack traces to pinpoint exactly where the blocking is occurring.",
                "- *",
                "- * If you want to turn off these warnings or change the settings, you can do that in the",
                "- * {@link io.vertx.core.VertxOptions} object before creating the Vertx object.",
                "- *",
                "- * [[blocking_code]]",
                "- * == Running blocking code",
                "- *",
                "- * In a perfect world, there will be no war or hunger, all APIs will be written asynchronously and bunny rabbits will",
                "- * skip hand-in-hand with baby lambs across sunny green meadows.",
                "- *",
                "- * *But... the real world is not like that. (Have you watched the news lately?)*",
                "- *",
                "- * Fact is, many, if not most libraries, especially in the JVM ecosystem have synchronous APIs and many of the methods are",
                "- * likely to block. A good example is the JDBC API - it's inherently synchronous, and no matter how hard it tries, Vert.x",
                "- * cannot sprinkle magic pixie dust on it to make it asynchronous.",
                "- *",
                "- * We're not going to rewrite everything to be asynchronous overnight so we need to provide you a way to use \"traditional\"",
                "- * blocking APIs safely within a Vert.x application.",
                "- *",
                "- * As discussed before, you can't call blocking operations directly from an event loop, as that would prevent it",
                "- * from doing any other useful work. So how can you do this?",
                "- *",
                "- * It's done by calling {@link io.vertx.core.Vertx#executeBlocking} specifying both the blocking code to execute and a",
                "- * result handler to be called back asynchronous when the blocking code has been executed.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example7}",
                "- * ----",
                "- *",
                "- * By default, if executeBlocking is called several times from the same context (e.g. the same verticle instance) then",
                "- * the different executeBlocking are executed _serially_ (i.e. one after another).",
                "- *",
                "- * If you don't care about ordering you can call {@link io.vertx.core.Vertx#executeBlocking(io.vertx.core.Handler, boolean, io.vertx.core.Handler)}",
                "- * specifying `false` as the argument to `ordered`. In this case any executeBlocking may be executed in parallel",
                "- * on the worker pool.",
                "- *",
                "- * An alternative way to run blocking code is to use a <<worker_verticles, worker verticle>>",
                "- *",
                "- * A worker verticle is always executed with a thread from the worker pool.",
                "- *",
                "- * By default blocking code is executed on the Vert.x worker pool, configured with {@link io.vertx.core.VertxOptions#setWorkerPoolSize(int)}.",
                "- *",
                "- * Additional pools can be created for different purposes:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#workerExecutor1}",
                "- * ----",
                "- *",
                "- * The worker executor must be closed when it's not necessary anymore:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#workerExecutor2}",
                "- * ----",
                "- *",
                "- * When several workers are created with the same name, they will share the same pool. The worker pool is destroyed",
                "- * when all the worker executors using it are closed.",
                "- *",
                "- * When an executor is created in a Verticle, Vert.x will close it automatically for you when the Verticle",
                "- * is undeployed.",
                "- *",
                "- * Worker executors can be configured when created:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#workerExecutor3}",
                "- * ----",
                "- *",
                "- * NOTE: the configuration is set when the worker pool is created",
                "- *",
                "- * == Async coordination",
                "- *",
                "- * Coordination of multiple asynchronous results can be achieved with Vert.x {@link io.vertx.core.Future futures}. It",
                "- * supports concurrent composition (run several async operations in parallel) and sequential composition",
                "- * (chain async operations).",
                "- *",
                "- * === Concurrent composition",
                "- *",
                "- * {@link io.vertx.core.CompositeFuture#all} takes several futures arguments (up to 6) and returns a future that is",
                "- * _succeeded_ when all the futures are and _failed_ when at least one of the futures is failed:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#exampleFutureAll1}",
                "- * ----",
                "- *",
                "- * The operations run concurrently, the {@link io.vertx.core.Handler} attached to the returned future is invoked upon",
                "- * completion of the composition. When one of the operation fails (one of the passed future is marked as a failure),",
                "- * the resulting future is marked as failed too. When all the operations succeed, the resulting future is completed",
                "- * with a success.",
                "- *",
                "- * Alternatively, you can pass a list (potentially empty) of futures:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#exampleFutureAll2}",
                "- * ----",
                "- *",
                "- * While the `all` composition _waits_ until all futures are successful (or one fails), the `any` composition",
                "- * _waits_ for the first succeeded future. {@link io.vertx.core.CompositeFuture#any} takes several futures",
                "- * arguments (up to 6) and returns a future that is succeeded when one of the futures is, and failed when",
                "- * all the futures are failed:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#exampleFutureAny1}",
                "- * ----",
                "- *",
                "- * A list of futures can be used also:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#exampleFutureAny2}",
                "- * ----",
                "- *",
                "- * The `join` composition _waits_ until all futures are completed, either with a success or a failure.",
                "- * {@link io.vertx.core.CompositeFuture#join} takes several futures arguments (up to 6) and returns a future that is",
                "- * succeeded when all the futures are succeeded, and failed when all the futures are completed and at least one of",
                "- * them is failed:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#exampleFutureJoin1}",
                "- * ----",
                "- *",
                "- * A list of futures can be used also:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#exampleFutureJoin2}",
                "- * ----",
                "- *",
                "- * === Sequential composition",
                "- *",
                "- * While `all` and `any` are implementing concurrent composition, {@link io.vertx.core.Future#compose} can be used",
                "- * for chaining futures (so sequential composition).",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#exampleFuture6}",
                "- * ----",
                "- *",
                "- * In this example, 3 operations are chained:",
                "- *",
                "- * 1. a file is created (`fut1`)",
                "- * 2. something is written in the file (`fut2`)",
                "- * 3. the file is moved (`startFuture`)",
                "- *",
                "- * When these 3 steps are successful, the final future (`startFuture`) is succeeded. However, if one",
                "- * of the steps fails, the final future is failed.",
                "- *",
                "- * This example uses:",
                "- *",
                "- * * {@link io.vertx.core.Future#compose(java.util.function.Function)}: when the current future completes,",
                "- * run the given function, that returns a future. When this returned future completes, it completes the composition.",
                "- * * {@link io.vertx.core.Future#compose(io.vertx.core.Handler, io.vertx.core.Future)}: when the current future",
                "- * completes, run the given handler that completes the given `future` (next).",
                "- *",
                "- * In this second case, the {@link io.vertx.core.Handler} should complete the `next` future to report its success or",
                "- * failure.",
                "- *",
                "- * You can use {@link io.vertx.core.Future#completer()} that completes a future with the operation result or",
                "- * failure. It avoids having to write the _traditional_: `if success then complete the future else fail the future`.",
                "- *",
                "- * == Verticles",
                "- *",
                "- * Vert.x comes with a simple, scalable, _actor-like_ deployment and concurrency model out of the box that",
                "- * you can use to save you writing your own.",
                "- *",
                "- * *This model is entirely optional and Vert.x does not force you to create your applications in this way if you don't",
                "- * want to.*.",
                "- *",
                "- * The model does not claim to be a strict actor-model implementation, but it does share similarities especially",
                "- * with respect to concurrency, scaling and deployment.",
                "- *",
                "- * To use this model, you write your code as set of *verticles*.",
                "- *",
                "- * Verticles are chunks of code that get deployed and run by Vert.x. A Vert.x instance maintains N event loop threads",
                "- * (where N by default is core*2) by default. Verticles can be written in any of the languages that Vert.x supports",
                "- * and a single application can include verticles written in multiple languages.",
                "- *",
                "- * You can think of a verticle as a bit like an actor in the http://en.wikipedia.org/wiki/Actor_model[Actor Model].",
                "- *",
                "- * An application would typically be composed of many verticle instances running in the same Vert.x instance at the same",
                "- * time. The different verticle instances communicate with each other by sending messages on the <<event_bus, event bus>>.",
                "- *",
                "- * include::override/verticles.adoc[]",
                "- *",
                "- * === Verticle Types",
                "- *",
                "- * There are three different types of verticles:",
                "- *",
                "- * Standard Verticles:: These are the most common and useful type - they are always executed using an event loop thread.",
                "- * We'll discuss this more in the next section.",
                "- * Worker Verticles:: These run using a thread from the worker pool. An instance is never executed concurrently by more",
                "- * than one thread.",
                "- * Multi-threaded worker verticles:: These run using a thread from the worker pool. An instance can be executed concurrently by more",
                "- * than one thread.",
                "- *",
                "- * === Standard verticles",
                "- *",
                "- * Standard verticles are assigned an event loop thread when they are created and the +start+ method is called with that",
                "- * event loop. When you call any other methods that takes a handler on a core API from an event loop then Vert.x",
                "- * will guarantee that those handlers, when called, will be executed on the same event loop.",
                "- *",
                "- * This means we can guarantee that all the code in your verticle instance is always executed on the same event loop (as",
                "- * long as you don't create your own threads and call it!).",
                "- *",
                "- * This means you can write all the code in your application as single threaded and let Vert.x worry about the threading",
                "- * and scaling. No more worrying about +synchronized+ and +volatile+ any more, and you also avoid many other cases of race conditions",
                "- * and deadlock so prevalent when doing hand-rolled 'traditional' multi-threaded application development.",
                "- *",
                "- * [[worker_verticles]]",
                "- * === Worker verticles",
                "- *",
                "- * A worker verticle is just like a standard verticle but it's executed using a thread from the Vert.x worker thread pool,",
                "- * rather than using an event loop.",
                "- *",
                "- * Worker verticles are designed for calling blocking code, as they won't block any event loops.",
                "- *",
                "- * If you don't want to use a worker verticle to run blocking code, you can also run <<blocking_code, inline blocking code>>",
                "- * directly while on an event loop.",
                "- *",
                "- * If you want to deploy a verticle as a worker verticle you do that with {@link io.vertx.core.DeploymentOptions#setWorker}.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example7_1}",
                "- * ----",
                "- *",
                "- * Worker verticle instances are never executed concurrently by Vert.x by more than one thread, but can executed by",
                "- * different threads at different times.",
                "- *",
                "- * ==== Multi-threaded worker verticles",
                "- *",
                "- * A multi-threaded worker verticle is just like a normal worker verticle but it *can* be executed concurrently by",
                "- * different threads.",
                "- *",
                "- * WARNING: Multi-threaded worker verticles are an advanced feature and most applications will have no need for them.",
                "- * Because of the concurrency in these verticles you have to be very careful to keep the verticle in a consistent state",
                "- * using standard Java techniques for multi-threaded programming.",
                "- *",
                "- * === Deploying verticles programmatically",
                "- *",
                "- * You can deploy a verticle using one of the {@link io.vertx.core.Vertx#deployVerticle} method, specifying a verticle",
                "- * name or you can pass in a verticle instance you have already created yourself.",
                "- *",
                "- * NOTE: Deploying Verticle *instances* is Java only.",
                "- *",
                "- * [source,java]",
                "- * ----",
                "- * {@link examples.CoreExamples#example8}",
                "- * ----",
                "- *",
                "- * You can also deploy verticles by specifying the verticle *name*.",
                "- *",
                "- * The verticle name is used to look up the specific {@link io.vertx.core.spi.VerticleFactory} that will be used to",
                "- * instantiate the actual verticle instance(s).",
                "- *",
                "- * Different verticle factories are available for instantiating verticles in different languages and for various other",
                "- * reasons such as loading services and getting verticles from Maven at run-time.",
                "- *",
                "- * This allows you to deploy verticles written in any language from any other language that Vert.x supports.",
                "- *",
                "- * Here's an example of deploying some different types of verticles:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example9}",
                "- * ----",
                "- *",
                "- * === Rules for mapping a verticle name to a verticle factory",
                "- *",
                "- * When deploying verticle(s) using a name, the name is used to select the actual verticle factory that will instantiate",
                "- * the verticle(s).",
                "- *",
                "- * Verticle names can have a prefix - which is a string followed by a colon, which if present will be used to look-up the factory, e.g.",
                "- *",
                "- *  js:foo.js // Use the JavaScript verticle factory",
                "- *  groovy:com.mycompany.SomeGroovyCompiledVerticle // Use the Groovy verticle factory",
                "- *  service:com.mycompany:myorderservice // Uses the service verticle factory",
                "- *",
                "- * If no prefix is present, Vert.x will look for a suffix and use that to lookup the factory, e.g.",
                "- *",
                "- *  foo.js // Will also use the JavaScript verticle factory",
                "- *  SomeScript.groovy // Will use the Groovy verticle factory",
                "- *",
                "- * If no prefix or suffix is present, Vert.x will assume it's a Java fully qualified class name (FQCN) and try",
                "- * and instantiate that.",
                "- *",
                "- * === How are Verticle Factories located?",
                "- *",
                "- * Most Verticle factories are loaded from the classpath and registered at Vert.x startup.",
                "- *",
                "- * You can also programmatically register and unregister verticle factories using {@link io.vertx.core.Vertx#registerVerticleFactory}",
                "- * and {@link io.vertx.core.Vertx#unregisterVerticleFactory} if you wish.",
                "- *",
                "- * === Waiting for deployment to complete",
                "- *",
                "- * Verticle deployment is asynchronous and may complete some time after the call to deploy has returned.",
                "- *",
                "- * If you want to be notified when deployment is complete you can deploy specifying a completion handler:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example10}",
                "- * ----",
                "- *",
                "- * The completion handler will be passed a result containing the deployment ID string, if deployment succeeded.",
                "- *",
                "- * This deployment ID can be used later if you want to undeploy the deployment.",
                "- *",
                "- * === Undeploying verticle deployments",
                "- *",
                "- * Deployments can be undeployed with {@link io.vertx.core.Vertx#undeploy}.",
                "- *",
                "- * Un-deployment is itself asynchronous so if you want to be notified when un-deployment is complete you can deploy specifying a completion handler:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example11}",
                "- * ----",
                "- *",
                "- * === Specifying number of verticle instances",
                "- *",
                "- * When deploying a verticle using a verticle name, you can specify the number of verticle instances that you",
                "- * want to deploy:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example12}",
                "- * ----",
                "- *",
                "- * This is useful for scaling easily across multiple cores. For example you might have a web-server verticle to deploy",
                "- * and multiple cores on your machine, so you want to deploy multiple instances to utilise all the cores.",
                "- *",
                "- * include::override/verticle-configuration.adoc[]",
                "- *",
                "- * === Verticle Isolation Groups",
                "- *",
                "- * By default, Vert.x has a _flat classpath_. I.e, when Vert.x deploys verticles it does so with the current classloader -",
                "- * it doesn't create a new one. In the majority of cases this is the simplest, clearest, and sanest thing to do.",
                "- *",
                "- * However, in some cases you may want to deploy a verticle so the classes of that verticle are isolated from others in",
                "- * your application.",
                "- *",
                "- * This might be the case, for example, if you want to deploy two different versions of a verticle with the same class name",
                "- * in the same Vert.x instance, or if you have two different verticles which use different versions of the same jar library.",
                "- *",
                "- * When using an isolation group you provide a list of the class names that you want isolated using",
                "- * {@link io.vertx.core.DeploymentOptions#setIsolatedClasses(java.util.List)}-  an entry can be a fully qualified",
                "- * classname such as `com.mycompany.myproject.engine.MyClass` or it can be a wildcard which will match any classes in a package and any",
                "- * sub-packages, e.g. `com.mycompany.myproject.*` would match any classes in the package `com.mycompany.myproject` or",
                "- * any sub-packages.",
                "- *",
                "- * Please note that _only_ the classes that match will be isolated - any other classes will be loaded by the current",
                "- * class loader.",
                "- *",
                "- * Extra classpath entries can also be provided with {@link io.vertx.core.DeploymentOptions#setExtraClasspath} so if",
                "- * you want to load classes or resources that aren't already present on the main classpath you can add this.",
                "- *",
                "- * WARNING: Use this feature with caution. Class-loaders can be a can of worms, and can make debugging difficult, amongst",
                "- * other things.",
                "- *",
                "- * Here's an example of using an isolation group to isolate a verticle deployment.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example14}",
                "- * ----",
                "- *",
                "- * === High Availability",
                "- *",
                "- * Verticles can be deployed with High Availability (HA) enabled. In that context, when a verticle is deployed on",
                "- * a vert.x instance that dies abruptly, the verticle is redeployed on another vert.x instance from the cluster.",
                "- *",
                "- * To run an verticle with the high availability enabled, just append the `-ha` switch:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my-verticle.js -ha",
                "- * ----",
                "- *",
                "- * When enabling high availability, no need to add `-cluster`.",
                "- *",
                "- * More details about the high availability feature and configuration in the <<High Availability and Fail-Over>>",
                "- *   section.",
                "- *",
                "- *",
                "- * === Running Verticles from the command line",
                "- *",
                "- * You can use Vert.x directly in your Maven or Gradle projects in the normal way by adding a dependency to the Vert.x",
                "- * core library and hacking from there.",
                "- *",
                "- * However you can also run Vert.x verticles directly from the command line if you wish.",
                "- *",
                "- * To do this you need to download and install a Vert.x distribution, and add the `bin` directory of the installation",
                "- * to your `PATH` environment variable. Also make sure you have a Java 8 JDK on your `PATH`.",
                "- *",
                "- * NOTE: The JDK is required to support on the fly compilation of Java code.",
                "- *",
                "- * You can now run verticles by using the `vertx run` command. Here are some examples:",
                "- *",
                "- * ----",
                "- * # Run a JavaScript verticle",
                "- * vertx run my_verticle.js",
                "- *",
                "- * # Run a Ruby verticle",
                "- * vertx run a_n_other_verticle.rb",
                "- *",
                "- * # Run a Groovy script verticle, clustered",
                "- * vertx run FooVerticle.groovy -cluster",
                "- * ----",
                "- *",
                "- * You can even run Java source verticles without compiling them first!",
                "- *",
                "- * ----",
                "- * vertx run SomeJavaSourceFile.java",
                "- * ----",
                "- *",
                "- * Vert.x will compile the Java source file on the fly before running it. This is really useful for quickly",
                "- * prototyping verticles and great for demos. No need to set-up a Maven or Gradle build first to get going!",
                "- *",
                "- * For full information on the various options available when executing `vertx` on the command line,",
                "- * type `vertx` at the command line.",
                "- *",
                "- * === Causing Vert.x to exit",
                "- *",
                "- * Threads maintained by Vert.x instances are not daemon threads so they will prevent the JVM from exiting.",
                "- *",
                "- * If you are embedding Vert.x and you have finished with it, you can call {@link io.vertx.core.Vertx#close} to close it",
                "- * down.",
                "- *",
                "- * This will shut-down all internal thread pools and close other resources, and will allow the JVM to exit.",
                "- *",
                "- * === The Context object",
                "- *",
                "- * When Vert.x provides an event to a handler or calls the start or stop methods of a",
                "- * {@link io.vertx.core.Verticle}, the execution is associated with a `Context`. Usually a context is an",
                "- * *event-loop context* and is tied to a specific event loop thread. So executions for that context always occur",
                "- * on that exact same event loop thread. In the case of worker verticles and running inline blocking code a",
                "- * worker context will be associated with the execution which will use a thread from the worker thread pool.",
                "- *",
                "- * To retrieve the context, use the {@link io.vertx.core.Vertx#getOrCreateContext()} method:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#retrieveContext(io.vertx.core.Vertx)}",
                "- * ----",
                "- *",
                "- * If the current thread has a context associated with it, it reuses the context object. If not a new instance of",
                "- * context is created. You can test the _type_ of context you have retrieved:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#retrieveContextType(io.vertx.core.Vertx)}",
                "- * ----",
                "- *",
                "- * When you have retrieved the context object, you can run code in this context asynchronously. In other words,",
                "- * you submit a task that will be eventually run in the same context, but later:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#runInContext(io.vertx.core.Vertx)}",
                "- * ----",
                "- *",
                "- * When several handlers run in the same context, they may want to share data. The context object offers methods to",
                "- * store and retrieve data shared in the context. For instance, it lets you pass data to some action run with",
                "- * {@link io.vertx.core.Context#runOnContext(io.vertx.core.Handler)}:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#runInContextWithData(io.vertx.core.Vertx)}",
                "- * ----",
                "- *",
                "- * The context object also let you access verticle configuration using the {@link io.vertx.core.Context#config()}",
                "- * method. Check the <<Passing configuration to a verticle>> section for more details about this configuration.",
                "- *",
                "- * === Executing periodic and delayed actions",
                "- *",
                "- * It's very common in Vert.x to want to perform an action after a delay, or periodically.",
                "- *",
                "- * In standard verticles you can't just make the thread sleep to introduce a delay, as that will block the event loop thread.",
                "- *",
                "- * Instead you use Vert.x timers. Timers can be *one-shot* or *periodic*. We'll discuss both",
                "- *",
                "- * ==== One-shot Timers",
                "- *",
                "- * A one shot timer calls an event handler after a certain delay, expressed in milliseconds.",
                "- *",
                "- * To set a timer to fire once you use {@link io.vertx.core.Vertx#setTimer} method passing in the delay and a handler",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example15}",
                "- * ----",
                "- *",
                "- * The return value is a unique timer id which can later be used to cancel the timer. The handler is also passed the timer id.",
                "- *",
                "- * ==== Periodic Timers",
                "- *",
                "- * You can also set a timer to fire periodically by using {@link io.vertx.core.Vertx#setPeriodic}.",
                "- *",
                "- * There will be an initial delay equal to the period.",
                "- *",
                "- * The return value of `setPeriodic` is a unique timer id (long). This can be later used if the timer needs to be cancelled.",
                "- *",
                "- * The argument passed into the timer event handler is also the unique timer id:",
                "- *",
                "- * Keep in mind that the timer will fire on a periodic basis. If your periodic treatment takes a long amount of time to proceed,",
                "- * your timer events could run continuously or even worse : stack up.",
                "- *",
                "- * In this case, you should consider using {@link io.vertx.core.Vertx#setTimer} instead. Once your treatment has",
                "- * finished, you can set the next timer.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example16}",
                "- * ----",
                "- *",
                "- * ==== Cancelling timers",
                "- *",
                "- * To cancel a periodic timer, call {@link io.vertx.core.Vertx#cancelTimer} specifying the timer id. For example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example17}",
                "- * ----",
                "- *",
                "- * ==== Automatic clean-up in verticles",
                "- *",
                "- * If you're creating timers from inside verticles, those timers will be automatically closed",
                "- * when the verticle is undeployed.",
                "- *",
                "- * === Verticle worker pool",
                "- *",
                "- * Verticles use the Vert.x worker pool for executing blocking actions, i.e {@link io.vertx.core.Context#executeBlocking} or",
                "- * worker verticle.",
                "- *",
                "- * A different worker pool can be specified in deployment options:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#deployVerticleWithDifferentWorkerPool}",
                "- * ----",
                "- *",
                "- * [[event_bus]]",
                "- * include::eventbus.adoc[]",
                "- *",
                "- * include::override/json.adoc[]",
                "- *",
                "- * include::buffers.adoc[]",
                "- *",
                "- * include::net.adoc[]",
                "- *",
                "- * include::http.adoc[]",
                "- *",
                "- * include::shareddata.adoc[]",
                "- *",
                "- * include::filesystem.adoc[]",
                "- *",
                "- * include::datagrams.adoc[]",
                "- *",
                "- * include::dns.adoc[]",
                "- *",
                "- * [[streams]]",
                "- * include::streams.adoc[]",
                "- *",
                "- * include::parsetools.adoc[]",
                "- *",
                "- * == Thread safety",
                "- *",
                "- * Most Vert.x objects are safe to access from different threads. _However_ performance is optimised when they are",
                "- * accessed from the same context they were created from.",
                "- *",
                "- * For example if you have deployed a verticle which creates a {@link io.vertx.core.net.NetServer} which provides",
                "- * {@link io.vertx.core.net.NetSocket} instances in it's handler, then it's best to always access that socket instance",
                "- * from the event loop of the verticle.",
                "- *",
                "- * If you stick to the standard Vert.x verticle deployment model and avoid sharing objects between verticles then this",
                "- * should be the case without you having to think about it.",
                "- *",
                "- * == Metrics SPI",
                "- *",
                "- * By default Vert.x does not record any metrics. Instead it provides an SPI for others to implement which can be added",
                "- * to the classpath. The metrics SPI is an advanced feature which allows implementers to capture events from Vert.x in",
                "- * order to gather metrics. For more information on this, please consult the",
                "- * {@link io.vertx.core.spi.metrics.VertxMetrics API Documentation}.",
                "- *",
                "- * You can also specify a metrics factory programmatically if embedding Vert.x using",
                "- * {@link io.vertx.core.metrics.MetricsOptions#setFactory(io.vertx.core.spi.VertxMetricsFactory)}.",
                "- *",
                "- * == OSGi",
                "- *",
                "- * Vert.x Core is packaged as an OSGi bundle, so can be used in any OSGi R4.2+ environment such as Apache Felix",
                "- * or Eclipse Equinox. The bundle exports `io.vertx.core*`.",
                "- *",
                "- * However, the bundle has some dependencies on Jackson and Netty. To get the vert.x core bundle resolved deploy:",
                "- *",
                "- * * Jackson Annotation [2.6.0,3)",
                "- * * Jackson Core [2.6.2,3)",
                "- * * Jackson Databind [2.6.2,3)",
                "- * * Netty Buffer [4.0.31,5)",
                "- * * Netty Codec [4.0.31,5)",
                "- * * Netty Codec/Socks [4.0.31,5)",
                "- * * Netty Codec/Common [4.0.31,5)",
                "- * * Netty Codec/Handler [4.0.31,5)",
                "- * * Netty Codec/Transport [4.0.31,5)",
                "- *",
                "- * Here is a working deployment on Apache Felix 5.2.0:",
                "- *",
                "- *[source]",
                "- *----",
                "- * 14|Active     |    1|Jackson-annotations (2.6.0)",
                "- * 15|Active     |    1|Jackson-core (2.6.2)",
                "- * 16|Active     |    1|jackson-databind (2.6.2)",
                "- * 18|Active     |    1|Netty/Buffer (4.0.31.Final)",
                "- * 19|Active     |    1|Netty/Codec (4.0.31.Final)",
                "- * 20|Active     |    1|Netty/Codec/HTTP (4.0.31.Final)",
                "- * 21|Active     |    1|Netty/Codec/Socks (4.0.31.Final)",
                "- * 22|Active     |    1|Netty/Common (4.0.31.Final)",
                "- * 23|Active     |    1|Netty/Handler (4.0.31.Final)",
                "- * 24|Active     |    1|Netty/Transport (4.0.31.Final)",
                "- * 25|Active     |    1|Netty/Transport/SCTP (4.0.31.Final)",
                "- * 26|Active     |    1|Vert.x Core (3.1.0)",
                "- *----",
                "- *",
                "- * On Equinox, you may want to disable the `ContextFinder` with the following framework property:",
                "- * `eclipse.bundle.setTCCL=false`",
                "- *",
                "- *",
                "- * == The 'vertx' command line",
                "- *",
                "- * The `vertx` command is used to interact with Vert.x from the command line. It's main use is to run Vert.x verticles.",
                "- * To do this you need to download and install a Vert.x distribution, and add the `bin` directory of the installation",
                "- * to your `PATH` environment variable. Also make sure you have a Java 8 JDK on your `PATH`.",
                "- *",
                "- * NOTE: The JDK is required to support on the fly compilation of Java code.",
                "- *",
                "- * === Run verticles",
                "- *",
                "- * You can run raw Vert.x verticles directly from the command line using `vertx run`. Here is a couple of examples of",
                "- * the `run` _command_:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my-verticle.js                                 (1)",
                "- * vertx run my-verticle.groovy                             (2)",
                "- * vertx run my-verticle.rb                                 (3)",
                "- *",
                "- * vertx run io.vertx.example.MyVerticle                    (4)",
                "- * vertx run io.vertx.example.MVerticle -cp my-verticle.jar (5)",
                "- *",
                "- * vertx run MyVerticle.java                                (6)",
                "- * ----",
                "- * 1. Deploys a JavaScript verticle",
                "- * 2. Deploys a Groovy verticle",
                "- * 3. Deploys a Ruby verticle",
                "- * 4. Deploys an already compiled Java verticle. Classpath root is the current directory",
                "- * 5. Deploys a verticle packaged in a Jar, the jar need to be in the classpath",
                "- * 6. Compiles the Java source and deploys it",
                "- *",
                "- * As you can see in the case of Java, the name can either be the fully qualified class name of the verticle, or",
                "- * you can specify the Java Source file directly and Vert.x compiles it for you.",
                "- *",
                "- * You can also prefix the verticle with the name of the language implementation to use. For example if the verticle is",
                "- * a compiled Groovy class, you prefix it with `groovy:` so that Vert.x knows it's a Groovy class not a Java class.",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run groovy:io.vertx.example.MyGroovyVerticle",
                "- * ----",
                "- *",
                "- * The `vertx run` command can take a few optional parameters, they are:",
                "- *",
                "- *  * `-conf <config_file>` - Provides some configuration to the verticle. `config_file` is the name of a text file",
                "- *  containing a JSON object that represents the configuration for the verticle. This is optional.",
                "- *  * `-cp <path>` - The path on which to search for the verticle and any other resources used by the verticle. This",
                "- *  defaults to `.` (current directory). If your verticle references other scripts, classes or other resources",
                "- *  (e.g. jar files) then make sure these are on this path. The path can contain multiple path entries separated by",
                "- *  `:` (colon) or `;` (semi-colon) depending on the operating system. Each path entry can be an absolute or relative",
                "- *  path to a directory containing scripts, or absolute or relative filenames for jar or zip files. An example path",
                "- *  might be `-cp classes:lib/otherscripts:jars/myjar.jar:jars/otherjar.jar`. Always use the path to reference any",
                "- *  resources that your verticle requires. Do **not** put them on the system classpath as this can cause isolation",
                "- *  issues between deployed verticles.",
                "- * * `-instances <instances>`  - The number of instances of the verticle to instantiate. Each verticle instance is",
                "- * strictly single threaded so to scale your application across available cores you might want to deploy more than",
                "- * one instance. If omitted a single instance will be deployed.",
                "- *  * `-worker` - This option determines whether the verticle is a worker verticle or not.",
                "- *  * `-cluster` -  This option determines whether the Vert.x instance will attempt to form a cluster with other Vert.x",
                "- *  instances on the network. Clustering Vert.x instances allows Vert.x to form a distributed event bus with",
                "- *  other nodes. Default is `false` (not clustered).",
                "- *  * `-cluster-port` - If the cluster option has also been specified then this determines which port will be used for",
                "- *  cluster communication with other Vert.x instances. Default is `0` - which means '_choose a free random port_'. You",
                "- *  don't usually need to specify this parameter unless you really need to bind to a specific port.",
                "- *  * `-cluster-host` - If the cluster option has also been specified then this determines which host address will be",
                "- *  used for cluster communication with other Vert.x instances. By default it will try and pick one from the available",
                "- *  interfaces. If you have more than one interface and you want to use a specific one, specify it here.",
                "- *  * `-ha` - if specified the verticle will be deployed as  high availability (HA) deployment. See related section",
                "- *  for more details",
                "- *  * `-quorum` - used in conjunction with `-ha`. It specifies the minimum number of nodes in the cluster for any _HA",
                "- *  deploymentIDs_ to be active. Defaults to 0.",
                "- *  * `-hagroup` - used in conjunction with `-ha`. It specifies the HA group this node will join. There can be",
                "- *  multiple HA groups in a cluster. Nodes will only failover to other nodes in the same group. The default value is `",
                "- *  +++__DEFAULT__+++`",
                "- *",
                "- * You can also set system properties using: `-Dkey=value`.",
                "- *",
                "- * Here are some more examples:",
                "- *",
                "- * Run a JavaScript verticle server.js with default settings",
                "- * [source]",
                "- * ----",
                "- * vertx run server.js",
                "- * ----",
                "- *",
                "- * Run 10 instances of a pre-compiled Java verticle specifying classpath",
                "- * [source]",
                "- * ----",
                "- * vertx run com.acme.MyVerticle -cp \"classes:lib/myjar.jar\" -instances 10",
                "- * ----",
                "- *",
                "- * Run 10 instances of a Java verticle by source _file_",
                "- * [source]",
                "- * ----",
                "- * vertx run MyVerticle.java -instances 10",
                "- * ----",
                "- *",
                "- * Run 20 instances of a ruby worker verticle",
                "- * [source]",
                "- * ----",
                "- * vertx run order_worker.rb -instances 20 -worker",
                "- * ----",
                "- *",
                "- * Run two JavaScript verticles on the same machine and let them cluster together with each other and any other servers",
                "- * on the network",
                "- * [source]",
                "- * ----",
                "- * vertx run handler.js -cluster",
                "- * vertx run sender.js -cluster",
                "- * ----",
                "- *",
                "- * Run a Ruby verticle passing it some config",
                "- * [source]",
                "- * ----",
                "- * vertx run my_verticle.rb -conf my_verticle.conf",
                "- * ----",
                "- * Where `my_verticle.conf` might contain something like:",
                "- *",
                "- * [source, json]",
                "- * ----",
                "- * {",
                "- *  \"name\": \"foo\",",
                "- *  \"num_widgets\": 46",
                "- * }",
                "- * ----",
                "- *",
                "- * The config will be available inside the verticle via the core API.",
                "- *",
                "- * When using the high-availability feature of vert.x you may want to create a _bare_ instance of vert.x. This",
                "- * instance does not deploy any verticles when launched, but will receive a verticle if another node of the cluster",
                "- * dies. To create a _bare_ instance, launch:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx bare",
                "- * ----",
                "- *",
                "- * Depending on your cluster configuration, you may have to append the `cluster-host` and `cluster-port` parameters.",
                "- *",
                "- * === Executing a Vert.x application packaged as a fat jar",
                "- *",
                "- * A _fat jar_ is an executable jar embedding its dependencies. This means you don't have to have Vert.x pre-installed",
                "- * on the machine on which you execute the jar. Like any executable Java jar it can be executed with.",
                "- *",
                "- * [source]",
                "- * ----",
                "- * java -jar my-application-fat.jar",
                "- * ----",
                "- *",
                "- * There is nothing really Vert.x specific about this, you could do this with any Java application",
                "- *",
                "- * You can either create your own main class and specify that in the manifest, but it's recommended that you write your",
                "- * code as verticles and use the Vert.x {@link io.vertx.core.Launcher} class (`io.vertx.core.Launcher`) as your main",
                "- * class. This is the same main class used when running Vert.x at the command line and therefore allows you to",
                "- * specify command line arguments, such as `-instances` in order to scale your application more easily.",
                "- *",
                "- * To deploy your verticle in a _fatjar_ like this you must have a _manifest_ with:",
                "- *",
                "- * * `Main-Class` set to `io.vertx.core.Launcher`",
                "- * * `Main-Verticle` specifying the main verticle (fully qualified class name or script file name)",
                "- *",
                "- * You can also provide the usual command line arguments that you would pass to `vertx run`:",
                "- * [source]",
                "- * ----",
                "- * java -jar my-verticle-fat.jar -cluster -conf myconf.json",
                "- * java -jar my-verticle-fat.jar -cluster -conf myconf.json -cp path/to/dir/conf/cluster_xml",
                "- * ----",
                "- *",
                "- * NOTE: Please consult the Maven/Gradle simplest and Maven/Gradle verticle examples in the examples repository for",
                "- * examples of building applications as fatjars.",
                "- *",
                "- * A fat jar executes the `run` command, by default.",
                "- *",
                "- * === Displaying version of Vert.x",
                "- * To display the vert.x version, just launch:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx version",
                "- * ----",
                "- *",
                "- * === Other commands",
                "- *",
                "- * The `vertx` command line and the `Launcher` also provide other _commands_ in addition to `run` and `version`:",
                "- *",
                "- * You can create a `bare` instance using:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx bare",
                "- * # or",
                "- * java -jar my-verticle-fat.jar bare",
                "- * ----",
                "- *",
                "- * You can also start an application in background using:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * java -jar my-verticle-fat.jar start -Dvertx-id=my-app-name",
                "- * ----",
                "- *",
                "- * If `my-app-name` is not set, a random id will be generated, and printed on the command prompt. You can pass `run`",
                "- * options to the `start` command:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * java -jar my-verticle-fat.jar start -Dvertx-id=my-app-name -cluster",
                "- * ----",
                "- *",
                "- * Once launched in background, you can stop it with the `stop` command:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * java -jar my-verticle-fat.jar stop my-app-name",
                "- * ----",
                "- *",
                "- * You can also list the vert.x application launched in background using:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * java -jar my-verticle-fat.jar list",
                "- * ----",
                "- *",
                "- * The `start`, `stop` and `list` command are also available from the `vertx` tool. The start` command supports a couple of options:",
                "- *",
                "- *  * `vertx-id` : the application id, uses a random UUID if not set",
                "- *  * `java-opts` : the Java Virtual Machine options, uses the `JAVA_OPTS` environment variable if not set.",
                "- *  * `redirect-output` : redirect the spawned process output and error streams to the parent process streams.",
                "- *",
                "- *  If option values contain spaces, don't forget to wrap the value between {@code \"\"} (double-quotes).",
                "- *",
                "- *  As the `start` command spawns a new process, the java options passed to the JVM are not propagated, so you **must**",
                "- *  use `java-opts` to configure the JVM (`-X`, `-D`...). If you use the `CLASSPATH` environment variable, be sure it",
                "- *  contains all the required jars (vertx-core, your jars and all the dependencies).",
                "- *",
                "- * The set of commands is extensible, refer to the <<Extending the vert.x Launcher>> section.",
                "- *",
                "- * === Live Redeploy",
                "- *",
                "- * When developing it may be convenient to automatically redeploy your application upon file changes. The `vertx`",
                "- * command line tool and more generally the {@link io.vertx.core.Launcher} class offers this feature. Here are some",
                "- * examples:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run MyVerticle.groovy --redeploy=\"**&#47;*.groovy\" --launcher-class=io.vertx.core.Launcher",
                "- * vertx run MyVerticle.groovy --redeploy=\"**&#47;*.groovy,**&#47;*.rb\"  --launcher-class=io.vertx.core.Launcher",
                "- * java io.vertx.core.Launcher run org.acme.MyVerticle --redeploy=\"**&#47;*.class\"  --launcher-class=io.vertx.core",
                "- * .Launcher -cp ...",
                "- * ----",
                "- *",
                "- * The redeployment process is implemented as follows. First your application is launched as a background application",
                "- * (with the `start` command). On matching file changes, the process is stopped and the application is restarted.",
                "- * This avoids leaks, as the process is restarted.",
                "- *",
                "- * To enable the live redeploy, pass the `--redeploy` option to the `run` command. The `--redeploy` indicates the",
                "- * set of file to _watch_. This set can use Ant-style patterns (with `\\**`, `*` and `?`). You can specify",
                "- * several sets by separating them using a comma (`,`). Patterns are relative to the current working directory.",
                "- *",
                "- * Parameters passed to the `run` command are passed to the application. Java Virtual Machine options can be",
                "- * configured using `--java-opts`. For instance, to pass the the `conf` parameter or a system property, you need to",
                "- * use: `--java-opts=\"-conf=my-conf.json -Dkey=value\"`",
                "- *",
                "- * The `--launcher-class` option determine with with _main_ class the application is launcher. It's generally",
                "- * {@link io.vertx.core.Launcher}, but you have use you own _main_.",
                "- *",
                "- * The redeploy feature can be used in your IDE:",
                "- *",
                "- * * Eclipse - create a _Run_ configuration, using the `io.vertx.core.Launcher` class a _main class_. In the _Program",
                "- * arguments_ area (in the _Arguments_ tab), write `run your-verticle-fully-qualified-name --redeploy=\\**&#47;*.java",
                "- * --launcher-class=io.vertx.core.Launcher`. You can also add other parameters. The redeployment works smoothly as",
                "- * Eclipse incrementally compiles your files on save.",
                "- * * IntelliJ - create a _Run_ configuration (_Application_), set the _Main class_ to `io.vertx.core.Launcher`. In",
                "- * the Program arguments write: `run your-verticle-fully-qualified-name --redeploy=\\**&#47;*.class",
                "- * --launcher-class=io.vertx.core.Launcher`. To trigger the redeployment, you need to _make_ the project or",
                "- * the module explicitly (_Build_ menu -> _Make project_).",
                "- *",
                "- * To debug your application, create your run configuration as a remote application and configure the debugger",
                "- * using `--java-opts`. However, don't forget to re-plug the debugger after every redeployment as a new process is",
                "- * created every time.",
                "- *",
                "- * You can also hook your build process in the redeploy cycle:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * java -jar target/my-fat-jar.jar --redeploy=\"**&#47;*.java\" --on-redeploy=\"mvn package\"",
                "- * java -jar build/libs/my-fat-jar.jar --redeploy=\"src&#47;**&#47;*.java\" --on-redeploy='./gradlew shadowJar'",
                "- * ----",
                "- *",
                "- * The \"on-redeploy\" option specifies a command invoked after the shutdown of the application and before the",
                "- * restart. So you can hook your build tool if it updates some runtime artifacts. For instance, you can launch `gulp`",
                "- * or `grunt` to update your resources. Don't forget that passing parameters to your application requires the",
                "- * `--java-opts` param:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * java -jar target/my-fat-jar.jar --redeploy=\"**&#47;*.java\" --on-redeploy=\"mvn package\" --java-opts=\"-Dkey=val\"",
                "- * java -jar build/libs/my-fat-jar.jar --redeploy=\"src&#47;**&#47;*.java\" --on-redeploy='./gradlew shadowJar' --java-opts=\"-Dkey=val\"",
                "- * ----",
                "- *",
                "- * The redeploy feature also supports the following settings:",
                "- *",
                "- * * `redeploy-scan-period` : the file system check period (in milliseconds), 250ms by default",
                "- * * `redeploy-grace-period` : the amount of time (in milliseconds) to wait between 2 re-deployments, 1000ms by default",
                "- * * `redeploy-termination-period` : the amount of time to wait after having stopped the application (before",
                "- * launching user command). This is useful on Windows, where the process is not killed immediately. The time is given",
                "- * in milliseconds. 0 ms by default.",
                "- *",
                "- * == Cluster Managers",
                "- *",
                "- * In Vert.x a cluster manager is used for various functions including:",
                "- *",
                "- * * Discovery and group membership of Vert.x nodes in a cluster",
                "- * * Maintaining cluster wide topic subscriber lists (so we know which nodes are interested in which event bus addresses)",
                "- * * Distributed Map support",
                "- * * Distributed Locks",
                "- * * Distributed Counters",
                "- *",
                "- * Cluster managers _do not_ handle the event bus inter-node transport, this is done directly by Vert.x with TCP connections.",
                "- *",
                "- * The default cluster manager used in the Vert.x distributions is one that uses http://hazelcast.com[Hazelcast] but this",
                "- * can be easily replaced by a different implementation as Vert.x cluster managers are pluggable.",
                "- *",
                "- * A cluster manager must implement the interface {@link io.vertx.core.spi.cluster.ClusterManager}. Vert.x locates",
                "- * cluster managers at run-time by using the Java",
                "- * https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html[Service Loader] functionality to locate",
                "- * instances of {@link io.vertx.core.spi.cluster.ClusterManager} on the classpath.",
                "- *",
                "- * If you are using Vert.x at the command line and you want to use clustering you should make sure the `lib` directory",
                "- * of the Vert.x installation contains your cluster manager jar.",
                "- *",
                "- * If you are using Vert.x from a Maven or Gradle project just add the cluster manager jar as a dependency of your project.",
                "- *",
                "- * You can also specify cluster managers programmatically if embedding Vert.x using",
                "- * {@link io.vertx.core.VertxOptions#setClusterManager(io.vertx.core.spi.cluster.ClusterManager)}.",
                "- *",
                "- * == Logging",
                "- *",
                "- * Vert.x logs using it's in-built logging API. The default implementation uses the JDK (JUL) logging so no extra",
                "- * logging dependencies are needed.",
                "- *",
                "- * === Configuring JUL logging",
                "- *",
                "- * A JUL logging configuration file can be specified in the normal JUL way by providing a system property called:",
                "- * `java.util.logging.config.file` with the value being your configuration file. For more information on this and",
                "- * the structure of a JUL config file please consult the JUL logging documentation.",
                "- *",
                "- * Vert.x also provides a slightly more convenient way to specify a configuration file without having to set a system",
                "- * property. Just provide a JUL config file with the name `vertx-default-jul-logging.properties` on your classpath (e.g.",
                "- * inside your fatjar) and Vert.x will use that to configure JUL.",
                "- *",
                "- * === Using another logging framework",
                "- *",
                "- * If you don't want Vert.x to use JUL for it's own logging you can configure it to use another logging framework, e.g.",
                "- * Log4J or SLF4J.",
                "- *",
                "- * To do this you should set a system property called `vertx.logger-delegate-factory-class-name` with the name of a Java",
                "- * class which implements the interface {@link io.vertx.core.spi.logging.LogDelegateFactory}. We provide pre-built",
                "- * implementations for Log4J (version 1), Log4J 2 and SLF4J with the class names",
                "- * `io.vertx.core.logging.Log4jLogDelegateFactory`, `io.vertx.core.logging.Log4j2LogDelegateFactory` and",
                "- * `io.vertx.core.logging.SLF4JLogDelegateFactory` respectively. If you want to use these implementations you should",
                "- * also make sure the relevant Log4J or SLF4J jars are on your classpath.",
                "- *",
                "- * Notice that, the provided delegate for Log4J 1 does not support parameterized message. The delegate for Log4J 2",
                "- * uses the `{}` syntax like the SLF4J delegate. JUL delegate uses the `{x}` syntax.",
                "- *",
                "- * === Logging from your application",
                "- *",
                "- * Vert.x itself is just a library and you can use whatever logging library you prefer to log from your own application,",
                "- * using that logging library's API.",
                "- *",
                "- * However, if you prefer you can use the Vert.x logging facility as described above to provide logging for your",
                "- * application too.",
                "- *",
                "- * To do that you use {@link io.vertx.core.logging.LoggerFactory} to get an instance of {@link io.vertx.core.logging.Logger}",
                "- * which you then use for logging, e.g.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#example18}",
                "- * ----",
                "- *",
                "- * CAUTION: Logging backends use different formats to represent replaceable tokens in parameterized messages.",
                "- * As a consequence, if you rely on Vert.x parameterized logging methods, you won't be able to switch backends without changing your code.",
                "- *",
                "- * [[netty-logging]]",
                "- * === Netty logging",
                "- *",
                "- * When configuring logging, you should care about configuring Netty logging as well.",
                "- *",
                "- * Netty does not rely on external logging configuration (e.g system properties) and instead implements a logging",
                "- * configuration based on the logging libraries visible from the Netty classes:",
                "- *",
                "- * - use `SLF4J` library if it is visible",
                "- * - otherwise use `Log4j` if it is visible",
                "- * - otherwise fallback `java.util.logging`",
                "- *",
                "- * The logger implementation can be forced to a specific implementation by setting Netty's internal logger implementation directly",
                "- * on `io.netty.util.internal.logging.InternalLoggerFactory`:",
                "- *",
                "- * [source,java]",
                "- * ----",
                "- * // Force logging to Log4j",
                "- * InternalLoggerFactory.setDefaultFactory(Log4JLoggerFactory.INSTANCE);",
                "- * ----",
                "- *",
                "- * === Troubleshooting",
                "- *",
                "- * ==== SLF4J warning at startup",
                "- *",
                "- * If, when you start your application, you see the following message:",
                "- *",
                "- * ----",
                "- * SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".",
                "- * SLF4J: Defaulting to no-operation (NOP) logger implementation",
                "- * SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.",
                "- * ----",
                "- *",
                "- * It means that you have SLF4J-API in your classpath but no actual binding. Messages logged with SLF4J will be dropped.",
                "- * You should add a binding to your classpath. Check https://www.slf4j.org/manual.html#swapping to pick a binding and configure it.",
                "- *",
                "- * Be aware that Netty looks for the SLF4-API jar and uses it by default.",
                "- *",
                "- * ==== Connection reset by peer",
                "- *",
                "- * If your logs show a bunch of:",
                "- *",
                "- * ----",
                "- * io.vertx.core.net.impl.ConnectionBase",
                "- * SEVERE: java.io.IOException: Connection reset by peer",
                "- * ----",
                "- *",
                "- * It means that the client is resetting the HTTP connection instead of closing it. This message also indicates that you",
                "- * may have not consumed the complete payload (the connection was cut before you were able to).",
                "- *",
                "- * == Host name resolution",
                "- *",
                "- * Vert.x uses an an address resolver for resolving host name into IP addresses instead of",
                "- * the JVM built-in blocking resolver.",
                "- *",
                "- * An host name resolves to an IP address using:",
                "- *",
                "- * - the _hosts_ file of the operating system",
                "- * - otherwise DNS queries against a list of servers",
                "- *",
                "- * By default it will use the list of the system DNS server addresses from the environment, if that list cannot be",
                "- * retrieved it will use Google's public DNS servers `\"8.8.8.8\"` and `\"8.8.4.4\"`.",
                "- *",
                "- * DNS servers can be also configured when creating a {@link io.vertx.core.Vertx} instance:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#configureDNSServers}",
                "- * ----",
                "- *",
                "- * The default port of a DNS server is `53`, when a server uses a different port, this port can be set",
                "- * using a colon delimiter: `192.168.0.2:40000`.",
                "- *",
                "- * NOTE: sometimes it can be desirable to use the JVM built-in resolver, the JVM system property",
                "- * _-Dvertx.disableDnsResolver=true_ activates this behavior",
                "- *",
                "- * === Failover",
                "- *",
                "- * When a server does not reply in a timely manner, the resolver will try the next one from the list, the search",
                "- * is limited by {@link io.vertx.core.dns.AddressResolverOptions#setMaxQueries(int)} (the default value is `4` queries).",
                "- *",
                "- * A DNS query is considered as failed when the resolver has not received a correct answer within",
                "- * {@link io.vertx.core.dns.AddressResolverOptions#getQueryTimeout()} milliseconds (the default value is `5` seconds).",
                "- *",
                "- * === Server list rotation",
                "- *",
                "- * By default the dns server selection uses the first one, the remaining servers are used for failover.",
                "- *",
                "- * You can configure {@link io.vertx.core.dns.AddressResolverOptions#setRotateServers(boolean)} to `true` to let",
                "- * the resolver perform a round-robin selection instead. It spreads the query load among the servers and avoids",
                "- * all lookup to hit the first server of the list.",
                "- *",
                "- * Failover still applies and will use the next server in the list.",
                "- *",
                "- * === Hosts mapping",
                "- *",
                "- * The _hosts_ file of the operating system is used to perform an hostname lookup for an ipaddress.",
                "- *",
                "- * An alternative _hosts_ file can be used instead:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#configureHosts}",
                "- * ----",
                "- *",
                "- * === Search domains",
                "- *",
                "- * By default the resolver will use the system DNS search domains from the environment. Alternatively an explicit search domain",
                "- * list can be provided:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#configureSearchDomains()}",
                "- * ----",
                "- *",
                "- * When a search domain list is used, the threshold for the number of dots is {@code 1} or loaded from `/etc/resolv.conf`",
                "- * on Linux, it can be configured to a specific value with {@link io.vertx.core.dns.AddressResolverOptions#setNdots(int)}.",
                "- *",
                "- * == High Availability and Fail-Over",
                "- *",
                "- * Vert.x allows you to run your verticles with high availability (HA) support. In that case, when a vert.x",
                "- * instance running a verticle dies abruptly, the verticle is migrated to another vertx instance. The vert.x",
                "- * instances must be in the same cluster.",
                "- *",
                "- * === Automatic failover",
                "- *",
                "- * When vert.x runs with _HA_ enabled, if a vert.x instance where a verticle runs fails or dies, the verticle is",
                "- * redeployed automatically on another vert.x instance of the cluster. We call this _verticle fail-over_.",
                "- *",
                "- * To run vert.x with the _HA_ enabled, just add the `-ha` flag to the command line:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my-verticle.js -ha",
                "- * ----",
                "- *",
                "- * Now for HA to work, you need more than one Vert.x instances in the cluster, so let's say you have another",
                "- * Vert.x instance that you have already started, for example:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my-other-verticle.js -ha",
                "- * ----",
                "- *",
                "- * If the Vert.x instance that is running `my-verticle.js` now dies (you can test this by killing the process",
                "- * with `kill -9`), the Vert.x instance that is running `my-other-verticle.js` will automatic deploy `my-verticle",
                "- * .js` so now that Vert.x instance is running both verticles.",
                "- *",
                "- * NOTE: the migration is only possible if the second vert.x instance has access to the verticle file (here",
                "- * `my-verticle.js`).",
                "- *",
                "- * IMPORTANT: Please note that cleanly closing a Vert.x instance will not cause failover to occur, e.g. `CTRL-C`",
                "- * or `kill -SIGINT`",
                "- *",
                "- * You can also start _bare_ Vert.x instances - i.e. instances that are not initially running any verticles, they",
                "- * will also failover for nodes in the cluster. To start a bare instance you simply do:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run -ha",
                "- * ----",
                "- *",
                "- * When using the `-ha` switch you do not need to provide the `-cluster` switch, as a cluster is assumed if you",
                "- * want HA.",
                "- *",
                "- * NOTE: depending on your cluster configuration, you may need to customize the cluster manager configuration",
                "- * (Hazelcast by default), and/or add the `cluster-host` and `cluster-port` parameters.",
                "- *",
                "- * === HA groups",
                "- *",
                "- * When running a Vert.x instance with HA you can also optional specify a _HA group_. A HA group denotes a",
                "- * logical group of nodes in the cluster. Only nodes with the same HA group will failover onto one another. If",
                "- * you don't specify a HA group the default group `+++__DEFAULT__+++` is used.",
                "- *",
                "- * To specify an HA group you use the `-hagroup` switch when running the verticle, e.g.",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my-verticle.js -ha -hagroup my-group",
                "- * ----",
                "- *",
                "- * Let's look at an example:",
                "- *",
                "- * In a first terminal:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my-verticle.js -ha -hagroup g1",
                "- * ----",
                "- *",
                "- * In a second terminal, let's run another verticle using the same group:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my-other-verticle.js -ha -hagroup g1",
                "- * ----",
                "- *",
                "- * Finally, in a third terminal, launch another verticle using a different group:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run yet-another-verticle.js -ha -hagroup g2",
                "- * ----",
                "- *",
                "- * If we kill the instance in terminal 1, it will fail over to the instance in terminal 2, not the instance in",
                "- * terminal 3 as that has a different group.",
                "- *",
                "- * If we kill the instance in terminal 3, it won't get failed over as there is no other vert.x instance in that",
                "- * group.",
                "- *",
                "- * === Dealing with network partitions - Quora",
                "- *",
                "- * The HA implementation also supports quora. A quorum is the minimum number of votes that a distributed",
                "- * transaction has to obtain in order to be allowed to perform an operation in a distributed system.",
                "- *",
                "- * When starting a Vert.x instance you can instruct it that it requires a `quorum` before any HA deployments will",
                "- * be deployed. In this context, a quorum is a minimum number of nodes for a particular group in the cluster.",
                "- * Typically you chose your quorum size to `Q = 1 + N/2` where `N` is the number of nodes in the group. If there",
                "- * are less than `Q` nodes in the cluster the HA deployments will undeploy. They will redeploy again if/when a",
                "- * quorum is re-attained. By doing this you can prevent against network partitions, a.k.a. _split brain_.",
                "- *",
                "- * There is more information on quora http://en.wikipedia.org/wiki/Quorum_(distributed_computing)[here].",
                "- *",
                "- * To run vert.x instances with a quorum you specify `-quorum` on the command line, e.g.",
                "- *",
                "- * In a first terminal:",
                "- * [source]",
                "- * ----",
                "- * vertx run my-verticle.js -ha -quorum 3",
                "- * ----",
                "- *",
                "- * At this point the Vert.x instance will start but not deploy the module (yet) because there is only one node",
                "- * in the cluster, not 3.",
                "- *",
                "- * In a second terminal:",
                "- * [source]",
                "- * ----",
                "- * vertx run my-other-verticle.js -ha -quorum 3",
                "- * ----",
                "- *",
                "- * At this point the Vert.x instance will start but not deploy the module (yet) because there are only two nodes",
                "- * in the cluster, not 3.",
                "- *",
                "- * In a third console, you can start another instance of vert.x:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run yet-another-verticle.js -ha -quorum 3",
                "- * ----",
                "- *",
                "- * Yay! - we have three nodes, that's a quorum. At this point the modules will automatically deploy on all",
                "- * instances.",
                "- *",
                "- * If we now close or kill one of the nodes the modules will automatically undeploy on the other nodes, as there",
                "- * is no longer a quorum.",
                "- *",
                "- * Quora can also be used in conjunction with ha groups. In that case, quora are resolved for each particular",
                "- * group.",
                "- *",
                "- * == Native transports",
                "- *",
                "- * Vert.x can run with http://netty.io/wiki/native-transports.html[native transports] (when available) on BSD (OSX) and Linux:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#configureNative()}",
                "- * ----",
                "- *",
                "- * NOTE: preferring native transport will not prevent the application to execute, if your application requires native",
                "- * transport, you need to check {@link io.vertx.core.Vertx#isNativeTransportEnabled()}.",
                "- *",
                "- * === Native Linux Transport",
                "- *",
                "- * You need to add the following dependency in your classpath:",
                "- *",
                "- * [source,xml]",
                "- * ----",
                "- * <dependency>",
                "- *   <groupId>io.netty</groupId>",
                "- *   <artifactId>netty-transport-native-epoll</artifactId>",
                "- *   <version>4.1.15.Final</version>",
                "- *   <classifier>linux-x86_64</classifier>",
                "- * </dependency>",
                "- * ----",
                "- *",
                "- * Native on Linux gives you extra networking options:",
                "- *",
                "- * * SO_REUSEPORT",
                "- * * TCP_QUICKACK",
                "- * * TCP_CORK",
                "- * * TCP_FASTOPEN",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#configureLinuxOptions}",
                "- * ----",
                "- *",
                "- * === Native BSD Transport",
                "- *",
                "- * You need to add the following dependency in your classpath:",
                "- *",
                "- * [source,xml]",
                "- * ----",
                "- * <dependency>",
                "- *   <groupId>io.netty</groupId>",
                "- *   <artifactId>netty-transport-native-epoll</artifactId>",
                "- *   <version>4.1.15.Final</version>",
                "- *   <classifier>osx-x86_64</classifier>",
                "- * </dependency>",
                "- * ----",
                "- *",
                "- * MacOS Sierra and above are supported.",
                "- *",
                "- * Native on BSD gives you extra networking options:",
                "- *",
                "- * * SO_REUSEPORT",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#configureBSDOptions}",
                "- * ----",
                "- *",
                "- * === Domain sockets",
                "- *",
                "- * Natives provide support domain sockets for `NetServer`:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#serverWithDomainSockets}",
                "- * ----",
                "- *",
                "- * As well as `NetClient`:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.CoreExamples#clientWithDomainSockets}",
                "- * ----",
                "- *",
                "- * NOTE: support for `HttpServer` and `HttpClient` can be expected in later versions of Vert.x",
                "- *",
                "- * == Security notes",
                "- *",
                "- * Vert.x is a toolkit, not an opinionated framework where we force you to do things in a certain way. This gives you",
                "- * great power as a developer but with that comes great responsibility.",
                "- *",
                "- * As with any toolkit, it's possible to write insecure applications, so you should always be careful when developing",
                "- * your application especially if it's exposed to the public (e.g. over the internet).",
                "- *",
                "- * === Web applications",
                "- *",
                "- * If writing a web application it's highly recommended that you use Vert.x-Web instead of Vert.x core directly for",
                "- * serving resources and handling file uploads.",
                "- *",
                "- * Vert.x-Web normalises the path in requests to prevent malicious clients from crafting URLs to access resources",
                "- * outside of the web root.",
                "- *",
                "- * Similarly for file uploads Vert.x-Web provides functionality for uploading to a known place on disk and does not rely",
                "- * on the filename provided by the client in the upload which could be crafted to upload to a different place on disk.",
                "- *",
                "- * Vert.x core itself does not provide such checks so it would be up to you as a developer to implement them yourself.",
                "- *",
                "- * === Clustered event bus traffic",
                "- *",
                "- * When clustering the event bus between different Vert.x nodes on a network, the traffic is sent un-encrypted across the",
                "- * wire, so do not use this if you have confidential data to send and your Vert.x nodes are not on a trusted network.",
                "- *",
                "- * === Standard security best practices",
                "- *",
                "- * Any service can have potentially vulnerabilities whether it's written using Vert.x or any other toolkit so always",
                "- * follow security best practice, especially if your service is public facing.",
                "- *",
                "- * For example you should always run them in a DMZ and with an user account that has limited rights in order to limit",
                "- * the extent of damage in case the service was compromised.",
                "- *",
                "- * == Vert.x Command Line Interface API",
                "- *",
                "- * include::cli.adoc[]",
                "- *",
                "- * == The vert.x Launcher",
                "- *",
                "- * The vert.x {@link io.vertx.core.Launcher} is used in _fat jar_ as main class, and by the `vertx` command line",
                "- * utility. It executes a set of _commands_ such as _run_, _bare_, _start_...",
                "- *",
                "- * === Extending the vert.x Launcher",
                "- *",
                "- * You can extend the set of command by implementing your own {@link io.vertx.core.spi.launcher.Command} (in Java only):",
                "- *",
                "- * [source, java]",
                "- * ----",
                "- * &#64;Name(\"my-command\")",
                "- * &#64;Summary(\"A simple hello command.\")",
                "- * public class MyCommand extends DefaultCommand {",
                "- *",
                "- *   private String name;",
                "- *",
                "- *   &#64;Option(longName = \"name\", required = true)",
                "- *   public void setName(String n) {",
                "- *     this.name = n;",
                "- *   }",
                "- *",
                "- *   &#64;Override",
                "- *   public void run() throws CLIException {",
                "- *     System.out.println(\"Hello \" + name);",
                "- *   }",
                "- * }",
                "- * ----",
                "- *",
                "- * You also need an implementation of {@link io.vertx.core.spi.launcher.CommandFactory}:",
                "- *",
                "- * [source, java]",
                "- * ----",
                "- * public class HelloCommandFactory extends DefaultCommandFactory<HelloCommand> {",
                "- *   public HelloCommandFactory() {",
                "- *    super(HelloCommand.class);",
                "- *   }",
                "- * }",
                "- * ----",
                "- *",
                "- * Then, create the `src/main/resources/META-INF/services/io.vertx.core.spi.launcher.CommandFactory` and add a line",
                "- * indicating the fully qualified name of the factory:",
                "- *",
                "- * ----",
                "- * io.vertx.core.launcher.example.HelloCommandFactory",
                "- * ----",
                "- *",
                "- * Builds the jar containing the command. Be sure to includes the SPI file",
                "- * (`META-INF/services/io.vertx.core.spi.launcher.CommandFactory`).",
                "- *",
                "- * Then, place the jar containing the command into the classpath of your fat-jar (or include it inside) or in the `lib`",
                "- * directory of your vert.x distribution, and you would be able to execute:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx hello vert.x",
                "- * java -jar my-fat-jar.jar hello vert.x",
                "- * ----",
                "- *",
                "- * === Using the Launcher in fat jars",
                "- *",
                "- * To use the {@link io.vertx.core.Launcher} class in a _fat-jar_ just set the `Main-Class` of the _MANIFEST_ to",
                "- * `io.vertx.core.Launcher`. In addition, set the `Main-Verticle` _MANIFEST_ entry to the name of your main verticle.",
                "- *",
                "- * By default, it executed the `run` command. However, you can configure the default command by setting the",
                "- * `Main-Command` _MANIFEST_ entry. The default command is used if the _fat jar_ is launched without a command.",
                "- *",
                "- * === Sub-classing the Launcher",
                "- *",
                "- * You can also create a sub-class of {@link io.vertx.core.Launcher} to start your application. The class has been",
                "- * designed to be easily extensible.",
                "- *",
                "- * A {@link io.vertx.core.Launcher} sub-class can:",
                "- *",
                "- * * customize the vert.x configuration in {@link io.vertx.core.Launcher#beforeStartingVertx(io.vertx.core.VertxOptions)}",
                "- * * retrieve the vert.x instance created by the \"run\" or \"bare\" command by",
                "- * overriding {@link io.vertx.core.Launcher#afterStartingVertx(io.vertx.core.Vertx)}",
                "- * * configure the default verticle and command with",
                "- * {@link io.vertx.core.impl.launcher.VertxCommandLauncher#getMainVerticle()} and",
                "- * {@link io.vertx.core.impl.launcher.VertxCommandLauncher#getDefaultCommand()}",
                "- * * add / remove commands using {@link io.vertx.core.impl.launcher.VertxCommandLauncher#register(java.lang.Class)}",
                "- * and {@link io.vertx.core.impl.launcher.VertxCommandLauncher#unregister(java.lang.String)}",
                "- *",
                "- * === Launcher and exit code",
                "- *",
                "- * When you use the {@link io.vertx.core.Launcher} class as main class, it uses the following exit code:",
                "- *",
                "- * * {@code 0} if the process ends smoothly, or if an uncaught error is thrown",
                "- * * {@code 1} for general purpose error",
                "- * * {@code 11} if Vert.x cannot be initialized",
                "- * * {@code 12} if a spawn process cannot be started, found or stopped. This error code is used by the `start` and",
                "- * `stop` command",
                "- * * {@code 14} if the system configuration is not meeting the system requirement (shc as java not found)",
                "- * * {@code 15} if the main verticle cannot be deployed",
                "- *",
                "- * == Configuring Vert.x cache",
                "- *",
                "- * When Vert.x needs to read a file from the classpath (embedded in a fat jar, in a jar form the classpath or a file",
                "- * that is on the classpath), it copies it to a cache directory. The reason behind this is simple: reading a file",
                "- * from a jar or from an input stream is blocking. So to avoid to pay the price every time, Vert.x copies the file to",
                "- * its cache directory and reads it from there every subsequent read. This behavior can be configured.",
                "- *",
                "- * First, by default, Vert.x uses `$CWD/.vertx` as cache directory. It creates a unique directory inside this one to",
                "- * avoid conflicts. This location can be configured by using the `vertx.cacheDirBase` system property. For instance",
                "- * if the current working directory is not writable (such as in an immutable container context), launch your",
                "- * application with:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * vertx run my.Verticle -Dvertx.cacheDirBase=/tmp/vertx-cache",
                "- * # or",
                "- * java -jar my-fat.jar vertx.cacheDirBase=/tmp/vertx-cache",
                "- * ----",
                "- *",
                "- * IMPORTANT: the directory must be **writable**.",
                "- *",
                "- * When you are editing resources such as HTML, CSS or JavaScript, this cache mechanism can be annoying as it serves",
                "- * only the first version of the file (and so you won't see your edits if you reload your page). To avoid this",
                "- * behavior, launch your application with `-Dvertx.disableFileCaching=true`. With this setting, Vert.x still uses",
                "- * the cache, but always refresh the version stored in the cache with the original source. So if you edit a file",
                "- * served from the classpath and refresh your browser, Vert.x reads it from the classpath, copies it to the cache",
                "- * directory and serves it from there. Do not use this setting in production, it can kill your performances.",
                "- *",
                "- * Finally, you can disable completely the cache by using `-Dvertx.disableFileCPResolving=true`. This setting is not",
                "- * without consequences. Vert.x would be unable to read any files from the classpath (only from the file system). Be",
                "- * very careful when using this settings.",
                "- *",
                "- */",
                " @io.vertx.codegen.annotations.ModuleGen(name = \"vertx\", groupPackage = \"io.vertx\")",
                "diff --git a/src/main/java/io/vertx/core/parsetools/package-info.java b/src/main/java/io/vertx/core/parsetools/package-info.java",
                "index 8b9650ee5..e6f6816b6 100644",
                "--- a/src/main/java/io/vertx/core/parsetools/package-info.java",
                "+++ b/src/main/java/io/vertx/core/parsetools/package-info.java",
                "@@ -11,107 +11,2 @@",
                "-/**",
                "- * == Record Parser",
                "- *",
                "- * The record parser allows you to easily parse protocols which are delimited by a sequence of bytes, or fixed",
                "- * size records. It transforms a sequence of input buffer to a sequence of buffer structured as configured (either",
                "- * fixed size or separated records).",
                "- *",
                "- * For example, if you have a simple ASCII text protocol delimited by '\\n' and the input is the following:",
                "- *",
                "- * [source]",
                "- * ----",
                "- * buffer1:HELLO\\nHOW ARE Y",
                "- * buffer2:OU?\\nI AM",
                "- * buffer3: DOING OK",
                "- * buffer4:\\n",
                "- * ----",
                "- *",
                "- * The record parser would produce",
                "- *[source]",
                "- * ----",
                "- * buffer1:HELLO",
                "- * buffer2:HOW ARE YOU?",
                "- * buffer3:I AM DOING OK",
                "- * ----",
                "- *",
                "- * Let's see the associated code:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#recordParserExample1()}",
                "- * ----",
                "- *",
                "- * You can also produce fixed sized chunks as follows:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#recordParserExample2()}",
                "- * ----",
                "- *",
                "- * For more details, check out the {@link io.vertx.core.parsetools.RecordParser} class.",
                "- *",
                "- * == Json Parser",
                "- *",
                "- * You can easily parse JSON structures but that requires to provide the JSON content at once, but it",
                "- * may not be convenient when you need to parse very large structures.",
                "- *",
                "- * The non-blocking JSON parser is an event driven parser able to deal with very large structures.",
                "- * It transforms a sequence of input buffer to a sequence of JSON parse events.",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#jsonParserExample1()}",
                "- * ----",
                "- *",
                "- * The parser is non-blocking and emitted events are driven by the input buffers.",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#jsonParserExample2}",
                "- * ----",
                "- *",
                "- * Event driven parsing provides more control but comes at the price of dealing with fine grained events, which can be",
                "- * inconvenient sometimes. The JSON parser allows you to handle JSON structures as values when it is desired:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#jsonParserExample3}",
                "- * ----",
                "- *",
                "- * The value mode can be set and unset during the parsing allowing you to switch between fine grained",
                "- * events or JSON object value events.",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#jsonParserExample4}",
                "- * ----",
                "- *",
                "- * You can do the same with arrays as well",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#jsonParserExample5}",
                "- * ----",
                "- *",
                "- * You can also decode POJOs",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#jsonParserExample6}",
                "- * ----",
                "- *",
                "- * Whenever the parser fails to process a buffer, an exception will be thrown unless you set an exception handler:",
                "- *",
                "- * [source, $lang]",
                "- * ----",
                "- * {@link examples.ParseToolsExamples#jsonParserExample7}",
                "- * ----",
                "- *",
                "- * The parser also parses json streams:",
                "- *",
                "- * - concatenated json streams: `{\"temperature\":30}{\"temperature\":50}`",
                "- * - line delimited json streams: `{\"an\":\"object\"}\\r\\n3\\r\\n\"a string\"\\r\\nnull`",
                "- *",
                "- * For more details, check out the {@link io.vertx.core.parsetools.JsonParser} class.",
                "- */",
                " package io.vertx.core.parsetools;",
                "diff --git a/src/main/java/io/vertx/core/shareddata/package-info.java b/src/main/java/io/vertx/core/shareddata/package-info.java",
                "index e00572aac..5561caf70 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/package-info.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/package-info.java",
                "@@ -11,138 +11,2 @@",
                "-/**",
                "- * == Using Shared Data with Vert.x",
                "- *",
                "- * Shared data contains functionality that allows you to safely share data between different parts of your application,",
                "- * or different applications in the same Vert.x instance or across a cluster of Vert.x instances.",
                "- *",
                "- * Shared data provides:",
                "- *",
                "- *  * synchronous shared maps (local)",
                "- *  * asynchronous maps (local or cluster-wide)",
                "- *  * asynchronous locks (local or cluster-wide)",
                "- *  * asynchronous counters (local or cluster-wide)",
                "- *",
                "- * IMPORTANT: The behavior of the distributed data structure depends on the cluster manager you use. Backup",
                "- * (replication) and behavior when a network partition is faced are defined by the cluster manager and its",
                "- * configuration. Refer to the cluster manager documentation as well as to the underlying framework manual.",
                "- *",
                "- * === Local shared maps",
                "- *",
                "- * {@link io.vertx.core.shareddata.LocalMap Local shared maps} allow you to share data safely between different event",
                "- * loops (e.g. different verticles) in the same Vert.x instance.",
                "- *",
                "- * Local shared maps only allow certain data types to be used as keys and values. Those types must either be immutable,",
                "- * or certain other types that can be copied like {@link io.vertx.core.buffer.Buffer}. In the latter case the key/value",
                "- * will be copied before putting it in the map.",
                "- *",
                "- * This way we can ensure there is no _shared access to mutable state_ between different threads in your Vert.x application",
                "- * so you don't have to worry about protecting that state by synchronising access to it.",
                "- *",
                "- * Here's an example of using a shared local map:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.SharedDataExamples#example1}",
                "- * ----",
                "- *",
                "- * === Asynchronous shared maps",
                "- *",
                "- * Asynchronous shared maps allow data to be put in the map and retrieved locally when Vert.x is not clustered.",
                "- * When clustered, data can be put from any node and retrieved from the same node or any other node.",
                "- *",
                "- * IMPORTANT: In clustered mode, asynchronous shared maps rely on distributed data structures provided by the cluster manager.",
                "- * Beware that the latency relative to asynchronous shared map operations can be much higher in clustered than in local mode.",
                "- *",
                "- * This makes them really useful for things like storing session state in a farm of servers hosting a Vert.x web",
                "- * application.",
                "- *",
                "- * You get an instance of {@link io.vertx.core.shareddata.AsyncMap} with",
                "- * {@link io.vertx.core.shareddata.SharedData#getAsyncMap(java.lang.String, io.vertx.core.Handler)}.",
                "- *",
                "- * Getting the map is asynchronous and the result is returned to you in the handler that you specify. Here's an example:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.SharedDataExamples#example2}",
                "- * ----",
                "- *",
                "- * ==== Putting data in a map",
                "- *",
                "- * You put data in a map with {@link io.vertx.core.shareddata.AsyncMap#put(java.lang.Object, java.lang.Object, io.vertx.core.Handler)}.",
                "- *",
                "- * The actual put is asynchronous and the handler is notified once it is complete:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.SharedDataExamples#example3}",
                "- * ----",
                "- *",
                "- * ==== Getting data from a map",
                "- *",
                "- * You get data from a map with {@link io.vertx.core.shareddata.AsyncMap#get(java.lang.Object, io.vertx.core.Handler)}.",
                "- *",
                "- * The actual get is asynchronous and the handler is notified with the result some time later",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.SharedDataExamples#example4}",
                "- * ----",
                "- *",
                "- * ===== Other map operations",
                "- *",
                "- * You can also remove entries from an asynchronous map, clear them and get the size.",
                "- *",
                "- * See the {@link io.vertx.core.shareddata.AsyncMap API docs} for more information.",
                "- *",
                "- * === Asynchronous locks",
                "- *",
                "- * {@link io.vertx.core.shareddata.Lock Asynchronous locks} allow you to obtain exclusive locks locally or across the cluster -",
                "- * this is useful when you want to do something or access a resource on only one node of a cluster at any one time.",
                "- *",
                "- * Asynchronous locks have an asynchronous API unlike most lock APIs which block the calling thread until the lock",
                "- * is obtained.",
                "- *",
                "- * To obtain a lock use {@link io.vertx.core.shareddata.SharedData#getLock(java.lang.String, io.vertx.core.Handler)}.",
                "- *",
                "- * This won't block, but when the lock is available, the handler will be called with an instance of {@link io.vertx.core.shareddata.Lock},",
                "- * signifying that you now own the lock.",
                "- *",
                "- * While you own the lock no other caller, anywhere on the cluster will be able to obtain the lock.",
                "- *",
                "- * When you've finished with the lock, you call {@link io.vertx.core.shareddata.Lock#release()} to release it, so",
                "- * another caller can obtain it.",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.SharedDataExamples#example5}",
                "- * ----",
                "- *",
                "- * You can also get a lock with a timeout. If it fails to obtain the lock within the timeout the handler will be called",
                "- * with a failure:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.SharedDataExamples#example6}",
                "- * ----",
                "- *",
                "- * === Asynchronous counters",
                "- *",
                "- * It's often useful to maintain an atomic counter locally or across the different nodes of your application.",
                "- *",
                "- * You can do this with {@link io.vertx.core.shareddata.Counter}.",
                "- *",
                "- * You obtain an instance with {@link io.vertx.core.shareddata.SharedData#getCounter(java.lang.String, io.vertx.core.Handler)}:",
                "- *",
                "- * [source,$lang]",
                "- * ----",
                "- * {@link examples.SharedDataExamples#example7}",
                "- * ----",
                "- *",
                "- * Once you have an instance you can retrieve the current count, atomically increment it, decrement and add a value to",
                "- * it using the various methods.",
                "- *",
                "- * See the {@link io.vertx.core.shareddata.Counter API docs} for more information.",
                "- *",
                "- *",
                "- */",
                " package io.vertx.core.shareddata;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/buffer/package-info.java",
                "src/main/java/io/vertx/core/cli/annotations/package-info.java",
                "src/main/java/io/vertx/core/cli/package-info.java",
                "src/main/java/io/vertx/core/datagram/package-info.java",
                "src/main/java/io/vertx/core/dns/package-info.java",
                "src/main/java/io/vertx/core/eventbus/package-info.java",
                "src/main/java/io/vertx/core/file/package-info.java",
                "src/main/java/io/vertx/core/http/package-info.java",
                "src/main/java/io/vertx/core/net/package-info.java",
                "src/main/java/io/vertx/core/package-info.java",
                "src/main/java/io/vertx/core/parsetools/package-info.java",
                "src/main/java/io/vertx/core/shareddata/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/buffer/package-info.java, src/main/java/io/vertx/core/cli/package-info.java, src/main/java/io/vertx/core/http/package-info.java, src/main/java/io/vertx/core/cli/annotations/package-info.java, src/main/java/io/vertx/core/shareddata/package-info.java, src/main/java/io/vertx/core/dns/package-info.java, src/main/java/io/vertx/core/net/package-info.java, src/main/java/io/vertx/core/datagram/package-info.java, src/main/java/io/vertx/core/package-info.java, src/main/java/io/vertx/core/eventbus/package-info.java, src/main/java/io/vertx/core/parsetools/package-info.java, src/main/java/io/vertx/core/file/package-info.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "aa40d9b7b1c71e72079fc9a6c838918f8c2fd1cf",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1523286160,
            "hunks": 3,
            "message": "Minor typo",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "index 3d3f19929..3bd1b3cb3 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                "@@ -113,3 +113,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "   private static final String DISABLE_H2C_PROP_NAME = \"vertx.disableH2c\";",
                "-  private final boolean DISABLE_HC2 = Boolean.getBoolean(DISABLE_H2C_PROP_NAME);",
                "+  private final boolean DISABLE_H2C = Boolean.getBoolean(DISABLE_H2C_PROP_NAME);",
                "   private static final String[] H2C_HANDLERS_TO_REMOVE = { \"idle\", \"flashpolicy\", \"deflater\", \"chunkwriter\" };",
                "@@ -292,3 +292,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "               } else {",
                "-                if (DISABLE_HC2) {",
                "+                if (DISABLE_H2C) {",
                "                   handleHttp1(ch);",
                "@@ -449,3 +449,3 @@ public class HttpServerImpl implements HttpServer, Closeable, MetricsProvider {",
                "     }",
                "-    if (!DISABLE_HC2) {",
                "+    if (!DISABLE_H2C) {",
                "       pipeline.addLast(\"h2c\", new Http2UpgradeHandler());"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "76be0097b62039678692e90df6b6e0510b7286da",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526049721,
            "hunks": 47,
            "message": "Regen data object converters with correct indent",
            "diff": [
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index 91815b9e3..2650781c8 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -14,67 +14,67 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"config\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setConfig(((JsonObject)member.getValue()).copy());",
                "-            }",
                "-            break;",
                "-          case \"extraClasspath\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setExtraClasspath(list);",
                "-           }",
                "-            break;",
                "-          case \"ha\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setHa((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"instances\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setInstances(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"isolatedClasses\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setIsolatedClasses(list);",
                "-           }",
                "-            break;",
                "-          case \"isolationGroup\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setIsolationGroup((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"maxWorkerExecuteTime\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxWorkerExecuteTime(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"multiThreaded\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setMultiThreaded((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"worker\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setWorker((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"workerPoolName\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setWorkerPoolName((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"workerPoolSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setWorkerPoolSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "+        case \"config\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setConfig(((JsonObject)member.getValue()).copy());",
                "+          }",
                "+          break;",
                "+        case \"extraClasspath\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setExtraClasspath(list);",
                "+         }",
                "+          break;",
                "+        case \"ha\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setHa((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"instances\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setInstances(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"isolatedClasses\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setIsolatedClasses(list);",
                "+         }",
                "+          break;",
                "+        case \"isolationGroup\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setIsolationGroup((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"maxWorkerExecuteTime\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxWorkerExecuteTime(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"multiThreaded\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setMultiThreaded((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"worker\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setWorker((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"workerPoolName\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setWorkerPoolName((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"workerPoolSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setWorkerPoolSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -95,3 +95,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"extraClasspath\", array);",
                "-     }",
                "+    }",
                "       json.put(\"ha\", obj.isHa());",
                "@@ -102,3 +102,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"isolatedClasses\", array);",
                "-     }",
                "+    }",
                "     if (obj.getIsolationGroup() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index 9d74044c2..7d9101de4 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -14,112 +14,112 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"addressResolverOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setAddressResolverOptions(new io.vertx.core.dns.AddressResolverOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"blockedThreadCheckInterval\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setBlockedThreadCheckInterval(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterHost\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setClusterHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPingInterval\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setClusterPingInterval(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPingReplyInterval\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setClusterPingReplyInterval(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPort\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setClusterPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPublicHost\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setClusterPublicHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPublicPort\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setClusterPublicPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"clustered\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setClustered((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"eventBusOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setEventBusOptions(new io.vertx.core.eventbus.EventBusOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"eventLoopPoolSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setEventLoopPoolSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"fileResolverCachingEnabled\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setFileResolverCachingEnabled((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"haEnabled\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setHAEnabled((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"haGroup\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHAGroup((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"internalBlockingPoolSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setInternalBlockingPoolSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxEventLoopExecuteTime\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxEventLoopExecuteTime(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"maxWorkerExecuteTime\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxWorkerExecuteTime(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"metricsOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setMetricsOptions(new io.vertx.core.metrics.MetricsOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"preferNativeTransport\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setPreferNativeTransport((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"quorumSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setQuorumSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"warningExceptionTime\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setWarningExceptionTime(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"workerPoolSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setWorkerPoolSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "+        case \"addressResolverOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setAddressResolverOptions(new io.vertx.core.dns.AddressResolverOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"blockedThreadCheckInterval\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setBlockedThreadCheckInterval(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterHost\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setClusterHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPingInterval\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setClusterPingInterval(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPingReplyInterval\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setClusterPingReplyInterval(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPort\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setClusterPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPublicHost\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setClusterPublicHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPublicPort\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setClusterPublicPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"clustered\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setClustered((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"eventBusOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setEventBusOptions(new io.vertx.core.eventbus.EventBusOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"eventLoopPoolSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setEventLoopPoolSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"fileResolverCachingEnabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setFileResolverCachingEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"haEnabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setHAEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"haGroup\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHAGroup((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"internalBlockingPoolSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setInternalBlockingPoolSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxEventLoopExecuteTime\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxEventLoopExecuteTime(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"maxWorkerExecuteTime\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxWorkerExecuteTime(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"metricsOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setMetricsOptions(new io.vertx.core.metrics.MetricsOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"preferNativeTransport\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setPreferNativeTransport((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"quorumSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setQuorumSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"warningExceptionTime\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setWarningExceptionTime(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"workerPoolSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setWorkerPoolSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index fc4dd677c..5518d3439 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -14,37 +14,37 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"argName\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setArgName((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"defaultValue\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setDefaultValue((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"description\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setDescription((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"hidden\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setHidden((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"index\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setIndex(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"multiValued\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setMultiValued((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"required\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setRequired((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"argName\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setArgName((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"defaultValue\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setDefaultValue((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"description\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setDescription((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"hidden\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setHidden((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"index\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setIndex(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"multiValued\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setMultiValued((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"required\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setRequired((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index e4be84d20..95710c44d 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -14,69 +14,69 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"argName\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setArgName((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"choices\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setChoices(list);",
                "-           }",
                "-            break;",
                "-          case \"defaultValue\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setDefaultValue((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"description\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setDescription((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"flag\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setFlag((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"help\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setHelp((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"hidden\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setHidden((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"longName\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setLongName((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"multiValued\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setMultiValued((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"name\":",
                "-            break;",
                "-          case \"required\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setRequired((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"shortName\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setShortName((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"singleValued\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSingleValued((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"argName\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setArgName((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"choices\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setChoices(list);",
                "+         }",
                "+          break;",
                "+        case \"defaultValue\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setDefaultValue((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"description\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setDescription((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"flag\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setFlag((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"help\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setHelp((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"hidden\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setHidden((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"longName\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setLongName((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"multiValued\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setMultiValued((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"name\":",
                "+          break;",
                "+        case \"required\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setRequired((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"shortName\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setShortName((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"singleValued\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSingleValued((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -97,3 +97,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"choices\", array);",
                "-     }",
                "+    }",
                "     if (obj.getDefaultValue() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index 7d69b7049..d24c59d29 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -14,27 +14,27 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"broadcast\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setBroadcast((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"ipV6\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setIpV6((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"loopbackModeDisabled\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setLoopbackModeDisabled((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"multicastNetworkInterface\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setMulticastNetworkInterface((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"multicastTimeToLive\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMulticastTimeToLive(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "+        case \"broadcast\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setBroadcast((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"ipV6\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setIpV6((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"loopbackModeDisabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setLoopbackModeDisabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"multicastNetworkInterface\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMulticastNetworkInterface((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"multicastTimeToLive\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMulticastTimeToLive(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index 0d39b8a80..5397419a5 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -14,77 +14,77 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"cacheMaxTimeToLive\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setCacheMaxTimeToLive(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"cacheMinTimeToLive\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setCacheMinTimeToLive(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"cacheNegativeTimeToLive\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setCacheNegativeTimeToLive(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"hostsPath\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHostsPath((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"hostsValue\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHostsValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "-            }",
                "-            break;",
                "-          case \"maxQueries\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxQueries(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"ndots\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setNdots(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"optResourceEnabled\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setOptResourceEnabled((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"queryTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setQueryTimeout(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"rdFlag\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setRdFlag((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"rotateServers\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setRotateServers((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"searchDomains\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setSearchDomains(list);",
                "-           }",
                "-            break;",
                "-          case \"servers\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setServers(list);",
                "-           }",
                "-            break;",
                "+        case \"cacheMaxTimeToLive\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setCacheMaxTimeToLive(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"cacheMinTimeToLive\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setCacheMinTimeToLive(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"cacheNegativeTimeToLive\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setCacheNegativeTimeToLive(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"hostsPath\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHostsPath((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"hostsValue\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHostsValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+          }",
                "+          break;",
                "+        case \"maxQueries\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxQueries(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"ndots\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setNdots(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"optResourceEnabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setOptResourceEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"queryTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setQueryTimeout(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"rdFlag\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setRdFlag((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"rotateServers\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setRotateServers((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"searchDomains\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setSearchDomains(list);",
                "+         }",
                "+          break;",
                "+        case \"servers\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setServers(list);",
                "+         }",
                "+          break;",
                "       }",
                "@@ -117,3 +117,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"searchDomains\", array);",
                "-     }",
                "+    }",
                "     if (obj.getServers() != null) {",
                "@@ -122,3 +122,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"servers\", array);",
                "-     }",
                "+    }",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index d80c58ab3..e2131f73c 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -14,17 +14,17 @@ public class DnsClientOptionsConverter {",
                "       switch (member.getKey()) {",
                "-          case \"host\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"port\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"queryTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setQueryTimeout(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "+        case \"host\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"port\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"queryTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setQueryTimeout(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index c9a029b77..391f9dc0a 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -14,221 +14,221 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"acceptBacklog\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setAcceptBacklog(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"clientAuth\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"clusterPingInterval\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setClusterPingInterval(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPingReplyInterval\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setClusterPingReplyInterval(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPublicHost\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setClusterPublicHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"clusterPublicPort\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setClusterPublicPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"clustered\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setClustered((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"connectTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setConnectTimeout(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"crlPaths\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addCrlPath((String)item);",
                "-              });",
                "-           }",
                "-            break;",
                "-          case \"crlValues\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-              });",
                "-           }",
                "-            break;",
                "-          case \"enabledCipherSuites\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addEnabledCipherSuite((String)item);",
                "-              });",
                "-           }",
                "-            break;",
                "-          case \"enabledSecureTransportProtocols\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setEnabledSecureTransportProtocols(list);",
                "-           }",
                "-            break;",
                "-          case \"host\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"idleTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setIdleTimeout(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"jdkSslEngineOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"keyStoreOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"logActivity\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setLogActivity((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"openSslEngineOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pemKeyCertOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pemTrustOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pfxKeyCertOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pfxTrustOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"port\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"receiveBufferSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setReceiveBufferSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"reconnectAttempts\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setReconnectAttempts(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"reconnectInterval\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setReconnectInterval(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"reuseAddress\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setReuseAddress((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"reusePort\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setReusePort((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"sendBufferSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setSendBufferSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"soLinger\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setSoLinger(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"ssl\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSsl((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpCork\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpCork((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpFastOpen\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpFastOpen((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpKeepAlive\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpKeepAlive((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpNoDelay\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpNoDelay((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpQuickAck\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpQuickAck((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"trafficClass\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setTrafficClass(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"trustAll\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTrustAll((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"trustStoreOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"useAlpn\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setUseAlpn((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"usePooledBuffers\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setUsePooledBuffers((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"acceptBacklog\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setAcceptBacklog(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"clientAuth\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"clusterPingInterval\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setClusterPingInterval(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPingReplyInterval\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setClusterPingReplyInterval(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPublicHost\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setClusterPublicHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"clusterPublicPort\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setClusterPublicPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"clustered\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setClustered((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"connectTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setConnectTimeout(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"crlPaths\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addCrlPath((String)item);",
                "+            });",
                "+         }",
                "+          break;",
                "+        case \"crlValues\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+            });",
                "+         }",
                "+          break;",
                "+        case \"enabledCipherSuites\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addEnabledCipherSuite((String)item);",
                "+            });",
                "+         }",
                "+          break;",
                "+        case \"enabledSecureTransportProtocols\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setEnabledSecureTransportProtocols(list);",
                "+         }",
                "+          break;",
                "+        case \"host\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"idleTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setIdleTimeout(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"jdkSslEngineOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"keyStoreOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"logActivity\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setLogActivity((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"openSslEngineOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pemKeyCertOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pemTrustOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pfxKeyCertOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pfxTrustOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"port\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"receiveBufferSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setReceiveBufferSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"reconnectAttempts\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setReconnectAttempts(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"reconnectInterval\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setReconnectInterval(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"reuseAddress\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setReuseAddress((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"reusePort\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setReusePort((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"sendBufferSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setSendBufferSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"soLinger\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setSoLinger(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"ssl\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSsl((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpCork\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpCork((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpFastOpen\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpFastOpen((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpKeepAlive\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpKeepAlive((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpNoDelay\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpNoDelay((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpQuickAck\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpQuickAck((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"trafficClass\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setTrafficClass(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"trustAll\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTrustAll((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"trustStoreOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"useAlpn\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setUseAlpn((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"usePooledBuffers\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setUsePooledBuffers((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -258,3 +258,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"crlPaths\", array);",
                "-     }",
                "+    }",
                "     if (obj.getCrlValues() != null) {",
                "@@ -263,3 +263,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"crlValues\", array);",
                "-     }",
                "+    }",
                "     if (obj.getEnabledCipherSuites() != null) {",
                "@@ -268,3 +268,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledCipherSuites\", array);",
                "-     }",
                "+    }",
                "     if (obj.getEnabledSecureTransportProtocols() != null) {",
                "@@ -273,3 +273,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledSecureTransportProtocols\", array);",
                "-     }",
                "+    }",
                "     if (obj.getHost() != null) {",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index 940481452..0ff20edbc 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -14,22 +14,22 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"atomicMove\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setAtomicMove((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"copyAttributes\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setCopyAttributes((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"nofollowLinks\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setNofollowLinks((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"replaceExisting\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setReplaceExisting((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"atomicMove\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setAtomicMove((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"copyAttributes\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setCopyAttributes((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"nofollowLinks\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setNofollowLinks((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"replaceExisting\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setReplaceExisting((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index ac2b0b66e..e787fbd55 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -14,57 +14,57 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"append\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setAppend((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"create\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setCreate((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"createNew\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setCreateNew((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"deleteOnClose\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setDeleteOnClose((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"dsync\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setDsync((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"perms\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setPerms((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"read\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setRead((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"sparse\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSparse((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"sync\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSync((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"truncateExisting\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTruncateExisting((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"write\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setWrite((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"append\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setAppend((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"create\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setCreate((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"createNew\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setCreateNew((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"deleteOnClose\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setDeleteOnClose((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"dsync\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setDsync((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"perms\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setPerms((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"read\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setRead((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"sparse\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSparse((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"sync\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSync((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"truncateExisting\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTruncateExisting((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"write\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setWrite((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index 6388dd6e3..d3943631c 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -14,17 +14,17 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"debugData\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setDebugData(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "-            }",
                "-            break;",
                "-          case \"errorCode\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setErrorCode(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"lastStreamId\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setLastStreamId(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "+        case \"debugData\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setDebugData(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+          }",
                "+          break;",
                "+        case \"errorCode\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setErrorCode(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"lastStreamId\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setLastStreamId(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 528883bc5..3b5040d6a 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -14,32 +14,32 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"headerTableSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setHeaderTableSize(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"initialWindowSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setInitialWindowSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxConcurrentStreams\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxConcurrentStreams(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"maxFrameSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxFrameSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxHeaderListSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxHeaderListSize(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "-          case \"pushEnabled\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setPushEnabled((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"headerTableSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setHeaderTableSize(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"initialWindowSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setInitialWindowSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxConcurrentStreams\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxConcurrentStreams(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"maxFrameSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxFrameSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxHeaderListSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxHeaderListSize(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "+        case \"pushEnabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setPushEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index c97ef4e05..1c3cc7e2f 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -14,147 +14,147 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"alpnVersions\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<io.vertx.core.http.HttpVersion> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "-              });",
                "-              obj.setAlpnVersions(list);",
                "-           }",
                "-            break;",
                "-          case \"decoderInitialBufferSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setDecoderInitialBufferSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"defaultHost\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setDefaultHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"defaultPort\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setDefaultPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"forceSni\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setForceSni((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"http2ClearTextUpgrade\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setHttp2ClearTextUpgrade((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"http2ConnectionWindowSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setHttp2ConnectionWindowSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"http2KeepAliveTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setHttp2KeepAliveTimeout(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"http2MaxPoolSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setHttp2MaxPoolSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"http2MultiplexingLimit\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setHttp2MultiplexingLimit(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"initialSettings\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"keepAlive\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setKeepAlive((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"keepAliveTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setKeepAliveTimeout(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxChunkSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxChunkSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxHeaderSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxHeaderSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxInitialLineLength\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxInitialLineLength(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxPoolSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxPoolSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxRedirects\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxRedirects(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxWaitQueueSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxWaitQueueSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxWebsocketFrameSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxWebsocketFrameSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxWebsocketMessageSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxWebsocketMessageSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"pipelining\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setPipelining((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"pipeliningLimit\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setPipeliningLimit(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"poolCleanerPeriod\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setPoolCleanerPeriod(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"protocolVersion\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setProtocolVersion(io.vertx.core.http.HttpVersion.valueOf((String)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"sendUnmaskedFrames\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSendUnmaskedFrames((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tryUseCompression\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTryUseCompression((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"verifyHost\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setVerifyHost((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"alpnVersions\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<io.vertx.core.http.HttpVersion> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "+            });",
                "+            obj.setAlpnVersions(list);",
                "+         }",
                "+          break;",
                "+        case \"decoderInitialBufferSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setDecoderInitialBufferSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"defaultHost\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setDefaultHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"defaultPort\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setDefaultPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"forceSni\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setForceSni((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"http2ClearTextUpgrade\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setHttp2ClearTextUpgrade((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"http2ConnectionWindowSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setHttp2ConnectionWindowSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"http2KeepAliveTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setHttp2KeepAliveTimeout(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"http2MaxPoolSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setHttp2MaxPoolSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"http2MultiplexingLimit\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setHttp2MultiplexingLimit(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"initialSettings\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"keepAlive\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setKeepAlive((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"keepAliveTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setKeepAliveTimeout(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxChunkSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxChunkSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxHeaderSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxHeaderSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxInitialLineLength\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxInitialLineLength(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxPoolSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxPoolSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxRedirects\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxRedirects(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxWaitQueueSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxWaitQueueSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxWebsocketFrameSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxWebsocketFrameSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxWebsocketMessageSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxWebsocketMessageSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"pipelining\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setPipelining((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"pipeliningLimit\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setPipeliningLimit(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"poolCleanerPeriod\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setPoolCleanerPeriod(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"protocolVersion\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setProtocolVersion(io.vertx.core.http.HttpVersion.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"sendUnmaskedFrames\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSendUnmaskedFrames((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tryUseCompression\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTryUseCompression((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"verifyHost\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setVerifyHost((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -172,3 +172,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"alpnVersions\", array);",
                "-     }",
                "+    }",
                "       json.put(\"decoderInitialBufferSize\", obj.getDecoderInitialBufferSize());",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index c816472a6..9ef8c2dd0 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -14,82 +14,82 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"acceptUnmaskedFrames\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setAcceptUnmaskedFrames((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"alpnVersions\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<io.vertx.core.http.HttpVersion> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "-              });",
                "-              obj.setAlpnVersions(list);",
                "-           }",
                "-            break;",
                "-          case \"compressionLevel\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setCompressionLevel(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"compressionSupported\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setCompressionSupported((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"decoderInitialBufferSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setDecoderInitialBufferSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"decompressionSupported\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setDecompressionSupported((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"handle100ContinueAutomatically\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setHandle100ContinueAutomatically((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"http2ConnectionWindowSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setHttp2ConnectionWindowSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"initialSettings\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"maxChunkSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxChunkSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxHeaderSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxHeaderSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxInitialLineLength\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxInitialLineLength(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxWebsocketFrameSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxWebsocketFrameSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"maxWebsocketMessageSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setMaxWebsocketMessageSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"websocketSubProtocols\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setWebsocketSubProtocols((String)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"acceptUnmaskedFrames\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setAcceptUnmaskedFrames((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"alpnVersions\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<io.vertx.core.http.HttpVersion> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add(io.vertx.core.http.HttpVersion.valueOf((String)item));",
                "+            });",
                "+            obj.setAlpnVersions(list);",
                "+         }",
                "+          break;",
                "+        case \"compressionLevel\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setCompressionLevel(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"compressionSupported\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setCompressionSupported((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"decoderInitialBufferSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setDecoderInitialBufferSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"decompressionSupported\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setDecompressionSupported((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"handle100ContinueAutomatically\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setHandle100ContinueAutomatically((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"http2ConnectionWindowSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setHttp2ConnectionWindowSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"initialSettings\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setInitialSettings(new io.vertx.core.http.Http2Settings((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"maxChunkSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxChunkSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxHeaderSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxHeaderSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxInitialLineLength\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxInitialLineLength(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxWebsocketFrameSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxWebsocketFrameSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"maxWebsocketMessageSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setMaxWebsocketMessageSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"websocketSubProtocols\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setWebsocketSubProtocols((String)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -108,3 +108,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"alpnVersions\", array);",
                "-     }",
                "+    }",
                "       json.put(\"compressionLevel\", obj.getCompressionLevel());",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index ea8f174db..7c4b08bda 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -14,7 +14,7 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"enabled\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setEnabled((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"enabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index 53ebe1b7a..669e12761 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -14,27 +14,27 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"connectTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setConnectTimeout(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"localAddress\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setLocalAddress((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"metricsName\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setMetricsName((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"proxyOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setProxyOptions(new io.vertx.core.net.ProxyOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"trustAll\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTrustAll((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"connectTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setConnectTimeout(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"localAddress\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setLocalAddress((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"metricsName\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setMetricsName((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"proxyOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setProxyOptions(new io.vertx.core.net.ProxyOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"trustAll\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTrustAll((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "index 33dfead12..20c302d34 100644",
                "--- a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "@@ -14,17 +14,17 @@ public class JksOptionsConverter {",
                "       switch (member.getKey()) {",
                "-          case \"password\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setPassword((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"path\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setPath((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"value\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "-            }",
                "-            break;",
                "+        case \"password\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setPassword((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"path\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setPath((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"value\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index b4eebf66d..e5fc5981e 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -14,17 +14,17 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"hostnameVerificationAlgorithm\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHostnameVerificationAlgorithm((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"reconnectAttempts\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setReconnectAttempts(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"reconnectInterval\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setReconnectInterval(((Number)member.getValue()).longValue());",
                "-            }",
                "-            break;",
                "+        case \"hostnameVerificationAlgorithm\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHostnameVerificationAlgorithm((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"reconnectAttempts\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setReconnectAttempts(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"reconnectInterval\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setReconnectInterval(((Number)member.getValue()).longValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index e65f86c84..15a23f16b 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -14,32 +14,32 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"acceptBacklog\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setAcceptBacklog(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"clientAuth\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"clientAuthRequired\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setClientAuthRequired((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"host\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"port\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"sni\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSni((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"acceptBacklog\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setAcceptBacklog(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"clientAuth\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setClientAuth(io.vertx.core.http.ClientAuth.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"clientAuthRequired\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setClientAuthRequired((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"host\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"port\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"sni\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSni((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index 8d4b86a9d..4a7df8034 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -14,32 +14,32 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"logActivity\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setLogActivity((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"receiveBufferSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setReceiveBufferSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"reuseAddress\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setReuseAddress((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"reusePort\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setReusePort((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"sendBufferSize\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setSendBufferSize(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"trafficClass\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setTrafficClass(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "+        case \"logActivity\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setLogActivity((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"receiveBufferSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setReceiveBufferSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"reuseAddress\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setReuseAddress((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"reusePort\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setReusePort((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"sendBufferSize\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setSendBufferSize(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"trafficClass\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setTrafficClass(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index 063554868..daaf23d12 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -14,7 +14,7 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"sessionCacheEnabled\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSessionCacheEnabled((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"sessionCacheEnabled\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSessionCacheEnabled((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index f9564aeaa..e64da5513 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -14,62 +14,62 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"certPath\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setCertPath((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"certPaths\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setCertPaths(list);",
                "-           }",
                "-            break;",
                "-          case \"certValue\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "-            }",
                "-            break;",
                "-          case \"certValues\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<io.vertx.core.buffer.Buffer> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-              });",
                "-              obj.setCertValues(list);",
                "-           }",
                "-            break;",
                "-          case \"keyPath\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setKeyPath((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"keyPaths\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setKeyPaths(list);",
                "-           }",
                "-            break;",
                "-          case \"keyValue\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setKeyValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "-            }",
                "-            break;",
                "-          case \"keyValues\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.ArrayList<io.vertx.core.buffer.Buffer> list =  new java.util.ArrayList<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-              });",
                "-              obj.setKeyValues(list);",
                "-           }",
                "-            break;",
                "+        case \"certPath\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setCertPath((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"certPaths\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setCertPaths(list);",
                "+         }",
                "+          break;",
                "+        case \"certValue\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+          }",
                "+          break;",
                "+        case \"certValues\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<io.vertx.core.buffer.Buffer> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+            });",
                "+            obj.setCertValues(list);",
                "+         }",
                "+          break;",
                "+        case \"keyPath\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setKeyPath((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"keyPaths\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setKeyPaths(list);",
                "+         }",
                "+          break;",
                "+        case \"keyValue\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setKeyValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+          }",
                "+          break;",
                "+        case \"keyValues\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.ArrayList<io.vertx.core.buffer.Buffer> list =  new java.util.ArrayList<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+            });",
                "+            obj.setKeyValues(list);",
                "+         }",
                "+          break;",
                "       }",
                "@@ -87,3 +87,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"certPaths\", array);",
                "-     }",
                "+    }",
                "     if (obj.getCertValues() != null) {",
                "@@ -92,3 +92,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"certValues\", array);",
                "-     }",
                "+    }",
                "     if (obj.getKeyPaths() != null) {",
                "@@ -97,3 +97,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"keyPaths\", array);",
                "-     }",
                "+    }",
                "     if (obj.getKeyValues() != null) {",
                "@@ -102,3 +102,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"keyValues\", array);",
                "-     }",
                "+    }",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index bbdf139e5..5186be9b3 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -14,18 +14,18 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"certPaths\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addCertPath((String)item);",
                "-              });",
                "-           }",
                "-            break;",
                "-          case \"certValues\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-              });",
                "-           }",
                "-            break;",
                "+        case \"certPaths\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addCertPath((String)item);",
                "+            });",
                "+         }",
                "+          break;",
                "+        case \"certValues\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addCertValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+            });",
                "+         }",
                "+          break;",
                "       }",
                "@@ -43,3 +43,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"certPaths\", array);",
                "-     }",
                "+    }",
                "     if (obj.getCertValues() != null) {",
                "@@ -48,3 +48,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"certValues\", array);",
                "-     }",
                "+    }",
                "   }",
                "diff --git a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "index 047b677d3..1305209b1 100644",
                "--- a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "@@ -14,17 +14,17 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"password\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setPassword((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"path\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setPath((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"value\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "-            }",
                "-            break;",
                "+        case \"password\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setPassword((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"path\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setPath((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"value\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)member.getValue())));",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index 748c4643e..b79ad843d 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -14,27 +14,27 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"host\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setHost((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"password\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setPassword((String)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"port\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setPort(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"type\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setType(io.vertx.core.net.ProxyType.valueOf((String)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"username\":",
                "-            if (member.getValue() instanceof String) {",
                "-              obj.setUsername((String)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"host\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setHost((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"password\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setPassword((String)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"port\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setPort(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"type\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setType(io.vertx.core.net.ProxyType.valueOf((String)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"username\":",
                "+          if (member.getValue() instanceof String) {",
                "+            obj.setUsername((String)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index f1fda56da..151f90562 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -14,126 +14,126 @@ import io.vertx.core.json.JsonArray;",
                "       switch (member.getKey()) {",
                "-          case \"crlPaths\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addCrlPath((String)item);",
                "-              });",
                "-           }",
                "-            break;",
                "-          case \"crlValues\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "-              });",
                "-           }",
                "-            break;",
                "-          case \"enabledCipherSuites\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  obj.addEnabledCipherSuite((String)item);",
                "-              });",
                "-           }",
                "-            break;",
                "-          case \"enabledSecureTransportProtocols\":",
                "-           if (member.getValue() instanceof JsonArray) {",
                "-              java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "-              ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "-                if (item instanceof String)",
                "-                  list.add((String)item);",
                "-              });",
                "-              obj.setEnabledSecureTransportProtocols(list);",
                "-           }",
                "-            break;",
                "-          case \"idleTimeout\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setIdleTimeout(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"jdkSslEngineOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"keyStoreOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"openSslEngineOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pemKeyCertOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pemTrustOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pfxKeyCertOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"pfxTrustOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"soLinger\":",
                "-            if (member.getValue() instanceof Number) {",
                "-              obj.setSoLinger(((Number)member.getValue()).intValue());",
                "-            }",
                "-            break;",
                "-          case \"ssl\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setSsl((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpCork\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpCork((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpFastOpen\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpFastOpen((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpKeepAlive\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpKeepAlive((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpNoDelay\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpNoDelay((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"tcpQuickAck\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setTcpQuickAck((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"trustStoreOptions\":",
                "-            if (member.getValue() instanceof JsonObject) {",
                "-              obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "-            }",
                "-            break;",
                "-          case \"useAlpn\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setUseAlpn((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "-          case \"usePooledBuffers\":",
                "-            if (member.getValue() instanceof Boolean) {",
                "-              obj.setUsePooledBuffers((Boolean)member.getValue());",
                "-            }",
                "-            break;",
                "+        case \"crlPaths\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addCrlPath((String)item);",
                "+            });",
                "+         }",
                "+          break;",
                "+        case \"crlValues\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addCrlValue(io.vertx.core.buffer.Buffer.buffer(java.util.Base64.getDecoder().decode((String)item)));",
                "+            });",
                "+         }",
                "+          break;",
                "+        case \"enabledCipherSuites\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                obj.addEnabledCipherSuite((String)item);",
                "+            });",
                "+         }",
                "+          break;",
                "+        case \"enabledSecureTransportProtocols\":",
                "+          if (member.getValue() instanceof JsonArray) {",
                "+            java.util.LinkedHashSet<java.lang.String> list =  new java.util.LinkedHashSet<>();",
                "+            ((Iterable<Object>)member.getValue()).forEach( item -> {",
                "+              if (item instanceof String)",
                "+                list.add((String)item);",
                "+            });",
                "+            obj.setEnabledSecureTransportProtocols(list);",
                "+         }",
                "+          break;",
                "+        case \"idleTimeout\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setIdleTimeout(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"jdkSslEngineOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setJdkSslEngineOptions(new io.vertx.core.net.JdkSSLEngineOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"keyStoreOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setKeyStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"openSslEngineOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setOpenSslEngineOptions(new io.vertx.core.net.OpenSSLEngineOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pemKeyCertOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPemKeyCertOptions(new io.vertx.core.net.PemKeyCertOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pemTrustOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPemTrustOptions(new io.vertx.core.net.PemTrustOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pfxKeyCertOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPfxKeyCertOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"pfxTrustOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setPfxTrustOptions(new io.vertx.core.net.PfxOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"soLinger\":",
                "+          if (member.getValue() instanceof Number) {",
                "+            obj.setSoLinger(((Number)member.getValue()).intValue());",
                "+          }",
                "+          break;",
                "+        case \"ssl\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setSsl((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpCork\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpCork((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpFastOpen\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpFastOpen((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpKeepAlive\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpKeepAlive((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpNoDelay\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpNoDelay((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"tcpQuickAck\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setTcpQuickAck((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"trustStoreOptions\":",
                "+          if (member.getValue() instanceof JsonObject) {",
                "+            obj.setTrustStoreOptions(new io.vertx.core.net.JksOptions((JsonObject)member.getValue()));",
                "+          }",
                "+          break;",
                "+        case \"useAlpn\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setUseAlpn((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "+        case \"usePooledBuffers\":",
                "+          if (member.getValue() instanceof Boolean) {",
                "+            obj.setUsePooledBuffers((Boolean)member.getValue());",
                "+          }",
                "+          break;",
                "       }",
                "@@ -151,3 +151,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"crlPaths\", array);",
                "-     }",
                "+    }",
                "     if (obj.getCrlValues() != null) {",
                "@@ -156,3 +156,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"crlValues\", array);",
                "-     }",
                "+    }",
                "     if (obj.getEnabledCipherSuites() != null) {",
                "@@ -161,3 +161,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledCipherSuites\", array);",
                "-     }",
                "+    }",
                "     if (obj.getEnabledSecureTransportProtocols() != null) {",
                "@@ -166,3 +166,3 @@ import io.vertx.core.json.JsonArray;",
                "       json.put(\"enabledSecureTransportProtocols\", array);",
                "-     }",
                "+    }",
                "       json.put(\"idleTimeout\", obj.getIdleTimeout());"
            ],
            "changed_files": [
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/net/PfxOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/JksOptionsConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "ed75286d4e6a206244829fdbd01775d9516f6a70",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524299942,
            "hunks": 14,
            "message": "Make the HttpClient pool cleaner period configurable so we can test with a specific value that makes the test reliably pass",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index 5d2854569..5e52cee40 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -921,2 +921,7 @@ Set the limit of pending requests a pipe-lined HTTP/1 connection can send.",
                " +++",
                "+|[[poolCleanerPeriod]]`poolCleanerPeriod`|`Number (int)`|",
                "++++",
                "+Set the connection pool cleaner period in milli seconds, a non positive value disables expiration checks and connections",
                "+ will remain in the pool until they are closed.",
                "++++",
                " |[[protocolVersion]]`protocolVersion`|`link:enums.html#HttpVersion[HttpVersion]`|",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index 75d6daedd..24caa3ecc 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -103,2 +103,5 @@ import io.vertx.core.json.JsonArray;",
                "     }",
                "+    if (json.getValue(\"poolCleanerPeriod\") instanceof Number) {",
                "+      obj.setPoolCleanerPeriod(((Number)json.getValue(\"poolCleanerPeriod\")).intValue());",
                "+    }",
                "     if (json.getValue(\"protocolVersion\") instanceof String) {",
                "@@ -149,2 +152,3 @@ import io.vertx.core.json.JsonArray;",
                "     json.put(\"pipeliningLimit\", obj.getPipeliningLimit());",
                "+    json.put(\"poolCleanerPeriod\", obj.getPoolCleanerPeriod());",
                "     if (obj.getProtocolVersion() != null) {",
                "diff --git a/src/main/java/io/vertx/core/http/HttpClientOptions.java b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "index e50dbe547..0db67b6c4 100755",
                "--- a/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "+++ b/src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "@@ -162,2 +162,7 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * Default pool cleaner period = 1000 ms (1 second)",
                "+   */",
                "+  public static final int DEFAULT_POOL_CLEANER_PERIOD = 1000;",
                "+",
                "   private boolean verifyHost = true;",
                "@@ -172,2 +177,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "   private int http2KeepAliveTimeout;",
                "+  private int poolCleanerPeriod;",
                "@@ -233,2 +239,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     this.decoderInitialBufferSize = other.getDecoderInitialBufferSize();",
                "+    this.poolCleanerPeriod = other.getPoolCleanerPeriod();",
                "   }",
                "@@ -285,2 +292,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     decoderInitialBufferSize = DEFAULT_DECODER_INITIAL_BUFFER_SIZE;",
                "+    poolCleanerPeriod = DEFAULT_POOL_CLEANER_PERIOD;",
                "   }",
                "@@ -1043,2 +1051,21 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "+  /**",
                "+   * @return the connection pool cleaner period in ms.",
                "+   */",
                "+  public int getPoolCleanerPeriod() {",
                "+    return poolCleanerPeriod;",
                "+  }",
                "+",
                "+  /**",
                "+   * Set the connection pool cleaner period in milli seconds, a non positive value disables expiration checks and connections",
                "+   * will remain in the pool until they are closed.",
                "+   *",
                "+   * @param poolCleanerPeriod the pool cleaner period",
                "+   * @return a reference to this, so the API can be used fluently",
                "+   */",
                "+  public HttpClientOptions setPoolCleanerPeriod(int poolCleanerPeriod) {",
                "+    this.poolCleanerPeriod = poolCleanerPeriod;",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "@@ -1074,2 +1101,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     if (http2KeepAliveTimeout != that.http2KeepAliveTimeout) return false;",
                "+    if (poolCleanerPeriod != that.poolCleanerPeriod) return false;",
                "@@ -1104,2 +1132,3 @@ public class HttpClientOptions extends ClientOptionsBase {",
                "     result = 31 * result + http2KeepAliveTimeout;",
                "+    result = 31 * result + poolCleanerPeriod;",
                "     return result;",
                "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "index 1117d58f2..f6f3d6b21 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "@@ -54,10 +54,11 @@ class ConnectionManager {",
                "-  synchronized void start(boolean checkExpired) {",
                "-    this.timerID = checkExpired ? client.getVertx().setTimer(1000, id -> checkExpired()) : -1;",
                "+  synchronized void start() {",
                "+    long period = client.getOptions().getPoolCleanerPeriod();",
                "+    this.timerID = period > 0 ? client.getVertx().setTimer(period, id -> checkExpired(period)) : -1;",
                "   }",
                "-  private synchronized void checkExpired() {",
                "+  private synchronized void checkExpired(long period) {",
                "     long timestamp = System.currentTimeMillis();",
                "     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));",
                "-    timerID = client.getVertx().setTimer(1000, id -> checkExpired());",
                "+    timerID = client.getVertx().setTimer(period, id -> checkExpired(period));",
                "   }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "index 14aa68784..04aff3251 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java",
                "@@ -156,4 +156,4 @@ public class HttpClientImpl implements HttpClient, MetricsProvider {",
                "     proxyType = options.getProxyOptions() != null ? options.getProxyOptions().getType() : null;",
                "-    httpCM.start(options.getKeepAliveTimeout() > 0 || options.getHttp2KeepAliveTimeout() > 0);",
                "-    websocketCM.start(options.getKeepAliveTimeout() > 0 || options.getHttp2KeepAliveTimeout() > 0);",
                "+    httpCM.start();",
                "+    websocketCM.start();",
                "   }"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/java/io/vertx/core/http/HttpClientOptions.java",
                "src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/HttpClientOptions.java, src/main/java/io/vertx/core/http/impl/HttpClientImpl.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java, src/main/java/io/vertx/core/http/impl/ConnectionManager.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "ba8c28e8c290b8b781527c026c4d3ce355352305",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530096067,
            "hunks": 18,
            "message": "PR feedback",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "index c2dc98848..01ed6c394 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "@@ -61,5 +61,18 @@ import static io.vertx.core.spi.metrics.Metrics.METRICS_ENABLED;",
                "  * This class is optimised for performance when used on the same event loop. However it can be used safely from other threads.",
                "- *",
                "+ * </p>",
                "  * The internal state is protected using the synchronized keyword. If always used on the same event loop, then",
                "  * we benefit from biased locking which makes the overhead of synchronized near zero.",
                "+ * </p>",
                "+ * The connection maintains two fields for tracking requests:",
                "+ * <ul>",
                "+ *   <li>{@link #requestInProgress} is the request currently receiving messages, the field is set when",
                "+ *   a {@link HttpRequest} message is received and unset when {@link LastHttpContent} is received. Intermediate",
                "+ *   {@link HttpContent} messages are processed by the request.</li>",
                "+ *   <li>{@link #responseInProgress} is the request for which the response is currently being sent. This field",
                "+ *   is set when it is {@code null} and the {@link #requestInProgress} field if set, or when there is a pipelined",
                "+ *   request waiting its turn for writing the response</li>",
                "+ * </ul>",
                "+ * <p/>",
                "+ * When a request is received, it is also the current response if there is no response in progress, otherwise it is",
                "+ * queued and will become the response in progress when the current response in progress ends.",
                "  *",
                "@@ -80,4 +93,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "-  private HttpServerRequestImpl pendingRequest;  // tail",
                "-  private HttpServerRequestImpl pendingResponse; // head",
                "+  private HttpServerRequestImpl requestInProgress;",
                "+  private HttpServerRequestImpl responseInProgress;",
                "   private boolean channelPaused;",
                "@@ -98,3 +111,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     super(vertx, channel, context);",
                "-    this.requestHandler = handlers.requestHandler();",
                "+    this.requestHandler = requestHandler(handlers);",
                "     this.serverOrigin = serverOrigin;",
                "@@ -120,5 +133,5 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "       HttpServerRequestImpl req = new HttpServerRequestImpl(this, request);",
                "-      pendingRequest = req;",
                "-      if (pendingResponse == null) {",
                "-        pendingResponse = pendingRequest;",
                "+      requestInProgress = req;",
                "+      if (responseInProgress == null) {",
                "+        responseInProgress = requestInProgress;",
                "         req.handleBegin();",
                "@@ -127,3 +140,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "         req.pause();",
                "-        pendingResponse.appendRequest(req);",
                "+        responseInProgress.appendRequest(req);",
                "       }",
                "@@ -148,3 +161,3 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    pendingRequest.handleContent(buffer);",
                "+    requestInProgress.handleContent(buffer);",
                "     //TODO chunk trailers",
                "@@ -159,4 +172,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    HttpServerRequestImpl request = pendingRequest;",
                "-    pendingRequest = null;",
                "+    HttpServerRequestImpl request = requestInProgress;",
                "+    requestInProgress = null;",
                "     request.handleEnd();",
                "@@ -168,4 +181,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    HttpServerRequestImpl request = pendingResponse;",
                "-    pendingResponse = null;",
                "+    HttpServerRequestImpl request = responseInProgress;",
                "+    responseInProgress = null;",
                "     HttpServerRequestImpl next = request.nextRequest();",
                "@@ -178,4 +191,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   private void handleNext(HttpServerRequestImpl request) {",
                "-    pendingResponse = request;",
                "-    getContext().runOnContext(v -> pendingResponse.handlePipelined());",
                "+    responseInProgress = request;",
                "+    getContext().runOnContext(v -> responseInProgress.handlePipelined());",
                "   }",
                "@@ -235,6 +248,6 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "       if (requestFailed) {",
                "-        metrics.requestReset(pendingResponse.metric());",
                "+        metrics.requestReset(responseInProgress.metric());",
                "         requestFailed = false;",
                "       } else {",
                "-        metrics.responseEnd(pendingResponse.metric(), pendingResponse.response());",
                "+        metrics.responseEnd(responseInProgress.metric(), responseInProgress.response());",
                "       }",
                "@@ -343,4 +356,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     if (!isNotWritable()) {",
                "-      if (pendingResponse != null) {",
                "-        pendingResponse.response().handleDrained();",
                "+      if (responseInProgress != null) {",
                "+        responseInProgress.response().handleDrained();",
                "       } else if (ws != null) {",
                "@@ -391,4 +404,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    if (pendingResponse != null) {",
                "-      pendingResponse.handleException(CLOSED_EXCEPTION);",
                "+    if (responseInProgress != null) {",
                "+      responseInProgress.handleException(CLOSED_EXCEPTION);",
                "     }",
                "@@ -403,4 +416,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "     }",
                "-    if (pendingResponse != null) {",
                "-      pendingResponse.handleException(t);",
                "+    if (responseInProgress != null) {",
                "+      responseInProgress.handleException(t);",
                "     }",
                "@@ -432,4 +445,4 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "         version = ((HttpRequest) obj).protocolVersion();",
                "-      } else if (pendingRequest != null) {",
                "-        version = pendingRequest.version() == io.vertx.core.http.HttpVersion.HTTP_1_0 ? HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1;",
                "+      } else if (requestInProgress != null) {",
                "+        version = requestInProgress.version() == io.vertx.core.http.HttpVersion.HTTP_1_0 ? HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1;",
                "       } else {",
                "@@ -473,2 +486,21 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http",
                "   }",
                "+",
                "+  private static Handler<HttpServerRequest> requestHandler(HttpHandlers handler) {",
                "+    if (handler.connectionHandler != null) {",
                "+      class Adapter implements Handler<HttpServerRequest> {",
                "+        private boolean isFirst = true;",
                "+        @Override",
                "+        public void handle(HttpServerRequest request) {",
                "+          if (isFirst) {",
                "+            isFirst = false;",
                "+            handler.connectionHandler.handle(request.connection());",
                "+          }",
                "+          handler.requestHandler.handle(request);",
                "+        }",
                "+      }",
                "+      return new Adapter();",
                "+    } else {",
                "+      return handler.requestHandler;",
                "+    }",
                "+  }",
                " }",
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpHandlers.java b/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "index a502ce683..433a5393d 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                "@@ -43,21 +43,2 @@ public class HttpHandlers {",
                "-  Handler<HttpServerRequest> requestHandler() {",
                "-    if (connectionHandler != null) {",
                "-      class Adapter implements Handler<HttpServerRequest> {",
                "-        private boolean isFirst = true;",
                "-        @Override",
                "-        public void handle(HttpServerRequest request) {",
                "-          if (isFirst) {",
                "-            isFirst = false;",
                "-            connectionHandler.handle(request.connection());",
                "-          }",
                "-          requestHandler.handle(request);",
                "-        }",
                "-      }",
                "-      return new Adapter();",
                "-    } else {",
                "-      return requestHandler;",
                "-    }",
                "-  }",
                "-",
                "   @Override"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
                "src/main/java/io/vertx/core/http/impl/HttpHandlers.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java, src/main/java/io/vertx/core/http/impl/HttpHandlers.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "7b0b091d651f5cb02db9db371f2570664099f840",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533807582,
            "hunks": 2,
            "message": "Updates after review comments Avoid executeBlocking when HA is not enabled Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "index e2202aab9..de184d741 100644",
                "--- a/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java",
                "@@ -538,8 +538,13 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "       deploymentManager.undeployAll(ar1 -> {",
                "-        this.executeBlocking(fut -> {",
                "-          if (haManager() != null) {",
                "-            haManager().stop();",
                "-          }",
                "-          fut.complete();",
                "-        }, false, ar2 -> {",
                "+        HAManager haManager = haManager();",
                "+        Future<Void> haFuture = Future.future();",
                "+        if (haManager != null) {",
                "+          this.executeBlocking(fut -> {",
                "+            haManager.stop();",
                "+            fut.complete();",
                "+          }, false, haFuture);",
                "+        } else {",
                "+          haFuture.complete();",
                "+        }",
                "+        haFuture.setHandler(ar2 -> {",
                "           addressResolver.close(ar3 -> {",
                "@@ -685,14 +690,17 @@ public class VertxImpl implements VertxInternal, MetricsProvider {",
                "   public void undeploy(String deploymentID, Handler<AsyncResult<Void>> completionHandler) {",
                "-    this.executeBlocking(fut -> {",
                "-      if (haManager() != null && haManager().isEnabled()) {",
                "-        haManager().removeFromHA(deploymentID);",
                "-      }",
                "-      fut.complete();",
                "-    }, false, ar -> {",
                "-      if (ar.succeeded()) {",
                "-        deploymentManager.undeployVerticle(deploymentID, completionHandler);",
                "-      } else {",
                "-        completionHandler.handle(Future.failedFuture(ar.cause()));",
                "-      }",
                "-    });",
                "+    HAManager haManager = haManager();",
                "+    Future<Void> haFuture = Future.future();",
                "+    if (haManager != null && haManager.isEnabled()) {",
                "+      this.executeBlocking(fut -> {",
                "+        haManager.removeFromHA(deploymentID);",
                "+        fut.complete();",
                "+      }, false, haFuture);",
                "+    } else {",
                "+      haFuture.complete();",
                "+    }",
                "+    haFuture.compose(v -> {",
                "+      Future<Void> deploymentFuture = Future.future();",
                "+      deploymentManager.undeployVerticle(deploymentID, deploymentFuture);",
                "+      return deploymentFuture;",
                "+    }).setHandler(completionHandler);",
                "   }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/VertxImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/VertxImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "da2b3f17634ede2f0aad37eafc516a4c5c960f85",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526416600,
            "hunks": 6,
            "message": "Add Javadoc to AsyncMap about null keys and values Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/AsyncMap.java b/src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                "index 817276d18..d174fa3be 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                "@@ -25,10 +25,9 @@ import java.util.Set;",
                " /**",
                "- *",
                "  * An asynchronous map.",
                "  * <p>",
                "- * @implSpec Implementations of the interface must handle {@link io.vertx.core.shareddata.impl.ClusterSerializable}",
                "- *           implementing objects.",
                "+ * {@link AsyncMap} does <em>not</em> allow {@code null} to be used as a key or value.",
                "  *",
                "+ * @implSpec Implementations of the interface must handle {@link io.vertx.core.shareddata.impl.ClusterSerializable}",
                "+ * implementing objects.",
                "  * @author <a href=\"http://tfox.org\">Tim Fox</a>",
                "- *",
                "  */",
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java b/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java",
                "index c359332a4..6915ddac0 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java",
                "@@ -223,2 +223,4 @@ public class SharedDataImpl implements SharedData {",
                "     public void replace(K k, V v, Handler<AsyncResult<V>> resultHandler) {",
                "+      checkType(k);",
                "+      checkType(v);",
                "       delegate.replace(k, v, resultHandler);",
                "@@ -228,2 +230,5 @@ public class SharedDataImpl implements SharedData {",
                "     public void replaceIfPresent(K k, V oldValue, V newValue, Handler<AsyncResult<Boolean>> resultHandler) {",
                "+      checkType(k);",
                "+      checkType(oldValue);",
                "+      checkType(newValue);",
                "       delegate.replaceIfPresent(k, oldValue, newValue, resultHandler);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/AsyncMap.java",
                "src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/AsyncMap.java, src/main/java/io/vertx/core/shareddata/impl/SharedDataImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "c037b9f5f00938e40eda2422714910c81257fbfc",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529076612,
            "hunks": 23,
            "message": "Manage LockWaiter status with CAS Also, renamed and simplified things Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "index 5848a1385..4fc92d2b2 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "@@ -24,2 +24,3 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.ConcurrentMap;",
                "+import java.util.concurrent.atomic.AtomicReference;",
                " import java.util.stream.Stream;",
                "@@ -34,30 +35,27 @@ public class LocalAsyncLocks {",
                "   // Immutable",
                "-  private class AsyncLock implements Lock {",
                "+  private static class WaitersList {",
                "-    final String name;",
                "     final List<LockWaiter> waiters;",
                "-    AsyncLock(String name, LockWaiter waiter) {",
                "-      this.name = name;",
                "-      waiters = Collections.singletonList(waiter);",
                "+    WaitersList(List<LockWaiter> waiters) {",
                "+      this.waiters = waiters;",
                "     }",
                "-    AsyncLock(String name, List<LockWaiter> waiters) {",
                "-      this.name = name;",
                "-      this.waiters = waiters;",
                "+    int size() {",
                "+      return waiters.size();",
                "     }",
                "-    boolean firstWaiter() {",
                "-      return waiters.size() == 1;",
                "+    LockWaiter first() {",
                "+      return waiters.get(0);",
                "     }",
                "-    AsyncLock addWaiter(LockWaiter waiter) {",
                "-      return new AsyncLock(name, Stream.concat(waiters.stream(), Stream.of(waiter)).collect(toList()));",
                "+    WaitersList add(LockWaiter waiter) {",
                "+      return new WaitersList(Stream.concat(waiters.stream(), Stream.of(waiter)).collect(toList()));",
                "     }",
                "-    AsyncLock forNextWaiter() {",
                "+    WaitersList removeStale() {",
                "       if (waiters.size() > 1) {",
                "-        List<LockWaiter> lockWaiters = waiters.stream().skip(1).filter(LockWaiter::notTimedOut).collect(toList());",
                "+        List<LockWaiter> lockWaiters = this.waiters.stream().skip(1).filter(LockWaiter::isWaiting).collect(toList());",
                "         if (!lockWaiters.isEmpty()) {",
                "-          return new AsyncLock(name, lockWaiters);",
                "+          return new WaitersList(lockWaiters);",
                "         }",
                "@@ -66,29 +64,19 @@ public class LocalAsyncLocks {",
                "     }",
                "+  }",
                "-    void acquire() {",
                "-      LockWaiter waiter = waiters.get(0);",
                "-      if (!waiter.acquire(this)) {",
                "-        release();",
                "-      }",
                "-    }",
                "+  private enum Status {WAITING, ACQUIRED, TIMED_OUT}",
                "-    @Override",
                "-    public void release() {",
                "-      AsyncLock asyncLock = localLocks.compute(name, (name, lock) -> lock == null ? null : lock.forNextWaiter());",
                "-      if (asyncLock != null) {",
                "-        asyncLock.acquire();",
                "-      }",
                "-    }",
                "-  }",
                "+  private class LockWaiter {",
                "-  private static class LockWaiter {",
                "     final Context context;",
                "+    final String lockName;",
                "     final Handler<AsyncResult<Lock>> handler;",
                "+    final AtomicReference<Status> status;",
                "     final Long timerId;",
                "-    volatile boolean timedOut;",
                "-    volatile boolean acquired;",
                "-    LockWaiter(Context context, Handler<AsyncResult<Lock>> handler, long timeout) {",
                "+    LockWaiter(Context context, String lockName, long timeout, Handler<AsyncResult<Lock>> handler) {",
                "       this.context = context;",
                "+      this.lockName = lockName;",
                "       this.handler = handler;",
                "+      status = new AtomicReference<>(Status.WAITING);",
                "       timerId = timeout != Long.MAX_VALUE ? context.owner().setTimer(timeout, tid -> timeout()) : null;",
                "@@ -96,6 +84,9 @@ public class LocalAsyncLocks {",
                "+    boolean isWaiting() {",
                "+      return status.get() == Status.WAITING;",
                "+    }",
                "+",
                "     void timeout() {",
                "-      if (!acquired) {",
                "-        timedOut = true;",
                "-        context.runOnContext(v -> handler.handle(Future.failedFuture(new VertxException(\"Timed out waiting to get lock\"))));",
                "+      if (status.compareAndSet(Status.WAITING, Status.TIMED_OUT)) {",
                "+        handler.handle(Future.failedFuture(new VertxException(\"Timed out waiting to get lock\")));",
                "       }",
                "@@ -103,4 +94,4 @@ public class LocalAsyncLocks {",
                "-    boolean acquire(AsyncLock lock) {",
                "-      if (!timedOut) {",
                "+    void acquireLock() {",
                "+      if (status.compareAndSet(Status.WAITING, Status.ACQUIRED)) {",
                "         if (timerId != null) {",
                "@@ -108,10 +99,6 @@ public class LocalAsyncLocks {",
                "         }",
                "-        acquired = true;",
                "-        context.runOnContext(v -> handler.handle(Future.succeededFuture(lock)));",
                "+        context.runOnContext(v -> handler.handle(Future.succeededFuture(() -> nextWaiter(lockName))));",
                "+      } else {",
                "+        context.runOnContext(v -> nextWaiter(lockName));",
                "       }",
                "-      return acquired;",
                "-    }",
                "-",
                "-    boolean notTimedOut() {",
                "-      return !timedOut;",
                "     }",
                "@@ -119,14 +106,18 @@ public class LocalAsyncLocks {",
                "-  private final ConcurrentMap<String, AsyncLock> localLocks = new ConcurrentHashMap<>();",
                "+  private final ConcurrentMap<String, WaitersList> waitersMap = new ConcurrentHashMap<>();",
                "   public void acquire(Context context, String name, long timeout, Handler<AsyncResult<Lock>> handler) {",
                "-    LockWaiter lockWaiter = new LockWaiter(context, handler, timeout);",
                "-    AsyncLock asyncLock = localLocks.compute(name, (lockName, lock) -> {",
                "-      if (lock == null) {",
                "-        return new AsyncLock(lockName, lockWaiter);",
                "-      }",
                "-      return lock.addWaiter(lockWaiter);",
                "+    LockWaiter lockWaiter = new LockWaiter(context, name, timeout, handler);",
                "+    WaitersList waiters = waitersMap.compute(name, (s, list) -> {",
                "+      return list == null ? new WaitersList(Collections.singletonList(lockWaiter)) : list.add(lockWaiter);",
                "     });",
                "-    if (asyncLock.firstWaiter()) {",
                "-      asyncLock.acquire();",
                "+    if (waiters.size() == 1) {",
                "+      waiters.first().acquireLock();",
                "+    }",
                "+  }",
                "+",
                "+  private void nextWaiter(String lockName) {",
                "+    WaitersList waiters = waitersMap.compute(lockName, (s, list) -> list == null ? null : list.removeStale());",
                "+    if (waiters != null) {",
                "+      waiters.first().acquireLock();",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "14306052b773d8fbbfe73a616f0f035b00817b33",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524105019,
            "hunks": 1,
            "message": "Ensure contentLength always takes offset into account Signed-off-by: zsiegel <zsiegel87@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "index e6fcc5ab6..8a99c47c8 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                "@@ -442,3 +442,3 @@ public class HttpServerResponseImpl implements HttpServerResponse {",
                "-      long contentLength = Math.min(length, file.length() - offset);",
                "+      long contentLength = Math.min(length - offset, file.length() - offset);",
                "       bytesWritten = contentLength;"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/HttpServerResponseImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "a712acd2d84cfa7607ba4946637dffce79923048",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524901976,
            "hunks": 3,
            "message": "Rename current handlers in handler map merge op",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "index 0555125aa..fd7d00874 100644",
                "--- a/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "+++ b/src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                "@@ -268,6 +268,6 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "     CyclicSequence<HandlerHolder> handlers = new CyclicSequence<HandlerHolder>().add(holder);",
                "-    CyclicSequence<HandlerHolder> newHandlers = handlerMap.merge(",
                "+    CyclicSequence<HandlerHolder> actualHandlers = handlerMap.merge(",
                "       address,",
                "       handlers,",
                "-      (oldHandlers, current) -> oldHandlers.add(current.first()));",
                "+      (old, prev) -> old.add(prev.first()));",
                "@@ -278,3 +278,3 @@ public class EventBusImpl implements EventBus, MetricsProvider {",
                "-    boolean newAddress = handlers == newHandlers;",
                "+    boolean newAddress = handlers == actualHandlers;",
                "     return new LocalRegistrationResult<>(holder, newAddress);"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/eventbus/impl/EventBusImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "6de0dd8c07910e8e378efe28361a16c41c058631",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529077197,
            "hunks": 3,
            "message": "Lock release should trigger waiters list processing just once Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "index 4fc92d2b2..2e41314cf 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "@@ -24,2 +24,3 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.ConcurrentMap;",
                "+import java.util.concurrent.atomic.AtomicBoolean;",
                " import java.util.concurrent.atomic.AtomicReference;",
                "@@ -99,3 +100,3 @@ public class LocalAsyncLocks {",
                "         }",
                "-        context.runOnContext(v -> handler.handle(Future.succeededFuture(() -> nextWaiter(lockName))));",
                "+        context.runOnContext(v -> handler.handle(Future.succeededFuture(new AsyncLock(lockName))));",
                "       } else {",
                "@@ -106,2 +107,18 @@ public class LocalAsyncLocks {",
                "+  private class AsyncLock implements Lock {",
                "+    final String lockName;",
                "+    final AtomicBoolean invoked = new AtomicBoolean();",
                "+",
                "+    AsyncLock(String lockName) {",
                "+      this.lockName = lockName;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void release() {",
                "+      if (invoked.compareAndSet(false, true)) {",
                "+        nextWaiter(lockName);",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "   private final ConcurrentMap<String, WaitersList> waitersMap = new ConcurrentHashMap<>();"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "025a5320badec3b6d9011b08e04a5380ef2aa31e",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526034622,
            "hunks": 2,
            "message": "Handle context ask exception in a separate method",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/impl/ContextImpl.java b/src/main/java/io/vertx/core/impl/ContextImpl.java",
                "index 903bf45e0..e7ea6e6df 100644",
                "--- a/src/main/java/io/vertx/core/impl/ContextImpl.java",
                "+++ b/src/main/java/io/vertx/core/impl/ContextImpl.java",
                "@@ -335,10 +335,3 @@ abstract class ContextImpl implements ContextInternal {",
                "     } catch (Throwable t) {",
                "-      log.error(\"Unhandled exception\", t);",
                "-      Handler<Throwable> handler = this.exceptionHandler;",
                "-      if (handler == null) {",
                "-        handler = owner.exceptionHandler();",
                "-      }",
                "-      if (handler != null) {",
                "-        handler.handle(t);",
                "-      }",
                "+      handleException(t);",
                "       return false;",
                "@@ -353,2 +346,13 @@ abstract class ContextImpl implements ContextInternal {",
                "+  private void handleException(Throwable t) {",
                "+    log.error(\"Unhandled exception\", t);",
                "+    Handler<Throwable> handler = this.exceptionHandler;",
                "+    if (handler == null) {",
                "+      handler = owner.exceptionHandler();",
                "+    }",
                "+    if (handler != null) {",
                "+      handler.handle(t);",
                "+    }",
                "+  }",
                "+",
                "   private void setTCCL() {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/impl/ContextImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/impl/ContextImpl.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "e8d7a6a007eab17fa3baa9e8ce3773e87f8d84fd",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1531818591,
            "hunks": 28,
            "message": "Regen code",
            "diff": [
                "diff --git a/src/main/asciidocs/dataobjects.adoc b/src/main/asciidocs/dataobjects.adoc",
                "new file mode 100644",
                "index 000000000..56f588b7a",
                "--- /dev/null",
                "+++ b/src/main/asciidocs/dataobjects.adoc",
                "@@ -0,0 +1,1974 @@",
                "+= Cheatsheets",
                "+",
                "+[[AddressResolverOptions]]",
                "+== AddressResolverOptions",
                "+",
                "+++++",
                "+ Configuration options for Vert.x hostname resolver. The resolver uses the local <i>hosts</i> file and performs",
                "+ DNS <i>A</i> and <i>AAAA</i> queries.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[cacheMaxTimeToLive]]`@cacheMaxTimeToLive`|`Number (int)`|+++",
                "+Set the cache maximum TTL value in seconds. After successful resolution IP addresses are cached with their DNS response TTL,",
                "+ use this to set a maximum value to all responses TTL.",
                "++++",
                "+|[[cacheMinTimeToLive]]`@cacheMinTimeToLive`|`Number (int)`|+++",
                "+Set the cache minimum TTL value in seconds. After resolution successful IP addresses are cached with their DNS response TTL,",
                "+ use this to set a minimum value to all responses TTL.",
                "++++",
                "+|[[cacheNegativeTimeToLive]]`@cacheNegativeTimeToLive`|`Number (int)`|+++",
                "+Set the negative cache TTL value in seconds. After a failed hostname resolution, DNS queries won't be retried",
                "+ for a period of time equals to the negative TTL. This allows to reduce the response time of negative replies",
                "+ and reduce the amount of messages to DNS servers.",
                "++++",
                "+|[[hostsPath]]`@hostsPath`|`String`|+++",
                "+Set the path of an alternate hosts configuration file to use instead of the one provided by the os.",
                "+ <p/>",
                "+ The default value is null, so the operating system hosts config is used.",
                "++++",
                "+|[[hostsValue]]`@hostsValue`|`Buffer`|+++",
                "+Set an alternate hosts configuration file to use instead of the one provided by the os.",
                "+ <p/>",
                "+ The value should contain the hosts content literaly, for instance <i>127.0.0.1 localhost</i>",
                "+ <p/>",
                "+ The default value is null, so the operating system hosts config is used.",
                "++++",
                "+|[[maxQueries]]`@maxQueries`|`Number (int)`|+++",
                "+Set the maximum number of queries when an hostname is resolved.",
                "++++",
                "+|[[ndots]]`@ndots`|`Number (int)`|+++",
                "+Set the ndots value used when resolving using search domains, the default value is <code>-1</code> which",
                "+ determines the value from the OS on Linux or uses the value <code>1</code>.",
                "++++",
                "+|[[optResourceEnabled]]`@optResourceEnabled`|`Boolean`|+++",
                "+Set to true to enable the automatic inclusion in DNS queries of an optional record that hints",
                "+ the remote DNS server about how much data the resolver can read per response.",
                "++++",
                "+|[[queryTimeout]]`@queryTimeout`|`Number (long)`|+++",
                "+Set the query timeout in milliseconds, i.e the amount of time after a query is considered to be failed.",
                "++++",
                "+|[[rdFlag]]`@rdFlag`|`Boolean`|+++",
                "+Set the DNS queries <i>Recursion Desired</i> flag value.",
                "++++",
                "+|[[rotateServers]]`@rotateServers`|`Boolean`|+++",
                "+Set to <code>true</code> to enable round-robin selection of the dns server to use. It spreads the query load",
                "+ among the servers and avoids all lookup to hit the first server of the list.",
                "++++",
                "+|[[searchDomains]]`@searchDomains`|`Array of String`|+++",
                "+Set the lists of DNS search domains.",
                "+ <p/>",
                "+ When the search domain list is null, the effective search domain list will be populated using",
                "+ the system DNS search domains.",
                "++++",
                "+|[[servers]]`@servers`|`Array of String`|+++",
                "+Set the list of DNS server addresses, an address is the IP  of the dns server, followed by an optional",
                "+ colon and a port, e.g <code>8.8.8.8</code> or {code 192.168.0.1:40000}. When the list is empty, the resolver",
                "+ will use the list of the system DNS server addresses from the environment, if that list cannot be retrieved",
                "+ it will use Google's public DNS servers <code>\"8.8.8.8\"</code> and <code>\"8.8.4.4\"</code>.",
                "++++",
                "+|===",
                "+",
                "+[[Argument]]",
                "+== Argument",
                "+",
                "+++++",
                "+ Defines a command line argument. Unlike options, argument don't have names and are identified using an index. The",
                "+ first index is 0 (because we are in the computer world).",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[argName]]`@argName`|`String`|+++",
                "+Sets the argument name of this link.",
                "++++",
                "+|[[defaultValue]]`@defaultValue`|`String`|+++",
                "+Sets the default value of this link.",
                "++++",
                "+|[[description]]`@description`|`String`|+++",
                "+Sets the description of the link.",
                "++++",
                "+|[[hidden]]`@hidden`|`Boolean`|+++",
                "+Sets whether or not the current link is hidden.",
                "++++",
                "+|[[index]]`@index`|`Number (int)`|+++",
                "+Sets the argument index.",
                "++++",
                "+|[[multiValued]]`@multiValued`|`Boolean`|+++",
                "+Sets whether or not the argument can receive several values. Only the last argument can receive several values.",
                "++++",
                "+|[[required]]`@required`|`Boolean`|+++",
                "+Sets whether or not the current link is required.",
                "++++",
                "+|===",
                "+",
                "+[[ClientOptionsBase]]",
                "+== ClientOptionsBase",
                "+",
                "+++++",
                "+ Base class for Client options",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "+Set the connect timeout",
                "++++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "+Add a CRL path",
                "++++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "+Add a CRL value",
                "++++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "+Add an enabled cipher suite, appended to the ordered suites.",
                "++++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "+Sets the list of enabled SSL/TLS protocols.",
                "++++",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "+ This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                "++++",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                "++++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the key/cert options in jks format, aka Java keystore.",
                "++++",
                "+|[[localAddress]]`@localAddress`|`String`|+++",
                "+Set the local interface to bind for network connections. When the local address is null,",
                "+ it will pick any local address, the default local address is null.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[metricsName]]`@metricsName`|`String`|+++",
                "+Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "+ with the same name.",
                "++++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "+Set the key/cert store options in pem format.",
                "++++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "+Set the trust options in pem format",
                "++++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                "++++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the trust options in pfx format",
                "++++",
                "+|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                "+Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "+Set whether SO_linger keep alive is enabled",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "+Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "+Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "+Set whether TCP keep alive is enabled",
                "++++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "+Set whether TCP no delay is enabled",
                "++++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "+Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "+Set whether all server certificates should be trusted",
                "++++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the trust options in jks format, aka Java truststore",
                "++++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "+Set the ALPN usage.",
                "++++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "+Set whether Netty pooled buffers are enabled",
                "++++",
                "+|===",
                "+",
                "+[[CopyOptions]]",
                "+== CopyOptions",
                "+",
                "+++++",
                "+ Describes the copy (and move) options.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[atomicMove]]`@atomicMove`|`Boolean`|+++",
                "+Whether move should be performed as an atomic filesystem operation. Defaults to <code>false</code>.",
                "++++",
                "+|[[copyAttributes]]`@copyAttributes`|`Boolean`|+++",
                "+Whether the file attributes should be copied. Defaults to <code>false</code>.",
                "++++",
                "+|[[nofollowLinks]]`@nofollowLinks`|`Boolean`|+++",
                "+Whether symbolic links should not be followed during copy or move operations. Defaults to <code>false</code>.",
                "++++",
                "+|[[replaceExisting]]`@replaceExisting`|`Boolean`|+++",
                "+Whether an existing file, empty directory, or link should be replaced. Defaults to <code>false</code>.",
                "++++",
                "+|===",
                "+",
                "+[[DatagramSocketOptions]]",
                "+== DatagramSocketOptions",
                "+",
                "+++++",
                "+ Options used to configure a datagram socket.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[broadcast]]`@broadcast`|`Boolean`|+++",
                "+Set if the socket can send or receive broadcast packets",
                "++++",
                "+|[[ipV6]]`@ipV6`|`Boolean`|+++",
                "+Set if IP v6 should be used",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[loopbackModeDisabled]]`@loopbackModeDisabled`|`Boolean`|+++",
                "+Set if loopback mode is disabled",
                "++++",
                "+|[[multicastNetworkInterface]]`@multicastNetworkInterface`|`String`|+++",
                "+Set the multicast network interface address",
                "++++",
                "+|[[multicastTimeToLive]]`@multicastTimeToLive`|`Number (int)`|+++",
                "+Set the multicast ttl value",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|===",
                "+",
                "+[[DeliveryOptions]]",
                "+== DeliveryOptions",
                "+",
                "+++++",
                "+ Delivery options are used to configure message delivery.",
                "+ <p>",
                "+ Delivery options allow to configure delivery timeout and message codec name, and to provide any headers",
                "+ that you wish to send with the message.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[codecName]]`@codecName`|`String`|+++",
                "+Set the codec name.",
                "++++",
                "+|[[headers]]`@headers`|`String`|+++",
                "+Add a message header.",
                "+ <p>",
                "+ Message headers can be sent with any message and will be accessible with link",
                "+ at the recipient.",
                "++++",
                "+|[[sendTimeout]]`@sendTimeout`|`Number (long)`|+++",
                "+Set the send timeout.",
                "++++",
                "+|===",
                "+",
                "+[[DeploymentOptions]]",
                "+== DeploymentOptions",
                "+",
                "+++++",
                "+ Options for configuring a verticle deployment.",
                "+ <p>",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[config]]`@config`|`Json object`|+++",
                "+Set the JSON configuration that will be passed to the verticle(s) when it's deployed",
                "++++",
                "+|[[extraClasspath]]`@extraClasspath`|`Array of String`|+++",
                "+Set any extra classpath to be used when deploying the verticle.",
                "+ <p>",
                "+ Ignored if no isolation group is set.",
                "++++",
                "+|[[ha]]`@ha`|`Boolean`|+++",
                "+Set whether the verticle(s) will be deployed as HA.",
                "++++",
                "+|[[instances]]`@instances`|`Number (int)`|+++",
                "+Set the number of instances that should be deployed.",
                "++++",
                "+|[[isolatedClasses]]`@isolatedClasses`|`Array of String`|+++",
                "+Set the isolated class names.",
                "++++",
                "+|[[isolationGroup]]`@isolationGroup`|`String`|+++",
                "+Set the isolation group that will be used when deploying the verticle(s)",
                "++++",
                "+|[[maxWorkerExecuteTime]]`@maxWorkerExecuteTime`|`Number (long)`|+++",
                "+Sets the value of max worker execute time, in link.",
                "+ <p>",
                "+ The default value of link is",
                "++++",
                "+|[[maxWorkerExecuteTimeUnit]]`@maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>maxWorkerExecuteTime</code>",
                "++++",
                "+|[[multiThreaded]]`@multiThreaded`|`Boolean`|+++",
                "+Set whether the verticle(s) should be deployed as a multi-threaded worker verticle",
                "++++",
                "+|[[worker]]`@worker`|`Boolean`|+++",
                "+Set whether the verticle(s) should be deployed as a worker verticle",
                "++++",
                "+|[[workerPoolName]]`@workerPoolName`|`String`|+++",
                "+Set the worker pool name to use for this verticle. When no name is set, the Vert.x",
                "+ worker pool will be used, when a name is set, the verticle will use a named worker pool.",
                "++++",
                "+|[[workerPoolSize]]`@workerPoolSize`|`Number (int)`|+++",
                "+Set the maximum number of worker threads to be used by the Vert.x instance.",
                "++++",
                "+|===",
                "+",
                "+[[DnsClientOptions]]",
                "+== DnsClientOptions",
                "+",
                "+++++",
                "+ Configuration options for Vert.x DNS client.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[host]]`@host`|`String`|+++",
                "+Set the host name to be used by this client in requests.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                "+Set the port to be used by this client in requests.",
                "++++",
                "+|[[queryTimeout]]`@queryTimeout`|`Number (long)`|+++",
                "+Set the query timeout in milliseconds, i.e the amount of time after a query is considered to be failed.",
                "++++",
                "+|[[recursionDesired]]`@recursionDesired`|`Boolean`|+++",
                "+Set whether or not recursion is desired",
                "++++",
                "+|===",
                "+",
                "+[[EventBusOptions]]",
                "+== EventBusOptions",
                "+",
                "+++++",
                "+ Options to configure the event bus.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                "+Set the accept back log.",
                "++++",
                "+|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                "+Set whether client auth is required",
                "++++",
                "+|[[clusterPingInterval]]`@clusterPingInterval`|`Number (long)`|+++",
                "+Set the value of cluster ping interval, in ms.",
                "++++",
                "+|[[clusterPingReplyInterval]]`@clusterPingReplyInterval`|`Number (long)`|+++",
                "+Set the value of cluster ping reply interval, in ms.",
                "++++",
                "+|[[clusterPublicHost]]`@clusterPublicHost`|`String`|+++",
                "+Set the public facing hostname to be used for clustering.",
                "+ Sometimes, e.g. when running on certain clouds, the local address the server listens on for clustering is",
                "+ not the same address that other nodes connect to it at, as the OS / cloud infrastructure does some kind of",
                "+ proxying. If this is the case you can specify a public hostname which is different from the hostname the",
                "+ server listens at.",
                "+ <p>",
                "+ The default value is null which means use the same as the cluster hostname.",
                "++++",
                "+|[[clusterPublicPort]]`@clusterPublicPort`|`Number (int)`|+++",
                "+See link for an explanation.",
                "++++",
                "+|[[clustered]]`@clustered`|`Boolean`|+++",
                "+Sets whether or not the event bus is clustered.",
                "++++",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "+Sets the connect timeout",
                "++++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "+Add a CRL path",
                "++++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "+Add a CRL value",
                "++++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "+Add an enabled cipher suite, appended to the ordered suites.",
                "++++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "+Sets the list of enabled SSL/TLS protocols.",
                "++++",
                "+|[[host]]`@host`|`String`|+++",
                "+Sets the host.",
                "++++",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "+ This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                "++++",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                "++++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the key/cert options in jks format, aka Java keystore.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "+Set the key/cert store options in pem format.",
                "++++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "+Set the trust options in pem format",
                "++++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                "++++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the trust options in pfx format",
                "++++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                "+Sets the port.",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reconnectAttempts]]`@reconnectAttempts`|`Number (int)`|+++",
                "+Sets the value of reconnect attempts.",
                "++++",
                "+|[[reconnectInterval]]`@reconnectInterval`|`Number (long)`|+++",
                "+Set the reconnect interval.",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "+Set whether SO_linger keep alive is enabled",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "+Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "+Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "+Set whether TCP keep alive is enabled",
                "++++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "+Set whether TCP no delay is enabled",
                "++++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "+Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "+Set whether all server certificates should be trusted.",
                "++++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the trust options in jks format, aka Java truststore",
                "++++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "+Set the ALPN usage.",
                "++++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "+Set whether Netty pooled buffers are enabled",
                "++++",
                "+|===",
                "+",
                "+[[GoAway]]",
                "+== GoAway",
                "+",
                "+++++",
                "+ A  frame.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[debugData]]`@debugData`|`Buffer`|+++",
                "+Set the additional debug data",
                "++++",
                "+|[[errorCode]]`@errorCode`|`Number (long)`|+++",
                "+",
                "++++",
                "+|[[lastStreamId]]`@lastStreamId`|`Number (int)`|+++",
                "+Set the last stream id.",
                "++++",
                "+|===",
                "+",
                "+[[Http2Settings]]",
                "+== Http2Settings",
                "+",
                "+++++",
                "+ HTTP2 settings, the settings is initialized with the default HTTP/2 values.<p>",
                "+",
                "+ The settings expose the parameters defined by the HTTP/2 specification, as well as extra settings for",
                "+ protocol extensions.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[headerTableSize]]`@headerTableSize`|`Number (long)`|+++",
                "+Set  HTTP/2 setting.",
                "++++",
                "+|[[initialWindowSize]]`@initialWindowSize`|`Number (int)`|+++",
                "+Set the  HTTP/2 setting",
                "++++",
                "+|[[maxConcurrentStreams]]`@maxConcurrentStreams`|`Number (long)`|+++",
                "+Set the  HTTP/2 setting",
                "++++",
                "+|[[maxFrameSize]]`@maxFrameSize`|`Number (int)`|+++",
                "+Set the  HTTP/2 setting",
                "++++",
                "+|[[maxHeaderListSize]]`@maxHeaderListSize`|`Number (long)`|+++",
                "+Set the  HTTP/2 setting",
                "++++",
                "+|[[pushEnabled]]`@pushEnabled`|`Boolean`|+++",
                "+Set the  HTTP/2 setting",
                "++++",
                "+|===",
                "+",
                "+[[HttpClientOptions]]",
                "+== HttpClientOptions",
                "+",
                "+++++",
                "+ Options describing how an link will make connections.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[alpnVersions]]`@alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|+++",
                "+Set the list of protocol versions to provide to the server during the Application-Layer Protocol Negotiation.",
                "+ When the list is empty, the client provides a best effort list according to link:",
                "+",
                "+ <ul>",
                "+   <li>: [ \"h2\", \"http/1.1\" ]</li>",
                "+   <li>otherwise: [link]</li>",
                "+ </ul>",
                "++++",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "+Set the connect timeout",
                "++++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "+Add a CRL path",
                "++++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "+Add a CRL value",
                "++++",
                "+|[[decoderInitialBufferSize]]`@decoderInitialBufferSize`|`Number (int)`|+++",
                "+set to <code>initialBufferSizeHttpDecoder</code> the initial buffer of the HttpDecoder.",
                "++++",
                "+|[[defaultHost]]`@defaultHost`|`String`|+++",
                "+Set the default host name to be used by this client in requests if none is provided when making the request.",
                "++++",
                "+|[[defaultPort]]`@defaultPort`|`Number (int)`|+++",
                "+Set the default port to be used by this client in requests if none is provided when making the request.",
                "++++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "+Add an enabled cipher suite, appended to the ordered suites.",
                "++++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "+Sets the list of enabled SSL/TLS protocols.",
                "++++",
                "+|[[forceSni]]`@forceSni`|`Boolean`|+++",
                "+By default, the server name is only sent for Fully Qualified Domain Name (FQDN), setting",
                "+ this property to <code>true</code> forces the server name to be always sent.",
                "++++",
                "+|[[http2ClearTextUpgrade]]`@http2ClearTextUpgrade`|`Boolean`|+++",
                "+Set to <code>true</code> when an <i>h2c</i> connection is established using an HTTP/1.1 upgrade request, and <code>false</code>",
                "+ when an <i>h2c</i> connection is established directly (with prior knowledge).",
                "++++",
                "+|[[http2ConnectionWindowSize]]`@http2ConnectionWindowSize`|`Number (int)`|+++",
                "+Set the default HTTP/2 connection window size. It overrides the initial window",
                "+ size set by link, so the connection window size",
                "+ is greater than for its streams, in order the data throughput.",
                "+ <p/>",
                "+ A value of <code>-1</code> reuses the initial window size setting.",
                "++++",
                "+|[[http2KeepAliveTimeout]]`@http2KeepAliveTimeout`|`Number (int)`|+++",
                "+Set the keep alive timeout for HTTP/2 connections, in seconds.",
                "+ <p/>",
                "+ This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "++++",
                "+|[[http2MaxPoolSize]]`@http2MaxPoolSize`|`Number (int)`|+++",
                "+Set the maximum pool size for HTTP/2 connections",
                "++++",
                "+|[[http2MultiplexingLimit]]`@http2MultiplexingLimit`|`Number (int)`|+++",
                "+Set a client limit of the number concurrent streams for each HTTP/2 connection, this limits the number",
                "+ of streams the client can create for a connection. The effective number of streams for a",
                "+ connection is the min of this value and the server's initial settings.",
                "+ <p/>",
                "+ Setting the value to <code>-1</code> means to use the value sent by the server's initial settings.",
                "+ <code>-1</code> is the default value.",
                "++++",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "+ This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                "++++",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                "++++",
                "+|[[initialSettings]]`@initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|+++",
                "+Set the HTTP/2 connection settings immediately sent by to the server when the client connects.",
                "++++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keepAlive]]`@keepAlive`|`Boolean`|+++",
                "+Set whether keep alive is enabled on the client",
                "++++",
                "+|[[keepAliveTimeout]]`@keepAliveTimeout`|`Number (int)`|+++",
                "+Set the keep alive timeout for HTTP/1.x, in seconds.",
                "+ <p/>",
                "+ This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "++++",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the key/cert options in jks format, aka Java keystore.",
                "++++",
                "+|[[localAddress]]`@localAddress`|`String`|+++",
                "+Set the local interface to bind for network connections. When the local address is null,",
                "+ it will pick any local address, the default local address is null.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[maxChunkSize]]`@maxChunkSize`|`Number (int)`|+++",
                "+Set the maximum HTTP chunk size",
                "++++",
                "+|[[maxHeaderSize]]`@maxHeaderSize`|`Number (int)`|+++",
                "+Set the maximum length of all headers for HTTP/1.x .",
                "++++",
                "+|[[maxInitialLineLength]]`@maxInitialLineLength`|`Number (int)`|+++",
                "+Set the maximum length of the initial line for HTTP/1.x (e.g. <code>\"HTTP/1.1 200 OK\"</code>)",
                "++++",
                "+|[[maxPoolSize]]`@maxPoolSize`|`Number (int)`|+++",
                "+Set the maximum pool size for connections",
                "++++",
                "+|[[maxRedirects]]`@maxRedirects`|`Number (int)`|+++",
                "+Set to <code>maxRedirects</code> the maximum number of redirection a request can follow.",
                "++++",
                "+|[[maxWaitQueueSize]]`@maxWaitQueueSize`|`Number (int)`|+++",
                "+Set the maximum requests allowed in the wait queue, any requests beyond the max size will result in",
                "+ a ConnectionPoolTooBusyException.  If the value is set to a negative number then the queue will be unbounded.",
                "++++",
                "+|[[maxWebsocketFrameSize]]`@maxWebsocketFrameSize`|`Number (int)`|+++",
                "+Set the max websocket frame size",
                "++++",
                "+|[[maxWebsocketMessageSize]]`@maxWebsocketMessageSize`|`Number (int)`|+++",
                "+Set the max websocket message size",
                "++++",
                "+|[[metricsName]]`@metricsName`|`String`|+++",
                "+Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "+ with the same name.",
                "++++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "+Set the key/cert store options in pem format.",
                "++++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "+Set the trust options in pem format",
                "++++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                "++++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the trust options in pfx format",
                "++++",
                "+|[[pipelining]]`@pipelining`|`Boolean`|+++",
                "+Set whether pipe-lining is enabled on the client",
                "++++",
                "+|[[pipeliningLimit]]`@pipeliningLimit`|`Number (int)`|+++",
                "+Set the limit of pending requests a pipe-lined HTTP/1 connection can send.",
                "++++",
                "+|[[poolCleanerPeriod]]`@poolCleanerPeriod`|`Number (int)`|+++",
                "+Set the connection pool cleaner period in milli seconds, a non positive value disables expiration checks and connections",
                "+ will remain in the pool until they are closed.",
                "++++",
                "+|[[protocolVersion]]`@protocolVersion`|`link:enums.html#HttpVersion[HttpVersion]`|+++",
                "+Set the protocol version.",
                "++++",
                "+|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                "+Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[sendUnmaskedFrames]]`@sendUnmaskedFrames`|`Boolean`|+++",
                "+Set true when the client wants to skip frame masking.",
                "+ You may want to set it true on server by server websocket communication: In this case you are by passing RFC6455 protocol.",
                "+ It's false as default.",
                "++++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "+Set whether SO_linger keep alive is enabled",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "+Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "+Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "+Set whether TCP keep alive is enabled",
                "++++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "+Set whether TCP no delay is enabled",
                "++++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "+Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "+Set whether all server certificates should be trusted",
                "++++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the trust options in jks format, aka Java truststore",
                "++++",
                "+|[[tryUseCompression]]`@tryUseCompression`|`Boolean`|+++",
                "+Set whether compression is enabled",
                "++++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "+Set the ALPN usage.",
                "++++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "+Set whether Netty pooled buffers are enabled",
                "++++",
                "+|[[verifyHost]]`@verifyHost`|`Boolean`|+++",
                "+Set whether hostname verification is enabled",
                "++++",
                "+|===",
                "+",
                "+[[HttpServerOptions]]",
                "+== HttpServerOptions",
                "+",
                "+++++",
                "+ Represents options used by an link instance",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                "+Set the accept back log",
                "++++",
                "+|[[acceptUnmaskedFrames]]`@acceptUnmaskedFrames`|`Boolean`|+++",
                "+Set true when the server accepts unmasked frame.",
                "+ As default Server doesn't accept unmasked frame, you can bypass this behaviour (RFC 6455) setting true",
                "+ It's set to false as default.",
                "++++",
                "+|[[alpnVersions]]`@alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|+++",
                "+Set the list of protocol versions to provide to the server during the Application-Layer Protocol Negotiatiation.",
                "++++",
                "+|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                "+Set whether client auth is required",
                "++++",
                "+|[[clientAuthRequired]]`@clientAuthRequired`|`Boolean`|+++",
                "+Set whether client auth is required",
                "++++",
                "+|[[compressionLevel]]`@compressionLevel`|`Number (int)`|+++",
                "+This method allows to set the compression level to be used in http1.x/2 response bodies",
                "+ when compression support is turned on (@see setCompressionSupported) and the client advertises",
                "+ to support <code>deflate/gzip</code> compression in the <code>Accept-Encoding</code> header",
                "+",
                "+ default value is : 6 (Netty legacy)",
                "+",
                "+ The compression level determines how much the data is compressed on a scale from 1 to 9,",
                "+ where '9' is trying to achieve the maximum compression ratio while '1' instead is giving",
                "+ priority to speed instead of compression ratio using some algorithm optimizations and skipping",
                "+ pedantic loops that usually gives just little improvements",
                "+",
                "+ While one can think that best value is always the maximum compression ratio,",
                "+ there's a trade-off to consider: the most compressed level requires the most",
                "+ computational work to compress/decompress data, e.g. more dictionary lookups and loops.",
                "+",
                "+ E.g. you have it set fairly high on a high-volume website, you may experience performance degradation",
                "+ and latency on resource serving due to CPU overload, and, however - as the computational work is required also client side",
                "+ while decompressing - setting an higher compression level can result in an overall higher page load time",
                "+ especially nowadays when many clients are handled mobile devices with a low CPU profile.",
                "+",
                "+ see also: http://www.gzip.org/algorithm.txt",
                "++++",
                "+|[[compressionSupported]]`@compressionSupported`|`Boolean`|+++",
                "+Set whether the server should support gzip/deflate compression",
                "+ (serving compressed responses to clients advertising support for them with Accept-Encoding header)",
                "++++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "+Add a CRL path",
                "++++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "+Add a CRL value",
                "++++",
                "+|[[decoderInitialBufferSize]]`@decoderInitialBufferSize`|`Number (int)`|+++",
                "+Set the initial buffer size for the HTTP decoder",
                "++++",
                "+|[[decompressionSupported]]`@decompressionSupported`|`Boolean`|+++",
                "+Set whether the server supports decompression",
                "++++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "+Add an enabled cipher suite, appended to the ordered suites.",
                "++++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "+Sets the list of enabled SSL/TLS protocols.",
                "++++",
                "+|[[handle100ContinueAutomatically]]`@handle100ContinueAutomatically`|`Boolean`|+++",
                "+Set whether 100 Continue should be handled automatically",
                "++++",
                "+|[[host]]`@host`|`String`|+++",
                "+Set the host",
                "++++",
                "+|[[http2ConnectionWindowSize]]`@http2ConnectionWindowSize`|`Number (int)`|+++",
                "+Set the default HTTP/2 connection window size. It overrides the initial window",
                "+ size set by link, so the connection window size",
                "+ is greater than for its streams, in order the data throughput.",
                "+ <p/>",
                "+ A value of <code>-1</code> reuses the initial window size setting.",
                "++++",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "+ This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                "++++",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                "++++",
                "+|[[initialSettings]]`@initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|+++",
                "+Set the HTTP/2 connection settings immediatly sent by the server when a client connects.",
                "++++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the key/cert options in jks format, aka Java keystore.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[maxChunkSize]]`@maxChunkSize`|`Number (int)`|+++",
                "+Set the maximum HTTP chunk size that link will receive",
                "++++",
                "+|[[maxHeaderSize]]`@maxHeaderSize`|`Number (int)`|+++",
                "+Set the maximum length of all headers for HTTP/1.x .",
                "++++",
                "+|[[maxInitialLineLength]]`@maxInitialLineLength`|`Number (int)`|+++",
                "+Set the maximum length of the initial line for HTTP/1.x (e.g. <code>\"GET / HTTP/1.0\"</code>)",
                "++++",
                "+|[[maxWebsocketFrameSize]]`@maxWebsocketFrameSize`|`Number (int)`|+++",
                "+Set the maximum websocket frames size",
                "++++",
                "+|[[maxWebsocketMessageSize]]`@maxWebsocketMessageSize`|`Number (int)`|+++",
                "+Set the maximum websocket message size",
                "++++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "+Set the key/cert store options in pem format.",
                "++++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "+Set the trust options in pem format",
                "++++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                "++++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the trust options in pfx format",
                "++++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                "+Set the port",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[sni]]`@sni`|`Boolean`|+++",
                "+Set whether the server supports Server Name Indiciation",
                "++++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "+Set whether SO_linger keep alive is enabled",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "+Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "+Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "+Set whether TCP keep alive is enabled",
                "++++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "+Set whether TCP no delay is enabled",
                "++++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "+Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the trust options in jks format, aka Java truststore",
                "++++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "+Set the ALPN usage.",
                "++++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "+Set whether Netty pooled buffers are enabled",
                "++++",
                "+|[[websocketSubProtocols]]`@websocketSubProtocols`|`String`|+++",
                "+Set the websocket subprotocols supported by the server.",
                "++++",
                "+|===",
                "+",
                "+[[JdkSSLEngineOptions]]",
                "+== JdkSSLEngineOptions",
                "+",
                "+++++",
                "+ Configures a link to use the JDK ssl engine implementation.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|===",
                "+",
                "+[[JksOptions]]",
                "+== JksOptions",
                "+",
                "+++++",
                "+ Key or trust store options configuring private key and/or certificates based on Java Keystore files.",
                "+ <p>",
                "+ When used as a key store, it should point to a store containing a private key and its certificate.",
                "+ When used as a trust store, it should point to a store containing a list of trusted certificates.",
                "+ <p>",
                "+ The store can either be loaded by Vert.x from the filesystem:",
                "+ <p>",
                "+ <pre>",
                "+ HttpServerOptions options = HttpServerOptions.httpServerOptions();",
                "+ options.setKeyStore(new JKSOptions().setPath(\"/mykeystore.jks\").setPassword(\"foo\"));",
                "+ </pre>",
                "+",
                "+ Or directly provided as a buffer:",
                "+ <p>",
                "+",
                "+ <pre>",
                "+ Buffer store = vertx.fileSystem().readFileSync(\"/mykeystore.jks\");",
                "+ options.setKeyStore(new JKSOptions().setValue(store).setPassword(\"foo\"));",
                "+ </pre>",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[password]]`@password`|`String`|+++",
                "+Set the password for the key store",
                "++++",
                "+|[[path]]`@path`|`String`|+++",
                "+Set the path to the key store",
                "++++",
                "+|[[value]]`@value`|`Buffer`|+++",
                "+Set the key store as a buffer",
                "++++",
                "+|===",
                "+",
                "+[[MetricsOptions]]",
                "+== MetricsOptions",
                "+",
                "+++++",
                "+ Vert.x metrics base configuration, this class can be extended by provider implementations to configure",
                "+ those specific implementations.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[enabled]]`@enabled`|`Boolean`|+++",
                "+Set whether metrics will be enabled on the Vert.x instance.",
                "++++",
                "+|===",
                "+",
                "+[[NetClientOptions]]",
                "+== NetClientOptions",
                "+",
                "+++++",
                "+ Options for configuring a link.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "+Set the connect timeout",
                "++++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "+Add a CRL path",
                "++++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "+Add a CRL value",
                "++++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "+Add an enabled cipher suite, appended to the ordered suites.",
                "++++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "+Sets the list of enabled SSL/TLS protocols.",
                "++++",
                "+|[[hostnameVerificationAlgorithm]]`@hostnameVerificationAlgorithm`|`String`|+++",
                "+Set the hostname verification algorithm interval",
                "+ To disable hostname verification, set hostnameVerificationAlgorithm to an empty String",
                "++++",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "+ This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                "++++",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                "++++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the key/cert options in jks format, aka Java keystore.",
                "++++",
                "+|[[localAddress]]`@localAddress`|`String`|+++",
                "+Set the local interface to bind for network connections. When the local address is null,",
                "+ it will pick any local address, the default local address is null.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[metricsName]]`@metricsName`|`String`|+++",
                "+Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "+ with the same name.",
                "++++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "+Set the key/cert store options in pem format.",
                "++++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "+Set the trust options in pem format",
                "++++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                "++++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the trust options in pfx format",
                "++++",
                "+|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                "+Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reconnectAttempts]]`@reconnectAttempts`|`Number (int)`|+++",
                "+Set the value of reconnect attempts",
                "++++",
                "+|[[reconnectInterval]]`@reconnectInterval`|`Number (long)`|+++",
                "+Set the reconnect interval",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "+Set whether SO_linger keep alive is enabled",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "+Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "+Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "+Set whether TCP keep alive is enabled",
                "++++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "+Set whether TCP no delay is enabled",
                "++++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "+Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "+Set whether all server certificates should be trusted",
                "++++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the trust options in jks format, aka Java truststore",
                "++++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "+Set the ALPN usage.",
                "++++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "+Set whether Netty pooled buffers are enabled",
                "++++",
                "+|===",
                "+",
                "+[[NetServerOptions]]",
                "+== NetServerOptions",
                "+",
                "+++++",
                "+ Options for configuring a link.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                "+Set the accept back log",
                "++++",
                "+|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                "+Set whether client auth is required",
                "++++",
                "+|[[clientAuthRequired]]`@clientAuthRequired`|`Boolean`|+++",
                "+Set whether client auth is required",
                "++++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "+Add a CRL path",
                "++++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "+Add a CRL value",
                "++++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "+Add an enabled cipher suite, appended to the ordered suites.",
                "++++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "+Sets the list of enabled SSL/TLS protocols.",
                "++++",
                "+|[[host]]`@host`|`String`|+++",
                "+Set the host",
                "++++",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "+ This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                "++++",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                "++++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the key/cert options in jks format, aka Java keystore.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "+Set the key/cert store options in pem format.",
                "++++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "+Set the trust options in pem format",
                "++++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                "++++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the trust options in pfx format",
                "++++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                "+Set the port",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[sni]]`@sni`|`Boolean`|+++",
                "+Set whether the server supports Server Name Indiciation",
                "++++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "+Set whether SO_linger keep alive is enabled",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "+Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "+Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "+Set whether TCP keep alive is enabled",
                "++++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "+Set whether TCP no delay is enabled",
                "++++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "+Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the trust options in jks format, aka Java truststore",
                "++++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "+Set the ALPN usage.",
                "++++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "+Set whether Netty pooled buffers are enabled",
                "++++",
                "+|===",
                "+",
                "+[[NetworkOptions]]",
                "+== NetworkOptions",
                "+",
                "+++++",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|===",
                "+",
                "+[[OpenOptions]]",
                "+== OpenOptions",
                "+",
                "+++++",
                "+ Describes how an link should be opened.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[append]]`@append`|`Boolean`|+++",
                "+Whether the file should be opened in append mode. Defaults to <code>false</code>.",
                "++++",
                "+|[[create]]`@create`|`Boolean`|+++",
                "+Set whether the file should be created if it does not already exist.",
                "++++",
                "+|[[createNew]]`@createNew`|`Boolean`|+++",
                "+Set whether the file should be created and fail if it does exist already.",
                "++++",
                "+|[[deleteOnClose]]`@deleteOnClose`|`Boolean`|+++",
                "+Set whether the file should be deleted when it's closed, or the JVM is shutdown.",
                "++++",
                "+|[[dsync]]`@dsync`|`Boolean`|+++",
                "+Set whether every write to the file's content  ill be written synchronously to the underlying hardware.",
                "++++",
                "+|[[perms]]`@perms`|`String`|+++",
                "+Set the permissions string",
                "++++",
                "+|[[read]]`@read`|`Boolean`|+++",
                "+Set whether the file is to be opened for reading",
                "++++",
                "+|[[sparse]]`@sparse`|`Boolean`|+++",
                "+Set whether a hint should be provided that the file to created is sparse",
                "++++",
                "+|[[sync]]`@sync`|`Boolean`|+++",
                "+Set whether every write to the file's content and meta-data will be written synchronously to the underlying hardware.",
                "++++",
                "+|[[truncateExisting]]`@truncateExisting`|`Boolean`|+++",
                "+Set whether the file should be truncated to zero length on opening if it exists and is opened for write",
                "++++",
                "+|[[write]]`@write`|`Boolean`|+++",
                "+Set whether the file is to be opened for writing",
                "++++",
                "+|===",
                "+",
                "+[[OpenSSLEngineOptions]]",
                "+== OpenSSLEngineOptions",
                "+",
                "+++++",
                "+ Configures a link to use OpenSsl.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[sessionCacheEnabled]]`@sessionCacheEnabled`|`Boolean`|+++",
                "+Set whether session cache is enabled in open SSL session server context",
                "++++",
                "+|===",
                "+",
                "+[[Option]]",
                "+== Option",
                "+",
                "+++++",
                "+ Models command line options. Options are values passed to a command line interface using -x or --x. Supported",
                "+ syntaxes depend on the parser.",
                "+ <p/>",
                "+ Short name is generally used with a single dash, while long name requires a double-dash.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[argName]]`@argName`|`String`|+++",
                "+Sets te arg name for this option.",
                "++++",
                "+|[[choices]]`@choices`|`Array of String`|+++",
                "+Sets the list of values accepted by this option. If the value set by the user does not match once of these",
                "+ values, a link exception is thrown.",
                "++++",
                "+|[[defaultValue]]`@defaultValue`|`String`|+++",
                "+Sets the default value of this option",
                "++++",
                "+|[[description]]`@description`|`String`|+++",
                "+Sets te description of this option.",
                "++++",
                "+|[[flag]]`@flag`|`Boolean`|+++",
                "+Configures the current link to be a flag. It will be evaluated to <code>true</code> if it's found in",
                "+ the command line. If you need a flag that may receive a value, use, in this order:",
                "+ <code><pre>",
                "+   option.setFlag(true).setSingleValued(true)",
                "+ </pre></code>",
                "++++",
                "+|[[help]]`@help`|`Boolean`|+++",
                "+Sets whether or not this option is a \"help\" option",
                "++++",
                "+|[[hidden]]`@hidden`|`Boolean`|+++",
                "+Sets whether or not this option should be hidden",
                "++++",
                "+|[[longName]]`@longName`|`String`|+++",
                "+Sets the long name of this option.",
                "++++",
                "+|[[multiValued]]`@multiValued`|`Boolean`|+++",
                "+Sets whether or not this option can receive several values.",
                "++++",
                "+|[[name]]`@name`|`String`|+++",
                "+",
                "++++",
                "+|[[required]]`@required`|`Boolean`|+++",
                "+Sets whether or not this option is mandatory.",
                "++++",
                "+|[[shortName]]`@shortName`|`String`|+++",
                "+Sets the short name of this option.",
                "++++",
                "+|[[singleValued]]`@singleValued`|`Boolean`|+++",
                "+Sets whether or not this option can receive a value.",
                "++++",
                "+|===",
                "+",
                "+[[PemKeyCertOptions]]",
                "+== PemKeyCertOptions",
                "+",
                "+++++",
                "+ Key store options configuring a list of private key and its certificate based on",
                "+ <i>Privacy-enhanced Electronic Email</i> (PEM) files.",
                "+ <p>",
                "+",
                "+ A key file must contain a <b>non encrypted</b> private key in <b>PKCS8</b> format wrapped in a PEM",
                "+ block, for example:",
                "+ <p>",
                "+",
                "+ <pre>",
                "+ -----BEGIN PRIVATE KEY-----",
                "+ MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDV6zPk5WqLwS0a",
                "+ ...",
                "+ K5xBhtm1AhdnZjx5KfW3BecE",
                "+ -----END PRIVATE KEY-----",
                "+ </pre><p>",
                "+",
                "+ Or contain a <b>non encrypted</b> private key in <b>PKCS1</b> format wrapped in a PEM",
                "+ block, for example:",
                "+ <p>",
                "+",
                "+ <pre>",
                "+ -----BEGIN RSA PRIVATE KEY-----",
                "+ MIIEowIBAAKCAQEAlO4gbHeFb/fmbUF/tOJfNPJumJUEqgzAzx8MBXv9Acyw9IRa",
                "+ ...",
                "+ zJ14Yd+t2fsLYVs2H0gxaA4DW6neCzgY3eKpSU0EBHUCFSXp/1+/",
                "+ -----END RSA PRIVATE KEY-----",
                "+ </pre><p>",
                "+",
                "+ A certificate file must contain an X.509 certificate wrapped in a PEM block, for example:",
                "+ <p>",
                "+",
                "+ <pre>",
                "+ -----BEGIN CERTIFICATE-----",
                "+ MIIDezCCAmOgAwIBAgIEZOI/3TANBgkqhkiG9w0BAQsFADBuMRAwDgYDVQQGEwdV",
                "+ ...",
                "+ +tmLSvYS39O2nqIzzAUfztkYnUlZmB0l/mKkVqbGJA==",
                "+ -----END CERTIFICATE-----",
                "+ </pre>",
                "+",
                "+ Keys and certificates can either be loaded by Vert.x from the filesystem:",
                "+ <p>",
                "+ <pre>",
                "+ HttpServerOptions options = new HttpServerOptions();",
                "+ options.setPemKeyCertOptions(new PemKeyCertOptions().setKeyPath(\"/mykey.pem\").setCertPath(\"/mycert.pem\"));",
                "+ </pre>",
                "+",
                "+ Or directly provided as a buffer:<p>",
                "+",
                "+ <pre>",
                "+ Buffer key = vertx.fileSystem().readFileSync(\"/mykey.pem\");",
                "+ Buffer cert = vertx.fileSystem().readFileSync(\"/mycert.pem\");",
                "+ options.setPemKeyCertOptions(new PemKeyCertOptions().setKeyValue(key).setCertValue(cert));",
                "+ </pre>",
                "+",
                "+ Several key/certificate pairs can be used:",
                "+ <p>",
                "+ <pre>",
                "+ HttpServerOptions options = new HttpServerOptions();",
                "+ options.setPemKeyCertOptions(new PemKeyCertOptions()",
                "+    .addKeyPath(\"/mykey1.pem\").addCertPath(\"/mycert1.pem\")",
                "+    .addKeyPath(\"/mykey2.pem\").addCertPath(\"/mycert2.pem\"));",
                "+ </pre>",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[certPath]]`@certPath`|`String`|+++",
                "+Set the path of the first certificate, replacing the previous certificates paths",
                "++++",
                "+|[[certPaths]]`@certPaths`|`Array of String`|+++",
                "+Set all the paths to the certificates files",
                "++++",
                "+|[[certValue]]`@certValue`|`Buffer`|+++",
                "+Set the first certificate as a buffer, replacing the previous certificates buffers",
                "++++",
                "+|[[certValues]]`@certValues`|`Array of Buffer`|+++",
                "+Set all the certificates as a list of buffer",
                "++++",
                "+|[[keyPath]]`@keyPath`|`String`|+++",
                "+Set the path of the first key file, replacing the keys paths",
                "++++",
                "+|[[keyPaths]]`@keyPaths`|`Array of String`|+++",
                "+Set all the paths to the keys files",
                "++++",
                "+|[[keyValue]]`@keyValue`|`Buffer`|+++",
                "+Set the first key a a buffer, replacing the previous keys buffers",
                "++++",
                "+|[[keyValues]]`@keyValues`|`Array of Buffer`|+++",
                "+Set all the keys as a list of buffer",
                "++++",
                "+|===",
                "+",
                "+[[PemTrustOptions]]",
                "+== PemTrustOptions",
                "+",
                "+++++",
                "+ Certificate Authority options configuring certificates based on",
                "+ <i>Privacy-enhanced Electronic Email</i> (PEM) files. The options is configured with a list of",
                "+ validating certificates.",
                "+ <p>",
                "+ Validating certificates must contain X.509 certificates wrapped in a PEM block:<p>",
                "+",
                "+ <pre>",
                "+ -----BEGIN CERTIFICATE-----",
                "+ MIIDezCCAmOgAwIBAgIEVmLkwTANBgkqhkiG9w0BAQsFADBuMRAwDgYDVQQGEwdV",
                "+ ...",
                "+ z5+DuODBJUQst141Jmgq8bS543IU/5apcKQeGNxEyQ==",
                "+ -----END CERTIFICATE-----",
                "+ </pre>",
                "+",
                "+ The certificates can either be loaded by Vert.x from the filesystem:",
                "+ <p>",
                "+ <pre>",
                "+ HttpServerOptions options = new HttpServerOptions();",
                "+ options.setPemTrustOptions(new PemTrustOptions().addCertPath(\"/cert.pem\"));",
                "+ </pre>",
                "+",
                "+ Or directly provided as a buffer:",
                "+ <p>",
                "+",
                "+ <pre>",
                "+ Buffer cert = vertx.fileSystem().readFileSync(\"/cert.pem\");",
                "+ HttpServerOptions options = new HttpServerOptions();",
                "+ options.setPemTrustOptions(new PemTrustOptions().addCertValue(cert));",
                "+ </pre>",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[certPaths]]`@certPaths`|`Array of String`|+++",
                "+Add a certificate path",
                "++++",
                "+|[[certValues]]`@certValues`|`Array of Buffer`|+++",
                "+Add a certificate value",
                "++++",
                "+|===",
                "+",
                "+[[PfxOptions]]",
                "+== PfxOptions",
                "+",
                "+++++",
                "+ Key or trust store options configuring private key and/or certificates based on PKCS#12 files.",
                "+ <p>",
                "+ When used as a key store, it should point to a store containing a private key and its certificate.",
                "+ When used as a trust store, it should point to a store containing a list of accepted certificates.",
                "+ <p>",
                "+",
                "+ The store can either be loaded by Vert.x from the filesystem:",
                "+ <p>",
                "+ <pre>",
                "+ HttpServerOptions options = new HttpServerOptions();",
                "+ options.setPfxKeyCertOptions(new PfxOptions().setPath(\"/mykeystore.p12\").setPassword(\"foo\"));",
                "+ </pre>",
                "+",
                "+ Or directly provided as a buffer:<p>",
                "+",
                "+ <pre>",
                "+ Buffer store = vertx.fileSystem().readFileSync(\"/mykeystore.p12\");",
                "+ options.setPfxKeyCertOptions(new PfxOptions().setValue(store).setPassword(\"foo\"));",
                "+ </pre>",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[password]]`@password`|`String`|+++",
                "+Set the password",
                "++++",
                "+|[[path]]`@path`|`String`|+++",
                "+Set the path",
                "++++",
                "+|[[value]]`@value`|`Buffer`|+++",
                "+Set the store as a buffer",
                "++++",
                "+|===",
                "+",
                "+[[ProxyOptions]]",
                "+== ProxyOptions",
                "+",
                "+++++",
                "+ Proxy options for a net client or a net client.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[host]]`@host`|`String`|+++",
                "+Set proxy host.",
                "++++",
                "+|[[password]]`@password`|`String`|+++",
                "+Set proxy password.",
                "++++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                "+Set proxy port.",
                "++++",
                "+|[[type]]`@type`|`link:enums.html#ProxyType[ProxyType]`|+++",
                "+Set proxy type.",
                "+",
                "+ <p>ProxyType can be HTTP, SOCKS4 and SOCKS5",
                "++++",
                "+|[[username]]`@username`|`String`|+++",
                "+Set proxy username.",
                "++++",
                "+|===",
                "+",
                "+[[RequestOptions]]",
                "+== RequestOptions",
                "+",
                "+++++",
                "+ Options describing how an link will make connect to make a request.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[host]]`@host`|`String`|+++",
                "+Set the host name to be used by the client request.",
                "++++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                "+Set the port to be used by the client request.",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[uri]]`@uri`|`String`|+++",
                "+Set the request relative URI",
                "++++",
                "+|===",
                "+",
                "+[[TCPSSLOptions]]",
                "+== TCPSSLOptions",
                "+",
                "+++++",
                "+ Base class. TCP and SSL related options",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "+Add a CRL path",
                "++++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "+Add a CRL value",
                "++++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "+Add an enabled cipher suite, appended to the ordered suites.",
                "++++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "+Sets the list of enabled SSL/TLS protocols.",
                "++++",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "+ This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                "++++",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                "++++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the key/cert options in jks format, aka Java keystore.",
                "++++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "++++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "+Set the key/cert store options in pem format.",
                "++++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "+Set the trust options in pem format",
                "++++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                "++++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the trust options in pfx format",
                "++++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "+Set the TCP receive buffer size",
                "++++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "+Set the value of reuse address",
                "++++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "+Set the value of reuse port.",
                "+ <p/>",
                "+ This is only supported by native transports.",
                "++++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "+Set the TCP send buffer size",
                "++++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "+Set whether SO_linger keep alive is enabled",
                "++++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                "+Set whether SSL/TLS is enabled",
                "++++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "+Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "+Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "++++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "+Set whether TCP keep alive is enabled",
                "++++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "+Set whether TCP no delay is enabled",
                "++++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "+Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "++++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "+Set the value of traffic class",
                "++++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "+Set the trust options in jks format, aka Java truststore",
                "++++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "+Set the ALPN usage.",
                "++++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "+Set whether Netty pooled buffers are enabled",
                "++++",
                "+|===",
                "+",
                "+[[VertxOptions]]",
                "+== VertxOptions",
                "+",
                "+++++",
                "+ Instances of this class are used to configure link instances.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Type ^| Description",
                "+|[[addressResolverOptions]]`@addressResolverOptions`|`link:dataobjects.html#AddressResolverOptions[AddressResolverOptions]`|+++",
                "+Sets the address resolver configuration to configure resolving DNS servers, cache TTL, etc...",
                "++++",
                "+|[[blockedThreadCheckInterval]]`@blockedThreadCheckInterval`|`Number (long)`|+++",
                "+Sets the value of blocked thread check period, in link.",
                "+ <p>",
                "+ The default value of link is",
                "++++",
                "+|[[blockedThreadCheckIntervalUnit]]`@blockedThreadCheckIntervalUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>blockedThreadCheckInterval</code>.",
                "++++",
                "+|[[clusterHost]]`@clusterHost`|`String`|+++",
                "+Set the hostname to be used for clustering.",
                "++++",
                "+|[[clusterPingInterval]]`@clusterPingInterval`|`Number (long)`|+++",
                "+Set the value of cluster ping interval, in ms.",
                "++++",
                "+|[[clusterPingReplyInterval]]`@clusterPingReplyInterval`|`Number (long)`|+++",
                "+Set the value of cluster ping reply interval, in ms.",
                "++++",
                "+|[[clusterPort]]`@clusterPort`|`Number (int)`|+++",
                "+Set the port to be used for clustering.",
                "++++",
                "+|[[clusterPublicHost]]`@clusterPublicHost`|`String`|+++",
                "+Set the public facing hostname to be used for clustering.",
                "+ Sometimes, e.g. when running on certain clouds, the local address the server listens on for clustering is not the same",
                "+ address that other nodes connect to it at, as the OS / cloud infrastructure does some kind of proxying.",
                "+ If this is the case you can specify a public hostname which is different from the hostname the server listens at.",
                "+ The default value is null which means use the same as the cluster hostname.",
                "++++",
                "+|[[clusterPublicPort]]`@clusterPublicPort`|`Number (int)`|+++",
                "+See link for an explanation.",
                "++++",
                "+|[[clustered]]`@clustered`|`Boolean`|+++",
                "+Set whether or not the Vert.x instance will be clustered.",
                "++++",
                "+|[[eventBusOptions]]`@eventBusOptions`|`link:dataobjects.html#EventBusOptions[EventBusOptions]`|+++",
                "+Sets the event bus configuration to configure the host, port, ssl...",
                "++++",
                "+|[[eventLoopPoolSize]]`@eventLoopPoolSize`|`Number (int)`|+++",
                "+Set the number of event loop threads to be used by the Vert.x instance.",
                "++++",
                "+|[[fileResolverCachingEnabled]]`@fileResolverCachingEnabled`|`Boolean`|+++",
                "+Set wether the Vert.x file resolver uses caching for classpath resources.",
                "++++",
                "+|[[haEnabled]]`@haEnabled`|`Boolean`|+++",
                "+Set whether HA will be enabled on the Vert.x instance.",
                "++++",
                "+|[[haGroup]]`@haGroup`|`String`|+++",
                "+Set the HA group to be used when HA is enabled.",
                "++++",
                "+|[[internalBlockingPoolSize]]`@internalBlockingPoolSize`|`Number (int)`|+++",
                "+Set the value of internal blocking pool size",
                "++++",
                "+|[[maxEventLoopExecuteTime]]`@maxEventLoopExecuteTime`|`Number (long)`|+++",
                "+Sets the value of max event loop execute time, in link.",
                "+ <p>",
                "+ The default value of linkis",
                "++++",
                "+|[[maxEventLoopExecuteTimeUnit]]`@maxEventLoopExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>maxEventLoopExecuteTime</code>.",
                "++++",
                "+|[[maxWorkerExecuteTime]]`@maxWorkerExecuteTime`|`Number (long)`|+++",
                "+Sets the value of max worker execute time, in link.",
                "+ <p>",
                "+ The default value of link is",
                "++++",
                "+|[[maxWorkerExecuteTimeUnit]]`@maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>maxWorkerExecuteTime</code>.",
                "++++",
                "+|[[metricsOptions]]`@metricsOptions`|`link:dataobjects.html#MetricsOptions[MetricsOptions]`|+++",
                "+Set the metrics options",
                "++++",
                "+|[[preferNativeTransport]]`@preferNativeTransport`|`Boolean`|+++",
                "+Set wether to prefer the native transport to the JDK transport.",
                "++++",
                "+|[[quorumSize]]`@quorumSize`|`Number (int)`|+++",
                "+Set the quorum size to be used when HA is enabled.",
                "++++",
                "+|[[warningExceptionTime]]`@warningExceptionTime`|`Number (long)`|+++",
                "+Set the threshold value above this, the blocked warning contains a stack trace. in link.",
                "+ The default value of link is",
                "++++",
                "+|[[warningExceptionTimeUnit]]`@warningExceptionTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>warningExceptionTime</code>.",
                "++++",
                "+|[[workerPoolSize]]`@workerPoolSize`|`Number (int)`|+++",
                "+Set the maximum number of worker threads to be used by the Vert.x instance.",
                "++++",
                "+|===",
                "+",
                "diff --git a/src/main/asciidocs/enums.adoc b/src/main/asciidocs/enums.adoc",
                "new file mode 100644",
                "index 000000000..15c120110",
                "--- /dev/null",
                "+++ b/src/main/asciidocs/enums.adoc",
                "@@ -0,0 +1,223 @@",
                "+= Enums",
                "+",
                "+[[ClientAuth]]",
                "+== ClientAuth",
                "+",
                "+++++",
                "+ Configures the engine to require/request client authentication.",
                "+ <p/>",
                "+ Created by manishk on 10/2/2015.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[NONE]]`NONE`|+++",
                "+No client authentication is requested or required.",
                "++++",
                "+|[[REQUEST]]`REQUEST`|+++",
                "+Accept authentication if presented by client. If this option is set and the client chooses",
                "+ not to provide authentication information about itself, the negotiations will continue.",
                "++++",
                "+|[[REQUIRED]]`REQUIRED`|+++",
                "+Require client to present authentication, if not presented then negotiations will be declined.",
                "++++",
                "+|===",
                "+",
                "+[[DnsResponseCode]]",
                "+== DnsResponseCode",
                "+",
                "+++++",
                "+ Represents the possible response codes a server may send after receiving a",
                "+ query. A response code of 0 indicates no error.",
                "+",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[NOERROR]]`NOERROR`|+++",
                "+ID 0, no error",
                "++++",
                "+|[[FORMERROR]]`FORMERROR`|+++",
                "+ID 1, format error",
                "++++",
                "+|[[SERVFAIL]]`SERVFAIL`|+++",
                "+ID 2, server failure",
                "++++",
                "+|[[NXDOMAIN]]`NXDOMAIN`|+++",
                "+ID 3, name error",
                "++++",
                "+|[[NOTIMPL]]`NOTIMPL`|+++",
                "+ID 4, not implemented",
                "++++",
                "+|[[REFUSED]]`REFUSED`|+++",
                "+ID 5, operation refused",
                "++++",
                "+|[[YXDOMAIN]]`YXDOMAIN`|+++",
                "+ID 6, domain name should not exist",
                "++++",
                "+|[[YXRRSET]]`YXRRSET`|+++",
                "+ID 7, resource record set should not exist",
                "++++",
                "+|[[NXRRSET]]`NXRRSET`|+++",
                "+ID 8, rrset does not exist",
                "++++",
                "+|[[NOTAUTH]]`NOTAUTH`|+++",
                "+ID 9, not authoritative for zone",
                "++++",
                "+|[[NOTZONE]]`NOTZONE`|+++",
                "+ID 10, name not in zone",
                "++++",
                "+|[[BADVERS]]`BADVERS`|+++",
                "+ID 11, bad extension mechanism for version",
                "++++",
                "+|[[BADSIG]]`BADSIG`|+++",
                "+ID 12, bad signature",
                "++++",
                "+|[[BADKEY]]`BADKEY`|+++",
                "+ID 13, bad key",
                "++++",
                "+|[[BADTIME]]`BADTIME`|+++",
                "+ID 14, bad timestamp",
                "++++",
                "+|===",
                "+",
                "+[[HttpMethod]]",
                "+== HttpMethod",
                "+",
                "+++++",
                "+ Represents an HTTP method",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[OPTIONS]]`OPTIONS`|-",
                "+|[[GET]]`GET`|-",
                "+|[[HEAD]]`HEAD`|-",
                "+|[[POST]]`POST`|-",
                "+|[[PUT]]`PUT`|-",
                "+|[[DELETE]]`DELETE`|-",
                "+|[[TRACE]]`TRACE`|-",
                "+|[[CONNECT]]`CONNECT`|-",
                "+|[[PATCH]]`PATCH`|-",
                "+|[[OTHER]]`OTHER`|-",
                "+|===",
                "+",
                "+[[HttpVersion]]",
                "+== HttpVersion",
                "+",
                "+++++",
                "+ Represents the version of the HTTP protocol.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[HTTP_1_0]]`HTTP_1_0`|-",
                "+|[[HTTP_1_1]]`HTTP_1_1`|-",
                "+|[[HTTP_2]]`HTTP_2`|-",
                "+|===",
                "+",
                "+[[JsonEventType]]",
                "+== JsonEventType",
                "+",
                "+++++",
                "+ The possibles types of link emitted by the link.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[START_OBJECT]]`START_OBJECT`|+++",
                "+Signals the start of a JSON object.",
                "++++",
                "+|[[END_OBJECT]]`END_OBJECT`|+++",
                "+Signals the end of a JSON object.",
                "++++",
                "+|[[START_ARRAY]]`START_ARRAY`|+++",
                "+Signals the start of a JSON array.",
                "++++",
                "+|[[END_ARRAY]]`END_ARRAY`|+++",
                "+Signals the end of a JSON array.",
                "++++",
                "+|[[VALUE]]`VALUE`|+++",
                "+Signals a JSON value.",
                "++++",
                "+|===",
                "+",
                "+[[ProxyType]]",
                "+== ProxyType",
                "+",
                "+++++",
                "+ The type of a TCP proxy server.",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[HTTP]]`HTTP`|+++",
                "+HTTP CONNECT ssl proxy",
                "++++",
                "+|[[SOCKS4]]`SOCKS4`|+++",
                "+SOCKS4/4a tcp proxy",
                "++++",
                "+|[[SOCKS5]]`SOCKS5`|+++",
                "+SOCSK5 tcp proxy",
                "++++",
                "+|===",
                "+",
                "+[[ReplyFailure]]",
                "+== ReplyFailure",
                "+",
                "+++++",
                "+ Represents the type of reply failure",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[TIMEOUT]]`TIMEOUT`|+++",
                "+The message send failed because no reply was received before the timeout time.",
                "++++",
                "+|[[NO_HANDLERS]]`NO_HANDLERS`|+++",
                "+The message send failed because no handlers were available to handle the message.",
                "++++",
                "+|[[RECIPIENT_FAILURE]]`RECIPIENT_FAILURE`|+++",
                "+The message send failed because the recipient actively sent back a failure (rejected the message)",
                "++++",
                "+|===",
                "+",
                "+[[WebsocketVersion]]",
                "+== WebsocketVersion",
                "+",
                "+++++",
                "+ Represents the WebSocket version",
                "+++++",
                "+'''",
                "+",
                "+[cols=\">25%,75%\"]",
                "+[frame=\"topbot\"]",
                "+|===",
                "+^|Name | Description",
                "+|[[V00]]`V00`|-",
                "+|[[V07]]`V07`|-",
                "+|[[V08]]`V08`|-",
                "+|[[V13]]`V13`|-",
                "+|===",
                "+",
                "diff --git a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "index d26c1fae6..88260beae 100644",
                "--- a/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/VertxOptionsConverter.java b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "index fb225784e..8fe26cb3a 100644",
                "--- a/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "index 422aaaa9f..a230bbcc4 100644",
                "--- a/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/cli/OptionConverter.java b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "index 2ab608306..223b26a2a 100644",
                "--- a/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "+++ b/src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "index 82004bce3..875e01795 100644",
                "--- a/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "index d9efb409f..b95642442 100644",
                "--- a/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "index bf6c6d407..fd69338dc 100644",
                "--- a/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "index 00d1f836a..05dc4f725 100644",
                "--- a/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "index 139adbdb3..d9539b341 100644",
                "--- a/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "index 1532daae3..05bf17311 100644",
                "--- a/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/http/GoAwayConverter.java b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "index 510e1ebc7..a95fcdaba 100644",
                "--- a/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "index 2c7d7a854..7a74b1f88 100644",
                "--- a/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "index 06a0feb17..f0e447176 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "index 4f32f4a9a..3496ebe83 100644",
                "--- a/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "index f50ecd3a6..1fcb02fbe 100644",
                "--- a/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "index da5b170aa..1f75a5b53 100644",
                "--- a/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "index e92abf810..20613470d 100644",
                "--- a/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "index df2b42066..8b9ca996b 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "index f246511cd..608e36bf2 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "index f08ff4a6c..95e612e39 100644",
                "--- a/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "index 49201afd5..99ad6a7ef 100644",
                "--- a/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "index 1919319f9..0fe38c2d2 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "index b05ee9b59..f8e2cc679 100644",
                "--- a/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "index 129bd228d..525e6237e 100644",
                "--- a/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "index 6e9f99e31..b72286243 100644",
                "--- a/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;",
                "diff --git a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "index edd727911..eaa82b434 100644",
                "--- a/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "+++ b/src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java",
                "@@ -4,2 +4,4 @@ import io.vertx.core.json.JsonObject;",
                " import io.vertx.core.json.JsonArray;",
                "+import java.time.Instant;",
                "+import java.time.format.DateTimeFormatter;"
            ],
            "changed_files": [
                "src/main/asciidocs/dataobjects.adoc",
                "src/main/asciidocs/enums.adoc",
                "src/main/generated/io/vertx/core/DeploymentOptionsConverter.java",
                "src/main/generated/io/vertx/core/VertxOptionsConverter.java",
                "src/main/generated/io/vertx/core/cli/ArgumentConverter.java",
                "src/main/generated/io/vertx/core/cli/OptionConverter.java",
                "src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java",
                "src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/CopyOptionsConverter.java",
                "src/main/generated/io/vertx/core/file/OpenOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/GoAwayConverter.java",
                "src/main/generated/io/vertx/core/http/Http2SettingsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java",
                "src/main/generated/io/vertx/core/net/JksOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/PfxOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java",
                "src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/generated/io/vertx/core/http/HttpServerOptionsConverter.java, src/main/generated/io/vertx/core/net/PfxOptionsConverter.java, src/main/generated/io/vertx/core/file/CopyOptionsConverter.java, src/main/generated/io/vertx/core/net/ProxyOptionsConverter.java, src/main/generated/io/vertx/core/http/GoAwayConverter.java, src/main/generated/io/vertx/core/cli/ArgumentConverter.java, src/main/generated/io/vertx/core/net/JksOptionsConverter.java, src/main/generated/io/vertx/core/net/OpenSSLEngineOptionsConverter.java, src/main/generated/io/vertx/core/cli/OptionConverter.java, src/main/generated/io/vertx/core/net/NetworkOptionsConverter.java, src/main/generated/io/vertx/core/net/TCPSSLOptionsConverter.java, src/main/generated/io/vertx/core/dns/AddressResolverOptionsConverter.java, src/main/generated/io/vertx/core/DeploymentOptionsConverter.java, src/main/generated/io/vertx/core/file/OpenOptionsConverter.java, src/main/generated/io/vertx/core/net/ClientOptionsBaseConverter.java, src/main/generated/io/vertx/core/net/NetClientOptionsConverter.java, src/main/generated/io/vertx/core/datagram/DatagramSocketOptionsConverter.java, src/main/generated/io/vertx/core/http/Http2SettingsConverter.java, src/main/generated/io/vertx/core/net/PemKeyCertOptionsConverter.java, src/main/generated/io/vertx/core/eventbus/EventBusOptionsConverter.java, src/main/generated/io/vertx/core/net/PemTrustOptionsConverter.java, src/main/generated/io/vertx/core/net/NetServerOptionsConverter.java, src/main/generated/io/vertx/core/dns/DnsClientOptionsConverter.java, src/main/generated/io/vertx/core/metrics/MetricsOptionsConverter.java, src/main/generated/io/vertx/core/VertxOptionsConverter.java, src/main/generated/io/vertx/core/http/HttpClientOptionsConverter.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "68819459922f2a4c553fcd7590e404635c7e21fa",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533808984,
            "hunks": 2,
            "message": "Avoid to call HttpClientMetrics#responseBegin with a null HttpClientResponse object",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "index baa5f9de3..eeb8a9f6a 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                "@@ -449,2 +449,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       }",
                "+      response = new HttpClientResponseImpl(request, version, this, resp.status().code(), resp.status().reasonPhrase(), new HeadersAdaptor(resp.headers()));",
                "       if (conn.metrics != null) {",
                "@@ -474,3 +475,3 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC",
                "       }",
                "-      return response = new HttpClientResponseImpl(request, version, this, resp.status().code(), resp.status().reasonPhrase(), new HeadersAdaptor(resp.headers()));",
                "+      return response;",
                "     }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "402a0bad0c55d83497a35139c43afc4840624356",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529491289,
            "hunks": 2,
            "message": "Fail future with message instead of VertxException when waiter times out Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "index 67254fe21..03b80ec12 100644",
                "--- a/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "+++ b/src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                "@@ -17,3 +17,2 @@ import io.vertx.core.Future;",
                " import io.vertx.core.Handler;",
                "-import io.vertx.core.VertxException;",
                " import io.vertx.core.shareddata.Lock;",
                "@@ -56,3 +55,3 @@ public class LocalAsyncLocks {",
                "       if (status.compareAndSet(Status.WAITING, Status.TIMED_OUT)) {",
                "-        handler.handle(Future.failedFuture(new VertxException(\"Timed out waiting to get lock\")));",
                "+        handler.handle(Future.failedFuture(\"Timed out waiting to get lock\"));",
                "       }"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "203c4e79b60119b27fe192f2fee0f3facb5a1f17",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533304280,
            "hunks": 2,
            "message": "Minor doc improvement refering to invalid names",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/streams/ReadStream.java b/src/main/java/io/vertx/core/streams/ReadStream.java",
                "index dccb42f70..3cdeaac1e 100644",
                "--- a/src/main/java/io/vertx/core/streams/ReadStream.java",
                "+++ b/src/main/java/io/vertx/core/streams/ReadStream.java",
                "@@ -46,3 +46,3 @@ public interface ReadStream<T> extends StreamBase {",
                "   /**",
                "-   * Pause the {@code ReadSupport}. While it's paused, no data will be sent to the {@code dataHandler}",
                "+   * Pause the {@code ReadStream}. While it's paused, no data will be sent to the data {@code handler}",
                "    *",
                "@@ -54,3 +54,3 @@ public interface ReadStream<T> extends StreamBase {",
                "   /**",
                "-   * Resume reading. If the {@code ReadSupport} has been paused, reading will recommence on it.",
                "+   * Resume reading. If the {@code ReadStream} has been paused, reading will recommence on it.",
                "    *"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/streams/ReadStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/streams/ReadStream.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "a4d13b6e25d51de3b73df9cee6bf47f6ac66fdf9",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527232913,
            "hunks": 4,
            "message": "Extract the ConnectionListener creation in a separate method in Pool",
            "diff": [
                "diff --git a/src/main/java/io/vertx/core/http/impl/pool/Pool.java b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "index 068f9791c..d7af13fe9 100644",
                "--- a/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "+++ b/src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                "@@ -239,5 +239,4 @@ public class Pool<C> {",
                "-  private void createConnection(Waiter<C> waiter) {",
                "-    Holder<C> holder  = new Holder<>();",
                "-    ConnectionListener<C> listener = new ConnectionListener<C>() {",
                "+  private ConnectionListener<C> createListener(Holder<C> holder) {",
                "+    return new ConnectionListener<C>() {",
                "       @Override",
                "@@ -261,2 +260,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -273,2 +273,3 @@ public class Pool<C> {",
                "       }",
                "+",
                "       @Override",
                "@@ -283,2 +284,7 @@ public class Pool<C> {",
                "     };",
                "+  }",
                "+",
                "+  private void createConnection(Waiter<C> waiter) {",
                "+    Holder<C> holder  = new Holder<>();",
                "+    ConnectionListener<C> listener = createListener(holder);",
                "     connector.connect(listener, waiter.context, ar -> {"
            ],
            "changed_files": [
                "src/main/java/io/vertx/core/http/impl/pool/Pool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/io/vertx/core/http/impl/pool/Pool.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "a6f01d249c402a8a61498a37030297f9e56cefb3",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529349530,
            "hunks": 21,
            "message": "Fix minor typos and grammar Also some small formatting improvements. Signed-off-by: S\u00c3\u00a9bastien Le Callonnec <sebastien@weblogism.com>",
            "diff": [
                "diff --git a/src/main/asciidoc/eventbus.adoc b/src/main/asciidoc/eventbus.adoc",
                "index dd9fefa9e..7120574a8 100644",
                "--- a/src/main/asciidoc/eventbus.adoc",
                "+++ b/src/main/asciidoc/eventbus.adoc",
                "@@ -7,6 +7,6 @@ There is a single event bus instance for every Vert.x instance and it is obtaine",
                "-The event bus allows different parts of your application to communicate with each other irrespective of what language they are written in,",
                "+The event bus allows different parts of your application to communicate with each other, irrespective of what language they are written in,",
                " and whether they're in the same Vert.x instance, or in a different Vert.x instance.",
                "-It can even be bridged to allow client side JavaScript running in a browser to communicate on the same event bus.",
                "+It can even be bridged to allow client-side JavaScript running in a browser to communicate on the same event bus.",
                "@@ -14,3 +14,3 @@ The event bus forms a distributed peer-to-peer messaging system spanning multipl",
                "-The event bus supports publish/subscribe, point to point, and request-response messaging.",
                "+The event bus supports publish/subscribe, point-to-point, and request-response messaging.",
                "@@ -28,3 +28,3 @@ Messages are sent on the event bus to an *address*.",
                " Vert.x doesn't bother with any fancy addressing schemes. In Vert.x an address is simply a string.",
                "-Any string is valid. However it is wise to use some kind of scheme, e.g. using periods to demarcate a namespace.",
                "+Any string is valid. However it is wise to use some kind of scheme, _e.g._ using periods to demarcate a namespace.",
                "@@ -34,3 +34,3 @@ Some examples of valid addresses are +europe.news.feed1+, +acme.games.pacman+, +",
                "-Messages are received in handlers. You register a handler at an address.",
                "+Messages are received by handlers. You register a handler at an address.",
                "@@ -49,7 +49,7 @@ This is the familiar *publish/subscribe* messaging pattern.",
                "-==== Point to point and Request-Response messaging",
                "+==== Point-to-point and Request-Response messaging",
                "-The event bus also supports *point to point* messaging.",
                "+The event bus also supports *point-to-point* messaging.",
                "-Messages are sent to an address. Vert.x will then route it to just one of the handlers registered at that address.",
                "+Messages are sent to an address. Vert.x will then route them to just one of the handlers registered at that address.",
                "@@ -58,9 +58,9 @@ one will be chosen using a non-strict round-robin algorithm.",
                "-With point to point messaging, an optional reply handler can be specified when sending the message.",
                "+With point-to-point messaging, an optional reply handler can be specified when sending the message.",
                " When a message is received by a recipient, and has been handled, the recipient can optionally decide to reply to",
                "-the message. If they do so the reply handler will be called.",
                "+the message. If they do so, the reply handler will be called.",
                "-When the reply is received back at the sender, it too can be replied to. This can be repeated ad-infinitum,",
                "-and allows a dialog to be set-up between two different verticles.",
                "+When the reply is received back by the sender, it too can be replied to. This can be repeated _ad infinitum_,",
                "+and allows a dialog to be set up between two different verticles.",
                "@@ -70,5 +70,5 @@ This is a common messaging pattern called the *request-response* pattern.",
                "-Vert.x does it's best to deliver messages and won't consciously throw them away. This is called *best-effort* delivery.",
                "+Vert.x does its best to deliver messages and won't consciously throw them away. This is called *best-effort* delivery.",
                "-However, in case of failure of all or parts of the event bus, there is a possibility messages will be lost.",
                "+However, in case of failure of all or parts of the event bus, there is a possibility messages might be lost.",
                "@@ -90,3 +90,3 @@ However you are not forced to use JSON if you don't want to.",
                " The event bus is very flexible and also supports sending arbitrary objects over the event bus.",
                "-You do this by defining a {@link io.vertx.core.eventbus.MessageCodec codec} for the objects you want to send.",
                "+You can do this by defining a {@link io.vertx.core.eventbus.MessageCodec codec} for the objects you want to send.",
                "@@ -94,3 +94,3 @@ You do this by defining a {@link io.vertx.core.eventbus.MessageCodec codec} for",
                "-Let's jump into the API",
                "+Let's jump into the API.",
                "@@ -119,3 +119,3 @@ When a message arrives for your handler, your handler will be called, passing in",
                "-The object returned from call to +consumer()+ is an instance of {@link io.vertx.core.eventbus.MessageConsumer}",
                "+The object returned from call to +consumer()+ is an instance of {@link io.vertx.core.eventbus.MessageConsumer}.",
                "@@ -124,3 +124,3 @@ This object can subsequently be used to unregister the handler, or use the handl",
                " Alternatively you can use {@link io.vertx.core.eventbus.EventBus#consumer(String,io.vertx.core.Handler)} to",
                "-to return a +MessageConsumer+ with no handler set, and then set the handler on that. For example:",
                "+return a +MessageConsumer+ with no handler set, and then set the handler on that. For example:",
                "@@ -146,4 +146,4 @@ To unregister a handler, call {@link io.vertx.core.eventbus.MessageConsumer#unre",
                "-If you are on a clustered event bus, un-registering can take some time to propagate across the nodes, if you want to",
                "-be notified when this is complete use {@link io.vertx.core.eventbus.MessageConsumer#unregister(io.vertx.core.Handler)}.",
                "+If you are on a clustered event bus, un-registering can take some time to propagate across the nodes.  If you want to",
                "+be notified when this is complete, use {@link io.vertx.core.eventbus.MessageConsumer#unregister(io.vertx.core.Handler)}.",
                "@@ -169,5 +169,5 @@ That message will then be delivered to all handlers registered against the addre",
                " Sending a message will result in only one handler registered at the address receiving the message.",
                "-This is the point to point messaging pattern. The handler is chosen in a non-strict round-robin fashion.",
                "+This is the point-to-point messaging pattern. The handler is chosen in a non-strict round-robin fashion.",
                "-You can send a message with {@link io.vertx.core.eventbus.EventBus#send}",
                "+You can send a message with {@link io.vertx.core.eventbus.EventBus#send}.",
                "@@ -199,3 +199,3 @@ In some cases it's useful for the sender to know when the consumer has received",
                "-To acknowledge that the message has been processed the consumer can reply to the message by calling {@link io.vertx.core.eventbus.Message#reply}.",
                "+To acknowledge that the message has been processed, the consumer can reply to the message by calling {@link io.vertx.core.eventbus.Message#reply}.",
                "@@ -221,3 +221,3 @@ The reply can contain a message body which can contain useful information.",
                "-What the \"processing\" actually means is application defined and depends entirely on what the message consumer does",
                "+What the \"processing\" actually means is application-defined and depends entirely on what the message consumer does",
                " and is not something that the Vert.x event bus itself knows or cares about.",
                "@@ -235,3 +235,3 @@ so it can be deleted from the database",
                "-When sending a message with a reply handler you can specify a timeout in the {@link io.vertx.core.eventbus.DeliveryOptions}.",
                "+When sending a message with a reply handler, you can specify a timeout in the {@link io.vertx.core.eventbus.DeliveryOptions}.",
                "@@ -248,3 +248,3 @@ Message sends can fail for other reasons, including:",
                "-In all cases the reply handler will be called with the specific failure.",
                "+In all cases, the reply handler will be called with the specific failure.",
                "@@ -255,3 +255,3 @@ include::override/eventbus.adoc[]",
                " The event bus doesn't just exist in a single Vert.x instance. By clustering different Vert.x instances together on",
                "-your network they can form a single, distributed, event bus.",
                "+your network they can form a single, distributed event bus.",
                "@@ -284,3 +284,3 @@ when the verticle is undeployed.",
                " The event bus can be configured. It is particularly useful when the event bus is clustered. Under the hood",
                "-the event bus uses TCP connections to send and receive message, so the",
                "+the event bus uses TCP connections to send and receive messages, so the",
                " {@link io.vertx.core.eventbus.EventBusOptions} let you configure all aspects of these TCP connections. As"
            ],
            "changed_files": [
                "src/main/asciidoc/eventbus.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: form",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c9454baadd5c9076931eae72d3cb2c9163344eff",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524482174,
            "hunks": 2,
            "message": "Set version to 3.5.2-SNAPSHOT",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 70709aa02..cc1c2e51a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.1</version>",
                "+  <version>3.5.2-SNAPSHOT</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.1</stack.version>",
                "+    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "     <jetty.alpnAgent.argLine/>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9b5feb3d90b78b50f22dc40c658f87c974f3555d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527521452,
            "hunks": 2,
            "message": "Releasing 3.5.2-SNAPSHOT",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0f12cf14e..cc1c2e51a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2.CR3</version>",
                "+  <version>3.5.2-SNAPSHOT</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2.CR3</stack.version>",
                "+    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "     <jetty.alpnAgent.argLine/>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "852cdeb44f87caf547d9f490dc75700222d74233"
                ],
                [
                    "no-tag",
                    "0396f05717b9926c5069985fe4b24c11643fb20c"
                ]
            ],
            "tags": [
                "3.5.2",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6131c0ecde65521e0ee39ec604d8cb94f0cba365",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528180293,
            "hunks": 2,
            "message": "Releasing 3.5.3-SNAPSHOT",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fe6a99819..25b3e4c06 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2</version>",
                "+  <version>3.5.3-SNAPSHOT</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2</stack.version>",
                "+    <stack.version>3.5.3-SNAPSHOT</stack.version>",
                "     <jetty.alpnAgent.argLine/>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ec2f408c118fa62a80c3f9a64a9eec4c8b2d2e01"
                ]
            ],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cfb353d25823d5261ba0f464ac8a03dca0bd803a",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532510148,
            "hunks": 1,
            "message": "Merge branch 'master' into feature/substratevm-support",
            "diff": [
                "diff --cc src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "index e63fc67ae,e61bb4c1f..ab12c27ee",
                "--- a/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "+++ b/src/main/java/io/vertx/core/net/impl/transport/KQueueTransport.java",
                "@@@ -14,11 -14,6 +14,7 @@@ package io.vertx.core.net.impl.transpor",
                "  import io.netty.bootstrap.ServerBootstrap;",
                "- import io.netty.channel.*;",
                "- import io.netty.channel.epoll.EpollChannelOption;",
                "- import io.netty.channel.kqueue.KQueue;",
                "- import io.netty.channel.kqueue.KQueueDatagramChannel;",
                "- import io.netty.channel.kqueue.KQueueDomainSocketChannel;",
                "- import io.netty.channel.kqueue.KQueueEventLoopGroup;",
                "- import io.netty.channel.kqueue.KQueueServerDomainSocketChannel;",
                "- import io.netty.channel.kqueue.KQueueServerSocketChannel;",
                "- import io.netty.channel.kqueue.KQueueSocketChannel;",
                "+ import io.netty.channel.Channel;",
                "++import io.netty.channel.ChannelFactory;",
                "+ import io.netty.channel.EventLoopGroup;",
                "+ import io.netty.channel.ServerChannel;",
                "+ import io.netty.channel.kqueue.*;",
                "  import io.netty.channel.socket.DatagramChannel;"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "84c5e9b9ba0d170d2e11e8776ad31118b3247200",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533243845,
            "hunks": 2,
            "message": "HTTP doc improvements from community",
            "diff": [
                "diff --git a/src/main/asciidoc/http.adoc b/src/main/asciidoc/http.adoc",
                "index c50a11489..d304455c7 100644",
                "--- a/src/main/asciidoc/http.adoc",
                "+++ b/src/main/asciidoc/http.adoc",
                "@@ -391,3 +391,3 @@ to the client",
                "-To write data to an HTTP response, you use one the {@link io.vertx.core.http.HttpServerResponse#write} operations.",
                "+To write data to an HTTP response, you use one of the {@link io.vertx.core.http.HttpServerResponse#write} operations.",
                "@@ -422,3 +422,3 @@ single call to the {@link io.vertx.core.http.HttpServerResponse#end(String)}",
                "-The first call to write results in the response header being being written to the response. Consequently, if you are",
                "+The first call to write results in the response header being written to the response. Consequently, if you are",
                " not using HTTP chunking then you must set the `Content-Length` header before writing to the response, since it will"
            ],
            "changed_files": [
                "src/main/asciidoc/http.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "cbbc0048bc589e2ac865fa6f43aab4751d18921d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529487405,
            "hunks": 2,
            "message": "Fix incorrect WebsocketTest that don't assume that now a close frame can be received",
            "diff": [
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 9e50f9fe2..d01b12d2a 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2</version>",
                "+  <version>3.5.3-SNAPSHOT</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2'",
                "+  compile 'io.vertx:vertx-core:3.5.3-SNAPSHOT'",
                " }"
            ],
            "changed_files": [
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "711491cefbe584a247733f609d61425a82c15a3e",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527521395,
            "hunks": 4,
            "message": "Releasing 3.5.2.CR3",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cc1c2e51a..0f12cf14e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR3</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.2.CR3</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 45272f8f7..dc253bf7f 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR3</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2-SNAPSHOT'",
                "+  compile 'io.vertx:vertx-core:3.5.2.CR3'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8ae1dbd8521e0f27c43e3749c1df0c284b2aafa2",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525713292,
            "hunks": 1,
            "message": "Remove useless http.adoc",
            "diff": [
                "diff --git a/src/main/asciidoc/http.adoc b/src/main/asciidoc/http.adoc",
                "deleted file mode 100644",
                "index c50a11489..000000000",
                "--- a/src/main/asciidoc/http.adoc",
                "+++ /dev/null",
                "@@ -1,1749 +0,0 @@",
                "-== Writing HTTP servers and clients",
                "-",
                "-Vert.x allows you to easily write non blocking HTTP clients and servers.",
                "-",
                "-Vert.x supports the HTTP/1.0, HTTP/1.1 and HTTP/2 protocols.",
                "-",
                "-The base API for HTTP is the same for HTTP/1.x and HTTP/2, specific API features are available for dealing with the",
                "-HTTP/2 protocol.",
                "-",
                "-=== Creating an HTTP Server",
                "-",
                "-The simplest way to create an HTTP server, using all default options is as follows:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example1}",
                "-----",
                "-",
                "-=== Configuring an HTTP server",
                "-",
                "-If you don't want the default, a server can be configured by passing in a {@link io.vertx.core.http.HttpServerOptions}",
                "-instance when creating it:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example2}",
                "-----",
                "-",
                "-=== Configuring an HTTP/2 server",
                "-",
                "-Vert.x supports HTTP/2 over TLS `h2` and over TCP `h2c`.",
                "-",
                "-- `h2` identifies the HTTP/2 protocol when used over TLS negotiated by https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation[Application-Layer Protocol Negotiation] (ALPN)",
                "-- `h2c` identifies the HTTP/2 protocol when using in clear text over TCP, such connections are established either with",
                "-an HTTP/1.1 upgraded request or directly",
                "-",
                "-To handle `h2` requests, TLS must be enabled along with {@link io.vertx.core.http.HttpServerOptions#setUseAlpn(boolean)}:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example0}",
                "-----",
                "-",
                "-ALPN is a TLS extension that negotiates the protocol before the client and the server start to exchange data.",
                "-",
                "-Clients that don't support ALPN will still be able to do a _classic_ SSL handshake.",
                "-",
                "-ALPN will usually agree on the `h2` protocol, although `http/1.1` can be used if the server or the client decides",
                "-so.",
                "-",
                "-To handle `h2c` requests, TLS must be disabled, the server will upgrade to HTTP/2 any request HTTP/1.1 that wants to",
                "-upgrade to HTTP/2. It will also accept a direct `h2c` connection beginning with the `PRI * HTTP/2.0\\r\\nSM\\r\\n` preface.",
                "-",
                "-WARNING: most browsers won't support `h2c`, so for serving web sites you should use `h2` and not `h2c`.",
                "-",
                "-When a server accepts an HTTP/2 connection, it sends to the client its {@link io.vertx.core.http.HttpServerOptions#getInitialSettings initial settings}.",
                "-The settings define how the client can use the connection, the default initial settings for a server are:",
                "-",
                "-- {@link io.vertx.core.http.Http2Settings#getMaxConcurrentStreams}: {@code 100} as recommended by the HTTP/2 RFC",
                "-- the default HTTP/2 settings values for the others",
                "-",
                "-NOTE: Worker Verticles are not compatible with HTTP/2",
                "-",
                "-=== Logging network server activity",
                "-",
                "-For debugging purposes, network activity can be logged.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#exampleServerLogging}",
                "-----",
                "-",
                "-See the chapter on <<logging_network_activity, logging network activity>> for a detailed explanation.",
                "-",
                "-=== Start the Server Listening",
                "-",
                "-To tell the server to listen for incoming requests you use one of the {@link io.vertx.core.http.HttpServer#listen}",
                "-alternatives.",
                "-",
                "-To tell the server to listen at the host and port as specified in the options:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example3}",
                "-----",
                "-",
                "-Or to specify the host and port in the call to listen, ignoring what is configured in the options:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example4}",
                "-----",
                "-",
                "-The default host is `0.0.0.0` which means 'listen on all available addresses' and the default port is `80`.",
                "-",
                "-The actual bind is asynchronous so the server might not actually be listening until some time *after* the call to",
                "-listen has returned.",
                "-",
                "-If you want to be notified when the server is actually listening you can provide a handler to the `listen` call.",
                "-For example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example5}",
                "-----",
                "-",
                "-=== Getting notified of incoming requests",
                "-",
                "-To be notified when a request arrives you need to set a {@link io.vertx.core.http.HttpServer#requestHandler}:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example6}",
                "-----",
                "-",
                "-=== Handling requests",
                "-",
                "-When a request arrives, the request handler is called passing in an instance of {@link io.vertx.core.http.HttpServerRequest}.",
                "-This object represents the server side HTTP request.",
                "-",
                "-The handler is called when the headers of the request have been fully read.",
                "-",
                "-If the request contains a body, that body will arrive at the server some time after the request handler has been called.",
                "-",
                "-The server request object allows you to retrieve the {@link io.vertx.core.http.HttpServerRequest#uri},",
                "-{@link io.vertx.core.http.HttpServerRequest#path}, {@link io.vertx.core.http.HttpServerRequest#params} and",
                "-{@link io.vertx.core.http.HttpServerRequest#headers}, amongst other things.",
                "-",
                "-Each server request object is associated with one server response object. You use",
                "-{@link io.vertx.core.http.HttpServerRequest#response} to get a reference to the {@link io.vertx.core.http.HttpServerResponse}",
                "-object.",
                "-",
                "-Here's a simple example of a server handling a request and replying with \"hello world\" to it.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example7_1}",
                "-----",
                "-",
                "-==== Request version",
                "-",
                "-The version of HTTP specified in the request can be retrieved with {@link io.vertx.core.http.HttpServerRequest#version}",
                "-",
                "-==== Request method",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerRequest#method} to retrieve the HTTP method of the request.",
                "-(i.e. whether it's GET, POST, PUT, DELETE, HEAD, OPTIONS, etc).",
                "-",
                "-==== Request URI",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerRequest#uri} to retrieve the URI of the request.",
                "-",
                "-Note that this is the actual URI as passed in the HTTP request, and it's almost always a relative URI.",
                "-",
                "-The URI is as defined in http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html[Section 5.1.2 of the HTTP specification - Request-URI]",
                "-",
                "-==== Request path",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerRequest#path} to return the path part of the URI",
                "-",
                "-For example, if the request URI was:",
                "-",
                "- a/b/c/page.html?param1=abc&param2=xyz",
                "-",
                "-Then the path would be",
                "-",
                "- /a/b/c/page.html",
                "-",
                "-==== Request query",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerRequest#query} to return the query part of the URI",
                "-",
                "-For example, if the request URI was:",
                "-",
                "- a/b/c/page.html?param1=abc&param2=xyz",
                "-",
                "-Then the query would be",
                "-",
                "- param1=abc&param2=xyz",
                "-",
                "-==== Request headers",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerRequest#headers} to return the headers of the HTTP request.",
                "-",
                "-This returns an instance of {@link io.vertx.core.MultiMap} - which is like a normal Map or Hash but allows multiple",
                "-values for the same key - this is because HTTP allows multiple header values with the same key.",
                "-",
                "-It also has case-insensitive keys, that means you can do the following:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example8}",
                "-----",
                "-",
                "-==== Request host",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerRequest#host} to return the host of the HTTP request.",
                "-",
                "-For HTTP/1.x requests the `host` header is returned, for HTTP/1 requests the `:authority` pseudo header is returned.",
                "-",
                "-==== Request parameters",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerRequest#params} to return the parameters of the HTTP request.",
                "-",
                "-Just like {@link io.vertx.core.http.HttpServerRequest#headers} this returns an instance of {@link io.vertx.core.MultiMap}",
                "-as there can be more than one parameter with the same name.",
                "-",
                "-Request parameters are sent on the request URI, after the path. For example if the URI was:",
                "-",
                "- /page.html?param1=abc&param2=xyz",
                "-",
                "-Then the parameters would contain the following:",
                "-",
                "-----",
                "-param1: 'abc'",
                "-param2: 'xyz",
                "-----",
                "-",
                "-Note that these request parameters are retrieved from the URL of the request. If you have form attributes that",
                "-have been sent as part of the submission of an HTML form submitted in the body of a `multi-part/form-data` request",
                "-then they will not appear in the params here.",
                "-",
                "-==== Remote address",
                "-",
                "-The address of the sender of the request can be retrieved with {@link io.vertx.core.http.HttpServerRequest#remoteAddress}.",
                "-",
                "-==== Absolute URI",
                "-",
                "-The URI passed in an HTTP request is usually relative. If you wish to retrieve the absolute URI corresponding",
                "-to the request, you can get it with {@link io.vertx.core.http.HttpServerRequest#absoluteURI}",
                "-",
                "-==== End handler",
                "-",
                "-The {@link io.vertx.core.http.HttpServerRequest#endHandler} of the request is invoked when the entire request,",
                "-including any body has been fully read.",
                "-",
                "-==== Reading Data from the Request Body",
                "-",
                "-Often an HTTP request contains a body that we want to read. As previously mentioned the request handler is called",
                "-when just the headers of the request have arrived so the request object does not have a body at that point.",
                "-",
                "-This is because the body may be very large (e.g. a file upload) and we don't generally want to buffer the entire",
                "-body in memory before handing it to you, as that could cause the server to exhaust available memory.",
                "-",
                "-To receive the body, you can use the {@link io.vertx.core.http.HttpServerRequest#handler}  on the request,",
                "-this will get called every time a chunk of the request body arrives. Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example9}",
                "-----",
                "-",
                "-The object passed into the handler is a {@link io.vertx.core.buffer.Buffer}, and the handler can be called",
                "-multiple times as data arrives from the network, depending on the size of the body.",
                "-",
                "-In some cases (e.g. if the body is small) you will want to aggregate the entire body in memory, so you could do",
                "-the aggregation yourself as follows:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example10}",
                "-----",
                "-",
                "-This is such a common case, that Vert.x provides a {@link io.vertx.core.http.HttpServerRequest#bodyHandler} to do this",
                "-for you. The body handler is called once when all the body has been received:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example11}",
                "-----",
                "-",
                "-==== Pumping requests",
                "-",
                "-The request object is a {@link io.vertx.core.streams.ReadStream} so you can pump the request body to any",
                "-{@link io.vertx.core.streams.WriteStream} instance.",
                "-",
                "-See the chapter on <<streams, streams and pumps>> for a detailed explanation.",
                "-",
                "-==== Handling HTML forms",
                "-",
                "-HTML forms can be submitted with either a content type of `application/x-www-form-urlencoded` or `multipart/form-data`.",
                "-",
                "-For url encoded forms, the form attributes are encoded in the url, just like normal query parameters.",
                "-",
                "-For multi-part forms they are encoded in the request body, and as such are not available until the entire body",
                "-has been read from the wire.",
                "-",
                "-Multi-part forms can also contain file uploads.",
                "-",
                "-If you want to retrieve the attributes of a multi-part form you should tell Vert.x that you expect to receive",
                "-such a form *before* any of the body is read by calling {@link io.vertx.core.http.HttpServerRequest#setExpectMultipart}",
                "-with true, and then you should retrieve the actual attributes using {@link io.vertx.core.http.HttpServerRequest#formAttributes}",
                "-once the entire body has been read:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example12}",
                "-----",
                "-",
                "-==== Handling form file uploads",
                "-",
                "-Vert.x can also handle file uploads which are encoded in a multi-part request body.",
                "-",
                "-To receive file uploads you tell Vert.x to expect a multi-part form and set an",
                "-{@link io.vertx.core.http.HttpServerRequest#uploadHandler} on the request.",
                "-",
                "-This handler will be called once for every",
                "-upload that arrives on the server.",
                "-",
                "-The object passed into the handler is a {@link io.vertx.core.http.HttpServerFileUpload} instance.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example13}",
                "-----",
                "-",
                "-File uploads can be large we don't provide the entire upload in a single buffer as that might result in memory",
                "-exhaustion, instead, the upload data is received in chunks:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example14}",
                "-----",
                "-",
                "-The upload object is a {@link io.vertx.core.streams.ReadStream} so you can pump the request body to any",
                "-{@link io.vertx.core.streams.WriteStream} instance. See the chapter on <<streams, streams and pumps>> for a",
                "-detailed explanation.",
                "-",
                "-If you just want to upload the file to disk somewhere you can use {@link io.vertx.core.http.HttpServerFileUpload#streamToFileSystem}:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example15}",
                "-----",
                "-",
                "-WARNING: Make sure you check the filename in a production system to avoid malicious clients uploading files",
                "-to arbitrary places on your filesystem. See <<Security notes, security notes>> for more information.",
                "-",
                "-==== Handling compressed body",
                "-",
                "-Vert.x can handle compressed body payloads which are encoded by the client with the _deflate_ or _gzip_",
                "-algorithms.",
                "-",
                "-To enable decompression set {@link io.vertx.core.http.HttpServerOptions#setDecompressionSupported(boolean)} on the",
                "-options when creating the server.",
                "-",
                "-By default decompression is disabled.",
                "-",
                "-==== Receiving custom HTTP/2 frames",
                "-",
                "-HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "-of frames to be sent and received.",
                "-",
                "-To receive custom frames, you can use the {@link io.vertx.core.http.HttpServerRequest#customFrameHandler} on the request,",
                "-this will get called every time a custom frame arrives. Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example1}",
                "-----",
                "-",
                "-HTTP/2 frames are not subject to flow control - the frame handler will be called immediatly when a",
                "-custom frame is received whether the request is paused or is not",
                "-",
                "-==== Non standard HTTP methods",
                "-",
                "-The {@link io.vertx.core.http.HttpMethod#OTHER} HTTP method is used for non standard methods, in this case",
                "-{@link io.vertx.core.http.HttpServerRequest#rawMethod()} returns the HTTP method as sent by the client.",
                "-",
                "-=== Sending back responses",
                "-",
                "-The server response object is an instance of {@link io.vertx.core.http.HttpServerResponse} and is obtained from the",
                "-request with {@link io.vertx.core.http.HttpServerRequest#response}.",
                "-",
                "-You use the response object to write a response back to the HTTP client.",
                "-",
                "-==== Setting status code and message",
                "-",
                "-The default HTTP status code for a response is `200`, representing `OK`.",
                "-",
                "-Use {@link io.vertx.core.http.HttpServerResponse#setStatusCode} to set a different code.",
                "-",
                "-You can also specify a custom status message with {@link io.vertx.core.http.HttpServerResponse#setStatusMessage}.",
                "-",
                "-If you don't specify a status message, the default one corresponding to the status code will be used.",
                "-",
                "-NOTE: for HTTP/2 the status won't be present in the response since the protocol won't transmit the message",
                "-to the client",
                "-",
                "-==== Writing HTTP responses",
                "-",
                "-To write data to an HTTP response, you use one the {@link io.vertx.core.http.HttpServerResponse#write} operations.",
                "-",
                "-These can be invoked multiple times before the response is ended. They can be invoked in a few ways:",
                "-",
                "-With a single buffer:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example16}",
                "-----",
                "-",
                "-With a string. In this case the string will encoded using UTF-8 and the result written to the wire.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example17}",
                "-----",
                "-",
                "-With a string and an encoding. In this case the string will encoded using the specified encoding and the",
                "-result written to the wire.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example18}",
                "-----",
                "-",
                "-Writing to a response is asynchronous and always returns immediately after the write has been queued.",
                "-",
                "-If you are just writing a single string or buffer to the HTTP response you can write it and end the response in a",
                "-single call to the {@link io.vertx.core.http.HttpServerResponse#end(String)}",
                "-",
                "-The first call to write results in the response header being being written to the response. Consequently, if you are",
                "-not using HTTP chunking then you must set the `Content-Length` header before writing to the response, since it will",
                "-be too late otherwise. If you are using HTTP chunking you do not have to worry.",
                "-",
                "-==== Ending HTTP responses",
                "-",
                "-Once you have finished with the HTTP response you should {@link io.vertx.core.http.HttpServerResponse#end} it.",
                "-",
                "-This can be done in several ways:",
                "-",
                "-With no arguments, the response is simply ended.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example19}",
                "-----",
                "-",
                "-It can also be called with a string or buffer in the same way `write` is called. In this case it's just the same as",
                "-calling write with a string or buffer followed by calling end with no arguments. For example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example20}",
                "-----",
                "-",
                "-==== Closing the underlying connection",
                "-",
                "-You can close the underlying TCP connection with {@link io.vertx.core.http.HttpServerResponse#close}.",
                "-",
                "-Non keep-alive connections will be automatically closed by Vert.x when the response is ended.",
                "-",
                "-Keep-alive connections are not automatically closed by Vert.x by default. If you want keep-alive connections to be",
                "-closed after an idle time, then you configure {@link io.vertx.core.http.HttpServerOptions#setIdleTimeout}.",
                "-",
                "-HTTP/2 connections send a {@literal GOAWAY} frame before closing the response.",
                "-",
                "-==== Setting response headers",
                "-",
                "-HTTP response headers can be added to the response by adding them directly to the",
                "-{@link io.vertx.core.http.HttpServerResponse#headers}:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example21}",
                "-----",
                "-",
                "-Or you can use {@link io.vertx.core.http.HttpServerResponse#putHeader}",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example22}",
                "-----",
                "-",
                "-Headers must all be added before any parts of the response body are written.",
                "-",
                "-==== Chunked HTTP responses and trailers",
                "-",
                "-Vert.x supports http://en.wikipedia.org/wiki/Chunked_transfer_encoding[HTTP Chunked Transfer Encoding].",
                "-",
                "-This allows the HTTP response body to be written in chunks, and is normally used when a large response body is",
                "-being streamed to a client and the total size is not known in advance.",
                "-",
                "-You put the HTTP response into chunked mode as follows:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example23}",
                "-----",
                "-",
                "-Default is non-chunked. When in chunked mode, each call to one of the {@link io.vertx.core.http.HttpServerResponse#write}",
                "-methods will result in a new HTTP chunk being written out.",
                "-",
                "-When in chunked mode you can also write HTTP response trailers to the response. These are actually written in",
                "-the final chunk of the response.",
                "-",
                "-NOTE: chunked response has no effect for an HTTP/2 stream",
                "-",
                "-To add trailers to the response, add them directly to the {@link io.vertx.core.http.HttpServerResponse#trailers}.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example24}",
                "-----",
                "-",
                "-Or use {@link io.vertx.core.http.HttpServerResponse#putTrailer}.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example25}",
                "-----",
                "-",
                "-==== Serving files directly from disk or the classpath",
                "-",
                "-If you were writing a web server, one way to serve a file from disk would be to open it as an {@link io.vertx.core.file.AsyncFile}",
                "-and pump it to the HTTP response.",
                "-",
                "-Or you could load it it one go using {@link io.vertx.core.file.FileSystem#readFile} and write it straight to the response.",
                "-",
                "-Alternatively, Vert.x provides a method which allows you to serve a file from disk or the filesystem to an HTTP response",
                "-in one operation.",
                "-Where supported by the underlying operating system this may result in the OS directly transferring bytes from the",
                "-file to the socket without being copied through user-space at all.",
                "-",
                "-This is done by using {@link io.vertx.core.http.HttpServerResponse#sendFile}, and is usually more efficient for large",
                "-files, but may be slower for small files.",
                "-",
                "-Here's a very simple web server that serves files from the file system using sendFile:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example26}",
                "-----",
                "-",
                "-Sending a file is asynchronous and may not complete until some time after the call has returned. If you want to",
                "-be notified when the file has been writen you can use {@link io.vertx.core.http.HttpServerResponse#sendFile(String,io.vertx.core.Handler)}",
                "-",
                "-Please see the chapter about <<classpath, serving files from the classpath>> for restrictions about the classpath resolution or disabling it.",
                "-",
                "-NOTE: If you use `sendFile` while using HTTPS it will copy through user-space, since if the kernel is copying data",
                "-directly from disk to socket it doesn't give us an opportunity to apply any encryption.",
                "-",
                "-WARNING: If you're going to write web servers directly using Vert.x be careful that users cannot exploit the",
                "-path to access files outside the directory from which you want to serve them or the classpath It may be safer instead to use",
                "-Vert.x Web.",
                "-",
                "-When there is a need to serve just a segment of a file, say starting from a given byte, you can achieve this by doing:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example26b}",
                "-----",
                "-",
                "-You are not required to supply the length if you want to send a file starting from an offset until the end, in this",
                "-case you can just do:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example26c}",
                "-----",
                "-",
                "-==== Pumping responses",
                "-",
                "-The server response is a {@link io.vertx.core.streams.WriteStream} instance so you can pump to it from any",
                "-{@link io.vertx.core.streams.ReadStream}, e.g. {@link io.vertx.core.file.AsyncFile}, {@link io.vertx.core.net.NetSocket},",
                "-{@link io.vertx.core.http.WebSocket} or {@link io.vertx.core.http.HttpServerRequest}.",
                "-",
                "-Here's an example which echoes the request body back in the response for any PUT methods.",
                "-It uses a pump for the body, so it will work even if the HTTP request body is much larger than can fit in memory",
                "-at any one time:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example27}",
                "-----",
                "-",
                "-==== Writing HTTP/2 frames",
                "-",
                "-HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "-of frames to be sent and received.",
                "-",
                "-To send such frames, you can use the {@link io.vertx.core.http.HttpServerResponse#writeCustomFrame} on the response.",
                "-Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example2}",
                "-----",
                "-",
                "-These frames are sent immediately and are not subject to flow control - when such frame is sent there it may be done",
                "-before other {@literal DATA} frames.",
                "-",
                "-==== Stream reset",
                "-",
                "-HTTP/1.x does not allow a clean reset of a request or a response stream, for example when a client uploads",
                "-a resource already present on the server, the server needs to accept the entire response.",
                "-",
                "-HTTP/2 supports stream reset at any time during the request/response:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example3}",
                "-----",
                "-",
                "-By default the `NO_ERROR` (0) error code is sent, another code can sent instead:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example4}",
                "-----",
                "-",
                "-The HTTP/2 specification defines the list of http://httpwg.org/specs/rfc7540.html#ErrorCodes[error codes] one can use.",
                "-",
                "-The request handler are notified of stream reset events with the {@link io.vertx.core.http.HttpServerRequest#exceptionHandler request handler} and",
                "-{@link io.vertx.core.http.HttpServerResponse#exceptionHandler response handler}:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example5}",
                "-----",
                "-",
                "-==== Server push",
                "-",
                "-Server push is a new feature of HTTP/2 that enables sending multiple responses in parallel for a single client request.",
                "-",
                "-When a server process a request, it can push a request/response to the client:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example6}",
                "-----",
                "-",
                "-When the server is ready to push the response, the push response handler is called and the handler can send the response.",
                "-",
                "-The push response handler may receive a failure, for instance the client may cancel the push because it already has `main.js` in its",
                "-cache and does not want it anymore.",
                "-",
                "-The {@link io.vertx.core.http.HttpServerResponse#push} method must be called before the initiating response ends, however",
                "-the pushed response can be written after.",
                "-",
                "-==== Handling exceptions",
                "-",
                "-You can set an {@link io.vertx.core.http.HttpServer#exceptionHandler(io.vertx.core.Handler)} to receive any",
                "-exceptions that happens before the connection is passed to the {@link io.vertx.core.http.HttpServer#requestHandler(io.vertx.core.Handler)}",
                "-or to the {@link io.vertx.core.http.HttpServer#websocketHandler(io.vertx.core.Handler)}, e.g during the TLS handshake.",
                "-",
                "-=== HTTP Compression",
                "-",
                "-Vert.x comes with support for HTTP Compression out of the box.",
                "-",
                "-This means you are able to automatically compress the body of the responses before they are sent back to the client.",
                "-",
                "-If the client does not support HTTP compression the responses are sent back without compressing the body.",
                "-",
                "-This allows to handle Client that support HTTP Compression and those that not support it at the same time.",
                "-",
                "-To enable compression use can configure it with {@link io.vertx.core.http.HttpServerOptions#setCompressionSupported}.",
                "-",
                "-By default compression is not enabled.",
                "-",
                "-When HTTP compression is enabled the server will check if the client includes an `Accept-Encoding` header which",
                "-includes the supported compressions. Commonly used are deflate and gzip. Both are supported by Vert.x.",
                "-",
                "-If such a header is found the server will automatically compress the body of the response with one of the supported",
                "-compressions and send it back to the client.",
                "-",
                "-Whenever the response needs to be sent without compression you can set the header `content-encoding` to `identity`:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#setIdentityContentEncodingHeader}",
                "-----",
                "-",
                "-Be aware that compression may be able to reduce network traffic but is more CPU-intensive.",
                "-",
                "-To address this latter issue Vert.x allows you to tune the 'compression level' parameter that is native of the gzip/deflate compression algorithms.",
                "-",
                "-Compression level allows to configure gizp/deflate algorithms in terms of the compression ratio of the resulting data and the computational cost of the compress/decompress operation.",
                "-",
                "-The compression level is an integer value ranged from '1' to '9', where '1' means lower compression ratio but fastest algorithm and '9' means maximum compression ratio available but a slower algorithm.",
                "-",
                "-Using compression levels higher that 1-2 usually allows to save just some bytes in size - the gain is not linear, and depends on the specific data to be compressed",
                "-- but it comports a non-trascurable cost in term of CPU cycles required to the server while generating the compressed response data",
                "-( Note that at moment Vert.x doesn't support any form caching of compressed response data, even for static files, so the compression is done on-the-fly",
                "-at every request body generation ) and in the same way it affects client(s) while decoding (inflating) received responses, operation that becomes more CPU-intensive",
                "-the more the level increases.",
                "-",
                "-By default - if compression is enabled via {@link io.vertx.core.http.HttpServerOptions#setCompressionSupported} - Vert.x will use '6' as compression level,",
                "-but the parameter can be configured to address any case with {@link io.vertx.core.http.HttpServerOptions#setCompressionLevel}.",
                "-",
                "-=== Creating an HTTP client",
                "-",
                "-You create an {@link io.vertx.core.http.HttpClient} instance with default options as follows:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example28}",
                "-----",
                "-",
                "-If you want to configure options for the client, you create it as follows:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example29}",
                "-----",
                "-",
                "-Vert.x supports HTTP/2 over TLS `h2` and over TCP `h2c`.",
                "-",
                "-By default the http client performs HTTP/1.1 requests, to perform HTTP/2 requests the {@link io.vertx.core.http.HttpClientOptions#setProtocolVersion}",
                "-must be set to {@link io.vertx.core.http.HttpVersion#HTTP_2}.",
                "-",
                "-For `h2` requests, TLS must be enabled with _Application-Layer Protocol Negotiation_:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example7}",
                "-----",
                "-",
                "-For `h2c` requests, TLS must be disabled, the client will do an HTTP/1.1 requests and try an upgrade to HTTP/2:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example8}",
                "-----",
                "-",
                "-`h2c` connections can also be established directly, i.e connection started with a prior knowledge, when",
                "-{@link io.vertx.core.http.HttpClientOptions#setHttp2ClearTextUpgrade(boolean)} options is set to false: after the",
                "-connection is established, the client will send the HTTP/2 connection preface and expect to receive",
                "-the same preface from the server.",
                "-",
                "-The http server may not support HTTP/2, the actual version can be checked",
                "-with {@link io.vertx.core.http.HttpClientResponse#version()} when the response arrives.",
                "-",
                "-When a clients connects to an HTTP/2 server, it sends to the server its {@link io.vertx.core.http.HttpClientOptions#getInitialSettings initial settings}.",
                "-The settings define how the server can use the connection, the default initial settings for a client are the default",
                "-values defined by the HTTP/2 RFC.",
                "-",
                "-=== Logging network client activity",
                "-",
                "-For debugging purposes, network activity can be logged.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#exampleClientLogging}",
                "-----",
                "-",
                "-See the chapter on <<logging_network_activity, logging network activity>> for a detailed explanation.",
                "-",
                "-=== Making requests",
                "-",
                "-The http client is very flexible and there are various ways you can make requests with it.",
                "-",
                "-",
                "-Often you want to make many requests to the same host/port with an http client. To avoid you repeating the host/port",
                "-every time you make a request you can configure the client with a default host/port:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example30}",
                "-----",
                "-",
                "-Alternatively if you find yourself making lots of requests to different host/ports with the same client you can",
                "-simply specify the host/port when doing the request.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example31}",
                "-----",
                "-",
                "-Both methods of specifying host/port are supported for all the different ways of making requests with the client.",
                "-",
                "-==== Simple requests with no request body",
                "-",
                "-Often, you'll want to make HTTP requests with no request body. This is usually the case with HTTP GET, OPTIONS and",
                "-HEAD requests.",
                "-",
                "-The simplest way to do this with the Vert.x http client is using the methods prefixed with `Now`. For example",
                "-{@link io.vertx.core.http.HttpClient#getNow}.",
                "-",
                "-These methods create the http request and send it in a single method call and allow you to provide a handler that will be",
                "-called with the http response when it comes back.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example32}",
                "-----",
                "-",
                "-==== Writing general requests",
                "-",
                "-At other times you don't know the request method you want to send until run-time. For that use case we provide",
                "-general purpose request methods such as {@link io.vertx.core.http.HttpClient#request} which allow you to specify",
                "-the HTTP method at run-time:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example33}",
                "-----",
                "-",
                "-==== Writing request bodies",
                "-",
                "-Sometimes you'll want to write requests which have a body, or perhaps you want to write headers to a request",
                "-before sending it.",
                "-",
                "-To do this you can call one of the specific request methods such as {@link io.vertx.core.http.HttpClient#post} or",
                "-one of the general purpose request methods such as {@link io.vertx.core.http.HttpClient#request}.",
                "-",
                "-These methods don't send the request immediately, but instead return an instance of {@link io.vertx.core.http.HttpClientRequest}",
                "-which can be used to write to the request body or write headers.",
                "-",
                "-Here are some examples of writing a POST request with a body:",
                "-m",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example34}",
                "-----",
                "-",
                "-Methods exist to write strings in UTF-8 encoding and in any specific encoding and to write buffers:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example35}",
                "-----",
                "-",
                "-If you are just writing a single string or buffer to the HTTP request you can write it and end the request in a",
                "-single call to the `end` function.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example36}",
                "-----",
                "-",
                "-When you're writing to a request, the first call to `write` will result in the request headers being written",
                "-out to the wire.",
                "-",
                "-The actual write is asynchronous and might not occur until some time after the call has returned.",
                "-",
                "-Non-chunked HTTP requests with a request body require a `Content-Length` header to be provided.",
                "-",
                "-Consequently, if you are not using chunked HTTP then you must set the `Content-Length` header before writing",
                "-to the request, as it will be too late otherwise.",
                "-",
                "-If you are calling one of the `end` methods that take a string or buffer then Vert.x will automatically calculate",
                "-and set the `Content-Length` header before writing the request body.",
                "-",
                "-If you are using HTTP chunking a a `Content-Length` header is not required, so you do not have to calculate the size",
                "-up-front.",
                "-",
                "-==== Writing request headers",
                "-",
                "-You can write headers to a request using the {@link io.vertx.core.http.HttpClientRequest#headers()} multi-map as follows:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example37}",
                "-----",
                "-",
                "-The headers are an instance of {@link io.vertx.core.MultiMap} which provides operations for adding, setting and removing",
                "-entries. Http headers allow more than one value for a specific key.",
                "-",
                "-You can also write headers using {@link io.vertx.core.http.HttpClientRequest#putHeader}",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example38}",
                "-----",
                "-",
                "-If you wish to write headers to the request you must do so before any part of the request body is written.",
                "-",
                "-==== Non standard HTTP methods",
                "-",
                "-The {@link io.vertx.core.http.HttpMethod#OTHER} HTTP method is used for non standard methods, when this method",
                "-is used, {@link io.vertx.core.http.HttpClientRequest#setRawMethod(java.lang.String)} must be used to",
                "-set the raw method to send to the server.",
                "-",
                "-==== Ending HTTP requests",
                "-",
                "-Once you have finished with the HTTP request you must end it with one of the {@link io.vertx.core.http.HttpClientRequest#end}",
                "-operations.",
                "-",
                "-Ending a request causes any headers to be written, if they have not already been written and the request to be marked",
                "-as complete.",
                "-",
                "-Requests can be ended in several ways. With no arguments the request is simply ended:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example39}",
                "-----",
                "-",
                "-Or a string or buffer can be provided in the call to `end`. This is like calling `write` with the string or buffer",
                "-before calling `end` with no arguments",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example40}",
                "-----",
                "-",
                "-==== Chunked HTTP requests",
                "-",
                "-Vert.x supports http://en.wikipedia.org/wiki/Chunked_transfer_encoding[HTTP Chunked Transfer Encoding] for requests.",
                "-",
                "-This allows the HTTP request body to be written in chunks, and is normally used when a large request body is being streamed",
                "-to the server, whose size is not known in advance.",
                "-",
                "-You put the HTTP request into chunked mode using {@link io.vertx.core.http.HttpClientRequest#setChunked(boolean)}.",
                "-",
                "-In chunked mode each call to write will cause a new chunk to be written to the wire. In chunked mode there is",
                "-no need to set the `Content-Length` of the request up-front.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example41}",
                "-----",
                "-",
                "-==== Request timeouts",
                "-",
                "-You can set a timeout for a specific http request using {@link io.vertx.core.http.HttpClientRequest#setTimeout(long)}.",
                "-",
                "-If the request does not return any data within the timeout period an exception will be passed to the exception handler",
                "-(if provided) and the request will be closed.",
                "-",
                "-==== Handling exceptions",
                "-",
                "-You can handle exceptions corresponding to a request by setting an exception handler on the",
                "-{@link io.vertx.core.http.HttpClientRequest} instance:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example42}",
                "-----",
                "-",
                "-This does not handle non _2xx_ response that need to be handled in the",
                "-{@link io.vertx.core.http.HttpClientResponse} code:",
                "-",
                "-[source, $lang]",
                "-----",
                "-{@link examples.HTTPExamples#statusCodeHandling}",
                "-----",
                "-",
                "-IMPORTANT: `XXXNow` methods cannot receive an exception handler.",
                "-",
                "-==== Specifying a handler on the client request",
                "-",
                "-Instead of providing a response handler in the call to create the client request object, alternatively, you can",
                "-not provide a handler when the request is created and set it later on the request object itself, using",
                "-{@link io.vertx.core.http.HttpClientRequest#handler(io.vertx.core.Handler)}, for example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example43}",
                "-----",
                "-",
                "-==== Using the request as a stream",
                "-",
                "-The {@link io.vertx.core.http.HttpClientRequest} instance is also a {@link io.vertx.core.streams.WriteStream} which means",
                "-you can pump to it from any {@link io.vertx.core.streams.ReadStream} instance.",
                "-",
                "-For, example, you could pump a file on disk to a http request body as follows:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example44}",
                "-----",
                "-",
                "-==== Writing HTTP/2 frames",
                "-",
                "-HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind",
                "-of frames to be sent and received.",
                "-",
                "-To send such frames, you can use the {@link io.vertx.core.http.HttpClientRequest#write} on the request. Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example9}",
                "-----",
                "-",
                "-==== Stream reset",
                "-",
                "-HTTP/1.x does not allow a clean reset of a request or a response stream, for example when a client uploads a resource already",
                "-present on the server, the server needs to accept the entire response.",
                "-",
                "-HTTP/2 supports stream reset at any time during the request/response:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example10}",
                "-----",
                "-",
                "-By default the NO_ERROR (0) error code is sent, another code can sent instead:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example11}",
                "-----",
                "-",
                "-The HTTP/2 specification defines the list of http://httpwg.org/specs/rfc7540.html#ErrorCodes[error codes] one can use.",
                "-",
                "-The request handler are notified of stream reset events with the {@link io.vertx.core.http.HttpClientRequest#exceptionHandler request handler} and",
                "-{@link io.vertx.core.http.HttpClientResponse#exceptionHandler response handler}:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example12}",
                "-----",
                "-",
                "-=== Handling HTTP responses",
                "-",
                "-You receive an instance of {@link io.vertx.core.http.HttpClientResponse} into the handler that you specify in of",
                "-the request methods or by setting a handler directly on the {@link io.vertx.core.http.HttpClientRequest} object.",
                "-",
                "-You can query the status code and the status message of the response with {@link io.vertx.core.http.HttpClientResponse#statusCode}",
                "-and {@link io.vertx.core.http.HttpClientResponse#statusMessage}.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example45}",
                "-----",
                "-",
                "-==== Using the response as a stream",
                "-",
                "-The {@link io.vertx.core.http.HttpClientResponse} instance is also a {@link io.vertx.core.streams.ReadStream} which means",
                "-you can pump it to any {@link io.vertx.core.streams.WriteStream} instance.",
                "-",
                "-==== Response headers and trailers",
                "-",
                "-Http responses can contain headers. Use {@link io.vertx.core.http.HttpClientResponse#headers} to get the headers.",
                "-",
                "-The object returned is a {@link io.vertx.core.MultiMap} as HTTP headers can contain multiple values for single keys.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example46}",
                "-----",
                "-",
                "-Chunked HTTP responses can also contain trailers - these are sent in the last chunk of the response body.",
                "-",
                "-You use {@link io.vertx.core.http.HttpClientResponse#trailers} to get the trailers. Trailers are also a {@link io.vertx.core.MultiMap}.",
                "-",
                "-==== Reading the request body",
                "-",
                "-The response handler is called when the headers of the response have been read from the wire.",
                "-",
                "-If the response has a body this might arrive in several pieces some time after the headers have been read. We",
                "-don't wait for all the body to arrive before calling the response handler as the response could be very large and we",
                "-might be waiting a long time, or run out of memory for large responses.",
                "-",
                "-As parts of the response body arrive, the {@link io.vertx.core.http.HttpClientResponse#handler} is called with",
                "-a {@link io.vertx.core.buffer.Buffer} representing the piece of the body:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example47}",
                "-----",
                "-",
                "-If you know the response body is not very large and want to aggregate it all in memory before handling it, you can",
                "-either aggregate it yourself:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example48}",
                "-----",
                "-",
                "-Or you can use the convenience {@link io.vertx.core.http.HttpClientResponse#bodyHandler(io.vertx.core.Handler)} which",
                "-is called with the entire body when the response has been fully read:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example49}",
                "-----",
                "-",
                "-==== Response end handler",
                "-",
                "-The response {@link io.vertx.core.http.HttpClientResponse#endHandler} is called when the entire response body has been read",
                "-or immediately after the headers have been read and the response handler has been called if there is no body.",
                "-",
                "-==== Reading cookies from the response",
                "-",
                "-You can retrieve the list of cookies from a response using {@link io.vertx.core.http.HttpClientResponse#cookies()}.",
                "-",
                "-Alternatively you can just parse the `Set-Cookie` headers yourself in the response.",
                "-",
                "-==== 30x redirection handling",
                "-",
                "-The client can be configured to follow HTTP redirections: when the client receives an",
                "-`301`, `302`, `303` or `307` status code, it follows the redirection provided by the `Location` response header",
                "-and the response handler is passed the redirected response instead of the original response.",
                "-",
                "-Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#exampleFollowRedirect01}",
                "-----",
                "-",
                "-The redirection policy is as follow",
                "-",
                "-* on a `301`, `302` or `303` status code, follow the redirection with a `GET` method",
                "-* on a `307` status code, follow the redirection with the same HTTP method and the cached body",
                "-",
                "-WARNING: following redirections caches the request body",
                "-",
                "-The maximum redirects is `16` by default and can be changed with {@link io.vertx.core.http.HttpClientOptions#setMaxRedirects(int)}.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#exampleFollowRedirect02}",
                "-----",
                "-",
                "-One size does not fit all and the default redirection policy may not be adapted to your needs.",
                "-",
                "-The default redirection policy can changed with a custom implementation:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#exampleFollowRedirect03}",
                "-----",
                "-",
                "-The policy handles the original {@link io.vertx.core.http.HttpClientResponse} received and returns either `null`",
                "-or a `Future<HttpClientRequest>`.",
                "-",
                "-- when `null` is returned, the original response is processed",
                "-- when a future is returned, the request will be sent on its successful completion",
                "-- when a future is returned, the exception handler set on the request is called on its failure",
                "-",
                "-The returned request must be unsent so the original request handlers can be sent and the client can send it after.",
                "-",
                "-Most of the original request settings will be propagated to the new request:",
                "-",
                "-* request headers, unless if you have set some headers (including {@link io.vertx.core.http.HttpClientRequest#setHost})",
                "-* request body unless the returned request uses a `GET` method",
                "-* response handler",
                "-* request exception handler",
                "-* request timeout",
                "-",
                "-==== 100-Continue handling",
                "-",
                "-According to the http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html[HTTP 1.1 specification] a client can set a",
                "-header `Expect: 100-Continue` and send the request header before sending the rest of the request body.",
                "-",
                "-The server can then respond with an interim response status `Status: 100 (Continue)` to signify to the client that",
                "-it is ok to send the rest of the body.",
                "-",
                "-The idea here is it allows the server to authorise and accept/reject the request before large amounts of data are sent.",
                "-Sending large amounts of data if the request might not be accepted is a waste of bandwidth and ties up the server",
                "-in reading data that it will just discard.",
                "-",
                "-Vert.x allows you to set a {@link io.vertx.core.http.HttpClientRequest#continueHandler(io.vertx.core.Handler)} on the",
                "-client request object",
                "-",
                "-This will be called if the server sends back a `Status: 100 (Continue)` response to signify that it is ok to send",
                "-the rest of the request.",
                "-",
                "-This is used in conjunction with {@link io.vertx.core.http.HttpClientRequest#sendHead()}to send the head of the request.",
                "-",
                "-Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example50}",
                "-----",
                "-",
                "-On the server side a Vert.x http server can be configured to automatically send back 100 Continue interim responses",
                "-when it receives an `Expect: 100-Continue` header.",
                "-",
                "-This is done by setting the option {@link io.vertx.core.http.HttpServerOptions#setHandle100ContinueAutomatically(boolean)}.",
                "-",
                "-If you'd prefer to decide whether to send back continue responses manually, then this property should be set to",
                "-`false` (the default), then you can inspect the headers and call {@link io.vertx.core.http.HttpServerResponse#writeContinue()}",
                "-to have the client continue sending the body:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example50_1}",
                "-----",
                "-",
                "-You can also reject the request by sending back a failure status code directly: in this case the body",
                "-should either be ignored or the connection should be closed (100-Continue is a performance hint and",
                "-cannot be a logical protocol constraint):",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example50_2}",
                "-----",
                "-",
                "-==== Client push",
                "-",
                "-Server push is a new feature of HTTP/2 that enables sending multiple responses in parallel for a single client request.",
                "-",
                "-A push handler can be set on a request to receive the request/response pushed by the server:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example13}",
                "-----",
                "-",
                "-If the client does not want to receive a pushed request, it can reset the stream:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example14}",
                "-----",
                "-",
                "-When no handler is set, any stream pushed will be automatically cancelled by the client with",
                "-a stream reset (`8` error code).",
                "-",
                "-==== Receiving custom HTTP/2 frames",
                "-",
                "-HTTP/2 is a framed protocol with various frames for the HTTP request/response model. The protocol allows other kind of",
                "-frames to be sent and received.",
                "-",
                "-To receive custom frames, you can use the customFrameHandler on the request, this will get called every time a custom",
                "-frame arrives. Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example15}",
                "-----",
                "-",
                "-=== Enabling compression on the client",
                "-",
                "-The http client comes with support for HTTP Compression out of the box.",
                "-",
                "-This means the client can let the remote http server know that it supports compression, and will be able to handle",
                "-compressed response bodies.",
                "-",
                "-An http server is free to either compress with one of the supported compression algorithms or to send the body back",
                "-without compressing it at all. So this is only a hint for the Http server which it may ignore at will.",
                "-",
                "-To tell the http server which compression is supported by the client it will include an `Accept-Encoding` header with",
                "-the supported compression algorithm as value. Multiple compression algorithms are supported. In case of Vert.x this",
                "-will result in the following header added:",
                "-",
                "- Accept-Encoding: gzip, deflate",
                "-",
                "-The server will choose then from one of these. You can detect if a server ompressed the body by checking for the",
                "-`Content-Encoding` header in the response sent back from it.",
                "-",
                "-If the body of the response was compressed via gzip it will include for example the following header:",
                "-",
                "- Content-Encoding: gzip",
                "-",
                "-To enable compression set {@link io.vertx.core.http.HttpClientOptions#setTryUseCompression(boolean)} on the options",
                "-used when creating the client.",
                "-",
                "-By default compression is disabled.",
                "-",
                "-=== HTTP/1.x pooling and keep alive",
                "-",
                "-Http keep alive allows http connections to be used for more than one request. This can be a more efficient use of",
                "-connections when you're making multiple requests to the same server.",
                "-",
                "-For HTTP/1.x versions, the http client supports pooling of connections, allowing you to reuse connections between requests.",
                "-",
                "-For pooling to work, keep alive must be true using {@link io.vertx.core.http.HttpClientOptions#setKeepAlive(boolean)}",
                "-on the options used when configuring the client. The default value is true.",
                "-",
                "-When keep alive is enabled. Vert.x will add a `Connection: Keep-Alive` header to each HTTP/1.0 request sent.",
                "-When keep alive is disabled. Vert.x will add a `Connection: Close` header to each HTTP/1.1 request sent to signal",
                "-that the connection will be closed after completion of the response.",
                "-",
                "-The maximum number of connections to pool *for each server* is configured using {@link io.vertx.core.http.HttpClientOptions#setMaxPoolSize(int)}",
                "-",
                "-When making a request with pooling enabled, Vert.x will create a new connection if there are less than the maximum number of",
                "-connections already created for that server, otherwise it will add the request to a queue.",
                "-",
                "-Keep alive connections will be closed by the client automatically after a timeout. The timeout can be specified",
                "-by the server using the `keep-alive` header:",
                "-",
                "-----",
                "- keep-alive: timeout=30",
                "-----",
                "-",
                "-You can set the default timeout using {@link io.vertx.core.http.HttpClientOptions#setKeepAliveTimeout(int)} - any",
                "-connections not used within this timeout will be closed. Please note the timeout value is in seconds not milliseconds.",
                "-",
                "-=== HTTP/1.1 pipe-lining",
                "-",
                "-The client also supports pipe-lining of requests on a connection.",
                "-",
                "-Pipe-lining means another request is sent on the same connection before the response from the preceding one has",
                "-returned. Pipe-lining is not appropriate for all requests.",
                "-",
                "-To enable pipe-lining, it must be enabled using {@link io.vertx.core.http.HttpClientOptions#setPipelining(boolean)}.",
                "-By default pipe-lining is disabled.",
                "-",
                "-When pipe-lining is enabled requests will be written to connections without waiting for previous responses to return.",
                "-",
                "-The number of pipe-lined requests over a single connection is limited by {@link io.vertx.core.http.HttpClientOptions#setPipeliningLimit}.",
                "-This option defines the maximum number of http requests sent to the server awaiting for a response. This limit ensures the",
                "-fairness of the distribution of the client requests over the connections to the same server.",
                "-",
                "-=== HTTP/2 multiplexing",
                "-",
                "-HTTP/2 advocates to use a single connection to a server, by default the http client uses a single",
                "-connection for each server, all the streams to the same server are multiplexed over the same connection.",
                "-",
                "-When the clients needs to use more than a single connection and use pooling, the {@link io.vertx.core.http.HttpClientOptions#setHttp2MaxPoolSize(int)}",
                "-shall be used.",
                "-",
                "-When it is desirable to limit the number of multiplexed streams per connection and use a connection",
                "-pool instead of a single connection, {@link io.vertx.core.http.HttpClientOptions#setHttp2MultiplexingLimit(int)}",
                "-can be used.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#useMaxStreams}",
                "-----",
                "-",
                "-The multiplexing limit for a connection is a setting set on the client that limits the number of streams",
                "-of a single connection. The effective value can be even lower if the server sets a lower limit",
                "-with the {@link io.vertx.core.http.Http2Settings#setMaxConcurrentStreams SETTINGS_MAX_CONCURRENT_STREAMS} setting.",
                "-",
                "-HTTP/2 connections will not be closed by the client automatically. To close them you can call {@link io.vertx.core.http.HttpConnection#close()}",
                "-or close the client instance.",
                "-",
                "-Alternatively you can set idle timeout using {@link io.vertx.core.http.HttpClientOptions#setIdleTimeout(int)} - any",
                "-connections not used within this timeout will be closed. Please note the idle timeout value is in seconds not milliseconds.",
                "-",
                "-=== HTTP connections",
                "-",
                "-The {@link io.vertx.core.http.HttpConnection} offers the API for dealing with HTTP connection events, lifecycle",
                "-and settings.",
                "-",
                "-HTTP/2 implements fully the {@link io.vertx.core.http.HttpConnection} API.",
                "-",
                "-HTTP/1.x implements partially the {@link io.vertx.core.http.HttpConnection} API: only the close operation,",
                "-the close handler and exception handler are implemented. This protocol does not provide semantics for",
                "-the other operations.",
                "-",
                "-==== Server connections",
                "-",
                "-The {@link io.vertx.core.http.HttpServerRequest#connection()} method returns the request connection on the server:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example16}",
                "-----",
                "-",
                "-A connection handler can be set on the server to be notified of any incoming connection:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example17}",
                "-----",
                "-",
                "-==== Client connections",
                "-",
                "-The {@link io.vertx.core.http.HttpClientRequest#connection()} method returns the request connection on the client:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example18}",
                "-----",
                "-",
                "-A connection handler can be set on the request to be notified when the connection happens:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example19}",
                "-----",
                "-",
                "-==== Connection settings",
                "-",
                "-The configuration of an HTTP/2 is configured by the {@link io.vertx.core.http.Http2Settings} data object.",
                "-",
                "-Each endpoint must respect the settings sent by the other side of the connection.",
                "-",
                "-When a connection is established, the client and the server exchange initial settings. Initial settings",
                "-are configured by {@link io.vertx.core.http.HttpClientOptions#setInitialSettings} on the client and",
                "-{@link io.vertx.core.http.HttpServerOptions#setInitialSettings} on the server.",
                "-",
                "-The settings can be changed at any time after the connection is established:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example20}",
                "-----",
                "-",
                "-As the remote side should acknowledge on reception of the settings update, it's possible to give a callback",
                "-to be notified of the acknowledgment:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example21}",
                "-----",
                "-",
                "-Conversely the {@link io.vertx.core.http.HttpConnection#remoteSettingsHandler(io.vertx.core.Handler)} is notified",
                "-when the new remote settings are received:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example22}",
                "-----",
                "-",
                "-NOTE: this only applies to the HTTP/2 protocol",
                "-",
                "-==== Connection ping",
                "-",
                "-HTTP/2 connection ping is useful for determining the connection round-trip time or check the connection",
                "-validity: {@link io.vertx.core.http.HttpConnection#ping} sends a {@literal PING} frame to the remote",
                "-endpoint:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example23}",
                "-----",
                "-",
                "-Vert.x will send automatically an acknowledgement when a {@literal PING} frame is received,",
                "-an handler can be set to be notified for each ping received:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example24}",
                "-----",
                "-",
                "-The handler is just notified, the acknowledgement is sent whatsoever. Such feature is aimed for",
                "-implementing  protocols on top of HTTP/2.",
                "-",
                "-NOTE: this only applies to the HTTP/2 protocol",
                "-",
                "-==== Connection shutdown and go away",
                "-",
                "-Calling {@link io.vertx.core.http.HttpConnection#shutdown()} will send a {@literal GOAWAY} frame to the",
                "-remote side of the connection, asking it to stop creating streams: a client will stop doing new requests",
                "-and a server will stop pushing responses. After the {@literal GOAWAY} frame is sent, the connection",
                "-waits some time (30 seconds by default) until all current streams closed and close the connection:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example25}",
                "-----",
                "-",
                "-The {@link io.vertx.core.http.HttpConnection#shutdownHandler} notifies when all streams have been closed, the",
                "-connection is not yet closed.",
                "-",
                "-It's possible to just send a {@literal GOAWAY} frame, the main difference with a shutdown is that",
                "-it will just tell the remote side of the connection to stop creating new streams without scheduling a connection",
                "-close:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example26}",
                "-----",
                "-",
                "-Conversely, it is also possible to be notified when {@literal GOAWAY} are received:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example27}",
                "-----",
                "-",
                "-The {@link io.vertx.core.http.HttpConnection#shutdownHandler} will be called when all current streams",
                "-have been closed and the connection can be closed:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTP2Examples#example28}",
                "-----",
                "-",
                "-This applies also when a {@literal GOAWAY} is received.",
                "-",
                "-NOTE: this only applies to the HTTP/2 protocol",
                "-",
                "-==== Connection close",
                "-",
                "-Connection {@link io.vertx.core.http.HttpConnection#close} closes the connection:",
                "-",
                "-- it closes the socket for HTTP/1.x",
                "-- a shutdown with no delay for HTTP/2, the {@literal GOAWAY} frame will still be sent before the connection is closed. *",
                "-",
                "-The {@link io.vertx.core.http.HttpConnection#closeHandler} notifies when a connection is closed.",
                "-",
                "-=== HttpClient usage",
                "-",
                "-The HttpClient can be used in a Verticle or embedded.",
                "-",
                "-When used in a Verticle, the Verticle *should use its own client instance*.",
                "-",
                "-More generally a client should not be shared between different Vert.x contexts as it can lead to unexpected behavior.",
                "-",
                "-For example a keep-alive connection will call the client handlers on the context of the request that opened the connection, subsequent requests will use",
                "-the same context.",
                "-",
                "-When this happen Vert.x detects it and log a warn:",
                "-",
                "-----",
                "-Reusing a connection with a different context: an HttpClient is probably shared between different Verticles",
                "-----",
                "-",
                "-The HttpClient can be embedded in a non Vert.x thread like a unit test or a plain java `main`: the client handlers",
                "-will be called by different Vert.x threads and contexts, such contexts are created as needed. For production this",
                "-usage is not recommended.",
                "-",
                "-=== Server sharing",
                "-",
                "-When several HTTP servers listen on the same port, vert.x orchestrates the request handling using a",
                "-round-robin strategy.",
                "-",
                "-Let's take a verticle creating a HTTP server such as:",
                "-",
                "-.io.vertx.examples.http.sharing.HttpServerVerticle",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#serversharing(io.vertx.core.Vertx)}",
                "-----",
                "-",
                "-This service is listening on the port 8080. So, when this verticle is instantiated multiple times as with:",
                "-`vertx run io.vertx.examples.http.sharing.HttpServerVerticle -instances 2`, what's happening ? If both",
                "-verticles would bind to the same port, you would receive a socket exception. Fortunately, vert.x is handling",
                "-this case for you. When you deploy another server on the same host and port as an existing server it doesn't",
                "-actually try and create a new server listening on the same host/port. It binds only once to the socket. When",
                "-receiving a request it calls the server handlers following a round robin strategy.",
                "-",
                "-Let's now imagine a client such as:",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#serversharingclient(io.vertx.core.Vertx)}",
                "-----",
                "-",
                "-Vert.x delegates the requests to one of the server sequentially:",
                "-",
                "-[source]",
                "-----",
                "-Hello from i.v.e.h.s.HttpServerVerticle@1",
                "-Hello from i.v.e.h.s.HttpServerVerticle@2",
                "-Hello from i.v.e.h.s.HttpServerVerticle@1",
                "-Hello from i.v.e.h.s.HttpServerVerticle@2",
                "-...",
                "-----",
                "-",
                "-Consequently the servers can scale over available cores while each Vert.x verticle instance remains strictly",
                "-single threaded, and you don't have to do any special tricks like writing load-balancers in order to scale your",
                "-server on your multi-core machine.",
                "-",
                "-=== Using HTTPS with Vert.x",
                "-",
                "-Vert.x http servers and clients can be configured to use HTTPS in exactly the same way as net servers.",
                "-",
                "-Please see <<ssl, configuring net servers to use SSL>> for more information.",
                "-",
                "-SSL can also be enabled/disabled per request with {@link io.vertx.core.http.RequestOptions} or when",
                "-specifying a scheme with {@link io.vertx.core.http.HttpClient#requestAbs(io.vertx.core.http.HttpMethod,java.lang.String)}",
                "-method.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#setSSLPerRequest(io.vertx.core.http.HttpClient)}",
                "-----",
                "-",
                "-The {@link io.vertx.core.http.HttpClientOptions#setSsl(boolean)} setting acts as the default client setting.",
                "-",
                "-The {@link io.vertx.core.http.RequestOptions#setSsl(boolean)} overrides the default client setting",
                "-",
                "-* setting the value to `false` will disable SSL/TLS even if the client is configured to use SSL/TLS",
                "-* setting the value to `true` will enable SSL/TLS  even if the client is configured to not use SSL/TLS, the actual",
                "-client SSL/TLS (such as trust, key/certificate, ciphers, ALPN, ...) will be reused",
                "-",
                "-Likewise {@link io.vertx.core.http.HttpClient#requestAbs(io.vertx.core.http.HttpMethod,java.lang.String)} scheme",
                "-also overrides the default client setting.",
                "-",
                "-==== Server Name Indication (SNI)",
                "-",
                "-Vert.x http servers can be configured to use SNI in exactly the same way as {@linkplain io.vertx.core.net net servers}.",
                "-",
                "-Vert.x http client will present the actual hostname as _server name_ during the TLS handshake.",
                "-",
                "-=== WebSockets",
                "-",
                "-http://en.wikipedia.org/wiki/WebSocket[WebSockets] are a web technology that allows a full duplex socket-like",
                "-connection between HTTP servers and HTTP clients (typically browsers).",
                "-",
                "-Vert.x supports WebSockets on both the client and server-side.",
                "-",
                "-==== WebSockets on the server",
                "-",
                "-There are two ways of handling WebSockets on the server side.",
                "-",
                "-===== WebSocket handler",
                "-",
                "-The first way involves providing a {@link io.vertx.core.http.HttpServer#websocketHandler(io.vertx.core.Handler)}",
                "-on the server instance.",
                "-",
                "-When a WebSocket connection is made to the server, the handler will be called, passing in an instance of",
                "-{@link io.vertx.core.http.ServerWebSocket}.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example51}",
                "-----",
                "-",
                "-You can choose to reject the WebSocket by calling {@link io.vertx.core.http.ServerWebSocket#reject()}.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example52}",
                "-----",
                "-",
                "-===== Upgrading to WebSocket",
                "-",
                "-The second way of handling WebSockets is to handle the HTTP Upgrade request that was sent from the client, and",
                "-call {@link io.vertx.core.http.HttpServerRequest#upgrade()} on the server request.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example53}",
                "-----",
                "-",
                "-===== The server WebSocket",
                "-",
                "-The {@link io.vertx.core.http.ServerWebSocket} instance enables you to retrieve the {@link io.vertx.core.http.ServerWebSocket#headers() headers},",
                "-{@link io.vertx.core.http.ServerWebSocket#path() path}, {@link io.vertx.core.http.ServerWebSocket#query() query} and",
                "-{@link io.vertx.core.http.ServerWebSocket#uri() URI} of the HTTP request of the WebSocket handshake.",
                "-",
                "-==== WebSockets on the client",
                "-",
                "-The Vert.x {@link io.vertx.core.http.HttpClient} supports WebSockets.",
                "-",
                "-You can connect a WebSocket to a server using one of the {@link io.vertx.core.http.HttpClient#websocket} operations and",
                "-providing a handler.",
                "-",
                "-The handler will be called with an instance of {@link io.vertx.core.http.WebSocket} when the connection has been made:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example54}",
                "-----",
                "-",
                "-==== Writing messages to WebSockets",
                "-",
                "-If you wish to write a single WebSocket message to the WebSocket you can do this with",
                "-{@link io.vertx.core.http.WebSocket#writeBinaryMessage(io.vertx.core.buffer.Buffer)} or",
                "-{@link io.vertx.core.http.WebSocket#writeTextMessage(java.lang.String)} :",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example55}",
                "-----",
                "-",
                "-If the WebSocket message is larger than the maximum websocket frame size as configured with",
                "-{@link io.vertx.core.http.HttpClientOptions#setMaxWebsocketFrameSize(int)}",
                "-then Vert.x will split it into multiple WebSocket frames before sending it on the wire.",
                "-",
                "-==== Writing frames to WebSockets",
                "-",
                "-A WebSocket message can be composed of multiple frames. In this case the first frame is either a _binary_ or _text_ frame",
                "-followed by zero or more _continuation_ frames.",
                "-",
                "-The last frame in the message is marked as _final_.",
                "-",
                "-To send a message consisting of multiple frames you create frames using",
                "-{@link io.vertx.core.http.WebSocketFrame#binaryFrame(io.vertx.core.buffer.Buffer,boolean)}",
                "-, {@link io.vertx.core.http.WebSocketFrame#textFrame(java.lang.String,boolean)} or",
                "-{@link io.vertx.core.http.WebSocketFrame#continuationFrame(io.vertx.core.buffer.Buffer,boolean)} and write them",
                "-to the WebSocket using {@link io.vertx.core.http.WebSocket#writeFrame(io.vertx.core.http.WebSocketFrame)}.",
                "-",
                "-Here's an example for binary frames:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example56}",
                "-----",
                "-",
                "-In many cases you just want to send a websocket message that consists of a single final frame, so we provide a couple",
                "-of shortcut methods to do that with {@link io.vertx.core.http.WebSocket#writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)}",
                "-and {@link io.vertx.core.http.WebSocket#writeFinalTextFrame(String)}.",
                "-",
                "-Here's an example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example56_1}",
                "-----",
                "-",
                "-==== Reading frames from WebSockets",
                "-",
                "-To read frames from a WebSocket you use the {@link io.vertx.core.http.WebSocket#frameHandler(io.vertx.core.Handler)}.",
                "-",
                "-The frame handler will be called with instances of {@link io.vertx.core.http.WebSocketFrame} when a frame arrives,",
                "-for example:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example57}",
                "-----",
                "-",
                "-==== Closing WebSockets",
                "-",
                "-Use {@link io.vertx.core.http.WebSocket#close()} to close the WebSocket connection when you have finished with it.",
                "-",
                "-==== Streaming WebSockets",
                "-",
                "-The {@link io.vertx.core.http.WebSocket} instance is also a {@link io.vertx.core.streams.ReadStream} and a",
                "-{@link io.vertx.core.streams.WriteStream} so it can be used with pumps.",
                "-",
                "-When using a WebSocket as a write stream or a read stream it can only be used with WebSockets connections that are",
                "-used with binary frames that are no split over multiple frames.",
                "-",
                "-=== Using a proxy for HTTP/HTTPS connections",
                "-",
                "-The http client supports accessing http/https URLs via a HTTP proxy (e.g. Squid) or _SOCKS4a_ or _SOCKS5_ proxy.",
                "-The CONNECT protocol uses HTTP/1.x but can connect to HTTP/1.x and HTTP/2 servers.",
                "-",
                "-Connecting to h2c (unencrypted HTTP/2 servers) is likely not supported by http proxies since they will support",
                "-HTTP/1.1 only.",
                "-",
                "-The proxy can be configured in the {@link io.vertx.core.http.HttpClientOptions} by setting a",
                "-{@link io.vertx.core.net.ProxyOptions} object containing proxy type, hostname, port and optionally username and password.",
                "-",
                "-Here's an example of using an HTTP proxy:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example58}",
                "-----",
                "-",
                "-When the client connects to an http URL, it connects to the proxy server and provides the full URL in the",
                "-HTTP request (\"GET http://www.somehost.com/path/file.html HTTP/1.1\").",
                "-",
                "-When the client connects to an https URL, it asks the proxy to create a tunnel to the remote host with",
                "-the CONNECT method.",
                "-",
                "-For a SOCKS5 proxy:",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example59}",
                "-----",
                "-",
                "-The DNS resolution is always done on the proxy server, to achieve the functionality of a SOCKS4 client, it is necessary",
                "-to resolve the DNS address locally.",
                "-",
                "-==== Handling of other protocols",
                "-",
                "-The HTTP proxy implementation supports getting ftp:// urls if the proxy supports",
                "-that, which isn't available in non-proxy getAbs requests.",
                "-",
                "-[source,$lang]",
                "-----",
                "-{@link examples.HTTPExamples#example60}",
                "-----",
                "-",
                "-Support for other protocols is not available since java.net.URL does not",
                "-support them (gopher:// for example).",
                "-",
                "-=== Automatic clean-up in verticles",
                "-",
                "-If you're creating http servers and clients from inside verticles, those servers and clients will be automatically closed",
                "-when the verticle is undeployed."
            ],
            "changed_files": [
                "src/main/asciidoc/http.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "f57bce3b2f5ce2f57f33334ee1b6b88aa202827b",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528125614,
            "hunks": 4,
            "message": "Releasing 3.5.2",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cc1c2e51a..fe6a99819 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.2</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index dc253bf7f..9e50f9fe2 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2.CR3</version>",
                "+  <version>3.5.2</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2.CR3'",
                "+  compile 'io.vertx:vertx-core:3.5.2'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "77fe9d034cd2b997663c82e1039fd3c870f24260",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526889496,
            "hunks": 4,
            "message": "Releasing 3.5.2.CR2",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cc1c2e51a..46d6f9ac5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR2</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.2.CR2</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index d63189d03..1482091bb 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2.CR1</version>",
                "+  <version>3.5.2.CR2</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2.CR1'",
                "+  compile 'io.vertx:vertx-core:3.5.2.CR2'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "29225f560f1648820541eda8bef9e3a29750b6c5",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528293840,
            "hunks": 2,
            "message": "Modified pipeline to trigger dependend jobs",
            "diff": [
                "diff --git a/Jenkinsfile b/Jenkinsfile",
                "index cc27240b7..76118b81b 100644",
                "--- a/Jenkinsfile",
                "+++ b/Jenkinsfile",
                "@@ -1 +1,2 @@",
                "+library \"vertx-ci-workflow@master\"",
                " pipeline {",
                "@@ -15,2 +16,3 @@ pipeline {",
                "         sh 'mvn -U -B -Dsurefire.reportNameSuffix=OracleJDK_8 clean deploy -s $MAVEN_SETTINGS_PATH'",
                "+        triggerWorkflow()",
                "       }"
            ],
            "changed_files": [
                "Jenkinsfile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "4c5ea4d082ab02093ba9eb85fcde47a37059eb5d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530771737,
            "hunks": 4,
            "message": "Releasing 3.5.3.CR1",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 25b3e4c06..66cfad897 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.3-SNAPSHOT</version>",
                "+  <version>3.5.3.CR1</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.3-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.3.CR1</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index d01b12d2a..2242fa41e 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.3-SNAPSHOT</version>",
                "+  <version>3.5.3.CR1</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.3-SNAPSHOT'",
                "+  compile 'io.vertx:vertx-core:3.5.3.CR1'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "c3c57ab0c474fb001af406d023222ce220321456",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528302152,
            "hunks": 1,
            "message": "Fix wrong shared library name",
            "diff": [
                "diff --git a/Jenkinsfile b/Jenkinsfile",
                "index 76118b81b..c6867cff8 100644",
                "--- a/Jenkinsfile",
                "+++ b/Jenkinsfile",
                "@@ -1,2 +1,2 @@",
                "-library \"vertx-ci-workflow@master\"",
                "+library \"vertx-shared-library@master\"",
                " pipeline {"
            ],
            "changed_files": [
                "Jenkinsfile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "e6d48681be11ad5f4f4caef908d1f5dfa64dca01",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532521902,
            "hunks": 499,
            "message": "Regen and cleanup",
            "diff": [
                "diff --git a/src/main/asciidoc/dataobjects.adoc b/src/main/asciidoc/dataobjects.adoc",
                "index 90a13c170..d9082ebb9 100644",
                "--- a/src/main/asciidoc/dataobjects.adoc",
                "+++ b/src/main/asciidoc/dataobjects.adoc",
                "@@ -11,3 +11,3 @@",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -15,4 +15,3 @@",
                " ^|Name | Type ^| Description",
                "-|[[cacheMaxTimeToLive]]`cacheMaxTimeToLive`|`Number (int)`|",
                "-+++",
                "+|[[cacheMaxTimeToLive]]`@cacheMaxTimeToLive`|`Number (int)`|+++",
                " Set the cache maximum TTL value in seconds. After successful resolution IP addresses are cached with their DNS response TTL,",
                "@@ -20,4 +19,3 @@ Set the cache maximum TTL value in seconds. After successful resolution IP addre",
                " +++",
                "-|[[cacheMinTimeToLive]]`cacheMinTimeToLive`|`Number (int)`|",
                "-+++",
                "+|[[cacheMinTimeToLive]]`@cacheMinTimeToLive`|`Number (int)`|+++",
                " Set the cache minimum TTL value in seconds. After resolution successful IP addresses are cached with their DNS response TTL,",
                "@@ -25,4 +23,3 @@ Set the cache minimum TTL value in seconds. After resolution successful IP addre",
                " +++",
                "-|[[cacheNegativeTimeToLive]]`cacheNegativeTimeToLive`|`Number (int)`|",
                "-+++",
                "+|[[cacheNegativeTimeToLive]]`@cacheNegativeTimeToLive`|`Number (int)`|+++",
                " Set the negative cache TTL value in seconds. After a failed hostname resolution, DNS queries won't be retried",
                "@@ -31,4 +28,3 @@ Set the negative cache TTL value in seconds. After a failed hostname resolution,",
                " +++",
                "-|[[hostsPath]]`hostsPath`|`String`|",
                "-+++",
                "+|[[hostsPath]]`@hostsPath`|`String`|+++",
                " Set the path of an alternate hosts configuration file to use instead of the one provided by the os.",
                "@@ -37,4 +33,3 @@ Set the path of an alternate hosts configuration file to use instead of the one",
                " +++",
                "-|[[hostsValue]]`hostsValue`|`Buffer`|",
                "-+++",
                "+|[[hostsValue]]`@hostsValue`|`Buffer`|+++",
                " Set an alternate hosts configuration file to use instead of the one provided by the os.",
                "@@ -45,8 +40,6 @@ Set an alternate hosts configuration file to use instead of the one provided by",
                " +++",
                "-|[[maxQueries]]`maxQueries`|`Number (int)`|",
                "-+++",
                "+|[[maxQueries]]`@maxQueries`|`Number (int)`|+++",
                " Set the maximum number of queries when an hostname is resolved.",
                " +++",
                "-|[[ndots]]`ndots`|`Number (int)`|",
                "-+++",
                "+|[[ndots]]`@ndots`|`Number (int)`|+++",
                " Set the ndots value used when resolving using search domains, the default value is <code>-1</code> which",
                "@@ -54,4 +47,3 @@ Set the ndots value used when resolving using search domains, the default value",
                " +++",
                "-|[[optResourceEnabled]]`optResourceEnabled`|`Boolean`|",
                "-+++",
                "+|[[optResourceEnabled]]`@optResourceEnabled`|`Boolean`|+++",
                " Set to true to enable the automatic inclusion in DNS queries of an optional record that hints",
                "@@ -59,12 +51,9 @@ Set to true to enable the automatic inclusion in DNS queries of an optional reco",
                " +++",
                "-|[[queryTimeout]]`queryTimeout`|`Number (long)`|",
                "-+++",
                "+|[[queryTimeout]]`@queryTimeout`|`Number (long)`|+++",
                " Set the query timeout in milliseconds, i.e the amount of time after a query is considered to be failed.",
                " +++",
                "-|[[rdFlag]]`rdFlag`|`Boolean`|",
                "-+++",
                "+|[[rdFlag]]`@rdFlag`|`Boolean`|+++",
                " Set the DNS queries <i>Recursion Desired</i> flag value.",
                " +++",
                "-|[[rotateServers]]`rotateServers`|`Boolean`|",
                "-+++",
                "+|[[rotateServers]]`@rotateServers`|`Boolean`|+++",
                " Set to <code>true</code> to enable round-robin selection of the dns server to use. It spreads the query load",
                "@@ -72,4 +61,3 @@ Set to <code>true</code> to enable round-robin selection of the dns server to us",
                " +++",
                "-|[[searchDomains]]`searchDomains`|`Array of String`|",
                "-+++",
                "+|[[searchDomains]]`@searchDomains`|`Array of String`|+++",
                " Set the lists of DNS search domains.",
                "@@ -79,4 +67,3 @@ Set the lists of DNS search domains.",
                " +++",
                "-|[[servers]]`servers`|`Array of String`|",
                "-+++",
                "+|[[servers]]`@servers`|`Array of String`|+++",
                " Set the list of DNS server addresses, an address is the IP  of the dns server, followed by an optional",
                "@@ -97,3 +84,3 @@ Set the list of DNS server addresses, an address is the IP  of the dns server, f",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -101,28 +88,21 @@ Set the list of DNS server addresses, an address is the IP  of the dns server, f",
                " ^|Name | Type ^| Description",
                "-|[[argName]]`argName`|`String`|",
                "-+++",
                "+|[[argName]]`@argName`|`String`|+++",
                " Sets the argument name of this link.",
                " +++",
                "-|[[defaultValue]]`defaultValue`|`String`|",
                "-+++",
                "+|[[defaultValue]]`@defaultValue`|`String`|+++",
                " Sets the default value of this link.",
                " +++",
                "-|[[description]]`description`|`String`|",
                "-+++",
                "+|[[description]]`@description`|`String`|+++",
                " Sets the description of the link.",
                " +++",
                "-|[[hidden]]`hidden`|`Boolean`|",
                "-+++",
                "+|[[hidden]]`@hidden`|`Boolean`|+++",
                " Sets whether or not the current link is hidden.",
                " +++",
                "-|[[index]]`index`|`Number (int)`|",
                "-+++",
                "+|[[index]]`@index`|`Number (int)`|+++",
                " Sets the argument index.",
                " +++",
                "-|[[multiValued]]`multiValued`|`Boolean`|",
                "-+++",
                "+|[[multiValued]]`@multiValued`|`Boolean`|+++",
                " Sets whether or not the argument can receive several values. Only the last argument can receive several values.",
                " +++",
                "-|[[required]]`required`|`Boolean`|",
                "-+++",
                "+|[[required]]`@required`|`Boolean`|+++",
                " Sets whether or not the current link is required.",
                "@@ -139,3 +119,3 @@ Sets whether or not the current link is required.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -143,34 +123,31 @@ Sets whether or not the current link is required.",
                " ^|Name | Type ^| Description",
                "-|[[connectTimeout]]`connectTimeout`|`Number (int)`|",
                "-+++",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                " Set the connect timeout",
                " +++",
                "-|[[crlPaths]]`crlPaths`|`Array of String`|",
                "-+++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                " Add a CRL path",
                " +++",
                "-|[[crlValues]]`crlValues`|`Array of Buffer`|",
                "-+++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                " Add a CRL value",
                " +++",
                "-|[[enabledCipherSuites]]`enabledCipherSuites`|`Array of String`|",
                "-+++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                " Add an enabled cipher suite, appended to the ordered suites.",
                " +++",
                "-|[[enabledSecureTransportProtocols]]`enabledSecureTransportProtocols`|`Array of String`|",
                "-+++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                " Sets the list of enabled SSL/TLS protocols.",
                " +++",
                "-|[[idleTimeout]]`idleTimeout`|`Number (int)`|",
                "-+++",
                "-Set the idle timeout, in seconds. zero means don't timeout.",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "  This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                " +++",
                "-|[[jdkSslEngineOptions]]`jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                " +++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the key/cert options in jks format, aka Java keystore.",
                " +++",
                "-|[[localAddress]]`localAddress`|`String`|",
                "-+++",
                "+|[[localAddress]]`@localAddress`|`String`|+++",
                " Set the local interface to bind for network connections. When the local address is null,",
                "@@ -178,8 +155,6 @@ Set the local interface to bind for network connections. When the local address",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[metricsName]]`metricsName`|`String`|",
                "-+++",
                "+|[[metricsName]]`@metricsName`|`String`|+++",
                " Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "@@ -187,33 +162,25 @@ Set the metrics name identifying the reported metrics, useful for grouping metri",
                " +++",
                "-|[[openSslEngineOptions]]`openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|",
                "-+++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                " Set the key/cert store options in pem format.",
                " +++",
                "-|[[pemTrustOptions]]`pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|",
                "-+++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                " Set the trust options in pem format",
                " +++",
                "-|[[pfxKeyCertOptions]]`pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the key/cert options in pfx format.",
                " +++",
                "-|[[pfxTrustOptions]]`pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the trust options in pfx format",
                " +++",
                "-|[[proxyOptions]]`proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|",
                "-+++",
                "+|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                " Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -222,52 +189,39 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[soLinger]]`soLinger`|`Number (int)`|",
                "-+++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                " Set whether SO_linger keep alive is enabled",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[tcpCork]]`tcpCork`|`Boolean`|",
                "-+++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                " Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpFastOpen]]`tcpFastOpen`|`Boolean`|",
                "-+++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                " Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpKeepAlive]]`tcpKeepAlive`|`Boolean`|",
                "-+++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                " Set whether TCP keep alive is enabled",
                " +++",
                "-|[[tcpNoDelay]]`tcpNoDelay`|`Boolean`|",
                "-+++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                " Set whether TCP no delay is enabled",
                " +++",
                "-|[[tcpQuickAck]]`tcpQuickAck`|`Boolean`|",
                "-+++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                " Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                " +++",
                "-|[[trustAll]]`trustAll`|`Boolean`|",
                "-+++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                " Set whether all server certificates should be trusted",
                " +++",
                "-|[[trustStoreOptions]]`trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the trust options in jks format, aka Java truststore",
                " +++",
                "-|[[useAlpn]]`useAlpn`|`Boolean`|",
                "-+++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                " Set the ALPN usage.",
                " +++",
                "-|[[usePooledBuffers]]`usePooledBuffers`|`Boolean`|",
                "-+++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                " Set whether Netty pooled buffers are enabled",
                "@@ -284,3 +238,3 @@ Set whether Netty pooled buffers are enabled",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -288,16 +242,12 @@ Set whether Netty pooled buffers are enabled",
                " ^|Name | Type ^| Description",
                "-|[[atomicMove]]`atomicMove`|`Boolean`|",
                "-+++",
                "+|[[atomicMove]]`@atomicMove`|`Boolean`|+++",
                " Whether move should be performed as an atomic filesystem operation. Defaults to <code>false</code>.",
                " +++",
                "-|[[copyAttributes]]`copyAttributes`|`Boolean`|",
                "-+++",
                "+|[[copyAttributes]]`@copyAttributes`|`Boolean`|+++",
                " Whether the file attributes should be copied. Defaults to <code>false</code>.",
                " +++",
                "-|[[nofollowLinks]]`nofollowLinks`|`Boolean`|",
                "-+++",
                "+|[[nofollowLinks]]`@nofollowLinks`|`Boolean`|+++",
                " Whether symbolic links should not be followed during copy or move operations. Defaults to <code>false</code>.",
                " +++",
                "-|[[replaceExisting]]`replaceExisting`|`Boolean`|",
                "-+++",
                "+|[[replaceExisting]]`@replaceExisting`|`Boolean`|+++",
                " Whether an existing file, empty directory, or link should be replaced. Defaults to <code>false</code>.",
                "@@ -314,3 +264,3 @@ Whether an existing file, empty directory, or link should be replaced. Defaults",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -318,36 +268,27 @@ Whether an existing file, empty directory, or link should be replaced. Defaults",
                " ^|Name | Type ^| Description",
                "-|[[broadcast]]`broadcast`|`Boolean`|",
                "-+++",
                "+|[[broadcast]]`@broadcast`|`Boolean`|+++",
                " Set if the socket can send or receive broadcast packets",
                " +++",
                "-|[[ipV6]]`ipV6`|`Boolean`|",
                "-+++",
                "+|[[ipV6]]`@ipV6`|`Boolean`|+++",
                " Set if IP v6 should be used",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[loopbackModeDisabled]]`loopbackModeDisabled`|`Boolean`|",
                "-+++",
                "+|[[loopbackModeDisabled]]`@loopbackModeDisabled`|`Boolean`|+++",
                " Set if loopback mode is disabled",
                " +++",
                "-|[[multicastNetworkInterface]]`multicastNetworkInterface`|`String`|",
                "-+++",
                "+|[[multicastNetworkInterface]]`@multicastNetworkInterface`|`String`|+++",
                " Set the multicast network interface address",
                " +++",
                "-|[[multicastTimeToLive]]`multicastTimeToLive`|`Number (int)`|",
                "-+++",
                "+|[[multicastTimeToLive]]`@multicastTimeToLive`|`Number (int)`|+++",
                " Set the multicast ttl value",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -356,8 +297,6 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                "@@ -377,3 +316,3 @@ Set the value of traffic class",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -381,8 +320,6 @@ Set the value of traffic class",
                " ^|Name | Type ^| Description",
                "-|[[codecName]]`codecName`|`String`|",
                "-+++",
                "+|[[codecName]]`@codecName`|`String`|+++",
                " Set the codec name.",
                " +++",
                "-|[[headers]]`headers`|`String`|",
                "-+++",
                "+|[[headers]]`@headers`|`String`|+++",
                " Add a message header.",
                "@@ -392,4 +329,3 @@ Add a message header.",
                " +++",
                "-|[[sendTimeout]]`sendTimeout`|`Number (long)`|",
                "-+++",
                "+|[[sendTimeout]]`@sendTimeout`|`Number (long)`|+++",
                " Set the send timeout.",
                "@@ -407,3 +343,3 @@ Set the send timeout.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -411,8 +347,6 @@ Set the send timeout.",
                " ^|Name | Type ^| Description",
                "-|[[config]]`config`|`Json object`|",
                "-+++",
                "+|[[config]]`@config`|`Json object`|+++",
                " Set the JSON configuration that will be passed to the verticle(s) when it's deployed",
                " +++",
                "-|[[extraClasspath]]`extraClasspath`|`Array of String`|",
                "-+++",
                "+|[[extraClasspath]]`@extraClasspath`|`Array of String`|+++",
                " Set any extra classpath to be used when deploying the verticle.",
                "@@ -421,33 +355,29 @@ Set any extra classpath to be used when deploying the verticle.",
                " +++",
                "-|[[ha]]`ha`|`Boolean`|",
                "-+++",
                "+|[[ha]]`@ha`|`Boolean`|+++",
                " Set whether the verticle(s) will be deployed as HA.",
                " +++",
                "-|[[instances]]`instances`|`Number (int)`|",
                "-+++",
                "+|[[instances]]`@instances`|`Number (int)`|+++",
                " Set the number of instances that should be deployed.",
                " +++",
                "-|[[isolatedClasses]]`isolatedClasses`|`Array of String`|",
                "-+++",
                "+|[[isolatedClasses]]`@isolatedClasses`|`Array of String`|+++",
                " Set the isolated class names.",
                " +++",
                "-|[[isolationGroup]]`isolationGroup`|`String`|",
                "-+++",
                "+|[[isolationGroup]]`@isolationGroup`|`String`|+++",
                " Set the isolation group that will be used when deploying the verticle(s)",
                " +++",
                "-|[[maxWorkerExecuteTime]]`maxWorkerExecuteTime`|`Number (long)`|",
                "-+++",
                "-Sets the value of max worker execute time, in ns.",
                "+|[[maxWorkerExecuteTime]]`@maxWorkerExecuteTime`|`Number (long)`|+++",
                "+Sets the value of max worker execute time, in link.",
                "+ <p>",
                "+ The default value of link is",
                " +++",
                "-|[[maxWorkerExecuteTimeUnit]]`maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|-",
                "-|[[multiThreaded]]`multiThreaded`|`Boolean`|",
                "+|[[maxWorkerExecuteTimeUnit]]`@maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>maxWorkerExecuteTime</code>",
                " +++",
                "+|[[multiThreaded]]`@multiThreaded`|`Boolean`|+++",
                " Set whether the verticle(s) should be deployed as a multi-threaded worker verticle",
                " +++",
                "-|[[worker]]`worker`|`Boolean`|",
                "-+++",
                "+|[[worker]]`@worker`|`Boolean`|+++",
                " Set whether the verticle(s) should be deployed as a worker verticle",
                " +++",
                "-|[[workerPoolName]]`workerPoolName`|`String`|",
                "-+++",
                "+|[[workerPoolName]]`@workerPoolName`|`String`|+++",
                " Set the worker pool name to use for this verticle. When no name is set, the Vert.x",
                "@@ -455,4 +385,3 @@ Set the worker pool name to use for this verticle. When no name is set, the Vert",
                " +++",
                "-|[[workerPoolSize]]`workerPoolSize`|`Number (int)`|",
                "-+++",
                "+|[[workerPoolSize]]`@workerPoolSize`|`Number (int)`|+++",
                " Set the maximum number of worker threads to be used by the Vert.x instance.",
                "@@ -469,3 +398,3 @@ Set the maximum number of worker threads to be used by the Vert.x instance.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -473,14 +402,17 @@ Set the maximum number of worker threads to be used by the Vert.x instance.",
                " ^|Name | Type ^| Description",
                "-|[[host]]`host`|`String`|",
                "-+++",
                "+|[[host]]`@host`|`String`|+++",
                " Set the host name to be used by this client in requests.",
                " +++",
                "-|[[port]]`port`|`Number (int)`|",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "+Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                " Set the port to be used by this client in requests.",
                " +++",
                "-|[[queryTimeout]]`queryTimeout`|`Number (long)`|",
                "-+++",
                "+|[[queryTimeout]]`@queryTimeout`|`Number (long)`|+++",
                " Set the query timeout in milliseconds, i.e the amount of time after a query is considered to be failed.",
                " +++",
                "+|[[recursionDesired]]`@recursionDesired`|`Boolean`|+++",
                "+Set whether or not recursion is desired",
                "++++",
                " |===",
                "@@ -495,3 +427,3 @@ Set the query timeout in milliseconds, i.e the amount of time after a query is c",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -499,20 +431,15 @@ Set the query timeout in milliseconds, i.e the amount of time after a query is c",
                " ^|Name | Type ^| Description",
                "-|[[acceptBacklog]]`acceptBacklog`|`Number (int)`|",
                "-+++",
                "+|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                " Set the accept back log.",
                " +++",
                "-|[[clientAuth]]`clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|",
                "-+++",
                "+|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                " Set whether client auth is required",
                " +++",
                "-|[[clusterPingInterval]]`clusterPingInterval`|`Number (long)`|",
                "-+++",
                "+|[[clusterPingInterval]]`@clusterPingInterval`|`Number (long)`|+++",
                " Set the value of cluster ping interval, in ms.",
                " +++",
                "-|[[clusterPingReplyInterval]]`clusterPingReplyInterval`|`Number (long)`|",
                "-+++",
                "+|[[clusterPingReplyInterval]]`@clusterPingReplyInterval`|`Number (long)`|+++",
                " Set the value of cluster ping reply interval, in ms.",
                " +++",
                "-|[[clusterPublicHost]]`clusterPublicHost`|`String`|",
                "-+++",
                "+|[[clusterPublicHost]]`@clusterPublicHost`|`String`|+++",
                " Set the public facing hostname to be used for clustering.",
                "@@ -525,87 +452,71 @@ Set the public facing hostname to be used for clustering.",
                " +++",
                "-|[[clusterPublicPort]]`clusterPublicPort`|`Number (int)`|",
                "-+++",
                "+|[[clusterPublicPort]]`@clusterPublicPort`|`Number (int)`|+++",
                " See link for an explanation.",
                " +++",
                "-|[[clustered]]`clustered`|`Boolean`|",
                "-+++",
                "+|[[clustered]]`@clustered`|`Boolean`|+++",
                " Sets whether or not the event bus is clustered.",
                " +++",
                "-|[[connectTimeout]]`connectTimeout`|`Number (int)`|",
                "-+++",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                " Sets the connect timeout",
                " +++",
                "-|[[crlPaths]]`crlPaths`|`Array of String`|",
                "-+++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                " Add a CRL path",
                " +++",
                "-|[[crlValues]]`crlValues`|`Array of Buffer`|",
                "-+++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                " Add a CRL value",
                " +++",
                "-|[[enabledCipherSuites]]`enabledCipherSuites`|`Array of String`|",
                "-+++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                " Add an enabled cipher suite, appended to the ordered suites.",
                " +++",
                "-|[[enabledSecureTransportProtocols]]`enabledSecureTransportProtocols`|`Array of String`|",
                "-+++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                " Sets the list of enabled SSL/TLS protocols.",
                " +++",
                "-|[[host]]`host`|`String`|",
                "-+++",
                "+|[[host]]`@host`|`String`|+++",
                " Sets the host.",
                " +++",
                "-|[[idleTimeout]]`idleTimeout`|`Number (int)`|",
                "-+++",
                "-Set the idle timeout, in seconds. zero means don't timeout.",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "  This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                " +++",
                "-|[[jdkSslEngineOptions]]`jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                " +++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the key/cert options in jks format, aka Java keystore.",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[openSslEngineOptions]]`openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|",
                "-+++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                " Set the key/cert store options in pem format.",
                " +++",
                "-|[[pemTrustOptions]]`pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|",
                "-+++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                " Set the trust options in pem format",
                " +++",
                "-|[[pfxKeyCertOptions]]`pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the key/cert options in pfx format.",
                " +++",
                "-|[[pfxTrustOptions]]`pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the trust options in pfx format",
                " +++",
                "-|[[port]]`port`|`Number (int)`|",
                "-+++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                " Sets the port.",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reconnectAttempts]]`reconnectAttempts`|`Number (int)`|",
                "-+++",
                "+|[[reconnectAttempts]]`@reconnectAttempts`|`Number (int)`|+++",
                " Sets the value of reconnect attempts.",
                " +++",
                "-|[[reconnectInterval]]`reconnectInterval`|`Number (long)`|",
                "-+++",
                "+|[[reconnectInterval]]`@reconnectInterval`|`Number (long)`|+++",
                " Set the reconnect interval.",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -614,52 +525,39 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[soLinger]]`soLinger`|`Number (int)`|",
                "-+++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                " Set whether SO_linger keep alive is enabled",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[tcpCork]]`tcpCork`|`Boolean`|",
                "-+++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                " Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpFastOpen]]`tcpFastOpen`|`Boolean`|",
                "-+++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                " Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpKeepAlive]]`tcpKeepAlive`|`Boolean`|",
                "-+++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                " Set whether TCP keep alive is enabled",
                " +++",
                "-|[[tcpNoDelay]]`tcpNoDelay`|`Boolean`|",
                "-+++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                " Set whether TCP no delay is enabled",
                " +++",
                "-|[[tcpQuickAck]]`tcpQuickAck`|`Boolean`|",
                "-+++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                " Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                " +++",
                "-|[[trustAll]]`trustAll`|`Boolean`|",
                "-+++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                " Set whether all server certificates should be trusted.",
                " +++",
                "-|[[trustStoreOptions]]`trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the trust options in jks format, aka Java truststore",
                " +++",
                "-|[[useAlpn]]`useAlpn`|`Boolean`|",
                "-+++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                " Set the ALPN usage.",
                " +++",
                "-|[[usePooledBuffers]]`usePooledBuffers`|`Boolean`|",
                "-+++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                " Set whether Netty pooled buffers are enabled",
                "@@ -676,3 +574,3 @@ Set whether Netty pooled buffers are enabled",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -680,12 +578,9 @@ Set whether Netty pooled buffers are enabled",
                " ^|Name | Type ^| Description",
                "-|[[debugData]]`debugData`|`Buffer`|",
                "-+++",
                "+|[[debugData]]`@debugData`|`Buffer`|+++",
                " Set the additional debug data",
                " +++",
                "-|[[errorCode]]`errorCode`|`Number (long)`|",
                "-+++",
                "+|[[errorCode]]`@errorCode`|`Number (long)`|+++",
                " +++",
                "-|[[lastStreamId]]`lastStreamId`|`Number (int)`|",
                "-+++",
                "+|[[lastStreamId]]`@lastStreamId`|`Number (int)`|+++",
                " Set the last stream id.",
                "@@ -705,3 +600,3 @@ Set the last stream id.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -709,24 +604,18 @@ Set the last stream id.",
                " ^|Name | Type ^| Description",
                "-|[[headerTableSize]]`headerTableSize`|`Number (long)`|",
                "-+++",
                "+|[[headerTableSize]]`@headerTableSize`|`Number (long)`|+++",
                " Set  HTTP/2 setting.",
                " +++",
                "-|[[initialWindowSize]]`initialWindowSize`|`Number (int)`|",
                "-+++",
                "+|[[initialWindowSize]]`@initialWindowSize`|`Number (int)`|+++",
                " Set the  HTTP/2 setting",
                " +++",
                "-|[[maxConcurrentStreams]]`maxConcurrentStreams`|`Number (long)`|",
                "-+++",
                "+|[[maxConcurrentStreams]]`@maxConcurrentStreams`|`Number (long)`|+++",
                " Set the  HTTP/2 setting",
                " +++",
                "-|[[maxFrameSize]]`maxFrameSize`|`Number (int)`|",
                "-+++",
                "+|[[maxFrameSize]]`@maxFrameSize`|`Number (int)`|+++",
                " Set the  HTTP/2 setting",
                " +++",
                "-|[[maxHeaderListSize]]`maxHeaderListSize`|`Number (long)`|",
                "-+++",
                "+|[[maxHeaderListSize]]`@maxHeaderListSize`|`Number (long)`|+++",
                " Set the  HTTP/2 setting",
                " +++",
                "-|[[pushEnabled]]`pushEnabled`|`Boolean`|",
                "-+++",
                "+|[[pushEnabled]]`@pushEnabled`|`Boolean`|+++",
                " Set the  HTTP/2 setting",
                "@@ -743,3 +632,3 @@ Set the  HTTP/2 setting",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -747,4 +636,3 @@ Set the  HTTP/2 setting",
                " ^|Name | Type ^| Description",
                "-|[[alpnVersions]]`alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|",
                "-+++",
                "+|[[alpnVersions]]`@alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|+++",
                " Set the list of protocol versions to provide to the server during the Application-Layer Protocol Negotiation.",
                "@@ -757,36 +645,27 @@ Set the list of protocol versions to provide to the server during the Applicatio",
                " +++",
                "-|[[connectTimeout]]`connectTimeout`|`Number (int)`|",
                "-+++",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                " Set the connect timeout",
                " +++",
                "-|[[crlPaths]]`crlPaths`|`Array of String`|",
                "-+++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                " Add a CRL path",
                " +++",
                "-|[[crlValues]]`crlValues`|`Array of Buffer`|",
                "-+++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                " Add a CRL value",
                " +++",
                "-|[[decoderInitialBufferSize]]`decoderInitialBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[decoderInitialBufferSize]]`@decoderInitialBufferSize`|`Number (int)`|+++",
                " set to <code>initialBufferSizeHttpDecoder</code> the initial buffer of the HttpDecoder.",
                " +++",
                "-|[[defaultHost]]`defaultHost`|`String`|",
                "-+++",
                "+|[[defaultHost]]`@defaultHost`|`String`|+++",
                " Set the default host name to be used by this client in requests if none is provided when making the request.",
                " +++",
                "-|[[defaultPort]]`defaultPort`|`Number (int)`|",
                "-+++",
                "+|[[defaultPort]]`@defaultPort`|`Number (int)`|+++",
                " Set the default port to be used by this client in requests if none is provided when making the request.",
                " +++",
                "-|[[enabledCipherSuites]]`enabledCipherSuites`|`Array of String`|",
                "-+++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                " Add an enabled cipher suite, appended to the ordered suites.",
                " +++",
                "-|[[enabledSecureTransportProtocols]]`enabledSecureTransportProtocols`|`Array of String`|",
                "-+++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                " Sets the list of enabled SSL/TLS protocols.",
                " +++",
                "-|[[forceSni]]`forceSni`|`Boolean`|",
                "-+++",
                "+|[[forceSni]]`@forceSni`|`Boolean`|+++",
                " By default, the server name is only sent for Fully Qualified Domain Name (FQDN), setting",
                "@@ -794,4 +673,3 @@ By default, the server name is only sent for Fully Qualified Domain Name (FQDN),",
                " +++",
                "-|[[http2ClearTextUpgrade]]`http2ClearTextUpgrade`|`Boolean`|",
                "-+++",
                "+|[[http2ClearTextUpgrade]]`@http2ClearTextUpgrade`|`Boolean`|+++",
                " Set to <code>true</code> when an <i>h2c</i> connection is established using an HTTP/1.1 upgrade request, and <code>false</code>",
                "@@ -799,4 +677,3 @@ Set to <code>true</code> when an <i>h2c</i> connection is established using an H",
                " +++",
                "-|[[http2ConnectionWindowSize]]`http2ConnectionWindowSize`|`Number (int)`|",
                "-+++",
                "+|[[http2ConnectionWindowSize]]`@http2ConnectionWindowSize`|`Number (int)`|+++",
                " Set the default HTTP/2 connection window size. It overrides the initial window",
                "@@ -807,4 +684,3 @@ Set the default HTTP/2 connection window size. It overrides the initial window",
                " +++",
                "-|[[http2KeepAliveTimeout]]`http2KeepAliveTimeout`|`Number (int)`|",
                "-+++",
                "+|[[http2KeepAliveTimeout]]`@http2KeepAliveTimeout`|`Number (int)`|+++",
                " Set the keep alive timeout for HTTP/2 connections, in seconds.",
                "@@ -813,8 +689,6 @@ Set the keep alive timeout for HTTP/2 connections, in seconds.",
                " +++",
                "-|[[http2MaxPoolSize]]`http2MaxPoolSize`|`Number (int)`|",
                "-+++",
                "+|[[http2MaxPoolSize]]`@http2MaxPoolSize`|`Number (int)`|+++",
                " Set the maximum pool size for HTTP/2 connections",
                " +++",
                "-|[[http2MultiplexingLimit]]`http2MultiplexingLimit`|`Number (int)`|",
                "-+++",
                "+|[[http2MultiplexingLimit]]`@http2MultiplexingLimit`|`Number (int)`|+++",
                " Set a client limit of the number concurrent streams for each HTTP/2 connection, this limits the number",
                "@@ -826,18 +700,19 @@ Set a client limit of the number concurrent streams for each HTTP/2 connection,",
                " +++",
                "-|[[idleTimeout]]`idleTimeout`|`Number (int)`|",
                "-+++",
                "-Set the idle timeout, in seconds. zero means don't timeout.",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "  This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                " +++",
                "-|[[initialSettings]]`initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                " +++",
                "+|[[initialSettings]]`@initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|+++",
                " Set the HTTP/2 connection settings immediately sent by to the server when the client connects.",
                " +++",
                "-|[[jdkSslEngineOptions]]`jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keepAlive]]`keepAlive`|`Boolean`|",
                "-+++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keepAlive]]`@keepAlive`|`Boolean`|+++",
                " Set whether keep alive is enabled on the client",
                " +++",
                "-|[[keepAliveTimeout]]`keepAliveTimeout`|`Number (int)`|",
                "-+++",
                "+|[[keepAliveTimeout]]`@keepAliveTimeout`|`Number (int)`|+++",
                " Set the keep alive timeout for HTTP/1.x, in seconds.",
                "@@ -846,8 +721,6 @@ Set the keep alive timeout for HTTP/1.x, in seconds.",
                " +++",
                "-|[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the key/cert options in jks format, aka Java keystore.",
                " +++",
                "-|[[localAddress]]`localAddress`|`String`|",
                "-+++",
                "+|[[localAddress]]`@localAddress`|`String`|+++",
                " Set the local interface to bind for network connections. When the local address is null,",
                "@@ -855,28 +728,21 @@ Set the local interface to bind for network connections. When the local address",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[maxChunkSize]]`maxChunkSize`|`Number (int)`|",
                "-+++",
                "+|[[maxChunkSize]]`@maxChunkSize`|`Number (int)`|+++",
                " Set the maximum HTTP chunk size",
                " +++",
                "-|[[maxHeaderSize]]`maxHeaderSize`|`Number (int)`|",
                "-+++",
                "+|[[maxHeaderSize]]`@maxHeaderSize`|`Number (int)`|+++",
                " Set the maximum length of all headers for HTTP/1.x .",
                " +++",
                "-|[[maxInitialLineLength]]`maxInitialLineLength`|`Number (int)`|",
                "-+++",
                "+|[[maxInitialLineLength]]`@maxInitialLineLength`|`Number (int)`|+++",
                " Set the maximum length of the initial line for HTTP/1.x (e.g. <code>\"HTTP/1.1 200 OK\"</code>)",
                " +++",
                "-|[[maxPoolSize]]`maxPoolSize`|`Number (int)`|",
                "-+++",
                "+|[[maxPoolSize]]`@maxPoolSize`|`Number (int)`|+++",
                " Set the maximum pool size for connections",
                " +++",
                "-|[[maxRedirects]]`maxRedirects`|`Number (int)`|",
                "-+++",
                "+|[[maxRedirects]]`@maxRedirects`|`Number (int)`|+++",
                " Set to <code>maxRedirects</code> the maximum number of redirection a request can follow.",
                " +++",
                "-|[[maxWaitQueueSize]]`maxWaitQueueSize`|`Number (int)`|",
                "-+++",
                "+|[[maxWaitQueueSize]]`@maxWaitQueueSize`|`Number (int)`|+++",
                " Set the maximum requests allowed in the wait queue, any requests beyond the max size will result in",
                "@@ -884,12 +750,9 @@ Set the maximum requests allowed in the wait queue, any requests beyond the max",
                " +++",
                "-|[[maxWebsocketFrameSize]]`maxWebsocketFrameSize`|`Number (int)`|",
                "-+++",
                "+|[[maxWebsocketFrameSize]]`@maxWebsocketFrameSize`|`Number (int)`|+++",
                " Set the max websocket frame size",
                " +++",
                "-|[[maxWebsocketMessageSize]]`maxWebsocketMessageSize`|`Number (int)`|",
                "-+++",
                "+|[[maxWebsocketMessageSize]]`@maxWebsocketMessageSize`|`Number (int)`|+++",
                " Set the max websocket message size",
                " +++",
                "-|[[metricsName]]`metricsName`|`String`|",
                "-+++",
                "+|[[metricsName]]`@metricsName`|`String`|+++",
                " Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "@@ -897,29 +760,22 @@ Set the metrics name identifying the reported metrics, useful for grouping metri",
                " +++",
                "-|[[openSslEngineOptions]]`openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|",
                "-+++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                " Set the key/cert store options in pem format.",
                " +++",
                "-|[[pemTrustOptions]]`pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|",
                "-+++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                " Set the trust options in pem format",
                " +++",
                "-|[[pfxKeyCertOptions]]`pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the key/cert options in pfx format.",
                " +++",
                "-|[[pfxTrustOptions]]`pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the trust options in pfx format",
                " +++",
                "-|[[pipelining]]`pipelining`|`Boolean`|",
                "-+++",
                "+|[[pipelining]]`@pipelining`|`Boolean`|+++",
                " Set whether pipe-lining is enabled on the client",
                " +++",
                "-|[[pipeliningLimit]]`pipeliningLimit`|`Number (int)`|",
                "-+++",
                "+|[[pipeliningLimit]]`@pipeliningLimit`|`Number (int)`|+++",
                " Set the limit of pending requests a pipe-lined HTTP/1 connection can send.",
                " +++",
                "-|[[poolCleanerPeriod]]`poolCleanerPeriod`|`Number (int)`|",
                "-+++",
                "+|[[poolCleanerPeriod]]`@poolCleanerPeriod`|`Number (int)`|+++",
                " Set the connection pool cleaner period in milli seconds, a non positive value disables expiration checks and connections",
                "@@ -927,20 +783,15 @@ Set the connection pool cleaner period in milli seconds, a non positive value di",
                " +++",
                "-|[[protocolVersion]]`protocolVersion`|`link:enums.html#HttpVersion[HttpVersion]`|",
                "-+++",
                "+|[[protocolVersion]]`@protocolVersion`|`link:enums.html#HttpVersion[HttpVersion]`|+++",
                " Set the protocol version.",
                " +++",
                "-|[[proxyOptions]]`proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|",
                "-+++",
                "+|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                " Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -949,8 +800,6 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[sendUnmaskedFrames]]`sendUnmaskedFrames`|`Boolean`|",
                "-+++",
                "+|[[sendUnmaskedFrames]]`@sendUnmaskedFrames`|`Boolean`|+++",
                " Set true when the client wants to skip frame masking.",
                "@@ -959,80 +808,57 @@ Set true when the client wants to skip frame masking.",
                " +++",
                "-|[[soLinger]]`soLinger`|`Number (int)`|",
                "-+++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                " Set whether SO_linger keep alive is enabled",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[tcpCork]]`tcpCork`|`Boolean`|",
                "-+++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                " Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpFastOpen]]`tcpFastOpen`|`Boolean`|",
                "-+++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                " Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpKeepAlive]]`tcpKeepAlive`|`Boolean`|",
                "-+++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                " Set whether TCP keep alive is enabled",
                " +++",
                "-|[[tcpNoDelay]]`tcpNoDelay`|`Boolean`|",
                "-+++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                " Set whether TCP no delay is enabled",
                " +++",
                "-|[[tcpQuickAck]]`tcpQuickAck`|`Boolean`|",
                "-+++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                " Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                " +++",
                "-|[[trustAll]]`trustAll`|`Boolean`|",
                "-+++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                " Set whether all server certificates should be trusted",
                " +++",
                "-|[[trustStoreOptions]]`trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the trust options in jks format, aka Java truststore",
                " +++",
                "-|[[tryUseCompression]]`tryUseCompression`|`Boolean`|",
                "-+++",
                "+|[[tryUseCompression]]`@tryUseCompression`|`Boolean`|+++",
                " Set whether compression is enabled",
                " +++",
                "-|[[tryWebsocketDeflateFrameCompression]]`tryWebsocketDeflateFrameCompression`|`Boolean`|",
                "-+++",
                "+|[[tryUsePerFrameWebsocketCompression]]`@tryUsePerFrameWebsocketCompression`|`Boolean`|+++",
                " Set option to offer Deflate Frame websocket compression",
                " +++",
                "-|[[tryWebsocketTryPermessageDefalteCompression]]`tryWebsocketTryPermessageDefalteCompression`|`Boolean`|",
                "-+++",
                "+|[[tryUsePerMessageWebsocketCompression]]`@tryUsePerMessageWebsocketCompression`|`Boolean`|+++",
                " Set option to offer Permessage Deflate websocket compression",
                " +++",
                "-|[[useAlpn]]`useAlpn`|`Boolean`|",
                "-+++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                " Set the ALPN usage.",
                " +++",
                "-|[[usePooledBuffers]]`usePooledBuffers`|`Boolean`|",
                "-+++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                " Set whether Netty pooled buffers are enabled",
                " +++",
                "-|[[verifyHost]]`verifyHost`|`Boolean`|",
                "-+++",
                "+|[[verifyHost]]`@verifyHost`|`Boolean`|+++",
                " Set whether hostname verification is enabled",
                " +++",
                "-|[[websocketCompressionAllowClientNoContext]]`websocketCompressionAllowClientNoContext`|`Boolean`|",
                "-+++",
                "+|[[websocketCompressionAllowClientNoContext]]`@websocketCompressionAllowClientNoContext`|`Boolean`|+++",
                " Set the websocket compression allow client no context option",
                " +++",
                "-|[[websocketCompressionDeflateUseWebkitName]]`websocketCompressionDeflateUseWebkitName`|`Boolean`|",
                "-+++",
                "-Sets the option to use the webkit name with the deflate frame compression",
                "-+++",
                "-|[[websocketCompressionLevel]]`websocketCompressionLevel`|`Number (int)`|",
                "-+++",
                "+|[[websocketCompressionLevel]]`@websocketCompressionLevel`|`Number (int)`|+++",
                " Set websocket compression level",
                " +++",
                "-|[[websocketCompressionRequestServerNoContext]]`websocketCompressionRequestServerNoContext`|`Boolean`|",
                "-+++",
                "+|[[websocketCompressionRequestServerNoContext]]`@websocketCompressionRequestServerNoContext`|`Boolean`|+++",
                " Set the websocket compression server no context option",
                "@@ -1049,3 +875,3 @@ Set the websocket compression server no context option",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1053,8 +879,6 @@ Set the websocket compression server no context option",
                " ^|Name | Type ^| Description",
                "-|[[acceptBacklog]]`acceptBacklog`|`Number (int)`|",
                "-+++",
                "+|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                " Set the accept back log",
                " +++",
                "-|[[acceptUnmaskedFrames]]`acceptUnmaskedFrames`|`Boolean`|",
                "-+++",
                "+|[[acceptUnmaskedFrames]]`@acceptUnmaskedFrames`|`Boolean`|+++",
                " Set true when the server accepts unmasked frame.",
                "@@ -1063,16 +887,12 @@ Set true when the server accepts unmasked frame.",
                " +++",
                "-|[[alpnVersions]]`alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|",
                "-+++",
                "+|[[alpnVersions]]`@alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|+++",
                " Set the list of protocol versions to provide to the server during the Application-Layer Protocol Negotiatiation.",
                " +++",
                "-|[[clientAuth]]`clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|",
                "-+++",
                "+|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                " Set whether client auth is required",
                " +++",
                "-|[[clientAuthRequired]]`clientAuthRequired`|`Boolean`|",
                "-+++",
                "+|[[clientAuthRequired]]`@clientAuthRequired`|`Boolean`|+++",
                " Set whether client auth is required",
                " +++",
                "-|[[compressionLevel]]`compressionLevel`|`Number (int)`|",
                "-+++",
                "+|[[compressionLevel]]`@compressionLevel`|`Number (int)`|+++",
                " This method allows to set the compression level to be used in http1.x/2 response bodies",
                "@@ -1099,4 +919,3 @@ This method allows to set the compression level to be used in http1.x/2 response",
                " +++",
                "-|[[compressionSupported]]`compressionSupported`|`Boolean`|",
                "-+++",
                "+|[[compressionSupported]]`@compressionSupported`|`Boolean`|+++",
                " Set whether the server should support gzip/deflate compression",
                "@@ -1104,36 +923,27 @@ Set whether the server should support gzip/deflate compression",
                " +++",
                "-|[[crlPaths]]`crlPaths`|`Array of String`|",
                "-+++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                " Add a CRL path",
                " +++",
                "-|[[crlValues]]`crlValues`|`Array of Buffer`|",
                "-+++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                " Add a CRL value",
                " +++",
                "-|[[decoderInitialBufferSize]]`decoderInitialBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[decoderInitialBufferSize]]`@decoderInitialBufferSize`|`Number (int)`|+++",
                " Set the initial buffer size for the HTTP decoder",
                " +++",
                "-|[[decompressionSupported]]`decompressionSupported`|`Boolean`|",
                "-+++",
                "+|[[decompressionSupported]]`@decompressionSupported`|`Boolean`|+++",
                " Set whether the server supports decompression",
                " +++",
                "-|[[enabledCipherSuites]]`enabledCipherSuites`|`Array of String`|",
                "-+++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                " Add an enabled cipher suite, appended to the ordered suites.",
                " +++",
                "-|[[enabledSecureTransportProtocols]]`enabledSecureTransportProtocols`|`Array of String`|",
                "-+++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                " Sets the list of enabled SSL/TLS protocols.",
                " +++",
                "-|[[handle100ContinueAutomatically]]`handle100ContinueAutomatically`|`Boolean`|",
                "-+++",
                "+|[[handle100ContinueAutomatically]]`@handle100ContinueAutomatically`|`Boolean`|+++",
                " Set whether 100 Continue should be handled automatically",
                " +++",
                "-|[[host]]`host`|`String`|",
                "-+++",
                "+|[[host]]`@host`|`String`|+++",
                " Set the host",
                " +++",
                "-|[[http2ConnectionWindowSize]]`http2ConnectionWindowSize`|`Number (int)`|",
                "-+++",
                "+|[[http2ConnectionWindowSize]]`@http2ConnectionWindowSize`|`Number (int)`|+++",
                " Set the default HTTP/2 connection window size. It overrides the initial window",
                "@@ -1144,71 +954,65 @@ Set the default HTTP/2 connection window size. It overrides the initial window",
                " +++",
                "-|[[idleTimeout]]`idleTimeout`|`Number (int)`|",
                "-+++",
                "-Set the idle timeout, in seconds. zero means don't timeout.",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "  This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                " +++",
                "-|[[initialSettings]]`initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                " +++",
                "+|[[initialSettings]]`@initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|+++",
                " Set the HTTP/2 connection settings immediatly sent by the server when a client connects.",
                " +++",
                "-|[[jdkSslEngineOptions]]`jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the key/cert options in jks format, aka Java keystore.",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[maxChunkSize]]`maxChunkSize`|`Number (int)`|",
                "-+++",
                "+|[[maxChunkSize]]`@maxChunkSize`|`Number (int)`|+++",
                " Set the maximum HTTP chunk size that link will receive",
                " +++",
                "-|[[maxHeaderSize]]`maxHeaderSize`|`Number (int)`|",
                "-+++",
                "+|[[maxHeaderSize]]`@maxHeaderSize`|`Number (int)`|+++",
                " Set the maximum length of all headers for HTTP/1.x .",
                " +++",
                "-|[[maxInitialLineLength]]`maxInitialLineLength`|`Number (int)`|",
                "-+++",
                "+|[[maxInitialLineLength]]`@maxInitialLineLength`|`Number (int)`|+++",
                " Set the maximum length of the initial line for HTTP/1.x (e.g. <code>\"GET / HTTP/1.0\"</code>)",
                " +++",
                "-|[[maxWebsocketFrameSize]]`maxWebsocketFrameSize`|`Number (int)`|",
                "-+++",
                "+|[[maxWebsocketFrameSize]]`@maxWebsocketFrameSize`|`Number (int)`|+++",
                " Set the maximum websocket frames size",
                " +++",
                "-|[[maxWebsocketMessageSize]]`maxWebsocketMessageSize`|`Number (int)`|",
                "-+++",
                "+|[[maxWebsocketMessageSize]]`@maxWebsocketMessageSize`|`Number (int)`|+++",
                " Set the maximum websocket message size",
                " +++",
                "-|[[openSslEngineOptions]]`openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|",
                "-+++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                " Set the key/cert store options in pem format.",
                " +++",
                "-|[[pemTrustOptions]]`pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|",
                "-+++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                " Set the trust options in pem format",
                " +++",
                "-|[[pfxKeyCertOptions]]`pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "+|[[perFrameWebsocketCompressionSupported]]`@perFrameWebsocketCompressionSupported`|`Boolean`|+++",
                "+Enable or disable support for WebSocket Defalte Frame compression",
                " +++",
                "-Set the key/cert options in pfx format.",
                "+|[[perMessageWebsocketCompressionSupported]]`@perMessageWebsocketCompressionSupported`|`Boolean`|+++",
                "+Enable or disable support for WebSocket Permessage Deflate compression",
                " +++",
                "-|[[pfxTrustOptions]]`pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "+Set the key/cert options in pfx format.",
                " +++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the trust options in pfx format",
                " +++",
                "-|[[port]]`port`|`Number (int)`|",
                "-+++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                " Set the port",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -1217,80 +1021,51 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[sni]]`sni`|`Boolean`|",
                "-+++",
                "+|[[sni]]`@sni`|`Boolean`|+++",
                " Set whether the server supports Server Name Indiciation",
                " +++",
                "-|[[soLinger]]`soLinger`|`Number (int)`|",
                "-+++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                " Set whether SO_linger keep alive is enabled",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[tcpCork]]`tcpCork`|`Boolean`|",
                "-+++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                " Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpFastOpen]]`tcpFastOpen`|`Boolean`|",
                "-+++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                " Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpKeepAlive]]`tcpKeepAlive`|`Boolean`|",
                "-+++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                " Set whether TCP keep alive is enabled",
                " +++",
                "-|[[tcpNoDelay]]`tcpNoDelay`|`Boolean`|",
                "-+++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                " Set whether TCP no delay is enabled",
                " +++",
                "-|[[tcpQuickAck]]`tcpQuickAck`|`Boolean`|",
                "-+++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                " Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                " +++",
                "-|[[trustStoreOptions]]`trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the trust options in jks format, aka Java truststore",
                " +++",
                "-|[[useAlpn]]`useAlpn`|`Boolean`|",
                "-+++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                " Set the ALPN usage.",
                " +++",
                "-|[[usePooledBuffers]]`usePooledBuffers`|`Boolean`|",
                "-+++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                " Set whether Netty pooled buffers are enabled",
                " +++",
                "-|[[websocketAllowServerNoContext]]`websocketAllowServerNoContext`|`Boolean`|",
                "-+++",
                "+|[[websocketAllowServerNoContext]]`@websocketAllowServerNoContext`|`Boolean`|+++",
                " Set the WebSocket Allow Server No Context option",
                " +++",
                "-|[[websocketCompressionLevel]]`websocketCompressionLevel`|`Number (int)`|",
                "-+++",
                "+|[[websocketCompressionLevel]]`@websocketCompressionLevel`|`Number (int)`|+++",
                " Set the WebSocket compression level",
                " +++",
                "-|[[websocketFrameDeflateCompressionSupported]]`websocketFrameDeflateCompressionSupported`|`Boolean`|",
                "-+++",
                "-Enable or disable support for WebSocket Defalte Frame compression",
                "-+++",
                "-|[[websocketPermessageDeflateCompressionIsSupported]]`websocketPermessageDeflateCompressionIsSupported`|`Boolean`|",
                "-+++",
                "-Get whether WebSocket Permessage Deflate compression is supported",
                "-+++",
                "-|[[websocketPermessageDeflateCompressionSupported]]`websocketPermessageDeflateCompressionSupported`|`Boolean`|",
                "-+++",
                "-Enable or disable support for WebSocket Permessage Deflate compression",
                "-+++",
                "-|[[websocketPreferredClientNoContext]]`websocketPreferredClientNoContext`|`Boolean`|",
                "-+++",
                "+|[[websocketPreferredClientNoContext]]`@websocketPreferredClientNoContext`|`Boolean`|+++",
                " Set the WebSocket Preferred Client No Context setting",
                " +++",
                "-|[[websocketSubProtocols]]`websocketSubProtocols`|`String`|",
                "-+++",
                "+|[[websocketSubProtocols]]`@websocketSubProtocols`|`String`|+++",
                " Set the websocket subprotocols supported by the server.",
                "@@ -1307,3 +1082,3 @@ Set the websocket subprotocols supported by the server.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1339,3 +1114,3 @@ Set the websocket subprotocols supported by the server.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1343,12 +1118,9 @@ Set the websocket subprotocols supported by the server.",
                " ^|Name | Type ^| Description",
                "-|[[password]]`password`|`String`|",
                "-+++",
                "+|[[password]]`@password`|`String`|+++",
                " Set the password for the key store",
                " +++",
                "-|[[path]]`path`|`String`|",
                "-+++",
                "+|[[path]]`@path`|`String`|+++",
                " Set the path to the key store",
                " +++",
                "-|[[value]]`value`|`Buffer`|",
                "-+++",
                "+|[[value]]`@value`|`Buffer`|+++",
                " Set the key store as a buffer",
                "@@ -1366,3 +1138,3 @@ Set the key store as a buffer",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1370,4 +1142,3 @@ Set the key store as a buffer",
                " ^|Name | Type ^| Description",
                "-|[[enabled]]`enabled`|`Boolean`|",
                "-+++",
                "+|[[enabled]]`@enabled`|`Boolean`|+++",
                " Set whether metrics will be enabled on the Vert.x instance.",
                "@@ -1384,3 +1155,3 @@ Set whether metrics will be enabled on the Vert.x instance.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1388,24 +1159,18 @@ Set whether metrics will be enabled on the Vert.x instance.",
                " ^|Name | Type ^| Description",
                "-|[[connectTimeout]]`connectTimeout`|`Number (int)`|",
                "-+++",
                "+|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                " Set the connect timeout",
                " +++",
                "-|[[crlPaths]]`crlPaths`|`Array of String`|",
                "-+++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                " Add a CRL path",
                " +++",
                "-|[[crlValues]]`crlValues`|`Array of Buffer`|",
                "-+++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                " Add a CRL value",
                " +++",
                "-|[[enabledCipherSuites]]`enabledCipherSuites`|`Array of String`|",
                "-+++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                " Add an enabled cipher suite, appended to the ordered suites.",
                " +++",
                "-|[[enabledSecureTransportProtocols]]`enabledSecureTransportProtocols`|`Array of String`|",
                "-+++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                " Sets the list of enabled SSL/TLS protocols.",
                " +++",
                "-|[[hostnameVerificationAlgorithm]]`hostnameVerificationAlgorithm`|`String`|",
                "-+++",
                "+|[[hostnameVerificationAlgorithm]]`@hostnameVerificationAlgorithm`|`String`|+++",
                " Set the hostname verification algorithm interval",
                "@@ -1413,14 +1178,16 @@ Set the hostname verification algorithm interval",
                " +++",
                "-|[[idleTimeout]]`idleTimeout`|`Number (int)`|",
                "-+++",
                "-Set the idle timeout, in seconds. zero means don't timeout.",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "  This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                " +++",
                "-|[[jdkSslEngineOptions]]`jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                " +++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the key/cert options in jks format, aka Java keystore.",
                " +++",
                "-|[[localAddress]]`localAddress`|`String`|",
                "-+++",
                "+|[[localAddress]]`@localAddress`|`String`|+++",
                " Set the local interface to bind for network connections. When the local address is null,",
                "@@ -1428,8 +1195,6 @@ Set the local interface to bind for network connections. When the local address",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[metricsName]]`metricsName`|`String`|",
                "-+++",
                "+|[[metricsName]]`@metricsName`|`String`|+++",
                " Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "@@ -1437,41 +1202,31 @@ Set the metrics name identifying the reported metrics, useful for grouping metri",
                " +++",
                "-|[[openSslEngineOptions]]`openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|",
                "-+++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                " Set the key/cert store options in pem format.",
                " +++",
                "-|[[pemTrustOptions]]`pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|",
                "-+++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                " Set the trust options in pem format",
                " +++",
                "-|[[pfxKeyCertOptions]]`pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the key/cert options in pfx format.",
                " +++",
                "-|[[pfxTrustOptions]]`pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the trust options in pfx format",
                " +++",
                "-|[[proxyOptions]]`proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|",
                "-+++",
                "+|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                " Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reconnectAttempts]]`reconnectAttempts`|`Number (int)`|",
                "-+++",
                "+|[[reconnectAttempts]]`@reconnectAttempts`|`Number (int)`|+++",
                " Set the value of reconnect attempts",
                " +++",
                "-|[[reconnectInterval]]`reconnectInterval`|`Number (long)`|",
                "-+++",
                "+|[[reconnectInterval]]`@reconnectInterval`|`Number (long)`|+++",
                " Set the reconnect interval",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -1480,52 +1235,39 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[soLinger]]`soLinger`|`Number (int)`|",
                "-+++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                " Set whether SO_linger keep alive is enabled",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[tcpCork]]`tcpCork`|`Boolean`|",
                "-+++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                " Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpFastOpen]]`tcpFastOpen`|`Boolean`|",
                "-+++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                " Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpKeepAlive]]`tcpKeepAlive`|`Boolean`|",
                "-+++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                " Set whether TCP keep alive is enabled",
                " +++",
                "-|[[tcpNoDelay]]`tcpNoDelay`|`Boolean`|",
                "-+++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                " Set whether TCP no delay is enabled",
                " +++",
                "-|[[tcpQuickAck]]`tcpQuickAck`|`Boolean`|",
                "-+++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                " Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                " +++",
                "-|[[trustAll]]`trustAll`|`Boolean`|",
                "-+++",
                "+|[[trustAll]]`@trustAll`|`Boolean`|+++",
                " Set whether all server certificates should be trusted",
                " +++",
                "-|[[trustStoreOptions]]`trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the trust options in jks format, aka Java truststore",
                " +++",
                "-|[[useAlpn]]`useAlpn`|`Boolean`|",
                "-+++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                " Set the ALPN usage.",
                " +++",
                "-|[[usePooledBuffers]]`usePooledBuffers`|`Boolean`|",
                "-+++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                " Set whether Netty pooled buffers are enabled",
                "@@ -1542,3 +1284,3 @@ Set whether Netty pooled buffers are enabled",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1546,79 +1288,65 @@ Set whether Netty pooled buffers are enabled",
                " ^|Name | Type ^| Description",
                "-|[[acceptBacklog]]`acceptBacklog`|`Number (int)`|",
                "-+++",
                "+|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                " Set the accept back log",
                " +++",
                "-|[[clientAuth]]`clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|",
                "-+++",
                "+|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                " Set whether client auth is required",
                " +++",
                "-|[[clientAuthRequired]]`clientAuthRequired`|`Boolean`|",
                "-+++",
                "+|[[clientAuthRequired]]`@clientAuthRequired`|`Boolean`|+++",
                " Set whether client auth is required",
                " +++",
                "-|[[crlPaths]]`crlPaths`|`Array of String`|",
                "-+++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                " Add a CRL path",
                " +++",
                "-|[[crlValues]]`crlValues`|`Array of Buffer`|",
                "-+++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                " Add a CRL value",
                " +++",
                "-|[[enabledCipherSuites]]`enabledCipherSuites`|`Array of String`|",
                "-+++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                " Add an enabled cipher suite, appended to the ordered suites.",
                " +++",
                "-|[[enabledSecureTransportProtocols]]`enabledSecureTransportProtocols`|`Array of String`|",
                "-+++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                " Sets the list of enabled SSL/TLS protocols.",
                " +++",
                "-|[[host]]`host`|`String`|",
                "-+++",
                "+|[[host]]`@host`|`String`|+++",
                " Set the host",
                " +++",
                "-|[[idleTimeout]]`idleTimeout`|`Number (int)`|",
                "-+++",
                "-Set the idle timeout, in seconds. zero means don't timeout.",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "  This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                " +++",
                "-|[[jdkSslEngineOptions]]`jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                " +++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the key/cert options in jks format, aka Java keystore.",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[openSslEngineOptions]]`openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|",
                "-+++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                " Set the key/cert store options in pem format.",
                " +++",
                "-|[[pemTrustOptions]]`pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|",
                "-+++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                " Set the trust options in pem format",
                " +++",
                "-|[[pfxKeyCertOptions]]`pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the key/cert options in pfx format.",
                " +++",
                "-|[[pfxTrustOptions]]`pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the trust options in pfx format",
                " +++",
                "-|[[port]]`port`|`Number (int)`|",
                "-+++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                " Set the port",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -1627,52 +1355,39 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[sni]]`sni`|`Boolean`|",
                "-+++",
                "+|[[sni]]`@sni`|`Boolean`|+++",
                " Set whether the server supports Server Name Indiciation",
                " +++",
                "-|[[soLinger]]`soLinger`|`Number (int)`|",
                "-+++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                " Set whether SO_linger keep alive is enabled",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[tcpCork]]`tcpCork`|`Boolean`|",
                "-+++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                " Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpFastOpen]]`tcpFastOpen`|`Boolean`|",
                "-+++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                " Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpKeepAlive]]`tcpKeepAlive`|`Boolean`|",
                "-+++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                " Set whether TCP keep alive is enabled",
                " +++",
                "-|[[tcpNoDelay]]`tcpNoDelay`|`Boolean`|",
                "-+++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                " Set whether TCP no delay is enabled",
                " +++",
                "-|[[tcpQuickAck]]`tcpQuickAck`|`Boolean`|",
                "-+++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                " Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                " +++",
                "-|[[trustStoreOptions]]`trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the trust options in jks format, aka Java truststore",
                " +++",
                "-|[[useAlpn]]`useAlpn`|`Boolean`|",
                "-+++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                " Set the ALPN usage.",
                " +++",
                "-|[[usePooledBuffers]]`usePooledBuffers`|`Boolean`|",
                "-+++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                " Set whether Netty pooled buffers are enabled",
                "@@ -1688,3 +1403,3 @@ Set whether Netty pooled buffers are enabled",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1692,16 +1407,12 @@ Set whether Netty pooled buffers are enabled",
                " ^|Name | Type ^| Description",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -1710,8 +1421,6 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                "@@ -1728,3 +1437,3 @@ Set the value of traffic class",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1732,44 +1441,33 @@ Set the value of traffic class",
                " ^|Name | Type ^| Description",
                "-|[[append]]`append`|`Boolean`|",
                "-+++",
                "+|[[append]]`@append`|`Boolean`|+++",
                " Whether the file should be opened in append mode. Defaults to <code>false</code>.",
                " +++",
                "-|[[create]]`create`|`Boolean`|",
                "-+++",
                "+|[[create]]`@create`|`Boolean`|+++",
                " Set whether the file should be created if it does not already exist.",
                " +++",
                "-|[[createNew]]`createNew`|`Boolean`|",
                "-+++",
                "+|[[createNew]]`@createNew`|`Boolean`|+++",
                " Set whether the file should be created and fail if it does exist already.",
                " +++",
                "-|[[deleteOnClose]]`deleteOnClose`|`Boolean`|",
                "-+++",
                "+|[[deleteOnClose]]`@deleteOnClose`|`Boolean`|+++",
                " Set whether the file should be deleted when it's closed, or the JVM is shutdown.",
                " +++",
                "-|[[dsync]]`dsync`|`Boolean`|",
                "-+++",
                "+|[[dsync]]`@dsync`|`Boolean`|+++",
                " Set whether every write to the file's content  ill be written synchronously to the underlying hardware.",
                " +++",
                "-|[[perms]]`perms`|`String`|",
                "-+++",
                "+|[[perms]]`@perms`|`String`|+++",
                " Set the permissions string",
                " +++",
                "-|[[read]]`read`|`Boolean`|",
                "-+++",
                "+|[[read]]`@read`|`Boolean`|+++",
                " Set whether the file is to be opened for reading",
                " +++",
                "-|[[sparse]]`sparse`|`Boolean`|",
                "-+++",
                "+|[[sparse]]`@sparse`|`Boolean`|+++",
                " Set whether a hint should be provided that the file to created is sparse",
                " +++",
                "-|[[sync]]`sync`|`Boolean`|",
                "-+++",
                "+|[[sync]]`@sync`|`Boolean`|+++",
                " Set whether every write to the file's content and meta-data will be written synchronously to the underlying hardware.",
                " +++",
                "-|[[truncateExisting]]`truncateExisting`|`Boolean`|",
                "-+++",
                "+|[[truncateExisting]]`@truncateExisting`|`Boolean`|+++",
                " Set whether the file should be truncated to zero length on opening if it exists and is opened for write",
                " +++",
                "-|[[write]]`write`|`Boolean`|",
                "-+++",
                "+|[[write]]`@write`|`Boolean`|+++",
                " Set whether the file is to be opened for writing",
                "@@ -1786,3 +1484,3 @@ Set whether the file is to be opened for writing",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1790,4 +1488,3 @@ Set whether the file is to be opened for writing",
                " ^|Name | Type ^| Description",
                "-|[[sessionCacheEnabled]]`sessionCacheEnabled`|`Boolean`|",
                "-+++",
                "+|[[sessionCacheEnabled]]`@sessionCacheEnabled`|`Boolean`|+++",
                " Set whether session cache is enabled in open SSL session server context",
                "@@ -1807,3 +1504,3 @@ Set whether session cache is enabled in open SSL session server context",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1811,8 +1508,6 @@ Set whether session cache is enabled in open SSL session server context",
                " ^|Name | Type ^| Description",
                "-|[[argName]]`argName`|`String`|",
                "-+++",
                "+|[[argName]]`@argName`|`String`|+++",
                " Sets te arg name for this option.",
                " +++",
                "-|[[choices]]`choices`|`Array of String`|",
                "-+++",
                "+|[[choices]]`@choices`|`Array of String`|+++",
                " Sets the list of values accepted by this option. If the value set by the user does not match once of these",
                "@@ -1820,12 +1515,9 @@ Sets the list of values accepted by this option. If the value set by the user do",
                " +++",
                "-|[[defaultValue]]`defaultValue`|`String`|",
                "-+++",
                "+|[[defaultValue]]`@defaultValue`|`String`|+++",
                " Sets the default value of this option",
                " +++",
                "-|[[description]]`description`|`String`|",
                "-+++",
                "+|[[description]]`@description`|`String`|+++",
                " Sets te description of this option.",
                " +++",
                "-|[[flag]]`flag`|`Boolean`|",
                "-+++",
                "+|[[flag]]`@flag`|`Boolean`|+++",
                " Configures the current link to be a flag. It will be evaluated to <code>true</code> if it's found in",
                "@@ -1836,32 +1528,24 @@ Configures the current link to be a flag. It will be evaluated to <code>true</co",
                " +++",
                "-|[[help]]`help`|`Boolean`|",
                "-+++",
                "+|[[help]]`@help`|`Boolean`|+++",
                " Sets whether or not this option is a \"help\" option",
                " +++",
                "-|[[hidden]]`hidden`|`Boolean`|",
                "-+++",
                "+|[[hidden]]`@hidden`|`Boolean`|+++",
                " Sets whether or not this option should be hidden",
                " +++",
                "-|[[longName]]`longName`|`String`|",
                "-+++",
                "+|[[longName]]`@longName`|`String`|+++",
                " Sets the long name of this option.",
                " +++",
                "-|[[multiValued]]`multiValued`|`Boolean`|",
                "-+++",
                "+|[[multiValued]]`@multiValued`|`Boolean`|+++",
                " Sets whether or not this option can receive several values.",
                " +++",
                "-|[[name]]`name`|`String`|",
                "-+++",
                "+|[[name]]`@name`|`String`|+++",
                " +++",
                "-|[[required]]`required`|`Boolean`|",
                "-+++",
                "+|[[required]]`@required`|`Boolean`|+++",
                " Sets whether or not this option is mandatory.",
                " +++",
                "-|[[shortName]]`shortName`|`String`|",
                "-+++",
                "+|[[shortName]]`@shortName`|`String`|+++",
                " Sets the short name of this option.",
                " +++",
                "-|[[singleValued]]`singleValued`|`Boolean`|",
                "-+++",
                "+|[[singleValued]]`@singleValued`|`Boolean`|+++",
                " Sets whether or not this option can receive a value.",
                "@@ -1939,3 +1623,3 @@ Sets whether or not this option can receive a value.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -1943,32 +1627,24 @@ Sets whether or not this option can receive a value.",
                " ^|Name | Type ^| Description",
                "-|[[certPath]]`certPath`|`String`|",
                "-+++",
                "+|[[certPath]]`@certPath`|`String`|+++",
                " Set the path of the first certificate, replacing the previous certificates paths",
                " +++",
                "-|[[certPaths]]`certPaths`|`Array of String`|",
                "-+++",
                "+|[[certPaths]]`@certPaths`|`Array of String`|+++",
                " Set all the paths to the certificates files",
                " +++",
                "-|[[certValue]]`certValue`|`Buffer`|",
                "-+++",
                "+|[[certValue]]`@certValue`|`Buffer`|+++",
                " Set the first certificate as a buffer, replacing the previous certificates buffers",
                " +++",
                "-|[[certValues]]`certValues`|`Array of Buffer`|",
                "-+++",
                "+|[[certValues]]`@certValues`|`Array of Buffer`|+++",
                " Set all the certificates as a list of buffer",
                " +++",
                "-|[[keyPath]]`keyPath`|`String`|",
                "-+++",
                "+|[[keyPath]]`@keyPath`|`String`|+++",
                " Set the path of the first key file, replacing the keys paths",
                " +++",
                "-|[[keyPaths]]`keyPaths`|`Array of String`|",
                "-+++",
                "+|[[keyPaths]]`@keyPaths`|`Array of String`|+++",
                " Set all the paths to the keys files",
                " +++",
                "-|[[keyValue]]`keyValue`|`Buffer`|",
                "-+++",
                "+|[[keyValue]]`@keyValue`|`Buffer`|+++",
                " Set the first key a a buffer, replacing the previous keys buffers",
                " +++",
                "-|[[keyValues]]`keyValues`|`Array of Buffer`|",
                "-+++",
                "+|[[keyValues]]`@keyValues`|`Array of Buffer`|+++",
                " Set all the keys as a list of buffer",
                "@@ -2013,3 +1689,3 @@ Set all the keys as a list of buffer",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -2017,8 +1693,6 @@ Set all the keys as a list of buffer",
                " ^|Name | Type ^| Description",
                "-|[[certPaths]]`certPaths`|`Array of String`|",
                "-+++",
                "+|[[certPaths]]`@certPaths`|`Array of String`|+++",
                " Add a certificate path",
                " +++",
                "-|[[certValues]]`certValues`|`Array of Buffer`|",
                "-+++",
                "+|[[certValues]]`@certValues`|`Array of Buffer`|+++",
                " Add a certificate value",
                "@@ -2053,3 +1727,3 @@ Add a certificate value",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -2057,12 +1731,9 @@ Add a certificate value",
                " ^|Name | Type ^| Description",
                "-|[[password]]`password`|`String`|",
                "-+++",
                "+|[[password]]`@password`|`String`|+++",
                " Set the password",
                " +++",
                "-|[[path]]`path`|`String`|",
                "-+++",
                "+|[[path]]`@path`|`String`|+++",
                " Set the path",
                " +++",
                "-|[[value]]`value`|`Buffer`|",
                "-+++",
                "+|[[value]]`@value`|`Buffer`|+++",
                " Set the store as a buffer",
                "@@ -2079,3 +1750,3 @@ Set the store as a buffer",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -2083,16 +1754,12 @@ Set the store as a buffer",
                " ^|Name | Type ^| Description",
                "-|[[host]]`host`|`String`|",
                "-+++",
                "+|[[host]]`@host`|`String`|+++",
                " Set proxy host.",
                " +++",
                "-|[[password]]`password`|`String`|",
                "-+++",
                "+|[[password]]`@password`|`String`|+++",
                " Set proxy password.",
                " +++",
                "-|[[port]]`port`|`Number (int)`|",
                "-+++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                " Set proxy port.",
                " +++",
                "-|[[type]]`type`|`link:enums.html#ProxyType[ProxyType]`|",
                "-+++",
                "+|[[type]]`@type`|`link:enums.html#ProxyType[ProxyType]`|+++",
                " Set proxy type.",
                "@@ -2101,4 +1768,3 @@ Set proxy type.",
                " +++",
                "-|[[username]]`username`|`String`|",
                "-+++",
                "+|[[username]]`@username`|`String`|+++",
                " Set proxy username.",
                "@@ -2115,3 +1781,3 @@ Set proxy username.",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -2119,16 +1785,12 @@ Set proxy username.",
                " ^|Name | Type ^| Description",
                "-|[[host]]`host`|`String`|",
                "-+++",
                "+|[[host]]`@host`|`String`|+++",
                " Set the host name to be used by the client request.",
                " +++",
                "-|[[port]]`port`|`Number (int)`|",
                "-+++",
                "+|[[port]]`@port`|`Number (int)`|+++",
                " Set the port to be used by the client request.",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[uri]]`uri`|`String`|",
                "-+++",
                "+|[[uri]]`@uri`|`String`|+++",
                " Set the request relative URI",
                "@@ -2145,3 +1807,3 @@ Set the request relative URI",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -2149,59 +1811,50 @@ Set the request relative URI",
                " ^|Name | Type ^| Description",
                "-|[[crlPaths]]`crlPaths`|`Array of String`|",
                "-+++",
                "+|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                " Add a CRL path",
                " +++",
                "-|[[crlValues]]`crlValues`|`Array of Buffer`|",
                "-+++",
                "+|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                " Add a CRL value",
                " +++",
                "-|[[enabledCipherSuites]]`enabledCipherSuites`|`Array of String`|",
                "-+++",
                "+|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                " Add an enabled cipher suite, appended to the ordered suites.",
                " +++",
                "-|[[enabledSecureTransportProtocols]]`enabledSecureTransportProtocols`|`Array of String`|",
                "-+++",
                "+|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                " Sets the list of enabled SSL/TLS protocols.",
                " +++",
                "-|[[idleTimeout]]`idleTimeout`|`Number (int)`|",
                "-+++",
                "-Set the idle timeout, in seconds. zero means don't timeout.",
                "+|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "+Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "  This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "+",
                "+ If you want change default time unit, use link",
                " +++",
                "-|[[jdkSslEngineOptions]]`jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "+|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the idle timeout unit. If not specified, default is seconds.",
                " +++",
                "+|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "+|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the key/cert options in jks format, aka Java keystore.",
                " +++",
                "-|[[logActivity]]`logActivity`|`Boolean`|",
                "-+++",
                "+|[[logActivity]]`@logActivity`|`Boolean`|+++",
                " Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                " +++",
                "-|[[openSslEngineOptions]]`openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|",
                "-+++",
                "+|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "+|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                " Set the key/cert store options in pem format.",
                " +++",
                "-|[[pemTrustOptions]]`pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|",
                "-+++",
                "+|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                " Set the trust options in pem format",
                " +++",
                "-|[[pfxKeyCertOptions]]`pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the key/cert options in pfx format.",
                " +++",
                "-|[[pfxTrustOptions]]`pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|",
                "-+++",
                "+|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                " Set the trust options in pfx format",
                " +++",
                "-|[[receiveBufferSize]]`receiveBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                " Set the TCP receive buffer size",
                " +++",
                "-|[[reuseAddress]]`reuseAddress`|`Boolean`|",
                "-+++",
                "+|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                " Set the value of reuse address",
                " +++",
                "-|[[reusePort]]`reusePort`|`Boolean`|",
                "-+++",
                "+|[[reusePort]]`@reusePort`|`Boolean`|+++",
                " Set the value of reuse port.",
                "@@ -2210,48 +1863,36 @@ Set the value of reuse port.",
                " +++",
                "-|[[sendBufferSize]]`sendBufferSize`|`Number (int)`|",
                "-+++",
                "+|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                " Set the TCP send buffer size",
                " +++",
                "-|[[soLinger]]`soLinger`|`Number (int)`|",
                "-+++",
                "+|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                " Set whether SO_linger keep alive is enabled",
                " +++",
                "-|[[ssl]]`ssl`|`Boolean`|",
                "-+++",
                "+|[[ssl]]`@ssl`|`Boolean`|+++",
                " Set whether SSL/TLS is enabled",
                " +++",
                "-|[[tcpCork]]`tcpCork`|`Boolean`|",
                "-+++",
                "+|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                " Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpFastOpen]]`tcpFastOpen`|`Boolean`|",
                "-+++",
                "+|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                " Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                " +++",
                "-|[[tcpKeepAlive]]`tcpKeepAlive`|`Boolean`|",
                "-+++",
                "+|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                " Set whether TCP keep alive is enabled",
                " +++",
                "-|[[tcpNoDelay]]`tcpNoDelay`|`Boolean`|",
                "-+++",
                "+|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                " Set whether TCP no delay is enabled",
                " +++",
                "-|[[tcpQuickAck]]`tcpQuickAck`|`Boolean`|",
                "-+++",
                "+|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                " Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                " +++",
                "-|[[trafficClass]]`trafficClass`|`Number (int)`|",
                "-+++",
                "+|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                " Set the value of traffic class",
                " +++",
                "-|[[trustStoreOptions]]`trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|",
                "-+++",
                "+|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                " Set the trust options in jks format, aka Java truststore",
                " +++",
                "-|[[useAlpn]]`useAlpn`|`Boolean`|",
                "-+++",
                "+|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                " Set the ALPN usage.",
                " +++",
                "-|[[usePooledBuffers]]`usePooledBuffers`|`Boolean`|",
                "-+++",
                "+|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                " Set whether Netty pooled buffers are enabled",
                "@@ -2268,3 +1909,3 @@ Set whether Netty pooled buffers are enabled",
                "-[cols=\">25%,^25%,50%\"]",
                "+[cols=\">25%,75%\"]",
                " [frame=\"topbot\"]",
                "@@ -2272,28 +1913,26 @@ Set whether Netty pooled buffers are enabled",
                " ^|Name | Type ^| Description",
                "-|[[addressResolverOptions]]`addressResolverOptions`|`link:dataobjects.html#AddressResolverOptions[AddressResolverOptions]`|",
                "-+++",
                "+|[[addressResolverOptions]]`@addressResolverOptions`|`link:dataobjects.html#AddressResolverOptions[AddressResolverOptions]`|+++",
                " Sets the address resolver configuration to configure resolving DNS servers, cache TTL, etc...",
                " +++",
                "-|[[blockedThreadCheckInterval]]`blockedThreadCheckInterval`|`Number (long)`|",
                "-+++",
                "-Sets the value of blocked thread check period, in ms.",
                "+|[[blockedThreadCheckInterval]]`@blockedThreadCheckInterval`|`Number (long)`|+++",
                "+Sets the value of blocked thread check period, in link.",
                "+ <p>",
                "+ The default value of link is",
                " +++",
                "-|[[clusterHost]]`clusterHost`|`String`|",
                "+|[[blockedThreadCheckIntervalUnit]]`@blockedThreadCheckIntervalUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>blockedThreadCheckInterval</code>.",
                " +++",
                "+|[[clusterHost]]`@clusterHost`|`String`|+++",
                " Set the hostname to be used for clustering.",
                " +++",
                "-|[[clusterPingInterval]]`clusterPingInterval`|`Number (long)`|",
                "-+++",
                "+|[[clusterPingInterval]]`@clusterPingInterval`|`Number (long)`|+++",
                " Set the value of cluster ping interval, in ms.",
                " +++",
                "-|[[clusterPingReplyInterval]]`clusterPingReplyInterval`|`Number (long)`|",
                "-+++",
                "+|[[clusterPingReplyInterval]]`@clusterPingReplyInterval`|`Number (long)`|+++",
                " Set the value of cluster ping reply interval, in ms.",
                " +++",
                "-|[[clusterPort]]`clusterPort`|`Number (int)`|",
                "-+++",
                "+|[[clusterPort]]`@clusterPort`|`Number (int)`|+++",
                " Set the port to be used for clustering.",
                " +++",
                "-|[[clusterPublicHost]]`clusterPublicHost`|`String`|",
                "-+++",
                "+|[[clusterPublicHost]]`@clusterPublicHost`|`String`|+++",
                " Set the public facing hostname to be used for clustering.",
                "@@ -2304,72 +1943,59 @@ Set the public facing hostname to be used for clustering.",
                " +++",
                "-|[[clusterPublicPort]]`clusterPublicPort`|`Number (int)`|",
                "-+++",
                "+|[[clusterPublicPort]]`@clusterPublicPort`|`Number (int)`|+++",
                " See link for an explanation.",
                " +++",
                "-|[[clustered]]`clustered`|`Boolean`|",
                "-+++",
                "+|[[clustered]]`@clustered`|`Boolean`|+++",
                " Set whether or not the Vert.x instance will be clustered.",
                " +++",
                "-|[[eventBusOptions]]`eventBusOptions`|`link:dataobjects.html#EventBusOptions[EventBusOptions]`|",
                "-+++",
                "+|[[eventBusOptions]]`@eventBusOptions`|`link:dataobjects.html#EventBusOptions[EventBusOptions]`|+++",
                " Sets the event bus configuration to configure the host, port, ssl...",
                " +++",
                "-|[[eventLoopPoolSize]]`eventLoopPoolSize`|`Number (int)`|",
                "-+++",
                "+|[[eventLoopPoolSize]]`@eventLoopPoolSize`|`Number (int)`|+++",
                " Set the number of event loop threads to be used by the Vert.x instance.",
                " +++",
                "-|[[fileResolverCachingEnabled]]`fileResolverCachingEnabled`|`Boolean`|",
                "-+++",
                "+|[[fileResolverCachingEnabled]]`@fileResolverCachingEnabled`|`Boolean`|+++",
                " Set wether the Vert.x file resolver uses caching for classpath resources.",
                " +++",
                "-|[[haEnabled]]`haEnabled`|`Boolean`|",
                "-+++",
                "+|[[haEnabled]]`@haEnabled`|`Boolean`|+++",
                " Set whether HA will be enabled on the Vert.x instance.",
                " +++",
                "-|[[haGroup]]`haGroup`|`String`|",
                "-+++",
                "+|[[haGroup]]`@haGroup`|`String`|+++",
                " Set the HA group to be used when HA is enabled.",
                " +++",
                "-|[[internalBlockingPoolSize]]`internalBlockingPoolSize`|`Number (int)`|",
                "-+++",
                "+|[[internalBlockingPoolSize]]`@internalBlockingPoolSize`|`Number (int)`|+++",
                " Set the value of internal blocking pool size",
                " +++",
                "-|[[maxEventLoopExecuteTime]]`maxEventLoopExecuteTime`|`Number (long)`|",
                "-+++",
                "-Sets the value of max event loop execute time, in ns.",
                "-+++",
                "-|[[maxEventLoopExecuteTimeUnit]]`maxEventLoopExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "-+++",
                "-Set the time unit of <code>maxEventLoopExecuteTime</code>",
                "-+++",
                "-|[[maxWorkerExecuteTime]]`maxWorkerExecuteTime`|`Number (long)`|",
                "-+++",
                "-Sets the value of max worker execute time, in ns.",
                "+|[[maxEventLoopExecuteTime]]`@maxEventLoopExecuteTime`|`Number (long)`|+++",
                "+Sets the value of max event loop execute time, in link.",
                "+ <p>",
                "+ The default value of linkis",
                " +++",
                "-|[[maxWorkerExecuteTimeUnit]]`maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "+|[[maxEventLoopExecuteTimeUnit]]`@maxEventLoopExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>maxEventLoopExecuteTime</code>.",
                " +++",
                "-Set the time unit of <code>maxWorkerExecuteTime</code>",
                "+|[[maxWorkerExecuteTime]]`@maxWorkerExecuteTime`|`Number (long)`|+++",
                "+Sets the value of max worker execute time, in link.",
                "+ <p>",
                "+ The default value of link is",
                " +++",
                "-|[[metricsOptions]]`metricsOptions`|`link:dataobjects.html#MetricsOptions[MetricsOptions]`|",
                "+|[[maxWorkerExecuteTimeUnit]]`@maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>maxWorkerExecuteTime</code>.",
                " +++",
                "+|[[metricsOptions]]`@metricsOptions`|`link:dataobjects.html#MetricsOptions[MetricsOptions]`|+++",
                " Set the metrics options",
                " +++",
                "-|[[preferNativeTransport]]`preferNativeTransport`|`Boolean`|",
                "-+++",
                "+|[[preferNativeTransport]]`@preferNativeTransport`|`Boolean`|+++",
                " Set wether to prefer the native transport to the JDK transport.",
                " +++",
                "-|[[quorumSize]]`quorumSize`|`Number (int)`|",
                "-+++",
                "+|[[quorumSize]]`@quorumSize`|`Number (int)`|+++",
                " Set the quorum size to be used when HA is enabled.",
                " +++",
                "-|[[warningExceptionTime]]`warningExceptionTime`|`Number (long)`|",
                "-+++",
                "-Set the threshold value above this, the blocked warning contains a stack trace.",
                "-+++",
                "-|[[warningExceptionTimeUnit]]`warningExceptionTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|",
                "-+++",
                "-Set the time unit of <code>warningExceptionTime</code>",
                "+|[[warningExceptionTime]]`@warningExceptionTime`|`Number (long)`|+++",
                "+Set the threshold value above this, the blocked warning contains a stack trace. in link.",
                "+ The default value of link is",
                " +++",
                "-|[[workerPoolSize]]`workerPoolSize`|`Number (int)`|",
                "+|[[warningExceptionTimeUnit]]`@warningExceptionTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "+Set the time unit of <code>warningExceptionTime</code>.",
                " +++",
                "+|[[workerPoolSize]]`@workerPoolSize`|`Number (int)`|+++",
                " Set the maximum number of worker threads to be used by the Vert.x instance.",
                "diff --git a/src/main/asciidoc/enums.adoc b/src/main/asciidoc/enums.adoc",
                "index 47eb82786..15c120110 100644",
                "--- a/src/main/asciidoc/enums.adoc",
                "+++ b/src/main/asciidoc/enums.adoc",
                "@@ -16,8 +16,6 @@",
                " ^|Name | Description",
                "-|[[NONE]]`NONE`|",
                "-+++",
                "+|[[NONE]]`NONE`|+++",
                " No client authentication is requested or required.",
                " +++",
                "-|[[REQUEST]]`REQUEST`|",
                "-+++",
                "+|[[REQUEST]]`REQUEST`|+++",
                " Accept authentication if presented by client. If this option is set and the client chooses",
                "@@ -25,4 +23,3 @@ Accept authentication if presented by client. If this option is set and the clie",
                " +++",
                "-|[[REQUIRED]]`REQUIRED`|",
                "-+++",
                "+|[[REQUIRED]]`REQUIRED`|+++",
                " Require client to present authentication, if not presented then negotiations will be declined.",
                "@@ -45,60 +42,45 @@ Require client to present authentication, if not presented then negotiations wil",
                " ^|Name | Description",
                "-|[[NOERROR]]`NOERROR`|",
                "-+++",
                "+|[[NOERROR]]`NOERROR`|+++",
                " ID 0, no error",
                " +++",
                "-|[[FORMERROR]]`FORMERROR`|",
                "-+++",
                "+|[[FORMERROR]]`FORMERROR`|+++",
                " ID 1, format error",
                " +++",
                "-|[[SERVFAIL]]`SERVFAIL`|",
                "-+++",
                "+|[[SERVFAIL]]`SERVFAIL`|+++",
                " ID 2, server failure",
                " +++",
                "-|[[NXDOMAIN]]`NXDOMAIN`|",
                "-+++",
                "+|[[NXDOMAIN]]`NXDOMAIN`|+++",
                " ID 3, name error",
                " +++",
                "-|[[NOTIMPL]]`NOTIMPL`|",
                "-+++",
                "+|[[NOTIMPL]]`NOTIMPL`|+++",
                " ID 4, not implemented",
                " +++",
                "-|[[REFUSED]]`REFUSED`|",
                "-+++",
                "+|[[REFUSED]]`REFUSED`|+++",
                " ID 5, operation refused",
                " +++",
                "-|[[YXDOMAIN]]`YXDOMAIN`|",
                "-+++",
                "+|[[YXDOMAIN]]`YXDOMAIN`|+++",
                " ID 6, domain name should not exist",
                " +++",
                "-|[[YXRRSET]]`YXRRSET`|",
                "-+++",
                "+|[[YXRRSET]]`YXRRSET`|+++",
                " ID 7, resource record set should not exist",
                " +++",
                "-|[[NXRRSET]]`NXRRSET`|",
                "-+++",
                "+|[[NXRRSET]]`NXRRSET`|+++",
                " ID 8, rrset does not exist",
                " +++",
                "-|[[NOTAUTH]]`NOTAUTH`|",
                "-+++",
                "+|[[NOTAUTH]]`NOTAUTH`|+++",
                " ID 9, not authoritative for zone",
                " +++",
                "-|[[NOTZONE]]`NOTZONE`|",
                "-+++",
                "+|[[NOTZONE]]`NOTZONE`|+++",
                " ID 10, name not in zone",
                " +++",
                "-|[[BADVERS]]`BADVERS`|",
                "-+++",
                "+|[[BADVERS]]`BADVERS`|+++",
                " ID 11, bad extension mechanism for version",
                " +++",
                "-|[[BADSIG]]`BADSIG`|",
                "-+++",
                "+|[[BADSIG]]`BADSIG`|+++",
                " ID 12, bad signature",
                " +++",
                "-|[[BADKEY]]`BADKEY`|",
                "-+++",
                "+|[[BADKEY]]`BADKEY`|+++",
                " ID 13, bad key",
                " +++",
                "-|[[BADTIME]]`BADTIME`|",
                "-+++",
                "+|[[BADTIME]]`BADTIME`|+++",
                " ID 14, bad timestamp",
                "@@ -160,20 +142,15 @@ ID 14, bad timestamp",
                " ^|Name | Description",
                "-|[[START_OBJECT]]`START_OBJECT`|",
                "-+++",
                "+|[[START_OBJECT]]`START_OBJECT`|+++",
                " Signals the start of a JSON object.",
                " +++",
                "-|[[END_OBJECT]]`END_OBJECT`|",
                "-+++",
                "+|[[END_OBJECT]]`END_OBJECT`|+++",
                " Signals the end of a JSON object.",
                " +++",
                "-|[[START_ARRAY]]`START_ARRAY`|",
                "-+++",
                "+|[[START_ARRAY]]`START_ARRAY`|+++",
                " Signals the start of a JSON array.",
                " +++",
                "-|[[END_ARRAY]]`END_ARRAY`|",
                "-+++",
                "+|[[END_ARRAY]]`END_ARRAY`|+++",
                " Signals the end of a JSON array.",
                " +++",
                "-|[[VALUE]]`VALUE`|",
                "-+++",
                "+|[[VALUE]]`VALUE`|+++",
                " Signals a JSON value.",
                "@@ -194,12 +171,9 @@ Signals a JSON value.",
                " ^|Name | Description",
                "-|[[HTTP]]`HTTP`|",
                "-+++",
                "+|[[HTTP]]`HTTP`|+++",
                " HTTP CONNECT ssl proxy",
                " +++",
                "-|[[SOCKS4]]`SOCKS4`|",
                "-+++",
                "+|[[SOCKS4]]`SOCKS4`|+++",
                " SOCKS4/4a tcp proxy",
                " +++",
                "-|[[SOCKS5]]`SOCKS5`|",
                "-+++",
                "+|[[SOCKS5]]`SOCKS5`|+++",
                " SOCSK5 tcp proxy",
                "@@ -220,12 +194,9 @@ SOCSK5 tcp proxy",
                " ^|Name | Description",
                "-|[[TIMEOUT]]`TIMEOUT`|",
                "-+++",
                "+|[[TIMEOUT]]`TIMEOUT`|+++",
                " The message send failed because no reply was received before the timeout time.",
                " +++",
                "-|[[NO_HANDLERS]]`NO_HANDLERS`|",
                "-+++",
                "+|[[NO_HANDLERS]]`NO_HANDLERS`|+++",
                " The message send failed because no handlers were available to handle the message.",
                " +++",
                "-|[[RECIPIENT_FAILURE]]`RECIPIENT_FAILURE`|",
                "-+++",
                "+|[[RECIPIENT_FAILURE]]`RECIPIENT_FAILURE`|+++",
                " The message send failed because the recipient actively sent back a failure (rejected the message)",
                "diff --git a/src/main/asciidocs/dataobjects.adoc b/src/main/asciidocs/dataobjects.adoc",
                "deleted file mode 100644",
                "index d9082ebb9..000000000",
                "--- a/src/main/asciidocs/dataobjects.adoc",
                "+++ /dev/null",
                "@@ -1,2004 +0,0 @@",
                "-= Cheatsheets",
                "-",
                "-[[AddressResolverOptions]]",
                "-== AddressResolverOptions",
                "-",
                "-++++",
                "- Configuration options for Vert.x hostname resolver. The resolver uses the local <i>hosts</i> file and performs",
                "- DNS <i>A</i> and <i>AAAA</i> queries.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[cacheMaxTimeToLive]]`@cacheMaxTimeToLive`|`Number (int)`|+++",
                "-Set the cache maximum TTL value in seconds. After successful resolution IP addresses are cached with their DNS response TTL,",
                "- use this to set a maximum value to all responses TTL.",
                "-+++",
                "-|[[cacheMinTimeToLive]]`@cacheMinTimeToLive`|`Number (int)`|+++",
                "-Set the cache minimum TTL value in seconds. After resolution successful IP addresses are cached with their DNS response TTL,",
                "- use this to set a minimum value to all responses TTL.",
                "-+++",
                "-|[[cacheNegativeTimeToLive]]`@cacheNegativeTimeToLive`|`Number (int)`|+++",
                "-Set the negative cache TTL value in seconds. After a failed hostname resolution, DNS queries won't be retried",
                "- for a period of time equals to the negative TTL. This allows to reduce the response time of negative replies",
                "- and reduce the amount of messages to DNS servers.",
                "-+++",
                "-|[[hostsPath]]`@hostsPath`|`String`|+++",
                "-Set the path of an alternate hosts configuration file to use instead of the one provided by the os.",
                "- <p/>",
                "- The default value is null, so the operating system hosts config is used.",
                "-+++",
                "-|[[hostsValue]]`@hostsValue`|`Buffer`|+++",
                "-Set an alternate hosts configuration file to use instead of the one provided by the os.",
                "- <p/>",
                "- The value should contain the hosts content literaly, for instance <i>127.0.0.1 localhost</i>",
                "- <p/>",
                "- The default value is null, so the operating system hosts config is used.",
                "-+++",
                "-|[[maxQueries]]`@maxQueries`|`Number (int)`|+++",
                "-Set the maximum number of queries when an hostname is resolved.",
                "-+++",
                "-|[[ndots]]`@ndots`|`Number (int)`|+++",
                "-Set the ndots value used when resolving using search domains, the default value is <code>-1</code> which",
                "- determines the value from the OS on Linux or uses the value <code>1</code>.",
                "-+++",
                "-|[[optResourceEnabled]]`@optResourceEnabled`|`Boolean`|+++",
                "-Set to true to enable the automatic inclusion in DNS queries of an optional record that hints",
                "- the remote DNS server about how much data the resolver can read per response.",
                "-+++",
                "-|[[queryTimeout]]`@queryTimeout`|`Number (long)`|+++",
                "-Set the query timeout in milliseconds, i.e the amount of time after a query is considered to be failed.",
                "-+++",
                "-|[[rdFlag]]`@rdFlag`|`Boolean`|+++",
                "-Set the DNS queries <i>Recursion Desired</i> flag value.",
                "-+++",
                "-|[[rotateServers]]`@rotateServers`|`Boolean`|+++",
                "-Set to <code>true</code> to enable round-robin selection of the dns server to use. It spreads the query load",
                "- among the servers and avoids all lookup to hit the first server of the list.",
                "-+++",
                "-|[[searchDomains]]`@searchDomains`|`Array of String`|+++",
                "-Set the lists of DNS search domains.",
                "- <p/>",
                "- When the search domain list is null, the effective search domain list will be populated using",
                "- the system DNS search domains.",
                "-+++",
                "-|[[servers]]`@servers`|`Array of String`|+++",
                "-Set the list of DNS server addresses, an address is the IP  of the dns server, followed by an optional",
                "- colon and a port, e.g <code>8.8.8.8</code> or {code 192.168.0.1:40000}. When the list is empty, the resolver",
                "- will use the list of the system DNS server addresses from the environment, if that list cannot be retrieved",
                "- it will use Google's public DNS servers <code>\"8.8.8.8\"</code> and <code>\"8.8.4.4\"</code>.",
                "-+++",
                "-|===",
                "-",
                "-[[Argument]]",
                "-== Argument",
                "-",
                "-++++",
                "- Defines a command line argument. Unlike options, argument don't have names and are identified using an index. The",
                "- first index is 0 (because we are in the computer world).",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[argName]]`@argName`|`String`|+++",
                "-Sets the argument name of this link.",
                "-+++",
                "-|[[defaultValue]]`@defaultValue`|`String`|+++",
                "-Sets the default value of this link.",
                "-+++",
                "-|[[description]]`@description`|`String`|+++",
                "-Sets the description of the link.",
                "-+++",
                "-|[[hidden]]`@hidden`|`Boolean`|+++",
                "-Sets whether or not the current link is hidden.",
                "-+++",
                "-|[[index]]`@index`|`Number (int)`|+++",
                "-Sets the argument index.",
                "-+++",
                "-|[[multiValued]]`@multiValued`|`Boolean`|+++",
                "-Sets whether or not the argument can receive several values. Only the last argument can receive several values.",
                "-+++",
                "-|[[required]]`@required`|`Boolean`|+++",
                "-Sets whether or not the current link is required.",
                "-+++",
                "-|===",
                "-",
                "-[[ClientOptionsBase]]",
                "-== ClientOptionsBase",
                "-",
                "-++++",
                "- Base class for Client options",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "-Set the connect timeout",
                "-+++",
                "-|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "-Add a CRL path",
                "-+++",
                "-|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "-Add a CRL value",
                "-+++",
                "-|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "-Add an enabled cipher suite, appended to the ordered suites.",
                "-+++",
                "-|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "-Sets the list of enabled SSL/TLS protocols.",
                "-+++",
                "-|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "-Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "- This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "-",
                "- If you want change default time unit, use link",
                "-+++",
                "-|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the idle timeout unit. If not specified, default is seconds.",
                "-+++",
                "-|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the key/cert options in jks format, aka Java keystore.",
                "-+++",
                "-|[[localAddress]]`@localAddress`|`String`|+++",
                "-Set the local interface to bind for network connections. When the local address is null,",
                "- it will pick any local address, the default local address is null.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[metricsName]]`@metricsName`|`String`|+++",
                "-Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "- with the same name.",
                "-+++",
                "-|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "-Set the key/cert store options in pem format.",
                "-+++",
                "-|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "-Set the trust options in pem format",
                "-+++",
                "-|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the key/cert options in pfx format.",
                "-+++",
                "-|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the trust options in pfx format",
                "-+++",
                "-|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                "-Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "-Set whether SO_linger keep alive is enabled",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "-Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "-Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "-Set whether TCP keep alive is enabled",
                "-+++",
                "-|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "-Set whether TCP no delay is enabled",
                "-+++",
                "-|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "-Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "-Set whether all server certificates should be trusted",
                "-+++",
                "-|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the trust options in jks format, aka Java truststore",
                "-+++",
                "-|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "-Set the ALPN usage.",
                "-+++",
                "-|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "-Set whether Netty pooled buffers are enabled",
                "-+++",
                "-|===",
                "-",
                "-[[CopyOptions]]",
                "-== CopyOptions",
                "-",
                "-++++",
                "- Describes the copy (and move) options.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[atomicMove]]`@atomicMove`|`Boolean`|+++",
                "-Whether move should be performed as an atomic filesystem operation. Defaults to <code>false</code>.",
                "-+++",
                "-|[[copyAttributes]]`@copyAttributes`|`Boolean`|+++",
                "-Whether the file attributes should be copied. Defaults to <code>false</code>.",
                "-+++",
                "-|[[nofollowLinks]]`@nofollowLinks`|`Boolean`|+++",
                "-Whether symbolic links should not be followed during copy or move operations. Defaults to <code>false</code>.",
                "-+++",
                "-|[[replaceExisting]]`@replaceExisting`|`Boolean`|+++",
                "-Whether an existing file, empty directory, or link should be replaced. Defaults to <code>false</code>.",
                "-+++",
                "-|===",
                "-",
                "-[[DatagramSocketOptions]]",
                "-== DatagramSocketOptions",
                "-",
                "-++++",
                "- Options used to configure a datagram socket.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[broadcast]]`@broadcast`|`Boolean`|+++",
                "-Set if the socket can send or receive broadcast packets",
                "-+++",
                "-|[[ipV6]]`@ipV6`|`Boolean`|+++",
                "-Set if IP v6 should be used",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[loopbackModeDisabled]]`@loopbackModeDisabled`|`Boolean`|+++",
                "-Set if loopback mode is disabled",
                "-+++",
                "-|[[multicastNetworkInterface]]`@multicastNetworkInterface`|`String`|+++",
                "-Set the multicast network interface address",
                "-+++",
                "-|[[multicastTimeToLive]]`@multicastTimeToLive`|`Number (int)`|+++",
                "-Set the multicast ttl value",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|===",
                "-",
                "-[[DeliveryOptions]]",
                "-== DeliveryOptions",
                "-",
                "-++++",
                "- Delivery options are used to configure message delivery.",
                "- <p>",
                "- Delivery options allow to configure delivery timeout and message codec name, and to provide any headers",
                "- that you wish to send with the message.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[codecName]]`@codecName`|`String`|+++",
                "-Set the codec name.",
                "-+++",
                "-|[[headers]]`@headers`|`String`|+++",
                "-Add a message header.",
                "- <p>",
                "- Message headers can be sent with any message and will be accessible with link",
                "- at the recipient.",
                "-+++",
                "-|[[sendTimeout]]`@sendTimeout`|`Number (long)`|+++",
                "-Set the send timeout.",
                "-+++",
                "-|===",
                "-",
                "-[[DeploymentOptions]]",
                "-== DeploymentOptions",
                "-",
                "-++++",
                "- Options for configuring a verticle deployment.",
                "- <p>",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[config]]`@config`|`Json object`|+++",
                "-Set the JSON configuration that will be passed to the verticle(s) when it's deployed",
                "-+++",
                "-|[[extraClasspath]]`@extraClasspath`|`Array of String`|+++",
                "-Set any extra classpath to be used when deploying the verticle.",
                "- <p>",
                "- Ignored if no isolation group is set.",
                "-+++",
                "-|[[ha]]`@ha`|`Boolean`|+++",
                "-Set whether the verticle(s) will be deployed as HA.",
                "-+++",
                "-|[[instances]]`@instances`|`Number (int)`|+++",
                "-Set the number of instances that should be deployed.",
                "-+++",
                "-|[[isolatedClasses]]`@isolatedClasses`|`Array of String`|+++",
                "-Set the isolated class names.",
                "-+++",
                "-|[[isolationGroup]]`@isolationGroup`|`String`|+++",
                "-Set the isolation group that will be used when deploying the verticle(s)",
                "-+++",
                "-|[[maxWorkerExecuteTime]]`@maxWorkerExecuteTime`|`Number (long)`|+++",
                "-Sets the value of max worker execute time, in link.",
                "- <p>",
                "- The default value of link is",
                "-+++",
                "-|[[maxWorkerExecuteTimeUnit]]`@maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the time unit of <code>maxWorkerExecuteTime</code>",
                "-+++",
                "-|[[multiThreaded]]`@multiThreaded`|`Boolean`|+++",
                "-Set whether the verticle(s) should be deployed as a multi-threaded worker verticle",
                "-+++",
                "-|[[worker]]`@worker`|`Boolean`|+++",
                "-Set whether the verticle(s) should be deployed as a worker verticle",
                "-+++",
                "-|[[workerPoolName]]`@workerPoolName`|`String`|+++",
                "-Set the worker pool name to use for this verticle. When no name is set, the Vert.x",
                "- worker pool will be used, when a name is set, the verticle will use a named worker pool.",
                "-+++",
                "-|[[workerPoolSize]]`@workerPoolSize`|`Number (int)`|+++",
                "-Set the maximum number of worker threads to be used by the Vert.x instance.",
                "-+++",
                "-|===",
                "-",
                "-[[DnsClientOptions]]",
                "-== DnsClientOptions",
                "-",
                "-++++",
                "- Configuration options for Vert.x DNS client.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[host]]`@host`|`String`|+++",
                "-Set the host name to be used by this client in requests.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[port]]`@port`|`Number (int)`|+++",
                "-Set the port to be used by this client in requests.",
                "-+++",
                "-|[[queryTimeout]]`@queryTimeout`|`Number (long)`|+++",
                "-Set the query timeout in milliseconds, i.e the amount of time after a query is considered to be failed.",
                "-+++",
                "-|[[recursionDesired]]`@recursionDesired`|`Boolean`|+++",
                "-Set whether or not recursion is desired",
                "-+++",
                "-|===",
                "-",
                "-[[EventBusOptions]]",
                "-== EventBusOptions",
                "-",
                "-++++",
                "- Options to configure the event bus.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                "-Set the accept back log.",
                "-+++",
                "-|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                "-Set whether client auth is required",
                "-+++",
                "-|[[clusterPingInterval]]`@clusterPingInterval`|`Number (long)`|+++",
                "-Set the value of cluster ping interval, in ms.",
                "-+++",
                "-|[[clusterPingReplyInterval]]`@clusterPingReplyInterval`|`Number (long)`|+++",
                "-Set the value of cluster ping reply interval, in ms.",
                "-+++",
                "-|[[clusterPublicHost]]`@clusterPublicHost`|`String`|+++",
                "-Set the public facing hostname to be used for clustering.",
                "- Sometimes, e.g. when running on certain clouds, the local address the server listens on for clustering is",
                "- not the same address that other nodes connect to it at, as the OS / cloud infrastructure does some kind of",
                "- proxying. If this is the case you can specify a public hostname which is different from the hostname the",
                "- server listens at.",
                "- <p>",
                "- The default value is null which means use the same as the cluster hostname.",
                "-+++",
                "-|[[clusterPublicPort]]`@clusterPublicPort`|`Number (int)`|+++",
                "-See link for an explanation.",
                "-+++",
                "-|[[clustered]]`@clustered`|`Boolean`|+++",
                "-Sets whether or not the event bus is clustered.",
                "-+++",
                "-|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "-Sets the connect timeout",
                "-+++",
                "-|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "-Add a CRL path",
                "-+++",
                "-|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "-Add a CRL value",
                "-+++",
                "-|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "-Add an enabled cipher suite, appended to the ordered suites.",
                "-+++",
                "-|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "-Sets the list of enabled SSL/TLS protocols.",
                "-+++",
                "-|[[host]]`@host`|`String`|+++",
                "-Sets the host.",
                "-+++",
                "-|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "-Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "- This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "-",
                "- If you want change default time unit, use link",
                "-+++",
                "-|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the idle timeout unit. If not specified, default is seconds.",
                "-+++",
                "-|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the key/cert options in jks format, aka Java keystore.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "-Set the key/cert store options in pem format.",
                "-+++",
                "-|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "-Set the trust options in pem format",
                "-+++",
                "-|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the key/cert options in pfx format.",
                "-+++",
                "-|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the trust options in pfx format",
                "-+++",
                "-|[[port]]`@port`|`Number (int)`|+++",
                "-Sets the port.",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reconnectAttempts]]`@reconnectAttempts`|`Number (int)`|+++",
                "-Sets the value of reconnect attempts.",
                "-+++",
                "-|[[reconnectInterval]]`@reconnectInterval`|`Number (long)`|+++",
                "-Set the reconnect interval.",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "-Set whether SO_linger keep alive is enabled",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "-Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "-Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "-Set whether TCP keep alive is enabled",
                "-+++",
                "-|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "-Set whether TCP no delay is enabled",
                "-+++",
                "-|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "-Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "-Set whether all server certificates should be trusted.",
                "-+++",
                "-|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the trust options in jks format, aka Java truststore",
                "-+++",
                "-|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "-Set the ALPN usage.",
                "-+++",
                "-|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "-Set whether Netty pooled buffers are enabled",
                "-+++",
                "-|===",
                "-",
                "-[[GoAway]]",
                "-== GoAway",
                "-",
                "-++++",
                "- A  frame.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[debugData]]`@debugData`|`Buffer`|+++",
                "-Set the additional debug data",
                "-+++",
                "-|[[errorCode]]`@errorCode`|`Number (long)`|+++",
                "-",
                "-+++",
                "-|[[lastStreamId]]`@lastStreamId`|`Number (int)`|+++",
                "-Set the last stream id.",
                "-+++",
                "-|===",
                "-",
                "-[[Http2Settings]]",
                "-== Http2Settings",
                "-",
                "-++++",
                "- HTTP2 settings, the settings is initialized with the default HTTP/2 values.<p>",
                "-",
                "- The settings expose the parameters defined by the HTTP/2 specification, as well as extra settings for",
                "- protocol extensions.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[headerTableSize]]`@headerTableSize`|`Number (long)`|+++",
                "-Set  HTTP/2 setting.",
                "-+++",
                "-|[[initialWindowSize]]`@initialWindowSize`|`Number (int)`|+++",
                "-Set the  HTTP/2 setting",
                "-+++",
                "-|[[maxConcurrentStreams]]`@maxConcurrentStreams`|`Number (long)`|+++",
                "-Set the  HTTP/2 setting",
                "-+++",
                "-|[[maxFrameSize]]`@maxFrameSize`|`Number (int)`|+++",
                "-Set the  HTTP/2 setting",
                "-+++",
                "-|[[maxHeaderListSize]]`@maxHeaderListSize`|`Number (long)`|+++",
                "-Set the  HTTP/2 setting",
                "-+++",
                "-|[[pushEnabled]]`@pushEnabled`|`Boolean`|+++",
                "-Set the  HTTP/2 setting",
                "-+++",
                "-|===",
                "-",
                "-[[HttpClientOptions]]",
                "-== HttpClientOptions",
                "-",
                "-++++",
                "- Options describing how an link will make connections.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[alpnVersions]]`@alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|+++",
                "-Set the list of protocol versions to provide to the server during the Application-Layer Protocol Negotiation.",
                "- When the list is empty, the client provides a best effort list according to link:",
                "-",
                "- <ul>",
                "-   <li>: [ \"h2\", \"http/1.1\" ]</li>",
                "-   <li>otherwise: [link]</li>",
                "- </ul>",
                "-+++",
                "-|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "-Set the connect timeout",
                "-+++",
                "-|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "-Add a CRL path",
                "-+++",
                "-|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "-Add a CRL value",
                "-+++",
                "-|[[decoderInitialBufferSize]]`@decoderInitialBufferSize`|`Number (int)`|+++",
                "-set to <code>initialBufferSizeHttpDecoder</code> the initial buffer of the HttpDecoder.",
                "-+++",
                "-|[[defaultHost]]`@defaultHost`|`String`|+++",
                "-Set the default host name to be used by this client in requests if none is provided when making the request.",
                "-+++",
                "-|[[defaultPort]]`@defaultPort`|`Number (int)`|+++",
                "-Set the default port to be used by this client in requests if none is provided when making the request.",
                "-+++",
                "-|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "-Add an enabled cipher suite, appended to the ordered suites.",
                "-+++",
                "-|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "-Sets the list of enabled SSL/TLS protocols.",
                "-+++",
                "-|[[forceSni]]`@forceSni`|`Boolean`|+++",
                "-By default, the server name is only sent for Fully Qualified Domain Name (FQDN), setting",
                "- this property to <code>true</code> forces the server name to be always sent.",
                "-+++",
                "-|[[http2ClearTextUpgrade]]`@http2ClearTextUpgrade`|`Boolean`|+++",
                "-Set to <code>true</code> when an <i>h2c</i> connection is established using an HTTP/1.1 upgrade request, and <code>false</code>",
                "- when an <i>h2c</i> connection is established directly (with prior knowledge).",
                "-+++",
                "-|[[http2ConnectionWindowSize]]`@http2ConnectionWindowSize`|`Number (int)`|+++",
                "-Set the default HTTP/2 connection window size. It overrides the initial window",
                "- size set by link, so the connection window size",
                "- is greater than for its streams, in order the data throughput.",
                "- <p/>",
                "- A value of <code>-1</code> reuses the initial window size setting.",
                "-+++",
                "-|[[http2KeepAliveTimeout]]`@http2KeepAliveTimeout`|`Number (int)`|+++",
                "-Set the keep alive timeout for HTTP/2 connections, in seconds.",
                "- <p/>",
                "- This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "-+++",
                "-|[[http2MaxPoolSize]]`@http2MaxPoolSize`|`Number (int)`|+++",
                "-Set the maximum pool size for HTTP/2 connections",
                "-+++",
                "-|[[http2MultiplexingLimit]]`@http2MultiplexingLimit`|`Number (int)`|+++",
                "-Set a client limit of the number concurrent streams for each HTTP/2 connection, this limits the number",
                "- of streams the client can create for a connection. The effective number of streams for a",
                "- connection is the min of this value and the server's initial settings.",
                "- <p/>",
                "- Setting the value to <code>-1</code> means to use the value sent by the server's initial settings.",
                "- <code>-1</code> is the default value.",
                "-+++",
                "-|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "-Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "- This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "-",
                "- If you want change default time unit, use link",
                "-+++",
                "-|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the idle timeout unit. If not specified, default is seconds.",
                "-+++",
                "-|[[initialSettings]]`@initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|+++",
                "-Set the HTTP/2 connection settings immediately sent by to the server when the client connects.",
                "-+++",
                "-|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keepAlive]]`@keepAlive`|`Boolean`|+++",
                "-Set whether keep alive is enabled on the client",
                "-+++",
                "-|[[keepAliveTimeout]]`@keepAliveTimeout`|`Number (int)`|+++",
                "-Set the keep alive timeout for HTTP/1.x, in seconds.",
                "- <p/>",
                "- This value determines how long a connection remains unused in the pool before being evicted and closed.",
                "-+++",
                "-|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the key/cert options in jks format, aka Java keystore.",
                "-+++",
                "-|[[localAddress]]`@localAddress`|`String`|+++",
                "-Set the local interface to bind for network connections. When the local address is null,",
                "- it will pick any local address, the default local address is null.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[maxChunkSize]]`@maxChunkSize`|`Number (int)`|+++",
                "-Set the maximum HTTP chunk size",
                "-+++",
                "-|[[maxHeaderSize]]`@maxHeaderSize`|`Number (int)`|+++",
                "-Set the maximum length of all headers for HTTP/1.x .",
                "-+++",
                "-|[[maxInitialLineLength]]`@maxInitialLineLength`|`Number (int)`|+++",
                "-Set the maximum length of the initial line for HTTP/1.x (e.g. <code>\"HTTP/1.1 200 OK\"</code>)",
                "-+++",
                "-|[[maxPoolSize]]`@maxPoolSize`|`Number (int)`|+++",
                "-Set the maximum pool size for connections",
                "-+++",
                "-|[[maxRedirects]]`@maxRedirects`|`Number (int)`|+++",
                "-Set to <code>maxRedirects</code> the maximum number of redirection a request can follow.",
                "-+++",
                "-|[[maxWaitQueueSize]]`@maxWaitQueueSize`|`Number (int)`|+++",
                "-Set the maximum requests allowed in the wait queue, any requests beyond the max size will result in",
                "- a ConnectionPoolTooBusyException.  If the value is set to a negative number then the queue will be unbounded.",
                "-+++",
                "-|[[maxWebsocketFrameSize]]`@maxWebsocketFrameSize`|`Number (int)`|+++",
                "-Set the max websocket frame size",
                "-+++",
                "-|[[maxWebsocketMessageSize]]`@maxWebsocketMessageSize`|`Number (int)`|+++",
                "-Set the max websocket message size",
                "-+++",
                "-|[[metricsName]]`@metricsName`|`String`|+++",
                "-Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "- with the same name.",
                "-+++",
                "-|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "-Set the key/cert store options in pem format.",
                "-+++",
                "-|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "-Set the trust options in pem format",
                "-+++",
                "-|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the key/cert options in pfx format.",
                "-+++",
                "-|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the trust options in pfx format",
                "-+++",
                "-|[[pipelining]]`@pipelining`|`Boolean`|+++",
                "-Set whether pipe-lining is enabled on the client",
                "-+++",
                "-|[[pipeliningLimit]]`@pipeliningLimit`|`Number (int)`|+++",
                "-Set the limit of pending requests a pipe-lined HTTP/1 connection can send.",
                "-+++",
                "-|[[poolCleanerPeriod]]`@poolCleanerPeriod`|`Number (int)`|+++",
                "-Set the connection pool cleaner period in milli seconds, a non positive value disables expiration checks and connections",
                "- will remain in the pool until they are closed.",
                "-+++",
                "-|[[protocolVersion]]`@protocolVersion`|`link:enums.html#HttpVersion[HttpVersion]`|+++",
                "-Set the protocol version.",
                "-+++",
                "-|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                "-Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[sendUnmaskedFrames]]`@sendUnmaskedFrames`|`Boolean`|+++",
                "-Set true when the client wants to skip frame masking.",
                "- You may want to set it true on server by server websocket communication: In this case you are by passing RFC6455 protocol.",
                "- It's false as default.",
                "-+++",
                "-|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "-Set whether SO_linger keep alive is enabled",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "-Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "-Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "-Set whether TCP keep alive is enabled",
                "-+++",
                "-|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "-Set whether TCP no delay is enabled",
                "-+++",
                "-|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "-Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "-Set whether all server certificates should be trusted",
                "-+++",
                "-|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the trust options in jks format, aka Java truststore",
                "-+++",
                "-|[[tryUseCompression]]`@tryUseCompression`|`Boolean`|+++",
                "-Set whether compression is enabled",
                "-+++",
                "-|[[tryUsePerFrameWebsocketCompression]]`@tryUsePerFrameWebsocketCompression`|`Boolean`|+++",
                "-Set option to offer Deflate Frame websocket compression",
                "-+++",
                "-|[[tryUsePerMessageWebsocketCompression]]`@tryUsePerMessageWebsocketCompression`|`Boolean`|+++",
                "-Set option to offer Permessage Deflate websocket compression",
                "-+++",
                "-|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "-Set the ALPN usage.",
                "-+++",
                "-|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "-Set whether Netty pooled buffers are enabled",
                "-+++",
                "-|[[verifyHost]]`@verifyHost`|`Boolean`|+++",
                "-Set whether hostname verification is enabled",
                "-+++",
                "-|[[websocketCompressionAllowClientNoContext]]`@websocketCompressionAllowClientNoContext`|`Boolean`|+++",
                "-Set the websocket compression allow client no context option",
                "-+++",
                "-|[[websocketCompressionLevel]]`@websocketCompressionLevel`|`Number (int)`|+++",
                "-Set websocket compression level",
                "-+++",
                "-|[[websocketCompressionRequestServerNoContext]]`@websocketCompressionRequestServerNoContext`|`Boolean`|+++",
                "-Set the websocket compression server no context option",
                "-+++",
                "-|===",
                "-",
                "-[[HttpServerOptions]]",
                "-== HttpServerOptions",
                "-",
                "-++++",
                "- Represents options used by an link instance",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                "-Set the accept back log",
                "-+++",
                "-|[[acceptUnmaskedFrames]]`@acceptUnmaskedFrames`|`Boolean`|+++",
                "-Set true when the server accepts unmasked frame.",
                "- As default Server doesn't accept unmasked frame, you can bypass this behaviour (RFC 6455) setting true",
                "- It's set to false as default.",
                "-+++",
                "-|[[alpnVersions]]`@alpnVersions`|`Array of link:enums.html#HttpVersion[HttpVersion]`|+++",
                "-Set the list of protocol versions to provide to the server during the Application-Layer Protocol Negotiatiation.",
                "-+++",
                "-|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                "-Set whether client auth is required",
                "-+++",
                "-|[[clientAuthRequired]]`@clientAuthRequired`|`Boolean`|+++",
                "-Set whether client auth is required",
                "-+++",
                "-|[[compressionLevel]]`@compressionLevel`|`Number (int)`|+++",
                "-This method allows to set the compression level to be used in http1.x/2 response bodies",
                "- when compression support is turned on (@see setCompressionSupported) and the client advertises",
                "- to support <code>deflate/gzip</code> compression in the <code>Accept-Encoding</code> header",
                "-",
                "- default value is : 6 (Netty legacy)",
                "-",
                "- The compression level determines how much the data is compressed on a scale from 1 to 9,",
                "- where '9' is trying to achieve the maximum compression ratio while '1' instead is giving",
                "- priority to speed instead of compression ratio using some algorithm optimizations and skipping",
                "- pedantic loops that usually gives just little improvements",
                "-",
                "- While one can think that best value is always the maximum compression ratio,",
                "- there's a trade-off to consider: the most compressed level requires the most",
                "- computational work to compress/decompress data, e.g. more dictionary lookups and loops.",
                "-",
                "- E.g. you have it set fairly high on a high-volume website, you may experience performance degradation",
                "- and latency on resource serving due to CPU overload, and, however - as the computational work is required also client side",
                "- while decompressing - setting an higher compression level can result in an overall higher page load time",
                "- especially nowadays when many clients are handled mobile devices with a low CPU profile.",
                "-",
                "- see also: http://www.gzip.org/algorithm.txt",
                "-+++",
                "-|[[compressionSupported]]`@compressionSupported`|`Boolean`|+++",
                "-Set whether the server should support gzip/deflate compression",
                "- (serving compressed responses to clients advertising support for them with Accept-Encoding header)",
                "-+++",
                "-|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "-Add a CRL path",
                "-+++",
                "-|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "-Add a CRL value",
                "-+++",
                "-|[[decoderInitialBufferSize]]`@decoderInitialBufferSize`|`Number (int)`|+++",
                "-Set the initial buffer size for the HTTP decoder",
                "-+++",
                "-|[[decompressionSupported]]`@decompressionSupported`|`Boolean`|+++",
                "-Set whether the server supports decompression",
                "-+++",
                "-|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "-Add an enabled cipher suite, appended to the ordered suites.",
                "-+++",
                "-|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "-Sets the list of enabled SSL/TLS protocols.",
                "-+++",
                "-|[[handle100ContinueAutomatically]]`@handle100ContinueAutomatically`|`Boolean`|+++",
                "-Set whether 100 Continue should be handled automatically",
                "-+++",
                "-|[[host]]`@host`|`String`|+++",
                "-Set the host",
                "-+++",
                "-|[[http2ConnectionWindowSize]]`@http2ConnectionWindowSize`|`Number (int)`|+++",
                "-Set the default HTTP/2 connection window size. It overrides the initial window",
                "- size set by link, so the connection window size",
                "- is greater than for its streams, in order the data throughput.",
                "- <p/>",
                "- A value of <code>-1</code> reuses the initial window size setting.",
                "-+++",
                "-|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "-Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "- This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "-",
                "- If you want change default time unit, use link",
                "-+++",
                "-|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the idle timeout unit. If not specified, default is seconds.",
                "-+++",
                "-|[[initialSettings]]`@initialSettings`|`link:dataobjects.html#Http2Settings[Http2Settings]`|+++",
                "-Set the HTTP/2 connection settings immediatly sent by the server when a client connects.",
                "-+++",
                "-|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the key/cert options in jks format, aka Java keystore.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[maxChunkSize]]`@maxChunkSize`|`Number (int)`|+++",
                "-Set the maximum HTTP chunk size that link will receive",
                "-+++",
                "-|[[maxHeaderSize]]`@maxHeaderSize`|`Number (int)`|+++",
                "-Set the maximum length of all headers for HTTP/1.x .",
                "-+++",
                "-|[[maxInitialLineLength]]`@maxInitialLineLength`|`Number (int)`|+++",
                "-Set the maximum length of the initial line for HTTP/1.x (e.g. <code>\"GET / HTTP/1.0\"</code>)",
                "-+++",
                "-|[[maxWebsocketFrameSize]]`@maxWebsocketFrameSize`|`Number (int)`|+++",
                "-Set the maximum websocket frames size",
                "-+++",
                "-|[[maxWebsocketMessageSize]]`@maxWebsocketMessageSize`|`Number (int)`|+++",
                "-Set the maximum websocket message size",
                "-+++",
                "-|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "-Set the key/cert store options in pem format.",
                "-+++",
                "-|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "-Set the trust options in pem format",
                "-+++",
                "-|[[perFrameWebsocketCompressionSupported]]`@perFrameWebsocketCompressionSupported`|`Boolean`|+++",
                "-Enable or disable support for WebSocket Defalte Frame compression",
                "-+++",
                "-|[[perMessageWebsocketCompressionSupported]]`@perMessageWebsocketCompressionSupported`|`Boolean`|+++",
                "-Enable or disable support for WebSocket Permessage Deflate compression",
                "-+++",
                "-|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the key/cert options in pfx format.",
                "-+++",
                "-|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the trust options in pfx format",
                "-+++",
                "-|[[port]]`@port`|`Number (int)`|+++",
                "-Set the port",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[sni]]`@sni`|`Boolean`|+++",
                "-Set whether the server supports Server Name Indiciation",
                "-+++",
                "-|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "-Set whether SO_linger keep alive is enabled",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "-Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "-Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "-Set whether TCP keep alive is enabled",
                "-+++",
                "-|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "-Set whether TCP no delay is enabled",
                "-+++",
                "-|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "-Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the trust options in jks format, aka Java truststore",
                "-+++",
                "-|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "-Set the ALPN usage.",
                "-+++",
                "-|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "-Set whether Netty pooled buffers are enabled",
                "-+++",
                "-|[[websocketAllowServerNoContext]]`@websocketAllowServerNoContext`|`Boolean`|+++",
                "-Set the WebSocket Allow Server No Context option",
                "-+++",
                "-|[[websocketCompressionLevel]]`@websocketCompressionLevel`|`Number (int)`|+++",
                "-Set the WebSocket compression level",
                "-+++",
                "-|[[websocketPreferredClientNoContext]]`@websocketPreferredClientNoContext`|`Boolean`|+++",
                "-Set the WebSocket Preferred Client No Context setting",
                "-+++",
                "-|[[websocketSubProtocols]]`@websocketSubProtocols`|`String`|+++",
                "-Set the websocket subprotocols supported by the server.",
                "-+++",
                "-|===",
                "-",
                "-[[JdkSSLEngineOptions]]",
                "-== JdkSSLEngineOptions",
                "-",
                "-++++",
                "- Configures a link to use the JDK ssl engine implementation.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|===",
                "-",
                "-[[JksOptions]]",
                "-== JksOptions",
                "-",
                "-++++",
                "- Key or trust store options configuring private key and/or certificates based on Java Keystore files.",
                "- <p>",
                "- When used as a key store, it should point to a store containing a private key and its certificate.",
                "- When used as a trust store, it should point to a store containing a list of trusted certificates.",
                "- <p>",
                "- The store can either be loaded by Vert.x from the filesystem:",
                "- <p>",
                "- <pre>",
                "- HttpServerOptions options = HttpServerOptions.httpServerOptions();",
                "- options.setKeyStore(new JKSOptions().setPath(\"/mykeystore.jks\").setPassword(\"foo\"));",
                "- </pre>",
                "-",
                "- Or directly provided as a buffer:",
                "- <p>",
                "-",
                "- <pre>",
                "- Buffer store = vertx.fileSystem().readFileSync(\"/mykeystore.jks\");",
                "- options.setKeyStore(new JKSOptions().setValue(store).setPassword(\"foo\"));",
                "- </pre>",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[password]]`@password`|`String`|+++",
                "-Set the password for the key store",
                "-+++",
                "-|[[path]]`@path`|`String`|+++",
                "-Set the path to the key store",
                "-+++",
                "-|[[value]]`@value`|`Buffer`|+++",
                "-Set the key store as a buffer",
                "-+++",
                "-|===",
                "-",
                "-[[MetricsOptions]]",
                "-== MetricsOptions",
                "-",
                "-++++",
                "- Vert.x metrics base configuration, this class can be extended by provider implementations to configure",
                "- those specific implementations.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[enabled]]`@enabled`|`Boolean`|+++",
                "-Set whether metrics will be enabled on the Vert.x instance.",
                "-+++",
                "-|===",
                "-",
                "-[[NetClientOptions]]",
                "-== NetClientOptions",
                "-",
                "-++++",
                "- Options for configuring a link.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[connectTimeout]]`@connectTimeout`|`Number (int)`|+++",
                "-Set the connect timeout",
                "-+++",
                "-|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "-Add a CRL path",
                "-+++",
                "-|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "-Add a CRL value",
                "-+++",
                "-|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "-Add an enabled cipher suite, appended to the ordered suites.",
                "-+++",
                "-|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "-Sets the list of enabled SSL/TLS protocols.",
                "-+++",
                "-|[[hostnameVerificationAlgorithm]]`@hostnameVerificationAlgorithm`|`String`|+++",
                "-Set the hostname verification algorithm interval",
                "- To disable hostname verification, set hostnameVerificationAlgorithm to an empty String",
                "-+++",
                "-|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "-Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "- This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "-",
                "- If you want change default time unit, use link",
                "-+++",
                "-|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the idle timeout unit. If not specified, default is seconds.",
                "-+++",
                "-|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the key/cert options in jks format, aka Java keystore.",
                "-+++",
                "-|[[localAddress]]`@localAddress`|`String`|+++",
                "-Set the local interface to bind for network connections. When the local address is null,",
                "- it will pick any local address, the default local address is null.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[metricsName]]`@metricsName`|`String`|+++",
                "-Set the metrics name identifying the reported metrics, useful for grouping metrics",
                "- with the same name.",
                "-+++",
                "-|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "-Set the key/cert store options in pem format.",
                "-+++",
                "-|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "-Set the trust options in pem format",
                "-+++",
                "-|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the key/cert options in pfx format.",
                "-+++",
                "-|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the trust options in pfx format",
                "-+++",
                "-|[[proxyOptions]]`@proxyOptions`|`link:dataobjects.html#ProxyOptions[ProxyOptions]`|+++",
                "-Set proxy options for connections via CONNECT proxy (e.g. Squid) or a SOCKS proxy.",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reconnectAttempts]]`@reconnectAttempts`|`Number (int)`|+++",
                "-Set the value of reconnect attempts",
                "-+++",
                "-|[[reconnectInterval]]`@reconnectInterval`|`Number (long)`|+++",
                "-Set the reconnect interval",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "-Set whether SO_linger keep alive is enabled",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "-Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "-Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "-Set whether TCP keep alive is enabled",
                "-+++",
                "-|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "-Set whether TCP no delay is enabled",
                "-+++",
                "-|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "-Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|[[trustAll]]`@trustAll`|`Boolean`|+++",
                "-Set whether all server certificates should be trusted",
                "-+++",
                "-|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the trust options in jks format, aka Java truststore",
                "-+++",
                "-|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "-Set the ALPN usage.",
                "-+++",
                "-|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "-Set whether Netty pooled buffers are enabled",
                "-+++",
                "-|===",
                "-",
                "-[[NetServerOptions]]",
                "-== NetServerOptions",
                "-",
                "-++++",
                "- Options for configuring a link.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[acceptBacklog]]`@acceptBacklog`|`Number (int)`|+++",
                "-Set the accept back log",
                "-+++",
                "-|[[clientAuth]]`@clientAuth`|`link:enums.html#ClientAuth[ClientAuth]`|+++",
                "-Set whether client auth is required",
                "-+++",
                "-|[[clientAuthRequired]]`@clientAuthRequired`|`Boolean`|+++",
                "-Set whether client auth is required",
                "-+++",
                "-|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "-Add a CRL path",
                "-+++",
                "-|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "-Add a CRL value",
                "-+++",
                "-|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "-Add an enabled cipher suite, appended to the ordered suites.",
                "-+++",
                "-|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "-Sets the list of enabled SSL/TLS protocols.",
                "-+++",
                "-|[[host]]`@host`|`String`|+++",
                "-Set the host",
                "-+++",
                "-|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "-Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "- This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "-",
                "- If you want change default time unit, use link",
                "-+++",
                "-|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the idle timeout unit. If not specified, default is seconds.",
                "-+++",
                "-|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the key/cert options in jks format, aka Java keystore.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "-Set the key/cert store options in pem format.",
                "-+++",
                "-|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "-Set the trust options in pem format",
                "-+++",
                "-|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the key/cert options in pfx format.",
                "-+++",
                "-|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the trust options in pfx format",
                "-+++",
                "-|[[port]]`@port`|`Number (int)`|+++",
                "-Set the port",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[sni]]`@sni`|`Boolean`|+++",
                "-Set whether the server supports Server Name Indiciation",
                "-+++",
                "-|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "-Set whether SO_linger keep alive is enabled",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "-Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "-Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "-Set whether TCP keep alive is enabled",
                "-+++",
                "-|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "-Set whether TCP no delay is enabled",
                "-+++",
                "-|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "-Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the trust options in jks format, aka Java truststore",
                "-+++",
                "-|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "-Set the ALPN usage.",
                "-+++",
                "-|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "-Set whether Netty pooled buffers are enabled",
                "-+++",
                "-|===",
                "-",
                "-[[NetworkOptions]]",
                "-== NetworkOptions",
                "-",
                "-++++",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|===",
                "-",
                "-[[OpenOptions]]",
                "-== OpenOptions",
                "-",
                "-++++",
                "- Describes how an link should be opened.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[append]]`@append`|`Boolean`|+++",
                "-Whether the file should be opened in append mode. Defaults to <code>false</code>.",
                "-+++",
                "-|[[create]]`@create`|`Boolean`|+++",
                "-Set whether the file should be created if it does not already exist.",
                "-+++",
                "-|[[createNew]]`@createNew`|`Boolean`|+++",
                "-Set whether the file should be created and fail if it does exist already.",
                "-+++",
                "-|[[deleteOnClose]]`@deleteOnClose`|`Boolean`|+++",
                "-Set whether the file should be deleted when it's closed, or the JVM is shutdown.",
                "-+++",
                "-|[[dsync]]`@dsync`|`Boolean`|+++",
                "-Set whether every write to the file's content  ill be written synchronously to the underlying hardware.",
                "-+++",
                "-|[[perms]]`@perms`|`String`|+++",
                "-Set the permissions string",
                "-+++",
                "-|[[read]]`@read`|`Boolean`|+++",
                "-Set whether the file is to be opened for reading",
                "-+++",
                "-|[[sparse]]`@sparse`|`Boolean`|+++",
                "-Set whether a hint should be provided that the file to created is sparse",
                "-+++",
                "-|[[sync]]`@sync`|`Boolean`|+++",
                "-Set whether every write to the file's content and meta-data will be written synchronously to the underlying hardware.",
                "-+++",
                "-|[[truncateExisting]]`@truncateExisting`|`Boolean`|+++",
                "-Set whether the file should be truncated to zero length on opening if it exists and is opened for write",
                "-+++",
                "-|[[write]]`@write`|`Boolean`|+++",
                "-Set whether the file is to be opened for writing",
                "-+++",
                "-|===",
                "-",
                "-[[OpenSSLEngineOptions]]",
                "-== OpenSSLEngineOptions",
                "-",
                "-++++",
                "- Configures a link to use OpenSsl.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[sessionCacheEnabled]]`@sessionCacheEnabled`|`Boolean`|+++",
                "-Set whether session cache is enabled in open SSL session server context",
                "-+++",
                "-|===",
                "-",
                "-[[Option]]",
                "-== Option",
                "-",
                "-++++",
                "- Models command line options. Options are values passed to a command line interface using -x or --x. Supported",
                "- syntaxes depend on the parser.",
                "- <p/>",
                "- Short name is generally used with a single dash, while long name requires a double-dash.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[argName]]`@argName`|`String`|+++",
                "-Sets te arg name for this option.",
                "-+++",
                "-|[[choices]]`@choices`|`Array of String`|+++",
                "-Sets the list of values accepted by this option. If the value set by the user does not match once of these",
                "- values, a link exception is thrown.",
                "-+++",
                "-|[[defaultValue]]`@defaultValue`|`String`|+++",
                "-Sets the default value of this option",
                "-+++",
                "-|[[description]]`@description`|`String`|+++",
                "-Sets te description of this option.",
                "-+++",
                "-|[[flag]]`@flag`|`Boolean`|+++",
                "-Configures the current link to be a flag. It will be evaluated to <code>true</code> if it's found in",
                "- the command line. If you need a flag that may receive a value, use, in this order:",
                "- <code><pre>",
                "-   option.setFlag(true).setSingleValued(true)",
                "- </pre></code>",
                "-+++",
                "-|[[help]]`@help`|`Boolean`|+++",
                "-Sets whether or not this option is a \"help\" option",
                "-+++",
                "-|[[hidden]]`@hidden`|`Boolean`|+++",
                "-Sets whether or not this option should be hidden",
                "-+++",
                "-|[[longName]]`@longName`|`String`|+++",
                "-Sets the long name of this option.",
                "-+++",
                "-|[[multiValued]]`@multiValued`|`Boolean`|+++",
                "-Sets whether or not this option can receive several values.",
                "-+++",
                "-|[[name]]`@name`|`String`|+++",
                "-",
                "-+++",
                "-|[[required]]`@required`|`Boolean`|+++",
                "-Sets whether or not this option is mandatory.",
                "-+++",
                "-|[[shortName]]`@shortName`|`String`|+++",
                "-Sets the short name of this option.",
                "-+++",
                "-|[[singleValued]]`@singleValued`|`Boolean`|+++",
                "-Sets whether or not this option can receive a value.",
                "-+++",
                "-|===",
                "-",
                "-[[PemKeyCertOptions]]",
                "-== PemKeyCertOptions",
                "-",
                "-++++",
                "- Key store options configuring a list of private key and its certificate based on",
                "- <i>Privacy-enhanced Electronic Email</i> (PEM) files.",
                "- <p>",
                "-",
                "- A key file must contain a <b>non encrypted</b> private key in <b>PKCS8</b> format wrapped in a PEM",
                "- block, for example:",
                "- <p>",
                "-",
                "- <pre>",
                "- -----BEGIN PRIVATE KEY-----",
                "- MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDV6zPk5WqLwS0a",
                "- ...",
                "- K5xBhtm1AhdnZjx5KfW3BecE",
                "- -----END PRIVATE KEY-----",
                "- </pre><p>",
                "-",
                "- Or contain a <b>non encrypted</b> private key in <b>PKCS1</b> format wrapped in a PEM",
                "- block, for example:",
                "- <p>",
                "-",
                "- <pre>",
                "- -----BEGIN RSA PRIVATE KEY-----",
                "- MIIEowIBAAKCAQEAlO4gbHeFb/fmbUF/tOJfNPJumJUEqgzAzx8MBXv9Acyw9IRa",
                "- ...",
                "- zJ14Yd+t2fsLYVs2H0gxaA4DW6neCzgY3eKpSU0EBHUCFSXp/1+/",
                "- -----END RSA PRIVATE KEY-----",
                "- </pre><p>",
                "-",
                "- A certificate file must contain an X.509 certificate wrapped in a PEM block, for example:",
                "- <p>",
                "-",
                "- <pre>",
                "- -----BEGIN CERTIFICATE-----",
                "- MIIDezCCAmOgAwIBAgIEZOI/3TANBgkqhkiG9w0BAQsFADBuMRAwDgYDVQQGEwdV",
                "- ...",
                "- +tmLSvYS39O2nqIzzAUfztkYnUlZmB0l/mKkVqbGJA==",
                "- -----END CERTIFICATE-----",
                "- </pre>",
                "-",
                "- Keys and certificates can either be loaded by Vert.x from the filesystem:",
                "- <p>",
                "- <pre>",
                "- HttpServerOptions options = new HttpServerOptions();",
                "- options.setPemKeyCertOptions(new PemKeyCertOptions().setKeyPath(\"/mykey.pem\").setCertPath(\"/mycert.pem\"));",
                "- </pre>",
                "-",
                "- Or directly provided as a buffer:<p>",
                "-",
                "- <pre>",
                "- Buffer key = vertx.fileSystem().readFileSync(\"/mykey.pem\");",
                "- Buffer cert = vertx.fileSystem().readFileSync(\"/mycert.pem\");",
                "- options.setPemKeyCertOptions(new PemKeyCertOptions().setKeyValue(key).setCertValue(cert));",
                "- </pre>",
                "-",
                "- Several key/certificate pairs can be used:",
                "- <p>",
                "- <pre>",
                "- HttpServerOptions options = new HttpServerOptions();",
                "- options.setPemKeyCertOptions(new PemKeyCertOptions()",
                "-    .addKeyPath(\"/mykey1.pem\").addCertPath(\"/mycert1.pem\")",
                "-    .addKeyPath(\"/mykey2.pem\").addCertPath(\"/mycert2.pem\"));",
                "- </pre>",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[certPath]]`@certPath`|`String`|+++",
                "-Set the path of the first certificate, replacing the previous certificates paths",
                "-+++",
                "-|[[certPaths]]`@certPaths`|`Array of String`|+++",
                "-Set all the paths to the certificates files",
                "-+++",
                "-|[[certValue]]`@certValue`|`Buffer`|+++",
                "-Set the first certificate as a buffer, replacing the previous certificates buffers",
                "-+++",
                "-|[[certValues]]`@certValues`|`Array of Buffer`|+++",
                "-Set all the certificates as a list of buffer",
                "-+++",
                "-|[[keyPath]]`@keyPath`|`String`|+++",
                "-Set the path of the first key file, replacing the keys paths",
                "-+++",
                "-|[[keyPaths]]`@keyPaths`|`Array of String`|+++",
                "-Set all the paths to the keys files",
                "-+++",
                "-|[[keyValue]]`@keyValue`|`Buffer`|+++",
                "-Set the first key a a buffer, replacing the previous keys buffers",
                "-+++",
                "-|[[keyValues]]`@keyValues`|`Array of Buffer`|+++",
                "-Set all the keys as a list of buffer",
                "-+++",
                "-|===",
                "-",
                "-[[PemTrustOptions]]",
                "-== PemTrustOptions",
                "-",
                "-++++",
                "- Certificate Authority options configuring certificates based on",
                "- <i>Privacy-enhanced Electronic Email</i> (PEM) files. The options is configured with a list of",
                "- validating certificates.",
                "- <p>",
                "- Validating certificates must contain X.509 certificates wrapped in a PEM block:<p>",
                "-",
                "- <pre>",
                "- -----BEGIN CERTIFICATE-----",
                "- MIIDezCCAmOgAwIBAgIEVmLkwTANBgkqhkiG9w0BAQsFADBuMRAwDgYDVQQGEwdV",
                "- ...",
                "- z5+DuODBJUQst141Jmgq8bS543IU/5apcKQeGNxEyQ==",
                "- -----END CERTIFICATE-----",
                "- </pre>",
                "-",
                "- The certificates can either be loaded by Vert.x from the filesystem:",
                "- <p>",
                "- <pre>",
                "- HttpServerOptions options = new HttpServerOptions();",
                "- options.setPemTrustOptions(new PemTrustOptions().addCertPath(\"/cert.pem\"));",
                "- </pre>",
                "-",
                "- Or directly provided as a buffer:",
                "- <p>",
                "-",
                "- <pre>",
                "- Buffer cert = vertx.fileSystem().readFileSync(\"/cert.pem\");",
                "- HttpServerOptions options = new HttpServerOptions();",
                "- options.setPemTrustOptions(new PemTrustOptions().addCertValue(cert));",
                "- </pre>",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[certPaths]]`@certPaths`|`Array of String`|+++",
                "-Add a certificate path",
                "-+++",
                "-|[[certValues]]`@certValues`|`Array of Buffer`|+++",
                "-Add a certificate value",
                "-+++",
                "-|===",
                "-",
                "-[[PfxOptions]]",
                "-== PfxOptions",
                "-",
                "-++++",
                "- Key or trust store options configuring private key and/or certificates based on PKCS#12 files.",
                "- <p>",
                "- When used as a key store, it should point to a store containing a private key and its certificate.",
                "- When used as a trust store, it should point to a store containing a list of accepted certificates.",
                "- <p>",
                "-",
                "- The store can either be loaded by Vert.x from the filesystem:",
                "- <p>",
                "- <pre>",
                "- HttpServerOptions options = new HttpServerOptions();",
                "- options.setPfxKeyCertOptions(new PfxOptions().setPath(\"/mykeystore.p12\").setPassword(\"foo\"));",
                "- </pre>",
                "-",
                "- Or directly provided as a buffer:<p>",
                "-",
                "- <pre>",
                "- Buffer store = vertx.fileSystem().readFileSync(\"/mykeystore.p12\");",
                "- options.setPfxKeyCertOptions(new PfxOptions().setValue(store).setPassword(\"foo\"));",
                "- </pre>",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[password]]`@password`|`String`|+++",
                "-Set the password",
                "-+++",
                "-|[[path]]`@path`|`String`|+++",
                "-Set the path",
                "-+++",
                "-|[[value]]`@value`|`Buffer`|+++",
                "-Set the store as a buffer",
                "-+++",
                "-|===",
                "-",
                "-[[ProxyOptions]]",
                "-== ProxyOptions",
                "-",
                "-++++",
                "- Proxy options for a net client or a net client.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[host]]`@host`|`String`|+++",
                "-Set proxy host.",
                "-+++",
                "-|[[password]]`@password`|`String`|+++",
                "-Set proxy password.",
                "-+++",
                "-|[[port]]`@port`|`Number (int)`|+++",
                "-Set proxy port.",
                "-+++",
                "-|[[type]]`@type`|`link:enums.html#ProxyType[ProxyType]`|+++",
                "-Set proxy type.",
                "-",
                "- <p>ProxyType can be HTTP, SOCKS4 and SOCKS5",
                "-+++",
                "-|[[username]]`@username`|`String`|+++",
                "-Set proxy username.",
                "-+++",
                "-|===",
                "-",
                "-[[RequestOptions]]",
                "-== RequestOptions",
                "-",
                "-++++",
                "- Options describing how an link will make connect to make a request.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[host]]`@host`|`String`|+++",
                "-Set the host name to be used by the client request.",
                "-+++",
                "-|[[port]]`@port`|`Number (int)`|+++",
                "-Set the port to be used by the client request.",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[uri]]`@uri`|`String`|+++",
                "-Set the request relative URI",
                "-+++",
                "-|===",
                "-",
                "-[[TCPSSLOptions]]",
                "-== TCPSSLOptions",
                "-",
                "-++++",
                "- Base class. TCP and SSL related options",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[crlPaths]]`@crlPaths`|`Array of String`|+++",
                "-Add a CRL path",
                "-+++",
                "-|[[crlValues]]`@crlValues`|`Array of Buffer`|+++",
                "-Add a CRL value",
                "-+++",
                "-|[[enabledCipherSuites]]`@enabledCipherSuites`|`Array of String`|+++",
                "-Add an enabled cipher suite, appended to the ordered suites.",
                "-+++",
                "-|[[enabledSecureTransportProtocols]]`@enabledSecureTransportProtocols`|`Array of String`|+++",
                "-Sets the list of enabled SSL/TLS protocols.",
                "-+++",
                "-|[[idleTimeout]]`@idleTimeout`|`Number (int)`|+++",
                "-Set the idle timeout, default time unit is seconds. Zero means don't timeout.",
                "- This determines if a connection will timeout and be closed if no data is received within the timeout.",
                "-",
                "- If you want change default time unit, use link",
                "-+++",
                "-|[[idleTimeoutUnit]]`@idleTimeoutUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the idle timeout unit. If not specified, default is seconds.",
                "-+++",
                "-|[[jdkSslEngineOptions]]`@jdkSslEngineOptions`|`link:dataobjects.html#JdkSSLEngineOptions[JdkSSLEngineOptions]`|-",
                "-|[[keyStoreOptions]]`@keyStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the key/cert options in jks format, aka Java keystore.",
                "-+++",
                "-|[[logActivity]]`@logActivity`|`Boolean`|+++",
                "-Set to true to enabled network activity logging: Netty's pipeline is configured for logging on Netty's logger.",
                "-+++",
                "-|[[openSslEngineOptions]]`@openSslEngineOptions`|`link:dataobjects.html#OpenSSLEngineOptions[OpenSSLEngineOptions]`|-",
                "-|[[pemKeyCertOptions]]`@pemKeyCertOptions`|`link:dataobjects.html#PemKeyCertOptions[PemKeyCertOptions]`|+++",
                "-Set the key/cert store options in pem format.",
                "-+++",
                "-|[[pemTrustOptions]]`@pemTrustOptions`|`link:dataobjects.html#PemTrustOptions[PemTrustOptions]`|+++",
                "-Set the trust options in pem format",
                "-+++",
                "-|[[pfxKeyCertOptions]]`@pfxKeyCertOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the key/cert options in pfx format.",
                "-+++",
                "-|[[pfxTrustOptions]]`@pfxTrustOptions`|`link:dataobjects.html#PfxOptions[PfxOptions]`|+++",
                "-Set the trust options in pfx format",
                "-+++",
                "-|[[receiveBufferSize]]`@receiveBufferSize`|`Number (int)`|+++",
                "-Set the TCP receive buffer size",
                "-+++",
                "-|[[reuseAddress]]`@reuseAddress`|`Boolean`|+++",
                "-Set the value of reuse address",
                "-+++",
                "-|[[reusePort]]`@reusePort`|`Boolean`|+++",
                "-Set the value of reuse port.",
                "- <p/>",
                "- This is only supported by native transports.",
                "-+++",
                "-|[[sendBufferSize]]`@sendBufferSize`|`Number (int)`|+++",
                "-Set the TCP send buffer size",
                "-+++",
                "-|[[soLinger]]`@soLinger`|`Number (int)`|+++",
                "-Set whether SO_linger keep alive is enabled",
                "-+++",
                "-|[[ssl]]`@ssl`|`Boolean`|+++",
                "-Set whether SSL/TLS is enabled",
                "-+++",
                "-|[[tcpCork]]`@tcpCork`|`Boolean`|+++",
                "-Enable the <code>TCP_CORK</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpFastOpen]]`@tcpFastOpen`|`Boolean`|+++",
                "-Enable the <code>TCP_FASTOPEN</code> option - only with linux native transport.",
                "-+++",
                "-|[[tcpKeepAlive]]`@tcpKeepAlive`|`Boolean`|+++",
                "-Set whether TCP keep alive is enabled",
                "-+++",
                "-|[[tcpNoDelay]]`@tcpNoDelay`|`Boolean`|+++",
                "-Set whether TCP no delay is enabled",
                "-+++",
                "-|[[tcpQuickAck]]`@tcpQuickAck`|`Boolean`|+++",
                "-Enable the <code>TCP_QUICKACK</code> option - only with linux native transport.",
                "-+++",
                "-|[[trafficClass]]`@trafficClass`|`Number (int)`|+++",
                "-Set the value of traffic class",
                "-+++",
                "-|[[trustStoreOptions]]`@trustStoreOptions`|`link:dataobjects.html#JksOptions[JksOptions]`|+++",
                "-Set the trust options in jks format, aka Java truststore",
                "-+++",
                "-|[[useAlpn]]`@useAlpn`|`Boolean`|+++",
                "-Set the ALPN usage.",
                "-+++",
                "-|[[usePooledBuffers]]`@usePooledBuffers`|`Boolean`|+++",
                "-Set whether Netty pooled buffers are enabled",
                "-+++",
                "-|===",
                "-",
                "-[[VertxOptions]]",
                "-== VertxOptions",
                "-",
                "-++++",
                "- Instances of this class are used to configure link instances.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Type ^| Description",
                "-|[[addressResolverOptions]]`@addressResolverOptions`|`link:dataobjects.html#AddressResolverOptions[AddressResolverOptions]`|+++",
                "-Sets the address resolver configuration to configure resolving DNS servers, cache TTL, etc...",
                "-+++",
                "-|[[blockedThreadCheckInterval]]`@blockedThreadCheckInterval`|`Number (long)`|+++",
                "-Sets the value of blocked thread check period, in link.",
                "- <p>",
                "- The default value of link is",
                "-+++",
                "-|[[blockedThreadCheckIntervalUnit]]`@blockedThreadCheckIntervalUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the time unit of <code>blockedThreadCheckInterval</code>.",
                "-+++",
                "-|[[clusterHost]]`@clusterHost`|`String`|+++",
                "-Set the hostname to be used for clustering.",
                "-+++",
                "-|[[clusterPingInterval]]`@clusterPingInterval`|`Number (long)`|+++",
                "-Set the value of cluster ping interval, in ms.",
                "-+++",
                "-|[[clusterPingReplyInterval]]`@clusterPingReplyInterval`|`Number (long)`|+++",
                "-Set the value of cluster ping reply interval, in ms.",
                "-+++",
                "-|[[clusterPort]]`@clusterPort`|`Number (int)`|+++",
                "-Set the port to be used for clustering.",
                "-+++",
                "-|[[clusterPublicHost]]`@clusterPublicHost`|`String`|+++",
                "-Set the public facing hostname to be used for clustering.",
                "- Sometimes, e.g. when running on certain clouds, the local address the server listens on for clustering is not the same",
                "- address that other nodes connect to it at, as the OS / cloud infrastructure does some kind of proxying.",
                "- If this is the case you can specify a public hostname which is different from the hostname the server listens at.",
                "- The default value is null which means use the same as the cluster hostname.",
                "-+++",
                "-|[[clusterPublicPort]]`@clusterPublicPort`|`Number (int)`|+++",
                "-See link for an explanation.",
                "-+++",
                "-|[[clustered]]`@clustered`|`Boolean`|+++",
                "-Set whether or not the Vert.x instance will be clustered.",
                "-+++",
                "-|[[eventBusOptions]]`@eventBusOptions`|`link:dataobjects.html#EventBusOptions[EventBusOptions]`|+++",
                "-Sets the event bus configuration to configure the host, port, ssl...",
                "-+++",
                "-|[[eventLoopPoolSize]]`@eventLoopPoolSize`|`Number (int)`|+++",
                "-Set the number of event loop threads to be used by the Vert.x instance.",
                "-+++",
                "-|[[fileResolverCachingEnabled]]`@fileResolverCachingEnabled`|`Boolean`|+++",
                "-Set wether the Vert.x file resolver uses caching for classpath resources.",
                "-+++",
                "-|[[haEnabled]]`@haEnabled`|`Boolean`|+++",
                "-Set whether HA will be enabled on the Vert.x instance.",
                "-+++",
                "-|[[haGroup]]`@haGroup`|`String`|+++",
                "-Set the HA group to be used when HA is enabled.",
                "-+++",
                "-|[[internalBlockingPoolSize]]`@internalBlockingPoolSize`|`Number (int)`|+++",
                "-Set the value of internal blocking pool size",
                "-+++",
                "-|[[maxEventLoopExecuteTime]]`@maxEventLoopExecuteTime`|`Number (long)`|+++",
                "-Sets the value of max event loop execute time, in link.",
                "- <p>",
                "- The default value of linkis",
                "-+++",
                "-|[[maxEventLoopExecuteTimeUnit]]`@maxEventLoopExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the time unit of <code>maxEventLoopExecuteTime</code>.",
                "-+++",
                "-|[[maxWorkerExecuteTime]]`@maxWorkerExecuteTime`|`Number (long)`|+++",
                "-Sets the value of max worker execute time, in link.",
                "- <p>",
                "- The default value of link is",
                "-+++",
                "-|[[maxWorkerExecuteTimeUnit]]`@maxWorkerExecuteTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the time unit of <code>maxWorkerExecuteTime</code>.",
                "-+++",
                "-|[[metricsOptions]]`@metricsOptions`|`link:dataobjects.html#MetricsOptions[MetricsOptions]`|+++",
                "-Set the metrics options",
                "-+++",
                "-|[[preferNativeTransport]]`@preferNativeTransport`|`Boolean`|+++",
                "-Set wether to prefer the native transport to the JDK transport.",
                "-+++",
                "-|[[quorumSize]]`@quorumSize`|`Number (int)`|+++",
                "-Set the quorum size to be used when HA is enabled.",
                "-+++",
                "-|[[warningExceptionTime]]`@warningExceptionTime`|`Number (long)`|+++",
                "-Set the threshold value above this, the blocked warning contains a stack trace. in link.",
                "- The default value of link is",
                "-+++",
                "-|[[warningExceptionTimeUnit]]`@warningExceptionTimeUnit`|`link:enums.html#TimeUnit[TimeUnit]`|+++",
                "-Set the time unit of <code>warningExceptionTime</code>.",
                "-+++",
                "-|[[workerPoolSize]]`@workerPoolSize`|`Number (int)`|+++",
                "-Set the maximum number of worker threads to be used by the Vert.x instance.",
                "-+++",
                "-|===",
                "-",
                "diff --git a/src/main/asciidocs/enums.adoc b/src/main/asciidocs/enums.adoc",
                "deleted file mode 100644",
                "index 15c120110..000000000",
                "--- a/src/main/asciidocs/enums.adoc",
                "+++ /dev/null",
                "@@ -1,223 +0,0 @@",
                "-= Enums",
                "-",
                "-[[ClientAuth]]",
                "-== ClientAuth",
                "-",
                "-++++",
                "- Configures the engine to require/request client authentication.",
                "- <p/>",
                "- Created by manishk on 10/2/2015.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[NONE]]`NONE`|+++",
                "-No client authentication is requested or required.",
                "-+++",
                "-|[[REQUEST]]`REQUEST`|+++",
                "-Accept authentication if presented by client. If this option is set and the client chooses",
                "- not to provide authentication information about itself, the negotiations will continue.",
                "-+++",
                "-|[[REQUIRED]]`REQUIRED`|+++",
                "-Require client to present authentication, if not presented then negotiations will be declined.",
                "-+++",
                "-|===",
                "-",
                "-[[DnsResponseCode]]",
                "-== DnsResponseCode",
                "-",
                "-++++",
                "- Represents the possible response codes a server may send after receiving a",
                "- query. A response code of 0 indicates no error.",
                "-",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[NOERROR]]`NOERROR`|+++",
                "-ID 0, no error",
                "-+++",
                "-|[[FORMERROR]]`FORMERROR`|+++",
                "-ID 1, format error",
                "-+++",
                "-|[[SERVFAIL]]`SERVFAIL`|+++",
                "-ID 2, server failure",
                "-+++",
                "-|[[NXDOMAIN]]`NXDOMAIN`|+++",
                "-ID 3, name error",
                "-+++",
                "-|[[NOTIMPL]]`NOTIMPL`|+++",
                "-ID 4, not implemented",
                "-+++",
                "-|[[REFUSED]]`REFUSED`|+++",
                "-ID 5, operation refused",
                "-+++",
                "-|[[YXDOMAIN]]`YXDOMAIN`|+++",
                "-ID 6, domain name should not exist",
                "-+++",
                "-|[[YXRRSET]]`YXRRSET`|+++",
                "-ID 7, resource record set should not exist",
                "-+++",
                "-|[[NXRRSET]]`NXRRSET`|+++",
                "-ID 8, rrset does not exist",
                "-+++",
                "-|[[NOTAUTH]]`NOTAUTH`|+++",
                "-ID 9, not authoritative for zone",
                "-+++",
                "-|[[NOTZONE]]`NOTZONE`|+++",
                "-ID 10, name not in zone",
                "-+++",
                "-|[[BADVERS]]`BADVERS`|+++",
                "-ID 11, bad extension mechanism for version",
                "-+++",
                "-|[[BADSIG]]`BADSIG`|+++",
                "-ID 12, bad signature",
                "-+++",
                "-|[[BADKEY]]`BADKEY`|+++",
                "-ID 13, bad key",
                "-+++",
                "-|[[BADTIME]]`BADTIME`|+++",
                "-ID 14, bad timestamp",
                "-+++",
                "-|===",
                "-",
                "-[[HttpMethod]]",
                "-== HttpMethod",
                "-",
                "-++++",
                "- Represents an HTTP method",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[OPTIONS]]`OPTIONS`|-",
                "-|[[GET]]`GET`|-",
                "-|[[HEAD]]`HEAD`|-",
                "-|[[POST]]`POST`|-",
                "-|[[PUT]]`PUT`|-",
                "-|[[DELETE]]`DELETE`|-",
                "-|[[TRACE]]`TRACE`|-",
                "-|[[CONNECT]]`CONNECT`|-",
                "-|[[PATCH]]`PATCH`|-",
                "-|[[OTHER]]`OTHER`|-",
                "-|===",
                "-",
                "-[[HttpVersion]]",
                "-== HttpVersion",
                "-",
                "-++++",
                "- Represents the version of the HTTP protocol.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[HTTP_1_0]]`HTTP_1_0`|-",
                "-|[[HTTP_1_1]]`HTTP_1_1`|-",
                "-|[[HTTP_2]]`HTTP_2`|-",
                "-|===",
                "-",
                "-[[JsonEventType]]",
                "-== JsonEventType",
                "-",
                "-++++",
                "- The possibles types of link emitted by the link.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[START_OBJECT]]`START_OBJECT`|+++",
                "-Signals the start of a JSON object.",
                "-+++",
                "-|[[END_OBJECT]]`END_OBJECT`|+++",
                "-Signals the end of a JSON object.",
                "-+++",
                "-|[[START_ARRAY]]`START_ARRAY`|+++",
                "-Signals the start of a JSON array.",
                "-+++",
                "-|[[END_ARRAY]]`END_ARRAY`|+++",
                "-Signals the end of a JSON array.",
                "-+++",
                "-|[[VALUE]]`VALUE`|+++",
                "-Signals a JSON value.",
                "-+++",
                "-|===",
                "-",
                "-[[ProxyType]]",
                "-== ProxyType",
                "-",
                "-++++",
                "- The type of a TCP proxy server.",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[HTTP]]`HTTP`|+++",
                "-HTTP CONNECT ssl proxy",
                "-+++",
                "-|[[SOCKS4]]`SOCKS4`|+++",
                "-SOCKS4/4a tcp proxy",
                "-+++",
                "-|[[SOCKS5]]`SOCKS5`|+++",
                "-SOCSK5 tcp proxy",
                "-+++",
                "-|===",
                "-",
                "-[[ReplyFailure]]",
                "-== ReplyFailure",
                "-",
                "-++++",
                "- Represents the type of reply failure",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[TIMEOUT]]`TIMEOUT`|+++",
                "-The message send failed because no reply was received before the timeout time.",
                "-+++",
                "-|[[NO_HANDLERS]]`NO_HANDLERS`|+++",
                "-The message send failed because no handlers were available to handle the message.",
                "-+++",
                "-|[[RECIPIENT_FAILURE]]`RECIPIENT_FAILURE`|+++",
                "-The message send failed because the recipient actively sent back a failure (rejected the message)",
                "-+++",
                "-|===",
                "-",
                "-[[WebsocketVersion]]",
                "-== WebsocketVersion",
                "-",
                "-++++",
                "- Represents the WebSocket version",
                "-++++",
                "-'''",
                "-",
                "-[cols=\">25%,75%\"]",
                "-[frame=\"topbot\"]",
                "-|===",
                "-^|Name | Description",
                "-|[[V00]]`V00`|-",
                "-|[[V07]]`V07`|-",
                "-|[[V08]]`V08`|-",
                "-|[[V13]]`V13`|-",
                "-|===",
                "-"
            ],
            "changed_files": [
                "src/main/asciidoc/dataobjects.adoc",
                "src/main/asciidoc/enums.adoc",
                "src/main/asciidocs/dataobjects.adoc",
                "src/main/asciidocs/enums.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "fb1aa8160c74a2f72b97ed8b46083fac0e168465",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524482246,
            "hunks": 1,
            "message": "Added Jenkinsfile",
            "diff": [
                "diff --git a/Jenkinsfile b/Jenkinsfile",
                "new file mode 100644",
                "index 000000000..cc27240b7",
                "--- /dev/null",
                "+++ b/Jenkinsfile",
                "@@ -0,0 +1,43 @@",
                "+pipeline {",
                "+  agent any",
                "+  tools {",
                "+    maven 'Maven'",
                "+  }",
                "+  environment {",
                "+    MAVEN_SETTINGS_PATH = credentials(\"jenkins-sonatype-snapshot-repo-settings\")",
                "+  }",
                "+  stages {",
                "+    stage ('OracleJDK 8') {",
                "+      tools {",
                "+        jdk 'OracleJDK 8'",
                "+      }",
                "+      steps {",
                "+        sh 'mvn -U -B -Dsurefire.reportNameSuffix=OracleJDK_8 clean deploy -s $MAVEN_SETTINGS_PATH'",
                "+      }",
                "+      post {",
                "+        always {",
                "+          junit '**/target/surefire-reports/*.xml'",
                "+        }",
                "+        failure {",
                "+          mail to:'vertx3-ci@googlegroups.com', subject:\"Job '${env.JOB_NAME}' (${env.BUILD_NUMBER})\", body: \"Please go to ${env.BUILD_URL}.\"",
                "+        }",
                "+      }",
                "+    }",
                "+    stage ('OracleJDK latest') {",
                "+      tools {",
                "+        jdk 'OracleJDK latest'",
                "+      }",
                "+      when {",
                "+        branch 'master'",
                "+      }",
                "+      steps {",
                "+        sh 'mvn -U -B -fn -Dsurefire.reportNameSuffix=OracleJDK_latest clean test'",
                "+      }",
                "+      post {",
                "+        always {",
                "+          junit '**/target/surefire-reports/*.xml'",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "Jenkinsfile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "0b0a87fae1e3187ba1eeadf5faf0626ddabb6016",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1531389492,
            "hunks": 4,
            "message": "Releasing 3.5.4-SNAPSHOT",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 46e5c1d19..3241c804c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.3</version>",
                "+  <version>3.5.4-SNAPSHOT</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.3</stack.version>",
                "+    <stack.version>3.5.4-SNAPSHOT</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 2242fa41e..56096b4a2 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.3.CR1</version>",
                "+  <version>3.5.3</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.3.CR1'",
                "+  compile 'io.vertx:vertx-core:3.5.3'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "3297c01ddbce74fd83c4f129096a737d35f6702f",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532705316,
            "hunks": 1,
            "message": "Windows fails to run tests if path to Jetty ALPN agent contains spaces Signed-off-by: Thomas Segismont <tsegismont@gmail.com>",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0124c82f3..e3ad76376 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -645,3 +645,3 @@",
                "         <jetty.alpnAgent.path>${settings.localRepository}/org/mortbay/jetty/alpn/jetty-alpn-agent/${jetty.alpnAgent.version}/jetty-alpn-agent-${jetty.alpnAgent.version}.jar</jetty.alpnAgent.path>",
                "-        <jetty.alpnAgent.argLine>-javaagent:${jetty.alpnAgent.path}</jetty.alpnAgent.argLine>",
                "+        <jetty.alpnAgent.argLine>-javaagent:\"${jetty.alpnAgent.path}\"</jetty.alpnAgent.argLine>",
                "       </properties>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "631d1e74af25122fb4ea9fe8866bddd53dc29790",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1531293644,
            "hunks": 2,
            "message": "Releasing 3.5.3",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 25b3e4c06..46e5c1d19 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.3-SNAPSHOT</version>",
                "+  <version>3.5.3</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.3-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.3</stack.version>",
                "     <jetty.alpnAgent.argLine/>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.3",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "0c4882b0b413315e7fabca117fd820bc8a664754",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526037661,
            "hunks": 4,
            "message": "Releasing 3.5.2.CR1",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cc1c2e51a..c4e0e08f8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR1</version>",
                "@@ -54,3 +54,3 @@",
                "     <generated.dir>${project.basedir}/src/main/generated</generated.dir>",
                "-    <stack.version>3.5.2-SNAPSHOT</stack.version>",
                "+    <stack.version>3.5.2.CR1</stack.version>",
                "     <jetty.alpnAgent.argLine/>",
                "diff --git a/src/main/asciidoc/java/override/dependencies.adoc b/src/main/asciidoc/java/override/dependencies.adoc",
                "index 45272f8f7..d63189d03 100644",
                "--- a/src/main/asciidoc/java/override/dependencies.adoc",
                "+++ b/src/main/asciidoc/java/override/dependencies.adoc",
                "@@ -10,3 +10,3 @@ project descriptor to access the Vert.x Core API:",
                "   <artifactId>vertx-core</artifactId>",
                "-  <version>3.5.2-SNAPSHOT</version>",
                "+  <version>3.5.2.CR1</version>",
                " </dependency>",
                "@@ -19,3 +19,3 @@ project descriptor to access the Vert.x Core API:",
                " dependencies {",
                "-  compile 'io.vertx:vertx-core:3.5.2-SNAPSHOT'",
                "+  compile 'io.vertx:vertx-core:3.5.2.CR1'",
                " }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/java/override/dependencies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.2",
                "3.5.2.CR1",
                "3.5.2.CR2",
                "3.5.2.CR3",
                "3.5.3",
                "3.5.3.CR1",
                "3.5.4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "fb3e2c4952ac2e0420511358a2a07961b277a569",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525343216,
            "hunks": 3,
            "message": "Move http server over domain socket example to CoreExamples",
            "diff": [
                "diff --git a/src/main/asciidoc/index.adoc b/src/main/asciidoc/index.adoc",
                "index 95bab4e41..4fc044e4e 100644",
                "--- a/src/main/asciidoc/index.adoc",
                "+++ b/src/main/asciidoc/index.adoc",
                "@@ -1585,3 +1585,3 @@ Natives provide domain sockets support for `NetServer` and `HttpServer`:",
                " {@link examples.CoreExamples#serverWithDomainSockets}",
                "-----`",
                "+----",
                "@@ -1590,12 +1590,4 @@ Or for http:",
                " ----",
                "-vertx.createHttpServer().requestHandler(req -> {",
                "-  // Handle application",
                "-}).listen(SocketAddress.domainSocketAddress(\"/var/tmp/http.sock\"), ar -> {",
                "-  if (ar.succeeded()) {",
                "-    // Bound to socket",
                "-  } else {",
                "-    ar.cause().printStackTrace();",
                "-  }",
                "-});",
                "-----`",
                "+{@link examples.CoreExamples#httpServerWithDomainSockets}",
                "+----",
                "diff --git a/src/main/java/examples/CoreExamples.java b/src/main/java/examples/CoreExamples.java",
                "index 5f509fcbc..198f9e526 100644",
                "--- a/src/main/java/examples/CoreExamples.java",
                "+++ b/src/main/java/examples/CoreExamples.java",
                "@@ -381,2 +381,14 @@ public class CoreExamples {",
                "+  public void httpServerWithDomainSockets(Vertx vertx) {",
                "+    vertx.createHttpServer().requestHandler(req -> {",
                "+      // Handle application",
                "+    }).listen(SocketAddress.domainSocketAddress(\"/var/tmp/myservice.sock\"), ar -> {",
                "+      if (ar.succeeded()) {",
                "+        // Bound to socket",
                "+      } else {",
                "+        ar.cause().printStackTrace();",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "   public void clientWithDomainSockets(Vertx vertx) {"
            ],
            "changed_files": [
                "src/main/asciidoc/index.adoc",
                "src/main/java/examples/CoreExamples.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: x, Vert",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8c8688e350d40e4259f4b5a132b45c00d77f6cd5",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1533887917,
            "hunks": 0,
            "message": "Merge pull request #2578 from tsegismont/issue/1302 Make sure haInfo sync map is not invoked on an event-loop",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2578": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2578",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e69a81a039400af76b256a55b38d8b65c3b07ca1",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1528115406,
            "hunks": 0,
            "message": "Merge pull request #2482 from tsegismont/issue/2418 Test acquiring different locks on same event loop",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2482": "Fix for LockTest.testAcquireDifferentLocksOnSameEventLoop vert-x3/vertx-hazelcast#89 Fix for LockTest.testAcquireDifferentLocksOnSameEventLoop vert-x3/vertx-infinispan#53 Fix for LockTest.testAcquireDifferentLocksOnSameEventLoop vert-x3/vertx-zookeeper#68 Fix for LockTest.testAcquireDifferentLocksOnSameEventLoop vert-x3/vertx-ignite#69"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2482",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f4c504f586195886e2e3cea880c1325f4e4ac237",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526412797,
            "hunks": 0,
            "message": "Merge pull request #2454 from tsegismont/http2-headers-contains Use Http2Headers.contains instead of default MultiMap implementation",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2454": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: header",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2454",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "553f8dba6895e5eb421ad61c3d131b7d1bac95d2",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525718618,
            "hunks": 0,
            "message": "Merge pull request #2354 from nolequen/issue-2353 Allow to store mutable objects in local map",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2354": "Async map behaviour differs in local and clustered mode #2417"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, issue",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2354",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "231d85816822e8a49959c16458978a69d9a244fd",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529499354,
            "hunks": 0,
            "message": "Merge pull request #2501 from tsegismont/issue/2484 Internal references to local Locks taken using SharedData.getLock() are not cleaned up",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2501": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2501",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb568aad4fc584d19b7b3e2447890ac0e996a327",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525339028,
            "hunks": 0,
            "message": "Merge pull request #2392 from eclipse/event-bus-local-registration-issue Fix race condition in handler registration update",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2392": "Vert.x 3.5.2 umbrella issue vert-x3/issues#352"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2392",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "01bc1489fa56084d0aa658eaad9e61d40217a452",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532613519,
            "hunks": 0,
            "message": "Merge pull request #2526 from eclipse/feature/substratevm-support Feature/substratevm support",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2526": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2526",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "589a9b9ac10e66f5b10f8354c79eba5230a80599",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1529397528,
            "hunks": 0,
            "message": "Merge pull request #2502 from tychobrailleur/master Fix minor typos and grammar",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2502": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2502",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c22c671cde3b016fdd525098160dbee86cf79906",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530778550,
            "hunks": 0,
            "message": "Merge pull request #2453 from tsegismont/missing-nullable Missing @Nullable in AsyncMap, Context, Vertx and WorkerExecutor",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2453": "Support handler params for Future will nullable type eclipse-vertx/vertx-codegen#180"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2453",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b9ef5efd0bdbe53279bd2e172171f74d5152b6e7",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1527663508,
            "hunks": 0,
            "message": "Merge pull request #2481 from eclipse/windows-test-fixes Windows test fixes",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2481": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2481",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4df0dbb81408a31ebd4c7e7fa62b6d91cb6a1003",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1526459848,
            "hunks": 0,
            "message": "Merge pull request #2440 from eclipse/racy-clustered-eventbus-construction ClusteredEventBus racy initialization - fixes #2438 - fixes #2439",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2440": "ClusteredEventBus racy initialization #2438",
                "2438": "ClusteredEventBus racy initialization - fixes #2438 - fixes #2439 #2440",
                "2439": "ClusteredEventBus racy initialization - fixes #2438 - fixes #2439 #2440"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2440, 2438, 2439",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb8d329ac40fbd05da6e82e1a22e674b70238681",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524151258,
            "hunks": 0,
            "message": "Merge pull request #2403 from eclipse/revert-2399-fix-content-length Revert \"Fix bytesWritten when sending files with range\"",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2403": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2403",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e5bd26e3946a74fa89b778d1e12b11d0c560b1d",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1524129696,
            "hunks": 0,
            "message": "Merge pull request #2399 from zsiegel/fix-content-length Fix bytesWritten when sending files with range",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2399": "Fix bytesWritten when sending files with range HTTP/2 #2401 Vert.x 3.5.2 umbrella issue vert-x3/issues#352 Revert \"Fix bytesWritten when sending files with range\" #2403 Fix bytesWritten when using Range headers #2404"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2399",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "df5647cd0e6f98cb8a4a93de6da310a823748423",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530096754,
            "hunks": 0,
            "message": "Merge pull request #2509 from eclipse/http-server-connection-rework HttpServer connection lifecycle rework - fixes #2508",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2509": "Use Netty's HTTP header constants #2510",
                "2508": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2509, 2508",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "76333cfbb027023a5d977da7c5fd19a53b45e003",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1525344289,
            "hunks": 0,
            "message": "Merge pull request #2426 from tcataldo/http-domain-sockets Add support for listening on a SocketAddress to HttpServer. This",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2426": "Add a listen variant with a SocketAddress on HttpServer #2420"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2426",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "18c6d095b8a24c6d348f768114434705686b59ef",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1532697033,
            "hunks": 0,
            "message": "Merge pull request #2564 from tombentley/lock-doc Document lock semantics wrt single threaded ordering",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2564": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2564",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1deb35f30b3318aa39fc39eaedb8c0713d6fee5",
            "repository": "https://github.com/eclipse-vertx/vert.x",
            "timestamp": 1530863149,
            "hunks": 0,
            "message": "Merge branch 'feature/substratevm-support' of github.com:eclipse/vert.x into feature/substratevm-support",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.6.0",
                "3.6.0.CR1",
                "3.6.0.CR2",
                "3.6.1",
                "3.6.2",
                "3.6.3",
                "3.7.0",
                "3.7.1",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "3.8.3",
                "3.8.4",
                "3.8.5",
                "3.9.0",
                "3.9.1",
                "3.9.10",
                "3.9.11",
                "3.9.12",
                "3.9.13",
                "3.9.14",
                "3.9.15",
                "3.9.16",
                "3.9.2",
                "3.9.3",
                "3.9.4",
                "3.9.5",
                "3.9.6",
                "3.9.7",
                "3.9.8",
                "3.9.9",
                "4.0.0",
                "4.0.0-milestone1",
                "4.0.0-milestone2",
                "4.0.0-milestone3",
                "4.0.0-milestone4",
                "4.0.0-milestone5",
                "4.0.0.Beta1",
                "4.0.0.Beta2",
                "4.0.0.Beta3",
                "4.0.0.CR1",
                "4.0.0.CR2",
                "4.0.1",
                "4.0.2",
                "4.0.3",
                "4.1.0",
                "4.1.0.Beta1",
                "4.1.0.CR1",
                "4.1.0.CR2",
                "4.1.1",
                "4.1.2",
                "4.1.3",
                "4.1.4",
                "4.1.5",
                "4.1.6",
                "4.1.7",
                "4.1.8",
                "4.2.0",
                "4.2.0.Beta1",
                "4.2.0.CR1",
                "4.2.1",
                "4.2.2",
                "4.2.3",
                "4.2.4",
                "4.2.5",
                "4.2.6",
                "4.2.7",
                "4.3.0",
                "4.3.1",
                "4.3.2",
                "4.3.3",
                "4.3.4",
                "4.3.5",
                "4.3.6",
                "4.3.7",
                "4.3.8",
                "4.4.0",
                "4.4.1",
                "4.4.2",
                "4.4.3",
                "4.4.4",
                "4.4.5",
                "4.4.6",
                "4.4.7",
                "4.4.8",
                "4.4.9",
                "4.5.0",
                "4.5.1",
                "4.5.2",
                "4.5.3",
                "4.5.4",
                "4.5.5",
                "4.5.6",
                "4.5.7",
                "4.5.8"
            ],
            "matched_rules": []
        }
    ]
}
