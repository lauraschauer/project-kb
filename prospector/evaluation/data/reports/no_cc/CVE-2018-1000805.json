{
    "advisory_record": {
        "cve_id": "CVE-2018-1000805",
        "description": "Paramiko version 2.4.1, 2.3.2, 2.2.3, 2.1.5, 2.0.8, 1.18.5, 1.17.6 contains a Incorrect Access Control vulnerability in SSH server that can result in RCE. This attack appear to be exploitable via network connectivity.",
        "reserved_timestamp": 1536537600,
        "published_timestamp": 1539010800,
        "updated_timestamp": 1640693180,
        "repository_url": null,
        "references": {
            "": 268,
            "https://access.redhat.com/support/": 25,
            "https://access.redhat.com/downloads/": 20,
            "https://access.redhat.com/errata/": 15,
            "https://access.redhat.com/labs/": 15,
            "https://github.com/paramiko/paramiko/issues/1283": 12,
            "https://access.redhat.com/management/": 10,
            "https://access.redhat.com/": 10,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 10,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 10,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 10,
            "https://access.redhat.com/products/": 10,
            "https://access.redhat.com/documentation": 10,
            "https://access.redhat.com/product-life-cycles/": 10,
            "https://access.redhat.com/security": 10,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 10,
            "https://access.redhat.com/security/security-updates/#/cve": 10,
            "https://access.redhat.com/support/contact/": 10,
            "https://status.redhat.com": 10,
            "https://access.redhat.com/downloads/content/package-browser": 5,
            "https://catalog.redhat.com/software/containers/explore/": 5,
            "https://access.redhat.com/articles/1202803": 5,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 5,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 5,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 5,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 5,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 5,
            "https://access.redhat.com/documentation/": 5,
            "https://access.redhat.com/security/": 5,
            "https://access.redhat.com/security/vulnerabilities": 5,
            "https://access.redhat.com/security/data": 5,
            "https://access.redhat.com/security/security-updates/#/security-labs": 5,
            "https://access.redhat.com/security/updates/backporting/": 5,
            "https://access.redhat.com/support/cases/": 5,
            "https://access.redhat.com/support/cases/#/troubleshoot": 5,
            "https://access.redhat.com/community": 5,
            "https://access.redhat.com/community/": 5,
            "https://access.redhat.com/discussions/": 5,
            "https://access.redhat.com/announcements/": 5,
            "https://access.redhat.com/accelerators/": 5,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 5,
            "https://cloud.redhat.com/insights": 5,
            "https://access.redhat.com/changeLanguage?language=en": 5,
            "https://access.redhat.com/changeLanguage?language=fr": 5,
            "https://access.redhat.com/changeLanguage?language=ko": 5,
            "https://access.redhat.com/changeLanguage?language=ja": 5,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 5,
            "https://access.redhat.com/products/red-hat-satellite/": 5,
            "https://access.redhat.com/products/red-hat-subscription-management/": 5,
            "https://access.redhat.com/products/red-hat-insights/": 5,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 5,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 5,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 5,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 5,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 5,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 5,
            "https://access.redhat.com/products/red-hat-quay/": 5,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 5,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 5,
            "https://access.redhat.com/products/red-hat-storage/": 5,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 5,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 5,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 5,
            "https://access.redhat.com/products/red-hat-runtimes/": 5,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 5,
            "https://access.redhat.com/products/red-hat-data-grid/": 5,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 5,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 5,
            "https://access.redhat.com/products/spring-boot/": 5,
            "https://access.redhat.com/products/nodejs/": 5,
            "https://access.redhat.com/products/quarkus/": 5,
            "https://access.redhat.com/products/red-hat-application-foundations/": 5,
            "https://access.redhat.com/products/red-hat-fuse/": 5,
            "https://access.redhat.com/products/red-hat-amq/": 5,
            "https://access.redhat.com/products/red-hat-3scale/": 5,
            "https://redhat.com/en": 5,
            "https://twitter.com/RedHat": 5,
            "https://access.redhat.com/management": 5,
            "https://access.redhat.com/support": 5,
            "https://access.redhat.com/support/customer-service": 5,
            "https://access.redhat.com/articles/33844": 5,
            "https://access.redhat.com/help/login_assistance": 5,
            "https://www.redhat.com/en/trust": 5,
            "https://www.redhat.com/en/about/browser-support": 5,
            "https://www.redhat.com/en/about/digital-accessibility": 5,
            "https://access.redhat.com/recognition/": 5,
            "https://access.redhat.com/help/colophon/": 5,
            "https://www.redhat.com/": 5,
            "http://developers.redhat.com/": 5,
            "https://connect.redhat.com/": 5,
            "https://cloud.redhat.com/": 5,
            "https://access.redhat.com/subscription-value": 5,
            "https://www.redhat.com/about/": 5,
            "http://jobs.redhat.com": 5,
            "https://redhat.com/en/about/company": 5,
            "https://redhat.com/en/jobs": 5,
            "https://redhat.com/en/events": 5,
            "https://redhat.com/en/about/office-locations": 5,
            "https://redhat.com/en/contact": 5,
            "https://redhat.com/en/blog": 5,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 5,
            "https://coolstuff.redhat.com/": 5,
            "https://www.redhat.com/en/summit": 5,
            "https://redhat.com/en/about/privacy-policy": 5,
            "https://redhat.com/en/about/terms-use": 5,
            "https://redhat.com/en/about/all-policies-guidelines": 5,
            "https://redhat.com/en/about/digital-accessibility": 5,
            "https://access.redhat.com/errata/RHSA-2018:3347": 4,
            "https://access.redhat.com/errata/RHSA-2018:3406": 4,
            "https://access.redhat.com/errata/RHBA-2018:3497": 4,
            "commit::56c96a659658acdbb873aef8809a7b508434dcce": 4,
            "https://www.redhat.com/security/data/cve/CVE-2018-1000805.html": 4,
            "https://access.redhat.com/security/team/contact/": 4,
            "https://nvd.nist.gov/vuln/detail/CVE-2018-1000805": 4,
            "commit::c0b29bcbeaa66c01f327f28d144c267f11315cad": 3,
            "https://wiki.debian.org/LTS": 3,
            "https://usn.ubuntu.com/3796-3/": 2,
            "https://access.redhat.com/errata/RHSA-2018:3505": 2,
            "https://lists.debian.org/debian-lts-announce/2018/10/msg00018.html": 2,
            "https://usn.ubuntu.com/3796-2/": 2,
            "https://usn.ubuntu.com/3796-1/": 2,
            "https://herolab.usd.de/wp-content/uploads/sites/4/usd20180023.txt": 2,
            "https://lists.debian.org/debian-lts-announce/2021/12/msg00025.html": 2,
            "https://access.redhat.com/errata/RHSA-2018:3470": 2,
            "https://access.redhat.com/articles/11258": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1637263": 2,
            "https://access.redhat.com/security/updates/classification/#critical": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/advisories/GHSA-f2j6-wrhh-v25m": 2,
            "https://access.redhat.com/articles/2974891": 2,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:3347": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:3406": 1,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://www.usd.de/en/": 1,
            "https://github.com/paramiko/paramiko/issues/1291": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://access.redhat.com": 1,
            "https://console.redhat.com/insights/patch/advisories/RHBA-2018:3497": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1625894": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1635987": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1636387": 1,
            "https://www.debian.org/lts/security/": 1,
            "https://security-tracker.debian.org/tracker/paramiko": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:3470": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1501276": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1593731": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1596008": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1601298": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1601642": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1601657": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607617": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607618": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1610659": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1612658": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1612659": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1612660": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1612664": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1612805": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1613143": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1613231": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1614971": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1619590": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1624453": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1626960": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1631576": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1632585": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1632974": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1633431": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1635926": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1635929": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1636880": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10858.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10873.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10904.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10907.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10911.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10913.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10914.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10923.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10926.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10927.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10928.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10929.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10930.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14652.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14653.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14654.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14659.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14660.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14661.html": 1,
            "https://access.redhat.com/security/updates/classification/#moderate": 1
        },
        "affected_products": [
            "Access",
            "Incorrect",
            "Control",
            "n/a",
            "RCE",
            "SSH"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "RCE",
            "SSH"
        ],
        "keywords": [
            "connectivity",
            "server",
            "paramiko",
            "attack",
            "contain",
            "appear",
            "network",
            "incorrect",
            "access",
            "vulnerability",
            "result",
            "version",
            "control"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "56c96a659658acdbb873aef8809a7b508434dcce",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537325956,
            "hunks": 11,
            "message": "Fix and changelog re #1283",
            "diff": [
                "diff --git a/paramiko/auth_handler.py b/paramiko/auth_handler.py",
                "index 9a5fd0f6..ef1220cc 100644",
                "--- a/paramiko/auth_handler.py",
                "+++ b/paramiko/auth_handler.py",
                "@@ -678,6 +678,20 @@ class AuthHandler(object):",
                "-    _handler_table = {",
                "+    # TODO: do the same to the other tables, in Transport.",
                "+    # TODO 3.0: MAY make sense to make these tables into actual",
                "+    # classes/instances that can be fed a mode bool or whatever. Or,",
                "+    # alternately (both?) make the message types small classes or enums that",
                "+    # embed this info within themselves (which could also then tidy up the",
                "+    # current 'integer -> human readable short string' stuff in common.py).",
                "+    # TODO: if we do that, also expose 'em publicly.",
                "+",
                "+    # Messages which should be handled _by_ servers (sent by clients)",
                "+    _server_handler_table = {",
                "         MSG_SERVICE_REQUEST: _parse_service_request,",
                "-        MSG_SERVICE_ACCEPT: _parse_service_accept,",
                "         MSG_USERAUTH_REQUEST: _parse_userauth_request,",
                "+        MSG_USERAUTH_INFO_RESPONSE: _parse_userauth_info_response,",
                "+    }",
                "+",
                "+    # Messages which should be handled _by_ clients (sent by servers)",
                "+    _client_handler_table = {",
                "+        MSG_SERVICE_ACCEPT: _parse_service_accept,",
                "         MSG_USERAUTH_SUCCESS: _parse_userauth_success,",
                "@@ -686,5 +700,13 @@ class AuthHandler(object):",
                "         MSG_USERAUTH_INFO_REQUEST: _parse_userauth_info_request,",
                "-        MSG_USERAUTH_INFO_RESPONSE: _parse_userauth_info_response,",
                "     }",
                "+    # NOTE: prior to the fix for #1283, this was a static dict instead of a",
                "+    # property. Should be backwards compatible in most/all cases.",
                "+    @property",
                "+    def _handler_table(self):",
                "+        if self.transport.server_mode:",
                "+            return self._server_handler_table",
                "+        else:",
                "+            return self._client_handler_table",
                "+",
                "@@ -784,3 +806,3 @@ class GssapiWithMicAuthHandler(object):",
                "-    _handler_table = {",
                "+    __handler_table = {",
                "         MSG_SERVICE_REQUEST: _parse_service_request,",
                "@@ -790 +812,7 @@ class GssapiWithMicAuthHandler(object):",
                "     }",
                "+",
                "+    @property",
                "+    def _handler_table(self):",
                "+        # TODO: determine if we can cut this up like we did for the primary",
                "+        # AuthHandler class.",
                "+        return self.__handler_table",
                "diff --git a/tests/test_transport.py b/tests/test_transport.py",
                "index 3ea2cb26..2b8ee3bc 100644",
                "--- a/tests/test_transport.py",
                "+++ b/tests/test_transport.py",
                "@@ -44,2 +44,3 @@ from paramiko import (",
                "     Channel,",
                "+    AuthHandler,",
                " )",
                "@@ -56,4 +57,7 @@ from paramiko.common import (",
                "     DEFAULT_MAX_PACKET_SIZE,",
                "+    MSG_NAMES,",
                "+    MSG_UNIMPLEMENTED,",
                "+    MSG_USERAUTH_SUCCESS,",
                " )",
                "-from paramiko.py3compat import bytes",
                "+from paramiko.py3compat import bytes, byte_chr",
                " from paramiko.message import Message",
                "@@ -1054 +1058,46 @@ class TransportTest(unittest.TestCase):",
                "         self._send_unimplemented(server_is_sender=True)",
                "+",
                "+    def _send_client_message(self, message_type):",
                "+        self.setup_test_server(connect_kwargs={})",
                "+        self.ts._send_message = Mock()",
                "+        # NOTE: this isn't 100% realistic (most of these message types would",
                "+        # have actual other fields in 'em) but it suffices to test the level of",
                "+        # message dispatch we're interested in here.",
                "+        msg = Message()",
                "+        # TODO: really not liking the whole cMSG_XXX vs MSG_XXX duality right",
                "+        # now, esp since the former is almost always just byte_chr(the",
                "+        # latter)...but since that's the case...",
                "+        msg.add_byte(byte_chr(message_type))",
                "+        self.tc._send_message(msg)",
                "+        # No good way to actually wait for server action (see above tests re:",
                "+        # MSG_UNIMPLEMENTED). Grump.",
                "+        time.sleep(0.1)",
                "+",
                "+    def _expect_unimplemented(self):",
                "+        # Ensure MSG_UNIMPLEMENTED was sent (implies it hit end of loop instead",
                "+        # of truly handling the given message).",
                "+        # NOTE: When bug present, this will actually be the first thing that",
                "+        # fails (since in many cases actual message handling doesn't involve",
                "+        # sending a message back right away).",
                "+        assert self.ts._send_message.call_count == 1",
                "+        reply = self.ts._send_message.call_args[0][0]",
                "+        reply.rewind()  # Because it's pre-send, not post-receive",
                "+        assert reply.get_byte() == cMSG_UNIMPLEMENTED",
                "+",
                "+    def test_server_transports_reject_client_message_types(self):",
                "+        # TODO: handle Transport's own tables too, not just its inner auth",
                "+        # handler's table. See TODOs in auth_handler.py",
                "+        for message_type in AuthHandler._client_handler_table:",
                "+            self._send_client_message(message_type)",
                "+            self._expect_unimplemented()",
                "+            # Reset for rest of loop",
                "+            self.tearDown()",
                "+            self.setUp()",
                "+",
                "+    def test_server_rejects_client_MSG_USERAUTH_SUCCESS(self):",
                "+        self._send_client_message(MSG_USERAUTH_SUCCESS)",
                "+        # Sanity checks",
                "+        assert not self.ts.authenticated",
                "+        assert not self.ts.auth_handler.authenticated",
                "+        # Real fix's behavior",
                "+        self._expect_unimplemented()"
            ],
            "changed_files": [
                "paramiko/auth_handler.py",
                "tests/test_transport.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1283": "Security: bump paramiko version hastexo/hastexo-xblock#75 Address security issue in paramiko due to CVE-2018-1000805 rucio/rucio#1646 paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT] TypeError: 'property' object has no attribute '__getitem__' #1314 TypeError: 'property' object is not subscriptable Rhynorater/CVE-2018-15473-Exploit#15 1 FIX #15: In paramiko since 2.4.2 _handler_table is property object,\u2026 Rhynorater/CVE-2018-15473-Exploit#17 CVE-2018-1000805 #1409 Bump paramiko from 2.1.2 to 2.1.6 QualiSystems/Ansible-Shell#98 Bump paramiko from 2.1.2 to 2.1.6 in /package QualiSystems/Ansible-Shell#99"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1283",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 4 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1283 contains some security-related terms: security",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1283",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5068f459468c8a3a7d335301491ed2552cae7a41",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537237244,
            "hunks": 51,
            "message": "Blacken, 2.3 edition",
            "diff": [
                "diff --git a/paramiko/auth_handler.py b/paramiko/auth_handler.py",
                "index cb6d8fb4..13449b58 100644",
                "--- a/paramiko/auth_handler.py",
                "+++ b/paramiko/auth_handler.py",
                "@@ -48,2 +48,3 @@ from paramiko.common import (",
                "     MSG_USERAUTH_FAILURE,",
                "+    cMSG_USERAUTH_BANNER,",
                "     MSG_USERAUTH_BANNER,",
                "@@ -510,3 +511,3 @@ class AuthHandler(object):",
                "             except Exception as e:",
                "-                msg = 'Auth rejected: unsupported or mangled public key ({0}: {1})' # noqa",
                "+                msg = \"Auth rejected: unsupported or mangled public key ({0}: {1})\"  # noqa",
                "                 self.transport._log(INFO, msg.format(e.__class__.__name__, e))",
                "diff --git a/paramiko/client.py b/paramiko/client.py",
                "index 2993e6de..49a9a301 100644",
                "--- a/paramiko/client.py",
                "+++ b/paramiko/client.py",
                "@@ -418,4 +418,12 @@ class SSHClient(ClosingContextManager):",
                "         self._auth(",
                "-            username, password, pkey, key_filenames, allow_agent,",
                "-            look_for_keys, gss_auth, gss_kex, gss_deleg_creds, t.gss_host,",
                "+            username,",
                "+            password,",
                "+            pkey,",
                "+            key_filenames,",
                "+            allow_agent,",
                "+            look_for_keys,",
                "+            gss_auth,",
                "+            gss_kex,",
                "+            gss_deleg_creds,",
                "+            t.gss_host,",
                "         )",
                "@@ -544,6 +552,6 @@ class SSHClient(ClosingContextManager):",
                "         \"\"\"",
                "-        cert_suffix = '-cert.pub'",
                "+        cert_suffix = \"-cert.pub\"",
                "         # Assume privkey, not cert, by default",
                "         if filename.endswith(cert_suffix):",
                "-            key_path = filename[:-len(cert_suffix)]",
                "+            key_path = filename[: -len(cert_suffix)]",
                "             cert_path = filename",
                "@@ -558,3 +566,3 @@ class SSHClient(ClosingContextManager):",
                "         msg = \"Trying discovered key {0} in {1}\".format(",
                "-            hexlify(key.get_fingerprint()), key_path,",
                "+            hexlify(key.get_fingerprint()), key_path",
                "         )",
                "@@ -567,4 +575,15 @@ class SSHClient(ClosingContextManager):",
                "-    def _auth(self, username, password, pkey, key_filenames, allow_agent,",
                "-              look_for_keys, gss_auth, gss_kex, gss_deleg_creds, gss_host):",
                "+    def _auth(",
                "+        self,",
                "+        username,",
                "+        password,",
                "+        pkey,",
                "+        key_filenames,",
                "+        allow_agent,",
                "+        look_for_keys,",
                "+        gss_auth,",
                "+        gss_kex,",
                "+        gss_deleg_creds,",
                "+        gss_host,",
                "+    ):",
                "         \"\"\"",
                "@@ -602,3 +621,3 @@ class SSHClient(ClosingContextManager):",
                "                 return self._transport.auth_gssapi_with_mic(",
                "-                    username, gss_host, gss_deleg_creds,",
                "+                    username, gss_host, gss_deleg_creds",
                "                 )",
                "@@ -627,3 +646,3 @@ class SSHClient(ClosingContextManager):",
                "                         key = self._key_from_filepath(",
                "-                            key_filename, pkey_class, password,",
                "+                            key_filename, pkey_class, password",
                "                         )",
                "@@ -679,4 +698,4 @@ class SSHClient(ClosingContextManager):",
                "                         keyfiles.append((keytype, full_path))",
                "-                        if os.path.isfile(full_path + '-cert.pub'):",
                "-                            keyfiles.append((keytype, full_path + '-cert.pub'))",
                "+                        if os.path.isfile(full_path + \"-cert.pub\"):",
                "+                            keyfiles.append((keytype, full_path + \"-cert.pub\"))",
                "@@ -688,3 +707,3 @@ class SSHClient(ClosingContextManager):",
                "                     key = self._key_from_filepath(",
                "-                        filename, pkey_class, password,",
                "+                        filename, pkey_class, password",
                "                     )",
                "diff --git a/paramiko/dsskey.py b/paramiko/dsskey.py",
                "index 1bc2fbf5..ec358ee2 100644",
                "--- a/paramiko/dsskey.py",
                "+++ b/paramiko/dsskey.py",
                "@@ -73,4 +73,4 @@ class DSSKey(PKey):",
                "                 msg=msg,",
                "-                key_type='ssh-dss',",
                "-                cert_type='ssh-dss-cert-v01@openssh.com',",
                "+                key_type=\"ssh-dss\",",
                "+                cert_type=\"ssh-dss-cert-v01@openssh.com\",",
                "             )",
                "diff --git a/paramiko/ecdsakey.py b/paramiko/ecdsakey.py",
                "index 1fc164f4..ab9ec15f 100644",
                "--- a/paramiko/ecdsakey.py",
                "+++ b/paramiko/ecdsakey.py",
                "@@ -141,5 +141,5 @@ class ECDSAKey(PKey):",
                "             # feels more correct to do it here?)",
                "-            suffix = '-cert-v01@openssh.com'",
                "+            suffix = \"-cert-v01@openssh.com\"",
                "             if key_type.endswith(suffix):",
                "-                key_type = key_type[:-len(suffix)]",
                "+                key_type = key_type[: -len(suffix)]",
                "             self.ecdsa_curve = self._ECDSA_CURVES.get_by_key_format_identifier(",
                "@@ -149,9 +149,6 @@ class ECDSAKey(PKey):",
                "             cert_types = [",
                "-                '{0}-cert-v01@openssh.com'.format(x)",
                "-                for x in key_types",
                "+                \"{0}-cert-v01@openssh.com\".format(x) for x in key_types",
                "             ]",
                "             self._check_type_and_load_cert(",
                "-                msg=msg,",
                "-                key_type=key_types,",
                "-                cert_type=cert_types,",
                "+                msg=msg, key_type=key_types, cert_type=cert_types",
                "             )",
                "diff --git a/paramiko/ed25519key.py b/paramiko/ed25519key.py",
                "index b30ba085..68ada224 100644",
                "--- a/paramiko/ed25519key.py",
                "+++ b/paramiko/ed25519key.py",
                "@@ -58,4 +58,6 @@ class Ed25519Key(PKey):",
                "     \"\"\"",
                "-    def __init__(self, msg=None, data=None, filename=None, password=None,",
                "-                 file_obj=None):",
                "+",
                "+    def __init__(",
                "+        self, msg=None, data=None, filename=None, password=None, file_obj=None",
                "+    ):",
                "         self.public_blob = None",
                "diff --git a/paramiko/pkey.py b/paramiko/pkey.py",
                "index 3a4a3193..a6e7800a 100644",
                "--- a/paramiko/pkey.py",
                "+++ b/paramiko/pkey.py",
                "@@ -363,7 +363,7 @@ class PKey(object):",
                "-        f.write(key.private_bytes(",
                "-            serialization.Encoding.PEM,",
                "-            format,",
                "-            encryption",
                "-        ).decode())",
                "+        f.write(",
                "+            key.private_bytes(",
                "+                serialization.Encoding.PEM, format, encryption",
                "+            ).decode()",
                "+        )",
                "@@ -390,3 +390,3 @@ class PKey(object):",
                "         if msg is None:",
                "-            raise SSHException('Key object may not be empty')",
                "+            raise SSHException(\"Key object may not be empty\")",
                "         # First field is always key type, in either kind of object. (make sure",
                "@@ -413,3 +413,3 @@ class PKey(object):",
                "         else:",
                "-            err = 'Invalid key (class: {0}, data type: {1}'",
                "+            err = \"Invalid key (class: {0}, data type: {1}\"",
                "             raise SSHException(err.format(self.__class__.__name__, type_))",
                "@@ -436,7 +436,7 @@ class PKey(object):",
                "         if isinstance(value, Message):",
                "-            constructor = 'from_message'",
                "+            constructor = \"from_message\"",
                "         elif os.path.isfile(value):",
                "-            constructor = 'from_file'",
                "+            constructor = \"from_file\"",
                "         else:",
                "-            constructor = 'from_string'",
                "+            constructor = \"from_string\"",
                "         blob = getattr(PublicBlob, constructor)(value)",
                "@@ -466,2 +466,3 @@ class PublicBlob(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, type_, blob, comment=None):",
                "@@ -507,3 +508,3 @@ class PublicBlob(object):",
                "         if blob_type != key_type:",
                "-            msg = \"Invalid PublicBlob contents: key type={0!r}, but blob type={1!r}\" # noqa",
                "+            msg = \"Invalid PublicBlob contents: key type={0!r}, but blob type={1!r}\"  # noqa",
                "             raise ValueError(msg.format(key_type, blob_type))",
                "@@ -524,3 +525,3 @@ class PublicBlob(object):",
                "     def __str__(self):",
                "-        ret = '{0} public key/certificate'.format(self.key_type)",
                "+        ret = \"{0} public key/certificate\".format(self.key_type)",
                "         if self.comment:",
                "diff --git a/paramiko/rsakey.py b/paramiko/rsakey.py",
                "index d3ce0335..442bfe1f 100644",
                "--- a/paramiko/rsakey.py",
                "+++ b/paramiko/rsakey.py",
                "@@ -63,4 +63,4 @@ class RSAKey(PKey):",
                "                 msg=msg,",
                "-                key_type='ssh-rsa',",
                "-                cert_type='ssh-rsa-cert-v01@openssh.com',",
                "+                key_type=\"ssh-rsa\",",
                "+                cert_type=\"ssh-rsa-cert-v01@openssh.com\",",
                "             )",
                "@@ -116,5 +116,3 @@ class RSAKey(PKey):",
                "         sig = self.key.sign(",
                "-            data,",
                "-            padding=padding.PKCS1v15(),",
                "-            algorithm=hashes.SHA1(),",
                "+            data, padding=padding.PKCS1v15(), algorithm=hashes.SHA1()",
                "         )",
                "diff --git a/paramiko/server.py b/paramiko/server.py",
                "index 5814b7c6..3eb1a170 100644",
                "--- a/paramiko/server.py",
                "+++ b/paramiko/server.py",
                "@@ -595,2 +595,3 @@ class ServerInterface(object):",
                "+",
                " class InteractiveQuery(object):",
                "diff --git a/paramiko/transport.py b/paramiko/transport.py",
                "index 8742a248..eebe0513 100644",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@ -246,14 +246,14 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     _key_info = {",
                "-        'ssh-rsa': RSAKey,",
                "-        'ssh-rsa-cert-v01@openssh.com': RSAKey,",
                "-        'ssh-dss': DSSKey,",
                "-        'ssh-dss-cert-v01@openssh.com': DSSKey,",
                "-        'ecdsa-sha2-nistp256': ECDSAKey,",
                "-        'ecdsa-sha2-nistp256-cert-v01@openssh.com': ECDSAKey,",
                "-        'ecdsa-sha2-nistp384': ECDSAKey,",
                "-        'ecdsa-sha2-nistp384-cert-v01@openssh.com': ECDSAKey,",
                "-        'ecdsa-sha2-nistp521': ECDSAKey,",
                "-        'ecdsa-sha2-nistp521-cert-v01@openssh.com': ECDSAKey,",
                "-        'ssh-ed25519': Ed25519Key,",
                "-        'ssh-ed25519-cert-v01@openssh.com': Ed25519Key,",
                "+        \"ssh-rsa\": RSAKey,",
                "+        \"ssh-rsa-cert-v01@openssh.com\": RSAKey,",
                "+        \"ssh-dss\": DSSKey,",
                "+        \"ssh-dss-cert-v01@openssh.com\": DSSKey,",
                "+        \"ecdsa-sha2-nistp256\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp256-cert-v01@openssh.com\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp384\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp384-cert-v01@openssh.com\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp521\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp521-cert-v01@openssh.com\": ECDSAKey,",
                "+        \"ssh-ed25519\": Ed25519Key,",
                "+        \"ssh-ed25519-cert-v01@openssh.com\": Ed25519Key,",
                "     }",
                "@@ -342,3 +342,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # convert \"host:port\" into (host, port)",
                "-            hl = sock.split(':', 1)",
                "+            hl = sock.split(\":\", 1)",
                "             self.hostname = hl[0]",
                "@@ -352,3 +352,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             self.hostname = hostname",
                "-            reason = 'No suitable address family'",
                "+            reason = \"No suitable address family\"",
                "             addrinfos = socket.getaddrinfo(",
                "@@ -1238,5 +1238,7 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             if gss_auth:",
                "-                self._log(DEBUG, 'Attempting GSS-API auth... (gssapi-with-mic)') # noqa",
                "+                self._log(",
                "+                    DEBUG, \"Attempting GSS-API auth... (gssapi-with-mic)\"",
                "+                )  # noqa",
                "                 self.auth_gssapi_with_mic(",
                "-                    username, self.gss_host, gss_deleg_creds,",
                "+                    username, self.gss_host, gss_deleg_creds",
                "                 )",
                "@@ -2008,3 +2010,7 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                         else:",
                "-                            self._log(ERROR, 'Channel request for unknown channel %d' % chanid) # noqa",
                "+                            self._log(",
                "+                                ERROR,",
                "+                                \"Channel request for unknown channel %d\"",
                "+                                % chanid,",
                "+                            )  # noqa",
                "                             break",
                "diff --git a/tasks.py b/tasks.py",
                "index 261a7443..6ea0a2c4 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -9,3 +9,2 @@ from invocations.docs import docs, www, sites",
                " from invocations.packaging.release import ns as release_coll, publish",
                "-from invocations.testing import count_errors",
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 48af2a57..fec1485e 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -54,5 +54,5 @@ class NullServer(paramiko.ServerInterface):",
                "         # Allow tests to enable/disable specific key types",
                "-        self.__allowed_keys = kwargs.pop('allowed_keys', [])",
                "+        self.__allowed_keys = kwargs.pop(\"allowed_keys\", [])",
                "         # And allow them to set a (single...meh) expected public blob (cert)",
                "-        self.__expected_public_blob = kwargs.pop('public_blob', None)",
                "+        self.__expected_public_blob = kwargs.pop(\"public_blob\", None)",
                "         super(NullServer, self).__init__(*args, **kwargs)",
                "@@ -79,4 +79,4 @@ class NullServer(paramiko.ServerInterface):",
                "         happy = (",
                "-            key.get_name() in self.__allowed_keys and",
                "-            key.get_fingerprint() == expected",
                "+            key.get_name() in self.__allowed_keys",
                "+            and key.get_fingerprint() == expected",
                "         )",
                "@@ -84,4 +84,4 @@ class NullServer(paramiko.ServerInterface):",
                "         if (",
                "-            self.__expected_public_blob is not None and",
                "-            key.public_blob != self.__expected_public_blob",
                "+            self.__expected_public_blob is not None",
                "+            and key.public_blob != self.__expected_public_blob",
                "         ):",
                "@@ -152,3 +152,3 @@ class SSHClientTest(unittest.TestCase):",
                "         run_kwargs = {}",
                "-        for key in ('allowed_keys', 'public_blob'):",
                "+        for key in (\"allowed_keys\", \"public_blob\"):",
                "             run_kwargs[key] = kwargs.pop(key, None)",
                "@@ -272,5 +272,5 @@ class SSHClientTest(unittest.TestCase):",
                "         # NOTE: only bothered whipping up one cert per overall class/family.",
                "-        for type_ in ('rsa', 'dss', 'ecdsa_256', 'ed25519'):",
                "-            cert_name = 'test_{0}.key-cert.pub'.format(type_)",
                "-            cert_path = _support(os.path.join('cert_support', cert_name))",
                "+        for type_ in (\"rsa\", \"dss\", \"ecdsa_256\", \"ed25519\"):",
                "+            cert_name = \"test_{0}.key-cert.pub\".format(type_)",
                "+            cert_path = _support(os.path.join(\"cert_support\", cert_name))",
                "             self._test_connection(",
                "@@ -287,5 +287,5 @@ class SSHClientTest(unittest.TestCase):",
                "         # succeeding proving that the overall flow works.",
                "-        for type_ in ('rsa', 'dss', 'ecdsa_256', 'ed25519'):",
                "-            key_name = 'test_{0}.key'.format(type_)",
                "-            key_path = _support(os.path.join('cert_support', key_name))",
                "+        for type_ in (\"rsa\", \"dss\", \"ecdsa_256\", \"ed25519\"):",
                "+            key_name = \"test_{0}.key\".format(type_)",
                "+            key_path = _support(os.path.join(\"cert_support\", key_name))",
                "             self._test_connection(",
                "@@ -293,3 +293,3 @@ class SSHClientTest(unittest.TestCase):",
                "                 public_blob=PublicBlob.from_file(",
                "-                    '{0}-cert.pub'.format(key_path)",
                "+                    \"{0}-cert.pub\".format(key_path)",
                "                 ),",
                "diff --git a/tests/test_pkey.py b/tests/test_pkey.py",
                "index 2479f273..08d38e3b 100644",
                "--- a/tests/test_pkey.py",
                "+++ b/tests/test_pkey.py",
                "@@ -490,3 +490,3 @@ class KeyTest(unittest.TestCase):",
                "     def test_ed25519_load_from_file_obj(self):",
                "-        with open(_support('test_ed25519.key')) as pkey_fileobj:",
                "+        with open(_support(\"test_ed25519.key\")) as pkey_fileobj:",
                "             key = Ed25519Key.from_private_key(pkey_fileobj)",
                "@@ -515,3 +515,3 @@ class KeyTest(unittest.TestCase):",
                "         # PKey.load_certificate",
                "-        key_path = _support(os.path.join('cert_support', 'test_rsa.key'))",
                "+        key_path = _support(os.path.join(\"cert_support\", \"test_rsa.key\"))",
                "         key = RSAKey.from_private_key_file(key_path)",
                "@@ -519,3 +519,3 @@ class KeyTest(unittest.TestCase):",
                "         cert_path = _support(",
                "-            os.path.join('cert_support', 'test_rsa.key-cert.pub')",
                "+            os.path.join(\"cert_support\", \"test_rsa.key-cert.pub\")",
                "         )",
                "@@ -523,7 +523,9 @@ class KeyTest(unittest.TestCase):",
                "         self.assertTrue(key.public_blob is not None)",
                "-        self.assertEqual(key.public_blob.key_type, 'ssh-rsa-cert-v01@openssh.com')",
                "-        self.assertEqual(key.public_blob.comment, 'test_rsa.key.pub')",
                "+        self.assertEqual(",
                "+            key.public_blob.key_type, \"ssh-rsa-cert-v01@openssh.com\"",
                "+        )",
                "+        self.assertEqual(key.public_blob.comment, \"test_rsa.key.pub\")",
                "         # Delve into blob contents, for test purposes",
                "         msg = Message(key.public_blob.key_blob)",
                "-        self.assertEqual(msg.get_text(), 'ssh-rsa-cert-v01@openssh.com')",
                "+        self.assertEqual(msg.get_text(), \"ssh-rsa-cert-v01@openssh.com\")",
                "         nonce = msg.get_string()",
                "@@ -537,3 +539,3 @@ class KeyTest(unittest.TestCase):",
                "         # Prevented from loading certificate that doesn't match",
                "-        key_path = _support(os.path.join('cert_support', 'test_ed25519.key'))",
                "+        key_path = _support(os.path.join(\"cert_support\", \"test_ed25519.key\"))",
                "         key1 = Ed25519Key.from_private_key_file(key_path)",
                "@@ -542,3 +544,3 @@ class KeyTest(unittest.TestCase):",
                "             key1.load_certificate,",
                "-            _support('test_rsa.key-cert.pub'),",
                "+            _support(\"test_rsa.key-cert.pub\"),",
                "         )"
            ],
            "changed_files": [
                "paramiko/auth_handler.py",
                "paramiko/client.py",
                "paramiko/dsskey.py",
                "paramiko/ecdsakey.py",
                "paramiko/ed25519key.py",
                "paramiko/pkey.py",
                "paramiko/rsakey.py",
                "paramiko/server.py",
                "paramiko/transport.py",
                "tasks.py",
                "tests/test_client.py",
                "tests/test_pkey.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: server",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ea2f51adad592beab6a4e69a5efc935eadaeaa0b",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1526314852,
            "hunks": 13,
            "message": "Test and dev dependencies cleanup and sync with Fabric * Update invocations min version * Update pytest to be consistent with fabric * Add pytest-xdist to enable `guard` task * Other dependencies as found to be inconsistent with Fabric2",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 05876671..ac13aff6 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -28,2 +28,4 @@ install:",
                " script:",
                "+  # flake8 is now possible!",
                "+  - flake8",
                "   # All (including slow) tests, w/ coverage!",
                "@@ -32,4 +34,2 @@ script:",
                "   - inv sites",
                "-  # flake8 is now possible!",
                "-  - flake8",
                " notifications:",
                "diff --git a/tasks.py b/tasks.py",
                "index ef90e88c..caa72bcd 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -16,3 +16,3 @@ def test(",
                "     color=True,",
                "-    capture='sys',",
                "+    capture=\"sys\",",
                "     module=None,",
                "@@ -23,2 +23,3 @@ def test(",
                "     include_slow=False,",
                "+    loop_on_fail=False,",
                " ):",
                "@@ -32,3 +33,3 @@ def test(",
                "     \"\"\"",
                "-    if verbose and '--verbose' not in opts and '-v' not in opts:",
                "+    if verbose and \"--verbose\" not in opts and \"-v\" not in opts:",
                "         opts += \" --verbose\"",
                "@@ -38,9 +39,11 @@ def test(",
                "         opts += \" --color=yes\"",
                "-    opts += ' --capture={0}'.format(capture)",
                "-    if '-m' not in opts and not include_slow:",
                "+    opts += \" --capture={0}\".format(capture)",
                "+    if \"-m\" not in opts and not include_slow:",
                "         opts += \" -m 'not slow'\"",
                "-    if k is not None and not ('-k' in opts if opts else False):",
                "-        opts += ' -k {}'.format(k)",
                "-    if x and not ('-x' in opts if opts else False):",
                "-        opts += ' -x'",
                "+    if k is not None and not (\"-k\" in opts if opts else False):",
                "+        opts += \" -k {}\".format(k)",
                "+    if x and not (\"-x\" in opts if opts else False):",
                "+        opts += \" -x\"",
                "+    if loop_on_fail and not (\"-f\" in opts if opts else False):",
                "+        opts += \" -f\"",
                "     modstr = \"\"",
                "@@ -63,4 +66,4 @@ def test(",
                "     env = dict(os.environ)",
                "-    if 'SSH_AUTH_SOCK' in env:",
                "-        del env['SSH_AUTH_SOCK']",
                "+    if \"SSH_AUTH_SOCK\" in env:",
                "+        del env[\"SSH_AUTH_SOCK\"]",
                "     cmd = \"{} {} {}\".format(runner, opts, modstr)",
                "@@ -78,2 +81,11 @@ def coverage(ctx, opts=\"\"):",
                "+@task",
                "+def guard(ctx, opts=\"\"):",
                "+    \"\"\"",
                "+    Execute all tests and then watch for changes, re-running.",
                "+    \"\"\"",
                "+    # TODO if coverage was run via pytest-cov, we could add coverage here too",
                "+    return test(ctx, include_slow=True, loop_on_fail=True, opts=opts)",
                "+",
                "+",
                " # Until we stop bundling docs w/ releases. Need to discover use cases first.",
                "@@ -89,6 +101,6 @@ def release(ctx, sdist=True, wheel=True, sign=True, dry_run=False, index=None):",
                "     # Move the built docs into where Epydocs used to live",
                "-    target = 'docs'",
                "+    target = \"docs\"",
                "     rmtree(target, ignore_errors=True)",
                "     # TODO: make it easier to yank out this config val from the docs coll",
                "-    copytree('sites/docs/_build', target)",
                "+    copytree(\"sites/docs/_build\", target)",
                "     # Publish",
                "@@ -98,4 +110,6 @@ def release(ctx, sdist=True, wheel=True, sign=True, dry_run=False, index=None):",
                "     # Remind",
                "-    print(\"\\n\\nDon't forget to update RTD's versions page for new minor \"",
                "-          \"releases!\")",
                "+    print(",
                "+        \"\\n\\nDon't forget to update RTD's versions page for new minor \"",
                "+        \"releases!\"",
                "+    )",
                "@@ -105,17 +119,20 @@ def release(ctx, sdist=True, wheel=True, sign=True, dry_run=False, index=None):",
                " # aliasing, defaults etc.",
                "-release_coll.tasks['publish'] = release",
                "+release_coll.tasks[\"publish\"] = release",
                "-ns = Collection(test, coverage, release_coll, docs, www, sites)",
                "-ns.configure({",
                "-    'packaging': {",
                "-        # NOTE: many of these are also set in kwarg defaults above; but having",
                "-        # them here too means once we get rid of our custom release(), the",
                "-        # behavior stays.",
                "-        'sign': True,",
                "-        'wheel': True,",
                "-        'changelog_file': join(",
                "-            www.configuration()['sphinx']['source'],",
                "-            'changelog.rst',",
                "-        ),",
                "-    },",
                "-})",
                "+ns = Collection(",
                "+    test, coverage, guard, release_coll, docs, www, sites,",
                "+)",
                "+ns.configure(",
                "+    {",
                "+        \"packaging\": {",
                "+            # NOTE: many of these are also set in kwarg defaults above; but",
                "+            # having them here too means once we get rid of our custom",
                "+            # release(), the behavior stays.",
                "+            \"sign\": True,",
                "+            \"wheel\": True,",
                "+            \"changelog_file\": join(",
                "+                www.configuration()[\"sphinx\"][\"source\"], \"changelog.rst\"",
                "+            ),",
                "+        }",
                "+    }",
                "+)"
            ],
            "changed_files": [
                ".travis.yml",
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dc82971c1af0d147433c948dc440ffabdc276a7c",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537234429,
            "hunks": 51,
            "message": "Blacken, 2.2 edition",
            "diff": [
                "diff --git a/paramiko/auth_handler.py b/paramiko/auth_handler.py",
                "index 04ee2d75..c1616a5e 100644",
                "--- a/paramiko/auth_handler.py",
                "+++ b/paramiko/auth_handler.py",
                "@@ -230,3 +230,3 @@ class AuthHandler(object):",
                "             if max_ts is not None and max_ts <= time.time():",
                "-                raise AuthenticationException('Authentication timeout.')",
                "+                raise AuthenticationException(\"Authentication timeout.\")",
                "diff --git a/paramiko/channel.py b/paramiko/channel.py",
                "index bf8fcb09..fd61bd65 100644",
                "--- a/paramiko/channel.py",
                "+++ b/paramiko/channel.py",
                "@@ -27,2 +27,3 @@ import time",
                " import threading",
                "+",
                " # TODO: switch as much of py3compat.py to 'six' as possible, then use six.wraps",
                "diff --git a/paramiko/ecdsakey.py b/paramiko/ecdsakey.py",
                "index 7cfed333..e2e6604f 100644",
                "--- a/paramiko/ecdsakey.py",
                "+++ b/paramiko/ecdsakey.py",
                "@@ -181,4 +181,9 @@ class ECDSAKey(PKey):",
                "     def __hash__(self):",
                "-        return hash((self.get_name(), self.verifying_key.public_numbers().x,",
                "-                     self.verifying_key.public_numbers().y))",
                "+        return hash(",
                "+            (",
                "+                self.get_name(),",
                "+                self.verifying_key.public_numbers().x,",
                "+                self.verifying_key.public_numbers().y,",
                "+            )",
                "+        )",
                "diff --git a/paramiko/ed25519key.py b/paramiko/ed25519key.py",
                "index 1557c5b2..77d4d37d 100644",
                "--- a/paramiko/ed25519key.py",
                "+++ b/paramiko/ed25519key.py",
                "@@ -69,2 +69,3 @@ class Ed25519Key(PKey):",
                "         from paramiko.transport import Transport",
                "+",
                "         # We may eventually want this to be usable for other key types, as",
                "@@ -125,5 +126,5 @@ class Ed25519Key(PKey):",
                "             decryptor = Cipher(",
                "-                cipher[\"class\"](key[:cipher[\"key-size\"]]),",
                "-                cipher[\"mode\"](key[cipher[\"key-size\"]:]),",
                "-                backend=default_backend()",
                "+                cipher[\"class\"](key[: cipher[\"key-size\"]]),",
                "+                cipher[\"mode\"](key[cipher[\"key-size\"] :]),",
                "+                backend=default_backend(),",
                "             ).decryptor()",
                "@@ -149,4 +150,6 @@ class Ed25519Key(PKey):",
                "             assert (",
                "-                signing_key.verify_key.encode() == public == public_keys[i] ==",
                "-                key_data[32:]",
                "+                signing_key.verify_key.encode()",
                "+                == public",
                "+                == public_keys[i]",
                "+                == key_data[32:]",
                "             )",
                "diff --git a/paramiko/hostkeys.py b/paramiko/hostkeys.py",
                "index 20a2d93c..1cdddb62 100644",
                "--- a/paramiko/hostkeys.py",
                "+++ b/paramiko/hostkeys.py",
                "@@ -362,3 +362,3 @@ class HostKeyEntry:",
                "                 key = ECDSAKey(data=decodebytes(key), validate_point=False)",
                "-            elif keytype == 'ssh-ed25519':",
                "+            elif keytype == \"ssh-ed25519\":",
                "                 key = Ed25519Key(data=decodebytes(key))",
                "diff --git a/paramiko/kex_ecdh_nist.py b/paramiko/kex_ecdh_nist.py",
                "index 702a872d..496805ab 100644",
                "--- a/paramiko/kex_ecdh_nist.py",
                "+++ b/paramiko/kex_ecdh_nist.py",
                "@@ -17,3 +17,3 @@ c_MSG_KEXECDH_INIT, c_MSG_KEXECDH_REPLY = [byte_chr(c) for c in range(30, 32)]",
                "-class KexNistp256():",
                "+class KexNistp256:",
                "@@ -47,3 +47,3 @@ class KexNistp256():",
                "             return self._parse_kexecdh_reply(m)",
                "-        raise SSHException('KexECDH asked to handle packet type %d' % ptype)",
                "+        raise SSHException(\"KexECDH asked to handle packet type %d\" % ptype)",
                "@@ -66,4 +66,8 @@ class KexNistp256():",
                "         hm = Message()",
                "-        hm.add(self.transport.remote_version, self.transport.local_version,",
                "-               self.transport.remote_kex_init, self.transport.local_kex_init)",
                "+        hm.add(",
                "+            self.transport.remote_version,",
                "+            self.transport.local_version,",
                "+            self.transport.remote_kex_init,",
                "+            self.transport.local_kex_init,",
                "+        )",
                "         hm.add_string(K_S)",
                "@@ -96,4 +100,8 @@ class KexNistp256():",
                "         hm = Message()",
                "-        hm.add(self.transport.local_version, self.transport.remote_version,",
                "-               self.transport.local_kex_init, self.transport.remote_kex_init)",
                "+        hm.add(",
                "+            self.transport.local_version,",
                "+            self.transport.remote_version,",
                "+            self.transport.local_kex_init,",
                "+            self.transport.remote_kex_init,",
                "+        )",
                "         hm.add_string(K_S)",
                "diff --git a/paramiko/kex_gss.py b/paramiko/kex_gss.py",
                "index 362d211c..d76bb2dd 100644",
                "--- a/paramiko/kex_gss.py",
                "+++ b/paramiko/kex_gss.py",
                "@@ -227,4 +227,5 @@ class KexGSSGroup1(object):",
                "         if srv_token is not None:",
                "-            self.kexgss.ssh_init_sec_context(target=self.gss_host,",
                "-                                             recv_token=srv_token)",
                "+            self.kexgss.ssh_init_sec_context(",
                "+                target=self.gss_host, recv_token=srv_token",
                "+            )",
                "             self.kexgss.ssh_check_mic(mic_token, H)",
                "@@ -621,4 +622,5 @@ class KexGSSGex(object):",
                "         if srv_token is not None:",
                "-            self.kexgss.ssh_init_sec_context(target=self.gss_host,",
                "-                                             recv_token=srv_token)",
                "+            self.kexgss.ssh_init_sec_context(",
                "+                target=self.gss_host, recv_token=srv_token",
                "+            )",
                "             self.kexgss.ssh_check_mic(mic_token, H)",
                "diff --git a/paramiko/rsakey.py b/paramiko/rsakey.py",
                "index bf7f5750..d6230989 100644",
                "--- a/paramiko/rsakey.py",
                "+++ b/paramiko/rsakey.py",
                "@@ -99,4 +99,5 @@ class RSAKey(PKey):",
                "     def __hash__(self):",
                "-        return hash((self.get_name(), self.public_numbers.e,",
                "-                     self.public_numbers.n))",
                "+        return hash(",
                "+            (self.get_name(), self.public_numbers.e, self.public_numbers.n)",
                "+        )",
                "diff --git a/paramiko/sftp_client.py b/paramiko/sftp_client.py",
                "index ea81fa5a..425aa87d 100644",
                "--- a/paramiko/sftp_client.py",
                "+++ b/paramiko/sftp_client.py",
                "@@ -32,8 +32,33 @@ from paramiko.py3compat import bytestring, b, u, long",
                " from paramiko.sftp import (",
                "-    BaseSFTP, CMD_OPENDIR, CMD_HANDLE, SFTPError, CMD_READDIR, CMD_NAME,",
                "-    CMD_CLOSE, SFTP_FLAG_READ, SFTP_FLAG_WRITE, SFTP_FLAG_CREATE,",
                "-    SFTP_FLAG_TRUNC, SFTP_FLAG_APPEND, SFTP_FLAG_EXCL, CMD_OPEN, CMD_REMOVE,",
                "-    CMD_RENAME, CMD_MKDIR, CMD_RMDIR, CMD_STAT, CMD_ATTRS, CMD_LSTAT,",
                "-    CMD_SYMLINK, CMD_SETSTAT, CMD_READLINK, CMD_REALPATH, CMD_STATUS,",
                "-    CMD_EXTENDED, SFTP_OK, SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED,",
                "+    BaseSFTP,",
                "+    CMD_OPENDIR,",
                "+    CMD_HANDLE,",
                "+    SFTPError,",
                "+    CMD_READDIR,",
                "+    CMD_NAME,",
                "+    CMD_CLOSE,",
                "+    SFTP_FLAG_READ,",
                "+    SFTP_FLAG_WRITE,",
                "+    SFTP_FLAG_CREATE,",
                "+    SFTP_FLAG_TRUNC,",
                "+    SFTP_FLAG_APPEND,",
                "+    SFTP_FLAG_EXCL,",
                "+    CMD_OPEN,",
                "+    CMD_REMOVE,",
                "+    CMD_RENAME,",
                "+    CMD_MKDIR,",
                "+    CMD_RMDIR,",
                "+    CMD_STAT,",
                "+    CMD_ATTRS,",
                "+    CMD_LSTAT,",
                "+    CMD_SYMLINK,",
                "+    CMD_SETSTAT,",
                "+    CMD_READLINK,",
                "+    CMD_REALPATH,",
                "+    CMD_STATUS,",
                "+    CMD_EXTENDED,",
                "+    SFTP_OK,",
                "+    SFTP_EOF,",
                "+    SFTP_NO_SUCH_FILE,",
                "+    SFTP_PERMISSION_DENIED,",
                " )",
                "@@ -408,3 +433,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         newpath = self._adjust_cwd(newpath)",
                "-        self._log(DEBUG, 'posix_rename(%r, %r)' % (oldpath, newpath))",
                "+        self._log(DEBUG, \"posix_rename(%r, %r)\" % (oldpath, newpath))",
                "         self._request(",
                "diff --git a/paramiko/sftp_server.py b/paramiko/sftp_server.py",
                "index 8c5e68fc..5c23ea2b 100644",
                "--- a/paramiko/sftp_server.py",
                "+++ b/paramiko/sftp_server.py",
                "@@ -528,3 +528,3 @@ class SFTPServer(BaseSFTP, SubsystemHandler):",
                "                 self._check_file(request_number, msg)",
                "-            elif tag == 'posix-rename@openssh.com':",
                "+            elif tag == \"posix-rename@openssh.com\":",
                "                 oldpath = msg.get_text()",
                "diff --git a/paramiko/transport.py b/paramiko/transport.py",
                "index a0890805..d1aa6b19 100644",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@ -162,17 +162,17 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     _preferred_keys = (",
                "-        'ssh-ed25519',",
                "-        'ecdsa-sha2-nistp256',",
                "-        'ecdsa-sha2-nistp384',",
                "-        'ecdsa-sha2-nistp521',",
                "-        'ssh-rsa',",
                "-        'ssh-dss',",
                "+        \"ssh-ed25519\",",
                "+        \"ecdsa-sha2-nistp256\",",
                "+        \"ecdsa-sha2-nistp384\",",
                "+        \"ecdsa-sha2-nistp521\",",
                "+        \"ssh-rsa\",",
                "+        \"ssh-dss\",",
                "     )",
                "     _preferred_kex = (",
                "-        'ecdh-sha2-nistp256',",
                "-        'ecdh-sha2-nistp384',",
                "-        'ecdh-sha2-nistp521',",
                "-        'diffie-hellman-group-exchange-sha256',",
                "-        'diffie-hellman-group-exchange-sha1',",
                "-        'diffie-hellman-group14-sha1',",
                "-        'diffie-hellman-group1-sha1',",
                "+        \"ecdh-sha2-nistp256\",",
                "+        \"ecdh-sha2-nistp384\",",
                "+        \"ecdh-sha2-nistp521\",",
                "+        \"diffie-hellman-group-exchange-sha256\",",
                "+        \"diffie-hellman-group-exchange-sha1\",",
                "+        \"diffie-hellman-group14-sha1\",",
                "+        \"diffie-hellman-group1-sha1\",",
                "     )",
                "@@ -246,8 +246,8 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     _key_info = {",
                "-        'ssh-rsa': RSAKey,",
                "-        'ssh-dss': DSSKey,",
                "-        'ecdsa-sha2-nistp256': ECDSAKey,",
                "-        'ecdsa-sha2-nistp384': ECDSAKey,",
                "-        'ecdsa-sha2-nistp521': ECDSAKey,",
                "-        'ssh-ed25519': Ed25519Key,",
                "+        \"ssh-rsa\": RSAKey,",
                "+        \"ssh-dss\": DSSKey,",
                "+        \"ecdsa-sha2-nistp256\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp384\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp521\": ECDSAKey,",
                "+        \"ssh-ed25519\": Ed25519Key,",
                "     }",
                "@@ -255,12 +255,12 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     _kex_info = {",
                "-        'diffie-hellman-group1-sha1': KexGroup1,",
                "-        'diffie-hellman-group14-sha1': KexGroup14,",
                "-        'diffie-hellman-group-exchange-sha1': KexGex,",
                "-        'diffie-hellman-group-exchange-sha256': KexGexSHA256,",
                "-        'gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==': KexGSSGroup1,",
                "-        'gss-group14-sha1-toWM5Slw5Ew8Mqkay+al2g==': KexGSSGroup14,",
                "-        'gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==': KexGSSGex,",
                "-        'ecdh-sha2-nistp256': KexNistp256,",
                "-        'ecdh-sha2-nistp384': KexNistp384,",
                "-        'ecdh-sha2-nistp521': KexNistp521,",
                "+        \"diffie-hellman-group1-sha1\": KexGroup1,",
                "+        \"diffie-hellman-group14-sha1\": KexGroup14,",
                "+        \"diffie-hellman-group-exchange-sha1\": KexGex,",
                "+        \"diffie-hellman-group-exchange-sha256\": KexGexSHA256,",
                "+        \"gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==\": KexGSSGroup1,",
                "+        \"gss-group14-sha1-toWM5Slw5Ew8Mqkay+al2g==\": KexGSSGroup14,",
                "+        \"gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==\": KexGSSGex,",
                "+        \"ecdh-sha2-nistp256\": KexNistp256,",
                "+        \"ecdh-sha2-nistp384\": KexNistp384,",
                "+        \"ecdh-sha2-nistp521\": KexNistp521,",
                "     }",
                "diff --git a/setup.py b/setup.py",
                "index 49fe63e3..608c9161 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -77,6 +77,6 @@ setup(",
                "     install_requires=[",
                "-        'bcrypt>=3.1.3',",
                "-        'cryptography>=1.1',",
                "-        'pynacl>=1.0.1',",
                "-        'pyasn1>=0.1.7',",
                "+        \"bcrypt>=3.1.3\",",
                "+        \"cryptography>=1.1\",",
                "+        \"pynacl>=1.0.1\",",
                "+        \"pyasn1>=0.1.7\",",
                "     ],",
                "diff --git a/tests/stub_sftp.py b/tests/stub_sftp.py",
                "index 13e7f3b4..100076d6 100644",
                "--- a/tests/stub_sftp.py",
                "+++ b/tests/stub_sftp.py",
                "@@ -170,3 +170,2 @@ class StubSFTPServer(SFTPServerInterface):",
                "-",
                "     def mkdir(self, path, attr):",
                "diff --git a/tests/test_auth.py b/tests/test_auth.py",
                "index 14d465ca..6358a053 100644",
                "--- a/tests/test_auth.py",
                "+++ b/tests/test_auth.py",
                "@@ -87,3 +87,3 @@ class NullServer(ServerInterface):",
                "             raise Exception(\"Ack!\")",
                "-        if username == 'unresponsive-server':",
                "+        if username == \"unresponsive-server\":",
                "             sleep(5)",
                "@@ -266,3 +266,3 @@ class AuthTest(unittest.TestCase):",
                "         try:",
                "-            remain = self.tc.auth_password('unresponsive-server', 'hello')",
                "+            remain = self.tc.auth_password(\"unresponsive-server\", \"hello\")",
                "         except:",
                "@@ -270,2 +270,2 @@ class AuthTest(unittest.TestCase):",
                "             self.assertTrue(issubclass(etype, AuthenticationException))",
                "-            self.assertTrue('Authentication timeout' in str(evalue))",
                "+            self.assertTrue(\"Authentication timeout\" in str(evalue))",
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 53ba53e4..87f7bcb2 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -43,6 +43,6 @@ from .util import _support, slow",
                " FINGERPRINTS = {",
                "-    'ssh-dss': b'\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c',",
                "-    'ssh-rsa': b'\\x60\\x73\\x38\\x44\\xcb\\x51\\x86\\x65\\x7f\\xde\\xda\\xa2\\x2b\\x5a\\x57\\xd5',",
                "-    'ecdsa-sha2-nistp256': b'\\x25\\x19\\xeb\\x55\\xe6\\xa1\\x47\\xff\\x4f\\x38\\xd2\\x75\\x6f\\xa5\\xd5\\x60',",
                "-    'ssh-ed25519': b'\\xb3\\xd5\"\\xaa\\xf9u^\\xe8\\xcd\\x0e\\xea\\x02\\xb9)\\xa2\\x80',",
                "+    \"ssh-dss\": b\"\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c\",",
                "+    \"ssh-rsa\": b\"\\x60\\x73\\x38\\x44\\xcb\\x51\\x86\\x65\\x7f\\xde\\xda\\xa2\\x2b\\x5a\\x57\\xd5\",",
                "+    \"ecdsa-sha2-nistp256\": b\"\\x25\\x19\\xeb\\x55\\xe6\\xa1\\x47\\xff\\x4f\\x38\\xd2\\x75\\x6f\\xa5\\xd5\\x60\",",
                "+    \"ssh-ed25519\": b'\\xb3\\xd5\"\\xaa\\xf9u^\\xe8\\xcd\\x0e\\xea\\x02\\xb9)\\xa2\\x80',",
                " }",
                "@@ -64,3 +64,3 @@ class NullServer(paramiko.ServerInterface):",
                "             return paramiko.AUTH_SUCCESSFUL",
                "-        if (username == 'slowdive') and (password == 'unresponsive-server'):",
                "+        if (username == \"slowdive\") and (password == \"unresponsive-server\"):",
                "             time.sleep(5)",
                "@@ -210,3 +210,3 @@ class SSHClientTest(unittest.TestCase):",
                "     def test_client_ed25519(self):",
                "-        self._test_connection(key_filename=_support('test_ed25519.key'))",
                "+        self._test_connection(key_filename=_support(\"test_ed25519.key\"))",
                "@@ -410,3 +410,3 @@ class SSHClientTest(unittest.TestCase):",
                "             self._test_connection,",
                "-            password='unresponsive-server',",
                "+            password=\"unresponsive-server\",",
                "             auth_timeout=0.5,",
                "diff --git a/tests/test_kex.py b/tests/test_kex.py",
                "index b9b59db1..65eb9a17 100644",
                "--- a/tests/test_kex.py",
                "+++ b/tests/test_kex.py",
                "@@ -42,2 +42,3 @@ def dummy_urandom(n):",
                "+",
                " def dummy_generate_key_pair(obj):",
                "@@ -45,8 +46,16 @@ def dummy_generate_key_pair(obj):",
                "     public_key_numbers = \"042bdab212fa8ba1b7c843301682a4db424d307246c7e1e6083c41d9ca7b098bf30b3d63e2ec6278488c135360456cc054b3444ecc45998c08894cbc1370f5f989\"",
                "-    public_key_numbers_obj = ec.EllipticCurvePublicNumbers.from_encoded_point(ec.SECP256R1(), unhexlify(public_key_numbers))",
                "-    obj.P = ec.EllipticCurvePrivateNumbers(private_value=private_key_value, public_numbers=public_key_numbers_obj).private_key(default_backend())",
                "+    public_key_numbers_obj = ec.EllipticCurvePublicNumbers.from_encoded_point(",
                "+        ec.SECP256R1(), unhexlify(public_key_numbers)",
                "+    )",
                "+    obj.P = ec.EllipticCurvePrivateNumbers(",
                "+        private_value=private_key_value, public_numbers=public_key_numbers_obj",
                "+    ).private_key(default_backend())",
                "     if obj.transport.server_mode:",
                "-        obj.Q_S = ec.EllipticCurvePublicNumbers.from_encoded_point(ec.SECP256R1(), unhexlify(public_key_numbers)).public_key(default_backend())",
                "+        obj.Q_S = ec.EllipticCurvePublicNumbers.from_encoded_point(",
                "+            ec.SECP256R1(), unhexlify(public_key_numbers)",
                "+        ).public_key(default_backend())",
                "         return",
                "-    obj.Q_C = ec.EllipticCurvePublicNumbers.from_encoded_point(ec.SECP256R1(), unhexlify(public_key_numbers)).public_key(default_backend())",
                "+    obj.Q_C = ec.EllipticCurvePublicNumbers.from_encoded_point(",
                "+        ec.SECP256R1(), unhexlify(public_key_numbers)",
                "+    ).public_key(default_backend())",
                "@@ -448,16 +457,20 @@ class KexTest(unittest.TestCase):",
                "         kex.start_kex()",
                "-        self.assertEqual((paramiko.kex_ecdh_nist._MSG_KEXECDH_REPLY,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_ecdh_nist._MSG_KEXECDH_REPLY,), transport._expect",
                "+        )",
                "-        #fake reply",
                "+        # fake reply",
                "         msg = Message()",
                "-        msg.add_string('fake-host-key')",
                "-        Q_S = unhexlify(\"043ae159594ba062efa121480e9ef136203fa9ec6b6e1f8723a321c16e62b945f573f3b822258cbcd094b9fa1c125cbfe5f043280893e66863cc0cb4dccbe70210\")",
                "+        msg.add_string(\"fake-host-key\")",
                "+        Q_S = unhexlify(",
                "+            \"043ae159594ba062efa121480e9ef136203fa9ec6b6e1f8723a321c16e62b945f573f3b822258cbcd094b9fa1c125cbfe5f043280893e66863cc0cb4dccbe70210\"",
                "+        )",
                "         msg.add_string(Q_S)",
                "-        msg.add_string('fake-sig')",
                "+        msg.add_string(\"fake-sig\")",
                "         msg.rewind()",
                "         kex.parse_next(paramiko.kex_ecdh_nist._MSG_KEXECDH_REPLY, msg)",
                "-        H = b'BAF7CE243A836037EB5D2221420F35C02B9AB6C957FE3BDE3369307B9612570A'",
                "+        H = b\"BAF7CE243A836037EB5D2221420F35C02B9AB6C957FE3BDE3369307B9612570A\"",
                "         self.assertEqual(K, kex.transport._K)",
                "         self.assertEqual(H, hexlify(transport._H).upper())",
                "-        self.assertEqual((b'fake-host-key', b'fake-sig'), transport._verify)",
                "+        self.assertEqual((b\"fake-host-key\", b\"fake-sig\"), transport._verify)",
                "         self.assertTrue(transport._activated)",
                "@@ -470,8 +483,12 @@ class KexTest(unittest.TestCase):",
                "         kex.start_kex()",
                "-        self.assertEqual((paramiko.kex_ecdh_nist._MSG_KEXECDH_INIT,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_ecdh_nist._MSG_KEXECDH_INIT,), transport._expect",
                "+        )",
                "-        #fake init",
                "-        msg=Message()",
                "-        Q_C = unhexlify(\"043ae159594ba062efa121480e9ef136203fa9ec6b6e1f8723a321c16e62b945f573f3b822258cbcd094b9fa1c125cbfe5f043280893e66863cc0cb4dccbe70210\")",
                "-        H = b'2EF4957AFD530DD3F05DBEABF68D724FACC060974DA9704F2AEE4C3DE861E7CA'",
                "+        # fake init",
                "+        msg = Message()",
                "+        Q_C = unhexlify(",
                "+            \"043ae159594ba062efa121480e9ef136203fa9ec6b6e1f8723a321c16e62b945f573f3b822258cbcd094b9fa1c125cbfe5f043280893e66863cc0cb4dccbe70210\"",
                "+        )",
                "+        H = b\"2EF4957AFD530DD3F05DBEABF68D724FACC060974DA9704F2AEE4C3DE861E7CA\"",
                "         msg.add_string(Q_C)",
                "diff --git a/tests/test_pkey.py b/tests/test_pkey.py",
                "index a70671b5..3a1279b6 100644",
                "--- a/tests/test_pkey.py",
                "+++ b/tests/test_pkey.py",
                "@@ -464,5 +464,5 @@ class KeyTest(unittest.TestCase):",
                "     def test_ed25519(self):",
                "-        key1 = Ed25519Key.from_private_key_file(_support('test_ed25519.key'))",
                "+        key1 = Ed25519Key.from_private_key_file(_support(\"test_ed25519.key\"))",
                "         key2 = Ed25519Key.from_private_key_file(",
                "-            _support('test_ed25519_password.key'), b'abc123'",
                "+            _support(\"test_ed25519_password.key\"), b\"abc123\"",
                "         )",
                "@@ -472,3 +472,3 @@ class KeyTest(unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = Ed25519Key.from_private_key_file(_support('test_ed25519.key'))",
                "+        key = Ed25519Key.from_private_key_file(_support(\"test_ed25519.key\"))",
                "         self.assertEqual(key, key)",
                "@@ -482,6 +482,6 @@ class KeyTest(unittest.TestCase):",
                "         key = Ed25519Key.from_private_key_file(",
                "-            _support('test_ed25519_password.key'),",
                "+            _support(\"test_ed25519_password.key\"),",
                "             # NOTE: not a bytes. Amusingly, the test above for same key DOES",
                "             # explicitly cast to bytes...code smell!",
                "-            'abc123',",
                "+            \"abc123\",",
                "         )",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index a86fca5d..87c57340 100644",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -191,10 +191,12 @@ class TestSFTP(object):",
                "             # first check that the normal rename works as specified",
                "-            with sftp.open(sftp.FOLDER + '/a', 'w') as f:",
                "-                f.write('one')",
                "-            sftp.rename(sftp.FOLDER + '/a', sftp.FOLDER + '/b')",
                "-            with sftp.open(sftp.FOLDER + '/a', 'w') as f:",
                "-                f.write('two')",
                "+            with sftp.open(sftp.FOLDER + \"/a\", \"w\") as f:",
                "+                f.write(\"one\")",
                "+            sftp.rename(sftp.FOLDER + \"/a\", sftp.FOLDER + \"/b\")",
                "+            with sftp.open(sftp.FOLDER + \"/a\", \"w\") as f:",
                "+                f.write(\"two\")",
                "             try:",
                "-                sftp.rename(sftp.FOLDER + '/a', sftp.FOLDER + '/b')",
                "-                self.assertTrue(False, 'no exception when rename-ing onto existing file')",
                "+                sftp.rename(sftp.FOLDER + \"/a\", sftp.FOLDER + \"/b\")",
                "+                self.assertTrue(",
                "+                    False, \"no exception when rename-ing onto existing file\"",
                "+                )",
                "             except (OSError, IOError):",
                "@@ -203,4 +205,4 @@ class TestSFTP(object):",
                "             # now check with the posix_rename",
                "-            sftp.posix_rename(sftp.FOLDER + '/a', sftp.FOLDER + '/b')",
                "-            with sftp.open(sftp.FOLDER + '/b', 'r') as f:",
                "+            sftp.posix_rename(sftp.FOLDER + \"/a\", sftp.FOLDER + \"/b\")",
                "+            with sftp.open(sftp.FOLDER + \"/b\", \"r\") as f:",
                "                 data = u(f.read())",
                "@@ -211,3 +213,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/a')",
                "+                sftp.remove(sftp.FOLDER + \"/a\")",
                "             except:",
                "@@ -215,3 +217,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/b')",
                "+                sftp.remove(sftp.FOLDER + \"/b\")",
                "             except:",
                "@@ -219,3 +221,2 @@ class TestSFTP(object):",
                "-",
                "     def test_6_folder(self, sftp):"
            ],
            "changed_files": [
                "paramiko/auth_handler.py",
                "paramiko/channel.py",
                "paramiko/ecdsakey.py",
                "paramiko/ed25519key.py",
                "paramiko/hostkeys.py",
                "paramiko/kex_ecdh_nist.py",
                "paramiko/kex_gss.py",
                "paramiko/rsakey.py",
                "paramiko/sftp_client.py",
                "paramiko/sftp_server.py",
                "paramiko/transport.py",
                "setup.py",
                "tests/stub_sftp.py",
                "tests/test_auth.py",
                "tests/test_client.py",
                "tests/test_kex.py",
                "tests/test_pkey.py",
                "tests/test_sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: server",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4e31612cfbcd7cb333ac54571f11dd5593b15d94",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537224682,
            "hunks": 1850,
            "message": "Blacken 2.0 with black 18.6b4",
            "diff": [
                "diff --git a/demos/demo.py b/demos/demo.py",
                "index fff61784..c9b0a5f5 100755",
                "--- a/demos/demo.py",
                "+++ b/demos/demo.py",
                "@@ -33,2 +33,3 @@ from paramiko.py3compat import input",
                " import paramiko",
                "+",
                " try:",
                "@@ -44,3 +45,3 @@ def agent_auth(transport, username):",
                "     \"\"\"",
                "-    ",
                "+",
                "     agent = paramiko.Agent()",
                "@@ -49,11 +50,11 @@ def agent_auth(transport, username):",
                "         return",
                "-        ",
                "+",
                "     for key in agent_keys:",
                "-        print('Trying ssh-agent key %s' % hexlify(key.get_fingerprint()))",
                "+        print(\"Trying ssh-agent key %s\" % hexlify(key.get_fingerprint()))",
                "         try:",
                "             transport.auth_publickey(username, key)",
                "-            print('... success!')",
                "+            print(\"... success!\")",
                "             return",
                "         except paramiko.SSHException:",
                "-            print('... nope.')",
                "+            print(\"... nope.\")",
                "@@ -61,4 +62,6 @@ def agent_auth(transport, username):",
                " def manual_auth(username, hostname):",
                "-    default_auth = 'p'",
                "-    auth = input('Auth by (p)assword, (r)sa key, or (d)ss key? [%s] ' % default_auth)",
                "+    default_auth = \"p\"",
                "+    auth = input(",
                "+        \"Auth by (p)assword, (r)sa key, or (d)ss key? [%s] \" % default_auth",
                "+    )",
                "     if len(auth) == 0:",
                "@@ -66,5 +69,5 @@ def manual_auth(username, hostname):",
                "-    if auth == 'r':",
                "-        default_path = os.path.join(os.environ['HOME'], '.ssh', 'id_rsa')",
                "-        path = input('RSA key [%s]: ' % default_path)",
                "+    if auth == \"r\":",
                "+        default_path = os.path.join(os.environ[\"HOME\"], \".ssh\", \"id_rsa\")",
                "+        path = input(\"RSA key [%s]: \" % default_path)",
                "         if len(path) == 0:",
                "@@ -74,8 +77,8 @@ def manual_auth(username, hostname):",
                "         except paramiko.PasswordRequiredException:",
                "-            password = getpass.getpass('RSA key password: ')",
                "+            password = getpass.getpass(\"RSA key password: \")",
                "             key = paramiko.RSAKey.from_private_key_file(path, password)",
                "         t.auth_publickey(username, key)",
                "-    elif auth == 'd':",
                "-        default_path = os.path.join(os.environ['HOME'], '.ssh', 'id_dsa')",
                "-        path = input('DSS key [%s]: ' % default_path)",
                "+    elif auth == \"d\":",
                "+        default_path = os.path.join(os.environ[\"HOME\"], \".ssh\", \"id_dsa\")",
                "+        path = input(\"DSS key [%s]: \" % default_path)",
                "         if len(path) == 0:",
                "@@ -85,3 +88,3 @@ def manual_auth(username, hostname):",
                "         except paramiko.PasswordRequiredException:",
                "-            password = getpass.getpass('DSS key password: ')",
                "+            password = getpass.getpass(\"DSS key password: \")",
                "             key = paramiko.DSSKey.from_private_key_file(path, password)",
                "@@ -89,3 +92,3 @@ def manual_auth(username, hostname):",
                "     else:",
                "-        pw = getpass.getpass('Password for %s@%s: ' % (username, hostname))",
                "+        pw = getpass.getpass(\"Password for %s@%s: \" % (username, hostname))",
                "         t.auth_password(username, pw)",
                "@@ -94,17 +97,17 @@ def manual_auth(username, hostname):",
                " # setup logging",
                "-paramiko.util.log_to_file('demo.log')",
                "+paramiko.util.log_to_file(\"demo.log\")",
                "-username = ''",
                "+username = \"\"",
                " if len(sys.argv) > 1:",
                "     hostname = sys.argv[1]",
                "-    if hostname.find('@') >= 0:",
                "-        username, hostname = hostname.split('@')",
                "+    if hostname.find(\"@\") >= 0:",
                "+        username, hostname = hostname.split(\"@\")",
                " else:",
                "-    hostname = input('Hostname: ')",
                "+    hostname = input(\"Hostname: \")",
                " if len(hostname) == 0:",
                "-    print('*** Hostname required.')",
                "+    print(\"*** Hostname required.\")",
                "     sys.exit(1)",
                " port = 22",
                "-if hostname.find(':') >= 0:",
                "-    hostname, portstr = hostname.split(':')",
                "+if hostname.find(\":\") >= 0:",
                "+    hostname, portstr = hostname.split(\":\")",
                "     port = int(portstr)",
                "@@ -116,3 +119,3 @@ try:",
                " except Exception as e:",
                "-    print('*** Connect failed: ' + str(e))",
                "+    print(\"*** Connect failed: \" + str(e))",
                "     traceback.print_exc()",
                "@@ -125,3 +128,3 @@ try:",
                "     except paramiko.SSHException:",
                "-        print('*** SSH negotiation failed.')",
                "+        print(\"*** SSH negotiation failed.\")",
                "         sys.exit(1)",
                "@@ -129,8 +132,12 @@ try:",
                "     try:",
                "-        keys = paramiko.util.load_host_keys(os.path.expanduser('~/.ssh/known_hosts'))",
                "+        keys = paramiko.util.load_host_keys(",
                "+            os.path.expanduser(\"~/.ssh/known_hosts\")",
                "+        )",
                "     except IOError:",
                "         try:",
                "-            keys = paramiko.util.load_host_keys(os.path.expanduser('~/ssh/known_hosts'))",
                "+            keys = paramiko.util.load_host_keys(",
                "+                os.path.expanduser(\"~/ssh/known_hosts\")",
                "+            )",
                "         except IOError:",
                "-            print('*** Unable to open host keys file')",
                "+            print(\"*** Unable to open host keys file\")",
                "             keys = {}",
                "@@ -140,15 +147,15 @@ try:",
                "     if hostname not in keys:",
                "-        print('*** WARNING: Unknown host key!')",
                "+        print(\"*** WARNING: Unknown host key!\")",
                "     elif key.get_name() not in keys[hostname]:",
                "-        print('*** WARNING: Unknown host key!')",
                "+        print(\"*** WARNING: Unknown host key!\")",
                "     elif keys[hostname][key.get_name()] != key:",
                "-        print('*** WARNING: Host key has changed!!!')",
                "+        print(\"*** WARNING: Host key has changed!!!\")",
                "         sys.exit(1)",
                "     else:",
                "-        print('*** Host key OK.')",
                "+        print(\"*** Host key OK.\")",
                "     # get username",
                "-    if username == '':",
                "+    if username == \"\":",
                "         default_username = getpass.getuser()",
                "-        username = input('Username [%s]: ' % default_username)",
                "+        username = input(\"Username [%s]: \" % default_username)",
                "         if len(username) == 0:",
                "@@ -160,3 +167,3 @@ try:",
                "     if not t.is_authenticated():",
                "-        print('*** Authentication failed. :(')",
                "+        print(\"*** Authentication failed. :(\")",
                "         t.close()",
                "@@ -167,3 +174,3 @@ try:",
                "     chan.invoke_shell()",
                "-    print('*** Here we go!\\n')",
                "+    print(\"*** Here we go!\\n\")",
                "     interactive.interactive_shell(chan)",
                "@@ -173,3 +180,3 @@ try:",
                " except Exception as e:",
                "-    print('*** Caught exception: ' + str(e.__class__) + ': ' + str(e))",
                "+    print(\"*** Caught exception: \" + str(e.__class__) + \": \" + str(e))",
                "     traceback.print_exc()",
                "@@ -180,3 +187 @@ except Exception as e:",
                "     sys.exit(1)",
                "-",
                "-",
                "diff --git a/demos/demo_keygen.py b/demos/demo_keygen.py",
                "index 860ee4e9..6a80272d 100755",
                "--- a/demos/demo_keygen.py",
                "+++ b/demos/demo_keygen.py",
                "@@ -30,3 +30,3 @@ from paramiko.py3compat import u",
                "-usage=\"\"\"",
                "+usage = \"\"\"",
                " %prog [-v] [-b bits] -t type [-N new_passphrase] [-f output_keyfile]\"\"\"",
                "@@ -37,9 +37,7 @@ default_values = {",
                "     \"filename\": \"output\",",
                "-    \"comment\": \"\"",
                "+    \"comment\": \"\",",
                " }",
                "-key_dispatch_table = {",
                "-    'dsa': DSSKey,",
                "-    'rsa': RSAKey,",
                "-}",
                "+key_dispatch_table = {\"dsa\": DSSKey, \"rsa\": RSAKey}",
                "+",
                "@@ -48,40 +46,77 @@ def progress(arg=None):",
                "     if not arg:",
                "-        sys.stdout.write('0%\\x08\\x08\\x08 ')",
                "+        sys.stdout.write(\"0%\\x08\\x08\\x08 \")",
                "         sys.stdout.flush()",
                "-    elif arg[0] == 'p':",
                "-        sys.stdout.write('25%\\x08\\x08\\x08\\x08 ')",
                "+    elif arg[0] == \"p\":",
                "+        sys.stdout.write(\"25%\\x08\\x08\\x08\\x08 \")",
                "         sys.stdout.flush()",
                "-    elif arg[0] == 'h':",
                "-        sys.stdout.write('50%\\x08\\x08\\x08\\x08 ')",
                "+    elif arg[0] == \"h\":",
                "+        sys.stdout.write(\"50%\\x08\\x08\\x08\\x08 \")",
                "         sys.stdout.flush()",
                "-    elif arg[0] == 'x':",
                "-        sys.stdout.write('75%\\x08\\x08\\x08\\x08 ')",
                "+    elif arg[0] == \"x\":",
                "+        sys.stdout.write(\"75%\\x08\\x08\\x08\\x08 \")",
                "         sys.stdout.flush()",
                "-if __name__ == '__main__':",
                "-    phrase=None",
                "-    pfunc=None",
                "+if __name__ == \"__main__\":",
                "+",
                "+    phrase = None",
                "+    pfunc = None",
                "     parser = OptionParser(usage=usage)",
                "-    parser.add_option(\"-t\", \"--type\", type=\"string\", dest=\"ktype\",",
                "+    parser.add_option(",
                "+        \"-t\",",
                "+        \"--type\",",
                "+        type=\"string\",",
                "+        dest=\"ktype\",",
                "         help=\"Specify type of key to create (dsa or rsa)\",",
                "-        metavar=\"ktype\", default=default_values[\"ktype\"])",
                "-    parser.add_option(\"-b\", \"--bits\", type=\"int\", dest=\"bits\",",
                "-        help=\"Number of bits in the key to create\", metavar=\"bits\",",
                "-        default=default_values[\"bits\"])",
                "-    parser.add_option(\"-N\", \"--new-passphrase\", dest=\"newphrase\",",
                "-        help=\"Provide new passphrase\", metavar=\"phrase\")",
                "-    parser.add_option(\"-P\", \"--old-passphrase\", dest=\"oldphrase\",",
                "-        help=\"Provide old passphrase\", metavar=\"phrase\")",
                "-    parser.add_option(\"-f\", \"--filename\", type=\"string\", dest=\"filename\",",
                "-        help=\"Filename of the key file\", metavar=\"filename\",",
                "-        default=default_values[\"filename\"])",
                "-    parser.add_option(\"-q\", \"--quiet\", default=False, action=\"store_false\",",
                "-        help=\"Quiet\")",
                "-    parser.add_option(\"-v\", \"--verbose\", default=False, action=\"store_true\",",
                "-        help=\"Verbose\")",
                "-    parser.add_option(\"-C\", \"--comment\", type=\"string\", dest=\"comment\",",
                "-        help=\"Provide a new comment\", metavar=\"comment\",",
                "-        default=default_values[\"comment\"])",
                "+        metavar=\"ktype\",",
                "+        default=default_values[\"ktype\"],",
                "+    )",
                "+    parser.add_option(",
                "+        \"-b\",",
                "+        \"--bits\",",
                "+        type=\"int\",",
                "+        dest=\"bits\",",
                "+        help=\"Number of bits in the key to create\",",
                "+        metavar=\"bits\",",
                "+        default=default_values[\"bits\"],",
                "+    )",
                "+    parser.add_option(",
                "+        \"-N\",",
                "+        \"--new-passphrase\",",
                "+        dest=\"newphrase\",",
                "+        help=\"Provide new passphrase\",",
                "+        metavar=\"phrase\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-P\",",
                "+        \"--old-passphrase\",",
                "+        dest=\"oldphrase\",",
                "+        help=\"Provide old passphrase\",",
                "+        metavar=\"phrase\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-f\",",
                "+        \"--filename\",",
                "+        type=\"string\",",
                "+        dest=\"filename\",",
                "+        help=\"Filename of the key file\",",
                "+        metavar=\"filename\",",
                "+        default=default_values[\"filename\"],",
                "+    )",
                "+    parser.add_option(",
                "+        \"-q\", \"--quiet\", default=False, action=\"store_false\", help=\"Quiet\"",
                "+    )",
                "+    parser.add_option(",
                "+        \"-v\", \"--verbose\", default=False, action=\"store_true\", help=\"Verbose\"",
                "+    )",
                "+    parser.add_option(",
                "+        \"-C\",",
                "+        \"--comment\",",
                "+        type=\"string\",",
                "+        dest=\"comment\",",
                "+        help=\"Provide a new comment\",",
                "+        metavar=\"comment\",",
                "+        default=default_values[\"comment\"],",
                "+    )",
                "@@ -97,3 +132,3 @@ if __name__ == '__main__':",
                "     if options.newphrase:",
                "-        phrase = getattr(options, 'newphrase')",
                "+        phrase = getattr(options, \"newphrase\")",
                "@@ -101,6 +136,9 @@ if __name__ == '__main__':",
                "         pfunc = progress",
                "-        sys.stdout.write(\"Generating priv/pub %s %d bits key pair (%s/%s.pub)...\" % (ktype, bits, filename, filename))",
                "+        sys.stdout.write(",
                "+            \"Generating priv/pub %s %d bits key pair (%s/%s.pub)...\"",
                "+            % (ktype, bits, filename, filename)",
                "+        )",
                "         sys.stdout.flush()",
                "-    if ktype == 'dsa' and bits > 1024:",
                "+    if ktype == \"dsa\" and bits > 1024:",
                "         raise SSHException(\"DSA Keys must be 1024 bits\")",
                "@@ -108,3 +146,5 @@ if __name__ == '__main__':",
                "     if ktype not in key_dispatch_table:",
                "-        raise SSHException(\"Unknown %s algorithm to generate keys pair\" % ktype)",
                "+        raise SSHException(",
                "+            \"Unknown %s algorithm to generate keys pair\" % ktype",
                "+        )",
                "@@ -116,3 +156,3 @@ if __name__ == '__main__':",
                "     pub = key_dispatch_table[ktype](filename=filename, password=phrase)",
                "-    with open(\"%s.pub\" % filename, 'w') as f:",
                "+    with open(\"%s.pub\" % filename, \"w\") as f:",
                "         f.write(\"%s %s\" % (pub.get_name(), pub.get_base64()))",
                "@@ -125,2 +165,10 @@ if __name__ == '__main__':",
                "     hash = u(hexlify(pub.get_fingerprint()))",
                "-    print(\"Fingerprint: %d %s %s.pub (%s)\" % (bits, \":\".join([ hash[i:2+i] for i in range(0, len(hash), 2)]), filename, ktype.upper()))",
                "+    print(",
                "+        \"Fingerprint: %d %s %s.pub (%s)\"",
                "+        % (",
                "+            bits,",
                "+            \":\".join([hash[i : 2 + i] for i in range(0, len(hash), 2)]),",
                "+            filename,",
                "+            ktype.upper(),",
                "+        )",
                "+    )",
                "diff --git a/demos/demo_server.py b/demos/demo_server.py",
                "index 3a7ec854..313e5fb2 100644",
                "--- a/demos/demo_server.py",
                "+++ b/demos/demo_server.py",
                "@@ -33,17 +33,19 @@ from paramiko.py3compat import b, u, decodebytes",
                " # setup logging",
                "-paramiko.util.log_to_file('demo_server.log')",
                "+paramiko.util.log_to_file(\"demo_server.log\")",
                "-host_key = paramiko.RSAKey(filename='test_rsa.key')",
                "-#host_key = paramiko.DSSKey(filename='test_dss.key')",
                "+host_key = paramiko.RSAKey(filename=\"test_rsa.key\")",
                "+# host_key = paramiko.DSSKey(filename='test_dss.key')",
                "-print('Read key: ' + u(hexlify(host_key.get_fingerprint())))",
                "+print(\"Read key: \" + u(hexlify(host_key.get_fingerprint())))",
                "-class Server (paramiko.ServerInterface):",
                "+class Server(paramiko.ServerInterface):",
                "     # 'data' is the output of base64.b64encode(key)",
                "     # (using the \"user_rsa_key\" files)",
                "-    data = (b'AAAAB3NzaC1yc2EAAAABIwAAAIEAyO4it3fHlmGZWJaGrfeHOVY7RWO3P9M7hp'",
                "-            b'fAu7jJ2d7eothvfeuoRFtJwhUmZDluRdFyhFY/hFAh76PJKGAusIqIQKlkJxMC'",
                "-            b'KDqIexkgHAfID/6mqvmnSJf0b5W8v5h2pI/stOSwTQ+pxVhwJ9ctYDhRSlF0iT'",
                "-            b'UWT10hcuO4Ks8=')",
                "+    data = (",
                "+        b\"AAAAB3NzaC1yc2EAAAABIwAAAIEAyO4it3fHlmGZWJaGrfeHOVY7RWO3P9M7hp\"",
                "+        b\"fAu7jJ2d7eothvfeuoRFtJwhUmZDluRdFyhFY/hFAh76PJKGAusIqIQKlkJxMC\"",
                "+        b\"KDqIexkgHAfID/6mqvmnSJf0b5W8v5h2pI/stOSwTQ+pxVhwJ9ctYDhRSlF0iT\"",
                "+        b\"UWT10hcuO4Ks8=\"",
                "+    )",
                "     good_pub_key = paramiko.RSAKey(data=decodebytes(data))",
                "@@ -54,3 +56,3 @@ class Server (paramiko.ServerInterface):",
                "     def check_channel_request(self, kind, chanid):",
                "-        if kind == 'session':",
                "+        if kind == \"session\":",
                "             return paramiko.OPEN_SUCCEEDED",
                "@@ -59,3 +61,3 @@ class Server (paramiko.ServerInterface):",
                "     def check_auth_password(self, username, password):",
                "-        if (username == 'robey') and (password == 'foo'):",
                "+        if (username == \"robey\") and (password == \"foo\"):",
                "             return paramiko.AUTH_SUCCESSFUL",
                "@@ -64,10 +66,10 @@ class Server (paramiko.ServerInterface):",
                "     def check_auth_publickey(self, username, key):",
                "-        print('Auth attempt with key: ' + u(hexlify(key.get_fingerprint())))",
                "-        if (username == 'robey') and (key == self.good_pub_key):",
                "+        print(\"Auth attempt with key: \" + u(hexlify(key.get_fingerprint())))",
                "+        if (username == \"robey\") and (key == self.good_pub_key):",
                "             return paramiko.AUTH_SUCCESSFUL",
                "         return paramiko.AUTH_FAILED",
                "-    ",
                "-    def check_auth_gssapi_with_mic(self, username,",
                "-                                   gss_authenticated=paramiko.AUTH_FAILED,",
                "-                                   cc_file=None):",
                "+",
                "+    def check_auth_gssapi_with_mic(",
                "+        self, username, gss_authenticated=paramiko.AUTH_FAILED, cc_file=None",
                "+    ):",
                "         \"\"\"",
                "@@ -90,5 +92,5 @@ class Server (paramiko.ServerInterface):",
                "-    def check_auth_gssapi_keyex(self, username,",
                "-                                gss_authenticated=paramiko.AUTH_FAILED,",
                "-                                cc_file=None):",
                "+    def check_auth_gssapi_keyex(",
                "+        self, username, gss_authenticated=paramiko.AUTH_FAILED, cc_file=None",
                "+    ):",
                "         if gss_authenticated == paramiko.AUTH_SUCCESSFUL:",
                "@@ -101,3 +103,3 @@ class Server (paramiko.ServerInterface):",
                "     def get_allowed_auths(self, username):",
                "-        return 'gssapi-keyex,gssapi-with-mic,password,publickey'",
                "+        return \"gssapi-keyex,gssapi-with-mic,password,publickey\"",
                "@@ -107,4 +109,5 @@ class Server (paramiko.ServerInterface):",
                "-    def check_channel_pty_request(self, channel, term, width, height, pixelwidth,",
                "-                                  pixelheight, modes):",
                "+    def check_channel_pty_request(",
                "+        self, channel, term, width, height, pixelwidth, pixelheight, modes",
                "+    ):",
                "         return True",
                "@@ -118,5 +121,5 @@ try:",
                "     sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)",
                "-    sock.bind(('', 2200))",
                "+    sock.bind((\"\", 2200))",
                " except Exception as e:",
                "-    print('*** Bind failed: ' + str(e))",
                "+    print(\"*** Bind failed: \" + str(e))",
                "     traceback.print_exc()",
                "@@ -126,6 +129,6 @@ try:",
                "     sock.listen(100)",
                "-    print('Listening for connection ...')",
                "+    print(\"Listening for connection ...\")",
                "     client, addr = sock.accept()",
                " except Exception as e:",
                "-    print('*** Listen/accept failed: ' + str(e))",
                "+    print(\"*** Listen/accept failed: \" + str(e))",
                "     traceback.print_exc()",
                "@@ -133,3 +136,3 @@ except Exception as e:",
                "-print('Got a connection!')",
                "+print(\"Got a connection!\")",
                "@@ -141,3 +144,3 @@ try:",
                "     except:",
                "-        print('(Failed to load moduli -- gex will be unsupported.)')",
                "+        print(\"(Failed to load moduli -- gex will be unsupported.)\")",
                "         raise",
                "@@ -148,3 +151,3 @@ try:",
                "     except paramiko.SSHException:",
                "-        print('*** SSH negotiation failed.')",
                "+        print(\"*** SSH negotiation failed.\")",
                "         sys.exit(1)",
                "@@ -154,5 +157,5 @@ try:",
                "     if chan is None:",
                "-        print('*** No channel.')",
                "+        print(\"*** No channel.\")",
                "         sys.exit(1)",
                "-    print('Authenticated!')",
                "+    print(\"Authenticated!\")",
                "@@ -160,12 +163,14 @@ try:",
                "     if not server.event.is_set():",
                "-        print('*** Client never asked for a shell.')",
                "+        print(\"*** Client never asked for a shell.\")",
                "         sys.exit(1)",
                "-    chan.send('\\r\\n\\r\\nWelcome to my dorky little BBS!\\r\\n\\r\\n')",
                "-    chan.send('We are on fire all the time!  Hooray!  Candy corn for everyone!\\r\\n')",
                "-    chan.send('Happy birthday to Robot Dave!\\r\\n\\r\\n')",
                "-    chan.send('Username: ')",
                "-    f = chan.makefile('rU')",
                "-    username = f.readline().strip('\\r\\n')",
                "-    chan.send('\\r\\nI don\\'t like you, ' + username + '.\\r\\n')",
                "+    chan.send(\"\\r\\n\\r\\nWelcome to my dorky little BBS!\\r\\n\\r\\n\")",
                "+    chan.send(",
                "+        \"We are on fire all the time!  Hooray!  Candy corn for everyone!\\r\\n\"",
                "+    )",
                "+    chan.send(\"Happy birthday to Robot Dave!\\r\\n\\r\\n\")",
                "+    chan.send(\"Username: \")",
                "+    f = chan.makefile(\"rU\")",
                "+    username = f.readline().strip(\"\\r\\n\")",
                "+    chan.send(\"\\r\\nI don't like you, \" + username + \".\\r\\n\")",
                "     chan.close()",
                "@@ -173,3 +178,3 @@ try:",
                " except Exception as e:",
                "-    print('*** Caught exception: ' + str(e.__class__) + ': ' + str(e))",
                "+    print(\"*** Caught exception: \" + str(e.__class__) + \": \" + str(e))",
                "     traceback.print_exc()",
                "@@ -180,2 +185 @@ except Exception as e:",
                "     sys.exit(1)",
                "-",
                "diff --git a/demos/demo_sftp.py b/demos/demo_sftp.py",
                "index 2cb44701..7f6a002e 100644",
                "--- a/demos/demo_sftp.py",
                "+++ b/demos/demo_sftp.py",
                "@@ -34,6 +34,6 @@ from paramiko.py3compat import input",
                " # setup logging",
                "-paramiko.util.log_to_file('demo_sftp.log')",
                "+paramiko.util.log_to_file(\"demo_sftp.log\")",
                " # Paramiko client configuration",
                "-UseGSSAPI = True             # enable GSS-API / SSPI authentication",
                "+UseGSSAPI = True  # enable GSS-API / SSPI authentication",
                " DoGSSAPIKeyExchange = True",
                "@@ -42,15 +42,15 @@ Port = 22",
                " # get hostname",
                "-username = ''",
                "+username = \"\"",
                " if len(sys.argv) > 1:",
                "     hostname = sys.argv[1]",
                "-    if hostname.find('@') >= 0:",
                "-        username, hostname = hostname.split('@')",
                "+    if hostname.find(\"@\") >= 0:",
                "+        username, hostname = hostname.split(\"@\")",
                " else:",
                "-    hostname = input('Hostname: ')",
                "+    hostname = input(\"Hostname: \")",
                " if len(hostname) == 0:",
                "-    print('*** Hostname required.')",
                "+    print(\"*** Hostname required.\")",
                "     sys.exit(1)",
                "-if hostname.find(':') >= 0:",
                "-    hostname, portstr = hostname.split(':')",
                "+if hostname.find(\":\") >= 0:",
                "+    hostname, portstr = hostname.split(\":\")",
                "     Port = int(portstr)",
                "@@ -59,5 +59,5 @@ if hostname.find(':') >= 0:",
                " # get username",
                "-if username == '':",
                "+if username == \"\":",
                "     default_username = getpass.getuser()",
                "-    username = input('Username [%s]: ' % default_username)",
                "+    username = input(\"Username [%s]: \" % default_username)",
                "     if len(username) == 0:",
                "@@ -65,3 +65,3 @@ if username == '':",
                " if not UseGSSAPI:",
                "-    password = getpass.getpass('Password for %s@%s: ' % (username, hostname))",
                "+    password = getpass.getpass(\"Password for %s@%s: \" % (username, hostname))",
                " else:",
                "@@ -74,3 +74,5 @@ hostkey = None",
                " try:",
                "-    host_keys = paramiko.util.load_host_keys(os.path.expanduser('~/.ssh/known_hosts'))",
                "+    host_keys = paramiko.util.load_host_keys(",
                "+        os.path.expanduser(\"~/.ssh/known_hosts\")",
                "+    )",
                " except IOError:",
                "@@ -78,5 +80,7 @@ except IOError:",
                "         # try ~/ssh/ too, because windows can't have a folder named ~/.ssh/",
                "-        host_keys = paramiko.util.load_host_keys(os.path.expanduser('~/ssh/known_hosts'))",
                "+        host_keys = paramiko.util.load_host_keys(",
                "+            os.path.expanduser(\"~/ssh/known_hosts\")",
                "+        )",
                "     except IOError:",
                "-        print('*** Unable to open host keys file')",
                "+        print(\"*** Unable to open host keys file\")",
                "         host_keys = {}",
                "@@ -86,3 +90,3 @@ if hostname in host_keys:",
                "     hostkey = host_keys[hostname][hostkeytype]",
                "-    print('Using host key of type %s' % hostkeytype)",
                "+    print(\"Using host key of type %s\" % hostkeytype)",
                "@@ -92,4 +96,10 @@ try:",
                "     t = paramiko.Transport((hostname, Port))",
                "-    t.connect(hostkey, username, password, gss_host=socket.getfqdn(hostname),",
                "-              gss_auth=UseGSSAPI, gss_kex=DoGSSAPIKeyExchange)",
                "+    t.connect(",
                "+        hostkey,",
                "+        username,",
                "+        password,",
                "+        gss_host=socket.getfqdn(hostname),",
                "+        gss_auth=UseGSSAPI,",
                "+        gss_kex=DoGSSAPIKeyExchange,",
                "+    )",
                "     sftp = paramiko.SFTPClient.from_transport(t)",
                "@@ -97,3 +107,3 @@ try:",
                "     # dirlist on remote host",
                "-    dirlist = sftp.listdir('.')",
                "+    dirlist = sftp.listdir(\".\")",
                "     print(\"Dirlist: %s\" % dirlist)",
                "@@ -104,20 +114,20 @@ try:",
                "     except IOError:",
                "-        print('(assuming demo_sftp_folder/ already exists)')",
                "-    with sftp.open('demo_sftp_folder/README', 'w') as f:",
                "-        f.write('This was created by demo_sftp.py.\\n')",
                "-    with open('demo_sftp.py', 'r') as f:",
                "+        print(\"(assuming demo_sftp_folder/ already exists)\")",
                "+    with sftp.open(\"demo_sftp_folder/README\", \"w\") as f:",
                "+        f.write(\"This was created by demo_sftp.py.\\n\")",
                "+    with open(\"demo_sftp.py\", \"r\") as f:",
                "         data = f.read()",
                "-    sftp.open('demo_sftp_folder/demo_sftp.py', 'w').write(data)",
                "-    print('created demo_sftp_folder/ on the server')",
                "-    ",
                "+    sftp.open(\"demo_sftp_folder/demo_sftp.py\", \"w\").write(data)",
                "+    print(\"created demo_sftp_folder/ on the server\")",
                "+",
                "     # copy the README back here",
                "-    with sftp.open('demo_sftp_folder/README', 'r') as f:",
                "+    with sftp.open(\"demo_sftp_folder/README\", \"r\") as f:",
                "         data = f.read()",
                "-    with open('README_demo_sftp', 'w') as f:",
                "+    with open(\"README_demo_sftp\", \"w\") as f:",
                "         f.write(data)",
                "-    print('copied README back here')",
                "-    ",
                "+    print(\"copied README back here\")",
                "+",
                "     # BETTER: use the get() and put() methods",
                "-    sftp.put('demo_sftp.py', 'demo_sftp_folder/demo_sftp.py')",
                "-    sftp.get('demo_sftp_folder/README', 'README_demo_sftp')",
                "+    sftp.put(\"demo_sftp.py\", \"demo_sftp_folder/demo_sftp.py\")",
                "+    sftp.get(\"demo_sftp_folder/README\", \"README_demo_sftp\")",
                "@@ -126,3 +136,3 @@ try:",
                " except Exception as e:",
                "-    print('*** Caught exception: %s: %s' % (e.__class__, e))",
                "+    print(\"*** Caught exception: %s: %s\" % (e.__class__, e))",
                "     traceback.print_exc()",
                "diff --git a/demos/demo_simple.py b/demos/demo_simple.py",
                "index 7ae3d8c8..6a933dcd 100644",
                "--- a/demos/demo_simple.py",
                "+++ b/demos/demo_simple.py",
                "@@ -30,2 +30,3 @@ from paramiko.py3compat import input",
                " import paramiko",
                "+",
                " try:",
                "@@ -37,6 +38,10 @@ except ImportError:",
                " # setup logging",
                "-paramiko.util.log_to_file('demo_simple.log')",
                "+paramiko.util.log_to_file(\"demo_simple.log\")",
                " # Paramiko client configuration",
                "-UseGSSAPI = paramiko.GSS_AUTH_AVAILABLE             # enable \"gssapi-with-mic\" authentication, if supported by your python installation",
                "-DoGSSAPIKeyExchange = paramiko.GSS_AUTH_AVAILABLE   # enable \"gssapi-kex\" key exchange, if supported by your python installation",
                "+UseGSSAPI = (",
                "+    paramiko.GSS_AUTH_AVAILABLE",
                "+)  # enable \"gssapi-with-mic\" authentication, if supported by your python installation",
                "+DoGSSAPIKeyExchange = (",
                "+    paramiko.GSS_AUTH_AVAILABLE",
                "+)  # enable \"gssapi-kex\" key exchange, if supported by your python installation",
                " # UseGSSAPI = False",
                "@@ -46,15 +51,15 @@ port = 22",
                " # get hostname",
                "-username = ''",
                "+username = \"\"",
                " if len(sys.argv) > 1:",
                "     hostname = sys.argv[1]",
                "-    if hostname.find('@') >= 0:",
                "-        username, hostname = hostname.split('@')",
                "+    if hostname.find(\"@\") >= 0:",
                "+        username, hostname = hostname.split(\"@\")",
                " else:",
                "-    hostname = input('Hostname: ')",
                "+    hostname = input(\"Hostname: \")",
                " if len(hostname) == 0:",
                "-    print('*** Hostname required.')",
                "+    print(\"*** Hostname required.\")",
                "     sys.exit(1)",
                "-if hostname.find(':') >= 0:",
                "-    hostname, portstr = hostname.split(':')",
                "+if hostname.find(\":\") >= 0:",
                "+    hostname, portstr = hostname.split(\":\")",
                "     port = int(portstr)",
                "@@ -63,5 +68,5 @@ if hostname.find(':') >= 0:",
                " # get username",
                "-if username == '':",
                "+if username == \"\":",
                "     default_username = getpass.getuser()",
                "-    username = input('Username [%s]: ' % default_username)",
                "+    username = input(\"Username [%s]: \" % default_username)",
                "     if len(username) == 0:",
                "@@ -69,3 +74,3 @@ if username == '':",
                " if not UseGSSAPI and not DoGSSAPIKeyExchange:",
                "-    password = getpass.getpass('Password for %s@%s: ' % (username, hostname))",
                "+    password = getpass.getpass(\"Password for %s@%s: \" % (username, hostname))",
                "@@ -77,3 +82,3 @@ try:",
                "     client.set_missing_host_key_policy(paramiko.WarningPolicy())",
                "-    print('*** Connecting...')",
                "+    print(\"*** Connecting...\")",
                "     if not UseGSSAPI and not DoGSSAPIKeyExchange:",
                "@@ -84,7 +89,14 @@ try:",
                "         try:",
                "-            client.connect(hostname, port, username, gss_auth=UseGSSAPI,",
                "-                           gss_kex=DoGSSAPIKeyExchange)",
                "+            client.connect(",
                "+                hostname,",
                "+                port,",
                "+                username,",
                "+                gss_auth=UseGSSAPI,",
                "+                gss_kex=DoGSSAPIKeyExchange,",
                "+            )",
                "         except Exception:",
                "             # traceback.print_exc()",
                "-            password = getpass.getpass('Password for %s@%s: ' % (username, hostname))",
                "+            password = getpass.getpass(",
                "+                \"Password for %s@%s: \" % (username, hostname)",
                "+            )",
                "             client.connect(hostname, port, username, password)",
                "@@ -93,3 +105,3 @@ try:",
                "     print(repr(client.get_transport()))",
                "-    print('*** Here we go!\\n')",
                "+    print(\"*** Here we go!\\n\")",
                "     interactive.interactive_shell(chan)",
                "@@ -99,3 +111,3 @@ try:",
                " except Exception as e:",
                "-    print('*** Caught exception: %s: %s' % (e.__class__, e))",
                "+    print(\"*** Caught exception: %s: %s\" % (e.__class__, e))",
                "     traceback.print_exc()",
                "diff --git a/demos/forward.py b/demos/forward.py",
                "index 96e1700d..cd9dabf1 100644",
                "--- a/demos/forward.py",
                "+++ b/demos/forward.py",
                "@@ -32,2 +32,3 @@ import socket",
                " import select",
                "+",
                " try:",
                "@@ -48,26 +49,36 @@ g_verbose = True",
                "-class ForwardServer (SocketServer.ThreadingTCPServer):",
                "+class ForwardServer(SocketServer.ThreadingTCPServer):",
                "     daemon_threads = True",
                "     allow_reuse_address = True",
                "-    ",
                "-class Handler (SocketServer.BaseRequestHandler):",
                "+class Handler(SocketServer.BaseRequestHandler):",
                "     def handle(self):",
                "         try:",
                "-            chan = self.ssh_transport.open_channel('direct-tcpip',",
                "-                                                   (self.chain_host, self.chain_port),",
                "-                                                   self.request.getpeername())",
                "+            chan = self.ssh_transport.open_channel(",
                "+                \"direct-tcpip\",",
                "+                (self.chain_host, self.chain_port),",
                "+                self.request.getpeername(),",
                "+            )",
                "         except Exception as e:",
                "-            verbose('Incoming request to %s:%d failed: %s' % (self.chain_host,",
                "-                                                              self.chain_port,",
                "-                                                              repr(e)))",
                "+            verbose(",
                "+                \"Incoming request to %s:%d failed: %s\"",
                "+                % (self.chain_host, self.chain_port, repr(e))",
                "+            )",
                "             return",
                "         if chan is None:",
                "-            verbose('Incoming request to %s:%d was rejected by the SSH server.' %",
                "-                    (self.chain_host, self.chain_port))",
                "+            verbose(",
                "+                \"Incoming request to %s:%d was rejected by the SSH server.\"",
                "+                % (self.chain_host, self.chain_port)",
                "+            )",
                "             return",
                "-        verbose('Connected!  Tunnel open %r -> %r -> %r' % (self.request.getpeername(),",
                "-                                                            chan.getpeername(), (self.chain_host, self.chain_port)))",
                "+        verbose(",
                "+            \"Connected!  Tunnel open %r -> %r -> %r\"",
                "+            % (",
                "+                self.request.getpeername(),",
                "+                chan.getpeername(),",
                "+                (self.chain_host, self.chain_port),",
                "+            )",
                "+        )",
                "         while True:",
                "@@ -84,3 +95,3 @@ class Handler (SocketServer.BaseRequestHandler):",
                "                 self.request.send(data)",
                "-                ",
                "+",
                "         peername = self.request.getpeername()",
                "@@ -88,3 +99,3 @@ class Handler (SocketServer.BaseRequestHandler):",
                "         self.request.close()",
                "-        verbose('Tunnel closed from %r' % (peername,))",
                "+        verbose(\"Tunnel closed from %r\" % (peername,))",
                "@@ -95,3 +106,3 @@ def forward_tunnel(local_port, remote_host, remote_port, transport):",
                "     # server normally.)",
                "-    class SubHander (Handler):",
                "+    class SubHander(Handler):",
                "         chain_host = remote_host",
                "@@ -99,3 +110,4 @@ def forward_tunnel(local_port, remote_host, remote_port, transport):",
                "         ssh_transport = transport",
                "-    ForwardServer(('', local_port), SubHander).serve_forever()",
                "+",
                "+    ForwardServer((\"\", local_port), SubHander).serve_forever()",
                "@@ -116,3 +128,3 @@ def get_host_port(spec, default_port):",
                "     \"parse 'hostname:22' into a host and port, with the port optional\"",
                "-    args = (spec.split(':', 1) + [default_port])[:2]",
                "+    args = (spec.split(\":\", 1) + [default_port])[:2]",
                "     args[1] = int(args[1])",
                "@@ -123,22 +135,70 @@ def parse_options():",
                "     global g_verbose",
                "-    ",
                "-    parser = OptionParser(usage='usage: %prog [options] <ssh-server>[:<server-port>]',",
                "-                          version='%prog 1.0', description=HELP)",
                "-    parser.add_option('-q', '--quiet', action='store_false', dest='verbose', default=True,",
                "-                      help='squelch all informational output')",
                "-    parser.add_option('-p', '--local-port', action='store', type='int', dest='port',",
                "-                      default=DEFAULT_PORT,",
                "-                      help='local port to forward (default: %d)' % DEFAULT_PORT)",
                "-    parser.add_option('-u', '--user', action='store', type='string', dest='user',",
                "-                      default=getpass.getuser(),",
                "-                      help='username for SSH authentication (default: %s)' % getpass.getuser())",
                "-    parser.add_option('-K', '--key', action='store', type='string', dest='keyfile',",
                "-                      default=None,",
                "-                      help='private key file to use for SSH authentication')",
                "-    parser.add_option('', '--no-key', action='store_false', dest='look_for_keys', default=True,",
                "-                      help='don\\'t look for or use a private key file')",
                "-    parser.add_option('-P', '--password', action='store_true', dest='readpass', default=False,",
                "-                      help='read password (for key or password auth) from stdin')",
                "-    parser.add_option('-r', '--remote', action='store', type='string', dest='remote', default=None, metavar='host:port',",
                "-                      help='remote host and port to forward to')",
                "+",
                "+    parser = OptionParser(",
                "+        usage=\"usage: %prog [options] <ssh-server>[:<server-port>]\",",
                "+        version=\"%prog 1.0\",",
                "+        description=HELP,",
                "+    )",
                "+    parser.add_option(",
                "+        \"-q\",",
                "+        \"--quiet\",",
                "+        action=\"store_false\",",
                "+        dest=\"verbose\",",
                "+        default=True,",
                "+        help=\"squelch all informational output\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-p\",",
                "+        \"--local-port\",",
                "+        action=\"store\",",
                "+        type=\"int\",",
                "+        dest=\"port\",",
                "+        default=DEFAULT_PORT,",
                "+        help=\"local port to forward (default: %d)\" % DEFAULT_PORT,",
                "+    )",
                "+    parser.add_option(",
                "+        \"-u\",",
                "+        \"--user\",",
                "+        action=\"store\",",
                "+        type=\"string\",",
                "+        dest=\"user\",",
                "+        default=getpass.getuser(),",
                "+        help=\"username for SSH authentication (default: %s)\"",
                "+        % getpass.getuser(),",
                "+    )",
                "+    parser.add_option(",
                "+        \"-K\",",
                "+        \"--key\",",
                "+        action=\"store\",",
                "+        type=\"string\",",
                "+        dest=\"keyfile\",",
                "+        default=None,",
                "+        help=\"private key file to use for SSH authentication\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"\",",
                "+        \"--no-key\",",
                "+        action=\"store_false\",",
                "+        dest=\"look_for_keys\",",
                "+        default=True,",
                "+        help=\"don't look for or use a private key file\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-P\",",
                "+        \"--password\",",
                "+        action=\"store_true\",",
                "+        dest=\"readpass\",",
                "+        default=False,",
                "+        help=\"read password (for key or password auth) from stdin\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-r\",",
                "+        \"--remote\",",
                "+        action=\"store\",",
                "+        type=\"string\",",
                "+        dest=\"remote\",",
                "+        default=None,",
                "+        metavar=\"host:port\",",
                "+        help=\"remote host and port to forward to\",",
                "+    )",
                "     options, args = parser.parse_args()",
                "@@ -146,6 +206,6 @@ def parse_options():",
                "     if len(args) != 1:",
                "-        parser.error('Incorrect number of arguments.')",
                "+        parser.error(\"Incorrect number of arguments.\")",
                "     if options.remote is None:",
                "-        parser.error('Remote address required (-r).')",
                "-    ",
                "+        parser.error(\"Remote address required (-r).\")",
                "+",
                "     g_verbose = options.verbose",
                "@@ -158,7 +218,7 @@ def main():",
                "     options, server, remote = parse_options()",
                "-    ",
                "+",
                "     password = None",
                "     if options.readpass:",
                "-        password = getpass.getpass('Enter SSH password: ')",
                "-    ",
                "+        password = getpass.getpass(\"Enter SSH password: \")",
                "+",
                "     client = paramiko.SSHClient()",
                "@@ -167,16 +227,27 @@ def main():",
                "-    verbose('Connecting to ssh host %s:%d ...' % (server[0], server[1]))",
                "+    verbose(\"Connecting to ssh host %s:%d ...\" % (server[0], server[1]))",
                "     try:",
                "-        client.connect(server[0], server[1], username=options.user, key_filename=options.keyfile,",
                "-                       look_for_keys=options.look_for_keys, password=password)",
                "+        client.connect(",
                "+            server[0],",
                "+            server[1],",
                "+            username=options.user,",
                "+            key_filename=options.keyfile,",
                "+            look_for_keys=options.look_for_keys,",
                "+            password=password,",
                "+        )",
                "     except Exception as e:",
                "-        print('*** Failed to connect to %s:%d: %r' % (server[0], server[1], e))",
                "+        print(\"*** Failed to connect to %s:%d: %r\" % (server[0], server[1], e))",
                "         sys.exit(1)",
                "-    verbose('Now forwarding port %d to %s:%d ...' % (options.port, remote[0], remote[1]))",
                "+    verbose(",
                "+        \"Now forwarding port %d to %s:%d ...\"",
                "+        % (options.port, remote[0], remote[1])",
                "+    )",
                "     try:",
                "-        forward_tunnel(options.port, remote[0], remote[1], client.get_transport())",
                "+        forward_tunnel(",
                "+            options.port, remote[0], remote[1], client.get_transport()",
                "+        )",
                "     except KeyboardInterrupt:",
                "-        print('C-c: Port forwarding stopped.')",
                "+        print(\"C-c: Port forwarding stopped.\")",
                "         sys.exit(0)",
                "@@ -184,3 +255,3 @@ def main():",
                "-if __name__ == '__main__':",
                "+if __name__ == \"__main__\":",
                "     main()",
                "diff --git a/demos/interactive.py b/demos/interactive.py",
                "index 7138cd6c..037787c4 100644",
                "--- a/demos/interactive.py",
                "+++ b/demos/interactive.py",
                "@@ -27,2 +27,3 @@ try:",
                "     import tty",
                "+",
                "     has_termios = True",
                "@@ -41,3 +42,3 @@ def posix_shell(chan):",
                "     import select",
                "-    ",
                "+",
                "     oldtty = termios.tcgetattr(sys.stdin)",
                "@@ -54,3 +55,3 @@ def posix_shell(chan):",
                "                     if len(x) == 0:",
                "-                        sys.stdout.write('\\r\\n*** EOF\\r\\n')",
                "+                        sys.stdout.write(\"\\r\\n*** EOF\\r\\n\")",
                "                         break",
                "@@ -69,3 +70,3 @@ def posix_shell(chan):",
                "-    ",
                "+",
                " # thanks to Mike Looijmans for this code",
                "@@ -74,4 +75,6 @@ def windows_shell(chan):",
                "-    sys.stdout.write(\"Line-buffered terminal emulation. Press F6 or ^Z to send EOF.\\r\\n\\r\\n\")",
                "-        ",
                "+    sys.stdout.write(",
                "+        \"Line-buffered terminal emulation. Press F6 or ^Z to send EOF.\\r\\n\\r\\n\"",
                "+    )",
                "+",
                "     def writeall(sock):",
                "@@ -80,3 +83,3 @@ def windows_shell(chan):",
                "             if not data:",
                "-                sys.stdout.write('\\r\\n*** EOF ***\\r\\n\\r\\n')",
                "+                sys.stdout.write(\"\\r\\n*** EOF ***\\r\\n\\r\\n\")",
                "                 sys.stdout.flush()",
                "@@ -85,6 +88,6 @@ def windows_shell(chan):",
                "             sys.stdout.flush()",
                "-        ",
                "+",
                "     writer = threading.Thread(target=writeall, args=(chan,))",
                "     writer.start()",
                "-        ",
                "+",
                "     try:",
                "diff --git a/demos/rforward.py b/demos/rforward.py",
                "index ae70670c..a2e8a776 100755",
                "--- a/demos/rforward.py",
                "+++ b/demos/rforward.py",
                "@@ -49,7 +49,9 @@ def handler(chan, host, port):",
                "     except Exception as e:",
                "-        verbose('Forwarding request to %s:%d failed: %r' % (host, port, e))",
                "+        verbose(\"Forwarding request to %s:%d failed: %r\" % (host, port, e))",
                "         return",
                "-    ",
                "-    verbose('Connected!  Tunnel open %r -> %r -> %r' % (chan.origin_addr,",
                "-                                                        chan.getpeername(), (host, port)))",
                "+",
                "+    verbose(",
                "+        \"Connected!  Tunnel open %r -> %r -> %r\"",
                "+        % (chan.origin_addr, chan.getpeername(), (host, port))",
                "+    )",
                "     while True:",
                "@@ -68,3 +70,3 @@ def handler(chan, host, port):",
                "     sock.close()",
                "-    verbose('Tunnel closed from %r' % (chan.origin_addr,))",
                "+    verbose(\"Tunnel closed from %r\" % (chan.origin_addr,))",
                "@@ -72,3 +74,3 @@ def handler(chan, host, port):",
                " def reverse_forward_tunnel(server_port, remote_host, remote_port, transport):",
                "-    transport.request_port_forward('', server_port)",
                "+    transport.request_port_forward(\"\", server_port)",
                "     while True:",
                "@@ -77,3 +79,5 @@ def reverse_forward_tunnel(server_port, remote_host, remote_port, transport):",
                "             continue",
                "-        thr = threading.Thread(target=handler, args=(chan, remote_host, remote_port))",
                "+        thr = threading.Thread(",
                "+            target=handler, args=(chan, remote_host, remote_port)",
                "+        )",
                "         thr.setDaemon(True)",
                "@@ -97,3 +101,3 @@ def get_host_port(spec, default_port):",
                "     \"parse 'hostname:22' into a host and port, with the port optional\"",
                "-    args = (spec.split(':', 1) + [default_port])[:2]",
                "+    args = (spec.split(\":\", 1) + [default_port])[:2]",
                "     args[1] = int(args[1])",
                "@@ -104,22 +108,70 @@ def parse_options():",
                "     global g_verbose",
                "-    ",
                "-    parser = OptionParser(usage='usage: %prog [options] <ssh-server>[:<server-port>]',",
                "-                          version='%prog 1.0', description=HELP)",
                "-    parser.add_option('-q', '--quiet', action='store_false', dest='verbose', default=True,",
                "-                      help='squelch all informational output')",
                "-    parser.add_option('-p', '--remote-port', action='store', type='int', dest='port',",
                "-                      default=DEFAULT_PORT,",
                "-                      help='port on server to forward (default: %d)' % DEFAULT_PORT)",
                "-    parser.add_option('-u', '--user', action='store', type='string', dest='user',",
                "-                      default=getpass.getuser(),",
                "-                      help='username for SSH authentication (default: %s)' % getpass.getuser())",
                "-    parser.add_option('-K', '--key', action='store', type='string', dest='keyfile',",
                "-                      default=None,",
                "-                      help='private key file to use for SSH authentication')",
                "-    parser.add_option('', '--no-key', action='store_false', dest='look_for_keys', default=True,",
                "-                      help='don\\'t look for or use a private key file')",
                "-    parser.add_option('-P', '--password', action='store_true', dest='readpass', default=False,",
                "-                      help='read password (for key or password auth) from stdin')",
                "-    parser.add_option('-r', '--remote', action='store', type='string', dest='remote', default=None, metavar='host:port',",
                "-                      help='remote host and port to forward to')",
                "+",
                "+    parser = OptionParser(",
                "+        usage=\"usage: %prog [options] <ssh-server>[:<server-port>]\",",
                "+        version=\"%prog 1.0\",",
                "+        description=HELP,",
                "+    )",
                "+    parser.add_option(",
                "+        \"-q\",",
                "+        \"--quiet\",",
                "+        action=\"store_false\",",
                "+        dest=\"verbose\",",
                "+        default=True,",
                "+        help=\"squelch all informational output\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-p\",",
                "+        \"--remote-port\",",
                "+        action=\"store\",",
                "+        type=\"int\",",
                "+        dest=\"port\",",
                "+        default=DEFAULT_PORT,",
                "+        help=\"port on server to forward (default: %d)\" % DEFAULT_PORT,",
                "+    )",
                "+    parser.add_option(",
                "+        \"-u\",",
                "+        \"--user\",",
                "+        action=\"store\",",
                "+        type=\"string\",",
                "+        dest=\"user\",",
                "+        default=getpass.getuser(),",
                "+        help=\"username for SSH authentication (default: %s)\"",
                "+        % getpass.getuser(),",
                "+    )",
                "+    parser.add_option(",
                "+        \"-K\",",
                "+        \"--key\",",
                "+        action=\"store\",",
                "+        type=\"string\",",
                "+        dest=\"keyfile\",",
                "+        default=None,",
                "+        help=\"private key file to use for SSH authentication\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"\",",
                "+        \"--no-key\",",
                "+        action=\"store_false\",",
                "+        dest=\"look_for_keys\",",
                "+        default=True,",
                "+        help=\"don't look for or use a private key file\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-P\",",
                "+        \"--password\",",
                "+        action=\"store_true\",",
                "+        dest=\"readpass\",",
                "+        default=False,",
                "+        help=\"read password (for key or password auth) from stdin\",",
                "+    )",
                "+    parser.add_option(",
                "+        \"-r\",",
                "+        \"--remote\",",
                "+        action=\"store\",",
                "+        type=\"string\",",
                "+        dest=\"remote\",",
                "+        default=None,",
                "+        metavar=\"host:port\",",
                "+        help=\"remote host and port to forward to\",",
                "+    )",
                "     options, args = parser.parse_args()",
                "@@ -127,6 +179,6 @@ def parse_options():",
                "     if len(args) != 1:",
                "-        parser.error('Incorrect number of arguments.')",
                "+        parser.error(\"Incorrect number of arguments.\")",
                "     if options.remote is None:",
                "-        parser.error('Remote address required (-r).')",
                "-    ",
                "+        parser.error(\"Remote address required (-r).\")",
                "+",
                "     g_verbose = options.verbose",
                "@@ -139,7 +191,7 @@ def main():",
                "     options, server, remote = parse_options()",
                "-    ",
                "+",
                "     password = None",
                "     if options.readpass:",
                "-        password = getpass.getpass('Enter SSH password: ')",
                "-    ",
                "+        password = getpass.getpass(\"Enter SSH password: \")",
                "+",
                "     client = paramiko.SSHClient()",
                "@@ -148,16 +200,27 @@ def main():",
                "-    verbose('Connecting to ssh host %s:%d ...' % (server[0], server[1]))",
                "+    verbose(\"Connecting to ssh host %s:%d ...\" % (server[0], server[1]))",
                "     try:",
                "-        client.connect(server[0], server[1], username=options.user, key_filename=options.keyfile,",
                "-                       look_for_keys=options.look_for_keys, password=password)",
                "+        client.connect(",
                "+            server[0],",
                "+            server[1],",
                "+            username=options.user,",
                "+            key_filename=options.keyfile,",
                "+            look_for_keys=options.look_for_keys,",
                "+            password=password,",
                "+        )",
                "     except Exception as e:",
                "-        print('*** Failed to connect to %s:%d: %r' % (server[0], server[1], e))",
                "+        print(\"*** Failed to connect to %s:%d: %r\" % (server[0], server[1], e))",
                "         sys.exit(1)",
                "-    verbose('Now forwarding remote port %d to %s:%d ...' % (options.port, remote[0], remote[1]))",
                "+    verbose(",
                "+        \"Now forwarding remote port %d to %s:%d ...\"",
                "+        % (options.port, remote[0], remote[1])",
                "+    )",
                "     try:",
                "-        reverse_forward_tunnel(options.port, remote[0], remote[1], client.get_transport())",
                "+        reverse_forward_tunnel(",
                "+            options.port, remote[0], remote[1], client.get_transport()",
                "+        )",
                "     except KeyboardInterrupt:",
                "-        print('C-c: Port forwarding stopped.')",
                "+        print(\"C-c: Port forwarding stopped.\")",
                "         sys.exit(0)",
                "@@ -165,3 +228,3 @@ def main():",
                "-if __name__ == '__main__':",
                "+if __name__ == \"__main__\":",
                "     main()",
                "diff --git a/paramiko/__init__.py b/paramiko/__init__.py",
                "index 01dc973c..d70129bc 100644",
                "--- a/paramiko/__init__.py",
                "+++ b/paramiko/__init__.py",
                "@@ -23,3 +23,3 @@ from paramiko._version import __version__, __version_info__",
                " if sys.version_info < (2, 6):",
                "-    raise RuntimeError('You need Python 2.6+ for this module.')",
                "+    raise RuntimeError(\"You need Python 2.6+ for this module.\")",
                "@@ -32,3 +32,6 @@ from paramiko.transport import SecurityOptions, Transport",
                " from paramiko.client import (",
                "-    SSHClient, MissingHostKeyPolicy, AutoAddPolicy, RejectPolicy, ",
                "+    SSHClient,",
                "+    MissingHostKeyPolicy,",
                "+    AutoAddPolicy,",
                "+    RejectPolicy,",
                "     WarningPolicy,",
                "@@ -39,4 +42,8 @@ from paramiko.channel import Channel, ChannelFile",
                " from paramiko.ssh_exception import (",
                "-    SSHException, PasswordRequiredException, BadAuthenticationType,",
                "-    ChannelException, BadHostKeyException, AuthenticationException,",
                "+    SSHException,",
                "+    PasswordRequiredException,",
                "+    BadAuthenticationType,",
                "+    ChannelException,",
                "+    BadHostKeyException,",
                "+    AuthenticationException,",
                "     ProxyCommandFailure,",
                "@@ -64,5 +71,10 @@ from paramiko.proxy import ProxyCommand",
                " from paramiko.common import (",
                "-    AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, AUTH_FAILED, OPEN_SUCCEEDED,",
                "-    OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, OPEN_FAILED_CONNECT_FAILED,",
                "-    OPEN_FAILED_UNKNOWN_CHANNEL_TYPE, OPEN_FAILED_RESOURCE_SHORTAGE,",
                "+    AUTH_SUCCESSFUL,",
                "+    AUTH_PARTIALLY_SUCCESSFUL,",
                "+    AUTH_FAILED,",
                "+    OPEN_SUCCEEDED,",
                "+    OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED,",
                "+    OPEN_FAILED_CONNECT_FAILED,",
                "+    OPEN_FAILED_UNKNOWN_CHANNEL_TYPE,",
                "+    OPEN_FAILED_RESOURCE_SHORTAGE,",
                " )",
                "@@ -70,4 +82,10 @@ from paramiko.common import (",
                " from paramiko.sftp import (",
                "-    SFTP_OK, SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED, SFTP_FAILURE,",
                "-    SFTP_BAD_MESSAGE, SFTP_NO_CONNECTION, SFTP_CONNECTION_LOST,",
                "+    SFTP_OK,",
                "+    SFTP_EOF,",
                "+    SFTP_NO_SUCH_FILE,",
                "+    SFTP_PERMISSION_DENIED,",
                "+    SFTP_FAILURE,",
                "+    SFTP_BAD_MESSAGE,",
                "+    SFTP_NO_CONNECTION,",
                "+    SFTP_CONNECTION_LOST,",
                "     SFTP_OP_UNSUPPORTED,",
                "@@ -78,39 +96,39 @@ from paramiko.common import io_sleep",
                " __all__ = [",
                "-    'Transport',",
                "-    'SSHClient',",
                "-    'MissingHostKeyPolicy',",
                "-    'AutoAddPolicy',",
                "-    'RejectPolicy',",
                "-    'WarningPolicy',",
                "-    'SecurityOptions',",
                "-    'SubsystemHandler',",
                "-    'Channel',",
                "-    'PKey',",
                "-    'RSAKey',",
                "-    'DSSKey',",
                "-    'Message',",
                "-    'SSHException',",
                "-    'AuthenticationException',",
                "-    'PasswordRequiredException',",
                "-    'BadAuthenticationType',",
                "-    'ChannelException',",
                "-    'BadHostKeyException',",
                "-    'ProxyCommand',",
                "-    'ProxyCommandFailure',",
                "-    'SFTP',",
                "-    'SFTPFile',",
                "-    'SFTPHandle',",
                "-    'SFTPClient',",
                "-    'SFTPServer',",
                "-    'SFTPError',",
                "-    'SFTPAttributes',",
                "-    'SFTPServerInterface',",
                "-    'ServerInterface',",
                "-    'BufferedFile',",
                "-    'Agent',",
                "-    'AgentKey',",
                "-    'HostKeys',",
                "-    'SSHConfig',",
                "-    'util',",
                "-    'io_sleep',",
                "+    \"Transport\",",
                "+    \"SSHClient\",",
                "+    \"MissingHostKeyPolicy\",",
                "+    \"AutoAddPolicy\",",
                "+    \"RejectPolicy\",",
                "+    \"WarningPolicy\",",
                "+    \"SecurityOptions\",",
                "+    \"SubsystemHandler\",",
                "+    \"Channel\",",
                "+    \"PKey\",",
                "+    \"RSAKey\",",
                "+    \"DSSKey\",",
                "+    \"Message\",",
                "+    \"SSHException\",",
                "+    \"AuthenticationException\",",
                "+    \"PasswordRequiredException\",",
                "+    \"BadAuthenticationType\",",
                "+    \"ChannelException\",",
                "+    \"BadHostKeyException\",",
                "+    \"ProxyCommand\",",
                "+    \"ProxyCommandFailure\",",
                "+    \"SFTP\",",
                "+    \"SFTPFile\",",
                "+    \"SFTPHandle\",",
                "+    \"SFTPClient\",",
                "+    \"SFTPServer\",",
                "+    \"SFTPError\",",
                "+    \"SFTPAttributes\",",
                "+    \"SFTPServerInterface\",",
                "+    \"ServerInterface\",",
                "+    \"BufferedFile\",",
                "+    \"Agent\",",
                "+    \"AgentKey\",",
                "+    \"HostKeys\",",
                "+    \"SSHConfig\",",
                "+    \"util\",",
                "+    \"io_sleep\",",
                " ]",
                "diff --git a/paramiko/_version.py b/paramiko/_version.py",
                "index fc23e9b2..93214f6d 100644",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@ -1,2 +1,2 @@",
                " __version_info__ = (2, 0, 8)",
                "-__version__ = '.'.join(map(str, __version_info__))",
                "+__version__ = \".\".join(map(str, __version_info__))",
                "diff --git a/paramiko/_winapi.py b/paramiko/_winapi.py",
                "index a13d7e87..df02b114 100644",
                "--- a/paramiko/_winapi.py",
                "+++ b/paramiko/_winapi.py",
                "@@ -17,2 +17,3 @@ from paramiko.py3compat import u, builtins",
                "+",
                " def format_system_message(errno):",
                "@@ -79,3 +80,3 @@ class WindowsError(builtins.WindowsError):",
                "     def __repr__(self):",
                "-        return '{self.__class__.__name__}({self.winerror})'.format(**vars())",
                "+        return \"{self.__class__.__name__}({self.winerror})\".format(**vars())",
                "@@ -97,3 +98,3 @@ GlobalAlloc.restype = ctypes.wintypes.HANDLE",
                " GlobalLock = ctypes.windll.kernel32.GlobalLock",
                "-GlobalLock.argtypes = ctypes.wintypes.HGLOBAL,",
                "+GlobalLock.argtypes = (ctypes.wintypes.HGLOBAL,)",
                " GlobalLock.restype = ctypes.wintypes.LPVOID",
                "@@ -101,3 +102,3 @@ GlobalLock.restype = ctypes.wintypes.LPVOID",
                " GlobalUnlock = ctypes.windll.kernel32.GlobalUnlock",
                "-GlobalUnlock.argtypes = ctypes.wintypes.HGLOBAL,",
                "+GlobalUnlock.argtypes = (ctypes.wintypes.HGLOBAL,)",
                " GlobalUnlock.restype = ctypes.wintypes.BOOL",
                "@@ -105,3 +106,3 @@ GlobalUnlock.restype = ctypes.wintypes.BOOL",
                " GlobalSize = ctypes.windll.kernel32.GlobalSize",
                "-GlobalSize.argtypes = ctypes.wintypes.HGLOBAL,",
                "+GlobalSize.argtypes = (ctypes.wintypes.HGLOBAL,)",
                " GlobalSize.restype = ctypes.c_size_t",
                "@@ -123,12 +124,8 @@ MapViewOfFile.restype = ctypes.wintypes.HANDLE",
                " UnmapViewOfFile = ctypes.windll.kernel32.UnmapViewOfFile",
                "-UnmapViewOfFile.argtypes = ctypes.wintypes.HANDLE,",
                "+UnmapViewOfFile.argtypes = (ctypes.wintypes.HANDLE,)",
                " RtlMoveMemory = ctypes.windll.kernel32.RtlMoveMemory",
                "-RtlMoveMemory.argtypes = (",
                "-    ctypes.c_void_p,",
                "-    ctypes.c_void_p,",
                "-    ctypes.c_size_t,",
                "-)",
                "+RtlMoveMemory.argtypes = (ctypes.c_void_p, ctypes.c_void_p, ctypes.c_size_t)",
                "-ctypes.windll.kernel32.LocalFree.argtypes = ctypes.wintypes.HLOCAL,",
                "+ctypes.windll.kernel32.LocalFree.argtypes = (ctypes.wintypes.HLOCAL,)",
                "@@ -142,2 +139,3 @@ class MemoryMap(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, name, length, security_attributes=None):",
                "@@ -151,3 +149,4 @@ class MemoryMap(object):",
                "             ctypes.byref(self.security_attributes)",
                "-            if self.security_attributes else None",
                "+            if self.security_attributes",
                "+            else None",
                "         )",
                "@@ -157,4 +156,9 @@ class MemoryMap(object):",
                "         filemap = ctypes.windll.kernel32.CreateFileMappingW(",
                "-            INVALID_HANDLE_VALUE, p_SA, PAGE_READWRITE, 0, self.length,",
                "-            u(self.name))",
                "+            INVALID_HANDLE_VALUE,",
                "+            p_SA,",
                "+            PAGE_READWRITE,",
                "+            0,",
                "+            self.length,",
                "+            u(self.name),",
                "+        )",
                "         handle_nonzero_success(filemap)",
                "@@ -222,15 +226,16 @@ POLICY_NOTIFICATION = 0x00001000",
                " POLICY_ALL_ACCESS = (",
                "-    STANDARD_RIGHTS_REQUIRED |",
                "-    POLICY_VIEW_LOCAL_INFORMATION |",
                "-    POLICY_VIEW_AUDIT_INFORMATION |",
                "-    POLICY_GET_PRIVATE_INFORMATION |",
                "-    POLICY_TRUST_ADMIN |",
                "-    POLICY_CREATE_ACCOUNT |",
                "-    POLICY_CREATE_SECRET |",
                "-    POLICY_CREATE_PRIVILEGE |",
                "-    POLICY_SET_DEFAULT_QUOTA_LIMITS |",
                "-    POLICY_SET_AUDIT_REQUIREMENTS |",
                "-    POLICY_AUDIT_LOG_ADMIN |",
                "-    POLICY_SERVER_ADMIN |",
                "-    POLICY_LOOKUP_NAMES)",
                "+    STANDARD_RIGHTS_REQUIRED",
                "+    | POLICY_VIEW_LOCAL_INFORMATION",
                "+    | POLICY_VIEW_AUDIT_INFORMATION",
                "+    | POLICY_GET_PRIVATE_INFORMATION",
                "+    | POLICY_TRUST_ADMIN",
                "+    | POLICY_CREATE_ACCOUNT",
                "+    | POLICY_CREATE_SECRET",
                "+    | POLICY_CREATE_PRIVILEGE",
                "+    | POLICY_SET_DEFAULT_QUOTA_LIMITS",
                "+    | POLICY_SET_AUDIT_REQUIREMENTS",
                "+    | POLICY_AUDIT_LOG_ADMIN",
                "+    | POLICY_SERVER_ADMIN",
                "+    | POLICY_LOOKUP_NAMES",
                "+)",
                "@@ -238,21 +243,24 @@ POLICY_ALL_ACCESS = (",
                " POLICY_READ = (",
                "-    STANDARD_RIGHTS_READ |",
                "-    POLICY_VIEW_AUDIT_INFORMATION |",
                "-    POLICY_GET_PRIVATE_INFORMATION)",
                "+    STANDARD_RIGHTS_READ",
                "+    | POLICY_VIEW_AUDIT_INFORMATION",
                "+    | POLICY_GET_PRIVATE_INFORMATION",
                "+)",
                " POLICY_WRITE = (",
                "-    STANDARD_RIGHTS_WRITE |",
                "-    POLICY_TRUST_ADMIN |",
                "-    POLICY_CREATE_ACCOUNT |",
                "-    POLICY_CREATE_SECRET |",
                "-    POLICY_CREATE_PRIVILEGE |",
                "-    POLICY_SET_DEFAULT_QUOTA_LIMITS |",
                "-    POLICY_SET_AUDIT_REQUIREMENTS |",
                "-    POLICY_AUDIT_LOG_ADMIN |",
                "-    POLICY_SERVER_ADMIN)",
                "+    STANDARD_RIGHTS_WRITE",
                "+    | POLICY_TRUST_ADMIN",
                "+    | POLICY_CREATE_ACCOUNT",
                "+    | POLICY_CREATE_SECRET",
                "+    | POLICY_CREATE_PRIVILEGE",
                "+    | POLICY_SET_DEFAULT_QUOTA_LIMITS",
                "+    | POLICY_SET_AUDIT_REQUIREMENTS",
                "+    | POLICY_AUDIT_LOG_ADMIN",
                "+    | POLICY_SERVER_ADMIN",
                "+)",
                " POLICY_EXECUTE = (",
                "-    STANDARD_RIGHTS_EXECUTE |",
                "-    POLICY_VIEW_LOCAL_INFORMATION |",
                "-    POLICY_LOOKUP_NAMES)",
                "+    STANDARD_RIGHTS_EXECUTE",
                "+    | POLICY_VIEW_LOCAL_INFORMATION",
                "+    | POLICY_LOOKUP_NAMES",
                "+)",
                "@@ -270,4 +278,4 @@ class TOKEN_USER(ctypes.Structure):",
                "     _fields_ = [",
                "-        ('SID', ctypes.c_void_p),",
                "-        ('ATTRIBUTES', ctypes.wintypes.DWORD),",
                "+        (\"SID\", ctypes.c_void_p),",
                "+        (\"ATTRIBUTES\", ctypes.wintypes.DWORD),",
                "     ]",
                "@@ -288,2 +296,3 @@ class SECURITY_DESCRIPTOR(ctypes.Structure):",
                "     \"\"\"",
                "+",
                "     SECURITY_DESCRIPTOR_CONTROL = ctypes.wintypes.USHORT",
                "@@ -292,9 +301,9 @@ class SECURITY_DESCRIPTOR(ctypes.Structure):",
                "     _fields_ = [",
                "-        ('Revision', ctypes.c_ubyte),",
                "-        ('Sbz1', ctypes.c_ubyte),",
                "-        ('Control', SECURITY_DESCRIPTOR_CONTROL),",
                "-        ('Owner', ctypes.c_void_p),",
                "-        ('Group', ctypes.c_void_p),",
                "-        ('Sacl', ctypes.c_void_p),",
                "-        ('Dacl', ctypes.c_void_p),",
                "+        (\"Revision\", ctypes.c_ubyte),",
                "+        (\"Sbz1\", ctypes.c_ubyte),",
                "+        (\"Control\", SECURITY_DESCRIPTOR_CONTROL),",
                "+        (\"Owner\", ctypes.c_void_p),",
                "+        (\"Group\", ctypes.c_void_p),",
                "+        (\"Sacl\", ctypes.c_void_p),",
                "+        (\"Dacl\", ctypes.c_void_p),",
                "     ]",
                "@@ -310,6 +319,7 @@ class SECURITY_ATTRIBUTES(ctypes.Structure):",
                "     \"\"\"",
                "+",
                "     _fields_ = [",
                "-        ('nLength', ctypes.wintypes.DWORD),",
                "-        ('lpSecurityDescriptor', ctypes.c_void_p),",
                "-        ('bInheritHandle', ctypes.wintypes.BOOL),",
                "+        (\"nLength\", ctypes.wintypes.DWORD),",
                "+        (\"lpSecurityDescriptor\", ctypes.c_void_p),",
                "+        (\"bInheritHandle\", ctypes.wintypes.BOOL),",
                "     ]",
                "@@ -345,9 +355,15 @@ def GetTokenInformation(token, information_class):",
                "     data_size = ctypes.wintypes.DWORD()",
                "-    ctypes.windll.advapi32.GetTokenInformation(token, information_class.num,",
                "-        0, 0, ctypes.byref(data_size))",
                "+    ctypes.windll.advapi32.GetTokenInformation(",
                "+        token, information_class.num, 0, 0, ctypes.byref(data_size)",
                "+    )",
                "     data = ctypes.create_string_buffer(data_size.value)",
                "-    handle_nonzero_success(ctypes.windll.advapi32.GetTokenInformation(token,",
                "-        information_class.num,",
                "-        ctypes.byref(data), ctypes.sizeof(data),",
                "-        ctypes.byref(data_size)))",
                "+    handle_nonzero_success(",
                "+        ctypes.windll.advapi32.GetTokenInformation(",
                "+            token,",
                "+            information_class.num,",
                "+            ctypes.byref(data),",
                "+            ctypes.sizeof(data),",
                "+            ctypes.byref(data_size),",
                "+        )",
                "+    )",
                "     return ctypes.cast(data, ctypes.POINTER(TOKEN_USER)).contents",
                "@@ -358,4 +374,7 @@ def OpenProcessToken(proc_handle, access):",
                "     proc_handle = ctypes.wintypes.HANDLE(proc_handle)",
                "-    handle_nonzero_success(ctypes.windll.advapi32.OpenProcessToken(",
                "-        proc_handle, access, ctypes.byref(result)))",
                "+    handle_nonzero_success(",
                "+        ctypes.windll.advapi32.OpenProcessToken(",
                "+            proc_handle, access, ctypes.byref(result)",
                "+        )",
                "+    )",
                "     return result",
                "@@ -368,4 +387,3 @@ def get_current_user():",
                "     process = OpenProcessToken(",
                "-        ctypes.windll.kernel32.GetCurrentProcess(),",
                "-        TokenAccess.TOKEN_QUERY,",
                "+        ctypes.windll.kernel32.GetCurrentProcess(), TokenAccess.TOKEN_QUERY",
                "     )",
                "@@ -391,6 +409,8 @@ def get_security_attributes_for_user(user=None):",
                "-    ctypes.windll.advapi32.InitializeSecurityDescriptor(ctypes.byref(SD),",
                "-        SECURITY_DESCRIPTOR.REVISION)",
                "-    ctypes.windll.advapi32.SetSecurityDescriptorOwner(ctypes.byref(SD),",
                "-        user.SID, 0)",
                "+    ctypes.windll.advapi32.InitializeSecurityDescriptor(",
                "+        ctypes.byref(SD), SECURITY_DESCRIPTOR.REVISION",
                "+    )",
                "+    ctypes.windll.advapi32.SetSecurityDescriptorOwner(",
                "+        ctypes.byref(SD), user.SID, 0",
                "+    )",
                "     return SA",
                "diff --git a/paramiko/agent.py b/paramiko/agent.py",
                "index bc857efa..d9c998c0 100644",
                "--- a/paramiko/agent.py",
                "+++ b/paramiko/agent.py",
                "@@ -45,3 +45,2 @@ SSH2_AGENT_SIGN_RESPONSE = 14",
                "-",
                " class AgentSSH(object):",
                "@@ -67,3 +66,3 @@ class AgentSSH(object):",
                "         if ptype != SSH2_AGENT_IDENTITIES_ANSWER:",
                "-            raise SSHException('could not get keys from ssh-agent')",
                "+            raise SSHException(\"could not get keys from ssh-agent\")",
                "         keys = []",
                "@@ -82,5 +81,5 @@ class AgentSSH(object):",
                "         msg = asbytes(msg)",
                "-        self._conn.send(struct.pack('>I', len(msg)) + msg)",
                "+        self._conn.send(struct.pack(\">I\", len(msg)) + msg)",
                "         l = self._read_all(4)",
                "-        msg = Message(self._read_all(struct.unpack('>I', l)[0]))",
                "+        msg = Message(self._read_all(struct.unpack(\">I\", l)[0]))",
                "         return ord(msg.get_byte()), msg",
                "@@ -91,6 +90,6 @@ class AgentSSH(object):",
                "             if len(result) == 0:",
                "-                raise SSHException('lost ssh-agent')",
                "+                raise SSHException(\"lost ssh-agent\")",
                "             extra = self._conn.recv(wanted - len(result))",
                "             if len(extra) == 0:",
                "-                raise SSHException('lost ssh-agent')",
                "+                raise SSHException(\"lost ssh-agent\")",
                "             result += extra",
                "@@ -103,2 +102,3 @@ class AgentProxyThread(threading.Thread):",
                "     \"\"\"",
                "+",
                "     def __init__(self, agent):",
                "@@ -117,8 +117,5 @@ class AgentProxyThread(threading.Thread):",
                "             self._agent.connect()",
                "-            if (",
                "-                not isinstance(self._agent, int) and",
                "-                (",
                "-                    self._agent._conn is None or",
                "-                    not hasattr(self._agent._conn, 'fileno')",
                "-                )",
                "+            if not isinstance(self._agent, int) and (",
                "+                self._agent._conn is None",
                "+                or not hasattr(self._agent._conn, \"fileno\")",
                "             ):",
                "@@ -132,2 +129,3 @@ class AgentProxyThread(threading.Thread):",
                "         import fcntl",
                "+",
                "         oldflags = fcntl.fcntl(self.__inr, fcntl.F_GETFL)",
                "@@ -164,2 +162,3 @@ class AgentLocalProxy(AgentProxyThread):",
                "     \"\"\"",
                "+",
                "     def __init__(self, agent):",
                "@@ -187,2 +186,3 @@ class AgentRemoteProxy(AgentProxyThread):",
                "     \"\"\"",
                "+",
                "     def __init__(self, agent, chan):",
                "@@ -207,2 +207,3 @@ class AgentClientProxy(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, chanRemote):",
                "@@ -220,3 +221,3 @@ class AgentClientProxy(object):",
                "         \"\"\"",
                "-        if ('SSH_AUTH_SOCK' in os.environ) and (sys.platform != 'win32'):",
                "+        if (\"SSH_AUTH_SOCK\" in os.environ) and (sys.platform != \"win32\"):",
                "             conn = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)",
                "@@ -224,3 +225,4 @@ class AgentClientProxy(object):",
                "                 retry_on_signal(",
                "-                    lambda: conn.connect(os.environ['SSH_AUTH_SOCK']))",
                "+                    lambda: conn.connect(os.environ[\"SSH_AUTH_SOCK\"])",
                "+                )",
                "             except:",
                "@@ -228,4 +230,5 @@ class AgentClientProxy(object):",
                "                 return",
                "-        elif sys.platform == 'win32':",
                "+        elif sys.platform == \"win32\":",
                "             import paramiko.win_pageant as win_pageant",
                "+",
                "             if win_pageant.can_talk_to_agent():",
                "@@ -257,2 +260,3 @@ class AgentServerProxy(AgentSSH):",
                "     \"\"\"",
                "+",
                "     def __init__(self, t):",
                "@@ -260,5 +264,5 @@ class AgentServerProxy(AgentSSH):",
                "         self.__t = t",
                "-        self._dir = tempfile.mkdtemp('sshproxy')",
                "+        self._dir = tempfile.mkdtemp(\"sshproxy\")",
                "         os.chmod(self._dir, stat.S_IRWXU)",
                "-        self._file = self._dir + '/sshproxy.ssh'",
                "+        self._file = self._dir + \"/sshproxy.ssh\"",
                "         self.thread = AgentLocalProxy(self)",
                "@@ -272,4 +276,4 @@ class AgentServerProxy(AgentSSH):",
                "         if conn_sock is None:",
                "-            raise SSHException('lost ssh-agent')",
                "-        conn_sock.set_name('auth-agent')",
                "+            raise SSHException(\"lost ssh-agent\")",
                "+        conn_sock.set_name(\"auth-agent\")",
                "         self._connect(conn_sock)",
                "@@ -294,3 +298,3 @@ class AgentServerProxy(AgentSSH):",
                "         \"\"\"",
                "-        return {'SSH_AUTH_SOCK': self._get_filename()}",
                "+        return {\"SSH_AUTH_SOCK\": self._get_filename()}",
                "@@ -321,2 +325,3 @@ class AgentRequestHandler(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, chanClient):",
                "@@ -352,2 +357,3 @@ class Agent(AgentSSH):",
                "     \"\"\"",
                "+",
                "     def __init__(self):",
                "@@ -355,6 +361,6 @@ class Agent(AgentSSH):",
                "-        if ('SSH_AUTH_SOCK' in os.environ) and (sys.platform != 'win32'):",
                "+        if (\"SSH_AUTH_SOCK\" in os.environ) and (sys.platform != \"win32\"):",
                "             conn = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)",
                "             try:",
                "-                conn.connect(os.environ['SSH_AUTH_SOCK'])",
                "+                conn.connect(os.environ[\"SSH_AUTH_SOCK\"])",
                "             except:",
                "@@ -362,4 +368,5 @@ class Agent(AgentSSH):",
                "                 return",
                "-        elif sys.platform == 'win32':",
                "+        elif sys.platform == \"win32\":",
                "             from . import win_pageant",
                "+",
                "             if win_pageant.can_talk_to_agent():",
                "@@ -386,2 +393,3 @@ class AgentKey(PKey):",
                "     \"\"\"",
                "+",
                "     def __init__(self, agent, blob):",
                "@@ -408,3 +416,3 @@ class AgentKey(PKey):",
                "         if ptype != SSH2_AGENT_SIGN_RESPONSE:",
                "-            raise SSHException('key cannot be used for signing')",
                "+            raise SSHException(\"key cannot be used for signing\")",
                "         return result.get_binary()",
                "diff --git a/paramiko/auth_handler.py b/paramiko/auth_handler.py",
                "index 24ada232..9a5fd0f6 100644",
                "--- a/paramiko/auth_handler.py",
                "+++ b/paramiko/auth_handler.py",
                "@@ -24,14 +24,36 @@ import weakref",
                " from paramiko.common import (",
                "-    cMSG_SERVICE_REQUEST, cMSG_DISCONNECT, DISCONNECT_SERVICE_NOT_AVAILABLE,",
                "-    DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE, cMSG_USERAUTH_REQUEST,",
                "-    cMSG_SERVICE_ACCEPT, DEBUG, AUTH_SUCCESSFUL, INFO, cMSG_USERAUTH_SUCCESS,",
                "-    cMSG_USERAUTH_FAILURE, AUTH_PARTIALLY_SUCCESSFUL,",
                "-    cMSG_USERAUTH_INFO_REQUEST, WARNING, AUTH_FAILED, cMSG_USERAUTH_PK_OK,",
                "-    cMSG_USERAUTH_INFO_RESPONSE, MSG_SERVICE_REQUEST, MSG_SERVICE_ACCEPT,",
                "-    MSG_USERAUTH_REQUEST, MSG_USERAUTH_SUCCESS, MSG_USERAUTH_FAILURE,",
                "-    MSG_USERAUTH_BANNER, MSG_USERAUTH_INFO_REQUEST, MSG_USERAUTH_INFO_RESPONSE,",
                "-    cMSG_USERAUTH_GSSAPI_RESPONSE, cMSG_USERAUTH_GSSAPI_TOKEN,",
                "-    cMSG_USERAUTH_GSSAPI_MIC, MSG_USERAUTH_GSSAPI_RESPONSE,",
                "-    MSG_USERAUTH_GSSAPI_TOKEN, MSG_USERAUTH_GSSAPI_ERROR,",
                "-    MSG_USERAUTH_GSSAPI_ERRTOK, MSG_USERAUTH_GSSAPI_MIC, MSG_NAMES,",
                "+    cMSG_SERVICE_REQUEST,",
                "+    cMSG_DISCONNECT,",
                "+    DISCONNECT_SERVICE_NOT_AVAILABLE,",
                "+    DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE,",
                "+    cMSG_USERAUTH_REQUEST,",
                "+    cMSG_SERVICE_ACCEPT,",
                "+    DEBUG,",
                "+    AUTH_SUCCESSFUL,",
                "+    INFO,",
                "+    cMSG_USERAUTH_SUCCESS,",
                "+    cMSG_USERAUTH_FAILURE,",
                "+    AUTH_PARTIALLY_SUCCESSFUL,",
                "+    cMSG_USERAUTH_INFO_REQUEST,",
                "+    WARNING,",
                "+    AUTH_FAILED,",
                "+    cMSG_USERAUTH_PK_OK,",
                "+    cMSG_USERAUTH_INFO_RESPONSE,",
                "+    MSG_SERVICE_REQUEST,",
                "+    MSG_SERVICE_ACCEPT,",
                "+    MSG_USERAUTH_REQUEST,",
                "+    MSG_USERAUTH_SUCCESS,",
                "+    MSG_USERAUTH_FAILURE,",
                "+    MSG_USERAUTH_BANNER,",
                "+    MSG_USERAUTH_INFO_REQUEST,",
                "+    MSG_USERAUTH_INFO_RESPONSE,",
                "+    cMSG_USERAUTH_GSSAPI_RESPONSE,",
                "+    cMSG_USERAUTH_GSSAPI_TOKEN,",
                "+    cMSG_USERAUTH_GSSAPI_MIC,",
                "+    MSG_USERAUTH_GSSAPI_RESPONSE,",
                "+    MSG_USERAUTH_GSSAPI_TOKEN,",
                "+    MSG_USERAUTH_GSSAPI_ERROR,",
                "+    MSG_USERAUTH_GSSAPI_ERRTOK,",
                "+    MSG_USERAUTH_GSSAPI_MIC,",
                "+    MSG_NAMES,",
                " )",
                "@@ -41,3 +63,5 @@ from paramiko.py3compat import bytestring",
                " from paramiko.ssh_exception import (",
                "-    SSHException, AuthenticationException, BadAuthenticationType,",
                "+    SSHException,",
                "+    AuthenticationException,",
                "+    BadAuthenticationType,",
                "     PartialAuthentication,",
                "@@ -48,3 +72,3 @@ from paramiko.ssh_gss import GSSAuth, GSS_EXCEPTIONS",
                "-class AuthHandler (object):",
                "+class AuthHandler(object):",
                "     \"\"\"",
                "@@ -58,3 +82,3 @@ class AuthHandler (object):",
                "         self.auth_event = None",
                "-        self.auth_method = ''",
                "+        self.auth_method = \"\"",
                "         self.banner = None",
                "@@ -84,3 +108,3 @@ class AuthHandler (object):",
                "             self.auth_event = event",
                "-            self.auth_method = 'none'",
                "+            self.auth_method = \"none\"",
                "             self.username = username",
                "@@ -94,3 +118,3 @@ class AuthHandler (object):",
                "             self.auth_event = event",
                "-            self.auth_method = 'publickey'",
                "+            self.auth_method = \"publickey\"",
                "             self.username = username",
                "@@ -105,3 +129,3 @@ class AuthHandler (object):",
                "             self.auth_event = event",
                "-            self.auth_method = 'password'",
                "+            self.auth_method = \"password\"",
                "             self.username = username",
                "@@ -112,3 +136,3 @@ class AuthHandler (object):",
                "-    def auth_interactive(self, username, handler, event, submethods=''):",
                "+    def auth_interactive(self, username, handler, event, submethods=\"\"):",
                "         \"\"\"",
                "@@ -119,3 +143,3 @@ class AuthHandler (object):",
                "             self.auth_event = event",
                "-            self.auth_method = 'keyboard-interactive'",
                "+            self.auth_method = \"keyboard-interactive\"",
                "             self.username = username",
                "@@ -131,3 +155,3 @@ class AuthHandler (object):",
                "             self.auth_event = event",
                "-            self.auth_method = 'gssapi-with-mic'",
                "+            self.auth_method = \"gssapi-with-mic\"",
                "             self.username = username",
                "@@ -143,3 +167,3 @@ class AuthHandler (object):",
                "             self.auth_event = event",
                "-            self.auth_method = 'gssapi-keyex'",
                "+            self.auth_method = \"gssapi-keyex\"",
                "             self.username = username",
                "@@ -158,3 +182,3 @@ class AuthHandler (object):",
                "         m.add_byte(cMSG_SERVICE_REQUEST)",
                "-        m.add_string('ssh-userauth')",
                "+        m.add_string(\"ssh-userauth\")",
                "         self.transport._send_message(m)",
                "@@ -165,4 +189,4 @@ class AuthHandler (object):",
                "         m.add_int(DISCONNECT_SERVICE_NOT_AVAILABLE)",
                "-        m.add_string('Service not available')",
                "-        m.add_string('en')",
                "+        m.add_string(\"Service not available\")",
                "+        m.add_string(\"en\")",
                "         self.transport._send_message(m)",
                "@@ -174,4 +198,4 @@ class AuthHandler (object):",
                "         m.add_int(DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE)",
                "-        m.add_string('No more auth methods available')",
                "-        m.add_string('en')",
                "+        m.add_string(\"No more auth methods available\")",
                "+        m.add_string(\"en\")",
                "         self.transport._send_message(m)",
                "@@ -185,3 +209,3 @@ class AuthHandler (object):",
                "         m.add_string(service)",
                "-        m.add_string('publickey')",
                "+        m.add_string(\"publickey\")",
                "         m.add_boolean(True)",
                "@@ -197,3 +221,3 @@ class AuthHandler (object):",
                "                 if (e is None) or issubclass(e.__class__, EOFError):",
                "-                    e = AuthenticationException('Authentication failed.')",
                "+                    e = AuthenticationException(\"Authentication failed.\")",
                "                 raise e",
                "@@ -204,3 +228,3 @@ class AuthHandler (object):",
                "             if e is None:",
                "-                e = AuthenticationException('Authentication failed.')",
                "+                e = AuthenticationException(\"Authentication failed.\")",
                "             # this is horrible.  Python Exception isn't yet descended from",
                "@@ -214,3 +238,3 @@ class AuthHandler (object):",
                "         service = m.get_text()",
                "-        if self.transport.server_mode and (service == 'ssh-userauth'):",
                "+        if self.transport.server_mode and (service == \"ssh-userauth\"):",
                "             # accepted",
                "@@ -226,4 +250,4 @@ class AuthHandler (object):",
                "         service = m.get_text()",
                "-        if service == 'ssh-userauth':",
                "-            self.transport._log(DEBUG, 'userauth is OK')",
                "+        if service == \"ssh-userauth\":",
                "+            self.transport._log(DEBUG, \"userauth is OK\")",
                "             m = Message()",
                "@@ -231,5 +255,5 @@ class AuthHandler (object):",
                "             m.add_string(self.username)",
                "-            m.add_string('ssh-connection')",
                "+            m.add_string(\"ssh-connection\")",
                "             m.add_string(self.auth_method)",
                "-            if self.auth_method == 'password':",
                "+            if self.auth_method == \"password\":",
                "                 m.add_boolean(False)",
                "@@ -237,3 +261,3 @@ class AuthHandler (object):",
                "                 m.add_string(password)",
                "-            elif self.auth_method == 'publickey':",
                "+            elif self.auth_method == \"publickey\":",
                "                 m.add_boolean(True)",
                "@@ -242,7 +266,8 @@ class AuthHandler (object):",
                "                 blob = self._get_session_blob(",
                "-                    self.private_key, 'ssh-connection', self.username)",
                "+                    self.private_key, \"ssh-connection\", self.username",
                "+                )",
                "                 sig = self.private_key.sign_ssh_data(blob)",
                "                 m.add_string(sig)",
                "-            elif self.auth_method == 'keyboard-interactive':",
                "-                m.add_string('')",
                "+            elif self.auth_method == \"keyboard-interactive\":",
                "+                m.add_string(\"\")",
                "                 m.add_string(self.submethods)",
                "@@ -265,6 +290,7 @@ class AuthHandler (object):",
                "                     try:",
                "-                        m.add_string(sshgss.ssh_init_sec_context(",
                "-                            self.gss_host,",
                "-                            mech,",
                "-                            self.username,))",
                "+                        m.add_string(",
                "+                            sshgss.ssh_init_sec_context(",
                "+                                self.gss_host, mech, self.username",
                "+                            )",
                "+                        )",
                "                     except GSS_EXCEPTIONS as e:",
                "@@ -281,3 +307,4 @@ class AuthHandler (object):",
                "                                     self.username,",
                "-                                    srv_token)",
                "+                                    srv_token,",
                "+                                )",
                "                             except GSS_EXCEPTIONS as e:",
                "@@ -296,3 +323,4 @@ class AuthHandler (object):",
                "                         raise SSHException(",
                "-                            \"Received Package: %s\" % MSG_NAMES[ptype])",
                "+                            \"Received Package: %s\" % MSG_NAMES[ptype]",
                "+                        )",
                "                     m = Message()",
                "@@ -312,7 +340,7 @@ class AuthHandler (object):",
                "                     m.get_string()  # Lang tag - discarded",
                "-                    raise SSHException(\"GSS-API Error:\\nMajor Status: %s\\n\\",
                "+                    raise SSHException(",
                "+                        \"GSS-API Error:\\nMajor Status: %s\\n\\",
                "                                         Minor Status: %s\\ \\nError Message:\\",
                "-                                         %s\\n\") % (str(maj_status),",
                "-                                                   str(min_status),",
                "-                                                   err_msg)",
                "+                                         %s\\n\"",
                "+                    ) % (str(maj_status), str(min_status), err_msg)",
                "                 elif ptype == MSG_USERAUTH_FAILURE:",
                "@@ -322,6 +350,7 @@ class AuthHandler (object):",
                "                     raise SSHException(",
                "-                        \"Received Package: %s\" % MSG_NAMES[ptype])",
                "+                        \"Received Package: %s\" % MSG_NAMES[ptype]",
                "+                    )",
                "             elif (",
                "-                self.auth_method == 'gssapi-keyex' and",
                "-                self.transport.gss_kex_used",
                "+                self.auth_method == \"gssapi-keyex\"",
                "+                and self.transport.gss_kex_used",
                "             ):",
                "@@ -331,3 +360,3 @@ class AuthHandler (object):",
                "                 m.add_string(mic_token)",
                "-            elif self.auth_method == 'none':",
                "+            elif self.auth_method == \"none\":",
                "                 pass",
                "@@ -335,3 +364,4 @@ class AuthHandler (object):",
                "                 raise SSHException(",
                "-                    'Unknown auth method \"%s\"' % self.auth_method)",
                "+                    'Unknown auth method \"%s\"' % self.auth_method",
                "+                )",
                "             self.transport._send_message(m)",
                "@@ -339,4 +369,4 @@ class AuthHandler (object):",
                "             self.transport._log(",
                "-                DEBUG,",
                "-                'Service request \"%s\" accepted (?)' % service)",
                "+                DEBUG, 'Service request \"%s\" accepted (?)' % service",
                "+            )",
                "@@ -346,3 +376,3 @@ class AuthHandler (object):",
                "         if result == AUTH_SUCCESSFUL:",
                "-            self.transport._log(INFO, 'Auth granted (%s).' % method)",
                "+            self.transport._log(INFO, \"Auth granted (%s).\" % method)",
                "             m.add_byte(cMSG_USERAUTH_SUCCESS)",
                "@@ -350,6 +380,7 @@ class AuthHandler (object):",
                "         else:",
                "-            self.transport._log(INFO, 'Auth rejected (%s).' % method)",
                "+            self.transport._log(INFO, \"Auth rejected (%s).\" % method)",
                "             m.add_byte(cMSG_USERAUTH_FAILURE)",
                "             m.add_string(",
                "-                self.transport.server_object.get_allowed_auths(username))",
                "+                self.transport.server_object.get_allowed_auths(username)",
                "+            )",
                "             if result == AUTH_PARTIALLY_SUCCESSFUL:",
                "@@ -383,3 +414,3 @@ class AuthHandler (object):",
                "             m.add_byte(cMSG_USERAUTH_FAILURE)",
                "-            m.add_string('none')",
                "+            m.add_string(\"none\")",
                "             m.add_boolean(False)",
                "@@ -395,12 +426,14 @@ class AuthHandler (object):",
                "             DEBUG,",
                "-            'Auth request (type=%s) service=%s, username=%s' % (",
                "-                method, service, username))",
                "-        if service != 'ssh-connection':",
                "+            \"Auth request (type=%s) service=%s, username=%s\"",
                "+            % (method, service, username),",
                "+        )",
                "+        if service != \"ssh-connection\":",
                "             self._disconnect_service_not_available()",
                "             return",
                "-        if ((self.auth_username is not None) and",
                "-                (self.auth_username != username)):",
                "+        if (self.auth_username is not None) and (",
                "+            self.auth_username != username",
                "+        ):",
                "             self.transport._log(",
                "                 WARNING,",
                "-                'Auth rejected because the client attempted to change username in mid-flight'  # noqa",
                "+                \"Auth rejected because the client attempted to change username in mid-flight\",  # noqa",
                "             )",
                "@@ -412,5 +445,5 @@ class AuthHandler (object):",
                "-        if method == 'none':",
                "+        if method == \"none\":",
                "             result = self.transport.server_object.check_auth_none(username)",
                "-        elif method == 'password':",
                "+        elif method == \"password\":",
                "             changereq = m.get_boolean()",
                "@@ -418,3 +451,3 @@ class AuthHandler (object):",
                "             try:",
                "-                password = password.decode('UTF-8')",
                "+                password = password.decode(\"UTF-8\")",
                "             except UnicodeError:",
                "@@ -428,7 +461,7 @@ class AuthHandler (object):",
                "                 self.transport._log(",
                "-                    DEBUG,",
                "-                    'Auth request to change passwords (rejected)')",
                "+                    DEBUG, \"Auth request to change passwords (rejected)\"",
                "+                )",
                "                 newpassword = m.get_binary()",
                "                 try:",
                "-                    newpassword = newpassword.decode('UTF-8', 'replace')",
                "+                    newpassword = newpassword.decode(\"UTF-8\", \"replace\")",
                "                 except UnicodeError:",
                "@@ -438,4 +471,5 @@ class AuthHandler (object):",
                "                 result = self.transport.server_object.check_auth_password(",
                "-                    username, password)",
                "-        elif method == 'publickey':",
                "+                    username, password",
                "+                )",
                "+        elif method == \"publickey\":",
                "             sig_attached = m.get_boolean()",
                "@@ -447,4 +481,4 @@ class AuthHandler (object):",
                "                 self.transport._log(",
                "-                    INFO,",
                "-                    'Auth rejected: public key: %s' % str(e))",
                "+                    INFO, \"Auth rejected: public key: %s\" % str(e)",
                "+                )",
                "                 key = None",
                "@@ -452,4 +486,4 @@ class AuthHandler (object):",
                "                 self.transport._log(",
                "-                    INFO,",
                "-                    'Auth rejected: unsupported or mangled public key')",
                "+                    INFO, \"Auth rejected: unsupported or mangled public key\"",
                "+                )",
                "                 key = None",
                "@@ -460,3 +494,4 @@ class AuthHandler (object):",
                "             result = self.transport.server_object.check_auth_publickey(",
                "-                username, key)",
                "+                username, key",
                "+            )",
                "             if result != AUTH_FAILED:",
                "@@ -476,9 +511,10 @@ class AuthHandler (object):",
                "                     self.transport._log(",
                "-                        INFO,",
                "-                        'Auth rejected: invalid signature')",
                "+                        INFO, \"Auth rejected: invalid signature\"",
                "+                    )",
                "                     result = AUTH_FAILED",
                "-        elif method == 'keyboard-interactive':",
                "+        elif method == \"keyboard-interactive\":",
                "             submethods = m.get_string()",
                "             result = self.transport.server_object.check_auth_interactive(",
                "-                username, submethods)",
                "+                username, submethods",
                "+            )",
                "             if isinstance(result, InteractiveQuery):",
                "@@ -498,3 +534,4 @@ class AuthHandler (object):",
                "                     INFO,",
                "-                    'Disconnect: Received more than one GSS-API OID mechanism')",
                "+                    \"Disconnect: Received more than one GSS-API OID mechanism\",",
                "+                )",
                "                 self._disconnect_no_more_auth()",
                "@@ -506,3 +543,4 @@ class AuthHandler (object):",
                "                     INFO,",
                "-                    'Disconnect: Received an invalid GSS-API OID mechanism')",
                "+                    \"Disconnect: Received an invalid GSS-API OID mechanism\",",
                "+                )",
                "                 self._disconnect_no_more_auth()",
                "@@ -515,7 +553,10 @@ class AuthHandler (object):",
                "             m.add_bytes(supported_mech)",
                "-            self.transport.auth_handler = GssapiWithMicAuthHandler(self,",
                "-                                                                   sshgss)",
                "-            self.transport._expected_packet = (MSG_USERAUTH_GSSAPI_TOKEN,",
                "-                                               MSG_USERAUTH_REQUEST,",
                "-                                               MSG_SERVICE_REQUEST)",
                "+            self.transport.auth_handler = GssapiWithMicAuthHandler(",
                "+                self, sshgss",
                "+            )",
                "+            self.transport._expected_packet = (",
                "+                MSG_USERAUTH_GSSAPI_TOKEN,",
                "+                MSG_USERAUTH_REQUEST,",
                "+                MSG_SERVICE_REQUEST,",
                "+            )",
                "             self.transport._send_message(m)",
                "@@ -530,5 +571,5 @@ class AuthHandler (object):",
                "             try:",
                "-                sshgss.ssh_check_mic(mic_token,",
                "-                                     self.transport.session_id,",
                "-                                     self.auth_username)",
                "+                sshgss.ssh_check_mic(",
                "+                    mic_token, self.transport.session_id, self.auth_username",
                "+                )",
                "             except Exception:",
                "@@ -539,3 +580,4 @@ class AuthHandler (object):",
                "             self.transport.server_object.check_auth_gssapi_keyex(",
                "-                username, result)",
                "+                username, result",
                "+            )",
                "         else:",
                "@@ -547,4 +589,4 @@ class AuthHandler (object):",
                "         self.transport._log(",
                "-            INFO,",
                "-            'Authentication (%s) successful!' % self.auth_method)",
                "+            INFO, \"Authentication (%s) successful!\" % self.auth_method",
                "+        )",
                "         self.authenticated = True",
                "@@ -558,4 +600,4 @@ class AuthHandler (object):",
                "         if partial:",
                "-            self.transport._log(INFO, 'Authentication continues...')",
                "-            self.transport._log(DEBUG, 'Methods: ' + str(authlist))",
                "+            self.transport._log(INFO, \"Authentication continues...\")",
                "+            self.transport._log(DEBUG, \"Methods: \" + str(authlist))",
                "             self.transport.saved_exception = PartialAuthentication(authlist)",
                "@@ -564,12 +606,12 @@ class AuthHandler (object):",
                "                 DEBUG,",
                "-                'Authentication type (%s) not permitted.' % self.auth_method)",
                "-            self.transport._log(",
                "-                DEBUG,",
                "-                'Allowed methods: ' + str(authlist))",
                "+                \"Authentication type (%s) not permitted.\" % self.auth_method,",
                "+            )",
                "+            self.transport._log(DEBUG, \"Allowed methods: \" + str(authlist))",
                "             self.transport.saved_exception = BadAuthenticationType(",
                "-                'Bad authentication type', authlist)",
                "+                \"Bad authentication type\", authlist",
                "+            )",
                "         else:",
                "             self.transport._log(",
                "-                INFO,",
                "-                'Authentication (%s) failed.' % self.auth_method)",
                "+                INFO, \"Authentication (%s) failed.\" % self.auth_method",
                "+            )",
                "         self.authenticated = False",
                "@@ -582,3 +624,3 @@ class AuthHandler (object):",
                "         self.banner = banner",
                "-        self.transport._log(INFO, 'Auth banner: %s' % banner)",
                "+        self.transport._log(INFO, \"Auth banner: %s\" % banner)",
                "         # who cares.",
                "@@ -586,4 +628,4 @@ class AuthHandler (object):",
                "     def _parse_userauth_info_request(self, m):",
                "-        if self.auth_method != 'keyboard-interactive':",
                "-            raise SSHException('Illegal info request from server')",
                "+        if self.auth_method != \"keyboard-interactive\":",
                "+            raise SSHException(\"Illegal info request from server\")",
                "         title = m.get_text()",
                "@@ -596,3 +638,4 @@ class AuthHandler (object):",
                "         response_list = self.interactive_handler(",
                "-            title, instructions, prompt_list)",
                "+            title, instructions, prompt_list",
                "+        )",
                "@@ -607,3 +650,3 @@ class AuthHandler (object):",
                "         if not self.transport.server_mode:",
                "-            raise SSHException('Illegal info response from server')",
                "+            raise SSHException(\"Illegal info response from server\")",
                "         n = m.get_int()",
                "@@ -613,3 +656,4 @@ class AuthHandler (object):",
                "         result = self.transport.server_object.check_auth_interactive_response(",
                "-            responses)",
                "+            responses",
                "+        )",
                "         if isinstance(result, InteractiveQuery):",
                "@@ -619,3 +663,4 @@ class AuthHandler (object):",
                "         self._send_auth_result(",
                "-            self.auth_username, 'keyboard-interactive', result)",
                "+            self.auth_username, \"keyboard-interactive\", result",
                "+        )",
                "@@ -624,4 +669,5 @@ class AuthHandler (object):",
                "         self.transport._log(DEBUG, \"GSSAPI failure: %s\" % str(e))",
                "-        self.transport._log(INFO, 'Authentication (%s) failed.' %",
                "-                            self.auth_method)",
                "+        self.transport._log(",
                "+            INFO, \"Authentication (%s) failed.\" % self.auth_method",
                "+        )",
                "         self.authenticated = False",
                "@@ -686,5 +732,5 @@ class GssapiWithMicAuthHandler(object):",
                "         try:",
                "-            token = sshgss.ssh_accept_sec_context(self.gss_host,",
                "-                                                  client_token,",
                "-                                                  self.auth_username)",
                "+            token = sshgss.ssh_accept_sec_context(",
                "+                self.gss_host, client_token, self.auth_username",
                "+            )",
                "         except Exception as e:",
                "@@ -699,5 +745,7 @@ class GssapiWithMicAuthHandler(object):",
                "             m.add_string(token)",
                "-            self.transport._expected_packet = (MSG_USERAUTH_GSSAPI_TOKEN,",
                "-                                               MSG_USERAUTH_GSSAPI_MIC,",
                "-                                               MSG_USERAUTH_REQUEST)",
                "+            self.transport._expected_packet = (",
                "+                MSG_USERAUTH_GSSAPI_TOKEN,",
                "+                MSG_USERAUTH_GSSAPI_MIC,",
                "+                MSG_USERAUTH_REQUEST,",
                "+            )",
                "             self.transport._send_message(m)",
                "@@ -710,5 +758,5 @@ class GssapiWithMicAuthHandler(object):",
                "         try:",
                "-            sshgss.ssh_check_mic(mic_token,",
                "-                                 self.transport.session_id,",
                "-                                 username)",
                "+            sshgss.ssh_check_mic(",
                "+                mic_token, self.transport.session_id, username",
                "+            )",
                "         except Exception as e:",
                "@@ -722,4 +770,5 @@ class GssapiWithMicAuthHandler(object):",
                "         result = AUTH_SUCCESSFUL",
                "-        self.transport.server_object.check_auth_gssapi_with_mic(username,",
                "-                                                                result)",
                "+        self.transport.server_object.check_auth_gssapi_with_mic(",
                "+            username, result",
                "+        )",
                "         # okay, send result",
                "diff --git a/paramiko/ber.py b/paramiko/ber.py",
                "index 7725f944..0991b0dd 100644",
                "--- a/paramiko/ber.py",
                "+++ b/paramiko/ber.py",
                "@@ -23,3 +23,3 @@ import paramiko.util as util",
                "-class BERException (Exception):",
                "+class BERException(Exception):",
                "     pass",
                "@@ -43,3 +43,3 @@ class BER(object):",
                "     def __repr__(self):",
                "-        return 'BER(\\'' + repr(self.content) + '\\')'",
                "+        return \"BER('\" + repr(self.content) + \"')\"",
                "@@ -74,3 +74,4 @@ class BER(object):",
                "             size = util.inflate_long(",
                "-                self.content[self.idx: self.idx + t], True)",
                "+                self.content[self.idx : self.idx + t], True",
                "+            )",
                "             self.idx += t",
                "@@ -79,3 +80,3 @@ class BER(object):",
                "             return None",
                "-        data = self.content[self.idx: self.idx + size]",
                "+        data = self.content[self.idx : self.idx + size]",
                "         self.idx += size",
                "@@ -91,3 +92,4 @@ class BER(object):",
                "             raise BERException(",
                "-                'Unknown ber encoding type %d (robey is lazy)' % ident)",
                "+                \"Unknown ber encoding type %d (robey is lazy)\" % ident",
                "+            )",
                "@@ -127,3 +129,3 @@ class BER(object):",
                "         else:",
                "-            raise BERException('Unknown type for encoding: %s' % repr(type(x)))",
                "+            raise BERException(\"Unknown type for encoding: %s\" % repr(type(x)))",
                "diff --git a/paramiko/buffered_pipe.py b/paramiko/buffered_pipe.py",
                "index d9f5149d..69445c97 100644",
                "--- a/paramiko/buffered_pipe.py",
                "+++ b/paramiko/buffered_pipe.py",
                "@@ -30,3 +30,3 @@ from paramiko.py3compat import PY2, b",
                "-class PipeTimeout (IOError):",
                "+class PipeTimeout(IOError):",
                "     \"\"\"",
                "@@ -34,2 +34,3 @@ class PipeTimeout (IOError):",
                "     \"\"\"",
                "+",
                "     pass",
                "@@ -37,3 +38,3 @@ class PipeTimeout (IOError):",
                "-class BufferedPipe (object):",
                "+class BufferedPipe(object):",
                "     \"\"\"",
                "@@ -48,3 +49,3 @@ class BufferedPipe (object):",
                "         self._event = None",
                "-        self._buffer = array.array('B')",
                "+        self._buffer = array.array(\"B\")",
                "         self._closed = False",
                "@@ -52,2 +53,3 @@ class BufferedPipe (object):",
                "     if PY2:",
                "+",
                "         def _buffer_frombytes(self, data):",
                "@@ -57,3 +59,5 @@ class BufferedPipe (object):",
                "             return self._buffer[:limit].tostring()",
                "+",
                "     else:",
                "+",
                "         def _buffer_frombytes(self, data):",
                "diff --git a/paramiko/channel.py b/paramiko/channel.py",
                "index 1f603cf0..13ab7dcf 100644",
                "--- a/paramiko/channel.py",
                "+++ b/paramiko/channel.py",
                "@@ -31,5 +31,12 @@ from paramiko import util",
                " from paramiko.common import (",
                "-    cMSG_CHANNEL_REQUEST, cMSG_CHANNEL_WINDOW_ADJUST, cMSG_CHANNEL_DATA,",
                "-    cMSG_CHANNEL_EXTENDED_DATA, DEBUG, ERROR, cMSG_CHANNEL_SUCCESS,",
                "-    cMSG_CHANNEL_FAILURE, cMSG_CHANNEL_EOF, cMSG_CHANNEL_CLOSE,",
                "+    cMSG_CHANNEL_REQUEST,",
                "+    cMSG_CHANNEL_WINDOW_ADJUST,",
                "+    cMSG_CHANNEL_DATA,",
                "+    cMSG_CHANNEL_EXTENDED_DATA,",
                "+    DEBUG,",
                "+    ERROR,",
                "+    cMSG_CHANNEL_SUCCESS,",
                "+    cMSG_CHANNEL_FAILURE,",
                "+    cMSG_CHANNEL_EOF,",
                "+    cMSG_CHANNEL_CLOSE,",
                " )",
                "@@ -52,2 +59,3 @@ def open_only(func):",
                "     \"\"\"",
                "+",
                "     @wraps(func)",
                "@@ -55,9 +63,10 @@ def open_only(func):",
                "         if (",
                "-            self.closed or",
                "-            self.eof_received or",
                "-            self.eof_sent or",
                "-            not self.active",
                "+            self.closed",
                "+            or self.eof_received",
                "+            or self.eof_sent",
                "+            or not self.active",
                "         ):",
                "-            raise SSHException('Channel is not open')",
                "+            raise SSHException(\"Channel is not open\")",
                "         return func(self, *args, **kwds)",
                "+",
                "     return _check",
                "@@ -65,3 +74,3 @@ def open_only(func):",
                "-class Channel (ClosingContextManager):",
                "+class Channel(ClosingContextManager):",
                "     \"\"\"",
                "@@ -118,3 +127,3 @@ class Channel (ClosingContextManager):",
                "         self._name = str(chanid)",
                "-        self.logger = util.get_logger('paramiko.transport')",
                "+        self.logger = util.get_logger(\"paramiko.transport\")",
                "         self._pipe = None",
                "@@ -136,15 +145,15 @@ class Channel (ClosingContextManager):",
                "         \"\"\"",
                "-        out = '<paramiko.Channel %d' % self.chanid",
                "+        out = \"<paramiko.Channel %d\" % self.chanid",
                "         if self.closed:",
                "-            out += ' (closed)'",
                "+            out += \" (closed)\"",
                "         elif self.active:",
                "             if self.eof_received:",
                "-                out += ' (EOF received)'",
                "+                out += \" (EOF received)\"",
                "             if self.eof_sent:",
                "-                out += ' (EOF sent)'",
                "-            out += ' (open) window=%d' % self.out_window_size",
                "+                out += \" (EOF sent)\"",
                "+            out += \" (open) window=%d\" % self.out_window_size",
                "             if len(self.in_buffer) > 0:",
                "-                out += ' in-buffer=%d' % (len(self.in_buffer),)",
                "-        out += ' -> ' + repr(self.transport)",
                "-        out += '>'",
                "+                out += \" in-buffer=%d\" % (len(self.in_buffer),)",
                "+        out += \" -> \" + repr(self.transport)",
                "+        out += \">\"",
                "         return out",
                "@@ -152,4 +161,10 @@ class Channel (ClosingContextManager):",
                "     @open_only",
                "-    def get_pty(self, term='vt100', width=80, height=24, width_pixels=0,",
                "-                height_pixels=0):",
                "+    def get_pty(",
                "+        self,",
                "+        term=\"vt100\",",
                "+        width=80,",
                "+        height=24,",
                "+        width_pixels=0,",
                "+        height_pixels=0,",
                "+    ):",
                "         \"\"\"",
                "@@ -175,3 +190,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('pty-req')",
                "+        m.add_string(\"pty-req\")",
                "         m.add_boolean(True)",
                "@@ -208,3 +223,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('shell')",
                "+        m.add_string(\"shell\")",
                "         m.add_boolean(True)",
                "@@ -234,3 +249,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('exec')",
                "+        m.add_string(\"exec\")",
                "         m.add_boolean(True)",
                "@@ -260,3 +275,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('subsystem')",
                "+        m.add_string(\"subsystem\")",
                "         m.add_boolean(True)",
                "@@ -285,3 +300,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('window-change')",
                "+        m.add_string(\"window-change\")",
                "         m.add_boolean(False)",
                "@@ -351,3 +366,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('exit-status')",
                "+        m.add_string(\"exit-status\")",
                "         m.add_boolean(False)",
                "@@ -358,8 +373,8 @@ class Channel (ClosingContextManager):",
                "     def request_x11(",
                "-            self,",
                "-            screen_number=0,",
                "-            auth_protocol=None,",
                "-            auth_cookie=None,",
                "-            single_connection=False,",
                "-            handler=None",
                "+        self,",
                "+        screen_number=0,",
                "+        auth_protocol=None,",
                "+        auth_cookie=None,",
                "+        single_connection=False,",
                "+        handler=None,",
                "     ):",
                "@@ -404,3 +419,3 @@ class Channel (ClosingContextManager):",
                "         if auth_protocol is None:",
                "-            auth_protocol = 'MIT-MAGIC-COOKIE-1'",
                "+            auth_protocol = \"MIT-MAGIC-COOKIE-1\"",
                "         if auth_cookie is None:",
                "@@ -411,3 +426,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('x11-req')",
                "+        m.add_string(\"x11-req\")",
                "         m.add_boolean(True)",
                "@@ -441,3 +456,3 @@ class Channel (ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('auth-agent-req@openssh.com')",
                "+        m.add_string(\"auth-agent-req@openssh.com\")",
                "         m.add_boolean(False)",
                "@@ -756,3 +771,2 @@ class Channel (ClosingContextManager):",
                "-",
                "     def sendall(self, s):",
                "@@ -924,3 +938,3 @@ class Channel (ClosingContextManager):",
                "         self.in_window_sofar = 0",
                "-        self._log(DEBUG, 'Max packet in: %d bytes' % max_packet_size)",
                "+        self._log(DEBUG, \"Max packet in: %d bytes\" % max_packet_size)",
                "@@ -933,6 +947,6 @@ class Channel (ClosingContextManager):",
                "         self.active = 1",
                "-        self._log(DEBUG, 'Max packet out: %d bytes' % self.out_max_packet_size)",
                "+        self._log(DEBUG, \"Max packet out: %d bytes\" % self.out_max_packet_size)",
                "     def _request_success(self, m):",
                "-        self._log(DEBUG, 'Sesch channel %d request ok' % self.chanid)",
                "+        self._log(DEBUG, \"Sesch channel %d request ok\" % self.chanid)",
                "         self.event_ready = True",
                "@@ -964,4 +978,3 @@ class Channel (ClosingContextManager):",
                "             self._log(",
                "-                ERROR,",
                "-                'unknown extended_data type %d; discarding' % code",
                "+                ERROR, \"unknown extended_data type %d; discarding\" % code",
                "             )",
                "@@ -978,3 +991,3 @@ class Channel (ClosingContextManager):",
                "             if self.ultra_debug:",
                "-                self._log(DEBUG, 'window up %d' % nbytes)",
                "+                self._log(DEBUG, \"window up %d\" % nbytes)",
                "             self.out_window_size += nbytes",
                "@@ -989,3 +1002,3 @@ class Channel (ClosingContextManager):",
                "         ok = False",
                "-        if key == 'exit-status':",
                "+        if key == \"exit-status\":",
                "             self.exit_status = m.get_int()",
                "@@ -993,6 +1006,6 @@ class Channel (ClosingContextManager):",
                "             ok = True",
                "-        elif key == 'xon-xoff':",
                "+        elif key == \"xon-xoff\":",
                "             # ignore",
                "             ok = True",
                "-        elif key == 'pty-req':",
                "+        elif key == \"pty-req\":",
                "             term = m.get_string()",
                "@@ -1007,11 +1020,5 @@ class Channel (ClosingContextManager):",
                "                 ok = server.check_channel_pty_request(",
                "-                    self,",
                "-                    term,",
                "-                    width,",
                "-                    height,",
                "-                    pixelwidth,",
                "-                    pixelheight,",
                "-                    modes",
                "+                    self, term, width, height, pixelwidth, pixelheight, modes",
                "                 )",
                "-        elif key == 'shell':",
                "+        elif key == \"shell\":",
                "             if server is None:",
                "@@ -1020,3 +1027,3 @@ class Channel (ClosingContextManager):",
                "                 ok = server.check_channel_shell_request(self)",
                "-        elif key == 'env':",
                "+        elif key == \"env\":",
                "             name = m.get_string()",
                "@@ -1027,3 +1034,3 @@ class Channel (ClosingContextManager):",
                "                 ok = server.check_channel_env_request(self, name, value)",
                "-        elif key == 'exec':",
                "+        elif key == \"exec\":",
                "             cmd = m.get_string()",
                "@@ -1033,3 +1040,3 @@ class Channel (ClosingContextManager):",
                "                 ok = server.check_channel_exec_request(self, cmd)",
                "-        elif key == 'subsystem':",
                "+        elif key == \"subsystem\":",
                "             name = m.get_text()",
                "@@ -1039,3 +1046,3 @@ class Channel (ClosingContextManager):",
                "                 ok = server.check_channel_subsystem_request(self, name)",
                "-        elif key == 'window-change':",
                "+        elif key == \"window-change\":",
                "             width = m.get_int()",
                "@@ -1048,4 +1055,5 @@ class Channel (ClosingContextManager):",
                "                 ok = server.check_channel_window_change_request(",
                "-                    self, width, height, pixelwidth, pixelheight)",
                "-        elif key == 'x11-req':",
                "+                    self, width, height, pixelwidth, pixelheight",
                "+                )",
                "+        elif key == \"x11-req\":",
                "             single_connection = m.get_boolean()",
                "@@ -1062,5 +1070,5 @@ class Channel (ClosingContextManager):",
                "                     auth_cookie,",
                "-                    screen_number",
                "+                    screen_number,",
                "                 )",
                "-        elif key == 'auth-agent-req@openssh.com':",
                "+        elif key == \"auth-agent-req@openssh.com\":",
                "             if server is None:",
                "@@ -1092,3 +1100,3 @@ class Channel (ClosingContextManager):",
                "             self.lock.release()",
                "-        self._log(DEBUG, 'EOF received (%s)', self._name)",
                "+        self._log(DEBUG, \"EOF received (%s)\", self._name)",
                "@@ -1114,3 +1122,3 @@ class Channel (ClosingContextManager):",
                "                 # of Socket",
                "-                raise socket.error('Socket is closed')",
                "+                raise socket.error(\"Socket is closed\")",
                "             size = self._wait_for_send_window(size)",
                "@@ -1141,3 +1149,3 @@ class Channel (ClosingContextManager):",
                "         if e is None:",
                "-            e = SSHException('Channel closed.')",
                "+            e = SSHException(\"Channel closed.\")",
                "         raise e",
                "@@ -1164,3 +1172,3 @@ class Channel (ClosingContextManager):",
                "         self.eof_sent = True",
                "-        self._log(DEBUG, 'EOF sent (%s)', self._name)",
                "+        self._log(DEBUG, \"EOF sent (%s)\", self._name)",
                "         return m",
                "@@ -1198,3 +1206,3 @@ class Channel (ClosingContextManager):",
                "             if self.ultra_debug:",
                "-                self._log(DEBUG, 'addwindow %d' % n)",
                "+                self._log(DEBUG, \"addwindow %d\" % n)",
                "             self.in_window_sofar += n",
                "@@ -1203,3 +1211,3 @@ class Channel (ClosingContextManager):",
                "             if self.ultra_debug:",
                "-                self._log(DEBUG, 'addwindow send %d' % self.in_window_sofar)",
                "+                self._log(DEBUG, \"addwindow send %d\" % self.in_window_sofar)",
                "             out = self.in_window_sofar",
                "@@ -1246,3 +1254,3 @@ class Channel (ClosingContextManager):",
                "         if self.ultra_debug:",
                "-            self._log(DEBUG, 'window down to %d' % self.out_window_size)",
                "+            self._log(DEBUG, \"window down to %d\" % self.out_window_size)",
                "         return size",
                "@@ -1250,3 +1258,3 @@ class Channel (ClosingContextManager):",
                "-class ChannelFile (BufferedFile):",
                "+class ChannelFile(BufferedFile):",
                "     \"\"\"",
                "@@ -1263,3 +1271,3 @@ class ChannelFile (BufferedFile):",
                "-    def __init__(self, channel, mode='r', bufsize=-1):",
                "+    def __init__(self, channel, mode=\"r\", bufsize=-1):",
                "         self.channel = channel",
                "@@ -1272,3 +1280,3 @@ class ChannelFile (BufferedFile):",
                "         \"\"\"",
                "-        return '<paramiko.ChannelFile from ' + repr(self.channel) + '>'",
                "+        return \"<paramiko.ChannelFile from \" + repr(self.channel) + \">\"",
                "@@ -1282,4 +1290,4 @@ class ChannelFile (BufferedFile):",
                "-class ChannelStderrFile (ChannelFile):",
                "-    def __init__(self, channel, mode='r', bufsize=-1):",
                "+class ChannelStderrFile(ChannelFile):",
                "+    def __init__(self, channel, mode=\"r\", bufsize=-1):",
                "         ChannelFile.__init__(self, channel, mode, bufsize)",
                "diff --git a/paramiko/client.py b/paramiko/client.py",
                "index 39617d5b..15e2de09 100644",
                "--- a/paramiko/client.py",
                "+++ b/paramiko/client.py",
                "@@ -38,3 +38,5 @@ from paramiko.rsakey import RSAKey",
                " from paramiko.ssh_exception import (",
                "-    SSHException, BadHostKeyException, NoValidConnectionsError",
                "+    SSHException,",
                "+    BadHostKeyException,",
                "+    NoValidConnectionsError,",
                " )",
                "@@ -44,3 +46,3 @@ from paramiko.util import retry_on_signal, ClosingContextManager",
                "-class SSHClient (ClosingContextManager):",
                "+class SSHClient(ClosingContextManager):",
                "     \"\"\"",
                "@@ -97,3 +99,3 @@ class SSHClient (ClosingContextManager):",
                "             # try the user's .ssh key file, and mask exceptions",
                "-            filename = os.path.expanduser('~/.ssh/known_hosts')",
                "+            filename = os.path.expanduser(\"~/.ssh/known_hosts\")",
                "             try:",
                "@@ -140,7 +142,8 @@ class SSHClient (ClosingContextManager):",
                "-        with open(filename, 'w') as f:",
                "+        with open(filename, \"w\") as f:",
                "             for hostname, keys in self._host_keys.items():",
                "                 for keytype, key in keys.items():",
                "-                    f.write('%s %s %s\\n' % (",
                "-                        hostname, keytype, key.get_base64()))",
                "+                    f.write(",
                "+                        \"%s %s %s\\n\" % (hostname, keytype, key.get_base64())",
                "+                    )",
                "@@ -200,3 +203,4 @@ class SSHClient (ClosingContextManager):",
                "         addrinfos = socket.getaddrinfo(",
                "-            hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM)",
                "+            hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM",
                "+        )",
                "         for (family, socktype, proto, canonname, sockaddr) in addrinfos:",
                "@@ -230,3 +234,3 @@ class SSHClient (ClosingContextManager):",
                "         gss_host=None,",
                "-        banner_timeout=None",
                "+        banner_timeout=None,",
                "     ):",
                "@@ -330,3 +334,4 @@ class SSHClient (ClosingContextManager):",
                "         t = self._transport = Transport(",
                "-            sock, gss_kex=gss_kex, gss_deleg_creds=gss_deleg_creds)",
                "+            sock, gss_kex=gss_kex, gss_deleg_creds=gss_deleg_creds",
                "+        )",
                "         t.use_compression(compress=compress)",
                "@@ -357,6 +362,8 @@ class SSHClient (ClosingContextManager):",
                "             our_server_key = self._system_host_keys.get(",
                "-                server_hostkey_name, {}).get(keytype)",
                "+                server_hostkey_name, {}",
                "+            ).get(keytype)",
                "             if our_server_key is None:",
                "-                our_server_key = self._host_keys.get(server_hostkey_name,",
                "-                                                     {}).get(keytype, None)",
                "+                our_server_key = self._host_keys.get(",
                "+                    server_hostkey_name, {}",
                "+                ).get(keytype, None)",
                "             if our_server_key is None:",
                "@@ -364,4 +371,5 @@ class SSHClient (ClosingContextManager):",
                "                 # let that fall out",
                "-                self._policy.missing_host_key(self, server_hostkey_name,",
                "-                                              server_key)",
                "+                self._policy.missing_host_key(",
                "+                    self, server_hostkey_name, server_key",
                "+                )",
                "                 # if the callback returns, assume the key is ok",
                "@@ -383,4 +391,14 @@ class SSHClient (ClosingContextManager):",
                "             gss_host = hostname",
                "-        self._auth(username, password, pkey, key_filenames, allow_agent,",
                "-                   look_for_keys, gss_auth, gss_kex, gss_deleg_creds, gss_host)",
                "+        self._auth(",
                "+            username,",
                "+            password,",
                "+            pkey,",
                "+            key_filenames,",
                "+            allow_agent,",
                "+            look_for_keys,",
                "+            gss_auth,",
                "+            gss_kex,",
                "+            gss_deleg_creds,",
                "+            gss_host,",
                "+        )",
                "@@ -429,9 +447,15 @@ class SSHClient (ClosingContextManager):",
                "         chan.exec_command(command)",
                "-        stdin = chan.makefile('wb', bufsize)",
                "-        stdout = chan.makefile('r', bufsize)",
                "-        stderr = chan.makefile_stderr('r', bufsize)",
                "+        stdin = chan.makefile(\"wb\", bufsize)",
                "+        stdout = chan.makefile(\"r\", bufsize)",
                "+        stderr = chan.makefile_stderr(\"r\", bufsize)",
                "         return stdin, stdout, stderr",
                "-    def invoke_shell(self, term='vt100', width=80, height=24, width_pixels=0,",
                "-                     height_pixels=0):",
                "+    def invoke_shell(",
                "+        self,",
                "+        term=\"vt100\",",
                "+        width=80,",
                "+        height=24,",
                "+        width_pixels=0,",
                "+        height_pixels=0,",
                "+    ):",
                "         \"\"\"",
                "@@ -474,4 +498,15 @@ class SSHClient (ClosingContextManager):",
                "-    def _auth(self, username, password, pkey, key_filenames, allow_agent,",
                "-              look_for_keys, gss_auth, gss_kex, gss_deleg_creds, gss_host):",
                "+    def _auth(",
                "+        self,",
                "+        username,",
                "+        password,",
                "+        pkey,",
                "+        key_filenames,",
                "+        allow_agent,",
                "+        look_for_keys,",
                "+        gss_auth,",
                "+        gss_kex,",
                "+        gss_deleg_creds,",
                "+        gss_host,",
                "+    ):",
                "         \"\"\"",
                "@@ -491,3 +526,3 @@ class SSHClient (ClosingContextManager):",
                "         allowed_types = set()",
                "-        two_factor_types = set(['keyboard-interactive', 'password'])",
                "+        two_factor_types = set([\"keyboard-interactive\", \"password\"])",
                "@@ -508,4 +543,5 @@ class SSHClient (ClosingContextManager):",
                "             try:",
                "-                self._transport.auth_gssapi_with_mic(username, gss_host,",
                "-                                                     gss_deleg_creds)",
                "+                self._transport.auth_gssapi_with_mic(",
                "+                    username, gss_host, gss_deleg_creds",
                "+                )",
                "                 return",
                "@@ -518,6 +554,8 @@ class SSHClient (ClosingContextManager):",
                "                     DEBUG,",
                "-                    'Trying SSH key %s' % hexlify(pkey.get_fingerprint()))",
                "+                    \"Trying SSH key %s\" % hexlify(pkey.get_fingerprint()),",
                "+                )",
                "                 allowed_types = set(",
                "-                    self._transport.auth_publickey(username, pkey))",
                "-                two_factor = (allowed_types & two_factor_types)",
                "+                    self._transport.auth_publickey(username, pkey)",
                "+                )",
                "+                two_factor = allowed_types & two_factor_types",
                "                 if not two_factor:",
                "@@ -532,10 +570,13 @@ class SSHClient (ClosingContextManager):",
                "                         key = pkey_class.from_private_key_file(",
                "-                            key_filename, password)",
                "+                            key_filename, password",
                "+                        )",
                "                         self._log(",
                "                             DEBUG,",
                "-                            'Trying key %s from %s' % (",
                "-                                hexlify(key.get_fingerprint()), key_filename))",
                "+                            \"Trying key %s from %s\"",
                "+                            % (hexlify(key.get_fingerprint()), key_filename),",
                "+                        )",
                "                         allowed_types = set(",
                "-                            self._transport.auth_publickey(username, key))",
                "-                        two_factor = (allowed_types & two_factor_types)",
                "+                            self._transport.auth_publickey(username, key)",
                "+                        )",
                "+                        two_factor = allowed_types & two_factor_types",
                "                         if not two_factor:",
                "@@ -554,4 +595,5 @@ class SSHClient (ClosingContextManager):",
                "                         DEBUG,",
                "-                        'Trying SSH agent key %s' % hexlify(",
                "-                            key.get_fingerprint()))",
                "+                        \"Trying SSH agent key %s\"",
                "+                        % hexlify(key.get_fingerprint()),",
                "+                    )",
                "                     # for 2-factor auth a successfully auth'd key password",
                "@@ -559,4 +601,5 @@ class SSHClient (ClosingContextManager):",
                "                     allowed_types = set(",
                "-                        self._transport.auth_publickey(username, key))",
                "-                    two_factor = (allowed_types & two_factor_types)",
                "+                        self._transport.auth_publickey(username, key)",
                "+                    )",
                "+                    two_factor = allowed_types & two_factor_types",
                "                     if not two_factor:",
                "@@ -569,5 +612,5 @@ class SSHClient (ClosingContextManager):",
                "             keyfiles = []",
                "-            rsa_key = os.path.expanduser('~/.ssh/id_rsa')",
                "-            dsa_key = os.path.expanduser('~/.ssh/id_dsa')",
                "-            ecdsa_key = os.path.expanduser('~/.ssh/id_ecdsa')",
                "+            rsa_key = os.path.expanduser(\"~/.ssh/id_rsa\")",
                "+            dsa_key = os.path.expanduser(\"~/.ssh/id_dsa\")",
                "+            ecdsa_key = os.path.expanduser(\"~/.ssh/id_ecdsa\")",
                "             if os.path.isfile(rsa_key):",
                "@@ -579,5 +622,5 @@ class SSHClient (ClosingContextManager):",
                "             # look in ~/ssh/ for windows users:",
                "-            rsa_key = os.path.expanduser('~/ssh/id_rsa')",
                "-            dsa_key = os.path.expanduser('~/ssh/id_dsa')",
                "-            ecdsa_key = os.path.expanduser('~/ssh/id_ecdsa')",
                "+            rsa_key = os.path.expanduser(\"~/ssh/id_rsa\")",
                "+            dsa_key = os.path.expanduser(\"~/ssh/id_dsa\")",
                "+            ecdsa_key = os.path.expanduser(\"~/ssh/id_ecdsa\")",
                "             if os.path.isfile(rsa_key):",
                "@@ -597,4 +640,5 @@ class SSHClient (ClosingContextManager):",
                "                         DEBUG,",
                "-                        'Trying discovered key %s in %s' % (",
                "-                            hexlify(key.get_fingerprint()), filename))",
                "+                        \"Trying discovered key %s in %s\"",
                "+                        % (hexlify(key.get_fingerprint()), filename),",
                "+                    )",
                "@@ -603,4 +647,5 @@ class SSHClient (ClosingContextManager):",
                "                     allowed_types = set(",
                "-                        self._transport.auth_publickey(username, key))",
                "-                    two_factor = (allowed_types & two_factor_types)",
                "+                        self._transport.auth_publickey(username, key)",
                "+                    )",
                "+                    two_factor = allowed_types & two_factor_types",
                "                     if not two_factor:",
                "@@ -627,3 +672,3 @@ class SSHClient (ClosingContextManager):",
                "             raise saved_exception",
                "-        raise SSHException('No authentication methods available')",
                "+        raise SSHException(\"No authentication methods available\")",
                "@@ -633,3 +678,3 @@ class SSHClient (ClosingContextManager):",
                "-class MissingHostKeyPolicy (object):",
                "+class MissingHostKeyPolicy(object):",
                "     \"\"\"",
                "@@ -654,3 +699,3 @@ class MissingHostKeyPolicy (object):",
                "-class AutoAddPolicy (MissingHostKeyPolicy):",
                "+class AutoAddPolicy(MissingHostKeyPolicy):",
                "     \"\"\"",
                "@@ -664,7 +709,10 @@ class AutoAddPolicy (MissingHostKeyPolicy):",
                "             client.save_host_keys(client._host_keys_filename)",
                "-        client._log(DEBUG, 'Adding %s host key for %s: %s' %",
                "-                    (key.get_name(), hostname, hexlify(key.get_fingerprint())))",
                "+        client._log(",
                "+            DEBUG,",
                "+            \"Adding %s host key for %s: %s\"",
                "+            % (key.get_name(), hostname, hexlify(key.get_fingerprint())),",
                "+        )",
                "-class RejectPolicy (MissingHostKeyPolicy):",
                "+class RejectPolicy(MissingHostKeyPolicy):",
                "     \"\"\"",
                "@@ -675,8 +723,11 @@ class RejectPolicy (MissingHostKeyPolicy):",
                "     def missing_host_key(self, client, hostname, key):",
                "-        client._log(DEBUG, 'Rejecting %s host key for %s: %s' %",
                "-                    (key.get_name(), hostname, hexlify(key.get_fingerprint())))",
                "-        raise SSHException('Server %r not found in known_hosts' % hostname)",
                "+        client._log(",
                "+            DEBUG,",
                "+            \"Rejecting %s host key for %s: %s\"",
                "+            % (key.get_name(), hostname, hexlify(key.get_fingerprint())),",
                "+        )",
                "+        raise SSHException(\"Server %r not found in known_hosts\" % hostname)",
                "-class WarningPolicy (MissingHostKeyPolicy):",
                "+class WarningPolicy(MissingHostKeyPolicy):",
                "     \"\"\"",
                "@@ -685,5 +736,7 @@ class WarningPolicy (MissingHostKeyPolicy):",
                "     \"\"\"",
                "+",
                "     def missing_host_key(self, client, hostname, key):",
                "-        warnings.warn('Unknown %s host key for %s: %s' %",
                "-                      (key.get_name(), hostname, hexlify(",
                "-                          key.get_fingerprint())))",
                "+        warnings.warn(",
                "+            \"Unknown %s host key for %s: %s\"",
                "+            % (key.get_name(), hostname, hexlify(key.get_fingerprint()))",
                "+        )",
                "diff --git a/paramiko/common.py b/paramiko/common.py",
                "index 11c4121d..87d3dcf6 100644",
                "--- a/paramiko/common.py",
                "+++ b/paramiko/common.py",
                "@@ -24,18 +24,41 @@ from paramiko.py3compat import byte_chr, PY2, bytes_types, text_type, long",
                "-MSG_DISCONNECT, MSG_IGNORE, MSG_UNIMPLEMENTED, MSG_DEBUG, \\",
                "-    MSG_SERVICE_REQUEST, MSG_SERVICE_ACCEPT = range(1, 7)",
                "-MSG_KEXINIT, MSG_NEWKEYS = range(20, 22)",
                "-MSG_USERAUTH_REQUEST, MSG_USERAUTH_FAILURE, MSG_USERAUTH_SUCCESS, \\",
                "-    MSG_USERAUTH_BANNER = range(50, 54)",
                "+(",
                "+    MSG_DISCONNECT,",
                "+    MSG_IGNORE,",
                "+    MSG_UNIMPLEMENTED,",
                "+    MSG_DEBUG,",
                "+    MSG_SERVICE_REQUEST,",
                "+    MSG_SERVICE_ACCEPT,",
                "+) = range(1, 7)",
                "+(MSG_KEXINIT, MSG_NEWKEYS) = range(20, 22)",
                "+(",
                "+    MSG_USERAUTH_REQUEST,",
                "+    MSG_USERAUTH_FAILURE,",
                "+    MSG_USERAUTH_SUCCESS,",
                "+    MSG_USERAUTH_BANNER,",
                "+) = range(50, 54)",
                " MSG_USERAUTH_PK_OK = 60",
                "-MSG_USERAUTH_INFO_REQUEST, MSG_USERAUTH_INFO_RESPONSE = range(60, 62)",
                "-MSG_USERAUTH_GSSAPI_RESPONSE, MSG_USERAUTH_GSSAPI_TOKEN = range(60, 62)",
                "-MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE, MSG_USERAUTH_GSSAPI_ERROR,\\",
                "-    MSG_USERAUTH_GSSAPI_ERRTOK, MSG_USERAUTH_GSSAPI_MIC = range(63, 67)",
                "+(MSG_USERAUTH_INFO_REQUEST, MSG_USERAUTH_INFO_RESPONSE) = range(60, 62)",
                "+(MSG_USERAUTH_GSSAPI_RESPONSE, MSG_USERAUTH_GSSAPI_TOKEN) = range(60, 62)",
                "+(",
                "+    MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE,",
                "+    MSG_USERAUTH_GSSAPI_ERROR,",
                "+    MSG_USERAUTH_GSSAPI_ERRTOK,",
                "+    MSG_USERAUTH_GSSAPI_MIC,",
                "+) = range(63, 67)",
                " HIGHEST_USERAUTH_MESSAGE_ID = 79",
                "-MSG_GLOBAL_REQUEST, MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE = range(80, 83)",
                "-MSG_CHANNEL_OPEN, MSG_CHANNEL_OPEN_SUCCESS, MSG_CHANNEL_OPEN_FAILURE, \\",
                "-    MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_DATA, MSG_CHANNEL_EXTENDED_DATA, \\",
                "-    MSG_CHANNEL_EOF, MSG_CHANNEL_CLOSE, MSG_CHANNEL_REQUEST, \\",
                "-    MSG_CHANNEL_SUCCESS, MSG_CHANNEL_FAILURE = range(90, 101)",
                "+(MSG_GLOBAL_REQUEST, MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE) = range(80, 83)",
                "+(",
                "+    MSG_CHANNEL_OPEN,",
                "+    MSG_CHANNEL_OPEN_SUCCESS,",
                "+    MSG_CHANNEL_OPEN_FAILURE,",
                "+    MSG_CHANNEL_WINDOW_ADJUST,",
                "+    MSG_CHANNEL_DATA,",
                "+    MSG_CHANNEL_EXTENDED_DATA,",
                "+    MSG_CHANNEL_EOF,",
                "+    MSG_CHANNEL_CLOSE,",
                "+    MSG_CHANNEL_REQUEST,",
                "+    MSG_CHANNEL_SUCCESS,",
                "+    MSG_CHANNEL_FAILURE,",
                "+) = range(90, 101)",
                "@@ -58,4 +81,5 @@ cMSG_USERAUTH_GSSAPI_RESPONSE = byte_chr(MSG_USERAUTH_GSSAPI_RESPONSE)",
                " cMSG_USERAUTH_GSSAPI_TOKEN = byte_chr(MSG_USERAUTH_GSSAPI_TOKEN)",
                "-cMSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE = \\",
                "-    byte_chr(MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE)",
                "+cMSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE = byte_chr(",
                "+    MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE",
                "+)",
                " cMSG_USERAUTH_GSSAPI_ERROR = byte_chr(MSG_USERAUTH_GSSAPI_ERROR)",
                "@@ -80,43 +104,43 @@ cMSG_CHANNEL_FAILURE = byte_chr(MSG_CHANNEL_FAILURE)",
                " MSG_NAMES = {",
                "-    MSG_DISCONNECT: 'disconnect',",
                "-    MSG_IGNORE: 'ignore',",
                "-    MSG_UNIMPLEMENTED: 'unimplemented',",
                "-    MSG_DEBUG: 'debug',",
                "-    MSG_SERVICE_REQUEST: 'service-request',",
                "-    MSG_SERVICE_ACCEPT: 'service-accept',",
                "-    MSG_KEXINIT: 'kexinit',",
                "-    MSG_NEWKEYS: 'newkeys',",
                "-    30: 'kex30',",
                "-    31: 'kex31',",
                "-    32: 'kex32',",
                "-    33: 'kex33',",
                "-    34: 'kex34',",
                "-    40: 'kex40',",
                "-    41: 'kex41',",
                "-    MSG_USERAUTH_REQUEST: 'userauth-request',",
                "-    MSG_USERAUTH_FAILURE: 'userauth-failure',",
                "-    MSG_USERAUTH_SUCCESS: 'userauth-success',",
                "-    MSG_USERAUTH_BANNER: 'userauth--banner',",
                "-    MSG_USERAUTH_PK_OK: 'userauth-60(pk-ok/info-request)',",
                "-    MSG_USERAUTH_INFO_RESPONSE: 'userauth-info-response',",
                "-    MSG_GLOBAL_REQUEST: 'global-request',",
                "-    MSG_REQUEST_SUCCESS: 'request-success',",
                "-    MSG_REQUEST_FAILURE: 'request-failure',",
                "-    MSG_CHANNEL_OPEN: 'channel-open',",
                "-    MSG_CHANNEL_OPEN_SUCCESS: 'channel-open-success',",
                "-    MSG_CHANNEL_OPEN_FAILURE: 'channel-open-failure',",
                "-    MSG_CHANNEL_WINDOW_ADJUST: 'channel-window-adjust',",
                "-    MSG_CHANNEL_DATA: 'channel-data',",
                "-    MSG_CHANNEL_EXTENDED_DATA: 'channel-extended-data',",
                "-    MSG_CHANNEL_EOF: 'channel-eof',",
                "-    MSG_CHANNEL_CLOSE: 'channel-close',",
                "-    MSG_CHANNEL_REQUEST: 'channel-request',",
                "-    MSG_CHANNEL_SUCCESS: 'channel-success',",
                "-    MSG_CHANNEL_FAILURE: 'channel-failure',",
                "-    MSG_USERAUTH_GSSAPI_RESPONSE: 'userauth-gssapi-response',",
                "-    MSG_USERAUTH_GSSAPI_TOKEN: 'userauth-gssapi-token',",
                "-    MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE: 'userauth-gssapi-exchange-complete',",
                "-    MSG_USERAUTH_GSSAPI_ERROR: 'userauth-gssapi-error',",
                "-    MSG_USERAUTH_GSSAPI_ERRTOK: 'userauth-gssapi-error-token',",
                "-    MSG_USERAUTH_GSSAPI_MIC: 'userauth-gssapi-mic'",
                "+    MSG_DISCONNECT: \"disconnect\",",
                "+    MSG_IGNORE: \"ignore\",",
                "+    MSG_UNIMPLEMENTED: \"unimplemented\",",
                "+    MSG_DEBUG: \"debug\",",
                "+    MSG_SERVICE_REQUEST: \"service-request\",",
                "+    MSG_SERVICE_ACCEPT: \"service-accept\",",
                "+    MSG_KEXINIT: \"kexinit\",",
                "+    MSG_NEWKEYS: \"newkeys\",",
                "+    30: \"kex30\",",
                "+    31: \"kex31\",",
                "+    32: \"kex32\",",
                "+    33: \"kex33\",",
                "+    34: \"kex34\",",
                "+    40: \"kex40\",",
                "+    41: \"kex41\",",
                "+    MSG_USERAUTH_REQUEST: \"userauth-request\",",
                "+    MSG_USERAUTH_FAILURE: \"userauth-failure\",",
                "+    MSG_USERAUTH_SUCCESS: \"userauth-success\",",
                "+    MSG_USERAUTH_BANNER: \"userauth--banner\",",
                "+    MSG_USERAUTH_PK_OK: \"userauth-60(pk-ok/info-request)\",",
                "+    MSG_USERAUTH_INFO_RESPONSE: \"userauth-info-response\",",
                "+    MSG_GLOBAL_REQUEST: \"global-request\",",
                "+    MSG_REQUEST_SUCCESS: \"request-success\",",
                "+    MSG_REQUEST_FAILURE: \"request-failure\",",
                "+    MSG_CHANNEL_OPEN: \"channel-open\",",
                "+    MSG_CHANNEL_OPEN_SUCCESS: \"channel-open-success\",",
                "+    MSG_CHANNEL_OPEN_FAILURE: \"channel-open-failure\",",
                "+    MSG_CHANNEL_WINDOW_ADJUST: \"channel-window-adjust\",",
                "+    MSG_CHANNEL_DATA: \"channel-data\",",
                "+    MSG_CHANNEL_EXTENDED_DATA: \"channel-extended-data\",",
                "+    MSG_CHANNEL_EOF: \"channel-eof\",",
                "+    MSG_CHANNEL_CLOSE: \"channel-close\",",
                "+    MSG_CHANNEL_REQUEST: \"channel-request\",",
                "+    MSG_CHANNEL_SUCCESS: \"channel-success\",",
                "+    MSG_CHANNEL_FAILURE: \"channel-failure\",",
                "+    MSG_USERAUTH_GSSAPI_RESPONSE: \"userauth-gssapi-response\",",
                "+    MSG_USERAUTH_GSSAPI_TOKEN: \"userauth-gssapi-token\",",
                "+    MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE: \"userauth-gssapi-exchange-complete\",",
                "+    MSG_USERAUTH_GSSAPI_ERROR: \"userauth-gssapi-error\",",
                "+    MSG_USERAUTH_GSSAPI_ERRTOK: \"userauth-gssapi-error-token\",",
                "+    MSG_USERAUTH_GSSAPI_MIC: \"userauth-gssapi-mic\",",
                " }",
                "@@ -129,7 +153,9 @@ AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, AUTH_FAILED = range(3)",
                " # channel request failed reasons:",
                "-(OPEN_SUCCEEDED,",
                "- OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED,",
                "- OPEN_FAILED_CONNECT_FAILED,",
                "- OPEN_FAILED_UNKNOWN_CHANNEL_TYPE,",
                "- OPEN_FAILED_RESOURCE_SHORTAGE) = range(0, 5)",
                "+(",
                "+    OPEN_SUCCEEDED,",
                "+    OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED,",
                "+    OPEN_FAILED_CONNECT_FAILED,",
                "+    OPEN_FAILED_UNKNOWN_CHANNEL_TYPE,",
                "+    OPEN_FAILED_RESOURCE_SHORTAGE,",
                "+) = range(0, 5)",
                "@@ -137,6 +163,6 @@ AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, AUTH_FAILED = range(3)",
                " CONNECTION_FAILED_CODE = {",
                "-    1: 'Administratively prohibited',",
                "-    2: 'Connect failed',",
                "-    3: 'Unknown channel type',",
                "-    4: 'Resource shortage'",
                "+    1: \"Administratively prohibited\",",
                "+    2: \"Connect failed\",",
                "+    3: \"Unknown channel type\",",
                "+    4: \"Resource shortage\",",
                " }",
                "@@ -144,4 +170,7 @@ CONNECTION_FAILED_CODE = {",
                "-DISCONNECT_SERVICE_NOT_AVAILABLE, DISCONNECT_AUTH_CANCELLED_BY_USER, \\",
                "-    DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE = 7, 13, 14",
                "+(",
                "+    DISCONNECT_SERVICE_NOT_AVAILABLE,",
                "+    DISCONNECT_AUTH_CANCELLED_BY_USER,",
                "+    DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE,",
                "+) = (7, 13, 14)",
                "diff --git a/paramiko/compress.py b/paramiko/compress.py",
                "index b55f0b1d..b27d5915 100644",
                "--- a/paramiko/compress.py",
                "+++ b/paramiko/compress.py",
                "@@ -25,3 +25,3 @@ import zlib",
                "-class ZlibCompressor (object):",
                "+class ZlibCompressor(object):",
                "     def __init__(self):",
                "@@ -33,3 +33,3 @@ class ZlibCompressor (object):",
                "-class ZlibDecompressor (object):",
                "+class ZlibDecompressor(object):",
                "     def __init__(self):",
                "diff --git a/paramiko/config.py b/paramiko/config.py",
                "index 073abb36..f7941e0d 100644",
                "--- a/paramiko/config.py",
                "+++ b/paramiko/config.py",
                "@@ -32,3 +32,3 @@ SSH_PORT = 22",
                "-class SSHConfig (object):",
                "+class SSHConfig(object):",
                "     \"\"\"",
                "@@ -43,3 +43,3 @@ class SSHConfig (object):",
                "-    SETTINGS_REGEX = re.compile(r'(\\w+)(?:\\s*=\\s*|\\s+)(.+)')",
                "+    SETTINGS_REGEX = re.compile(r\"(\\w+)(?:\\s*=\\s*|\\s+)(.+)\")",
                "@@ -57,3 +57,3 @@ class SSHConfig (object):",
                "         \"\"\"",
                "-        host = {\"host\": ['*'], \"config\": {}}",
                "+        host = {\"host\": [\"*\"], \"config\": {}}",
                "         for line in file_obj:",
                "@@ -62,3 +62,3 @@ class SSHConfig (object):",
                "             line = line.strip()",
                "-            if not line or line.startswith('#'):",
                "+            if not line or line.startswith(\"#\"):",
                "                 continue",
                "@@ -71,9 +71,6 @@ class SSHConfig (object):",
                "-            if key == 'host':",
                "+            if key == \"host\":",
                "                 self._config.append(host)",
                "-                host = {",
                "-                    'host': self._get_hosts(value),",
                "-                    'config': {}",
                "-                }",
                "-            elif key == 'proxycommand' and value.lower() == 'none':",
                "+                host = {\"host\": self._get_hosts(value), \"config\": {}}",
                "+            elif key == \"proxycommand\" and value.lower() == \"none\":",
                "                 # Store 'none' as None; prior to 3.x, it will get stripped out",
                "@@ -81,3 +78,3 @@ class SSHConfig (object):",
                "                 # will simply not get stripped, leaving a nice explicit marker.",
                "-                host['config'][key] = None",
                "+                host[\"config\"][key] = None",
                "             else:",
                "@@ -89,9 +86,9 @@ class SSHConfig (object):",
                "                 # and they should be tried in order of specification.",
                "-                if key in ['identityfile', 'localforward', 'remoteforward']:",
                "-                    if key in host['config']:",
                "-                        host['config'][key].append(value)",
                "+                if key in [\"identityfile\", \"localforward\", \"remoteforward\"]:",
                "+                    if key in host[\"config\"]:",
                "+                        host[\"config\"][key].append(value)",
                "                     else:",
                "-                        host['config'][key] = [value]",
                "-                elif key not in host['config']:",
                "-                    host['config'][key] = value",
                "+                        host[\"config\"][key] = [value]",
                "+                elif key not in host[\"config\"]:",
                "+                    host[\"config\"][key] = value",
                "         self._config.append(host)",
                "@@ -119,4 +116,5 @@ class SSHConfig (object):",
                "         matches = [",
                "-            config for config in self._config",
                "-            if self._allowed(config['host'], hostname)",
                "+            config",
                "+            for config in self._config",
                "+            if self._allowed(config[\"host\"], hostname)",
                "         ]",
                "@@ -125,3 +123,3 @@ class SSHConfig (object):",
                "         for match in matches:",
                "-            for key, value in match['config'].items():",
                "+            for key, value in match[\"config\"].items():",
                "                 if key not in ret:",
                "@@ -132,3 +130,3 @@ class SSHConfig (object):",
                "                     ret[key] = value[:] if value is not None else value",
                "-                elif key == 'identityfile':",
                "+                elif key == \"identityfile\":",
                "                     ret[key].extend(value)",
                "@@ -136,4 +134,4 @@ class SSHConfig (object):",
                "         # TODO: remove in 3.x re #670",
                "-        if 'proxycommand' in ret and ret['proxycommand'] is None:",
                "-            del ret['proxycommand']",
                "+        if \"proxycommand\" in ret and ret[\"proxycommand\"] is None:",
                "+            del ret[\"proxycommand\"]",
                "         return ret",
                "@@ -147,3 +145,3 @@ class SSHConfig (object):",
                "         for entry in self._config:",
                "-            hosts.update(entry['host'])",
                "+            hosts.update(entry[\"host\"])",
                "         return hosts",
                "@@ -153,3 +151,3 @@ class SSHConfig (object):",
                "         for host in hosts:",
                "-            if host.startswith('!') and fnmatch.fnmatch(hostname, host[1:]):",
                "+            if host.startswith(\"!\") and fnmatch.fnmatch(hostname, host[1:]):",
                "                 return False",
                "@@ -171,9 +169,9 @@ class SSHConfig (object):",
                "-        if 'hostname' in config:",
                "-            config['hostname'] = config['hostname'].replace('%h', hostname)",
                "+        if \"hostname\" in config:",
                "+            config[\"hostname\"] = config[\"hostname\"].replace(\"%h\", hostname)",
                "         else:",
                "-            config['hostname'] = hostname",
                "+            config[\"hostname\"] = hostname",
                "-        if 'port' in config:",
                "-            port = config['port']",
                "+        if \"port\" in config:",
                "+            port = config[\"port\"]",
                "         else:",
                "@@ -181,5 +179,5 @@ class SSHConfig (object):",
                "-        user = os.getenv('USER')",
                "-        if 'user' in config:",
                "-            remoteuser = config['user']",
                "+        user = os.getenv(\"USER\")",
                "+        if \"user\" in config:",
                "+            remoteuser = config[\"user\"]",
                "         else:",
                "@@ -187,32 +185,30 @@ class SSHConfig (object):",
                "-        host = socket.gethostname().split('.')[0]",
                "+        host = socket.gethostname().split(\".\")[0]",
                "         fqdn = LazyFqdn(config, host)",
                "-        homedir = os.path.expanduser('~')",
                "-        replacements = {'controlpath':",
                "-                        [",
                "-                            ('%h', config['hostname']),",
                "-                            ('%l', fqdn),",
                "-                            ('%L', host),",
                "-                            ('%n', hostname),",
                "-                            ('%p', port),",
                "-                            ('%r', remoteuser),",
                "-                            ('%u', user)",
                "-                        ],",
                "-                        'identityfile':",
                "-                        [",
                "-                            ('~', homedir),",
                "-                            ('%d', homedir),",
                "-                            ('%h', config['hostname']),",
                "-                            ('%l', fqdn),",
                "-                            ('%u', user),",
                "-                            ('%r', remoteuser)",
                "-                        ],",
                "-                        'proxycommand':",
                "-                        [",
                "-                            ('~', homedir),",
                "-                            ('%h', config['hostname']),",
                "-                            ('%p', port),",
                "-                            ('%r', remoteuser)",
                "-                        ]",
                "-                        }",
                "+        homedir = os.path.expanduser(\"~\")",
                "+        replacements = {",
                "+            \"controlpath\": [",
                "+                (\"%h\", config[\"hostname\"]),",
                "+                (\"%l\", fqdn),",
                "+                (\"%L\", host),",
                "+                (\"%n\", hostname),",
                "+                (\"%p\", port),",
                "+                (\"%r\", remoteuser),",
                "+                (\"%u\", user),",
                "+            ],",
                "+            \"identityfile\": [",
                "+                (\"~\", homedir),",
                "+                (\"%d\", homedir),",
                "+                (\"%h\", config[\"hostname\"]),",
                "+                (\"%l\", fqdn),",
                "+                (\"%u\", user),",
                "+                (\"%r\", remoteuser),",
                "+            ],",
                "+            \"proxycommand\": [",
                "+                (\"~\", homedir),",
                "+                (\"%h\", config[\"hostname\"]),",
                "+                (\"%p\", port),",
                "+                (\"%r\", remoteuser),",
                "+            ],",
                "+        }",
                "@@ -267,7 +263,7 @@ class LazyFqdn(object):",
                "             fqdn = None",
                "-            address_family = self.config.get('addressfamily', 'any').lower()",
                "-            if address_family != 'any':",
                "+            address_family = self.config.get(\"addressfamily\", \"any\").lower()",
                "+            if address_family != \"any\":",
                "                 try:",
                "                     family = socket.AF_INET6",
                "-                    if address_family == 'inet':",
                "+                    if address_family == \"inet\":",
                "                         socket.AF_INET",
                "@@ -279,3 +275,3 @@ class LazyFqdn(object):",
                "                         socket.IPPROTO_IP,",
                "-                        socket.AI_CANONNAME",
                "+                        socket.AI_CANONNAME,",
                "                     )",
                "@@ -283,3 +279,3 @@ class LazyFqdn(object):",
                "                         af, socktype, proto, canonname, sa = res",
                "-                        if canonname and '.' in canonname:",
                "+                        if canonname and \".\" in canonname:",
                "                             fqdn = canonname",
                "diff --git a/paramiko/dsskey.py b/paramiko/dsskey.py",
                "index 55ef1e9b..489e08f0 100644",
                "--- a/paramiko/dsskey.py",
                "+++ b/paramiko/dsskey.py",
                "@@ -27,3 +27,4 @@ from cryptography.hazmat.primitives.asymmetric import dsa",
                " from cryptography.hazmat.primitives.asymmetric.utils import (",
                "-    decode_dss_signature, encode_dss_signature",
                "+    decode_dss_signature,",
                "+    encode_dss_signature,",
                " )",
                "@@ -44,4 +45,11 @@ class DSSKey(PKey):",
                "-    def __init__(self, msg=None, data=None, filename=None, password=None,",
                "-                 vals=None, file_obj=None):",
                "+    def __init__(",
                "+        self,",
                "+        msg=None,",
                "+        data=None,",
                "+        filename=None,",
                "+        password=None,",
                "+        vals=None,",
                "+        file_obj=None,",
                "+    ):",
                "         self.p = None",
                "@@ -63,5 +71,5 @@ class DSSKey(PKey):",
                "             if msg is None:",
                "-                raise SSHException('Key object may not be empty')",
                "-            if msg.get_text() != 'ssh-dss':",
                "-                raise SSHException('Invalid key')",
                "+                raise SSHException(\"Key object may not be empty\")",
                "+            if msg.get_text() != \"ssh-dss\":",
                "+                raise SSHException(\"Invalid key\")",
                "             self.p = msg.get_mpint()",
                "@@ -74,3 +82,3 @@ class DSSKey(PKey):",
                "         m = Message()",
                "-        m.add_string('ssh-dss')",
                "+        m.add_string(\"ssh-dss\")",
                "         m.add_mpint(self.p)",
                "@@ -94,3 +102,3 @@ class DSSKey(PKey):",
                "     def get_name(self):",
                "-        return 'ssh-dss'",
                "+        return \"ssh-dss\"",
                "@@ -108,7 +116,5 @@ class DSSKey(PKey):",
                "                 parameter_numbers=dsa.DSAParameterNumbers(",
                "-                    p=self.p,",
                "-                    q=self.q,",
                "-                    g=self.g",
                "-                )",
                "-            )",
                "+                    p=self.p, q=self.q, g=self.g",
                "+                ),",
                "+            ),",
                "         ).private_key(backend=default_backend())",
                "@@ -119,3 +125,3 @@ class DSSKey(PKey):",
                "         m = Message()",
                "-        m.add_string('ssh-dss')",
                "+        m.add_string(\"ssh-dss\")",
                "         # apparently, in rare cases, r or s may be shorter than 20 bytes!",
                "@@ -136,3 +142,3 @@ class DSSKey(PKey):",
                "             kind = msg.get_text()",
                "-            if kind != 'ssh-dss':",
                "+            if kind != \"ssh-dss\":",
                "                 return 0",
                "@@ -149,6 +155,4 @@ class DSSKey(PKey):",
                "             parameter_numbers=dsa.DSAParameterNumbers(",
                "-                p=self.p,",
                "-                q=self.q,",
                "-                g=self.g",
                "-            )",
                "+                p=self.p, q=self.q, g=self.g",
                "+            ),",
                "         ).public_key(backend=default_backend())",
                "@@ -169,7 +173,5 @@ class DSSKey(PKey):",
                "                 parameter_numbers=dsa.DSAParameterNumbers(",
                "-                    p=self.p,",
                "-                    q=self.q,",
                "-                    g=self.g",
                "-                )",
                "-            )",
                "+                    p=self.p, q=self.q, g=self.g",
                "+                ),",
                "+            ),",
                "         ).private_key(backend=default_backend())",
                "@@ -180,3 +182,3 @@ class DSSKey(PKey):",
                "             serialization.PrivateFormat.TraditionalOpenSSL,",
                "-            password=password",
                "+            password=password,",
                "         )",
                "@@ -189,7 +191,5 @@ class DSSKey(PKey):",
                "                 parameter_numbers=dsa.DSAParameterNumbers(",
                "-                    p=self.p,",
                "-                    q=self.q,",
                "-                    g=self.g",
                "-                )",
                "-            )",
                "+                    p=self.p, q=self.q, g=self.g",
                "+                ),",
                "+            ),",
                "         ).private_key(backend=default_backend())",
                "@@ -200,3 +200,3 @@ class DSSKey(PKey):",
                "             serialization.PrivateFormat.TraditionalOpenSSL,",
                "-            password=password",
                "+            password=password,",
                "         )",
                "@@ -216,8 +216,10 @@ class DSSKey(PKey):",
                "         ).private_numbers()",
                "-        key = DSSKey(vals=(",
                "-            numbers.public_numbers.parameter_numbers.p,",
                "-            numbers.public_numbers.parameter_numbers.q,",
                "-            numbers.public_numbers.parameter_numbers.g,",
                "-            numbers.public_numbers.y",
                "-        ))",
                "+        key = DSSKey(",
                "+            vals=(",
                "+                numbers.public_numbers.parameter_numbers.p,",
                "+                numbers.public_numbers.parameter_numbers.q,",
                "+                numbers.public_numbers.parameter_numbers.g,",
                "+                numbers.public_numbers.y,",
                "+            )",
                "+        )",
                "         key.x = numbers.x",
                "@@ -228,3 +230,3 @@ class DSSKey(PKey):",
                "     def _from_private_key_file(self, filename, password):",
                "-        data = self._read_private_key_file('DSA', filename, password)",
                "+        data = self._read_private_key_file(\"DSA\", filename, password)",
                "         self._decode_key(data)",
                "@@ -232,3 +234,3 @@ class DSSKey(PKey):",
                "     def _from_private_key(self, file_obj, password):",
                "-        data = self._read_private_key('DSA', file_obj, password)",
                "+        data = self._read_private_key(\"DSA\", file_obj, password)",
                "         self._decode_key(data)",
                "@@ -241,10 +243,7 @@ class DSSKey(PKey):",
                "         except BERException as e:",
                "-            raise SSHException('Unable to parse key file: ' + str(e))",
                "-        if (",
                "-            type(keylist) is not list or",
                "-            len(keylist) < 6 or",
                "-            keylist[0] != 0",
                "-        ):",
                "+            raise SSHException(\"Unable to parse key file: \" + str(e))",
                "+        if type(keylist) is not list or len(keylist) < 6 or keylist[0] != 0:",
                "             raise SSHException(",
                "-                'not a valid DSA private key file (bad ber encoding)')",
                "+                \"not a valid DSA private key file (bad ber encoding)\"",
                "+            )",
                "         self.p = keylist[1]",
                "diff --git a/paramiko/ecdsakey.py b/paramiko/ecdsakey.py",
                "index f5dacac8..b6c00f6f 100644",
                "--- a/paramiko/ecdsakey.py",
                "+++ b/paramiko/ecdsakey.py",
                "@@ -27,3 +27,4 @@ from cryptography.hazmat.primitives.asymmetric import ec",
                " from cryptography.hazmat.primitives.asymmetric.utils import (",
                "-    decode_dss_signature, encode_dss_signature",
                "+    decode_dss_signature,",
                "+    encode_dss_signature,",
                " )",
                "@@ -45,2 +46,3 @@ class _ECDSACurve(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, curve_class, nist_name):",
                "@@ -69,2 +71,3 @@ class _ECDSACurveSet(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, ecdsa_curves):",
                "@@ -97,10 +100,20 @@ class ECDSAKey(PKey):",
                "-    _ECDSA_CURVES = _ECDSACurveSet([",
                "-        _ECDSACurve(ec.SECP256R1, 'nistp256'),",
                "-        _ECDSACurve(ec.SECP384R1, 'nistp384'),",
                "-        _ECDSACurve(ec.SECP521R1, 'nistp521'),",
                "-    ])",
                "-",
                "-    def __init__(self, msg=None, data=None, filename=None, password=None,",
                "-                 vals=None, file_obj=None, validate_point=True):",
                "+    _ECDSA_CURVES = _ECDSACurveSet(",
                "+        [",
                "+            _ECDSACurve(ec.SECP256R1, \"nistp256\"),",
                "+            _ECDSACurve(ec.SECP384R1, \"nistp384\"),",
                "+            _ECDSACurve(ec.SECP521R1, \"nistp521\"),",
                "+        ]",
                "+    )",
                "+",
                "+    def __init__(",
                "+        self,",
                "+        msg=None,",
                "+        data=None,",
                "+        filename=None,",
                "+        password=None,",
                "+        vals=None,",
                "+        file_obj=None,",
                "+        validate_point=True,",
                "+    ):",
                "         self.verifying_key = None",
                "@@ -121,7 +134,8 @@ class ECDSAKey(PKey):",
                "             if msg is None:",
                "-                raise SSHException('Key object may not be empty')",
                "+                raise SSHException(\"Key object may not be empty\")",
                "             self.ecdsa_curve = self._ECDSA_CURVES.get_by_key_format_identifier(",
                "-                msg.get_text())",
                "+                msg.get_text()",
                "+            )",
                "             if self.ecdsa_curve is None:",
                "-                raise SSHException('Invalid key')",
                "+                raise SSHException(\"Invalid key\")",
                "             curvename = msg.get_text()",
                "@@ -154,6 +168,6 @@ class ECDSAKey(PKey):",
                "         x_bytes = deflate_long(numbers.x, add_sign_padding=False)",
                "-        x_bytes = b'\\x00' * (key_size_bytes - len(x_bytes)) + x_bytes",
                "+        x_bytes = b\"\\x00\" * (key_size_bytes - len(x_bytes)) + x_bytes",
                "         y_bytes = deflate_long(numbers.y, add_sign_padding=False)",
                "-        y_bytes = b'\\x00' * (key_size_bytes - len(y_bytes)) + y_bytes",
                "+        y_bytes = b\"\\x00\" * (key_size_bytes - len(y_bytes)) + y_bytes",
                "@@ -216,3 +230,3 @@ class ECDSAKey(PKey):",
                "             serialization.PrivateFormat.TraditionalOpenSSL,",
                "-            password=password",
                "+            password=password,",
                "         )",
                "@@ -224,3 +238,3 @@ class ECDSAKey(PKey):",
                "             serialization.PrivateFormat.TraditionalOpenSSL,",
                "-            password=password",
                "+            password=password,",
                "         )",
                "@@ -248,3 +262,3 @@ class ECDSAKey(PKey):",
                "     def _from_private_key_file(self, filename, password):",
                "-        data = self._read_private_key_file('EC', filename, password)",
                "+        data = self._read_private_key_file(\"EC\", filename, password)",
                "         self._decode_key(data)",
                "@@ -252,3 +266,3 @@ class ECDSAKey(PKey):",
                "     def _from_private_key(self, file_obj, password):",
                "-        data = self._read_private_key('EC', file_obj, password)",
                "+        data = self._read_private_key(\"EC\", file_obj, password)",
                "         self._decode_key(data)",
                "diff --git a/paramiko/file.py b/paramiko/file.py",
                "index a1bdafbe..a6933e02 100644",
                "--- a/paramiko/file.py",
                "+++ b/paramiko/file.py",
                "@@ -18,3 +18,7 @@",
                " from paramiko.common import (",
                "-    linefeed_byte_value, crlf, cr_byte, linefeed_byte, cr_byte_value,",
                "+    linefeed_byte_value,",
                "+    crlf,",
                "+    cr_byte,",
                "+    linefeed_byte,",
                "+    cr_byte_value,",
                " )",
                "@@ -25,3 +29,3 @@ from paramiko.util import ClosingContextManager",
                "-class BufferedFile (ClosingContextManager):",
                "+class BufferedFile(ClosingContextManager):",
                "     \"\"\"",
                "@@ -72,3 +76,3 @@ class BufferedFile (ClosingContextManager):",
                "         if self._closed:",
                "-            raise ValueError('I/O operation on closed file')",
                "+            raise ValueError(\"I/O operation on closed file\")",
                "         return self",
                "@@ -92,2 +96,3 @@ class BufferedFile (ClosingContextManager):",
                "     if PY2:",
                "+",
                "         def next(self):",
                "@@ -106,3 +111,5 @@ class BufferedFile (ClosingContextManager):",
                "             return line",
                "+",
                "     else:",
                "+",
                "         def __next__(self):",
                "@@ -161,3 +168,3 @@ class BufferedFile (ClosingContextManager):",
                "         data = self.read(len(buff))",
                "-        buff[:len(data)] = data",
                "+        buff[: len(data)] = data",
                "         return len(data)",
                "@@ -182,5 +189,5 @@ class BufferedFile (ClosingContextManager):",
                "         if self._closed:",
                "-            raise IOError('File is closed')",
                "+            raise IOError(\"File is closed\")",
                "         if not (self._flags & self.FLAG_READ):",
                "-            raise IOError('File is not open for reading')",
                "+            raise IOError(\"File is not open for reading\")",
                "         if (size is None) or (size < 0):",
                "@@ -247,5 +254,5 @@ class BufferedFile (ClosingContextManager):",
                "         if self._closed:",
                "-            raise IOError('File is closed')",
                "+            raise IOError(\"File is closed\")",
                "         if not (self._flags & self.FLAG_READ):",
                "-            raise IOError('File not open for reading')",
                "+            raise IOError(\"File not open for reading\")",
                "         line = self._rbuffer",
                "@@ -254,5 +261,5 @@ class BufferedFile (ClosingContextManager):",
                "             if (",
                "-                self._at_trailing_cr and",
                "-                self._flags & self.FLAG_UNIVERSAL_NEWLINE and",
                "-                len(line) > 0",
                "+                self._at_trailing_cr",
                "+                and self._flags & self.FLAG_UNIVERSAL_NEWLINE",
                "+                and len(line) > 0",
                "             ):",
                "@@ -278,8 +285,4 @@ class BufferedFile (ClosingContextManager):",
                "                 n = self._bufsize",
                "-            if (",
                "-                linefeed_byte in line or",
                "-                (",
                "-                    self._flags & self.FLAG_UNIVERSAL_NEWLINE and",
                "-                    cr_byte in line",
                "-                )",
                "+            if linefeed_byte in line or (",
                "+                self._flags & self.FLAG_UNIVERSAL_NEWLINE and cr_byte in line",
                "             ):",
                "@@ -308,5 +311,5 @@ class BufferedFile (ClosingContextManager):",
                "         if (",
                "-            line[pos] == cr_byte_value and",
                "-            xpos < len(line) and",
                "-            line[xpos] == linefeed_byte_value",
                "+            line[pos] == cr_byte_value",
                "+            and xpos < len(line)",
                "+            and line[xpos] == linefeed_byte_value",
                "         ):",
                "@@ -372,3 +375,3 @@ class BufferedFile (ClosingContextManager):",
                "         \"\"\"",
                "-        raise IOError('File does not support seeking.')",
                "+        raise IOError(\"File does not support seeking.\")",
                "@@ -395,7 +398,7 @@ class BufferedFile (ClosingContextManager):",
                "             # Accept text and encode as utf-8 for compatibility only.",
                "-            data = data.encode('utf-8')",
                "+            data = data.encode(\"utf-8\")",
                "         if self._closed:",
                "-            raise IOError('File is closed')",
                "+            raise IOError(\"File is closed\")",
                "         if not (self._flags & self.FLAG_WRITE):",
                "-            raise IOError('File not open for writing')",
                "+            raise IOError(\"File not open for writing\")",
                "         if not (self._flags & self.FLAG_BUFFERED):",
                "@@ -410,5 +413,5 @@ class BufferedFile (ClosingContextManager):",
                "                 last_newline_pos += len(wbuf) - len(data)",
                "-                self._write_all(wbuf[:last_newline_pos + 1])",
                "+                self._write_all(wbuf[: last_newline_pos + 1])",
                "                 self._wbuffer = BytesIO()",
                "-                self._wbuffer.write(wbuf[last_newline_pos + 1:])",
                "+                self._wbuffer.write(wbuf[last_newline_pos + 1 :])",
                "             return",
                "@@ -459,3 +462,3 @@ class BufferedFile (ClosingContextManager):",
                "         \"\"\"",
                "-        raise IOError('write not implemented')",
                "+        raise IOError(\"write not implemented\")",
                "@@ -474,3 +477,3 @@ class BufferedFile (ClosingContextManager):",
                "-    def _set_mode(self, mode='r', bufsize=-1):",
                "+    def _set_mode(self, mode=\"r\", bufsize=-1):",
                "         \"\"\"",
                "@@ -497,7 +500,7 @@ class BufferedFile (ClosingContextManager):",
                "-        if ('r' in mode) or ('+' in mode):",
                "+        if (\"r\" in mode) or (\"+\" in mode):",
                "             self._flags |= self.FLAG_READ",
                "-        if ('w' in mode) or ('+' in mode):",
                "+        if (\"w\" in mode) or (\"+\" in mode):",
                "             self._flags |= self.FLAG_WRITE",
                "-        if 'a' in mode:",
                "+        if \"a\" in mode:",
                "             self._flags |= self.FLAG_WRITE | self.FLAG_APPEND",
                "@@ -505,5 +508,5 @@ class BufferedFile (ClosingContextManager):",
                "             self._pos = self._realpos = self._size",
                "-        if 'b' in mode:",
                "+        if \"b\" in mode:",
                "             self._flags |= self.FLAG_BINARY",
                "-        if 'U' in mode:",
                "+        if \"U\" in mode:",
                "             self._flags |= self.FLAG_UNIVERSAL_NEWLINE",
                "@@ -536,5 +539,4 @@ class BufferedFile (ClosingContextManager):",
                "             self.newlines = newline",
                "-        elif (",
                "-            self.newlines != newline and",
                "-            isinstance(self.newlines, bytes_types)",
                "+        elif self.newlines != newline and isinstance(",
                "+            self.newlines, bytes_types",
                "         ):",
                "diff --git a/paramiko/hostkeys.py b/paramiko/hostkeys.py",
                "index c873f58b..7faf32d8 100644",
                "--- a/paramiko/hostkeys.py",
                "+++ b/paramiko/hostkeys.py",
                "@@ -35,3 +35,3 @@ from paramiko.ssh_exception import SSHException",
                "-class HostKeys (MutableMapping):",
                "+class HostKeys(MutableMapping):",
                "     \"\"\"",
                "@@ -89,6 +89,6 @@ class HostKeys (MutableMapping):",
                "         \"\"\"",
                "-        with open(filename, 'r') as f:",
                "+        with open(filename, \"r\") as f:",
                "             for lineno, line in enumerate(f, 1):",
                "                 line = line.strip()",
                "-                if (len(line) == 0) or (line[0] == '#'):",
                "+                if (len(line) == 0) or (line[0] == \"#\"):",
                "                     continue",
                "@@ -119,3 +119,3 @@ class HostKeys (MutableMapping):",
                "         \"\"\"",
                "-        with open(filename, 'w') as f:",
                "+        with open(filename, \"w\") as f:",
                "             for e in self._entries:",
                "@@ -135,3 +135,4 @@ class HostKeys (MutableMapping):",
                "         \"\"\"",
                "-        class SubDict (MutableMapping):",
                "+",
                "+        class SubDict(MutableMapping):",
                "             def __init__(self, hostname, entries, hostkeys):",
                "@@ -177,3 +178,4 @@ class HostKeys (MutableMapping):",
                "                 return [",
                "-                    e.key.get_name() for e in self._entries",
                "+                    e.key.get_name()",
                "+                    for e in self._entries",
                "                     if e.key is not None",
                "@@ -197,6 +199,6 @@ class HostKeys (MutableMapping):",
                "             if (",
                "-                h == hostname or",
                "-                h.startswith('|1|') and",
                "-                not hostname.startswith('|1|') and",
                "-                constant_time_bytes_eq(self.hash_host(hostname, h), h)",
                "+                h == hostname",
                "+                or h.startswith(\"|1|\")",
                "+                and not hostname.startswith(\"|1|\")",
                "+                and constant_time_bytes_eq(self.hash_host(hostname, h), h)",
                "             ):",
                "@@ -296,4 +298,4 @@ class HostKeys (MutableMapping):",
                "         else:",
                "-            if salt.startswith('|1|'):",
                "-                salt = salt.split('|')[2]",
                "+            if salt.startswith(\"|1|\"):",
                "+                salt = salt.split(\"|\")[2]",
                "             salt = decodebytes(b(salt))",
                "@@ -301,4 +303,4 @@ class HostKeys (MutableMapping):",
                "         hmac = HMAC(salt, b(hostname), sha1).digest()",
                "-        hostkey = '|1|%s|%s' % (u(encodebytes(salt)), u(encodebytes(hmac)))",
                "-        return hostkey.replace('\\n', '')",
                "+        hostkey = \"|1|%s|%s\" % (u(encodebytes(salt)), u(encodebytes(hmac)))",
                "+        return hostkey.replace(\"\\n\", \"\")",
                "@@ -335,8 +337,10 @@ class HostKeyEntry:",
                "         \"\"\"",
                "-        log = get_logger('paramiko.hostkeys')",
                "-        fields = line.split(' ')",
                "+        log = get_logger(\"paramiko.hostkeys\")",
                "+        fields = line.split(\" \")",
                "         if len(fields) < 3:",
                "             # Bad number of fields",
                "-            log.info(\"Not enough fields found in known_hosts in line %s (%r)\" %",
                "-                     (lineno, line))",
                "+            log.info(",
                "+                \"Not enough fields found in known_hosts in line %s (%r)\"",
                "+                % (lineno, line)",
                "+            )",
                "             return None",
                "@@ -345,3 +349,3 @@ class HostKeyEntry:",
                "         names, keytype, key = fields",
                "-        names = names.split(',')",
                "+        names = names.split(\",\")",
                "@@ -351,5 +355,5 @@ class HostKeyEntry:",
                "             key = b(key)",
                "-            if keytype == 'ssh-rsa':",
                "+            if keytype == \"ssh-rsa\":",
                "                 key = RSAKey(data=decodebytes(key))",
                "-            elif keytype == 'ssh-dss':",
                "+            elif keytype == \"ssh-dss\":",
                "                 key = DSSKey(data=decodebytes(key))",
                "@@ -373,6 +377,7 @@ class HostKeyEntry:",
                "         if self.valid:",
                "-            return '%s %s %s\\n' % (",
                "-                ','.join(self.hostnames),",
                "+            return \"%s %s %s\\n\" % (",
                "+                \",\".join(self.hostnames),",
                "                 self.key.get_name(),",
                "-                self.key.get_base64())",
                "+                self.key.get_base64(),",
                "+            )",
                "         return None",
                "@@ -380,2 +385,2 @@ class HostKeyEntry:",
                "     def __repr__(self):",
                "-        return '<HostKeyEntry %r: %r>' % (self.hostnames, self.key)",
                "+        return \"<HostKeyEntry %r: %r>\" % (self.hostnames, self.key)",
                "diff --git a/paramiko/kex_gex.py b/paramiko/kex_gex.py",
                "index ba45da18..371db488 100644",
                "--- a/paramiko/kex_gex.py",
                "+++ b/paramiko/kex_gex.py",
                "@@ -34,13 +34,22 @@ from paramiko.ssh_exception import SSHException",
                "-_MSG_KEXDH_GEX_REQUEST_OLD, _MSG_KEXDH_GEX_GROUP, _MSG_KEXDH_GEX_INIT, \\",
                "-    _MSG_KEXDH_GEX_REPLY, _MSG_KEXDH_GEX_REQUEST = range(30, 35)",
                "+(",
                "+    _MSG_KEXDH_GEX_REQUEST_OLD,",
                "+    _MSG_KEXDH_GEX_GROUP,",
                "+    _MSG_KEXDH_GEX_INIT,",
                "+    _MSG_KEXDH_GEX_REPLY,",
                "+    _MSG_KEXDH_GEX_REQUEST,",
                "+) = range(30, 35)",
                "-c_MSG_KEXDH_GEX_REQUEST_OLD, c_MSG_KEXDH_GEX_GROUP, c_MSG_KEXDH_GEX_INIT, \\",
                "-    c_MSG_KEXDH_GEX_REPLY, c_MSG_KEXDH_GEX_REQUEST = \\",
                "-    [byte_chr(c) for c in range(30, 35)]",
                "+(",
                "+    c_MSG_KEXDH_GEX_REQUEST_OLD,",
                "+    c_MSG_KEXDH_GEX_GROUP,",
                "+    c_MSG_KEXDH_GEX_INIT,",
                "+    c_MSG_KEXDH_GEX_REPLY,",
                "+    c_MSG_KEXDH_GEX_REQUEST,",
                "+) = [byte_chr(c) for c in range(30, 35)]",
                "-class KexGex (object):",
                "+class KexGex(object):",
                "-    name = 'diffie-hellman-group-exchange-sha1'",
                "+    name = \"diffie-hellman-group-exchange-sha1\"",
                "     min_bits = 1024",
                "@@ -63,3 +72,4 @@ class KexGex (object):",
                "             self.transport._expect_packet(",
                "-                _MSG_KEXDH_GEX_REQUEST, _MSG_KEXDH_GEX_REQUEST_OLD)",
                "+                _MSG_KEXDH_GEX_REQUEST, _MSG_KEXDH_GEX_REQUEST_OLD",
                "+            )",
                "             return",
                "@@ -94,3 +104,4 @@ class KexGex (object):",
                "         raise SSHException(",
                "-            'KexGex %s asked to handle packet type %d' % self.name, ptype)",
                "+            \"KexGex %s asked to handle packet type %d\" % self.name, ptype",
                "+        )",
                "@@ -139,8 +150,8 @@ class KexGex (object):",
                "         if pack is None:",
                "-            raise SSHException(",
                "-                'Can\\'t do server-side gex with no modulus pack')",
                "+            raise SSHException(\"Can't do server-side gex with no modulus pack\")",
                "         self.transport._log(",
                "             DEBUG,",
                "-            'Picking p (%d <= %d <= %d bits)' % (",
                "-                minbits, preferredbits, maxbits))",
                "+            \"Picking p (%d <= %d <= %d bits)\"",
                "+            % (minbits, preferredbits, maxbits),",
                "+        )",
                "         self.g, self.p = pack.get_modulus(minbits, preferredbits, maxbits)",
                "@@ -165,8 +176,9 @@ class KexGex (object):",
                "         if pack is None:",
                "-            raise SSHException(",
                "-                'Can\\'t do server-side gex with no modulus pack')",
                "+            raise SSHException(\"Can't do server-side gex with no modulus pack\")",
                "         self.transport._log(",
                "-            DEBUG, 'Picking p (~ %d bits)' % (self.preferred_bits,))",
                "+            DEBUG, \"Picking p (~ %d bits)\" % (self.preferred_bits,)",
                "+        )",
                "         self.g, self.p = pack.get_modulus(",
                "-            self.min_bits, self.preferred_bits, self.max_bits)",
                "+            self.min_bits, self.preferred_bits, self.max_bits",
                "+        )",
                "         m = Message()",
                "@@ -186,5 +198,6 @@ class KexGex (object):",
                "             raise SSHException(",
                "-                'Server-generated gex p (don\\'t ask) is out of range '",
                "-                '(%d bits)' % bitlen)",
                "-        self.transport._log(DEBUG, 'Got server p (%d bits)' % bitlen)",
                "+                \"Server-generated gex p (don't ask) is out of range \"",
                "+                \"(%d bits)\" % bitlen",
                "+            )",
                "+        self.transport._log(DEBUG, \"Got server p (%d bits)\" % bitlen)",
                "         self._generate_x()",
                "@@ -209,5 +222,9 @@ class KexGex (object):",
                "         hm = Message()",
                "-        hm.add(self.transport.remote_version, self.transport.local_version,",
                "-               self.transport.remote_kex_init, self.transport.local_kex_init,",
                "-               key)",
                "+        hm.add(",
                "+            self.transport.remote_version,",
                "+            self.transport.local_version,",
                "+            self.transport.remote_kex_init,",
                "+            self.transport.local_kex_init,",
                "+            key,",
                "+        )",
                "         if not self.old_style:",
                "@@ -245,5 +262,9 @@ class KexGex (object):",
                "         hm = Message()",
                "-        hm.add(self.transport.local_version, self.transport.remote_version,",
                "-               self.transport.local_kex_init, self.transport.remote_kex_init,",
                "-               host_key)",
                "+        hm.add(",
                "+            self.transport.local_version,",
                "+            self.transport.remote_version,",
                "+            self.transport.local_kex_init,",
                "+            self.transport.remote_kex_init,",
                "+            host_key,",
                "+        )",
                "         if not self.old_style:",
                "@@ -264,3 +285,3 @@ class KexGex (object):",
                " class KexGexSHA256(KexGex):",
                "-    name = 'diffie-hellman-group-exchange-sha256'",
                "+    name = \"diffie-hellman-group-exchange-sha256\"",
                "     hash_algo = sha256",
                "diff --git a/paramiko/kex_group1.py b/paramiko/kex_group1.py",
                "index e8f042b1..e6cbc4c5 100644",
                "--- a/paramiko/kex_group1.py",
                "+++ b/paramiko/kex_group1.py",
                "@@ -46,3 +46,3 @@ class KexGroup1(object):",
                "-    name = 'diffie-hellman-group1-sha1'",
                "+    name = \"diffie-hellman-group1-sha1\"",
                "     hash_algo = sha1",
                "@@ -75,3 +75,3 @@ class KexGroup1(object):",
                "             return self._parse_kexdh_reply(m)",
                "-        raise SSHException('KexGroup1 asked to handle packet type %d' % ptype)",
                "+        raise SSHException(\"KexGroup1 asked to handle packet type %d\" % ptype)",
                "@@ -89,4 +89,6 @@ class KexGroup1(object):",
                "             x_bytes = byte_mask(x_bytes[0], 0x7f) + x_bytes[1:]",
                "-            if (x_bytes[:8] != b7fffffffffffffff and",
                "-                    x_bytes[:8] != b0000000000000000):",
                "+            if (",
                "+                x_bytes[:8] != b7fffffffffffffff",
                "+                and x_bytes[:8] != b0000000000000000",
                "+            ):",
                "                 break",
                "@@ -105,4 +107,8 @@ class KexGroup1(object):",
                "         hm = Message()",
                "-        hm.add(self.transport.local_version, self.transport.remote_version,",
                "-               self.transport.local_kex_init, self.transport.remote_kex_init)",
                "+        hm.add(",
                "+            self.transport.local_version,",
                "+            self.transport.remote_version,",
                "+            self.transport.local_kex_init,",
                "+            self.transport.remote_kex_init,",
                "+        )",
                "         hm.add_string(host_key)",
                "@@ -125,4 +131,8 @@ class KexGroup1(object):",
                "         hm = Message()",
                "-        hm.add(self.transport.remote_version, self.transport.local_version,",
                "-               self.transport.remote_kex_init, self.transport.local_kex_init)",
                "+        hm.add(",
                "+            self.transport.remote_version,",
                "+            self.transport.local_version,",
                "+            self.transport.remote_kex_init,",
                "+            self.transport.local_kex_init,",
                "+        )",
                "         hm.add_string(key)",
                "diff --git a/paramiko/kex_group14.py b/paramiko/kex_group14.py",
                "index 22955e34..0df302e3 100644",
                "--- a/paramiko/kex_group14.py",
                "+++ b/paramiko/kex_group14.py",
                "@@ -33,3 +33,3 @@ class KexGroup14(KexGroup1):",
                "-    name = 'diffie-hellman-group14-sha1'",
                "+    name = \"diffie-hellman-group14-sha1\"",
                "     hash_algo = sha1",
                "diff --git a/paramiko/kex_gss.py b/paramiko/kex_gss.py",
                "index 3406babb..8126e36a 100644",
                "--- a/paramiko/kex_gss.py",
                "+++ b/paramiko/kex_gss.py",
                "@@ -49,10 +49,18 @@ from paramiko.ssh_exception import SSHException",
                "-MSG_KEXGSS_INIT, MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE, MSG_KEXGSS_HOSTKEY,\\",
                "-    MSG_KEXGSS_ERROR = range(30, 35)",
                "-MSG_KEXGSS_GROUPREQ, MSG_KEXGSS_GROUP = range(40, 42)",
                "-c_MSG_KEXGSS_INIT, c_MSG_KEXGSS_CONTINUE, c_MSG_KEXGSS_COMPLETE,\\",
                "-    c_MSG_KEXGSS_HOSTKEY, c_MSG_KEXGSS_ERROR = [",
                "-        byte_chr(c) for c in range(30, 35)",
                "-    ]",
                "-c_MSG_KEXGSS_GROUPREQ, c_MSG_KEXGSS_GROUP = [",
                "+(",
                "+    MSG_KEXGSS_INIT,",
                "+    MSG_KEXGSS_CONTINUE,",
                "+    MSG_KEXGSS_COMPLETE,",
                "+    MSG_KEXGSS_HOSTKEY,",
                "+    MSG_KEXGSS_ERROR,",
                "+) = range(30, 35)",
                "+(MSG_KEXGSS_GROUPREQ, MSG_KEXGSS_GROUP) = range(40, 42)",
                "+(",
                "+    c_MSG_KEXGSS_INIT,",
                "+    c_MSG_KEXGSS_CONTINUE,",
                "+    c_MSG_KEXGSS_COMPLETE,",
                "+    c_MSG_KEXGSS_HOSTKEY,",
                "+    c_MSG_KEXGSS_ERROR,",
                "+) = [byte_chr(c) for c in range(30, 35)]",
                "+(c_MSG_KEXGSS_GROUPREQ, c_MSG_KEXGSS_GROUP) = [",
                "     byte_chr(c) for c in range(40, 42)",
                "@@ -66,2 +74,3 @@ class KexGSSGroup1(object):",
                "     \"\"\"",
                "+",
                "     # draft-ietf-secsh-transport-09.txt, page 17",
                "@@ -101,6 +110,8 @@ class KexGSSGroup1(object):",
                "         self.transport._send_message(m)",
                "-        self.transport._expect_packet(MSG_KEXGSS_HOSTKEY,",
                "-                                      MSG_KEXGSS_CONTINUE,",
                "-                                      MSG_KEXGSS_COMPLETE,",
                "-                                      MSG_KEXGSS_ERROR)",
                "+        self.transport._expect_packet(",
                "+            MSG_KEXGSS_HOSTKEY,",
                "+            MSG_KEXGSS_CONTINUE,",
                "+            MSG_KEXGSS_COMPLETE,",
                "+            MSG_KEXGSS_ERROR,",
                "+        )",
                "@@ -123,4 +134,5 @@ class KexGSSGroup1(object):",
                "             return self._parse_kexgss_error(m)",
                "-        raise SSHException('GSS KexGroup1 asked to handle packet type %d'",
                "-                           % ptype)",
                "+        raise SSHException(",
                "+            \"GSS KexGroup1 asked to handle packet type %d\" % ptype",
                "+        )",
                "@@ -155,4 +167,3 @@ class KexGSSGroup1(object):",
                "         self.transport._verify_key(host_key, sig)",
                "-        self.transport._expect_packet(MSG_KEXGSS_CONTINUE,",
                "-                                      MSG_KEXGSS_COMPLETE)",
                "+        self.transport._expect_packet(MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE)",
                "@@ -169,9 +180,10 @@ class KexGSSGroup1(object):",
                "             m.add_byte(c_MSG_KEXGSS_CONTINUE)",
                "-            m.add_string(self.kexgss.ssh_init_sec_context(",
                "-                target=self.gss_host, recv_token=srv_token))",
                "+            m.add_string(",
                "+                self.kexgss.ssh_init_sec_context(",
                "+                    target=self.gss_host, recv_token=srv_token",
                "+                )",
                "+            )",
                "             self.transport.send_message(m)",
                "             self.transport._expect_packet(",
                "-                MSG_KEXGSS_CONTINUE,",
                "-                MSG_KEXGSS_COMPLETE,",
                "-                MSG_KEXGSS_ERROR",
                "+                MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE, MSG_KEXGSS_ERROR",
                "             )",
                "@@ -203,4 +215,8 @@ class KexGSSGroup1(object):",
                "         hm = Message()",
                "-        hm.add(self.transport.local_version, self.transport.remote_version,",
                "-        self.transport.local_kex_init, self.transport.remote_kex_init)",
                "+        hm.add(",
                "+            self.transport.local_version,",
                "+            self.transport.remote_version,",
                "+            self.transport.local_kex_init,",
                "+            self.transport.remote_kex_init,",
                "+        )",
                "         hm.add_string(self.transport.host_key.__str__())",
                "@@ -211,9 +227,8 @@ class KexGSSGroup1(object):",
                "         if srv_token is not None:",
                "-            self.kexgss.ssh_init_sec_context(target=self.gss_host,",
                "-                                             recv_token=srv_token)",
                "-            self.kexgss.ssh_check_mic(mic_token,",
                "-                                      self.transport.session_id)",
                "+            self.kexgss.ssh_init_sec_context(",
                "+                target=self.gss_host, recv_token=srv_token",
                "+            )",
                "+            self.kexgss.ssh_check_mic(mic_token, self.transport.session_id)",
                "         else:",
                "-            self.kexgss.ssh_check_mic(mic_token,",
                "-                                      self.transport.session_id)",
                "+            self.kexgss.ssh_check_mic(mic_token, self.transport.session_id)",
                "         self.transport._activate_outbound()",
                "@@ -237,4 +252,8 @@ class KexGSSGroup1(object):",
                "         hm = Message()",
                "-        hm.add(self.transport.remote_version, self.transport.local_version,",
                "-               self.transport.remote_kex_init, self.transport.local_kex_init)",
                "+        hm.add(",
                "+            self.transport.remote_version,",
                "+            self.transport.local_version,",
                "+            self.transport.remote_kex_init,",
                "+            self.transport.local_kex_init,",
                "+        )",
                "         hm.add_string(key)",
                "@@ -245,8 +264,10 @@ class KexGSSGroup1(object):",
                "         self.transport._set_K_H(K, H)",
                "-        srv_token = self.kexgss.ssh_accept_sec_context(self.gss_host,",
                "-                                                       client_token)",
                "+        srv_token = self.kexgss.ssh_accept_sec_context(",
                "+            self.gss_host, client_token",
                "+        )",
                "         m = Message()",
                "         if self.kexgss._gss_srv_ctxt_status:",
                "-            mic_token = self.kexgss.ssh_get_mic(self.transport.session_id,",
                "-                                                gss_kex=True)",
                "+            mic_token = self.kexgss.ssh_get_mic(",
                "+                self.transport.session_id, gss_kex=True",
                "+            )",
                "             m.add_byte(c_MSG_KEXGSS_COMPLETE)",
                "@@ -265,5 +286,5 @@ class KexGSSGroup1(object):",
                "             self.transport._send_message(m)",
                "-            self.transport._expect_packet(MSG_KEXGSS_CONTINUE,",
                "-                                          MSG_KEXGSS_COMPLETE,",
                "-                                          MSG_KEXGSS_ERROR)",
                "+            self.transport._expect_packet(",
                "+                MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE, MSG_KEXGSS_ERROR",
                "+            )",
                "@@ -283,7 +304,7 @@ class KexGSSGroup1(object):",
                "         err_msg = m.get_string()",
                "-        m.get_string()   # we don't care about the language!",
                "-        raise SSHException(\"GSS-API Error:\\nMajor Status: %s\\nMinor Status: %s\\",
                "-                            \\nError Message: %s\\n\") % (str(maj_status),",
                "-                                                       str(min_status),",
                "-                                                       err_msg)",
                "+        m.get_string()  # we don't care about the language!",
                "+        raise SSHException(",
                "+            \"GSS-API Error:\\nMajor Status: %s\\nMinor Status: %s\\",
                "+                            \\nError Message: %s\\n\"",
                "+        ) % (str(maj_status), str(min_status), err_msg)",
                "@@ -296,2 +317,3 @@ class KexGSSGroup14(KexGSSGroup1):",
                "     \"\"\"",
                "+",
                "     P = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF  # noqa",
                "@@ -306,2 +328,3 @@ class KexGSSGex(object):",
                "     \"\"\"",
                "+",
                "     NAME = \"gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==\"",
                "@@ -364,3 +387,3 @@ class KexGSSGex(object):",
                "             return self._parse_kexgss_error(m)",
                "-        raise SSHException('KexGex asked to handle packet type %d' % ptype)",
                "+        raise SSHException(\"KexGex asked to handle packet type %d\" % ptype)",
                "@@ -415,8 +438,8 @@ class KexGSSGex(object):",
                "         if pack is None:",
                "-            raise SSHException(",
                "-                'Can\\'t do server-side gex with no modulus pack')",
                "+            raise SSHException(\"Can't do server-side gex with no modulus pack\")",
                "         self.transport._log(",
                "             DEBUG,  # noqa",
                "-            'Picking p (%d <= %d <= %d bits)' % (",
                "-                minbits, preferredbits, maxbits))",
                "+            \"Picking p (%d <= %d <= %d bits)\"",
                "+            % (minbits, preferredbits, maxbits),",
                "+        )",
                "         self.g, self.p = pack.get_modulus(minbits, preferredbits, maxbits)",
                "@@ -441,5 +464,6 @@ class KexGSSGex(object):",
                "             raise SSHException(",
                "-                'Server-generated gex p (don\\'t ask) is out of range '",
                "-                '(%d bits)' % bitlen)",
                "-        self.transport._log(DEBUG, 'Got server p (%d bits)' % bitlen)  # noqa",
                "+                \"Server-generated gex p (don't ask) is out of range \"",
                "+                \"(%d bits)\" % bitlen",
                "+            )",
                "+        self.transport._log(DEBUG, \"Got server p (%d bits)\" % bitlen)  # noqa",
                "         self._generate_x()",
                "@@ -452,6 +476,8 @@ class KexGSSGex(object):",
                "         self.transport._send_message(m)",
                "-        self.transport._expect_packet(MSG_KEXGSS_HOSTKEY,",
                "-                                      MSG_KEXGSS_CONTINUE,",
                "-                                      MSG_KEXGSS_COMPLETE,",
                "-                                      MSG_KEXGSS_ERROR)",
                "+        self.transport._expect_packet(",
                "+            MSG_KEXGSS_HOSTKEY,",
                "+            MSG_KEXGSS_CONTINUE,",
                "+            MSG_KEXGSS_COMPLETE,",
                "+            MSG_KEXGSS_ERROR,",
                "+        )",
                "@@ -475,5 +501,9 @@ class KexGSSGex(object):",
                "         hm = Message()",
                "-        hm.add(self.transport.remote_version, self.transport.local_version,",
                "-               self.transport.remote_kex_init, self.transport.local_kex_init,",
                "-               key)",
                "+        hm.add(",
                "+            self.transport.remote_version,",
                "+            self.transport.local_version,",
                "+            self.transport.remote_kex_init,",
                "+            self.transport.local_kex_init,",
                "+            key,",
                "+        )",
                "         hm.add_int(self.min_bits)",
                "@@ -488,8 +518,10 @@ class KexGSSGex(object):",
                "         self.transport._set_K_H(K, H)",
                "-        srv_token = self.kexgss.ssh_accept_sec_context(self.gss_host,",
                "-                                                       client_token)",
                "+        srv_token = self.kexgss.ssh_accept_sec_context(",
                "+            self.gss_host, client_token",
                "+        )",
                "         m = Message()",
                "         if self.kexgss._gss_srv_ctxt_status:",
                "-            mic_token = self.kexgss.ssh_get_mic(self.transport.session_id,",
                "-                                                gss_kex=True)",
                "+            mic_token = self.kexgss.ssh_get_mic(",
                "+                self.transport.session_id, gss_kex=True",
                "+            )",
                "             m.add_byte(c_MSG_KEXGSS_COMPLETE)",
                "@@ -508,5 +540,5 @@ class KexGSSGex(object):",
                "             self.transport._send_message(m)",
                "-            self.transport._expect_packet(MSG_KEXGSS_CONTINUE,",
                "-                                          MSG_KEXGSS_COMPLETE,",
                "-                                          MSG_KEXGSS_ERROR)",
                "+            self.transport._expect_packet(",
                "+                MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE, MSG_KEXGSS_ERROR",
                "+            )",
                "@@ -523,4 +555,3 @@ class KexGSSGex(object):",
                "         self.transport._verify_key(host_key, sig)",
                "-        self.transport._expect_packet(MSG_KEXGSS_CONTINUE,",
                "-                                      MSG_KEXGSS_COMPLETE)",
                "+        self.transport._expect_packet(MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE)",
                "@@ -536,8 +567,11 @@ class KexGSSGex(object):",
                "             m.add_byte(c_MSG_KEXGSS_CONTINUE)",
                "-            m.add_string(self.kexgss.ssh_init_sec_context(target=self.gss_host,",
                "-                                                        recv_token=srv_token))",
                "+            m.add_string(",
                "+                self.kexgss.ssh_init_sec_context(",
                "+                    target=self.gss_host, recv_token=srv_token",
                "+                )",
                "+            )",
                "             self.transport.send_message(m)",
                "-            self.transport._expect_packet(MSG_KEXGSS_CONTINUE,",
                "-                                          MSG_KEXGSS_COMPLETE,",
                "-                                          MSG_KEXGSS_ERROR)",
                "+            self.transport._expect_packet(",
                "+                MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE, MSG_KEXGSS_ERROR",
                "+            )",
                "         else:",
                "@@ -566,5 +600,9 @@ class KexGSSGex(object):",
                "         hm = Message()",
                "-        hm.add(self.transport.local_version, self.transport.remote_version,",
                "-               self.transport.local_kex_init, self.transport.remote_kex_init,",
                "-               self.transport.host_key.__str__())",
                "+        hm.add(",
                "+            self.transport.local_version,",
                "+            self.transport.remote_version,",
                "+            self.transport.local_kex_init,",
                "+            self.transport.remote_kex_init,",
                "+            self.transport.host_key.__str__(),",
                "+        )",
                "         if not self.old_style:",
                "@@ -582,9 +620,8 @@ class KexGSSGex(object):",
                "         if srv_token is not None:",
                "-            self.kexgss.ssh_init_sec_context(target=self.gss_host,",
                "-                                             recv_token=srv_token)",
                "-            self.kexgss.ssh_check_mic(mic_token,",
                "-                                      self.transport.session_id)",
                "+            self.kexgss.ssh_init_sec_context(",
                "+                target=self.gss_host, recv_token=srv_token",
                "+            )",
                "+            self.kexgss.ssh_check_mic(mic_token, self.transport.session_id)",
                "         else:",
                "-            self.kexgss.ssh_check_mic(mic_token,",
                "-                                      self.transport.session_id)",
                "+            self.kexgss.ssh_check_mic(mic_token, self.transport.session_id)",
                "         self.transport._activate_outbound()",
                "@@ -605,7 +642,7 @@ class KexGSSGex(object):",
                "         err_msg = m.get_string()",
                "-        m.get_string()   # we don't care about the language (lang_tag)!",
                "-        raise SSHException(\"GSS-API Error:\\nMajor Status: %s\\nMinor Status: %s\\",
                "-                            \\nError Message: %s\\n\") % (str(maj_status),",
                "-                                                       str(min_status),",
                "-                                                       err_msg)",
                "+        m.get_string()  # we don't care about the language (lang_tag)!",
                "+        raise SSHException(",
                "+            \"GSS-API Error:\\nMajor Status: %s\\nMinor Status: %s\\",
                "+                            \\nError Message: %s\\n\"",
                "+        ) % (str(maj_status), str(min_status), err_msg)",
                "@@ -618,2 +655,3 @@ class NullHostKey(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self):",
                "diff --git a/paramiko/message.py b/paramiko/message.py",
                "index 02af2526..8181b9ec 100644",
                "--- a/paramiko/message.py",
                "+++ b/paramiko/message.py",
                "@@ -29,3 +29,3 @@ from paramiko.py3compat import long, BytesIO, u, integer_types",
                "-class Message (object):",
                "+class Message(object):",
                "     \"\"\"",
                "@@ -65,3 +65,3 @@ class Message (object):",
                "         \"\"\"",
                "-        return 'paramiko.Message(' + repr(self.packet.getvalue()) + ')'",
                "+        return \"paramiko.Message(\" + repr(self.packet.getvalue()) + \")\"",
                "@@ -141,3 +141,3 @@ class Message (object):",
                "         byte += self.get_bytes(3)",
                "-        return struct.unpack('>I', byte)[0]",
                "+        return struct.unpack(\">I\", byte)[0]",
                "@@ -150,3 +150,3 @@ class Message (object):",
                "         \"\"\"",
                "-        return struct.unpack('>I', self.get_bytes(4))[0]",
                "+        return struct.unpack(\">I\", self.get_bytes(4))[0]",
                "@@ -158,3 +158,3 @@ class Message (object):",
                "         \"\"\"",
                "-        return struct.unpack('>Q', self.get_bytes(8))[0]",
                "+        return struct.unpack(\">Q\", self.get_bytes(8))[0]",
                "@@ -204,3 +204,3 @@ class Message (object):",
                "         \"\"\"",
                "-        return self.get_text().split(',')",
                "+        return self.get_text().split(\",\")",
                "@@ -242,3 +242,3 @@ class Message (object):",
                "         \"\"\"",
                "-        self.packet.write(struct.pack('>I', n))",
                "+        self.packet.write(struct.pack(\">I\", n))",
                "         return self",
                "@@ -255,3 +255,3 @@ class Message (object):",
                "         else:",
                "-            self.packet.write(struct.pack('>I', n))",
                "+            self.packet.write(struct.pack(\">I\", n))",
                "         return self",
                "@@ -264,3 +264,3 @@ class Message (object):",
                "         \"\"\"",
                "-        self.packet.write(struct.pack('>Q', n))",
                "+        self.packet.write(struct.pack(\">Q\", n))",
                "         return self",
                "@@ -296,3 +296,3 @@ class Message (object):",
                "         \"\"\"",
                "-        self.add_string(','.join(l))",
                "+        self.add_string(\",\".join(l))",
                "         return self",
                "diff --git a/paramiko/packet.py b/paramiko/packet.py",
                "index 95a26c6e..b538f3ba 100644",
                "--- a/paramiko/packet.py",
                "+++ b/paramiko/packet.py",
                "@@ -32,3 +32,8 @@ from paramiko import util",
                " from paramiko.common import (",
                "-    linefeed_byte, cr_byte_value, asbytes, MSG_NAMES, DEBUG, xffffffff,",
                "+    linefeed_byte,",
                "+    cr_byte_value,",
                "+    asbytes,",
                "+    MSG_NAMES,",
                "+    DEBUG,",
                "+    xffffffff,",
                "     zero_byte,",
                "@@ -44,3 +49,3 @@ def compute_hmac(key, message, digest_class):",
                "-class NeedRekeyException (Exception):",
                "+class NeedRekeyException(Exception):",
                "     \"\"\"",
                "@@ -48,2 +53,3 @@ class NeedRekeyException (Exception):",
                "     \"\"\"",
                "+",
                "     pass",
                "@@ -58,3 +64,3 @@ def first_arg(e):",
                "-class Packetizer (object):",
                "+class Packetizer(object):",
                "     \"\"\"",
                "@@ -130,4 +136,11 @@ class Packetizer (object):",
                "-    def set_outbound_cipher(self, block_engine, block_size, mac_engine,",
                "-                            mac_size, mac_key, sdctr=False):",
                "+    def set_outbound_cipher(",
                "+        self,",
                "+        block_engine,",
                "+        block_size,",
                "+        mac_engine,",
                "+        mac_size,",
                "+        mac_key,",
                "+        sdctr=False,",
                "+    ):",
                "         \"\"\"",
                "@@ -151,3 +164,4 @@ class Packetizer (object):",
                "     def set_inbound_cipher(",
                "-            self, block_engine, block_size, mac_engine, mac_size, mac_key):",
                "+        self, block_engine, block_size, mac_engine, mac_size, mac_key",
                "+    ):",
                "         \"\"\"",
                "@@ -354,3 +368,3 @@ class Packetizer (object):",
                "         n = buf.index(linefeed_byte)",
                "-        self.__remainder = buf[n + 1:]",
                "+        self.__remainder = buf[n + 1 :]",
                "         buf = buf[:n]",
                "@@ -370,3 +384,3 @@ class Packetizer (object):",
                "         else:",
                "-            cmd_name = '$%x' % cmd",
                "+            cmd_name = \"$%x\" % cmd",
                "         orig_len = len(data)",
                "@@ -380,4 +394,5 @@ class Packetizer (object):",
                "                     DEBUG,",
                "-                    'Write packet <%s>, length %d' % (cmd_name, orig_len))",
                "-                self._log(DEBUG, util.format_binary(packet, 'OUT: '))",
                "+                    \"Write packet <%s>, length %d\" % (cmd_name, orig_len),",
                "+                )",
                "+                self._log(DEBUG, util.format_binary(packet, \"OUT: \"))",
                "             if self.__block_engine_out is not None:",
                "@@ -388,10 +403,11 @@ class Packetizer (object):",
                "             if self.__block_engine_out is not None:",
                "-                payload = struct.pack(",
                "-                    '>I', self.__sequence_number_out) + packet",
                "+                payload = (",
                "+                    struct.pack(\">I\", self.__sequence_number_out) + packet",
                "+                )",
                "                 out += compute_hmac(",
                "-                    self.__mac_key_out,",
                "-                    payload,",
                "-                    self.__mac_engine_out)[:self.__mac_size_out]",
                "-            self.__sequence_number_out = \\",
                "-                (self.__sequence_number_out + 1) & xffffffff",
                "+                    self.__mac_key_out, payload, self.__mac_engine_out",
                "+                )[: self.__mac_size_out]",
                "+            self.__sequence_number_out = (",
                "+                self.__sequence_number_out + 1",
                "+            ) & xffffffff",
                "             self.write_all(out)",
                "@@ -401,4 +417,4 @@ class Packetizer (object):",
                "             sent_too_much = (",
                "-                self.__sent_packets >= self.REKEY_PACKETS or",
                "-                self.__sent_bytes >= self.REKEY_BYTES",
                "+                self.__sent_packets >= self.REKEY_PACKETS",
                "+                or self.__sent_bytes >= self.REKEY_BYTES",
                "             )",
                "@@ -406,4 +422,7 @@ class Packetizer (object):",
                "                 # only ask once for rekeying",
                "-                self._log(DEBUG, 'Rekeying (hit %d packets, %d bytes sent)' %",
                "-                          (self.__sent_packets, self.__sent_bytes))",
                "+                self._log(",
                "+                    DEBUG,",
                "+                    \"Rekeying (hit %d packets, %d bytes sent)\"",
                "+                    % (self.__sent_packets, self.__sent_bytes),",
                "+                )",
                "                 self.__received_bytes_overflow = 0",
                "@@ -426,4 +445,4 @@ class Packetizer (object):",
                "         if self.__dump_packets:",
                "-            self._log(DEBUG, util.format_binary(header, 'IN: '))",
                "-        packet_size = struct.unpack('>I', header[:4])[0]",
                "+            self._log(DEBUG, util.format_binary(header, \"IN: \"))",
                "+        packet_size = struct.unpack(\">I\", header[:4])[0]",
                "         # leftover contains decrypted bytes from the first block (after the",
                "@@ -432,6 +451,6 @@ class Packetizer (object):",
                "         if (packet_size - len(leftover)) % self.__block_size_in != 0:",
                "-            raise SSHException('Invalid packet blocking')",
                "+            raise SSHException(\"Invalid packet blocking\")",
                "         buf = self.read_all(packet_size + self.__mac_size_in - len(leftover))",
                "-        packet = buf[:packet_size - len(leftover)]",
                "-        post_packet = buf[packet_size - len(leftover):]",
                "+        packet = buf[: packet_size - len(leftover)]",
                "+        post_packet = buf[packet_size - len(leftover) :]",
                "         if self.__block_engine_in is not None:",
                "@@ -439,3 +458,3 @@ class Packetizer (object):",
                "         if self.__dump_packets:",
                "-            self._log(DEBUG, util.format_binary(packet, 'IN: '))",
                "+            self._log(DEBUG, util.format_binary(packet, \"IN: \"))",
                "         packet = leftover + packet",
                "@@ -443,13 +462,14 @@ class Packetizer (object):",
                "         if self.__mac_size_in > 0:",
                "-            mac = post_packet[:self.__mac_size_in]",
                "-            mac_payload = struct.pack(",
                "-                '>II', self.__sequence_number_in, packet_size) + packet",
                "+            mac = post_packet[: self.__mac_size_in]",
                "+            mac_payload = (",
                "+                struct.pack(\">II\", self.__sequence_number_in, packet_size)",
                "+                + packet",
                "+            )",
                "             my_mac = compute_hmac(",
                "-                self.__mac_key_in,",
                "-                mac_payload,",
                "-                self.__mac_engine_in)[:self.__mac_size_in]",
                "+                self.__mac_key_in, mac_payload, self.__mac_engine_in",
                "+            )[: self.__mac_size_in]",
                "             if not util.constant_time_bytes_eq(my_mac, mac):",
                "-                raise SSHException('Mismatched MAC')",
                "+                raise SSHException(\"Mismatched MAC\")",
                "         padding = byte_ord(packet[0])",
                "-        payload = packet[1:packet_size - padding]",
                "+        payload = packet[1 : packet_size - padding]",
                "@@ -458,3 +478,4 @@ class Packetizer (object):",
                "                 DEBUG,",
                "-                'Got payload (%d bytes, %d padding)' % (packet_size, padding))",
                "+                \"Got payload (%d bytes, %d padding)\" % (packet_size, padding),",
                "+            )",
                "@@ -476,13 +497,20 @@ class Packetizer (object):",
                "             self.__received_packets_overflow += 1",
                "-            if (self.__received_packets_overflow >=",
                "-                    self.REKEY_PACKETS_OVERFLOW_MAX) or \\",
                "-               (self.__received_bytes_overflow >=",
                "-                    self.REKEY_BYTES_OVERFLOW_MAX):",
                "+            if (",
                "+                self.__received_packets_overflow",
                "+                >= self.REKEY_PACKETS_OVERFLOW_MAX",
                "+            ) or (",
                "+                self.__received_bytes_overflow >= self.REKEY_BYTES_OVERFLOW_MAX",
                "+            ):",
                "                 raise SSHException(",
                "-                    'Remote transport is ignoring rekey requests')",
                "-        elif (self.__received_packets >= self.REKEY_PACKETS) or \\",
                "-             (self.__received_bytes >= self.REKEY_BYTES):",
                "+                    \"Remote transport is ignoring rekey requests\"",
                "+                )",
                "+        elif (self.__received_packets >= self.REKEY_PACKETS) or (",
                "+            self.__received_bytes >= self.REKEY_BYTES",
                "+        ):",
                "             # only ask once for rekeying",
                "-            self._log(DEBUG, 'Rekeying (hit %d packets, %d bytes received)' %",
                "-                      (self.__received_packets, self.__received_bytes))",
                "+            self._log(",
                "+                DEBUG,",
                "+                \"Rekeying (hit %d packets, %d bytes received)\"",
                "+                % (self.__received_packets, self.__received_bytes),",
                "+            )",
                "             self.__received_bytes_overflow = 0",
                "@@ -495,7 +523,7 @@ class Packetizer (object):",
                "         else:",
                "-            cmd_name = '$%x' % cmd",
                "+            cmd_name = \"$%x\" % cmd",
                "         if self.__dump_packets:",
                "             self._log(",
                "-                DEBUG,",
                "-                'Read packet <%s>, length %d' % (cmd_name, len(payload)))",
                "+                DEBUG, \"Read packet <%s>, length %d\" % (cmd_name, len(payload))",
                "+            )",
                "         return cmd, msg",
                "@@ -515,5 +543,5 @@ class Packetizer (object):",
                "         if (",
                "-            not self.__keepalive_interval or",
                "-            not self.__block_engine_out or",
                "-            self.__need_rekey",
                "+            not self.__keepalive_interval",
                "+            or not self.__block_engine_out",
                "+            or self.__need_rekey",
                "         ):",
                "@@ -552,3 +580,3 @@ class Packetizer (object):",
                "         padding = 3 + bsize - ((len(payload) + 8) % bsize)",
                "-        packet = struct.pack('>IB', len(payload) + padding + 1, padding)",
                "+        packet = struct.pack(\">IB\", len(payload) + padding + 1, padding)",
                "         packet += payload",
                "@@ -558,3 +586,3 @@ class Packetizer (object):",
                "             # don't waste random bytes for the padding",
                "-            packet += (zero_byte * padding)",
                "+            packet += zero_byte * padding",
                "         else:",
                "diff --git a/paramiko/pipe.py b/paramiko/pipe.py",
                "index 6ca37703..dda885da 100644",
                "--- a/paramiko/pipe.py",
                "+++ b/paramiko/pipe.py",
                "@@ -33,3 +33,3 @@ import socket",
                " def make_pipe():",
                "-    if sys.platform[:3] != 'win':",
                "+    if sys.platform[:3] != \"win\":",
                "         p = PosixPipe()",
                "@@ -40,3 +40,3 @@ def make_pipe():",
                "-class PosixPipe (object):",
                "+class PosixPipe(object):",
                "     def __init__(self):",
                "@@ -66,3 +66,3 @@ class PosixPipe (object):",
                "         self._set = True",
                "-        os.write(self._wfd, b'*')",
                "+        os.write(self._wfd, b\"*\")",
                "@@ -73,3 +73,3 @@ class PosixPipe (object):",
                "-class WindowsPipe (object):",
                "+class WindowsPipe(object):",
                "     \"\"\"",
                "@@ -78,5 +78,6 @@ class WindowsPipe (object):",
                "     \"\"\"",
                "+",
                "     def __init__(self):",
                "         serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
                "-        serv.bind(('127.0.0.1', 0))",
                "+        serv.bind((\"127.0.0.1\", 0))",
                "         serv.listen(1)",
                "@@ -85,3 +86,3 @@ class WindowsPipe (object):",
                "         self._rsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
                "-        self._rsock.connect(('127.0.0.1', serv.getsockname()[1]))",
                "+        self._rsock.connect((\"127.0.0.1\", serv.getsockname()[1]))",
                "@@ -112,3 +113,3 @@ class WindowsPipe (object):",
                "         self._set = True",
                "-        self._wsock.send(b'*')",
                "+        self._wsock.send(b\"*\")",
                "@@ -119,3 +120,3 @@ class WindowsPipe (object):",
                "-class OrPipe (object):",
                "+class OrPipe(object):",
                "     def __init__(self, pipe):",
                "diff --git a/paramiko/pkey.py b/paramiko/pkey.py",
                "index 35a26fc7..9e9da935 100644",
                "--- a/paramiko/pkey.py",
                "+++ b/paramiko/pkey.py",
                "@@ -44,19 +44,19 @@ class PKey(object):",
                "     _CIPHER_TABLE = {",
                "-        'AES-128-CBC': {",
                "-            'cipher': algorithms.AES,",
                "-            'keysize': 16,",
                "-            'blocksize': 16,",
                "-            'mode': modes.CBC",
                "+        \"AES-128-CBC\": {",
                "+            \"cipher\": algorithms.AES,",
                "+            \"keysize\": 16,",
                "+            \"blocksize\": 16,",
                "+            \"mode\": modes.CBC,",
                "         },",
                "-        'AES-256-CBC': {",
                "-            'cipher': algorithms.AES,",
                "-            'keysize': 32,",
                "-            'blocksize': 16,",
                "-            'mode': modes.CBC",
                "+        \"AES-256-CBC\": {",
                "+            \"cipher\": algorithms.AES,",
                "+            \"keysize\": 32,",
                "+            \"blocksize\": 16,",
                "+            \"mode\": modes.CBC,",
                "         },",
                "-        'DES-EDE3-CBC': {",
                "-            'cipher': algorithms.TripleDES,",
                "-            'keysize': 24,",
                "-            'blocksize': 8,",
                "-            'mode': modes.CBC",
                "+        \"DES-EDE3-CBC\": {",
                "+            \"cipher\": algorithms.TripleDES,",
                "+            \"keysize\": 24,",
                "+            \"blocksize\": 8,",
                "+            \"mode\": modes.CBC,",
                "         },",
                "@@ -108,3 +108,3 @@ class PKey(object):",
                "         if hs != ho:",
                "-            return cmp(hs, ho)   # noqa",
                "+            return cmp(hs, ho)  # noqa",
                "         return cmp(self.asbytes(), other.asbytes())  # noqa",
                "@@ -122,3 +122,3 @@ class PKey(object):",
                "         \"\"\"",
                "-        return ''",
                "+        return \"\"",
                "@@ -159,3 +159,3 @@ class PKey(object):",
                "         \"\"\"",
                "-        return u(encodebytes(self.asbytes())).replace('\\n', '')",
                "+        return u(encodebytes(self.asbytes())).replace(\"\\n\", \"\")",
                "@@ -240,3 +240,3 @@ class PKey(object):",
                "         \"\"\"",
                "-        raise Exception('Not implemented in PKey')",
                "+        raise Exception(\"Not implemented in PKey\")",
                "@@ -253,3 +253,3 @@ class PKey(object):",
                "         \"\"\"",
                "-        raise Exception('Not implemented in PKey')",
                "+        raise Exception(\"Not implemented in PKey\")",
                "@@ -276,3 +276,3 @@ class PKey(object):",
                "         \"\"\"",
                "-        with open(filename, 'r') as f:",
                "+        with open(filename, \"r\") as f:",
                "             data = self._read_private_key(tag, f, password)",
                "@@ -283,3 +283,3 @@ class PKey(object):",
                "         start = 0",
                "-        beginning_of_key = '-----BEGIN ' + tag + ' PRIVATE KEY-----'",
                "+        beginning_of_key = \"-----BEGIN \" + tag + \" PRIVATE KEY-----\"",
                "         while start < len(lines) and lines[start].strip() != beginning_of_key:",
                "@@ -287,3 +287,3 @@ class PKey(object):",
                "         if start >= len(lines):",
                "-            raise SSHException('not a valid ' + tag + ' private key file')",
                "+            raise SSHException(\"not a valid \" + tag + \" private key file\")",
                "         # parse any headers first",
                "@@ -292,3 +292,3 @@ class PKey(object):",
                "         while start < len(lines):",
                "-            l = lines[start].split(': ')",
                "+            l = lines[start].split(\": \")",
                "             if len(l) == 1:",
                "@@ -299,3 +299,3 @@ class PKey(object):",
                "         end = start",
                "-        ending_of_key = '-----END ' + tag + ' PRIVATE KEY-----'",
                "+        ending_of_key = \"-----END \" + tag + \" PRIVATE KEY-----\"",
                "         while end < len(lines) and lines[end].strip() != ending_of_key:",
                "@@ -304,6 +304,6 @@ class PKey(object):",
                "         try:",
                "-            data = decodebytes(b(''.join(lines[start:end])))",
                "+            data = decodebytes(b(\"\".join(lines[start:end])))",
                "         except base64.binascii.Error as e:",
                "-            raise SSHException('base64 decoding error: ' + str(e))",
                "-        if 'proc-type' not in headers:",
                "+            raise SSHException(\"base64 decoding error: \" + str(e))",
                "+        if \"proc-type\" not in headers:",
                "             # unencryped: done",
                "@@ -311,7 +311,8 @@ class PKey(object):",
                "         # encrypted keyfile: will need a password",
                "-        if headers['proc-type'] != '4,ENCRYPTED':",
                "+        if headers[\"proc-type\"] != \"4,ENCRYPTED\":",
                "             raise SSHException(",
                "-                'Unknown private key structure \"%s\"' % headers['proc-type'])",
                "+                'Unknown private key structure \"%s\"' % headers[\"proc-type\"]",
                "+            )",
                "         try:",
                "-            encryption_type, saltstr = headers['dek-info'].split(',')",
                "+            encryption_type, saltstr = headers[\"dek-info\"].split(\",\")",
                "         except:",
                "@@ -320,3 +321,4 @@ class PKey(object):",
                "             raise SSHException(",
                "-                'Unknown private key cipher \"%s\"' % encryption_type)",
                "+                'Unknown private key cipher \"%s\"' % encryption_type",
                "+            )",
                "         # if no password was passed in,",
                "@@ -324,6 +326,6 @@ class PKey(object):",
                "         if password is None:",
                "-            raise PasswordRequiredException('Private key file is encrypted')",
                "-        cipher = self._CIPHER_TABLE[encryption_type]['cipher']",
                "-        keysize = self._CIPHER_TABLE[encryption_type]['keysize']",
                "-        mode = self._CIPHER_TABLE[encryption_type]['mode']",
                "+            raise PasswordRequiredException(\"Private key file is encrypted\")",
                "+        cipher = self._CIPHER_TABLE[encryption_type][\"cipher\"]",
                "+        keysize = self._CIPHER_TABLE[encryption_type][\"keysize\"]",
                "+        mode = self._CIPHER_TABLE[encryption_type][\"mode\"]",
                "         salt = unhexlify(b(saltstr))",
                "@@ -350,3 +352,3 @@ class PKey(object):",
                "         \"\"\"",
                "-        with open(filename, 'w') as f:",
                "+        with open(filename, \"w\") as f:",
                "             os.chmod(filename, o600)",
                "@@ -360,6 +362,6 @@ class PKey(object):",
                "-        f.write(key.private_bytes(",
                "-            serialization.Encoding.PEM,",
                "-            format,",
                "-            encryption",
                "-        ).decode())",
                "+        f.write(",
                "+            key.private_bytes(",
                "+                serialization.Encoding.PEM, format, encryption",
                "+            ).decode()",
                "+        )",
                "diff --git a/paramiko/primes.py b/paramiko/primes.py",
                "index 65617914..22e536b8 100644",
                "--- a/paramiko/primes.py",
                "+++ b/paramiko/primes.py",
                "@@ -51,3 +51,3 @@ def _roll_random(n):",
                "-class ModulusPack (object):",
                "+class ModulusPack(object):",
                "     \"\"\"",
                "@@ -63,4 +63,5 @@ class ModulusPack (object):",
                "     def _parse_modulus(self, line):",
                "-        timestamp, mod_type, tests, tries, size, generator, modulus = \\",
                "+        timestamp, mod_type, tests, tries, size, generator, modulus = (",
                "             line.split()",
                "+        )",
                "         mod_type = int(mod_type)",
                "@@ -77,8 +78,9 @@ class ModulusPack (object):",
                "         if (",
                "-            mod_type < 2 or",
                "-            tests < 4 or",
                "-            (tests & 4 and tests < 8 and tries < 100)",
                "+            mod_type < 2",
                "+            or tests < 4",
                "+            or (tests & 4 and tests < 8 and tries < 100)",
                "         ):",
                "             self.discarded.append(",
                "-                (modulus, 'does not meet basic requirements'))",
                "+                (modulus, \"does not meet basic requirements\")",
                "+            )",
                "             return",
                "@@ -93,3 +95,4 @@ class ModulusPack (object):",
                "             self.discarded.append(",
                "-                (modulus, 'incorrectly reported bit length %d' % size))",
                "+                (modulus, \"incorrectly reported bit length %d\" % size)",
                "+            )",
                "             return",
                "@@ -104,6 +107,6 @@ class ModulusPack (object):",
                "         self.pack = {}",
                "-        with open(filename, 'r') as f:",
                "+        with open(filename, \"r\") as f:",
                "             for line in f:",
                "                 line = line.strip()",
                "-                if (len(line) == 0) or (line[0] == '#'):",
                "+                if (len(line) == 0) or (line[0] == \"#\"):",
                "                     continue",
                "@@ -117,3 +120,3 @@ class ModulusPack (object):",
                "         if len(bitsizes) == 0:",
                "-            raise SSHException('no moduli available')",
                "+            raise SSHException(\"no moduli available\")",
                "         good = -1",
                "diff --git a/paramiko/proxy.py b/paramiko/proxy.py",
                "index c4ec627c..444c47b6 100644",
                "--- a/paramiko/proxy.py",
                "+++ b/paramiko/proxy.py",
                "@@ -41,2 +41,3 @@ class ProxyCommand(ClosingContextManager):",
                "     \"\"\"",
                "+",
                "     def __init__(self, command_line):",
                "@@ -52,5 +53,7 @@ class ProxyCommand(ClosingContextManager):",
                "         from subprocess import Popen, PIPE",
                "+",
                "         self.cmd = shlsplit(command_line)",
                "-        self.process = Popen(self.cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE,",
                "-                             bufsize=0)",
                "+        self.process = Popen(",
                "+            self.cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, bufsize=0",
                "+        )",
                "         self.timeout = None",
                "@@ -71,3 +74,3 @@ class ProxyCommand(ClosingContextManager):",
                "             # ProxyCommand is not working.",
                "-            raise ProxyCommandFailure(' '.join(self.cmd), e.strerror)",
                "+            raise ProxyCommandFailure(\" \".join(self.cmd), e.strerror)",
                "         return len(content)",
                "@@ -83,3 +86,3 @@ class ProxyCommand(ClosingContextManager):",
                "         try:",
                "-            buffer = b''",
                "+            buffer = b\"\"",
                "             start = time.time()",
                "@@ -88,3 +91,3 @@ class ProxyCommand(ClosingContextManager):",
                "                 if self.timeout is not None:",
                "-                    elapsed = (time.time() - start)",
                "+                    elapsed = time.time() - start",
                "                     if elapsed >= self.timeout:",
                "@@ -93,7 +96,7 @@ class ProxyCommand(ClosingContextManager):",
                "-                r, w, x = select(",
                "-                    [self.process.stdout], [], [], select_timeout)",
                "+                r, w, x = select([self.process.stdout], [], [], select_timeout)",
                "                 if r and r[0] == self.process.stdout:",
                "                     buffer += os.read(",
                "-                        self.process.stdout.fileno(), size - len(buffer))",
                "+                        self.process.stdout.fileno(), size - len(buffer)",
                "+                    )",
                "             return buffer",
                "@@ -105,3 +108,3 @@ class ProxyCommand(ClosingContextManager):",
                "         except IOError as e:",
                "-            raise ProxyCommandFailure(' '.join(self.cmd), e.strerror)",
                "+            raise ProxyCommandFailure(\" \".join(self.cmd), e.strerror)",
                "diff --git a/paramiko/py3compat.py b/paramiko/py3compat.py",
                "index 6703ace8..314c557a 100644",
                "--- a/paramiko/py3compat.py",
                "+++ b/paramiko/py3compat.py",
                "@@ -3,7 +3,27 @@ import base64",
                "-__all__ = ['PY2', 'string_types', 'integer_types', 'text_type', 'bytes_types',",
                "-           'bytes', 'long', 'input', 'decodebytes', 'encodebytes',",
                "-           'bytestring', 'byte_ord', 'byte_chr', 'byte_mask', 'b', 'u', 'b2s',",
                "-           'StringIO', 'BytesIO', 'is_callable', 'MAXSIZE',",
                "-           'next', 'builtins']",
                "+__all__ = [",
                "+    \"PY2\",",
                "+    \"string_types\",",
                "+    \"integer_types\",",
                "+    \"text_type\",",
                "+    \"bytes_types\",",
                "+    \"bytes\",",
                "+    \"long\",",
                "+    \"input\",",
                "+    \"decodebytes\",",
                "+    \"encodebytes\",",
                "+    \"bytestring\",",
                "+    \"byte_ord\",",
                "+    \"byte_chr\",",
                "+    \"byte_mask\",",
                "+    \"b\",",
                "+    \"u\",",
                "+    \"b2s\",",
                "+    \"StringIO\",",
                "+    \"BytesIO\",",
                "+    \"is_callable\",",
                "+    \"MAXSIZE\",",
                "+    \"next\",",
                "+    \"builtins\",",
                "+]",
                "@@ -24,9 +44,7 @@ if PY2:",
                "-",
                "     def bytestring(s):  # NOQA",
                "         if isinstance(s, unicode):  # NOQA",
                "-            return s.encode('utf-8')",
                "+            return s.encode(\"utf-8\")",
                "         return s",
                "-",
                "     byte_ord = ord  # NOQA",
                "@@ -34,3 +52,2 @@ if PY2:",
                "-",
                "     def byte_mask(c, mask):",
                "@@ -38,4 +55,3 @@ if PY2:",
                "-",
                "-    def b(s, encoding='utf8'):  # NOQA",
                "+    def b(s, encoding=\"utf8\"):  # NOQA",
                "         \"\"\"cast unicode or bytes to bytes\"\"\"",
                "@@ -50,4 +66,3 @@ if PY2:",
                "-",
                "-    def u(s, encoding='utf8'):  # NOQA",
                "+    def u(s, encoding=\"utf8\"):  # NOQA",
                "         \"\"\"cast bytes or unicode to unicode\"\"\"",
                "@@ -62,3 +77,2 @@ if PY2:",
                "-",
                "     def b2s(s):",
                "@@ -66,4 +80,4 @@ if PY2:",
                "-",
                "     import cStringIO",
                "+",
                "     StringIO = cStringIO.StringIO",
                "@@ -71,3 +85,2 @@ if PY2:",
                "-",
                "     def is_callable(c):  # NOQA",
                "@@ -75,3 +88,2 @@ if PY2:",
                "-",
                "     def get_next(c):  # NOQA",
                "@@ -79,3 +91,2 @@ if PY2:",
                "-",
                "     def next(c):",
                "@@ -88,3 +99,2 @@ if PY2:",
                "-",
                "     try:",
                "@@ -93,6 +103,6 @@ if PY2:",
                "         # 32-bit",
                "-        MAXSIZE = int((1 << 31) - 1)        # NOQA",
                "+        MAXSIZE = int((1 << 31) - 1)  # NOQA",
                "     else:",
                "         # 64-bit",
                "-        MAXSIZE = int((1 << 63) - 1)        # NOQA",
                "+        MAXSIZE = int((1 << 63) - 1)  # NOQA",
                "     del X",
                "@@ -102,2 +112,3 @@ else:",
                "     import builtins",
                "+",
                "     string_types = str",
                "@@ -107,4 +118,6 @@ else:",
                "     integer_types = int",
                "+",
                "     class long(int):",
                "         pass",
                "+",
                "     input = input",
                "@@ -124,3 +137,3 @@ else:",
                "         assert isinstance(c, int)",
                "-        return struct.pack('B', c)",
                "+        return struct.pack(\"B\", c)",
                "@@ -128,5 +141,5 @@ else:",
                "         assert isinstance(c, int)",
                "-        return struct.pack('B', c & mask)",
                "+        return struct.pack(\"B\", c & mask)",
                "-    def b(s, encoding='utf8'):",
                "+    def b(s, encoding=\"utf8\"):",
                "         \"\"\"cast unicode or bytes to bytes\"\"\"",
                "@@ -139,3 +152,3 @@ else:",
                "-    def u(s, encoding='utf8'):",
                "+    def u(s, encoding=\"utf8\"):",
                "         \"\"\"cast bytes or unicode to unicode\"\"\"",
                "@@ -152,4 +165,5 @@ else:",
                "     import io",
                "-    StringIO = io.StringIO      # NOQA",
                "-    BytesIO = io.BytesIO        # NOQA",
                "+",
                "+    StringIO = io.StringIO  # NOQA",
                "+    BytesIO = io.BytesIO  # NOQA",
                "@@ -163,2 +177,2 @@ else:",
                "-    MAXSIZE = sys.maxsize       # NOQA",
                "+    MAXSIZE = sys.maxsize  # NOQA",
                "diff --git a/paramiko/rsakey.py b/paramiko/rsakey.py",
                "index f6d11a09..7e8f101c 100644",
                "--- a/paramiko/rsakey.py",
                "+++ b/paramiko/rsakey.py",
                "@@ -39,4 +39,11 @@ class RSAKey(PKey):",
                "-    def __init__(self, msg=None, data=None, filename=None, password=None,",
                "-                 key=None, file_obj=None):",
                "+    def __init__(",
                "+        self,",
                "+        msg=None,",
                "+        data=None,",
                "+        filename=None,",
                "+        password=None,",
                "+        key=None,",
                "+        file_obj=None,",
                "+    ):",
                "         self.key = None",
                "@@ -54,5 +61,5 @@ class RSAKey(PKey):",
                "             if msg is None:",
                "-                raise SSHException('Key object may not be empty')",
                "-            if msg.get_text() != 'ssh-rsa':",
                "-                raise SSHException('Invalid key')",
                "+                raise SSHException(\"Key object may not be empty\")",
                "+            if msg.get_text() != \"ssh-rsa\":",
                "+                raise SSHException(\"Invalid key\")",
                "             self.key = rsa.RSAPublicNumbers(",
                "@@ -74,3 +81,3 @@ class RSAKey(PKey):",
                "         m = Message()",
                "-        m.add_string('ssh-rsa')",
                "+        m.add_string(\"ssh-rsa\")",
                "         m.add_mpint(self.public_numbers.e)",
                "@@ -89,3 +96,3 @@ class RSAKey(PKey):",
                "         else:",
                "-            return self.asbytes().decode('utf8', errors='ignore')",
                "+            return self.asbytes().decode(\"utf8\", errors=\"ignore\")",
                "@@ -98,3 +105,3 @@ class RSAKey(PKey):",
                "     def get_name(self):",
                "-        return 'ssh-rsa'",
                "+        return \"ssh-rsa\"",
                "@@ -108,4 +115,3 @@ class RSAKey(PKey):",
                "         signer = self.key.signer(",
                "-            padding=padding.PKCS1v15(),",
                "-            algorithm=hashes.SHA1(),",
                "+            padding=padding.PKCS1v15(), algorithm=hashes.SHA1()",
                "         )",
                "@@ -115,3 +121,3 @@ class RSAKey(PKey):",
                "         m = Message()",
                "-        m.add_string('ssh-rsa')",
                "+        m.add_string(\"ssh-rsa\")",
                "         m.add_string(sig)",
                "@@ -120,3 +126,3 @@ class RSAKey(PKey):",
                "     def verify_ssh_sig(self, data, msg):",
                "-        if msg.get_text() != 'ssh-rsa':",
                "+        if msg.get_text() != \"ssh-rsa\":",
                "             return False",
                "@@ -144,3 +150,3 @@ class RSAKey(PKey):",
                "             serialization.PrivateFormat.TraditionalOpenSSL,",
                "-            password=password",
                "+            password=password,",
                "         )",
                "@@ -152,3 +158,3 @@ class RSAKey(PKey):",
                "             serialization.PrivateFormat.TraditionalOpenSSL,",
                "-            password=password",
                "+            password=password,",
                "         )",
                "@@ -173,3 +179,3 @@ class RSAKey(PKey):",
                "     def _from_private_key_file(self, filename, password):",
                "-        data = self._read_private_key_file('RSA', filename, password)",
                "+        data = self._read_private_key_file(\"RSA\", filename, password)",
                "         self._decode_key(data)",
                "@@ -177,3 +183,3 @@ class RSAKey(PKey):",
                "     def _from_private_key(self, file_obj, password):",
                "-        data = self._read_private_key('RSA', file_obj, password)",
                "+        data = self._read_private_key(\"RSA\", file_obj, password)",
                "         self._decode_key(data)",
                "diff --git a/paramiko/server.py b/paramiko/server.py",
                "index adc606bf..78c56738 100644",
                "--- a/paramiko/server.py",
                "+++ b/paramiko/server.py",
                "@@ -25,3 +25,6 @@ from paramiko import util",
                " from paramiko.common import (",
                "-    DEBUG, ERROR, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, AUTH_FAILED,",
                "+    DEBUG,",
                "+    ERROR,",
                "+    OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED,",
                "+    AUTH_FAILED,",
                "     AUTH_SUCCESSFUL,",
                "@@ -31,3 +34,3 @@ from paramiko.py3compat import string_types",
                "-class ServerInterface (object):",
                "+class ServerInterface(object):",
                "     \"\"\"",
                "@@ -101,3 +104,3 @@ class ServerInterface (object):",
                "         \"\"\"",
                "-        return 'password'",
                "+        return \"password\"",
                "@@ -235,5 +238,5 @@ class ServerInterface (object):",
                "-    def check_auth_gssapi_with_mic(self, username,",
                "-                                   gss_authenticated=AUTH_FAILED,",
                "-                                   cc_file=None):",
                "+    def check_auth_gssapi_with_mic(",
                "+        self, username, gss_authenticated=AUTH_FAILED, cc_file=None",
                "+    ):",
                "         \"\"\"",
                "@@ -265,5 +268,5 @@ class ServerInterface (object):",
                "-    def check_auth_gssapi_keyex(self, username,",
                "-                                gss_authenticated=AUTH_FAILED,",
                "-                                cc_file=None):",
                "+    def check_auth_gssapi_keyex(",
                "+        self, username, gss_authenticated=AUTH_FAILED, cc_file=None",
                "+    ):",
                "         \"\"\"",
                "@@ -374,4 +377,4 @@ class ServerInterface (object):",
                "     def check_channel_pty_request(",
                "-            self, channel, term, width, height, pixelwidth, pixelheight,",
                "-            modes):",
                "+        self, channel, term, width, height, pixelwidth, pixelheight, modes",
                "+    ):",
                "         \"\"\"",
                "@@ -462,3 +465,4 @@ class ServerInterface (object):",
                "     def check_channel_window_change_request(",
                "-            self, channel, width, height, pixelwidth, pixelheight):",
                "+        self, channel, width, height, pixelwidth, pixelheight",
                "+    ):",
                "         \"\"\"",
                "@@ -481,4 +485,9 @@ class ServerInterface (object):",
                "     def check_channel_x11_request(",
                "-            self, channel, single_connection, auth_protocol, auth_cookie,",
                "-            screen_number):",
                "+        self,",
                "+        channel,",
                "+        single_connection,",
                "+        auth_protocol,",
                "+        auth_cookie,",
                "+        screen_number,",
                "+    ):",
                "         \"\"\"",
                "@@ -573,3 +582,3 @@ class ServerInterface (object):",
                "-class InteractiveQuery (object):",
                "+class InteractiveQuery(object):",
                "     \"\"\"",
                "@@ -578,3 +587,3 @@ class InteractiveQuery (object):",
                "-    def __init__(self, name='', instructions='', *prompts):",
                "+    def __init__(self, name=\"\", instructions=\"\", *prompts):",
                "         \"\"\"",
                "@@ -612,3 +621,3 @@ class InteractiveQuery (object):",
                "-class SubsystemHandler (threading.Thread):",
                "+class SubsystemHandler(threading.Thread):",
                "     \"\"\"",
                "@@ -626,2 +635,3 @@ class SubsystemHandler (threading.Thread):",
                "     \"\"\"",
                "+",
                "     def __init__(self, channel, name, server):",
                "@@ -656,3 +666,4 @@ class SubsystemHandler (threading.Thread):",
                "             self.__transport._log(",
                "-                DEBUG, 'Starting handler for subsystem %s' % self.__name)",
                "+                DEBUG, \"Starting handler for subsystem %s\" % self.__name",
                "+            )",
                "             self.start_subsystem(self.__name, self.__transport, self.__channel)",
                "@@ -663,3 +674,3 @@ class SubsystemHandler (threading.Thread):",
                "                     self.__name, e",
                "-                )",
                "+                ),",
                "             )",
                "diff --git a/paramiko/sftp.py b/paramiko/sftp.py",
                "index e6786d10..25debc85 100644",
                "--- a/paramiko/sftp.py",
                "+++ b/paramiko/sftp.py",
                "@@ -28,23 +28,50 @@ from paramiko.py3compat import byte_chr, byte_ord",
                "-CMD_INIT, CMD_VERSION, CMD_OPEN, CMD_CLOSE, CMD_READ, CMD_WRITE, CMD_LSTAT, \\",
                "-    CMD_FSTAT, CMD_SETSTAT, CMD_FSETSTAT, CMD_OPENDIR, CMD_READDIR, \\",
                "-    CMD_REMOVE, CMD_MKDIR, CMD_RMDIR, CMD_REALPATH, CMD_STAT, CMD_RENAME, \\",
                "-    CMD_READLINK, CMD_SYMLINK = range(1, 21)",
                "-CMD_STATUS, CMD_HANDLE, CMD_DATA, CMD_NAME, CMD_ATTRS = range(101, 106)",
                "-CMD_EXTENDED, CMD_EXTENDED_REPLY = range(200, 202)",
                "+(",
                "+    CMD_INIT,",
                "+    CMD_VERSION,",
                "+    CMD_OPEN,",
                "+    CMD_CLOSE,",
                "+    CMD_READ,",
                "+    CMD_WRITE,",
                "+    CMD_LSTAT,",
                "+    CMD_FSTAT,",
                "+    CMD_SETSTAT,",
                "+    CMD_FSETSTAT,",
                "+    CMD_OPENDIR,",
                "+    CMD_READDIR,",
                "+    CMD_REMOVE,",
                "+    CMD_MKDIR,",
                "+    CMD_RMDIR,",
                "+    CMD_REALPATH,",
                "+    CMD_STAT,",
                "+    CMD_RENAME,",
                "+    CMD_READLINK,",
                "+    CMD_SYMLINK,",
                "+) = range(1, 21)",
                "+(CMD_STATUS, CMD_HANDLE, CMD_DATA, CMD_NAME, CMD_ATTRS) = range(101, 106)",
                "+(CMD_EXTENDED, CMD_EXTENDED_REPLY) = range(200, 202)",
                " SFTP_OK = 0",
                "-SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED, SFTP_FAILURE, \\",
                "-    SFTP_BAD_MESSAGE, SFTP_NO_CONNECTION, SFTP_CONNECTION_LOST, \\",
                "-    SFTP_OP_UNSUPPORTED = range(1, 9)",
                "-",
                "-SFTP_DESC = ['Success',",
                "-             'End of file',",
                "-             'No such file',",
                "-             'Permission denied',",
                "-             'Failure',",
                "-             'Bad message',",
                "-             'No connection',",
                "-             'Connection lost',",
                "-             'Operation unsupported']",
                "+(",
                "+    SFTP_EOF,",
                "+    SFTP_NO_SUCH_FILE,",
                "+    SFTP_PERMISSION_DENIED,",
                "+    SFTP_FAILURE,",
                "+    SFTP_BAD_MESSAGE,",
                "+    SFTP_NO_CONNECTION,",
                "+    SFTP_CONNECTION_LOST,",
                "+    SFTP_OP_UNSUPPORTED,",
                "+) = range(1, 9)",
                "+",
                "+SFTP_DESC = [",
                "+    \"Success\",",
                "+    \"End of file\",",
                "+    \"No such file\",",
                "+    \"Permission denied\",",
                "+    \"Failure\",",
                "+    \"Bad message\",",
                "+    \"No connection\",",
                "+    \"Connection lost\",",
                "+    \"Operation unsupported\",",
                "+]",
                "@@ -62,29 +89,29 @@ _VERSION = 3",
                " CMD_NAMES = {",
                "-    CMD_INIT: 'init',",
                "-    CMD_VERSION: 'version',",
                "-    CMD_OPEN: 'open',",
                "-    CMD_CLOSE: 'close',",
                "-    CMD_READ: 'read',",
                "-    CMD_WRITE: 'write',",
                "-    CMD_LSTAT: 'lstat',",
                "-    CMD_FSTAT: 'fstat',",
                "-    CMD_SETSTAT: 'setstat',",
                "-    CMD_FSETSTAT: 'fsetstat',",
                "-    CMD_OPENDIR: 'opendir',",
                "-    CMD_READDIR: 'readdir',",
                "-    CMD_REMOVE: 'remove',",
                "-    CMD_MKDIR: 'mkdir',",
                "-    CMD_RMDIR: 'rmdir',",
                "-    CMD_REALPATH: 'realpath',",
                "-    CMD_STAT: 'stat',",
                "-    CMD_RENAME: 'rename',",
                "-    CMD_READLINK: 'readlink',",
                "-    CMD_SYMLINK: 'symlink',",
                "-    CMD_STATUS: 'status',",
                "-    CMD_HANDLE: 'handle',",
                "-    CMD_DATA: 'data',",
                "-    CMD_NAME: 'name',",
                "-    CMD_ATTRS: 'attrs',",
                "-    CMD_EXTENDED: 'extended',",
                "-    CMD_EXTENDED_REPLY: 'extended_reply'",
                "+    CMD_INIT: \"init\",",
                "+    CMD_VERSION: \"version\",",
                "+    CMD_OPEN: \"open\",",
                "+    CMD_CLOSE: \"close\",",
                "+    CMD_READ: \"read\",",
                "+    CMD_WRITE: \"write\",",
                "+    CMD_LSTAT: \"lstat\",",
                "+    CMD_FSTAT: \"fstat\",",
                "+    CMD_SETSTAT: \"setstat\",",
                "+    CMD_FSETSTAT: \"fsetstat\",",
                "+    CMD_OPENDIR: \"opendir\",",
                "+    CMD_READDIR: \"readdir\",",
                "+    CMD_REMOVE: \"remove\",",
                "+    CMD_MKDIR: \"mkdir\",",
                "+    CMD_RMDIR: \"rmdir\",",
                "+    CMD_REALPATH: \"realpath\",",
                "+    CMD_STAT: \"stat\",",
                "+    CMD_RENAME: \"rename\",",
                "+    CMD_READLINK: \"readlink\",",
                "+    CMD_SYMLINK: \"symlink\",",
                "+    CMD_STATUS: \"status\",",
                "+    CMD_HANDLE: \"handle\",",
                "+    CMD_DATA: \"data\",",
                "+    CMD_NAME: \"name\",",
                "+    CMD_ATTRS: \"attrs\",",
                "+    CMD_EXTENDED: \"extended\",",
                "+    CMD_EXTENDED_REPLY: \"extended_reply\",",
                " }",
                "@@ -92,3 +119,3 @@ CMD_NAMES = {",
                "-class SFTPError (Exception):",
                "+class SFTPError(Exception):",
                "     pass",
                "@@ -96,5 +123,5 @@ class SFTPError (Exception):",
                "-class BaseSFTP (object):",
                "+class BaseSFTP(object):",
                "     def __init__(self):",
                "-        self.logger = util.get_logger('paramiko.sftp')",
                "+        self.logger = util.get_logger(\"paramiko.sftp\")",
                "         self.sock = None",
                "@@ -105,7 +132,7 @@ class BaseSFTP (object):",
                "     def _send_version(self):",
                "-        self._send_packet(CMD_INIT, struct.pack('>I', _VERSION))",
                "+        self._send_packet(CMD_INIT, struct.pack(\">I\", _VERSION))",
                "         t, data = self._read_packet()",
                "         if t != CMD_VERSION:",
                "-            raise SFTPError('Incompatible sftp protocol')",
                "-        version = struct.unpack('>I', data[:4])[0]",
                "+            raise SFTPError(\"Incompatible sftp protocol\")",
                "+        version = struct.unpack(\">I\", data[:4])[0]",
                "         #        if version != _VERSION:",
                "@@ -119,6 +146,6 @@ class BaseSFTP (object):",
                "         if t != CMD_INIT:",
                "-            raise SFTPError('Incompatible sftp protocol')",
                "-        version = struct.unpack('>I', data[:4])[0]",
                "+            raise SFTPError(\"Incompatible sftp protocol\")",
                "+        version = struct.unpack(\">I\", data[:4])[0]",
                "         # advertise that we support \"check-file\"",
                "-        extension_pairs = ['check-file', 'md5,sha1']",
                "+        extension_pairs = [\"check-file\", \"md5,sha1\"]",
                "         msg = Message()",
                "@@ -167,5 +194,5 @@ class BaseSFTP (object):",
                "         packet = asbytes(packet)",
                "-        out = struct.pack('>I', len(packet) + 1) + byte_chr(t) + packet",
                "+        out = struct.pack(\">I\", len(packet) + 1) + byte_chr(t) + packet",
                "         if self.ultra_debug:",
                "-            self._log(DEBUG, util.format_binary(out, 'OUT: '))",
                "+            self._log(DEBUG, util.format_binary(out, \"OUT: \"))",
                "         self._write_all(out)",
                "@@ -177,7 +204,7 @@ class BaseSFTP (object):",
                "         if byte_ord(x[0]):",
                "-            raise SFTPError('Garbage packet received')",
                "-        size = struct.unpack('>I', x)[0]",
                "+            raise SFTPError(\"Garbage packet received\")",
                "+        size = struct.unpack(\">I\", x)[0]",
                "         data = self._read_all(size)",
                "         if self.ultra_debug:",
                "-            self._log(DEBUG, util.format_binary(data, 'IN: '))",
                "+            self._log(DEBUG, util.format_binary(data, \"IN: \"))",
                "         if size > 0:",
                "diff --git a/paramiko/sftp_attr.py b/paramiko/sftp_attr.py",
                "index 5597948a..5ef8ff14 100644",
                "--- a/paramiko/sftp_attr.py",
                "+++ b/paramiko/sftp_attr.py",
                "@@ -24,3 +24,3 @@ from paramiko.py3compat import long, b",
                "-class SFTPAttributes (object):",
                "+class SFTPAttributes(object):",
                "     \"\"\"",
                "@@ -84,3 +84,3 @@ class SFTPAttributes (object):",
                "     def __repr__(self):",
                "-        return '<SFTPAttributes: %s>' % self._debug_str()",
                "+        return \"<SFTPAttributes: %s>\" % self._debug_str()",
                "@@ -146,14 +146,14 @@ class SFTPAttributes (object):",
                "     def _debug_str(self):",
                "-        out = '[ '",
                "+        out = \"[ \"",
                "         if self.st_size is not None:",
                "-            out += 'size=%d ' % self.st_size",
                "+            out += \"size=%d \" % self.st_size",
                "         if (self.st_uid is not None) and (self.st_gid is not None):",
                "-            out += 'uid=%d gid=%d ' % (self.st_uid, self.st_gid)",
                "+            out += \"uid=%d gid=%d \" % (self.st_uid, self.st_gid)",
                "         if self.st_mode is not None:",
                "-            out += 'mode=' + oct(self.st_mode) + ' '",
                "+            out += \"mode=\" + oct(self.st_mode) + \" \"",
                "         if (self.st_atime is not None) and (self.st_mtime is not None):",
                "-            out += 'atime=%d mtime=%d ' % (self.st_atime, self.st_mtime)",
                "+            out += \"atime=%d mtime=%d \" % (self.st_atime, self.st_mtime)",
                "         for k, v in self.attr.items():",
                "             out += '\"%s\"=%r ' % (str(k), v)",
                "-        out += ']'",
                "+        out += \"]\"",
                "         return out",
                "@@ -164,7 +164,7 @@ class SFTPAttributes (object):",
                "             suid = 2",
                "-        out = '-r'[n >> 2] + '-w'[(n >> 1) & 1]",
                "+        out = \"-r\"[n >> 2] + \"-w\"[(n >> 1) & 1]",
                "         if sticky:",
                "-            out += '-xTt'[suid + (n & 1)]",
                "+            out += \"-xTt\"[suid + (n & 1)]",
                "         else:",
                "-            out += '-xSs'[suid + (n & 1)]",
                "+            out += \"-xSs\"[suid + (n & 1)]",
                "         return out",
                "@@ -176,25 +176,28 @@ class SFTPAttributes (object):",
                "             if kind == stat.S_IFIFO:",
                "-                ks = 'p'",
                "+                ks = \"p\"",
                "             elif kind == stat.S_IFCHR:",
                "-                ks = 'c'",
                "+                ks = \"c\"",
                "             elif kind == stat.S_IFDIR:",
                "-                ks = 'd'",
                "+                ks = \"d\"",
                "             elif kind == stat.S_IFBLK:",
                "-                ks = 'b'",
                "+                ks = \"b\"",
                "             elif kind == stat.S_IFREG:",
                "-                ks = '-'",
                "+                ks = \"-\"",
                "             elif kind == stat.S_IFLNK:",
                "-                ks = 'l'",
                "+                ks = \"l\"",
                "             elif kind == stat.S_IFSOCK:",
                "-                ks = 's'",
                "+                ks = \"s\"",
                "             else:",
                "-                ks = '?'",
                "+                ks = \"?\"",
                "             ks += self._rwx(",
                "-                (self.st_mode & o700) >> 6, self.st_mode & stat.S_ISUID)",
                "+                (self.st_mode & o700) >> 6, self.st_mode & stat.S_ISUID",
                "+            )",
                "             ks += self._rwx(",
                "-                (self.st_mode & o70) >> 3, self.st_mode & stat.S_ISGID)",
                "+                (self.st_mode & o70) >> 3, self.st_mode & stat.S_ISGID",
                "+            )",
                "             ks += self._rwx(",
                "-                self.st_mode & 7, self.st_mode & stat.S_ISVTX, True)",
                "+                self.st_mode & 7, self.st_mode & stat.S_ISVTX, True",
                "+            )",
                "         else:",
                "-            ks = '?---------'",
                "+            ks = \"?---------\"",
                "         # compute display date",
                "@@ -202,3 +205,3 @@ class SFTPAttributes (object):",
                "             # shouldn't really happen",
                "-            datestr = '(unknown date)'",
                "+            datestr = \"(unknown date)\"",
                "         else:",
                "@@ -207,7 +210,9 @@ class SFTPAttributes (object):",
                "                 datestr = time.strftime(",
                "-                    '%d %b %Y', time.localtime(self.st_mtime))",
                "+                    \"%d %b %Y\", time.localtime(self.st_mtime)",
                "+                )",
                "             else:",
                "                 datestr = time.strftime(",
                "-                    '%d %b %H:%M', time.localtime(self.st_mtime))",
                "-        filename = getattr(self, 'filename', '?')",
                "+                    \"%d %b %H:%M\", time.localtime(self.st_mtime)",
                "+                )",
                "+        filename = getattr(self, \"filename\", \"?\")",
                "@@ -224,4 +229,10 @@ class SFTPAttributes (object):",
                "-        return '%s   1 %-8d %-8d %8d %-12s %s' % (",
                "-            ks, uid, gid, size, datestr, filename)",
                "+        return \"%s   1 %-8d %-8d %8d %-12s %s\" % (",
                "+            ks,",
                "+            uid,",
                "+            gid,",
                "+            size,",
                "+            datestr,",
                "+            filename,",
                "+        )",
                "diff --git a/paramiko/sftp_client.py b/paramiko/sftp_client.py",
                "index 464e031c..f9652a34 100644",
                "--- a/paramiko/sftp_client.py",
                "+++ b/paramiko/sftp_client.py",
                "@@ -32,8 +32,32 @@ from paramiko.py3compat import bytestring, b, u, long",
                " from paramiko.sftp import (",
                "-    BaseSFTP, CMD_OPENDIR, CMD_HANDLE, SFTPError, CMD_READDIR, CMD_NAME,",
                "-    CMD_CLOSE, SFTP_FLAG_READ, SFTP_FLAG_WRITE, SFTP_FLAG_CREATE,",
                "-    SFTP_FLAG_TRUNC, SFTP_FLAG_APPEND, SFTP_FLAG_EXCL, CMD_OPEN, CMD_REMOVE,",
                "-    CMD_RENAME, CMD_MKDIR, CMD_RMDIR, CMD_STAT, CMD_ATTRS, CMD_LSTAT,",
                "-    CMD_SYMLINK, CMD_SETSTAT, CMD_READLINK, CMD_REALPATH, CMD_STATUS, SFTP_OK,",
                "-    SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED,",
                "+    BaseSFTP,",
                "+    CMD_OPENDIR,",
                "+    CMD_HANDLE,",
                "+    SFTPError,",
                "+    CMD_READDIR,",
                "+    CMD_NAME,",
                "+    CMD_CLOSE,",
                "+    SFTP_FLAG_READ,",
                "+    SFTP_FLAG_WRITE,",
                "+    SFTP_FLAG_CREATE,",
                "+    SFTP_FLAG_TRUNC,",
                "+    SFTP_FLAG_APPEND,",
                "+    SFTP_FLAG_EXCL,",
                "+    CMD_OPEN,",
                "+    CMD_REMOVE,",
                "+    CMD_RENAME,",
                "+    CMD_MKDIR,",
                "+    CMD_RMDIR,",
                "+    CMD_STAT,",
                "+    CMD_ATTRS,",
                "+    CMD_LSTAT,",
                "+    CMD_SYMLINK,",
                "+    CMD_SETSTAT,",
                "+    CMD_READLINK,",
                "+    CMD_REALPATH,",
                "+    CMD_STATUS,",
                "+    SFTP_OK,",
                "+    SFTP_EOF,",
                "+    SFTP_NO_SUCH_FILE,",
                "+    SFTP_PERMISSION_DENIED,",
                " )",
                "@@ -53,6 +77,6 @@ def _to_unicode(s):",
                "     try:",
                "-        return s.encode('ascii')",
                "+        return s.encode(\"ascii\")",
                "     except (UnicodeError, AttributeError):",
                "         try:",
                "-            return s.decode('utf-8')",
                "+            return s.decode(\"utf-8\")",
                "         except UnicodeError:",
                "@@ -61,3 +85,3 @@ def _to_unicode(s):",
                "-b_slash = b'/'",
                "+b_slash = b\"/\"",
                "@@ -73,2 +97,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "     \"\"\"",
                "+",
                "     def __init__(self, sock):",
                "@@ -99,3 +124,4 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "             self.logger = util.get_logger(",
                "-                transport.get_log_channel() + '.sftp')",
                "+                transport.get_log_channel() + \".sftp\"",
                "+            )",
                "             self.ultra_debug = transport.get_hexdump()",
                "@@ -104,6 +130,6 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         except EOFError:",
                "-            raise SSHException('EOF during negotiation')",
                "+            raise SSHException(\"EOF during negotiation\")",
                "         self._log(",
                "-            INFO,",
                "-            'Opened sftp connection (server version %d)' % server_version)",
                "+            INFO, \"Opened sftp connection (server version %d)\" % server_version",
                "+        )",
                "@@ -133,7 +159,8 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         \"\"\"",
                "-        chan = t.open_session(window_size=window_size,",
                "-                              max_packet_size=max_packet_size)",
                "+        chan = t.open_session(",
                "+            window_size=window_size, max_packet_size=max_packet_size",
                "+        )",
                "         if chan is None:",
                "             return None",
                "-        chan.invoke_subsystem('sftp')",
                "+        chan.invoke_subsystem(\"sftp\")",
                "         return cls(chan)",
                "@@ -147,6 +174,8 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "             # before logging",
                "-            msg = msg.replace('%', '%%')",
                "+            msg = msg.replace(\"%\", \"%%\")",
                "             super(SFTPClient, self)._log(",
                "                 level,",
                "-                \"[chan %s] \" + msg, *([self.sock.get_name()] + list(args)))",
                "+                \"[chan %s] \" + msg,",
                "+                *([self.sock.get_name()] + list(args))",
                "+            )",
                "@@ -158,3 +187,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         \"\"\"",
                "-        self._log(INFO, 'sftp session closed.')",
                "+        self._log(INFO, \"sftp session closed.\")",
                "         self.sock.close()",
                "@@ -170,3 +199,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "-    def listdir(self, path='.'):",
                "+    def listdir(self, path=\".\"):",
                "         \"\"\"",
                "@@ -184,3 +213,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "-    def listdir_attr(self, path='.'):",
                "+    def listdir_attr(self, path=\".\"):",
                "         \"\"\"",
                "@@ -202,6 +231,6 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'listdir(%r)' % path)",
                "+        self._log(DEBUG, \"listdir(%r)\" % path)",
                "         t, msg = self._request(CMD_OPENDIR, path)",
                "         if t != CMD_HANDLE:",
                "-            raise SFTPError('Expected handle')",
                "+            raise SFTPError(\"Expected handle\")",
                "         handle = msg.get_binary()",
                "@@ -215,3 +244,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "             if t != CMD_NAME:",
                "-                raise SFTPError('Expected name response')",
                "+                raise SFTPError(\"Expected name response\")",
                "             count = msg.get_int()",
                "@@ -221,3 +250,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "                 attr = SFTPAttributes._from_msg(msg, filename, longname)",
                "-                if (filename != '.') and (filename != '..'):",
                "+                if (filename != \".\") and (filename != \"..\"):",
                "                     filelist.append(attr)",
                "@@ -226,3 +255,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "-    def listdir_iter(self, path='.', read_aheads=50):",
                "+    def listdir_iter(self, path=\".\", read_aheads=50):",
                "         \"\"\"",
                "@@ -241,3 +270,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'listdir(%r)' % path)",
                "+        self._log(DEBUG, \"listdir(%r)\" % path)",
                "         t, msg = self._request(CMD_OPENDIR, path)",
                "@@ -245,3 +274,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         if t != CMD_HANDLE:",
                "-            raise SFTPError('Expected handle')",
                "+            raise SFTPError(\"Expected handle\")",
                "@@ -260,3 +289,2 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "-",
                "                 # For each of our sent requests",
                "@@ -279,4 +307,5 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "                         attr = SFTPAttributes._from_msg(",
                "-                            msg, filename, longname)",
                "-                        if (filename != '.') and (filename != '..'):",
                "+                            msg, filename, longname",
                "+                        )",
                "+                        if (filename != \".\") and (filename != \"..\"):",
                "                             yield attr",
                "@@ -290,4 +319,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "-",
                "-    def open(self, filename, mode='r', bufsize=-1):",
                "+    def open(self, filename, mode=\"r\", bufsize=-1):",
                "         \"\"\"",
                "@@ -324,13 +352,13 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         filename = self._adjust_cwd(filename)",
                "-        self._log(DEBUG, 'open(%r, %r)' % (filename, mode))",
                "+        self._log(DEBUG, \"open(%r, %r)\" % (filename, mode))",
                "         imode = 0",
                "-        if ('r' in mode) or ('+' in mode):",
                "+        if (\"r\" in mode) or (\"+\" in mode):",
                "             imode |= SFTP_FLAG_READ",
                "-        if ('w' in mode) or ('+' in mode) or ('a' in mode):",
                "+        if (\"w\" in mode) or (\"+\" in mode) or (\"a\" in mode):",
                "             imode |= SFTP_FLAG_WRITE",
                "-        if 'w' in mode:",
                "+        if \"w\" in mode:",
                "             imode |= SFTP_FLAG_CREATE | SFTP_FLAG_TRUNC",
                "-        if 'a' in mode:",
                "+        if \"a\" in mode:",
                "             imode |= SFTP_FLAG_CREATE | SFTP_FLAG_APPEND",
                "-        if 'x' in mode:",
                "+        if \"x\" in mode:",
                "             imode |= SFTP_FLAG_CREATE | SFTP_FLAG_EXCL",
                "@@ -339,7 +367,7 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         if t != CMD_HANDLE:",
                "-            raise SFTPError('Expected handle')",
                "+            raise SFTPError(\"Expected handle\")",
                "         handle = msg.get_binary()",
                "         self._log(",
                "-            DEBUG,",
                "-            'open(%r, %r) -> %s' % (filename, mode, u(hexlify(handle))))",
                "+            DEBUG, \"open(%r, %r) -> %s\" % (filename, mode, u(hexlify(handle)))",
                "+        )",
                "         return SFTPFile(self, handle, mode, bufsize)",
                "@@ -359,3 +387,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'remove(%r)' % path)",
                "+        self._log(DEBUG, \"remove(%r)\" % path)",
                "         self._request(CMD_REMOVE, path)",
                "@@ -377,3 +405,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         newpath = self._adjust_cwd(newpath)",
                "-        self._log(DEBUG, 'rename(%r, %r)' % (oldpath, newpath))",
                "+        self._log(DEBUG, \"rename(%r, %r)\" % (oldpath, newpath))",
                "         self._request(CMD_RENAME, oldpath, newpath)",
                "@@ -390,3 +418,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'mkdir(%r, %r)' % (path, mode))",
                "+        self._log(DEBUG, \"mkdir(%r, %r)\" % (path, mode))",
                "         attr = SFTPAttributes()",
                "@@ -402,3 +430,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'rmdir(%r)' % path)",
                "+        self._log(DEBUG, \"rmdir(%r)\" % path)",
                "         self._request(CMD_RMDIR, path)",
                "@@ -425,6 +453,6 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'stat(%r)' % path)",
                "+        self._log(DEBUG, \"stat(%r)\" % path)",
                "         t, msg = self._request(CMD_STAT, path)",
                "         if t != CMD_ATTRS:",
                "-            raise SFTPError('Expected attributes')",
                "+            raise SFTPError(\"Expected attributes\")",
                "         return SFTPAttributes._from_msg(msg)",
                "@@ -443,6 +471,6 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'lstat(%r)' % path)",
                "+        self._log(DEBUG, \"lstat(%r)\" % path)",
                "         t, msg = self._request(CMD_LSTAT, path)",
                "         if t != CMD_ATTRS:",
                "-            raise SFTPError('Expected attributes')",
                "+            raise SFTPError(\"Expected attributes\")",
                "         return SFTPAttributes._from_msg(msg)",
                "@@ -458,3 +486,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         dest = self._adjust_cwd(dest)",
                "-        self._log(DEBUG, 'symlink(%r, %r)' % (source, dest))",
                "+        self._log(DEBUG, \"symlink(%r, %r)\" % (source, dest))",
                "         source = bytestring(source)",
                "@@ -472,3 +500,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'chmod(%r, %r)' % (path, mode))",
                "+        self._log(DEBUG, \"chmod(%r, %r)\" % (path, mode))",
                "         attr = SFTPAttributes()",
                "@@ -489,3 +517,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'chown(%r, %r, %r)' % (path, uid, gid))",
                "+        self._log(DEBUG, \"chown(%r, %r, %r)\" % (path, uid, gid))",
                "         attr = SFTPAttributes()",
                "@@ -511,3 +539,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "             times = (time.time(), time.time())",
                "-        self._log(DEBUG, 'utime(%r, %r)' % (path, times))",
                "+        self._log(DEBUG, \"utime(%r, %r)\" % (path, times))",
                "         attr = SFTPAttributes()",
                "@@ -526,3 +554,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'truncate(%r, %r)' % (path, size))",
                "+        self._log(DEBUG, \"truncate(%r, %r)\" % (path, size))",
                "         attr = SFTPAttributes()",
                "@@ -541,6 +569,6 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'readlink(%r)' % path)",
                "+        self._log(DEBUG, \"readlink(%r)\" % path)",
                "         t, msg = self._request(CMD_READLINK, path)",
                "         if t != CMD_NAME:",
                "-            raise SFTPError('Expected name response')",
                "+            raise SFTPError(\"Expected name response\")",
                "         count = msg.get_int()",
                "@@ -549,3 +577,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         if count != 1:",
                "-            raise SFTPError('Readlink returned %d results' % count)",
                "+            raise SFTPError(\"Readlink returned %d results\" % count)",
                "         return _to_unicode(msg.get_string())",
                "@@ -565,9 +593,9 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         path = self._adjust_cwd(path)",
                "-        self._log(DEBUG, 'normalize(%r)' % path)",
                "+        self._log(DEBUG, \"normalize(%r)\" % path)",
                "         t, msg = self._request(CMD_REALPATH, path)",
                "         if t != CMD_NAME:",
                "-            raise SFTPError('Expected name response')",
                "+            raise SFTPError(\"Expected name response\")",
                "         count = msg.get_int()",
                "         if count != 1:",
                "-            raise SFTPError('Realpath returned %d results' % count)",
                "+            raise SFTPError(\"Realpath returned %d results\" % count)",
                "         return msg.get_text()",
                "@@ -595,3 +623,4 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "             raise SFTPError(",
                "-                errno.ENOTDIR, \"%s: %s\" % (os.strerror(errno.ENOTDIR), path))",
                "+                errno.ENOTDIR, \"%s: %s\" % (os.strerror(errno.ENOTDIR), path)",
                "+            )",
                "         self._cwd = b(self.normalize(path))",
                "@@ -648,3 +677,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         \"\"\"",
                "-        with self.file(remotepath, 'wb') as fr:",
                "+        with self.file(remotepath, \"wb\") as fr:",
                "             fr.set_pipelined(True)",
                "@@ -657,3 +686,4 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "                 raise IOError(",
                "-                    'size mismatch in put!  %d != %d' % (s.st_size, size))",
                "+                    \"size mismatch in put!  %d != %d\" % (s.st_size, size)",
                "+                )",
                "         else:",
                "@@ -691,3 +721,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         file_size = os.stat(localpath).st_size",
                "-        with open(localpath, 'rb') as fl:",
                "+        with open(localpath, \"rb\") as fl:",
                "             return self.putfo(fl, remotepath, file_size, callback, confirm)",
                "@@ -712,3 +742,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         file_size = self.stat(remotepath).st_size",
                "-        with self.open(remotepath, 'rb') as fr:",
                "+        with self.open(remotepath, \"rb\") as fr:",
                "             fr.prefetch(file_size)",
                "@@ -734,3 +764,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "         \"\"\"",
                "-        with open(localpath, 'wb') as fl:",
                "+        with open(localpath, \"wb\") as fl:",
                "             size = self.getfo(remotepath, fl, callback)",
                "@@ -739,3 +769,4 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "             raise IOError(",
                "-                'size mismatch in get!  %d != %d' % (s.st_size, size))",
                "+                \"size mismatch in get!  %d != %d\" % (s.st_size, size)",
                "+            )",
                "@@ -777,3 +808,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "             except EOFError as e:",
                "-                raise SSHException('Server connection dropped: %s' % str(e))",
                "+                raise SSHException(\"Server connection dropped: %s\" % str(e))",
                "             msg = Message(data)",
                "@@ -785,3 +816,3 @@ class SFTPClient(BaseSFTP, ClosingContextManager):",
                "                     # responses came back",
                "-                    self._log(DEBUG, 'Unexpected response #%d' % (num,))",
                "+                    self._log(DEBUG, \"Unexpected response #%d\" % (num,))",
                "                     if waitfor is None:",
                "@@ -852,2 +883,3 @@ class SFTP(SFTPClient):",
                "     \"\"\"",
                "+",
                "     pass",
                "diff --git a/paramiko/sftp_file.py b/paramiko/sftp_file.py",
                "index bc34db94..08003e43 100644",
                "--- a/paramiko/sftp_file.py",
                "+++ b/paramiko/sftp_file.py",
                "@@ -34,4 +34,12 @@ from paramiko.py3compat import u, long",
                " from paramiko.sftp import (",
                "-    CMD_CLOSE, CMD_READ, CMD_DATA, SFTPError, CMD_WRITE, CMD_STATUS, CMD_FSTAT,",
                "-    CMD_ATTRS, CMD_FSETSTAT, CMD_EXTENDED,",
                "+    CMD_CLOSE,",
                "+    CMD_READ,",
                "+    CMD_DATA,",
                "+    SFTPError,",
                "+    CMD_WRITE,",
                "+    CMD_STATUS,",
                "+    CMD_FSTAT,",
                "+    CMD_ATTRS,",
                "+    CMD_FSETSTAT,",
                "+    CMD_EXTENDED,",
                " )",
                "@@ -40,3 +48,3 @@ from paramiko.sftp_attr import SFTPAttributes",
                "-class SFTPFile (BufferedFile):",
                "+class SFTPFile(BufferedFile):",
                "     \"\"\"",
                "@@ -52,3 +60,3 @@ class SFTPFile (BufferedFile):",
                "-    def __init__(self, sftp, handle, mode='r', bufsize=-1):",
                "+    def __init__(self, sftp, handle, mode=\"r\", bufsize=-1):",
                "         BufferedFile.__init__(self)",
                "@@ -85,3 +93,3 @@ class SFTPFile (BufferedFile):",
                "             return",
                "-        self.sftp._log(DEBUG, 'close(%s)' % u(hexlify(self.handle)))",
                "+        self.sftp._log(DEBUG, \"close(%s)\" % u(hexlify(self.handle)))",
                "         if self.pipelined:",
                "@@ -104,4 +112,5 @@ class SFTPFile (BufferedFile):",
                "     def _data_in_prefetch_requests(self, offset, size):",
                "-        k = [x for x in list(self._prefetch_extents.values())",
                "-             if x[0] <= offset]",
                "+        k = [",
                "+            x for x in list(self._prefetch_extents.values()) if x[0] <= offset",
                "+        ]",
                "         if len(k) == 0:",
                "@@ -119,4 +128,4 @@ class SFTPFile (BufferedFile):",
                "         return self._data_in_prefetch_requests(",
                "-            buf_offset + buf_size,",
                "-            offset + size - buf_offset - buf_size)",
                "+            buf_offset + buf_size, offset + size - buf_offset - buf_size",
                "+        )",
                "@@ -176,9 +185,6 @@ class SFTPFile (BufferedFile):",
                "         t, msg = self.sftp._request(",
                "-            CMD_READ,",
                "-            self.handle,",
                "-            long(self._realpos),",
                "-            int(size)",
                "+            CMD_READ, self.handle, long(self._realpos), int(size)",
                "         )",
                "         if t != CMD_DATA:",
                "-            raise SFTPError('Expected data')",
                "+            raise SFTPError(\"Expected data\")",
                "         return msg.get_string()",
                "@@ -193,8 +199,7 @@ class SFTPFile (BufferedFile):",
                "             long(self._realpos),",
                "-            data[:chunk]",
                "+            data[:chunk],",
                "         )",
                "         self._reqs.append(sftp_async_request)",
                "-        if (",
                "-            not self.pipelined or",
                "-            (len(self._reqs) > 100 and self.sftp.sock.recv_ready())",
                "+        if not self.pipelined or (",
                "+            len(self._reqs) > 100 and self.sftp.sock.recv_ready()",
                "         ):",
                "@@ -204,3 +209,3 @@ class SFTPFile (BufferedFile):",
                "                 if t != CMD_STATUS:",
                "-                    raise SFTPError('Expected status')",
                "+                    raise SFTPError(\"Expected status\")",
                "                 # convert_status already called",
                "@@ -279,3 +284,3 @@ class SFTPFile (BufferedFile):",
                "         if t != CMD_ATTRS:",
                "-            raise SFTPError('Expected attributes')",
                "+            raise SFTPError(\"Expected attributes\")",
                "         return SFTPAttributes._from_msg(msg)",
                "@@ -290,3 +295,3 @@ class SFTPFile (BufferedFile):",
                "         \"\"\"",
                "-        self.sftp._log(DEBUG, 'chmod(%s, %r)' % (hexlify(self.handle), mode))",
                "+        self.sftp._log(DEBUG, \"chmod(%s, %r)\" % (hexlify(self.handle), mode))",
                "         attr = SFTPAttributes()",
                "@@ -306,4 +311,4 @@ class SFTPFile (BufferedFile):",
                "         self.sftp._log(",
                "-            DEBUG,",
                "-            'chown(%s, %r, %r)' % (hexlify(self.handle), uid, gid))",
                "+            DEBUG, \"chown(%s, %r, %r)\" % (hexlify(self.handle), uid, gid)",
                "+        )",
                "         attr = SFTPAttributes()",
                "@@ -327,3 +332,3 @@ class SFTPFile (BufferedFile):",
                "             times = (time.time(), time.time())",
                "-        self.sftp._log(DEBUG, 'utime(%s, %r)' % (hexlify(self.handle), times))",
                "+        self.sftp._log(DEBUG, \"utime(%s, %r)\" % (hexlify(self.handle), times))",
                "         attr = SFTPAttributes()",
                "@@ -341,4 +346,4 @@ class SFTPFile (BufferedFile):",
                "         self.sftp._log(",
                "-            DEBUG,",
                "-            'truncate(%s, %r)' % (hexlify(self.handle), size))",
                "+            DEBUG, \"truncate(%s, %r)\" % (hexlify(self.handle), size)",
                "+        )",
                "         attr = SFTPAttributes()",
                "@@ -394,4 +399,10 @@ class SFTPFile (BufferedFile):",
                "         t, msg = self.sftp._request(",
                "-            CMD_EXTENDED, 'check-file', self.handle,",
                "-            hash_algorithm, long(offset), long(length), block_size)",
                "+            CMD_EXTENDED,",
                "+            \"check-file\",",
                "+            self.handle,",
                "+            hash_algorithm,",
                "+            long(offset),",
                "+            long(length),",
                "+            block_size,",
                "+        )",
                "         msg.get_text()  # ext",
                "@@ -475,3 +486,3 @@ class SFTPFile (BufferedFile):",
                "         \"\"\"",
                "-        self.sftp._log(DEBUG, 'readv(%s, %r)' % (hexlify(self.handle), chunks))",
                "+        self.sftp._log(DEBUG, \"readv(%s, %r)\" % (hexlify(self.handle), chunks))",
                "@@ -480,6 +491,5 @@ class SFTPFile (BufferedFile):",
                "             # don't fetch data that's already in the prefetch buffer",
                "-            if (",
                "-                self._data_in_prefetch_buffers(offset) or",
                "-                self._data_in_prefetch_requests(offset, size)",
                "-            ):",
                "+            if self._data_in_prefetch_buffers(",
                "+                offset",
                "+            ) or self._data_in_prefetch_requests(offset, size):",
                "                 continue",
                "@@ -520,7 +530,4 @@ class SFTPFile (BufferedFile):",
                "             num = self.sftp._async_request(",
                "-                self,",
                "-                CMD_READ,",
                "-                self.handle,",
                "-                long(offset),",
                "-                int(length))",
                "+                self, CMD_READ, self.handle, long(offset), int(length)",
                "+            )",
                "             with self._prefetch_lock:",
                "@@ -537,3 +544,3 @@ class SFTPFile (BufferedFile):",
                "         if t != CMD_DATA:",
                "-            raise SFTPError('Expected data')",
                "+            raise SFTPError(\"Expected data\")",
                "         data = msg.get_string()",
                "diff --git a/paramiko/sftp_handle.py b/paramiko/sftp_handle.py",
                "index ca473900..a7e22f01 100644",
                "--- a/paramiko/sftp_handle.py",
                "+++ b/paramiko/sftp_handle.py",
                "@@ -27,3 +27,3 @@ from paramiko.util import ClosingContextManager",
                "-class SFTPHandle (ClosingContextManager):",
                "+class SFTPHandle(ClosingContextManager):",
                "     \"\"\"",
                "@@ -38,2 +38,3 @@ class SFTPHandle (ClosingContextManager):",
                "     \"\"\"",
                "+",
                "     def __init__(self, flags=0):",
                "@@ -65,6 +66,6 @@ class SFTPHandle (ClosingContextManager):",
                "         \"\"\"",
                "-        readfile = getattr(self, 'readfile', None)",
                "+        readfile = getattr(self, \"readfile\", None)",
                "         if readfile is not None:",
                "             readfile.close()",
                "-        writefile = getattr(self, 'writefile', None)",
                "+        writefile = getattr(self, \"writefile\", None)",
                "         if writefile is not None:",
                "@@ -90,3 +91,3 @@ class SFTPHandle (ClosingContextManager):",
                "         \"\"\"",
                "-        readfile = getattr(self, 'readfile', None)",
                "+        readfile = getattr(self, \"readfile\", None)",
                "         if readfile is None:",
                "@@ -124,3 +125,3 @@ class SFTPHandle (ClosingContextManager):",
                "         \"\"\"",
                "-        writefile = getattr(self, 'writefile', None)",
                "+        writefile = getattr(self, \"writefile\", None)",
                "         if writefile is None:",
                "diff --git a/paramiko/sftp_server.py b/paramiko/sftp_server.py",
                "index 1cfe286b..d9a005d6 100644",
                "--- a/paramiko/sftp_server.py",
                "+++ b/paramiko/sftp_server.py",
                "@@ -29,3 +29,7 @@ from paramiko import util",
                " from paramiko.sftp import (",
                "-    BaseSFTP, Message, SFTP_FAILURE, SFTP_PERMISSION_DENIED, SFTP_NO_SUCH_FILE,",
                "+    BaseSFTP,",
                "+    Message,",
                "+    SFTP_FAILURE,",
                "+    SFTP_PERMISSION_DENIED,",
                "+    SFTP_NO_SUCH_FILE,",
                " )",
                "@@ -40,18 +44,45 @@ from paramiko.server import SubsystemHandler",
                " from paramiko.sftp import (",
                "-    CMD_HANDLE, SFTP_DESC, CMD_STATUS, SFTP_EOF, CMD_NAME, SFTP_BAD_MESSAGE,",
                "-    CMD_EXTENDED_REPLY, SFTP_FLAG_READ, SFTP_FLAG_WRITE, SFTP_FLAG_APPEND,",
                "-    SFTP_FLAG_CREATE, SFTP_FLAG_TRUNC, SFTP_FLAG_EXCL, CMD_NAMES, CMD_OPEN,",
                "-    CMD_CLOSE, SFTP_OK, CMD_READ, CMD_DATA, CMD_WRITE, CMD_REMOVE, CMD_RENAME,",
                "-    CMD_MKDIR, CMD_RMDIR, CMD_OPENDIR, CMD_READDIR, CMD_STAT, CMD_ATTRS,",
                "-    CMD_LSTAT, CMD_FSTAT, CMD_SETSTAT, CMD_FSETSTAT, CMD_READLINK, CMD_SYMLINK,",
                "-    CMD_REALPATH, CMD_EXTENDED, SFTP_OP_UNSUPPORTED,",
                "+    CMD_HANDLE,",
                "+    SFTP_DESC,",
                "+    CMD_STATUS,",
                "+    SFTP_EOF,",
                "+    CMD_NAME,",
                "+    SFTP_BAD_MESSAGE,",
                "+    CMD_EXTENDED_REPLY,",
                "+    SFTP_FLAG_READ,",
                "+    SFTP_FLAG_WRITE,",
                "+    SFTP_FLAG_APPEND,",
                "+    SFTP_FLAG_CREATE,",
                "+    SFTP_FLAG_TRUNC,",
                "+    SFTP_FLAG_EXCL,",
                "+    CMD_NAMES,",
                "+    CMD_OPEN,",
                "+    CMD_CLOSE,",
                "+    SFTP_OK,",
                "+    CMD_READ,",
                "+    CMD_DATA,",
                "+    CMD_WRITE,",
                "+    CMD_REMOVE,",
                "+    CMD_RENAME,",
                "+    CMD_MKDIR,",
                "+    CMD_RMDIR,",
                "+    CMD_OPENDIR,",
                "+    CMD_READDIR,",
                "+    CMD_STAT,",
                "+    CMD_ATTRS,",
                "+    CMD_LSTAT,",
                "+    CMD_FSTAT,",
                "+    CMD_SETSTAT,",
                "+    CMD_FSETSTAT,",
                "+    CMD_READLINK,",
                "+    CMD_SYMLINK,",
                "+    CMD_REALPATH,",
                "+    CMD_EXTENDED,",
                "+    SFTP_OP_UNSUPPORTED,",
                " )",
                "-_hash_class = {",
                "-    'sha1': sha1,",
                "-    'md5': md5,",
                "-}",
                "+_hash_class = {\"sha1\": sha1, \"md5\": md5}",
                "-class SFTPServer (BaseSFTP, SubsystemHandler):",
                "+class SFTPServer(BaseSFTP, SubsystemHandler):",
                "     \"\"\"",
                "@@ -62,4 +93,11 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "-    def __init__(self, channel, name, server, sftp_si=SFTPServerInterface,",
                "-                 *largs, **kwargs):",
                "+    def __init__(",
                "+        self,",
                "+        channel,",
                "+        name,",
                "+        server,",
                "+        sftp_si=SFTPServerInterface,",
                "+        *largs,",
                "+        **kwargs",
                "+    ):",
                "         \"\"\"",
                "@@ -81,3 +119,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "         transport = channel.get_transport()",
                "-        self.logger = util.get_logger(transport.get_log_channel() + '.sftp')",
                "+        self.logger = util.get_logger(transport.get_log_channel() + \".sftp\")",
                "         self.ultra_debug = transport.get_hexdump()",
                "@@ -93,8 +131,8 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 super(SFTPServer, self)._log(",
                "-                    level,",
                "-                    \"[chan \" + self.sock.get_name() + \"] \" + m)",
                "+                    level, \"[chan \" + self.sock.get_name() + \"] \" + m",
                "+                )",
                "         else:",
                "             super(SFTPServer, self)._log(",
                "-                level,",
                "-                \"[chan \" + self.sock.get_name() + \"] \" + msg)",
                "+                level, \"[chan \" + self.sock.get_name() + \"] \" + msg",
                "+            )",
                "@@ -102,3 +140,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "         self.sock = channel",
                "-        self._log(DEBUG, 'Started sftp server on channel %s' % repr(channel))",
                "+        self._log(DEBUG, \"Started sftp server on channel %s\" % repr(channel))",
                "         self._send_server_version()",
                "@@ -109,6 +147,6 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             except EOFError:",
                "-                self._log(DEBUG, 'EOF -- end of session')",
                "+                self._log(DEBUG, \"EOF -- end of session\")",
                "                 return",
                "             except Exception as e:",
                "-                self._log(DEBUG, 'Exception on channel: ' + str(e))",
                "+                self._log(DEBUG, \"Exception on channel: \" + str(e))",
                "                 self._log(DEBUG, util.tb_strings())",
                "@@ -120,3 +158,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             except Exception as e:",
                "-                self._log(DEBUG, 'Exception in server processing: ' + str(e))",
                "+                self._log(DEBUG, \"Exception in server processing: \" + str(e))",
                "                 self._log(DEBUG, util.tb_strings())",
                "@@ -174,3 +212,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "         \"\"\"",
                "-        if sys.platform != 'win32':",
                "+        if sys.platform != \"win32\":",
                "             # mode operations are meaningless on win32",
                "@@ -183,3 +221,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "         if attr._flags & attr.FLAG_SIZE:",
                "-            with open(filename, 'w+') as f:",
                "+            with open(filename, \"w+\") as f:",
                "                 f.truncate(attr.st_size)",
                "@@ -202,4 +240,6 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 raise Exception(",
                "-                    'unknown type for {0!r} type {1!r}'.format(",
                "-                        item, type(item)))",
                "+                    \"unknown type for {0!r} type {1!r}\".format(",
                "+                        item, type(item)",
                "+                    )",
                "+                )",
                "         self._send_packet(t, msg)",
                "@@ -211,3 +251,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             return",
                "-        handle._set_name(b('hx%d' % self.next_handle))",
                "+        handle._set_name(b(\"hx%d\" % self.next_handle))",
                "         self.next_handle += 1",
                "@@ -224,6 +264,6 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             except IndexError:",
                "-                desc = 'Unknown'",
                "+                desc = \"Unknown\"",
                "         # some clients expect a \"langauge\" tag at the end",
                "         # (but don't mind it being blank)",
                "-        self._response(request_number, CMD_STATUS, code, desc, '')",
                "+        self._response(request_number, CMD_STATUS, code, desc, \"\")",
                "@@ -266,3 +306,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._send_status(",
                "-                request_number, SFTP_BAD_MESSAGE, 'Invalid handle')",
                "+                request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"",
                "+            )",
                "             return",
                "@@ -276,3 +317,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._send_status(",
                "-                request_number, SFTP_FAILURE, 'No supported hash types found')",
                "+                request_number, SFTP_FAILURE, \"No supported hash types found\"",
                "+            )",
                "             return",
                "@@ -281,3 +323,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             if not issubclass(type(st), SFTPAttributes):",
                "-                self._send_status(request_number, st, 'Unable to stat file')",
                "+                self._send_status(request_number, st, \"Unable to stat file\")",
                "                 return",
                "@@ -288,3 +330,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._send_status(",
                "-                request_number, SFTP_FAILURE, 'Block size too small')",
                "+                request_number, SFTP_FAILURE, \"Block size too small\"",
                "+            )",
                "             return",
                "@@ -303,3 +346,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                     self._send_status(",
                "-                        request_number, data, 'Unable to hash file')",
                "+                        request_number, data, \"Unable to hash file\"",
                "+                    )",
                "                     return",
                "@@ -312,3 +356,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "         msg.add_int(request_number)",
                "-        msg.add_string('check-file')",
                "+        msg.add_string(\"check-file\")",
                "         msg.add_string(algname)",
                "@@ -336,3 +380,3 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "     def _process(self, t, request_number, msg):",
                "-        self._log(DEBUG, 'Request: %s' % CMD_NAMES[t])",
                "+        self._log(DEBUG, \"Request: %s\" % CMD_NAMES[t])",
                "         if t == CMD_OPEN:",
                "@@ -342,3 +386,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._send_handle_response(",
                "-                request_number, self.server.open(path, flags, attr))",
                "+                request_number, self.server.open(path, flags, attr)",
                "+            )",
                "         elif t == CMD_CLOSE:",
                "@@ -355,3 +400,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._send_status(",
                "-                request_number, SFTP_BAD_MESSAGE, 'Invalid handle')",
                "+                request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"",
                "+            )",
                "         elif t == CMD_READ:",
                "@@ -362,3 +408,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 self._send_status(",
                "-                    request_number, SFTP_BAD_MESSAGE, 'Invalid handle')",
                "+                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"",
                "+                )",
                "                 return",
                "@@ -378,6 +425,8 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 self._send_status(",
                "-                    request_number, SFTP_BAD_MESSAGE, 'Invalid handle')",
                "+                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"",
                "+                )",
                "                 return",
                "             self._send_status(",
                "-                request_number, self.file_table[handle].write(offset, data))",
                "+                request_number, self.file_table[handle].write(offset, data)",
                "+            )",
                "         elif t == CMD_REMOVE:",
                "@@ -389,3 +438,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._send_status(",
                "-                request_number, self.server.rename(oldpath, newpath))",
                "+                request_number, self.server.rename(oldpath, newpath)",
                "+            )",
                "         elif t == CMD_MKDIR:",
                "@@ -405,3 +455,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 self._send_status(",
                "-                    request_number, SFTP_BAD_MESSAGE, 'Invalid handle')",
                "+                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"",
                "+                )",
                "                 return",
                "@@ -427,3 +478,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 self._send_status(",
                "-                    request_number, SFTP_BAD_MESSAGE, 'Invalid handle')",
                "+                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"",
                "+                )",
                "                 return",
                "@@ -443,6 +495,8 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 self._response(",
                "-                    request_number, SFTP_BAD_MESSAGE, 'Invalid handle')",
                "+                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"",
                "+                )",
                "                 return",
                "             self._send_status(",
                "-                request_number, self.file_table[handle].chattr(attr))",
                "+                request_number, self.file_table[handle].chattr(attr)",
                "+            )",
                "         elif t == CMD_READLINK:",
                "@@ -452,3 +506,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "                 self._response(",
                "-                    request_number, CMD_NAME, 1, resp, '', SFTPAttributes())",
                "+                    request_number, CMD_NAME, 1, resp, \"\", SFTPAttributes()",
                "+                )",
                "             else:",
                "@@ -461,3 +516,4 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._send_status(",
                "-                request_number, self.server.symlink(target_path, path))",
                "+                request_number, self.server.symlink(target_path, path)",
                "+            )",
                "         elif t == CMD_REALPATH:",
                "@@ -466,6 +522,7 @@ class SFTPServer (BaseSFTP, SubsystemHandler):",
                "             self._response(",
                "-                request_number, CMD_NAME, 1, rpath, '', SFTPAttributes())",
                "+                request_number, CMD_NAME, 1, rpath, \"\", SFTPAttributes()",
                "+            )",
                "         elif t == CMD_EXTENDED:",
                "             tag = msg.get_text()",
                "-            if tag == 'check-file':",
                "+            if tag == \"check-file\":",
                "                 self._check_file(request_number, msg)",
                "diff --git a/paramiko/sftp_si.py b/paramiko/sftp_si.py",
                "index 09e7025c..98d13f50 100644",
                "--- a/paramiko/sftp_si.py",
                "+++ b/paramiko/sftp_si.py",
                "@@ -27,3 +27,3 @@ from paramiko.sftp import SFTP_OP_UNSUPPORTED",
                "-class SFTPServerInterface (object):",
                "+class SFTPServerInterface(object):",
                "     \"\"\"",
                "@@ -41,2 +41,3 @@ class SFTPServerInterface (object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, server, *largs, **kwargs):",
                "@@ -264,6 +265,6 @@ class SFTPServerInterface (object):",
                "         else:",
                "-            out = os.path.normpath('/' + path)",
                "-        if sys.platform == 'win32':",
                "+            out = os.path.normpath(\"/\" + path)",
                "+        if sys.platform == \"win32\":",
                "             # on windows, normalize backslashes to sftp/posix format",
                "-            out = out.replace('\\\\', '/')",
                "+            out = out.replace(\"\\\\\", \"/\")",
                "         return out",
                "diff --git a/paramiko/ssh_exception.py b/paramiko/ssh_exception.py",
                "index e9ab8d66..4865288f 100644",
                "--- a/paramiko/ssh_exception.py",
                "+++ b/paramiko/ssh_exception.py",
                "@@ -21,3 +21,3 @@ import socket",
                "-class SSHException (Exception):",
                "+class SSHException(Exception):",
                "     \"\"\"",
                "@@ -25,2 +25,3 @@ class SSHException (Exception):",
                "     \"\"\"",
                "+",
                "     pass",
                "@@ -28,3 +29,3 @@ class SSHException (Exception):",
                "-class AuthenticationException (SSHException):",
                "+class AuthenticationException(SSHException):",
                "     \"\"\"",
                "@@ -36,2 +37,3 @@ class AuthenticationException (SSHException):",
                "     \"\"\"",
                "+",
                "     pass",
                "@@ -39,3 +41,3 @@ class AuthenticationException (SSHException):",
                "-class PasswordRequiredException (AuthenticationException):",
                "+class PasswordRequiredException(AuthenticationException):",
                "     \"\"\"",
                "@@ -43,2 +45,3 @@ class PasswordRequiredException (AuthenticationException):",
                "     \"\"\"",
                "+",
                "     pass",
                "@@ -46,3 +49,3 @@ class PasswordRequiredException (AuthenticationException):",
                "-class BadAuthenticationType (AuthenticationException):",
                "+class BadAuthenticationType(AuthenticationException):",
                "     \"\"\"",
                "@@ -54,2 +57,3 @@ class BadAuthenticationType (AuthenticationException):",
                "     \"\"\"",
                "+",
                "     #: list of allowed authentication types provided by the server (possible",
                "@@ -62,6 +66,6 @@ class BadAuthenticationType (AuthenticationException):",
                "         # for unpickling",
                "-        self.args = (explanation, types, )",
                "+        self.args = (explanation, types)",
                "     def __str__(self):",
                "-        return '{0} (allowed_types={1!r})'.format(",
                "+        return \"{0} (allowed_types={1!r})\".format(",
                "             SSHException.__str__(self), self.allowed_types",
                "@@ -70,3 +74,3 @@ class BadAuthenticationType (AuthenticationException):",
                "-class PartialAuthentication (AuthenticationException):",
                "+class PartialAuthentication(AuthenticationException):",
                "     \"\"\"",
                "@@ -74,2 +78,3 @@ class PartialAuthentication (AuthenticationException):",
                "     \"\"\"",
                "+",
                "     allowed_types = []",
                "@@ -77,9 +82,9 @@ class PartialAuthentication (AuthenticationException):",
                "     def __init__(self, types):",
                "-        AuthenticationException.__init__(self, 'partial authentication')",
                "+        AuthenticationException.__init__(self, \"partial authentication\")",
                "         self.allowed_types = types",
                "         # for unpickling",
                "-        self.args = (types, )",
                "+        self.args = (types,)",
                "-class ChannelException (SSHException):",
                "+class ChannelException(SSHException):",
                "     \"\"\"",
                "@@ -91,2 +96,3 @@ class ChannelException (SSHException):",
                "     \"\"\"",
                "+",
                "     def __init__(self, code, text):",
                "@@ -95,6 +101,6 @@ class ChannelException (SSHException):",
                "         # for unpickling",
                "-        self.args = (code, text, )",
                "+        self.args = (code, text)",
                "-class BadHostKeyException (SSHException):",
                "+class BadHostKeyException(SSHException):",
                "     \"\"\"",
                "@@ -108,7 +114,10 @@ class BadHostKeyException (SSHException):",
                "     \"\"\"",
                "+",
                "     def __init__(self, hostname, got_key, expected_key):",
                "-        message = 'Host key for server {0} does not match: got {1}, expected {2}' # noqa",
                "+        message = (",
                "+            \"Host key for server {0} does not match: got {1}, expected {2}\"",
                "+        )  # noqa",
                "         message = message.format(",
                "-            hostname, got_key.get_base64(),",
                "-            expected_key.get_base64())",
                "+            hostname, got_key.get_base64(), expected_key.get_base64()",
                "+        )",
                "         SSHException.__init__(self, message)",
                "@@ -118,6 +127,6 @@ class BadHostKeyException (SSHException):",
                "         # for unpickling",
                "-        self.args = (hostname, got_key, expected_key, )",
                "+        self.args = (hostname, got_key, expected_key)",
                "-class ProxyCommandFailure (SSHException):",
                "+class ProxyCommandFailure(SSHException):",
                "     \"\"\"",
                "@@ -128,7 +137,8 @@ class ProxyCommandFailure (SSHException):",
                "     \"\"\"",
                "+",
                "     def __init__(self, command, error):",
                "-        SSHException.__init__(self,",
                "-            '\"ProxyCommand (%s)\" returned non-zero exit status: %s' % (",
                "-                command, error",
                "-            )",
                "+        SSHException.__init__(",
                "+            self,",
                "+            '\"ProxyCommand (%s)\" returned non-zero exit status: %s'",
                "+            % (command, error),",
                "         )",
                "@@ -136,3 +146,3 @@ class ProxyCommandFailure (SSHException):",
                "         # for unpickling",
                "-        self.args = (command, error, )",
                "+        self.args = (command, error)",
                "@@ -161,2 +171,3 @@ class NoValidConnectionsError(socket.error):",
                "     \"\"\"",
                "+",
                "     def __init__(self, errors):",
                "@@ -167,3 +178,3 @@ class NoValidConnectionsError(socket.error):",
                "         addrs = sorted(errors.keys())",
                "-        body = ', '.join([x[0] for x in addrs[:-1]])",
                "+        body = \", \".join([x[0] for x in addrs[:-1]])",
                "         tail = addrs[-1][0]",
                "@@ -174,4 +185,3 @@ class NoValidConnectionsError(socket.error):",
                "         super(NoValidConnectionsError, self).__init__(",
                "-            None, # stand-in for errno",
                "-            msg.format(addrs[0][1], body, tail)",
                "+            None, msg.format(addrs[0][1], body, tail)  # stand-in for errno",
                "         )",
                "@@ -180,2 +190,2 @@ class NoValidConnectionsError(socket.error):",
                "     def __reduce__(self):",
                "-        return (self.__class__, (self.errors, ))",
                "+        return (self.__class__, (self.errors,))",
                "diff --git a/paramiko/ssh_gss.py b/paramiko/ssh_gss.py",
                "index b3c3f72b..025d9928 100644",
                "--- a/paramiko/ssh_gss.py",
                "+++ b/paramiko/ssh_gss.py",
                "@@ -53,2 +53,3 @@ try:",
                "     import gssapi",
                "+",
                "     GSS_EXCEPTIONS = (gssapi.GSSException,)",
                "@@ -59,2 +60,3 @@ except (ImportError, OSError):",
                "         import sspi",
                "+",
                "         _API = \"SSPI\"",
                "@@ -103,2 +105,3 @@ class _SSH_GSSAuth(object):",
                "     \"\"\"",
                "+",
                "     def __init__(self, auth_method, gss_deleg_creds):",
                "@@ -211,3 +214,3 @@ class _SSH_GSSAuth(object):",
                "         mic += session_id",
                "-        mic += struct.pack('B', MSG_USERAUTH_REQUEST)",
                "+        mic += struct.pack(\"B\", MSG_USERAUTH_REQUEST)",
                "         mic += self._make_uint32(len(username))",
                "@@ -227,2 +230,3 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "     \"\"\"",
                "+",
                "     def __init__(self, auth_method, gss_deleg_creds):",
                "@@ -236,13 +240,18 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "         if self._gss_deleg_creds:",
                "-            self._gss_flags = (gssapi.C_PROT_READY_FLAG,",
                "-                               gssapi.C_INTEG_FLAG,",
                "-                               gssapi.C_MUTUAL_FLAG,",
                "-                               gssapi.C_DELEG_FLAG)",
                "+            self._gss_flags = (",
                "+                gssapi.C_PROT_READY_FLAG,",
                "+                gssapi.C_INTEG_FLAG,",
                "+                gssapi.C_MUTUAL_FLAG,",
                "+                gssapi.C_DELEG_FLAG,",
                "+            )",
                "         else:",
                "-            self._gss_flags = (gssapi.C_PROT_READY_FLAG,",
                "-                               gssapi.C_INTEG_FLAG,",
                "-                               gssapi.C_MUTUAL_FLAG)",
                "+            self._gss_flags = (",
                "+                gssapi.C_PROT_READY_FLAG,",
                "+                gssapi.C_INTEG_FLAG,",
                "+                gssapi.C_MUTUAL_FLAG,",
                "+            )",
                "-    def ssh_init_sec_context(self, target, desired_mech=None,",
                "-                             username=None, recv_token=None):",
                "+    def ssh_init_sec_context(",
                "+        self, target, desired_mech=None, username=None, recv_token=None",
                "+    ):",
                "         \"\"\"",
                "@@ -264,4 +273,5 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "         self._gss_host = target",
                "-        targ_name = gssapi.Name(\"host@\" + self._gss_host,",
                "-                                gssapi.C_NT_HOSTBASED_SERVICE)",
                "+        targ_name = gssapi.Name(",
                "+            \"host@\" + self._gss_host, gssapi.C_NT_HOSTBASED_SERVICE",
                "+        )",
                "         ctx = gssapi.Context()",
                "@@ -279,5 +289,7 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "             if recv_token is None:",
                "-                self._gss_ctxt = gssapi.InitContext(peer_name=targ_name,",
                "-                                                    mech_type=krb5_mech,",
                "-                                                    req_flags=ctx.flags)",
                "+                self._gss_ctxt = gssapi.InitContext(",
                "+                    peer_name=targ_name,",
                "+                    mech_type=krb5_mech,",
                "+                    req_flags=ctx.flags,",
                "+                )",
                "                 token = self._gss_ctxt.step(token)",
                "@@ -287,3 +299,4 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "             message = \"{0} Target: {1}\".format(",
                "-                sys.exc_info()[1], self._gss_host)",
                "+                sys.exc_info()[1], self._gss_host",
                "+            )",
                "             raise gssapi.GSSException(message)",
                "@@ -307,6 +320,8 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "         if not gss_kex:",
                "-            mic_field = self._ssh_build_mic(self._session_id,",
                "-                                            self._username,",
                "-                                            self._service,",
                "-                                            self._auth_method)",
                "+            mic_field = self._ssh_build_mic(",
                "+                self._session_id,",
                "+                self._username,",
                "+                self._service,",
                "+                self._auth_method,",
                "+            )",
                "             mic_token = self._gss_ctxt.get_mic(mic_field)",
                "@@ -351,6 +366,8 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "             # server mode",
                "-            mic_field = self._ssh_build_mic(self._session_id,",
                "-                                            self._username,",
                "-                                            self._service,",
                "-                                            self._auth_method)",
                "+            mic_field = self._ssh_build_mic(",
                "+                self._session_id,",
                "+                self._username,",
                "+                self._service,",
                "+                self._auth_method,",
                "+            )",
                "             self._gss_srv_ctxt.verify_mic(mic_field, mic_token)",
                "@@ -359,4 +376,3 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "             # client mode",
                "-            self._gss_ctxt.verify_mic(self._session_id,",
                "-                                      mic_token)",
                "+            self._gss_ctxt.verify_mic(self._session_id, mic_token)",
                "@@ -393,2 +409,3 @@ class _SSH_SSPI(_SSH_GSSAuth):",
                "     \"\"\"",
                "+",
                "     def __init__(self, auth_method, gss_deleg_creds):",
                "@@ -403,5 +420,5 @@ class _SSH_SSPI(_SSH_GSSAuth):",
                "             self._gss_flags = (",
                "-                sspicon.ISC_REQ_INTEGRITY |",
                "-                sspicon.ISC_REQ_MUTUAL_AUTH |",
                "-                sspicon.ISC_REQ_DELEGATE",
                "+                sspicon.ISC_REQ_INTEGRITY",
                "+                | sspicon.ISC_REQ_MUTUAL_AUTH",
                "+                | sspicon.ISC_REQ_DELEGATE",
                "             )",
                "@@ -409,8 +426,8 @@ class _SSH_SSPI(_SSH_GSSAuth):",
                "             self._gss_flags = (",
                "-                sspicon.ISC_REQ_INTEGRITY |",
                "-                sspicon.ISC_REQ_MUTUAL_AUTH",
                "+                sspicon.ISC_REQ_INTEGRITY | sspicon.ISC_REQ_MUTUAL_AUTH",
                "             )",
                "-    def ssh_init_sec_context(self, target, desired_mech=None,",
                "-                             username=None, recv_token=None):",
                "+    def ssh_init_sec_context(",
                "+        self, target, desired_mech=None, username=None, recv_token=None",
                "+    ):",
                "         \"\"\"",
                "@@ -440,5 +457,5 @@ class _SSH_SSPI(_SSH_GSSAuth):",
                "             if recv_token is None:",
                "-                self._gss_ctxt = sspi.ClientAuth(\"Kerberos\",",
                "-                                                 scflags=self._gss_flags,",
                "-                                                 targetspn=targ_name)",
                "+                self._gss_ctxt = sspi.ClientAuth(",
                "+                    \"Kerberos\", scflags=self._gss_flags, targetspn=targ_name",
                "+                )",
                "             error, token = self._gss_ctxt.authorize(recv_token)",
                "@@ -477,6 +494,8 @@ class _SSH_SSPI(_SSH_GSSAuth):",
                "         if not gss_kex:",
                "-            mic_field = self._ssh_build_mic(self._session_id,",
                "-                                            self._username,",
                "-                                            self._service,",
                "-                                            self._auth_method)",
                "+            mic_field = self._ssh_build_mic(",
                "+                self._session_id,",
                "+                self._username,",
                "+                self._service,",
                "+                self._auth_method,",
                "+            )",
                "             mic_token = self._gss_ctxt.sign(mic_field)",
                "@@ -523,6 +542,8 @@ class _SSH_SSPI(_SSH_GSSAuth):",
                "             # server mode",
                "-            mic_field = self._ssh_build_mic(self._session_id,",
                "-                                            self._username,",
                "-                                            self._service,",
                "-                                            self._auth_method)",
                "+            mic_field = self._ssh_build_mic(",
                "+                self._session_id,",
                "+                self._username,",
                "+                self._service,",
                "+                self._auth_method,",
                "+            )",
                "             # Verifies data and its signature.  If verification fails, an",
                "@@ -544,5 +565,4 @@ class _SSH_SSPI(_SSH_GSSAuth):",
                "         \"\"\"",
                "-        return (",
                "-            self._gss_flags & sspicon.ISC_REQ_DELEGATE and",
                "-            (self._gss_srv_ctxt_status or self._gss_flags)",
                "+        return self._gss_flags & sspicon.ISC_REQ_DELEGATE and (",
                "+            self._gss_srv_ctxt_status or self._gss_flags",
                "         )",
                "diff --git a/paramiko/transport.py b/paramiko/transport.py",
                "index a71c6bab..1317f372 100644",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@ -40,14 +40,45 @@ from paramiko.channel import Channel",
                " from paramiko.common import (",
                "-    xffffffff, cMSG_CHANNEL_OPEN, cMSG_IGNORE, cMSG_GLOBAL_REQUEST, DEBUG,",
                "-    MSG_KEXINIT, MSG_IGNORE, MSG_DISCONNECT, MSG_DEBUG, ERROR, WARNING,",
                "-    cMSG_UNIMPLEMENTED, INFO, cMSG_KEXINIT, cMSG_NEWKEYS, MSG_NEWKEYS,",
                "-    cMSG_REQUEST_SUCCESS, cMSG_REQUEST_FAILURE, CONNECTION_FAILED_CODE,",
                "-    OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, OPEN_SUCCEEDED,",
                "-    cMSG_CHANNEL_OPEN_FAILURE, cMSG_CHANNEL_OPEN_SUCCESS, MSG_GLOBAL_REQUEST,",
                "-    MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE, MSG_CHANNEL_OPEN_SUCCESS,",
                "-    MSG_CHANNEL_OPEN_FAILURE, MSG_CHANNEL_OPEN, MSG_CHANNEL_SUCCESS,",
                "-    MSG_CHANNEL_FAILURE, MSG_CHANNEL_DATA, MSG_CHANNEL_EXTENDED_DATA,",
                "-    MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_REQUEST, MSG_CHANNEL_EOF,",
                "-    MSG_CHANNEL_CLOSE, MIN_WINDOW_SIZE, MIN_PACKET_SIZE, MAX_WINDOW_SIZE,",
                "-    DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE, HIGHEST_USERAUTH_MESSAGE_ID,",
                "+    xffffffff,",
                "+    cMSG_CHANNEL_OPEN,",
                "+    cMSG_IGNORE,",
                "+    cMSG_GLOBAL_REQUEST,",
                "+    DEBUG,",
                "+    MSG_KEXINIT,",
                "+    MSG_IGNORE,",
                "+    MSG_DISCONNECT,",
                "+    MSG_DEBUG,",
                "+    ERROR,",
                "+    WARNING,",
                "+    cMSG_UNIMPLEMENTED,",
                "+    INFO,",
                "+    cMSG_KEXINIT,",
                "+    cMSG_NEWKEYS,",
                "+    MSG_NEWKEYS,",
                "+    cMSG_REQUEST_SUCCESS,",
                "+    cMSG_REQUEST_FAILURE,",
                "+    CONNECTION_FAILED_CODE,",
                "+    OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED,",
                "+    OPEN_SUCCEEDED,",
                "+    cMSG_CHANNEL_OPEN_FAILURE,",
                "+    cMSG_CHANNEL_OPEN_SUCCESS,",
                "+    MSG_GLOBAL_REQUEST,",
                "+    MSG_REQUEST_SUCCESS,",
                "+    MSG_REQUEST_FAILURE,",
                "+    MSG_CHANNEL_OPEN_SUCCESS,",
                "+    MSG_CHANNEL_OPEN_FAILURE,",
                "+    MSG_CHANNEL_OPEN,",
                "+    MSG_CHANNEL_SUCCESS,",
                "+    MSG_CHANNEL_FAILURE,",
                "+    MSG_CHANNEL_DATA,",
                "+    MSG_CHANNEL_EXTENDED_DATA,",
                "+    MSG_CHANNEL_WINDOW_ADJUST,",
                "+    MSG_CHANNEL_REQUEST,",
                "+    MSG_CHANNEL_EOF,",
                "+    MSG_CHANNEL_CLOSE,",
                "+    MIN_WINDOW_SIZE,",
                "+    MIN_PACKET_SIZE,",
                "+    MAX_WINDOW_SIZE,",
                "+    DEFAULT_WINDOW_SIZE,",
                "+    DEFAULT_MAX_PACKET_SIZE,",
                "+    HIGHEST_USERAUTH_MESSAGE_ID,",
                " )",
                "@@ -68,3 +99,6 @@ from paramiko.sftp_client import SFTPClient",
                " from paramiko.ssh_exception import (",
                "-    SSHException, BadAuthenticationType, ChannelException, ProxyCommandFailure,",
                "+    SSHException,",
                "+    BadAuthenticationType,",
                "+    ChannelException,",
                "+    ProxyCommandFailure,",
                " )",
                "@@ -76,2 +110,3 @@ _active_threads = []",
                "+",
                " def _join_lingering_threads():",
                "@@ -82,2 +117,3 @@ def _join_lingering_threads():",
                " import atexit",
                "+",
                " atexit.register(_join_lingering_threads)",
                "@@ -95,2 +131,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     \"\"\"",
                "+",
                "     _ENCRYPT = object()",
                "@@ -98,4 +135,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "-    _PROTO_ID = '2.0'",
                "-    _CLIENT_ID = 'paramiko_%s' % paramiko.__version__",
                "+    _PROTO_ID = \"2.0\"",
                "+    _CLIENT_ID = \"paramiko_%s\" % paramiko.__version__",
                "@@ -104,87 +141,87 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     _preferred_ciphers = (",
                "-        'aes128-ctr',",
                "-        'aes192-ctr',",
                "-        'aes256-ctr',",
                "-        'aes128-cbc',",
                "-        'aes192-cbc',",
                "-        'aes256-cbc',",
                "-        'blowfish-cbc',",
                "-        '3des-cbc',",
                "+        \"aes128-ctr\",",
                "+        \"aes192-ctr\",",
                "+        \"aes256-ctr\",",
                "+        \"aes128-cbc\",",
                "+        \"aes192-cbc\",",
                "+        \"aes256-cbc\",",
                "+        \"blowfish-cbc\",",
                "+        \"3des-cbc\",",
                "     )",
                "     _preferred_macs = (",
                "-        'hmac-sha2-256',",
                "-        'hmac-sha2-512',",
                "-        'hmac-sha1',",
                "-        'hmac-md5',",
                "-        'hmac-sha1-96',",
                "-        'hmac-md5-96',",
                "+        \"hmac-sha2-256\",",
                "+        \"hmac-sha2-512\",",
                "+        \"hmac-sha1\",",
                "+        \"hmac-md5\",",
                "+        \"hmac-sha1-96\",",
                "+        \"hmac-md5-96\",",
                "     )",
                "     _preferred_keys = (",
                "-        'ecdsa-sha2-nistp256',",
                "-        'ecdsa-sha2-nistp384',",
                "-        'ecdsa-sha2-nistp521',",
                "-        'ssh-rsa',",
                "-        'ssh-dss',",
                "+        \"ecdsa-sha2-nistp256\",",
                "+        \"ecdsa-sha2-nistp384\",",
                "+        \"ecdsa-sha2-nistp521\",",
                "+        \"ssh-rsa\",",
                "+        \"ssh-dss\",",
                "     )",
                "     _preferred_kex = (",
                "-        'diffie-hellman-group1-sha1',",
                "-        'diffie-hellman-group14-sha1',",
                "-        'diffie-hellman-group-exchange-sha1',",
                "-        'diffie-hellman-group-exchange-sha256',",
                "+        \"diffie-hellman-group1-sha1\",",
                "+        \"diffie-hellman-group14-sha1\",",
                "+        \"diffie-hellman-group-exchange-sha1\",",
                "+        \"diffie-hellman-group-exchange-sha256\",",
                "     )",
                "     _preferred_gsskex = (",
                "-        'gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==',",
                "-        'gss-group14-sha1-toWM5Slw5Ew8Mqkay+al2g==',",
                "-        'gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==',",
                "+        \"gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==\",",
                "+        \"gss-group14-sha1-toWM5Slw5Ew8Mqkay+al2g==\",",
                "+        \"gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==\",",
                "     )",
                "-    _preferred_compression = ('none',)",
                "+    _preferred_compression = (\"none\",)",
                "     _cipher_info = {",
                "-        'aes128-ctr': {",
                "-            'class': algorithms.AES,",
                "-            'mode': modes.CTR,",
                "-            'block-size': 16,",
                "-            'key-size': 16",
                "+        \"aes128-ctr\": {",
                "+            \"class\": algorithms.AES,",
                "+            \"mode\": modes.CTR,",
                "+            \"block-size\": 16,",
                "+            \"key-size\": 16,",
                "         },",
                "-        'aes192-ctr': {",
                "-            'class': algorithms.AES,",
                "-            'mode': modes.CTR,",
                "-            'block-size': 16,",
                "-            'key-size': 24",
                "+        \"aes192-ctr\": {",
                "+            \"class\": algorithms.AES,",
                "+            \"mode\": modes.CTR,",
                "+            \"block-size\": 16,",
                "+            \"key-size\": 24,",
                "         },",
                "-        'aes256-ctr': {",
                "-            'class': algorithms.AES,",
                "-            'mode': modes.CTR,",
                "-            'block-size': 16,",
                "-            'key-size': 32",
                "+        \"aes256-ctr\": {",
                "+            \"class\": algorithms.AES,",
                "+            \"mode\": modes.CTR,",
                "+            \"block-size\": 16,",
                "+            \"key-size\": 32,",
                "         },",
                "-        'blowfish-cbc': {",
                "-            'class': algorithms.Blowfish,",
                "-            'mode': modes.CBC,",
                "-            'block-size': 8,",
                "-            'key-size': 16",
                "+        \"blowfish-cbc\": {",
                "+            \"class\": algorithms.Blowfish,",
                "+            \"mode\": modes.CBC,",
                "+            \"block-size\": 8,",
                "+            \"key-size\": 16,",
                "         },",
                "-        'aes128-cbc': {",
                "-            'class': algorithms.AES,",
                "-            'mode': modes.CBC,",
                "-            'block-size': 16,",
                "-            'key-size': 16",
                "+        \"aes128-cbc\": {",
                "+            \"class\": algorithms.AES,",
                "+            \"mode\": modes.CBC,",
                "+            \"block-size\": 16,",
                "+            \"key-size\": 16,",
                "         },",
                "-        'aes192-cbc': {",
                "-            'class': algorithms.AES,",
                "-            'mode': modes.CBC,",
                "-            'block-size': 16,",
                "-            'key-size': 24",
                "+        \"aes192-cbc\": {",
                "+            \"class\": algorithms.AES,",
                "+            \"mode\": modes.CBC,",
                "+            \"block-size\": 16,",
                "+            \"key-size\": 24,",
                "         },",
                "-        'aes256-cbc': {",
                "-            'class': algorithms.AES,",
                "-            'mode': modes.CBC,",
                "-            'block-size': 16,",
                "-            'key-size': 32",
                "+        \"aes256-cbc\": {",
                "+            \"class\": algorithms.AES,",
                "+            \"mode\": modes.CBC,",
                "+            \"block-size\": 16,",
                "+            \"key-size\": 32,",
                "         },",
                "-        '3des-cbc': {",
                "-            'class': algorithms.TripleDES,",
                "-            'mode': modes.CBC,",
                "-            'block-size': 8,",
                "-            'key-size': 24",
                "+        \"3des-cbc\": {",
                "+            \"class\": algorithms.TripleDES,",
                "+            \"mode\": modes.CBC,",
                "+            \"block-size\": 8,",
                "+            \"key-size\": 24,",
                "         },",
                "@@ -192,10 +229,9 @@ class Transport(threading.Thread, ClosingContextManager):",
                "-",
                "     _mac_info = {",
                "-        'hmac-sha1': {'class': sha1, 'size': 20},",
                "-        'hmac-sha1-96': {'class': sha1, 'size': 12},",
                "-        'hmac-sha2-256': {'class': sha256, 'size': 32},",
                "-        'hmac-sha2-512': {'class': sha512, 'size': 64},",
                "-        'hmac-md5': {'class': md5, 'size': 16},",
                "-        'hmac-md5-96': {'class': md5, 'size': 12},",
                "+        \"hmac-sha1\": {\"class\": sha1, \"size\": 20},",
                "+        \"hmac-sha1-96\": {\"class\": sha1, \"size\": 12},",
                "+        \"hmac-sha2-256\": {\"class\": sha256, \"size\": 32},",
                "+        \"hmac-sha2-512\": {\"class\": sha512, \"size\": 64},",
                "+        \"hmac-md5\": {\"class\": md5, \"size\": 16},",
                "+        \"hmac-md5-96\": {\"class\": md5, \"size\": 12},",
                "     }",
                "@@ -203,7 +239,7 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     _key_info = {",
                "-        'ssh-rsa': RSAKey,",
                "-        'ssh-dss': DSSKey,",
                "-        'ecdsa-sha2-nistp256': ECDSAKey,",
                "-        'ecdsa-sha2-nistp384': ECDSAKey,",
                "-        'ecdsa-sha2-nistp521': ECDSAKey,",
                "+        \"ssh-rsa\": RSAKey,",
                "+        \"ssh-dss\": DSSKey,",
                "+        \"ecdsa-sha2-nistp256\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp384\": ECDSAKey,",
                "+        \"ecdsa-sha2-nistp521\": ECDSAKey,",
                "     }",
                "@@ -211,9 +247,9 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     _kex_info = {",
                "-        'diffie-hellman-group1-sha1': KexGroup1,",
                "-        'diffie-hellman-group14-sha1': KexGroup14,",
                "-        'diffie-hellman-group-exchange-sha1': KexGex,",
                "-        'diffie-hellman-group-exchange-sha256': KexGexSHA256,",
                "-        'gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==': KexGSSGroup1,",
                "-        'gss-group14-sha1-toWM5Slw5Ew8Mqkay+al2g==': KexGSSGroup14,",
                "-        'gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==': KexGSSGex",
                "+        \"diffie-hellman-group1-sha1\": KexGroup1,",
                "+        \"diffie-hellman-group14-sha1\": KexGroup14,",
                "+        \"diffie-hellman-group-exchange-sha1\": KexGex,",
                "+        \"diffie-hellman-group-exchange-sha256\": KexGexSHA256,",
                "+        \"gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==\": KexGSSGroup1,",
                "+        \"gss-group14-sha1-toWM5Slw5Ew8Mqkay+al2g==\": KexGSSGroup14,",
                "+        \"gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==\": KexGSSGex,",
                "     }",
                "@@ -224,5 +260,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         # they've had troubles with security holes in zlib in the past.",
                "-        'zlib@openssh.com': (ZlibCompressor, ZlibDecompressor),",
                "-        'zlib': (ZlibCompressor, ZlibDecompressor),",
                "-        'none': (None, None),",
                "+        \"zlib@openssh.com\": (ZlibCompressor, ZlibDecompressor),",
                "+        \"zlib\": (ZlibCompressor, ZlibDecompressor),",
                "+        \"none\": (None, None),",
                "     }",
                "@@ -232,8 +268,10 @@ class Transport(threading.Thread, ClosingContextManager):",
                "-    def __init__(self,",
                "-                 sock,",
                "-                 default_window_size=DEFAULT_WINDOW_SIZE,",
                "-                 default_max_packet_size=DEFAULT_MAX_PACKET_SIZE,",
                "-                 gss_kex=False,",
                "-                 gss_deleg_creds=True):",
                "+    def __init__(",
                "+        self,",
                "+        sock,",
                "+        default_window_size=DEFAULT_WINDOW_SIZE,",
                "+        default_max_packet_size=DEFAULT_MAX_PACKET_SIZE,",
                "+        gss_kex=False,",
                "+        gss_deleg_creds=True,",
                "+    ):",
                "         \"\"\"",
                "@@ -286,3 +324,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # convert \"host:port\" into (host, port)",
                "-            hl = sock.split(':', 1)",
                "+            hl = sock.split(\":\", 1)",
                "             if len(hl) == 1:",
                "@@ -294,3 +332,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             hostname, port = sock",
                "-            reason = 'No suitable address family'",
                "+            reason = \"No suitable address family\"",
                "             addrinfos = socket.getaddrinfo(",
                "@@ -311,3 +349,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 raise SSHException(",
                "-                    'Unable to connect to %s: %s' % (hostname, reason))",
                "+                    \"Unable to connect to %s: %s\" % (hostname, reason)",
                "+                )",
                "         # okay, normal socket-ish flow here...",
                "@@ -322,5 +361,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self.packetizer = Packetizer(sock)",
                "-        self.local_version = 'SSH-' + self._PROTO_ID + '-' + self._CLIENT_ID",
                "-        self.remote_version = ''",
                "-        self.local_cipher = self.remote_cipher = ''",
                "+        self.local_version = \"SSH-\" + self._PROTO_ID + \"-\" + self._CLIENT_ID",
                "+        self.remote_version = \"\"",
                "+        self.local_cipher = self.remote_cipher = \"\"",
                "         self.local_kex_init = self.remote_kex_init = None",
                "@@ -356,4 +395,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self._channels = ChannelMap()",
                "-        self.channel_events = {}       # (id -> Event)",
                "-        self.channels_seen = {}        # (id -> True)",
                "+        self.channel_events = {}  # (id -> Event)",
                "+        self.channels_seen = {}  # (id -> True)",
                "         self._channel_counter = 0",
                "@@ -369,3 +408,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self.clear_to_send_timeout = 30.0",
                "-        self.log_name = 'paramiko.transport'",
                "+        self.log_name = \"paramiko.transport\"",
                "         self.logger = util.get_logger(self.log_name)",
                "@@ -395,18 +434,18 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         \"\"\"",
                "-        out = '<paramiko.Transport at %s' % hex(long(id(self)) & xffffffff)",
                "+        out = \"<paramiko.Transport at %s\" % hex(long(id(self)) & xffffffff)",
                "         if not self.active:",
                "-            out += ' (unconnected)'",
                "+            out += \" (unconnected)\"",
                "         else:",
                "-            if self.local_cipher != '':",
                "-                out += ' (cipher %s, %d bits)' % (",
                "+            if self.local_cipher != \"\":",
                "+                out += \" (cipher %s, %d bits)\" % (",
                "                     self.local_cipher,",
                "-                    self._cipher_info[self.local_cipher]['key-size'] * 8",
                "+                    self._cipher_info[self.local_cipher][\"key-size\"] * 8,",
                "                 )",
                "             if self.is_authenticated():",
                "-                out += ' (active; %d open channel(s))' % len(self._channels)",
                "+                out += \" (active; %d open channel(s))\" % len(self._channels)",
                "             elif self.initial_kex_done:",
                "-                out += ' (connected; awaiting auth)'",
                "+                out += \" (connected; awaiting auth)\"",
                "             else:",
                "-                out += ' (connecting)'",
                "-        out += '>'",
                "+                out += \" (connecting)\"",
                "+        out += \">\"",
                "         return out",
                "@@ -493,3 +532,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     raise e",
                "-                raise SSHException('Negotiation failed.')",
                "+                raise SSHException(\"Negotiation failed.\")",
                "             if event.is_set():",
                "@@ -559,3 +598,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     raise e",
                "-                raise SSHException('Negotiation failed.')",
                "+                raise SSHException(\"Negotiation failed.\")",
                "             if event.is_set():",
                "@@ -626,3 +665,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         # places to look for the openssh \"moduli\" file",
                "-        file_list = ['/etc/ssh/moduli', '/usr/local/etc/moduli']",
                "+        file_list = [\"/etc/ssh/moduli\", \"/usr/local/etc/moduli\"]",
                "         if filename is not None:",
                "@@ -664,3 +703,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if (not self.active) or (not self.initial_kex_done):",
                "-            raise SSHException('No existing session')",
                "+            raise SSHException(\"No existing session\")",
                "         return self.host_key",
                "@@ -678,6 +717,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     def open_session(",
                "-        self,",
                "-        window_size=None,",
                "-        max_packet_size=None,",
                "-        timeout=None,",
                "+        self, window_size=None, max_packet_size=None, timeout=None",
                "     ):",
                "@@ -708,6 +744,8 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         \"\"\"",
                "-        return self.open_channel('session',",
                "-                                 window_size=window_size,",
                "-                                 max_packet_size=max_packet_size,",
                "-                                 timeout=timeout)",
                "+        return self.open_channel(",
                "+            \"session\",",
                "+            window_size=window_size,",
                "+            max_packet_size=max_packet_size,",
                "+            timeout=timeout,",
                "+        )",
                "@@ -727,3 +765,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         \"\"\"",
                "-        return self.open_channel('x11', src_addr=src_addr)",
                "+        return self.open_channel(\"x11\", src_addr=src_addr)",
                "@@ -741,3 +779,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         \"\"\"",
                "-        return self.open_channel('auth-agent@openssh.com')",
                "+        return self.open_channel(\"auth-agent@openssh.com\")",
                "@@ -753,11 +791,13 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         \"\"\"",
                "-        return self.open_channel('forwarded-tcpip', dest_addr, src_addr)",
                "+        return self.open_channel(\"forwarded-tcpip\", dest_addr, src_addr)",
                "-    def open_channel(self,",
                "-                     kind,",
                "-                     dest_addr=None,",
                "-                     src_addr=None,",
                "-                     window_size=None,",
                "-                     max_packet_size=None,",
                "-                     timeout=None):",
                "+    def open_channel(",
                "+        self,",
                "+        kind,",
                "+        dest_addr=None,",
                "+        src_addr=None,",
                "+        window_size=None,",
                "+        max_packet_size=None,",
                "+        timeout=None,",
                "+    ):",
                "         \"\"\"",
                "@@ -798,3 +838,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if not self.active:",
                "-            raise SSHException('SSH session not active')",
                "+            raise SSHException(\"SSH session not active\")",
                "         timeout = 3600 if timeout is None else timeout",
                "@@ -811,3 +851,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             m.add_int(max_packet_size)",
                "-            if (kind == 'forwarded-tcpip') or (kind == 'direct-tcpip'):",
                "+            if (kind == \"forwarded-tcpip\") or (kind == \"direct-tcpip\"):",
                "                 m.add_string(dest_addr[0])",
                "@@ -816,3 +856,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 m.add_int(src_addr[1])",
                "-            elif kind == 'x11':",
                "+            elif kind == \"x11\":",
                "                 m.add_string(src_addr[0])",
                "@@ -834,3 +874,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 if e is None:",
                "-                    e = SSHException('Unable to open channel.')",
                "+                    e = SSHException(\"Unable to open channel.\")",
                "                 raise e",
                "@@ -839,3 +879,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             elif start_ts + timeout < time.time():",
                "-                raise SSHException('Timeout opening channel.')",
                "+                raise SSHException(\"Timeout opening channel.\")",
                "         chan = self._channels.get(chanid)",
                "@@ -845,3 +885,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if e is None:",
                "-            e = SSHException('Unable to open channel.')",
                "+            e = SSHException(\"Unable to open channel.\")",
                "         raise e",
                "@@ -882,9 +922,9 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if not self.active:",
                "-            raise SSHException('SSH session not active')",
                "+            raise SSHException(\"SSH session not active\")",
                "         port = int(port)",
                "         response = self.global_request(",
                "-            'tcpip-forward', (address, port), wait=True",
                "+            \"tcpip-forward\", (address, port), wait=True",
                "         )",
                "         if response is None:",
                "-            raise SSHException('TCP forwarding request denied')",
                "+            raise SSHException(\"TCP forwarding request denied\")",
                "         if port == 0:",
                "@@ -892,2 +932,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if handler is None:",
                "+",
                "             def default_handler(channel, src_addr, dest_addr_port):",
                "@@ -896,2 +937,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 self._queue_incoming_channel(channel)",
                "+",
                "             handler = default_handler",
                "@@ -912,3 +954,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self._tcp_handler = None",
                "-        self.global_request('cancel-tcpip-forward', (address, port), wait=True)",
                "+        self.global_request(\"cancel-tcpip-forward\", (address, port), wait=True)",
                "@@ -965,3 +1007,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     raise e",
                "-                raise SSHException('Negotiation failed.')",
                "+                raise SSHException(\"Negotiation failed.\")",
                "             if self.completion_event.is_set():",
                "@@ -981,4 +1023,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         \"\"\"",
                "+",
                "         def _request(x=weakref.proxy(self)):",
                "-            return x.global_request('keepalive@lag.net', wait=False)",
                "+            return x.global_request(\"keepalive@lag.net\", wait=False)",
                "+",
                "         self.packetizer.set_keepalive(interval, _request)",
                "@@ -1050,3 +1094,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         hostkey=None,",
                "-        username='',",
                "+        username=\"\",",
                "         password=None,",
                "@@ -1110,14 +1154,17 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             if (",
                "-                key.get_name() != hostkey.get_name() or",
                "-                key.asbytes() != hostkey.asbytes()",
                "+                key.get_name() != hostkey.get_name()",
                "+                or key.asbytes() != hostkey.asbytes()",
                "             ):",
                "-                self._log(DEBUG, 'Bad host key from server')",
                "-                self._log(DEBUG, 'Expected: %s: %s' % (",
                "-                    hostkey.get_name(), repr(hostkey.asbytes()))",
                "+                self._log(DEBUG, \"Bad host key from server\")",
                "+                self._log(",
                "+                    DEBUG,",
                "+                    \"Expected: %s: %s\"",
                "+                    % (hostkey.get_name(), repr(hostkey.asbytes())),",
                "                 )",
                "-                self._log(DEBUG, 'Got     : %s: %s' % (",
                "-                    key.get_name(), repr(key.asbytes()))",
                "+                self._log(",
                "+                    DEBUG,",
                "+                    \"Got     : %s: %s\" % (key.get_name(), repr(key.asbytes())),",
                "                 )",
                "-                raise SSHException('Bad host key from server')",
                "-            self._log(DEBUG, 'Host key verified (%s)' % hostkey.get_name())",
                "+                raise SSHException(\"Bad host key from server\")",
                "+            self._log(DEBUG, \"Host key verified (%s)\" % hostkey.get_name())",
                "@@ -1125,12 +1172,14 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             if gss_auth:",
                "-                self._log(DEBUG, 'Attempting GSS-API auth... (gssapi-with-mic)') # noqa",
                "+                self._log(",
                "+                    DEBUG, \"Attempting GSS-API auth... (gssapi-with-mic)\"",
                "+                )  # noqa",
                "                 self.auth_gssapi_with_mic(username, gss_host, gss_deleg_creds)",
                "             elif gss_kex:",
                "-                self._log(DEBUG, 'Attempting GSS-API auth... (gssapi-keyex)')",
                "+                self._log(DEBUG, \"Attempting GSS-API auth... (gssapi-keyex)\")",
                "                 self.auth_gssapi_keyex(username)",
                "             elif pkey is not None:",
                "-                self._log(DEBUG, 'Attempting public-key auth...')",
                "+                self._log(DEBUG, \"Attempting public-key auth...\")",
                "                 self.auth_publickey(username, pkey)",
                "             else:",
                "-                self._log(DEBUG, 'Attempting password auth...')",
                "+                self._log(DEBUG, \"Attempting password auth...\")",
                "                 self.auth_password(username, password)",
                "@@ -1189,5 +1238,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         return (",
                "-            self.active and",
                "-            self.auth_handler is not None and",
                "-            self.auth_handler.is_authenticated()",
                "+            self.active",
                "+            and self.auth_handler is not None",
                "+            and self.auth_handler.is_authenticated()",
                "         )",
                "@@ -1241,3 +1290,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if (not self.active) or (not self.initial_kex_done):",
                "-            raise SSHException('No existing session')",
                "+            raise SSHException(\"No existing session\")",
                "         my_event = threading.Event()",
                "@@ -1297,3 +1346,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # link",
                "-            raise SSHException('No existing session')",
                "+            raise SSHException(\"No existing session\")",
                "         if event is None:",
                "@@ -1312,8 +1361,9 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # try to fudge it",
                "-            if not fallback or ('keyboard-interactive' not in e.allowed_types):",
                "+            if not fallback or (\"keyboard-interactive\" not in e.allowed_types):",
                "                 raise",
                "             try:",
                "+",
                "                 def handler(title, instructions, fields):",
                "                     if len(fields) > 1:",
                "-                        raise SSHException('Fallback authentication failed.')",
                "+                        raise SSHException(\"Fallback authentication failed.\")",
                "                     if len(fields) == 0:",
                "@@ -1325,2 +1375,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     return [password]",
                "+",
                "                 return self.auth_interactive(username, handler)",
                "@@ -1367,3 +1418,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # we should never try to authenticate unless we're on a secure link",
                "-            raise SSHException('No existing session')",
                "+            raise SSHException(\"No existing session\")",
                "         if event is None:",
                "@@ -1379,3 +1430,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "-    def auth_interactive(self, username, handler, submethods=''):",
                "+    def auth_interactive(self, username, handler, submethods=\"\"):",
                "         \"\"\"",
                "@@ -1424,3 +1475,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # we should never try to authenticate unless we're on a secure link",
                "-            raise SSHException('No existing session')",
                "+            raise SSHException(\"No existing session\")",
                "         my_event = threading.Event()",
                "@@ -1432,3 +1483,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "-    def auth_interactive_dumb(self, username, handler=None, submethods=''):",
                "+    def auth_interactive_dumb(self, username, handler=None, submethods=\"\"):",
                "         \"\"\"",
                "@@ -1441,2 +1492,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if not handler:",
                "+",
                "             def handler(title, instructions, prompt_list):",
                "@@ -1448,5 +1500,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 for prompt, show_input in prompt_list:",
                "-                    print(prompt.strip(), end=' ')",
                "+                    print(prompt.strip(), end=\" \")",
                "                     answers.append(input())",
                "                 return answers",
                "+",
                "         return self.auth_interactive(username, handler, submethods)",
                "@@ -1472,3 +1525,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # we should never try to authenticate unless we're on a secure link",
                "-            raise SSHException('No existing session')",
                "+            raise SSHException(\"No existing session\")",
                "         my_event = threading.Event()",
                "@@ -1497,3 +1550,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             # we should never try to authenticate unless we're on a secure link",
                "-            raise SSHException('No existing session')",
                "+            raise SSHException(\"No existing session\")",
                "         my_event = threading.Event()",
                "@@ -1564,5 +1617,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if compress:",
                "-            self._preferred_compression = ('zlib@openssh.com', 'zlib', 'none')",
                "+            self._preferred_compression = (\"zlib@openssh.com\", \"zlib\", \"none\")",
                "         else:",
                "-            self._preferred_compression = ('none',)",
                "+            self._preferred_compression = (\"none\",)",
                "@@ -1580,5 +1633,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         \"\"\"",
                "-        gp = getattr(self.sock, 'getpeername', None)",
                "+        gp = getattr(self.sock, \"getpeername\", None)",
                "         if gp is None:",
                "-            return 'unknown', 0",
                "+            return \"unknown\", 0",
                "         return gp()",
                "@@ -1601,6 +1654,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             while (",
                "-                self.is_alive() and",
                "-                self is not threading.current_thread() and",
                "-                not self.sock._closed and",
                "-                not self.packetizer.closed",
                "+                self.is_alive()",
                "+                and self is not threading.current_thread()",
                "+                and not self.sock._closed",
                "+                and not self.packetizer.closed",
                "             ):",
                "@@ -1646,3 +1699,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             if not self.active:",
                "-                self._log(DEBUG, 'Dropping user packet because connection is dead.') # noqa",
                "+                self._log(",
                "+                    DEBUG, \"Dropping user packet because connection is dead.\"",
                "+                )  # noqa",
                "                 return",
                "@@ -1653,3 +1708,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             if time.time() > start + self.clear_to_send_timeout:",
                "-                raise SSHException('Key-exchange timed out waiting for key negotiation') # noqa",
                "+                raise SSHException(",
                "+                    \"Key-exchange timed out waiting for key negotiation\"",
                "+                )  # noqa",
                "         try:",
                "@@ -1677,5 +1734,7 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if key is None:",
                "-            raise SSHException('Unknown host key type')",
                "+            raise SSHException(\"Unknown host key type\")",
                "         if not key.verify_ssh_sig(self.H, Message(sig)):",
                "-            raise SSHException('Signature verification (%s) failed.' % self.host_key_type) # noqa",
                "+            raise SSHException(",
                "+                \"Signature verification (%s) failed.\" % self.host_key_type",
                "+            )  # noqa",
                "         self.host_key = key",
                "@@ -1691,5 +1750,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         # algorithm, or for e.g. transport tests that don't run kexinit.",
                "-        hash_algo = getattr(self.kex_engine, 'hash_algo', None)",
                "+        hash_algo = getattr(self.kex_engine, \"hash_algo\", None)",
                "         hash_select_msg = \"kex engine %s specified hash_algo %r\" % (",
                "-            self.kex_engine.__class__.__name__, hash_algo",
                "+            self.kex_engine.__class__.__name__,",
                "+            hash_algo,",
                "         )",
                "@@ -1698,5 +1758,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             hash_select_msg += \", falling back to sha1\"",
                "-        if not hasattr(self, '_logged_hash_selection'):",
                "+        if not hasattr(self, \"_logged_hash_selection\"):",
                "             self._log(DEBUG, hash_select_msg)",
                "-            setattr(self, '_logged_hash_selection', True)",
                "+            setattr(self, \"_logged_hash_selection\", True)",
                "         out = sofar = hash_algo(m.asbytes()).digest()",
                "@@ -1714,7 +1774,7 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if name not in self._cipher_info:",
                "-            raise SSHException('Unknown client cipher ' + name)",
                "+            raise SSHException(\"Unknown client cipher \" + name)",
                "         else:",
                "             cipher = Cipher(",
                "-                self._cipher_info[name]['class'](key),",
                "-                self._cipher_info[name]['mode'](iv),",
                "+                self._cipher_info[name][\"class\"](key),",
                "+                self._cipher_info[name][\"mode\"](iv),",
                "                 backend=default_backend(),",
                "@@ -1728,4 +1788,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if handler is None:",
                "+",
                "             def default_handler(channel):",
                "                 self._queue_incoming_channel(channel)",
                "+",
                "             self._forward_agent_handler = default_handler",
                "@@ -1740,2 +1802,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 self._queue_incoming_channel(channel)",
                "+",
                "             self._x11_handler = default_handler",
                "@@ -1773,5 +1836,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if (",
                "-            not self.server_mode or",
                "-            ptype <= HIGHEST_USERAUTH_MESSAGE_ID or",
                "-            self.is_authenticated()",
                "+            not self.server_mode",
                "+            or ptype <= HIGHEST_USERAUTH_MESSAGE_ID",
                "+            or self.is_authenticated()",
                "         ):",
                "@@ -1786,3 +1849,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         elif ptype == MSG_CHANNEL_OPEN:",
                "-            kind = message.get_text() # noqa",
                "+            kind = message.get_text()  # noqa",
                "             chanid = message.get_int()",
                "@@ -1791,4 +1854,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             reply.add_int(OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED)",
                "-            reply.add_string('')",
                "-            reply.add_string('en')",
                "+            reply.add_string(\"\")",
                "+            reply.add_string(\"en\")",
                "         # NOTE: Post-open channel messages do not need checking; the above will",
                "@@ -1814,9 +1877,11 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            self._log(DEBUG, 'starting thread (server mode): %s' % tid)",
                "+            self._log(DEBUG, \"starting thread (server mode): %s\" % tid)",
                "         else:",
                "-            self._log(DEBUG, 'starting thread (client mode): %s' % tid)",
                "+            self._log(DEBUG, \"starting thread (client mode): %s\" % tid)",
                "         try:",
                "             try:",
                "-                self.packetizer.write_all(b(self.local_version + '\\r\\n'))",
                "-                self._log(DEBUG, 'Local version/idstring: %s' % self.local_version) # noqa",
                "+                self.packetizer.write_all(b(self.local_version + \"\\r\\n\"))",
                "+                self._log(",
                "+                    DEBUG, \"Local version/idstring: %s\" % self.local_version",
                "+                )  # noqa",
                "                 self._check_banner()",
                "@@ -1852,3 +1917,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                         if ptype not in self._expected_packet:",
                "-                            raise SSHException('Expecting packet from %r, got %d' % (self._expected_packet, ptype)) # noqa",
                "+                            raise SSHException(",
                "+                                \"Expecting packet from %r, got %d\"",
                "+                                % (self._expected_packet, ptype)",
                "+                            )  # noqa",
                "                         self._expected_packet = tuple()",
                "@@ -1870,5 +1938,13 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                         elif chanid in self.channels_seen:",
                "-                            self._log(DEBUG, 'Ignoring message for dead channel %d' % chanid) # noqa",
                "+                            self._log(",
                "+                                DEBUG,",
                "+                                \"Ignoring message for dead channel %d\"",
                "+                                % chanid,",
                "+                            )  # noqa",
                "                         else:",
                "-                            self._log(ERROR, 'Channel request for unknown channel %d' % chanid) # noqa",
                "+                            self._log(",
                "+                                ERROR,",
                "+                                \"Channel request for unknown channel %d\"",
                "+                                % chanid,",
                "+                            )  # noqa",
                "                             self.active = False",
                "@@ -1876,4 +1952,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     elif (",
                "-                        self.auth_handler is not None and",
                "-                        ptype in self.auth_handler._handler_table",
                "+                        self.auth_handler is not None",
                "+                        and ptype in self.auth_handler._handler_table",
                "                     ):",
                "@@ -1884,3 +1960,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     else:",
                "-                        self._log(WARNING, 'Oops, unhandled type %d' % ptype)",
                "+                        self._log(WARNING, \"Oops, unhandled type %d\" % ptype)",
                "                         msg = Message()",
                "@@ -1891,3 +1967,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             except SSHException as e:",
                "-                self._log(ERROR, 'Exception: ' + str(e))",
                "+                self._log(ERROR, \"Exception: \" + str(e))",
                "                 self._log(ERROR, util.tb_strings())",
                "@@ -1895,3 +1971,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             except EOFError as e:",
                "-                self._log(DEBUG, 'EOF in transport thread')",
                "+                self._log(DEBUG, \"EOF in transport thread\")",
                "                 self.saved_exception = e",
                "@@ -1900,3 +1976,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     if e.args:",
                "-                        emsg = '%s (%d)' % (e.args[1], e.args[0])",
                "+                        emsg = \"%s (%d)\" % (e.args[1], e.args[0])",
                "                     else:  # empty tuple, e.g. socket.timeout",
                "@@ -1905,6 +1981,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     emsg = e.args",
                "-                self._log(ERROR, 'Socket exception: ' + emsg)",
                "+                self._log(ERROR, \"Socket exception: \" + emsg)",
                "                 self.saved_exception = e",
                "             except Exception as e:",
                "-                self._log(ERROR, 'Unknown exception: ' + str(e))",
                "+                self._log(ERROR, \"Unknown exception: \" + str(e))",
                "                 self._log(ERROR, util.tb_strings())",
                "@@ -1937,3 +2013,2 @@ class Transport(threading.Thread, ClosingContextManager):",
                "-",
                "     def _log_agreement(self, which, local, remote):",
                "@@ -1979,8 +2054,8 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 raise SSHException(",
                "-                    'Error reading SSH protocol banner' + str(e)",
                "+                    \"Error reading SSH protocol banner\" + str(e)",
                "                 )",
                "-            if buf[:4] == 'SSH-':",
                "+            if buf[:4] == \"SSH-\":",
                "                 break",
                "-            self._log(DEBUG, 'Banner: ' + buf)",
                "-        if buf[:4] != 'SSH-':",
                "+            self._log(DEBUG, \"Banner: \" + buf)",
                "+        if buf[:4] != \"SSH-\":",
                "             raise SSHException('Indecipherable protocol version \"' + buf + '\"')",
                "@@ -1988,3 +2063,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self.remote_version = buf",
                "-        self._log(DEBUG, 'Remote version/idstring: %s' % buf)",
                "+        self._log(DEBUG, \"Remote version/idstring: %s\" % buf)",
                "         # pull off any attached comment",
                "@@ -1992,3 +2067,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         # since 2003. ca 877cd974b8182d26fa76d566072917ea67b64e67",
                "-        i = buf.find(' ')",
                "+        i = buf.find(\" \")",
                "         if i >= 0:",
                "@@ -1996,11 +2071,11 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         # parse out version string and make sure it matches",
                "-        segs = buf.split('-', 2)",
                "+        segs = buf.split(\"-\", 2)",
                "         if len(segs) < 3:",
                "-            raise SSHException('Invalid SSH banner')",
                "+            raise SSHException(\"Invalid SSH banner\")",
                "         version = segs[1]",
                "         client = segs[2]",
                "-        if version != '1.99' and version != '2.0':",
                "-            msg = 'Incompatible version ({0} instead of 2.0)'",
                "+        if version != \"1.99\" and version != \"2.0\":",
                "+            msg = \"Incompatible version ({0} instead of 2.0)\"",
                "             raise SSHException(msg.format(version))",
                "-        msg = 'Connected (version {0}, client {1})'.format(version, client)",
                "+        msg = \"Connected (version {0}, client {1})\".format(version, client)",
                "         self._log(INFO, msg)",
                "@@ -2019,6 +2094,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            mp_required_prefix = 'diffie-hellman-group-exchange-sha'",
                "+            mp_required_prefix = \"diffie-hellman-group-exchange-sha\"",
                "             kex_mp = [",
                "-                k for k",
                "-                in self._preferred_kex",
                "+                k",
                "+                for k in self._preferred_kex",
                "                 if k.startswith(mp_required_prefix)",
                "@@ -2029,4 +2104,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 pkex = [",
                "-                    k for k",
                "-                    in self.get_security_options().kex",
                "+                    k",
                "+                    for k in self.get_security_options().kex",
                "                     if not k.startswith(mp_required_prefix)",
                "@@ -2034,6 +2109,8 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 self.get_security_options().kex = pkex",
                "-            available_server_keys = list(filter(",
                "-                list(self.server_key_dict.keys()).__contains__,",
                "-                self._preferred_keys",
                "-            ))",
                "+            available_server_keys = list(",
                "+                filter(",
                "+                    list(self.server_key_dict.keys()).__contains__,",
                "+                    self._preferred_keys,",
                "+                )",
                "+            )",
                "         else:",
                "@@ -2061,3 +2138,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     def _parse_kex_init(self, m):",
                "-        m.get_bytes(16) # cookie, discarded",
                "+        m.get_bytes(16)  # cookie, discarded",
                "         kex_algo_list = m.get_list()",
                "@@ -2073,16 +2150,28 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         kex_follows = m.get_boolean()",
                "-        m.get_int() # unused",
                "-",
                "-        self._log(DEBUG,",
                "-            'kex algos:' + str(kex_algo_list) +",
                "-            ' server key:' + str(server_key_algo_list) +",
                "-            ' client encrypt:' + str(client_encrypt_algo_list) +",
                "-            ' server encrypt:' + str(server_encrypt_algo_list) +",
                "-            ' client mac:' + str(client_mac_algo_list) +",
                "-            ' server mac:' + str(server_mac_algo_list) +",
                "-            ' client compress:' + str(client_compress_algo_list) +",
                "-            ' server compress:' + str(server_compress_algo_list) +",
                "-            ' client lang:' + str(client_lang_list) +",
                "-            ' server lang:' + str(server_lang_list) +",
                "-            ' kex follows?' + str(kex_follows)",
                "+        m.get_int()  # unused",
                "+",
                "+        self._log(",
                "+            DEBUG,",
                "+            \"kex algos:\"",
                "+            + str(kex_algo_list)",
                "+            + \" server key:\"",
                "+            + str(server_key_algo_list)",
                "+            + \" client encrypt:\"",
                "+            + str(client_encrypt_algo_list)",
                "+            + \" server encrypt:\"",
                "+            + str(server_encrypt_algo_list)",
                "+            + \" client mac:\"",
                "+            + str(client_mac_algo_list)",
                "+            + \" server mac:\"",
                "+            + str(server_mac_algo_list)",
                "+            + \" client compress:\"",
                "+            + str(client_compress_algo_list)",
                "+            + \" server compress:\"",
                "+            + str(server_compress_algo_list)",
                "+            + \" client lang:\"",
                "+            + str(client_lang_list)",
                "+            + \" server lang:\"",
                "+            + str(server_lang_list)",
                "+            + \" kex follows?\"",
                "+            + str(kex_follows),",
                "         )",
                "@@ -2094,13 +2183,13 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            agreed_kex = list(filter(",
                "-                self._preferred_kex.__contains__,",
                "-                kex_algo_list",
                "-            ))",
                "+            agreed_kex = list(",
                "+                filter(self._preferred_kex.__contains__, kex_algo_list)",
                "+            )",
                "         else:",
                "-            agreed_kex = list(filter(",
                "-                kex_algo_list.__contains__,",
                "-                self._preferred_kex",
                "-            ))",
                "+            agreed_kex = list(",
                "+                filter(kex_algo_list.__contains__, self._preferred_kex)",
                "+            )",
                "         if len(agreed_kex) == 0:",
                "-            raise SSHException('Incompatible ssh peer (no acceptable kex algorithm)') # noqa",
                "+            raise SSHException(",
                "+                \"Incompatible ssh peer (no acceptable kex algorithm)\"",
                "+            )  # noqa",
                "         self.kex_engine = self._kex_info[agreed_kex[0]](self)",
                "@@ -2109,39 +2198,57 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            available_server_keys = list(filter(",
                "-                list(self.server_key_dict.keys()).__contains__,",
                "-                self._preferred_keys",
                "-            ))",
                "-            agreed_keys = list(filter(",
                "-                available_server_keys.__contains__, server_key_algo_list",
                "-            ))",
                "+            available_server_keys = list(",
                "+                filter(",
                "+                    list(self.server_key_dict.keys()).__contains__,",
                "+                    self._preferred_keys,",
                "+                )",
                "+            )",
                "+            agreed_keys = list(",
                "+                filter(",
                "+                    available_server_keys.__contains__, server_key_algo_list",
                "+                )",
                "+            )",
                "         else:",
                "-            agreed_keys = list(filter(",
                "-                server_key_algo_list.__contains__, self._preferred_keys",
                "-            ))",
                "+            agreed_keys = list(",
                "+                filter(server_key_algo_list.__contains__, self._preferred_keys)",
                "+            )",
                "         if len(agreed_keys) == 0:",
                "-            raise SSHException('Incompatible ssh peer (no acceptable host key)') # noqa",
                "+            raise SSHException(",
                "+                \"Incompatible ssh peer (no acceptable host key)\"",
                "+            )  # noqa",
                "         self.host_key_type = agreed_keys[0]",
                "         if self.server_mode and (self.get_server_key() is None):",
                "-            raise SSHException('Incompatible ssh peer (can\\'t match requested host key type)') # noqa",
                "+            raise SSHException(",
                "+                \"Incompatible ssh peer (can't match requested host key type)\"",
                "+            )  # noqa",
                "         if self.server_mode:",
                "-            agreed_local_ciphers = list(filter(",
                "-                self._preferred_ciphers.__contains__,",
                "-                server_encrypt_algo_list",
                "-            ))",
                "-            agreed_remote_ciphers = list(filter(",
                "-                self._preferred_ciphers.__contains__,",
                "-                client_encrypt_algo_list",
                "-            ))",
                "+            agreed_local_ciphers = list(",
                "+                filter(",
                "+                    self._preferred_ciphers.__contains__,",
                "+                    server_encrypt_algo_list,",
                "+                )",
                "+            )",
                "+            agreed_remote_ciphers = list(",
                "+                filter(",
                "+                    self._preferred_ciphers.__contains__,",
                "+                    client_encrypt_algo_list,",
                "+                )",
                "+            )",
                "         else:",
                "-            agreed_local_ciphers = list(filter(",
                "-                client_encrypt_algo_list.__contains__,",
                "-                self._preferred_ciphers",
                "-            ))",
                "-            agreed_remote_ciphers = list(filter(",
                "-                server_encrypt_algo_list.__contains__,",
                "-                self._preferred_ciphers",
                "-            ))",
                "+            agreed_local_ciphers = list(",
                "+                filter(",
                "+                    client_encrypt_algo_list.__contains__,",
                "+                    self._preferred_ciphers,",
                "+                )",
                "+            )",
                "+            agreed_remote_ciphers = list(",
                "+                filter(",
                "+                    server_encrypt_algo_list.__contains__,",
                "+                    self._preferred_ciphers,",
                "+                )",
                "+            )",
                "         if len(agreed_local_ciphers) == 0 or len(agreed_remote_ciphers) == 0:",
                "-            raise SSHException('Incompatible ssh server (no acceptable ciphers)') # noqa",
                "+            raise SSHException(",
                "+                \"Incompatible ssh server (no acceptable ciphers)\"",
                "+            )  # noqa",
                "         self.local_cipher = agreed_local_ciphers[0]",
                "@@ -2149,3 +2256,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self._log_agreement(",
                "-            'Cipher', local=self.local_cipher, remote=self.remote_cipher",
                "+            \"Cipher\", local=self.local_cipher, remote=self.remote_cipher",
                "         )",
                "@@ -2153,17 +2260,17 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            agreed_remote_macs = list(filter(",
                "-                self._preferred_macs.__contains__, client_mac_algo_list",
                "-            ))",
                "-            agreed_local_macs = list(filter(",
                "-                self._preferred_macs.__contains__, server_mac_algo_list",
                "-            ))",
                "+            agreed_remote_macs = list(",
                "+                filter(self._preferred_macs.__contains__, client_mac_algo_list)",
                "+            )",
                "+            agreed_local_macs = list(",
                "+                filter(self._preferred_macs.__contains__, server_mac_algo_list)",
                "+            )",
                "         else:",
                "-            agreed_local_macs = list(filter(",
                "-                client_mac_algo_list.__contains__, self._preferred_macs",
                "-            ))",
                "-            agreed_remote_macs = list(filter(",
                "-                server_mac_algo_list.__contains__, self._preferred_macs",
                "-            ))",
                "+            agreed_local_macs = list(",
                "+                filter(client_mac_algo_list.__contains__, self._preferred_macs)",
                "+            )",
                "+            agreed_remote_macs = list(",
                "+                filter(server_mac_algo_list.__contains__, self._preferred_macs)",
                "+            )",
                "         if (len(agreed_local_macs) == 0) or (len(agreed_remote_macs) == 0):",
                "-            raise SSHException('Incompatible ssh server (no acceptable macs)')",
                "+            raise SSHException(\"Incompatible ssh server (no acceptable macs)\")",
                "         self.local_mac = agreed_local_macs[0]",
                "@@ -2171,3 +2278,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self._log_agreement(",
                "-            'MAC', local=self.local_mac, remote=self.remote_mac",
                "+            \"MAC\", local=self.local_mac, remote=self.remote_mac",
                "         )",
                "@@ -2175,28 +2282,39 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            agreed_remote_compression = list(filter(",
                "-                self._preferred_compression.__contains__,",
                "-                client_compress_algo_list",
                "-            ))",
                "-            agreed_local_compression = list(filter(",
                "-                self._preferred_compression.__contains__,",
                "-                server_compress_algo_list",
                "-            ))",
                "+            agreed_remote_compression = list(",
                "+                filter(",
                "+                    self._preferred_compression.__contains__,",
                "+                    client_compress_algo_list,",
                "+                )",
                "+            )",
                "+            agreed_local_compression = list(",
                "+                filter(",
                "+                    self._preferred_compression.__contains__,",
                "+                    server_compress_algo_list,",
                "+                )",
                "+            )",
                "         else:",
                "-            agreed_local_compression = list(filter(",
                "-                client_compress_algo_list.__contains__,",
                "-                self._preferred_compression",
                "-            ))",
                "-            agreed_remote_compression = list(filter(",
                "-                server_compress_algo_list.__contains__,",
                "-                self._preferred_compression",
                "-            ))",
                "+            agreed_local_compression = list(",
                "+                filter(",
                "+                    client_compress_algo_list.__contains__,",
                "+                    self._preferred_compression,",
                "+                )",
                "+            )",
                "+            agreed_remote_compression = list(",
                "+                filter(",
                "+                    server_compress_algo_list.__contains__,",
                "+                    self._preferred_compression,",
                "+                )",
                "+            )",
                "         if (",
                "-            len(agreed_local_compression) == 0 or",
                "-            len(agreed_remote_compression) == 0",
                "+            len(agreed_local_compression) == 0",
                "+            or len(agreed_remote_compression) == 0",
                "         ):",
                "-            msg = 'Incompatible ssh server (no acceptable compression) {0!r} {1!r} {2!r}' # noqa",
                "-            raise SSHException(msg.format(",
                "-                agreed_local_compression, agreed_remote_compression,",
                "-                self._preferred_compression,",
                "-            ))",
                "+            msg = \"Incompatible ssh server (no acceptable compression) {0!r} {1!r} {2!r}\"  # noqa",
                "+            raise SSHException(",
                "+                msg.format(",
                "+                    agreed_local_compression,",
                "+                    agreed_remote_compression,",
                "+                    self._preferred_compression,",
                "+                )",
                "+            )",
                "         self.local_compression = agreed_local_compression[0]",
                "@@ -2204,5 +2322,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self._log_agreement(",
                "-            'Compression',",
                "+            \"Compression\",",
                "             local=self.local_compression,",
                "-            remote=self.remote_compression",
                "+            remote=self.remote_compression,",
                "         )",
                "@@ -2219,12 +2337,12 @@ class Transport(threading.Thread, ClosingContextManager):",
                "          inbound traffic\"\"\"",
                "-        block_size = self._cipher_info[self.remote_cipher]['block-size']",
                "+        block_size = self._cipher_info[self.remote_cipher][\"block-size\"]",
                "         if self.server_mode:",
                "-            IV_in = self._compute_key('A', block_size)",
                "+            IV_in = self._compute_key(\"A\", block_size)",
                "             key_in = self._compute_key(",
                "-                'C', self._cipher_info[self.remote_cipher]['key-size']",
                "+                \"C\", self._cipher_info[self.remote_cipher][\"key-size\"]",
                "             )",
                "         else:",
                "-            IV_in = self._compute_key('B', block_size)",
                "+            IV_in = self._compute_key(\"B\", block_size)",
                "             key_in = self._compute_key(",
                "-                'D', self._cipher_info[self.remote_cipher]['key-size']",
                "+                \"D\", self._cipher_info[self.remote_cipher][\"key-size\"]",
                "             )",
                "@@ -2233,4 +2351,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         )",
                "-        mac_size = self._mac_info[self.remote_mac]['size']",
                "-        mac_engine = self._mac_info[self.remote_mac]['class']",
                "+        mac_size = self._mac_info[self.remote_mac][\"size\"]",
                "+        mac_engine = self._mac_info[self.remote_mac][\"class\"]",
                "         # initial mac keys are done in the hash's natural size (not the",
                "@@ -2238,5 +2356,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            mac_key = self._compute_key('E', mac_engine().digest_size)",
                "+            mac_key = self._compute_key(\"E\", mac_engine().digest_size)",
                "         else:",
                "-            mac_key = self._compute_key('F', mac_engine().digest_size)",
                "+            mac_key = self._compute_key(\"F\", mac_engine().digest_size)",
                "         self.packetizer.set_inbound_cipher(",
                "@@ -2245,10 +2363,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         compress_in = self._compression_info[self.remote_compression][1]",
                "-        if (",
                "-            compress_in is not None and",
                "-            (",
                "-                self.remote_compression != 'zlib@openssh.com' or",
                "-                self.authenticated",
                "-            )",
                "+        if compress_in is not None and (",
                "+            self.remote_compression != \"zlib@openssh.com\" or self.authenticated",
                "         ):",
                "-            self._log(DEBUG, 'Switching on inbound compression ...')",
                "+            self._log(DEBUG, \"Switching on inbound compression ...\")",
                "             self.packetizer.set_inbound_compressor(compress_in())",
                "@@ -2261,15 +2375,18 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self._send_message(m)",
                "-        block_size = self._cipher_info[self.local_cipher]['block-size']",
                "+        block_size = self._cipher_info[self.local_cipher][\"block-size\"]",
                "         if self.server_mode:",
                "-            IV_out = self._compute_key('B', block_size)",
                "+            IV_out = self._compute_key(\"B\", block_size)",
                "             key_out = self._compute_key(",
                "-                'D', self._cipher_info[self.local_cipher]['key-size'])",
                "+                \"D\", self._cipher_info[self.local_cipher][\"key-size\"]",
                "+            )",
                "         else:",
                "-            IV_out = self._compute_key('A', block_size)",
                "+            IV_out = self._compute_key(\"A\", block_size)",
                "             key_out = self._compute_key(",
                "-                'C', self._cipher_info[self.local_cipher]['key-size'])",
                "+                \"C\", self._cipher_info[self.local_cipher][\"key-size\"]",
                "+            )",
                "         engine = self._get_cipher(",
                "-            self.local_cipher, key_out, IV_out, self._ENCRYPT)",
                "-        mac_size = self._mac_info[self.local_mac]['size']",
                "-        mac_engine = self._mac_info[self.local_mac]['class']",
                "+            self.local_cipher, key_out, IV_out, self._ENCRYPT",
                "+        )",
                "+        mac_size = self._mac_info[self.local_mac][\"size\"]",
                "+        mac_engine = self._mac_info[self.local_mac][\"class\"]",
                "         # initial mac keys are done in the hash's natural size (not the",
                "@@ -2277,17 +2394,14 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode:",
                "-            mac_key = self._compute_key('F', mac_engine().digest_size)",
                "+            mac_key = self._compute_key(\"F\", mac_engine().digest_size)",
                "         else:",
                "-            mac_key = self._compute_key('E', mac_engine().digest_size)",
                "-        sdctr = self.local_cipher.endswith('-ctr')",
                "+            mac_key = self._compute_key(\"E\", mac_engine().digest_size)",
                "+        sdctr = self.local_cipher.endswith(\"-ctr\")",
                "         self.packetizer.set_outbound_cipher(",
                "-            engine, block_size, mac_engine, mac_size, mac_key, sdctr)",
                "+            engine, block_size, mac_engine, mac_size, mac_key, sdctr",
                "+        )",
                "         compress_out = self._compression_info[self.local_compression][0]",
                "-        if (",
                "-            compress_out is not None and",
                "-            (",
                "-                self.local_compression != 'zlib@openssh.com' or",
                "-                self.authenticated",
                "-            )",
                "+        if compress_out is not None and (",
                "+            self.local_compression != \"zlib@openssh.com\" or self.authenticated",
                "         ):",
                "-            self._log(DEBUG, 'Switching on outbound compression ...')",
                "+            self._log(DEBUG, \"Switching on outbound compression ...\")",
                "             self.packetizer.set_outbound_compressor(compress_out())",
                "@@ -2301,9 +2415,9 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         # delayed initiation of compression",
                "-        if self.local_compression == 'zlib@openssh.com':",
                "+        if self.local_compression == \"zlib@openssh.com\":",
                "             compress_out = self._compression_info[self.local_compression][0]",
                "-            self._log(DEBUG, 'Switching on outbound compression ...')",
                "+            self._log(DEBUG, \"Switching on outbound compression ...\")",
                "             self.packetizer.set_outbound_compressor(compress_out())",
                "-        if self.remote_compression == 'zlib@openssh.com':",
                "+        if self.remote_compression == \"zlib@openssh.com\":",
                "             compress_in = self._compression_info[self.remote_compression][1]",
                "-            self._log(DEBUG, 'Switching on inbound compression ...')",
                "+            self._log(DEBUG, \"Switching on inbound compression ...\")",
                "             self.packetizer.set_inbound_compressor(compress_in())",
                "@@ -2311,3 +2425,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     def _parse_newkeys(self, m):",
                "-        self._log(DEBUG, 'Switch to new keys ...')",
                "+        self._log(DEBUG, \"Switch to new keys ...\")",
                "         self._activate_inbound()",
                "@@ -2339,3 +2453,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         desc = m.get_text()",
                "-        self._log(INFO, 'Disconnect (code %d): %s' % (code, desc))",
                "+        self._log(INFO, \"Disconnect (code %d): %s\" % (code, desc))",
                "@@ -2347,7 +2461,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             self._log(",
                "-                DEBUG,",
                "-                'Rejecting \"%s\" global request from server.' % kind",
                "+                DEBUG, 'Rejecting \"%s\" global request from server.' % kind",
                "             )",
                "             ok = False",
                "-        elif kind == 'tcpip-forward':",
                "+        elif kind == \"tcpip-forward\":",
                "             address = m.get_text()",
                "@@ -2357,3 +2470,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 ok = (ok,)",
                "-        elif kind == 'cancel-tcpip-forward':",
                "+        elif kind == \"cancel-tcpip-forward\":",
                "             address = m.get_text()",
                "@@ -2378,3 +2491,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     def _parse_request_success(self, m):",
                "-        self._log(DEBUG, 'Global request successful.')",
                "+        self._log(DEBUG, \"Global request successful.\")",
                "         self.global_response = m",
                "@@ -2384,3 +2497,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "     def _parse_request_failure(self, m):",
                "-        self._log(DEBUG, 'Global request denied.')",
                "+        self._log(DEBUG, \"Global request denied.\")",
                "         self.global_response = None",
                "@@ -2396,3 +2509,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if chan is None:",
                "-            self._log(WARNING, 'Success for unrequested channel! [??]')",
                "+            self._log(WARNING, \"Success for unrequested channel! [??]\")",
                "             return",
                "@@ -2401,4 +2514,5 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             chan._set_remote_channel(",
                "-                server_chanid, server_window_size, server_max_packet_size)",
                "-            self._log(DEBUG, 'Secsh channel %d opened.' % chanid)",
                "+                server_chanid, server_window_size, server_max_packet_size",
                "+            )",
                "+            self._log(DEBUG, \"Secsh channel %d opened.\" % chanid)",
                "             if chanid in self.channel_events:",
                "@@ -2415,7 +2529,7 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         m.get_text()  # ignored language",
                "-        reason_text = CONNECTION_FAILED_CODE.get(reason, '(unknown code)')",
                "+        reason_text = CONNECTION_FAILED_CODE.get(reason, \"(unknown code)\")",
                "         self._log(",
                "             ERROR,",
                "-            'Secsh channel %d open FAILED: %s: %s' % (",
                "-                chanid, reason_str, reason_text)",
                "+            \"Secsh channel %d open FAILED: %s: %s\"",
                "+            % (chanid, reason_str, reason_text),",
                "         )",
                "@@ -2440,6 +2554,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if (",
                "-            kind == 'auth-agent@openssh.com' and",
                "-            self._forward_agent_handler is not None",
                "+            kind == \"auth-agent@openssh.com\"",
                "+            and self._forward_agent_handler is not None",
                "         ):",
                "-            self._log(DEBUG, 'Incoming forward agent connection')",
                "+            self._log(DEBUG, \"Incoming forward agent connection\")",
                "             self.lock.acquire()",
                "@@ -2449,3 +2563,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 self.lock.release()",
                "-        elif (kind == 'x11') and (self._x11_handler is not None):",
                "+        elif (kind == \"x11\") and (self._x11_handler is not None):",
                "             origin_addr = m.get_text()",
                "@@ -2454,4 +2568,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 DEBUG,",
                "-                'Incoming x11 connection from %s:%d' % (",
                "-                    origin_addr, origin_port)",
                "+                \"Incoming x11 connection from %s:%d\"",
                "+                % (origin_addr, origin_port),",
                "             )",
                "@@ -2462,3 +2576,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 self.lock.release()",
                "-        elif (kind == 'forwarded-tcpip') and (self._tcp_handler is not None):",
                "+        elif (kind == \"forwarded-tcpip\") and (self._tcp_handler is not None):",
                "             server_addr = m.get_text()",
                "@@ -2469,4 +2583,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 DEBUG,",
                "-                'Incoming tcp forwarded connection from %s:%d' % (",
                "-                    origin_addr, origin_port)",
                "+                \"Incoming tcp forwarded connection from %s:%d\"",
                "+                % (origin_addr, origin_port),",
                "             )",
                "@@ -2479,4 +2593,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             self._log(",
                "-                DEBUG,",
                "-                'Rejecting \"%s\" channel request from server.' % kind)",
                "+                DEBUG, 'Rejecting \"%s\" channel request from server.' % kind",
                "+            )",
                "             reject = True",
                "@@ -2489,3 +2603,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 self.lock.release()",
                "-            if kind == 'direct-tcpip':",
                "+            if kind == \"direct-tcpip\":",
                "                 # handle direct-tcpip requests coming from the client",
                "@@ -2498,3 +2612,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     (origin_addr, origin_port),",
                "-                    (dest_addr, dest_port)",
                "+                    (dest_addr, dest_port),",
                "                 )",
                "@@ -2502,7 +2616,8 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 reason = self.server_object.check_channel_request(",
                "-                    kind, my_chanid)",
                "+                    kind, my_chanid",
                "+                )",
                "             if reason != OPEN_SUCCEEDED:",
                "                 self._log(",
                "-                    DEBUG,",
                "-                    'Rejecting \"%s\" channel request from client.' % kind)",
                "+                    DEBUG, 'Rejecting \"%s\" channel request from client.' % kind",
                "+                )",
                "                 reject = True",
                "@@ -2513,4 +2628,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             msg.add_int(reason)",
                "-            msg.add_string('')",
                "-            msg.add_string('en')",
                "+            msg.add_string(\"\")",
                "+            msg.add_string(\"en\")",
                "             self._send_message(msg)",
                "@@ -2525,5 +2640,7 @@ class Transport(threading.Thread, ClosingContextManager):",
                "             chan._set_window(",
                "-                self.default_window_size, self.default_max_packet_size)",
                "+                self.default_window_size, self.default_max_packet_size",
                "+            )",
                "             chan._set_remote_channel(",
                "-                chanid, initial_window_size, max_packet_size)",
                "+                chanid, initial_window_size, max_packet_size",
                "+            )",
                "         finally:",
                "@@ -2537,13 +2654,11 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         self._send_message(m)",
                "-        self._log(DEBUG, 'Secsh channel %d (%s) opened.', my_chanid, kind)",
                "-        if kind == 'auth-agent@openssh.com':",
                "+        self._log(DEBUG, \"Secsh channel %d (%s) opened.\", my_chanid, kind)",
                "+        if kind == \"auth-agent@openssh.com\":",
                "             self._forward_agent_handler(chan)",
                "-        elif kind == 'x11':",
                "+        elif kind == \"x11\":",
                "             self._x11_handler(chan, (origin_addr, origin_port))",
                "-        elif kind == 'forwarded-tcpip':",
                "+        elif kind == \"forwarded-tcpip\":",
                "             chan.origin_addr = (origin_addr, origin_port)",
                "             self._tcp_handler(",
                "-                chan,",
                "-                (origin_addr, origin_port),",
                "-                (server_addr, server_port)",
                "+                chan, (origin_addr, origin_port), (server_addr, server_port)",
                "             )",
                "@@ -2556,3 +2671,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         m.get_string()  # language",
                "-        self._log(DEBUG, 'Debug msg: {0}'.format(util.safe_string(msg)))",
                "+        self._log(DEBUG, \"Debug msg: {0}\".format(util.safe_string(msg)))",
                "@@ -2590,3 +2705,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "-class SecurityOptions (object):",
                "+class SecurityOptions(object):",
                "     \"\"\"",
                "@@ -2602,3 +2717,4 @@ class SecurityOptions (object):",
                "     \"\"\"",
                "-    __slots__ = '_transport'",
                "+",
                "+    __slots__ = \"_transport\"",
                "@@ -2611,3 +2727,3 @@ class SecurityOptions (object):",
                "         \"\"\"",
                "-        return '<paramiko.SecurityOptions for %s>' % repr(self._transport)",
                "+        return \"<paramiko.SecurityOptions for %s>\" % repr(self._transport)",
                "@@ -2617,3 +2733,3 @@ class SecurityOptions (object):",
                "         if type(x) is not tuple:",
                "-            raise TypeError('expected tuple or list')",
                "+            raise TypeError(\"expected tuple or list\")",
                "         possible = list(getattr(self._transport, orig).keys())",
                "@@ -2621,3 +2737,3 @@ class SecurityOptions (object):",
                "         if len(forbidden) > 0:",
                "-            raise ValueError('unknown cipher')",
                "+            raise ValueError(\"unknown cipher\")",
                "         setattr(self._transport, name, x)",
                "@@ -2631,3 +2747,3 @@ class SecurityOptions (object):",
                "     def ciphers(self, x):",
                "-        self._set('_preferred_ciphers', '_cipher_info', x)",
                "+        self._set(\"_preferred_ciphers\", \"_cipher_info\", x)",
                "@@ -2640,3 +2756,3 @@ class SecurityOptions (object):",
                "     def digests(self, x):",
                "-        self._set('_preferred_macs', '_mac_info', x)",
                "+        self._set(\"_preferred_macs\", \"_mac_info\", x)",
                "@@ -2649,4 +2765,3 @@ class SecurityOptions (object):",
                "     def key_types(self, x):",
                "-        self._set('_preferred_keys', '_key_info', x)",
                "-",
                "+        self._set(\"_preferred_keys\", \"_key_info\", x)",
                "@@ -2659,3 +2774,3 @@ class SecurityOptions (object):",
                "     def kex(self, x):",
                "-        self._set('_preferred_kex', '_kex_info', x)",
                "+        self._set(\"_preferred_kex\", \"_kex_info\", x)",
                "@@ -2668,6 +2783,6 @@ class SecurityOptions (object):",
                "     def compression(self, x):",
                "-        self._set('_preferred_compression', '_compression_info', x)",
                "+        self._set(\"_preferred_compression\", \"_compression_info\", x)",
                "-class ChannelMap (object):",
                "+class ChannelMap(object):",
                "     def __init__(self):",
                "diff --git a/paramiko/util.py b/paramiko/util.py",
                "index de099c0c..181c3892 100644",
                "--- a/paramiko/util.py",
                "+++ b/paramiko/util.py",
                "@@ -51,5 +51,5 @@ def inflate_long(s, always_positive=False):",
                "     for i in range(0, len(s), 4):",
                "-        out = (out << 32) + struct.unpack('>I', s[i:i + 4])[0]",
                "+        out = (out << 32) + struct.unpack(\">I\", s[i : i + 4])[0]",
                "     if negative:",
                "-        out -= (long(1) << (8 * len(s)))",
                "+        out -= long(1) << (8 * len(s))",
                "     return out",
                "@@ -68,3 +68,3 @@ def deflate_long(n, add_sign_padding=True):",
                "     while (n != 0) and (n != -1):",
                "-        s = struct.pack('>I', n & xffffffff) + s",
                "+        s = struct.pack(\">I\", n & xffffffff) + s",
                "         n >>= 32",
                "@@ -83,3 +83,3 @@ def deflate_long(n, add_sign_padding=True):",
                "             s = max_byte",
                "-    s = s[i[0]:]",
                "+    s = s[i[0] :]",
                "     if add_sign_padding:",
                "@@ -92,3 +92,3 @@ def deflate_long(n, add_sign_padding=True):",
                "-def format_binary(data, prefix=''):",
                "+def format_binary(data, prefix=\"\"):",
                "     x = 0",
                "@@ -96,3 +96,3 @@ def format_binary(data, prefix=''):",
                "     while len(data) > x + 16:",
                "-        out.append(format_binary_line(data[x:x + 16]))",
                "+        out.append(format_binary_line(data[x : x + 16]))",
                "         x += 16",
                "@@ -104,5 +104,5 @@ def format_binary(data, prefix=''):",
                " def format_binary_line(data):",
                "-    left = ' '.join(['%02X' % byte_ord(c) for c in data])",
                "-    right = ''.join([('.%c..' % c)[(byte_ord(c) + 63) // 95] for c in data])",
                "-    return '%-50s %s' % (left, right)",
                "+    left = \" \".join([\"%02X\" % byte_ord(c) for c in data])",
                "+    right = \"\".join([(\".%c..\" % c)[(byte_ord(c) + 63) // 95] for c in data])",
                "+    return \"%-50s %s\" % (left, right)",
                "@@ -110,3 +110,3 @@ def format_binary_line(data):",
                " def safe_string(s):",
                "-    out = b('')",
                "+    out = b(\"\")",
                "     for c in s:",
                "@@ -116,3 +116,3 @@ def safe_string(s):",
                "         else:",
                "-            out += b('%%%02X' % i)",
                "+            out += b(\"%%%02X\" % i)",
                "     return out",
                "@@ -136,3 +136,3 @@ def bit_length(n):",
                " def tb_strings():",
                "-    return ''.join(traceback.format_exception(*sys.exc_info())).split('\\n')",
                "+    return \"\".join(traceback.format_exception(*sys.exc_info())).split(\"\\n\")",
                "@@ -187,2 +187,3 @@ def load_host_keys(filename):",
                "     from paramiko.hostkeys import HostKeys",
                "+",
                "     return HostKeys(filename)",
                "@@ -248,6 +249,6 @@ def log_to_file(filename, level=DEBUG):",
                "     l.setLevel(level)",
                "-    f = open(filename, 'a')",
                "+    f = open(filename, \"a\")",
                "     lh = logging.StreamHandler(f)",
                "-    frm = '%(levelname)-.3s [%(asctime)s.%(msecs)03d] thr=%(_threadid)-3d %(name)s: %(message)s' # noqa",
                "-    lh.setFormatter(logging.Formatter(frm, '%Y%m%d-%H:%M:%S'))",
                "+    frm = \"%(levelname)-.3s [%(asctime)s.%(msecs)03d] thr=%(_threadid)-3d %(name)s: %(message)s\"  # noqa",
                "+    lh.setFormatter(logging.Formatter(frm, \"%Y%m%d-%H:%M:%S\"))",
                "     l.addHandler(lh)",
                "@@ -256,3 +257,3 @@ def log_to_file(filename, level=DEBUG):",
                " # make only one filter object, so it doesn't get applied more than once",
                "-class PFilter (object):",
                "+class PFilter(object):",
                "     def filter(self, record):",
                "diff --git a/paramiko/win_pageant.py b/paramiko/win_pageant.py",
                "index fda3b9c1..d6afd5bd 100644",
                "--- a/paramiko/win_pageant.py",
                "+++ b/paramiko/win_pageant.py",
                "@@ -46,3 +46,3 @@ win32con_WM_COPYDATA = 74",
                " def _get_pageant_window_object():",
                "-    return ctypes.windll.user32.FindWindowA(b('Pageant'), b('Pageant'))",
                "+    return ctypes.windll.user32.FindWindowA(b(\"Pageant\"), b(\"Pageant\"))",
                "@@ -59,3 +59,3 @@ def can_talk_to_agent():",
                "-if platform.architecture()[0] == '64bit':",
                "+if platform.architecture()[0] == \"64bit\":",
                "     ULONG_PTR = ctypes.c_uint64",
                "@@ -70,6 +70,7 @@ class COPYDATASTRUCT(ctypes.Structure):",
                "     \"\"\"",
                "+",
                "     _fields_ = [",
                "-        ('num_data', ULONG_PTR),",
                "-        ('data_size', ctypes.wintypes.DWORD),",
                "-        ('data_loc', ctypes.c_void_p),",
                "+        (\"num_data\", ULONG_PTR),",
                "+        (\"data_size\", ctypes.wintypes.DWORD),",
                "+        (\"data_loc\", ctypes.c_void_p),",
                "     ]",
                "@@ -88,7 +89,7 @@ def _query_pageant(msg):",
                "     # create a name for the mmap",
                "-    map_name = 'PageantRequest%08x' % thread.get_ident()",
                "+    map_name = \"PageantRequest%08x\" % thread.get_ident()",
                "-    pymap = _winapi.MemoryMap(map_name, _AGENT_MAX_MSGLEN,",
                "-        _winapi.get_security_attributes_for_user(),",
                "-        )",
                "+    pymap = _winapi.MemoryMap(",
                "+        map_name, _AGENT_MAX_MSGLEN, _winapi.get_security_attributes_for_user()",
                "+    )",
                "     with pymap:",
                "@@ -99,7 +100,9 @@ def _query_pageant(msg):",
                "         # Create a string to use for the SendMessage function call",
                "-        cds = COPYDATASTRUCT(_AGENT_COPYDATA_ID, char_buffer_size,",
                "-            char_buffer_address)",
                "+        cds = COPYDATASTRUCT(",
                "+            _AGENT_COPYDATA_ID, char_buffer_size, char_buffer_address",
                "+        )",
                "-        response = ctypes.windll.user32.SendMessageA(hwnd,",
                "-            win32con_WM_COPYDATA, ctypes.sizeof(cds), ctypes.byref(cds))",
                "+        response = ctypes.windll.user32.SendMessageA(",
                "+            hwnd, win32con_WM_COPYDATA, ctypes.sizeof(cds), ctypes.byref(cds)",
                "+        )",
                "@@ -108,3 +111,3 @@ def _query_pageant(msg):",
                "             datalen = pymap.read(4)",
                "-            retlen = struct.unpack('>I', datalen)[0]",
                "+            retlen = struct.unpack(\">I\", datalen)[0]",
                "             return datalen + pymap.read(retlen)",
                "@@ -129,6 +132,6 @@ class PageantConnection(object):",
                "         if self._response is None:",
                "-            return ''",
                "+            return \"\"",
                "         ret = self._response[:n]",
                "         self._response = self._response[n:]",
                "-        if self._response == '':",
                "+        if self._response == \"\":",
                "             self._response = None",
                "diff --git a/setup.cfg b/setup.cfg",
                "index 2d673ea4..bf86db42 100644",
                "--- a/setup.cfg",
                "+++ b/setup.cfg",
                "@@ -11,3 +11,5 @@ omit = paramiko/_winapi.py",
                " exclude = sites,.git,build,dist,demos,tests",
                "-ignore = E124,E125,E128,E261,E301,E302,E303,E402,E721,W503",
                "+# NOTE: W503, E203 are concessions to black 18.0b5 and could be reinstated",
                "+# later if fixed on that end.",
                "+ignore = E124,E125,E128,E261,E301,E302,E303,E402,E721,W503,E203",
                " max-line-length = 79",
                "diff --git a/setup.py b/setup.py",
                "index d3ab1ea9..66afefaf 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -21,3 +21,3 @@ from setuptools import setup",
                "-if sys.platform == 'darwin':",
                "+if sys.platform == \"darwin\":",
                "     import setup_helper",
                "@@ -26,3 +26,3 @@ if sys.platform == 'darwin':",
                "-longdesc = '''",
                "+longdesc = \"\"\"",
                " This is a library for making SSH2 connections (client or server).",
                "@@ -37,3 +37,3 @@ To install the development version, ``pip install -e",
                " git+https://github.com/paramiko/paramiko/#egg=paramiko``.",
                "-'''",
                "+\"\"\"",
                "@@ -42,5 +42,5 @@ git+https://github.com/paramiko/paramiko/#egg=paramiko``.",
                " _locals = {}",
                "-with open('paramiko/_version.py') as fp:",
                "+with open(\"paramiko/_version.py\") as fp:",
                "     exec(fp.read(), None, _locals)",
                "-version = _locals['__version__']",
                "+version = _locals[\"__version__\"]",
                "@@ -54,28 +54,25 @@ setup(",
                "     url=\"https://github.com/paramiko/paramiko/\",",
                "-    packages=['paramiko'],",
                "-    license='LGPL',",
                "-    platforms='Posix; MacOS X; Windows',",
                "+    packages=[\"paramiko\"],",
                "+    license=\"LGPL\",",
                "+    platforms=\"Posix; MacOS X; Windows\",",
                "     classifiers=[",
                "-        'Development Status :: 5 - Production/Stable',",
                "-        'Intended Audience :: Developers',",
                "-        'License :: OSI Approved :: '",
                "-        'GNU Library or Lesser General Public License (LGPL)',",
                "-        'Operating System :: OS Independent',",
                "-        'Topic :: Internet',",
                "-        'Topic :: Security :: Cryptography',",
                "-        'Programming Language :: Python',",
                "-        'Programming Language :: Python :: 2',",
                "-        'Programming Language :: Python :: 2.6',",
                "-        'Programming Language :: Python :: 2.7',",
                "-        'Programming Language :: Python :: 3',",
                "-        'Programming Language :: Python :: 3.2',",
                "-        'Programming Language :: Python :: 3.3',",
                "-        'Programming Language :: Python :: 3.4',",
                "-        'Programming Language :: Python :: 3.5',",
                "-        'Programming Language :: Python :: 3.6',",
                "-    ],",
                "-    install_requires=[",
                "-        'cryptography>=1.1',",
                "-        'pyasn1>=0.1.7',",
                "+        \"Development Status :: 5 - Production/Stable\",",
                "+        \"Intended Audience :: Developers\",",
                "+        \"License :: OSI Approved :: \"",
                "+        \"GNU Library or Lesser General Public License (LGPL)\",",
                "+        \"Operating System :: OS Independent\",",
                "+        \"Topic :: Internet\",",
                "+        \"Topic :: Security :: Cryptography\",",
                "+        \"Programming Language :: Python\",",
                "+        \"Programming Language :: Python :: 2\",",
                "+        \"Programming Language :: Python :: 2.6\",",
                "+        \"Programming Language :: Python :: 2.7\",",
                "+        \"Programming Language :: Python :: 3\",",
                "+        \"Programming Language :: Python :: 3.2\",",
                "+        \"Programming Language :: Python :: 3.3\",",
                "+        \"Programming Language :: Python :: 3.4\",",
                "+        \"Programming Language :: Python :: 3.5\",",
                "+        \"Programming Language :: Python :: 3.6\",",
                "     ],",
                "+    install_requires=[\"cryptography>=1.1\", \"pyasn1>=0.1.7\"],",
                " )",
                "diff --git a/setup_helper.py b/setup_helper.py",
                "index c359a16c..d0a8700e 100644",
                "--- a/setup_helper.py",
                "+++ b/setup_helper.py",
                "@@ -42,2 +42,3 @@ except ImportError:",
                "+",
                " def _get_gid(name):",
                "@@ -54,2 +55,3 @@ def _get_gid(name):",
                "+",
                " def _get_uid(name):",
                "@@ -66,4 +68,12 @@ def _get_uid(name):",
                "-def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0,",
                "-                 owner=None, group=None):",
                "+",
                "+def make_tarball(",
                "+    base_name,",
                "+    base_dir,",
                "+    compress=\"gzip\",",
                "+    verbose=0,",
                "+    dry_run=0,",
                "+    owner=None,",
                "+    group=None,",
                "+):",
                "     \"\"\"Create a tar file from all the files under 'base_dir'.",
                "@@ -89,15 +99,13 @@ def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0,",
                "-    compress_ext = {",
                "-        'gzip': \".gz\",",
                "-        'bzip2': '.bz2',",
                "-        'compress': \".Z\",",
                "-    }",
                "+    compress_ext = {\"gzip\": \".gz\", \"bzip2\": \".bz2\", \"compress\": \".Z\"}",
                "     # flags for compression program, each element of list will be an argument",
                "-    tarfile_compress_flag = {'gzip': 'gz', 'bzip2': 'bz2'}",
                "-    compress_flags = {'compress': [\"-f\"]}",
                "+    tarfile_compress_flag = {\"gzip\": \"gz\", \"bzip2\": \"bz2\"}",
                "+    compress_flags = {\"compress\": [\"-f\"]}",
                "     if compress is not None and compress not in compress_ext.keys():",
                "-        raise ValueError(\"bad value for 'compress': must be None, 'gzip',\"",
                "-                         \"'bzip2' or 'compress'\")",
                "+        raise ValueError(",
                "+            \"bad value for 'compress': must be None, 'gzip',\"",
                "+            \"'bzip2' or 'compress'\"",
                "+        )",
                "@@ -107,6 +115,6 @@ def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0,",
                "-    mode = 'w:' + tarfile_compress_flag.get(compress, '')",
                "+    mode = \"w:\" + tarfile_compress_flag.get(compress, \"\")",
                "     mkpath(os.path.dirname(archive_name), dry_run=dry_run)",
                "-    log.info('Creating tar file %s with mode %s' % (archive_name, mode))",
                "+    log.info(\"Creating tar file %s with mode %s\" % (archive_name, mode))",
                "@@ -138,4 +146,6 @@ def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0,",
                "     if compress and compress not in tarfile_compress_flag:",
                "-        spawn([compress] + compress_flags[compress] + [archive_name],",
                "-              dry_run=dry_run)",
                "+        spawn(",
                "+            [compress] + compress_flags[compress] + [archive_name],",
                "+            dry_run=dry_run,",
                "+        )",
                "         return archive_name + compress_ext[compress]",
                "@@ -146,6 +156,6 @@ def make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0,",
                " _custom_formats = {",
                "-    'gztar': (make_tarball, [('compress', 'gzip')], \"gzip'ed tar-file\"),",
                "-    'bztar': (make_tarball, [('compress', 'bzip2')], \"bzip2'ed tar-file\"),",
                "-    'ztar': (make_tarball, [('compress', 'compress')], \"compressed tar file\"),",
                "-    'tar': (make_tarball, [('compress', None)], \"uncompressed tar file\"),",
                "+    \"gztar\": (make_tarball, [(\"compress\", \"gzip\")], \"gzip'ed tar-file\"),",
                "+    \"bztar\": (make_tarball, [(\"compress\", \"bzip2\")], \"bzip2'ed tar-file\"),",
                "+    \"ztar\": (make_tarball, [(\"compress\", \"compress\")], \"compressed tar file\"),",
                "+    \"tar\": (make_tarball, [(\"compress\", None)], \"uncompressed tar file\"),",
                " }",
                "diff --git a/sites/shared_conf.py b/sites/shared_conf.py",
                "index 99fab315..aaea43cc 100644",
                "--- a/sites/shared_conf.py",
                "+++ b/sites/shared_conf.py",
                "@@ -7,19 +7,14 @@ import alabaster",
                " html_theme_path = [alabaster.get_path()]",
                "-extensions = ['alabaster', 'sphinx.ext.intersphinx']",
                "+extensions = [\"alabaster\", \"sphinx.ext.intersphinx\"]",
                " # Paths relative to invoking conf.py - not this shared file",
                "-html_theme = 'alabaster'",
                "+html_theme = \"alabaster\"",
                " html_theme_options = {",
                "-    'description': \"A Python implementation of SSHv2.\",",
                "-    'github_user': 'paramiko',",
                "-    'github_repo': 'paramiko',",
                "-    'analytics_id': 'UA-18486793-2',",
                "-    'travis_button': True,",
                "+    \"description\": \"A Python implementation of SSHv2.\",",
                "+    \"github_user\": \"paramiko\",",
                "+    \"github_repo\": \"paramiko\",",
                "+    \"analytics_id\": \"UA-18486793-2\",",
                "+    \"travis_button\": True,",
                " }",
                " html_sidebars = {",
                "-    '**': [",
                "-        'about.html',",
                "-        'navigation.html',",
                "-        'searchbox.html',",
                "-        'donate.html',",
                "-    ]",
                "+    \"**\": [\"about.html\", \"navigation.html\", \"searchbox.html\", \"donate.html\"]",
                " }",
                "@@ -27,14 +22,12 @@ html_sidebars = {",
                " # Everything intersphinx's to Python",
                "-intersphinx_mapping = {",
                "-    'python': ('http://docs.python.org/2.6', None),",
                "-}",
                "+intersphinx_mapping = {\"python\": (\"http://docs.python.org/2.6\", None)}",
                " # Regular settings",
                "-project = 'Paramiko'",
                "+project = \"Paramiko\"",
                " year = datetime.now().year",
                "-copyright = '%d Jeff Forcier' % year",
                "-master_doc = 'index'",
                "-templates_path = ['_templates']",
                "-exclude_trees = ['_build']",
                "-source_suffix = '.rst'",
                "-default_role = 'obj'",
                "+copyright = \"%d Jeff Forcier\" % year",
                "+master_doc = \"index\"",
                "+templates_path = [\"_templates\"]",
                "+exclude_trees = [\"_build\"]",
                "+source_suffix = \".rst\"",
                "+default_role = \"obj\"",
                "diff --git a/sites/www/conf.py b/sites/www/conf.py",
                "index c7ba0a86..00944871 100644",
                "--- a/sites/www/conf.py",
                "+++ b/sites/www/conf.py",
                "@@ -5,3 +5,3 @@ from os.path import abspath, join, dirname",
                "-sys.path.append(abspath(join(dirname(__file__), '..')))",
                "+sys.path.append(abspath(join(dirname(__file__), \"..\")))",
                " from shared_conf import *",
                "@@ -9,3 +9,3 @@ from shared_conf import *",
                " # Releases changelog extension",
                "-extensions.append('releases')",
                "+extensions.append(\"releases\")",
                " releases_release_uri = \"https://github.com/paramiko/paramiko/tree/%s\"",
                "@@ -15,10 +15,10 @@ releases_issue_uri = \"https://github.com/paramiko/paramiko/issues/%s\"",
                " # under RTD.",
                "-target = join(dirname(__file__), '..', 'docs', '_build')",
                "-if os.environ.get('READTHEDOCS') == 'True':",
                "-    target = 'http://docs.paramiko.org/en/latest/'",
                "-intersphinx_mapping['docs'] = (target, None)",
                "+target = join(dirname(__file__), \"..\", \"docs\", \"_build\")",
                "+if os.environ.get(\"READTHEDOCS\") == \"True\":",
                "+    target = \"http://docs.paramiko.org/en/latest/\"",
                "+intersphinx_mapping[\"docs\"] = (target, None)",
                " # Sister-site links to API docs",
                "-html_theme_options['extra_nav_links'] = {",
                "-    \"API Docs\": 'http://docs.paramiko.org',",
                "+html_theme_options[\"extra_nav_links\"] = {",
                "+    \"API Docs\": \"http://docs.paramiko.org\"",
                " }",
                "diff --git a/tasks.py b/tasks.py",
                "index 795a9c99..6ea0a2c4 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -109,3 +109,3 @@ def release(ctx, sdist=True, wheel=True, sign=True, dry_run=False, index=None):",
                "     publish(",
                "-        ctx, sdist=sdist, wheel=wheel, sign=sign, dry_run=dry_run, index=index,",
                "+        ctx, sdist=sdist, wheel=wheel, sign=sign, dry_run=dry_run, index=index",
                "     )",
                "@@ -124,11 +124,3 @@ release_coll.tasks[\"publish\"] = release",
                " ns = Collection(",
                "-    test,",
                "-    coverage,",
                "-    guard,",
                "-    release_coll,",
                "-    docs,",
                "-    www,",
                "-    sites,",
                "-    travis,",
                "-    blacken,",
                "+    test, coverage, guard, release_coll, docs, www, sites, travis, blacken",
                " )",
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index d1967a73..2b509c5c 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -21,3 +21,3 @@ from .util import _support",
                " # hiding enabled, but also don't want all the logging to gum up the terminal.)",
                "-if not os.environ.get('DISABLE_LOGGING', False):",
                "+if not os.environ.get(\"DISABLE_LOGGING\", False):",
                "     logging.basicConfig(",
                "@@ -45,3 +45,3 @@ def make_sftp_folder():",
                "     # safety. Then again...why would someone have such a folder???",
                "-    path = os.environ.get('TEST_FOLDER', 'paramiko-test-target')",
                "+    path = os.environ.get(\"TEST_FOLDER\", \"paramiko-test-target\")",
                "     # Forcibly nuke this directory locally, since at the moment, the below",
                "@@ -54,3 +54,3 @@ def make_sftp_folder():",
                "-@pytest.fixture#(scope='session')",
                "+@pytest.fixture  # (scope='session')",
                " def sftp_server():",
                "@@ -71,3 +71,3 @@ def sftp_server():",
                "     # Auth",
                "-    host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+    host_key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "     ts.add_server_key(host_key)",
                "@@ -76,3 +76,3 @@ def sftp_server():",
                "     server = StubServer()",
                "-    ts.set_subsystem_handler('sftp', SFTPServer, StubSFTPServer)",
                "+    ts.set_subsystem_handler(\"sftp\", SFTPServer, StubSFTPServer)",
                "     ts.start_server(event, server)",
                "@@ -81,3 +81,3 @@ def sftp_server():",
                "     # Make & yield connection.",
                "-    tc.connect(username='slowdive', password='pygmalion')",
                "+    tc.connect(username=\"slowdive\", password=\"pygmalion\")",
                "     yield tc",
                "diff --git a/tests/loop.py b/tests/loop.py",
                "index 6c432867..dd1f5a0c 100644",
                "--- a/tests/loop.py",
                "+++ b/tests/loop.py",
                "@@ -24,3 +24,3 @@ from paramiko.common import asbytes",
                "-class LoopSocket (object):",
                "+class LoopSocket(object):",
                "     \"\"\"",
                "@@ -30,3 +30,3 @@ class LoopSocket (object):",
                "     \"\"\"",
                "-    ",
                "+",
                "     def __init__(self):",
                "@@ -86,3 +86,3 @@ class LoopSocket (object):",
                "             self.__lock.release()",
                "-            ",
                "+",
                "     def __unlink(self):",
                "@@ -98,3 +98 @@ class LoopSocket (object):",
                "             m.__unlink()",
                "-",
                "-",
                "diff --git a/tests/stub_sftp.py b/tests/stub_sftp.py",
                "index 1b3d7387..06ceb419 100644",
                "--- a/tests/stub_sftp.py",
                "+++ b/tests/stub_sftp.py",
                "@@ -26,4 +26,10 @@ import sys",
                " from paramiko import (",
                "-    ServerInterface, SFTPServerInterface, SFTPServer, SFTPAttributes,",
                "-    SFTPHandle, SFTP_OK, AUTH_SUCCESSFUL, OPEN_SUCCEEDED,",
                "+    ServerInterface,",
                "+    SFTPServerInterface,",
                "+    SFTPServer,",
                "+    SFTPAttributes,",
                "+    SFTPHandle,",
                "+    SFTP_OK,",
                "+    AUTH_SUCCESSFUL,",
                "+    OPEN_SUCCEEDED,",
                " )",
                "@@ -32,3 +38,3 @@ from paramiko.common import o666",
                "-class StubServer (ServerInterface):",
                "+class StubServer(ServerInterface):",
                "     def check_auth_password(self, username, password):",
                "@@ -41,3 +47,3 @@ class StubServer (ServerInterface):",
                "-class StubSFTPHandle (SFTPHandle):",
                "+class StubSFTPHandle(SFTPHandle):",
                "     def stat(self):",
                "@@ -58,3 +64,3 @@ class StubSFTPHandle (SFTPHandle):",
                "-class StubSFTPServer (SFTPServerInterface):",
                "+class StubSFTPServer(SFTPServerInterface):",
                "     # assume current folder is a fine root",
                "@@ -62,3 +68,3 @@ class StubSFTPServer (SFTPServerInterface):",
                "     ROOT = os.getcwd()",
                "-        ",
                "+",
                "     def _realpath(self, path):",
                "@@ -72,3 +78,5 @@ class StubSFTPServer (SFTPServerInterface):",
                "             for fname in flist:",
                "-                attr = SFTPAttributes.from_stat(os.stat(os.path.join(path, fname)))",
                "+                attr = SFTPAttributes.from_stat(",
                "+                    os.stat(os.path.join(path, fname))",
                "+                )",
                "                 attr.filename = fname",
                "@@ -96,5 +104,5 @@ class StubSFTPServer (SFTPServerInterface):",
                "         try:",
                "-            binary_flag = getattr(os, 'O_BINARY', 0)",
                "+            binary_flag = getattr(os, \"O_BINARY\", 0)",
                "             flags |= binary_flag",
                "-            mode = getattr(attr, 'st_mode', None)",
                "+            mode = getattr(attr, \"st_mode\", None)",
                "             if mode is not None:",
                "@@ -112,13 +120,13 @@ class StubSFTPServer (SFTPServerInterface):",
                "             if flags & os.O_APPEND:",
                "-                fstr = 'ab'",
                "+                fstr = \"ab\"",
                "             else:",
                "-                fstr = 'wb'",
                "+                fstr = \"wb\"",
                "         elif flags & os.O_RDWR:",
                "             if flags & os.O_APPEND:",
                "-                fstr = 'a+b'",
                "+                fstr = \"a+b\"",
                "             else:",
                "-                fstr = 'r+b'",
                "+                fstr = \"r+b\"",
                "         else:",
                "             # O_RDONLY (== 0)",
                "-            fstr = 'rb'",
                "+            fstr = \"rb\"",
                "         try:",
                "@@ -178,6 +186,6 @@ class StubSFTPServer (SFTPServerInterface):",
                "         path = self._realpath(path)",
                "-        if (len(target_path) > 0) and (target_path[0] == '/'):",
                "+        if (len(target_path) > 0) and (target_path[0] == \"/\"):",
                "             # absolute symlink",
                "             target_path = os.path.join(self.ROOT, target_path[1:])",
                "-            if target_path[:2] == '//':",
                "+            if target_path[:2] == \"//\":",
                "                 # bug in os.path.join",
                "@@ -187,5 +195,5 @@ class StubSFTPServer (SFTPServerInterface):",
                "             abspath = os.path.join(os.path.dirname(path), target_path)",
                "-            if abspath[:len(self.ROOT)] != self.ROOT:",
                "+            if abspath[: len(self.ROOT)] != self.ROOT:",
                "                 # this symlink isn't going to work anyway -- just break it immediately",
                "-                target_path = '<error>'",
                "+                target_path = \"<error>\"",
                "         try:",
                "@@ -204,8 +212,8 @@ class StubSFTPServer (SFTPServerInterface):",
                "         if os.path.isabs(symlink):",
                "-            if symlink[:len(self.ROOT)] == self.ROOT:",
                "-                symlink = symlink[len(self.ROOT):]",
                "-                if (len(symlink) == 0) or (symlink[0] != '/'):",
                "-                    symlink = '/' + symlink",
                "+            if symlink[: len(self.ROOT)] == self.ROOT:",
                "+                symlink = symlink[len(self.ROOT) :]",
                "+                if (len(symlink) == 0) or (symlink[0] != \"/\"):",
                "+                    symlink = \"/\" + symlink",
                "             else:",
                "-                symlink = '<error>'",
                "+                symlink = \"<error>\"",
                "         return symlink",
                "diff --git a/tests/test_auth.py b/tests/test_auth.py",
                "index e9c75fd5..45dcb3a4 100644",
                "--- a/tests/test_auth.py",
                "+++ b/tests/test_auth.py",
                "@@ -27,4 +27,9 @@ import unittest",
                " from paramiko import (",
                "-    Transport, ServerInterface, RSAKey, DSSKey, BadAuthenticationType,",
                "-    InteractiveQuery, AuthenticationException,",
                "+    Transport,",
                "+    ServerInterface,",
                "+    RSAKey,",
                "+    DSSKey,",
                "+    BadAuthenticationType,",
                "+    InteractiveQuery,",
                "+    AuthenticationException,",
                " )",
                "@@ -37,32 +42,35 @@ from .util import _support, slow",
                "-_pwd = u('\\u2022')",
                "+_pwd = u(\"\\u2022\")",
                "-class NullServer (ServerInterface):",
                "+class NullServer(ServerInterface):",
                "     paranoid_did_password = False",
                "     paranoid_did_public_key = False",
                "-    paranoid_key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "+    paranoid_key = DSSKey.from_private_key_file(_support(\"test_dss.key\"))",
                "     def get_allowed_auths(self, username):",
                "-        if username == 'slowdive':",
                "-            return 'publickey,password'",
                "-        if username == 'paranoid':",
                "-            if not self.paranoid_did_password and not self.paranoid_did_public_key:",
                "-                return 'publickey,password'",
                "+        if username == \"slowdive\":",
                "+            return \"publickey,password\"",
                "+        if username == \"paranoid\":",
                "+            if (",
                "+                not self.paranoid_did_password",
                "+                and not self.paranoid_did_public_key",
                "+            ):",
                "+                return \"publickey,password\"",
                "             elif self.paranoid_did_password:",
                "-                return 'publickey'",
                "+                return \"publickey\"",
                "             else:",
                "-                return 'password'",
                "-        if username == 'commie':",
                "-            return 'keyboard-interactive'",
                "-        if username == 'utf8':",
                "-            return 'password'",
                "-        if username == 'non-utf8':",
                "-            return 'password'",
                "-        return 'publickey'",
                "+                return \"password\"",
                "+        if username == \"commie\":",
                "+            return \"keyboard-interactive\"",
                "+        if username == \"utf8\":",
                "+            return \"password\"",
                "+        if username == \"non-utf8\":",
                "+            return \"password\"",
                "+        return \"publickey\"",
                "     def check_auth_password(self, username, password):",
                "-        if (username == 'slowdive') and (password == 'pygmalion'):",
                "+        if (username == \"slowdive\") and (password == \"pygmalion\"):",
                "             return AUTH_SUCCESSFUL",
                "-        if (username == 'paranoid') and (password == 'paranoid'):",
                "+        if (username == \"paranoid\") and (password == \"paranoid\"):",
                "             # 2-part auth (even openssh doesn't support this)",
                "@@ -72,7 +80,7 @@ class NullServer (ServerInterface):",
                "             return AUTH_PARTIALLY_SUCCESSFUL",
                "-        if (username == 'utf8') and (password == _pwd):",
                "+        if (username == \"utf8\") and (password == _pwd):",
                "             return AUTH_SUCCESSFUL",
                "-        if (username == 'non-utf8') and (password == '\\xff'):",
                "+        if (username == \"non-utf8\") and (password == \"\\xff\"):",
                "             return AUTH_SUCCESSFUL",
                "-        if username == 'bad-server':",
                "+        if username == \"bad-server\":",
                "             raise Exception(\"Ack!\")",
                "@@ -81,3 +89,3 @@ class NullServer (ServerInterface):",
                "     def check_auth_publickey(self, username, key):",
                "-        if (username == 'paranoid') and (key == self.paranoid_key):",
                "+        if (username == \"paranoid\") and (key == self.paranoid_key):",
                "             # 2-part auth",
                "@@ -90,5 +98,7 @@ class NullServer (ServerInterface):",
                "     def check_auth_interactive(self, username, submethods):",
                "-        if username == 'commie':",
                "+        if username == \"commie\":",
                "             self.username = username",
                "-            return InteractiveQuery('password', 'Please enter a password.', ('Password', False))",
                "+            return InteractiveQuery(",
                "+                \"password\", \"Please enter a password.\", (\"Password\", False)",
                "+            )",
                "         return AUTH_FAILED",
                "@@ -96,4 +106,4 @@ class NullServer (ServerInterface):",
                "     def check_auth_interactive_response(self, responses):",
                "-        if self.username == 'commie':",
                "-            if (len(responses) == 1) and (responses[0] == 'cat'):",
                "+        if self.username == \"commie\":",
                "+            if (len(responses) == 1) and (responses[0] == \"cat\"):",
                "                 return AUTH_SUCCESSFUL",
                "@@ -102,4 +112,3 @@ class NullServer (ServerInterface):",
                "-class AuthTest (unittest.TestCase):",
                "-",
                "+class AuthTest(unittest.TestCase):",
                "     def setUp(self):",
                "@@ -118,3 +127,3 @@ class AuthTest (unittest.TestCase):",
                "     def start_server(self):",
                "-        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "         self.public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -138,4 +147,7 @@ class AuthTest (unittest.TestCase):",
                "         try:",
                "-            self.tc.connect(hostkey=self.public_host_key,",
                "-                            username='unknown', password='error')",
                "+            self.tc.connect(",
                "+                hostkey=self.public_host_key,",
                "+                username=\"unknown\",",
                "+                password=\"error\",",
                "+            )",
                "             self.assertTrue(False)",
                "@@ -144,3 +156,3 @@ class AuthTest (unittest.TestCase):",
                "             self.assertEqual(BadAuthenticationType, etype)",
                "-            self.assertEqual(['publickey'], evalue.allowed_types)",
                "+            self.assertEqual([\"publickey\"], evalue.allowed_types)",
                "@@ -154,3 +166,3 @@ class AuthTest (unittest.TestCase):",
                "         try:",
                "-            self.tc.auth_password(username='slowdive', password='error')",
                "+            self.tc.auth_password(username=\"slowdive\", password=\"error\")",
                "             self.assertTrue(False)",
                "@@ -159,3 +171,3 @@ class AuthTest (unittest.TestCase):",
                "             self.assertTrue(issubclass(etype, AuthenticationException))",
                "-        self.tc.auth_password(username='slowdive', password='pygmalion')",
                "+        self.tc.auth_password(username=\"slowdive\", password=\"pygmalion\")",
                "         self.verify_finished()",
                "@@ -168,6 +180,8 @@ class AuthTest (unittest.TestCase):",
                "         self.tc.connect(hostkey=self.public_host_key)",
                "-        remain = self.tc.auth_password(username='paranoid', password='paranoid')",
                "-        self.assertEqual(['publickey'], remain)",
                "-        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "-        remain = self.tc.auth_publickey(username='paranoid', key=key)",
                "+        remain = self.tc.auth_password(",
                "+            username=\"paranoid\", password=\"paranoid\"",
                "+        )",
                "+        self.assertEqual([\"publickey\"], remain)",
                "+        key = DSSKey.from_private_key_file(_support(\"test_dss.key\"))",
                "+        remain = self.tc.auth_publickey(username=\"paranoid\", key=key)",
                "         self.assertEqual([], remain)",
                "@@ -186,6 +200,7 @@ class AuthTest (unittest.TestCase):",
                "             self.got_prompts = prompts",
                "-            return ['cat']",
                "-        remain = self.tc.auth_interactive('commie', handler)",
                "-        self.assertEqual(self.got_title, 'password')",
                "-        self.assertEqual(self.got_prompts, [('Password', False)])",
                "+            return [\"cat\"]",
                "+",
                "+        remain = self.tc.auth_interactive(\"commie\", handler)",
                "+        self.assertEqual(self.got_title, \"password\")",
                "+        self.assertEqual(self.got_prompts, [(\"Password\", False)])",
                "         self.assertEqual([], remain)",
                "@@ -200,3 +215,3 @@ class AuthTest (unittest.TestCase):",
                "         self.tc.connect(hostkey=self.public_host_key)",
                "-        remain = self.tc.auth_password('commie', 'cat')",
                "+        remain = self.tc.auth_password(\"commie\", \"cat\")",
                "         self.assertEqual([], remain)",
                "@@ -210,3 +225,3 @@ class AuthTest (unittest.TestCase):",
                "         self.tc.connect(hostkey=self.public_host_key)",
                "-        remain = self.tc.auth_password('utf8', _pwd)",
                "+        remain = self.tc.auth_password(\"utf8\", _pwd)",
                "         self.assertEqual([], remain)",
                "@@ -221,3 +236,3 @@ class AuthTest (unittest.TestCase):",
                "         self.tc.connect(hostkey=self.public_host_key)",
                "-        remain = self.tc.auth_password('non-utf8', '\\xff')",
                "+        remain = self.tc.auth_password(\"non-utf8\", \"\\xff\")",
                "         self.assertEqual([], remain)",
                "@@ -233,3 +248,3 @@ class AuthTest (unittest.TestCase):",
                "         try:",
                "-            remain = self.tc.auth_password('bad-server', 'hello')",
                "+            remain = self.tc.auth_password(\"bad-server\", \"hello\")",
                "         except:",
                "diff --git a/tests/test_buffered_pipe.py b/tests/test_buffered_pipe.py",
                "index 03616c55..28d6e4a2 100644",
                "--- a/tests/test_buffered_pipe.py",
                "+++ b/tests/test_buffered_pipe.py",
                "@@ -32,5 +32,5 @@ from paramiko.py3compat import b",
                " def delay_thread(p):",
                "-    p.feed('a')",
                "+    p.feed(\"a\")",
                "     time.sleep(0.5)",
                "-    p.feed('b')",
                "+    p.feed(\"b\")",
                "     p.close()",
                "@@ -47,11 +47,11 @@ class BufferedPipeTest(unittest.TestCase):",
                "         self.assertTrue(not p.read_ready())",
                "-        p.feed('hello.')",
                "+        p.feed(\"hello.\")",
                "         self.assertTrue(p.read_ready())",
                "         data = p.read(6)",
                "-        self.assertEqual(b'hello.', data)",
                "+        self.assertEqual(b\"hello.\", data)",
                "-        p.feed('plus/minus')",
                "-        self.assertEqual(b'plu', p.read(3))",
                "-        self.assertEqual(b's/m', p.read(3))",
                "-        self.assertEqual(b'inus', p.read(4))",
                "+        p.feed(\"plus/minus\")",
                "+        self.assertEqual(b\"plu\", p.read(3))",
                "+        self.assertEqual(b\"s/m\", p.read(3))",
                "+        self.assertEqual(b\"inus\", p.read(4))",
                "@@ -59,3 +59,3 @@ class BufferedPipeTest(unittest.TestCase):",
                "         self.assertTrue(not p.read_ready())",
                "-        self.assertEqual(b'', p.read(1))",
                "+        self.assertEqual(b\"\", p.read(1))",
                "@@ -65,3 +65,3 @@ class BufferedPipeTest(unittest.TestCase):",
                "         threading.Thread(target=delay_thread, args=(p,)).start()",
                "-        self.assertEqual(b'a', p.read(1, 0.1))",
                "+        self.assertEqual(b\"a\", p.read(1, 0.1))",
                "         try:",
                "@@ -71,4 +71,4 @@ class BufferedPipeTest(unittest.TestCase):",
                "             pass",
                "-        self.assertEqual(b'b', p.read(1, 1.0))",
                "-        self.assertEqual(b'', p.read(1))",
                "+        self.assertEqual(b\"b\", p.read(1, 1.0))",
                "+        self.assertEqual(b\"\", p.read(1))",
                "@@ -78,3 +78,3 @@ class BufferedPipeTest(unittest.TestCase):",
                "         data = p.read(1, 1.0)",
                "-        self.assertEqual(b'', data)",
                "+        self.assertEqual(b\"\", data)",
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 597c278e..ddfb33fc 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -43,5 +43,5 @@ from .util import _support, slow",
                " FINGERPRINTS = {",
                "-    'ssh-dss': b'\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c',",
                "-    'ssh-rsa': b'\\x60\\x73\\x38\\x44\\xcb\\x51\\x86\\x65\\x7f\\xde\\xda\\xa2\\x2b\\x5a\\x57\\xd5',",
                "-    'ecdsa-sha2-nistp256': b'\\x25\\x19\\xeb\\x55\\xe6\\xa1\\x47\\xff\\x4f\\x38\\xd2\\x75\\x6f\\xa5\\xd5\\x60',",
                "+    \"ssh-dss\": b\"\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c\",",
                "+    \"ssh-rsa\": b\"\\x60\\x73\\x38\\x44\\xcb\\x51\\x86\\x65\\x7f\\xde\\xda\\xa2\\x2b\\x5a\\x57\\xd5\",",
                "+    \"ecdsa-sha2-nistp256\": b\"\\x25\\x19\\xeb\\x55\\xe6\\xa1\\x47\\xff\\x4f\\x38\\xd2\\x75\\x6f\\xa5\\xd5\\x60\",",
                " }",
                "@@ -49,6 +49,6 @@ FINGERPRINTS = {",
                "-class NullServer (paramiko.ServerInterface):",
                "+class NullServer(paramiko.ServerInterface):",
                "     def __init__(self, *args, **kwargs):",
                "         # Allow tests to enable/disable specific key types",
                "-        self.__allowed_keys = kwargs.pop('allowed_keys', [])",
                "+        self.__allowed_keys = kwargs.pop(\"allowed_keys\", [])",
                "         super(NullServer, self).__init__(*args, **kwargs)",
                "@@ -56,8 +56,8 @@ class NullServer (paramiko.ServerInterface):",
                "     def get_allowed_auths(self, username):",
                "-        if username == 'slowdive':",
                "-            return 'publickey,password'",
                "-        return 'publickey'",
                "+        if username == \"slowdive\":",
                "+            return \"publickey,password\"",
                "+        return \"publickey\"",
                "     def check_auth_password(self, username, password):",
                "-        if (username == 'slowdive') and (password == 'pygmalion'):",
                "+        if (username == \"slowdive\") and (password == \"pygmalion\"):",
                "             return paramiko.AUTH_SUCCESSFUL",
                "@@ -71,4 +71,4 @@ class NullServer (paramiko.ServerInterface):",
                "         if (",
                "-            key.get_name() in self.__allowed_keys and",
                "-            key.get_fingerprint() == expected",
                "+            key.get_name() in self.__allowed_keys",
                "+            and key.get_fingerprint() == expected",
                "         ):",
                "@@ -81,3 +81,3 @@ class NullServer (paramiko.ServerInterface):",
                "     def check_channel_exec_request(self, channel, command):",
                "-        if command != b'yes':",
                "+        if command != b\"yes\":",
                "             return False",
                "@@ -86,7 +86,6 @@ class NullServer (paramiko.ServerInterface):",
                "-class SSHClientTest (unittest.TestCase):",
                "-",
                "+class SSHClientTest(unittest.TestCase):",
                "     def setUp(self):",
                "         self.sockl = socket.socket()",
                "-        self.sockl.bind(('localhost', 0))",
                "+        self.sockl.bind((\"localhost\", 0))",
                "         self.sockl.listen(1)",
                "@@ -96,3 +95,3 @@ class SSHClientTest (unittest.TestCase):",
                "             port=self.port,",
                "-            username='slowdive',",
                "+            username=\"slowdive\",",
                "             look_for_keys=False,",
                "@@ -111,3 +110,5 @@ class SSHClientTest (unittest.TestCase):",
                "         self.ts = paramiko.Transport(self.socks)",
                "-        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(",
                "+            _support(\"test_rsa.key\")",
                "+        )",
                "         self.ts.add_server_key(host_key)",
                "@@ -125,6 +126,8 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        run_kwargs = {'allowed_keys': kwargs.pop('allowed_keys', None)}",
                "+        run_kwargs = {\"allowed_keys\": kwargs.pop(\"allowed_keys\", None)}",
                "         # Server setup",
                "         threading.Thread(target=self._run, kwargs=run_kwargs).start()",
                "-        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(",
                "+            _support(\"test_rsa.key\")",
                "+        )",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -133,3 +136,5 @@ class SSHClientTest (unittest.TestCase):",
                "         self.tc = paramiko.SSHClient()",
                "-        self.tc.get_host_keys().add('[%s]:%d' % (self.addr, self.port), 'ssh-rsa', public_host_key)",
                "+        self.tc.get_host_keys().add(",
                "+            \"[%s]:%d\" % (self.addr, self.port), \"ssh-rsa\", public_host_key",
                "+        )",
                "@@ -142,3 +147,3 @@ class SSHClientTest (unittest.TestCase):",
                "         self.assertTrue(self.ts.is_active())",
                "-        self.assertEqual('slowdive', self.ts.get_username())",
                "+        self.assertEqual(\"slowdive\", self.ts.get_username())",
                "         self.assertEqual(True, self.ts.is_authenticated())",
                "@@ -147,13 +152,13 @@ class SSHClientTest (unittest.TestCase):",
                "         # Command execution functions?",
                "-        stdin, stdout, stderr = self.tc.exec_command('yes')",
                "+        stdin, stdout, stderr = self.tc.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "-        schan.send('Hello there.\\n')",
                "-        schan.send_stderr('This is on stderr.\\n')",
                "+        schan.send(\"Hello there.\\n\")",
                "+        schan.send_stderr(\"This is on stderr.\\n\")",
                "         schan.close()",
                "-        self.assertEqual('Hello there.\\n', stdout.readline())",
                "-        self.assertEqual('', stdout.readline())",
                "-        self.assertEqual('This is on stderr.\\n', stderr.readline())",
                "-        self.assertEqual('', stderr.readline())",
                "+        self.assertEqual(\"Hello there.\\n\", stdout.readline())",
                "+        self.assertEqual(\"\", stdout.readline())",
                "+        self.assertEqual(\"This is on stderr.\\n\", stderr.readline())",
                "+        self.assertEqual(\"\", stderr.readline())",
                "@@ -168,3 +173,3 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(password='pygmalion')",
                "+        self._test_connection(password=\"pygmalion\")",
                "@@ -174,3 +179,3 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(key_filename=_support('test_dss.key'))",
                "+        self._test_connection(key_filename=_support(\"test_dss.key\"))",
                "@@ -180,3 +185,3 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(key_filename=_support('test_rsa.key'))",
                "+        self._test_connection(key_filename=_support(\"test_rsa.key\"))",
                "@@ -186,3 +191,3 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(key_filename=_support('test_ecdsa_256.key'))",
                "+        self._test_connection(key_filename=_support(\"test_ecdsa_256.key\"))",
                "@@ -194,5 +199,5 @@ class SSHClientTest (unittest.TestCase):",
                "         types_ = {",
                "-            'rsa': 'ssh-rsa',",
                "-            'dss': 'ssh-dss',",
                "-            'ecdsa': 'ecdsa-sha2-nistp256',",
                "+            \"rsa\": \"ssh-rsa\",",
                "+            \"dss\": \"ssh-dss\",",
                "+            \"ecdsa\": \"ecdsa-sha2-nistp256\",",
                "         }",
                "@@ -201,6 +206,6 @@ class SSHClientTest (unittest.TestCase):",
                "         for attempt, accept in (",
                "-            (['rsa', 'dss'], ['dss']), # Original test #3",
                "-            (['dss', 'rsa'], ['dss']), # Ordering matters sometimes, sadly",
                "-            (['dss', 'rsa', 'ecdsa_256'], ['dss']), # Try ECDSA but fail",
                "-            (['rsa', 'ecdsa_256'], ['ecdsa']), # ECDSA success",
                "+            ([\"rsa\", \"dss\"], [\"dss\"]),  # Original test #3",
                "+            ([\"dss\", \"rsa\"], [\"dss\"]),  # Ordering matters sometimes, sadly",
                "+            ([\"dss\", \"rsa\", \"ecdsa_256\"], [\"dss\"]),  # Try ECDSA but fail",
                "+            ([\"rsa\", \"ecdsa_256\"], [\"ecdsa\"]),  # ECDSA success",
                "         ):",
                "@@ -209,3 +214,3 @@ class SSHClientTest (unittest.TestCase):",
                "                     key_filename=[",
                "-                        _support('test_{}.key'.format(x)) for x in attempt",
                "+                        _support(\"test_{}.key\".format(x)) for x in attempt",
                "                     ],",
                "@@ -225,6 +230,7 @@ class SSHClientTest (unittest.TestCase):",
                "         # various platforms trigger different errors here >_<",
                "-        self.assertRaises(SSHException,",
                "+        self.assertRaises(",
                "+            SSHException,",
                "             self._test_connection,",
                "-            key_filename=[_support('test_rsa.key')],",
                "-            allowed_keys=['ecdsa-sha2-nistp256'],",
                "+            key_filename=[_support(\"test_rsa.key\")],",
                "+            allowed_keys=[\"ecdsa-sha2-nistp256\"],",
                "         )",
                "@@ -236,3 +242,5 @@ class SSHClientTest (unittest.TestCase):",
                "         threading.Thread(target=self._run).start()",
                "-        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(",
                "+            _support(\"test_rsa.key\")",
                "+        )",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -242,3 +250,3 @@ class SSHClientTest (unittest.TestCase):",
                "         self.assertEqual(0, len(self.tc.get_host_keys()))",
                "-        self.tc.connect(password='pygmalion', **self.connect_kwargs)",
                "+        self.tc.connect(password=\"pygmalion\", **self.connect_kwargs)",
                "@@ -247,6 +255,11 @@ class SSHClientTest (unittest.TestCase):",
                "         self.assertTrue(self.ts.is_active())",
                "-        self.assertEqual('slowdive', self.ts.get_username())",
                "+        self.assertEqual(\"slowdive\", self.ts.get_username())",
                "         self.assertEqual(True, self.ts.is_authenticated())",
                "         self.assertEqual(1, len(self.tc.get_host_keys()))",
                "-        self.assertEqual(public_host_key, self.tc.get_host_keys()['[%s]:%d' % (self.addr, self.port)]['ssh-rsa'])",
                "+        self.assertEqual(",
                "+            public_host_key,",
                "+            self.tc.get_host_keys()[\"[%s]:%d\" % (self.addr, self.port)][",
                "+                \"ssh-rsa\"",
                "+            ],",
                "+        )",
                "@@ -256,5 +269,7 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        warnings.filterwarnings('ignore', 'tempnam.*')",
                "+        warnings.filterwarnings(\"ignore\", \"tempnam.*\")",
                "-        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(",
                "+            _support(\"test_rsa.key\")",
                "+        )",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -266,7 +281,9 @@ class SSHClientTest (unittest.TestCase):",
                "-        host_id = '[%s]:%d' % (self.addr, self.port)",
                "+        host_id = \"[%s]:%d\" % (self.addr, self.port)",
                "-        client.get_host_keys().add(host_id, 'ssh-rsa', public_host_key)",
                "+        client.get_host_keys().add(host_id, \"ssh-rsa\", public_host_key)",
                "         self.assertEquals(1, len(client.get_host_keys()))",
                "-        self.assertEquals(public_host_key, client.get_host_keys()[host_id]['ssh-rsa'])",
                "+        self.assertEquals(",
                "+            public_host_key, client.get_host_keys()[host_id][\"ssh-rsa\"]",
                "+        )",
                "@@ -293,3 +310,3 @@ class SSHClientTest (unittest.TestCase):",
                "         self.assertEqual(0, len(self.tc.get_host_keys()))",
                "-        self.tc.connect(**dict(self.connect_kwargs, password='pygmalion'))",
                "+        self.tc.connect(**dict(self.connect_kwargs, password=\"pygmalion\"))",
                "@@ -322,3 +339,3 @@ class SSHClientTest (unittest.TestCase):",
                "             self.assertEquals(0, len(self.tc.get_host_keys()))",
                "-            self.tc.connect(**dict(self.connect_kwargs, password='pygmalion'))",
                "+            self.tc.connect(**dict(self.connect_kwargs, password=\"pygmalion\"))",
                "@@ -337,4 +354,6 @@ class SSHClientTest (unittest.TestCase):",
                "         # Start the thread with a 1 second wait.",
                "-        threading.Thread(target=self._run, kwargs={'delay': 1}).start()",
                "-        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        threading.Thread(target=self._run, kwargs={\"delay\": 1}).start()",
                "+        host_key = paramiko.RSAKey.from_private_key_file(",
                "+            _support(\"test_rsa.key\")",
                "+        )",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -342,10 +361,8 @@ class SSHClientTest (unittest.TestCase):",
                "         self.tc = paramiko.SSHClient()",
                "-        self.tc.get_host_keys().add('[%s]:%d' % (self.addr, self.port), 'ssh-rsa', public_host_key)",
                "+        self.tc.get_host_keys().add(",
                "+            \"[%s]:%d\" % (self.addr, self.port), \"ssh-rsa\", public_host_key",
                "+        )",
                "         # Connect with a half second banner timeout.",
                "         kwargs = dict(self.connect_kwargs, banner_timeout=0.5)",
                "-        self.assertRaises(",
                "-            paramiko.SSHException,",
                "-            self.tc.connect,",
                "-            **kwargs",
                "-        )",
                "+        self.assertRaises(paramiko.SSHException, self.tc.connect, **kwargs)",
                "@@ -365,5 +382,5 @@ class SSHClientTest (unittest.TestCase):",
                "             # immediately; we're testing the try/except crap within Client.",
                "-            key_filename=[_support('test_rsa_password.key')],",
                "+            key_filename=[_support(\"test_rsa_password.key\")],",
                "             # Actual password for default 'slowdive' user",
                "-            password='pygmalion',",
                "+            password=\"pygmalion\",",
                "         )",
                "@@ -377,6 +394,3 @@ class SSHClientTest (unittest.TestCase):",
                "             return  # for python 2.6 lacks skipTest",
                "-        kwargs = dict(",
                "-            gss_kex=True,",
                "-            key_filename=[_support('test_rsa.key')],",
                "-        )",
                "+        kwargs = dict(gss_kex=True, key_filename=[_support(\"test_rsa.key\")])",
                "         self._test_connection(**kwargs)",
                "@@ -389,6 +403,3 @@ class SSHClientTest (unittest.TestCase):",
                "             return  # for python 2.6 lacks skipTest",
                "-        kwargs = dict(",
                "-            gss_auth=True,",
                "-            key_filename=[_support('test_rsa.key')],",
                "-        )",
                "+        kwargs = dict(gss_auth=True, key_filename=[_support(\"test_rsa.key\")])",
                "         self._test_connection(**kwargs)",
                "@@ -407,3 +418,4 @@ class SSHClientTest (unittest.TestCase):",
                "             self.tc.connect,",
                "-            password='pygmalion', **self.connect_kwargs",
                "+            password=\"pygmalion\",",
                "+            **self.connect_kwargs",
                "         )",
                "@@ -426,5 +438,5 @@ class SSHClientTest (unittest.TestCase):",
                "             self.tc.connect,",
                "-            password='pygmalion',",
                "+            password=\"pygmalion\",",
                "             gss_kex=True,",
                "-             **self.connect_kwargs",
                "+            **self.connect_kwargs",
                "         )",
                "diff --git a/tests/test_file.py b/tests/test_file.py",
                "index 3d2c94e6..fba14b1b 100644",
                "--- a/tests/test_file.py",
                "+++ b/tests/test_file.py",
                "@@ -32,3 +32,3 @@ from .util import needs_builtin",
                "-class LoopbackFile (BufferedFile):",
                "+class LoopbackFile(BufferedFile):",
                "     \"\"\"",
                "@@ -36,3 +36,4 @@ class LoopbackFile (BufferedFile):",
                "     \"\"\"",
                "-    def __init__(self, mode='r', bufsize=-1):",
                "+",
                "+    def __init__(self, mode=\"r\", bufsize=-1):",
                "         BufferedFile.__init__(self)",
                "@@ -43,3 +44,3 @@ class LoopbackFile (BufferedFile):",
                "     def _read(self, size):",
                "-        data = self.buffer.getvalue()[self.offset:self.offset+size]",
                "+        data = self.buffer.getvalue()[self.offset : self.offset + size]",
                "         self.offset += len(data)",
                "@@ -52,9 +53,8 @@ class LoopbackFile (BufferedFile):",
                "-class BufferedFileTest (unittest.TestCase):",
                "-",
                "+class BufferedFileTest(unittest.TestCase):",
                "     def test_1_simple(self):",
                "-        f = LoopbackFile('r')",
                "+        f = LoopbackFile(\"r\")",
                "         try:",
                "-            f.write(b'hi')",
                "-            self.assertTrue(False, 'no exception on write to read-only file')",
                "+            f.write(b\"hi\")",
                "+            self.assertTrue(False, \"no exception on write to read-only file\")",
                "         except:",
                "@@ -63,6 +63,6 @@ class BufferedFileTest (unittest.TestCase):",
                "-        f = LoopbackFile('w')",
                "+        f = LoopbackFile(\"w\")",
                "         try:",
                "             f.read(1)",
                "-            self.assertTrue(False, 'no exception to read from write-only file')",
                "+            self.assertTrue(False, \"no exception to read from write-only file\")",
                "         except:",
                "@@ -72,16 +72,18 @@ class BufferedFileTest (unittest.TestCase):",
                "     def test_2_readline(self):",
                "-        f = LoopbackFile('r+U')",
                "-        f.write(b'First line.\\nSecond line.\\r\\nThird line.\\n' +",
                "-                b'Fourth line.\\nFinal line non-terminated.')",
                "+        f = LoopbackFile(\"r+U\")",
                "+        f.write(",
                "+            b\"First line.\\nSecond line.\\r\\nThird line.\\n\"",
                "+            + b\"Fourth line.\\nFinal line non-terminated.\"",
                "+        )",
                "-        self.assertEqual(f.readline(), 'First line.\\n')",
                "+        self.assertEqual(f.readline(), \"First line.\\n\")",
                "         # universal newline mode should convert this linefeed:",
                "-        self.assertEqual(f.readline(), 'Second line.\\n')",
                "+        self.assertEqual(f.readline(), \"Second line.\\n\")",
                "         # truncated line:",
                "-        self.assertEqual(f.readline(7), 'Third l')",
                "-        self.assertEqual(f.readline(), 'ine.\\n')",
                "+        self.assertEqual(f.readline(7), \"Third l\")",
                "+        self.assertEqual(f.readline(), \"ine.\\n\")",
                "         # newline should be detected and only the fourth line returned",
                "-        self.assertEqual(f.readline(39), 'Fourth line.\\n')",
                "-        self.assertEqual(f.readline(), 'Final line non-terminated.')",
                "-        self.assertEqual(f.readline(), '')",
                "+        self.assertEqual(f.readline(39), \"Fourth line.\\n\")",
                "+        self.assertEqual(f.readline(), \"Final line non-terminated.\")",
                "+        self.assertEqual(f.readline(), \"\")",
                "         f.close()",
                "@@ -89,3 +91,3 @@ class BufferedFileTest (unittest.TestCase):",
                "             f.readline()",
                "-            self.assertTrue(False, 'no exception on readline of closed file')",
                "+            self.assertTrue(False, \"no exception on readline of closed file\")",
                "         except IOError:",
                "@@ -100,7 +102,7 @@ class BufferedFileTest (unittest.TestCase):",
                "         \"\"\"",
                "-        f = LoopbackFile('r+U')",
                "-        f.write(b'First line.\\r')",
                "-        self.assertEqual(f.readline(), 'First line.\\n')",
                "-        f.write(b'\\nSecond.\\r\\n')",
                "-        self.assertEqual(f.readline(), 'Second.\\n')",
                "+        f = LoopbackFile(\"r+U\")",
                "+        f.write(b\"First line.\\r\")",
                "+        self.assertEqual(f.readline(), \"First line.\\n\")",
                "+        f.write(b\"\\nSecond.\\r\\n\")",
                "+        self.assertEqual(f.readline(), \"Second.\\n\")",
                "         f.close()",
                "@@ -112,8 +114,8 @@ class BufferedFileTest (unittest.TestCase):",
                "         \"\"\"",
                "-        f = LoopbackFile('r+', 1)",
                "-        f.write(b'Complete line.\\nIncomplete line.')",
                "-        self.assertEqual(f.readline(), 'Complete line.\\n')",
                "-        self.assertEqual(f.readline(), '')",
                "-        f.write('..\\n')",
                "-        self.assertEqual(f.readline(), 'Incomplete line...\\n')",
                "+        f = LoopbackFile(\"r+\", 1)",
                "+        f.write(b\"Complete line.\\nIncomplete line.\")",
                "+        self.assertEqual(f.readline(), \"Complete line.\\n\")",
                "+        self.assertEqual(f.readline(), \"\")",
                "+        f.write(\"..\\n\")",
                "+        self.assertEqual(f.readline(), \"Incomplete line...\\n\")",
                "         f.close()",
                "@@ -124,10 +126,10 @@ class BufferedFileTest (unittest.TestCase):",
                "         \"\"\"",
                "-        f = LoopbackFile('r+', 512)",
                "-        f.write('Not\\nquite\\n512 bytes.\\n')",
                "-        self.assertEqual(f.read(1), b'')",
                "+        f = LoopbackFile(\"r+\", 512)",
                "+        f.write(\"Not\\nquite\\n512 bytes.\\n\")",
                "+        self.assertEqual(f.read(1), b\"\")",
                "         f.flush()",
                "-        self.assertEqual(f.read(5), b'Not\\nq')",
                "-        self.assertEqual(f.read(10), b'uite\\n512 b')",
                "-        self.assertEqual(f.read(9), b'ytes.\\n')",
                "-        self.assertEqual(f.read(3), b'')",
                "+        self.assertEqual(f.read(5), b\"Not\\nq\")",
                "+        self.assertEqual(f.read(10), b\"uite\\n512 b\")",
                "+        self.assertEqual(f.read(9), b\"ytes.\\n\")",
                "+        self.assertEqual(f.read(3), b\"\")",
                "         f.close()",
                "@@ -138,9 +140,9 @@ class BufferedFileTest (unittest.TestCase):",
                "         \"\"\"",
                "-        f = LoopbackFile('r+', 16)",
                "-        f.write(b'Too small.')",
                "-        self.assertEqual(f.read(4), b'')",
                "-        f.write(b'  ')",
                "-        self.assertEqual(f.read(4), b'')",
                "-        f.write(b'Enough.')",
                "-        self.assertEqual(f.read(20), b'Too small.  Enough.')",
                "+        f = LoopbackFile(\"r+\", 16)",
                "+        f.write(b\"Too small.\")",
                "+        self.assertEqual(f.read(4), b\"\")",
                "+        f.write(b\"  \")",
                "+        self.assertEqual(f.read(4), b\"\")",
                "+        f.write(b\"Enough.\")",
                "+        self.assertEqual(f.read(20), b\"Too small.  Enough.\")",
                "         f.close()",
                "@@ -151,8 +153,11 @@ class BufferedFileTest (unittest.TestCase):",
                "         \"\"\"",
                "-        f = LoopbackFile('r+', 16)",
                "-        f.write(b'The first thing you need to do is open your eyes. ')",
                "-        f.write(b'Then, you need to close them again.\\n')",
                "+        f = LoopbackFile(\"r+\", 16)",
                "+        f.write(b\"The first thing you need to do is open your eyes. \")",
                "+        f.write(b\"Then, you need to close them again.\\n\")",
                "         s = f.read(-1)",
                "-        self.assertEqual(s, b'The first thing you need to do is open your eyes. Then, you ' +",
                "-                            b'need to close them again.\\n')",
                "+        self.assertEqual(",
                "+            s,",
                "+            b\"The first thing you need to do is open your eyes. Then, you \"",
                "+            + b\"need to close them again.\\n\",",
                "+        )",
                "         f.close()",
                "@@ -164,4 +169,4 @@ class BufferedFileTest (unittest.TestCase):",
                "         if sys.version_info[0] == 2:",
                "-            f = LoopbackFile('r+', 16)",
                "-            f.write(buffer(b'Too small.'))",
                "+            f = LoopbackFile(\"r+\", 16)",
                "+            f.write(buffer(b\"Too small.\"))",
                "             f.close()",
                "@@ -169,3 +174,3 @@ class BufferedFileTest (unittest.TestCase):",
                "     def test_9_readable(self):",
                "-        f = LoopbackFile('r')",
                "+        f = LoopbackFile(\"r\")",
                "         self.assertTrue(f.readable())",
                "@@ -176,3 +181,3 @@ class BufferedFileTest (unittest.TestCase):",
                "     def test_A_writable(self):",
                "-        f = LoopbackFile('w')",
                "+        f = LoopbackFile(\"w\")",
                "         self.assertTrue(f.writable())",
                "@@ -184,6 +189,6 @@ class BufferedFileTest (unittest.TestCase):",
                "         data = bytearray(5)",
                "-        f = LoopbackFile('r+')",
                "+        f = LoopbackFile(\"r+\")",
                "         f._write(b\"hello\")",
                "         f.readinto(data)",
                "-        self.assertEqual(data, b'hello')",
                "+        self.assertEqual(data, b\"hello\")",
                "         f.close()",
                "@@ -191,3 +196,3 @@ class BufferedFileTest (unittest.TestCase):",
                "     def test_write_bad_type(self):",
                "-        with LoopbackFile('wb') as f:",
                "+        with LoopbackFile(\"wb\") as f:",
                "             self.assertRaises(TypeError, f.write, object())",
                "@@ -196,3 +201,3 @@ class BufferedFileTest (unittest.TestCase):",
                "         text = u\"\\xa7 why is writing text to a binary file allowed?\\n\"",
                "-        with LoopbackFile('rb+') as f:",
                "+        with LoopbackFile(\"rb+\") as f:",
                "             f.write(text)",
                "@@ -200,5 +205,5 @@ class BufferedFileTest (unittest.TestCase):",
                "-    @needs_builtin('memoryview')",
                "+    @needs_builtin(\"memoryview\")",
                "     def test_write_bytearray(self):",
                "-        with LoopbackFile('rb+') as f:",
                "+        with LoopbackFile(\"rb+\") as f:",
                "             f.write(bytearray(12))",
                "@@ -206,3 +211,3 @@ class BufferedFileTest (unittest.TestCase):",
                "-    @needs_builtin('buffer')",
                "+    @needs_builtin(\"buffer\")",
                "     def test_write_buffer(self):",
                "@@ -210,3 +215,3 @@ class BufferedFileTest (unittest.TestCase):",
                "         offsets = range(0, len(data), 8)",
                "-        with LoopbackFile('rb+') as f:",
                "+        with LoopbackFile(\"rb+\") as f:",
                "             for offset in offsets:",
                "@@ -215,3 +220,3 @@ class BufferedFileTest (unittest.TestCase):",
                "-    @needs_builtin('memoryview')",
                "+    @needs_builtin(\"memoryview\")",
                "     def test_write_memoryview(self):",
                "@@ -219,6 +224,6 @@ class BufferedFileTest (unittest.TestCase):",
                "         offsets = range(0, len(data), 8)",
                "-        with LoopbackFile('rb+') as f:",
                "+        with LoopbackFile(\"rb+\") as f:",
                "             view = memoryview(data)",
                "             for offset in offsets:",
                "-                f.write(view[offset:offset+8])",
                "+                f.write(view[offset : offset + 8])",
                "             self.assertEqual(f.read(), data)",
                "@@ -226,4 +231,5 @@ class BufferedFileTest (unittest.TestCase):",
                "-if __name__ == '__main__':",
                "+if __name__ == \"__main__\":",
                "     from unittest import main",
                "+",
                "     main()",
                "diff --git a/tests/test_gssapi.py b/tests/test_gssapi.py",
                "index d4b632be..3e8c39e8 100644",
                "--- a/tests/test_gssapi.py",
                "+++ b/tests/test_gssapi.py",
                "@@ -45,2 +45,3 @@ class GSSAPITest(unittest.TestCase):",
                "         from pyasn1.codec.der import encoder, decoder",
                "+",
                "         oid = encoder.encode(ObjectIdentifier(self.krb5_mech))",
                "@@ -59,2 +60,3 @@ class GSSAPITest(unittest.TestCase):",
                "             import sspi",
                "+",
                "             _API = \"SSPI\"",
                "@@ -67,10 +69,14 @@ class GSSAPITest(unittest.TestCase):",
                "             if self.server_mode:",
                "-                gss_flags = (gssapi.C_PROT_READY_FLAG,",
                "-                             gssapi.C_INTEG_FLAG,",
                "-                             gssapi.C_MUTUAL_FLAG,",
                "-                             gssapi.C_DELEG_FLAG)",
                "+                gss_flags = (",
                "+                    gssapi.C_PROT_READY_FLAG,",
                "+                    gssapi.C_INTEG_FLAG,",
                "+                    gssapi.C_MUTUAL_FLAG,",
                "+                    gssapi.C_DELEG_FLAG,",
                "+                )",
                "             else:",
                "-                gss_flags = (gssapi.C_PROT_READY_FLAG,",
                "-                             gssapi.C_INTEG_FLAG,",
                "-                             gssapi.C_DELEG_FLAG)",
                "+                gss_flags = (",
                "+                    gssapi.C_PROT_READY_FLAG,",
                "+                    gssapi.C_INTEG_FLAG,",
                "+                    gssapi.C_DELEG_FLAG,",
                "+                )",
                "             # Initialize a GSS-API context.",
                "@@ -79,7 +85,8 @@ class GSSAPITest(unittest.TestCase):",
                "             krb5_oid = gssapi.OID.mech_from_string(self.krb5_mech)",
                "-            target_name = gssapi.Name(\"host@\" + self.targ_name,",
                "-                                      gssapi.C_NT_HOSTBASED_SERVICE)",
                "-            gss_ctxt = gssapi.InitContext(peer_name=target_name,",
                "-                                          mech_type=krb5_oid,",
                "-                                          req_flags=ctx.flags)",
                "+            target_name = gssapi.Name(",
                "+                \"host@\" + self.targ_name, gssapi.C_NT_HOSTBASED_SERVICE",
                "+            )",
                "+            gss_ctxt = gssapi.InitContext(",
                "+                peer_name=target_name, mech_type=krb5_oid, req_flags=ctx.flags",
                "+            )",
                "             if self.server_mode:",
                "@@ -110,5 +117,5 @@ class GSSAPITest(unittest.TestCase):",
                "             gss_flags = (",
                "-                sspicon.ISC_REQ_INTEGRITY |",
                "-                sspicon.ISC_REQ_MUTUAL_AUTH |",
                "-                sspicon.ISC_REQ_DELEGATE",
                "+                sspicon.ISC_REQ_INTEGRITY",
                "+                | sspicon.ISC_REQ_MUTUAL_AUTH",
                "+                | sspicon.ISC_REQ_DELEGATE",
                "             )",
                "@@ -116,5 +123,5 @@ class GSSAPITest(unittest.TestCase):",
                "             target_name = \"host/\" + socket.getfqdn(self.targ_name)",
                "-            gss_ctxt = sspi.ClientAuth(\"Kerberos\",",
                "-                                        scflags=gss_flags,",
                "-                                        targetspn=target_name)",
                "+            gss_ctxt = sspi.ClientAuth(",
                "+                \"Kerberos\", scflags=gss_flags, targetspn=target_name",
                "+            )",
                "             if self.server_mode:",
                "diff --git a/tests/test_hostkeys.py b/tests/test_hostkeys.py",
                "index cd75f8ab..295153dd 100644",
                "--- a/tests/test_hostkeys.py",
                "+++ b/tests/test_hostkeys.py",
                "@@ -56,6 +56,5 @@ Ngw3qIch/WgRmMHy4kBq1SsXMjQCte1So6HBMvBPIW5SiMTmjCfZZiw4AYHK+B/JaOwaG9yRg2Ejg\\",
                "-class HostKeysTest (unittest.TestCase):",
                "-",
                "+class HostKeysTest(unittest.TestCase):",
                "     def setUp(self):",
                "-        with open('hostfile.temp', 'w') as f:",
                "+        with open(\"hostfile.temp\", \"w\") as f:",
                "             f.write(test_hosts_file)",
                "@@ -63,6 +62,6 @@ class HostKeysTest (unittest.TestCase):",
                "     def tearDown(self):",
                "-        os.unlink('hostfile.temp')",
                "+        os.unlink(\"hostfile.temp\")",
                "     def test_1_load(self):",
                "-        hostdict = paramiko.HostKeys('hostfile.temp')",
                "+        hostdict = paramiko.HostKeys(\"hostfile.temp\")",
                "         self.assertEqual(2, len(hostdict))",
                "@@ -70,26 +69,28 @@ class HostKeysTest (unittest.TestCase):",
                "         self.assertEqual(1, len(list(hostdict.values())[1]))",
                "-        fp = hexlify(hostdict['secure.example.com']['ssh-rsa'].get_fingerprint()).upper()",
                "-        self.assertEqual(b'E6684DB30E109B67B70FF1DC5C7F1363', fp)",
                "+        fp = hexlify(",
                "+            hostdict[\"secure.example.com\"][\"ssh-rsa\"].get_fingerprint()",
                "+        ).upper()",
                "+        self.assertEqual(b\"E6684DB30E109B67B70FF1DC5C7F1363\", fp)",
                "     def test_2_add(self):",
                "-        hostdict = paramiko.HostKeys('hostfile.temp')",
                "-        hh = '|1|BMsIC6cUIP2zBuXR3t2LRcJYjzM=|hpkJMysjTk/+zzUUzxQEa2ieq6c='",
                "+        hostdict = paramiko.HostKeys(\"hostfile.temp\")",
                "+        hh = \"|1|BMsIC6cUIP2zBuXR3t2LRcJYjzM=|hpkJMysjTk/+zzUUzxQEa2ieq6c=\"",
                "         key = paramiko.RSAKey(data=decodebytes(keyblob))",
                "-        hostdict.add(hh, 'ssh-rsa', key)",
                "+        hostdict.add(hh, \"ssh-rsa\", key)",
                "         self.assertEqual(3, len(list(hostdict)))",
                "-        x = hostdict['foo.example.com']",
                "-        fp = hexlify(x['ssh-rsa'].get_fingerprint()).upper()",
                "-        self.assertEqual(b'7EC91BB336CB6D810B124B1353C32396', fp)",
                "-        self.assertTrue(hostdict.check('foo.example.com', key))",
                "+        x = hostdict[\"foo.example.com\"]",
                "+        fp = hexlify(x[\"ssh-rsa\"].get_fingerprint()).upper()",
                "+        self.assertEqual(b\"7EC91BB336CB6D810B124B1353C32396\", fp)",
                "+        self.assertTrue(hostdict.check(\"foo.example.com\", key))",
                "     def test_3_dict(self):",
                "-        hostdict = paramiko.HostKeys('hostfile.temp')",
                "-        self.assertTrue('secure.example.com' in hostdict)",
                "-        self.assertTrue('not.example.com' not in hostdict)",
                "-        self.assertTrue('secure.example.com' in hostdict)",
                "-        self.assertTrue('not.example.com' not in hostdict)",
                "-        x = hostdict.get('secure.example.com', None)",
                "+        hostdict = paramiko.HostKeys(\"hostfile.temp\")",
                "+        self.assertTrue(\"secure.example.com\" in hostdict)",
                "+        self.assertTrue(\"not.example.com\" not in hostdict)",
                "+        self.assertTrue(\"secure.example.com\" in hostdict)",
                "+        self.assertTrue(\"not.example.com\" not in hostdict)",
                "+        x = hostdict.get(\"secure.example.com\", None)",
                "         self.assertTrue(x is not None)",
                "-        fp = hexlify(x['ssh-rsa'].get_fingerprint()).upper()",
                "-        self.assertEqual(b'E6684DB30E109B67B70FF1DC5C7F1363', fp)",
                "+        fp = hexlify(x[\"ssh-rsa\"].get_fingerprint()).upper()",
                "+        self.assertEqual(b\"E6684DB30E109B67B70FF1DC5C7F1363\", fp)",
                "         i = 0",
                "@@ -98,14 +99,11 @@ class HostKeysTest (unittest.TestCase):",
                "         self.assertEqual(2, i)",
                "-        ",
                "+",
                "     def test_4_dict_set(self):",
                "-        hostdict = paramiko.HostKeys('hostfile.temp')",
                "+        hostdict = paramiko.HostKeys(\"hostfile.temp\")",
                "         key = paramiko.RSAKey(data=decodebytes(keyblob))",
                "         key_dss = paramiko.DSSKey(data=decodebytes(keyblob_dss))",
                "-        hostdict['secure.example.com'] = {",
                "-            'ssh-rsa': key,",
                "-            'ssh-dss': key_dss",
                "-        }",
                "-        hostdict['fake.example.com'] = {}",
                "-        hostdict['fake.example.com']['ssh-rsa'] = key",
                "-        ",
                "+        hostdict[\"secure.example.com\"] = {\"ssh-rsa\": key, \"ssh-dss\": key_dss}",
                "+        hostdict[\"fake.example.com\"] = {}",
                "+        hostdict[\"fake.example.com\"][\"ssh-rsa\"] = key",
                "+",
                "         self.assertEqual(3, len(hostdict))",
                "@@ -114,11 +112,15 @@ class HostKeysTest (unittest.TestCase):",
                "         self.assertEqual(1, len(list(hostdict.values())[2]))",
                "-        fp = hexlify(hostdict['secure.example.com']['ssh-rsa'].get_fingerprint()).upper()",
                "-        self.assertEqual(b'7EC91BB336CB6D810B124B1353C32396', fp)",
                "-        fp = hexlify(hostdict['secure.example.com']['ssh-dss'].get_fingerprint()).upper()",
                "-        self.assertEqual(b'4478F0B9A23CC5182009FF755BC1D26C', fp)",
                "+        fp = hexlify(",
                "+            hostdict[\"secure.example.com\"][\"ssh-rsa\"].get_fingerprint()",
                "+        ).upper()",
                "+        self.assertEqual(b\"7EC91BB336CB6D810B124B1353C32396\", fp)",
                "+        fp = hexlify(",
                "+            hostdict[\"secure.example.com\"][\"ssh-dss\"].get_fingerprint()",
                "+        ).upper()",
                "+        self.assertEqual(b\"4478F0B9A23CC5182009FF755BC1D26C\", fp)",
                "     def test_delitem(self):",
                "-        hostdict = paramiko.HostKeys('hostfile.temp')",
                "-        target = 'happy.example.com'",
                "-        entry = hostdict[target] # will KeyError if not present",
                "+        hostdict = paramiko.HostKeys(\"hostfile.temp\")",
                "+        target = \"happy.example.com\"",
                "+        entry = hostdict[target]  # will KeyError if not present",
                "         del hostdict[target]",
                "@@ -127,3 +129,3 @@ class HostKeysTest (unittest.TestCase):",
                "         except KeyError:",
                "-            pass # Good",
                "+            pass  # Good",
                "         else:",
                "diff --git a/tests/test_kex.py b/tests/test_kex.py",
                "index badab61e..5b749b4d 100644",
                "--- a/tests/test_kex.py",
                "+++ b/tests/test_kex.py",
                "@@ -40,14 +40,14 @@ def dummy_urandom(n):",
                "-class FakeKey (object):",
                "+class FakeKey(object):",
                "     def __str__(self):",
                "-        return 'fake-key'",
                "+        return \"fake-key\"",
                "     def asbytes(self):",
                "-        return b'fake-key'",
                "+        return b\"fake-key\"",
                "     def sign_ssh_data(self, H):",
                "-        return b'fake-sig'",
                "+        return b\"fake-sig\"",
                "-class FakeModulusPack (object):",
                "+class FakeModulusPack(object):",
                "     P = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF",
                "@@ -60,6 +60,6 @@ class FakeModulusPack (object):",
                " class FakeTransport(object):",
                "-    local_version = 'SSH-2.0-paramiko_1.0'",
                "-    remote_version = 'SSH-2.0-lame'",
                "-    local_kex_init = 'local-kex-init'",
                "-    remote_kex_init = 'remote-kex-init'",
                "+    local_version = \"SSH-2.0-paramiko_1.0\"",
                "+    remote_version = \"SSH-2.0-lame\"",
                "+    local_kex_init = \"local-kex-init\"",
                "+    remote_kex_init = \"remote-kex-init\"",
                "@@ -91,3 +91,3 @@ class FakeTransport(object):",
                "-class KexTest (unittest.TestCase):",
                "+class KexTest(unittest.TestCase):",
                "@@ -107,5 +107,7 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        x = b'1E000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4'",
                "+        x = b\"1E000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_group1._MSG_KEXDH_REPLY,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_group1._MSG_KEXDH_REPLY,), transport._expect",
                "+        )",
                "@@ -113,11 +115,11 @@ class KexTest (unittest.TestCase):",
                "         msg = Message()",
                "-        msg.add_string('fake-host-key')",
                "+        msg.add_string(\"fake-host-key\")",
                "         msg.add_mpint(69)",
                "-        msg.add_string('fake-sig')",
                "+        msg.add_string(\"fake-sig\")",
                "         msg.rewind()",
                "         kex.parse_next(paramiko.kex_group1._MSG_KEXDH_REPLY, msg)",
                "-        H = b'03079780F3D3AD0B3C6DB30C8D21685F367A86D2'",
                "+        H = b\"03079780F3D3AD0B3C6DB30C8D21685F367A86D2\"",
                "         self.assertEqual(self.K, transport._K)",
                "         self.assertEqual(H, hexlify(transport._H).upper())",
                "-        self.assertEqual((b'fake-host-key', b'fake-sig'), transport._verify)",
                "+        self.assertEqual((b\"fake-host-key\", b\"fake-sig\"), transport._verify)",
                "         self.assertTrue(transport._activated)",
                "@@ -129,3 +131,5 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        self.assertEqual((paramiko.kex_group1._MSG_KEXDH_INIT,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_group1._MSG_KEXDH_INIT,), transport._expect",
                "+        )",
                "@@ -135,4 +139,4 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_group1._MSG_KEXDH_INIT, msg)",
                "-        H = b'B16BF34DD10945EDE84E9C1EF24A14BFDC843389'",
                "-        x = b'1F0000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967'",
                "+        H = b\"B16BF34DD10945EDE84E9C1EF24A14BFDC843389\"",
                "+        x = b\"1F0000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967\"",
                "         self.assertEqual(self.K, transport._K)",
                "@@ -147,5 +151,7 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        x = b'22000004000000080000002000'",
                "+        x = b\"22000004000000080000002000\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect",
                "+        )",
                "@@ -156,16 +162,18 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_GROUP, msg)",
                "-        x = b'20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4'",
                "+        x = b\"20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect",
                "+        )",
                "         msg = Message()",
                "-        msg.add_string('fake-host-key')",
                "+        msg.add_string(\"fake-host-key\")",
                "         msg.add_mpint(69)",
                "-        msg.add_string('fake-sig')",
                "+        msg.add_string(\"fake-sig\")",
                "         msg.rewind()",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REPLY, msg)",
                "-        H = b'A265563F2FA87F1A89BF007EE90D58BE2E4A4BD0'",
                "+        H = b\"A265563F2FA87F1A89BF007EE90D58BE2E4A4BD0\"",
                "         self.assertEqual(self.K, transport._K)",
                "         self.assertEqual(H, hexlify(transport._H).upper())",
                "-        self.assertEqual((b'fake-host-key', b'fake-sig'), transport._verify)",
                "+        self.assertEqual((b\"fake-host-key\", b\"fake-sig\"), transport._verify)",
                "         self.assertTrue(transport._activated)",
                "@@ -177,5 +185,7 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex(_test_old_style=True)",
                "-        x = b'1E00000800'",
                "+        x = b\"1E00000800\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect",
                "+        )",
                "@@ -186,18 +196,20 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_GROUP, msg)",
                "-        x = b'20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4'",
                "+        x = b\"20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect",
                "+        )",
                "         msg = Message()",
                "-        msg.add_string('fake-host-key')",
                "+        msg.add_string(\"fake-host-key\")",
                "         msg.add_mpint(69)",
                "-        msg.add_string('fake-sig')",
                "+        msg.add_string(\"fake-sig\")",
                "         msg.rewind()",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REPLY, msg)",
                "-        H = b'807F87B269EF7AC5EC7E75676808776A27D5864C'",
                "+        H = b\"807F87B269EF7AC5EC7E75676808776A27D5864C\"",
                "         self.assertEqual(self.K, transport._K)",
                "         self.assertEqual(H, hexlify(transport._H).upper())",
                "-        self.assertEqual((b'fake-host-key', b'fake-sig'), transport._verify)",
                "+        self.assertEqual((b\"fake-host-key\", b\"fake-sig\"), transport._verify)",
                "         self.assertTrue(transport._activated)",
                "-        ",
                "+",
                "     def test_5_gex_server(self):",
                "@@ -207,3 +219,9 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST, paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD), transport._expect)",
                "+        self.assertEqual(",
                "+            (",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST,",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD,",
                "+            ),",
                "+            transport._expect,",
                "+        )",
                "@@ -215,5 +233,7 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST, msg)",
                "-        x = b'1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102'",
                "+        x = b\"1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect",
                "+        )",
                "@@ -224,4 +244,4 @@ class KexTest (unittest.TestCase):",
                "         K = 67592995013596137876033460028393339951879041140378510871612128162185209509220726296697886624612526735888348020498716482757677848959420073720160491114319163078862905400020959196386947926388406687288901564192071077389283980347784184487280885335302632305026248574716290537036069329724382811853044654824945750581",
                "-        H = b'CE754197C21BF3452863B4F44D0B3951F12516EF'",
                "-        x = b'210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967'",
                "+        H = b\"CE754197C21BF3452863B4F44D0B3951F12516EF\"",
                "+        x = b\"210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967\"",
                "         self.assertEqual(K, transport._K)",
                "@@ -236,3 +256,9 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST, paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD), transport._expect)",
                "+        self.assertEqual(",
                "+            (",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST,",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD,",
                "+            ),",
                "+            transport._expect,",
                "+        )",
                "@@ -242,5 +268,7 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD, msg)",
                "-        x = b'1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102'",
                "+        x = b\"1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect",
                "+        )",
                "@@ -251,4 +279,4 @@ class KexTest (unittest.TestCase):",
                "         K = 67592995013596137876033460028393339951879041140378510871612128162185209509220726296697886624612526735888348020498716482757677848959420073720160491114319163078862905400020959196386947926388406687288901564192071077389283980347784184487280885335302632305026248574716290537036069329724382811853044654824945750581",
                "-        H = b'B41A06B2E59043CEFC1AE16EC31F1E2D12EC455B'",
                "-        x = b'210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967'",
                "+        H = b\"B41A06B2E59043CEFC1AE16EC31F1E2D12EC455B\"",
                "+        x = b\"210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967\"",
                "         self.assertEqual(K, transport._K)",
                "@@ -263,5 +291,7 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        x = b'22000004000000080000002000'",
                "+        x = b\"22000004000000080000002000\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect",
                "+        )",
                "@@ -272,16 +302,18 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_GROUP, msg)",
                "-        x = b'20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4'",
                "+        x = b\"20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect",
                "+        )",
                "         msg = Message()",
                "-        msg.add_string('fake-host-key')",
                "+        msg.add_string(\"fake-host-key\")",
                "         msg.add_mpint(69)",
                "-        msg.add_string('fake-sig')",
                "+        msg.add_string(\"fake-sig\")",
                "         msg.rewind()",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REPLY, msg)",
                "-        H = b'AD1A9365A67B4496F05594AD1BF656E3CDA0851289A4C1AFF549FEAE50896DF4'",
                "+        H = b\"AD1A9365A67B4496F05594AD1BF656E3CDA0851289A4C1AFF549FEAE50896DF4\"",
                "         self.assertEqual(self.K, transport._K)",
                "         self.assertEqual(H, hexlify(transport._H).upper())",
                "-        self.assertEqual((b'fake-host-key', b'fake-sig'), transport._verify)",
                "+        self.assertEqual((b\"fake-host-key\", b\"fake-sig\"), transport._verify)",
                "         self.assertTrue(transport._activated)",
                "@@ -293,5 +325,7 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex(_test_old_style=True)",
                "-        x = b'1E00000800'",
                "+        x = b\"1E00000800\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_GROUP,), transport._expect",
                "+        )",
                "@@ -302,16 +336,18 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_GROUP, msg)",
                "-        x = b'20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4'",
                "+        x = b\"20000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D4\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_REPLY,), transport._expect",
                "+        )",
                "         msg = Message()",
                "-        msg.add_string('fake-host-key')",
                "+        msg.add_string(\"fake-host-key\")",
                "         msg.add_mpint(69)",
                "-        msg.add_string('fake-sig')",
                "+        msg.add_string(\"fake-sig\")",
                "         msg.rewind()",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REPLY, msg)",
                "-        H = b'518386608B15891AE5237DEE08DCADDE76A0BCEFCE7F6DB3AD66BC41D256DFE5'",
                "+        H = b\"518386608B15891AE5237DEE08DCADDE76A0BCEFCE7F6DB3AD66BC41D256DFE5\"",
                "         self.assertEqual(self.K, transport._K)",
                "         self.assertEqual(H, hexlify(transport._H).upper())",
                "-        self.assertEqual((b'fake-host-key', b'fake-sig'), transport._verify)",
                "+        self.assertEqual((b\"fake-host-key\", b\"fake-sig\"), transport._verify)",
                "         self.assertTrue(transport._activated)",
                "@@ -323,3 +359,9 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST, paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD), transport._expect)",
                "+        self.assertEqual(",
                "+            (",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST,",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD,",
                "+            ),",
                "+            transport._expect,",
                "+        )",
                "@@ -331,5 +373,7 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST, msg)",
                "-        x = b'1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102'",
                "+        x = b\"1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect",
                "+        )",
                "@@ -340,4 +384,4 @@ class KexTest (unittest.TestCase):",
                "         K = 67592995013596137876033460028393339951879041140378510871612128162185209509220726296697886624612526735888348020498716482757677848959420073720160491114319163078862905400020959196386947926388406687288901564192071077389283980347784184487280885335302632305026248574716290537036069329724382811853044654824945750581",
                "-        H = b'CCAC0497CF0ABA1DBF55E1A3995D17F4CC31824B0E8D95CDF8A06F169D050D80'",
                "-        x = b'210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967'",
                "+        H = b\"CCAC0497CF0ABA1DBF55E1A3995D17F4CC31824B0E8D95CDF8A06F169D050D80\"",
                "+        x = b\"210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967\"",
                "         self.assertEqual(K, transport._K)",
                "@@ -352,3 +396,9 @@ class KexTest (unittest.TestCase):",
                "         kex.start_kex()",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST, paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD), transport._expect)",
                "+        self.assertEqual(",
                "+            (",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST,",
                "+                paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD,",
                "+            ),",
                "+            transport._expect,",
                "+        )",
                "@@ -358,5 +408,7 @@ class KexTest (unittest.TestCase):",
                "         kex.parse_next(paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD, msg)",
                "-        x = b'1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102'",
                "+        x = b\"1F0000008100FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF0000000102\"",
                "         self.assertEqual(x, hexlify(transport._message.asbytes()).upper())",
                "-        self.assertEqual((paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect)",
                "+        self.assertEqual(",
                "+            (paramiko.kex_gex._MSG_KEXDH_GEX_INIT,), transport._expect",
                "+        )",
                "@@ -367,4 +419,4 @@ class KexTest (unittest.TestCase):",
                "         K = 67592995013596137876033460028393339951879041140378510871612128162185209509220726296697886624612526735888348020498716482757677848959420073720160491114319163078862905400020959196386947926388406687288901564192071077389283980347784184487280885335302632305026248574716290537036069329724382811853044654824945750581",
                "-        H = b'3DDD2AD840AD095E397BA4D0573972DC60F6461FD38A187CACA6615A5BC8ADBB'",
                "-        x = b'210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967'",
                "+        H = b\"3DDD2AD840AD095E397BA4D0573972DC60F6461FD38A187CACA6615A5BC8ADBB\"",
                "+        x = b\"210000000866616B652D6B6579000000807E2DDB1743F3487D6545F04F1C8476092FB912B013626AB5BCEB764257D88BBA64243B9F348DF7B41B8C814A995E00299913503456983FFB9178D3CD79EB6D55522418A8ABF65375872E55938AB99A84A0B5FC8A1ECC66A7C3766E7E0F80B7CE2C9225FC2DD683F4764244B72963BBB383F529DCF0C5D17740B8A2ADBE9208D40000000866616B652D736967\"",
                "         self.assertEqual(K, transport._K)",
                "@@ -373,3 +425 @@ class KexTest (unittest.TestCase):",
                "         self.assertTrue(transport._activated)",
                "-",
                "-",
                "diff --git a/tests/test_kex_gss.py b/tests/test_kex_gss.py",
                "index 0bd9054b..d5f624ce 100644",
                "--- a/tests/test_kex_gss.py",
                "+++ b/tests/test_kex_gss.py",
                "@@ -36,10 +36,9 @@ from .util import needs_gssapi",
                "-class NullServer (paramiko.ServerInterface):",
                "-",
                "+class NullServer(paramiko.ServerInterface):",
                "     def get_allowed_auths(self, username):",
                "-        return 'gssapi-keyex'",
                "+        return \"gssapi-keyex\"",
                "-    def check_auth_gssapi_keyex(self, username,",
                "-                                gss_authenticated=paramiko.AUTH_FAILED,",
                "-                                cc_file=None):",
                "+    def check_auth_gssapi_keyex(",
                "+        self, username, gss_authenticated=paramiko.AUTH_FAILED, cc_file=None",
                "+    ):",
                "         if gss_authenticated == paramiko.AUTH_SUCCESSFUL:",
                "@@ -56,3 +55,3 @@ class NullServer (paramiko.ServerInterface):",
                "     def check_channel_exec_request(self, channel, command):",
                "-        if command != 'yes':",
                "+        if command != \"yes\":",
                "             return False",
                "@@ -88,3 +87,3 @@ class GSSKexTest(unittest.TestCase):",
                "         self.ts = paramiko.Transport(self.socks, gss_kex=True)",
                "-        host_key = paramiko.RSAKey.from_private_key_file('tests/test_rsa.key')",
                "+        host_key = paramiko.RSAKey.from_private_key_file(\"tests/test_rsa.key\")",
                "         self.ts.add_server_key(host_key)",
                "@@ -94,3 +93,3 @@ class GSSKexTest(unittest.TestCase):",
                "         except:",
                "-            print ('(Failed to load moduli -- gex will be unsupported.)')",
                "+            print(\"(Failed to load moduli -- gex will be unsupported.)\")",
                "         server = NullServer()",
                "@@ -104,3 +103,3 @@ class GSSKexTest(unittest.TestCase):",
                "         \"\"\"",
                "-        host_key = paramiko.RSAKey.from_private_key_file('tests/test_rsa.key')",
                "+        host_key = paramiko.RSAKey.from_private_key_file(\"tests/test_rsa.key\")",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -108,6 +107,12 @@ class GSSKexTest(unittest.TestCase):",
                "         self.tc = paramiko.SSHClient()",
                "-        self.tc.get_host_keys().add('[%s]:%d' % (self.hostname, self.port),",
                "-                                    'ssh-rsa', public_host_key)",
                "-        self.tc.connect(self.hostname, self.port, username=self.username,",
                "-                        gss_auth=True, gss_kex=True)",
                "+        self.tc.get_host_keys().add(",
                "+            \"[%s]:%d\" % (self.hostname, self.port), \"ssh-rsa\", public_host_key",
                "+        )",
                "+        self.tc.connect(",
                "+            self.hostname,",
                "+            self.port,",
                "+            username=self.username,",
                "+            gss_auth=True,",
                "+            gss_kex=True,",
                "+        )",
                "@@ -119,13 +124,13 @@ class GSSKexTest(unittest.TestCase):",
                "-        stdin, stdout, stderr = self.tc.exec_command('yes')",
                "+        stdin, stdout, stderr = self.tc.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "-        schan.send('Hello there.\\n')",
                "-        schan.send_stderr('This is on stderr.\\n')",
                "+        schan.send(\"Hello there.\\n\")",
                "+        schan.send_stderr(\"This is on stderr.\\n\")",
                "         schan.close()",
                "-        self.assertEquals('Hello there.\\n', stdout.readline())",
                "-        self.assertEquals('', stdout.readline())",
                "-        self.assertEquals('This is on stderr.\\n', stderr.readline())",
                "-        self.assertEquals('', stderr.readline())",
                "+        self.assertEquals(\"Hello there.\\n\", stdout.readline())",
                "+        self.assertEquals(\"\", stdout.readline())",
                "+        self.assertEquals(\"This is on stderr.\\n\", stderr.readline())",
                "+        self.assertEquals(\"\", stderr.readline())",
                "diff --git a/tests/test_message.py b/tests/test_message.py",
                "index 645b0509..b843a705 100644",
                "--- a/tests/test_message.py",
                "+++ b/tests/test_message.py",
                "@@ -28,8 +28,11 @@ from paramiko.common import byte_chr, zero_byte",
                "-class MessageTest (unittest.TestCase):",
                "+class MessageTest(unittest.TestCase):",
                "-    __a = b'\\x00\\x00\\x00\\x17\\x07\\x60\\xe0\\x90\\x00\\x00\\x00\\x01\\x71\\x00\\x00\\x00\\x05\\x68\\x65\\x6c\\x6c\\x6f\\x00\\x00\\x03\\xe8' + b'x' * 1000",
                "-    __b = b'\\x01\\x00\\xf3\\x00\\x3f\\x00\\x00\\x00\\x10\\x68\\x75\\x65\\x79\\x2c\\x64\\x65\\x77\\x65\\x79\\x2c\\x6c\\x6f\\x75\\x69\\x65'",
                "-    __c = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\xf5\\xe4\\xd3\\xc2\\xb1\\x09\\x00\\x00\\x00\\x01\\x11\\x00\\x00\\x00\\x07\\x00\\xf5\\xe4\\xd3\\xc2\\xb1\\x09\\x00\\x00\\x00\\x06\\x9a\\x1b\\x2c\\x3d\\x4e\\xf7'",
                "-    __d = b'\\x00\\x00\\x00\\x05\\xff\\x00\\x00\\x00\\x05\\x11\\x22\\x33\\x44\\x55\\xff\\x00\\x00\\x00\\x0a\\x00\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\x63\\x61\\x74\\x00\\x00\\x00\\x03\\x61\\x2c\\x62'",
                "+    __a = (",
                "+        b\"\\x00\\x00\\x00\\x17\\x07\\x60\\xe0\\x90\\x00\\x00\\x00\\x01\\x71\\x00\\x00\\x00\\x05\\x68\\x65\\x6c\\x6c\\x6f\\x00\\x00\\x03\\xe8\"",
                "+        + b\"x\" * 1000",
                "+    )",
                "+    __b = b\"\\x01\\x00\\xf3\\x00\\x3f\\x00\\x00\\x00\\x10\\x68\\x75\\x65\\x79\\x2c\\x64\\x65\\x77\\x65\\x79\\x2c\\x6c\\x6f\\x75\\x69\\x65\"",
                "+    __c = b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\xf5\\xe4\\xd3\\xc2\\xb1\\x09\\x00\\x00\\x00\\x01\\x11\\x00\\x00\\x00\\x07\\x00\\xf5\\xe4\\xd3\\xc2\\xb1\\x09\\x00\\x00\\x00\\x06\\x9a\\x1b\\x2c\\x3d\\x4e\\xf7\"",
                "+    __d = b\"\\x00\\x00\\x00\\x05\\xff\\x00\\x00\\x00\\x05\\x11\\x22\\x33\\x44\\x55\\xff\\x00\\x00\\x00\\x0a\\x00\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\x63\\x61\\x74\\x00\\x00\\x00\\x03\\x61\\x2c\\x62\"",
                "@@ -39,5 +42,5 @@ class MessageTest (unittest.TestCase):",
                "         msg.add_int(123789456)",
                "-        msg.add_string('q')",
                "-        msg.add_string('hello')",
                "-        msg.add_string('x' * 1000)",
                "+        msg.add_string(\"q\")",
                "+        msg.add_string(\"hello\")",
                "+        msg.add_string(\"x\" * 1000)",
                "         self.assertEqual(msg.asbytes(), self.__a)",
                "@@ -50,3 +53,3 @@ class MessageTest (unittest.TestCase):",
                "         msg.add_bytes(zero_byte + byte_chr(0x3f))",
                "-        msg.add_list(['huey', 'dewey', 'louie'])",
                "+        msg.add_list([\"huey\", \"dewey\", \"louie\"])",
                "         self.assertEqual(msg.asbytes(), self.__b)",
                "@@ -65,5 +68,5 @@ class MessageTest (unittest.TestCase):",
                "         self.assertEqual(msg.get_int(), 123789456)",
                "-        self.assertEqual(msg.get_text(), 'q')",
                "-        self.assertEqual(msg.get_text(), 'hello')",
                "-        self.assertEqual(msg.get_text(), 'x' * 1000)",
                "+        self.assertEqual(msg.get_text(), \"q\")",
                "+        self.assertEqual(msg.get_text(), \"hello\")",
                "+        self.assertEqual(msg.get_text(), \"x\" * 1000)",
                "@@ -74,3 +77,3 @@ class MessageTest (unittest.TestCase):",
                "         self.assertEqual(msg.get_bytes(2), zero_byte + byte_chr(0x3f))",
                "-        self.assertEqual(msg.get_list(), ['huey', 'dewey', 'louie'])",
                "+        self.assertEqual(msg.get_list(), [\"huey\", \"dewey\", \"louie\"])",
                "@@ -89,4 +92,4 @@ class MessageTest (unittest.TestCase):",
                "         msg.add(True)",
                "-        msg.add('cat')",
                "-        msg.add(['a', 'b'])",
                "+        msg.add(\"cat\")",
                "+        msg.add([\"a\", \"b\"])",
                "         self.assertEqual(msg.asbytes(), self.__d)",
                "diff --git a/tests/test_packetizer.py b/tests/test_packetizer.py",
                "index 414b7e38..6920f08e 100644",
                "--- a/tests/test_packetizer.py",
                "+++ b/tests/test_packetizer.py",
                "@@ -38,4 +38,4 @@ x1f = byte_chr(0x1f)",
                "-class PacketizerTest (unittest.TestCase):",
                "+class PacketizerTest(unittest.TestCase):",
                "     def test_1_write(self):",
                "@@ -45,3 +45,3 @@ class PacketizerTest (unittest.TestCase):",
                "         p = Packetizer(wsock)",
                "-        p.set_log(util.get_logger('paramiko.transport'))",
                "+        p.set_log(util.get_logger(\"paramiko.transport\"))",
                "         p.set_hexdump(True)",
                "@@ -50,3 +50,3 @@ class PacketizerTest (unittest.TestCase):",
                "             modes.CBC(x55 * 16),",
                "-            backend=default_backend()",
                "+            backend=default_backend(),",
                "         ).encryptor()",
                "@@ -65,3 +65,6 @@ class PacketizerTest (unittest.TestCase):",
                "         self.assertEqual(44, len(data))",
                "-        self.assertEqual(b'\\x43\\x91\\x97\\xbd\\x5b\\x50\\xac\\x25\\x87\\xc2\\xc4\\x6b\\xc7\\xe9\\x38\\xc0', data[:16])",
                "+        self.assertEqual(",
                "+            b\"\\x43\\x91\\x97\\xbd\\x5b\\x50\\xac\\x25\\x87\\xc2\\xc4\\x6b\\xc7\\xe9\\x38\\xc0\",",
                "+            data[:16],",
                "+        )",
                "@@ -72,3 +75,3 @@ class PacketizerTest (unittest.TestCase):",
                "         p = Packetizer(rsock)",
                "-        p.set_log(util.get_logger('paramiko.transport'))",
                "+        p.set_log(util.get_logger(\"paramiko.transport\"))",
                "         p.set_hexdump(True)",
                "@@ -77,6 +80,8 @@ class PacketizerTest (unittest.TestCase):",
                "             modes.CBC(x55 * 16),",
                "-            backend=default_backend()",
                "+            backend=default_backend(),",
                "         ).decryptor()",
                "         p.set_inbound_cipher(decryptor, 16, sha1, 12, x1f * 20)",
                "-        wsock.send(b'\\x43\\x91\\x97\\xbd\\x5b\\x50\\xac\\x25\\x87\\xc2\\xc4\\x6b\\xc7\\xe9\\x38\\xc0\\x90\\xd2\\x16\\x56\\x0d\\x71\\x73\\x61\\x38\\x7c\\x4c\\x3d\\xfb\\x97\\x7d\\xe2\\x6e\\x03\\xb1\\xa0\\xc2\\x1c\\xd6\\x41\\x41\\x4c\\xb4\\x59')",
                "+        wsock.send(",
                "+            b\"\\x43\\x91\\x97\\xbd\\x5b\\x50\\xac\\x25\\x87\\xc2\\xc4\\x6b\\xc7\\xe9\\x38\\xc0\\x90\\xd2\\x16\\x56\\x0d\\x71\\x73\\x61\\x38\\x7c\\x4c\\x3d\\xfb\\x97\\x7d\\xe2\\x6e\\x03\\xb1\\xa0\\xc2\\x1c\\xd6\\x41\\x41\\x4c\\xb4\\x59\"",
                "+        )",
                "         cmd, m = p.read_message()",
                "@@ -88,3 +93,3 @@ class PacketizerTest (unittest.TestCase):",
                "     def test_3_closed(self):",
                "-        if sys.platform.startswith(\"win\"): # no SIGALRM on windows",
                "+        if sys.platform.startswith(\"win\"):  # no SIGALRM on windows",
                "             return",
                "@@ -94,3 +99,3 @@ class PacketizerTest (unittest.TestCase):",
                "         p = Packetizer(wsock)",
                "-        p.set_log(util.get_logger('paramiko.transport'))",
                "+        p.set_log(util.get_logger(\"paramiko.transport\"))",
                "         p.set_hexdump(True)",
                "@@ -99,3 +104,3 @@ class PacketizerTest (unittest.TestCase):",
                "             modes.CBC(x55 * 16),",
                "-            backend=default_backend()",
                "+            backend=default_backend(),",
                "         ).encryptor()",
                "@@ -118,3 +123,3 @@ class PacketizerTest (unittest.TestCase):",
                "             def __init__(self, error_message):",
                "-                if hasattr(errno, 'ETIME'):",
                "+                if hasattr(errno, \"ETIME\"):",
                "                     self.message = os.sterror(errno.ETIME)",
                "@@ -123,3 +128,3 @@ class PacketizerTest (unittest.TestCase):",
                "-        def timeout(seconds=1, error_message='Timer expired'):",
                "+        def timeout(seconds=1, error_message=\"Timer expired\"):",
                "             def decorator(func):",
                "@@ -140,2 +145,3 @@ class PacketizerTest (unittest.TestCase):",
                "             return decorator",
                "+",
                "         send = timeout()(p.send_message)",
                "diff --git a/tests/test_pkey.py b/tests/test_pkey.py",
                "index f5da1fde..4e9653a0 100644",
                "--- a/tests/test_pkey.py",
                "+++ b/tests/test_pkey.py",
                "@@ -36,14 +36,14 @@ from .util import _support",
                " # from openssh's ssh-keygen",
                "-PUB_RSA = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEA049W6geFpmsljTwfvI1UmKWWJPNFI74+vNKTk4dmzkQY2yAMs6FhlvhlI8ysU4oj71ZsRYMecHbBbxdN79+JRFVYTKaLqjwGENeTd+yv4q+V2PvZv3fLnzApI3l7EJCqhWwJUHJ1jAkZzqDx0tyOL4uoZpww3nmE0kb3y21tH4c='",
                "-PUB_DSS = 'ssh-dss AAAAB3NzaC1kc3MAAACBAOeBpgNnfRzr/twmAQRu2XwWAp3CFtrVnug6s6fgwj/oLjYbVtjAy6pl/h0EKCWx2rf1IetyNsTxWrniA9I6HeDj65X1FyDkg6g8tvCnaNB8Xp/UUhuzHuGsMIipRxBxw9LF608EqZcj1E3ytktoW5B5OcjrkEoz3xG7C+rpIjYvAAAAFQDwz4UnmsGiSNu5iqjn3uTzwUpshwAAAIEAkxfFeY8P2wZpDjX0MimZl5wkoFQDL25cPzGBuB4OnB8NoUk/yjAHIIpEShw8V+LzouMK5CTJQo5+Ngw3qIch/WgRmMHy4kBq1SsXMjQCte1So6HBMvBPIW5SiMTmjCfZZiw4AYHK+B/JaOwaG9yRg2Ejg4Ok10+XFDxlqZo8Y+wAAACARmR7CCPjodxASvRbIyzaVpZoJ/Z6x7dAumV+ysrV1BVYd0lYukmnjO1kKBWApqpH1ve9XDQYN8zgxM4b16L21kpoWQnZtXrY3GZ4/it9kUgyB7+NwacIBlXa8cMDL7Q/69o0d54U0X/NeX5QxuYR6OMJlrkQB7oiW/P/1mwjQgE='",
                "-PUB_ECDSA_256 = 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJSPZm3ZWkvk/Zx8WP+fZRZ5/NBBHnGQwR6uIC6XHGPDIHuWUzIjAwA0bzqkOUffEsbLe+uQgKl5kbc/L8KA/eo='",
                "-PUB_ECDSA_384 = 'ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBBbGibQLW9AAZiGN2hEQxWYYoFaWKwN3PKSaDJSMqmIn1Z9sgRUuw8Y/w502OGvXL/wFk0i2z50l3pWZjD7gfMH7gX5TUiCzwrQkS+Hn1U2S9aF5WJp0NcIzYxXw2r4M2A=='",
                "-PUB_ECDSA_521 = 'ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBACaOaFLZGuxa5AW16qj6VLypFbLrEWrt9AZUloCMefxO8bNLjK/O5g0rAVasar1TnyHE9qj4NwzANZASWjQNbc4MAG8vzqezFwLIn/kNyNTsXNfqEko9OgHZknlj2Z79dwTJcRAL4QLcT5aND0EHZLB2fAUDXiWIb2j4rg1mwPlBMiBXA=='",
                "-",
                "-FINGER_RSA = '1024 60:73:38:44:cb:51:86:65:7f:de:da:a2:2b:5a:57:d5'",
                "-FINGER_DSS = '1024 44:78:f0:b9:a2:3c:c5:18:20:09:ff:75:5b:c1:d2:6c'",
                "-FINGER_ECDSA_256 = '256 25:19:eb:55:e6:a1:47:ff:4f:38:d2:75:6f:a5:d5:60'",
                "-FINGER_ECDSA_384 = '384 c1:8d:a0:59:09:47:41:8e:a8:a6:07:01:29:23:b4:65'",
                "-FINGER_ECDSA_521 = '521 44:58:22:52:12:33:16:0e:ce:0e:be:2c:7c:7e:cc:1e'",
                "-SIGNED_RSA = '20:d7:8a:31:21:cb:f7:92:12:f2:a4:89:37:f5:78:af:e6:16:b6:25:b9:97:3d:a2:cd:5f:ca:20:21:73:4c:ad:34:73:8f:20:77:28:e2:94:15:08:d8:91:40:7a:85:83:bf:18:37:95:dc:54:1a:9b:88:29:6c:73:ca:38:b4:04:f1:56:b9:f2:42:9d:52:1b:29:29:b4:4f:fd:c9:2d:af:47:d2:40:76:30:f3:63:45:0c:d9:1d:43:86:0f:1c:70:e2:93:12:34:f3:ac:c5:0a:2f:14:50:66:59:f1:88:ee:c1:4a:e9:d1:9c:4e:46:f0:0e:47:6f:38:74:f1:44:a8'",
                "+PUB_RSA = \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEA049W6geFpmsljTwfvI1UmKWWJPNFI74+vNKTk4dmzkQY2yAMs6FhlvhlI8ysU4oj71ZsRYMecHbBbxdN79+JRFVYTKaLqjwGENeTd+yv4q+V2PvZv3fLnzApI3l7EJCqhWwJUHJ1jAkZzqDx0tyOL4uoZpww3nmE0kb3y21tH4c=\"",
                "+PUB_DSS = \"ssh-dss AAAAB3NzaC1kc3MAAACBAOeBpgNnfRzr/twmAQRu2XwWAp3CFtrVnug6s6fgwj/oLjYbVtjAy6pl/h0EKCWx2rf1IetyNsTxWrniA9I6HeDj65X1FyDkg6g8tvCnaNB8Xp/UUhuzHuGsMIipRxBxw9LF608EqZcj1E3ytktoW5B5OcjrkEoz3xG7C+rpIjYvAAAAFQDwz4UnmsGiSNu5iqjn3uTzwUpshwAAAIEAkxfFeY8P2wZpDjX0MimZl5wkoFQDL25cPzGBuB4OnB8NoUk/yjAHIIpEShw8V+LzouMK5CTJQo5+Ngw3qIch/WgRmMHy4kBq1SsXMjQCte1So6HBMvBPIW5SiMTmjCfZZiw4AYHK+B/JaOwaG9yRg2Ejg4Ok10+XFDxlqZo8Y+wAAACARmR7CCPjodxASvRbIyzaVpZoJ/Z6x7dAumV+ysrV1BVYd0lYukmnjO1kKBWApqpH1ve9XDQYN8zgxM4b16L21kpoWQnZtXrY3GZ4/it9kUgyB7+NwacIBlXa8cMDL7Q/69o0d54U0X/NeX5QxuYR6OMJlrkQB7oiW/P/1mwjQgE=\"",
                "+PUB_ECDSA_256 = \"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJSPZm3ZWkvk/Zx8WP+fZRZ5/NBBHnGQwR6uIC6XHGPDIHuWUzIjAwA0bzqkOUffEsbLe+uQgKl5kbc/L8KA/eo=\"",
                "+PUB_ECDSA_384 = \"ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBBbGibQLW9AAZiGN2hEQxWYYoFaWKwN3PKSaDJSMqmIn1Z9sgRUuw8Y/w502OGvXL/wFk0i2z50l3pWZjD7gfMH7gX5TUiCzwrQkS+Hn1U2S9aF5WJp0NcIzYxXw2r4M2A==\"",
                "+PUB_ECDSA_521 = \"ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBACaOaFLZGuxa5AW16qj6VLypFbLrEWrt9AZUloCMefxO8bNLjK/O5g0rAVasar1TnyHE9qj4NwzANZASWjQNbc4MAG8vzqezFwLIn/kNyNTsXNfqEko9OgHZknlj2Z79dwTJcRAL4QLcT5aND0EHZLB2fAUDXiWIb2j4rg1mwPlBMiBXA==\"",
                "+",
                "+FINGER_RSA = \"1024 60:73:38:44:cb:51:86:65:7f:de:da:a2:2b:5a:57:d5\"",
                "+FINGER_DSS = \"1024 44:78:f0:b9:a2:3c:c5:18:20:09:ff:75:5b:c1:d2:6c\"",
                "+FINGER_ECDSA_256 = \"256 25:19:eb:55:e6:a1:47:ff:4f:38:d2:75:6f:a5:d5:60\"",
                "+FINGER_ECDSA_384 = \"384 c1:8d:a0:59:09:47:41:8e:a8:a6:07:01:29:23:b4:65\"",
                "+FINGER_ECDSA_521 = \"521 44:58:22:52:12:33:16:0e:ce:0e:be:2c:7c:7e:cc:1e\"",
                "+SIGNED_RSA = \"20:d7:8a:31:21:cb:f7:92:12:f2:a4:89:37:f5:78:af:e6:16:b6:25:b9:97:3d:a2:cd:5f:ca:20:21:73:4c:ad:34:73:8f:20:77:28:e2:94:15:08:d8:91:40:7a:85:83:bf:18:37:95:dc:54:1a:9b:88:29:6c:73:ca:38:b4:04:f1:56:b9:f2:42:9d:52:1b:29:29:b4:4f:fd:c9:2d:af:47:d2:40:76:30:f3:63:45:0c:d9:1d:43:86:0f:1c:70:e2:93:12:34:f3:ac:c5:0a:2f:14:50:66:59:f1:88:ee:c1:4a:e9:d1:9c:4e:46:f0:0e:47:6f:38:74:f1:44:a8\"",
                "@@ -109,10 +109,9 @@ L4QLcT5aND0EHZLB2fAUDXiWIb2j4rg1mwPlBMiBXA==",
                "-x1234 = b'\\x01\\x02\\x03\\x04'",
                "+x1234 = b\"\\x01\\x02\\x03\\x04\"",
                "-TEST_KEY_BYTESTR_2 = '\\x00\\x00\\x00\\x07ssh-rsa\\x00\\x00\\x00\\x01#\\x00\\x00\\x00\\x81\\x00\\xd3\\x8fV\\xea\\x07\\x85\\xa6k%\\x8d<\\x1f\\xbc\\x8dT\\x98\\xa5\\x96$\\xf3E#\\xbe>\\xbc\\xd2\\x93\\x93\\x87f\\xceD\\x18\\xdb \\x0c\\xb3\\xa1a\\x96\\xf8e#\\xcc\\xacS\\x8a#\\xefVlE\\x83\\x1epv\\xc1o\\x17M\\xef\\xdf\\x89DUXL\\xa6\\x8b\\xaa<\\x06\\x10\\xd7\\x93w\\xec\\xaf\\xe2\\xaf\\x95\\xd8\\xfb\\xd9\\xbfw\\xcb\\x9f0)#y{\\x10\\x90\\xaa\\x85l\\tPru\\x8c\\t\\x19\\xce\\xa0\\xf1\\xd2\\xdc\\x8e/\\x8b\\xa8f\\x9c0\\xdey\\x84\\xd2F\\xf7\\xcbmm\\x1f\\x87'",
                "-TEST_KEY_BYTESTR_3 = '\\x00\\x00\\x00\\x07ssh-rsa\\x00\\x00\\x00\\x01#\\x00\\x00\\x00\\x00\u00d3\u008fV\\x07k%<\\x1fT$E#>\u00d2\u0093fD\\x18 \\x0cae#\u00cc\u00acS#VlE\\x1epvo\\x17M\u00df\u0089DUXL<\\x06\\x10\u00d7\u0093w\\u2bd5\u00d9\u00bfw\u00cb\u009f0)#y{\\x10l\\tPru\\t\\x19\u00ce\u00a0\\u070e/f0yFmm\\x1f'",
                "+TEST_KEY_BYTESTR_2 = \"\\x00\\x00\\x00\\x07ssh-rsa\\x00\\x00\\x00\\x01#\\x00\\x00\\x00\\x81\\x00\\xd3\\x8fV\\xea\\x07\\x85\\xa6k%\\x8d<\\x1f\\xbc\\x8dT\\x98\\xa5\\x96$\\xf3E#\\xbe>\\xbc\\xd2\\x93\\x93\\x87f\\xceD\\x18\\xdb \\x0c\\xb3\\xa1a\\x96\\xf8e#\\xcc\\xacS\\x8a#\\xefVlE\\x83\\x1epv\\xc1o\\x17M\\xef\\xdf\\x89DUXL\\xa6\\x8b\\xaa<\\x06\\x10\\xd7\\x93w\\xec\\xaf\\xe2\\xaf\\x95\\xd8\\xfb\\xd9\\xbfw\\xcb\\x9f0)#y{\\x10\\x90\\xaa\\x85l\\tPru\\x8c\\t\\x19\\xce\\xa0\\xf1\\xd2\\xdc\\x8e/\\x8b\\xa8f\\x9c0\\xdey\\x84\\xd2F\\xf7\\xcbmm\\x1f\\x87\"",
                "+TEST_KEY_BYTESTR_3 = \"\\x00\\x00\\x00\\x07ssh-rsa\\x00\\x00\\x00\\x01#\\x00\\x00\\x00\\x00\u00d3\u008fV\\x07k%<\\x1fT$E#>\u00d2\u0093fD\\x18 \\x0cae#\u00cc\u00acS#VlE\\x1epvo\\x17M\u00df\u0089DUXL<\\x06\\x10\u00d7\u0093w\\u2bd5\u00d9\u00bfw\u00cb\u009f0)#y{\\x10l\\tPru\\t\\x19\u00ce\u00a0\\u070e/f0yFmm\\x1f\"",
                "-class KeyTest (unittest.TestCase):",
                "-",
                "+class KeyTest(unittest.TestCase):",
                "     def setUp(self):",
                "@@ -129,4 +128,3 @@ class KeyTest (unittest.TestCase):",
                "             self.assertEqual(",
                "-                fh.readline()[:-1],",
                "-                \"-----BEGIN RSA PRIVATE KEY-----\"",
                "+                fh.readline()[:-1], \"-----BEGIN RSA PRIVATE KEY-----\"",
                "             )",
                "@@ -136,4 +134,4 @@ class KeyTest (unittest.TestCase):",
                "     def test_1_generate_key_bytes(self):",
                "-        key = util.generate_key_bytes(md5, x1234, 'happy birthday', 30)",
                "-        exp = b'\\x61\\xE1\\xF2\\x72\\xF4\\xC1\\xC4\\x56\\x15\\x86\\xBD\\x32\\x24\\x98\\xC0\\xE9\\x24\\x67\\x27\\x80\\xF4\\x7B\\xB3\\x7D\\xDA\\x7D\\x54\\x01\\x9E\\x64'",
                "+        key = util.generate_key_bytes(md5, x1234, \"happy birthday\", 30)",
                "+        exp = b\"\\x61\\xE1\\xF2\\x72\\xF4\\xC1\\xC4\\x56\\x15\\x86\\xBD\\x32\\x24\\x98\\xC0\\xE9\\x24\\x67\\x27\\x80\\xF4\\x7B\\xB3\\x7D\\xDA\\x7D\\x54\\x01\\x9E\\x64\"",
                "         self.assertEqual(exp, key)",
                "@@ -141,5 +139,5 @@ class KeyTest (unittest.TestCase):",
                "     def test_2_load_rsa(self):",
                "-        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "-        self.assertEqual('ssh-rsa', key.get_name())",
                "-        exp_rsa = b(FINGER_RSA.split()[1].replace(':', ''))",
                "+        key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "+        self.assertEqual(\"ssh-rsa\", key.get_name())",
                "+        exp_rsa = b(FINGER_RSA.split()[1].replace(\":\", \"\"))",
                "         my_rsa = hexlify(key.get_fingerprint())",
                "@@ -157,5 +155,7 @@ class KeyTest (unittest.TestCase):",
                "     def test_3_load_rsa_password(self):",
                "-        key = RSAKey.from_private_key_file(_support('test_rsa_password.key'), 'television')",
                "-        self.assertEqual('ssh-rsa', key.get_name())",
                "-        exp_rsa = b(FINGER_RSA.split()[1].replace(':', ''))",
                "+        key = RSAKey.from_private_key_file(",
                "+            _support(\"test_rsa_password.key\"), \"television\"",
                "+        )",
                "+        self.assertEqual(\"ssh-rsa\", key.get_name())",
                "+        exp_rsa = b(FINGER_RSA.split()[1].replace(\":\", \"\"))",
                "         my_rsa = hexlify(key.get_fingerprint())",
                "@@ -166,5 +166,5 @@ class KeyTest (unittest.TestCase):",
                "     def test_4_load_dss(self):",
                "-        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "-        self.assertEqual('ssh-dss', key.get_name())",
                "-        exp_dss = b(FINGER_DSS.split()[1].replace(':', ''))",
                "+        key = DSSKey.from_private_key_file(_support(\"test_dss.key\"))",
                "+        self.assertEqual(\"ssh-dss\", key.get_name())",
                "+        exp_dss = b(FINGER_DSS.split()[1].replace(\":\", \"\"))",
                "         my_dss = hexlify(key.get_fingerprint())",
                "@@ -182,5 +182,7 @@ class KeyTest (unittest.TestCase):",
                "     def test_5_load_dss_password(self):",
                "-        key = DSSKey.from_private_key_file(_support('test_dss_password.key'), 'television')",
                "-        self.assertEqual('ssh-dss', key.get_name())",
                "-        exp_dss = b(FINGER_DSS.split()[1].replace(':', ''))",
                "+        key = DSSKey.from_private_key_file(",
                "+            _support(\"test_dss_password.key\"), \"television\"",
                "+        )",
                "+        self.assertEqual(\"ssh-dss\", key.get_name())",
                "+        exp_dss = b(FINGER_DSS.split()[1].replace(\":\", \"\"))",
                "         my_dss = hexlify(key.get_fingerprint())",
                "@@ -192,3 +194,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "         self.assertEqual(key, key)",
                "@@ -201,3 +203,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "+        key = DSSKey.from_private_key_file(_support(\"test_dss.key\"))",
                "         self.assertEqual(key, key)",
                "@@ -210,8 +212,10 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "-        msg = key.sign_ssh_data(b'ice weasels')",
                "+        key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "+        msg = key.sign_ssh_data(b\"ice weasels\")",
                "         self.assertTrue(type(msg) is Message)",
                "         msg.rewind()",
                "-        self.assertEqual('ssh-rsa', msg.get_text())",
                "-        sig = bytes().join([byte_chr(int(x, 16)) for x in SIGNED_RSA.split(':')])",
                "+        self.assertEqual(\"ssh-rsa\", msg.get_text())",
                "+        sig = bytes().join(",
                "+            [byte_chr(int(x, 16)) for x in SIGNED_RSA.split(\":\")]",
                "+        )",
                "         self.assertEqual(sig, msg.get_binary())",
                "@@ -219,3 +223,3 @@ class KeyTest (unittest.TestCase):",
                "         pub = RSAKey(data=key.asbytes())",
                "-        self.assertTrue(pub.verify_ssh_sig(b'ice weasels', msg))",
                "+        self.assertTrue(pub.verify_ssh_sig(b\"ice weasels\", msg))",
                "@@ -223,7 +227,7 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the dss private key can sign and verify",
                "-        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "-        msg = key.sign_ssh_data(b'ice weasels')",
                "+        key = DSSKey.from_private_key_file(_support(\"test_dss.key\"))",
                "+        msg = key.sign_ssh_data(b\"ice weasels\")",
                "         self.assertTrue(type(msg) is Message)",
                "         msg.rewind()",
                "-        self.assertEqual('ssh-dss', msg.get_text())",
                "+        self.assertEqual(\"ssh-dss\", msg.get_text())",
                "         # can't do the same test as we do for RSA, because DSS signatures",
                "@@ -234,3 +238,3 @@ class KeyTest (unittest.TestCase):",
                "         pub = DSSKey(data=key.asbytes())",
                "-        self.assertTrue(pub.verify_ssh_sig(b'ice weasels', msg))",
                "+        self.assertTrue(pub.verify_ssh_sig(b\"ice weasels\", msg))",
                "@@ -238,5 +242,5 @@ class KeyTest (unittest.TestCase):",
                "         key = RSAKey.generate(1024)",
                "-        msg = key.sign_ssh_data(b'jerri blank')",
                "+        msg = key.sign_ssh_data(b\"jerri blank\")",
                "         msg.rewind()",
                "-        self.assertTrue(key.verify_ssh_sig(b'jerri blank', msg))",
                "+        self.assertTrue(key.verify_ssh_sig(b\"jerri blank\", msg))",
                "@@ -244,5 +248,5 @@ class KeyTest (unittest.TestCase):",
                "         key = DSSKey.generate(1024)",
                "-        msg = key.sign_ssh_data(b'jerri blank')",
                "+        msg = key.sign_ssh_data(b\"jerri blank\")",
                "         msg.rewind()",
                "-        self.assertTrue(key.verify_ssh_sig(b'jerri blank', msg))",
                "+        self.assertTrue(key.verify_ssh_sig(b\"jerri blank\", msg))",
                "@@ -250,33 +254,33 @@ class KeyTest (unittest.TestCase):",
                "         key = ECDSAKey.generate()",
                "-        msg = key.sign_ssh_data(b'jerri blank')",
                "+        msg = key.sign_ssh_data(b\"jerri blank\")",
                "         msg.rewind()",
                "-        self.assertTrue(key.verify_ssh_sig(b'jerri blank', msg))",
                "+        self.assertTrue(key.verify_ssh_sig(b\"jerri blank\", msg))",
                "         self.assertEqual(key.get_bits(), 256)",
                "-        self.assertEqual(key.get_name(), 'ecdsa-sha2-nistp256')",
                "+        self.assertEqual(key.get_name(), \"ecdsa-sha2-nistp256\")",
                "         key = ECDSAKey.generate(bits=256)",
                "-        msg = key.sign_ssh_data(b'jerri blank')",
                "+        msg = key.sign_ssh_data(b\"jerri blank\")",
                "         msg.rewind()",
                "-        self.assertTrue(key.verify_ssh_sig(b'jerri blank', msg))",
                "+        self.assertTrue(key.verify_ssh_sig(b\"jerri blank\", msg))",
                "         self.assertEqual(key.get_bits(), 256)",
                "-        self.assertEqual(key.get_name(), 'ecdsa-sha2-nistp256')",
                "+        self.assertEqual(key.get_name(), \"ecdsa-sha2-nistp256\")",
                "         key = ECDSAKey.generate(bits=384)",
                "-        msg = key.sign_ssh_data(b'jerri blank')",
                "+        msg = key.sign_ssh_data(b\"jerri blank\")",
                "         msg.rewind()",
                "-        self.assertTrue(key.verify_ssh_sig(b'jerri blank', msg))",
                "+        self.assertTrue(key.verify_ssh_sig(b\"jerri blank\", msg))",
                "         self.assertEqual(key.get_bits(), 384)",
                "-        self.assertEqual(key.get_name(), 'ecdsa-sha2-nistp384')",
                "+        self.assertEqual(key.get_name(), \"ecdsa-sha2-nistp384\")",
                "         key = ECDSAKey.generate(bits=521)",
                "-        msg = key.sign_ssh_data(b'jerri blank')",
                "+        msg = key.sign_ssh_data(b\"jerri blank\")",
                "         msg.rewind()",
                "-        self.assertTrue(key.verify_ssh_sig(b'jerri blank', msg))",
                "+        self.assertTrue(key.verify_ssh_sig(b\"jerri blank\", msg))",
                "         self.assertEqual(key.get_bits(), 521)",
                "-        self.assertEqual(key.get_name(), 'ecdsa-sha2-nistp521')",
                "+        self.assertEqual(key.get_name(), \"ecdsa-sha2-nistp521\")",
                "     def test_10_load_ecdsa_256(self):",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_256.key'))",
                "-        self.assertEqual('ecdsa-sha2-nistp256', key.get_name())",
                "-        exp_ecdsa = b(FINGER_ECDSA_256.split()[1].replace(':', ''))",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_256.key\"))",
                "+        self.assertEqual(\"ecdsa-sha2-nistp256\", key.get_name())",
                "+        exp_ecdsa = b(FINGER_ECDSA_256.split()[1].replace(\":\", \"\"))",
                "         my_ecdsa = hexlify(key.get_fingerprint())",
                "@@ -294,5 +298,7 @@ class KeyTest (unittest.TestCase):",
                "     def test_11_load_ecdsa_password_256(self):",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_password_256.key'), b'television')",
                "-        self.assertEqual('ecdsa-sha2-nistp256', key.get_name())",
                "-        exp_ecdsa = b(FINGER_ECDSA_256.split()[1].replace(':', ''))",
                "+        key = ECDSAKey.from_private_key_file(",
                "+            _support(\"test_ecdsa_password_256.key\"), b\"television\"",
                "+        )",
                "+        self.assertEqual(\"ecdsa-sha2-nistp256\", key.get_name())",
                "+        exp_ecdsa = b(FINGER_ECDSA_256.split()[1].replace(\":\", \"\"))",
                "         my_ecdsa = hexlify(key.get_fingerprint())",
                "@@ -304,3 +310,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_256.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_256.key\"))",
                "         self.assertEqual(key, key)",
                "@@ -313,7 +319,7 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_256.key'))",
                "-        msg = key.sign_ssh_data(b'ice weasels')",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_256.key\"))",
                "+        msg = key.sign_ssh_data(b\"ice weasels\")",
                "         self.assertTrue(type(msg) is Message)",
                "         msg.rewind()",
                "-        self.assertEqual('ecdsa-sha2-nistp256', msg.get_text())",
                "+        self.assertEqual(\"ecdsa-sha2-nistp256\", msg.get_text())",
                "         # ECDSA signatures, like DSS signatures, tend to be different",
                "@@ -325,8 +331,8 @@ class KeyTest (unittest.TestCase):",
                "         pub = ECDSAKey(data=key.asbytes())",
                "-        self.assertTrue(pub.verify_ssh_sig(b'ice weasels', msg))",
                "+        self.assertTrue(pub.verify_ssh_sig(b\"ice weasels\", msg))",
                "     def test_14_load_ecdsa_384(self):",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_384.key'))",
                "-        self.assertEqual('ecdsa-sha2-nistp384', key.get_name())",
                "-        exp_ecdsa = b(FINGER_ECDSA_384.split()[1].replace(':', ''))",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_384.key\"))",
                "+        self.assertEqual(\"ecdsa-sha2-nistp384\", key.get_name())",
                "+        exp_ecdsa = b(FINGER_ECDSA_384.split()[1].replace(\":\", \"\"))",
                "         my_ecdsa = hexlify(key.get_fingerprint())",
                "@@ -344,5 +350,7 @@ class KeyTest (unittest.TestCase):",
                "     def test_15_load_ecdsa_password_384(self):",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_password_384.key'), b'television')",
                "-        self.assertEqual('ecdsa-sha2-nistp384', key.get_name())",
                "-        exp_ecdsa = b(FINGER_ECDSA_384.split()[1].replace(':', ''))",
                "+        key = ECDSAKey.from_private_key_file(",
                "+            _support(\"test_ecdsa_password_384.key\"), b\"television\"",
                "+        )",
                "+        self.assertEqual(\"ecdsa-sha2-nistp384\", key.get_name())",
                "+        exp_ecdsa = b(FINGER_ECDSA_384.split()[1].replace(\":\", \"\"))",
                "         my_ecdsa = hexlify(key.get_fingerprint())",
                "@@ -354,3 +362,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_384.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_384.key\"))",
                "         self.assertEqual(key, key)",
                "@@ -363,7 +371,7 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_384.key'))",
                "-        msg = key.sign_ssh_data(b'ice weasels')",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_384.key\"))",
                "+        msg = key.sign_ssh_data(b\"ice weasels\")",
                "         self.assertTrue(type(msg) is Message)",
                "         msg.rewind()",
                "-        self.assertEqual('ecdsa-sha2-nistp384', msg.get_text())",
                "+        self.assertEqual(\"ecdsa-sha2-nistp384\", msg.get_text())",
                "         # ECDSA signatures, like DSS signatures, tend to be different",
                "@@ -375,8 +383,8 @@ class KeyTest (unittest.TestCase):",
                "         pub = ECDSAKey(data=key.asbytes())",
                "-        self.assertTrue(pub.verify_ssh_sig(b'ice weasels', msg))",
                "+        self.assertTrue(pub.verify_ssh_sig(b\"ice weasels\", msg))",
                "     def test_18_load_ecdsa_521(self):",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_521.key'))",
                "-        self.assertEqual('ecdsa-sha2-nistp521', key.get_name())",
                "-        exp_ecdsa = b(FINGER_ECDSA_521.split()[1].replace(':', ''))",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_521.key\"))",
                "+        self.assertEqual(\"ecdsa-sha2-nistp521\", key.get_name())",
                "+        exp_ecdsa = b(FINGER_ECDSA_521.split()[1].replace(\":\", \"\"))",
                "         my_ecdsa = hexlify(key.get_fingerprint())",
                "@@ -397,5 +405,7 @@ class KeyTest (unittest.TestCase):",
                "     def test_19_load_ecdsa_password_521(self):",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_password_521.key'), b'television')",
                "-        self.assertEqual('ecdsa-sha2-nistp521', key.get_name())",
                "-        exp_ecdsa = b(FINGER_ECDSA_521.split()[1].replace(':', ''))",
                "+        key = ECDSAKey.from_private_key_file(",
                "+            _support(\"test_ecdsa_password_521.key\"), b\"television\"",
                "+        )",
                "+        self.assertEqual(\"ecdsa-sha2-nistp521\", key.get_name())",
                "+        exp_ecdsa = b(FINGER_ECDSA_521.split()[1].replace(\":\", \"\"))",
                "         my_ecdsa = hexlify(key.get_fingerprint())",
                "@@ -407,3 +417,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_521.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_521.key\"))",
                "         self.assertEqual(key, key)",
                "@@ -416,7 +426,7 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_521.key'))",
                "-        msg = key.sign_ssh_data(b'ice weasels')",
                "+        key = ECDSAKey.from_private_key_file(_support(\"test_ecdsa_521.key\"))",
                "+        msg = key.sign_ssh_data(b\"ice weasels\")",
                "         self.assertTrue(type(msg) is Message)",
                "         msg.rewind()",
                "-        self.assertEqual('ecdsa-sha2-nistp521', msg.get_text())",
                "+        self.assertEqual(\"ecdsa-sha2-nistp521\", msg.get_text())",
                "         # ECDSA signatures, like DSS signatures, tend to be different",
                "@@ -428,3 +438,3 @@ class KeyTest (unittest.TestCase):",
                "         pub = ECDSAKey(data=key.asbytes())",
                "-        self.assertTrue(pub.verify_ssh_sig(b'ice weasels', msg))",
                "+        self.assertTrue(pub.verify_ssh_sig(b\"ice weasels\", msg))",
                "@@ -432,6 +442,6 @@ class KeyTest (unittest.TestCase):",
                "         # Read an existing encrypted private key",
                "-        file_ = _support('test_rsa_password.key')",
                "-        password = 'television'",
                "-        newfile = file_ + '.new'",
                "-        newpassword = 'radio'",
                "+        file_ = _support(\"test_rsa_password.key\")",
                "+        password = \"television\"",
                "+        newfile = file_ + \".new\"",
                "+        newpassword = \"radio\"",
                "         key = RSAKey(filename=file_, password=password)",
                "@@ -449,3 +459,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_stringification(self):",
                "-        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "         comparable = TEST_KEY_BYTESTR_2 if PY2 else TEST_KEY_BYTESTR_3",
                "@@ -455,6 +465,6 @@ class KeyTest (unittest.TestCase):",
                "         # Read an existing encrypted private key",
                "-        file_ = _support('test_rsa_password.key')",
                "-        password = 'television'",
                "-        newfile = file_ + '.new'",
                "-        newpassword = 'radio'",
                "+        file_ = _support(\"test_rsa_password.key\")",
                "+        password = \"television\"",
                "+        newfile = file_ + \".new\"",
                "+        newpassword = \"radio\"",
                "         key = RSAKey(filename=file_, password=password)",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index 85c907a5..ccfdf7b0 100644",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -47,3 +47,3 @@ from .util import _support, slow",
                "-ARTICLE = '''",
                "+ARTICLE = \"\"\"",
                " Insulin sensitivity and liver insulin receptor structure in ducks from two",
                "@@ -72,3 +72,3 @@ liver insulin receptors. Their sensitivity to insulin is, however, similarly",
                " decreased compared with chicken.",
                "-'''",
                "+\"\"\"",
                "@@ -84,6 +84,6 @@ decreased compared with chicken.",
                " # Thus, the following 2-bytes sequence is not valid utf8: \"invalid continuation byte\"",
                "-NON_UTF8_DATA = b'\\xC3\\xC3'",
                "+NON_UTF8_DATA = b\"\\xC3\\xC3\"",
                "-unicode_folder = u'\\u00fcnic\\u00f8de' if PY2 else '\\u00fcnic\\u00f8de'",
                "-utf8_folder = b'/\\xc3\\xbcnic\\xc3\\xb8\\x64\\x65'",
                "+unicode_folder = u\"\\u00fcnic\\u00f8de\" if PY2 else \"\\u00fcnic\\u00f8de\"",
                "+utf8_folder = b\"/\\xc3\\xbcnic\\xc3\\xb8\\x64\\x65\"",
                "@@ -96,3 +96,3 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        f = sftp.open(sftp.FOLDER + '/test', 'w')",
                "+        f = sftp.open(sftp.FOLDER + \"/test\", \"w\")",
                "         try:",
                "@@ -101,3 +101,3 @@ class TestSFTP(object):",
                "             f.close()",
                "-            sftp.remove(sftp.FOLDER + '/test')",
                "+            sftp.remove(sftp.FOLDER + \"/test\")",
                "@@ -108,4 +108,4 @@ class TestSFTP(object):",
                "         sftp.close()",
                "-        with pytest.raises(socket.error, match='Socket is closed'):",
                "-            sftp.open(sftp.FOLDER + '/test2', 'w')",
                "+        with pytest.raises(socket.error, match=\"Socket is closed\"):",
                "+            sftp.open(sftp.FOLDER + \"/test2\", \"w\")",
                "@@ -117,4 +117,4 @@ class TestSFTP(object):",
                "             pass",
                "-        with pytest.raises(socket.error, match='Socket is closed'):",
                "-            sftp.open(sftp.FOLDER + '/test2', 'w')",
                "+        with pytest.raises(socket.error, match=\"Socket is closed\"):",
                "+            sftp.open(sftp.FOLDER + \"/test2\", \"w\")",
                "@@ -125,7 +125,7 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/duck.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/duck.txt\", \"w\") as f:",
                "                 f.write(ARTICLE)",
                "-            assert sftp.stat(sftp.FOLDER + '/duck.txt').st_size == 1483",
                "+            assert sftp.stat(sftp.FOLDER + \"/duck.txt\").st_size == 1483",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + \"/duck.txt\")",
                "@@ -136,7 +136,7 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/duck.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/duck.txt\", \"w\") as f:",
                "                 f.write(ARTICLE)",
                "-            assert sftp.stat(sftp.FOLDER + '/duck.txt').st_size == 1483",
                "+            assert sftp.stat(sftp.FOLDER + \"/duck.txt\").st_size == 1483",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + \"/duck.txt\")",
                "@@ -147,8 +147,8 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/append.txt', 'w') as f:",
                "-                f.write('first line\\nsecond line\\n')",
                "+            with sftp.open(sftp.FOLDER + \"/append.txt\", \"w\") as f:",
                "+                f.write(\"first line\\nsecond line\\n\")",
                "                 assert f.tell() == 23",
                "-            with sftp.open(sftp.FOLDER + '/append.txt', 'a+') as f:",
                "-                f.write('third line!!!\\n')",
                "+            with sftp.open(sftp.FOLDER + \"/append.txt\", \"a+\") as f:",
                "+                f.write(\"third line!!!\\n\")",
                "                 assert f.tell() == 37",
                "@@ -156,5 +156,5 @@ class TestSFTP(object):",
                "                 f.seek(-26, f.SEEK_CUR)",
                "-                assert f.readline() == 'second line\\n'",
                "+                assert f.readline() == \"second line\\n\"",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/append.txt')",
                "+            sftp.remove(sftp.FOLDER + \"/append.txt\")",
                "@@ -165,10 +165,12 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/first.txt', 'w') as f:",
                "-                f.write('content!\\n')",
                "-            sftp.rename(sftp.FOLDER + '/first.txt', sftp.FOLDER + '/second.txt')",
                "-            with pytest.raises(IOError, match='No such file'):",
                "-                sftp.open(sftp.FOLDER + '/first.txt', 'r')",
                "-            with sftp.open(sftp.FOLDER + '/second.txt', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/first.txt\", \"w\") as f:",
                "+                f.write(\"content!\\n\")",
                "+            sftp.rename(",
                "+                sftp.FOLDER + \"/first.txt\", sftp.FOLDER + \"/second.txt\"",
                "+            )",
                "+            with pytest.raises(IOError, match=\"No such file\"):",
                "+                sftp.open(sftp.FOLDER + \"/first.txt\", \"r\")",
                "+            with sftp.open(sftp.FOLDER + \"/second.txt\", \"r\") as f:",
                "                 f.seek(-6, f.SEEK_END)",
                "-                assert u(f.read(4)) == 'tent'",
                "+                assert u(f.read(4)) == \"tent\"",
                "         finally:",
                "@@ -177,3 +179,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/first.txt')",
                "+                sftp.remove(sftp.FOLDER + \"/first.txt\")",
                "             except:",
                "@@ -181,3 +183,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/second.txt')",
                "+                sftp.remove(sftp.FOLDER + \"/second.txt\")",
                "             except:",
                "@@ -190,9 +192,9 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "-        sftp.open(sftp.FOLDER + '/subfolder/test', 'w').close()",
                "-        sftp.remove(sftp.FOLDER + '/subfolder/test')",
                "-        sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "+        sftp.mkdir(sftp.FOLDER + \"/subfolder\")",
                "+        sftp.open(sftp.FOLDER + \"/subfolder/test\", \"w\").close()",
                "+        sftp.remove(sftp.FOLDER + \"/subfolder/test\")",
                "+        sftp.rmdir(sftp.FOLDER + \"/subfolder\")",
                "         # shouldn't be able to create that file if dir removed",
                "         with pytest.raises(IOError, match=\"No such file\"):",
                "-            sftp.open(sftp.FOLDER + '/subfolder/test')",
                "+            sftp.open(sftp.FOLDER + \"/subfolder/test\")",
                "@@ -204,5 +206,5 @@ class TestSFTP(object):",
                "         try:",
                "-            sftp.open(sftp.FOLDER + '/duck.txt', 'w').close()",
                "-            sftp.open(sftp.FOLDER + '/fish.txt', 'w').close()",
                "-            sftp.open(sftp.FOLDER + '/tertiary.py', 'w').close()",
                "+            sftp.open(sftp.FOLDER + \"/duck.txt\", \"w\").close()",
                "+            sftp.open(sftp.FOLDER + \"/fish.txt\", \"w\").close()",
                "+            sftp.open(sftp.FOLDER + \"/tertiary.py\", \"w\").close()",
                "@@ -210,10 +212,10 @@ class TestSFTP(object):",
                "             assert len(x) == 3",
                "-            assert 'duck.txt' in x",
                "-            assert 'fish.txt' in x",
                "-            assert 'tertiary.py' in x",
                "-            assert 'random' not in x",
                "+            assert \"duck.txt\" in x",
                "+            assert \"fish.txt\" in x",
                "+            assert \"tertiary.py\" in x",
                "+            assert \"random\" not in x",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "-            sftp.remove(sftp.FOLDER + '/fish.txt')",
                "-            sftp.remove(sftp.FOLDER + '/tertiary.py')",
                "+            sftp.remove(sftp.FOLDER + \"/duck.txt\")",
                "+            sftp.remove(sftp.FOLDER + \"/fish.txt\")",
                "+            sftp.remove(sftp.FOLDER + \"/tertiary.py\")",
                "@@ -224,5 +226,5 @@ class TestSFTP(object):",
                "         try:",
                "-            sftp.open(sftp.FOLDER + '/duck.txt', 'w').close()",
                "-            sftp.open(sftp.FOLDER + '/fish.txt', 'w').close()",
                "-            sftp.open(sftp.FOLDER + '/tertiary.py', 'w').close()",
                "+            sftp.open(sftp.FOLDER + \"/duck.txt\", \"w\").close()",
                "+            sftp.open(sftp.FOLDER + \"/fish.txt\", \"w\").close()",
                "+            sftp.open(sftp.FOLDER + \"/tertiary.py\", \"w\").close()",
                "@@ -230,10 +232,10 @@ class TestSFTP(object):",
                "             assert len(x) == 3",
                "-            assert 'duck.txt' in x",
                "-            assert 'fish.txt' in x",
                "-            assert 'tertiary.py' in x",
                "-            assert 'random' not in x",
                "+            assert \"duck.txt\" in x",
                "+            assert \"fish.txt\" in x",
                "+            assert \"tertiary.py\" in x",
                "+            assert \"random\" not in x",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "-            sftp.remove(sftp.FOLDER + '/fish.txt')",
                "-            sftp.remove(sftp.FOLDER + '/tertiary.py')",
                "+            sftp.remove(sftp.FOLDER + \"/duck.txt\")",
                "+            sftp.remove(sftp.FOLDER + \"/fish.txt\")",
                "+            sftp.remove(sftp.FOLDER + \"/tertiary.py\")",
                "@@ -244,13 +246,13 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/special', 'w') as f:",
                "-                f.write('x' * 1024)",
                "+            with sftp.open(sftp.FOLDER + \"/special\", \"w\") as f:",
                "+                f.write(\"x\" * 1024)",
                "-            stat = sftp.stat(sftp.FOLDER + '/special')",
                "-            sftp.chmod(sftp.FOLDER + '/special', (stat.st_mode & ~o777) | o600)",
                "-            stat = sftp.stat(sftp.FOLDER + '/special')",
                "+            stat = sftp.stat(sftp.FOLDER + \"/special\")",
                "+            sftp.chmod(sftp.FOLDER + \"/special\", (stat.st_mode & ~o777) | o600)",
                "+            stat = sftp.stat(sftp.FOLDER + \"/special\")",
                "             expected_mode = o600",
                "-            if sys.platform == 'win32':",
                "+            if sys.platform == \"win32\":",
                "                 # chmod not really functional on windows",
                "                 expected_mode = o666",
                "-            if sys.platform == 'cygwin':",
                "+            if sys.platform == \"cygwin\":",
                "                 # even worse.",
                "@@ -262,6 +264,6 @@ class TestSFTP(object):",
                "             atime = stat.st_atime - 1800",
                "-            sftp.utime(sftp.FOLDER + '/special', (atime, mtime))",
                "-            stat = sftp.stat(sftp.FOLDER + '/special')",
                "+            sftp.utime(sftp.FOLDER + \"/special\", (atime, mtime))",
                "+            stat = sftp.stat(sftp.FOLDER + \"/special\")",
                "             assert stat.st_mtime == mtime",
                "-            if sys.platform not in ('win32', 'cygwin'):",
                "+            if sys.platform not in (\"win32\", \"cygwin\"):",
                "                 assert stat.st_atime == atime",
                "@@ -270,7 +272,7 @@ class TestSFTP(object):",
                "-            sftp.truncate(sftp.FOLDER + '/special', 512)",
                "-            stat = sftp.stat(sftp.FOLDER + '/special')",
                "+            sftp.truncate(sftp.FOLDER + \"/special\", 512)",
                "+            stat = sftp.stat(sftp.FOLDER + \"/special\")",
                "             assert stat.st_size == 512",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/special')",
                "+            sftp.remove(sftp.FOLDER + \"/special\")",
                "@@ -282,6 +284,6 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/special', 'w') as f:",
                "-                f.write('x' * 1024)",
                "+            with sftp.open(sftp.FOLDER + \"/special\", \"w\") as f:",
                "+                f.write(\"x\" * 1024)",
                "-            with sftp.open(sftp.FOLDER + '/special', 'r+') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/special\", \"r+\") as f:",
                "                 stat = f.stat()",
                "@@ -291,6 +293,6 @@ class TestSFTP(object):",
                "                 expected_mode = o600",
                "-                if sys.platform == 'win32':",
                "+                if sys.platform == \"win32\":",
                "                     # chmod not really functional on windows",
                "                     expected_mode = o666",
                "-                if sys.platform == 'cygwin':",
                "+                if sys.platform == \"cygwin\":",
                "                     # even worse.",
                "@@ -305,3 +307,3 @@ class TestSFTP(object):",
                "                 assert stat.st_mtime == mtime",
                "-                if sys.platform not in ('win32', 'cygwin'):",
                "+                if sys.platform not in (\"win32\", \"cygwin\"):",
                "                     assert stat.st_atime == atime",
                "@@ -314,3 +316,3 @@ class TestSFTP(object):",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/special')",
                "+            sftp.remove(sftp.FOLDER + \"/special\")",
                "@@ -324,6 +326,6 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/duck.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/duck.txt\", \"w\") as f:",
                "                 f.write(ARTICLE)",
                "-            with sftp.open(sftp.FOLDER + '/duck.txt', 'r+') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/duck.txt\", \"r+\") as f:",
                "                 line_number = 0",
                "@@ -337,9 +339,12 @@ class TestSFTP(object):",
                "                 f.seek(pos_list[6], f.SEEK_SET)",
                "-                assert f.readline(), 'Nouzilly == France.\\n'",
                "+                assert f.readline(), \"Nouzilly == France.\\n\"",
                "                 f.seek(pos_list[17], f.SEEK_SET)",
                "-                assert f.readline()[:4] == 'duck'",
                "+                assert f.readline()[:4] == \"duck\"",
                "                 f.seek(pos_list[10], f.SEEK_SET)",
                "-                assert f.readline() == 'duck types were equally resistant to exogenous insulin compared with chicken.\\n'",
                "+                assert (",
                "+                    f.readline()",
                "+                    == \"duck types were equally resistant to exogenous insulin compared with chicken.\\n\"",
                "+                )",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + \"/duck.txt\")",
                "@@ -351,13 +356,13 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/testing.txt', 'w') as f:",
                "-                f.write('hello kitty.\\n')",
                "+            with sftp.open(sftp.FOLDER + \"/testing.txt\", \"w\") as f:",
                "+                f.write(\"hello kitty.\\n\")",
                "                 f.seek(-5, f.SEEK_CUR)",
                "-                f.write('dd')",
                "+                f.write(\"dd\")",
                "-            assert sftp.stat(sftp.FOLDER + '/testing.txt').st_size == 13",
                "-            with sftp.open(sftp.FOLDER + '/testing.txt', 'r') as f:",
                "+            assert sftp.stat(sftp.FOLDER + \"/testing.txt\").st_size == 13",
                "+            with sftp.open(sftp.FOLDER + \"/testing.txt\", \"r\") as f:",
                "                 data = f.read(20)",
                "-            assert data == b'hello kiddy.\\n'",
                "+            assert data == b\"hello kiddy.\\n\"",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/testing.txt')",
                "+            sftp.remove(sftp.FOLDER + \"/testing.txt\")",
                "@@ -372,27 +377,29 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/original.txt', 'w') as f:",
                "-                f.write('original\\n')",
                "-            sftp.symlink('original.txt', sftp.FOLDER + '/link.txt')",
                "-            assert sftp.readlink(sftp.FOLDER + '/link.txt') == 'original.txt'",
                "+            with sftp.open(sftp.FOLDER + \"/original.txt\", \"w\") as f:",
                "+                f.write(\"original\\n\")",
                "+            sftp.symlink(\"original.txt\", sftp.FOLDER + \"/link.txt\")",
                "+            assert sftp.readlink(sftp.FOLDER + \"/link.txt\") == \"original.txt\"",
                "-            with sftp.open(sftp.FOLDER + '/link.txt', 'r') as f:",
                "-                assert f.readlines() == ['original\\n']",
                "+            with sftp.open(sftp.FOLDER + \"/link.txt\", \"r\") as f:",
                "+                assert f.readlines() == [\"original\\n\"]",
                "-            cwd = sftp.normalize('.')",
                "-            if cwd[-1] == '/':",
                "+            cwd = sftp.normalize(\".\")",
                "+            if cwd[-1] == \"/\":",
                "                 cwd = cwd[:-1]",
                "-            abs_path = cwd + '/' + sftp.FOLDER + '/original.txt'",
                "-            sftp.symlink(abs_path, sftp.FOLDER + '/link2.txt')",
                "-            assert abs_path == sftp.readlink(sftp.FOLDER + '/link2.txt')",
                "+            abs_path = cwd + \"/\" + sftp.FOLDER + \"/original.txt\"",
                "+            sftp.symlink(abs_path, sftp.FOLDER + \"/link2.txt\")",
                "+            assert abs_path == sftp.readlink(sftp.FOLDER + \"/link2.txt\")",
                "-            assert sftp.lstat(sftp.FOLDER + '/link.txt').st_size == 12",
                "-            assert sftp.stat(sftp.FOLDER + '/link.txt').st_size == 9",
                "+            assert sftp.lstat(sftp.FOLDER + \"/link.txt\").st_size == 12",
                "+            assert sftp.stat(sftp.FOLDER + \"/link.txt\").st_size == 9",
                "             # the sftp server may be hiding extra path members from us, so the",
                "             # length may be longer than we expect:",
                "-            assert sftp.lstat(sftp.FOLDER + '/link2.txt').st_size >= len(abs_path)",
                "-            assert sftp.stat(sftp.FOLDER + '/link2.txt').st_size == 9",
                "-            assert sftp.stat(sftp.FOLDER + '/original.txt').st_size == 9",
                "+            assert sftp.lstat(sftp.FOLDER + \"/link2.txt\").st_size >= len(",
                "+                abs_path",
                "+            )",
                "+            assert sftp.stat(sftp.FOLDER + \"/link2.txt\").st_size == 9",
                "+            assert sftp.stat(sftp.FOLDER + \"/original.txt\").st_size == 9",
                "         finally:",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/link.txt')",
                "+                sftp.remove(sftp.FOLDER + \"/link.txt\")",
                "             except:",
                "@@ -400,3 +407,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/link2.txt')",
                "+                sftp.remove(sftp.FOLDER + \"/link2.txt\")",
                "             except:",
                "@@ -404,3 +411,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/original.txt')",
                "+                sftp.remove(sftp.FOLDER + \"/original.txt\")",
                "             except:",
                "@@ -413,14 +420,14 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/happy.txt', 'w', 1) as f:",
                "-                f.write('full line.\\n')",
                "-                f.write('partial')",
                "+            with sftp.open(sftp.FOLDER + \"/happy.txt\", \"w\", 1) as f:",
                "+                f.write(\"full line.\\n\")",
                "+                f.write(\"partial\")",
                "                 f.seek(9, f.SEEK_SET)",
                "-                f.write('?\\n')",
                "+                f.write(\"?\\n\")",
                "-            with sftp.open(sftp.FOLDER + '/happy.txt', 'r') as f:",
                "-                assert f.readline() == u('full line?\\n')",
                "-                assert f.read(7) == b'partial'",
                "+            with sftp.open(sftp.FOLDER + \"/happy.txt\", \"r\") as f:",
                "+                assert f.readline() == u(\"full line?\\n\")",
                "+                assert f.read(7) == b\"partial\"",
                "         finally:",
                "             try:",
                "-                sftp.remove(sftp.FOLDER + '/happy.txt')",
                "+                sftp.remove(sftp.FOLDER + \"/happy.txt\")",
                "             except:",
                "@@ -433,5 +440,5 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        pwd = sftp.normalize('.')",
                "+        pwd = sftp.normalize(\".\")",
                "         assert len(pwd) > 0",
                "-        f = sftp.normalize('./' + sftp.FOLDER)",
                "+        f = sftp.normalize(\"./\" + sftp.FOLDER)",
                "         assert len(f) > 0",
                "@@ -443,8 +450,8 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "-        with pytest.raises(IOError): # generic msg only",
                "-            sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "-        sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "+        sftp.mkdir(sftp.FOLDER + \"/subfolder\")",
                "+        with pytest.raises(IOError):  # generic msg only",
                "+            sftp.mkdir(sftp.FOLDER + \"/subfolder\")",
                "+        sftp.rmdir(sftp.FOLDER + \"/subfolder\")",
                "         with pytest.raises(IOError, match=\"No such file\"):",
                "-            sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "+            sftp.rmdir(sftp.FOLDER + \"/subfolder\")",
                "@@ -454,19 +461,19 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        root = sftp.normalize('.')",
                "-        if root[-1] != '/':",
                "-            root += '/'",
                "+        root = sftp.normalize(\".\")",
                "+        if root[-1] != \"/\":",
                "+            root += \"/\"",
                "         try:",
                "-            sftp.mkdir(sftp.FOLDER + '/alpha')",
                "-            sftp.chdir(sftp.FOLDER + '/alpha')",
                "-            sftp.mkdir('beta')",
                "-            assert root + sftp.FOLDER + '/alpha' == sftp.getcwd()",
                "-            assert ['beta'] == sftp.listdir('.')",
                "-",
                "-            sftp.chdir('beta')",
                "-            with sftp.open('fish', 'w') as f:",
                "-                f.write('hello\\n')",
                "-            sftp.chdir('..')",
                "-            assert ['fish'] == sftp.listdir('beta')",
                "-            sftp.chdir('..')",
                "-            assert ['fish'] == sftp.listdir('alpha/beta')",
                "+            sftp.mkdir(sftp.FOLDER + \"/alpha\")",
                "+            sftp.chdir(sftp.FOLDER + \"/alpha\")",
                "+            sftp.mkdir(\"beta\")",
                "+            assert root + sftp.FOLDER + \"/alpha\" == sftp.getcwd()",
                "+            assert [\"beta\"] == sftp.listdir(\".\")",
                "+",
                "+            sftp.chdir(\"beta\")",
                "+            with sftp.open(\"fish\", \"w\") as f:",
                "+                f.write(\"hello\\n\")",
                "+            sftp.chdir(\"..\")",
                "+            assert [\"fish\"] == sftp.listdir(\"beta\")",
                "+            sftp.chdir(\"..\")",
                "+            assert [\"fish\"] == sftp.listdir(\"alpha/beta\")",
                "         finally:",
                "@@ -474,3 +481,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.unlink(sftp.FOLDER + '/alpha/beta/fish')",
                "+                sftp.unlink(sftp.FOLDER + \"/alpha/beta/fish\")",
                "             except:",
                "@@ -478,3 +485,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.rmdir(sftp.FOLDER + '/alpha/beta')",
                "+                sftp.rmdir(sftp.FOLDER + \"/alpha/beta\")",
                "             except:",
                "@@ -482,3 +489,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.rmdir(sftp.FOLDER + '/alpha')",
                "+                sftp.rmdir(sftp.FOLDER + \"/alpha\")",
                "             except:",
                "@@ -490,3 +497,3 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        warnings.filterwarnings('ignore', 'tempnam.*')",
                "+        warnings.filterwarnings(\"ignore\", \"tempnam.*\")",
                "@@ -494,4 +501,4 @@ class TestSFTP(object):",
                "         os.close(fd)",
                "-        text = b'All I wanted was a plastic bunny rabbit.\\n'",
                "-        with open(localname, 'wb') as f:",
                "+        text = b\"All I wanted was a plastic bunny rabbit.\\n\"",
                "+        with open(localname, \"wb\") as f:",
                "             f.write(text)",
                "@@ -501,5 +508,6 @@ class TestSFTP(object):",
                "             saved_progress.append((x, y))",
                "-        sftp.put(localname, sftp.FOLDER + '/bunny.txt', progress_callback)",
                "-        with sftp.open(sftp.FOLDER + '/bunny.txt', 'rb') as f:",
                "+        sftp.put(localname, sftp.FOLDER + \"/bunny.txt\", progress_callback)",
                "+",
                "+        with sftp.open(sftp.FOLDER + \"/bunny.txt\", \"rb\") as f:",
                "             assert text == f.read(128)",
                "@@ -511,5 +519,5 @@ class TestSFTP(object):",
                "         saved_progress = []",
                "-        sftp.get(sftp.FOLDER + '/bunny.txt', localname, progress_callback)",
                "+        sftp.get(sftp.FOLDER + \"/bunny.txt\", localname, progress_callback)",
                "-        with open(localname, 'rb') as f:",
                "+        with open(localname, \"rb\") as f:",
                "             assert text == f.read(128)",
                "@@ -518,3 +526,3 @@ class TestSFTP(object):",
                "         os.unlink(localname)",
                "-        sftp.unlink(sftp.FOLDER + '/bunny.txt')",
                "+        sftp.unlink(sftp.FOLDER + \"/bunny.txt\")",
                "@@ -526,15 +534,24 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        with sftp.open(sftp.FOLDER + '/kitty.txt', 'w') as f:",
                "-            f.write('here kitty kitty' * 64)",
                "+        with sftp.open(sftp.FOLDER + \"/kitty.txt\", \"w\") as f:",
                "+            f.write(\"here kitty kitty\" * 64)",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/kitty.txt', 'r') as f:",
                "-                sum = f.check('sha1')",
                "-                assert '91059CFC6615941378D413CB5ADAF4C5EB293402' == u(hexlify(sum)).upper()",
                "-                sum = f.check('md5', 0, 512)",
                "-                assert '93DE4788FCA28D471516963A1FE3856A' == u(hexlify(sum)).upper()",
                "-                sum = f.check('md5', 0, 0, 510)",
                "-                assert u(hexlify(sum)).upper() == 'EB3B45B8CD55A0707D99B177544A319F373183D241432BB2157AB9E46358C4AC90370B5CADE5D90336FC1716F90B36D6' # noqa",
                "+            with sftp.open(sftp.FOLDER + \"/kitty.txt\", \"r\") as f:",
                "+                sum = f.check(\"sha1\")",
                "+                assert (",
                "+                    \"91059CFC6615941378D413CB5ADAF4C5EB293402\"",
                "+                    == u(hexlify(sum)).upper()",
                "+                )",
                "+                sum = f.check(\"md5\", 0, 512)",
                "+                assert (",
                "+                    \"93DE4788FCA28D471516963A1FE3856A\"",
                "+                    == u(hexlify(sum)).upper()",
                "+                )",
                "+                sum = f.check(\"md5\", 0, 0, 510)",
                "+                assert (",
                "+                    u(hexlify(sum)).upper()",
                "+                    == \"EB3B45B8CD55A0707D99B177544A319F373183D241432BB2157AB9E46358C4AC90370B5CADE5D90336FC1716F90B36D6\"",
                "+                )  # noqa",
                "         finally:",
                "-            sftp.unlink(sftp.FOLDER + '/kitty.txt')",
                "+            sftp.unlink(sftp.FOLDER + \"/kitty.txt\")",
                "@@ -544,3 +561,3 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        sftp.open(sftp.FOLDER + '/unusual.txt', 'wx').close()",
                "+        sftp.open(sftp.FOLDER + \"/unusual.txt\", \"wx\").close()",
                "@@ -548,4 +565,4 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.open(sftp.FOLDER + '/unusual.txt', 'wx')",
                "-                self.fail('expected exception')",
                "+                sftp.open(sftp.FOLDER + \"/unusual.txt\", \"wx\")",
                "+                self.fail(\"expected exception\")",
                "             except IOError:",
                "@@ -553,3 +570,3 @@ class TestSFTP(object):",
                "         finally:",
                "-            sftp.unlink(sftp.FOLDER + '/unusual.txt')",
                "+            sftp.unlink(sftp.FOLDER + \"/unusual.txt\")",
                "@@ -559,10 +576,12 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        with sftp.open(sftp.FOLDER + '/something', 'w') as f:",
                "-            f.write('okay')",
                "+        with sftp.open(sftp.FOLDER + \"/something\", \"w\") as f:",
                "+            f.write(\"okay\")",
                "         try:",
                "-            sftp.rename(sftp.FOLDER + '/something', sftp.FOLDER + '/' + unicode_folder)",
                "-            sftp.open(b(sftp.FOLDER) + utf8_folder, 'r')",
                "+            sftp.rename(",
                "+                sftp.FOLDER + \"/something\", sftp.FOLDER + \"/\" + unicode_folder",
                "+            )",
                "+            sftp.open(b(sftp.FOLDER) + utf8_folder, \"r\")",
                "         except Exception as e:",
                "-            self.fail('exception ' + str(e))",
                "+            self.fail(\"exception \" + str(e))",
                "         sftp.unlink(b(sftp.FOLDER) + utf8_folder)",
                "@@ -570,11 +589,11 @@ class TestSFTP(object):",
                "     def test_L_utf8_chdir(self, sftp):",
                "-        sftp.mkdir(sftp.FOLDER + '/' + unicode_folder)",
                "+        sftp.mkdir(sftp.FOLDER + \"/\" + unicode_folder)",
                "         try:",
                "-            sftp.chdir(sftp.FOLDER + '/' + unicode_folder)",
                "-            with sftp.open('something', 'w') as f:",
                "-                f.write('okay')",
                "-            sftp.unlink('something')",
                "+            sftp.chdir(sftp.FOLDER + \"/\" + unicode_folder)",
                "+            with sftp.open(\"something\", \"w\") as f:",
                "+                f.write(\"okay\")",
                "+            sftp.unlink(\"something\")",
                "         finally:",
                "             sftp.chdir()",
                "-            sftp.rmdir(sftp.FOLDER + '/' + unicode_folder)",
                "+            sftp.rmdir(sftp.FOLDER + \"/\" + unicode_folder)",
                "@@ -584,8 +603,8 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        sftp.open(sftp.FOLDER + '/zero', 'w').close()",
                "+        sftp.open(sftp.FOLDER + \"/zero\", \"w\").close()",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/zero', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/zero\", \"r\") as f:",
                "                 f.readv([(0, 12)])",
                "-            with sftp.open(sftp.FOLDER + '/zero', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/zero\", \"r\") as f:",
                "                 file_size = f.stat().st_size",
                "@@ -594,3 +613,3 @@ class TestSFTP(object):",
                "         finally:",
                "-            sftp.unlink(sftp.FOLDER + '/zero')",
                "+            sftp.unlink(sftp.FOLDER + \"/zero\")",
                "@@ -600,3 +619,3 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        warnings.filterwarnings('ignore', 'tempnam.*')",
                "+        warnings.filterwarnings(\"ignore\", \"tempnam.*\")",
                "@@ -604,4 +623,4 @@ class TestSFTP(object):",
                "         os.close(fd)",
                "-        text = b'All I wanted was a plastic bunny rabbit.\\n'",
                "-        with open(localname, 'wb') as f:",
                "+        text = b\"All I wanted was a plastic bunny rabbit.\\n\"",
                "+        with open(localname, \"wb\") as f:",
                "             f.write(text)",
                "@@ -611,3 +630,6 @@ class TestSFTP(object):",
                "             saved_progress.append((x, y))",
                "-        res = sftp.put(localname, sftp.FOLDER + '/bunny.txt', progress_callback, False)",
                "+",
                "+        res = sftp.put(",
                "+            localname, sftp.FOLDER + \"/bunny.txt\", progress_callback, False",
                "+        )",
                "@@ -615,3 +637,3 @@ class TestSFTP(object):",
                "-        with sftp.open(sftp.FOLDER + '/bunny.txt', 'r') as f:",
                "+        with sftp.open(sftp.FOLDER + \"/bunny.txt\", \"r\") as f:",
                "             assert text == f.read(128)",
                "@@ -620,3 +642,3 @@ class TestSFTP(object):",
                "         os.unlink(localname)",
                "-        sftp.unlink(sftp.FOLDER + '/bunny.txt')",
                "+        sftp.unlink(sftp.FOLDER + \"/bunny.txt\")",
                "@@ -627,9 +649,9 @@ class TestSFTP(object):",
                "         assert sftp.getcwd() == None",
                "-        root = sftp.normalize('.')",
                "-        if root[-1] != '/':",
                "-            root += '/'",
                "+        root = sftp.normalize(\".\")",
                "+        if root[-1] != \"/\":",
                "+            root += \"/\"",
                "         try:",
                "-            sftp.mkdir(sftp.FOLDER + '/alpha')",
                "-            sftp.chdir(sftp.FOLDER + '/alpha')",
                "-            assert sftp.getcwd() == '/' + sftp.FOLDER + '/alpha'",
                "+            sftp.mkdir(sftp.FOLDER + \"/alpha\")",
                "+            sftp.chdir(sftp.FOLDER + \"/alpha\")",
                "+            assert sftp.getcwd() == \"/\" + sftp.FOLDER + \"/alpha\"",
                "         finally:",
                "@@ -637,3 +659,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.rmdir(sftp.FOLDER + '/alpha')",
                "+                sftp.rmdir(sftp.FOLDER + \"/alpha\")",
                "             except:",
                "@@ -648,14 +670,14 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open(sftp.FOLDER + '/append.txt', 'a') as f:",
                "-                f.write('first line\\nsecond line\\n')",
                "+            with sftp.open(sftp.FOLDER + \"/append.txt\", \"a\") as f:",
                "+                f.write(\"first line\\nsecond line\\n\")",
                "                 f.seek(11, f.SEEK_SET)",
                "-                f.write('third line\\n')",
                "+                f.write(\"third line\\n\")",
                "-            with sftp.open(sftp.FOLDER + '/append.txt', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + \"/append.txt\", \"r\") as f:",
                "                 assert f.stat().st_size == 34",
                "-                assert f.readline() == 'first line\\n'",
                "-                assert f.readline() == 'second line\\n'",
                "-                assert f.readline() == 'third line\\n'",
                "+                assert f.readline() == \"first line\\n\"",
                "+                assert f.readline() == \"second line\\n\"",
                "+                assert f.readline() == \"third line\\n\"",
                "         finally:",
                "-            sftp.remove(sftp.FOLDER + '/append.txt')",
                "+            sftp.remove(sftp.FOLDER + \"/append.txt\")",
                "@@ -665,3 +687,3 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        target = sftp.FOLDER + '/empty file.txt'",
                "+        target = sftp.FOLDER + \"/empty file.txt\"",
                "         stream = StringIO()",
                "@@ -684,3 +706,3 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        f = sftp.open(sftp.FOLDER + '/test%file', 'w')",
                "+        f = sftp.open(sftp.FOLDER + \"/test%file\", \"w\")",
                "         try:",
                "@@ -689,3 +711,3 @@ class TestSFTP(object):",
                "             f.close()",
                "-            sftp.remove(sftp.FOLDER + '/test%file')",
                "+            sftp.remove(sftp.FOLDER + \"/test%file\")",
                "@@ -694,10 +716,10 @@ class TestSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'w') as f:",
                "+            with sftp.open(\"%s/nonutf8data\" % sftp.FOLDER, \"w\") as f:",
                "                 f.write(NON_UTF8_DATA)",
                "-            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'r') as f:",
                "+            with sftp.open(\"%s/nonutf8data\" % sftp.FOLDER, \"r\") as f:",
                "                 data = f.read()",
                "             assert data == NON_UTF8_DATA",
                "-            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/nonutf8data\" % sftp.FOLDER, \"wb\") as f:",
                "                 f.write(NON_UTF8_DATA)",
                "-            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'rb') as f:",
                "+            with sftp.open(\"%s/nonutf8data\" % sftp.FOLDER, \"rb\") as f:",
                "                 data = f.read()",
                "@@ -705,4 +727,3 @@ class TestSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/nonutf8data' % sftp.FOLDER)",
                "-",
                "+            sftp.remove(\"%s/nonutf8data\" % sftp.FOLDER)",
                "@@ -710,10 +731,13 @@ class TestSFTP(object):",
                "         sftp_attributes = SFTPAttributes()",
                "-        assert str(sftp_attributes) == \"?---------   1 0        0               0 (unknown date) ?\"",
                "+        assert (",
                "+            str(sftp_attributes)",
                "+            == \"?---------   1 0        0               0 (unknown date) ?\"",
                "+        )",
                "-    @needs_builtin('buffer')",
                "+    @needs_builtin(\"buffer\")",
                "     def test_write_buffer(self, sftp):",
                "         \"\"\"Test write() using a buffer instance.\"\"\"",
                "-        data = 3 * b'A potentially large block of data to chunk up.\\n'",
                "+        data = 3 * b\"A potentially large block of data to chunk up.\\n\"",
                "         try:",
                "-            with sftp.open('%s/write_buffer' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/write_buffer\" % sftp.FOLDER, \"wb\") as f:",
                "                 for offset in range(0, len(data), 8):",
                "@@ -721,20 +745,20 @@ class TestSFTP(object):",
                "-            with sftp.open('%s/write_buffer' % sftp.FOLDER, 'rb') as f:",
                "+            with sftp.open(\"%s/write_buffer\" % sftp.FOLDER, \"rb\") as f:",
                "                 assert f.read() == data",
                "         finally:",
                "-            sftp.remove('%s/write_buffer' % sftp.FOLDER)",
                "+            sftp.remove(\"%s/write_buffer\" % sftp.FOLDER)",
                "-    @needs_builtin('memoryview')",
                "+    @needs_builtin(\"memoryview\")",
                "     def test_write_memoryview(self, sftp):",
                "         \"\"\"Test write() using a memoryview instance.\"\"\"",
                "-        data = 3 * b'A potentially large block of data to chunk up.\\n'",
                "+        data = 3 * b\"A potentially large block of data to chunk up.\\n\"",
                "         try:",
                "-            with sftp.open('%s/write_memoryview' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/write_memoryview\" % sftp.FOLDER, \"wb\") as f:",
                "                 view = memoryview(data)",
                "                 for offset in range(0, len(data), 8):",
                "-                    f.write(view[offset:offset+8])",
                "+                    f.write(view[offset : offset + 8])",
                "-            with sftp.open('%s/write_memoryview' % sftp.FOLDER, 'rb') as f:",
                "+            with sftp.open(\"%s/write_memoryview\" % sftp.FOLDER, \"rb\") as f:",
                "                 assert f.read() == data",
                "         finally:",
                "-            sftp.remove('%s/write_memoryview' % sftp.FOLDER)",
                "+            sftp.remove(\"%s/write_memoryview\" % sftp.FOLDER)",
                "diff --git a/tests/test_sftp_big.py b/tests/test_sftp_big.py",
                "index a659098d..9df566e8 100644",
                "--- a/tests/test_sftp_big.py",
                "+++ b/tests/test_sftp_big.py",
                "@@ -46,5 +46,7 @@ class TestBigSFTP(object):",
                "             for i in range(numfiles):",
                "-                with sftp.open('%s/file%d.txt' % (sftp.FOLDER, i), 'w', 1) as f:",
                "-                    f.write('this is file #%d.\\n' % i)",
                "-                sftp.chmod('%s/file%d.txt' % (sftp.FOLDER, i), o660)",
                "+                with sftp.open(",
                "+                    \"%s/file%d.txt\" % (sftp.FOLDER, i), \"w\", 1",
                "+                ) as f:",
                "+                    f.write(\"this is file #%d.\\n\" % i)",
                "+                sftp.chmod(\"%s/file%d.txt\" % (sftp.FOLDER, i), o660)",
                "@@ -55,4 +57,4 @@ class TestBigSFTP(object):",
                "                 r = numlist[random.randint(0, len(numlist) - 1)]",
                "-                with sftp.open('%s/file%d.txt' % (sftp.FOLDER, r)) as f:",
                "-                    assert f.readline() == 'this is file #%d.\\n' % r",
                "+                with sftp.open(\"%s/file%d.txt\" % (sftp.FOLDER, r)) as f:",
                "+                    assert f.readline() == \"this is file #%d.\\n\" % r",
                "                 numlist.remove(r)",
                "@@ -61,3 +63,3 @@ class TestBigSFTP(object):",
                "                 try:",
                "-                    sftp.remove('%s/file%d.txt' % (sftp.FOLDER, i))",
                "+                    sftp.remove(\"%s/file%d.txt\" % (sftp.FOLDER, i))",
                "                 except:",
                "@@ -69,6 +71,6 @@ class TestBigSFTP(object):",
                "         \"\"\"",
                "-        kblob = (1024 * b'x')",
                "+        kblob = 1024 * b\"x\"",
                "         start = time.time()",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"w\") as f:",
                "                 for n in range(1024):",
                "@@ -76,11 +78,13 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "             end = time.time()",
                "-            sys.stderr.write('%ds ' % round(end - start))",
                "-            ",
                "+            sys.stderr.write(\"%ds \" % round(end - start))",
                "+",
                "             start = time.time()",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"r\") as f:",
                "                 for n in range(1024):",
                "@@ -90,5 +94,5 @@ class TestBigSFTP(object):",
                "             end = time.time()",
                "-            sys.stderr.write('%ds ' % round(end - start))",
                "+            sys.stderr.write(\"%ds \" % round(end - start))",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "@@ -98,6 +102,6 @@ class TestBigSFTP(object):",
                "         \"\"\"",
                "-        kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "+        kblob = bytes().join([struct.pack(\">H\", n) for n in range(512)])",
                "         start = time.time()",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"wb\") as f:",
                "                 f.set_pipelined(True)",
                "@@ -106,11 +110,13 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "             end = time.time()",
                "-            sys.stderr.write('%ds ' % round(end - start))",
                "-            ",
                "+            sys.stderr.write(\"%ds \" % round(end - start))",
                "+",
                "             start = time.time()",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"rb\") as f:",
                "                 file_size = f.stat().st_size",
                "@@ -128,3 +134,3 @@ class TestBigSFTP(object):",
                "                     offset = n % 1024",
                "-                    assert data == k2blob[offset:offset + chunk]",
                "+                    assert data == k2blob[offset : offset + chunk]",
                "                     n += chunk",
                "@@ -132,10 +138,10 @@ class TestBigSFTP(object):",
                "             end = time.time()",
                "-            sys.stderr.write('%ds ' % round(end - start))",
                "+            sys.stderr.write(\"%ds \" % round(end - start))",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "     def test_4_prefetch_seek(self, sftp):",
                "-        kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "+        kblob = bytes().join([struct.pack(\">H\", n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"wb\") as f:",
                "                 f.set_pipelined(True)",
                "@@ -144,7 +150,9 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "-            ",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "-            ",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "+",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "+",
                "             start = time.time()",
                "@@ -153,6 +161,8 @@ class TestBigSFTP(object):",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "+                with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"rb\") as f:",
                "                     file_size = f.stat().st_size",
                "                     f.prefetch(file_size)",
                "-                    base_offset = (512 * 1024) + 17 * random.randint(1000, 2000)",
                "+                    base_offset = (512 * 1024) + 17 * random.randint(",
                "+                        1000, 2000",
                "+                    )",
                "                     offsets = [base_offset + j * chunk for j in range(100)]",
                "@@ -165,13 +175,13 @@ class TestBigSFTP(object):",
                "                         n_offset = offset % 1024",
                "-                        assert data == k2blob[n_offset:n_offset + chunk]",
                "+                        assert data == k2blob[n_offset : n_offset + chunk]",
                "                         offset += chunk",
                "             end = time.time()",
                "-            sys.stderr.write('%ds ' % round(end - start))",
                "+            sys.stderr.write(\"%ds \" % round(end - start))",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "     def test_5_readv_seek(self, sftp):",
                "-        kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "+        kblob = bytes().join([struct.pack(\">H\", n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"wb\") as f:",
                "                 f.set_pipelined(True)",
                "@@ -180,6 +190,8 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "@@ -189,4 +201,6 @@ class TestBigSFTP(object):",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "-                    base_offset = (512 * 1024) + 17 * random.randint(1000, 2000)",
                "+                with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"rb\") as f:",
                "+                    base_offset = (512 * 1024) + 17 * random.randint(",
                "+                        1000, 2000",
                "+                    )",
                "                     # make a bunch of offsets and put them in random order",
                "@@ -202,7 +216,7 @@ class TestBigSFTP(object):",
                "                         n_offset = offset % 1024",
                "-                        assert next(ret) == k2blob[n_offset:n_offset + chunk]",
                "+                        assert next(ret) == k2blob[n_offset : n_offset + chunk]",
                "             end = time.time()",
                "-            sys.stderr.write('%ds ' % round(end - start))",
                "+            sys.stderr.write(\"%ds \" % round(end - start))",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "@@ -213,5 +227,5 @@ class TestBigSFTP(object):",
                "         \"\"\"",
                "-        kblob = (1024 * b'x')",
                "+        kblob = 1024 * b\"x\"",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"w\") as f:",
                "                 f.set_pipelined(True)",
                "@@ -220,12 +234,14 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r') as f:",
                "+                with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"r\") as f:",
                "                     file_size = f.stat().st_size",
                "                     f.prefetch(file_size)",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"r\") as f:",
                "                 file_size = f.stat().st_size",
                "@@ -236,7 +252,7 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "-    ",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "+",
                "     def test_7_prefetch_readv(self, sftp):",
                "@@ -245,5 +261,5 @@ class TestBigSFTP(object):",
                "         \"\"\"",
                "-        kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "+        kblob = bytes().join([struct.pack(\">H\", n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"wb\") as f:",
                "                 f.set_pipelined(True)",
                "@@ -252,8 +268,10 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "-            ",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "+",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"rb\") as f:",
                "                 file_size = f.stat().st_size",
                "@@ -266,3 +284,6 @@ class TestBigSFTP(object):",
                "                 k2blob = kblob + kblob",
                "-                chunks = [(base_offset + (chunk_size * i), chunk_size) for i in range(20)]",
                "+                chunks = [",
                "+                    (base_offset + (chunk_size * i), chunk_size)",
                "+                    for i in range(20)",
                "+                ]",
                "                 for data in f.readv(chunks):",
                "@@ -270,9 +291,9 @@ class TestBigSFTP(object):",
                "                     assert chunk_size == len(data)",
                "-                    assert k2blob[offset:offset + chunk_size] == data",
                "+                    assert k2blob[offset : offset + chunk_size] == data",
                "                     base_offset += chunk_size",
                "-            sys.stderr.write(' ')",
                "+            sys.stderr.write(\" \")",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "-    ",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "+",
                "     def test_8_large_readv(self, sftp):",
                "@@ -282,5 +303,5 @@ class TestBigSFTP(object):",
                "         \"\"\"",
                "-        kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "+        kblob = bytes().join([struct.pack(\">H\", n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"wb\") as f:",
                "                 f.set_pipelined(True)",
                "@@ -289,8 +310,10 @@ class TestBigSFTP(object):",
                "                     if n % 128 == 0:",
                "-                        sys.stderr.write('.')",
                "-            sys.stderr.write(' ')",
                "+                        sys.stderr.write(\".\")",
                "+            sys.stderr.write(\" \")",
                "+",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "-            ",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "+            with sftp.open(\"%s/hongry.txt\" % sftp.FOLDER, \"rb\") as f:",
                "                 data = list(f.readv([(23 * 1024, 128 * 1024)]))",
                "@@ -299,7 +322,7 @@ class TestBigSFTP(object):",
                "                 assert len(data) == 128 * 1024",
                "-            ",
                "-            sys.stderr.write(' ')",
                "+",
                "+            sys.stderr.write(\" \")",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "-    ",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "+",
                "     def test_9_big_file_big_buffer(self, sftp):",
                "@@ -308,11 +331,15 @@ class TestBigSFTP(object):",
                "         \"\"\"",
                "-        mblob = (1024 * 1024 * 'x')",
                "+        mblob = 1024 * 1024 * \"x\"",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w', 128 * 1024) as f:",
                "+            with sftp.open(",
                "+                \"%s/hongry.txt\" % sftp.FOLDER, \"w\", 128 * 1024",
                "+            ) as f:",
                "                 f.write(mblob)",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "-    ",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "+",
                "     def test_A_big_file_renegotiate(self, sftp):",
                "@@ -323,5 +350,7 @@ class TestBigSFTP(object):",
                "         t.packetizer.REKEY_BYTES = 512 * 1024",
                "-        k32blob = (32 * 1024 * 'x')",
                "+        k32blob = 32 * 1024 * \"x\"",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w', 128 * 1024) as f:",
                "+            with sftp.open(",
                "+                \"%s/hongry.txt\" % sftp.FOLDER, \"w\", 128 * 1024",
                "+            ) as f:",
                "                 for i in range(32):",
                "@@ -329,7 +358,11 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "+            assert (",
                "+                sftp.stat(\"%s/hongry.txt\" % sftp.FOLDER).st_size == 1024 * 1024",
                "+            )",
                "             assert t.H != t.session_id",
                "-            ",
                "+",
                "             # try to read it too.",
                "-            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r', 128 * 1024) as f:",
                "+            with sftp.open(",
                "+                \"%s/hongry.txt\" % sftp.FOLDER, \"r\", 128 * 1024",
                "+            ) as f:",
                "                 file_size = f.stat().st_size",
                "@@ -340,3 +373,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "+            sftp.remove(\"%s/hongry.txt\" % sftp.FOLDER)",
                "             t.packetizer.REKEY_BYTES = pow(2, 30)",
                "diff --git a/tests/test_ssh_exception.py b/tests/test_ssh_exception.py",
                "index 18f2a97d..d9e0bd22 100644",
                "--- a/tests/test_ssh_exception.py",
                "+++ b/tests/test_ssh_exception.py",
                "@@ -6,7 +6,6 @@ from paramiko.ssh_exception import NoValidConnectionsError",
                "-class NoValidConnectionsErrorTest (unittest.TestCase):",
                "-",
                "+class NoValidConnectionsErrorTest(unittest.TestCase):",
                "     def test_pickling(self):",
                "         # Regression test for https://github.com/paramiko/paramiko/issues/617",
                "-        exc = NoValidConnectionsError({('127.0.0.1', '22'): Exception()})",
                "+        exc = NoValidConnectionsError({(\"127.0.0.1\", \"22\"): Exception()})",
                "         new_exc = pickle.loads(pickle.dumps(exc))",
                "@@ -17,3 +16,3 @@ class NoValidConnectionsErrorTest (unittest.TestCase):",
                "     def test_error_message_for_single_host(self):",
                "-        exc = NoValidConnectionsError({('127.0.0.1', '22'): Exception()})",
                "+        exc = NoValidConnectionsError({(\"127.0.0.1\", \"22\"): Exception()})",
                "         assert \"Unable to connect to port 22 on 127.0.0.1\" in str(exc)",
                "@@ -21,4 +20,5 @@ class NoValidConnectionsErrorTest (unittest.TestCase):",
                "     def test_error_message_for_two_hosts(self):",
                "-        exc = NoValidConnectionsError({('127.0.0.1', '22'): Exception(),",
                "-                                       ('::1', '22'): Exception()})",
                "+        exc = NoValidConnectionsError(",
                "+            {(\"127.0.0.1\", \"22\"): Exception(), (\"::1\", \"22\"): Exception()}",
                "+        )",
                "         assert \"Unable to connect to port 22 on 127.0.0.1 or ::1\" in str(exc)",
                "@@ -26,5 +26,9 @@ class NoValidConnectionsErrorTest (unittest.TestCase):",
                "     def test_error_message_for_multiple_hosts(self):",
                "-        exc = NoValidConnectionsError({('127.0.0.1', '22'): Exception(),",
                "-                                       ('::1', '22'): Exception(),",
                "-                                       ('10.0.0.42', '22'): Exception()})",
                "+        exc = NoValidConnectionsError(",
                "+            {",
                "+                (\"127.0.0.1\", \"22\"): Exception(),",
                "+                (\"::1\", \"22\"): Exception(),",
                "+                (\"10.0.0.42\", \"22\"): Exception(),",
                "+            }",
                "+        )",
                "         exp = \"Unable to connect to port 22 on 10.0.0.42, 127.0.0.1 or ::1\"",
                "diff --git a/tests/test_ssh_gss.py b/tests/test_ssh_gss.py",
                "index f0645e0e..b6b50152 100644",
                "--- a/tests/test_ssh_gss.py",
                "+++ b/tests/test_ssh_gss.py",
                "@@ -35,11 +35,8 @@ from .test_client import FINGERPRINTS",
                "-class NullServer (paramiko.ServerInterface):",
                "+class NullServer(paramiko.ServerInterface):",
                "     def get_allowed_auths(self, username):",
                "-        return 'gssapi-with-mic,publickey'",
                "+        return \"gssapi-with-mic,publickey\"",
                "     def check_auth_gssapi_with_mic(",
                "-        self,",
                "-        username,",
                "-        gss_authenticated=paramiko.AUTH_FAILED,",
                "-        cc_file=None,",
                "+        self, username, gss_authenticated=paramiko.AUTH_FAILED, cc_file=None",
                "     ):",
                "@@ -66,3 +63,3 @@ class NullServer (paramiko.ServerInterface):",
                "     def check_channel_exec_request(self, channel, command):",
                "-        if command != 'yes':",
                "+        if command != \"yes\":",
                "             return False",
                "@@ -94,3 +91,3 @@ class GSSAuthTest(unittest.TestCase):",
                "         self.ts = paramiko.Transport(self.socks)",
                "-        host_key = paramiko.RSAKey.from_private_key_file('tests/test_rsa.key')",
                "+        host_key = paramiko.RSAKey.from_private_key_file(\"tests/test_rsa.key\")",
                "         self.ts.add_server_key(host_key)",
                "@@ -105,3 +102,3 @@ class GSSAuthTest(unittest.TestCase):",
                "         \"\"\"",
                "-        host_key = paramiko.RSAKey.from_private_key_file('tests/test_rsa.key')",
                "+        host_key = paramiko.RSAKey.from_private_key_file(\"tests/test_rsa.key\")",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -110,6 +107,13 @@ class GSSAuthTest(unittest.TestCase):",
                "         self.tc.set_missing_host_key_policy(paramiko.WarningPolicy())",
                "-        self.tc.get_host_keys().add('[%s]:%d' % (self.addr, self.port),",
                "-                                    'ssh-rsa', public_host_key)",
                "-        self.tc.connect(hostname=self.addr, port=self.port, username=self.username, gss_host=self.hostname,",
                "-                        gss_auth=True, **kwargs)",
                "+        self.tc.get_host_keys().add(",
                "+            \"[%s]:%d\" % (self.addr, self.port), \"ssh-rsa\", public_host_key",
                "+        )",
                "+        self.tc.connect(",
                "+            hostname=self.addr,",
                "+            port=self.port,",
                "+            username=self.username,",
                "+            gss_host=self.hostname,",
                "+            gss_auth=True,",
                "+            **kwargs",
                "+        )",
                "@@ -121,13 +125,13 @@ class GSSAuthTest(unittest.TestCase):",
                "-        stdin, stdout, stderr = self.tc.exec_command('yes')",
                "+        stdin, stdout, stderr = self.tc.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "-        schan.send('Hello there.\\n')",
                "-        schan.send_stderr('This is on stderr.\\n')",
                "+        schan.send(\"Hello there.\\n\")",
                "+        schan.send_stderr(\"This is on stderr.\\n\")",
                "         schan.close()",
                "-        self.assertEquals('Hello there.\\n', stdout.readline())",
                "-        self.assertEquals('', stdout.readline())",
                "-        self.assertEquals('This is on stderr.\\n', stderr.readline())",
                "-        self.assertEquals('', stderr.readline())",
                "+        self.assertEquals(\"Hello there.\\n\", stdout.readline())",
                "+        self.assertEquals(\"\", stdout.readline())",
                "+        self.assertEquals(\"This is on stderr.\\n\", stderr.readline())",
                "+        self.assertEquals(\"\", stderr.readline())",
                "@@ -142,4 +146,3 @@ class GSSAuthTest(unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(allow_agent=False,",
                "-                              look_for_keys=False)",
                "+        self._test_connection(allow_agent=False, look_for_keys=False)",
                "@@ -149,5 +152,9 @@ class GSSAuthTest(unittest.TestCase):",
                "         \"\"\"",
                "-        self.hostname = \"this_host_does_not_exists_and_causes_a_GSSAPI-exception\"",
                "-        self._test_connection(key_filename=[_support('test_rsa.key')],",
                "-                              allow_agent=False,",
                "-                              look_for_keys=False)",
                "+        self.hostname = (",
                "+            \"this_host_does_not_exists_and_causes_a_GSSAPI-exception\"",
                "+        )",
                "+        self._test_connection(",
                "+            key_filename=[_support(\"test_rsa.key\")],",
                "+            allow_agent=False,",
                "+            look_for_keys=False,",
                "+        )",
                "diff --git a/tests/test_transport.py b/tests/test_transport.py",
                "index 9474acfc..13fb302e 100644",
                "--- a/tests/test_transport.py",
                "+++ b/tests/test_transport.py",
                "@@ -34,4 +34,11 @@ import unittest",
                " from paramiko import (",
                "-    Transport, SecurityOptions, ServerInterface, RSAKey, DSSKey, SSHException,",
                "-    ChannelException, Packetizer, Channel,",
                "+    Transport,",
                "+    SecurityOptions,",
                "+    ServerInterface,",
                "+    RSAKey,",
                "+    DSSKey,",
                "+    SSHException,",
                "+    ChannelException,",
                "+    Packetizer,",
                "+    Channel,",
                " )",
                "@@ -40,4 +47,9 @@ from paramiko import OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED",
                " from paramiko.common import (",
                "-    MSG_KEXINIT, cMSG_CHANNEL_WINDOW_ADJUST, MIN_PACKET_SIZE, MIN_WINDOW_SIZE,",
                "-    MAX_WINDOW_SIZE, DEFAULT_WINDOW_SIZE, DEFAULT_MAX_PACKET_SIZE,",
                "+    MSG_KEXINIT,",
                "+    cMSG_CHANNEL_WINDOW_ADJUST,",
                "+    MIN_PACKET_SIZE,",
                "+    MIN_WINDOW_SIZE,",
                "+    MAX_WINDOW_SIZE,",
                "+    DEFAULT_WINDOW_SIZE,",
                "+    DEFAULT_MAX_PACKET_SIZE,",
                " )",
                "@@ -63,14 +75,14 @@ Maybe.",
                "-class NullServer (ServerInterface):",
                "+class NullServer(ServerInterface):",
                "     paranoid_did_password = False",
                "     paranoid_did_public_key = False",
                "-    paranoid_key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "+    paranoid_key = DSSKey.from_private_key_file(_support(\"test_dss.key\"))",
                "     def get_allowed_auths(self, username):",
                "-        if username == 'slowdive':",
                "-            return 'publickey,password'",
                "-        return 'publickey'",
                "+        if username == \"slowdive\":",
                "+            return \"publickey,password\"",
                "+        return \"publickey\"",
                "     def check_auth_password(self, username, password):",
                "-        if (username == 'slowdive') and (password == 'pygmalion'):",
                "+        if (username == \"slowdive\") and (password == \"pygmalion\"):",
                "             return AUTH_SUCCESSFUL",
                "@@ -79,3 +91,3 @@ class NullServer (ServerInterface):",
                "     def check_channel_request(self, kind, chanid):",
                "-        if kind == 'bogus':",
                "+        if kind == \"bogus\":",
                "             return OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED",
                "@@ -84,3 +96,3 @@ class NullServer (ServerInterface):",
                "     def check_channel_exec_request(self, channel, command):",
                "-        if command != b'yes':",
                "+        if command != b\"yes\":",
                "             return False",
                "@@ -97,5 +109,12 @@ class NullServer (ServerInterface):",
                "         # 'acceptable' request kind",
                "-        return kind == 'acceptable'",
                "-",
                "-    def check_channel_x11_request(self, channel, single_connection, auth_protocol, auth_cookie, screen_number):",
                "+        return kind == \"acceptable\"",
                "+",
                "+    def check_channel_x11_request(",
                "+        self,",
                "+        channel,",
                "+        single_connection,",
                "+        auth_protocol,",
                "+        auth_cookie,",
                "+        screen_number,",
                "+    ):",
                "         self._x11_single_connection = single_connection",
                "@@ -108,3 +127,3 @@ class NullServer (ServerInterface):",
                "         self._listen = socket.socket()",
                "-        self._listen.bind(('127.0.0.1', 0))",
                "+        self._listen.bind((\"127.0.0.1\", 0))",
                "         self._listen.listen(1)",
                "@@ -136,5 +155,5 @@ class TransportTest(unittest.TestCase):",
                "     def setup_test_server(",
                "-        self, client_options=None, server_options=None, connect_kwargs=None,",
                "+        self, client_options=None, server_options=None, connect_kwargs=None",
                "     ):",
                "-        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -154,4 +173,4 @@ class TransportTest(unittest.TestCase):",
                "                 hostkey=public_host_key,",
                "-                username='slowdive',",
                "-                password='pygmalion',",
                "+                username=\"slowdive\",",
                "+                password=\"pygmalion\",",
                "             )",
                "@@ -165,7 +184,7 @@ class TransportTest(unittest.TestCase):",
                "         self.assertEqual(type(o), SecurityOptions)",
                "-        self.assertTrue(('aes256-cbc', 'blowfish-cbc') != o.ciphers)",
                "-        o.ciphers = ('aes256-cbc', 'blowfish-cbc')",
                "-        self.assertEqual(('aes256-cbc', 'blowfish-cbc'), o.ciphers)",
                "+        self.assertTrue((\"aes256-cbc\", \"blowfish-cbc\") != o.ciphers)",
                "+        o.ciphers = (\"aes256-cbc\", \"blowfish-cbc\")",
                "+        self.assertEqual((\"aes256-cbc\", \"blowfish-cbc\"), o.ciphers)",
                "         try:",
                "-            o.ciphers = ('aes256-cbc', 'made-up-cipher')",
                "+            o.ciphers = (\"aes256-cbc\", \"made-up-cipher\")",
                "             self.assertTrue(False)",
                "@@ -190,7 +209,9 @@ class TransportTest(unittest.TestCase):",
                "         self.tc.K = 123281095979686581523377256114209720774539068973101330872763622971399429481072519713536292772709507296759612401802191955568143056534122385270077606457721553469730659233569339356140085284052436697480759510519672848743794433460113118986816826624865291116513647975790797391795651716378444844877749505443714557929",
                "-        self.tc.H = b'\\x0C\\x83\\x07\\xCD\\xE6\\x85\\x6F\\xF3\\x0B\\xA9\\x36\\x84\\xEB\\x0F\\x04\\xC2\\x52\\x0E\\x9E\\xD3'",
                "+        self.tc.H = b\"\\x0C\\x83\\x07\\xCD\\xE6\\x85\\x6F\\xF3\\x0B\\xA9\\x36\\x84\\xEB\\x0F\\x04\\xC2\\x52\\x0E\\x9E\\xD3\"",
                "         self.tc.session_id = self.tc.H",
                "-        key = self.tc._compute_key('C', 32)",
                "-        self.assertEqual(b'207E66594CA87C44ECCBA3B3CD39FDDB378E6FDB0F97C54B2AA0CFBF900CD995',",
                "-                          hexlify(key).upper())",
                "+        key = self.tc._compute_key(\"C\", 32)",
                "+        self.assertEqual(",
                "+            b\"207E66594CA87C44ECCBA3B3CD39FDDB378E6FDB0F97C54B2AA0CFBF900CD995\",",
                "+            hexlify(key).upper(),",
                "+        )",
                "@@ -202,3 +223,3 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "-        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -213,4 +234,5 @@ class TransportTest(unittest.TestCase):",
                "         self.ts.start_server(event, server)",
                "-        self.tc.connect(hostkey=public_host_key,",
                "-                        username='slowdive', password='pygmalion')",
                "+        self.tc.connect(",
                "+            hostkey=public_host_key, username=\"slowdive\", password=\"pygmalion\"",
                "+        )",
                "         event.wait(1.0)",
                "@@ -218,4 +240,4 @@ class TransportTest(unittest.TestCase):",
                "         self.assertTrue(self.ts.is_active())",
                "-        self.assertEqual('slowdive', self.tc.get_username())",
                "-        self.assertEqual('slowdive', self.ts.get_username())",
                "+        self.assertEqual(\"slowdive\", self.tc.get_username())",
                "+        self.assertEqual(\"slowdive\", self.ts.get_username())",
                "         self.assertEqual(True, self.tc.is_authenticated())",
                "@@ -227,3 +249,3 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "-        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -235,4 +257,5 @@ class TransportTest(unittest.TestCase):",
                "         self.ts.start_server(event, server)",
                "-        self.tc.connect(hostkey=public_host_key,",
                "-                        username='slowdive', password='pygmalion')",
                "+        self.tc.connect(",
                "+            hostkey=public_host_key, username=\"slowdive\", password=\"pygmalion\"",
                "+        )",
                "         event.wait(1.0)",
                "@@ -246,8 +269,10 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "+",
                "         def force_algorithms(options):",
                "-            options.ciphers = ('aes256-cbc',)",
                "-            options.digests = ('hmac-md5-96',)",
                "+            options.ciphers = (\"aes256-cbc\",)",
                "+            options.digests = (\"hmac-md5-96\",)",
                "+",
                "         self.setup_test_server(client_options=force_algorithms)",
                "-        self.assertEqual('aes256-cbc', self.tc.local_cipher)",
                "-        self.assertEqual('aes256-cbc', self.tc.remote_cipher)",
                "+        self.assertEqual(\"aes256-cbc\", self.tc.local_cipher)",
                "+        self.assertEqual(\"aes256-cbc\", self.tc.remote_cipher)",
                "         self.assertEqual(12, self.tc.packetizer.get_mac_size_out())",
                "@@ -265,6 +290,6 @@ class TransportTest(unittest.TestCase):",
                "         self.setup_test_server()",
                "-        self.assertEqual(None, getattr(self.server, '_global_request', None))",
                "+        self.assertEqual(None, getattr(self.server, \"_global_request\", None))",
                "         self.tc.set_keepalive(1)",
                "         time.sleep(2)",
                "-        self.assertEqual('keepalive@lag.net', self.server._global_request)",
                "+        self.assertEqual(\"keepalive@lag.net\", self.server._global_request)",
                "@@ -279,3 +304,5 @@ class TransportTest(unittest.TestCase):",
                "         try:",
                "-            chan.exec_command(b'command contains \\xfc and is not a valid UTF-8 string')",
                "+            chan.exec_command(",
                "+                b\"command contains \\xfc and is not a valid UTF-8 string\"",
                "+            )",
                "             self.assertTrue(False)",
                "@@ -285,6 +312,6 @@ class TransportTest(unittest.TestCase):",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "-        schan.send('Hello there.\\n')",
                "-        schan.send_stderr('This is on stderr.\\n')",
                "+        schan.send(\"Hello there.\\n\")",
                "+        schan.send_stderr(\"This is on stderr.\\n\")",
                "         schan.close()",
                "@@ -292,7 +319,7 @@ class TransportTest(unittest.TestCase):",
                "         f = chan.makefile()",
                "-        self.assertEqual('Hello there.\\n', f.readline())",
                "-        self.assertEqual('', f.readline())",
                "+        self.assertEqual(\"Hello there.\\n\", f.readline())",
                "+        self.assertEqual(\"\", f.readline())",
                "         f = chan.makefile_stderr()",
                "-        self.assertEqual('This is on stderr.\\n', f.readline())",
                "-        self.assertEqual('', f.readline())",
                "+        self.assertEqual(\"This is on stderr.\\n\", f.readline())",
                "+        self.assertEqual(\"\", f.readline())",
                "@@ -300,6 +327,6 @@ class TransportTest(unittest.TestCase):",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "-        schan.send('Hello there.\\n')",
                "-        schan.send_stderr('This is on stderr.\\n')",
                "+        schan.send(\"Hello there.\\n\")",
                "+        schan.send_stderr(\"This is on stderr.\\n\")",
                "         schan.close()",
                "@@ -308,6 +335,6 @@ class TransportTest(unittest.TestCase):",
                "         f = chan.makefile()",
                "-        self.assertEqual('Hello there.\\n', f.readline())",
                "-        self.assertEqual('This is on stderr.\\n', f.readline())",
                "-        self.assertEqual('', f.readline())",
                "-        ",
                "+        self.assertEqual(\"Hello there.\\n\", f.readline())",
                "+        self.assertEqual(\"This is on stderr.\\n\", f.readline())",
                "+        self.assertEqual(\"\", f.readline())",
                "+",
                "     def test_6a_channel_can_be_used_as_context_manager(self):",
                "@@ -320,4 +347,4 @@ class TransportTest(unittest.TestCase):",
                "             with self.ts.accept(1.0) as schan:",
                "-                chan.exec_command('yes')",
                "-                schan.send('Hello there.\\n')",
                "+                chan.exec_command(\"yes\")",
                "+                schan.send(\"Hello there.\\n\")",
                "                 schan.close()",
                "@@ -325,4 +352,4 @@ class TransportTest(unittest.TestCase):",
                "                 f = chan.makefile()",
                "-                self.assertEqual('Hello there.\\n', f.readline())",
                "-                self.assertEqual('', f.readline())",
                "+                self.assertEqual(\"Hello there.\\n\", f.readline())",
                "+                self.assertEqual(\"\", f.readline())",
                "@@ -336,7 +363,7 @@ class TransportTest(unittest.TestCase):",
                "         schan = self.ts.accept(1.0)",
                "-        chan.send('communist j. cat\\n')",
                "+        chan.send(\"communist j. cat\\n\")",
                "         f = schan.makefile()",
                "-        self.assertEqual('communist j. cat\\n', f.readline())",
                "+        self.assertEqual(\"communist j. cat\\n\", f.readline())",
                "         chan.close()",
                "-        self.assertEqual('', f.readline())",
                "+        self.assertEqual(\"\", f.readline())",
                "@@ -348,4 +375,4 @@ class TransportTest(unittest.TestCase):",
                "         try:",
                "-            chan = self.tc.open_channel('bogus')",
                "-            self.fail('expected exception')",
                "+            chan = self.tc.open_channel(\"bogus\")",
                "+            self.fail(\"expected exception\")",
                "         except ChannelException as e:",
                "@@ -361,4 +388,4 @@ class TransportTest(unittest.TestCase):",
                "         schan = self.ts.accept(1.0)",
                "-        chan.exec_command('yes')",
                "-        schan.send('Hello there.\\n')",
                "+        chan.exec_command(\"yes\")",
                "+        schan.send(\"Hello there.\\n\")",
                "         self.assertTrue(not chan.exit_status_ready())",
                "@@ -371,4 +398,4 @@ class TransportTest(unittest.TestCase):",
                "         f = chan.makefile()",
                "-        self.assertEqual('Hello there.\\n', f.readline())",
                "-        self.assertEqual('', f.readline())",
                "+        self.assertEqual(\"Hello there.\\n\", f.readline())",
                "+        self.assertEqual(\"\", f.readline())",
                "         count = 0",
                "@@ -397,3 +424,3 @@ class TransportTest(unittest.TestCase):",
                "-        schan.send('hello\\n')",
                "+        schan.send(\"hello\\n\")",
                "@@ -409,3 +436,3 @@ class TransportTest(unittest.TestCase):",
                "-        self.assertEqual(b'hello\\n', chan.recv(6))",
                "+        self.assertEqual(b\"hello\\n\", chan.recv(6))",
                "@@ -444,3 +471,3 @@ class TransportTest(unittest.TestCase):",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "@@ -449,3 +476,3 @@ class TransportTest(unittest.TestCase):",
                "         for i in range(20):",
                "-            chan.send('x' * 1024)",
                "+            chan.send(\"x\" * 1024)",
                "         chan.close()",
                "@@ -465,7 +492,9 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "+",
                "         def force_compression(o):",
                "-            o.compression = ('zlib',)",
                "+            o.compression = (\"zlib\",)",
                "+",
                "         self.setup_test_server(force_compression, force_compression)",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "@@ -473,6 +502,6 @@ class TransportTest(unittest.TestCase):",
                "         bytes = self.tc.packetizer._Packetizer__sent_bytes",
                "-        chan.send('x' * 1024)",
                "+        chan.send(\"x\" * 1024)",
                "         bytes2 = self.tc.packetizer._Packetizer__sent_bytes",
                "-        block_size = self.tc._cipher_info[self.tc.local_cipher]['block-size']",
                "-        mac_size = self.tc._mac_info[self.tc.local_mac]['size']",
                "+        block_size = self.tc._cipher_info[self.tc.local_cipher][\"block-size\"]",
                "+        mac_size = self.tc._mac_info[self.tc.local_mac][\"size\"]",
                "         # tests show this is actually compressed to *52 bytes*!  including packet overhead!  nice!! :)",
                "@@ -490,3 +519,3 @@ class TransportTest(unittest.TestCase):",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "@@ -494,2 +523,3 @@ class TransportTest(unittest.TestCase):",
                "         requested = []",
                "+",
                "         def handler(c, addr_port):",
                "@@ -499,6 +529,8 @@ class TransportTest(unittest.TestCase):",
                "-        self.assertEqual(None, getattr(self.server, '_x11_screen_number', None))",
                "+        self.assertEqual(",
                "+            None, getattr(self.server, \"_x11_screen_number\", None)",
                "+        )",
                "         cookie = chan.request_x11(0, single_connection=True, handler=handler)",
                "         self.assertEqual(0, self.server._x11_screen_number)",
                "-        self.assertEqual('MIT-MAGIC-COOKIE-1', self.server._x11_auth_protocol)",
                "+        self.assertEqual(\"MIT-MAGIC-COOKIE-1\", self.server._x11_auth_protocol)",
                "         self.assertEqual(cookie, self.server._x11_auth_cookie)",
                "@@ -506,9 +538,9 @@ class TransportTest(unittest.TestCase):",
                "-        x11_server = self.ts.open_x11_channel(('localhost', 6093))",
                "+        x11_server = self.ts.open_x11_channel((\"localhost\", 6093))",
                "         x11_client = self.tc.accept()",
                "-        self.assertEqual('localhost', requested[0][0])",
                "+        self.assertEqual(\"localhost\", requested[0][0])",
                "         self.assertEqual(6093, requested[0][1])",
                "-        x11_server.send('hello')",
                "-        self.assertEqual(b'hello', x11_client.recv(5))",
                "+        x11_server.send(\"hello\")",
                "+        self.assertEqual(b\"hello\", x11_client.recv(5))",
                "@@ -526,3 +558,3 @@ class TransportTest(unittest.TestCase):",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "@@ -530,2 +562,3 @@ class TransportTest(unittest.TestCase):",
                "         requested = []",
                "+",
                "         def handler(c, origin_addr_port, server_addr_port):",
                "@@ -535,3 +568,3 @@ class TransportTest(unittest.TestCase):",
                "-        port = self.tc.request_port_forward('127.0.0.1', 0, handler)",
                "+        port = self.tc.request_port_forward(\"127.0.0.1\", 0, handler)",
                "         self.assertEqual(port, self.server._listen.getsockname()[1])",
                "@@ -539,9 +572,11 @@ class TransportTest(unittest.TestCase):",
                "         cs = socket.socket()",
                "-        cs.connect(('127.0.0.1', port))",
                "+        cs.connect((\"127.0.0.1\", port))",
                "         ss, _ = self.server._listen.accept()",
                "-        sch = self.ts.open_forwarded_tcpip_channel(ss.getsockname(), ss.getpeername())",
                "+        sch = self.ts.open_forwarded_tcpip_channel(",
                "+            ss.getsockname(), ss.getpeername()",
                "+        )",
                "         cch = self.tc.accept()",
                "-        sch.send('hello')",
                "-        self.assertEqual(b'hello', cch.recv(5))",
                "+        sch.send(\"hello\")",
                "+        self.assertEqual(b\"hello\", cch.recv(5))",
                "         sch.close()",
                "@@ -552,3 +587,3 @@ class TransportTest(unittest.TestCase):",
                "         # now cancel it.",
                "-        self.tc.cancel_port_forward('127.0.0.1', port)",
                "+        self.tc.cancel_port_forward(\"127.0.0.1\", port)",
                "         self.assertTrue(self.server._listen is None)",
                "@@ -562,3 +597,3 @@ class TransportTest(unittest.TestCase):",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "@@ -567,3 +602,3 @@ class TransportTest(unittest.TestCase):",
                "         greeting_server = socket.socket()",
                "-        greeting_server.bind(('127.0.0.1', 0))",
                "+        greeting_server.bind((\"127.0.0.1\", 0))",
                "         greeting_server.listen(1)",
                "@@ -571,3 +606,5 @@ class TransportTest(unittest.TestCase):",
                "-        cs = self.tc.open_channel('direct-tcpip', ('127.0.0.1', greeting_port), ('', 9000))",
                "+        cs = self.tc.open_channel(",
                "+            \"direct-tcpip\", (\"127.0.0.1\", greeting_port), (\"\", 9000)",
                "+        )",
                "         sch = self.ts.accept(1.0)",
                "@@ -577,3 +614,3 @@ class TransportTest(unittest.TestCase):",
                "         ss, _ = greeting_server.accept()",
                "-        ss.send(b'Hello!\\n')",
                "+        ss.send(b\"Hello!\\n\")",
                "         ss.close()",
                "@@ -582,3 +619,3 @@ class TransportTest(unittest.TestCase):",
                "-        self.assertEqual(b'Hello!\\n', cs.recv(7))",
                "+        self.assertEqual(b\"Hello!\\n\", cs.recv(7))",
                "         cs.close()",
                "@@ -601,3 +638,3 @@ class TransportTest(unittest.TestCase):",
                "-        schan.send_stderr('hello\\n')",
                "+        schan.send_stderr(\"hello\\n\")",
                "@@ -613,3 +650,3 @@ class TransportTest(unittest.TestCase):",
                "-        self.assertEqual(b'hello\\n', chan.recv_stderr(6))",
                "+        self.assertEqual(b\"hello\\n\", chan.recv_stderr(6))",
                "@@ -635,4 +672,4 @@ class TransportTest(unittest.TestCase):",
                "         total = 0",
                "-        K = '*' * 1024",
                "-        limit = 1+(64 * 2 ** 15)",
                "+        K = \"*\" * 1024",
                "+        limit = 1 + (64 * 2 ** 15)",
                "         while total < limit:",
                "@@ -699,3 +736,5 @@ class TransportTest(unittest.TestCase):",
                "             def __init__(self, chan, iterations, done_event):",
                "-                threading.Thread.__init__(self, None, None, self.__class__.__name__)",
                "+                threading.Thread.__init__(",
                "+                    self, None, None, self.__class__.__name__",
                "+                )",
                "                 self.setDaemon(True)",
                "@@ -709,3 +748,3 @@ class TransportTest(unittest.TestCase):",
                "                 try:",
                "-                    for i in range(1, 1+self.iterations):",
                "+                    for i in range(1, 1 + self.iterations):",
                "                         if self.done_event.is_set():",
                "@@ -713,3 +752,3 @@ class TransportTest(unittest.TestCase):",
                "                         self.watchdog_event.set()",
                "-                        #print i, \"SEND\"",
                "+                        # print i, \"SEND\"",
                "                         self.chan.send(\"x\" * 2048)",
                "@@ -721,3 +760,5 @@ class TransportTest(unittest.TestCase):",
                "             def __init__(self, chan, done_event):",
                "-                threading.Thread.__init__(self, None, None, self.__class__.__name__)",
                "+                threading.Thread.__init__(",
                "+                    self, None, None, self.__class__.__name__",
                "+                )",
                "                 self.setDaemon(True)",
                "@@ -744,3 +785,3 @@ class TransportTest(unittest.TestCase):",
                "         chan = self.tc.open_session()",
                "-        chan.exec_command('yes')",
                "+        chan.exec_command(\"yes\")",
                "         schan = self.ts.accept(1.0)",
                "@@ -751,6 +792,9 @@ class TransportTest(unittest.TestCase):",
                "         # on a real MSG_CHANNEL_WINDOW_ADJUST message.",
                "-        self.tc._handler_table = self.tc._handler_table.copy()  # copy per-class dictionary",
                "+        self.tc._handler_table = (",
                "+            self.tc._handler_table.copy()",
                "+        )  # copy per-class dictionary",
                "         _negotiate_keys = self.tc._handler_table[MSG_KEXINIT]",
                "+",
                "         def _negotiate_keys_wrapper(self, m):",
                "-            if self.local_kex_init is None: # Remote side sent KEXINIT",
                "+            if self.local_kex_init is None:  # Remote side sent KEXINIT",
                "                 # Simulate in-transit MSG_CHANNEL_WINDOW_ADJUST by sending it",
                "@@ -760,5 +804,6 @@ class TransportTest(unittest.TestCase):",
                "                 m2.add_int(chan.remote_chanid)",
                "-                m2.add_int(1)    # bytes to add",
                "+                m2.add_int(1)  # bytes to add",
                "                 self._send_message(m2)",
                "             return _negotiate_keys(self, m)",
                "+",
                "         self.tc._handler_table[MSG_KEXINIT] = _negotiate_keys_wrapper",
                "@@ -766,4 +811,4 @@ class TransportTest(unittest.TestCase):",
                "         # Parameters for the test",
                "-        iterations = 500    # The deadlock does not happen every time, but it",
                "-                            # should after many iterations.",
                "+        iterations = 500  # The deadlock does not happen every time, but it",
                "+        # should after many iterations.",
                "         timeout = 5",
                "@@ -809,5 +854,7 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "-        for val, correct in [(4095, MIN_PACKET_SIZE),",
                "-                             (None, DEFAULT_MAX_PACKET_SIZE),",
                "-                             (2**32, MAX_WINDOW_SIZE)]:",
                "+        for val, correct in [",
                "+            (4095, MIN_PACKET_SIZE),",
                "+            (None, DEFAULT_MAX_PACKET_SIZE),",
                "+            (2 ** 32, MAX_WINDOW_SIZE),",
                "+        ]:",
                "             self.assertEqual(self.tc._sanitize_packet_size(val), correct)",
                "@@ -818,5 +865,7 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "-        for val, correct in [(32767, MIN_WINDOW_SIZE),",
                "-                             (None, DEFAULT_WINDOW_SIZE),",
                "-                             (2**32, MAX_WINDOW_SIZE)]:",
                "+        for val, correct in [",
                "+            (32767, MIN_WINDOW_SIZE),",
                "+            (None, DEFAULT_WINDOW_SIZE),",
                "+            (2 ** 32, MAX_WINDOW_SIZE),",
                "+        ]:",
                "             self.assertEqual(self.tc._sanitize_window_size(val), correct)",
                "@@ -839,2 +888,3 @@ class TransportTest(unittest.TestCase):",
                "                 return super(SlowPacketizer, self).read_message()",
                "+",
                "         # NOTE: prettttty sure since the replaced .packetizer Packetizer is now",
                "@@ -844,3 +894,3 @@ class TransportTest(unittest.TestCase):",
                "         # Continue with regular test red tape.",
                "-        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support(\"test_rsa.key\"))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -852,6 +902,9 @@ class TransportTest(unittest.TestCase):",
                "         self.ts.start_server(event, server)",
                "-        self.assertRaises(EOFError, self.tc.connect,",
                "-                          hostkey=public_host_key,",
                "-                          username='slowdive',",
                "-                          password='pygmalion')",
                "+        self.assertRaises(",
                "+            EOFError,",
                "+            self.tc.connect,",
                "+            hostkey=public_host_key,",
                "+            username=\"slowdive\",",
                "+            password=\"pygmalion\",",
                "+        )",
                "@@ -896,3 +949,3 @@ class TransportTest(unittest.TestCase):",
                "-    @needs_builtin('buffer')",
                "+    @needs_builtin(\"buffer\")",
                "     def test_channel_send_buffer(self):",
                "@@ -902,3 +955,3 @@ class TransportTest(unittest.TestCase):",
                "         self.setup_test_server()",
                "-        data = 3 * b'some test data\\n whole'",
                "+        data = 3 * b\"some test data\\n whole\"",
                "         with self.tc.open_session() as chan:",
                "@@ -919,3 +972,3 @@ class TransportTest(unittest.TestCase):",
                "-    @needs_builtin('memoryview')",
                "+    @needs_builtin(\"memoryview\")",
                "     def test_channel_send_memoryview(self):",
                "@@ -925,3 +978,3 @@ class TransportTest(unittest.TestCase):",
                "         self.setup_test_server()",
                "-        data = 3 * b'some test data\\n whole'",
                "+        data = 3 * b\"some test data\\n whole\"",
                "         with self.tc.open_session() as chan:",
                "@@ -936,3 +989,3 @@ class TransportTest(unittest.TestCase):",
                "             while sent < len(view):",
                "-                sent += chan.send(view[sent:sent+8])",
                "+                sent += chan.send(view[sent : sent + 8])",
                "             self.assertEqual(sfile.read(len(data)), data)",
                "@@ -956,3 +1009,3 @@ class TransportTest(unittest.TestCase):",
                "         # from the test server.",
                "-        self.tc.global_request('acceptable')",
                "+        self.tc.global_request(\"acceptable\")",
                "         # Global requests never raise exceptions, even on failure (not sure why",
                "@@ -971,3 +1024,3 @@ class TransportTest(unittest.TestCase):",
                "         try:",
                "-            self.tc.request_port_forward('localhost', 1234)",
                "+            self.tc.request_port_forward(\"localhost\", 1234)",
                "         except SSHException as e:",
                "diff --git a/tests/test_util.py b/tests/test_util.py",
                "index 1b6b5c92..12256b39 100644",
                "--- a/tests/test_util.py",
                "+++ b/tests/test_util.py",
                "@@ -74,34 +74,34 @@ class UtilTest(unittest.TestCase):",
                "         symbols = list(globals().keys())",
                "-        self.assertTrue('Transport' in symbols)",
                "-        self.assertTrue('SSHClient' in symbols)",
                "-        self.assertTrue('MissingHostKeyPolicy' in symbols)",
                "-        self.assertTrue('AutoAddPolicy' in symbols)",
                "-        self.assertTrue('RejectPolicy' in symbols)",
                "-        self.assertTrue('WarningPolicy' in symbols)",
                "-        self.assertTrue('SecurityOptions' in symbols)",
                "-        self.assertTrue('SubsystemHandler' in symbols)",
                "-        self.assertTrue('Channel' in symbols)",
                "-        self.assertTrue('RSAKey' in symbols)",
                "-        self.assertTrue('DSSKey' in symbols)",
                "-        self.assertTrue('Message' in symbols)",
                "-        self.assertTrue('SSHException' in symbols)",
                "-        self.assertTrue('AuthenticationException' in symbols)",
                "-        self.assertTrue('PasswordRequiredException' in symbols)",
                "-        self.assertTrue('BadAuthenticationType' in symbols)",
                "-        self.assertTrue('ChannelException' in symbols)",
                "-        self.assertTrue('SFTP' in symbols)",
                "-        self.assertTrue('SFTPFile' in symbols)",
                "-        self.assertTrue('SFTPHandle' in symbols)",
                "-        self.assertTrue('SFTPClient' in symbols)",
                "-        self.assertTrue('SFTPServer' in symbols)",
                "-        self.assertTrue('SFTPError' in symbols)",
                "-        self.assertTrue('SFTPAttributes' in symbols)",
                "-        self.assertTrue('SFTPServerInterface' in symbols)",
                "-        self.assertTrue('ServerInterface' in symbols)",
                "-        self.assertTrue('BufferedFile' in symbols)",
                "-        self.assertTrue('Agent' in symbols)",
                "-        self.assertTrue('AgentKey' in symbols)",
                "-        self.assertTrue('HostKeys' in symbols)",
                "-        self.assertTrue('SSHConfig' in symbols)",
                "-        self.assertTrue('util' in symbols)",
                "+        self.assertTrue(\"Transport\" in symbols)",
                "+        self.assertTrue(\"SSHClient\" in symbols)",
                "+        self.assertTrue(\"MissingHostKeyPolicy\" in symbols)",
                "+        self.assertTrue(\"AutoAddPolicy\" in symbols)",
                "+        self.assertTrue(\"RejectPolicy\" in symbols)",
                "+        self.assertTrue(\"WarningPolicy\" in symbols)",
                "+        self.assertTrue(\"SecurityOptions\" in symbols)",
                "+        self.assertTrue(\"SubsystemHandler\" in symbols)",
                "+        self.assertTrue(\"Channel\" in symbols)",
                "+        self.assertTrue(\"RSAKey\" in symbols)",
                "+        self.assertTrue(\"DSSKey\" in symbols)",
                "+        self.assertTrue(\"Message\" in symbols)",
                "+        self.assertTrue(\"SSHException\" in symbols)",
                "+        self.assertTrue(\"AuthenticationException\" in symbols)",
                "+        self.assertTrue(\"PasswordRequiredException\" in symbols)",
                "+        self.assertTrue(\"BadAuthenticationType\" in symbols)",
                "+        self.assertTrue(\"ChannelException\" in symbols)",
                "+        self.assertTrue(\"SFTP\" in symbols)",
                "+        self.assertTrue(\"SFTPFile\" in symbols)",
                "+        self.assertTrue(\"SFTPHandle\" in symbols)",
                "+        self.assertTrue(\"SFTPClient\" in symbols)",
                "+        self.assertTrue(\"SFTPServer\" in symbols)",
                "+        self.assertTrue(\"SFTPError\" in symbols)",
                "+        self.assertTrue(\"SFTPAttributes\" in symbols)",
                "+        self.assertTrue(\"SFTPServerInterface\" in symbols)",
                "+        self.assertTrue(\"ServerInterface\" in symbols)",
                "+        self.assertTrue(\"BufferedFile\" in symbols)",
                "+        self.assertTrue(\"Agent\" in symbols)",
                "+        self.assertTrue(\"AgentKey\" in symbols)",
                "+        self.assertTrue(\"HostKeys\" in symbols)",
                "+        self.assertTrue(\"SSHConfig\" in symbols)",
                "+        self.assertTrue(\"util\" in symbols)",
                "@@ -111,7 +111,24 @@ class UtilTest(unittest.TestCase):",
                "         config = paramiko.util.parse_ssh_config(f)",
                "-        self.assertEqual(config._config,",
                "-            [{'host': ['*'], 'config': {}}, {'host': ['*'], 'config': {'identityfile': ['~/.ssh/id_rsa'], 'user': 'robey'}},",
                "-            {'host': ['*.example.com'], 'config': {'user': 'bjork', 'port': '3333'}},",
                "-            {'host': ['*'], 'config': {'crazy': 'something dumb'}},",
                "-            {'host': ['spoo.example.com'], 'config': {'crazy': 'something else'}}])",
                "+        self.assertEqual(",
                "+            config._config,",
                "+            [",
                "+                {\"host\": [\"*\"], \"config\": {}},",
                "+                {",
                "+                    \"host\": [\"*\"],",
                "+                    \"config\": {",
                "+                        \"identityfile\": [\"~/.ssh/id_rsa\"],",
                "+                        \"user\": \"robey\",",
                "+                    },",
                "+                },",
                "+                {",
                "+                    \"host\": [\"*.example.com\"],",
                "+                    \"config\": {\"user\": \"bjork\", \"port\": \"3333\"},",
                "+                },",
                "+                {\"host\": [\"*\"], \"config\": {\"crazy\": \"something dumb\"}},",
                "+                {",
                "+                    \"host\": [\"spoo.example.com\"],",
                "+                    \"config\": {\"crazy\": \"something else\"},",
                "+                },",
                "+            ],",
                "+        )",
                "@@ -123,21 +140,27 @@ class UtilTest(unittest.TestCase):",
                "         for host, values in {",
                "-            'irc.danger.com':   {'crazy': 'something dumb',",
                "-                                'hostname': 'irc.danger.com',",
                "-                                'user': 'robey'},",
                "-            'irc.example.com':  {'crazy': 'something dumb',",
                "-                                'hostname': 'irc.example.com',",
                "-                                'user': 'robey',",
                "-                                'port': '3333'},",
                "-            'spoo.example.com': {'crazy': 'something dumb',",
                "-                                'hostname': 'spoo.example.com',",
                "-                                'user': 'robey',",
                "-                                'port': '3333'}",
                "+            \"irc.danger.com\": {",
                "+                \"crazy\": \"something dumb\",",
                "+                \"hostname\": \"irc.danger.com\",",
                "+                \"user\": \"robey\",",
                "+            },",
                "+            \"irc.example.com\": {",
                "+                \"crazy\": \"something dumb\",",
                "+                \"hostname\": \"irc.example.com\",",
                "+                \"user\": \"robey\",",
                "+                \"port\": \"3333\",",
                "+            },",
                "+            \"spoo.example.com\": {",
                "+                \"crazy\": \"something dumb\",",
                "+                \"hostname\": \"spoo.example.com\",",
                "+                \"user\": \"robey\",",
                "+                \"port\": \"3333\",",
                "+            },",
                "         }.items():",
                "-            values = dict(values,",
                "+            values = dict(",
                "+                values,",
                "                 hostname=host,",
                "-                identityfile=[os.path.expanduser(\"~/.ssh/id_rsa\")]",
                "+                identityfile=[os.path.expanduser(\"~/.ssh/id_rsa\")],",
                "             )",
                "             self.assertEqual(",
                "-                paramiko.util.lookup_ssh_host_config(host, config),",
                "-                values",
                "+                paramiko.util.lookup_ssh_host_config(host, config), values",
                "             )",
                "@@ -145,11 +168,16 @@ class UtilTest(unittest.TestCase):",
                "     def test_generate_key_bytes(self):",
                "-        x = paramiko.util.generate_key_bytes(sha1, b'ABCDEFGH', 'This is my secret passphrase.', 64)",
                "-        hex = ''.join(['%02x' % byte_ord(c) for c in x])",
                "-        self.assertEqual(hex, '9110e2f6793b69363e58173e9436b13a5a4b339005741d5c680e505f57d871347b4239f14fb5c46e857d5e100424873ba849ac699cea98d729e57b3e84378e8b')",
                "+        x = paramiko.util.generate_key_bytes(",
                "+            sha1, b\"ABCDEFGH\", \"This is my secret passphrase.\", 64",
                "+        )",
                "+        hex = \"\".join([\"%02x\" % byte_ord(c) for c in x])",
                "+        self.assertEqual(",
                "+            hex,",
                "+            \"9110e2f6793b69363e58173e9436b13a5a4b339005741d5c680e505f57d871347b4239f14fb5c46e857d5e100424873ba849ac699cea98d729e57b3e84378e8b\",",
                "+        )",
                "     def test_host_keys(self):",
                "-        with open('hostfile.temp', 'w') as f:",
                "+        with open(\"hostfile.temp\", \"w\") as f:",
                "             f.write(test_hosts_file)",
                "         try:",
                "-            hostdict = paramiko.util.load_host_keys('hostfile.temp')",
                "+            hostdict = paramiko.util.load_host_keys(\"hostfile.temp\")",
                "             self.assertEqual(2, len(hostdict))",
                "@@ -157,6 +185,8 @@ class UtilTest(unittest.TestCase):",
                "             self.assertEqual(1, len(list(hostdict.values())[1]))",
                "-            fp = hexlify(hostdict['secure.example.com']['ssh-rsa'].get_fingerprint()).upper()",
                "-            self.assertEqual(b'E6684DB30E109B67B70FF1DC5C7F1363', fp)",
                "+            fp = hexlify(",
                "+                hostdict[\"secure.example.com\"][\"ssh-rsa\"].get_fingerprint()",
                "+            ).upper()",
                "+            self.assertEqual(b\"E6684DB30E109B67B70FF1DC5C7F1363\", fp)",
                "         finally:",
                "-            os.unlink('hostfile.temp')",
                "+            os.unlink(\"hostfile.temp\")",
                "@@ -175,6 +205,6 @@ Host *",
                "         config = paramiko.util.parse_ssh_config(f)",
                "-        host = 'www13.example.com'",
                "+        host = \"www13.example.com\"",
                "         self.assertEqual(",
                "             paramiko.util.lookup_ssh_host_config(host, config),",
                "-            {'hostname': host, 'port': '22'}",
                "+            {\"hostname\": host, \"port\": \"22\"},",
                "         )",
                "@@ -182,3 +212,3 @@ Host *",
                "     def test_eintr_retry(self):",
                "-        self.assertEqual('foo', paramiko.util.retry_on_signal(lambda: 'foo'))",
                "+        self.assertEqual(\"foo\", paramiko.util.retry_on_signal(lambda: \"foo\"))",
                "@@ -187,2 +217,3 @@ Host *",
                "         call_count = [0]",
                "+",
                "         def raises_intr():",
                "@@ -191,3 +222,4 @@ Host *",
                "                 intr_errors_remaining[0] -= 1",
                "-                raise IOError(errno.EINTR, 'file', 'interrupted system call')",
                "+                raise IOError(errno.EINTR, \"file\", \"interrupted system call\")",
                "+",
                "         self.assertTrue(paramiko.util.retry_on_signal(raises_intr) is None)",
                "@@ -197,10 +229,16 @@ Host *",
                "         def raises_ioerror_not_eintr():",
                "-            raise IOError(errno.ENOENT, 'file', 'file not found')",
                "-        self.assertRaises(IOError,",
                "-                          lambda: paramiko.util.retry_on_signal(raises_ioerror_not_eintr))",
                "+            raise IOError(errno.ENOENT, \"file\", \"file not found\")",
                "+",
                "+        self.assertRaises(",
                "+            IOError,",
                "+            lambda: paramiko.util.retry_on_signal(raises_ioerror_not_eintr),",
                "+        )",
                "         def raises_other_exception():",
                "-            raise AssertionError('foo')",
                "-        self.assertRaises(AssertionError,",
                "-                          lambda: paramiko.util.retry_on_signal(raises_other_exception))",
                "+            raise AssertionError(\"foo\")",
                "+",
                "+        self.assertRaises(",
                "+            AssertionError,",
                "+            lambda: paramiko.util.retry_on_signal(raises_other_exception),",
                "+        )",
                "@@ -219,6 +257,5 @@ Host equals-delimited",
                "         config = paramiko.util.parse_ssh_config(f)",
                "-        for host in ('space-delimited', 'equals-delimited'):",
                "+        for host in (\"space-delimited\", \"equals-delimited\"):",
                "             self.assertEqual(",
                "-                host_config(host, config)['proxycommand'],",
                "-                'foo bar=biz baz'",
                "+                host_config(host, config)[\"proxycommand\"], \"foo bar=biz baz\"",
                "             )",
                "@@ -229,3 +266,5 @@ Host equals-delimited",
                "         \"\"\"",
                "-        config = paramiko.util.parse_ssh_config(StringIO(\"\"\"",
                "+        config = paramiko.util.parse_ssh_config(",
                "+            StringIO(",
                "+                \"\"\"",
                " Host specific",
                "@@ -240,12 +279,11 @@ Host *",
                "     ProxyCommand host %h port %p",
                "-\"\"\"))",
                "+\"\"\"",
                "+            )",
                "+        )",
                "         for host, val in (",
                "-            ('foo.com', \"host foo.com port 25\"),",
                "-            ('specific', \"host specific port 37 lol\"),",
                "-            ('portonly', \"host portonly port 155\"),",
                "+            (\"foo.com\", \"host foo.com port 25\"),",
                "+            (\"specific\", \"host specific port 37 lol\"),",
                "+            (\"portonly\", \"host portonly port 155\"),",
                "         ):",
                "-            self.assertEqual(",
                "-                host_config(host, config)['proxycommand'],",
                "-                val",
                "-            )",
                "+            self.assertEqual(host_config(host, config)[\"proxycommand\"], val)",
                "@@ -255,9 +293,14 @@ Host *",
                "         \"\"\"",
                "-        config = paramiko.util.parse_ssh_config(StringIO(\"\"\"",
                "+        config = paramiko.util.parse_ssh_config(",
                "+            StringIO(",
                "+                \"\"\"",
                " Host test",
                "     ProxyCommand    ssh -F ~/.ssh/test_config bastion nc %h %p",
                "-\"\"\"))",
                "+\"\"\"",
                "+            )",
                "+        )",
                "         self.assertEqual(",
                "-            'ssh -F %s/.ssh/test_config bastion nc test 22' % os.path.expanduser('~'),",
                "-            host_config('test', config)['proxycommand']",
                "+            \"ssh -F %s/.ssh/test_config bastion nc test 22\"",
                "+            % os.path.expanduser(\"~\"),",
                "+            host_config(\"test\", config)[\"proxycommand\"],",
                "         )",
                "@@ -280,6 +323,6 @@ Host *",
                "         config = paramiko.util.parse_ssh_config(f)",
                "-        host = 'www13.example.com'",
                "+        host = \"www13.example.com\"",
                "         self.assertEqual(",
                "             paramiko.util.lookup_ssh_host_config(host, config),",
                "-            {'hostname': host, 'port': '8080'}",
                "+            {\"hostname\": host, \"port\": \"8080\"},",
                "         )",
                "@@ -298,9 +341,14 @@ ProxyCommand foo=bar:%h-%p",
                "         for host, values in {",
                "-            'proxy-with-equal-divisor-and-space'   :{'hostname': 'proxy-with-equal-divisor-and-space',",
                "-                                                     'proxycommand': 'foo=bar'},",
                "-            'proxy-with-equal-divisor-and-no-space':{'hostname': 'proxy-with-equal-divisor-and-no-space',",
                "-                                                     'proxycommand': 'foo=bar'},",
                "-            'proxy-without-equal-divisor'          :{'hostname': 'proxy-without-equal-divisor',",
                "-                                                     'proxycommand':",
                "-                                                     'foo=bar:proxy-without-equal-divisor-22'}",
                "+            \"proxy-with-equal-divisor-and-space\": {",
                "+                \"hostname\": \"proxy-with-equal-divisor-and-space\",",
                "+                \"proxycommand\": \"foo=bar\",",
                "+            },",
                "+            \"proxy-with-equal-divisor-and-no-space\": {",
                "+                \"hostname\": \"proxy-with-equal-divisor-and-no-space\",",
                "+                \"proxycommand\": \"foo=bar\",",
                "+            },",
                "+            \"proxy-without-equal-divisor\": {",
                "+                \"hostname\": \"proxy-without-equal-divisor\",",
                "+                \"proxycommand\": \"foo=bar:proxy-without-equal-divisor-22\",",
                "+            },",
                "         }.items():",
                "@@ -310,4 +358,3 @@ ProxyCommand foo=bar:%h-%p",
                "             self.assertEqual(",
                "-                paramiko.util.lookup_ssh_host_config(host, config),",
                "-                values",
                "+                paramiko.util.lookup_ssh_host_config(host, config), values",
                "             )",
                "@@ -329,8 +376,11 @@ IdentityFile id_dsa22",
                "         for host, values in {",
                "-            'foo'   :{'hostname': 'foo',",
                "-                      'identityfile': ['id_dsa0', 'id_dsa1']},",
                "-            'dsa2'  :{'hostname': 'dsa2',",
                "-                      'identityfile': ['id_dsa0', 'id_dsa1', 'id_dsa2', 'id_dsa22']},",
                "-            'dsa22' :{'hostname': 'dsa22',",
                "-                      'identityfile': ['id_dsa0', 'id_dsa1', 'id_dsa22']}",
                "+            \"foo\": {\"hostname\": \"foo\", \"identityfile\": [\"id_dsa0\", \"id_dsa1\"]},",
                "+            \"dsa2\": {",
                "+                \"hostname\": \"dsa2\",",
                "+                \"identityfile\": [\"id_dsa0\", \"id_dsa1\", \"id_dsa2\", \"id_dsa22\"],",
                "+            },",
                "+            \"dsa22\": {",
                "+                \"hostname\": \"dsa22\",",
                "+                \"identityfile\": [\"id_dsa0\", \"id_dsa1\", \"id_dsa22\"],",
                "+            },",
                "         }.items():",
                "@@ -340,4 +390,3 @@ IdentityFile id_dsa22",
                "             self.assertEqual(",
                "-                paramiko.util.lookup_ssh_host_config(host, config),",
                "-                values",
                "+                paramiko.util.lookup_ssh_host_config(host, config), values",
                "             )",
                "@@ -353,3 +402,5 @@ IdentityFile something_%l_using_fqdn",
                "         config = paramiko.util.parse_ssh_config(StringIO(test_config))",
                "-        assert config.lookup('meh')  # will die during lookup() if bug regresses",
                "+        assert config.lookup(",
                "+            \"meh\"",
                "+        )  # will die during lookup() if bug regresses",
                "@@ -369,3 +420,6 @@ IdentityFile something_%l_using_fqdn",
                "         config = paramiko.util.parse_ssh_config(f)",
                "-        self.assertEqual(config.get_hostnames(), set(['*', '*.example.com', 'spoo.example.com']))",
                "+        self.assertEqual(",
                "+            config.get_hostnames(),",
                "+            set([\"*\", \"*.example.com\", \"spoo.example.com\"]),",
                "+        )",
                "@@ -386,16 +440,13 @@ Host param4 \"p a r\" \"p\" \"par\" para",
                "         res = {",
                "-            'param pam': {'hostname': 'param pam', 'port': '1111'},",
                "-            'param': {'hostname': 'param', 'port': '1111'},",
                "-            'pam': {'hostname': 'pam', 'port': '1111'},",
                "-",
                "-            'param2': {'hostname': 'param2', 'port': '2222'},",
                "-",
                "-            'param3': {'hostname': 'param3', 'port': '3333'},",
                "-            'parara': {'hostname': 'parara', 'port': '3333'},",
                "-",
                "-            'param4': {'hostname': 'param4', 'port': '4444'},",
                "-            'p a r': {'hostname': 'p a r', 'port': '4444'},",
                "-            'p': {'hostname': 'p', 'port': '4444'},",
                "-            'par': {'hostname': 'par', 'port': '4444'},",
                "-            'para': {'hostname': 'para', 'port': '4444'},",
                "+            \"param pam\": {\"hostname\": \"param pam\", \"port\": \"1111\"},",
                "+            \"param\": {\"hostname\": \"param\", \"port\": \"1111\"},",
                "+            \"pam\": {\"hostname\": \"pam\", \"port\": \"1111\"},",
                "+            \"param2\": {\"hostname\": \"param2\", \"port\": \"2222\"},",
                "+            \"param3\": {\"hostname\": \"param3\", \"port\": \"3333\"},",
                "+            \"parara\": {\"hostname\": \"parara\", \"port\": \"3333\"},",
                "+            \"param4\": {\"hostname\": \"param4\", \"port\": \"4444\"},",
                "+            \"p a r\": {\"hostname\": \"p a r\", \"port\": \"4444\"},",
                "+            \"p\": {\"hostname\": \"p\", \"port\": \"4444\"},",
                "+            \"par\": {\"hostname\": \"par\", \"port\": \"4444\"},",
                "+            \"para\": {\"hostname\": \"para\", \"port\": \"4444\"},",
                "         }",
                "@@ -405,4 +456,3 @@ Host param4 \"p a r\" \"p\" \"par\" para",
                "             self.assertEquals(",
                "-                paramiko.util.lookup_ssh_host_config(host, config),",
                "-                values",
                "+                paramiko.util.lookup_ssh_host_config(host, config), values",
                "             )",
                "@@ -422,10 +472,14 @@ Host param3 parara",
                "         res = {",
                "-            'param pam': {'hostname': 'param pam', 'identityfile': ['id_rsa']},",
                "-            'param': {'hostname': 'param', 'identityfile': ['id_rsa']},",
                "-            'pam': {'hostname': 'pam', 'identityfile': ['id_rsa']},",
                "-",
                "-            'param2': {'hostname': 'param2', 'identityfile': ['test rsa key']},",
                "-",
                "-            'param3': {'hostname': 'param3', 'identityfile': ['id_rsa', 'test rsa key']},",
                "-            'parara': {'hostname': 'parara', 'identityfile': ['id_rsa', 'test rsa key']},",
                "+            \"param pam\": {\"hostname\": \"param pam\", \"identityfile\": [\"id_rsa\"]},",
                "+            \"param\": {\"hostname\": \"param\", \"identityfile\": [\"id_rsa\"]},",
                "+            \"pam\": {\"hostname\": \"pam\", \"identityfile\": [\"id_rsa\"]},",
                "+            \"param2\": {\"hostname\": \"param2\", \"identityfile\": [\"test rsa key\"]},",
                "+            \"param3\": {",
                "+                \"hostname\": \"param3\",",
                "+                \"identityfile\": [\"id_rsa\", \"test rsa key\"],",
                "+            },",
                "+            \"parara\": {",
                "+                \"hostname\": \"parara\",",
                "+                \"identityfile\": [\"id_rsa\", \"test rsa key\"],",
                "+            },",
                "         }",
                "@@ -435,4 +489,3 @@ Host param3 parara",
                "             self.assertEquals(",
                "-                paramiko.util.lookup_ssh_host_config(host, config),",
                "-                values",
                "+                paramiko.util.lookup_ssh_host_config(host, config), values",
                "             )",
                "@@ -442,28 +495,17 @@ Host param3 parara",
                "         correct_data = {",
                "-            'param': ['param'],",
                "-            '\"param\"': ['param'],",
                "-",
                "-            'param pam': ['param', 'pam'],",
                "-            '\"param\" \"pam\"': ['param', 'pam'],",
                "-            '\"param\" pam': ['param', 'pam'],",
                "-            'param \"pam\"': ['param', 'pam'],",
                "-",
                "-            'param \"pam\" p': ['param', 'pam', 'p'],",
                "-            '\"param\" pam \"p\"': ['param', 'pam', 'p'],",
                "-",
                "-            '\"pa ram\"': ['pa ram'],",
                "-            '\"pa ram\" pam': ['pa ram', 'pam'],",
                "-            'param \"p a m\"': ['param', 'p a m'],",
                "+            \"param\": [\"param\"],",
                "+            '\"param\"': [\"param\"],",
                "+            \"param pam\": [\"param\", \"pam\"],",
                "+            '\"param\" \"pam\"': [\"param\", \"pam\"],",
                "+            '\"param\" pam': [\"param\", \"pam\"],",
                "+            'param \"pam\"': [\"param\", \"pam\"],",
                "+            'param \"pam\" p': [\"param\", \"pam\", \"p\"],",
                "+            '\"param\" pam \"p\"': [\"param\", \"pam\", \"p\"],",
                "+            '\"pa ram\"': [\"pa ram\"],",
                "+            '\"pa ram\" pam': [\"pa ram\", \"pam\"],",
                "+            'param \"p a m\"': [\"param\", \"p a m\"],",
                "         }",
                "-        incorrect_data = [",
                "-            'param\"',",
                "-            '\"param',",
                "-            'param \"pam',",
                "-            'param \"pam\" \"p a',",
                "-        ]",
                "+        incorrect_data = ['param\"', '\"param', 'param \"pam', 'param \"pam\" \"p a']",
                "         for host, values in correct_data.items():",
                "-            self.assertEquals(",
                "-                conf._get_hosts(host),",
                "-                values",
                "-            )",
                "+            self.assertEquals(conf._get_hosts(host), values)",
                "         for host in incorrect_data:",
                "@@ -492,4 +534,8 @@ Host proxycommand-with-equals-none",
                "         for host, values in {",
                "-            'proxycommand-standard-none':    {'hostname': 'proxycommand-standard-none'},",
                "-            'proxycommand-with-equals-none': {'hostname': 'proxycommand-with-equals-none'}",
                "+            \"proxycommand-standard-none\": {",
                "+                \"hostname\": \"proxycommand-standard-none\"",
                "+            },",
                "+            \"proxycommand-with-equals-none\": {",
                "+                \"hostname\": \"proxycommand-with-equals-none\"",
                "+            },",
                "         }.items():",
                "@@ -499,4 +545,3 @@ Host proxycommand-with-equals-none",
                "             self.assertEqual(",
                "-                paramiko.util.lookup_ssh_host_config(host, config),",
                "-                values",
                "+                paramiko.util.lookup_ssh_host_config(host, config), values",
                "             )",
                "@@ -523,10 +568,8 @@ Host *",
                "         # Threw another unrelated host in there just for sanity reasons.",
                "-        self.assertFalse('proxycommand' in config.lookup('specific-host'))",
                "+        self.assertFalse(\"proxycommand\" in config.lookup(\"specific-host\"))",
                "         self.assertEqual(",
                "-            config.lookup('other-host')['proxycommand'],",
                "-            'other-proxy'",
                "+            config.lookup(\"other-host\")[\"proxycommand\"], \"other-proxy\"",
                "         )",
                "         self.assertEqual(",
                "-            config.lookup('some-random-host')['proxycommand'],",
                "-            'default-proxy'",
                "+            config.lookup(\"some-random-host\")[\"proxycommand\"], \"default-proxy\"",
                "         )"
            ],
            "changed_files": [
                "demos/demo.py",
                "demos/demo_keygen.py",
                "demos/demo_server.py",
                "demos/demo_sftp.py",
                "demos/demo_simple.py",
                "demos/forward.py",
                "demos/interactive.py",
                "demos/rforward.py",
                "paramiko/__init__.py",
                "paramiko/_version.py",
                "paramiko/_winapi.py",
                "paramiko/agent.py",
                "paramiko/auth_handler.py",
                "paramiko/ber.py",
                "paramiko/buffered_pipe.py",
                "paramiko/channel.py",
                "paramiko/client.py",
                "paramiko/common.py",
                "paramiko/compress.py",
                "paramiko/config.py",
                "paramiko/dsskey.py",
                "paramiko/ecdsakey.py",
                "paramiko/file.py",
                "paramiko/hostkeys.py",
                "paramiko/kex_gex.py",
                "paramiko/kex_group1.py",
                "paramiko/kex_group14.py",
                "paramiko/kex_gss.py",
                "paramiko/message.py",
                "paramiko/packet.py",
                "paramiko/pipe.py",
                "paramiko/pkey.py",
                "paramiko/primes.py",
                "paramiko/proxy.py",
                "paramiko/py3compat.py",
                "paramiko/rsakey.py",
                "paramiko/server.py",
                "paramiko/sftp.py",
                "paramiko/sftp_attr.py",
                "paramiko/sftp_client.py",
                "paramiko/sftp_file.py",
                "paramiko/sftp_handle.py",
                "paramiko/sftp_server.py",
                "paramiko/sftp_si.py",
                "paramiko/ssh_exception.py",
                "paramiko/ssh_gss.py",
                "paramiko/transport.py",
                "paramiko/util.py",
                "paramiko/win_pageant.py",
                "setup.cfg",
                "setup.py",
                "setup_helper.py",
                "sites/shared_conf.py",
                "sites/www/conf.py",
                "tasks.py",
                "tests/conftest.py",
                "tests/loop.py",
                "tests/stub_sftp.py",
                "tests/test_auth.py",
                "tests/test_buffered_pipe.py",
                "tests/test_client.py",
                "tests/test_file.py",
                "tests/test_gssapi.py",
                "tests/test_hostkeys.py",
                "tests/test_kex.py",
                "tests/test_kex_gss.py",
                "tests/test_message.py",
                "tests/test_packetizer.py",
                "tests/test_pkey.py",
                "tests/test_sftp.py",
                "tests/test_sftp_big.py",
                "tests/test_ssh_exception.py",
                "tests/test_ssh_gss.py",
                "tests/test_transport.py",
                "tests/test_util.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: RCE, SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: server, version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8ea387e95c2a0d704a0117bb8217b79213b64ebe",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508783685,
            "hunks": 1,
            "message": "Nuke old test.py",
            "diff": [
                "diff --git a/test.py b/test.py",
                "deleted file mode 100755",
                "index 7849c149..00000000",
                "--- a/test.py",
                "+++ /dev/null",
                "@@ -1,196 +0,0 @@",
                "-#!/usr/bin/env python",
                "-",
                "-# Copyright (C) 2003-2007  Robey Pointer <robeypointer@gmail.com>",
                "-#",
                "-# This file is part of paramiko.",
                "-#",
                "-# Paramiko is free software; you can redistribute it and/or modify it under the",
                "-# terms of the GNU Lesser General Public License as published by the Free",
                "-# Software Foundation; either version 2.1 of the License, or (at your option)",
                "-# any later version.",
                "-#",
                "-# Paramiko is distributed in the hope that it will be useful, but WITHOUT ANY",
                "-# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR",
                "-# A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more",
                "-# details.",
                "-#",
                "-# You should have received a copy of the GNU Lesser General Public License",
                "-# along with Paramiko; if not, write to the Free Software Foundation, Inc.,",
                "-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.",
                "-",
                "-\"\"\"",
                "-do the unit tests!",
                "-\"\"\"",
                "-",
                "-# flake8: noqa",
                "-import os",
                "-import re",
                "-import sys",
                "-import unittest",
                "-from optparse import OptionParser",
                "-import paramiko",
                "-import threading",
                "-from paramiko.py3compat import PY2",
                "-",
                "-sys.path.append('tests')",
                "-",
                "-from tests.test_message import MessageTest",
                "-from tests.test_file import BufferedFileTest",
                "-from tests.test_buffered_pipe import BufferedPipeTest",
                "-from tests.test_util import UtilTest",
                "-from tests.test_hostkeys import HostKeysTest",
                "-from tests.test_pkey import KeyTest",
                "-from tests.test_kex import KexTest",
                "-from tests.test_packetizer import PacketizerTest",
                "-from tests.test_auth import AuthTest",
                "-from tests.test_transport import TransportTest",
                "-from tests.test_ssh_exception import NoValidConnectionsErrorTest",
                "-from tests.test_client import SSHClientTest",
                "-from test_client import SSHClientTest  # XXX why shadow the above import?",
                "-from test_gssapi import GSSAPITest",
                "-from test_ssh_gss import GSSAuthTest",
                "-from test_kex_gss import GSSKexTest",
                "-",
                "-default_host = 'localhost'",
                "-default_user = os.environ.get('USER', 'nobody')",
                "-default_keyfile = os.path.join(os.environ.get('HOME', '/'), '.ssh/id_rsa')",
                "-default_passwd = None",
                "-",
                "-",
                "-def iter_suite_tests(suite):",
                "-    \"\"\"Return all tests in a suite, recursing through nested suites\"\"\"",
                "-    for item in suite._tests:",
                "-        if isinstance(item, unittest.TestCase):",
                "-            yield item",
                "-        elif isinstance(item, unittest.TestSuite):",
                "-            for r in iter_suite_tests(item):",
                "-                yield r",
                "-        else:",
                "-            raise Exception('unknown object %r inside test suite %r'",
                "-                            % (item, suite))",
                "-",
                "-",
                "-def filter_suite_by_re(suite, pattern):",
                "-    result = unittest.TestSuite()",
                "-    filter_re = re.compile(pattern)",
                "-    for test in iter_suite_tests(suite):",
                "-        if filter_re.search(test.id()):",
                "-            result.addTest(test)",
                "-    return result",
                "-",
                "-",
                "-def main():",
                "-    parser = OptionParser('usage: %prog [options]')",
                "-    parser.add_option('--verbose', action='store_true', dest='verbose', default=False,",
                "-                      help='verbose display (one line per test)')",
                "-    parser.add_option('--no-pkey', action='store_false', dest='use_pkey', default=True,",
                "-                      help='skip RSA/DSS private key tests (which can take a while)')",
                "-    parser.add_option('--no-transport', action='store_false', dest='use_transport', default=True,",
                "-                      help='skip transport tests (which can take a while)')",
                "-    parser.add_option('--no-sftp', action='store_false', dest='use_sftp', default=True,",
                "-                      help='skip SFTP client/server tests, which can be slow')",
                "-    parser.add_option('--no-big-file', action='store_false', dest='use_big_file', default=True,",
                "-                      help='skip big file SFTP tests, which are slow as molasses')",
                "-    parser.add_option('--gssapi-test', action='store_true', dest='gssapi_test', default=False,",
                "-                      help='Test the used APIs for GSS-API / SSPI authentication')",
                "-    parser.add_option('--test-gssauth', action='store_true', dest='test_gssauth', default=False,",
                "-                      help='Test GSS-API / SSPI authentication for SSHv2. To test this, you need kerberos a infrastructure.\\",
                "-                      Note: Paramiko needs access to your krb5.keytab file. Make it readable for Paramiko or\\",
                "-                      copy the used key to another file and set the environment variable KRB5_KTNAME to this file.')",
                "-    parser.add_option('--test-gssapi-keyex', action='store_true', dest='test_gsskex', default=False,",
                "-                      help='Test GSS-API / SSPI authenticated iffie-Hellman Key Exchange and user\\",
                "-                      authentication. To test this, you need kerberos a infrastructure.\\",
                "-                      Note: Paramiko needs access to your krb5.keytab file. Make it readable for Paramiko or\\",
                "-                      copy the used key to another file and set the environment variable KRB5_KTNAME to this file.')",
                "-    parser.add_option('-R', action='store_false', dest='use_loopback_sftp', default=True,",
                "-                      help='perform SFTP tests against a remote server (by default, SFTP tests ' +",
                "-                      'are done through a loopback socket)')",
                "-    parser.add_option('-H', '--sftp-host', dest='hostname', type='string', default=default_host,",
                "-                      metavar='<host>',",
                "-                      help='[with -R] host for remote sftp tests (default: %s)' % default_host)",
                "-    parser.add_option('-U', '--sftp-user', dest='username', type='string', default=default_user,",
                "-                      metavar='<username>',",
                "-                      help='[with -R] username for remote sftp tests (default: %s)' % default_user)",
                "-    parser.add_option('-K', '--sftp-key', dest='keyfile', type='string', default=default_keyfile,",
                "-                      metavar='<keyfile>',",
                "-                      help='[with -R] location of private key for remote sftp tests (default: %s)' %",
                "-                      default_keyfile)",
                "-    parser.add_option('-P', '--sftp-passwd', dest='password', type='string', default=default_passwd,",
                "-                      metavar='<password>',",
                "-                      help='[with -R] (optional) password to unlock the private key for remote sftp tests')",
                "-    parser.add_option('--krb5_principal', dest='krb5_principal', type='string',",
                "-                      metavar='<krb5_principal>',",
                "-                      help='The krb5 principal (your username) for GSS-API / SSPI authentication')",
                "-    parser.add_option('--targ_name', dest='targ_name', type='string',",
                "-                      metavar='<targ_name>',",
                "-                      help='Target name for GSS-API / SSPI authentication.\\",
                "-                      This is the hosts name you are running the test on in the kerberos database.')",
                "-    parser.add_option('--server_mode', action='store_true', dest='server_mode', default=False,",
                "-                      help='Usage with --gssapi-test. Test the available GSS-API / SSPI server mode to.\\",
                "-                      Note: you need to have access to the kerberos keytab file.')",
                "-",
                "-    options, args = parser.parse_args()",
                "-",
                "-    # setup logging",
                "-    paramiko.util.log_to_file('test.log')",
                "-",
                "-    if options.use_sftp:",
                "-        from tests.test_sftp import SFTPTest",
                "-        if options.use_loopback_sftp:",
                "-            SFTPTest.init_loopback()",
                "-        else:",
                "-            SFTPTest.init(options.hostname, options.username, options.keyfile, options.password)",
                "-        if not options.use_big_file:",
                "-            SFTPTest.set_big_file_test(False)",
                "-    if options.use_big_file:",
                "-        from tests.test_sftp_big import BigSFTPTest",
                "-",
                "-    suite = unittest.TestSuite()",
                "-    suite.addTest(unittest.makeSuite(MessageTest))",
                "-    suite.addTest(unittest.makeSuite(BufferedFileTest))",
                "-    suite.addTest(unittest.makeSuite(BufferedPipeTest))",
                "-    suite.addTest(unittest.makeSuite(UtilTest))",
                "-    suite.addTest(unittest.makeSuite(HostKeysTest))",
                "-    if options.use_pkey:",
                "-        suite.addTest(unittest.makeSuite(KeyTest))",
                "-    suite.addTest(unittest.makeSuite(KexTest))",
                "-    suite.addTest(unittest.makeSuite(PacketizerTest))",
                "-    if options.use_transport:",
                "-        suite.addTest(unittest.makeSuite(AuthTest))",
                "-        suite.addTest(unittest.makeSuite(TransportTest))",
                "-    suite.addTest(unittest.makeSuite(NoValidConnectionsErrorTest))",
                "-    suite.addTest(unittest.makeSuite(SSHClientTest))",
                "-    if options.use_sftp:",
                "-        suite.addTest(unittest.makeSuite(SFTPTest))",
                "-    if options.use_big_file:",
                "-        suite.addTest(unittest.makeSuite(BigSFTPTest))",
                "-    if options.gssapi_test:",
                "-        GSSAPITest.init(options.targ_name, options.server_mode)",
                "-        suite.addTest(unittest.makeSuite(GSSAPITest))",
                "-    if options.test_gssauth:",
                "-        GSSAuthTest.init(options.krb5_principal, options.targ_name)",
                "-        suite.addTest(unittest.makeSuite(GSSAuthTest))",
                "-    if options.test_gsskex:",
                "-        GSSKexTest.init(options.krb5_principal, options.targ_name)",
                "-        suite.addTest(unittest.makeSuite(GSSKexTest))",
                "-    verbosity = 1",
                "-    if options.verbose:",
                "-        verbosity = 2",
                "-",
                "-    runner = unittest.TextTestRunner(verbosity=verbosity)",
                "-    if len(args) > 0:",
                "-        filter = '|'.join(args)",
                "-        suite = filter_suite_by_re(suite, filter)",
                "-    result = runner.run(suite)",
                "-    # Clean up stale threads from poorly cleaned-up tests.",
                "-    # TODO: make that not a problem, jeez",
                "-    for thread in threading.enumerate():",
                "-        if thread is not threading.currentThread():",
                "-            thread.join(timeout=1)",
                "-    # Exit correctly",
                "-    if not result.wasSuccessful():",
                "-        sys.exit(1)",
                "-",
                "-",
                "-if __name__ == '__main__':",
                "-    main()"
            ],
            "changed_files": [
                "test.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "9b9e2bcbc185b5b4557cf7fe5efe22626deee610",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537237093,
            "hunks": 7,
            "message": "s/test_path/_support/g",
            "diff": [
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 3d00aefb..48af2a57 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -274,3 +274,3 @@ class SSHClientTest(unittest.TestCase):",
                "             cert_name = 'test_{0}.key-cert.pub'.format(type_)",
                "-            cert_path = test_path(os.path.join('cert_support', cert_name))",
                "+            cert_path = _support(os.path.join('cert_support', cert_name))",
                "             self._test_connection(",
                "@@ -289,3 +289,3 @@ class SSHClientTest(unittest.TestCase):",
                "             key_name = 'test_{0}.key'.format(type_)",
                "-            key_path = test_path(os.path.join('cert_support', key_name))",
                "+            key_path = _support(os.path.join('cert_support', key_name))",
                "             self._test_connection(",
                "diff --git a/tests/test_pkey.py b/tests/test_pkey.py",
                "index c805c4bc..2479f273 100644",
                "--- a/tests/test_pkey.py",
                "+++ b/tests/test_pkey.py",
                "@@ -490,3 +490,3 @@ class KeyTest(unittest.TestCase):",
                "     def test_ed25519_load_from_file_obj(self):",
                "-        with open(test_path('test_ed25519.key')) as pkey_fileobj:",
                "+        with open(_support('test_ed25519.key')) as pkey_fileobj:",
                "             key = Ed25519Key.from_private_key(pkey_fileobj)",
                "@@ -515,6 +515,6 @@ class KeyTest(unittest.TestCase):",
                "         # PKey.load_certificate",
                "-        key_path = test_path(os.path.join('cert_support', 'test_rsa.key'))",
                "+        key_path = _support(os.path.join('cert_support', 'test_rsa.key'))",
                "         key = RSAKey.from_private_key_file(key_path)",
                "         self.assertTrue(key.public_blob is None)",
                "-        cert_path = test_path(",
                "+        cert_path = _support(",
                "             os.path.join('cert_support', 'test_rsa.key-cert.pub')",
                "@@ -537,3 +537,3 @@ class KeyTest(unittest.TestCase):",
                "         # Prevented from loading certificate that doesn't match",
                "-        key_path = test_path(os.path.join('cert_support', 'test_ed25519.key'))",
                "+        key_path = _support(os.path.join('cert_support', 'test_ed25519.key'))",
                "         key1 = Ed25519Key.from_private_key_file(key_path)",
                "@@ -542,3 +542,3 @@ class KeyTest(unittest.TestCase):",
                "             key1.load_certificate,",
                "-            test_path('test_rsa.key-cert.pub'),",
                "+            _support('test_rsa.key-cert.pub'),",
                "         )"
            ],
            "changed_files": [
                "tests/test_client.py",
                "tests/test_pkey.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "0552bc3756f919a4644e790b2c401b688e5c6216",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508787225,
            "hunks": 56,
            "message": "Get sftp-big tests apparently passing. Very slowly. Pretty sure we will want to retain module-level fixtures for that stuff. heh.",
            "diff": [
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index d3760bf7..432d3e40 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -96,5 +96,29 @@ utf8_folder = b'/\\xc3\\xbcnic\\xc3\\xb8\\x64\\x65'",
                "-def get_sftp():",
                "-    global sftp",
                "-    return sftp",
                "+# TODO: turn into a pytest fixture; consider making it module or session-global",
                "+# to mimic old behavior (though that still feels unclean to me...)",
                "+def make_loopback_sftp():",
                "+    \"\"\"",
                "+    Set up an in-memory SFTP server.",
                "+",
                "+    :returns:",
                "+        A 2-tuple of the resulting SFTPClient (for tests that just care about a",
                "+        'default' client) and Transport (for testing instantiation _of_",
                "+        SFTPClient itself, which can take an existing transport object.)",
                "+    \"\"\"",
                "+    socks = LoopSocket()",
                "+    sockc = LoopSocket()",
                "+    sockc.link(socks)",
                "+    tc = paramiko.Transport(sockc)",
                "+    ts = paramiko.Transport(socks)",
                "+",
                "+    host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+    ts.add_server_key(host_key)",
                "+    event = threading.Event()",
                "+    server = StubServer()",
                "+    ts.set_subsystem_handler('sftp', paramiko.SFTPServer, StubSFTPServer)",
                "+    ts.start_server(event, server)",
                "+    tc.connect(username='slowdive', password='pygmalion')",
                "+    event.wait(1.0)",
                "+",
                "+    return paramiko.SFTP.from_transport(tc), tc",
                "@@ -102,55 +126,2 @@ def get_sftp():",
                " class SFTPTest (unittest.TestCase):",
                "-    @staticmethod",
                "-    def init(hostname, username, keyfile, passwd):",
                "-        global sftp, tc",
                "-",
                "-        t = paramiko.Transport(hostname)",
                "-        tc = t",
                "-        try:",
                "-            key = paramiko.RSAKey.from_private_key_file(keyfile, passwd)",
                "-        except paramiko.PasswordRequiredException:",
                "-            sys.stderr.write('\\n\\nparamiko.RSAKey.from_private_key_file REQUIRES PASSWORD.\\n')",
                "-            sys.stderr.write('You have two options:\\n')",
                "-            sys.stderr.write('* Use the \"-K\" option to point to a different (non-password-protected)\\n')",
                "-            sys.stderr.write('  private key file.\\n')",
                "-            sys.stderr.write('* Use the \"-P\" option to provide the password needed to unlock this private\\n')",
                "-            sys.stderr.write('  key.\\n')",
                "-            sys.stderr.write('\\n')",
                "-            sys.exit(1)",
                "-        try:",
                "-            t.connect(username=username, pkey=key)",
                "-        except paramiko.SSHException:",
                "-            t.close()",
                "-            sys.stderr.write('\\n\\nparamiko.Transport.connect FAILED.\\n')",
                "-            sys.stderr.write('There are several possible reasons why it might fail so quickly:\\n\\n')",
                "-            sys.stderr.write('* The host to connect to (%s) is not a valid SSH server.\\n' % hostname)",
                "-            sys.stderr.write('  (Use the \"-H\" option to change the host.)\\n')",
                "-            sys.stderr.write('* The username to auth as (%s) is invalid.\\n' % username)",
                "-            sys.stderr.write('  (Use the \"-U\" option to change the username.)\\n')",
                "-            sys.stderr.write('* The private key given (%s) is not accepted by the server.\\n' % keyfile)",
                "-            sys.stderr.write('  (Use the \"-K\" option to provide a different key file.)\\n')",
                "-            sys.stderr.write('\\n')",
                "-            sys.exit(1)",
                "-        sftp = paramiko.SFTP.from_transport(t)",
                "-",
                "-    @staticmethod",
                "-    def init_loopback():",
                "-        global sftp, tc",
                "-",
                "-        socks = LoopSocket()",
                "-        sockc = LoopSocket()",
                "-        sockc.link(socks)",
                "-        tc = paramiko.Transport(sockc)",
                "-        ts = paramiko.Transport(socks)",
                "-",
                "-        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "-        ts.add_server_key(host_key)",
                "-        event = threading.Event()",
                "-        server = StubServer()",
                "-        ts.set_subsystem_handler('sftp', paramiko.SFTPServer, StubSFTPServer)",
                "-        ts.start_server(event, server)",
                "-        tc.connect(username='slowdive', password='pygmalion')",
                "-        event.wait(1.0)",
                "-",
                "-        sftp = paramiko.SFTP.from_transport(tc)",
                "@@ -162,2 +133,7 @@ class SFTPTest (unittest.TestCase):",
                "     def setUp(self):",
                "+        # TODO: I think this was created to allow working around litter from",
                "+        # broken previous test runs, and/or to allow concurrent testing? Either",
                "+        # way I hate it and it should die ASAP in favor of pytest fixtures or",
                "+        # similar things that do try/finally.",
                "+        # TODO: also, for god's sake remove the global in favor of self.",
                "         global FOLDER",
                "diff --git a/tests/test_sftp_big.py b/tests/test_sftp_big.py",
                "index 580ba64e..ef12b05c 100644",
                "--- a/tests/test_sftp_big.py",
                "+++ b/tests/test_sftp_big.py",
                "@@ -34,3 +34,3 @@ from paramiko.common import o660",
                "-from .test_sftp import get_sftp",
                "+from .test_sftp import make_loopback_sftp",
                "@@ -44,3 +44,4 @@ class BigSFTPTest (unittest.TestCase):",
                "         global FOLDER",
                "-        sftp = get_sftp()",
                "+        self.sftp, _ = make_loopback_sftp()",
                "+        # TODO: same TODOs as in test_sftp.py re: not doing this awful crap",
                "         for i in range(1000):",
                "@@ -48,3 +49,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             try:",
                "-                sftp.mkdir(FOLDER)",
                "+                self.sftp.mkdir(FOLDER)",
                "                 break",
                "@@ -54,4 +55,3 @@ class BigSFTPTest (unittest.TestCase):",
                "     def tearDown(self):",
                "-        sftp = get_sftp()",
                "-        sftp.rmdir(FOLDER)",
                "+        self.sftp.rmdir(FOLDER)",
                "@@ -61,3 +61,2 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "         numfiles = 100",
                "@@ -65,5 +64,5 @@ class BigSFTPTest (unittest.TestCase):",
                "             for i in range(numfiles):",
                "-                with sftp.open('%s/file%d.txt' % (FOLDER, i), 'w', 1) as f:",
                "+                with self.sftp.open('%s/file%d.txt' % (FOLDER, i), 'w', 1) as f:",
                "                     f.write('this is file #%d.\\n' % i)",
                "-                sftp.chmod('%s/file%d.txt' % (FOLDER, i), o660)",
                "+                self.sftp.chmod('%s/file%d.txt' % (FOLDER, i), o660)",
                "@@ -74,3 +73,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                 r = numlist[random.randint(0, len(numlist) - 1)]",
                "-                with sftp.open('%s/file%d.txt' % (FOLDER, r)) as f:",
                "+                with self.sftp.open('%s/file%d.txt' % (FOLDER, r)) as f:",
                "                     self.assertEqual(f.readline(), 'this is file #%d.\\n' % r)",
                "@@ -80,3 +79,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                 try:",
                "-                    sftp.remove('%s/file%d.txt' % (FOLDER, i))",
                "+                    self.sftp.remove('%s/file%d.txt' % (FOLDER, i))",
                "                 except:",
                "@@ -88,3 +87,2 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "         kblob = (1024 * b'x')",
                "@@ -92,3 +90,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "                 for n in range(1024):",
                "@@ -99,3 +97,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "             end = time.time()",
                "@@ -104,3 +102,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             start = time.time()",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "                 for n in range(1024):",
                "@@ -112,3 +110,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "@@ -118,3 +116,2 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "         kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "@@ -122,3 +119,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -130,3 +127,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "             end = time.time()",
                "@@ -135,3 +132,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             start = time.time()",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -155,9 +152,8 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "     def test_4_prefetch_seek(self):",
                "-        sftp = get_sftp()",
                "         kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -169,3 +165,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "@@ -175,3 +171,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+                with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                     file_size = f.stat().st_size",
                "@@ -192,9 +188,8 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "     def test_5_readv_seek(self):",
                "-        sftp = get_sftp()",
                "         kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -206,3 +201,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "@@ -212,3 +207,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+                with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                     base_offset = (512 * 1024) + 17 * random.randint(1000, 2000)",
                "@@ -229,3 +224,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "@@ -236,6 +231,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "         kblob = (1024 * b'x')",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "                 f.set_pipelined(True)",
                "@@ -247,9 +241,9 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+                with self.sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "                     file_size = f.stat().st_size",
                "                     f.prefetch(file_size)",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -263,3 +257,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "@@ -269,6 +263,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "         kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -280,5 +273,5 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -300,3 +293,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "@@ -307,6 +300,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "         kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -318,5 +310,5 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                 data = list(f.readv([(23 * 1024, 128 * 1024)]))",
                "@@ -328,3 +320,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "@@ -334,11 +326,10 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "         mblob = (1024 * 1024 * 'x')",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "                 f.write(mblob)",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "@@ -348,4 +339,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        sftp = get_sftp()",
                "-        t = sftp.sock.get_transport()",
                "+        t = self.sftp.sock.get_transport()",
                "         t.packetizer.REKEY_BYTES = 512 * 1024",
                "@@ -353,3 +343,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "                 for i in range(32):",
                "@@ -357,3 +347,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "             self.assertNotEqual(t.H, t.session_id)",
                "@@ -361,3 +351,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             # try to read it too.",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'r', 128 * 1024) as f:",
                "+            with self.sftp.open('%s/hongry.txt' % FOLDER, 'r', 128 * 1024) as f:",
                "                 file_size = f.stat().st_size",
                "@@ -368,10 +358,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "             t.packetizer.REKEY_BYTES = pow(2, 30)",
                "-",
                "-",
                "-if __name__ == '__main__':",
                "-    from tests.test_sftp import SFTPTest",
                "-    SFTPTest.init_loopback()",
                "-    from unittest import main",
                "-    main()"
            ],
            "changed_files": [
                "tests/test_sftp.py",
                "tests/test_sftp_big.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "008ac2bfb2f886346ba17bd8f47e92fa8b436a3c",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537234413,
            "hunks": 13,
            "message": "Test-level fixes for pytest & friends, 2.2 edition",
            "diff": [
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 35756893..53ba53e4 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -210,3 +210,3 @@ class SSHClientTest(unittest.TestCase):",
                "     def test_client_ed25519(self):",
                "-        self._test_connection(key_filename=test_path('test_ed25519.key'))",
                "+        self._test_connection(key_filename=_support('test_ed25519.key'))",
                "diff --git a/tests/test_pkey.py b/tests/test_pkey.py",
                "index ffd68db0..a70671b5 100644",
                "--- a/tests/test_pkey.py",
                "+++ b/tests/test_pkey.py",
                "@@ -464,5 +464,5 @@ class KeyTest(unittest.TestCase):",
                "     def test_ed25519(self):",
                "-        key1 = Ed25519Key.from_private_key_file(test_path('test_ed25519.key'))",
                "+        key1 = Ed25519Key.from_private_key_file(_support('test_ed25519.key'))",
                "         key2 = Ed25519Key.from_private_key_file(",
                "-            test_path('test_ed25519_password.key'), b'abc123'",
                "+            _support('test_ed25519_password.key'), b'abc123'",
                "         )",
                "@@ -472,3 +472,3 @@ class KeyTest(unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = Ed25519Key.from_private_key_file(test_path('test_ed25519.key'))",
                "+        key = Ed25519Key.from_private_key_file(_support('test_ed25519.key'))",
                "         self.assertEqual(key, key)",
                "@@ -482,3 +482,3 @@ class KeyTest(unittest.TestCase):",
                "         key = Ed25519Key.from_private_key_file(",
                "-            test_path('test_ed25519_password.key'),",
                "+            _support('test_ed25519_password.key'),",
                "             # NOTE: not a bytes. Amusingly, the test above for same key DOES",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index 288541b9..a86fca5d 100644",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -187,3 +187,3 @@ class TestSFTP(object):",
                "-    def test_5a_posix_rename(self):",
                "+    def test_5a_posix_rename(self, sftp):",
                "         \"\"\"Test posix-rename@openssh.com protocol extension.\"\"\"",
                "@@ -191,9 +191,9 @@ class TestSFTP(object):",
                "             # first check that the normal rename works as specified",
                "-            with sftp.open(FOLDER + '/a', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/a', 'w') as f:",
                "                 f.write('one')",
                "-            sftp.rename(FOLDER + '/a', FOLDER + '/b')",
                "-            with sftp.open(FOLDER + '/a', 'w') as f:",
                "+            sftp.rename(sftp.FOLDER + '/a', sftp.FOLDER + '/b')",
                "+            with sftp.open(sftp.FOLDER + '/a', 'w') as f:",
                "                 f.write('two')",
                "             try:",
                "-                sftp.rename(FOLDER + '/a', FOLDER + '/b')",
                "+                sftp.rename(sftp.FOLDER + '/a', sftp.FOLDER + '/b')",
                "                 self.assertTrue(False, 'no exception when rename-ing onto existing file')",
                "@@ -203,6 +203,7 @@ class TestSFTP(object):",
                "             # now check with the posix_rename",
                "-            sftp.posix_rename(FOLDER + '/a', FOLDER + '/b')",
                "-            with sftp.open(FOLDER + '/b', 'r') as f:",
                "+            sftp.posix_rename(sftp.FOLDER + '/a', sftp.FOLDER + '/b')",
                "+            with sftp.open(sftp.FOLDER + '/b', 'r') as f:",
                "                 data = u(f.read())",
                "-            self.assertEqual('two', data, \"Contents of renamed file not the same as original file\")",
                "+            err = \"Contents of renamed file not the same as original file\"",
                "+            assert data == \"two\", err",
                "@@ -210,3 +211,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(FOLDER + '/a')",
                "+                sftp.remove(sftp.FOLDER + '/a')",
                "             except:",
                "@@ -214,3 +215,3 @@ class TestSFTP(object):",
                "             try:",
                "-                sftp.remove(FOLDER + '/b')",
                "+                sftp.remove(sftp.FOLDER + '/b')",
                "             except:"
            ],
            "changed_files": [
                "tests/test_client.py",
                "tests/test_pkey.py",
                "tests/test_sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "db358dc149f7549c147e520bbe5c26b571d899d4",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1518216527,
            "hunks": 8,
            "message": "Fix Sphinx and PEP 8 warnings",
            "diff": [
                "diff --git a/paramiko/ssh_gss.py b/paramiko/ssh_gss.py",
                "index 4c245471..ff2fa065 100644",
                "--- a/paramiko/ssh_gss.py",
                "+++ b/paramiko/ssh_gss.py",
                "@@ -88,3 +88,3 @@ def GSSAuth(auth_method, gss_deleg_creds=True):",
                "              object or an `_SSH_SSPI` (Windows) object",
                "-    :rtype: Object",
                "+    :rtype: object",
                "@@ -94,4 +94,4 @@ def GSSAuth(auth_method, gss_deleg_creds=True):",
                "     :note: Check for the available API and return either an `._SSH_GSSAPI_OLD`",
                "-           (MIT GSSAPI using python-gssapi package) object, an `._SSH_GSSAPI_NEW`",
                "-           (MIT GSSAPI using gssapi package) object",
                "+           (MIT GSSAPI using python-gssapi package) object, an",
                "+           `._SSH_GSSAPI_NEW` (MIT GSSAPI using gssapi package) object",
                "            or an `._SSH_SSPI` (MS SSPI) object.",
                "@@ -112,4 +112,4 @@ class _SSH_GSSAuth(object):",
                "     \"\"\"",
                "-    Contains the shared variables and methods of `._SSH_GSSAPI_*` and",
                "-    `._SSH_SSPI`.",
                "+    Contains the shared variables and methods of `._SSH_GSSAPI_OLD`,",
                "+    `._SSH_GSSAPI_NEW` and `._SSH_SSPI`.",
                "     \"\"\"",
                "@@ -453,9 +453,8 @@ class _SSH_GSSAPI_NEW(_SSH_GSSAuth):",
                "         :param str recv_token: The GSS-API token received from the Server",
                "-        :raise SSHException: Is raised if the desired mechanism of the client",
                "-                             is not supported",
                "-        :raise gssapi.exceptions.GSSError: if there is an error signaled by the",
                "-                                           GSS-API implementation",
                "-        :return: A ``String`` if the GSS-API has returned a token or ``None`` if",
                "-                 no token was returned",
                "-        :rtype: String or None",
                "+        :raises: `.SSHException` -- Is raised if the desired mechanism of the",
                "+                 client is not supported",
                "+        :raises: ``gssapi.exceptions.GSSError`` if there is an error signaled",
                "+                                                by the GSS-API implementation",
                "+        :return: A ``String`` if the GSS-API has returned a token or ``None``",
                "+                 if no token was returned",
                "         \"\"\"",
                "@@ -494,4 +493,3 @@ class _SSH_GSSAPI_NEW(_SSH_GSSAuth):",
                "                  message.",
                "-        :rtype: String",
                "-        :see: `._ssh_build_mic`",
                "+        :rtype: str",
                "         \"\"\"",
                "@@ -519,3 +517,2 @@ class _SSH_GSSAPI_NEW(_SSH_GSSAuth):",
                "                 if no token was returned",
                "-        :rtype: String or None",
                "         \"\"\"",
                "@@ -538,3 +535,3 @@ class _SSH_GSSAPI_NEW(_SSH_GSSAuth):",
                "         :return: None if the MIC check was successful",
                "-        :raises gssapi.exceptions.GSSError: if the MIC check failed",
                "+        :raises: ``gssapi.exceptions.GSSError`` -- if the MIC check failed",
                "         \"\"\"",
                "@@ -574,4 +571,4 @@ class _SSH_GSSAPI_NEW(_SSH_GSSAuth):",
                "         :param str client_token: The GSS-API token received form the client",
                "-        :raise NotImplementedError: Credential delegation is currently not",
                "-                                    supported in server mode",
                "+        :raises: ``NotImplementedError`` -- Credential delegation is currently",
                "+                 not supported in server mode",
                "         \"\"\""
            ],
            "changed_files": [
                "paramiko/ssh_gss.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "852176d2d776b183a39e100009d3e18b6896323b",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537320093,
            "hunks": 5,
            "message": "Fix a pseudo-bug re: responding to MSG_UNIMPLEMENTED w/ itself",
            "diff": [
                "diff --git a/paramiko/transport.py b/paramiko/transport.py",
                "index 1317f372..d8cb3434 100644",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@ -83,2 +83,4 @@ from paramiko.common import (",
                "     HIGHEST_USERAUTH_MESSAGE_ID,",
                "+    MSG_UNIMPLEMENTED,",
                "+    MSG_NAMES,",
                " )",
                "@@ -1960,7 +1962,18 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                     else:",
                "-                        self._log(WARNING, \"Oops, unhandled type %d\" % ptype)",
                "-                        msg = Message()",
                "-                        msg.add_byte(cMSG_UNIMPLEMENTED)",
                "-                        msg.add_int(m.seqno)",
                "-                        self._send_message(msg)",
                "+                        # Respond with \"I don't implement this particular",
                "+                        # message type\" message (unless the message type was",
                "+                        # itself literally MSG_UNIMPLEMENTED, in which case, we",
                "+                        # just shut up to avoid causing a useless loop).",
                "+                        name = MSG_NAMES[ptype]",
                "+                        self._log(",
                "+                            WARNING,",
                "+                            \"Oops, unhandled type {} ({!r})\".format(",
                "+                                ptype, name",
                "+                            ),",
                "+                        )",
                "+                        if ptype != MSG_UNIMPLEMENTED:",
                "+                            msg = Message()",
                "+                            msg.add_byte(cMSG_UNIMPLEMENTED)",
                "+                            msg.add_int(m.seqno)",
                "+                            self._send_message(msg)",
                "                     self.packetizer.complete_handshake()",
                "diff --git a/tests/test_transport.py b/tests/test_transport.py",
                "index 13fb302e..3ea2cb26 100644",
                "--- a/tests/test_transport.py",
                "+++ b/tests/test_transport.py",
                "@@ -32,2 +32,3 @@ from hashlib import sha1",
                " import unittest",
                "+from mock import Mock",
                "@@ -49,2 +50,3 @@ from paramiko.common import (",
                "     cMSG_CHANNEL_WINDOW_ADJUST,",
                "+    cMSG_UNIMPLEMENTED,",
                "     MIN_PACKET_SIZE,",
                "@@ -1029 +1031,24 @@ class TransportTest(unittest.TestCase):",
                "             assert False, \"Did not raise SSHException!\"",
                "+",
                "+    def _send_unimplemented(self, server_is_sender):",
                "+        self.setup_test_server()",
                "+        sender, recipient = self.tc, self.ts",
                "+        if server_is_sender:",
                "+            sender, recipient = self.ts, self.tc",
                "+        recipient._send_message = Mock()",
                "+        msg = Message()",
                "+        msg.add_byte(cMSG_UNIMPLEMENTED)",
                "+        sender._send_message(msg)",
                "+        # TODO: I hate this but I literally don't see a good way to know when",
                "+        # the recipient has received the sender's message (there are no",
                "+        # existing threading events in play that work for this), esp in this",
                "+        # case where we don't WANT a response (as otherwise we could",
                "+        # potentially try blocking on the sender's receipt of a reply...maybe).",
                "+        time.sleep(0.1)",
                "+        assert not recipient._send_message.called",
                "+",
                "+    def test_server_does_not_respond_to_MSG_UNIMPLEMENTED(self):",
                "+        self._send_unimplemented(server_is_sender=False)",
                "+",
                "+    def test_client_does_not_respond_to_MSG_UNIMPLEMENTED(self):",
                "+        self._send_unimplemented(server_is_sender=True)"
            ],
            "changed_files": [
                "paramiko/transport.py",
                "tests/test_transport.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "f09a0d3853ab7848ed8cd16148ce95ff58e09e8a",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537229336,
            "hunks": 2,
            "message": "Throwing a bone to 2.0-2.3 python-2.6 support",
            "diff": [
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index ddfb33fc..03b163fc 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -214,3 +214,3 @@ class SSHClientTest(unittest.TestCase):",
                "                     key_filename=[",
                "-                        _support(\"test_{}.key\".format(x)) for x in attempt",
                "+                        _support(\"test_{0}.key\".format(x)) for x in attempt",
                "                     ],",
                "diff --git a/tests/util.py b/tests/util.py",
                "index 4ca02374..c1ba4b2c 100644",
                "--- a/tests/util.py",
                "+++ b/tests/util.py",
                "@@ -22,3 +22,3 @@ def needs_builtin(name):",
                "     \"\"\"",
                "-    reason = \"Test requires a builtin '{}'\".format(name)",
                "+    reason = \"Test requires a builtin '{0}'\".format(name)",
                "     return pytest.mark.skipif(not hasattr(builtins, name), reason=reason)"
            ],
            "changed_files": [
                "tests/test_client.py",
                "tests/util.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "068b0914e396e8a47e28245a0a69ea7bf6bea6ff",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537231566,
            "hunks": 1,
            "message": "One change overlooked by merge, as it's new",
            "diff": [
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 8bf7556d..fed38791 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -472,3 +472,3 @@ class SSHClientTest(unittest.TestCase):",
                "         self.tc.set_missing_host_key_policy(paramiko.RejectPolicy())",
                "-        host_key = ktype.from_private_key_file(test_path(kfile))",
                "+        host_key = ktype.from_private_key_file(_support(kfile))",
                "         known_hosts = self.tc.get_host_keys()"
            ],
            "changed_files": [
                "tests/test_client.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "6a4233be4bcddf480dd3d5ef96cdc8f39ad16795",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508783463,
            "hunks": 49,
            "message": "Import cleanup, mostly focused on s/tests/./",
            "diff": [
                "diff --git a/tests/__init__.py b/tests/__init__.py",
                "index 8878f14d..be1d2daa 100644",
                "--- a/tests/__init__.py",
                "+++ b/tests/__init__.py",
                "@@ -1,36 +1 @@",
                "-# Copyright (C) 2017 Martin Packman <gzlist@googlemail.com>",
                "-#",
                "-# This file is part of paramiko.",
                "-#",
                "-# Paramiko is free software; you can redistribute it and/or modify it under the",
                "-# terms of the GNU Lesser General Public License as published by the Free",
                "-# Software Foundation; either version 2.1 of the License, or (at your option)",
                "-# any later version.",
                "-#",
                "-# Paramiko is distributed in the hope that it will be useful, but WITHOUT ANY",
                "-# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR",
                "-# A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more",
                "-# details.",
                "-#",
                "-# You should have received a copy of the GNU Lesser General Public License",
                "-# along with Paramiko; if not, write to the Free Software Foundation, Inc.,",
                "-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.",
                "-",
                "-\"\"\"Base classes and helpers for testing paramiko.\"\"\"",
                "-",
                "-import unittest",
                "-",
                "-from paramiko.py3compat import (",
                "-    builtins,",
                "-    )",
                "-",
                "-",
                "-def skipUnlessBuiltin(name):",
                "-    \"\"\"Skip decorated test if builtin name does not exist.\"\"\"",
                "-    if getattr(builtins, name, None) is None:",
                "-        skip = getattr(unittest, \"skip\", None)",
                "-        if skip is None:",
                "-            # Python 2.6 pseudo-skip",
                "-            return lambda func: None",
                "-        return skip(\"No builtin \" + repr(name))",
                "-    return lambda func: func",
                "+# This file's just here so test modules can use explicit-relative imports.",
                "diff --git a/tests/loop.py b/tests/loop.py",
                "index e805ad96..6c432867 100644",
                "--- a/tests/loop.py",
                "+++ b/tests/loop.py",
                "@@ -18,7 +18,5 @@",
                "-\"\"\"",
                "-...",
                "-\"\"\"",
                "+import socket",
                "+import threading",
                "-import threading, socket",
                " from paramiko.common import asbytes",
                "diff --git a/tests/stub_sftp.py b/tests/stub_sftp.py",
                "index 334af561..1b3d7387 100644",
                "--- a/tests/stub_sftp.py",
                "+++ b/tests/stub_sftp.py",
                "@@ -24,2 +24,3 @@ import os",
                " import sys",
                "+",
                " from paramiko import (",
                "diff --git a/tests/test_auth.py b/tests/test_auth.py",
                "index ffd6bbc8..9ca48947 100644",
                "--- a/tests/test_auth.py",
                "+++ b/tests/test_auth.py",
                "@@ -32,4 +32,6 @@ from paramiko import AUTH_FAILED, AUTH_PARTIALLY_SUCCESSFUL, AUTH_SUCCESSFUL",
                " from paramiko.py3compat import u",
                "-from tests.loop import LoopSocket",
                "-from tests.util import _support",
                "+",
                "+from .loop import LoopSocket",
                "+from .util import _support",
                "+",
                "diff --git a/tests/test_buffered_pipe.py b/tests/test_buffered_pipe.py",
                "index eeb4d0ad..03616c55 100644",
                "--- a/tests/test_buffered_pipe.py",
                "+++ b/tests/test_buffered_pipe.py",
                "@@ -25,2 +25,3 @@ import time",
                " import unittest",
                "+",
                " from paramiko.buffered_pipe import BufferedPipe, PipeTimeout",
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 937a10d0..b5fe2e06 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -25,12 +25,11 @@ from __future__ import with_statement",
                " import gc",
                "+import os",
                " import platform",
                " import socket",
                "-from tempfile import mkstemp",
                " import threading",
                "+import time",
                " import unittest",
                "-import weakref",
                " import warnings",
                "-import os",
                "-import time",
                "-from tests.util import _support",
                "+import weakref",
                "+from tempfile import mkstemp",
                "@@ -40,2 +39,4 @@ from paramiko.ssh_exception import SSHException",
                "+from .util import _support",
                "+",
                "diff --git a/tests/test_file.py b/tests/test_file.py",
                "index b33ecd51..3d2c94e6 100755",
                "--- a/tests/test_file.py",
                "+++ b/tests/test_file.py",
                "@@ -29,3 +29,3 @@ from paramiko.py3compat import BytesIO",
                "-from tests import skipUnlessBuiltin",
                "+from .util import needs_builtin",
                "@@ -200,3 +200,3 @@ class BufferedFileTest (unittest.TestCase):",
                "-    @skipUnlessBuiltin('memoryview')",
                "+    @needs_builtin('memoryview')",
                "     def test_write_bytearray(self):",
                "@@ -206,3 +206,3 @@ class BufferedFileTest (unittest.TestCase):",
                "-    @skipUnlessBuiltin('buffer')",
                "+    @needs_builtin('buffer')",
                "     def test_write_buffer(self):",
                "@@ -215,3 +215,3 @@ class BufferedFileTest (unittest.TestCase):",
                "-    @skipUnlessBuiltin('memoryview')",
                "+    @needs_builtin('memoryview')",
                "     def test_write_memoryview(self):",
                "diff --git a/tests/test_gssapi.py b/tests/test_gssapi.py",
                "index bc220108..d4b632be 100644",
                "--- a/tests/test_gssapi.py",
                "+++ b/tests/test_gssapi.py",
                "@@ -27,10 +27,13 @@ import socket",
                "+from .util import needs_gssapi",
                "+",
                "+@needs_gssapi",
                " class GSSAPITest(unittest.TestCase):",
                "-    @staticmethod",
                "-    def init(hostname=None, srv_mode=False):",
                "-        global krb5_mech, targ_name, server_mode",
                "-        krb5_mech = \"1.2.840.113554.1.2.2\"",
                "-        targ_name = hostname",
                "-        server_mode = srv_mode",
                "+    def setup():",
                "+        # TODO: these vars should all come from os.environ or whatever the",
                "+        # approved pytest method is for runtime-configuring test data.",
                "+        self.krb5_mech = \"1.2.840.113554.1.2.2\"",
                "+        self.targ_name = \"hostname\"",
                "+        self.server_mode = False",
                "@@ -42,5 +45,5 @@ class GSSAPITest(unittest.TestCase):",
                "         from pyasn1.codec.der import encoder, decoder",
                "-        oid = encoder.encode(ObjectIdentifier(krb5_mech))",
                "+        oid = encoder.encode(ObjectIdentifier(self.krb5_mech))",
                "         mech, __ = decoder.decode(oid)",
                "-        self.assertEquals(krb5_mech, mech.__str__())",
                "+        self.assertEquals(self.krb5_mech, mech.__str__())",
                "@@ -63,3 +66,3 @@ class GSSAPITest(unittest.TestCase):",
                "         if _API == \"MIT\":",
                "-            if server_mode:",
                "+            if self.server_mode:",
                "                 gss_flags = (gssapi.C_PROT_READY_FLAG,",
                "@@ -75,4 +78,4 @@ class GSSAPITest(unittest.TestCase):",
                "             ctx.flags = gss_flags",
                "-            krb5_oid = gssapi.OID.mech_from_string(krb5_mech)",
                "-            target_name = gssapi.Name(\"host@\" + targ_name,",
                "+            krb5_oid = gssapi.OID.mech_from_string(self.krb5_mech)",
                "+            target_name = gssapi.Name(\"host@\" + self.targ_name,",
                "                                       gssapi.C_NT_HOSTBASED_SERVICE)",
                "@@ -81,3 +84,3 @@ class GSSAPITest(unittest.TestCase):",
                "                                           req_flags=ctx.flags)",
                "-            if server_mode:",
                "+            if self.server_mode:",
                "                 c_token = gss_ctxt.step(c_token)",
                "@@ -101,3 +104,3 @@ class GSSAPITest(unittest.TestCase):",
                "-            if server_mode:",
                "+            if self.server_mode:",
                "                 # Check MIC",
                "@@ -112,3 +115,3 @@ class GSSAPITest(unittest.TestCase):",
                "             # Initialize a GSS-API context.",
                "-            target_name = \"host/\" + socket.getfqdn(targ_name)",
                "+            target_name = \"host/\" + socket.getfqdn(self.targ_name)",
                "             gss_ctxt = sspi.ClientAuth(\"Kerberos\",",
                "@@ -116,3 +119,3 @@ class GSSAPITest(unittest.TestCase):",
                "                                         targetspn=target_name)",
                "-            if server_mode:",
                "+            if self.server_mode:",
                "                 error, token = gss_ctxt.authorize(c_token)",
                "diff --git a/tests/test_hostkeys.py b/tests/test_hostkeys.py",
                "index 2c7ceeb9..cd75f8ab 100644",
                "--- a/tests/test_hostkeys.py",
                "+++ b/tests/test_hostkeys.py",
                "@@ -25,2 +25,3 @@ import os",
                " import unittest",
                "+",
                " import paramiko",
                "diff --git a/tests/test_kex.py b/tests/test_kex.py",
                "index 19804fbf..badab61e 100644",
                "--- a/tests/test_kex.py",
                "+++ b/tests/test_kex.py",
                "@@ -26,2 +26,5 @@ import unittest",
                "+from cryptography.hazmat.backends import default_backend",
                "+from cryptography.hazmat.primitives.asymmetric import ec",
                "+",
                " import paramiko.util",
                "diff --git a/tests/test_message.py b/tests/test_message.py",
                "index f18cae90..645b0509 100644",
                "--- a/tests/test_message.py",
                "+++ b/tests/test_message.py",
                "@@ -23,2 +23,3 @@ Some unit tests for ssh protocol message blocks.",
                " import unittest",
                "+",
                " from paramiko.message import Message",
                "diff --git a/tests/test_packetizer.py b/tests/test_packetizer.py",
                "index 02173292..414b7e38 100644",
                "--- a/tests/test_packetizer.py",
                "+++ b/tests/test_packetizer.py",
                "@@ -29,4 +29,2 @@ from cryptography.hazmat.primitives.ciphers import algorithms, Cipher, modes",
                "-from tests.loop import LoopSocket",
                "-",
                " from paramiko import Message, Packetizer, util",
                "@@ -34,2 +32,5 @@ from paramiko.common import byte_chr, zero_byte",
                "+from .loop import LoopSocket",
                "+",
                "+",
                " x55 = byte_chr(0x55)",
                "diff --git a/tests/test_pkey.py b/tests/test_pkey.py",
                "index 6f5c25f0..f5da1fde 100644",
                "--- a/tests/test_pkey.py",
                "+++ b/tests/test_pkey.py",
                "@@ -32,3 +32,4 @@ from paramiko.py3compat import StringIO, byte_chr, b, bytes, PY2",
                "-from tests.util import _support",
                "+from .util import _support",
                "+",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index 624297c8..d3760bf7 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -35,11 +35,13 @@ from tempfile import mkstemp",
                " import paramiko",
                "+import paramiko.util",
                " from paramiko.py3compat import PY2, b, u, StringIO",
                " from paramiko.common import o777, o600, o666, o644",
                "-from tests import skipUnlessBuiltin",
                "-from tests.stub_sftp import StubServer, StubSFTPServer",
                "-from tests.loop import LoopSocket",
                "-from tests.util import _support",
                "-import paramiko.util",
                " from paramiko.sftp_attr import SFTPAttributes",
                "+from .util import needs_builtin",
                "+from .stub_sftp import StubServer, StubSFTPServer",
                "+from .loop import LoopSocket",
                "+from .util import _support",
                "+",
                "+",
                " ARTICLE = '''",
                "@@ -820,3 +822,3 @@ class SFTPTest (unittest.TestCase):",
                "-    @skipUnlessBuiltin('buffer')",
                "+    @needs_builtin('buffer')",
                "     def test_write_buffer(self):",
                "@@ -834,3 +836,3 @@ class SFTPTest (unittest.TestCase):",
                "-    @skipUnlessBuiltin('memoryview')",
                "+    @needs_builtin('memoryview')",
                "     def test_write_memoryview(self):",
                "diff --git a/tests/test_sftp_big.py b/tests/test_sftp_big.py",
                "index cfad5682..580ba64e 100644",
                "--- a/tests/test_sftp_big.py",
                "+++ b/tests/test_sftp_big.py",
                "@@ -33,3 +33,5 @@ import unittest",
                " from paramiko.common import o660",
                "-from tests.test_sftp import get_sftp",
                "+",
                "+from .test_sftp import get_sftp",
                "+",
                "diff --git a/tests/test_ssh_gss.py b/tests/test_ssh_gss.py",
                "index 081d942b..f0645e0e 100644",
                "--- a/tests/test_ssh_gss.py",
                "+++ b/tests/test_ssh_gss.py",
                "@@ -31,7 +31,7 @@ import paramiko",
                "-from tests.util import _support",
                "-from tests.test_client import FINGERPRINTS",
                "+from .util import _support, needs_gssapi",
                "+from .test_client import FINGERPRINTS",
                "-class NullServer (paramiko.ServerInterface):",
                "+class NullServer (paramiko.ServerInterface):",
                "     def get_allowed_auths(self, username):",
                "@@ -39,5 +39,8 @@ class NullServer (paramiko.ServerInterface):",
                "-    def check_auth_gssapi_with_mic(self, username,",
                "-                                   gss_authenticated=paramiko.AUTH_FAILED,",
                "-                                   cc_file=None):",
                "+    def check_auth_gssapi_with_mic(",
                "+        self,",
                "+        username,",
                "+        gss_authenticated=paramiko.AUTH_FAILED,",
                "+        cc_file=None,",
                "+    ):",
                "         if gss_authenticated == paramiko.AUTH_SUCCESSFUL:",
                "@@ -68,14 +71,11 @@ class NullServer (paramiko.ServerInterface):",
                "+@needs_gssapi",
                " class GSSAuthTest(unittest.TestCase):",
                "-    @staticmethod",
                "-    def init(username, hostname):",
                "-        global krb5_principal, targ_name",
                "-        krb5_principal = username",
                "-        targ_name = hostname",
                "-",
                "     def setUp(self):",
                "-        self.username = krb5_principal",
                "-        self.hostname = socket.getfqdn(targ_name)",
                "+        # TODO: username and targ_name should come from os.environ or whatever",
                "+        # the approved pytest method is for runtime-configuring test data.",
                "+        self.username = \"krb5_principal\"",
                "+        self.hostname = socket.getfqdn(\"targ_name\")",
                "         self.sockl = socket.socket()",
                "-        self.sockl.bind((targ_name, 0))",
                "+        self.sockl.bind((\"targ_name\", 0))",
                "         self.sockl.listen(1)",
                "diff --git a/tests/test_transport.py b/tests/test_transport.py",
                "index c3f67803..7fa67c43 100644",
                "--- a/tests/test_transport.py",
                "+++ b/tests/test_transport.py",
                "@@ -45,5 +45,5 @@ from paramiko.py3compat import bytes",
                " from paramiko.message import Message",
                "-from tests import skipUnlessBuiltin",
                "-from tests.loop import LoopSocket",
                "-from tests.util import _support",
                "+",
                "+from .util import needs_builtin, _support",
                "+from .loop import LoopSocket",
                "@@ -894,3 +894,3 @@ class TransportTest(unittest.TestCase):",
                "-    @skipUnlessBuiltin('buffer')",
                "+    @needs_builtin('buffer')",
                "     def test_channel_send_buffer(self):",
                "@@ -917,3 +917,3 @@ class TransportTest(unittest.TestCase):",
                "-    @skipUnlessBuiltin('memoryview')",
                "+    @needs_builtin('memoryview')",
                "     def test_channel_send_memoryview(self):",
                "diff --git a/tests/test_util.py b/tests/test_util.py",
                "index 7880e156..1b6b5c92 100644",
                "--- a/tests/test_util.py",
                "+++ b/tests/test_util.py",
                "@@ -32,2 +32,3 @@ from paramiko.py3compat import StringIO, byte_ord, b",
                "+",
                " # Note some lines in this configuration have trailing spaces on purpose",
                "diff --git a/tests/util.py b/tests/util.py",
                "index bde9fa88..db1f077c 100644",
                "--- a/tests/util.py",
                "+++ b/tests/util.py",
                "@@ -1,7 +1,23 @@",
                "-import os",
                "+from os.path import dirname, realpath, join",
                "+",
                "+import pytest",
                "+",
                "+from paramiko.py3compat import builtins",
                "-root_path = os.path.dirname(os.path.realpath(__file__))",
                " def _support(filename):",
                "-    return os.path.join(root_path, filename)",
                "+    return join(dirname(realpath(__file__)), filename)",
                "+",
                "+",
                "+# TODO: consider using pytest.importorskip('gssapi') instead? We presumably",
                "+# still need CLI configurability for the Kerberos parameters, though, so can't",
                "+# JUST key off presence of GSSAPI optional dependency...",
                "+# TODO: anyway, s/True/os.environ.get('RUN_GSSAPI', False)/ or something.",
                "+needs_gssapi = pytest.mark.skipif(True, reason=\"No GSSAPI to test\")",
                "+",
                "+def needs_builtin(name):",
                "+    \"\"\"",
                "+    Skip decorated test if builtin name does not exist.",
                "+    \"\"\"",
                "+    return pytest.mark.skipif(not hasattr(builtins, name))"
            ],
            "changed_files": [
                "tests/__init__.py",
                "tests/loop.py",
                "tests/stub_sftp.py",
                "tests/test_auth.py",
                "tests/test_buffered_pipe.py",
                "tests/test_client.py",
                "tests/test_file.py",
                "tests/test_gssapi.py",
                "tests/test_hostkeys.py",
                "tests/test_kex.py",
                "tests/test_message.py",
                "tests/test_packetizer.py",
                "tests/test_pkey.py",
                "tests/test_sftp.py",
                "tests/test_sftp_big.py",
                "tests/test_ssh_gss.py",
                "tests/test_transport.py",
                "tests/test_util.py",
                "tests/util.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "7b92847a2db0a25960310318c29dfcc57fc6e984",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1511211793,
            "hunks": 6,
            "message": "Update custom test task to encompass recent updates to invocations.pytest No time rn to overhaul Invoke to allow true reuse. bah.",
            "diff": [
                "diff --git a/tasks.py b/tasks.py",
                "index 6053ce1b..737d7a6c 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -9,4 +9,17 @@ from invocations.packaging.release import ns as release_coll, publish",
                "+# TODO: this screams out for the invoke missing-feature of \"I just wrap task X,",
                "+# assume its signature by default\" (even if that is just **kwargs support)",
                " @task",
                "-def test(ctx, verbose=True, coverage=False, include_slow=False, opts=\"\"):",
                "+def test(",
                "+    ctx,",
                "+    verbose=True,",
                "+    color=True,",
                "+    capture='sys',",
                "+    module=None,",
                "+    k=None,",
                "+    x=False,",
                "+    opts=\"\",",
                "+    coverage=False,",
                "+    include_slow=False,",
                "+):",
                "     \"\"\"",
                "@@ -21,4 +34,19 @@ def test(ctx, verbose=True, coverage=False, include_slow=False, opts=\"\"):",
                "         opts += \" --verbose\"",
                "+    # TODO: forget why invocations.pytest added this; is it to force color when",
                "+    # running headless? Probably?",
                "+    if color:",
                "+        opts += \" --color=yes\"",
                "+    opts += ' --capture={0}'.format(capture)",
                "     if '-m' not in opts and not include_slow:",
                "         opts += \" -m 'not slow'\"",
                "+    if k is not None and not ('-k' in opts if opts else False):",
                "+        opts += ' -k {}'.format(k)",
                "+    if x and not ('-x' in opts if opts else False):",
                "+        opts += ' -x'",
                "+    modstr = \"\"",
                "+    if module is not None:",
                "+        # NOTE: implicit test_ prefix as we're not on pytest-relaxed yet",
                "+        modstr = \" tests/test_{}.py\".format(module)",
                "+    # Switch runner depending on coverage or no coverage.",
                "+    # TODO: get pytest's coverage plugin working, IIRC it has issues?",
                "     runner = \"pytest\"",
                "@@ -28,3 +56,2 @@ def test(ctx, verbose=True, coverage=False, include_slow=False, opts=\"\"):",
                "         # expecting a literal .py file.",
                "-        # TODO: get pytest's coverage plugin working, IIRC it has issues?",
                "         runner = \"coverage run --source=paramiko -m pytest\"",
                "@@ -38,3 +65,3 @@ def test(ctx, verbose=True, coverage=False, include_slow=False, opts=\"\"):",
                "         del env['SSH_AUTH_SOCK']",
                "-    cmd = \"{} {}\".format(runner, opts)",
                "+    cmd = \"{} {} {}\".format(runner, opts, modstr)",
                "     # NOTE: we have a pytest.ini and tend to use that over PYTEST_ADDOPTS."
            ],
            "changed_files": [
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "30d49449e38cb10a254983605d576d48a76a387b",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537235309,
            "hunks": 19,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [
                "diff --cc demos/demo_simple.py",
                "index 9def57f8,6a933dcd..5dd4f6c1",
                "--- a/demos/demo_simple.py",
                "+++ b/demos/demo_simple.py",
                "@@@ -81,5 -86,12 +86,10 @@@ try",
                "      else:",
                " -        # SSPI works only with the FQDN of the target host",
                " -        hostname = socket.getfqdn(hostname)",
                "          try:",
                "-             client.connect(hostname, port, username, gss_auth=UseGSSAPI,",
                "-                            gss_kex=DoGSSAPIKeyExchange)",
                "+             client.connect(",
                "+                 hostname,",
                "+                 port,",
                "+                 username,",
                "+                 gss_auth=UseGSSAPI,",
                "+                 gss_kex=DoGSSAPIKeyExchange,",
                "+             )",
                "          except Exception:",
                "diff --cc paramiko/_version.py",
                "index aee80ab4,76a0e3de..1ddb4c76",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@@ -1,2 -1,2 +1,2 @@@",
                " -__version_info__ = (2, 2, 3)",
                " +__version_info__ = (2, 3, 2)",
                "- __version__ = '.'.join(map(str, __version_info__))",
                "+ __version__ = \".\".join(map(str, __version_info__))",
                "diff --cc setup.py",
                "index 1234bfa5,608c9161..33f5ed2f",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@@ -77,6 -77,6 +77,6 @@@ setup",
                "      install_requires=[",
                "-         'bcrypt>=3.1.3',",
                "-         'cryptography>=1.5',",
                "-         'pynacl>=1.0.1',",
                "-         'pyasn1>=0.1.7',",
                "+         \"bcrypt>=3.1.3\",",
                " -        \"cryptography>=1.1\",",
                "++        \"cryptography>=1.5\",",
                "+         \"pynacl>=1.0.1\",",
                "+         \"pyasn1>=0.1.7\",",
                "      ],",
                "diff --cc sites/www/changelog.rst",
                "index 24011edb,071328f3..31320c91",
                "--- a/sites/www/changelog.rst",
                "+++ b/sites/www/changelog.rst",
                "@@@ -4,12 -4,12 +4,16 @@@ Changelo",
                "- * :support:`1262 backported` Add ``*.pub`` files to the MANIFEST so distributed",
                "+ - :support:`1291 backported` Backport pytest support and application of the",
                "+   ``black`` code formatter (both of which previously only existed in the 2.4",
                "+   branch and above) to everything 2.0 and newer. This makes back/forward",
                "+   porting bugfixes significantly easier.",
                "++- :support:`1262 backported` Add ``*.pub`` files to the MANIFEST so distributed",
                " +  source packages contain some necessary test assets. Credit: Alexander",
                " +  Kapshuna.",
                "- * :release:`2.3.2 <2018-03-12>`",
                "- * :release:`2.2.3 <2018-03-12>`",
                "- * :release:`2.1.5 <2018-03-12>`",
                "- * :release:`2.0.8 <2018-03-12>`",
                "- * :release:`1.18.5 <2018-03-12>`",
                "- * :release:`1.17.6 <2018-03-12>`",
                "- * :bug:`1175 (1.17+)` Fix a security flaw (CVE-2018-7750) in Paramiko's server",
                "++- :release:`2.3.2 <2018-03-12>`",
                "+ - :release:`2.2.3 <2018-03-12>`",
                "+ - :release:`2.1.5 <2018-03-12>`",
                "+ - :release:`2.0.8 <2018-03-12>`",
                "+ - :release:`1.18.5 <2018-03-12>`",
                "+ - :release:`1.17.6 <2018-03-12>`",
                "+ - :bug:`1175 (1.17+)` Fix a security flaw (CVE-2018-7750) in Paramiko's server",
                "    mode (emphasis on **server** mode; this does **not** impact *client* use!)",
                "@@@ -24,15 -24,8 +28,15 @@@",
                "    (where ``async`` is a new keyword.) Thanks to ``@vEpiphyte`` for the report.",
                "- * :support:`- backported` Include LICENSE file in wheel archives.",
                "- * :release:`2.3.1 <2017-09-22>`",
                "- * :bug:`1071` Certificate support broke the no-certificate case for Ed25519",
                "+ - :support:`- backported` Include LICENSE file in wheel archives.",
                "++- :release:`2.3.1 <2017-09-22>`",
                "++- :bug:`1071` Certificate support broke the no-certificate case for Ed25519",
                " +  keys (symptom is an ``AttributeError`` about ``public_blob``.) This went",
                " +  uncaught due to cert autoload behavior (i.e. our test suite never actually",
                " +  ran the no-cert case, because the cert existed!) Both issues have been fixed.",
                " +  Thanks to John Hu for the report.",
                "- * :release:`2.3.0 <2017-09-18>`",
                "- * :release:`2.2.2 <2017-09-18>`",
                "- * :release:`2.1.4 <2017-09-18>`",
                "- * :release:`2.0.7 <2017-09-18>`",
                "- * :release:`1.18.4 <2017-09-18>`",
                "- * :bug:`1065` Add rekeying support to GSSAPI connections, which was erroneously",
                "++- :release:`2.3.0 <2017-09-18>`",
                "+ - :release:`2.2.2 <2017-09-18>`",
                "+ - :release:`2.1.4 <2017-09-18>`",
                "+ - :release:`2.0.7 <2017-09-18>`",
                "+ - :release:`1.18.4 <2017-09-18>`",
                "+ - :bug:`1065` Add rekeying support to GSSAPI connections, which was erroneously",
                "    missing. Without this fix, any attempt to renegotiate the transport keys for",
                "@@@ -41,7 -34,3 +45,7 @@@",
                "    Kruis for the patch.",
                "- * :feature:`1063` Add a ``gss_trust_dns`` option to ``Client`` and",
                "++- :feature:`1063` Add a ``gss_trust_dns`` option to ``Client`` and",
                " +  ``Transport`` to allow explicitly setting whether or not DNS canonicalization",
                " +  should occur when using GSSAPI. Thanks to Richard E. Silverman for the report",
                " +  & Sebastian Dei\u00c3\u009f for initial patchset.",
                "- * :bug:`1061` Clean up GSSAPI authentication procedures so they do not prevent",
                "+ - :bug:`1061` Clean up GSSAPI authentication procedures so they do not prevent",
                "    normal fallback to other authentication methods on failure. (In other words,",
                "@@@ -62,65 -51,3 +66,65 @@@",
                "    key. Thanks to Pierce Lopez.",
                "- * :support:`979` Update how we use `Cryptography <https://cryptography.io>`_'s",
                "++- :support:`979` Update how we use `Cryptography <https://cryptography.io>`_'s",
                " +  signature/verification methods so we aren't relying on a deprecated API.",
                " +  Thanks to Paul Kehrer for the patch.",
                " +",
                " +  .. warning::",
                " +    This bumps the minimum Cryptography version from 1.1 to 1.5. Such an",
                " +    upgrade should be backwards compatible and easy to do. See `their changelog",
                " +    <https://cryptography.io/en/latest/changelog/>`_ for additional details.",
                "- * :support:`-` Ed25519 keys never got proper API documentation support; this",
                "++- :support:`-` Ed25519 keys never got proper API documentation support; this",
                " +  has been fixed.",
                "- * :feature:`1026` Update `~paramiko.ed25519key.Ed25519Key` so its constructor",
                "++- :feature:`1026` Update `~paramiko.ed25519key.Ed25519Key` so its constructor",
                " +  offers the same ``file_obj`` parameter as its sibling key classes. Credit:",
                " +  Michal Kuffa.",
                "- * :feature:`1013` Added pre-authentication banner support for the server",
                "++- :feature:`1013` Added pre-authentication banner support for the server",
                " +  interface (`ServerInterface.get_banner",
                " +  <paramiko.server.ServerInterface.get_banner>` plus related support in",
                " +  ``Transport/AuthHandler``.) Patch courtesy of Dennis Kaarsemaker.",
                "- * :bug:`60 major` (via :issue:`1037`) Paramiko originally defaulted to zlib",
                "++- :bug:`60 major` (via :issue:`1037`) Paramiko originally defaulted to zlib",
                " +  compression level 9 (when one connects with ``compression=True``; it defaults",
                " +  to off.) This has been found to be quite wasteful and tends to cause much",
                " +  longer transfers in most cases, than is necessary.",
                " +",
                " +  OpenSSH defaults to compression level 6, which is a much more reasonable",
                " +  setting (nearly identical compression characteristics but noticeably,",
                " +  sometimes significantly, faster transmission); Paramiko now uses this value",
                " +  instead.",
                " +",
                " +  Thanks to Damien Dub\u00c3\u00a9 for the report and ``@DrNeutron`` for investigating &",
                " +  submitting the patch.",
                "- * :support:`-` Display exception type and message when logging auth-rejection",
                "++- :support:`-` Display exception type and message when logging auth-rejection",
                " +  messages (ones reading ``Auth rejected: unsupported or mangled public key``);",
                " +  previously this error case had a bare except and did not display exactly why",
                " +  the key failed. It will now append info such as ``KeyError:",
                " +  'some-unknown-type-string'`` or similar.",
                "- * :feature:`1042` (also partially :issue:`531`) Implement basic client-side",
                "++- :feature:`1042` (also partially :issue:`531`) Implement basic client-side",
                " +  certificate authentication (as per the OpenSSH vendor extension.)",
                " +",
                " +  The core implementation is `PKey.load_certificate",
                " +  <paramiko.pkey.PKey.load_certificate>` and its corresponding ``.public_blob``",
                " +  attribute on key objects, which is honored in the auth and transport modules.",
                " +  Additionally, `SSHClient.connect <paramiko.client.SSHClient.connect>` will",
                " +  now automatically load certificate data alongside private key data when one",
                " +  has appropriately-named cert files (e.g. ``id_rsa-cert.pub``) - see its",
                " +  docstring for details.",
                " +",
                " +  Thanks to Jason Rigby for a first draft (:issue:`531`) and to Paul Kapp for",
                " +  the second draft, upon which the current functionality has been based (with",
                " +  modifications.)",
                " +",
                " +  .. note::",
                " +    This support is client-focused; Paramiko-driven server code is capable of",
                " +    handling cert-bearing pubkey auth packets, *but* it does not interpret any",
                " +    cert-specific fields, so the end result is functionally identical to a",
                " +    vanilla pubkey auth process (and thus requires e.g. prepopulated",
                " +    authorized-keys data.) We expect full server-side cert support to follow",
                " +    later.",
                " +",
                "- * :support:`1041` Modify logic around explicit disconnect",
                "++- :support:`1041` Modify logic around explicit disconnect",
                " +  messages, and unknown-channel situations, so that they rely on centralized",
                " +  shutdown code instead of running their own. This is at worst removing some",
                " +  unnecessary code, and may help with some situations where Paramiko hangs at",
                " +  the end of a session. Thanks to Paul Kapp for the patch.",
                "- * :support:`1012` (via :issue:`1016`) Enhance documentation around the new",
                "+ - :support:`1012` (via :issue:`1016`) Enhance documentation around the new",
                "    `SFTP.posix_rename <paramiko.sftp_client.SFTPClient.posix_rename>` method so"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "1fa48b482c2db097da2b69dcaa79b3f7db98f1f0",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508956939,
            "hunks": 12,
            "message": "Mark known slow tests as 'slow' pytest marker, and skip them by default",
            "diff": [
                "diff --git a/tasks.py b/tasks.py",
                "index 97dca66b..6053ce1b 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -10,5 +10,15 @@ from invocations.packaging.release import ns as release_coll, publish",
                " @task",
                "-def test(ctx, verbose=True, coverage=False, opts=\"\"):",
                "+def test(ctx, verbose=True, coverage=False, include_slow=False, opts=\"\"):",
                "+    \"\"\"",
                "+    Run unit tests via pytest.",
                "+",
                "+    By default, known-slow parts of the suite are SKIPPED unless",
                "+    ``--include-slow`` is given. (Note that ``--include-slow`` does not mesh",
                "+    well with explicit ``--opts=\"-m=xxx\"`` - if ``-m`` is found in ``--opts``,",
                "+    ``--include-slow`` will be ignored!)",
                "+    \"\"\"",
                "     if verbose and '--verbose' not in opts and '-v' not in opts:",
                "         opts += \" --verbose\"",
                "+    if '-m' not in opts and not include_slow:",
                "+        opts += \" -m 'not slow'\"",
                "     runner = \"pytest\"",
                "@@ -35,3 +45,6 @@ def test(ctx, verbose=True, coverage=False, opts=\"\"):",
                " def coverage(ctx, opts=\"\"):",
                "-    return test(ctx, coverage=True, opts=opts)",
                "+    \"\"\"",
                "+    Execute all tests (normal and slow) with coverage enabled.",
                "+    \"\"\"",
                "+    return test(ctx, coverage=True, include_slow=True, opts=opts)",
                "diff --git a/tests/test_auth.py b/tests/test_auth.py",
                "index 9ca48947..e9c75fd5 100644",
                "--- a/tests/test_auth.py",
                "+++ b/tests/test_auth.py",
                "@@ -34,3 +34,3 @@ from paramiko.py3compat import u",
                " from .loop import LoopSocket",
                "-from .util import _support",
                "+from .util import _support, slow",
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index b5fe2e06..597c278e 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -39,3 +39,3 @@ from paramiko.ssh_exception import SSHException",
                "-from .util import _support",
                "+from .util import _support, slow",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index ac0d17fb..dac54a9b 100644",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -44,3 +44,3 @@ from .util import needs_builtin",
                " from .stub_sftp import StubServer, StubSFTPServer",
                "-from .util import _support",
                "+from .util import _support, slow",
                "@@ -90,2 +90,3 @@ utf8_folder = b'/\\xc3\\xbcnic\\xc3\\xb8\\x64\\x65'",
                "+@slow",
                " class TestSFTP(object):",
                "diff --git a/tests/test_sftp_big.py b/tests/test_sftp_big.py",
                "index e5708312..a659098d 100644",
                "--- a/tests/test_sftp_big.py",
                "+++ b/tests/test_sftp_big.py",
                "@@ -34,3 +34,6 @@ from paramiko.common import o660",
                "+from .util import slow",
                "+",
                "+@slow",
                " class TestBigSFTP(object):",
                "diff --git a/tests/test_transport.py b/tests/test_transport.py",
                "index 7fa67c43..9474acfc 100644",
                "--- a/tests/test_transport.py",
                "+++ b/tests/test_transport.py",
                "@@ -46,3 +46,3 @@ from paramiko.message import Message",
                "-from .util import needs_builtin, _support",
                "+from .util import needs_builtin, _support, slow",
                " from .loop import LoopSocket",
                "@@ -259,2 +259,3 @@ class TransportTest(unittest.TestCase):",
                "+    @slow",
                "     def test_5_keepalive(self):",
                "@@ -822,2 +823,3 @@ class TransportTest(unittest.TestCase):",
                "+    @slow",
                "     def test_L_handshake_timeout(self):",
                "diff --git a/tests/util.py b/tests/util.py",
                "index 051a36ba..4ca02374 100644",
                "--- a/tests/util.py",
                "+++ b/tests/util.py",
                "@@ -24 +24,4 @@ def needs_builtin(name):",
                "     return pytest.mark.skipif(not hasattr(builtins, name), reason=reason)",
                "+",
                "+",
                "+slow = pytest.mark.slow"
            ],
            "changed_files": [
                "tasks.py",
                "tests/test_auth.py",
                "tests/test_client.py",
                "tests/test_sftp.py",
                "tests/test_sftp_big.py",
                "tests/test_transport.py",
                "tests/util.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "2fb5b0a36719c13bb2b044d9a2034408d18310eb",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508784167,
            "hunks": 6,
            "message": "Remove references to test.py, including overhaul of test tasks",
            "diff": [
                "diff --git a/MANIFEST.in b/MANIFEST.in",
                "index e718ea24..1eec2054 100644",
                "--- a/MANIFEST.in",
                "+++ b/MANIFEST.in",
                "@@ -1,2 +1,2 @@",
                "-include LICENSE test.py setup_helper.py",
                "+include LICENSE setup_helper.py",
                " recursive-include docs *",
                "diff --git a/tasks.py b/tasks.py",
                "index 42c18bd0..d232fa9b 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -1 +1,2 @@",
                "+import os",
                " from os.path import join",
                "@@ -8,11 +9,23 @@ from invocations.packaging.release import ns as release_coll, publish",
                "-# Until we move to spec-based testing",
                " @task",
                "-def test(ctx, coverage=False, flags=\"\"):",
                "-    if \"--verbose\" not in flags.split():",
                "-        flags += \" --verbose\"",
                "-    runner = \"python\"",
                "+def test(ctx, verbose=True, coverage=False, opts=\"\"):",
                "+    # TODO: once pytest coverage plugin works, see if there's a pytest-native",
                "+    # way to handle the env stuff too, then we can remove these tasks entirely",
                "+    # in favor of just \"run pytest\"?",
                "+    if verbose:",
                "+        opts += \" --verbose\"",
                "+    runner = \"pytest\"",
                "     if coverage:",
                "-        runner = \"coverage run --source=paramiko\"",
                "-    ctx.run(\"{0} test.py {1}\".format(runner, flags), pty=True)",
                "+        # Leverage how pytest can be run as 'python -m pytest', and then how",
                "+        # coverage can be told to run things in that manner instead of",
                "+        # expecting a literal .py file.",
                "+        # TODO: get pytest's coverage plugin working, IIRC it has issues?",
                "+        runner = \"coverage run --source=paramiko -m pytest\"",
                "+    # Strip SSH_AUTH_SOCK from parent env to avoid pollution by interactive",
                "+    # users.",
                "+    env = dict(os.environ)",
                "+    if 'SSH_AUTH_SOCK' in env:",
                "+        del env['SSH_AUTH_SOCK']",
                "+    cmd = \"{} {}\".format(runner, opts)",
                "+    ctx.run(cmd, pty=True, env=env, replace_env=True)",
                "@@ -20,4 +33,4 @@ def test(ctx, coverage=False, flags=\"\"):",
                " @task",
                "-def coverage(ctx):",
                "-    ctx.run(\"coverage run --source=paramiko test.py --verbose\")",
                "+def coverage(ctx, opts=\"\"):",
                "+    return test(ctx, coverage=True, opts=opts)"
            ],
            "changed_files": [
                "MANIFEST.in",
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "6b96afd1d32316b0be3c28d3b5d298493086de27",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508779927,
            "hunks": 53,
            "message": "Rename util func that trips pytest's default discovery. Wouldn't matter as much under pytest-relaxed discovery, but, eh",
            "diff": [
                "diff --git a/tests/test_auth.py b/tests/test_auth.py",
                "index 96f7611c..ffd6bbc8 100644",
                "--- a/tests/test_auth.py",
                "+++ b/tests/test_auth.py",
                "@@ -33,3 +33,3 @@ from paramiko.py3compat import u",
                " from tests.loop import LoopSocket",
                "-from tests.util import test_path",
                "+from tests.util import _support",
                "@@ -41,3 +41,3 @@ class NullServer (ServerInterface):",
                "     paranoid_did_public_key = False",
                "-    paranoid_key = DSSKey.from_private_key_file(test_path('test_dss.key'))",
                "+    paranoid_key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "@@ -116,3 +116,3 @@ class AuthTest (unittest.TestCase):",
                "     def start_server(self):",
                "-        host_key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         self.public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -168,3 +168,3 @@ class AuthTest (unittest.TestCase):",
                "         self.assertEqual(['publickey'], remain)",
                "-        key = DSSKey.from_private_key_file(test_path('test_dss.key'))",
                "+        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "         remain = self.tc.auth_publickey(username='paranoid', key=key)",
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index 9da6eaca..937a10d0 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -34,3 +34,3 @@ import os",
                " import time",
                "-from tests.util import test_path",
                "+from tests.util import _support",
                "@@ -110,3 +110,3 @@ class SSHClientTest (unittest.TestCase):",
                "         self.ts = paramiko.Transport(self.socks)",
                "-        host_key = paramiko.RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         self.ts.add_server_key(host_key)",
                "@@ -127,3 +127,3 @@ class SSHClientTest (unittest.TestCase):",
                "         threading.Thread(target=self._run, kwargs=run_kwargs).start()",
                "-        host_key = paramiko.RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -173,3 +173,3 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(key_filename=test_path('test_dss.key'))",
                "+        self._test_connection(key_filename=_support('test_dss.key'))",
                "@@ -179,3 +179,3 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(key_filename=test_path('test_rsa.key'))",
                "+        self._test_connection(key_filename=_support('test_rsa.key'))",
                "@@ -185,3 +185,3 @@ class SSHClientTest (unittest.TestCase):",
                "         \"\"\"",
                "-        self._test_connection(key_filename=test_path('test_ecdsa_256.key'))",
                "+        self._test_connection(key_filename=_support('test_ecdsa_256.key'))",
                "@@ -208,3 +208,3 @@ class SSHClientTest (unittest.TestCase):",
                "                     key_filename=[",
                "-                        test_path('test_{0}.key'.format(x)) for x in attempt",
                "+                        _support('test_{}.key'.format(x)) for x in attempt",
                "                     ],",
                "@@ -226,3 +226,3 @@ class SSHClientTest (unittest.TestCase):",
                "             self._test_connection,",
                "-            key_filename=[test_path('test_rsa.key')],",
                "+            key_filename=[_support('test_rsa.key')],",
                "             allowed_keys=['ecdsa-sha2-nistp256'],",
                "@@ -235,3 +235,3 @@ class SSHClientTest (unittest.TestCase):",
                "         threading.Thread(target=self._run).start()",
                "-        host_key = paramiko.RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -257,3 +257,3 @@ class SSHClientTest (unittest.TestCase):",
                "-        host_key = paramiko.RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -337,3 +337,3 @@ class SSHClientTest (unittest.TestCase):",
                "         threading.Thread(target=self._run, kwargs={'delay': 1}).start()",
                "-        host_key = paramiko.RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                "@@ -364,3 +364,3 @@ class SSHClientTest (unittest.TestCase):",
                "             # immediately; we're testing the try/except crap within Client.",
                "-            key_filename=[test_path('test_rsa_password.key')],",
                "+            key_filename=[_support('test_rsa_password.key')],",
                "             # Actual password for default 'slowdive' user",
                "@@ -378,3 +378,3 @@ class SSHClientTest (unittest.TestCase):",
                "             gss_kex=True,",
                "-            key_filename=[test_path('test_rsa.key')],",
                "+            key_filename=[_support('test_rsa.key')],",
                "         )",
                "@@ -390,3 +390,3 @@ class SSHClientTest (unittest.TestCase):",
                "             gss_auth=True,",
                "-            key_filename=[test_path('test_rsa.key')],",
                "+            key_filename=[_support('test_rsa.key')],",
                "         )",
                "diff --git a/tests/test_pkey.py b/tests/test_pkey.py",
                "index 394a2cf4..6f5c25f0 100644",
                "--- a/tests/test_pkey.py",
                "+++ b/tests/test_pkey.py",
                "@@ -32,3 +32,3 @@ from paramiko.py3compat import StringIO, byte_chr, b, bytes, PY2",
                "-from tests.util import test_path",
                "+from tests.util import _support",
                "@@ -140,3 +140,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_2_load_rsa(self):",
                "-        key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         self.assertEqual('ssh-rsa', key.get_name())",
                "@@ -156,3 +156,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_3_load_rsa_password(self):",
                "-        key = RSAKey.from_private_key_file(test_path('test_rsa_password.key'), 'television')",
                "+        key = RSAKey.from_private_key_file(_support('test_rsa_password.key'), 'television')",
                "         self.assertEqual('ssh-rsa', key.get_name())",
                "@@ -165,3 +165,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_4_load_dss(self):",
                "-        key = DSSKey.from_private_key_file(test_path('test_dss.key'))",
                "+        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "         self.assertEqual('ssh-dss', key.get_name())",
                "@@ -181,3 +181,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_5_load_dss_password(self):",
                "-        key = DSSKey.from_private_key_file(test_path('test_dss_password.key'), 'television')",
                "+        key = DSSKey.from_private_key_file(_support('test_dss_password.key'), 'television')",
                "         self.assertEqual('ssh-dss', key.get_name())",
                "@@ -191,3 +191,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         self.assertEqual(key, key)",
                "@@ -200,3 +200,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = DSSKey.from_private_key_file(test_path('test_dss.key'))",
                "+        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "         self.assertEqual(key, key)",
                "@@ -209,3 +209,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         msg = key.sign_ssh_data(b'ice weasels')",
                "@@ -222,3 +222,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the dss private key can sign and verify",
                "-        key = DSSKey.from_private_key_file(test_path('test_dss.key'))",
                "+        key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "         msg = key.sign_ssh_data(b'ice weasels')",
                "@@ -277,3 +277,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_10_load_ecdsa_256(self):",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_256.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_256.key'))",
                "         self.assertEqual('ecdsa-sha2-nistp256', key.get_name())",
                "@@ -293,3 +293,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_11_load_ecdsa_password_256(self):",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_password_256.key'), b'television')",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_password_256.key'), b'television')",
                "         self.assertEqual('ecdsa-sha2-nistp256', key.get_name())",
                "@@ -303,3 +303,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_256.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_256.key'))",
                "         self.assertEqual(key, key)",
                "@@ -312,3 +312,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_256.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_256.key'))",
                "         msg = key.sign_ssh_data(b'ice weasels')",
                "@@ -327,3 +327,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_14_load_ecdsa_384(self):",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_384.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_384.key'))",
                "         self.assertEqual('ecdsa-sha2-nistp384', key.get_name())",
                "@@ -343,3 +343,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_15_load_ecdsa_password_384(self):",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_password_384.key'), b'television')",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_password_384.key'), b'television')",
                "         self.assertEqual('ecdsa-sha2-nistp384', key.get_name())",
                "@@ -353,3 +353,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_384.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_384.key'))",
                "         self.assertEqual(key, key)",
                "@@ -362,3 +362,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_384.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_384.key'))",
                "         msg = key.sign_ssh_data(b'ice weasels')",
                "@@ -377,3 +377,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_18_load_ecdsa_521(self):",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_521.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_521.key'))",
                "         self.assertEqual('ecdsa-sha2-nistp521', key.get_name())",
                "@@ -396,3 +396,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_19_load_ecdsa_password_521(self):",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_password_521.key'), b'television')",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_password_521.key'), b'television')",
                "         self.assertEqual('ecdsa-sha2-nistp521', key.get_name())",
                "@@ -406,3 +406,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the private & public keys compare equal",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_521.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_521.key'))",
                "         self.assertEqual(key, key)",
                "@@ -415,3 +415,3 @@ class KeyTest (unittest.TestCase):",
                "         # verify that the rsa private key can sign and verify",
                "-        key = ECDSAKey.from_private_key_file(test_path('test_ecdsa_521.key'))",
                "+        key = ECDSAKey.from_private_key_file(_support('test_ecdsa_521.key'))",
                "         msg = key.sign_ssh_data(b'ice weasels')",
                "@@ -431,3 +431,3 @@ class KeyTest (unittest.TestCase):",
                "         # Read an existing encrypted private key",
                "-        file_ = test_path('test_rsa_password.key')",
                "+        file_ = _support('test_rsa_password.key')",
                "         password = 'television'",
                "@@ -448,3 +448,3 @@ class KeyTest (unittest.TestCase):",
                "     def test_stringification(self):",
                "-        key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         comparable = TEST_KEY_BYTESTR_2 if PY2 else TEST_KEY_BYTESTR_3",
                "@@ -454,3 +454,3 @@ class KeyTest (unittest.TestCase):",
                "         # Read an existing encrypted private key",
                "-        file_ = test_path('test_rsa_password.key')",
                "+        file_ = _support('test_rsa_password.key')",
                "         password = 'television'",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index 98a9cebb..624297c8 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -40,3 +40,3 @@ from tests.stub_sftp import StubServer, StubSFTPServer",
                " from tests.loop import LoopSocket",
                "-from tests.util import test_path",
                "+from tests.util import _support",
                " import paramiko.util",
                "@@ -143,3 +143,3 @@ class SFTPTest (unittest.TestCase):",
                "-        host_key = paramiko.RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         ts.add_server_key(host_key)",
                "diff --git a/tests/test_ssh_gss.py b/tests/test_ssh_gss.py",
                "index d8d05d2b..081d942b 100644",
                "--- a/tests/test_ssh_gss.py",
                "+++ b/tests/test_ssh_gss.py",
                "@@ -31,3 +31,3 @@ import paramiko",
                "-from tests.util import test_path",
                "+from tests.util import _support",
                " from tests.test_client import FINGERPRINTS",
                "@@ -150,3 +150,3 @@ class GSSAuthTest(unittest.TestCase):",
                "         self.hostname = \"this_host_does_not_exists_and_causes_a_GSSAPI-exception\"",
                "-        self._test_connection(key_filename=[test_path('test_rsa.key')],",
                "+        self._test_connection(key_filename=[_support('test_rsa.key')],",
                "                               allow_agent=False,",
                "diff --git a/tests/test_transport.py b/tests/test_transport.py",
                "index 99cbc3e0..c3f67803 100644",
                "--- a/tests/test_transport.py",
                "+++ b/tests/test_transport.py",
                "@@ -47,3 +47,3 @@ from tests import skipUnlessBuiltin",
                " from tests.loop import LoopSocket",
                "-from tests.util import test_path",
                "+from tests.util import _support",
                "@@ -66,3 +66,3 @@ class NullServer (ServerInterface):",
                "     paranoid_did_public_key = False",
                "-    paranoid_key = DSSKey.from_private_key_file(test_path('test_dss.key'))",
                "+    paranoid_key = DSSKey.from_private_key_file(_support('test_dss.key'))",
                "@@ -138,3 +138,3 @@ class TransportTest(unittest.TestCase):",
                "     ):",
                "-        host_key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -202,3 +202,3 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "-        host_key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -227,3 +227,3 @@ class TransportTest(unittest.TestCase):",
                "         \"\"\"",
                "-        host_key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "@@ -842,3 +842,3 @@ class TransportTest(unittest.TestCase):",
                "         # Continue with regular test red tape.",
                "-        host_key = RSAKey.from_private_key_file(test_path('test_rsa.key'))",
                "+        host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "         public_host_key = RSAKey(data=host_key.asbytes())",
                "diff --git a/tests/util.py b/tests/util.py",
                "index b546a7e1..bde9fa88 100644",
                "--- a/tests/util.py",
                "+++ b/tests/util.py",
                "@@ -4,3 +4,3 @@ root_path = os.path.dirname(os.path.realpath(__file__))",
                "-def test_path(filename):",
                "+def _support(filename):",
                "     return os.path.join(root_path, filename)"
            ],
            "changed_files": [
                "tests/test_auth.py",
                "tests/test_client.py",
                "tests/test_pkey.py",
                "tests/test_sftp.py",
                "tests/test_ssh_gss.py",
                "tests/test_transport.py",
                "tests/util.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "20355d22ec4d674e7c0ae04ef72b3755f6306ba8",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537231339,
            "hunks": 21,
            "message": "Merge branch '2.0' into 2.1",
            "diff": [
                "diff --cc paramiko/_version.py",
                "index c304abf5,93214f6d..4350dbd0",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@@ -1,2 -1,2 +1,2 @@@",
                " -__version_info__ = (2, 0, 8)",
                " +__version_info__ = (2, 1, 5)",
                "- __version__ = '.'.join(map(str, __version_info__))",
                "+ __version__ = \".\".join(map(str, __version_info__))",
                "diff --cc paramiko/client.py",
                "index ae7186c3,15e2de09..bb6c7ff4",
                "--- a/paramiko/client.py",
                "+++ b/paramiko/client.py",
                "@@@ -456,4 -452,10 +471,11 @@@ class SSHClient(ClosingContextManager)",
                "-     def invoke_shell(self, term='vt100', width=80, height=24, width_pixels=0,",
                "-                      height_pixels=0, environment=None):",
                "+     def invoke_shell(",
                "+         self,",
                "+         term=\"vt100\",",
                "+         width=80,",
                "+         height=24,",
                "+         width_pixels=0,",
                "+         height_pixels=0,",
                "++        environment=None,",
                "+     ):",
                "          \"\"\"",
                "diff --cc paramiko/message.py",
                "index f8ed6170,8181b9ec..869ac6c6",
                "--- a/paramiko/message.py",
                "+++ b/paramiko/message.py",
                "@@@ -146,4 -146,7 +146,4 @@@ class Message(object)",
                "          Fetch an int from the stream.",
                " -",
                " -        @return: a 32-bit unsigned integer.",
                " -        @rtype: int",
                "          \"\"\"",
                "-         return struct.unpack('>I', self.get_bytes(4))[0]",
                "+         return struct.unpack(\">I\", self.get_bytes(4))[0]",
                "diff --cc paramiko/transport.py",
                "index b23cadee,1317f372..819639b7",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@@ -498,7 -532,4 +537,7 @@@ class Transport(threading.Thread, Closi",
                "                      raise e",
                "-                 raise SSHException('Negotiation failed.')",
                "+                 raise SSHException(\"Negotiation failed.\")",
                " -            if event.is_set():",
                " +            if (",
                " +                event.is_set() or",
                " +                (timeout is not None and time.time() >= max_time)",
                " +            ):",
                "                  break",
                "diff --cc sites/www/changelog.rst",
                "index e252f18c,3b1a9467..398e0913",
                "--- a/sites/www/changelog.rst",
                "+++ b/sites/www/changelog.rst",
                "@@@ -4,7 -4,10 +4,11 @@@ Changelo",
                "- * :release:`2.1.5 <2018-03-12>`",
                "- * :release:`2.0.8 <2018-03-12>`",
                "- * :release:`1.18.5 <2018-03-12>`",
                "- * :release:`1.17.6 <2018-03-12>`",
                "- * :bug:`1175 (1.17+)` Fix a security flaw (CVE-2018-7750) in Paramiko's server",
                "+ - :support:`1291 backported` Backport pytest support and application of the",
                "+   ``black`` code formatter (both of which previously only existed in the 2.4",
                "+   branch and above) to everything 2.0 and newer. This makes back/forward",
                "+   porting bugfixes significantly easier.",
                "++- :release:`2.1.5 <2018-03-12>`",
                "+ - :release:`2.0.8 <2018-03-12>`",
                "+ - :release:`1.18.5 <2018-03-12>`",
                "+ - :release:`1.17.6 <2018-03-12>`",
                "+ - :bug:`1175 (1.17+)` Fix a security flaw (CVE-2018-7750) in Paramiko's server",
                "    mode (emphasis on **server** mode; this does **not** impact *client* use!)",
                "@@@ -16,7 -19,6 +20,7 @@@",
                "    (where ``async`` is a new keyword.) Thanks to ``@vEpiphyte`` for the report.",
                "- * :support:`- backported` Include LICENSE file in wheel archives.",
                "- * :release:`2.1.4 <2017-09-18>`",
                "- * :release:`2.0.7 <2017-09-18>`",
                "- * :release:`1.18.4 <2017-09-18>`",
                "- * :bug:`1061` Clean up GSSAPI authentication procedures so they do not prevent",
                "+ - :support:`- backported` Include LICENSE file in wheel archives.",
                "++- :release:`2.1.4 <2017-09-18>`",
                "+ - :release:`2.0.7 <2017-09-18>`",
                "+ - :release:`1.18.4 <2017-09-18>`",
                "+ - :bug:`1061` Clean up GSSAPI authentication procedures so they do not prevent",
                "    normal fallback to other authentication methods on failure. (In other words,",
                "@@@ -28,7 -30,3 +32,7 @@@",
                "    newer ones listed preferentially before the old. Credit: Anselm Kruis.",
                "- * :bug:`1055 (1.17+)` (also :issue:`1056`, :issue:`1057`, :issue:`1058`,",
                "++- :bug:`1055 (1.17+)` (also :issue:`1056`, :issue:`1057`, :issue:`1058`,",
                " +  :issue:`1059`) Fix up host-key checking in our GSSAPI support, which was",
                " +  previously using an incorrect API call. Thanks to Anselm Kruis for the",
                " +  patches.",
                "- * :bug:`945 (1.18+)` (backport of :issue:`910` and re: :issue:`865`) SSHClient",
                "+ - :bug:`945 (1.18+)` (backport of :issue:`910` and re: :issue:`865`) SSHClient",
                "    now requests the type of host key it has (e.g. from known_hosts) and does not",
                "@@@ -37,11 -35,10 +41,11 @@@",
                "    key. Thanks to Pierce Lopez.",
                "- * :release:`2.1.3 <2017-06-09>`",
                "- * :release:`2.0.6 <2017-06-09>`",
                "- * :release:`1.18.3 <2017-06-09>`",
                "- * :release:`1.17.5 <2017-06-09>`",
                "- * :bug:`865` SSHClient now requests the type of host key it has (e.g. from",
                " -- :bug:`1055 (1.17+)` (also :issue:`1056`, :issue:`1057`, :issue:`1058`,",
                " -  :issue:`1059`) Fix up host-key checking in our GSSAPI support, which was",
                " -  previously using an incorrect API call. Thanks to Anselm Kruis for the",
                " -  patches.",
                "++- :release:`2.1.3 <2017-06-09>`",
                "+ - :release:`2.0.6 <2017-06-09>`",
                "+ - :release:`1.18.3 <2017-06-09>`",
                "+ - :release:`1.17.5 <2017-06-09>`",
                "++- :bug:`865` SSHClient now requests the type of host key it has (e.g. from",
                " +  known_hosts) and does not consider a different type to be a \"Missing\" host",
                " +  key. This fixes a common case where an ECDSA key is in known_hosts and the",
                " +  server also has an RSA host key. Thanks to Pierce Lopez.",
                "- * :support:`906 (1.18+)` Clean up a handful of outdated imports and related",
                "+ - :support:`906 (1.18+)` Clean up a handful of outdated imports and related",
                "    tweaks. Thanks to Pierce Lopez.",
                "@@@ -98,7 -95,6 +102,7 @@@",
                "    Thanks to ``@vlcinsky`` for the report.",
                "- * :release:`2.1.2 <2017-02-20>`",
                "- * :release:`2.0.5 <2017-02-20>`",
                "- * :release:`1.18.2 <2017-02-20>`",
                "- * :release:`1.17.4 <2017-02-20>`",
                "- * :bug:`853 (1.17+)` Tweak how `RSAKey.__str__ <paramiko.rsakey.RSAKey>`",
                "++- :release:`2.1.2 <2017-02-20>`",
                "+ - :release:`2.0.5 <2017-02-20>`",
                "+ - :release:`1.18.2 <2017-02-20>`",
                "+ - :release:`1.17.4 <2017-02-20>`",
                "+ - :bug:`853 (1.17+)` Tweak how `RSAKey.__str__ <paramiko.rsakey.RSAKey>`",
                "    behaves so it doesn't cause ``TypeError`` under Python 3. Thanks to Francisco",
                "@@@ -127,6 -123,5 +131,6 @@@",
                "    edition.",
                "- * :release:`2.1.1 <2016-12-12>`",
                "- * :release:`2.0.4 <2016-12-12>`",
                "- * :release:`1.18.1 <2016-12-12>`",
                "- * :bug:`859 (1.18+)` (via :issue:`860`) A tweak to the original patch",
                "++- :release:`2.1.1 <2016-12-12>`",
                "+ - :release:`2.0.4 <2016-12-12>`",
                "+ - :release:`1.18.1 <2016-12-12>`",
                "+ - :bug:`859 (1.18+)` (via :issue:`860`) A tweak to the original patch",
                "    implementing :issue:`398` was not fully applied, causing calls to",
                "@@@ -139,11 -134,6 +143,11 @@@",
                "    line (but of course, remains in 2.1.x and above.)",
                "- * :bug:`859` (via :issue:`860`) A tweak to the original patch implementing",
                "++- :bug:`859` (via :issue:`860`) A tweak to the original patch implementing",
                " +  :issue:`398` was not fully applied, causing calls to",
                " +  `~paramiko.client.SSHClient.invoke_shell` to fail with ``AttributeError``.",
                " +  This has been fixed. Patch credit: Kirk Byers.",
                "- * :release:`2.1.0 <2016-12-09>`",
                "- * :release:`2.0.3 <2016-12-09>`",
                "- * :release:`1.18.0 <2016-12-09>`",
                "- * :release:`1.17.3 <2016-12-09>`",
                "- * :bug:`802 (1.17+)` (via :issue:`804`) Update our vendored Windows API module",
                "++- :release:`2.1.0 <2016-12-09>`",
                "+ - :release:`2.0.3 <2016-12-09>`",
                "+ - :release:`1.18.0 <2016-12-09>`",
                "+ - :release:`1.17.3 <2016-12-09>`",
                "+ - :bug:`802 (1.17+)` (via :issue:`804`) Update our vendored Windows API module",
                "    to address errors of the form ``AttributeError: 'module' object has no",
                "@@@ -187,13 -177,3 +191,13 @@@",
                "    buffers when using ``ProxyCommand``. Thanks to Paul Kapp for catch & patch.",
                "- * :feature:`398 (1.18+)` Add an ``environment`` dict argument to",
                "++- :feature:`398 (1.18+)` Add an ``environment`` dict argument to",
                " +  `Client.exec_command <paramiko.client.SSHClient.exec_command>` (plus the",
                " +  lower level `Channel.update_environment",
                " +  <paramiko.channel.Channel.update_environment>` and",
                " +  `Channel.set_environment_variable",
                " +  <paramiko.channel.Channel.set_environment_variable>` methods) which",
                " +  implements the ``env`` SSH message type. This means the remote shell",
                " +  environment can be set without the use of ``VARNAME=value`` shell tricks,",
                " +  provided the server's ``AcceptEnv`` lists the variables you need to set.",
                " +  Thanks to Philip Lorenz for the pull request.",
                "- * :support:`819 backported (>=1.15,<2.0)` Document how lacking ``gmp`` headers",
                "+ - :support:`819 backported (>=1.15,<2.0)` Document how lacking ``gmp`` headers",
                "    at install time can cause a significant performance hit if you build PyCrypto",
                "diff --cc tests/test_client.py",
                "index 4a7117ac,03b163fc..dd2676f5",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@@ -120,7 -110,5 +120,7 @@@ class SSHClientTest(unittest.TestCase)",
                "          self.ts = paramiko.Transport(self.socks)",
                "-         keypath = test_path('test_rsa.key')",
                " -        host_key = paramiko.RSAKey.from_private_key_file(",
                " -            _support(\"test_rsa.key\")",
                " -        )",
                "++        keypath = _support('test_rsa.key')",
                " +        host_key = paramiko.RSAKey.from_private_key_file(keypath)",
                " +        self.ts.add_server_key(host_key)",
                "-         keypath = test_path('test_ecdsa_256.key')",
                "++        keypath = _support('test_ecdsa_256.key')",
                " +        host_key = paramiko.ECDSAKey.from_private_key_file(keypath)",
                "          self.ts.add_server_key(host_key)",
                "@@@ -249,5 -242,6 +254,5 @@@",
                "          threading.Thread(target=self._run).start()",
                " -        host_key = paramiko.RSAKey.from_private_key_file(",
                " -            _support(\"test_rsa.key\")",
                " -        )",
                " -        public_host_key = paramiko.RSAKey(data=host_key.asbytes())",
                " +        hostname = '[%s]:%d' % (self.addr, self.port)",
                "-         key_file = test_path('test_ecdsa_256.key')",
                "++        key_file = _support('test_ecdsa_256.key')",
                " +        public_host_key = paramiko.ECDSAKey.from_private_key_file(key_file)"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "92c53775d0143547abba7de9f9d70417bbbef3c8",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537347880,
            "hunks": 10,
            "message": "Add compatibility with new \"gssapi\" package Detect if \"python-gssapi\" or \"gssapi\" is installed at import time and use the appropriate API",
            "diff": [
                "diff --git a/paramiko/ssh_gss.py b/paramiko/ssh_gss.py",
                "index eb8826e0..4c245471 100644",
                "--- a/paramiko/ssh_gss.py",
                "+++ b/paramiko/ssh_gss.py",
                "@@ -49,3 +49,3 @@ from pyasn1.codec.der import encoder, decoder",
                " #: :var str _API: Constraint for the used API",
                "-_API = \"MIT\"",
                "+_API = None",
                "@@ -53,4 +53,10 @@ try:",
                "     import gssapi",
                "-",
                "-    GSS_EXCEPTIONS = (gssapi.GSSException,)",
                "+    if hasattr(gssapi, '__title__') and gssapi.__title__ == 'python-gssapi':",
                "+        # old, unmaintained python-gssapi package",
                "+        _API = \"MIT\"  # keep this for compatibility",
                "+        GSS_EXCEPTIONS = (gssapi.GSSException,)",
                "+    else:",
                "+        _API = \"PYTHON-GSSAPI-NEW\"",
                "+        GSS_EXCEPTIONS = (gssapi.exceptions.GeneralError,",
                "+                          gssapi.raw.misc.GSSError,)",
                " except (ImportError, OSError):",
                "@@ -69,2 +75,3 @@ from paramiko.common import MSG_USERAUTH_REQUEST",
                " from paramiko.ssh_exception import SSHException",
                "+from paramiko._version import __version_info__",
                "@@ -79,4 +86,5 @@ def GSSAuth(auth_method, gss_deleg_creds=True):",
                "                                  We delegate credentials by default.",
                "-    :return: Either an `._SSH_GSSAPI` (Unix) object or an",
                "-             `_SSH_SSPI` (Windows) object",
                "+    :return: Either an `._SSH_GSSAPI_OLD` or `._SSH_GSSAPI_NEW` (Unix)",
                "+             object or an `_SSH_SSPI` (Windows) object",
                "+    :rtype: Object",
                "@@ -85,6 +93,6 @@ def GSSAuth(auth_method, gss_deleg_creds=True):",
                "     :see: `RFC 4462 <http://www.ietf.org/rfc/rfc4462.txt>`_",
                "-    :note: Check for the available API and return either an `._SSH_GSSAPI`",
                "-           (MIT GSSAPI) object or an `._SSH_SSPI` (MS SSPI) object. If you",
                "-           get python-gssapi working on Windows, python-gssapi",
                "-           will be used and a `._SSH_GSSAPI` object will be returned.",
                "+    :note: Check for the available API and return either an `._SSH_GSSAPI_OLD`",
                "+           (MIT GSSAPI using python-gssapi package) object, an `._SSH_GSSAPI_NEW`",
                "+           (MIT GSSAPI using gssapi package) object",
                "+           or an `._SSH_SSPI` (MS SSPI) object.",
                "            If there is no supported API available,",
                "@@ -93,3 +101,5 @@ def GSSAuth(auth_method, gss_deleg_creds=True):",
                "     if _API == \"MIT\":",
                "-        return _SSH_GSSAPI(auth_method, gss_deleg_creds)",
                "+        return _SSH_GSSAPI_OLD(auth_method, gss_deleg_creds)",
                "+    elif _API == \"PYTHON-GSSAPI-NEW\":",
                "+        return _SSH_GSSAPI_NEW(auth_method, gss_deleg_creds)",
                "     elif _API == \"SSPI\" and os.name == \"nt\":",
                "@@ -102,3 +112,3 @@ class _SSH_GSSAuth(object):",
                "     \"\"\"",
                "-    Contains the shared variables and methods of `._SSH_GSSAPI` and",
                "+    Contains the shared variables and methods of `._SSH_GSSAPI_*` and",
                "     `._SSH_SSPI`.",
                "@@ -224,5 +234,6 @@ class _SSH_GSSAuth(object):",
                "-class _SSH_GSSAPI(_SSH_GSSAuth):",
                "+class _SSH_GSSAPI_OLD(_SSH_GSSAuth):",
                "     \"\"\"",
                "-    Implementation of the GSS-API MIT Kerberos Authentication for SSH2.",
                "+    Implementation of the GSS-API MIT Kerberos Authentication for SSH2,",
                "+    using the older (unmaintained) python-gssapi package.",
                "@@ -401,2 +412,170 @@ class _SSH_GSSAPI(_SSH_GSSAuth):",
                "+if __version_info__[0] == 2 and __version_info__[0] <= 4:",
                "+    # provide the old name for strict backward compatibility",
                "+    _SSH_GSSAPI = _SSH_GSSAPI_OLD",
                "+",
                "+",
                "+class _SSH_GSSAPI_NEW(_SSH_GSSAuth):",
                "+    \"\"\"",
                "+    Implementation of the GSS-API MIT Kerberos Authentication for SSH2,",
                "+    using the newer, currently maintained gssapi package.",
                "+",
                "+    :see: `.GSSAuth`",
                "+    \"\"\"",
                "+    def __init__(self, auth_method, gss_deleg_creds):",
                "+        \"\"\"",
                "+        :param str auth_method: The name of the SSH authentication mechanism",
                "+                                (gssapi-with-mic or gss-keyex)",
                "+        :param bool gss_deleg_creds: Delegate client credentials or not",
                "+        \"\"\"",
                "+        _SSH_GSSAuth.__init__(self, auth_method, gss_deleg_creds)",
                "+",
                "+        if self._gss_deleg_creds:",
                "+            self._gss_flags = (gssapi.RequirementFlag.protection_ready,",
                "+                               gssapi.RequirementFlag.integrity,",
                "+                               gssapi.RequirementFlag.mutual_authentication,",
                "+                               gssapi.RequirementFlag.delegate_to_peer)",
                "+        else:",
                "+            self._gss_flags = (gssapi.RequirementFlag.protection_ready,",
                "+                               gssapi.RequirementFlag.integrity,",
                "+                               gssapi.RequirementFlag.mutual_authentication)",
                "+",
                "+    def ssh_init_sec_context(self, target, desired_mech=None,",
                "+                             username=None, recv_token=None):",
                "+        \"\"\"",
                "+        Initialize a GSS-API context.",
                "+",
                "+        :param str username: The name of the user who attempts to login",
                "+        :param str target: The hostname of the target to connect to",
                "+        :param str desired_mech: The negotiated GSS-API mechanism",
                "+                                 (\"pseudo negotiated\" mechanism, because we",
                "+                                 support just the krb5 mechanism :-))",
                "+        :param str recv_token: The GSS-API token received from the Server",
                "+        :raise SSHException: Is raised if the desired mechanism of the client",
                "+                             is not supported",
                "+        :raise gssapi.exceptions.GSSError: if there is an error signaled by the",
                "+                                           GSS-API implementation",
                "+        :return: A ``String`` if the GSS-API has returned a token or ``None`` if",
                "+                 no token was returned",
                "+        :rtype: String or None",
                "+        \"\"\"",
                "+        self._username = username",
                "+        self._gss_host = target",
                "+        targ_name = gssapi.Name(\"host@\" + self._gss_host,",
                "+                                name_type=gssapi.NameType.hostbased_service)",
                "+        if desired_mech is not None:",
                "+            mech, __ = decoder.decode(desired_mech)",
                "+            if mech.__str__() != self._krb5_mech:",
                "+                raise SSHException(\"Unsupported mechanism OID.\")",
                "+        krb5_mech = gssapi.MechType.kerberos",
                "+        token = None",
                "+        if recv_token is None:",
                "+            self._gss_ctxt = gssapi.SecurityContext(name=targ_name,",
                "+                                                    flags=self._gss_flags,",
                "+                                                    mech=krb5_mech,",
                "+                                                    usage='initiate')",
                "+            token = self._gss_ctxt.step(token)",
                "+        else:",
                "+            token = self._gss_ctxt.step(recv_token)",
                "+        self._gss_ctxt_status = self._gss_ctxt.complete",
                "+        return token",
                "+",
                "+    def ssh_get_mic(self, session_id, gss_kex=False):",
                "+        \"\"\"",
                "+        Create the MIC token for a SSH2 message.",
                "+",
                "+        :param str session_id: The SSH session ID",
                "+        :param bool gss_kex: Generate the MIC for GSS-API Key Exchange or not",
                "+        :return: gssapi-with-mic:",
                "+                 Returns the MIC token from GSS-API for the message we created",
                "+                 with ``_ssh_build_mic``.",
                "+                 gssapi-keyex:",
                "+                 Returns the MIC token from GSS-API with the SSH session ID as",
                "+                 message.",
                "+        :rtype: String",
                "+        :see: `._ssh_build_mic`",
                "+        \"\"\"",
                "+        self._session_id = session_id",
                "+        if not gss_kex:",
                "+            mic_field = self._ssh_build_mic(self._session_id,",
                "+                                            self._username,",
                "+                                            self._service,",
                "+                                            self._auth_method)",
                "+            mic_token = self._gss_ctxt.get_signature(mic_field)",
                "+        else:",
                "+            # for key exchange with gssapi-keyex",
                "+            mic_token = self._gss_srv_ctxt.get_signature(self._session_id)",
                "+        return mic_token",
                "+",
                "+    def ssh_accept_sec_context(self, hostname, recv_token, username=None):",
                "+        \"\"\"",
                "+        Accept a GSS-API context (server mode).",
                "+",
                "+        :param str hostname: The servers hostname",
                "+        :param str username: The name of the user who attempts to login",
                "+        :param str recv_token: The GSS-API Token received from the server,",
                "+                               if it's not the initial call.",
                "+        :return: A ``String`` if the GSS-API has returned a token or ``None``",
                "+                if no token was returned",
                "+        :rtype: String or None",
                "+        \"\"\"",
                "+        # hostname and username are not required for GSSAPI, but for SSPI",
                "+        self._gss_host = hostname",
                "+        self._username = username",
                "+        if self._gss_srv_ctxt is None:",
                "+            self._gss_srv_ctxt = gssapi.SecurityContext(usage='accept')",
                "+        token = self._gss_srv_ctxt.step(recv_token)",
                "+        self._gss_srv_ctxt_status = self._gss_srv_ctxt.complete",
                "+        return token",
                "+",
                "+    def ssh_check_mic(self, mic_token, session_id, username=None):",
                "+        \"\"\"",
                "+        Verify the MIC token for a SSH2 message.",
                "+",
                "+        :param str mic_token: The MIC token received from the client",
                "+        :param str session_id: The SSH session ID",
                "+        :param str username: The name of the user who attempts to login",
                "+        :return: None if the MIC check was successful",
                "+        :raises gssapi.exceptions.GSSError: if the MIC check failed",
                "+        \"\"\"",
                "+        self._session_id = session_id",
                "+        self._username = username",
                "+        if self._username is not None:",
                "+            # server mode",
                "+            mic_field = self._ssh_build_mic(self._session_id,",
                "+                                            self._username,",
                "+                                            self._service,",
                "+                                            self._auth_method)",
                "+            self._gss_srv_ctxt.verify_signature(mic_field, mic_token)",
                "+        else:",
                "+            # for key exchange with gssapi-keyex",
                "+            # client mode",
                "+            self._gss_ctxt.verify_signature(self._session_id,",
                "+                                            mic_token)",
                "+",
                "+    @property",
                "+    def credentials_delegated(self):",
                "+        \"\"\"",
                "+        Checks if credentials are delegated (server mode).",
                "+",
                "+        :return: ``True`` if credentials are delegated, otherwise ``False``",
                "+        :rtype: bool",
                "+        \"\"\"",
                "+        if self._gss_srv_ctxt.delegated_creds is not None:",
                "+            return True",
                "+        return False",
                "+",
                "+    def save_client_creds(self, client_token):",
                "+        \"\"\"",
                "+        Save the Client token in a file. This is used by the SSH server",
                "+        to store the client credentials if credentials are delegated",
                "+        (server mode).",
                "+",
                "+        :param str client_token: The GSS-API token received form the client",
                "+        :raise NotImplementedError: Credential delegation is currently not",
                "+                                    supported in server mode",
                "+        \"\"\"",
                "+        raise NotImplementedError",
                "+",
                "+",
                " class _SSH_SSPI(_SSH_GSSAuth):"
            ],
            "changed_files": [
                "paramiko/ssh_gss.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "118f2231a1a23b56ac4c451bc1f4da3fbb8b5b45",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537231395,
            "hunks": 21,
            "message": "Blacken 2.1 branch",
            "diff": [
                "diff --git a/paramiko/channel.py b/paramiko/channel.py",
                "index f053f4a8..b2e8edd1 100644",
                "--- a/paramiko/channel.py",
                "+++ b/paramiko/channel.py",
                "@@ -331,3 +331,3 @@ class Channel(ClosingContextManager):",
                "             except SSHException as e:",
                "-                err = \"Failed to set environment variable \\\"{0}\\\".\"",
                "+                err = 'Failed to set environment variable \"{0}\".'",
                "                 raise SSHException(err.format(name), e)",
                "@@ -355,3 +355,3 @@ class Channel(ClosingContextManager):",
                "         m.add_int(self.remote_chanid)",
                "-        m.add_string('env')",
                "+        m.add_string(\"env\")",
                "         m.add_boolean(False)",
                "diff --git a/paramiko/transport.py b/paramiko/transport.py",
                "index 819639b7..828b2c22 100644",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@ -538,5 +538,4 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                 raise SSHException(\"Negotiation failed.\")",
                "-            if (",
                "-                event.is_set() or",
                "-                (timeout is not None and time.time() >= max_time)",
                "+            if event.is_set() or (",
                "+                timeout is not None and time.time() >= max_time",
                "             ):",
                "@@ -2227,6 +2226,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "         if self.server_mode and (self.get_server_key() is None):",
                "-            raise SSHException('Incompatible ssh peer (can\\'t match requested host key type)') # noqa",
                "-        self._log_agreement(",
                "-            'HostKey', agreed_keys[0], agreed_keys[0]",
                "-        )",
                "+            raise SSHException(",
                "+                \"Incompatible ssh peer (can't match requested host key type)\"",
                "+            )  # noqa",
                "+        self._log_agreement(\"HostKey\", agreed_keys[0], agreed_keys[0])",
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index dd2676f5..8bf7556d 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -86,7 +86,7 @@ class NullServer(paramiko.ServerInterface):",
                "     def check_channel_env_request(self, channel, name, value):",
                "-        if name == 'INVALID_ENV':",
                "+        if name == \"INVALID_ENV\":",
                "             return False",
                "-        if not hasattr(channel, 'env'):",
                "-            setattr(channel, 'env', {})",
                "+        if not hasattr(channel, \"env\"):",
                "+            setattr(channel, \"env\", {})",
                "@@ -120,6 +120,6 @@ class SSHClientTest(unittest.TestCase):",
                "         self.ts = paramiko.Transport(self.socks)",
                "-        keypath = _support('test_rsa.key')",
                "+        keypath = _support(\"test_rsa.key\")",
                "         host_key = paramiko.RSAKey.from_private_key_file(keypath)",
                "         self.ts.add_server_key(host_key)",
                "-        keypath = _support('test_ecdsa_256.key')",
                "+        keypath = _support(\"test_ecdsa_256.key\")",
                "         host_key = paramiko.ECDSAKey.from_private_key_file(keypath)",
                "@@ -254,4 +254,4 @@ class SSHClientTest(unittest.TestCase):",
                "         threading.Thread(target=self._run).start()",
                "-        hostname = '[%s]:%d' % (self.addr, self.port)",
                "-        key_file = _support('test_ecdsa_256.key')",
                "+        hostname = \"[%s]:%d\" % (self.addr, self.port)",
                "+        key_file = _support(\"test_ecdsa_256.key\")",
                "         public_host_key = paramiko.ECDSAKey.from_private_key_file(key_file)",
                "@@ -452,3 +452,3 @@ class SSHClientTest(unittest.TestCase):",
                "         threading.Thread(target=self._run).start()",
                "-        hostname = '[%s]:%d' % (self.addr, self.port)",
                "+        hostname = \"[%s]:%d\" % (self.addr, self.port)",
                "@@ -462,3 +462,3 @@ class SSHClientTest(unittest.TestCase):",
                "             self.tc.connect,",
                "-            password='pygmalion',",
                "+            password=\"pygmalion\",",
                "             **self.connect_kwargs",
                "@@ -468,3 +468,3 @@ class SSHClientTest(unittest.TestCase):",
                "         threading.Thread(target=self._run).start()",
                "-        hostname = '[%s]:%d' % (self.addr, self.port)",
                "+        hostname = \"[%s]:%d\" % (self.addr, self.port)",
                "@@ -476,3 +476,3 @@ class SSHClientTest(unittest.TestCase):",
                "-        self.tc.connect(password='pygmalion', **self.connect_kwargs)",
                "+        self.tc.connect(password=\"pygmalion\", **self.connect_kwargs)",
                "         self.event.wait(1.0)",
                "@@ -491,6 +491,6 @@ class SSHClientTest(unittest.TestCase):",
                "     def test_host_key_negotiation_3(self):",
                "-        self._client_host_key_good(paramiko.ECDSAKey, 'test_ecdsa_256.key')",
                "+        self._client_host_key_good(paramiko.ECDSAKey, \"test_ecdsa_256.key\")",
                "     def test_host_key_negotiation_4(self):",
                "-        self._client_host_key_good(paramiko.RSAKey, 'test_rsa.key')",
                "+        self._client_host_key_good(paramiko.RSAKey, \"test_rsa.key\")",
                "@@ -505,3 +505,5 @@ class SSHClientTest(unittest.TestCase):",
                "         self.assertEqual(0, len(self.tc.get_host_keys()))",
                "-        self.tc.connect(self.addr, self.port, username='slowdive', password='pygmalion')",
                "+        self.tc.connect(",
                "+            self.addr, self.port, username=\"slowdive\", password=\"pygmalion\"",
                "+        )",
                "@@ -511,7 +513,7 @@ class SSHClientTest(unittest.TestCase):",
                "-        target_env = {b'A': b'B', b'C': b'd'}",
                "+        target_env = {b\"A\": b\"B\", b\"C\": b\"d\"}",
                "-        self.tc.exec_command('yes', environment=target_env)",
                "+        self.tc.exec_command(\"yes\", environment=target_env)",
                "         schan = self.ts.accept(1.0)",
                "-        self.assertEqual(target_env, getattr(schan, 'env', {}))",
                "+        self.assertEqual(target_env, getattr(schan, \"env\", {}))",
                "         schan.close()",
                "@@ -522,9 +524,13 @@ class SSHClientTest(unittest.TestCase):",
                "             # Verify that a rejection by the server can be detected",
                "-            self.tc.exec_command('yes', environment={b'INVALID_ENV': b''})",
                "+            self.tc.exec_command(\"yes\", environment={b\"INVALID_ENV\": b\"\"})",
                "         except SSHException as e:",
                "-            self.assertTrue('INVALID_ENV' in str(e),",
                "-                            'Expected variable name in error message')",
                "-            self.assertTrue(isinstance(e.args[1], SSHException),",
                "-                            'Expected original SSHException in exception')",
                "+            self.assertTrue(",
                "+                \"INVALID_ENV\" in str(e),",
                "+                \"Expected variable name in error message\",",
                "+            )",
                "+            self.assertTrue(",
                "+                isinstance(e.args[1], SSHException),",
                "+                \"Expected original SSHException in exception\",",
                "+            )",
                "         else:",
                "-            self.assertFalse(False, 'SSHException was not thrown.')",
                "+            self.assertFalse(False, \"SSHException was not thrown.\")"
            ],
            "changed_files": [
                "paramiko/channel.py",
                "paramiko/transport.py",
                "tests/test_client.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "4cc767f5cd109a459571abbf21c68b783ce237c9",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537232324,
            "hunks": 28,
            "message": "Merge branch '2.1' into 2.2 Foregoes a handful of unblackened bits to make the merge easier; will blacken next anyways",
            "diff": [
                "diff --cc paramiko/_version.py",
                "index 9c12d690,4350dbd0..76a0e3de",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@@ -1,2 -1,2 +1,2 @@@",
                " -__version_info__ = (2, 1, 5)",
                " +__version_info__ = (2, 2, 3)",
                "- __version__ = '.'.join(map(str, __version_info__))",
                "+ __version__ = \".\".join(map(str, __version_info__))",
                "diff --cc sites/www/changelog.rst",
                "index 826462ec,398e0913..071328f3",
                "--- a/sites/www/changelog.rst",
                "+++ b/sites/www/changelog.rst",
                "@@@ -4,8 -4,11 +4,12 @@@ Changelo",
                "- * :release:`2.2.3 <2018-03-12>`",
                "- * :release:`2.1.5 <2018-03-12>`",
                "- * :release:`2.0.8 <2018-03-12>`",
                "- * :release:`1.18.5 <2018-03-12>`",
                "- * :release:`1.17.6 <2018-03-12>`",
                "- * :bug:`1175 (1.17+)` Fix a security flaw (CVE-2018-7750) in Paramiko's server",
                "+ - :support:`1291 backported` Backport pytest support and application of the",
                "+   ``black`` code formatter (both of which previously only existed in the 2.4",
                "+   branch and above) to everything 2.0 and newer. This makes back/forward",
                "+   porting bugfixes significantly easier.",
                "++- :release:`2.2.3 <2018-03-12>`",
                "+ - :release:`2.1.5 <2018-03-12>`",
                "+ - :release:`2.0.8 <2018-03-12>`",
                "+ - :release:`1.18.5 <2018-03-12>`",
                "+ - :release:`1.17.6 <2018-03-12>`",
                "+ - :bug:`1175 (1.17+)` Fix a security flaw (CVE-2018-7750) in Paramiko's server",
                "    mode (emphasis on **server** mode; this does **not** impact *client* use!)",
                "@@@ -14,19 -17,10 +18,19 @@@",
                "    Matthijs Kooijman for the report.",
                "- * :bug:`1039` Ed25519 auth key decryption raised an unexpected exception when",
                "++- :bug:`1039` Ed25519 auth key decryption raised an unexpected exception when",
                " +  given a unicode password string (typical in python 3). Report by Theodor van",
                " +  Nahl and fix by Pierce Lopez.",
                "- * :bug:`1108 (1.17+)` Rename a private method keyword argument (which was named",
                "+ - :bug:`1108 (1.17+)` Rename a private method keyword argument (which was named",
                "    ``async``) so that we're compatible with the upcoming Python 3.7 release",
                "    (where ``async`` is a new keyword.) Thanks to ``@vEpiphyte`` for the report.",
                "- * :support:`- backported` Include LICENSE file in wheel archives.",
                "- * :release:`2.2.2 <2017-09-18>`",
                "- * :release:`2.1.4 <2017-09-18>`",
                "- * :release:`2.0.7 <2017-09-18>`",
                "- * :release:`1.18.4 <2017-09-18>`",
                "- * :bug:`1065` Add rekeying support to GSSAPI connections, which was erroneously",
                "+ - :support:`- backported` Include LICENSE file in wheel archives.",
                "++- :release:`2.2.2 <2017-09-18>`",
                "+ - :release:`2.1.4 <2017-09-18>`",
                "+ - :release:`2.0.7 <2017-09-18>`",
                "+ - :release:`1.18.4 <2017-09-18>`",
                "++- :bug:`1065` Add rekeying support to GSSAPI connections, which was erroneously",
                " +  missing. Without this fix, any attempt to renegotiate the transport keys for",
                " +  a ``gss-kex``-authed `~paramiko.transport.Transport` would cause a MIC",
                " +  failure and terminate the connection. Thanks to Sebastian Dei\u00c3\u009f and Anselm",
                " +  Kruis for the patch.",
                "- * :bug:`1061` Clean up GSSAPI authentication procedures so they do not prevent",
                "+ - :bug:`1061` Clean up GSSAPI authentication procedures so they do not prevent",
                "    normal fallback to other authentication methods on failure. (In other words,",
                "@@@ -47,19 -41,7 +51,19 @@@",
                "    key. Thanks to Pierce Lopez.",
                "- * :support:`1012` (via :issue:`1016`) Enhance documentation around the new",
                "++- :support:`1012` (via :issue:`1016`) Enhance documentation around the new",
                " +  `SFTP.posix_rename <paramiko.sftp_client.SFTPClient.posix_rename>` method so",
                " +  it's referenced in the 'standard' ``rename`` method for increased visibility.",
                " +  Thanks to Marius Flage for the report.",
                "- * :release:`2.2.1 <2017-06-13>`",
                "- * :bug:`993` Ed25519 host keys were not comparable/hashable, causing an",
                "++- :release:`2.2.1 <2017-06-13>`",
                "++- :bug:`993` Ed25519 host keys were not comparable/hashable, causing an",
                " +  exception if such a key existed in a ``known_hosts`` file. Thanks to Oleh",
                " +  Prypin for the report and Pierce Lopez for the fix.",
                "- * :bug:`990` The (added in 2.2.0) ``bcrypt`` dependency should have been on",
                "++- :bug:`990` The (added in 2.2.0) ``bcrypt`` dependency should have been on",
                " +  version 3.1.3 or greater (was initially set to 3.0.0 or greater.) Thanks to",
                " +  Paul Howarth for the report.",
                "- * :release:`2.2.0 <2017-06-09>`",
                "- * :release:`2.1.3 <2017-06-09>`",
                "- * :release:`2.0.6 <2017-06-09>`",
                "- * :release:`1.18.3 <2017-06-09>`",
                "- * :release:`1.17.5 <2017-06-09>`",
                "- * :bug:`865` SSHClient now requests the type of host key it has (e.g. from",
                "++- :release:`2.2.0 <2017-06-09>`",
                "+ - :release:`2.1.3 <2017-06-09>`",
                "+ - :release:`2.0.6 <2017-06-09>`",
                "+ - :release:`1.18.3 <2017-06-09>`",
                "+ - :release:`1.17.5 <2017-06-09>`",
                "+ - :bug:`865` SSHClient now requests the type of host key it has (e.g. from",
                "    known_hosts) and does not consider a different type to be a \"Missing\" host",
                "@@@ -87,27 -69,6 +91,27 @@@",
                "    for initial draft PRs, and ``@jhgorrell`` for the final patch.",
                "- * :feature:`65` (via :issue:`471`) Add support for OpenSSH's SFTP",
                " -- :support:`956 (1.17+)` Switch code coverage service from coveralls.io to",
                " -  codecov.io (& then disable the latter's auto-comments.) Thanks to Nikolai",
                " -  R\u00c3\u00b8ed Kristiansen for the patch.",
                "++- :feature:`65` (via :issue:`471`) Add support for OpenSSH's SFTP",
                " +  ``posix-rename`` protocol extension (section 3.3 of `OpenSSH's protocol",
                " +  extension document",
                " +  <http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/PROTOCOL?rev=1.31>`_),",
                " +  via a new ``posix_rename`` method in `SFTPClient",
                " +  <paramiko.sftp_client.SFTPClient.posix_rename>` and `SFTPServerInterface",
                " +  <paramiko.sftp_si.SFTPServerInterface.posix_rename>`. Thanks to Wren Turkal",
                " +  for the initial patch & Mika Pfl\u00c3\u00bcger for the enhanced, merged PR.",
                "- * :feature:`869` Add an ``auth_timeout`` kwarg to `SSHClient.connect",
                "++- :feature:`869` Add an ``auth_timeout`` kwarg to `SSHClient.connect",
                " +  <paramiko.client.SSHClient.connect>` (default: 30s) to avoid hangs when the",
                " +  remote end becomes unresponsive during the authentication step. Credit to",
                " +  ``@timsavage``.",
                " +",
                " +  .. note::",
                " +    This technically changes behavior, insofar as very slow auth steps >30s",
                " +    will now cause timeout exceptions instead of completing. We doubt most",
                " +    users will notice; those affected can simply give a higher value to",
                " +    ``auth_timeout``.",
                " +",
                "- * :support:`921` Tighten up the ``__hash__`` implementation for various key",
                "++- :support:`921` Tighten up the ``__hash__`` implementation for various key",
                " +  classes; less code is good code. Thanks to Francisco Couzo for the patch.",
                "- * :support:`956 backported (1.17+)` Switch code coverage service from",
                "++- :support:`956 backported (1.17+)` Switch code coverage service from",
                " +  coveralls.io to codecov.io (& then disable the latter's auto-comments.)",
                " +  Thanks to Nikolai R\u00c3\u00b8ed Kristiansen for the patch.",
                "- * :bug:`983` Move ``sha1`` above the now-arguably-broken ``md5`` in the list of",
                "+ - :bug:`983` Move ``sha1`` above the now-arguably-broken ``md5`` in the list of",
                "    preferred MAC algorithms, as an incremental security improvement for users",
                "@@@ -118,12 -79,3 +122,12 @@@",
                "    for catch & patch.",
                "- * :feature:`857` Allow `SSHClient.set_missing_host_key_policy",
                "++- :feature:`857` Allow `SSHClient.set_missing_host_key_policy",
                " +  <paramiko.client.SSHClient.set_missing_host_key_policy>` to accept policy",
                " +  classes _or_ instances, instead of only instances, thus fixing a",
                " +  long-standing gotcha for unaware users.",
                "- * :feature:`951` Add support for ECDH key exchange (kex), specifically the",
                "++- :feature:`951` Add support for ECDH key exchange (kex), specifically the",
                " +  algorithms ``ecdh-sha2-nistp256``, ``ecdh-sha2-nistp384``, and",
                " +  ``ecdh-sha2-nistp521``. They now come before the older ``diffie-hellman-*``",
                " +  family of kex algorithms in the preferred-kex list. Thanks to Shashank",
                " +  Veerapaneni for the patch & Pierce Lopez for a follow-up.",
                "- * :support:`- backported` A big formatting pass to clean up an enormous number",
                "+ - :support:`- backported` A big formatting pass to clean up an enormous number",
                "    of invalid Sphinx reference links, discovered by switching to a modern,",
                "@@@ -140,11 -92,3 +144,11 @@@",
                "    patch.",
                "- * :feature:`325` (via :issue:`972`) Add Ed25519 support, for both host keys",
                "++- :feature:`325` (via :issue:`972`) Add Ed25519 support, for both host keys",
                " +  and user authentication. Big thanks to Alex Gaynor for the patch.",
                " +",
                " +  .. note::",
                " +    This change adds the ``bcrypt`` and ``pynacl`` Python libraries as",
                " +    dependencies. No C-level dependencies beyond those previously required (for",
                " +    Cryptography) have been added.",
                " +",
                "- * :support:`974 backported` Overhaul the codebase to be PEP-8, etc, compliant",
                "+ - :support:`974 backported` Overhaul the codebase to be PEP-8, etc, compliant",
                "    (i.e. passes the maintainer's preferred `flake8 <http://flake8.pycqa.org/>`_",
                "diff --cc tests/stub_sftp.py",
                "index 0d673091,06ceb419..13e7f3b4",
                "--- a/tests/stub_sftp.py",
                "+++ b/tests/stub_sftp.py",
                "@@@ -25,4 -26,10 +26,11 @@@ import sy",
                "  from paramiko import (",
                "-     ServerInterface, SFTPServerInterface, SFTPServer, SFTPAttributes,",
                "-     SFTPHandle, SFTP_OK, SFTP_FAILURE, AUTH_SUCCESSFUL, OPEN_SUCCEEDED,",
                "+     ServerInterface,",
                "+     SFTPServerInterface,",
                "+     SFTPServer,",
                "+     SFTPAttributes,",
                "+     SFTPHandle,",
                "+     SFTP_OK,",
                "++    SFTP_FAILURE,",
                "+     AUTH_SUCCESSFUL,",
                "+     OPEN_SUCCEEDED,",
                "  )",
                "diff --cc tests/test_client.py",
                "index 7710055b,fed38791..f3f07124",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@@ -42,6 -43,5 +43,12 @@@ from .util import _support, slo",
                "  FINGERPRINTS = {",
                "++<<<<<<< HEAD",
                " +    'ssh-dss': b'\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c',",
                " +    'ssh-rsa': b'\\x60\\x73\\x38\\x44\\xcb\\x51\\x86\\x65\\x7f\\xde\\xda\\xa2\\x2b\\x5a\\x57\\xd5',",
                " +    'ecdsa-sha2-nistp256': b'\\x25\\x19\\xeb\\x55\\xe6\\xa1\\x47\\xff\\x4f\\x38\\xd2\\x75\\x6f\\xa5\\xd5\\x60',",
                " +    'ssh-ed25519': b'\\xb3\\xd5\"\\xaa\\xf9u^\\xe8\\xcd\\x0e\\xea\\x02\\xb9)\\xa2\\x80',",
                "++=======",
                "+     \"ssh-dss\": b\"\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c\",",
                "+     \"ssh-rsa\": b\"\\x60\\x73\\x38\\x44\\xcb\\x51\\x86\\x65\\x7f\\xde\\xda\\xa2\\x2b\\x5a\\x57\\xd5\",",
                "+     \"ecdsa-sha2-nistp256\": b\"\\x25\\x19\\xeb\\x55\\xe6\\xa1\\x47\\xff\\x4f\\x38\\xd2\\x75\\x6f\\xa5\\xd5\\x60\",",
                "++>>>>>>> 2.1",
                "  }",
                "@@@ -544,19 -535,2 +560,18 @@@ class SSHClientTest(unittest.TestCase)",
                "          else:",
                "-             self.assertFalse(False, 'SSHException was not thrown.')",
                "- ",
                "+             self.assertFalse(False, \"SSHException was not thrown.\")",
                " +",
                " +    def test_missing_key_policy_accepts_classes_or_instances(self):",
                " +        \"\"\"",
                " +        Client.missing_host_key_policy() can take classes or instances.",
                " +        \"\"\"",
                " +        # AN ACTUAL UNIT TEST?! GOOD LORD",
                " +        # (But then we have to test a private API...meh.)",
                " +        client = paramiko.SSHClient()",
                " +        # Default",
                " +        assert isinstance(client._policy, paramiko.RejectPolicy)",
                " +        # Hand in an instance (classic behavior)",
                " +        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())",
                " +        assert isinstance(client._policy, paramiko.AutoAddPolicy)",
                " +        # Hand in just the class (new behavior)",
                " +        client.set_missing_host_key_policy(paramiko.AutoAddPolicy)",
                " +        assert isinstance(client._policy, paramiko.AutoAddPolicy)",
                "diff --cc tests/test_kex_gss.py",
                "index af342a7c,d5f624ce..c71ff91c",
                "--- a/tests/test_kex_gss.py",
                "+++ b/tests/test_kex_gss.py",
                "@@@ -105,6 -107,12 +107,13 @@@ class GSSKexTest(unittest.TestCase)",
                "          self.tc = paramiko.SSHClient()",
                "-         self.tc.get_host_keys().add('[%s]:%d' % (self.hostname, self.port),",
                "-                                     'ssh-rsa', public_host_key)",
                "-         self.tc.connect(self.hostname, self.port, username=self.username,",
                "-                         gss_auth=True, gss_kex=True, gss_host=gss_host)",
                "+         self.tc.get_host_keys().add(",
                "+             \"[%s]:%d\" % (self.hostname, self.port), \"ssh-rsa\", public_host_key",
                "+         )",
                "+         self.tc.connect(",
                "+             self.hostname,",
                "+             self.port,",
                "+             username=self.username,",
                "+             gss_auth=True,",
                "+             gss_kex=True,",
                "++            gss_host=gss_host,",
                "+         )",
                "diff --cc tests/test_sftp.py",
                "index b3c7bf98,ccfdf7b0..288541b9",
                "mode 100755,100644..100644",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@@ -279,36 -187,3 +187,35 @@@ class TestSFTP(object)",
                "- ",
                " +    def test_5a_posix_rename(self):",
                " +        \"\"\"Test posix-rename@openssh.com protocol extension.\"\"\"",
                " +        try:",
                " +            # first check that the normal rename works as specified",
                " +            with sftp.open(FOLDER + '/a', 'w') as f:",
                " +                f.write('one')",
                " +            sftp.rename(FOLDER + '/a', FOLDER + '/b')",
                " +            with sftp.open(FOLDER + '/a', 'w') as f:",
                " +                f.write('two')",
                " +            try:",
                " +                sftp.rename(FOLDER + '/a', FOLDER + '/b')",
                " +                self.assertTrue(False, 'no exception when rename-ing onto existing file')",
                " +            except (OSError, IOError):",
                " +                pass",
                " +",
                " +            # now check with the posix_rename",
                " +            sftp.posix_rename(FOLDER + '/a', FOLDER + '/b')",
                " +            with sftp.open(FOLDER + '/b', 'r') as f:",
                " +                data = u(f.read())",
                " +            self.assertEqual('two', data, \"Contents of renamed file not the same as original file\")",
                " +",
                " +        finally:",
                " +            try:",
                " +                sftp.remove(FOLDER + '/a')",
                " +            except:",
                " +                pass",
                " +            try:",
                " +                sftp.remove(FOLDER + '/b')",
                " +            except:",
                " +                pass",
                " +",
                " +",
                "-     def test_6_folder(self):",
                "+     def test_6_folder(self, sftp):",
                "          \"\"\""
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "cb632613ed4006820fc26d5fd237f2bbebf11318",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330441,
            "hunks": 1,
            "message": "Cut 2.1.6",
            "diff": [
                "diff --git a/paramiko/_version.py b/paramiko/_version.py",
                "index 4350dbd0..17fd0032 100644",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@ -1,2 +1,2 @@",
                "-__version_info__ = (2, 1, 5)",
                "+__version_info__ = (2, 1, 6)",
                " __version__ = \".\".join(map(str, __version_info__))"
            ],
            "changed_files": [
                "paramiko/_version.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f61a8e8eff1b192d694d884a76f32bcecbe0abf1",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330551,
            "hunks": 1,
            "message": "Cut 2.3.3",
            "diff": [
                "diff --git a/paramiko/_version.py b/paramiko/_version.py",
                "index 1ddb4c76..fcdc1c31 100644",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@ -1,2 +1,2 @@",
                "-__version_info__ = (2, 3, 2)",
                "+__version_info__ = (2, 3, 3)",
                " __version__ = \".\".join(map(str, __version_info__))"
            ],
            "changed_files": [
                "paramiko/_version.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dd551fcd6d9fec3f0f5b981c5e04e9c464a2da68",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330502,
            "hunks": 1,
            "message": "Cut 2.2.4",
            "diff": [
                "diff --git a/paramiko/_version.py b/paramiko/_version.py",
                "index 76a0e3de..96e885f5 100644",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@ -1,2 +1,2 @@",
                "-__version_info__ = (2, 2, 3)",
                "+__version_info__ = (2, 2, 4)",
                " __version__ = \".\".join(map(str, __version_info__))"
            ],
            "changed_files": [
                "paramiko/_version.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fc13095e2b2f930844c89654c63fedd21c8de076",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537222540,
            "hunks": 1,
            "message": "Non-git cherry-pick of modern pytest hints. Required to turn off pytest-relaxed when it's installed locally (since later versions pull it in for its utils), and may as well just yank rest for now too. Should merge-up cleanly?",
            "diff": [
                "diff --git a/setup.cfg b/setup.cfg",
                "index 8cc271fe..245b77f2 100644",
                "--- a/setup.cfg",
                "+++ b/setup.cfg",
                "@@ -13 +13,8 @@ ignore = E124,E125,E128,E261,E301,E302,E303,E402",
                " max-line-length = 79",
                "+",
                "+[tool:pytest]",
                "+# We use pytest-relaxed just for its utils at the moment, so disable it at the",
                "+# plugin level until we adapt test organization to really use it.",
                "+addopts = -p no:relaxed",
                "+# Loop on failure",
                "+looponfailroots = tests paramiko"
            ],
            "changed_files": [
                "setup.cfg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b5f4c213ba2e3b560cda84efc556812ff989cd1f",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330600,
            "hunks": 1,
            "message": "Cut 2.4.2",
            "diff": [
                "diff --git a/paramiko/_version.py b/paramiko/_version.py",
                "index 95e86b6a..2e797d40 100644",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@ -1,2 +1,2 @@",
                "-__version_info__ = (2, 4, 1)",
                "+__version_info__ = (2, 4, 2)",
                " __version__ = \".\".join(map(str, __version_info__))"
            ],
            "changed_files": [
                "paramiko/_version.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "75c907c0ae909e8ba34964c29fad2bb9059edb13",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508874358,
            "hunks": 1,
            "message": "Try turning off session scope for sftp_server fixture. Yesterday, this SEEMED like it did not make a difference in ability to reproduce hangs. Today...it seems to make a big difference? So confuse.",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index dd860ff2..d1967a73 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -54,3 +54,3 @@ def make_sftp_folder():",
                "-@pytest.fixture(scope='session')",
                "+@pytest.fixture#(scope='session')",
                " def sftp_server():"
            ],
            "changed_files": [
                "tests/conftest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: server",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8868305a76e84e2ee00e35b5131b7b98e45f92a1",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508799930,
            "hunks": 182,
            "message": "Start overhauling regular SFTP suite. Includes attempt to split out the longer-lived server component from the client component, in fixtures Also starts tweaking early tests so they're less bad. E.g. test_2_close had its docstring actively disagreeing with its code (which was super confusing since both were committed at the same time in 2005...)",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index 7d85fa99..ea10d612 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -41,9 +41,11 @@ def make_sftp_folder(client):",
                "-# TODO: apply at module or session level",
                "-# TODO: roll in SFTP folder setup and teardown?",
                "-# NOTE: This is defined here for use by both SFTP (normal & 'big') suites.",
                " @pytest.fixture(scope='session')",
                "-def sftp():",
                "+def sftp_server():",
                "     \"\"\"",
                "-    Set up an in-memory SFTP server, returning its corresponding SFTPClient.",
                "+    Set up an in-memory SFTP server thread. Yields the client Transport/socket.",
                "+",
                "+    The resulting client Transport (along with all the server components) will",
                "+    be the same object throughout the test session; the `sftp` fixture then",
                "+    creates new higher level client objects wrapped around the client",
                "+    Transport, as necessary.",
                "     \"\"\"",
                "@@ -58,3 +60,3 @@ def sftp():",
                "     ts.add_server_key(host_key)",
                "-    # Server & client setup",
                "+    # Server setup",
                "     event = threading.Event()",
                "@@ -63,5 +65,18 @@ def sftp():",
                "     ts.start_server(event, server)",
                "-    tc.connect(username='slowdive', password='pygmalion')",
                "+    # Wait (so client has time to connect? Not sure. Old.)",
                "     event.wait(1.0)",
                "-    client = SFTP.from_transport(tc)",
                "+    # Make & yield connection.",
                "+    tc.connect(username='slowdive', password='pygmalion')",
                "+    yield tc",
                "+    # TODO: any need for shutdown? Why didn't old suite do so? Or was that the",
                "+    # point of the \"join all threads from threading module\" crap in test.py?",
                "+",
                "+",
                "+@pytest.fixture",
                "+def sftp(sftp_server):",
                "+    \"\"\"",
                "+    Yield an SFTP client connected to the global in-session SFTP server thread.",
                "+    \"\"\"",
                "+    # Client setup",
                "+    client = SFTP.from_transport(sftp_server)",
                "     # Work in 'remote' folder setup (as it wants to use the client)",
                "@@ -74,2 +89,6 @@ def sftp():",
                "     # Clean up",
                "-    client.rmdir(client.FOLDER)",
                "+    # TODO: many tests like to close the client; to match old test suite",
                "+    # behavior we'd need to recreate the entire client? Possibly better to just",
                "+    # make the \"it runs locally, dumbass\" explicit & then just use stdlib to",
                "+    # clean up?",
                "+    #client.rmdir(client.FOLDER)",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index 9154a795..c1d4cfe0 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -86,7 +86,2 @@ NON_UTF8_DATA = b'\\xC3\\xC3'",
                "-FOLDER = os.environ.get('TEST_FOLDER', 'temp-testing000')",
                "-",
                "-sftp = None",
                "-tc = None",
                "-g_big_file_test = True",
                " unicode_folder = u'\\u00fcnic\\u00f8de' if PY2 else '\\u00fcnic\\u00f8de'",
                "@@ -95,28 +90,4 @@ utf8_folder = b'/\\xc3\\xbcnic\\xc3\\xb8\\x64\\x65'",
                "-class SFTPTest(unittest.TestCase):",
                "-    @staticmethod",
                "-    def set_big_file_test(onoff):",
                "-        global g_big_file_test",
                "-        g_big_file_test = onoff",
                "-",
                "-    def setUp(self):",
                "-        # TODO: I think this was created to allow working around litter from",
                "-        # broken previous test runs, and/or to allow concurrent testing? Either",
                "-        # way I hate it and it should die ASAP in favor of pytest fixtures or",
                "-        # similar things that do try/finally.",
                "-        # TODO: also, for god's sake remove the global in favor of self.",
                "-        global FOLDER",
                "-        for i in range(1000):",
                "-            FOLDER = FOLDER[:-3] + '%03d' % i",
                "-            try:",
                "-                sftp.mkdir(FOLDER)",
                "-                break",
                "-            except (IOError, OSError):",
                "-                pass",
                "-",
                "-    def tearDown(self):",
                "-        #sftp.chdir()",
                "-        sftp.rmdir(FOLDER)",
                "-",
                "-    def test_1_file(self):",
                "+class TestSFTP(object):",
                "+    def test_1_file(self, sftp):",
                "         \"\"\"",
                "@@ -124,24 +95,18 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        f = sftp.open(FOLDER + '/test', 'w')",
                "+        f = sftp.open(sftp.FOLDER + '/test', 'w')",
                "         try:",
                "-            self.assertEqual(f.stat().st_size, 0)",
                "+            assert f.stat().st_size == 0",
                "         finally:",
                "             f.close()",
                "-            sftp.remove(FOLDER + '/test')",
                "+            sftp.remove(sftp.FOLDER + '/test')",
                "-    def test_2_close(self):",
                "+    def test_2_close(self, sftp):",
                "         \"\"\"",
                "-        verify that closing the sftp session doesn't do anything bad, and that",
                "-        a new one can be opened.",
                "+        Verify that SFTP session close() causes a socket error on next action.",
                "         \"\"\"",
                "-        global sftp",
                "         sftp.close()",
                "-        try:",
                "-            sftp.open(FOLDER + '/test2', 'w')",
                "-            self.fail('expected exception')",
                "-        except:",
                "-            pass",
                "-        sftp = paramiko.SFTP.from_transport(tc)",
                "+        with pytest.raises(socket.error, match='Socket is closed'):",
                "+            sftp.open(sftp.FOLDER + '/test2', 'w')",
                "-    def test_2_sftp_can_be_used_as_context_manager(self):",
                "+    def test_2_sftp_can_be_used_as_context_manager(self, sftp):",
                "         \"\"\"",
                "@@ -149,14 +114,8 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        global sftp",
                "         with sftp:",
                "             pass",
                "-        try:",
                "-            sftp.open(FOLDER + '/test2', 'w')",
                "-            self.fail('expected exception')",
                "-        except (EOFError, socket.error):",
                "-            pass",
                "-        finally:",
                "-            sftp = paramiko.SFTP.from_transport(tc)",
                "+        with pytest.raises(socket.error, match='Socket is closed'):",
                "+            sftp.open(sftp.FOLDER + '/test2', 'w')",
                "-    def test_3_write(self):",
                "+    def test_3_write(self, sftp):",
                "         \"\"\"",
                "@@ -165,9 +124,9 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/duck.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/duck.txt', 'w') as f:",
                "                 f.write(ARTICLE)",
                "-            self.assertEqual(sftp.stat(FOLDER + '/duck.txt').st_size, 1483)",
                "+            assert sftp.stat(sftp.FOLDER + '/duck.txt').st_size == 1483",
                "         finally:",
                "-            sftp.remove(FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "-    def test_3_sftp_file_can_be_used_as_context_manager(self):",
                "+    def test_3_sftp_file_can_be_used_as_context_manager(self, sftp):",
                "         \"\"\"",
                "@@ -176,9 +135,9 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/duck.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/duck.txt', 'w') as f:",
                "                 f.write(ARTICLE)",
                "-            self.assertEqual(sftp.stat(FOLDER + '/duck.txt').st_size, 1483)",
                "+            assert sftp.stat(sftp.FOLDER + '/duck.txt').st_size == 1483",
                "         finally:",
                "-            sftp.remove(FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "-    def test_4_append(self):",
                "+    def test_4_append(self, sftp):",
                "         \"\"\"",
                "@@ -187,16 +146,16 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/append.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/append.txt', 'w') as f:",
                "                 f.write('first line\\nsecond line\\n')",
                "-                self.assertEqual(f.tell(), 23)",
                "+                assert f.tell() == 23",
                "-            with sftp.open(FOLDER + '/append.txt', 'a+') as f:",
                "+            with sftp.open(sftp.FOLDER + '/append.txt', 'a+') as f:",
                "                 f.write('third line!!!\\n')",
                "-                self.assertEqual(f.tell(), 37)",
                "-                self.assertEqual(f.stat().st_size, 37)",
                "+                assert f.tell() == 37",
                "+                assert f.stat().st_size == 37",
                "                 f.seek(-26, f.SEEK_CUR)",
                "-                self.assertEqual(f.readline(), 'second line\\n')",
                "+                assert f.readline() == 'second line\\n'",
                "         finally:",
                "-            sftp.remove(FOLDER + '/append.txt')",
                "+            sftp.remove(sftp.FOLDER + '/append.txt')",
                "-    def test_5_rename(self):",
                "+    def test_5_rename(self, sftp):",
                "         \"\"\"",
                "@@ -205,7 +164,7 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/first.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/first.txt', 'w') as f:",
                "                 f.write('content!\\n')",
                "-            sftp.rename(FOLDER + '/first.txt', FOLDER + '/second.txt')",
                "+            sftp.rename(sftp.FOLDER + '/first.txt', sftp.FOLDER + '/second.txt')",
                "             try:",
                "-                sftp.open(FOLDER + '/first.txt', 'r')",
                "+                sftp.open(sftp.FOLDER + '/first.txt', 'r')",
                "                 self.assertTrue(False, 'no exception on reading nonexistent file')",
                "@@ -213,8 +172,8 @@ class SFTPTest(unittest.TestCase):",
                "                 pass",
                "-            with sftp.open(FOLDER + '/second.txt', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + '/second.txt', 'r') as f:",
                "                 f.seek(-6, f.SEEK_END)",
                "-                self.assertEqual(u(f.read(4)), 'tent')",
                "+                assert u(f.read(4)) == 'tent'",
                "         finally:",
                "             try:",
                "-                sftp.remove(FOLDER + '/first.txt')",
                "+                sftp.remove(sftp.FOLDER + '/first.txt')",
                "             except:",
                "@@ -222,3 +181,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.remove(FOLDER + '/second.txt')",
                "+                sftp.remove(sftp.FOLDER + '/second.txt')",
                "             except:",
                "@@ -231,8 +190,8 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        sftp.mkdir(FOLDER + '/subfolder')",
                "-        sftp.open(FOLDER + '/subfolder/test', 'w').close()",
                "-        sftp.remove(FOLDER + '/subfolder/test')",
                "-        sftp.rmdir(FOLDER + '/subfolder')",
                "+        sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "+        sftp.open(sftp.FOLDER + '/subfolder/test', 'w').close()",
                "+        sftp.remove(sftp.FOLDER + '/subfolder/test')",
                "+        sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "         try:",
                "-            sftp.open(FOLDER + '/subfolder/test')",
                "+            sftp.open(sftp.FOLDER + '/subfolder/test')",
                "             # shouldn't be able to create that file",
                "@@ -242,3 +201,3 @@ class SFTPTest(unittest.TestCase):",
                "-    def test_7_listdir(self):",
                "+    def test_7_listdir(self, sftp):",
                "         \"\"\"",
                "@@ -248,8 +207,8 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.open(FOLDER + '/duck.txt', 'w').close()",
                "-            sftp.open(FOLDER + '/fish.txt', 'w').close()",
                "-            sftp.open(FOLDER + '/tertiary.py', 'w').close()",
                "+            sftp.open(sftp.FOLDER + '/duck.txt', 'w').close()",
                "+            sftp.open(sftp.FOLDER + '/fish.txt', 'w').close()",
                "+            sftp.open(sftp.FOLDER + '/tertiary.py', 'w').close()",
                "-            x = sftp.listdir(FOLDER)",
                "-            self.assertEqual(len(x), 3)",
                "+            x = sftp.listdir(sftp.FOLDER)",
                "+            assert len(x) == 3",
                "             self.assertTrue('duck.txt' in x)",
                "@@ -259,7 +218,7 @@ class SFTPTest(unittest.TestCase):",
                "         finally:",
                "-            sftp.remove(FOLDER + '/duck.txt')",
                "-            sftp.remove(FOLDER + '/fish.txt')",
                "-            sftp.remove(FOLDER + '/tertiary.py')",
                "+            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + '/fish.txt')",
                "+            sftp.remove(sftp.FOLDER + '/tertiary.py')",
                "-    def test_7_5_listdir_iter(self):",
                "+    def test_7_5_listdir_iter(self, sftp):",
                "         \"\"\"",
                "@@ -268,8 +227,8 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.open(FOLDER + '/duck.txt', 'w').close()",
                "-            sftp.open(FOLDER + '/fish.txt', 'w').close()",
                "-            sftp.open(FOLDER + '/tertiary.py', 'w').close()",
                "+            sftp.open(sftp.FOLDER + '/duck.txt', 'w').close()",
                "+            sftp.open(sftp.FOLDER + '/fish.txt', 'w').close()",
                "+            sftp.open(sftp.FOLDER + '/tertiary.py', 'w').close()",
                "-            x = [x.filename for x in sftp.listdir_iter(FOLDER)]",
                "-            self.assertEqual(len(x), 3)",
                "+            x = [x.filename for x in sftp.listdir_iter(sftp.FOLDER)]",
                "+            assert len(x) == 3",
                "             self.assertTrue('duck.txt' in x)",
                "@@ -279,7 +238,7 @@ class SFTPTest(unittest.TestCase):",
                "         finally:",
                "-            sftp.remove(FOLDER + '/duck.txt')",
                "-            sftp.remove(FOLDER + '/fish.txt')",
                "-            sftp.remove(FOLDER + '/tertiary.py')",
                "+            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + '/fish.txt')",
                "+            sftp.remove(sftp.FOLDER + '/tertiary.py')",
                "-    def test_8_setstat(self):",
                "+    def test_8_setstat(self, sftp):",
                "         \"\"\"",
                "@@ -288,8 +247,8 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/special', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/special', 'w') as f:",
                "                 f.write('x' * 1024)",
                "-            stat = sftp.stat(FOLDER + '/special')",
                "-            sftp.chmod(FOLDER + '/special', (stat.st_mode & ~o777) | o600)",
                "-            stat = sftp.stat(FOLDER + '/special')",
                "+            stat = sftp.stat(sftp.FOLDER + '/special')",
                "+            sftp.chmod(sftp.FOLDER + '/special', (stat.st_mode & ~o777) | o600)",
                "+            stat = sftp.stat(sftp.FOLDER + '/special')",
                "             expected_mode = o600",
                "@@ -301,4 +260,4 @@ class SFTPTest(unittest.TestCase):",
                "                 expected_mode = o644",
                "-            self.assertEqual(stat.st_mode & o777, expected_mode)",
                "-            self.assertEqual(stat.st_size, 1024)",
                "+            assert stat.st_mode & o777 == expected_mode",
                "+            assert stat.st_size == 1024",
                "@@ -306,7 +265,7 @@ class SFTPTest(unittest.TestCase):",
                "             atime = stat.st_atime - 1800",
                "-            sftp.utime(FOLDER + '/special', (atime, mtime))",
                "-            stat = sftp.stat(FOLDER + '/special')",
                "-            self.assertEqual(stat.st_mtime, mtime)",
                "+            sftp.utime(sftp.FOLDER + '/special', (atime, mtime))",
                "+            stat = sftp.stat(sftp.FOLDER + '/special')",
                "+            assert stat.st_mtime == mtime",
                "             if sys.platform not in ('win32', 'cygwin'):",
                "-                self.assertEqual(stat.st_atime, atime)",
                "+                assert stat.st_atime == atime",
                "@@ -314,9 +273,9 @@ class SFTPTest(unittest.TestCase):",
                "-            sftp.truncate(FOLDER + '/special', 512)",
                "-            stat = sftp.stat(FOLDER + '/special')",
                "-            self.assertEqual(stat.st_size, 512)",
                "+            sftp.truncate(sftp.FOLDER + '/special', 512)",
                "+            stat = sftp.stat(sftp.FOLDER + '/special')",
                "+            assert stat.st_size == 512",
                "         finally:",
                "-            sftp.remove(FOLDER + '/special')",
                "+            sftp.remove(sftp.FOLDER + '/special')",
                "-    def test_9_fsetstat(self):",
                "+    def test_9_fsetstat(self, sftp):",
                "         \"\"\"",
                "@@ -326,6 +285,6 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/special', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/special', 'w') as f:",
                "                 f.write('x' * 1024)",
                "-            with sftp.open(FOLDER + '/special', 'r+') as f:",
                "+            with sftp.open(sftp.FOLDER + '/special', 'r+') as f:",
                "                 stat = f.stat()",
                "@@ -341,4 +300,4 @@ class SFTPTest(unittest.TestCase):",
                "                     expected_mode = o644",
                "-                self.assertEqual(stat.st_mode & o777, expected_mode)",
                "-                self.assertEqual(stat.st_size, 1024)",
                "+                assert stat.st_mode & o777 == expected_mode",
                "+                assert stat.st_size == 1024",
                "@@ -348,5 +307,5 @@ class SFTPTest(unittest.TestCase):",
                "                 stat = f.stat()",
                "-                self.assertEqual(stat.st_mtime, mtime)",
                "+                assert stat.st_mtime == mtime",
                "                 if sys.platform not in ('win32', 'cygwin'):",
                "-                    self.assertEqual(stat.st_atime, atime)",
                "+                    assert stat.st_atime == atime",
                "@@ -356,7 +315,7 @@ class SFTPTest(unittest.TestCase):",
                "                 stat = f.stat()",
                "-                self.assertEqual(stat.st_size, 512)",
                "+                assert stat.st_size == 512",
                "         finally:",
                "-            sftp.remove(FOLDER + '/special')",
                "+            sftp.remove(sftp.FOLDER + '/special')",
                "-    def test_A_readline_seek(self):",
                "+    def test_A_readline_seek(self, sftp):",
                "         \"\"\"",
                "@@ -368,6 +327,6 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/duck.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/duck.txt', 'w') as f:",
                "                 f.write(ARTICLE)",
                "-            with sftp.open(FOLDER + '/duck.txt', 'r+') as f:",
                "+            with sftp.open(sftp.FOLDER + '/duck.txt', 'r+') as f:",
                "                 line_number = 0",
                "@@ -381,11 +340,11 @@ class SFTPTest(unittest.TestCase):",
                "                 f.seek(pos_list[6], f.SEEK_SET)",
                "-                self.assertEqual(f.readline(), 'Nouzilly, France.\\n')",
                "+                assert f.readline(), 'Nouzilly == France.\\n'",
                "                 f.seek(pos_list[17], f.SEEK_SET)",
                "-                self.assertEqual(f.readline()[:4], 'duck')",
                "+                assert f.readline()[:4] == 'duck'",
                "                 f.seek(pos_list[10], f.SEEK_SET)",
                "-                self.assertEqual(f.readline(), 'duck types were equally resistant to exogenous insulin compared with chicken.\\n')",
                "+                assert f.readline() == 'duck types were equally resistant to exogenous insulin compared with chicken.\\n'",
                "         finally:",
                "-            sftp.remove(FOLDER + '/duck.txt')",
                "+            sftp.remove(sftp.FOLDER + '/duck.txt')",
                "-    def test_B_write_seek(self):",
                "+    def test_B_write_seek(self, sftp):",
                "         \"\"\"",
                "@@ -395,3 +354,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/testing.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/testing.txt', 'w') as f:",
                "                 f.write('hello kitty.\\n')",
                "@@ -400,10 +359,10 @@ class SFTPTest(unittest.TestCase):",
                "-            self.assertEqual(sftp.stat(FOLDER + '/testing.txt').st_size, 13)",
                "-            with sftp.open(FOLDER + '/testing.txt', 'r') as f:",
                "+            assert sftp.stat(sftp.FOLDER + '/testing.txt').st_size == 13",
                "+            with sftp.open(sftp.FOLDER + '/testing.txt', 'r') as f:",
                "                 data = f.read(20)",
                "-            self.assertEqual(data, b'hello kiddy.\\n')",
                "+            assert data == b'hello kiddy.\\n'",
                "         finally:",
                "-            sftp.remove(FOLDER + '/testing.txt')",
                "+            sftp.remove(sftp.FOLDER + '/testing.txt')",
                "-    def test_C_symlink(self):",
                "+    def test_C_symlink(self, sftp):",
                "         \"\"\"",
                "@@ -416,9 +375,9 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/original.txt', 'w') as f:",
                "+            with sftp.open(sftp.FOLDER + '/original.txt', 'w') as f:",
                "                 f.write('original\\n')",
                "-            sftp.symlink('original.txt', FOLDER + '/link.txt')",
                "-            self.assertEqual(sftp.readlink(FOLDER + '/link.txt'), 'original.txt')",
                "+            sftp.symlink('original.txt', sftp.FOLDER + '/link.txt')",
                "+            assert sftp.readlink(sftp.FOLDER + '/link.txt') == 'original.txt'",
                "-            with sftp.open(FOLDER + '/link.txt', 'r') as f:",
                "-                self.assertEqual(f.readlines(), ['original\\n'])",
                "+            with sftp.open(sftp.FOLDER + '/link.txt', 'r') as f:",
                "+                assert f.readlines() == ['original\\n']",
                "@@ -427,16 +386,16 @@ class SFTPTest(unittest.TestCase):",
                "                 cwd = cwd[:-1]",
                "-            abs_path = cwd + '/' + FOLDER + '/original.txt'",
                "-            sftp.symlink(abs_path, FOLDER + '/link2.txt')",
                "-            self.assertEqual(abs_path, sftp.readlink(FOLDER + '/link2.txt'))",
                "+            abs_path = cwd + '/' + sftp.FOLDER + '/original.txt'",
                "+            sftp.symlink(abs_path, sftp.FOLDER + '/link2.txt')",
                "+            assert abs_path == sftp.readlink(sftp.FOLDER + '/link2.txt')",
                "-            self.assertEqual(sftp.lstat(FOLDER + '/link.txt').st_size, 12)",
                "-            self.assertEqual(sftp.stat(FOLDER + '/link.txt').st_size, 9)",
                "+            assert sftp.lstat(sftp.FOLDER + '/link.txt').st_size == 12",
                "+            assert sftp.stat(sftp.FOLDER + '/link.txt').st_size == 9",
                "             # the sftp server may be hiding extra path members from us, so the",
                "             # length may be longer than we expect:",
                "-            self.assertTrue(sftp.lstat(FOLDER + '/link2.txt').st_size >= len(abs_path))",
                "-            self.assertEqual(sftp.stat(FOLDER + '/link2.txt').st_size, 9)",
                "-            self.assertEqual(sftp.stat(FOLDER + '/original.txt').st_size, 9)",
                "+            self.assertTrue(sftp.lstat(sftp.FOLDER + '/link2.txt').st_size >= len(abs_path))",
                "+            assert sftp.stat(sftp.FOLDER + '/link2.txt').st_size == 9",
                "+            assert sftp.stat(sftp.FOLDER + '/original.txt').st_size == 9",
                "         finally:",
                "             try:",
                "-                sftp.remove(FOLDER + '/link.txt')",
                "+                sftp.remove(sftp.FOLDER + '/link.txt')",
                "             except:",
                "@@ -444,3 +403,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.remove(FOLDER + '/link2.txt')",
                "+                sftp.remove(sftp.FOLDER + '/link2.txt')",
                "             except:",
                "@@ -448,3 +407,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.remove(FOLDER + '/original.txt')",
                "+                sftp.remove(sftp.FOLDER + '/original.txt')",
                "             except:",
                "@@ -452,3 +411,3 @@ class SFTPTest(unittest.TestCase):",
                "-    def test_D_flush_seek(self):",
                "+    def test_D_flush_seek(self, sftp):",
                "         \"\"\"",
                "@@ -457,3 +416,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/happy.txt', 'w', 1) as f:",
                "+            with sftp.open(sftp.FOLDER + '/happy.txt', 'w', 1) as f:",
                "                 f.write('full line.\\n')",
                "@@ -463,8 +422,8 @@ class SFTPTest(unittest.TestCase):",
                "-            with sftp.open(FOLDER + '/happy.txt', 'r') as f:",
                "-                self.assertEqual(f.readline(), u('full line?\\n'))",
                "-                self.assertEqual(f.read(7), b'partial')",
                "+            with sftp.open(sftp.FOLDER + '/happy.txt', 'r') as f:",
                "+                assert f.readline() == u('full line?\\n')",
                "+                assert f.read(7) == b'partial'",
                "         finally:",
                "             try:",
                "-                sftp.remove(FOLDER + '/happy.txt')",
                "+                sftp.remove(sftp.FOLDER + '/happy.txt')",
                "             except:",
                "@@ -472,3 +431,3 @@ class SFTPTest(unittest.TestCase):",
                "-    def test_E_realpath(self):",
                "+    def test_E_realpath(self, sftp):",
                "         \"\"\"",
                "@@ -479,7 +438,7 @@ class SFTPTest(unittest.TestCase):",
                "         self.assertTrue(len(pwd) > 0)",
                "-        f = sftp.normalize('./' + FOLDER)",
                "+        f = sftp.normalize('./' + sftp.FOLDER)",
                "         self.assertTrue(len(f) > 0)",
                "-        self.assertEqual(os.path.join(pwd, FOLDER), f)",
                "+        assert os.path.join(pwd, sftp.FOLDER) == f",
                "-    def test_F_mkdir(self):",
                "+    def test_F_mkdir(self, sftp):",
                "         \"\"\"",
                "@@ -488,3 +447,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.mkdir(FOLDER + '/subfolder')",
                "+            sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "         except:",
                "@@ -492,3 +451,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.mkdir(FOLDER + '/subfolder')",
                "+            sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "             self.assertTrue(False, 'no exception overwriting subfolder')",
                "@@ -497,3 +456,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.rmdir(FOLDER + '/subfolder')",
                "+            sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "         except:",
                "@@ -501,3 +460,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.rmdir(FOLDER + '/subfolder')",
                "+            sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "             self.assertTrue(False, 'no exception removing nonexistent subfolder')",
                "@@ -506,3 +465,3 @@ class SFTPTest(unittest.TestCase):",
                "-    def test_G_chdir(self):",
                "+    def test_G_chdir(self, sftp):",
                "         \"\"\"",
                "@@ -514,7 +473,7 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.mkdir(FOLDER + '/alpha')",
                "-            sftp.chdir(FOLDER + '/alpha')",
                "+            sftp.mkdir(sftp.FOLDER + '/alpha')",
                "+            sftp.chdir(sftp.FOLDER + '/alpha')",
                "             sftp.mkdir('beta')",
                "-            self.assertEqual(root + FOLDER + '/alpha', sftp.getcwd())",
                "-            self.assertEqual(['beta'], sftp.listdir('.'))",
                "+            assert root + sftp.FOLDER + '/alpha' == sftp.getcwd()",
                "+            assert ['beta'] == sftp.listdir('.')",
                "@@ -524,5 +483,5 @@ class SFTPTest(unittest.TestCase):",
                "             sftp.chdir('..')",
                "-            self.assertEqual(['fish'], sftp.listdir('beta'))",
                "+            assert ['fish'] == sftp.listdir('beta')",
                "             sftp.chdir('..')",
                "-            self.assertEqual(['fish'], sftp.listdir('alpha/beta'))",
                "+            assert ['fish'] == sftp.listdir('alpha/beta')",
                "         finally:",
                "@@ -530,3 +489,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.unlink(FOLDER + '/alpha/beta/fish')",
                "+                sftp.unlink(sftp.FOLDER + '/alpha/beta/fish')",
                "             except:",
                "@@ -534,3 +493,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.rmdir(FOLDER + '/alpha/beta')",
                "+                sftp.rmdir(sftp.FOLDER + '/alpha/beta')",
                "             except:",
                "@@ -538,3 +497,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.rmdir(FOLDER + '/alpha')",
                "+                sftp.rmdir(sftp.FOLDER + '/alpha')",
                "             except:",
                "@@ -542,3 +501,3 @@ class SFTPTest(unittest.TestCase):",
                "-    def test_H_get_put(self):",
                "+    def test_H_get_put(self, sftp):",
                "         \"\"\"",
                "@@ -557,7 +516,7 @@ class SFTPTest(unittest.TestCase):",
                "             saved_progress.append((x, y))",
                "-        sftp.put(localname, FOLDER + '/bunny.txt', progress_callback)",
                "+        sftp.put(localname, sftp.FOLDER + '/bunny.txt', progress_callback)",
                "-        with sftp.open(FOLDER + '/bunny.txt', 'rb') as f:",
                "-            self.assertEqual(text, f.read(128))",
                "-        self.assertEqual([(41, 41)], saved_progress)",
                "+        with sftp.open(sftp.FOLDER + '/bunny.txt', 'rb') as f:",
                "+            assert text == f.read(128)",
                "+        assert [(41, 41)] == saved_progress",
                "@@ -567,12 +526,12 @@ class SFTPTest(unittest.TestCase):",
                "         saved_progress = []",
                "-        sftp.get(FOLDER + '/bunny.txt', localname, progress_callback)",
                "+        sftp.get(sftp.FOLDER + '/bunny.txt', localname, progress_callback)",
                "         with open(localname, 'rb') as f:",
                "-            self.assertEqual(text, f.read(128))",
                "-        self.assertEqual([(41, 41)], saved_progress)",
                "+            assert text == f.read(128)",
                "+        assert [(41, 41)] == saved_progress",
                "         os.unlink(localname)",
                "-        sftp.unlink(FOLDER + '/bunny.txt')",
                "+        sftp.unlink(sftp.FOLDER + '/bunny.txt')",
                "-    def test_I_check(self):",
                "+    def test_I_check(self, sftp):",
                "         \"\"\"",
                "@@ -582,3 +541,3 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        with sftp.open(FOLDER + '/kitty.txt', 'w') as f:",
                "+        with sftp.open(sftp.FOLDER + '/kitty.txt', 'w') as f:",
                "             f.write('here kitty kitty' * 64)",
                "@@ -586,7 +545,7 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/kitty.txt', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + '/kitty.txt', 'r') as f:",
                "                 sum = f.check('sha1')",
                "-                self.assertEqual('91059CFC6615941378D413CB5ADAF4C5EB293402', u(hexlify(sum)).upper())",
                "+                assert '91059CFC6615941378D413CB5ADAF4C5EB293402' == u(hexlify(sum)).upper()",
                "                 sum = f.check('md5', 0, 512)",
                "-                self.assertEqual('93DE4788FCA28D471516963A1FE3856A', u(hexlify(sum)).upper())",
                "+                assert '93DE4788FCA28D471516963A1FE3856A' == u(hexlify(sum)).upper()",
                "                 sum = f.check('md5', 0, 0, 510)",
                "@@ -595,5 +554,5 @@ class SFTPTest(unittest.TestCase):",
                "         finally:",
                "-            sftp.unlink(FOLDER + '/kitty.txt')",
                "+            sftp.unlink(sftp.FOLDER + '/kitty.txt')",
                "-    def test_J_x_flag(self):",
                "+    def test_J_x_flag(self, sftp):",
                "         \"\"\"",
                "@@ -601,3 +560,3 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        sftp.open(FOLDER + '/unusual.txt', 'wx').close()",
                "+        sftp.open(sftp.FOLDER + '/unusual.txt', 'wx').close()",
                "@@ -605,3 +564,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.open(FOLDER + '/unusual.txt', 'wx')",
                "+                sftp.open(sftp.FOLDER + '/unusual.txt', 'wx')",
                "                 self.fail('expected exception')",
                "@@ -610,5 +569,5 @@ class SFTPTest(unittest.TestCase):",
                "         finally:",
                "-            sftp.unlink(FOLDER + '/unusual.txt')",
                "+            sftp.unlink(sftp.FOLDER + '/unusual.txt')",
                "-    def test_K_utf8(self):",
                "+    def test_K_utf8(self, sftp):",
                "         \"\"\"",
                "@@ -616,3 +575,3 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        with sftp.open(FOLDER + '/something', 'w') as f:",
                "+        with sftp.open(sftp.FOLDER + '/something', 'w') as f:",
                "             f.write('okay')",
                "@@ -620,12 +579,12 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.rename(FOLDER + '/something', FOLDER + '/' + unicode_folder)",
                "-            sftp.open(b(FOLDER) + utf8_folder, 'r')",
                "+            sftp.rename(sftp.FOLDER + '/something', sftp.FOLDER + '/' + unicode_folder)",
                "+            sftp.open(b(sftp.FOLDER) + utf8_folder, 'r')",
                "         except Exception as e:",
                "             self.fail('exception ' + str(e))",
                "-        sftp.unlink(b(FOLDER) + utf8_folder)",
                "+        sftp.unlink(b(sftp.FOLDER) + utf8_folder)",
                "-    def test_L_utf8_chdir(self):",
                "-        sftp.mkdir(FOLDER + '/' + unicode_folder)",
                "+    def test_L_utf8_chdir(self, sftp):",
                "+        sftp.mkdir(sftp.FOLDER + '/' + unicode_folder)",
                "         try:",
                "-            sftp.chdir(FOLDER + '/' + unicode_folder)",
                "+            sftp.chdir(sftp.FOLDER + '/' + unicode_folder)",
                "             with sftp.open('something', 'w') as f:",
                "@@ -635,5 +594,5 @@ class SFTPTest(unittest.TestCase):",
                "             sftp.chdir()",
                "-            sftp.rmdir(FOLDER + '/' + unicode_folder)",
                "+            sftp.rmdir(sftp.FOLDER + '/' + unicode_folder)",
                "-    def test_M_bad_readv(self):",
                "+    def test_M_bad_readv(self, sftp):",
                "         \"\"\"",
                "@@ -641,8 +600,8 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        sftp.open(FOLDER + '/zero', 'w').close()",
                "+        sftp.open(sftp.FOLDER + '/zero', 'w').close()",
                "         try:",
                "-            with sftp.open(FOLDER + '/zero', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + '/zero', 'r') as f:",
                "                 f.readv([(0, 12)])",
                "-            with sftp.open(FOLDER + '/zero', 'r') as f:",
                "+            with sftp.open(sftp.FOLDER + '/zero', 'r') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -651,5 +610,5 @@ class SFTPTest(unittest.TestCase):",
                "         finally:",
                "-            sftp.unlink(FOLDER + '/zero')",
                "+            sftp.unlink(sftp.FOLDER + '/zero')",
                "-    def test_N_put_without_confirm(self):",
                "+    def test_N_put_without_confirm(self, sftp):",
                "         \"\"\"",
                "@@ -668,14 +627,14 @@ class SFTPTest(unittest.TestCase):",
                "             saved_progress.append((x, y))",
                "-        res = sftp.put(localname, FOLDER + '/bunny.txt', progress_callback, False)",
                "+        res = sftp.put(localname, sftp.FOLDER + '/bunny.txt', progress_callback, False)",
                "-        self.assertEqual(SFTPAttributes().attr, res.attr)",
                "+        assert SFTPAttributes().attr == res.attr",
                "-        with sftp.open(FOLDER + '/bunny.txt', 'r') as f:",
                "-            self.assertEqual(text, f.read(128))",
                "-        self.assertEqual((41, 41), saved_progress[-1])",
                "+        with sftp.open(sftp.FOLDER + '/bunny.txt', 'r') as f:",
                "+            assert text == f.read(128)",
                "+        assert (41, 41) == saved_progress[-1]",
                "         os.unlink(localname)",
                "-        sftp.unlink(FOLDER + '/bunny.txt')",
                "+        sftp.unlink(sftp.FOLDER + '/bunny.txt')",
                "-    def test_O_getcwd(self):",
                "+    def test_O_getcwd(self, sftp):",
                "         \"\"\"",
                "@@ -683,3 +642,3 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        self.assertEqual(None, sftp.getcwd())",
                "+        assert sftp.getcwd() == None",
                "         root = sftp.normalize('.')",
                "@@ -688,5 +647,5 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            sftp.mkdir(FOLDER + '/alpha')",
                "-            sftp.chdir(FOLDER + '/alpha')",
                "-            self.assertEqual('/' + FOLDER + '/alpha', sftp.getcwd())",
                "+            sftp.mkdir(sftp.FOLDER + '/alpha')",
                "+            sftp.chdir(sftp.FOLDER + '/alpha')",
                "+            assert sftp.getcwd() == '/' + sftp.FOLDER + '/alpha'",
                "         finally:",
                "@@ -694,3 +653,3 @@ class SFTPTest(unittest.TestCase):",
                "             try:",
                "-                sftp.rmdir(FOLDER + '/alpha')",
                "+                sftp.rmdir(sftp.FOLDER + '/alpha')",
                "             except:",
                "@@ -698,3 +657,3 @@ class SFTPTest(unittest.TestCase):",
                "-    def XXX_test_M_seek_append(self):",
                "+    def XXX_test_M_seek_append(self, sftp):",
                "         \"\"\"",
                "@@ -705,3 +664,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open(FOLDER + '/append.txt', 'a') as f:",
                "+            with sftp.open(sftp.FOLDER + '/append.txt', 'a') as f:",
                "                 f.write('first line\\nsecond line\\n')",
                "@@ -710,11 +669,11 @@ class SFTPTest(unittest.TestCase):",
                "-            with sftp.open(FOLDER + '/append.txt', 'r') as f:",
                "-                self.assertEqual(f.stat().st_size, 34)",
                "-                self.assertEqual(f.readline(), 'first line\\n')",
                "-                self.assertEqual(f.readline(), 'second line\\n')",
                "-                self.assertEqual(f.readline(), 'third line\\n')",
                "+            with sftp.open(sftp.FOLDER + '/append.txt', 'r') as f:",
                "+                assert f.stat().st_size == 34",
                "+                assert f.readline() == 'first line\\n'",
                "+                assert f.readline() == 'second line\\n'",
                "+                assert f.readline() == 'third line\\n'",
                "         finally:",
                "-            sftp.remove(FOLDER + '/append.txt')",
                "+            sftp.remove(sftp.FOLDER + '/append.txt')",
                "-    def test_putfo_empty_file(self):",
                "+    def test_putfo_empty_file(self, sftp):",
                "         \"\"\"",
                "@@ -722,3 +681,3 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        target = FOLDER + '/empty file.txt'",
                "+        target = sftp.FOLDER + '/empty file.txt'",
                "         stream = StringIO()",
                "@@ -732,3 +691,3 @@ class SFTPTest(unittest.TestCase):",
                "-    def test_N_file_with_percent(self):",
                "+    def test_N_file_with_percent(self, sftp):",
                "         \"\"\"",
                "@@ -737,34 +696,36 @@ class SFTPTest(unittest.TestCase):",
                "         \"\"\"",
                "-        self.assertTrue( paramiko.util.get_logger(\"paramiko\").handlers, \"This unit test requires logging to be enabled\" )",
                "-        f = sftp.open(FOLDER + '/test%file', 'w')",
                "+        # TODO: how best to enable this only for the one test? & how to make it",
                "+        # not log to actual file? lol??",
                "+        paramiko.util.log_to_file('test_sftp.log')",
                "+        f = sftp.open(sftp.FOLDER + '/test%file', 'w')",
                "         try:",
                "-            self.assertEqual(f.stat().st_size, 0)",
                "+            assert f.stat().st_size == 0",
                "         finally:",
                "             f.close()",
                "-            sftp.remove(FOLDER + '/test%file')",
                "+            sftp.remove(sftp.FOLDER + '/test%file')",
                "-    def test_O_non_utf8_data(self):",
                "+    def test_O_non_utf8_data(self, sftp):",
                "         \"\"\"Test write() and read() of non utf8 data\"\"\"",
                "         try:",
                "-            with sftp.open('%s/nonutf8data' % FOLDER, 'w') as f:",
                "+            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'w') as f:",
                "                 f.write(NON_UTF8_DATA)",
                "-            with sftp.open('%s/nonutf8data' % FOLDER, 'r') as f:",
                "+            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'r') as f:",
                "                 data = f.read()",
                "-            self.assertEqual(data, NON_UTF8_DATA)",
                "-            with sftp.open('%s/nonutf8data' % FOLDER, 'wb') as f:",
                "+            assert data == NON_UTF8_DATA",
                "+            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'wb') as f:",
                "                 f.write(NON_UTF8_DATA)",
                "-            with sftp.open('%s/nonutf8data' % FOLDER, 'rb') as f:",
                "+            with sftp.open('%s/nonutf8data' % sftp.FOLDER, 'rb') as f:",
                "                 data = f.read()",
                "-            self.assertEqual(data, NON_UTF8_DATA)",
                "+            assert data == NON_UTF8_DATA",
                "         finally:",
                "-            sftp.remove('%s/nonutf8data' % FOLDER)",
                "+            sftp.remove('%s/nonutf8data' % sftp.FOLDER)",
                "-    def test_sftp_attributes_empty_str(self):",
                "+    def test_sftp_attributes_empty_str(self, sftp):",
                "         sftp_attributes = SFTPAttributes()",
                "-        self.assertEqual(str(sftp_attributes), \"?---------   1 0        0               0 (unknown date) ?\")",
                "+        assert str(sftp_attributes) == \"?---------   1 0        0               0 (unknown date) ?\"",
                "     @needs_builtin('buffer')",
                "-    def test_write_buffer(self):",
                "+    def test_write_buffer(self, sftp):",
                "         \"\"\"Test write() using a buffer instance.\"\"\"",
                "@@ -772,3 +733,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open('%s/write_buffer' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/write_buffer' % sftp.FOLDER, 'wb') as f:",
                "                 for offset in range(0, len(data), 8):",
                "@@ -776,9 +737,9 @@ class SFTPTest(unittest.TestCase):",
                "-            with sftp.open('%s/write_buffer' % FOLDER, 'rb') as f:",
                "-                self.assertEqual(f.read(), data)",
                "+            with sftp.open('%s/write_buffer' % sftp.FOLDER, 'rb') as f:",
                "+                assert f.read() == data",
                "         finally:",
                "-            sftp.remove('%s/write_buffer' % FOLDER)",
                "+            sftp.remove('%s/write_buffer' % sftp.FOLDER)",
                "     @needs_builtin('memoryview')",
                "-    def test_write_memoryview(self):",
                "+    def test_write_memoryview(self, sftp):",
                "         \"\"\"Test write() using a memoryview instance.\"\"\"",
                "@@ -786,3 +747,3 @@ class SFTPTest(unittest.TestCase):",
                "         try:",
                "-            with sftp.open('%s/write_memoryview' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/write_memoryview' % sftp.FOLDER, 'wb') as f:",
                "                 view = memoryview(data)",
                "@@ -791,6 +752,6 @@ class SFTPTest(unittest.TestCase):",
                "-            with sftp.open('%s/write_memoryview' % FOLDER, 'rb') as f:",
                "-                self.assertEqual(f.read(), data)",
                "+            with sftp.open('%s/write_memoryview' % sftp.FOLDER, 'rb') as f:",
                "+                assert f.read() == data",
                "         finally:",
                "-            sftp.remove('%s/write_memoryview' % FOLDER)",
                "+            sftp.remove('%s/write_memoryview' % sftp.FOLDER)",
                "diff --git a/tests/test_sftp_big.py b/tests/test_sftp_big.py",
                "index c58a7912..e5708312 100644",
                "--- a/tests/test_sftp_big.py",
                "+++ b/tests/test_sftp_big.py",
                "@@ -35,5 +35,2 @@ from paramiko.common import o660",
                "-FOLDER = os.environ.get('TEST_FOLDER', 'temp-testing000')",
                "-",
                "-",
                " class TestBigSFTP(object):",
                "@@ -46,5 +43,5 @@ class TestBigSFTP(object):",
                "             for i in range(numfiles):",
                "-                with sftp.open('%s/file%d.txt' % (FOLDER, i), 'w', 1) as f:",
                "+                with sftp.open('%s/file%d.txt' % (sftp.FOLDER, i), 'w', 1) as f:",
                "                     f.write('this is file #%d.\\n' % i)",
                "-                sftp.chmod('%s/file%d.txt' % (FOLDER, i), o660)",
                "+                sftp.chmod('%s/file%d.txt' % (sftp.FOLDER, i), o660)",
                "@@ -55,3 +52,3 @@ class TestBigSFTP(object):",
                "                 r = numlist[random.randint(0, len(numlist) - 1)]",
                "-                with sftp.open('%s/file%d.txt' % (FOLDER, r)) as f:",
                "+                with sftp.open('%s/file%d.txt' % (sftp.FOLDER, r)) as f:",
                "                     assert f.readline() == 'this is file #%d.\\n' % r",
                "@@ -61,3 +58,3 @@ class TestBigSFTP(object):",
                "                 try:",
                "-                    sftp.remove('%s/file%d.txt' % (FOLDER, i))",
                "+                    sftp.remove('%s/file%d.txt' % (sftp.FOLDER, i))",
                "                 except:",
                "@@ -72,3 +69,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w') as f:",
                "                 for n in range(1024):",
                "@@ -79,3 +76,3 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "             end = time.time()",
                "@@ -84,3 +81,3 @@ class TestBigSFTP(object):",
                "             start = time.time()",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r') as f:",
                "                 for n in range(1024):",
                "@@ -92,3 +89,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -101,3 +98,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -109,3 +106,3 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "             end = time.time()",
                "@@ -114,3 +111,3 @@ class TestBigSFTP(object):",
                "             start = time.time()",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -134,3 +131,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -139,3 +136,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -147,3 +144,3 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "@@ -153,3 +150,3 @@ class TestBigSFTP(object):",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+                with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "                     file_size = f.stat().st_size",
                "@@ -170,3 +167,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -175,3 +172,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -183,3 +180,3 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "@@ -189,3 +186,3 @@ class TestBigSFTP(object):",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+                with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "                     base_offset = (512 * 1024) + 17 * random.randint(1000, 2000)",
                "@@ -206,3 +203,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -215,3 +212,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w') as f:",
                "                 f.set_pipelined(True)",
                "@@ -223,9 +220,9 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "             for i in range(10):",
                "-                with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+                with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r') as f:",
                "                     file_size = f.stat().st_size",
                "                     f.prefetch(file_size)",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -239,3 +236,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -247,3 +244,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -255,5 +252,5 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -275,3 +272,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -284,3 +281,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -292,5 +289,5 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'rb') as f:",
                "                 data = list(f.readv([(23 * 1024, 128 * 1024)]))",
                "@@ -302,3 +299,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -310,8 +307,8 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w', 128 * 1024) as f:",
                "                 f.write(mblob)",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "@@ -325,3 +322,3 @@ class TestBigSFTP(object):",
                "         try:",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'w', 128 * 1024) as f:",
                "                 for i in range(32):",
                "@@ -329,3 +326,3 @@ class TestBigSFTP(object):",
                "-            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert sftp.stat('%s/hongry.txt' % sftp.FOLDER).st_size == 1024 * 1024",
                "             assert t.H != t.session_id",
                "@@ -333,3 +330,3 @@ class TestBigSFTP(object):",
                "             # try to read it too.",
                "-            with sftp.open('%s/hongry.txt' % FOLDER, 'r', 128 * 1024) as f:",
                "+            with sftp.open('%s/hongry.txt' % sftp.FOLDER, 'r', 128 * 1024) as f:",
                "                 file_size = f.stat().st_size",
                "@@ -340,3 +337,3 @@ class TestBigSFTP(object):",
                "         finally:",
                "-            sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % sftp.FOLDER)",
                "             t.packetizer.REKEY_BYTES = pow(2, 30)"
            ],
            "changed_files": [
                "tests/conftest.py",
                "tests/test_sftp.py",
                "tests/test_sftp_big.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: server",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4578354019f17fcea05353d7b6d0dcf82a40c9b0",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508793698,
            "hunks": 1,
            "message": "Scope SFTP client/server fixture to be session-level for now Saves at least a few seconds per module this way and not super worried about state bleed so far",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index dbf2cb0f..c58798ca 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -33,3 +33,3 @@ def make_sftp_folder(client):",
                " # NOTE: This is defined here for use by both SFTP (normal & 'big') suites.",
                "-@pytest.fixture",
                "+@pytest.fixture(scope='session')",
                " def sftp():"
            ],
            "changed_files": [
                "tests/conftest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: server",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f83156a804987d5e9be7c040ec87e67820347bd7",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330373,
            "hunks": 1,
            "message": "Cut 2.0.9",
            "diff": [
                "diff --git a/paramiko/_version.py b/paramiko/_version.py",
                "index 93214f6d..bba7685d 100644",
                "--- a/paramiko/_version.py",
                "+++ b/paramiko/_version.py",
                "@@ -1,2 +1,2 @@",
                "-__version_info__ = (2, 0, 8)",
                "+__version_info__ = (2, 0, 9)",
                " __version__ = \".\".join(map(str, __version_info__))"
            ],
            "changed_files": [
                "paramiko/_version.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "40fde0e007cc14c5ec3784da5094db0963977ccb",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537302157,
            "hunks": 2,
            "message": "Try testing against different cryptography.io versions",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 1e9af0a1..4ff73548 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -17,2 +17,14 @@ matrix:",
                "     - python: \"3.7-dev\"",
                "+  # Pull in a few specific combos of older cryptography.io as needed.",
                "+  # NOTE: this should only exist in the 2.0-2.2 branches, as 2.3+ requires",
                "+  # crypto 1.5+.",
                "+  include:",
                "+    - python: 2.7",
                "+      env: \"CRYPTO=1.1\"",
                "+    - python: 2.7",
                "+      env: \"CRYPTO=1.5\"",
                "+    - python: 3.6",
                "+      env: \"CRYPTO=1.1\"",
                "+    - python: 3.6",
                "+      env: \"CRYPTO=1.5\"",
                " install:",
                "@@ -20,2 +32,8 @@ install:",
                "   - pip install pip==9.0.1 setuptools==36.6.0",
                "+  # Grab a specific version of Cryptography if desired. (The 'vanilla' cells",
                "+  # should all end up with latest public Cryptography version.)",
                "+  # Doing this before other installations ensures we don't have to do any",
                "+  # downgrading/overriding.",
                "+  - \"if [[ $CRYPTO == '1.1' ]]; then pip install 'cryptography<1.2'; fi\"",
                "+  - \"if [[ $CRYPTO == '1.5' ]]; then pip install 'cryptography<1.6'; fi\"",
                "   # Self-install for setup.py-driven deps"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c12897ddfbfca0f5dfb371b1bba105585d2ae24a",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537307079,
            "hunks": 2,
            "message": "Pseudo-merge travis-CI changes re #1292 from 2.2 branch",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 1e9af0a1..83b68be0 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -17,2 +17,9 @@ matrix:",
                "     - python: \"3.7-dev\"",
                "+  # Explicitly test against our oldest supported cryptography.io, in addition",
                "+  # to whatever the latest default is.",
                "+  include:",
                "+    - python: 2.7",
                "+      env: \"CRYPTO_BEFORE=1.6\"",
                "+    - python: 3.6",
                "+      env: \"CRYPTO_BEFORE=1.6\"",
                " install:",
                "@@ -20,2 +27,8 @@ install:",
                "   - pip install pip==9.0.1 setuptools==36.6.0",
                "+  # Grab a specific version of Cryptography if desired. Doing this before other",
                "+  # installations ensures we don't have to do any downgrading/overriding.",
                "+  - |",
                "+    if [[ -n \"$CRYPTO_BEFORE\" ]]; then",
                "+      pip install \"cryptography<${CRYPTO_BEFORE}\"",
                "+    fi",
                "   # Self-install for setup.py-driven deps"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1292": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1292",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "35b1f577f12ae9c21ca17f888a41757317bb27ff",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537305039,
            "hunks": 10,
            "message": "Backport support for newer cryptography sign/verify APIs. Implements #1292.",
            "diff": [
                "diff --git a/paramiko/dsskey.py b/paramiko/dsskey.py",
                "index 489e08f0..7139daf5 100644",
                "--- a/paramiko/dsskey.py",
                "+++ b/paramiko/dsskey.py",
                "@@ -120,5 +120,10 @@ class DSSKey(PKey):",
                "         ).private_key(backend=default_backend())",
                "-        signer = key.signer(hashes.SHA1())",
                "-        signer.update(data)",
                "-        r, s = decode_dss_signature(signer.finalize())",
                "+        algo = hashes.SHA1()",
                "+        if hasattr(key, \"sign\"):  # Cryptography 1.5+",
                "+            sig = key.sign(data, algo)",
                "+        else:",
                "+            signer = key.signer(algo)",
                "+            signer.update(data)",
                "+            sig = signer.finalize()",
                "+        r, s = decode_dss_signature(sig)",
                "@@ -158,6 +163,10 @@ class DSSKey(PKey):",
                "         ).public_key(backend=default_backend())",
                "-        verifier = key.verifier(signature, hashes.SHA1())",
                "-        verifier.update(data)",
                "+        algo = hashes.SHA1()",
                "         try:",
                "-            verifier.verify()",
                "+            if hasattr(key, \"verify\"):",
                "+                key.verify(signature, data, algo)",
                "+            else:",
                "+                verifier = key.verifier(signature, algo)",
                "+                verifier.update(data)",
                "+                verifier.verify()",
                "         except InvalidSignature:",
                "diff --git a/paramiko/ecdsakey.py b/paramiko/ecdsakey.py",
                "index b6c00f6f..0f8c8994 100644",
                "--- a/paramiko/ecdsakey.py",
                "+++ b/paramiko/ecdsakey.py",
                "@@ -197,5 +197,8 @@ class ECDSAKey(PKey):",
                "         ecdsa = ec.ECDSA(self.ecdsa_curve.hash_object())",
                "-        signer = self.signing_key.signer(ecdsa)",
                "-        signer.update(data)",
                "-        sig = signer.finalize()",
                "+        if hasattr(self.signing_key, \"sign\"):",
                "+            sig = self.signing_key.sign(data, ecdsa)",
                "+        else:",
                "+            signer = self.signing_key.signer(ecdsa)",
                "+            signer.update(data)",
                "+            sig = signer.finalize()",
                "         r, s = decode_dss_signature(sig)",
                "@@ -214,8 +217,10 @@ class ECDSAKey(PKey):",
                "-        verifier = self.verifying_key.verifier(",
                "-            signature, ec.ECDSA(self.ecdsa_curve.hash_object())",
                "-        )",
                "-        verifier.update(data)",
                "+        algo = ec.ECDSA(self.ecdsa_curve.hash_object())",
                "         try:",
                "-            verifier.verify()",
                "+            if hasattr(self.verifying_key, \"verify\"):",
                "+                self.verifying_key.verify(signature, data, algo)",
                "+            else:",
                "+                verifier = self.verifying_key.verifier(signature, algo)",
                "+                verifier.update(data)",
                "+                verifier.verify()",
                "         except InvalidSignature:",
                "diff --git a/paramiko/rsakey.py b/paramiko/rsakey.py",
                "index 7e8f101c..31bb4716 100644",
                "--- a/paramiko/rsakey.py",
                "+++ b/paramiko/rsakey.py",
                "@@ -114,7 +114,9 @@ class RSAKey(PKey):",
                "     def sign_ssh_data(self, data):",
                "-        signer = self.key.signer(",
                "-            padding=padding.PKCS1v15(), algorithm=hashes.SHA1()",
                "-        )",
                "-        signer.update(data)",
                "-        sig = signer.finalize()",
                "+        kwargs = dict(padding=padding.PKCS1v15(), algorithm=hashes.SHA1())",
                "+        if hasattr(self.key, \"sign\"):",
                "+            sig = self.key.sign(data, **kwargs)",
                "+        else:",
                "+            signer = self.key.signer(**kwargs)",
                "+            signer.update(data)",
                "+            sig = signer.finalize()",
                "@@ -132,3 +134,3 @@ class RSAKey(PKey):",
                "-        verifier = key.verifier(",
                "+        kwargs = dict(",
                "             signature=msg.get_binary(),",
                "@@ -137,5 +139,14 @@ class RSAKey(PKey):",
                "         )",
                "-        verifier.update(data)",
                "         try:",
                "-            verifier.verify()",
                "+            if hasattr(key, \"verify\"):",
                "+                key.verify(",
                "+                    kwargs[\"signature\"],",
                "+                    data,",
                "+                    kwargs[\"padding\"],",
                "+                    kwargs[\"algorithm\"],",
                "+                )",
                "+            else:",
                "+                verifier = key.verifier(**kwargs)",
                "+                verifier.update(data)",
                "+                verifier.verify()",
                "         except InvalidSignature:"
            ],
            "changed_files": [
                "paramiko/dsskey.py",
                "paramiko/ecdsakey.py",
                "paramiko/rsakey.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1292": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1292",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e01e96bab13613352da8429b70de88b7165ec8ab",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326040,
            "hunks": 1,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [
                "diff --cc dev-requirements.txt",
                "index 7f2ab0b9,c192f144..8814627f",
                "--- a/dev-requirements.txt",
                "+++ b/dev-requirements.txt",
                "@@@ -5,5 -5,4 +5,6 @@@ invocations>=1.2.0,<2.",
                "  pytest>=3.2,<3.3",
                " -pytest-relaxed==1.1.2",
                " +pytest-relaxed==1.1.4",
                " +# pytest-xdist for test dir watching and the inv guard task",
                " +pytest-xdist>=1.22,<2.0",
                "+ mock==2.0.0",
                "  # Linting!"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b4bd03f601305f825282a727c5f5d9c0b36dd94f",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508809420,
            "hunks": 5,
            "message": "Better test dir cleanup",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index adce2a9f..4345d86c 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -11,2 +11 @@ _build",
                " .cache",
                "-paramiko-test-target",
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index f77c929f..ac83eacf 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -27,3 +27,3 @@ logging.basicConfig(",
                "-def make_sftp_folder(client):",
                "+def make_sftp_folder():",
                "     \"\"\"",
                "@@ -45,4 +45,3 @@ def make_sftp_folder(client):",
                "     # fixtures only ever run with a locally scoped stub test server.",
                "-    if os.path.exists(path):",
                "-        shutil.rmtree(path)",
                "+    shutil.rmtree(path, ignore_errors=True)",
                "     # Then create it anew, again locally, for the same reason.",
                "@@ -96,10 +95,6 @@ def sftp(sftp_server):",
                "     # much?",
                "-    client.FOLDER = make_sftp_folder(client)",
                "+    client.FOLDER = make_sftp_folder()",
                "     # Yield client to caller",
                "     yield client",
                "-    # Clean up",
                "-    # TODO: many SFTP tests like to close the client; to match old test suite",
                "-    # behavior we'd need to recreate the entire client? Possibly better to just",
                "-    # make the \"it runs locally, dumbass\" explicit & then just use stdlib to",
                "-    # clean up?",
                "-    #client.rmdir(client.FOLDER)",
                "+    # Clean up - as in make_sftp_folder, we assume local-only exec for now.",
                "+    shutil.rmtree(client.FOLDER, ignore_errors=True)"
            ],
            "changed_files": [
                ".gitignore",
                "tests/conftest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4308ac00911754f4944b14efbfe4b677a7e92900",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537327918,
            "hunks": 0,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "edf9520939dbe886f9174f2e9748cd44892fa2c8",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326130,
            "hunks": 0,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "47ba15f8c20819ee93f79cbd9e718ba93b6102bf",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1526395912,
            "hunks": 2,
            "message": "Pass through index option for release task",
            "diff": [
                "diff --git a/tasks.py b/tasks.py",
                "index 737d7a6c..ef90e88c 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -82,3 +82,3 @@ def coverage(ctx, opts=\"\"):",
                " @task",
                "-def release(ctx, sdist=True, wheel=True, sign=True, dry_run=False):",
                "+def release(ctx, sdist=True, wheel=True, sign=True, dry_run=False, index=None):",
                "     \"\"\"",
                "@@ -94,3 +94,5 @@ def release(ctx, sdist=True, wheel=True, sign=True, dry_run=False):",
                "     # Publish",
                "-    publish(ctx, sdist=sdist, wheel=wheel, sign=sign, dry_run=dry_run)",
                "+    publish(",
                "+        ctx, sdist=sdist, wheel=wheel, sign=sign, dry_run=dry_run, index=index,",
                "+    )",
                "     # Remind"
            ],
            "changed_files": [
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c7d13cdfa1b9f3f71b2643aff0f5c2ab45e06779",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330402,
            "hunks": 0,
            "message": "Merge branch '2.0' into 2.1",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "dc7f7c5bade264f74aa2ee5ce21dde2091cc2022",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330715,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "43ffb520dfcf5428ae37c70931f00d7b1b9e8c1e",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326130,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d8fa8d92b98b357d0d7bb54c6b7770cbb297ec3c",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508808900,
            "hunks": 2,
            "message": "Use pytest-timeout, configured via pytest.ini",
            "diff": [
                "diff --git a/pytest.ini b/pytest.ini",
                "new file mode 100644",
                "index 00000000..af021870",
                "--- /dev/null",
                "+++ b/pytest.ini",
                "@@ -0,0 +1,7 @@",
                "+[pytest]",
                "+# 10 seconds is more time than nearly any test ought to take and almost surely",
                "+# indicates a full-on deadlock; but let's make it 30s just to be sure.",
                "+timeout = 30",
                "+# Sadly the signal method of pytest-timeout does not appear to help, at least",
                "+# for the SFTP hangs encountered developing issue #1100.",
                "+timeout_method = thread",
                "diff --git a/tasks.py b/tasks.py",
                "index d232fa9b..a9c94ec3 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -29,2 +29,3 @@ def test(ctx, verbose=True, coverage=False, opts=\"\"):",
                "     cmd = \"{} {}\".format(runner, opts)",
                "+    # NOTE: we have a pytest.ini and tend to use that over PYTEST_ADDOPTS.",
                "     ctx.run(cmd, pty=True, env=env, replace_env=True)"
            ],
            "changed_files": [
                "pytest.ini",
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "21b84a794acf3acefdcbf9db9762b162ee02bd25",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537307589,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0871b938a374b5af0ccb1260fce3af3aa4920320",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508957046,
            "hunks": 1,
            "message": "Make sure to use the coverage task on travis so it gets slow tests too",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 30ddbff0..05876671 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -28,4 +28,4 @@ install:",
                " script:",
                "-  # Main tests, w/ coverage!",
                "-  - inv test --coverage",
                "+  # All (including slow) tests, w/ coverage!",
                "+  - inv coverage",
                "   # Ensure documentation builds, both sites, maxxed nitpicking"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "73d4ca047a425065b1a20eaa5a3bf0b2f613c5d6",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1526479087,
            "hunks": 1,
            "message": "Ignore E721 because it isn't tagged in 2.6.2, but is in 2.4.0",
            "diff": [
                "diff --git a/setup.cfg b/setup.cfg",
                "index 245b77f2..a24844d0 100644",
                "--- a/setup.cfg",
                "+++ b/setup.cfg",
                "@@ -11,3 +11,3 @@ omit = paramiko/_winapi.py",
                " exclude = sites,.git,build,dist,demos,tests",
                "-ignore = E124,E125,E128,E261,E301,E302,E303,E402",
                "+ignore = E124,E125,E128,E261,E301,E302,E303,E402,E721",
                " max-line-length = 79"
            ],
            "changed_files": [
                "setup.cfg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d4306de9c70be68103a5077861480367880ae7c0",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330619,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e282595411fe16dd570446d7217ef381188aa485",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508807416,
            "hunks": 3,
            "message": "Tidy up tempdir creation for now. Fuckit",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index ea10d612..a9f09fd8 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -2,2 +2,3 @@ import logging",
                " import os",
                "+import shutil",
                " import threading",
                "@@ -28,13 +29,23 @@ def make_sftp_folder(client):",
                "     \"\"\"",
                "-    Create some non-existing, new folder on the given SFTP connection.",
                "+    Ensure expected target temp folder exists on the remote end.",
                "+",
                "+    Will clean it out if it already exists.",
                "     \"\"\"",
                "-    path = os.environ.get('TEST_FOLDER', 'temp-testing000')",
                "-    # TODO: this is disgusting and old, replace with something smarter/simpler",
                "-    for i in range(1000):",
                "-        path = path[:-3] + '%03d' % i",
                "-        try:",
                "-            client.mkdir(path)",
                "-            return path",
                "-        except (IOError, OSError):",
                "-            pass",
                "+    # TODO: go back to using the sftp functionality itself for folder setup so",
                "+    # we can test against live SFTP servers again someday. (Not clear if anyone",
                "+    # is/was using the old capability for such, though...)",
                "+    # TODO: something that would play nicer with concurrent testing (but",
                "+    # probably e.g. using thread ID or UUIDs or something; not the \"count up",
                "+    # until you find one not used!\" crap from before...)",
                "+    # TODO: if we want to lock ourselves even harder into localhost-only",
                "+    # testing (probably not?) could use tempdir modules for this for improved",
                "+    # safety. Then again...why would someone have such a folder???",
                "+    path = os.environ.get('TEST_FOLDER', 'paramiko-test-target')",
                "+    # Forcibly nuke this directory locally, since at the moment, the below",
                "+    # fixtures only ever run with a locally scoped stub test server.",
                "+    if os.path.exists(path):",
                "+        shutil.rmtree(path)",
                "+    # Then create it anew, again locally, for the same reason.",
                "+    os.mkdir(path)",
                "+    return path"
            ],
            "changed_files": [
                "tests/conftest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "89d5da0d5d5785c83e25badbdea3972289b853ec",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508807441,
            "hunks": 4,
            "message": "Naturally, more tests I found that do not pass/fail correctly. Skip for now",
            "diff": [
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index 57aa8f2d..ac0d17fb 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -673,2 +673,7 @@ class TestSFTP(object):",
                "+    # TODO: this test doesn't actually fail if the regression (removing '%'",
                "+    # expansion to '%%' within sftp.py's def _log()) is removed - stacktraces",
                "+    # appear but they're clearly emitted from subthreads that have no error",
                "+    # handling. No point running it until that is fixed somehow.",
                "+    @pytest.mark.skip(\"Doesn't prove anything right now\")",
                "     def test_N_file_with_percent(self, sftp):",
                "@@ -678,5 +683,2 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        # TODO: how best to enable this only for the one test? & how to make it",
                "-        # not log to actual file? lol??",
                "-        paramiko.util.log_to_file('test_sftp.log')",
                "         f = sftp.open(sftp.FOLDER + '/test%file', 'w')",
                "@@ -688,3 +690,2 @@ class TestSFTP(object):",
                "-",
                "     def test_O_non_utf8_data(self, sftp):",
                "@@ -738,9 +739 @@ class TestSFTP(object):",
                "             sftp.remove('%s/write_memoryview' % sftp.FOLDER)",
                "-",
                "-",
                "-if __name__ == '__main__':",
                "-    SFTPTest.init_loopback()",
                "-    # logging is required by test_N_file_with_percent",
                "-    paramiko.util.log_to_file('test_sftp.log')",
                "-    from unittest import main",
                "-    main()"
            ],
            "changed_files": [
                "tests/test_sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0b2e154b02befa1cd96ebaf39ec597855cf2f8fb",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537306604,
            "hunks": 0,
            "message": "Merge branch 'crypto-1.5-agnostisicm' into 2.0",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "78b3520e9b78b0cefab37ba96bef00af6b996c4b",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1526504620,
            "hunks": 1,
            "message": "Modern pypy no longer seems to sporadically fail?",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index ac13aff6..c4ccb74d 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -17,3 +17,2 @@ matrix:",
                "     - python: \"3.7-dev\"",
                "-    - python: \"pypy-5.6.0\"",
                " install:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8346db322861778f2f50ecdc16f4c444eee53a8b",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537325969,
            "hunks": 0,
            "message": "Merge branch '2.1' into 2.2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3ae4971b5f85144ef5899c3d1fb0a4c1b350ee3e",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537325968,
            "hunks": 0,
            "message": "Merge branch '2.0' into 2.1",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "915b4551fe8b7c422e5fba1166ac8c8a4cc5b353",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537237873,
            "hunks": 0,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "12b23349d585559e199a8c431e4905f5fd7ecd29",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537327934,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "10900a91cf91b10859f6060a1897a697104e6877",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508799835,
            "hunks": 2,
            "message": "Tweak test-level logging format to include timestamps",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index c58798ca..7d85fa99 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -1 +1,2 @@",
                "+import logging",
                " import os",
                "@@ -15,2 +16,12 @@ from .util import _support",
                "+# Perform logging by default; pytest will capture and thus hide it normally,",
                "+# presenting it on error/failure.",
                "+# Also make sure to set up timestamping for more sanity when debugging.",
                "+logging.basicConfig(",
                "+    level=logging.DEBUG,",
                "+    format=\"[%(relativeCreated)s]\\t%(levelname)s:%(name)s:%(message)s\",",
                "+    datefmt=\"%H:%M:%S\",",
                "+)",
                "+",
                "+",
                " def make_sftp_folder(client):"
            ],
            "changed_files": [
                "tests/conftest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e6f98425994536ea82b558d0aea19562f68b5437",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326122,
            "hunks": 2,
            "message": "Formatting",
            "diff": [
                "diff --git a/paramiko/transport.py b/paramiko/transport.py",
                "index d8cb3434..82914559 100644",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@ -1967,8 +1967,6 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                         name = MSG_NAMES[ptype]",
                "-                        self._log(",
                "-                            WARNING,",
                "-                            \"Oops, unhandled type {} ({!r})\".format(",
                "-                                ptype, name",
                "-                            ),",
                "+                        warning = \"Oops, unhandled type {} ({!r})\".format(",
                "+                            ptype, name",
                "                         )",
                "+                        self._log(WARNING, warning)",
                "                         if ptype != MSG_UNIMPLEMENTED:"
            ],
            "changed_files": [
                "paramiko/transport.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f861ef079f5078c356d40421d45c8be170ef2c7a",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537327890,
            "hunks": 0,
            "message": "Merge branch '2.0' into 2.1",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "255568dde3f3783994a0c606ddfde0448ad5954d",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330715,
            "hunks": 0,
            "message": "Merge branch '2.0' into 2.1",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f4664257250371bba7cf0c330a43b95570323bef",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537238408,
            "hunks": 1,
            "message": "Minor cleanup",
            "diff": [
                "diff --git a/tasks.py b/tasks.py",
                "index 50b75762..3d2fdf65 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -42,3 +42,3 @@ def test(",
                "         opts += \" --color=yes\"",
                "-    opts += \" --capture={0}\".format(capture)",
                "+    opts += \" --capture={}\".format(capture)",
                "     if \"-m\" not in opts and not include_slow:"
            ],
            "changed_files": [
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3bba19c952d60272c037ad4ac7e1559f748eafe8",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508807424,
            "hunks": 2,
            "message": "Was missing another needs_gssapi",
            "diff": [
                "diff --git a/tests/test_kex_gss.py b/tests/test_kex_gss.py",
                "index 3bf788da..0bd9054b 100644",
                "--- a/tests/test_kex_gss.py",
                "+++ b/tests/test_kex_gss.py",
                "@@ -33,2 +33,4 @@ import paramiko",
                "+from .util import needs_gssapi",
                "+",
                "@@ -59,2 +61,3 @@ class NullServer (paramiko.ServerInterface):",
                "+@needs_gssapi",
                " class GSSKexTest(unittest.TestCase):"
            ],
            "changed_files": [
                "tests/test_kex_gss.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "37aa5bce89db08769dc733ac46c49b8172533449",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330480,
            "hunks": 0,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "329aaf67b0d5391684dc0d32d76112a8d9dabae5",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330715,
            "hunks": 0,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "238a862ccd5839c7537e49e4e5595239f7455382",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537306458,
            "hunks": 1,
            "message": "Missing verbose/color for 2.6/3.3 backported pytest setup Should be hitting all tests, including slow tests, by default still tho",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 1e9af0a1..33563d1d 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -32,3 +32,3 @@ script: |",
                "     flake8",
                "-    coverage run --source=paramiko -m pytest",
                "+    coverage run --source=paramiko -m pytest --verbose --color=yes",
                "   else"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0a94473839edc226f6a7e88e6e24556b480f12d9",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537307589,
            "hunks": 0,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ef900b70c136cf8a25c2105aba09a5d79c4686cb",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326130,
            "hunks": 0,
            "message": "Merge branch '2.0' into 2.1",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1157252f8c4e94d5aebad02a620c6abf983055e1",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537306609,
            "hunks": 0,
            "message": "Merge branch '2.0' into 2.1",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f17f8954e844c03fda6f785ee02ec36ed465bc05",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537306614,
            "hunks": 0,
            "message": "Merge branch '2.1' into 2.2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0b807e97f2d90c2ab23732a91863c5814811452f",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537306911,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6a3c145814d9a45e4865441de46d29ae9273334c",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537325969,
            "hunks": 0,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "62f45c4f95c5d6d2c7a4985ededbf514dbfd355f",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330525,
            "hunks": 0,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "025a250d38b0046e06dfacf437a09276a84e2c59",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537223627,
            "hunks": 1,
            "message": "Partial cherry pick of 57201d2de9cd4080480cfed2fe2572fa1c908acb Just so the first blackening of 2.0+ is already consistent with latest 2.4+...hopefully",
            "diff": [
                "diff --git a/tasks.py b/tasks.py",
                "index 33092d77..795a9c99 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -145,3 +145,4 @@ ns.configure(",
                "             ),",
                "-        }",
                "+        },",
                "+        \"travis\": {\"black\": {\"version\": \"18.6b4\"}},",
                "     }"
            ],
            "changed_files": [
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a20936e18c0336476f8f4976257699a52e9a996e",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1481383882,
            "hunks": 4,
            "message": "Test the new and old Python GSSAPI packages",
            "diff": [
                "diff --git a/tests/test_gssapi.py b/tests/test_gssapi.py",
                "index 3e8c39e8..04304c0f 100644",
                "--- a/tests/test_gssapi.py",
                "+++ b/tests/test_gssapi.py",
                "@@ -54,5 +54,8 @@ class GSSAPITest(unittest.TestCase):",
                "         \"\"\"",
                "-        _API = \"MIT\"",
                "         try:",
                "             import gssapi",
                "+            if hasattr(gssapi, '__title__') and gssapi.__title__ == 'python-gssapi':",
                "+                _API = \"PYTHON-GSSAPI-OLD\"",
                "+            else:",
                "+                _API = \"PYTHON-GSSAPI-NEW\"",
                "         except ImportError:",
                "@@ -67,3 +70,3 @@ class GSSAPITest(unittest.TestCase):",
                "-        if _API == \"MIT\":",
                "+        if _API == \"PYTHON-GSSAPI-OLD\":",
                "             if self.server_mode:",
                "@@ -115,2 +118,44 @@ class GSSAPITest(unittest.TestCase):",
                "                 self.assertEquals(0, status)",
                "+        elif _API == \"PYTHON-GSSAPI-NEW\":",
                "+            if server_mode:",
                "+                gss_flags = (gssapi.RequirementFlag.protection_ready,",
                "+                             gssapi.RequirementFlag.integrity,",
                "+                             gssapi.RequirementFlag.mutual_authentication,",
                "+                             gssapi.RequirementFlag.delegate_to_peer)",
                "+            else:",
                "+                gss_flags = (gssapi.RequirementFlag.protection_ready,",
                "+                             gssapi.RequirementFlag.integrity,",
                "+                             gssapi.RequirementFlag.delegate_to_peer)",
                "+            # Initialize a GSS-API context.",
                "+            krb5_oid = gssapi.MechType.kerberos",
                "+            target_name = gssapi.Name(\"host@\" + targ_name,",
                "+                                      name_type=gssapi.NameType.hostbased_service)",
                "+            gss_ctxt = gssapi.SecurityContext(name=target_name,",
                "+                                              flags=gss_flags,",
                "+                                              mech=krb5_oid,",
                "+                                              usage='initiate')",
                "+            if server_mode:",
                "+                c_token = gss_ctxt.step(c_token)",
                "+                gss_ctxt_status = gss_ctxt.complete",
                "+                self.assertEquals(False, gss_ctxt_status)",
                "+                # Accept a GSS-API context.",
                "+                gss_srv_ctxt = gssapi.SecurityContext(usage='accept')",
                "+                s_token = gss_srv_ctxt.step(c_token)",
                "+                gss_ctxt_status = gss_srv_ctxt.complete",
                "+                self.assertNotEquals(None, s_token)",
                "+                self.assertEquals(True, gss_ctxt_status)",
                "+                # Establish the client context",
                "+                c_token = gss_ctxt.step(s_token)",
                "+                self.assertEquals(None, c_token)",
                "+            else:",
                "+                while not gss_ctxt.complete:",
                "+                    c_token = gss_ctxt.step(c_token)",
                "+                self.assertNotEquals(None, c_token)",
                "+            # Build MIC",
                "+            mic_token = gss_ctxt.get_signature(mic_msg)",
                "+",
                "+            if server_mode:",
                "+                # Check MIC",
                "+                status = gss_srv_ctxt.verify_signature(mic_msg, mic_token)",
                "+                self.assertEquals(0, status)",
                "         else:"
            ],
            "changed_files": [
                "tests/test_gssapi.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "aab6a1186cbfb946ebdfdfdb8fcbe20ff65ea809",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508801859,
            "hunks": 17,
            "message": "Replace rest of unittest-style self-asserts in sftp tests",
            "diff": [
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index c1d4cfe0..57aa8f2d 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -167,7 +167,4 @@ class TestSFTP(object):",
                "             sftp.rename(sftp.FOLDER + '/first.txt', sftp.FOLDER + '/second.txt')",
                "-            try:",
                "+            with pytest.raises(IOError, match='No such file'):",
                "                 sftp.open(sftp.FOLDER + '/first.txt', 'r')",
                "-                self.assertTrue(False, 'no exception on reading nonexistent file')",
                "-            except IOError:",
                "-                pass",
                "             with sftp.open(sftp.FOLDER + '/second.txt', 'r') as f:",
                "@@ -176,2 +173,4 @@ class TestSFTP(object):",
                "         finally:",
                "+            # TODO: this is gross, make some sort of 'remove if possible' / 'rm",
                "+            # -f' a-like, jeez",
                "             try:",
                "@@ -194,8 +193,5 @@ class TestSFTP(object):",
                "         sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "-        try:",
                "+        # shouldn't be able to create that file if dir removed",
                "+        with pytest.raises(IOError, match=\"No such file\"):",
                "             sftp.open(sftp.FOLDER + '/subfolder/test')",
                "-            # shouldn't be able to create that file",
                "-            self.assertTrue(False, 'no exception at dummy file creation')",
                "-        except IOError:",
                "-            pass",
                "@@ -213,6 +209,6 @@ class TestSFTP(object):",
                "             assert len(x) == 3",
                "-            self.assertTrue('duck.txt' in x)",
                "-            self.assertTrue('fish.txt' in x)",
                "-            self.assertTrue('tertiary.py' in x)",
                "-            self.assertTrue('random' not in x)",
                "+            assert 'duck.txt' in x",
                "+            assert 'fish.txt' in x",
                "+            assert 'tertiary.py' in x",
                "+            assert 'random' not in x",
                "         finally:",
                "@@ -233,6 +229,6 @@ class TestSFTP(object):",
                "             assert len(x) == 3",
                "-            self.assertTrue('duck.txt' in x)",
                "-            self.assertTrue('fish.txt' in x)",
                "-            self.assertTrue('tertiary.py' in x)",
                "-            self.assertTrue('random' not in x)",
                "+            assert 'duck.txt' in x",
                "+            assert 'fish.txt' in x",
                "+            assert 'tertiary.py' in x",
                "+            assert 'random' not in x",
                "         finally:",
                "@@ -338,3 +334,3 @@ class TestSFTP(object):",
                "                     loc = f.tell()",
                "-                self.assertTrue(f.seekable())",
                "+                assert f.seekable()",
                "                 f.seek(pos_list[6], f.SEEK_SET)",
                "@@ -394,3 +390,3 @@ class TestSFTP(object):",
                "             # length may be longer than we expect:",
                "-            self.assertTrue(sftp.lstat(sftp.FOLDER + '/link2.txt').st_size >= len(abs_path))",
                "+            assert sftp.lstat(sftp.FOLDER + '/link2.txt').st_size >= len(abs_path)",
                "             assert sftp.stat(sftp.FOLDER + '/link2.txt').st_size == 9",
                "@@ -437,5 +433,5 @@ class TestSFTP(object):",
                "         pwd = sftp.normalize('.')",
                "-        self.assertTrue(len(pwd) > 0)",
                "+        assert len(pwd) > 0",
                "         f = sftp.normalize('./' + sftp.FOLDER)",
                "-        self.assertTrue(len(f) > 0)",
                "+        assert len(f) > 0",
                "         assert os.path.join(pwd, sftp.FOLDER) == f",
                "@@ -446,20 +442,8 @@ class TestSFTP(object):",
                "         \"\"\"",
                "-        try:",
                "-            sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "-        except:",
                "-            self.assertTrue(False, 'exception creating subfolder')",
                "-        try:",
                "+        sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "+        with pytest.raises(IOError): # generic msg only",
                "             sftp.mkdir(sftp.FOLDER + '/subfolder')",
                "-            self.assertTrue(False, 'no exception overwriting subfolder')",
                "-        except IOError:",
                "-            pass",
                "-        try:",
                "-            sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "-        except:",
                "-            self.assertTrue(False, 'exception removing subfolder')",
                "-        try:",
                "+        sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "+        with pytest.raises(IOError, match=\"No such file\"):",
                "             sftp.rmdir(sftp.FOLDER + '/subfolder')",
                "-            self.assertTrue(False, 'no exception removing nonexistent subfolder')",
                "-        except IOError:",
                "-            pass",
                "@@ -551,4 +535,3 @@ class TestSFTP(object):",
                "                 sum = f.check('md5', 0, 0, 510)",
                "-                self.assertEqual('EB3B45B8CD55A0707D99B177544A319F373183D241432BB2157AB9E46358C4AC90370B5CADE5D90336FC1716F90B36D6',",
                "-                                 u(hexlify(sum)).upper())",
                "+                assert u(hexlify(sum)).upper() == 'EB3B45B8CD55A0707D99B177544A319F373183D241432BB2157AB9E46358C4AC90370B5CADE5D90336FC1716F90B36D6' # noqa",
                "         finally:",
                "@@ -686,3 +669,3 @@ class TestSFTP(object):",
                "             # the returned attributes should not be null",
                "-            self.assertNotEqual(attrs, None)",
                "+            assert attrs is not None",
                "         finally:",
                "@@ -690,3 +673,2 @@ class TestSFTP(object):",
                "-",
                "     def test_N_file_with_percent(self, sftp):"
            ],
            "changed_files": [
                "tests/test_sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "467fecb9d4e564a3888285388d4c7482adeb851d",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508793070,
            "hunks": 55,
            "message": "Get big sftp tests passing w/ the sftp client + folder crap being a fixture",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "new file mode 100644",
                "index 00000000..dbf2cb0f",
                "--- /dev/null",
                "+++ b/tests/conftest.py",
                "@@ -0,0 +1,64 @@",
                "+import os",
                "+import threading",
                "+",
                "+import pytest",
                "+from paramiko import RSAKey, SFTPServer, SFTP, Transport",
                "+",
                "+from .loop import LoopSocket",
                "+from .stub_sftp import StubServer, StubSFTPServer",
                "+from .util import _support",
                "+",
                "+",
                "+# TODO: not a huge fan of conftest.py files, see if we can move these somewhere",
                "+# 'nicer'.",
                "+",
                "+",
                "+def make_sftp_folder(client):",
                "+    \"\"\"",
                "+    Create some non-existing, new folder on the given SFTP connection.",
                "+    \"\"\"",
                "+    path = os.environ.get('TEST_FOLDER', 'temp-testing000')",
                "+    # TODO: this is disgusting and old, replace with something smarter/simpler",
                "+    for i in range(1000):",
                "+        path = path[:-3] + '%03d' % i",
                "+        try:",
                "+            client.mkdir(path)",
                "+            return path",
                "+        except (IOError, OSError):",
                "+            pass",
                "+",
                "+",
                "+# TODO: apply at module or session level",
                "+# TODO: roll in SFTP folder setup and teardown?",
                "+# NOTE: This is defined here for use by both SFTP (normal & 'big') suites.",
                "+@pytest.fixture",
                "+def sftp():",
                "+    \"\"\"",
                "+    Set up an in-memory SFTP server, returning its corresponding SFTPClient.",
                "+    \"\"\"",
                "+    # Sockets & transports",
                "+    socks = LoopSocket()",
                "+    sockc = LoopSocket()",
                "+    sockc.link(socks)",
                "+    tc = Transport(sockc)",
                "+    ts = Transport(socks)",
                "+    # Auth",
                "+    host_key = RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "+    ts.add_server_key(host_key)",
                "+    # Server & client setup",
                "+    event = threading.Event()",
                "+    server = StubServer()",
                "+    ts.set_subsystem_handler('sftp', SFTPServer, StubSFTPServer)",
                "+    ts.start_server(event, server)",
                "+    tc.connect(username='slowdive', password='pygmalion')",
                "+    event.wait(1.0)",
                "+    client = SFTP.from_transport(tc)",
                "+    # Work in 'remote' folder setup (as it wants to use the client)",
                "+    # TODO: how cleanest to make this available to tests? Doing it this way is",
                "+    # marginally less bad than the previous 'global'-using setup, but not by",
                "+    # much?",
                "+    client.FOLDER = make_sftp_folder(client)",
                "+    # Yield client to caller",
                "+    yield client",
                "+    # Clean up",
                "+    client.rmdir(client.FOLDER)",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index 432d3e40..a38c2e7d 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -34,2 +34,4 @@ from tempfile import mkstemp",
                "+import pytest",
                "+",
                " import paramiko",
                "@@ -42,3 +44,2 @@ from .util import needs_builtin",
                " from .stub_sftp import StubServer, StubSFTPServer",
                "-from .loop import LoopSocket",
                " from .util import _support",
                "@@ -96,33 +97,3 @@ utf8_folder = b'/\\xc3\\xbcnic\\xc3\\xb8\\x64\\x65'",
                "-# TODO: turn into a pytest fixture; consider making it module or session-global",
                "-# to mimic old behavior (though that still feels unclean to me...)",
                "-def make_loopback_sftp():",
                "-    \"\"\"",
                "-    Set up an in-memory SFTP server.",
                "-",
                "-    :returns:",
                "-        A 2-tuple of the resulting SFTPClient (for tests that just care about a",
                "-        'default' client) and Transport (for testing instantiation _of_",
                "-        SFTPClient itself, which can take an existing transport object.)",
                "-    \"\"\"",
                "-    socks = LoopSocket()",
                "-    sockc = LoopSocket()",
                "-    sockc.link(socks)",
                "-    tc = paramiko.Transport(sockc)",
                "-    ts = paramiko.Transport(socks)",
                "-",
                "-    host_key = paramiko.RSAKey.from_private_key_file(_support('test_rsa.key'))",
                "-    ts.add_server_key(host_key)",
                "-    event = threading.Event()",
                "-    server = StubServer()",
                "-    ts.set_subsystem_handler('sftp', paramiko.SFTPServer, StubSFTPServer)",
                "-    ts.start_server(event, server)",
                "-    tc.connect(username='slowdive', password='pygmalion')",
                "-    event.wait(1.0)",
                "-",
                "-    return paramiko.SFTP.from_transport(tc), tc",
                "-",
                "-",
                "-class SFTPTest (unittest.TestCase):",
                "-",
                "+class SFTPTest(unittest.TestCase):",
                "     @staticmethod",
                "diff --git a/tests/test_sftp_big.py b/tests/test_sftp_big.py",
                "index ef12b05c..c58a7912 100644",
                "--- a/tests/test_sftp_big.py",
                "+++ b/tests/test_sftp_big.py",
                "@@ -34,4 +34,2 @@ from paramiko.common import o660",
                "-from .test_sftp import make_loopback_sftp",
                "-",
                "@@ -40,20 +38,4 @@ FOLDER = os.environ.get('TEST_FOLDER', 'temp-testing000')",
                "-class BigSFTPTest (unittest.TestCase):",
                "-",
                "-    def setUp(self):",
                "-        global FOLDER",
                "-        self.sftp, _ = make_loopback_sftp()",
                "-        # TODO: same TODOs as in test_sftp.py re: not doing this awful crap",
                "-        for i in range(1000):",
                "-            FOLDER = FOLDER[:-3] + '%03d' % i",
                "-            try:",
                "-                self.sftp.mkdir(FOLDER)",
                "-                break",
                "-            except (IOError, OSError):",
                "-                pass",
                "-",
                "-    def tearDown(self):",
                "-        self.sftp.rmdir(FOLDER)",
                "-",
                "-    def test_1_lots_of_files(self):",
                "+class TestBigSFTP(object):",
                "+    def test_1_lots_of_files(self, sftp):",
                "         \"\"\"",
                "@@ -64,5 +46,5 @@ class BigSFTPTest (unittest.TestCase):",
                "             for i in range(numfiles):",
                "-                with self.sftp.open('%s/file%d.txt' % (FOLDER, i), 'w', 1) as f:",
                "+                with sftp.open('%s/file%d.txt' % (FOLDER, i), 'w', 1) as f:",
                "                     f.write('this is file #%d.\\n' % i)",
                "-                self.sftp.chmod('%s/file%d.txt' % (FOLDER, i), o660)",
                "+                sftp.chmod('%s/file%d.txt' % (FOLDER, i), o660)",
                "@@ -73,4 +55,4 @@ class BigSFTPTest (unittest.TestCase):",
                "                 r = numlist[random.randint(0, len(numlist) - 1)]",
                "-                with self.sftp.open('%s/file%d.txt' % (FOLDER, r)) as f:",
                "-                    self.assertEqual(f.readline(), 'this is file #%d.\\n' % r)",
                "+                with sftp.open('%s/file%d.txt' % (FOLDER, r)) as f:",
                "+                    assert f.readline() == 'this is file #%d.\\n' % r",
                "                 numlist.remove(r)",
                "@@ -79,3 +61,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                 try:",
                "-                    self.sftp.remove('%s/file%d.txt' % (FOLDER, i))",
                "+                    sftp.remove('%s/file%d.txt' % (FOLDER, i))",
                "                 except:",
                "@@ -83,3 +65,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-    def test_2_big_file(self):",
                "+    def test_2_big_file(self, sftp):",
                "         \"\"\"",
                "@@ -90,3 +72,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "                 for n in range(1024):",
                "@@ -97,3 +79,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "             end = time.time()",
                "@@ -102,6 +84,6 @@ class BigSFTPTest (unittest.TestCase):",
                "             start = time.time()",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "                 for n in range(1024):",
                "                     data = f.read(1024)",
                "-                    self.assertEqual(data, kblob)",
                "+                    assert data == kblob",
                "@@ -110,5 +92,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_3_big_file_pipelined(self):",
                "+    def test_3_big_file_pipelined(self, sftp):",
                "         \"\"\"",
                "@@ -119,3 +101,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -127,3 +109,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "             end = time.time()",
                "@@ -132,3 +114,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             start = time.time()",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -146,3 +128,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                     offset = n % 1024",
                "-                    self.assertEqual(data, k2blob[offset:offset + chunk])",
                "+                    assert data == k2blob[offset:offset + chunk]",
                "                     n += chunk",
                "@@ -152,8 +134,8 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_4_prefetch_seek(self):",
                "+    def test_4_prefetch_seek(self, sftp):",
                "         kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -165,3 +147,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "@@ -171,3 +153,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             for i in range(10):",
                "-                with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+                with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                     file_size = f.stat().st_size",
                "@@ -183,3 +165,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                         n_offset = offset % 1024",
                "-                        self.assertEqual(data, k2blob[n_offset:n_offset + chunk])",
                "+                        assert data == k2blob[n_offset:n_offset + chunk]",
                "                         offset += chunk",
                "@@ -188,8 +170,8 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_5_readv_seek(self):",
                "+    def test_5_readv_seek(self, sftp):",
                "         kblob = bytes().join([struct.pack('>H', n) for n in range(512)])",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -201,3 +183,3 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "@@ -207,3 +189,3 @@ class BigSFTPTest (unittest.TestCase):",
                "             for i in range(10):",
                "-                with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+                with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                     base_offset = (512 * 1024) + 17 * random.randint(1000, 2000)",
                "@@ -220,3 +202,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                         n_offset = offset % 1024",
                "-                        self.assertEqual(next(ret), k2blob[n_offset:n_offset + chunk])",
                "+                        assert next(ret) == k2blob[n_offset:n_offset + chunk]",
                "             end = time.time()",
                "@@ -224,5 +206,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_6_lots_of_prefetching(self):",
                "+    def test_6_lots_of_prefetching(self, sftp):",
                "         \"\"\"",
                "@@ -233,3 +215,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'w') as f:",
                "                 f.set_pipelined(True)",
                "@@ -241,9 +223,9 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "             for i in range(10):",
                "-                with self.sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+                with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "                     file_size = f.stat().st_size",
                "                     f.prefetch(file_size)",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'r') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -252,3 +234,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                     data = f.read(1024)",
                "-                    self.assertEqual(data, kblob)",
                "+                    assert data == kblob",
                "                     if n % 128 == 0:",
                "@@ -257,5 +239,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_7_prefetch_readv(self):",
                "+    def test_7_prefetch_readv(self, sftp):",
                "         \"\"\"",
                "@@ -265,3 +247,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -273,5 +255,5 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                 file_size = f.stat().st_size",
                "@@ -279,3 +261,3 @@ class BigSFTPTest (unittest.TestCase):",
                "                 data = f.read(1024)",
                "-                self.assertEqual(data, kblob)",
                "+                assert data == kblob",
                "@@ -287,4 +269,4 @@ class BigSFTPTest (unittest.TestCase):",
                "                     offset = base_offset % 1024",
                "-                    self.assertEqual(chunk_size, len(data))",
                "-                    self.assertEqual(k2blob[offset:offset + chunk_size], data)",
                "+                    assert chunk_size == len(data)",
                "+                    assert k2blob[offset:offset + chunk_size] == data",
                "                     base_offset += chunk_size",
                "@@ -293,5 +275,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_8_large_readv(self):",
                "+    def test_8_large_readv(self, sftp):",
                "         \"\"\"",
                "@@ -302,3 +284,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'wb') as f:",
                "                 f.set_pipelined(True)",
                "@@ -310,9 +292,9 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'rb') as f:",
                "                 data = list(f.readv([(23 * 1024, 128 * 1024)]))",
                "-                self.assertEqual(1, len(data))",
                "+                assert len(data) == 1",
                "                 data = data[0]",
                "-                self.assertEqual(128 * 1024, len(data))",
                "+                assert len(data) == 128 * 1024",
                "@@ -320,5 +302,5 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_9_big_file_big_buffer(self):",
                "+    def test_9_big_file_big_buffer(self, sftp):",
                "         \"\"\"",
                "@@ -328,10 +310,10 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "                 f.write(mblob)",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "-    def test_A_big_file_renegotiate(self):",
                "+    def test_A_big_file_renegotiate(self, sftp):",
                "         \"\"\"",
                "@@ -339,3 +321,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         \"\"\"",
                "-        t = self.sftp.sock.get_transport()",
                "+        t = sftp.sock.get_transport()",
                "         t.packetizer.REKEY_BYTES = 512 * 1024",
                "@@ -343,3 +325,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         try:",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'w', 128 * 1024) as f:",
                "                 for i in range(32):",
                "@@ -347,7 +329,7 @@ class BigSFTPTest (unittest.TestCase):",
                "-            self.assertEqual(self.sftp.stat('%s/hongry.txt' % FOLDER).st_size, 1024 * 1024)",
                "-            self.assertNotEqual(t.H, t.session_id)",
                "+            assert sftp.stat('%s/hongry.txt' % FOLDER).st_size == 1024 * 1024",
                "+            assert t.H != t.session_id",
                "             # try to read it too.",
                "-            with self.sftp.open('%s/hongry.txt' % FOLDER, 'r', 128 * 1024) as f:",
                "+            with sftp.open('%s/hongry.txt' % FOLDER, 'r', 128 * 1024) as f:",
                "                 file_size = f.stat().st_size",
                "@@ -358,3 +340,3 @@ class BigSFTPTest (unittest.TestCase):",
                "         finally:",
                "-            self.sftp.remove('%s/hongry.txt' % FOLDER)",
                "+            sftp.remove('%s/hongry.txt' % FOLDER)",
                "             t.packetizer.REKEY_BYTES = pow(2, 30)"
            ],
            "changed_files": [
                "tests/conftest.py",
                "tests/test_sftp.py",
                "tests/test_sftp_big.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "903f21d99d9e47dfc519c1521f8dbb8b4ff5724a",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1507966798,
            "hunks": 1,
            "message": "Remove old Python 3.2 code",
            "diff": [
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index a38c2e7d..9154a795 100755",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -91,5 +91,3 @@ tc = None",
                " g_big_file_test = True",
                "-# we need to use eval(compile()) here because Py3.2 doesn't support the 'u' marker for unicode",
                "-# this test is the only line in the entire program that has to be treated specially to support Py3.2",
                "-unicode_folder = eval(compile(r\"u'\\u00fcnic\\u00f8de'\" if PY2 else r\"'\\u00fcnic\\u00f8de'\", 'test_sftp.py', 'eval'))",
                "+unicode_folder = u'\\u00fcnic\\u00f8de' if PY2 else '\\u00fcnic\\u00f8de'",
                " utf8_folder = b'/\\xc3\\xbcnic\\xc3\\xb8\\x64\\x65'"
            ],
            "changed_files": [
                "tests/test_sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1a6e52ea8eb04d31b8bea98aa6e96f81c89937d3",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537238414,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6b406d15152e4fa144aceec67a0084ecc067dde0",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330463,
            "hunks": 0,
            "message": "Merge branch '2.1' into 2.2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1d96c4ebbc94a919df147b513009f6eb3a5df712",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508869671,
            "hunks": 1,
            "message": "Realizing no, this is only really useful for debugging. In normal testing it inflates test run time & also gets in the way of other pytest features. Mehh. Wish signal worked better.",
            "diff": [
                "diff --git a/pytest.ini b/pytest.ini",
                "deleted file mode 100644",
                "index 582242ca..00000000",
                "--- a/pytest.ini",
                "+++ /dev/null",
                "@@ -1,7 +0,0 @@",
                "-[pytest]",
                "-# 10 seconds is more time than nearly any test ought to take and almost surely",
                "-# indicates a full-on deadlock.",
                "-timeout = 10",
                "-# Sadly the signal method of pytest-timeout does not appear to help, at least",
                "-# for the SFTP hangs encountered developing issue #1100.",
                "-timeout_method = thread"
            ],
            "changed_files": [
                "pytest.ini"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9c1365d16147d92c197979508c45340773ae162a",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508809095,
            "hunks": 1,
            "message": "Nah",
            "diff": [
                "diff --git a/pytest.ini b/pytest.ini",
                "index af021870..582242ca 100644",
                "--- a/pytest.ini",
                "+++ b/pytest.ini",
                "@@ -2,4 +2,4 @@",
                " # 10 seconds is more time than nearly any test ought to take and almost surely",
                "-# indicates a full-on deadlock; but let's make it 30s just to be sure.",
                "-timeout = 30",
                "+# indicates a full-on deadlock.",
                "+timeout = 10",
                " # Sadly the signal method of pytest-timeout does not appear to help, at least"
            ],
            "changed_files": [
                "pytest.ini"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "74aa8f70b48a88a2a243e58293fac74049e542a7",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537227517,
            "hunks": 1,
            "message": "Crummy workaround for 2.6/3.3 support.",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 8949eb02..1e9af0a1 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -26,12 +26,15 @@ install:",
                "   - pip install -r dev-requirements.txt",
                "-script:",
                "-  # Fast syntax check failures for more rapid feedback to submitters",
                "-  # (Travis-oriented metatask that version checks Python, installs, runs.)",
                "-  - inv travis.blacken",
                "-  # I have this in my git pre-push hook, but contributors probably don't",
                "-  - flake8",
                "-  # All (including slow) tests, w/ coverage!",
                "-  - inv coverage",
                "-  # Ensure documentation builds, both sites, maxxed nitpicking",
                "-  - inv sites",
                "+script: |",
                "+  # NOTE: the below hilarity should only exist in 2.0-2.3, 2.4+ should've gone",
                "+  # back to vague normalcy!",
                "+  if [[ $TRAVIS_PYTHON_VERSION == '2.6' || $TRAVIS_PYTHON_VERSION == '3.3' ]];",
                "+  then",
                "+    flake8",
                "+    coverage run --source=paramiko -m pytest",
                "+  else",
                "+    inv travis.blacken",
                "+    flake8",
                "+    inv coverage",
                "+    inv sites",
                "+  fi",
                " notifications:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cf113f11ede2acd906f0b2a3a476b2a081922581",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508872424,
            "hunks": 1,
            "message": "Allow disabling logging",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index ac83eacf..dd860ff2 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -18,9 +18,12 @@ from .util import _support",
                " # Perform logging by default; pytest will capture and thus hide it normally,",
                "-# presenting it on error/failure.",
                "-# Also make sure to set up timestamping for more sanity when debugging.",
                "-logging.basicConfig(",
                "-    level=logging.DEBUG,",
                "-    format=\"[%(relativeCreated)s]\\t%(levelname)s:%(name)s:%(message)s\",",
                "-    datefmt=\"%H:%M:%S\",",
                "-)",
                "+# presenting it on error/failure. (But also allow turning it off when doing",
                "+# very pinpoint debugging - e.g. using breakpoints, so you don't want output",
                "+# hiding enabled, but also don't want all the logging to gum up the terminal.)",
                "+if not os.environ.get('DISABLE_LOGGING', False):",
                "+    logging.basicConfig(",
                "+        level=logging.DEBUG,",
                "+        # Also make sure to set up timestamping for more sanity when debugging.",
                "+        format=\"[%(relativeCreated)s]\\t%(levelname)s:%(name)s:%(message)s\",",
                "+        datefmt=\"%H:%M:%S\",",
                "+    )"
            ],
            "changed_files": [
                "tests/conftest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d8e3554cb738f78b9643f80a1d1e970302fc340a",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537238124,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c4a0442d267009272355fb8d0c9e2dcdf118b560",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508779849,
            "hunks": 1,
            "message": "Ignore .cache dir for pytest",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index 44b45974..d3e94567 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -11 +11,2 @@ _build",
                " .coverage",
                "+.cache"
            ],
            "changed_files": [
                ".gitignore"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5d20647a650adbf8c98c446d3c185dae7706b0e7",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508784203,
            "hunks": 1,
            "message": "TODO",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 2819eb20..30ddbff0 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -24,2 +24,3 @@ install:",
                "   # Dev (doc/test running) requirements",
                "+  # TODO: use pipenv + whatever contexty-type stuff it has",
                "   - pip install codecov # For codecov specifically"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "174daa3b95411ed6c72cfbc9f8d320d7b45a440e",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1527629732,
            "hunks": 4,
            "message": "Modernize travis/dev-reqs/etc re: blackening",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index c4ccb74d..8949eb02 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -27,3 +27,6 @@ install:",
                " script:",
                "-  # flake8 is now possible!",
                "+  # Fast syntax check failures for more rapid feedback to submitters",
                "+  # (Travis-oriented metatask that version checks Python, installs, runs.)",
                "+  - inv travis.blacken",
                "+  # I have this in my git pre-push hook, but contributors probably don't",
                "   - flake8",
                "diff --git a/setup.cfg b/setup.cfg",
                "index a24844d0..2d673ea4 100644",
                "--- a/setup.cfg",
                "+++ b/setup.cfg",
                "@@ -11,3 +11,3 @@ omit = paramiko/_winapi.py",
                " exclude = sites,.git,build,dist,demos,tests",
                "-ignore = E124,E125,E128,E261,E301,E302,E303,E402,E721",
                "+ignore = E124,E125,E128,E261,E301,E302,E303,E402,E721,W503",
                " max-line-length = 79",
                "diff --git a/tasks.py b/tasks.py",
                "index caa72bcd..33092d77 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -5,2 +5,4 @@ from shutil import rmtree, copytree",
                " from invoke import Collection, task",
                "+from invocations import travis",
                "+from invocations.checks import blacken",
                " from invocations.docs import docs, www, sites",
                "@@ -122,3 +124,11 @@ release_coll.tasks[\"publish\"] = release",
                " ns = Collection(",
                "-    test, coverage, guard, release_coll, docs, www, sites,",
                "+    test,",
                "+    coverage,",
                "+    guard,",
                "+    release_coll,",
                "+    docs,",
                "+    www,",
                "+    sites,",
                "+    travis,",
                "+    blacken,",
                " )"
            ],
            "changed_files": [
                ".travis.yml",
                "setup.cfg",
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b55a19d574e795bf82032cec586432b49c86499f",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537306858,
            "hunks": 0,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "43a5c497f6d00c10fcf5e63d48284e1d25921caa",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508801872,
            "hunks": 1,
            "message": "Whoops, most uses of skipif REQUIRE reason=",
            "diff": [
                "diff --git a/tests/util.py b/tests/util.py",
                "index db1f077c..051a36ba 100644",
                "--- a/tests/util.py",
                "+++ b/tests/util.py",
                "@@ -22,2 +22,3 @@ def needs_builtin(name):",
                "     \"\"\"",
                "-    return pytest.mark.skipif(not hasattr(builtins, name))",
                "+    reason = \"Test requires a builtin '{}'\".format(name)",
                "+    return pytest.mark.skipif(not hasattr(builtins, name), reason=reason)"
            ],
            "changed_files": [
                "tests/util.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2631e2f340658280930a5de18dc4f15011496c06",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537327923,
            "hunks": 0,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e1deb0ba058e1d07930557d1404833a85ddfe82c",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508954924,
            "hunks": 2,
            "message": "Move comment",
            "diff": [
                "diff --git a/tasks.py b/tasks.py",
                "index a9c94ec3..e2bb0331 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -11,5 +11,2 @@ from invocations.packaging.release import ns as release_coll, publish",
                " def test(ctx, verbose=True, coverage=False, opts=\"\"):",
                "-    # TODO: once pytest coverage plugin works, see if there's a pytest-native",
                "-    # way to handle the env stuff too, then we can remove these tasks entirely",
                "-    # in favor of just \"run pytest\"?",
                "     if verbose:",
                "@@ -25,2 +22,5 @@ def test(ctx, verbose=True, coverage=False, opts=\"\"):",
                "     # users.",
                "+    # TODO: once pytest coverage plugin works, see if there's a pytest-native",
                "+    # way to handle the env stuff too, then we can remove these tasks entirely",
                "+    # in favor of just \"run pytest\"?",
                "     env = dict(os.environ)"
            ],
            "changed_files": [
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c2fe70eb72b7a265f8363344e06247aebe95e0c1",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330715,
            "hunks": 0,
            "message": "Merge branch '2.1' into 2.2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8916b5d8030d48dc9da005df801f3417bc16d39a",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326130,
            "hunks": 0,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a87b98e10e644a310c6ba9cc428f396f0e3a1df9",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537306655,
            "hunks": 0,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "46c1d26cb4e0827f8c860b8333c5182d8f0e0caa",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508808981,
            "hunks": 2,
            "message": "Test-related ignore updates",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index d3e94567..adce2a9f 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -5,3 +5,2 @@ dist/",
                " paramiko.egg-info/",
                "-test.log",
                " docs/",
                "@@ -12 +11,2 @@ _build",
                " .cache",
                "+paramiko-test-target"
            ],
            "changed_files": [
                ".gitignore"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0394fee33f31bd7eadfc8ed941a214b401eccbeb",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326048,
            "hunks": 0,
            "message": "Merge branch '2.4'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1daf054fb158135dfd9dcf71002406f19625b71f",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508809099,
            "hunks": 1,
            "message": "Comment tweak",
            "diff": [
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index a9f09fd8..f77c929f 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -100,3 +100,3 @@ def sftp(sftp_server):",
                "     # Clean up",
                "-    # TODO: many tests like to close the client; to match old test suite",
                "+    # TODO: many SFTP tests like to close the client; to match old test suite",
                "     # behavior we'd need to recreate the entire client? Possibly better to just"
            ],
            "changed_files": [
                "tests/conftest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6939e953d6c23061f49cde8432b6bc827cadef3f",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330715,
            "hunks": 0,
            "message": "Merge branch '2.2' into 2.3",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6b377c0e33c5d3443883de770a03cdb53140d07c",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508955860,
            "hunks": 1,
            "message": "Tighten up verbose flag",
            "diff": [
                "diff --git a/tasks.py b/tasks.py",
                "index e2bb0331..97dca66b 100644",
                "--- a/tasks.py",
                "+++ b/tasks.py",
                "@@ -11,3 +11,3 @@ from invocations.packaging.release import ns as release_coll, publish",
                " def test(ctx, verbose=True, coverage=False, opts=\"\"):",
                "-    if verbose:",
                "+    if verbose and '--verbose' not in opts and '-v' not in opts:",
                "         opts += \" --verbose\""
            ],
            "changed_files": [
                "tasks.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e87937529229101ab3187dc4a6d6c5ed84f732b6",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1508807577,
            "hunks": 0,
            "message": "Why were these +x?",
            "diff": [
                "diff --git a/tests/test_file.py b/tests/test_file.py",
                "old mode 100755",
                "new mode 100644",
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "old mode 100755",
                "new mode 100644"
            ],
            "changed_files": [
                "tests/test_file.py",
                "tests/test_sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "33b706d0188d20468d17a2200e8be82cff298ecc",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537330578,
            "hunks": 0,
            "message": "Merge branch '2.3' into 2.4",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6f2d06cba1ef334072430d6269f5229a32a148e0",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537326130,
            "hunks": 0,
            "message": "Merge branch '2.1' into 2.2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a89931fbec9dc62cae12161e6d7dfeeb74727350",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537223161,
            "hunks": 1,
            "message": "May have goofed up a cherry-pick earlier?",
            "diff": [
                "diff --git a/tests/test_sftp.py b/tests/test_sftp.py",
                "index dac54a9b..85c907a5 100644",
                "--- a/tests/test_sftp.py",
                "+++ b/tests/test_sftp.py",
                "@@ -185,3 +185,3 @@ class TestSFTP(object):",
                "-    def test_6_folder(self):",
                "+    def test_6_folder(self, sftp):",
                "         \"\"\""
            ],
            "changed_files": [
                "tests/test_sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a5ce12d4830e9d3661d1e4ccddef18e112386ee1",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537327881,
            "hunks": 1,
            "message": "Fix a Python 2.6 oops",
            "diff": [
                "diff --git a/paramiko/transport.py b/paramiko/transport.py",
                "index 82914559..04996a3d 100644",
                "--- a/paramiko/transport.py",
                "+++ b/paramiko/transport.py",
                "@@ -1967,3 +1967,3 @@ class Transport(threading.Thread, ClosingContextManager):",
                "                         name = MSG_NAMES[ptype]",
                "-                        warning = \"Oops, unhandled type {} ({!r})\".format(",
                "+                        warning = \"Oops, unhandled type {0} ({1!r})\".format(",
                "                             ptype, name"
            ],
            "changed_files": [
                "paramiko/transport.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.9",
                "2.1.6",
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "49d1a60dc0ba8e62ba80d176c6e79cda184e6cb5",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537327899,
            "hunks": 0,
            "message": "Merge branch '2.1' into 2.2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "66ed28838f2887cce377d3e337fa46474b12d501",
            "repository": "https://github.com/paramiko/paramiko",
            "timestamp": 1537232371,
            "hunks": 2,
            "message": "Missed a spot",
            "diff": [
                "diff --git a/tests/test_client.py b/tests/test_client.py",
                "index f3f07124..35756893 100644",
                "--- a/tests/test_client.py",
                "+++ b/tests/test_client.py",
                "@@ -43,3 +43,2 @@ from .util import _support, slow",
                " FINGERPRINTS = {",
                "-<<<<<<< HEAD",
                "     'ssh-dss': b'\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c',",
                "@@ -48,7 +47,2 @@ FINGERPRINTS = {",
                "     'ssh-ed25519': b'\\xb3\\xd5\"\\xaa\\xf9u^\\xe8\\xcd\\x0e\\xea\\x02\\xb9)\\xa2\\x80',",
                "-=======",
                "-    \"ssh-dss\": b\"\\x44\\x78\\xf0\\xb9\\xa2\\x3c\\xc5\\x18\\x20\\x09\\xff\\x75\\x5b\\xc1\\xd2\\x6c\",",
                "-    \"ssh-rsa\": b\"\\x60\\x73\\x38\\x44\\xcb\\x51\\x86\\x65\\x7f\\xde\\xda\\xa2\\x2b\\x5a\\x57\\xd5\",",
                "-    \"ecdsa-sha2-nistp256\": b\"\\x25\\x19\\xeb\\x55\\xe6\\xa1\\x47\\xff\\x4f\\x38\\xd2\\x75\\x6f\\xa5\\xd5\\x60\",",
                "->>>>>>> 2.1",
                " }"
            ],
            "changed_files": [
                "tests/test_client.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.10.0",
                "2.10.1",
                "2.10.2",
                "2.10.3",
                "2.10.4",
                "2.10.5",
                "2.10.6",
                "2.11.0",
                "2.11.1",
                "2.12.0",
                "2.2.4",
                "2.3.3",
                "2.4.2",
                "2.4.3",
                "2.5.0",
                "2.5.1",
                "2.6.0",
                "2.7.0",
                "2.7.1",
                "2.7.2",
                "2.8.0",
                "2.8.1",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "2.9.3",
                "2.9.4",
                "2.9.5",
                "3.0.0",
                "3.1.0",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0"
            ],
            "matched_rules": []
        }
    ]
}
