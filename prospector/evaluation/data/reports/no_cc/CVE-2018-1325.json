{
    "advisory_record": {
        "cve_id": "CVE-2018-1325",
        "description": "In Apache wicket-jquery-ui <= 6.29.0, <= 7.10.1, <= 8.0.0-M9.1, JS code created in WYSIWYG editor will be executed on display.",
        "reserved_timestamp": 1512604800,
        "published_timestamp": 1524009600,
        "updated_timestamp": 1524077821,
        "repository_url": null,
        "references": {
            "https://markmail.org/message/6bxjyaolehhq7jrl": 2
        },
        "affected_products": [
            "Apache",
            "WYSIWYG",
            "wicket-jquery-ui"
        ],
        "versions": {
            "status": "affected",
            "version": "wicket-jquery-ui <= 6.29.0, <= 7.10.1, <= 8.0.0-M9.1"
        },
        "files": [
            "WYSIWYG",
            "wicket-jquery-ui"
        ],
        "keywords": [
            "wysiwyg",
            "execute",
            "jquery",
            "create",
            "display",
            "apache",
            "wicket",
            "editor",
            "code"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "bce8b05bcf34027ea11ac2db0f0acecf4d317939",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514671745,
            "hunks": 1,
            "message": "WICKET-6489 Exception when \"identifier|code\" javascript is not start on PrependJavaScript",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "index bb76b016f6..2ea6923eac 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "@@ -1160,3 +1160,3 @@",
                " \t\t\t// used to match evaluation scripts which manually call FunctionsExecuter's notify() when ready",
                "-\t\t\tvar scriptWithIdentifierR = new RegExp(\"^\\\\(function\\\\(\\\\)\\\\{([a-zA-Z_]\\\\w*)\\\\|((.|\\\\n)*)?\\\\}\\\\)\\\\(\\\\);$\");",
                "+\t\t\tvar scriptWithIdentifierR = new RegExp(\"\\\\(function\\\\(\\\\)\\\\{([a-zA-Z_]\\\\w*)\\\\|((.|\\\\n)*)?\\\\}\\\\)\\\\(\\\\);$\");"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6489": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "588408a19413649e693c9fc57c69aba09036b2d0"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: jquery",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6489",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05259c230689b015d9fe0526cb234aecd97a5ce7",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511545587,
            "hunks": 1,
            "message": "[WICKET-6497] code to ensure 'Wicket' is defined is added",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "index 1a1379adeb..d4149fb6a2 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "@@ -30,3 +30,7 @@",
                "-\tif (typeof(Wicket) === 'object' && typeof(Wicket.Head) === 'object') {",
                "+\tif (typeof(Wicket) === 'undefined') {",
                "+\t\twindow.Wicket = {};",
                "+\t}",
                "+",
                "+\tif (typeof(Wicket.Head) === 'object') {",
                " \t\treturn;"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6497": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: jquery",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6497",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0f767eb5e169739893602a8c236921d150643728",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511364257,
            "hunks": 48,
            "message": "[WICKET-6497] wicket-event-jquery.js and wicket-ajax-jquery.js are merged, references are updated",
            "diff": [
                "diff --git a/testing/wicket-js-tests/Gruntfile.js b/testing/wicket-js-tests/Gruntfile.js",
                "index 29b746b4c0..82ecb9051d 100644",
                "--- a/testing/wicket-js-tests/Gruntfile.js",
                "+++ b/testing/wicket-js-tests/Gruntfile.js",
                "@@ -20,3 +20,2 @@ module.exports = function(grunt) {",
                " \t\tcoreJs = [",
                "-\t\t\t'../../wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js',",
                " \t\t\t'../../wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery-debug.js',",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/WicketAjaxJQueryResourceReference.java b/wicket-core/src/main/java/org/apache/wicket/ajax/WicketAjaxJQueryResourceReference.java",
                "index cd6e617bc9..2ed5b882f0 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/WicketAjaxJQueryResourceReference.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/WicketAjaxJQueryResourceReference.java",
                "@@ -25,2 +25,3 @@ import org.apache.wicket.request.resource.JavaScriptResourceReference;",
                " import org.apache.wicket.request.resource.ResourceReference;",
                "+import org.apache.wicket.resource.JQueryResourceReference;",
                "@@ -51,6 +52,6 @@ public class WicketAjaxJQueryResourceReference extends JavaScriptResourceReferen",
                " \t{",
                "-\t\tfinal ResourceReference wicketEventReference;",
                "+\t\tfinal ResourceReference jqueryReference;",
                " \t\tif (Application.exists())",
                " \t\t{",
                "-\t\t\twicketEventReference = Application.get().getJavaScriptLibrarySettings().getWicketEventReference();",
                "+\t\t\tjqueryReference = Application.get().getJavaScriptLibrarySettings().getJQueryReference();",
                " \t\t}",
                "@@ -58,6 +59,6 @@ public class WicketAjaxJQueryResourceReference extends JavaScriptResourceReferen",
                " \t\t{",
                "-\t\t\twicketEventReference = WicketEventJQueryResourceReference.get();",
                "+\t\t\tjqueryReference = JQueryResourceReference.getV2();",
                " \t\t}",
                " \t\tList<HeaderItem> dependencies = super.getDependencies();",
                "-\t\tdependencies.add(JavaScriptHeaderItem.forReference(wicketEventReference));",
                "+\t\tdependencies.add(JavaScriptHeaderItem.forReference(jqueryReference));",
                " \t\treturn dependencies;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/WicketEventJQueryResourceReference.java b/wicket-core/src/main/java/org/apache/wicket/ajax/WicketEventJQueryResourceReference.java",
                "deleted file mode 100644",
                "index 99212adbba..0000000000",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/WicketEventJQueryResourceReference.java",
                "+++ /dev/null",
                "@@ -1,69 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.ajax;",
                "-",
                "-import java.util.List;",
                "-",
                "-import org.apache.wicket.Application;",
                "-import org.apache.wicket.markup.head.HeaderItem;",
                "-import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                "-import org.apache.wicket.request.resource.JavaScriptResourceReference;",
                "-import org.apache.wicket.request.resource.ResourceReference;",
                "-import org.apache.wicket.resource.DynamicJQueryResourceReference;",
                "-import org.apache.wicket.resource.JQueryResourceReference;",
                "-",
                "-/**",
                "- * @author hoeve",
                "- */",
                "-public class WicketEventJQueryResourceReference extends JavaScriptResourceReference",
                "-{",
                "-\tprivate static final long serialVersionUID = -2918665261694523156L;",
                "-",
                "-\tprivate static final WicketEventJQueryResourceReference INSTANCE = new WicketEventJQueryResourceReference();",
                "-",
                "-\t/**",
                "-\t * @return the singleton INSTANCE",
                "-\t */",
                "-\tpublic static WicketEventJQueryResourceReference get()",
                "-\t{",
                "-\t\treturn INSTANCE;",
                "-\t}",
                "-",
                "-\tprivate WicketEventJQueryResourceReference()",
                "-\t{",
                "-\t\tsuper(AbstractDefaultAjaxBehavior.class, \"res/js/wicket-event-jquery.js\");",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic List<HeaderItem> getDependencies()",
                "-\t{",
                "-\t\tfinal ResourceReference backingLibraryReference;",
                "-\t\tif (Application.exists())",
                "-\t\t{",
                "-\t\t\tbackingLibraryReference = Application.get()",
                "-\t\t\t\t.getJavaScriptLibrarySettings()",
                "-\t\t\t\t.getJQueryReference();",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\tbackingLibraryReference = DynamicJQueryResourceReference.get();",
                "-\t\t}",
                "-\t\tList<HeaderItem> dependencies = super.getDependencies();",
                "-\t\tdependencies.add(JavaScriptHeaderItem.forReference(backingLibraryReference));",
                "-\t\treturn dependencies;",
                "-\t}",
                "-}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "index b7ae6fd84b..1a1379adeb 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "@@ -2763,2 +2763,274 @@",
                "+",
                "+\tjQuery.extend(true, Wicket, {",
                "+",
                "+\t\tBrowser: {",
                "+\t\t\t_isKHTML: null,",
                "+\t\t\tisKHTML: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isKHTML === null) {",
                "+\t\t\t\t\twb._isKHTML = (/Konqueror|KHTML/).test(window.navigator.userAgent) && !/Apple/.test(window.navigator.userAgent);",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isKHTML;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isSafari: null,",
                "+\t\t\tisSafari: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isSafari === null) {",
                "+\t\t\t\t\twb._isSafari = !/Chrome/.test(window.navigator.userAgent) && /KHTML/.test(window.navigator.userAgent) && /Apple/.test(window.navigator.userAgent);",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isSafari;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isChrome: null,",
                "+\t\t\tisChrome: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isChrome === null) {",
                "+\t\t\t\t\twb._isChrome = (/KHTML/).test(window.navigator.userAgent) && /Apple/.test(window.navigator.userAgent) && /Chrome/.test(window.navigator.userAgent);",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isChrome;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isOpera: null,",
                "+\t\t\tisOpera: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isOpera === null) {",
                "+\t\t\t\t\twb._isOpera = !Wicket.Browser.isSafari() && typeof(window.opera) !== \"undefined\";",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isOpera;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isIE: null,",
                "+\t\t\tisIE: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isIE === null) {",
                "+\t\t\t\t\twb._isIE = !Wicket.Browser.isSafari() && (typeof(document.all) !== \"undefined\" || window.navigator.userAgent.indexOf(\"Trident/\")>-1) && typeof(window.opera) === \"undefined\";",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isIE;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isIEQuirks: null,",
                "+\t\t\tisIEQuirks: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isIEQuirks === null) {",
                "+\t\t\t\t\t// is the browser internet explorer in quirks mode (we could use document.compatMode too)",
                "+\t\t\t\t\twb._isIEQuirks = Wicket.Browser.isIE() && window.document.documentElement.clientHeight === 0;",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isIEQuirks;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isIELessThan9: null,",
                "+\t\t\tisIELessThan9: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isIELessThan9 === null) {",
                "+\t\t\t\t\tvar index = window.navigator.userAgent.indexOf(\"MSIE\");",
                "+\t\t\t\t\tvar version = parseFloat(window.navigator.userAgent.substring(index + 5));",
                "+\t\t\t\t\twb._isIELessThan9 = Wicket.Browser.isIE() && version < 9;",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isIELessThan9;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isIELessThan11: null,",
                "+\t\t\tisIELessThan11: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isIELessThan11 === null) {",
                "+\t\t\t\t\twb._isIELessThan11 = !Wicket.Browser.isSafari() && typeof(document.all) !== \"undefined\" && typeof(window.opera) === \"undefined\";",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isIELessThan11;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isIE11: null,",
                "+\t\t\tisIE11: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isIE11 === null) {",
                "+\t\t\t\t\tvar userAgent = window.navigator.userAgent;",
                "+\t\t\t\t\tvar isTrident = userAgent.indexOf(\"Trident\") > -1;",
                "+\t\t\t\t\tvar is11 = userAgent.indexOf(\"rv:11\") > -1;",
                "+\t\t\t\t\twb._isIE11 = isTrident && is11;",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isIE11;",
                "+\t\t\t},",
                "+",
                "+\t\t\t_isGecko: null,",
                "+\t\t\tisGecko: function () {",
                "+\t\t\t\tvar wb = Wicket.Browser;",
                "+\t\t\t\tif (wb._isGecko === null) {",
                "+\t\t\t\t\twb._isGecko = (/Gecko/).test(window.navigator.userAgent) && !Wicket.Browser.isSafari();",
                "+\t\t\t\t}",
                "+\t\t\t\treturn wb._isGecko;",
                "+\t\t\t}",
                "+\t\t},",
                "+",
                "+\t\t/**",
                "+\t\t * Events related code",
                "+\t\t * Based on code from Mootools (http://mootools.net)",
                "+\t\t */",
                "+\t\tEvent: {",
                "+\t\t\tidCounter: 0,",
                "+",
                "+\t\t\tgetId: function (element) {",
                "+\t\t\t\tvar $el = jQuery(element),",
                "+\t\t\t\t\tid = $el.prop(\"id\");",
                "+",
                "+\t\t\t\tif (typeof(id) === \"string\" && id.length > 0) {",
                "+\t\t\t\t\treturn id;",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\tid = \"wicket-generated-id-\" + Wicket.Event.idCounter++;",
                "+\t\t\t\t\t$el.prop(\"id\", id);",
                "+\t\t\t\t\treturn id;",
                "+\t\t\t\t}",
                "+\t\t\t},",
                "+",
                "+\t\t\tkeyCode: function (evt) {",
                "+\t\t\t\treturn Wicket.Event.fix(evt).keyCode;",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t * Prevent event from bubbling up in the element hierarchy.",
                "+\t\t\t * @param evt {Event} - the event to stop",
                "+\t\t\t * @param immediate {Boolean} - true if the event should not be handled by other listeners registered",
                "+\t\t\t *      on the same HTML element. Optional",
                "+\t\t\t */",
                "+\t\t\tstop: function (evt, immediate) {",
                "+\t\t\t\tevt = Wicket.Event.fix(evt);",
                "+\t\t\t\tif (immediate) {",
                "+\t\t\t\t\tevt.stopImmediatePropagation();",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\tevt.stopPropagation();",
                "+\t\t\t\t}",
                "+\t\t\t\treturn evt;",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t * If no event is given as argument (IE), window.event is returned.",
                "+\t\t\t */",
                "+\t\t\tfix: function (evt) {",
                "+\t\t\t\treturn jQuery.event.fix(evt || window.event);",
                "+\t\t\t},",
                "+",
                "+\t\t\tfire: function (element, event) {",
                "+\t\t\t\tevent = (event === 'mousewheel' && Wicket.Browser.isGecko()) ? 'DOMMouseScroll' : event;",
                "+\t\t\t\tjQuery(element).trigger(event);",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t * Binds an event listener for an element",
                "+\t\t\t *",
                "+\t\t\t * Also supports the special 'domready' event on window.",
                "+\t\t\t * 'domready' is event fired when the DOM is complete, but",
                "+\t\t\t * before loading external resources (images, scripts, ...)",
                "+\t\t\t *",
                "+\t\t\t * @param element {HTMLElement} The host HTML element",
                "+\t\t\t * @param type {String} The type of the DOM event",
                "+\t\t\t * @param fn {Function} The event handler to unbind",
                "+\t\t\t * @param data {Object} Extra data for the event",
                "+\t\t\t * @param selector {String} A selector string to filter the descendants of the selected",
                "+\t\t\t *      elements that trigger the event. If the selector is null or omitted,",
                "+\t\t\t *      the event is always triggered when it reaches the selected element.",
                "+\t\t\t */",
                "+\t\t\tadd: function (element, type, fn, data, selector) {",
                "+\t\t\t\tif (type === 'domready') {",
                "+\t\t\t\t\tjQuery(fn);",
                "+\t\t\t\t} else if (type === 'load' && element === window) {",
                "+\t\t\t\t\tjQuery(window).on('load', function() {",
                "+\t\t\t\t\t\tjQuery(fn);",
                "+\t\t\t\t\t});",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\ttype = (type === 'mousewheel' && Wicket.Browser.isGecko()) ? 'DOMMouseScroll' : type;",
                "+\t\t\t\t\tvar el = element;",
                "+\t\t\t\t\tif (typeof(element) === 'string') {",
                "+\t\t\t\t\t\tel = document.getElementById(element);",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\tif (!el && Wicket.Log) {",
                "+\t\t\t\t\t\tWicket.Log.error('Cannot bind a listener for event \"' + type +",
                "+\t\t\t\t\t\t\t'\" on element \"' + element + '\" because the element is not in the DOM');",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\tjQuery(el).on(type, selector, data, fn);",
                "+\t\t\t\t}",
                "+\t\t\t\treturn element;",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t * Unbinds an event listener for an element",
                "+\t\t\t *",
                "+\t\t\t * @param element {HTMLElement} The host HTML element",
                "+\t\t\t * @param type {String} The type of the DOM event",
                "+\t\t\t * @param fn {Function} The event handler to unbind",
                "+\t\t\t */",
                "+\t\t\tremove: function (element, type, fn) {",
                "+\t\t\t\tjQuery(element).off(type, fn);",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t* Adds a subscriber for the passed topic.",
                "+\t\t\t*",
                "+\t\t\t* @param topic {String} - the channel name for which this subscriber will be notified",
                "+\t\t\t*        If '*' then it will be notified for all topics",
                "+\t\t\t* @param subscriber {Function} - the callback to call when an event with this type is published",
                "+\t\t\t*/",
                "+\t\t\tsubscribe: function (topic, subscriber) {",
                "+\t\t\t\tif (topic) {",
                "+\t\t\t\t\tjQuery(document).on(topic, subscriber);",
                "+\t\t\t\t}",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t * Un-subscribes a subscriber from a topic.",
                "+\t\t\t * @param topic {String} - the topic name. If omitted un-subscribes all",
                "+\t\t\t *      subscribers from all topics",
                "+\t\t\t * @param subscriber {Function} - the handler to un-subscribe. If omitted then",
                "+\t\t\t *      all subscribers are removed from this topic",
                "+\t\t\t */",
                "+\t\t\tunsubscribe: function(topic, subscriber) {",
                "+\t\t\t\tif (topic) {",
                "+\t\t\t\t\tif (subscriber) {",
                "+\t\t\t\t\t\tjQuery(document).off(topic, subscriber);",
                "+\t\t\t\t\t} else {",
                "+\t\t\t\t\t\tjQuery(document).off(topic);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\tjQuery(document).off();",
                "+\t\t\t\t}",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t* Sends a notification to all subscribers for the given topic.",
                "+\t\t\t* Subscribers for topic '*' receive the actual topic as first parameter,",
                "+\t\t\t* otherwise the topic is not passed to subscribers which listen for specific",
                "+\t\t\t* event types.",
                "+\t\t\t*",
                "+\t\t\t* @param topic {String} - the channel name for which all subscribers will be notified.",
                "+\t\t\t*/",
                "+\t\t\tpublish: function (topic) {",
                "+\t\t\t\tif (topic) {",
                "+\t\t\t\t\t// cut the topic argument",
                "+\t\t\t\t\tvar args = Array.prototype.slice.call(arguments).slice(1);",
                "+",
                "+\t\t\t\t\tjQuery(document).triggerHandler(topic, args);",
                "+\t\t\t\t\tjQuery(document).triggerHandler('*', args);",
                "+\t\t\t\t}",
                "+\t\t\t},",
                "+",
                "+\t\t\t/**",
                "+\t\t\t * The names of the topics on which Wicket notifies",
                "+\t\t\t */",
                "+\t\t\tTopic: {",
                "+\t\t\t\tDOM_NODE_REMOVING      : '/dom/node/removing',",
                "+\t\t\t\tDOM_NODE_ADDED         : '/dom/node/added',",
                "+\t\t\t\tAJAX_CALL_INIT         : '/ajax/call/init',",
                "+\t\t\t\tAJAX_CALL_BEFORE       : '/ajax/call/before',",
                "+\t\t\t\tAJAX_CALL_PRECONDITION : '/ajax/call/precondition',",
                "+\t\t\t\tAJAX_CALL_BEFORE_SEND  : '/ajax/call/beforeSend',",
                "+\t\t\t\tAJAX_CALL_SUCCESS      : '/ajax/call/success',",
                "+\t\t\t\tAJAX_CALL_COMPLETE     : '/ajax/call/complete',",
                "+\t\t\t\tAJAX_CALL_AFTER        : '/ajax/call/after',",
                "+\t\t\t\tAJAX_CALL_FAILURE      : '/ajax/call/failure',",
                "+\t\t\t\tAJAX_CALL_DONE         : '/ajax/call/done',",
                "+\t\t\t\tAJAX_HANDLERS_BOUND    : '/ajax/handlers/bound'",
                "+\t\t\t}",
                "+\t\t}",
                "+\t});",
                " \t/**",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js",
                "deleted file mode 100644",
                "index 87f6b64016..0000000000",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js",
                "+++ /dev/null",
                "@@ -1,308 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-/*",
                "- * Wicket Ajax Support",
                "- *",
                "- * @author Igor Vaynberg",
                "- * @author Matej Knopp",
                "- */",
                "-",
                "-;(function (jQuery, undefined) {",
                "-\t'use strict';",
                "-",
                "-\tif (typeof(Wicket) === 'undefined') {",
                "-\t\twindow.Wicket = {};",
                "-\t}",
                "-",
                "-\tif (typeof(Wicket.Event) === 'object') {",
                "-\t\treturn;",
                "-\t}",
                "-",
                "-\tjQuery.extend(true, Wicket, {",
                "-",
                "-\t\tBrowser: {",
                "-\t\t\t_isKHTML: null,",
                "-\t\t\tisKHTML: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isKHTML === null) {",
                "-\t\t\t\t\twb._isKHTML = (/Konqueror|KHTML/).test(window.navigator.userAgent) && !/Apple/.test(window.navigator.userAgent);",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isKHTML;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isSafari: null,",
                "-\t\t\tisSafari: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isSafari === null) {",
                "-\t\t\t\t\twb._isSafari = !/Chrome/.test(window.navigator.userAgent) && /KHTML/.test(window.navigator.userAgent) && /Apple/.test(window.navigator.userAgent);",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isSafari;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isChrome: null,",
                "-\t\t\tisChrome: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isChrome === null) {",
                "-\t\t\t\t\twb._isChrome = (/KHTML/).test(window.navigator.userAgent) && /Apple/.test(window.navigator.userAgent) && /Chrome/.test(window.navigator.userAgent);",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isChrome;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isOpera: null,",
                "-\t\t\tisOpera: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isOpera === null) {",
                "-\t\t\t\t\twb._isOpera = !Wicket.Browser.isSafari() && typeof(window.opera) !== \"undefined\";",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isOpera;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isIE: null,",
                "-\t\t\tisIE: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isIE === null) {",
                "-\t\t\t\t\twb._isIE = !Wicket.Browser.isSafari() && (typeof(document.all) !== \"undefined\" || window.navigator.userAgent.indexOf(\"Trident/\")>-1) && typeof(window.opera) === \"undefined\";",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isIE;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isIEQuirks: null,",
                "-\t\t\tisIEQuirks: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isIEQuirks === null) {",
                "-\t\t\t\t\t// is the browser internet explorer in quirks mode (we could use document.compatMode too)",
                "-\t\t\t\t\twb._isIEQuirks = Wicket.Browser.isIE() && window.document.documentElement.clientHeight === 0;",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isIEQuirks;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isIELessThan9: null,",
                "-\t\t\tisIELessThan9: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isIELessThan9 === null) {",
                "-\t\t\t\t\tvar index = window.navigator.userAgent.indexOf(\"MSIE\");",
                "-\t\t\t\t\tvar version = parseFloat(window.navigator.userAgent.substring(index + 5));",
                "-\t\t\t\t\twb._isIELessThan9 = Wicket.Browser.isIE() && version < 9;",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isIELessThan9;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isIELessThan11: null,",
                "-\t\t\tisIELessThan11: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isIELessThan11 === null) {",
                "-\t\t\t\t\twb._isIELessThan11 = !Wicket.Browser.isSafari() && typeof(document.all) !== \"undefined\" && typeof(window.opera) === \"undefined\";",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isIELessThan11;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isIE11: null,",
                "-\t\t\tisIE11: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isIE11 === null) {",
                "-\t\t\t\t\tvar userAgent = window.navigator.userAgent;",
                "-\t\t\t\t\tvar isTrident = userAgent.indexOf(\"Trident\") > -1;",
                "-\t\t\t\t\tvar is11 = userAgent.indexOf(\"rv:11\") > -1;",
                "-\t\t\t\t\twb._isIE11 = isTrident && is11;",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isIE11;",
                "-\t\t\t},",
                "-",
                "-\t\t\t_isGecko: null,",
                "-\t\t\tisGecko: function () {",
                "-\t\t\t\tvar wb = Wicket.Browser;",
                "-\t\t\t\tif (wb._isGecko === null) {",
                "-\t\t\t\t\twb._isGecko = (/Gecko/).test(window.navigator.userAgent) && !Wicket.Browser.isSafari();",
                "-\t\t\t\t}",
                "-\t\t\t\treturn wb._isGecko;",
                "-\t\t\t}",
                "-\t\t},",
                "-",
                "-\t\t/**",
                "-\t\t * Events related code",
                "-\t\t * Based on code from Mootools (http://mootools.net)",
                "-\t\t */",
                "-\t\tEvent: {",
                "-\t\t\tidCounter: 0,",
                "-",
                "-\t\t\tgetId: function (element) {",
                "-\t\t\t\tvar $el = jQuery(element),",
                "-\t\t\t\t\tid = $el.prop(\"id\");",
                "-\t\t\t\t\t",
                "-\t\t\t\tif (typeof(id) === \"string\" && id.length > 0) {",
                "-\t\t\t\t\treturn id;",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\tid = \"wicket-generated-id-\" + Wicket.Event.idCounter++;",
                "-\t\t\t\t\t$el.prop(\"id\", id);",
                "-\t\t\t\t\treturn id;",
                "-\t\t\t\t}",
                "-\t\t\t},",
                "-",
                "-\t\t\tkeyCode: function (evt) {",
                "-\t\t\t\treturn Wicket.Event.fix(evt).keyCode;",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t * Prevent event from bubbling up in the element hierarchy.",
                "-\t\t\t * @param evt {Event} - the event to stop",
                "-\t\t\t * @param immediate {Boolean} - true if the event should not be handled by other listeners registered",
                "-\t\t\t *      on the same HTML element. Optional",
                "-\t\t\t */",
                "-\t\t\tstop: function (evt, immediate) {",
                "-\t\t\t\tevt = Wicket.Event.fix(evt);",
                "-\t\t\t\tif (immediate) {",
                "-\t\t\t\t\tevt.stopImmediatePropagation();",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\tevt.stopPropagation();",
                "-\t\t\t\t}",
                "-\t\t\t\treturn evt;",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t * If no event is given as argument (IE), window.event is returned.",
                "-\t\t\t */",
                "-\t\t\tfix: function (evt) {",
                "-\t\t\t\treturn jQuery.event.fix(evt || window.event);",
                "-\t\t\t},",
                "-",
                "-\t\t\tfire: function (element, event) {",
                "-\t\t\t\tevent = (event === 'mousewheel' && Wicket.Browser.isGecko()) ? 'DOMMouseScroll' : event;",
                "-\t\t\t\tjQuery(element).trigger(event);",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t * Binds an event listener for an element",
                "-\t\t\t *",
                "-\t\t\t * Also supports the special 'domready' event on window.",
                "-\t\t\t * 'domready' is event fired when the DOM is complete, but",
                "-\t\t\t * before loading external resources (images, scripts, ...)",
                "-\t\t\t *",
                "-\t\t\t * @param element {HTMLElement} The host HTML element",
                "-\t\t\t * @param type {String} The type of the DOM event",
                "-\t\t\t * @param fn {Function} The event handler to unbind",
                "-\t\t\t * @param data {Object} Extra data for the event",
                "-\t\t\t * @param selector {String} A selector string to filter the descendants of the selected",
                "-\t\t\t *      elements that trigger the event. If the selector is null or omitted,",
                "-\t\t\t *      the event is always triggered when it reaches the selected element.",
                "-\t\t\t */",
                "-\t\t\tadd: function (element, type, fn, data, selector) {",
                "-\t\t\t\tif (type === 'domready') {",
                "-\t\t\t\t\tjQuery(fn);",
                "-\t\t\t\t} else if (type === 'load' && element === window) {",
                "-\t\t\t\t\tjQuery(window).on('load', function() {",
                "-\t\t\t\t\t\tjQuery(fn);",
                "-\t\t\t\t\t});",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\ttype = (type === 'mousewheel' && Wicket.Browser.isGecko()) ? 'DOMMouseScroll' : type;",
                "-\t\t\t\t\tvar el = element;",
                "-\t\t\t\t\tif (typeof(element) === 'string') {",
                "-\t\t\t\t\t\tel = document.getElementById(element);",
                "-\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\tif (!el && Wicket.Log) {",
                "-\t\t\t\t\t\tWicket.Log.error('Cannot bind a listener for event \"' + type +",
                "-\t\t\t\t\t\t\t'\" on element \"' + element + '\" because the element is not in the DOM');",
                "-\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\tjQuery(el).on(type, selector, data, fn);",
                "-\t\t\t\t}",
                "-\t\t\t\treturn element;",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t * Unbinds an event listener for an element",
                "-\t\t\t *",
                "-\t\t\t * @param element {HTMLElement} The host HTML element",
                "-\t\t\t * @param type {String} The type of the DOM event",
                "-\t\t\t * @param fn {Function} The event handler to unbind",
                "-\t\t\t */",
                "-\t\t\tremove: function (element, type, fn) {",
                "-\t\t\t\tjQuery(element).off(type, fn);",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t* Adds a subscriber for the passed topic.",
                "-\t\t\t*",
                "-\t\t\t* @param topic {String} - the channel name for which this subscriber will be notified",
                "-\t\t\t*        If '*' then it will be notified for all topics",
                "-\t\t\t* @param subscriber {Function} - the callback to call when an event with this type is published",
                "-\t\t\t*/",
                "-\t\t\tsubscribe: function (topic, subscriber) {",
                "-\t\t\t\t",
                "-\t\t\t\tif (topic) {",
                "-\t\t\t\t\tjQuery(document).on(topic, subscriber);",
                "-\t\t\t\t}",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t * Un-subscribes a subscriber from a topic.",
                "-\t\t\t * @param topic {String} - the topic name. If omitted un-subscribes all",
                "-\t\t\t *      subscribers from all topics",
                "-\t\t\t * @param subscriber {Function} - the handler to un-subscribe. If omitted then",
                "-\t\t\t *      all subscribers are removed from this topic",
                "-\t\t\t */",
                "-\t\t\tunsubscribe: function(topic, subscriber) {",
                "-\t\t\t\tif (topic) {",
                "-\t\t\t\t\tif (subscriber) {",
                "-\t\t\t\t\t\tjQuery(document).off(topic, subscriber);",
                "-\t\t\t\t\t} else {",
                "-\t\t\t\t\t\tjQuery(document).off(topic);",
                "-\t\t\t\t\t}",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\tjQuery(document).off();",
                "-\t\t\t\t}",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t* Sends a notification to all subscribers for the given topic.",
                "-\t\t\t* Subscribers for topic '*' receive the actual topic as first parameter,",
                "-\t\t\t* otherwise the topic is not passed to subscribers which listen for specific",
                "-\t\t\t* event types.",
                "-\t\t\t*",
                "-\t\t\t* @param topic {String} - the channel name for which all subscribers will be notified.",
                "-\t\t\t*/",
                "-\t\t\tpublish: function (topic) {",
                "-\t\t\t\tif (topic) {",
                "-\t\t\t\t\t// cut the topic argument",
                "-\t\t\t\t\tvar args = Array.prototype.slice.call(arguments).slice(1);",
                "-\t\t\t",
                "-\t\t\t\t\tjQuery(document).triggerHandler(topic, args);",
                "-\t\t\t\t\tjQuery(document).triggerHandler('*', args);",
                "-\t\t\t\t}",
                "-\t\t\t},",
                "-",
                "-\t\t\t/**",
                "-\t\t\t * The names of the topics on which Wicket notifies",
                "-\t\t\t */",
                "-\t\t\tTopic: {",
                "-\t\t\t\tDOM_NODE_REMOVING      : '/dom/node/removing',",
                "-\t\t\t\tDOM_NODE_ADDED         : '/dom/node/added',",
                "-\t\t\t\tAJAX_CALL_INIT         : '/ajax/call/init',",
                "-\t\t\t\tAJAX_CALL_BEFORE       : '/ajax/call/before',",
                "-\t\t\t\tAJAX_CALL_PRECONDITION : '/ajax/call/precondition',",
                "-\t\t\t\tAJAX_CALL_BEFORE_SEND  : '/ajax/call/beforeSend',",
                "-\t\t\t\tAJAX_CALL_SUCCESS      : '/ajax/call/success',",
                "-\t\t\t\tAJAX_CALL_COMPLETE     : '/ajax/call/complete',",
                "-\t\t\t\tAJAX_CALL_AFTER        : '/ajax/call/after',",
                "-\t\t\t\tAJAX_CALL_FAILURE      : '/ajax/call/failure',",
                "-\t\t\t\tAJAX_CALL_DONE         : '/ajax/call/done',",
                "-\t\t\t\tAJAX_HANDLERS_BOUND    : '/ajax/handlers/bound'",
                "-\t\t\t}",
                "-\t\t}",
                "-\t});",
                "-})(jQuery);",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnDomReadyHeaderItem.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnDomReadyHeaderItem.java",
                "index 45ec472665..cc51588363 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnDomReadyHeaderItem.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnDomReadyHeaderItem.java",
                "@@ -23,2 +23,3 @@ import java.util.Objects;",
                " import org.apache.wicket.Application;",
                "+import org.apache.wicket.core.util.string.JavaScriptUtils;",
                " import org.apache.wicket.request.Response;",
                "@@ -26,3 +27,2 @@ import org.apache.wicket.request.resource.ResourceReference;",
                " import org.apache.wicket.settings.JavaScriptLibrarySettings;",
                "-import org.apache.wicket.core.util.string.JavaScriptUtils;",
                " import org.apache.wicket.util.string.Strings;",
                "@@ -32,3 +32,3 @@ import org.apache.wicket.util.string.Strings;",
                "  * but before external resources, such as images, are loaded.",
                "- * ",
                "+ *",
                "  * @author papegaaij",
                "@@ -37,8 +37,10 @@ public class OnDomReadyHeaderItem extends HeaderItem",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t/**",
                " \t * Creates a {@link OnDomReadyHeaderItem} for the script.",
                "-\t * ",
                "+\t *",
                " \t * @param javaScript",
                " \t *            The script to execute on the DOM ready event.",
                "-\t * ",
                "+\t *",
                " \t * @return A newly created {@link OnDomReadyHeaderItem}.",
                "@@ -64,3 +66,3 @@ public class OnDomReadyHeaderItem extends HeaderItem",
                " \t * Construct.",
                "-\t * ",
                "+\t *",
                " \t * @param javaScript",
                "@@ -122,5 +124,5 @@ public class OnDomReadyHeaderItem extends HeaderItem",
                " \t\tJavaScriptLibrarySettings ajaxSettings = Application.get().getJavaScriptLibrarySettings();",
                "-\t\tResourceReference wicketEventReference = ajaxSettings.getWicketEventReference();",
                "+\t\tResourceReference wicketAjaxReference = ajaxSettings.getWicketAjaxReference();",
                " \t\tList<HeaderItem> dependencies = super.getDependencies();",
                "-\t\tdependencies.add(JavaScriptHeaderItem.forReference(wicketEventReference));",
                "+\t\tdependencies.add(JavaScriptHeaderItem.forReference(wicketAjaxReference));",
                " \t\treturn dependencies;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "index b69e7a487d..0e5f741602 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "@@ -33,3 +33,3 @@ import org.apache.wicket.util.string.Strings;",
                "  * {@link HeaderItem} for event triggered scripts.",
                "- * ",
                "+ *",
                "  * @author papegaaij",
                "@@ -38,5 +38,7 @@ public class OnEventHeaderItem extends HeaderItem",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t/**",
                " \t * Creates a {@link OnEventHeaderItem} for the given parameters.",
                "-\t * ",
                "+\t *",
                " \t * @param target",
                "@@ -47,3 +49,3 @@ public class OnEventHeaderItem extends HeaderItem",
                " \t *            The script to execute on the event.",
                "-\t * ",
                "+\t *",
                " \t * @return A newly created {@link OnEventHeaderItem}.",
                "@@ -74,3 +76,3 @@ public class OnEventHeaderItem extends HeaderItem",
                " \t * Construct.",
                "-\t * ",
                "+\t *",
                " \t * @param target",
                "@@ -182,5 +184,5 @@ public class OnEventHeaderItem extends HeaderItem",
                " \t\tJavaScriptLibrarySettings ajaxSettings = Application.get().getJavaScriptLibrarySettings();",
                "-\t\tResourceReference wicketEventReference = ajaxSettings.getWicketEventReference();",
                "+\t\tResourceReference wicketAjaxReference = ajaxSettings.getWicketAjaxReference();",
                " \t\tList<HeaderItem> dependencies = super.getDependencies();",
                "-\t\tdependencies.add(JavaScriptHeaderItem.forReference(wicketEventReference));",
                "+\t\tdependencies.add(JavaScriptHeaderItem.forReference(wicketAjaxReference));",
                " \t\treturn dependencies;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnLoadHeaderItem.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnLoadHeaderItem.java",
                "index 51e34bf467..3cd2cdeb54 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnLoadHeaderItem.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnLoadHeaderItem.java",
                "@@ -31,3 +31,3 @@ import org.apache.wicket.util.string.Strings;",
                "  * {@link HeaderItem} for scripts that need to be executed after the entire page is loaded.",
                "- * ",
                "+ *",
                "  * @author papegaaij",
                "@@ -36,8 +36,10 @@ public class OnLoadHeaderItem extends HeaderItem",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t/**",
                " \t * Creates a {@link OnLoadHeaderItem} for the script.",
                "-\t * ",
                "+\t *",
                " \t * @param javaScript",
                " \t *            The script to execute on the load event.",
                "-\t * ",
                "+\t *",
                " \t * @return A newly created {@link OnLoadHeaderItem}.",
                "@@ -63,3 +65,3 @@ public class OnLoadHeaderItem extends HeaderItem",
                " \t * Construct.",
                "-\t * ",
                "+\t *",
                " \t * @param javaScript",
                "@@ -122,5 +124,5 @@ public class OnLoadHeaderItem extends HeaderItem",
                " \t\tJavaScriptLibrarySettings ajaxSettings = Application.get().getJavaScriptLibrarySettings();",
                "-\t\tResourceReference wicketEventReference = ajaxSettings.getWicketEventReference();",
                "+\t\tResourceReference wicketAjaxReference = ajaxSettings.getWicketAjaxReference();",
                " \t\tList<HeaderItem> dependencies = super.getDependencies();",
                "-\t\tdependencies.add(JavaScriptHeaderItem.forReference(wicketEventReference));",
                "+\t\tdependencies.add(JavaScriptHeaderItem.forReference(wicketAjaxReference));",
                " \t\treturn dependencies;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AbstractCheckSelector.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AbstractCheckSelector.java",
                "index 84d16fa1a6..049d49e523 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AbstractCheckSelector.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AbstractCheckSelector.java",
                "@@ -21,3 +21,3 @@ import java.util.List;",
                " import org.apache.wicket.Application;",
                "-import org.apache.wicket.ajax.WicketEventJQueryResourceReference;",
                "+import org.apache.wicket.ajax.WicketAjaxJQueryResourceReference;",
                " import org.apache.wicket.markup.ComponentTag;",
                "@@ -35,3 +35,3 @@ import org.apache.wicket.request.resource.ResourceReference;",
                "  * controls (see {@link #wantAutomaticUpdate()}).",
                "- * ",
                "+ *",
                "  * @see CheckboxMultipleChoiceSelector",
                "@@ -39,3 +39,3 @@ import org.apache.wicket.request.resource.ResourceReference;",
                "  * @see CheckBoxSelector",
                "- * ",
                "+ *",
                "  * @author Carl-Eric Menzel <cmenzel@wicketbuch.de>",
                "@@ -60,5 +60,5 @@ public abstract class AbstractCheckSelector extends LabeledWebMarkupContainer",
                " \t\t\tList<HeaderItem> dependencies = super.getDependencies();",
                "-\t\t\tResourceReference wicketEventReference = WicketEventJQueryResourceReference.get();",
                "+\t\t\tResourceReference wicketEventReference = WicketAjaxJQueryResourceReference.get();",
                " \t\t\tif (Application.exists()) {",
                "-\t\t\t\twicketEventReference = Application.get().getJavaScriptLibrarySettings().getWicketEventReference();",
                "+\t\t\t\twicketEventReference = Application.get().getJavaScriptLibrarySettings().getWicketAjaxReference();",
                " \t\t\t}",
                "@@ -71,3 +71,3 @@ public abstract class AbstractCheckSelector extends LabeledWebMarkupContainer",
                " \t * Construct.",
                "-\t * ",
                "+\t *",
                " \t * @param id",
                "@@ -128,3 +128,3 @@ public abstract class AbstractCheckSelector extends LabeledWebMarkupContainer",
                " \t * of all checkboxes that should be controlled by this selector.",
                "-\t * ",
                "+\t *",
                " \t * @return a String containing a Javascript expression that evaluates to a function(!). This",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/resource/CoreLibrariesContributor.java b/wicket-core/src/main/java/org/apache/wicket/resource/CoreLibrariesContributor.java",
                "index be32b02ae8..49da713293 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/resource/CoreLibrariesContributor.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/resource/CoreLibrariesContributor.java",
                "@@ -28,3 +28,3 @@ import org.apache.wicket.settings.JavaScriptLibrarySettings;",
                "  * functionality",
                "- * ",
                "+ *",
                "  * @since 6.0",
                "@@ -35,3 +35,3 @@ public class CoreLibrariesContributor",
                " \t * Contributes the backing library plus the implementation of Wicket.Event.",
                "-\t * ",
                "+\t *",
                " \t * @param application",
                "@@ -44,4 +44,4 @@ public class CoreLibrariesContributor",
                " \t\tJavaScriptLibrarySettings jsLibrarySettings = application.getJavaScriptLibrarySettings();",
                "-\t\tResourceReference wicketEventReference = jsLibrarySettings.getWicketEventReference();",
                "-\t\tresponse.render(JavaScriptHeaderItem.forReference(wicketEventReference));",
                "+\t\tResourceReference wicketAjaxReference = jsLibrarySettings.getWicketAjaxReference();",
                "+\t\tresponse.render(JavaScriptHeaderItem.forReference(wicketAjaxReference));",
                " \t}",
                "@@ -51,3 +51,3 @@ public class CoreLibrariesContributor",
                " \t * Additionally if Ajax debug is enabled then wicket-ajax-debug.js implementation is also added.",
                "-\t * ",
                "+\t *",
                " \t * @param application",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/settings/JavaScriptLibrarySettings.java b/wicket-core/src/main/java/org/apache/wicket/settings/JavaScriptLibrarySettings.java",
                "index 7520211290..0c7f54a9bb 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/settings/JavaScriptLibrarySettings.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/settings/JavaScriptLibrarySettings.java",
                "@@ -20,5 +20,3 @@ import org.apache.wicket.ajax.WicketAjaxDebugJQueryResourceReference;",
                " import org.apache.wicket.ajax.WicketAjaxJQueryResourceReference;",
                "-import org.apache.wicket.ajax.WicketEventJQueryResourceReference;",
                " import org.apache.wicket.request.resource.ResourceReference;",
                "-import org.apache.wicket.resource.DynamicJQueryResourceReference;",
                " import org.apache.wicket.resource.JQueryResourceReference;",
                "@@ -40,5 +38,3 @@ public class JavaScriptLibrarySettings",
                " {",
                "-\tprivate ResourceReference jQueryReference = DynamicJQueryResourceReference.getV2();",
                "-",
                "-\tprivate ResourceReference wicketEventReference = WicketEventJQueryResourceReference.get();",
                "+\tprivate ResourceReference jQueryReference = JQueryResourceReference.getV2();",
                "@@ -69,21 +65,2 @@ public class JavaScriptLibrarySettings",
                "-\t/**",
                "-\t * @return the reference to the implementation of wicket-event.js",
                "-\t */",
                "-\tpublic ResourceReference getWicketEventReference()",
                "-\t{",
                "-\t\treturn wicketEventReference;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param wicketEventReference",
                "-\t *            a reference to the implementation of wicket-event.js",
                "-\t * @return {@code this} object for chaining",
                "-\t */",
                "-\tpublic JavaScriptLibrarySettings setWicketEventReference(ResourceReference wicketEventReference)",
                "-\t{",
                "-\t\tthis.wicketEventReference = Args.notNull(wicketEventReference, \"wicketEventReference\");",
                "-\t\treturn this;",
                "-\t}",
                "-",
                " \t/**",
                "@@ -128,3 +105,2 @@ public class JavaScriptLibrarySettings",
                " \t}",
                "-",
                " }"
            ],
            "changed_files": [
                "testing/wicket-js-tests/Gruntfile.js",
                "wicket-core/src/main/java/org/apache/wicket/ajax/WicketAjaxJQueryResourceReference.java",
                "wicket-core/src/main/java/org/apache/wicket/ajax/WicketEventJQueryResourceReference.java",
                "wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-event-jquery.js",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/OnDomReadyHeaderItem.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/OnLoadHeaderItem.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/AbstractCheckSelector.java",
                "wicket-core/src/main/java/org/apache/wicket/resource/CoreLibrariesContributor.java",
                "wicket-core/src/main/java/org/apache/wicket/settings/JavaScriptLibrarySettings.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6497": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: jquery",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: jquery",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6497",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "015cd3fe6054ac133aafba04f71102836297981b",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1512492154,
            "hunks": 1,
            "message": "WICKET-6480 Added JavaDoc to explain how to customize JavaScript code onclick handler",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java",
                "index bace3aee04..80e01d9744 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java",
                "@@ -64,2 +64,6 @@ import org.apache.wicket.request.mapper.parameter.PageParameters;",
                "  * </p>",
                "+ * <p>",
                "+ * To customize the JavaScript code used to submit the form we must override {@link #getTriggerJavaScript()}. ",
                "+ * This can be helpful to implement additional client side behaviors like disabling the link during form submission.",
                "+ * </p>",
                "  * "
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6480": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dd5449e2b970be29b95c50ac420c23f4d39e969e"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6480",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "02808f7d08faab05432515b29d8e6e25e5343fe0",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514673156,
            "hunks": 1,
            "message": "WICKET-6483 JavaxUpgradeHttpRequest can cause NullPointerException WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request Use HttpServletRequest.getSession(false) to make it more explicit that it is not possible to create a new HttpSession in WebSocket request. If the session is existing it will be used, otherwise an exception will be thrown explaining the problem.",
            "diff": [
                "diff --git a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "index ca3569d63a..550423dd42 100644",
                "--- a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "+++ b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "@@ -104,3 +104,3 @@ public abstract class AbstractWebSocketProcessor implements IWebSocketProcessor",
                " \t{",
                "-\t\tfinal HttpSession httpSession = request.getSession(true);",
                "+\t\tfinal HttpSession httpSession = request.getSession(false);",
                " \t\tif (httpSession == null)"
            ],
            "changed_files": [
                "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6483": "",
                "WICKET-6493": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1b9f810f3acc6fe1eff0d404a456d15e8abe8636"
                ],
                [
                    "no-tag",
                    "4b8ac4c8cc14f2926312e2572fee4299256e7b11"
                ],
                [
                    "no-tag",
                    "d02bc37b0cc555fc6b02f054f94c721cc38be907"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: create",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6483, WICKET-6493",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2bb684c11a1d8b91db5c3d3040da734ed357a2bc",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1456525691,
            "hunks": 97,
            "message": "WICKET-6105 Decommission wicket-datetime Move DateLabel and all Date formatters from wicket-datetime to wicket-extensions module WIP! WIP: Move some more code from -datetime to -extensions while trying to keep old APIs (j.u.Date based ones) available for easier migration",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index a5cf4dbbd7..3c2657ed2e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -91,3 +91,2 @@",
                " \t\t<module>wicket-util</module>",
                "-\t\t<module>wicket-datetime</module>",
                " \t\t<module>wicket-request</module>",
                "@@ -249,7 +248,2 @@",
                " \t\t\t</dependency>",
                "-\t\t\t<dependency>",
                "-\t\t\t\t<groupId>joda-time</groupId>",
                "-\t\t\t\t<artifactId>joda-time</artifactId>",
                "-\t\t\t\t<version>${joda-time.version}</version>",
                "-\t\t\t</dependency>",
                " \t\t\t<dependency>",
                "diff --git a/testing/wicket-common-tests/pom.xml b/testing/wicket-common-tests/pom.xml",
                "index 62ccc6131c..a8a3750745 100644",
                "--- a/testing/wicket-common-tests/pom.xml",
                "+++ b/testing/wicket-common-tests/pom.xml",
                "@@ -59,7 +59,2 @@",
                " \t\t</dependency>",
                "-\t\t<dependency>",
                "-\t\t\t<groupId>org.apache.wicket</groupId>",
                "-\t\t\t<artifactId>wicket-datetime</artifactId>",
                "-\t\t\t<scope>test</scope>",
                "-\t\t</dependency>",
                " \t\t<dependency>",
                "diff --git a/testing/wicket-js-tests/Gruntfile.js b/testing/wicket-js-tests/Gruntfile.js",
                "index 6cb79bd060..29b746b4c0 100644",
                "--- a/testing/wicket-js-tests/Gruntfile.js",
                "+++ b/testing/wicket-js-tests/Gruntfile.js",
                "@@ -36,5 +36,2 @@ module.exports = function(grunt) {",
                " \t\t],",
                "-\t\tdatetimeJs = [",
                "-\t\t\t\"../../wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/wicket-date.js\"",
                "-\t\t],",
                " \t\tnativeWebSocketJs = [",
                "@@ -77,3 +74,2 @@ module.exports = function(grunt) {",
                " \t\t\textensions: extensionsJs,",
                "-\t\t\tdatetime: datetimeJs,",
                " \t\t\tnativeWebSocket: nativeWebSocketJs,",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java",
                "index 0112614a01..c85772a59c 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java",
                "@@ -42,4 +42,3 @@ import org.apache.wicket.util.visit.IVisitor;",
                "  * master model object. Note that for this simple example, setting the model value wouldn't make",
                "- * sense, as the lhs and rhs cannot be known. For more complete examples of using this class, see",
                "- * the wicket-datetime project.",
                "+ * sense, as the lhs and rhs cannot be known.",
                "  * </p>",
                "diff --git a/wicket-datetime/pom.xml b/wicket-datetime/pom.xml",
                "deleted file mode 100644",
                "index 26330c3853..0000000000",
                "--- a/wicket-datetime/pom.xml",
                "+++ /dev/null",
                "@@ -1,64 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<!--",
                "-   Licensed to the Apache Software Foundation (ASF) under one or more",
                "-   contributor license agreements.  See the NOTICE file distributed with",
                "-   this work for additional information regarding copyright ownership.",
                "-   The ASF licenses this file to You under the Apache License, Version 2.0",
                "-   (the \"License\"); you may not use this file except in compliance with",
                "-   the License.  You may obtain a copy of the License at",
                "-",
                "-        http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-   Unless required by applicable law or agreed to in writing, software",
                "-   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-   See the License for the specific language governing permissions and",
                "-   limitations under the License.",
                "--->",
                "-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">",
                "-\t<modelVersion>4.0.0</modelVersion>",
                "-\t<parent>",
                "-\t\t<groupId>org.apache.wicket</groupId>",
                "-\t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "-\t\t<relativePath>../pom.xml</relativePath>",
                "-\t</parent>",
                "-\t<artifactId>wicket-datetime</artifactId>",
                "-\t<packaging>bundle</packaging>",
                "-\t<name>Wicket Date/Time</name>",
                "-\t<description>Date/Time components and utilities for Wicket</description>",
                "-\t<dependencies>",
                "-\t\t<dependency>",
                "-\t\t\t<groupId>joda-time</groupId>",
                "-\t\t\t<artifactId>joda-time</artifactId>",
                "-\t\t</dependency>",
                "-\t\t<dependency>",
                "-\t\t\t<groupId>org.apache.wicket</groupId>",
                "-\t\t\t<artifactId>wicket-core</artifactId>",
                "-\t\t</dependency>",
                "-\t</dependencies>",
                "-\t<build>",
                "-\t\t<plugins>",
                "-\t\t\t<plugin>",
                "-\t\t\t\t<groupId>org.apache.felix</groupId>",
                "-\t\t\t\t<artifactId>maven-bundle-plugin</artifactId>",
                "-\t\t\t\t<executions>",
                "-\t\t\t\t\t<execution>",
                "-\t\t\t\t\t\t<id>bundle-manifest</id>",
                "-\t\t\t\t\t\t<phase>process-classes</phase>",
                "-\t\t\t\t\t\t<goals>",
                "-\t\t\t\t\t\t\t<goal>manifest</goal>",
                "-\t\t\t\t\t\t</goals>",
                "-\t\t\t\t\t\t<configuration>",
                "-\t\t\t\t\t\t\t<instructions>",
                "-\t\t\t\t\t\t\t\t<Export-Package>",
                "-\t\t\t\t\t\t\t\t\t!org.apache.wicket.extensions.yui.yahoo-dom-event,* ",
                "-\t\t\t\t\t\t\t\t</Export-Package>",
                "-\t\t\t\t\t\t\t</instructions>",
                "-\t\t\t\t\t\t</configuration>",
                "-\t\t\t\t\t</execution>",
                "-\t\t\t\t</executions>",
                "-\t\t\t</plugin>",
                "-\t\t</plugins>",
                "-\t</build>",
                "-</project>",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/datetime/markup/html/basic/DateLabel.java b/wicket-datetime/src/main/java/org/apache/wicket/datetime/markup/html/basic/DateLabel.java",
                "deleted file mode 100644",
                "index 3459397257..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/datetime/markup/html/basic/DateLabel.java",
                "+++ /dev/null",
                "@@ -1,304 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.datetime.markup.html.basic;",
                "-",
                "-import java.text.SimpleDateFormat;",
                "-import java.util.Date;",
                "-",
                "-import org.apache.wicket.IGenericComponent;",
                "-import org.apache.wicket.datetime.DateConverter;",
                "-import org.apache.wicket.datetime.PatternDateConverter;",
                "-import org.apache.wicket.datetime.StyleDateConverter;",
                "-import org.apache.wicket.markup.ComponentTag;",
                "-import org.apache.wicket.markup.MarkupStream;",
                "-import org.apache.wicket.markup.html.basic.Label;",
                "-import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.util.convert.IConverter;",
                "-import org.joda.time.DateTime;",
                "-import org.joda.time.DateTimeZone;",
                "-import org.joda.time.format.DateTimeFormat;",
                "-",
                "-",
                "-/**",
                "- * A label that is mapped to a <code>java.util.Date</code> object and that uses Joda time to format",
                "- * values.",
                "- * <p>",
                "- * You can provide a date pattern in two of the constructors. When not provided,",
                "- * {@link DateTimeFormat#shortDate()} will be used.",
                "- * </p>",
                "- * <p>",
                "- * A special option is applyTimeZoneDifference which is an option that says whether to correct for",
                "- * the difference between the client's time zone and server's time zone. This is true by default.",
                "- * </p>",
                "- * ",
                "- * @see DateTime",
                "- * @see DateTimeFormat",
                "- * @see DateTimeZone",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class DateLabel extends Label implements IGenericComponent<Date, DateLabel>",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param datePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel forDatePattern(String id, IModel<Date> model, String datePattern)",
                "-\t{",
                "-\t\treturn new DateLabel(id, model, new PatternDateConverter(datePattern, true));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param datePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel forDatePattern(String id, String datePattern)",
                "-\t{",
                "-\t\treturn forDatePattern(id, null, datePattern);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param dateStyle",
                "-\t *            style to use in case no pattern is provided. Must be two characters from the set",
                "-\t *            {\"S\", \"M\", \"L\", \"F\", \"-\"}. Must be not null. See",
                "-\t *            {@link DateTimeFormat#forStyle(String)} for options.",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel forDateStyle(String id, IModel<Date> model, String dateStyle)",
                "-\t{",
                "-\t\treturn new DateLabel(id, model, new StyleDateConverter(dateStyle, true));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param dateStyle",
                "-\t *            style to use in case no pattern is provided. Must be two characters from the set",
                "-\t *            {\"S\", \"M\", \"L\", \"F\", \"-\"}. Must be not null. See",
                "-\t *            {@link DateTimeFormat#forStyle(String)} for options.",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel forDateStyle(String id, String dateStyle)",
                "-\t{",
                "-\t\treturn forDateStyle(id, null, dateStyle);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel forShortStyle(String id)",
                "-\t{",
                "-\t\treturn forShortStyle(id, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel forShortStyle(String id, IModel<Date> model)",
                "-\t{",
                "-\t\treturn new DateLabel(id, model, new StyleDateConverter(true));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel using the provided converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param converter",
                "-\t *            the date converter",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel withConverter(String id, DateConverter converter)",
                "-\t{",
                "-\t\treturn withConverter(id, null, converter);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateLabel using the provided converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param converter",
                "-\t *            the date converter",
                "-\t * @return new instance",
                "-\t * ",
                "-\t * @see org.apache.wicket.markup.html.form.TextField",
                "-\t */",
                "-\tpublic static DateLabel withConverter(String id, IModel<Date> model, DateConverter converter)",
                "-\t{",
                "-\t\treturn new DateLabel(id, model, converter);",
                "-\t}",
                "-",
                "-\t/** optionally prepend to label. */",
                "-\tprivate String after;",
                "-",
                "-\t/** optionally append to label. */",
                "-\tprivate String before;",
                "-",
                "-\t/**",
                "-\t * The converter for the Label",
                "-\t */",
                "-\tprivate final DateConverter converter;",
                "-",
                "-\t/**",
                "-\t * Construct with a converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The component id",
                "-\t * @param converter",
                "-\t *            The converter to use",
                "-\t */",
                "-\tpublic DateLabel(String id, DateConverter converter)",
                "-\t{",
                "-\t\tthis(id, null, converter);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct with a converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The component id",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param converter",
                "-\t *            The converter to use",
                "-\t */",
                "-\tpublic DateLabel(String id, IModel<Date> model, DateConverter converter)",
                "-\t{",
                "-\t\tsuper(id, model);",
                "-\t\tif (converter == null)",
                "-\t\t{",
                "-\t\t\tthrow new IllegalStateException(\"converter may not be null\");",
                "-\t\t}",
                "-\t\tthis.converter = converter;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return after append to label or null",
                "-\t */",
                "-\tpublic String getAfter()",
                "-\t{",
                "-\t\treturn after;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return before prepend to label or null",
                "-\t */",
                "-\tpublic String getBefore()",
                "-\t{",
                "-\t\treturn before;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the specialized converter.",
                "-\t */",
                "-\t@Override",
                "-\tprotected IConverter<?> createConverter(Class<?> type)",
                "-\t{",
                "-\t\tif (Date.class.isAssignableFrom(type))",
                "-\t\t{",
                "-\t\t\treturn converter;",
                "-\t\t}",
                "-\t\treturn null;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param after",
                "-\t *            append to label",
                "-\t */",
                "-\tpublic void setAfter(String after)",
                "-\t{",
                "-\t\tthis.after = after;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param before",
                "-\t *            prepend to label",
                "-\t */",
                "-\tpublic void setBefore(String before)",
                "-\t{",
                "-\t\tthis.before = before;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * {@inheritDoc}",
                "-\t */",
                "-\t@Override",
                "-\tpublic void onComponentTagBody(MarkupStream markupStream, ComponentTag openTag)",
                "-\t{",
                "-\t\tString s = getDefaultModelObjectAsString();",
                "-\t\tif (before != null)",
                "-\t\t{",
                "-\t\t\ts = before + s;",
                "-\t\t}",
                "-\t\tif (after != null)",
                "-\t\t{",
                "-\t\t\ts = s + after;",
                "-\t\t}",
                "-\t\treplaceComponentTagBody(markupStream, openTag, s);",
                "-\t}",
                "-}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/VERSION b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/VERSION",
                "deleted file mode 100644",
                "index 094e00c2a0..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/VERSION",
                "+++ /dev/null",
                "@@ -1,2 +0,0 @@",
                "-http://developer.yahoo.com/yui/",
                "-this version: 2.8.2r1",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/YuiLib.java b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/YuiLib.java",
                "deleted file mode 100644",
                "index f8cfec5c87..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/YuiLib.java",
                "+++ /dev/null",
                "@@ -1,71 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.yui;",
                "-",
                "-import org.apache.wicket.Application;",
                "-import org.apache.wicket.markup.head.IHeaderResponse;",
                "-import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                "-import org.apache.wicket.request.resource.PackageResourceReference;",
                "-import org.apache.wicket.request.resource.ResourceReference;",
                "-",
                "-/**",
                "- * Use the {@link #load(org.apache.wicket.markup.head.IHeaderResponse)} method to initialize the YUI library using the YUI loader.",
                "- * It is OK to call this multiple times.",
                "- * ",
                "- * By default the resource stream gets gzipped. You may disable it via",
                "- * Application.get().getResourceSettings().getDisableGZipCompression()",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public final class YuiLib",
                "-{",
                "-\tprivate static ResourceReference YUILOADER;",
                "-",
                "-\t/**",
                "-\t * Load the YUI loader script. After that, you can declare YUI dependencies using",
                "-\t * YAHOO.util.YUILoader.",
                "-\t * ",
                "-\t * @param response",
                "-\t *            header response",
                "-\t */",
                "-\tpublic static void load(IHeaderResponse response)",
                "-\t{",
                "-\t\tresponse.render(JavaScriptHeaderItem.forReference(getYuiLoader()));",
                "-\t}",
                "-",
                "-\tprivate static ResourceReference getYuiLoader()",
                "-\t{",
                "-\t\tif (YUILOADER == null)",
                "-\t\t{",
                "-\t\t\tStringBuilder sb = new StringBuilder(\"yuiloader/yuiloader\");",
                "-\t\t\tif (Application.get().usesDeploymentConfig())",
                "-\t\t\t{",
                "-\t\t\t\tsb.append(\"-min\");",
                "-\t\t\t}",
                "-\t\t\tsb.append(\".js\");",
                "-\t\t\tYUILOADER = new PackageResourceReference(YuiLib.class, sb.toString());",
                "-\t\t}",
                "-\t\treturn YUILOADER;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Prevent construction.",
                "-\t */",
                "-\tprivate YuiLib()",
                "-\t{",
                "-\t}",
                "-}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/assets/skins/sam/sprite.png b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/assets/skins/sam/sprite.png",
                "deleted file mode 100644",
                "index 73634d6a22..0000000000",
                "Binary files a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/assets/skins/sam/sprite.png and /dev/null differ",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/AbstractCalendar.java b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/AbstractCalendar.java",
                "deleted file mode 100644",
                "index b448196564..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/AbstractCalendar.java",
                "+++ /dev/null",
                "@@ -1,260 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.yui.calendar;",
                "-",
                "-import java.util.Iterator;",
                "-import java.util.Map;",
                "-import java.util.Map.Entry;",
                "-import java.util.Properties;",
                "-",
                "-import org.apache.wicket.extensions.yui.YuiLib;",
                "-import org.apache.wicket.markup.head.CssHeaderItem;",
                "-import org.apache.wicket.markup.head.IHeaderResponse;",
                "-import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                "-import org.apache.wicket.markup.html.WebComponent;",
                "-import org.apache.wicket.request.resource.PackageResourceReference;",
                "-",
                "-",
                "-/**",
                "- * Abstract calendar component based on the YUI (Yahoo User Interface library) javascript widget.",
                "- * <p>",
                "- * Although this component by itself is fully functional, it doesn't do much other than just",
                "- * displaying the calendar. Hence, this class is abstract.",
                "- * </p>",
                "- * <p>",
                "- * An easy way to build upon this component is to override",
                "- * {@link #appendToInit(String, String, String, StringBuffer)} and add event handlers etc. in the",
                "- * YUI widget's initialization function.",
                "- * </p>",
                "- * See <a href=\"http://developer.yahoo.com/yui/calendar/\">YUI's calendar documentation</a> for more",
                "- * info.",
                "- * ",
                "- * @author eelcohillenius",
                "- * ",
                "- * @see DatePicker",
                "- */",
                "-// TODO provide localization strings (base them on the messages of",
                "-// JsDatePicker?)",
                "-public abstract class AbstractCalendar extends WebComponent",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\tprivate final boolean contributeDependencies;",
                "-",
                "-\t/**",
                "-\t * Construct. Contributes packaged dependencies.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The component id",
                "-\t */",
                "-\tpublic AbstractCalendar(String id)",
                "-\t{",
                "-\t\tthis(id, true);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The component id",
                "-\t * @param contributeDependencies",
                "-\t *            Whether to contribute the packaged dependencies. Pass false in case you want to",
                "-\t *            include the dependencies manually in your own page, e.g. when you want to keep",
                "-\t *            them in your web application dir. To contribute yourself (in case you want to pass",
                "-\t *            false), your page header should look like:",
                "-\t * ",
                "-\t *            <pre>",
                "-\t * \t &lt;script type=&quot;text/javascript&quot; src=&quot;yahoo.js&quot;&gt;&lt;/script&gt;",
                "-\t * \t &lt;script type=&quot;text/javascript&quot; src=&quot;dom.js&quot;&gt;&lt;/script&gt;",
                "-\t * \t &lt;script type=&quot;text/javascript&quot; src=&quot;event.js&quot;&gt;&lt;/script&gt;",
                "-\t * \t &lt;script type=&quot;text/javascript&quot; src=&quot;calendar.js&quot;&gt;&lt;/script&gt;",
                "-\t * \t &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;calendar.css&quot; /&gt;",
                "-\t * </pre>",
                "-\t */",
                "-\tpublic AbstractCalendar(String id, boolean contributeDependencies)",
                "-\t{",
                "-",
                "-\t\tsuper(id);",
                "-\t\tsetOutputMarkupId(true);",
                "-\t\tthis.contributeDependencies = contributeDependencies;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the id of the javascript widget. Note that this is the non-namespaced id, so depending",
                "-\t * on what you want to do with it, you may need to prepend 'YAHOO.wicket.' to it. Or you can",
                "-\t * call {@link #getJavaScriptWidgetId()}.",
                "-\t * ",
                "-\t * @return The javascript id",
                "-\t * @see #getJavaScriptWidgetId()",
                "-\t */",
                "-\tpublic final String getJavaScriptId()",
                "-\t{",
                "-\t\treturn getMarkupId() + \"Js\";",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * The name spaced id of the widget.",
                "-\t * ",
                "-\t * @return The widget id",
                "-\t * @see #getJavaScriptId()",
                "-\t */",
                "-\tpublic final String getJavaScriptWidgetId()",
                "-\t{",
                "-\t\treturn \"YAHOO.wicket.\" + getJavaScriptId();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * add header contributions for packaged resources.",
                "-\t * ",
                "-\t * @param response",
                "-\t *            the header response to contribute to",
                "-\t */",
                "-\tprivate void contributeDependencies(IHeaderResponse response)",
                "-\t{",
                "-\t\tresponse.render(JavaScriptHeaderItem.forReference(new PackageResourceReference(",
                "-\t\t\t\tYuiLib.class, \"yahoodomevent/yahoo-dom-event.js\")));",
                "-\t\tresponse.render(JavaScriptHeaderItem.forReference(new PackageResourceReference(",
                "-\t\t\tAbstractCalendar.class, \"calendar-min.js\")));",
                "-\t\tresponse.render(CssHeaderItem.forReference(new PackageResourceReference(",
                "-\t\t\tAbstractCalendar.class, \"assets/skins/sam/calendar.css\")));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Append javascript to the initialization function for the YUI widget. Can be used by",
                "-\t * subclasses to conveniently extend configuration without having to write a separate",
                "-\t * contribution.",
                "-\t * ",
                "-\t * @param markupId",
                "-\t *            The markup id of the calendar component",
                "-\t * @param javascriptId",
                "-\t *            the non-name spaced javascript id of the widget",
                "-\t * @param javascriptWidgetId",
                "-\t *            the name space id of the widget",
                "-\t * @param b",
                "-\t *            the buffer to append the script to",
                "-\t */",
                "-\tprotected void appendToInit(String markupId, String javascriptId, String javascriptWidgetId,",
                "-\t\tStringBuilder b)",
                "-\t{",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gives overriding classes the option of adding (or even changing/ removing) configuration",
                "-\t * properties for the javascript widget. See <a",
                "-\t * href=\"http://developer.yahoo.com/yui/calendar/\">the widget's documentation</a> for the",
                "-\t * available options. If you want to override/ remove properties, you obviously should call",
                "-\t * <code>super.configureWidgetProperties(properties)</code>.",
                "-\t * ",
                "-\t * @param widgetProperties",
                "-\t *            the current widget properties",
                "-\t */",
                "-\tprotected void configureWidgetProperties(Map<Object, Object> widgetProperties)",
                "-\t{",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic void renderHead(IHeaderResponse response)",
                "-\t{",
                "-\t\tif (contributeDependencies)",
                "-\t\t{",
                "-\t\t\tcontributeDependencies(response);",
                "-\t\t}",
                "-",
                "-",
                "-\t\t// not pretty to look at, but cheaper than using a template",
                "-\t\tString markupId = AbstractCalendar.this.getMarkupId();",
                "-\t\tString javascriptId = getJavaScriptId();",
                "-\t\tString javascriptWidgetId = getJavaScriptWidgetId();",
                "-\t\tStringBuilder b = new StringBuilder();",
                "-\t\t// initialize wicket namespace and register the init function",
                "-\t\t// for the YUI widget",
                "-\t\tb.append(\"YAHOO.namespace(\\\"wicket\\\");\\nfunction init\");",
                "-\t\tb.append(javascriptId);",
                "-\t\tb.append(\"() {\\n\");",
                "-",
                "-\t\t// instantiate the calendar object",
                "-\t\tb.append(\"  \");",
                "-\t\tb.append(javascriptWidgetId);",
                "-\t\tb.append(\" = new YAHOO.widget.Calendar(\\\"\");",
                "-\t\tb.append(javascriptId);",
                "-\t\tb.append(\"\\\",\\\"\");",
                "-\t\tb.append(markupId);",
                "-",
                "-\t\tProperties p = new Properties();",
                "-\t\tconfigureWidgetProperties(p);",
                "-\t\tb.append(\"\\\", { \");",
                "-\t\tfor (Iterator<Entry<Object, Object>> i = p.entrySet().iterator(); i.hasNext();)",
                "-\t\t{",
                "-\t\t\tEntry<Object, Object> entry = i.next();",
                "-\t\t\tb.append(entry.getKey());",
                "-\t\t\tObject value = entry.getValue();",
                "-\t\t\tif (value instanceof CharSequence)",
                "-\t\t\t{",
                "-\t\t\t\tb.append(\":\\\"\");",
                "-\t\t\t\tb.append(value);",
                "-\t\t\t\tb.append(\"\\\"\");",
                "-\t\t\t}",
                "-\t\t\telse if (value instanceof CharSequence[])",
                "-\t\t\t{",
                "-\t\t\t\tb.append(\":[\");",
                "-\t\t\t\tCharSequence[] valueArray = (CharSequence[])value;",
                "-\t\t\t\tfor (int j = 0; j < valueArray.length; j++)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tCharSequence tmpValue = valueArray[j];",
                "-\t\t\t\t\tb.append(\"\\\"\");",
                "-\t\t\t\t\tb.append(tmpValue);",
                "-\t\t\t\t\tb.append(\"\\\"\");",
                "-\t\t\t\t\tif (j < valueArray.length - 1)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tb.append(\",\");",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\tb.append(\"]\");",
                "-\t\t\t}",
                "-\t\t\telse",
                "-\t\t\t{",
                "-\t\t\t\tb.append(\":\");",
                "-\t\t\t\tb.append(value);",
                "-\t\t\t}",
                "-\t\t\t// TODO handle arrays",
                "-\t\t\tif (i.hasNext())",
                "-\t\t\t{",
                "-\t\t\t\tb.append(\",\");",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\tb.append(\" });\\n\");",
                "-",
                "-\t\t// append the javascript we want for our init function; call",
                "-\t\t// this in an overridable method so that clients can add their",
                "-\t\t// stuff without needing a big ass API",
                "-\t\tappendToInit(markupId, javascriptId, javascriptWidgetId, b);",
                "-",
                "-\t\t// trigger rendering",
                "-\t\tb.append(\"  \");",
                "-\t\tb.append(javascriptWidgetId);",
                "-\t\tb.append(\".render();\\n\");",
                "-",
                "-\t\tb.append(\"}\\n\");",
                "-\t\t// register the function for execution when the page is loaded",
                "-\t\tb.append(\"YAHOO.util.Event.addListener(window, \\\"load\\\", init\");",
                "-\t\tb.append(javascriptId);",
                "-\t\tb.append(\");\");",
                "-",
                "-\t\tresponse.render(JavaScriptHeaderItem.forScript(b, null));",
                "-\t}",
                "-}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java",
                "deleted file mode 100644",
                "index 5c08241c0a..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java",
                "+++ /dev/null",
                "@@ -1,81 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.yui.calendar;",
                "-",
                "-import java.util.Date;",
                "-",
                "-import org.apache.wicket.datetime.markup.html.form.DateTextField;",
                "-import org.apache.wicket.model.IModel;",
                "-",
                "-/**",
                "- * Works on a {@link java.util.Date} object. Displays a {@link DateTextField} and a",
                "- * {@link DatePicker calendar popup}.<br/>",
                "- * <p>",
                "- * Note: {@link DateField} must <strong>not</strong> be associated with an",
                "- * <code>&lt;input&gt;</code> tag, as opposed to {@link DateTextField}! The corresponding tag is",
                "- * typically either a <code>&lt;div&gt;</code> or a <code>&lt;span&gt;</code> tag.",
                "- * </p>",
                "- * ",
                "- * Example:",
                "- * <p>",
                "- * <u>Java:</u>",
                "- * ",
                "- * <pre>",
                "- * DateField dateField = new DateField(&quot;birthday&quot;);",
                "- * </pre>",
                "- * ",
                "- * </p>",
                "- * <p>",
                "- * <u>Markup:</u>",
                "- * ",
                "- * <pre>",
                "- * &lt;div wicket:id=&quot;birthday&quot;&gt;&lt;/div&gt;",
                "- * </pre>",
                "- * ",
                "- * </p>",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class DateField extends DateTimeField",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t */",
                "-\tpublic DateField(String id)",
                "-\t{",
                "-\t\tthis(id, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t * @param model",
                "-\t */",
                "-\tpublic DateField(String id, IModel<Date> model)",
                "-\t{",
                "-\t\tsuper(id, model);",
                "-",
                "-\t\tget(HOURS).setVisibilityAllowed(false);",
                "-\t\tget(MINUTES).setVisibilityAllowed(false);",
                "-\t\tget(AM_OR_PM_CHOICE).setVisibilityAllowed(false);",
                "-\t}",
                "-}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java",
                "deleted file mode 100644",
                "index 6b09e7a385..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java",
                "+++ /dev/null",
                "@@ -1,890 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.yui.calendar;",
                "-",
                "-import java.text.DateFormatSymbols;",
                "-import java.text.SimpleDateFormat;",
                "-import java.util.ArrayList;",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.HashMap;",
                "-import java.util.Iterator;",
                "-import java.util.LinkedHashMap;",
                "-import java.util.List;",
                "-import java.util.Locale;",
                "-import java.util.Map;",
                "-import java.util.Map.Entry;",
                "-",
                "-import org.apache.wicket.Application;",
                "-import org.apache.wicket.Component;",
                "-import org.apache.wicket.WicketRuntimeException;",
                "-import org.apache.wicket.ajax.AjaxEventBehavior;",
                "-import org.apache.wicket.behavior.Behavior;",
                "-import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;",
                "-import org.apache.wicket.datetime.markup.html.form.DateTextField;",
                "-import org.apache.wicket.extensions.yui.YuiLib;",
                "-import org.apache.wicket.markup.head.IHeaderResponse;",
                "-import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                "-import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "-import org.apache.wicket.request.Response;",
                "-import org.apache.wicket.request.cycle.RequestCycle;",
                "-import org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler;",
                "-import org.apache.wicket.request.resource.JavaScriptResourceReference;",
                "-import org.apache.wicket.request.resource.PackageResourceReference;",
                "-import org.apache.wicket.request.resource.ResourceReference;",
                "-import org.apache.wicket.util.convert.IConverter;",
                "-import org.apache.wicket.util.convert.converter.DateConverter;",
                "-import org.apache.wicket.util.lang.Objects;",
                "-import org.apache.wicket.util.string.Strings;",
                "-import org.apache.wicket.util.template.PackageTextTemplate;",
                "-import org.apache.wicket.util.template.TextTemplate;",
                "-import org.joda.time.DateTime;",
                "-",
                "-/**",
                "- * Pops up a YUI calendar component so that the user can select a date. On selection, the date is",
                "- * set in the component it is coupled to, after which the popup is closed again. This behavior can",
                "- * only be used with components that either implement {@link ITextFormatProvider} or that use",
                "- * {@link DateConverter} configured with an instance of {@link SimpleDateFormat} (like Wicket's",
                "- * default configuration has).<br/>",
                "- * ",
                "- * To use, simply add a new instance to your component, which would typically a TextField, like",
                "- * {@link DateTextField}.<br/>",
                "- * ",
                "- * The CalendarNavigator can be configured by overriding {@link #configure(java.util.Map, org.apache.wicket.markup.head.IHeaderResponse, java.util.Map)} and setting the",
                "- * property or by returning <code>true</code> for {@link #enableMonthYearSelection()}.",
                "- * ",
                "- * @see <a",
                "- *      href=\"http://developer.yahoo.com/yui/calendar/\">http://developer.yahoo.com/yui/calendar/</a>",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class DatePicker extends Behavior",
                "-{",
                "-",
                "-\t/**",
                "-\t * Exception thrown when the bound component does not produce a format this date picker can work",
                "-\t * with.",
                "-\t */",
                "-\tprivate static final class UnableToDetermineFormatException extends WicketRuntimeException",
                "-\t{",
                "-\t\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t\tpublic UnableToDetermineFormatException()",
                "-\t\t{",
                "-\t\t\tsuper(\"This behavior can only be added to components that either implement \" +",
                "-\t\t\t\tITextFormatProvider.class.getName() +",
                "-\t\t\t\t\" AND produce a non-null format, or that use\" +",
                "-\t\t\t\t\" converters that this DatePicker can use to determine\" +",
                "-\t\t\t\t\" the pattern being used. Alternatively, you can extend \" +",
                "-\t\t\t\t\" the DatePicker and override getDatePattern to provide your own.\");",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Format to be used when configuring YUI calendar. Can be used when using the",
                "-\t * &quot;selected&quot; property.",
                "-\t */",
                "-\t// See wicket-1988: SimpleDateFormat is not thread safe. Do not use static final",
                "-\t// See wicket-2525: SimpleDateFormat consumes a lot of memory",
                "-\tpublic static String FORMAT_DATE = \"MM/dd/yyyy\";",
                "-",
                "-\t/**",
                "-\t * For specifying which page (month/year) to show in the calendar, use this format for the date.",
                "-\t * This is to be used together with the property &quot;pagedate&quot;",
                "-\t */",
                "-\t// See wicket-1988: SimpleDateFormat is not thread safe. Do not use static final",
                "-\t// See wicket-2525: SimpleDateFormat consumes a lot of memory",
                "-\tpublic static String FORMAT_PAGEDATE = \"MM/yyyy\";",
                "-",
                "-\tprivate static final ResourceReference YUI = new JavaScriptResourceReference(YuiLib.class, \"\");",
                "-",
                "-\tprivate static final ResourceReference WICKET_DATE = new JavaScriptResourceReference(",
                "-\t\tDatePicker.class, \"wicket-date.js\");",
                "-",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/** The target component. */",
                "-\tprivate Component component;",
                "-",
                "-\tprivate boolean showOnFieldClick = false;",
                "-",
                "-\t/**",
                "-\t * A setting that decides whether to close the date picker when the user clicks somewhere else",
                "-\t * on the document.",
                "-\t */",
                "-\tprivate boolean autoHide = false;",
                "-",
                "-\t/**",
                "-\t *  The string to use for the close button label.",
                "-\t */",
                "-\tprivate String closeLabel = \"\";",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t */",
                "-\tpublic DatePicker()",
                "-\t{",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * {@inheritDoc}",
                "-\t */",
                "-\t@Override",
                "-\tpublic void bind(final Component component)",
                "-\t{",
                "-\t\tthis.component = component;",
                "-\t\tcheckComponentProvidesDateFormat(component);",
                "-\t\tcomponent.setOutputMarkupId(true);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * {@inheritDoc}",
                "-\t */",
                "-\t@Override",
                "-\tpublic void afterRender(final Component component)",
                "-\t{",
                "-\t\tsuper.afterRender(component);",
                "-",
                "-\t\t// Append the span and img icon right after the rendering of the",
                "-\t\t// component. Not as pretty as working with a panel etc, but works",
                "-\t\t// for behaviors and is more efficient",
                "-\t\tResponse response = component.getResponse();",
                "-\t\tresponse.write(\"\\n<span class=\\\"yui-skin-sam\\\">&nbsp;<span style=\\\"\");",
                "-",
                "-\t\tif (renderOnLoad())",
                "-\t\t{",
                "-\t\t\tresponse.write(\"display:block;\");",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\tresponse.write(\"display:none;\");",
                "-\t\t\tresponse.write(\"position:absolute;\");",
                "-\t\t}",
                "-",
                "-\t\tresponse.write(\"z-index: 99999;\\\" id=\\\"\");",
                "-\t\tresponse.write(getEscapedComponentMarkupId());",
                "-\t\tresponse.write(\"Dp\\\"></span><img style=\\\"\");",
                "-\t\tresponse.write(getIconStyle());",
                "-\t\tresponse.write(\"\\\" id=\\\"\");",
                "-\t\tresponse.write(getIconId());",
                "-\t\tresponse.write(\"\\\" src=\\\"\");",
                "-\t\tCharSequence iconUrl = getIconUrl();",
                "-\t\tresponse.write(Strings.escapeMarkup(iconUrl != null ? iconUrl.toString() : \"\"));",
                "-\t\tresponse.write(\"\\\" alt=\\\"\");",
                "-\t\tCharSequence alt = getIconAltText();",
                "-\t\tresponse.write(Strings.escapeMarkup((alt != null) ? alt.toString() : \"\"));",
                "-\t\tresponse.write(\"\\\" title=\\\"\");",
                "-\t\tCharSequence title = getIconTitle();",
                "-\t\tresponse.write(Strings.escapeMarkup((title != null) ? title.toString() : \"\"));",
                "-\t\tresponse.write(\"\\\"/>\");",
                "-",
                "-\t\tif (renderOnLoad())",
                "-\t\t{",
                "-\t\t\tresponse.write(\"<br style=\\\"clear:left;\\\"/>\");",
                "-\t\t}",
                "-\t\tresponse.write(\"</span>\");",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Controls whether or not datepicker will contribute YUI libraries to the page as part of its",
                "-\t * rendering lifecycle.",
                "-\t * ",
                "-\t * There may be cases when the user wants to use their own version of YUI contribution code, in",
                "-\t * those cases this method should be overridden to return <code>false</code>.",
                "-\t * ",
                "-\t * @return a flag whether to contribute YUI libraries to the page. {@code true} by default.",
                "-\t */",
                "-\tprotected boolean includeYUILibraries()",
                "-\t{",
                "-\t\treturn true;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * {@inheritDoc}",
                "-\t */",
                "-\t@Override",
                "-\tpublic void renderHead(Component component, IHeaderResponse response)",
                "-\t{",
                "-\t\tsuper.renderHead(component, response);",
                "-",
                "-\t\tif (includeYUILibraries())",
                "-\t\t{",
                "-\t\t\tYuiLib.load(response);",
                "-\t\t}",
                "-",
                "-\t\trenderHeadInit(response);",
                "-",
                "-\t\t// variables for the initialization script",
                "-\t\tMap<String, Object> variables = new HashMap<>();",
                "-\t\tString widgetId = getEscapedComponentMarkupId();",
                "-\t\tvariables.put(\"componentId\", getComponentMarkupId());",
                "-\t\tvariables.put(\"widgetId\", widgetId);",
                "-\t\tvariables.put(\"datePattern\", getDatePattern());",
                "-\t\tvariables.put(\"fireChangeEvent\", notifyComponentOnDateSelected());",
                "-\t\tvariables.put(\"alignWithIcon\", alignWithIcon());",
                "-\t\tvariables.put(\"hideOnSelect\", hideOnSelect());",
                "-\t\tvariables.put(\"showOnFieldClick\", showOnFieldClick());",
                "-\t\tvariables.put(\"autoHide\", autoHide());",
                "-\t\tvariables.put(\"closeLabel\", closeLabel());",
                "-",
                "-\t\tString script = getAdditionalJavaScript();",
                "-\t\tif (script != null)",
                "-\t\t{",
                "-\t\t\tvariables.put(\"additionalJavascript\",",
                "-\t\t\t\tStrings.replaceAll(script, \"${calendar}\", \"YAHOO.wicket.\" + widgetId + \"DpJs\"));",
                "-\t\t}",
                "-",
                "-\t\t// print out the initialization properties",
                "-\t\tMap<String, Object> p = new LinkedHashMap<>();",
                "-\t\tconfigure(p, response, variables);",
                "-\t\tif (!p.containsKey(\"navigator\") && enableMonthYearSelection())",
                "-\t\t{",
                "-\t\t\tp.put(\"navigator\", Boolean.TRUE);",
                "-\t\t}",
                "-",
                "-\t\tif (enableMonthYearSelection() && p.containsKey(\"pages\") &&",
                "-\t\t\tObjects.longValue(p.get(\"pages\")) > 1)",
                "-\t\t{",
                "-\t\t\tthrow new IllegalStateException(",
                "-\t\t\t\t\"You cannot use a CalendarGroup with month/year selection!\");",
                "-\t\t}",
                "-",
                "-\t\t// ${calendarInit}",
                "-\t\tStringBuilder calendarInit = new StringBuilder();",
                "-\t\tappendMapping(p, calendarInit);",
                "-\t\tvariables.put(\"calendarInit\", calendarInit.toString());",
                "-",
                "-\t\t// render initialization script with the variables interpolated",
                "-\t\tTextTemplate datePickerJs = new PackageTextTemplate(DatePicker.class, \"DatePicker.js\");",
                "-\t\tdatePickerJs.interpolate(variables);",
                "-\t\tresponse.render(OnDomReadyHeaderItem.forScript(datePickerJs.asString()));",
                "-",
                "-\t\t// remove previously generated markup (see onRendered) via javascript in",
                "-\t\t// ajax requests to not render the yui calendar multiple times",
                "-\t\tcomponent.getRequestCycle().find(IPartialPageRequestHandler.class).ifPresent(target -> {",
                "-\t\t\tString escapedComponentMarkupId = getEscapedComponentMarkupId();",
                "-\t\t\tString javascript = \"var e = Wicket.$('\" + escapedComponentMarkupId + \"Dp\" +",
                "-\t\t\t\t\"'); if (e != null && typeof(e.parentNode) != 'undefined' && \" +",
                "-\t\t\t\t\"typeof(e.parentNode.parentNode != 'undefined')) {\" +",
                "-\t\t\t\t\"e.parentNode.parentNode.removeChild(e.parentNode);\" + \"YAHOO.wicket.\" +",
                "-\t\t\t\tescapedComponentMarkupId + \"DpJs.destroy(); delete YAHOO.wicket.\" +",
                "-\t\t\t\tescapedComponentMarkupId + \"DpJs;}\";",
                "-",
                "-\t\t\ttarget.prependJavaScript(javascript);",
                "-\t\t});",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Renders yui & wicket calendar js module loading. It is done only once per page.",
                "-\t * ",
                "-\t * @param response",
                "-\t *            header response",
                "-\t */",
                "-\tprotected void renderHeadInit(IHeaderResponse response)",
                "-\t{",
                "-\t\tString key = \"DatePickerInit.js\";",
                "-\t\tif (response.wasRendered(key))",
                "-\t\t{",
                "-\t\t\treturn;",
                "-\t\t}",
                "-",
                "-\t\t// variables for YUILoader",
                "-\t\tMap<String, Object> variables = new HashMap<>();",
                "-\t\tvariables.put(\"basePath\",",
                "-\t\t\tStrings.stripJSessionId(RequestCycle.get().urlFor(YUI, null).toString()) + \"/\");",
                "-\t\tvariables.put(\"Wicket.DateTimeInit.DatePath\", RequestCycle.get().urlFor(WICKET_DATE, null));",
                "-",
                "-\t\tif (Application.get().usesDevelopmentConfig())",
                "-\t\t{",
                "-\t\t\tvariables.put(\"filter\", \"filter: \\\"RAW\\\",\");",
                "-\t\t\tvariables.put(\"allowRollup\", false);",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\tvariables.put(\"filter\", \"\");",
                "-\t\t\tvariables.put(\"allowRollup\", true);",
                "-\t\t}",
                "-",
                "-\t\tTextTemplate template = new PackageTextTemplate(DatePicker.class, key);",
                "-\t\tresponse.render(OnDomReadyHeaderItem.forScript(template.asString(variables)));",
                "-",
                "-\t\tresponse.markRendered(key);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Check that this behavior can get a date format out of the component it is coupled to. It",
                "-\t * checks whether {@link #getDatePattern()} produces a non-null value. If that method returns",
                "-\t * null, and exception will be thrown",
                "-\t * ",
                "-\t * @param component",
                "-\t *            the component this behavior is being coupled to",
                "-\t * @throws UnableToDetermineFormatException",
                "-\t *             if this date picker is unable to determine a format.",
                "-\t */",
                "-\tprivate void checkComponentProvidesDateFormat(final Component component)",
                "-\t{",
                "-\t\tif (getDatePattern() == null)",
                "-\t\t{",
                "-\t\t\tthrow new UnableToDetermineFormatException();",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Set widget property if the array is null and has a length greater than 0.",
                "-\t * ",
                "-\t * @param widgetProperties",
                "-\t * @param key",
                "-\t * @param array",
                "-\t */",
                "-\tprivate void setWidgetProperty(final Map<String, Object> widgetProperties, final String key,",
                "-\t\tfinal String[] array)",
                "-\t{",
                "-\t\tif (array != null && array.length > 0)",
                "-\t\t{",
                "-\t\t\twidgetProperties.put(key, array);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Whether to position the date picker relative to the trigger icon.",
                "-\t * ",
                "-\t * @return If true, the date picker is aligned with the left position of the icon, and with the",
                "-\t *         top right under. If false, the date picker will skip positioning and will let you do",
                "-\t *         the positioning yourself. Returns true by default.",
                "-\t */",
                "-\tprotected boolean alignWithIcon()",
                "-\t{",
                "-\t\treturn true;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gives overriding classes the option of adding (or even changing/ removing) configuration",
                "-\t * properties for the javascript widget. See <a",
                "-\t * href=\"http://developer.yahoo.com/yui/calendar/\">the widget's documentation</a> for the",
                "-\t * available options. If you want to override/ remove properties, you should call",
                "-\t * super.configure(properties) first. If you don't call that, be aware that you will have to",
                "-\t * call {@link #localize(java.util.Map, org.apache.wicket.markup.head.IHeaderResponse, java.util.Map)} manually if you like localized strings to be added.",
                "-\t * ",
                "-\t * @param widgetProperties",
                "-\t *            the current widget properties",
                "-\t * @param response",
                "-\t *            the header response",
                "-\t * @param initVariables",
                "-\t *            variables passed to the Wicket.DateTime.init() js method",
                "-\t */",
                "-\tprotected void configure(final Map<String, Object> widgetProperties,",
                "-\t\tfinal IHeaderResponse response, final Map<String, Object> initVariables)",
                "-\t{",
                "-\t\twidgetProperties.put(\"close\", true);",
                "-",
                "-\t\t// localize date fields",
                "-\t\tlocalize(widgetProperties, response, initVariables);",
                "-",
                "-\t\tObject modelObject = component.getDefaultModelObject();",
                "-\t\t// null and cast check",
                "-\t\tif (modelObject instanceof Date)",
                "-\t\t{",
                "-\t\t\tDate date = (Date)modelObject;",
                "-\t\t\twidgetProperties.put(\"selected\", new SimpleDateFormat(FORMAT_DATE).format(date));",
                "-\t\t\twidgetProperties.put(\"pagedate\", new SimpleDateFormat(FORMAT_PAGEDATE).format(date));",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Filter all empty elements (workaround for {@link DateFormatSymbols} returning arrays with",
                "-\t * empty elements).",
                "-\t * ",
                "-\t * @param stringArray",
                "-\t *            array to filter",
                "-\t * @return filtered array (without null or empty string elements)",
                "-\t */",
                "-\tprotected final String[] filterEmpty(String[] stringArray)",
                "-\t{",
                "-\t\tif (stringArray == null)",
                "-\t\t{",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-",
                "-\t\tList<String> list = new ArrayList<>(stringArray.length);",
                "-\t\tfor (String string : stringArray)",
                "-\t\t{",
                "-\t\t\tif (!Strings.isEmpty(string))",
                "-\t\t\t{",
                "-\t\t\t\tlist.add(string);",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\treturn list.toArray(new String[list.size()]);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the id of the component that the calendar widget will get attached to.",
                "-\t * ",
                "-\t * @return The DOM id of the component",
                "-\t */",
                "-\tprotected final String getComponentMarkupId()",
                "-\t{",
                "-\t\treturn component.getMarkupId();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the date pattern to use for putting selected values in the coupled component.",
                "-\t * ",
                "-\t * @return The date pattern",
                "-\t */",
                "-\tprotected String getDatePattern()",
                "-\t{",
                "-\t\tString format = null;",
                "-\t\tif (component instanceof ITextFormatProvider)",
                "-\t\t{",
                "-\t\t\tformat = ((ITextFormatProvider)component).getTextFormat();",
                "-\t\t\t// it is possible that components implement ITextFormatProvider but",
                "-\t\t\t// don't provide a format",
                "-\t\t}",
                "-",
                "-\t\tif (format == null)",
                "-\t\t{",
                "-\t\t\tIConverter<?> converter = component.getConverter(DateTime.class);",
                "-\t\t\tif (!(converter instanceof DateConverter))",
                "-\t\t\t{",
                "-\t\t\t\tconverter = component.getConverter(Date.class);",
                "-\t\t\t}",
                "-\t\t\tformat = ((SimpleDateFormat)((DateConverter)converter).getDateFormat(component.getLocale())).toPattern();",
                "-\t\t}",
                "-",
                "-\t\treturn format;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the escaped DOM id that the calendar widget will get attached to. All non word",
                "-\t * characters (\\W) will be removed from the string.",
                "-\t * ",
                "-\t * @return The DOM id of the calendar widget - same as the component's markup id + 'Dp'}",
                "-\t */",
                "-\tprotected final String getEscapedComponentMarkupId()",
                "-\t{",
                "-\t\treturn component.getMarkupId().replaceAll(\"\\\\W\", \"\");",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the id of the icon that triggers the popup.",
                "-\t * ",
                "-\t * @return The id of the icon",
                "-\t */",
                "-\tprotected final String getIconId()",
                "-\t{",
                "-\t\treturn getEscapedComponentMarkupId() + \"Icon\";",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the style of the icon that triggers the popup.",
                "-\t * ",
                "-\t * @return The style of the icon, e.g. 'cursor: point' etc.",
                "-\t */",
                "-\tprotected String getIconStyle()",
                "-\t{",
                "-\t\treturn \"cursor: pointer; border: none;\";",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the title attribute of the datepicker icon",
                "-\t * ",
                "-\t * @return text",
                "-\t */",
                "-\tprotected CharSequence getIconTitle()",
                "-\t{",
                "-\t\treturn \"\";",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the icon alt text for the datepicker icon",
                "-\t * ",
                "-\t * @return text",
                "-\t */",
                "-\tprotected CharSequence getIconAltText()",
                "-\t{",
                "-\t\treturn \"\";",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the url for the popup button. Users can override to provide their own icon URL.",
                "-\t * ",
                "-\t * @return the url to use for the popup button/ icon",
                "-\t */",
                "-\tprotected CharSequence getIconUrl()",
                "-\t{",
                "-\t\treturn RequestCycle.get().urlFor(",
                "-\t\t\tnew ResourceReferenceRequestHandler(new PackageResourceReference(DatePicker.class,",
                "-\t\t\t\t\"icon1.gif\")));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the locale that should be used to configure this widget.",
                "-\t * ",
                "-\t * @return By default the locale of the bound component.",
                "-\t */",
                "-\tprotected Locale getLocale()",
                "-\t{",
                "-\t\treturn component.getLocale();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Configure the localized strings for the datepicker widget. This implementation uses",
                "-\t * {@link DateFormatSymbols} and some slight string manipulation to get the strings for months",
                "-\t * and week days. Also, the first week day is set according to the {@link Locale} returned by",
                "-\t * {@link #getLocale()}. It should work well for most locales.",
                "-\t * <p>",
                "-\t * This method is called from {@link #configure(java.util.Map, org.apache.wicket.markup.head.IHeaderResponse, java.util.Map)} and can be overridden if",
                "-\t * you want to customize setting up the localized strings but are happy with the rest of",
                "-\t * {@link #configure(java.util.Map, org.apache.wicket.markup.head.IHeaderResponse, java.util.Map)}'s behavior. Note that you can call (overridable)",
                "-\t * method {@link #getLocale()} to get the locale that should be used for setting up the widget.",
                "-\t * </p>",
                "-\t * <p>",
                "-\t * See YUI Calendar's <a href=\"http://developer.yahoo.com/yui/examples/calendar/germany/1.html\">",
                "-\t * German</a> and <a",
                "-\t * href=\"http://developer.yahoo.com/yui/examples/calendar/japan/1.html\">Japanese</a> examples",
                "-\t * for more info.",
                "-\t * </p>",
                "-\t * ",
                "-\t * @param widgetProperties",
                "-\t *            the current widget properties",
                "-\t * @param response",
                "-\t *            the header response",
                "-\t * @param initVariables",
                "-\t *            variables passed to the Wicket.DateTime.init() js method",
                "-\t */",
                "-\tprotected void localize(Map<String, Object> widgetProperties, IHeaderResponse response,",
                "-\t\tMap<String, Object> initVariables)",
                "-\t{",
                "-\t\tLocale locale = getLocale();",
                "-\t\tString key = \"Wicket.DateTimeInit.CalendarI18n[\\\"\" + locale.toString() + \"\\\"]\";",
                "-\t\tinitVariables.put(\"i18n\", key);",
                "-",
                "-\t\tif (response.wasRendered(key))",
                "-\t\t{",
                "-\t\t\treturn;",
                "-\t\t}",
                "-",
                "-\t\tDateFormatSymbols dfSymbols = DateFormatSymbols.getInstance(locale);",
                "-\t\tif (dfSymbols == null)",
                "-\t\t{",
                "-\t\t\tdfSymbols = new DateFormatSymbols(locale);",
                "-\t\t}",
                "-",
                "-\t\tMap<String, Object> i18nVariables = new LinkedHashMap<>();",
                "-\t\tsetWidgetProperty(i18nVariables, \"MONTHS_SHORT\", filterEmpty(dfSymbols.getShortMonths()));",
                "-\t\tsetWidgetProperty(i18nVariables, \"MONTHS_LONG\", filterEmpty(dfSymbols.getMonths()));",
                "-\t\tsetWidgetProperty(i18nVariables, \"WEEKDAYS_MEDIUM\",",
                "-\t\t\tfilterEmpty(dfSymbols.getShortWeekdays()));",
                "-\t\tsetWidgetProperty(i18nVariables, \"WEEKDAYS_LONG\", filterEmpty(dfSymbols.getWeekdays()));",
                "-",
                "-\t\ti18nVariables.put(\"START_WEEKDAY\", getFirstDayOfWeek(locale));",
                "-",
                "-\t\tif (Locale.SIMPLIFIED_CHINESE.equals(locale) || Locale.TRADITIONAL_CHINESE.equals(locale))",
                "-\t\t{",
                "-\t\t\tsetWidgetProperty(i18nVariables, \"WEEKDAYS_1CHAR\",",
                "-\t\t\t\tfilterEmpty(substring(dfSymbols.getShortWeekdays(), 2, 1)));",
                "-\t\t\ti18nVariables.put(\"WEEKDAYS_SHORT\",",
                "-\t\t\t\tfilterEmpty(substring(dfSymbols.getShortWeekdays(), 2, 1)));",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\tsetWidgetProperty(i18nVariables, \"WEEKDAYS_1CHAR\",",
                "-\t\t\t\tfilterEmpty(substring(dfSymbols.getShortWeekdays(), 0, 1)));",
                "-\t\t\tsetWidgetProperty(i18nVariables, \"WEEKDAYS_SHORT\",",
                "-\t\t\t\tfilterEmpty(substring(dfSymbols.getShortWeekdays(), 0, 2)));",
                "-\t\t}",
                "-",
                "-\t\tStringBuilder i18n = new StringBuilder(key);",
                "-\t\ti18n.append('=');",
                "-\t\tappendMapping(i18nVariables, i18n);",
                "-\t\ti18n.append(';');",
                "-",
                "-\t\tresponse.render(OnDomReadyHeaderItem.forScript(i18n.toString()));",
                "-",
                "-\t\tresponse.wasRendered(key);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t  * Gets the first day of week of a given locale.",
                "-\t  *",
                "-\t  * @return By default the first day of week accordingly to Calendar class.",
                "-\t  */",
                "-\tprotected int getFirstDayOfWeek(Locale locale)",
                "-\t{",
                "-\t\treturn Calendar.getInstance(locale).getFirstDayOfWeek() - 1;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Whether to notify the associated component when a date is selected. Notifying is done by",
                "-\t * calling the associated component's onchange JavaScript event handler. You can for instance",
                "-\t * attach an {@link AjaxEventBehavior} to that component to get a call back to the server. The",
                "-\t * default is true.",
                "-\t * ",
                "-\t * @return if true, notifies the associated component when a date is selected",
                "-\t */",
                "-\tprotected boolean notifyComponentOnDateSelected()",
                "-\t{",
                "-\t\treturn true;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Makes a copy of the provided array and for each element copy the substring 0..len to the new",
                "-\t * array",
                "-\t * ",
                "-\t * @param array",
                "-\t *            array to copy from",
                "-\t * @param len",
                "-\t *            size of substring for each element to copy",
                "-\t * @return copy of the array filled with substrings.",
                "-\t */",
                "-\tprotected final String[] substring(final String[] array, final int len)",
                "-\t{",
                "-\t\treturn substring(array, 0, len);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Makes a copy of the provided array and for each element copy the substring 0..len to the new",
                "-\t * array",
                "-\t * ",
                "-\t * @param array",
                "-\t *            array to copy from",
                "-\t * @param start",
                "-\t *            start position of the substring",
                "-\t * @param len",
                "-\t *            size of substring for each element to copy",
                "-\t * @return copy of the array filled with substrings.",
                "-\t */",
                "-\tprotected final String[] substring(final String[] array, final int start, final int len)",
                "-\t{",
                "-\t\tif (array != null)",
                "-\t\t{",
                "-\t\t\tString[] copy = new String[array.length];",
                "-\t\t\tfor (int i = 0; i < array.length; i++)",
                "-\t\t\t{",
                "-\t\t\t\tString el = array[i];",
                "-\t\t\t\tif (el != null)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tif (el.length() > (start + len))",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tcopy[i] = el.substring(start, start + len);",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\telse",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tcopy[i] = el;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\treturn copy;",
                "-\t\t}",
                "-\t\treturn null;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Indicates whether plain text is rendered or two select boxes are used to allow direct",
                "-\t * selection of month and year.",
                "-\t * ",
                "-\t * @return <code>true</code> if select boxes should be rendered to allow month and year",
                "-\t *         selection.<br/>",
                "-\t *         <code>false</code> to render just plain text.",
                "-\t */",
                "-\tprotected boolean enableMonthYearSelection()",
                "-\t{",
                "-\t\treturn false;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Indicates whether the calendar should be hidden after a date was selected.",
                "-\t * ",
                "-\t * @return <code>true</code> (default) if the calendar should be hidden after the date selection <br/>",
                "-\t *         <code>false</code> if the calendar should remain visible after the date selection.",
                "-\t */",
                "-\tprotected boolean hideOnSelect()",
                "-\t{",
                "-\t\treturn true;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Indicates whether the calendar should be shown when corresponding text input is clicked.",
                "-\t * ",
                "-\t * @return <code>true</code> <br/>",
                "-\t *         <code>false</code> (default)",
                "-\t */",
                "-\tprotected boolean showOnFieldClick()",
                "-\t{",
                "-\t\treturn showOnFieldClick;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param show",
                "-\t *            a flag indicating whether to show the picker on click event",
                "-\t * @return {@code this} instance to be able to chain calls",
                "-\t * @see {@link #showOnFieldClick()}",
                "-\t */",
                "-\tpublic DatePicker setShowOnFieldClick(boolean show)",
                "-\t{",
                "-\t\tshowOnFieldClick = show;",
                "-\t\treturn this;",
                "-\t}",
                "-",
                "-",
                "-\t/**",
                "-\t * Indicates whether the calendar should be hidden when the user clicks on an area of the",
                "-\t * document outside of the dialog.",
                "-\t * ",
                "-\t * @return <code>true</code> <br/>",
                "-\t *         <code>false</code> (default)",
                "-\t */",
                "-\tprotected boolean autoHide()",
                "-\t{",
                "-\t\treturn autoHide;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param autoHide",
                "-\t *            a flag indicating whether to hide the picker on click event",
                "-\t * @return {@code this} instance to be able to chain calls",
                "-\t * @see {@link #autoHide()}",
                "-\t */",
                "-\tpublic DatePicker setAutoHide(boolean autoHide)",
                "-\t{",
                "-\t\tthis.autoHide = autoHide;",
                "-\t\treturn this;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * The string to use for the close button label.",
                "-\t *",
                "-\t * @return label",
                "-\t */",
                "-\tprotected String closeLabel()",
                "-\t{",
                "-\t\treturn closeLabel;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param closeLabel",
                "-\t *            The string to use for the close button label.",
                "-\t */",
                "-\tpublic void setCloseLabel(String closeLabel)",
                "-\t{",
                "-\t\tthis.closeLabel = closeLabel;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Indicates whether the calendar should be rendered after it has been loaded.",
                "-\t * ",
                "-\t * @return <code>true</code> if the calendar should be rendered after it has been loaded.<br/>",
                "-\t *         <code>false</code> (default) if it's initially hidden.",
                "-\t */",
                "-\tprotected boolean renderOnLoad()",
                "-\t{",
                "-\t\treturn false;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Override this method to further customize the YUI Calendar with additional JavaScript code.",
                "-\t * The code returned by this method is executed right after the Calendar has been constructed",
                "-\t * and initialized. To refer to the actual Calendar DOM object, use <code>${calendar}</code> in",
                "-\t * your code.<br/>",
                "-\t * See <a href=\"http://developer.yahoo.com/yui/calendar/\">the widget's documentation</a> for",
                "-\t * more information about the YUI Calendar.<br/>",
                "-\t * Example:",
                "-\t * ",
                "-\t * <pre>",
                "-\t * protected String getAdditionalJavaScript()",
                "-\t * {",
                "-\t * \treturn &quot;${calendar}.addRenderer(\\&quot;10/3\\&quot;, ${calendar}.renderCellStyleHighlight1);&quot;;",
                "-\t * }",
                "-\t * </pre>",
                "-\t * ",
                "-\t * @return a String containing additional JavaScript code",
                "-\t */",
                "-\tprotected String getAdditionalJavaScript()",
                "-\t{",
                "-\t\treturn \"\";",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * {@inheritDoc}",
                "-\t */",
                "-\t@Override",
                "-\tpublic boolean isEnabled(final Component component)",
                "-\t{",
                "-\t\treturn component.isEnabledInHierarchy();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * ",
                "-\t * @param map",
                "-\t *            the key-value pairs to be serialized",
                "-\t * @param json",
                "-\t *            the buffer holding the constructed json",
                "-\t */",
                "-\tprivate void appendMapping(final Map<String, Object> map, final StringBuilder json)",
                "-\t{",
                "-\t\tjson.append('{');",
                "-\t\tfor (Iterator<Entry<String, Object>> i = map.entrySet().iterator(); i.hasNext();)",
                "-\t\t{",
                "-\t\t\tEntry<String, Object> entry = i.next();",
                "-\t\t\tjson.append(entry.getKey());",
                "-\t\t\tObject value = entry.getValue();",
                "-\t\t\tif (value instanceof CharSequence)",
                "-\t\t\t{",
                "-\t\t\t\tjson.append(\":\\\"\");",
                "-\t\t\t\tjson.append(Strings.toEscapedUnicode(value.toString()));",
                "-\t\t\t\tjson.append('\"');",
                "-\t\t\t}",
                "-\t\t\telse if (value instanceof CharSequence[])",
                "-\t\t\t{",
                "-\t\t\t\tjson.append(\":[\");",
                "-\t\t\t\tCharSequence[] valueArray = (CharSequence[])value;",
                "-\t\t\t\tfor (int j = 0; j < valueArray.length; j++)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tCharSequence tmpValue = valueArray[j];",
                "-\t\t\t\t\tif (j > 0)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tjson.append(',');",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tif (tmpValue != null)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tjson.append('\"');",
                "-\t\t\t\t\t\tjson.append(Strings.toEscapedUnicode(tmpValue.toString()));",
                "-\t\t\t\t\t\tjson.append('\"');",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\tjson.append(']');",
                "-\t\t\t}",
                "-\t\t\telse if (value instanceof Map)",
                "-\t\t\t{",
                "-\t\t\t\tjson.append(':');",
                "-\t\t\t\t@SuppressWarnings(\"unchecked\")",
                "-\t\t\t\tMap<String, Object> nmap = (Map<String, Object>)value;",
                "-\t\t\t\tappendMapping(nmap, json);",
                "-\t\t\t}",
                "-\t\t\telse",
                "-\t\t\t{",
                "-\t\t\t\tjson.append(':');",
                "-\t\t\t\tjson.append(Strings.toEscapedUnicode(String.valueOf(value)));",
                "-\t\t\t}",
                "-\t\t\tif (i.hasNext())",
                "-\t\t\t{",
                "-\t\t\t\tjson.append(',');",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tjson.append('}');",
                "-\t}",
                "-}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePickerInit.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePickerInit.js",
                "deleted file mode 100644",
                "index 61b4056c8e..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePickerInit.js",
                "+++ /dev/null",
                "@@ -1,57 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-if (typeof(Wicket) === 'undefined') {",
                "-\twindow.Wicket = {};",
                "-}",
                "-if (typeof(Wicket.DateTimeInit) === 'undefined') {",
                "-\tWicket.DateTimeInit = {};",
                "-}",
                "-",
                "-Wicket.DateTimeInit.CalendarInits = [];",
                "-Wicket.DateTimeInit.CalendarInitFinished = false;",
                "-Wicket.DateTimeInit.CalendarI18n = {};",
                "-Wicket.DateTimeInit.CalendarAdd = function(initFn) {",
                "-\tif (Wicket.DateTimeInit.CalendarInitFinished) {",
                "-\t\t// when a DatePicker is added via ajax, the loader is already finished, so",
                "-\t\t// we call the init function directly.",
                "-\t\tinitFn();",
                "-\t} else {",
                "-\t\t// when page is rendered, all calendar components will be initialized after",
                "-\t\t// the required js libraries have been loaded.",
                "-\t\tWicket.DateTimeInit.CalendarInits.push(initFn);",
                "-\t}",
                "-};",
                "-",
                "-Wicket.DateTimeInit.YuiLoader = new YAHOO.util.YUILoader({",
                "-\tbase: \"${basePath}\",",
                "-\t${filter}",
                "-\tallowRollup: ${allowRollup},",
                "-\trequire: [\"wicket-date\"],",
                "-\tonSuccess: function() {",
                "-\t\tWicket.DateTimeInit.CalendarInitFinished = true;",
                "-\t\twhile (Wicket.DateTimeInit.CalendarInits.length > 0) {",
                "-\t\t\tWicket.DateTimeInit.CalendarInits.pop()();",
                "-\t\t}",
                "-\t}",
                "-});",
                "-Wicket.DateTimeInit.YuiLoader.addModule({",
                "-\tname: \"wicket-date\",",
                "-\ttype: \"js\",",
                "-\trequires: [\"calendar\"],",
                "-\tfullpath: \"${Wicket.DateTimeInit.DatePath}\"",
                "-});",
                "-Wicket.DateTimeInit.YuiLoader.insert();",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "deleted file mode 100644",
                "index ecab7b6b38..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "+++ /dev/null",
                "@@ -1,616 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.yui.calendar;",
                "-",
                "-import java.text.DecimalFormat;",
                "-import java.text.NumberFormat;",
                "-import java.util.Arrays;",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.Locale;",
                "-import java.util.Map;",
                "-import java.util.TimeZone;",
                "-",
                "-import org.apache.wicket.Session;",
                "-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                "-import org.apache.wicket.core.request.ClientInfo;",
                "-import org.apache.wicket.datetime.markup.html.form.DateTextField;",
                "-import org.apache.wicket.markup.head.IHeaderResponse;",
                "-import org.apache.wicket.markup.html.WebMarkupContainer;",
                "-import org.apache.wicket.markup.html.form.DropDownChoice;",
                "-import org.apache.wicket.markup.html.form.FormComponentPanel;",
                "-import org.apache.wicket.markup.html.form.TextField;",
                "-import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.model.Model;",
                "-import org.apache.wicket.model.PropertyModel;",
                "-import org.apache.wicket.protocol.http.request.WebClientInfo;",
                "-import org.apache.wicket.util.convert.IConverter;",
                "-import org.apache.wicket.util.convert.converter.IntegerConverter;",
                "-import org.apache.wicket.validation.validator.RangeValidator;",
                "-import org.joda.time.DateTimeFieldType;",
                "-import org.joda.time.DateTimeZone;",
                "-import org.joda.time.MutableDateTime;",
                "-import org.joda.time.format.DateTimeFormat;",
                "-",
                "-/**",
                "- * Works on a {@link java.util.Date} object. Displays a date field and a {@link DatePicker}, a field",
                "- * for hours and a field for minutes, and an AM/PM field. The format (12h/24h) of the hours field",
                "- * depends on the time format of this {@link DateTimeField}'s {@link Locale}, as does the visibility",
                "- * of the AM/PM field (see {@link DateTimeField#use12HourFormat}).",
                "- * <p>",
                "- * <strong>Ajaxifying the DateTimeField</strong>: If you want to update a DateTimeField with an",
                "- * {@link AjaxFormComponentUpdatingBehavior}, you have to attach it to the contained",
                "- * {@link DateTextField} by overriding {@link #newDateTextField(String, PropertyModel)} and calling",
                "- * {@link #processInput()}:",
                "- * ",
                "- * <pre>{@code",
                "- *  DateTimeField dateTimeField = new DateTimeField(...) {",
                "- *    protected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)",
                "- *    {",
                "- *      DateTextField dateField = super.newDateTextField(id, dateFieldModel);     ",
                "- *      dateField.add(new AjaxFormComponentUpdatingBehavior(\"change\") {",
                "- *        protected void onUpdate(AjaxRequestTarget target) {",
                "- *          processInput(); // let DateTimeField process input too",
                "- *",
                "- *          ...",
                "- *        }",
                "- *      });",
                "- *      return recorder;",
                "- *    }",
                "- *  }",
                "- * }</pre>",
                "- * ",
                "- * @author eelcohillenius",
                "- * @see DateField for a variant with just the date field and date picker",
                "- */",
                "-public class DateTimeField extends FormComponentPanel<Date>",
                "-{",
                "-\t/**",
                "-\t * Enumerated type for different ways of handling the render part of requests.",
                "-\t */",
                "-\tpublic static enum AM_PM {",
                "-\t\t/** */",
                "-\t\tAM(\"AM\"),",
                "-",
                "-\t\t/** */",
                "-\t\tPM(\"PM\");",
                "-",
                "-\t\t/** */",
                "-\t\tprivate String value;",
                "-",
                "-\t\tAM_PM(final String name)",
                "-\t\t{",
                "-\t\t\tvalue = name;",
                "-\t\t}",
                "-",
                "-\t\t/**",
                "-\t\t * @see java.lang.Enum#toString()",
                "-\t\t */",
                "-\t\t@Override",
                "-\t\tpublic String toString()",
                "-\t\t{",
                "-\t\t\treturn value;",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t// Component-IDs",
                "-\tprotected static final String DATE = \"date\";",
                "-\tprotected static final String HOURS = \"hours\";",
                "-\tprotected static final String MINUTES = \"minutes\";",
                "-\tprotected static final String AM_OR_PM_CHOICE = \"amOrPmChoice\";",
                "-",
                "-\t// PropertyModel string to access getAmOrPm",
                "-\tprivate static final String AM_OR_PM = \"amOrPm\";",
                "-",
                "-\tprivate static final IConverter<Integer> MINUTES_CONVERTER = new IntegerConverter() {",
                "-\t\tprotected NumberFormat newNumberFormat(Locale locale) {",
                "-\t\t\treturn new DecimalFormat(\"00\");",
                "-\t\t}",
                "-\t};",
                "-",
                "-\t// The dropdown list for AM/PM and it's associated model object",
                "-\tprivate DropDownChoice<AM_PM> amOrPmChoice;",
                "-\tprivate AM_PM amOrPm = AM_PM.AM;",
                "-",
                "-\t// The date TextField and it's associated model object",
                "-\t// Note that any time information in date will be ignored",
                "-\tprivate DateTextField dateField;",
                "-\tprivate Date date;",
                "-",
                "-\t// The TextField for \"hours\" and it's associated model object",
                "-\tprivate TextField<Integer> hoursField;",
                "-\tprivate Integer hours;",
                "-",
                "-\t// The TextField for \"minutes\" and it's associated model object",
                "-\tprivate TextField<Integer> minutesField;",
                "-\tprivate Integer minutes;",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t */",
                "-\tpublic DateTimeField(final String id)",
                "-\t{",
                "-\t\tthis(id, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t * @param model",
                "-\t */",
                "-\tpublic DateTimeField(final String id, final IModel<Date> model)",
                "-\t{",
                "-\t\tsuper(id, model);",
                "-",
                "-\t\t// Sets the type that will be used when updating the model for this component.",
                "-\t\tsetType(Date.class);",
                "-",
                "-\t\t// Create and add the date TextField",
                "-\t\tPropertyModel<Date> dateFieldModel = new PropertyModel<>(this, DATE);",
                "-\t\tadd(dateField = newDateTextField(DATE, dateFieldModel));",
                "-",
                "-\t\t// Add a date picker to the date TextField",
                "-\t\tdateField.add(newDatePicker());",
                "-",
                "-\t\t// Create and add the \"hours\" TextField",
                "-\t\tadd(hoursField = newHoursTextField(HOURS, new PropertyModel<Integer>(this, HOURS),",
                "-\t\t\tInteger.class));",
                "-",
                "-\t\t// Create and add the \"minutes\" TextField",
                "-\t\tadd(minutesField = newMinutesTextField(MINUTES, new PropertyModel<Integer>(this, MINUTES),",
                "-\t\t\tInteger.class));",
                "-",
                "-\t\t// Create and add the \"AM/PM\" Listbox",
                "-\t\tadd(amOrPmChoice = new DropDownChoice<AM_PM>(AM_OR_PM_CHOICE, new PropertyModel<AM_PM>(",
                "-\t\t\tthis, AM_OR_PM), Arrays.asList(AM_PM.values())));",
                "-",
                "-\t\tadd(new WebMarkupContainer(\"hoursSeparator\")",
                "-\t\t{",
                "-\t\t\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tpublic boolean isVisible()",
                "-\t\t\t{",
                "-\t\t\t\treturn minutesField.determineVisibility();",
                "-\t\t\t}",
                "-\t\t});",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * create a new {@link TextField} instance for hours to be added to this panel.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            the component id",
                "-\t * @param model",
                "-\t *            model that should be used by the {@link TextField}",
                "-\t * @param type",
                "-\t *            the type of the text field",
                "-\t * @return a new text field instance",
                "-\t */",
                "-\tprotected TextField<Integer> newHoursTextField(final String id, IModel<Integer> model, Class<Integer> type) {",
                "-\t\tTextField<Integer> hoursTextField = new TextField<>(id, model, type);",
                "-\t\thoursTextField.add(getMaximumHours() == 24 ? RangeValidator.range(0, 23) : RangeValidator",
                "-\t\t\t.range(1, 12));",
                "-\t\thoursTextField.setLabel(new Model<>(HOURS));",
                "-\t\treturn hoursTextField;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * create a new {@link TextField} instance for minutes to be added to this panel.",
                "-\t *",
                "-\t * @param id",
                "-\t *            the component id",
                "-\t * @param model",
                "-\t *            model that should be used by the {@link TextField}",
                "-\t * @param type",
                "-\t *            the type of the text field",
                "-\t * @return a new text field instance",
                "-\t */",
                "-\tprotected TextField<Integer> newMinutesTextField(final String id, IModel<Integer> model,",
                "-\t\tClass<Integer> type)",
                "-\t{",
                "-\t\tTextField<Integer> minutesField = new TextField<Integer>(id, model, type)",
                "-\t\t{",
                "-\t\t\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tprotected IConverter<?> createConverter(Class<?> type)",
                "-\t\t\t{",
                "-\t\t\t\tif (Integer.class.isAssignableFrom(type))",
                "-\t\t\t\t{",
                "-\t\t\t\t\treturn MINUTES_CONVERTER;",
                "-\t\t\t\t}",
                "-\t\t\t\treturn null;",
                "-\t\t\t}",
                "-\t\t};",
                "-\t\tminutesField.add(new RangeValidator<>(0, 59));",
                "-\t\tminutesField.setLabel(new Model<>(MINUTES));",
                "-\t\treturn minutesField;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * ",
                "-\t * @return The date TextField",
                "-\t */",
                "-\tprotected final DateTextField getDateTextField()",
                "-\t{",
                "-\t\treturn dateField;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the amOrPm model object of the drop down choice.",
                "-\t * ",
                "-\t * @return amOrPm",
                "-\t * ",
                "-\t * @deprecated valid during rendering only",
                "-\t */",
                "-\tpublic final AM_PM getAmOrPm()",
                "-\t{",
                "-\t\treturn amOrPm;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the date model object for the date TextField. Any associated time information will be",
                "-\t * ignored.",
                "-\t * ",
                "-\t * @return date",
                "-\t * ",
                "-\t * @deprecated valid during rendering only",
                "-\t */",
                "-\tpublic final Date getDate()",
                "-\t{",
                "-\t\treturn date;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the hours model object for the TextField",
                "-\t * ",
                "-\t * @return hours",
                "-\t * ",
                "-\t * @deprecated valid during rendering only",
                "-\t */",
                "-\tpublic final Integer getHours()",
                "-\t{",
                "-\t\treturn hours;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the minutes model object for the TextField",
                "-\t * ",
                "-\t * @return minutes",
                "-\t * ",
                "-\t * @deprecated valid during rendering only",
                "-\t */",
                "-\tpublic final Integer getMinutes()",
                "-\t{",
                "-\t\treturn minutes;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gives overriding classes the option of adding (or even changing/ removing) configuration",
                "-\t * properties for the javascript widget. See <a",
                "-\t * href=\"http://developer.yahoo.com/yui/calendar/\">the widget's documentation</a> for the",
                "-\t * available options. If you want to override/ remove properties, you should call",
                "-\t * super.configure(properties) first. If you don't call that, be aware that you will have to",
                "-\t * call {@link #configure(java.util.Map)} manually if you like localized strings to be added.",
                "-\t * ",
                "-\t * @param widgetProperties",
                "-\t *            the current widget properties",
                "-\t */",
                "-\tprotected void configure(Map<String, Object> widgetProperties)",
                "-\t{",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic String getInput()",
                "-\t{",
                "-\t\t// since we override convertInput, we can let this method return a value",
                "-\t\t// that is just suitable for error reporting",
                "-\t\treturn dateField.getInput() + \", \" + hoursField.getInput() + \":\" + minutesField.getInput();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Sets the amOrPm model object associated with the drop down choice.",
                "-\t * ",
                "-\t * @param amOrPm",
                "-\t *            amOrPm",
                "-\t */",
                "-\tpublic final void setAmOrPm(final AM_PM amOrPm)",
                "-\t{",
                "-\t\tthis.amOrPm = amOrPm;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Sets the date model object associated with the date TextField. It does not affect hours or",
                "-\t * minutes.",
                "-\t * ",
                "-\t * @param date",
                "-\t *            date",
                "-\t */",
                "-\tpublic final void setDate(final Date date)",
                "-\t{",
                "-\t\tthis.date = date;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Sets hours.",
                "-\t * ",
                "-\t * @param hours",
                "-\t *            hours",
                "-\t */",
                "-\tpublic final void setHours(final Integer hours)",
                "-\t{",
                "-\t\tthis.hours = hours;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Sets minutes.",
                "-\t * ",
                "-\t * @param minutes",
                "-\t *            minutes",
                "-\t */",
                "-\tpublic final void setMinutes(final Integer minutes)",
                "-\t{",
                "-\t\tthis.minutes = minutes;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the client's time zone.",
                "-\t * ",
                "-\t * @return The client's time zone or null",
                "-\t */",
                "-\tprotected TimeZone getClientTimeZone()",
                "-\t{",
                "-\t\tClientInfo info = Session.get().getClientInfo();",
                "-\t\tif (info instanceof WebClientInfo)",
                "-\t\t{",
                "-\t\t\treturn ((WebClientInfo)info).getProperties().getTimeZone();",
                "-\t\t}",
                "-\t\treturn null;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Sets the converted input, which is an instance of {@link Date}, possibly null. It combines",
                "-\t * the inputs of the nested date, hours, minutes and am/pm fields and constructs a date from it.",
                "-\t * <p>",
                "-\t * Note that overriding this method is a better option than overriding {@link #updateModel()}",
                "-\t * like the first versions of this class did. The reason for that is that this method can be",
                "-\t * used by form validators without having to depend on the actual model being updated, and this",
                "-\t * method is called by the default implementation of {@link #updateModel()} anyway (so we don't",
                "-\t * have to override that anymore).",
                "-\t */",
                "-\t@Override",
                "-\tpublic void convertInput()",
                "-\t{",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\t// Get the converted input values",
                "-\t\t\tDate dateFieldInput = dateField.getConvertedInput();",
                "-\t\t\tInteger hoursInput = hoursField.getConvertedInput();",
                "-\t\t\tInteger minutesInput = minutesField.getConvertedInput();",
                "-\t\t\tAM_PM amOrPmInput = amOrPmChoice.getConvertedInput();",
                "-",
                "-\t\t\tif (dateFieldInput == null)",
                "-\t\t\t{",
                "-\t\t\t\treturn;",
                "-\t\t\t}",
                "-",
                "-\t\t\t// Get year, month and day ignoring any timezone of the Date object",
                "-\t\t\tCalendar cal = Calendar.getInstance();",
                "-\t\t\tcal.setTime(dateFieldInput);",
                "-\t\t\tint year = cal.get(Calendar.YEAR);",
                "-\t\t\tint month = cal.get(Calendar.MONTH) + 1;",
                "-\t\t\tint day = cal.get(Calendar.DAY_OF_MONTH);",
                "-\t\t\tint hours = (hoursInput == null ? 0 : hoursInput % 24);",
                "-\t\t\tint minutes = (minutesInput == null ? 0 : minutesInput);",
                "-",
                "-\t\t\t// Use the input to create a date object with proper timezone",
                "-\t\t\tMutableDateTime date = new MutableDateTime(year, month, day, hours, minutes, 0, 0,",
                "-\t\t\t\tDateTimeZone.forTimeZone(getClientTimeZone()));",
                "-",
                "-\t\t\t// Adjust for halfday if needed",
                "-\t\t\tif (use12HourFormat())",
                "-\t\t\t{",
                "-\t\t\t\tint halfday = (amOrPmInput == AM_PM.PM ? 1 : 0);",
                "-\t\t\t\tdate.set(DateTimeFieldType.halfdayOfDay(), halfday);",
                "-\t\t\t\tdate.set(DateTimeFieldType.hourOfHalfday(), hours % 12);",
                "-\t\t\t}",
                "-",
                "-\t\t\t// The date will be in the server's timezone",
                "-\t\t\tsetConvertedInput(newDateInstance(date.getMillis()));",
                "-\t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tDateTimeField.this.error(e.getMessage());",
                "-\t\t\tinvalid();",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * A factory method for the DateTextField's model object.",
                "-\t * ",
                "-\t * @return any specialization of java.util.Date",
                "-\t */",
                "-\tprotected Date newDateInstance()",
                "-\t{",
                "-\t\treturn new Date();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * A factory method for the DateTextField's model object.",
                "-\t * ",
                "-\t * @param time",
                "-\t *            the time in milliseconds",
                "-\t * @return any specialization of java.util.Date",
                "-\t */",
                "-\tprotected Date newDateInstance(long time)",
                "-\t{",
                "-\t\treturn new Date(time);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * create a new {@link DateTextField} instance to be added to this panel.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            the component id",
                "-\t * @param dateFieldModel",
                "-\t *            model that should be used by the {@link DateTextField}",
                "-\t * @return a new date text field instance",
                "-\t */",
                "-\tprotected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)",
                "-\t{",
                "-\t\treturn DateTextField.forShortStyle(id, dateFieldModel, false);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @see org.apache.wicket.Component#onBeforeRender()",
                "-\t */",
                "-\t@Override",
                "-\tprotected void onBeforeRender()",
                "-\t{",
                "-\t\tdateField.setRequired(isRequired());",
                "-\t\thoursField.setRequired(isRequired());",
                "-\t\tminutesField.setRequired(isRequired());",
                "-",
                "-\t\tboolean use12HourFormat = use12HourFormat();",
                "-\t\tamOrPmChoice.setVisible(use12HourFormat);",
                "-",
                "-\t\tDate modelObject = (Date)getDefaultModelObject();",
                "-\t\tif (modelObject == null)",
                "-\t\t{",
                "-\t\t\tdate = null;",
                "-\t\t\thours = null;",
                "-\t\t\tminutes = null;",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\tMutableDateTime mDate = new MutableDateTime(modelObject);",
                "-\t\t\t// convert date to the client's time zone if we have that info",
                "-\t\t\tTimeZone zone = getClientTimeZone();",
                "-\t\t\tif (zone != null)",
                "-\t\t\t{",
                "-\t\t\t\tmDate.setZone(DateTimeZone.forTimeZone(zone));",
                "-\t\t\t}",
                "-",
                "-\t\t\tdate = mDate.toDateTime().toLocalDate().toDate();",
                "-",
                "-\t\t\tif (use12HourFormat)",
                "-\t\t\t{",
                "-\t\t\t\tint hourOfHalfDay = mDate.get(DateTimeFieldType.hourOfHalfday());",
                "-\t\t\t\thours = hourOfHalfDay == 0 ? 12 : hourOfHalfDay;",
                "-\t\t\t}",
                "-\t\t\telse",
                "-\t\t\t{",
                "-\t\t\t\thours = mDate.get(DateTimeFieldType.hourOfDay());",
                "-\t\t\t}",
                "-",
                "-\t\t\tamOrPm = (mDate.get(DateTimeFieldType.halfdayOfDay()) == 0) ? AM_PM.AM : AM_PM.PM;",
                "-\t\t\tminutes = mDate.getMinuteOfHour();",
                "-\t\t}",
                "-",
                "-\t\tsuper.onBeforeRender();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Change a date in another timezone",
                "-\t * ",
                "-\t * @param date",
                "-\t *            The input date.",
                "-\t * @param zone",
                "-\t *            The target timezone.",
                "-\t * @return A new converted date.",
                "-\t */",
                "-\tpublic static Date changeTimeZone(Date date, TimeZone zone)",
                "-\t{",
                "-\t\tCalendar first = Calendar.getInstance(zone);",
                "-\t\tfirst.setTimeInMillis(date.getTime());",
                "-",
                "-\t\tCalendar output = Calendar.getInstance();",
                "-\t\toutput.set(Calendar.YEAR, first.get(Calendar.YEAR));",
                "-\t\toutput.set(Calendar.MONTH, first.get(Calendar.MONTH));",
                "-\t\toutput.set(Calendar.DAY_OF_MONTH, first.get(Calendar.DAY_OF_MONTH));",
                "-\t\toutput.set(Calendar.HOUR_OF_DAY, first.get(Calendar.HOUR_OF_DAY));",
                "-\t\toutput.set(Calendar.MINUTE, first.get(Calendar.MINUTE));",
                "-\t\toutput.set(Calendar.SECOND, first.get(Calendar.SECOND));",
                "-\t\toutput.set(Calendar.MILLISECOND, first.get(Calendar.MILLISECOND));",
                "-",
                "-\t\treturn output.getTime();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Checks whether the current {@link Locale} uses the 12h or 24h time format. This method can be",
                "-\t * overridden to e.g. always use 24h format.",
                "-\t * ",
                "-\t * @return true, if the current {@link Locale} uses the 12h format.<br/>",
                "-\t *         false, otherwise",
                "-\t */",
                "-\tprotected boolean use12HourFormat()",
                "-\t{",
                "-\t\tString pattern = DateTimeFormat.patternForStyle(\"-S\", getLocale());",
                "-\t\treturn pattern.indexOf('a') != -1 || pattern.indexOf('h') != -1",
                "-\t\t\t|| pattern.indexOf('K') != -1;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return either 12 or 24, depending on the hour format of the current {@link Locale}",
                "-\t */",
                "-\tprivate int getMaximumHours()",
                "-\t{",
                "-\t\treturn getMaximumHours(use12HourFormat());",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Convenience method (mainly for optimization purposes), in case {@link #use12HourFormat()} has",
                "-\t * already been stored in a local variable and thus doesn't need to be computed again.",
                "-\t * ",
                "-\t * @param use12HourFormat",
                "-\t *            the hour format to use",
                "-\t * @return either 12 or 24, depending on the parameter <code>use12HourFormat</code>",
                "-\t */",
                "-\tprivate int getMaximumHours(boolean use12HourFormat)",
                "-\t{",
                "-\t\treturn use12HourFormat ? 12 : 24;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * The DatePicker that gets added to the DateTimeField component. Users may override this method",
                "-\t * with a DatePicker of their choice.",
                "-\t * ",
                "-\t * @return a new {@link DatePicker} instance",
                "-\t */",
                "-\tprotected DatePicker newDatePicker()",
                "-\t{",
                "-\t\treturn new DatePicker()",
                "-\t\t{",
                "-\t\t\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tprotected void configure(final Map<String, Object> widgetProperties,",
                "-\t\t\t\tfinal IHeaderResponse response, final Map<String, Object> initVariables)",
                "-\t\t\t{",
                "-\t\t\t\tsuper.configure(widgetProperties, response, initVariables);",
                "-",
                "-\t\t\t\tDateTimeField.this.configure(widgetProperties);",
                "-\t\t\t}",
                "-\t\t};",
                "-\t}",
                "-}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/TimeField.java b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/TimeField.java",
                "deleted file mode 100644",
                "index 3d98b31fd2..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/TimeField.java",
                "+++ /dev/null",
                "@@ -1,71 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.yui.calendar;",
                "-",
                "-import java.util.Date;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.model.IModel;",
                "-",
                "-/**",
                "- * Works on a {@link java.util.Date} object. Displays a field for hours and a field for minutes, and",
                "- * an AM/PM field. The format (12h/24h) of the hours field depends on the time format of this",
                "- * {@link TimeField}'s {@link Locale}, as does the visibility of the AM/PM field (see",
                "- * {@link TimeField#use12HourFormat}).",
                "- * ",
                "- * @author eelcohillenius",
                "- * @see DateField for a variant with just the date field and date picker",
                "- */",
                "-public class TimeField extends DateTimeField",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t *      the component id",
                "-\t */",
                "-\tpublic TimeField(String id)",
                "-\t{",
                "-\t\tthis(id, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t *      the component id",
                "-\t * @param model",
                "-\t *      the component's model",
                "-\t */",
                "-\tpublic TimeField(String id, IModel<Date> model)",
                "-\t{",
                "-\t\tsuper(id, model);",
                "-",
                "-\t\tgetDateTextField().setVisibilityAllowed(false);",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic void convertInput()",
                "-\t{",
                "-\t\tDate modelObject = (Date)getDefaultModelObject();",
                "-\t\tgetDateTextField().setConvertedInput(modelObject != null ? modelObject : newDateInstance());",
                "-\t\tsuper.convertInput();",
                "-\t}",
                "-",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/assets/skins/sam/calendar.css b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/assets/skins/sam/calendar.css",
                "deleted file mode 100644",
                "index 3e932f4d97..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/assets/skins/sam/calendar.css",
                "+++ /dev/null",
                "@@ -1,8 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-.yui-calcontainer{position:relative;float:left;_overflow:hidden}.yui-calcontainer iframe{position:absolute;border:0;margin:0;padding:0;z-index:0;width:100%;height:100%;left:0;top:0}.yui-calcontainer iframe.fixedsize{width:50em;height:50em;top:-1px;left:-1px}.yui-calcontainer.multi .groupcal{z-index:1;float:left;position:relative}.yui-calcontainer .title{position:relative;z-index:1}.yui-calcontainer .close-icon{position:absolute;z-index:1;text-indent:-10000em;overflow:hidden}.yui-calendar{position:relative}.yui-calendar .calnavleft{position:absolute;z-index:1;text-indent:-10000em;overflow:hidden}.yui-calendar .calnavright{position:absolute;z-index:1;text-indent:-10000em;overflow:hidden}.yui-calendar .calheader{position:relative;width:100%;text-align:center}.yui-calcontainer .yui-cal-nav-mask{position:absolute;z-index:2;margin:0;padding:0;width:100%;height:100%;_width:0;_height:0;left:0;top:0;display:none}.yui-calcontainer .yui-cal-nav{position:absolute;z-index:3;top:0;display:none}.yui-calcontainer .yui-cal-nav .yui-cal-nav-btn{display:-moz-inline-box;display:inline-block}.yui-calcontainer .yui-cal-nav .yui-cal-nav-btn button{display:block;*display:inline-block;*overflow:visible;border:0;background-color:transparent;cursor:pointer}.yui-calendar .calbody a:hover{background:inherit}p#clear{clear:left;padding-top:10px}.yui-skin-sam .yui-calcontainer{background-color:#f2f2f2;border:1px solid #808080;padding:10px}.yui-skin-sam .yui-calcontainer.multi{padding:0 5px 0 5px}.yui-skin-sam .yui-calcontainer.multi .groupcal{background-color:transparent;border:0;padding:10px 5px 10px 5px;margin:0}.yui-skin-sam .yui-calcontainer .title{background:url(../../../../assets/skins/sam/sprite.png) repeat-x 0 0;border-bottom:1px solid #ccc;font:100% sans-serif;color:#000;font-weight:bold;height:auto;padding:.4em;margin:0 -10px 10px -10px;top:0;left:0;text-align:left}.yui-skin-sam .yui-calcontainer.multi .title{margin:0 -5px 0 -5px}.yui-skin-sam .yui-calcontainer.withtitle{padding-top:0}.yui-skin-sam .yui-calcontainer .calclose{background:url(../../../../assets/skins/sam/sprite.png) no-repeat 0 -300px;width:25px;height:15px;top:.4em;right:.4em;cursor:pointer}.yui-skin-sam .yui-calendar{border-spacing:0;border-collapse:collapse;font:100% sans-serif;text-align:center;margin:0}.yui-skin-sam .yui-calendar .calhead{background:transparent;border:0;vertical-align:middle;padding:0}.yui-skin-sam .yui-calendar .calheader{background:transparent;font-weight:bold;padding:0 0 .6em 0;text-align:center}.yui-skin-sam .yui-calendar .calheader img{border:0}.yui-skin-sam .yui-calendar .calnavleft{background:url(../../../../assets/skins/sam/sprite.png) no-repeat 0 -450px;width:25px;height:15px;top:0;bottom:0;left:-10px;margin-left:.4em;cursor:pointer}.yui-skin-sam .yui-calendar .calnavright{background:url(../../../../assets/skins/sam/sprite.png) no-repeat 0 -500px;width:25px;height:15px;top:0;bottom:0;right:-10px;margin-right:.4em;cursor:pointer}.yui-skin-sam .yui-calendar .calweekdayrow{height:2em}.yui-skin-sam .yui-calendar .calweekdayrow th{padding:0;border:0}.yui-skin-sam .yui-calendar .calweekdaycell{color:#000;font-weight:bold;text-align:center;width:2em}.yui-skin-sam .yui-calendar .calfoot{background-color:#f2f2f2}.yui-skin-sam .yui-calendar .calrowhead,.yui-skin-sam .yui-calendar .calrowfoot{color:#a6a6a6;font-size:85%;font-style:normal;font-weight:normal;border:0}.yui-skin-sam .yui-calendar .calrowhead{text-align:right;padding:0 2px 0 0}.yui-skin-sam .yui-calendar .calrowfoot{text-align:left;padding:0 0 0 2px}.yui-skin-sam .yui-calendar td.calcell{border:1px solid #ccc;background:#fff;padding:1px;height:1.6em;line-height:1.6em;text-align:center;white-space:nowrap}.yui-skin-sam .yui-calendar td.calcell a{color:#06c;display:block;height:100%;text-decoration:none}.yui-skin-sam .yui-calendar td.calcell.today{background-color:#000}.yui-skin-sam .yui-calendar td.calcell.today a{background-color:#fff}.yui-skin-sam .yui-calendar td.calcell.oom{background-color:#ccc;color:#a6a6a6;cursor:default}.yui-skin-sam .yui-calendar td.calcell.oom a{color:#a6a6a6}.yui-skin-sam .yui-calendar td.calcell.selected{background-color:#fff;color:#000}.yui-skin-sam .yui-calendar td.calcell.selected a{background-color:#b3d4ff;color:#000}.yui-skin-sam .yui-calendar td.calcell.calcellhover{background-color:#426fd9;color:#fff;cursor:pointer}.yui-skin-sam .yui-calendar td.calcell.calcellhover a{background-color:#426fd9;color:#fff}.yui-skin-sam .yui-calendar td.calcell.previous{color:#e0e0e0}.yui-skin-sam .yui-calendar td.calcell.restricted{text-decoration:line-through}.yui-skin-sam .yui-calendar td.calcell.highlight1{background-color:#cf9}.yui-skin-sam .yui-calendar td.calcell.highlight2{background-color:#9cf}.yui-skin-sam .yui-calendar td.calcell.highlight3{background-color:#fcc}.yui-skin-sam .yui-calendar td.calcell.highlight4{background-color:#cf9}.yui-skin-sam .yui-calendar a.calnav{border:1px solid #f2f2f2;padding:0 4px;text-decoration:none;color:#000;zoom:1}.yui-skin-sam .yui-calendar a.calnav:hover{background:url(../../../../assets/skins/sam/sprite.png) repeat-x 0 0;border-color:#a0a0a0;cursor:pointer}.yui-skin-sam .yui-calcontainer .yui-cal-nav-mask{background-color:#000;opacity:.25;filter:alpha(opacity=25)}.yui-skin-sam .yui-calcontainer .yui-cal-nav{font-family:arial,helvetica,clean,sans-serif;font-size:93%;border:1px solid #808080;left:50%;margin-left:-7em;width:14em;padding:0;top:2.5em;background-color:#f2f2f2}.yui-skin-sam .yui-calcontainer.withtitle .yui-cal-nav{top:4.5em}.yui-skin-sam .yui-calcontainer.multi .yui-cal-nav{width:16em;margin-left:-8em}.yui-skin-sam .yui-calcontainer .yui-cal-nav-y,.yui-skin-sam .yui-calcontainer .yui-cal-nav-m,.yui-skin-sam .yui-calcontainer .yui-cal-nav-b{padding:5px 10px 5px 10px}.yui-skin-sam .yui-calcontainer .yui-cal-nav-b{text-align:center}.yui-skin-sam .yui-calcontainer .yui-cal-nav-e{margin-top:5px;padding:5px;background-color:#edf5ff;border-top:1px solid black;display:none}.yui-skin-sam .yui-calcontainer .yui-cal-nav label{display:block;font-weight:bold}",
                "-.yui-skin-sam .yui-calcontainer .yui-cal-nav-mc{width:100%;_width:auto}.yui-skin-sam .yui-calcontainer .yui-cal-nav-y input.yui-invalid{background-color:#ffee69;border:1px solid #000}.yui-skin-sam .yui-calcontainer .yui-cal-nav-yc{width:4em}.yui-skin-sam .yui-calcontainer .yui-cal-nav .yui-cal-nav-btn{border:1px solid #808080;background:url(../../../../assets/skins/sam/sprite.png) repeat-x 0 0;background-color:#ccc;margin:auto .15em}.yui-skin-sam .yui-calcontainer .yui-cal-nav .yui-cal-nav-btn button{padding:0 8px;font-size:93%;line-height:2;*line-height:1.7;min-height:2em;*min-height:auto;color:#000}.yui-skin-sam .yui-calcontainer .yui-cal-nav .yui-cal-nav-btn.yui-default{border:1px solid #304369;background-color:#426fd9;background:url(../../../../assets/skins/sam/sprite.png) repeat-x 0 -1400px}.yui-skin-sam .yui-calcontainer .yui-cal-nav .yui-cal-nav-btn.yui-default button{color:#fff}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar-min.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar-min.js",
                "deleted file mode 100644",
                "index 223cdcfa22..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar-min.js",
                "+++ /dev/null",
                "@@ -1,18 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-(function(){YAHOO.util.Config=function(d){if(d){this.init(d);}};var b=YAHOO.lang,c=YAHOO.util.CustomEvent,a=YAHOO.util.Config;a.CONFIG_CHANGED_EVENT=\"configChanged\";a.BOOLEAN_TYPE=\"boolean\";a.prototype={owner:null,queueInProgress:false,config:null,initialConfig:null,eventQueue:null,configChangedEvent:null,init:function(d){this.owner=d;this.configChangedEvent=this.createEvent(a.CONFIG_CHANGED_EVENT);this.configChangedEvent.signature=c.LIST;this.queueInProgress=false;this.config={};this.initialConfig={};this.eventQueue=[];},checkBoolean:function(d){return(typeof d==a.BOOLEAN_TYPE);},checkNumber:function(d){return(!isNaN(d));},fireEvent:function(d,f){var e=this.config[d];if(e&&e.event){e.event.fire(f);}},addProperty:function(e,d){e=e.toLowerCase();this.config[e]=d;d.event=this.createEvent(e,{scope:this.owner});d.event.signature=c.LIST;d.key=e;if(d.handler){d.event.subscribe(d.handler,this.owner);}this.setProperty(e,d.value,true);if(!d.suppressEvent){this.queueProperty(e,d.value);}},getConfig:function(){var d={},f=this.config,g,e;for(g in f){if(b.hasOwnProperty(f,g)){e=f[g];if(e&&e.event){d[g]=e.value;}}}return d;},getProperty:function(d){var e=this.config[d.toLowerCase()];if(e&&e.event){return e.value;}else{return undefined;}},resetProperty:function(d){d=d.toLowerCase();var e=this.config[d];if(e&&e.event){if(d in this.initialConfig){this.setProperty(d,this.initialConfig[d]);return true;}}else{return false;}},setProperty:function(e,g,d){var f;e=e.toLowerCase();if(this.queueInProgress&&!d){this.queueProperty(e,g);return true;}else{f=this.config[e];if(f&&f.event){if(f.validator&&!f.validator(g)){return false;}else{f.value=g;if(!d){this.fireEvent(e,g);this.configChangedEvent.fire([e,g]);}return true;}}else{return false;}}},queueProperty:function(v,r){v=v.toLowerCase();var u=this.config[v],l=false,k,g,h,j,p,t,f,n,o,d,m,w,e;if(u&&u.event){if(!b.isUndefined(r)&&u.validator&&!u.validator(r)){return false;}else{if(!b.isUndefined(r)){u.value=r;}else{r=u.value;}l=false;k=this.eventQueue.length;for(m=0;m<k;m++){g=this.eventQueue[m];if(g){h=g[0];j=g[1];if(h==v){this.eventQueue[m]=null;this.eventQueue.push([v,(!b.isUndefined(r)?r:j)]);l=true;break;}}}if(!l&&!b.isUndefined(r)){this.eventQueue.push([v,r]);}}if(u.supercedes){p=u.supercedes.length;for(w=0;w<p;w++){t=u.supercedes[w];f=this.eventQueue.length;for(e=0;e<f;e++){n=this.eventQueue[e];if(n){o=n[0];d=n[1];if(o==t.toLowerCase()){this.eventQueue.push([o,d]);this.eventQueue[e]=null;break;}}}}}return true;}else{return false;}},refireEvent:function(d){d=d.toLowerCase();var e=this.config[d];if(e&&e.event&&!b.isUndefined(e.value)){if(this.queueInProgress){this.queueProperty(d);}else{this.fireEvent(d,e.value);}}},applyConfig:function(d,g){var f,e;if(g){e={};for(f in d){if(b.hasOwnProperty(d,f)){e[f.toLowerCase()]=d[f];}}this.initialConfig=e;}for(f in d){if(b.hasOwnProperty(d,f)){this.queueProperty(f,d[f]);}}},refresh:function(){var d;for(d in this.config){if(b.hasOwnProperty(this.config,d)){this.refireEvent(d);}}},fireQueue:function(){var e,h,d,g,f;this.queueInProgress=true;for(e=0;e<this.eventQueue.length;e++){h=this.eventQueue[e];if(h){d=h[0];g=h[1];f=this.config[d];f.value=g;this.eventQueue[e]=null;this.fireEvent(d,g);}}this.queueInProgress=false;this.eventQueue=[];},subscribeToConfigEvent:function(d,e,g,h){var f=this.config[d.toLowerCase()];if(f&&f.event){if(!a.alreadySubscribed(f.event,e,g)){f.event.subscribe(e,g,h);}return true;}else{return false;}},unsubscribeFromConfigEvent:function(d,e,g){var f=this.config[d.toLowerCase()];if(f&&f.event){return f.event.unsubscribe(e,g);}else{return false;}},toString:function(){var d=\"Config\";if(this.owner){d+=\" [\"+this.owner.toString()+\"]\";}return d;},outputEventQueue:function(){var d=\"\",g,e,f=this.eventQueue.length;for(e=0;e<f;e++){g=this.eventQueue[e];if(g){d+=g[0]+\"=\"+g[1]+\", \";}}return d;},destroy:function(){var e=this.config,d,f;for(d in e){if(b.hasOwnProperty(e,d)){f=e[d];f.event.unsubscribeAll();f.event=null;}}this.configChangedEvent.unsubscribeAll();this.configChangedEvent=null;this.owner=null;this.config=null;this.initialConfig=null;this.eventQueue=null;}};a.alreadySubscribed=function(e,h,j){var f=e.subscribers.length,d,g;if(f>0){g=f-1;do{d=e.subscribers[g];if(d&&d.obj==j&&d.fn==h){return true;}}while(g--);}return false;};YAHOO.lang.augmentProto(a,YAHOO.util.EventProvider);}());YAHOO.widget.DateMath={DAY:\"D\",WEEK:\"W\",YEAR:\"Y\",MONTH:\"M\",ONE_DAY_MS:1000*60*60*24,WEEK_ONE_JAN_DATE:1,add:function(a,e,c){var g=new Date(a.getTime());switch(e){case this.MONTH:var f=a.getMonth()+c;var b=0;if(f<0){while(f<0){f+=12;b-=1;}}else{if(f>11){while(f>11){f-=12;b+=1;}}}g.setMonth(f);g.setFullYear(a.getFullYear()+b);break;case this.DAY:this._addDays(g,c);break;case this.YEAR:g.setFullYear(a.getFullYear()+c);break;case this.WEEK:this._addDays(g,(c*7));break;}return g;},_addDays:function(e,c){if(YAHOO.env.ua.webkit&&YAHOO.env.ua.webkit<420){if(c<0){for(var b=-128;c<b;c-=b){e.setDate(e.getDate()+b);}}else{for(var a=96;c>a;c-=a){e.setDate(e.getDate()+a);}}}e.setDate(e.getDate()+c);},subtract:function(a,c,b){return this.add(a,c,(b*-1));},before:function(c,b){var a=b.getTime();if(c.getTime()<a){return true;}else{return false;}},after:function(c,b){var a=b.getTime();if(c.getTime()>a){return true;}else{return false;}},between:function(b,a,c){if(this.after(b,a)&&this.before(b,c)){return true;}else{return false;}},getJan1:function(a){return this.getDate(a,0,1);},getDayOffset:function(b,d){var c=this.getJan1(d);var a=Math.ceil((b.getTime()-c.getTime())/this.ONE_DAY_MS);return a;},getWeekNumber:function(d,b,g){b=b||0;g=g||this.WEEK_ONE_JAN_DATE;var h=this.clearTime(d),l,m;if(h.getDay()===b){l=h;}else{l=this.getFirstDayOfWeek(h,b);}var i=l.getFullYear();m=new Date(l.getTime()+6*this.ONE_DAY_MS);var f;if(i!==m.getFullYear()&&m.getDate()>=g){f=1;}else{var e=this.clearTime(this.getDate(i,0,g)),a=this.getFirstDayOfWeek(e,b);var j=Math.round((h.getTime()-a.getTime())/this.ONE_DAY_MS);var k=j%7;var c=(j-k)/7;f=c+1;}return f;},getFirstDayOfWeek:function(d,a){a=a||0;",
                "-var b=d.getDay(),c=(b-a+7)%7;return this.subtract(d,this.DAY,c);},isYearOverlapWeek:function(a){var c=false;var b=this.add(a,this.DAY,6);if(b.getFullYear()!=a.getFullYear()){c=true;}return c;},isMonthOverlapWeek:function(a){var c=false;var b=this.add(a,this.DAY,6);if(b.getMonth()!=a.getMonth()){c=true;}return c;},findMonthStart:function(a){var b=this.getDate(a.getFullYear(),a.getMonth(),1);return b;},findMonthEnd:function(b){var d=this.findMonthStart(b);var c=this.add(d,this.MONTH,1);var a=this.subtract(c,this.DAY,1);return a;},clearTime:function(a){a.setHours(12,0,0,0);return a;},getDate:function(e,a,c){var b=null;if(YAHOO.lang.isUndefined(c)){c=1;}if(e>=100){b=new Date(e,a,c);}else{b=new Date();b.setFullYear(e);b.setMonth(a);b.setDate(c);b.setHours(0,0,0,0);}return b;}};(function(){var c=YAHOO.util.Dom,a=YAHOO.util.Event,e=YAHOO.lang,d=YAHOO.widget.DateMath;function f(i,g,h){this.init.apply(this,arguments);}f.IMG_ROOT=null;f.DATE=\"D\";f.MONTH_DAY=\"MD\";f.WEEKDAY=\"WD\";f.RANGE=\"R\";f.MONTH=\"M\";f.DISPLAY_DAYS=42;f.STOP_RENDER=\"S\";f.SHORT=\"short\";f.LONG=\"long\";f.MEDIUM=\"medium\";f.ONE_CHAR=\"1char\";f.DEFAULT_CONFIG={YEAR_OFFSET:{key:\"year_offset\",value:0,supercedes:[\"pagedate\",\"selected\",\"mindate\",\"maxdate\"]},TODAY:{key:\"today\",value:new Date(),supercedes:[\"pagedate\"]},PAGEDATE:{key:\"pagedate\",value:null},SELECTED:{key:\"selected\",value:[]},TITLE:{key:\"title\",value:\"\"},CLOSE:{key:\"close\",value:false},IFRAME:{key:\"iframe\",value:(YAHOO.env.ua.ie&&YAHOO.env.ua.ie<=6)?true:false},MINDATE:{key:\"mindate\",value:null},MAXDATE:{key:\"maxdate\",value:null},MULTI_SELECT:{key:\"multi_select\",value:false},OOM_SELECT:{key:\"oom_select\",value:false},START_WEEKDAY:{key:\"start_weekday\",value:0},SHOW_WEEKDAYS:{key:\"show_weekdays\",value:true},SHOW_WEEK_HEADER:{key:\"show_week_header\",value:false},SHOW_WEEK_FOOTER:{key:\"show_week_footer\",value:false},HIDE_BLANK_WEEKS:{key:\"hide_blank_weeks\",value:false},NAV_ARROW_LEFT:{key:\"nav_arrow_left\",value:null},NAV_ARROW_RIGHT:{key:\"nav_arrow_right\",value:null},MONTHS_SHORT:{key:\"months_short\",value:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]},MONTHS_LONG:{key:\"months_long\",value:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]},WEEKDAYS_1CHAR:{key:\"weekdays_1char\",value:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"]},WEEKDAYS_SHORT:{key:\"weekdays_short\",value:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]},WEEKDAYS_MEDIUM:{key:\"weekdays_medium\",value:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]},WEEKDAYS_LONG:{key:\"weekdays_long\",value:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},LOCALE_MONTHS:{key:\"locale_months\",value:\"long\"},LOCALE_WEEKDAYS:{key:\"locale_weekdays\",value:\"short\"},DATE_DELIMITER:{key:\"date_delimiter\",value:\",\"},DATE_FIELD_DELIMITER:{key:\"date_field_delimiter\",value:\"/\"},DATE_RANGE_DELIMITER:{key:\"date_range_delimiter\",value:\"-\"},MY_MONTH_POSITION:{key:\"my_month_position\",value:1},MY_YEAR_POSITION:{key:\"my_year_position\",value:2},MD_MONTH_POSITION:{key:\"md_month_position\",value:1},MD_DAY_POSITION:{key:\"md_day_position\",value:2},MDY_MONTH_POSITION:{key:\"mdy_month_position\",value:1},MDY_DAY_POSITION:{key:\"mdy_day_position\",value:2},MDY_YEAR_POSITION:{key:\"mdy_year_position\",value:3},MY_LABEL_MONTH_POSITION:{key:\"my_label_month_position\",value:1},MY_LABEL_YEAR_POSITION:{key:\"my_label_year_position\",value:2},MY_LABEL_MONTH_SUFFIX:{key:\"my_label_month_suffix\",value:\" \"},MY_LABEL_YEAR_SUFFIX:{key:\"my_label_year_suffix\",value:\"\"},NAV:{key:\"navigator\",value:null},STRINGS:{key:\"strings\",value:{previousMonth:\"Previous Month\",nextMonth:\"Next Month\",close:\"Close\"},supercedes:[\"close\",\"title\"]}};f._DEFAULT_CONFIG=f.DEFAULT_CONFIG;var b=f.DEFAULT_CONFIG;f._EVENT_TYPES={BEFORE_SELECT:\"beforeSelect\",SELECT:\"select\",BEFORE_DESELECT:\"beforeDeselect\",DESELECT:\"deselect\",CHANGE_PAGE:\"changePage\",BEFORE_RENDER:\"beforeRender\",RENDER:\"render\",BEFORE_DESTROY:\"beforeDestroy\",DESTROY:\"destroy\",RESET:\"reset\",CLEAR:\"clear\",BEFORE_HIDE:\"beforeHide\",HIDE:\"hide\",BEFORE_SHOW:\"beforeShow\",SHOW:\"show\",BEFORE_HIDE_NAV:\"beforeHideNav\",HIDE_NAV:\"hideNav\",BEFORE_SHOW_NAV:\"beforeShowNav\",SHOW_NAV:\"showNav\",BEFORE_RENDER_NAV:\"beforeRenderNav\",RENDER_NAV:\"renderNav\"};f.STYLES={CSS_ROW_HEADER:\"calrowhead\",CSS_ROW_FOOTER:\"calrowfoot\",CSS_CELL:\"calcell\",CSS_CELL_SELECTOR:\"selector\",CSS_CELL_SELECTED:\"selected\",CSS_CELL_SELECTABLE:\"selectable\",CSS_CELL_RESTRICTED:\"restricted\",CSS_CELL_TODAY:\"today\",CSS_CELL_OOM:\"oom\",CSS_CELL_OOB:\"previous\",CSS_HEADER:\"calheader\",CSS_HEADER_TEXT:\"calhead\",CSS_BODY:\"calbody\",CSS_WEEKDAY_CELL:\"calweekdaycell\",CSS_WEEKDAY_ROW:\"calweekdayrow\",CSS_FOOTER:\"calfoot\",CSS_CALENDAR:\"yui-calendar\",CSS_SINGLE:\"single\",CSS_CONTAINER:\"yui-calcontainer\",CSS_NAV_LEFT:\"calnavleft\",CSS_NAV_RIGHT:\"calnavright\",CSS_NAV:\"calnav\",CSS_CLOSE:\"calclose\",CSS_CELL_TOP:\"calcelltop\",CSS_CELL_LEFT:\"calcellleft\",CSS_CELL_RIGHT:\"calcellright\",CSS_CELL_BOTTOM:\"calcellbottom\",CSS_CELL_HOVER:\"calcellhover\",CSS_CELL_HIGHLIGHT1:\"highlight1\",CSS_CELL_HIGHLIGHT2:\"highlight2\",CSS_CELL_HIGHLIGHT3:\"highlight3\",CSS_CELL_HIGHLIGHT4:\"highlight4\",CSS_WITH_TITLE:\"withtitle\",CSS_FIXED_SIZE:\"fixedsize\",CSS_LINK_CLOSE:\"link-close\"};f._STYLES=f.STYLES;f.prototype={Config:null,parent:null,index:-1,cells:null,cellDates:null,id:null,containerId:null,oDomContainer:null,today:null,renderStack:null,_renderStack:null,oNavigator:null,_selectedDates:null,domEventMap:null,_parseArgs:function(h){var g={id:null,container:null,config:null};if(h&&h.length&&h.length>0){switch(h.length){case 1:g.id=null;g.container=h[0];g.config=null;break;case 2:if(e.isObject(h[1])&&!h[1].tagName&&!(h[1] instanceof String)){g.id=null;g.container=h[0];g.config=h[1];}else{g.id=h[0];g.container=h[1];g.config=null;}break;default:g.id=h[0];g.container=h[1];g.config=h[2];break;}}else{}return g;},init:function(j,h,i){var g=this._parseArgs(arguments);j=g.id;h=g.container;i=g.config;this.oDomContainer=c.get(h);this._oDoc=this.oDomContainer.ownerDocument;if(!this.oDomContainer.id){this.oDomContainer.id=c.generateId();",
                "-}if(!j){j=this.oDomContainer.id+\"_t\";}this.id=j;this.containerId=this.oDomContainer.id;this.initEvents();this.cfg=new YAHOO.util.Config(this);this.Options={};this.Locale={};this.initStyles();c.addClass(this.oDomContainer,this.Style.CSS_CONTAINER);c.addClass(this.oDomContainer,this.Style.CSS_SINGLE);this.cellDates=[];this.cells=[];this.renderStack=[];this._renderStack=[];this.setupConfig();if(i){this.cfg.applyConfig(i,true);}this.cfg.fireQueue();this.today=this.cfg.getProperty(\"today\");},configIframe:function(i,h,j){var g=h[0];if(!this.parent){if(c.inDocument(this.oDomContainer)){if(g){var k=c.getStyle(this.oDomContainer,\"position\");if(k==\"absolute\"||k==\"relative\"){if(!c.inDocument(this.iframe)){this.iframe=document.createElement(\"iframe\");this.iframe.src=\"javascript:false;\";c.setStyle(this.iframe,\"opacity\",\"0\");if(YAHOO.env.ua.ie&&YAHOO.env.ua.ie<=6){c.addClass(this.iframe,this.Style.CSS_FIXED_SIZE);}this.oDomContainer.insertBefore(this.iframe,this.oDomContainer.firstChild);}}}else{if(this.iframe){if(this.iframe.parentNode){this.iframe.parentNode.removeChild(this.iframe);}this.iframe=null;}}}}},configTitle:function(h,g,i){var k=g[0];if(k){this.createTitleBar(k);}else{var j=this.cfg.getProperty(b.CLOSE.key);if(!j){this.removeTitleBar();}else{this.createTitleBar(\"&#160;\");}}},configClose:function(h,g,i){var k=g[0],j=this.cfg.getProperty(b.TITLE.key);if(k){if(!j){this.createTitleBar(\"&#160;\");}this.createCloseButton();}else{this.removeCloseButton();if(!j){this.removeTitleBar();}}},initEvents:function(){var g=f._EVENT_TYPES,i=YAHOO.util.CustomEvent,h=this;h.beforeSelectEvent=new i(g.BEFORE_SELECT);h.selectEvent=new i(g.SELECT);h.beforeDeselectEvent=new i(g.BEFORE_DESELECT);h.deselectEvent=new i(g.DESELECT);h.changePageEvent=new i(g.CHANGE_PAGE);h.beforeRenderEvent=new i(g.BEFORE_RENDER);h.renderEvent=new i(g.RENDER);h.beforeDestroyEvent=new i(g.BEFORE_DESTROY);h.destroyEvent=new i(g.DESTROY);h.resetEvent=new i(g.RESET);h.clearEvent=new i(g.CLEAR);h.beforeShowEvent=new i(g.BEFORE_SHOW);h.showEvent=new i(g.SHOW);h.beforeHideEvent=new i(g.BEFORE_HIDE);h.hideEvent=new i(g.HIDE);h.beforeShowNavEvent=new i(g.BEFORE_SHOW_NAV);h.showNavEvent=new i(g.SHOW_NAV);h.beforeHideNavEvent=new i(g.BEFORE_HIDE_NAV);h.hideNavEvent=new i(g.HIDE_NAV);h.beforeRenderNavEvent=new i(g.BEFORE_RENDER_NAV);h.renderNavEvent=new i(g.RENDER_NAV);h.beforeSelectEvent.subscribe(h.onBeforeSelect,this,true);h.selectEvent.subscribe(h.onSelect,this,true);h.beforeDeselectEvent.subscribe(h.onBeforeDeselect,this,true);h.deselectEvent.subscribe(h.onDeselect,this,true);h.changePageEvent.subscribe(h.onChangePage,this,true);h.renderEvent.subscribe(h.onRender,this,true);h.resetEvent.subscribe(h.onReset,this,true);h.clearEvent.subscribe(h.onClear,this,true);},doPreviousMonthNav:function(h,g){a.preventDefault(h);setTimeout(function(){g.previousMonth();var j=c.getElementsByClassName(g.Style.CSS_NAV_LEFT,\"a\",g.oDomContainer);if(j&&j[0]){try{j[0].focus();}catch(i){}}},0);},doNextMonthNav:function(h,g){a.preventDefault(h);setTimeout(function(){g.nextMonth();var j=c.getElementsByClassName(g.Style.CSS_NAV_RIGHT,\"a\",g.oDomContainer);if(j&&j[0]){try{j[0].focus();}catch(i){}}},0);},doSelectCell:function(m,g){var r,o,i,l;var n=a.getTarget(m),h=n.tagName.toLowerCase(),k=false;while(h!=\"td\"&&!c.hasClass(n,g.Style.CSS_CELL_SELECTABLE)){if(!k&&h==\"a\"&&c.hasClass(n,g.Style.CSS_CELL_SELECTOR)){k=true;}n=n.parentNode;h=n.tagName.toLowerCase();if(n==this.oDomContainer||h==\"html\"){return;}}if(k){a.preventDefault(m);}r=n;if(c.hasClass(r,g.Style.CSS_CELL_SELECTABLE)){l=g.getIndexFromId(r.id);if(l>-1){o=g.cellDates[l];if(o){i=d.getDate(o[0],o[1]-1,o[2]);var q;if(g.Options.MULTI_SELECT){q=r.getElementsByTagName(\"a\")[0];if(q){q.blur();}var j=g.cellDates[l];var p=g._indexOfSelectedFieldArray(j);if(p>-1){g.deselectCell(l);}else{g.selectCell(l);}}else{q=r.getElementsByTagName(\"a\")[0];if(q){q.blur();}g.selectCell(l);}}}}},doCellMouseOver:function(i,h){var g;if(i){g=a.getTarget(i);}else{g=this;}while(g.tagName&&g.tagName.toLowerCase()!=\"td\"){g=g.parentNode;if(!g.tagName||g.tagName.toLowerCase()==\"html\"){return;}}if(c.hasClass(g,h.Style.CSS_CELL_SELECTABLE)){c.addClass(g,h.Style.CSS_CELL_HOVER);}},doCellMouseOut:function(i,h){var g;if(i){g=a.getTarget(i);}else{g=this;}while(g.tagName&&g.tagName.toLowerCase()!=\"td\"){g=g.parentNode;if(!g.tagName||g.tagName.toLowerCase()==\"html\"){return;}}if(c.hasClass(g,h.Style.CSS_CELL_SELECTABLE)){c.removeClass(g,h.Style.CSS_CELL_HOVER);}},setupConfig:function(){var g=this.cfg;g.addProperty(b.TODAY.key,{value:new Date(b.TODAY.value.getTime()),supercedes:b.TODAY.supercedes,handler:this.configToday,suppressEvent:true});g.addProperty(b.PAGEDATE.key,{value:b.PAGEDATE.value||new Date(b.TODAY.value.getTime()),handler:this.configPageDate});g.addProperty(b.SELECTED.key,{value:b.SELECTED.value.concat(),handler:this.configSelected});g.addProperty(b.TITLE.key,{value:b.TITLE.value,handler:this.configTitle});g.addProperty(b.CLOSE.key,{value:b.CLOSE.value,handler:this.configClose});g.addProperty(b.IFRAME.key,{value:b.IFRAME.value,handler:this.configIframe,validator:g.checkBoolean});g.addProperty(b.MINDATE.key,{value:b.MINDATE.value,handler:this.configMinDate});g.addProperty(b.MAXDATE.key,{value:b.MAXDATE.value,handler:this.configMaxDate});g.addProperty(b.MULTI_SELECT.key,{value:b.MULTI_SELECT.value,handler:this.configOptions,validator:g.checkBoolean});g.addProperty(b.OOM_SELECT.key,{value:b.OOM_SELECT.value,handler:this.configOptions,validator:g.checkBoolean});g.addProperty(b.START_WEEKDAY.key,{value:b.START_WEEKDAY.value,handler:this.configOptions,validator:g.checkNumber});g.addProperty(b.SHOW_WEEKDAYS.key,{value:b.SHOW_WEEKDAYS.value,handler:this.configOptions,validator:g.checkBoolean});g.addProperty(b.SHOW_WEEK_HEADER.key,{value:b.SHOW_WEEK_HEADER.value,handler:this.configOptions,validator:g.checkBoolean});g.addProperty(b.SHOW_WEEK_FOOTER.key,{value:b.SHOW_WEEK_FOOTER.value,handler:this.configOptions,validator:g.checkBoolean});g.addProperty(b.HIDE_BLANK_WEEKS.key,{value:b.HIDE_BLANK_WEEKS.value,handler:this.configOptions,validator:g.checkBoolean});",
                "-g.addProperty(b.NAV_ARROW_LEFT.key,{value:b.NAV_ARROW_LEFT.value,handler:this.configOptions});g.addProperty(b.NAV_ARROW_RIGHT.key,{value:b.NAV_ARROW_RIGHT.value,handler:this.configOptions});g.addProperty(b.MONTHS_SHORT.key,{value:b.MONTHS_SHORT.value,handler:this.configLocale});g.addProperty(b.MONTHS_LONG.key,{value:b.MONTHS_LONG.value,handler:this.configLocale});g.addProperty(b.WEEKDAYS_1CHAR.key,{value:b.WEEKDAYS_1CHAR.value,handler:this.configLocale});g.addProperty(b.WEEKDAYS_SHORT.key,{value:b.WEEKDAYS_SHORT.value,handler:this.configLocale});g.addProperty(b.WEEKDAYS_MEDIUM.key,{value:b.WEEKDAYS_MEDIUM.value,handler:this.configLocale});g.addProperty(b.WEEKDAYS_LONG.key,{value:b.WEEKDAYS_LONG.value,handler:this.configLocale});var h=function(){g.refireEvent(b.LOCALE_MONTHS.key);g.refireEvent(b.LOCALE_WEEKDAYS.key);};g.subscribeToConfigEvent(b.START_WEEKDAY.key,h,this,true);g.subscribeToConfigEvent(b.MONTHS_SHORT.key,h,this,true);g.subscribeToConfigEvent(b.MONTHS_LONG.key,h,this,true);g.subscribeToConfigEvent(b.WEEKDAYS_1CHAR.key,h,this,true);g.subscribeToConfigEvent(b.WEEKDAYS_SHORT.key,h,this,true);g.subscribeToConfigEvent(b.WEEKDAYS_MEDIUM.key,h,this,true);g.subscribeToConfigEvent(b.WEEKDAYS_LONG.key,h,this,true);g.addProperty(b.LOCALE_MONTHS.key,{value:b.LOCALE_MONTHS.value,handler:this.configLocaleValues});g.addProperty(b.LOCALE_WEEKDAYS.key,{value:b.LOCALE_WEEKDAYS.value,handler:this.configLocaleValues});g.addProperty(b.YEAR_OFFSET.key,{value:b.YEAR_OFFSET.value,supercedes:b.YEAR_OFFSET.supercedes,handler:this.configLocale});g.addProperty(b.DATE_DELIMITER.key,{value:b.DATE_DELIMITER.value,handler:this.configLocale});g.addProperty(b.DATE_FIELD_DELIMITER.key,{value:b.DATE_FIELD_DELIMITER.value,handler:this.configLocale});g.addProperty(b.DATE_RANGE_DELIMITER.key,{value:b.DATE_RANGE_DELIMITER.value,handler:this.configLocale});g.addProperty(b.MY_MONTH_POSITION.key,{value:b.MY_MONTH_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MY_YEAR_POSITION.key,{value:b.MY_YEAR_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MD_MONTH_POSITION.key,{value:b.MD_MONTH_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MD_DAY_POSITION.key,{value:b.MD_DAY_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MDY_MONTH_POSITION.key,{value:b.MDY_MONTH_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MDY_DAY_POSITION.key,{value:b.MDY_DAY_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MDY_YEAR_POSITION.key,{value:b.MDY_YEAR_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MY_LABEL_MONTH_POSITION.key,{value:b.MY_LABEL_MONTH_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MY_LABEL_YEAR_POSITION.key,{value:b.MY_LABEL_YEAR_POSITION.value,handler:this.configLocale,validator:g.checkNumber});g.addProperty(b.MY_LABEL_MONTH_SUFFIX.key,{value:b.MY_LABEL_MONTH_SUFFIX.value,handler:this.configLocale});g.addProperty(b.MY_LABEL_YEAR_SUFFIX.key,{value:b.MY_LABEL_YEAR_SUFFIX.value,handler:this.configLocale});g.addProperty(b.NAV.key,{value:b.NAV.value,handler:this.configNavigator});g.addProperty(b.STRINGS.key,{value:b.STRINGS.value,handler:this.configStrings,validator:function(i){return e.isObject(i);},supercedes:b.STRINGS.supercedes});},configStrings:function(h,g,i){var j=e.merge(b.STRINGS.value,g[0]);this.cfg.setProperty(b.STRINGS.key,j,true);},configPageDate:function(h,g,i){this.cfg.setProperty(b.PAGEDATE.key,this._parsePageDate(g[0]),true);},configMinDate:function(h,g,i){var j=g[0];if(e.isString(j)){j=this._parseDate(j);this.cfg.setProperty(b.MINDATE.key,d.getDate(j[0],(j[1]-1),j[2]));}},configMaxDate:function(h,g,i){var j=g[0];if(e.isString(j)){j=this._parseDate(j);this.cfg.setProperty(b.MAXDATE.key,d.getDate(j[0],(j[1]-1),j[2]));}},configToday:function(i,h,j){var k=h[0];if(e.isString(k)){k=this._parseDate(k);}var g=d.clearTime(k);if(!this.cfg.initialConfig[b.PAGEDATE.key]){this.cfg.setProperty(b.PAGEDATE.key,g);}this.today=g;this.cfg.setProperty(b.TODAY.key,g,true);},configSelected:function(i,g,k){var h=g[0],j=b.SELECTED.key;if(h){if(e.isString(h)){this.cfg.setProperty(j,this._parseDates(h),true);}}if(!this._selectedDates){this._selectedDates=this.cfg.getProperty(j);}},configOptions:function(h,g,i){this.Options[h.toUpperCase()]=g[0];},configLocale:function(h,g,i){this.Locale[h.toUpperCase()]=g[0];this.cfg.refireEvent(b.LOCALE_MONTHS.key);this.cfg.refireEvent(b.LOCALE_WEEKDAYS.key);},configLocaleValues:function(j,i,k){j=j.toLowerCase();var m=i[0],h=this.cfg,n=this.Locale;switch(j){case b.LOCALE_MONTHS.key:switch(m){case f.SHORT:n.LOCALE_MONTHS=h.getProperty(b.MONTHS_SHORT.key).concat();break;case f.LONG:n.LOCALE_MONTHS=h.getProperty(b.MONTHS_LONG.key).concat();break;}break;case b.LOCALE_WEEKDAYS.key:switch(m){case f.ONE_CHAR:n.LOCALE_WEEKDAYS=h.getProperty(b.WEEKDAYS_1CHAR.key).concat();break;case f.SHORT:n.LOCALE_WEEKDAYS=h.getProperty(b.WEEKDAYS_SHORT.key).concat();break;case f.MEDIUM:n.LOCALE_WEEKDAYS=h.getProperty(b.WEEKDAYS_MEDIUM.key).concat();break;case f.LONG:n.LOCALE_WEEKDAYS=h.getProperty(b.WEEKDAYS_LONG.key).concat();break;}var l=h.getProperty(b.START_WEEKDAY.key);if(l>0){for(var g=0;g<l;++g){n.LOCALE_WEEKDAYS.push(n.LOCALE_WEEKDAYS.shift());}}break;}},configNavigator:function(h,g,i){var j=g[0];if(YAHOO.widget.CalendarNavigator&&(j===true||e.isObject(j))){if(!this.oNavigator){this.oNavigator=new YAHOO.widget.CalendarNavigator(this);this.beforeRenderEvent.subscribe(function(){if(!this.pages){this.oNavigator.erase();}},this,true);}}else{if(this.oNavigator){this.oNavigator.destroy();this.oNavigator=null;}}},initStyles:function(){var g=f.STYLES;this.Style={CSS_ROW_HEADER:g.CSS_ROW_HEADER,CSS_ROW_FOOTER:g.CSS_ROW_FOOTER,CSS_CELL:g.CSS_CELL,CSS_CELL_SELECTOR:g.CSS_CELL_SELECTOR,CSS_CELL_SELECTED:g.CSS_CELL_SELECTED,CSS_CELL_SELECTABLE:g.CSS_CELL_SELECTABLE,CSS_CELL_RESTRICTED:g.CSS_CELL_RESTRICTED,CSS_CELL_TODAY:g.CSS_CELL_TODAY,CSS_CELL_OOM:g.CSS_CELL_OOM,CSS_CELL_OOB:g.CSS_CELL_OOB,CSS_HEADER:g.CSS_HEADER,CSS_HEADER_TEXT:g.CSS_HEADER_TEXT,CSS_BODY:g.CSS_BODY,CSS_WEEKDAY_CELL:g.CSS_WEEKDAY_CELL,CSS_WEEKDAY_ROW:g.CSS_WEEKDAY_ROW,CSS_FOOTER:g.CSS_FOOTER,CSS_CALENDAR:g.CSS_CALENDAR,CSS_SINGLE:g.CSS_SINGLE,CSS_CONTAINER:g.CSS_CONTAINER,CSS_NAV_LEFT:g.CSS_NAV_LEFT,CSS_NAV_RIGHT:g.CSS_NAV_RIGHT,CSS_NAV:g.CSS_NAV,CSS_CLOSE:g.CSS_CLOSE,CSS_CELL_TOP:g.CSS_CELL_TOP,CSS_CELL_LEFT:g.CSS_CELL_LEFT,CSS_CELL_RIGHT:g.CSS_CELL_RIGHT,CSS_CELL_BOTTOM:g.CSS_CELL_BOTTOM,CSS_CELL_HOVER:g.CSS_CELL_HOVER,CSS_CELL_HIGHLIGHT1:g.CSS_CELL_HIGHLIGHT1,CSS_CELL_HIGHLIGHT2:g.CSS_CELL_HIGHLIGHT2,CSS_CELL_HIGHLIGHT3:g.CSS_CELL_HIGHLIGHT3,CSS_CELL_HIGHLIGHT4:g.CSS_CELL_HIGHLIGHT4,CSS_WITH_TITLE:g.CSS_WITH_TITLE,CSS_FIXED_SIZE:g.CSS_FIXED_SIZE,CSS_LINK_CLOSE:g.CSS_LINK_CLOSE};",
                "-},buildMonthLabel:function(){return this._buildMonthLabel(this.cfg.getProperty(b.PAGEDATE.key));},_buildMonthLabel:function(g){var i=this.Locale.LOCALE_MONTHS[g.getMonth()]+this.Locale.MY_LABEL_MONTH_SUFFIX,h=(g.getFullYear()+this.Locale.YEAR_OFFSET)+this.Locale.MY_LABEL_YEAR_SUFFIX;if(this.Locale.MY_LABEL_MONTH_POSITION==2||this.Locale.MY_LABEL_YEAR_POSITION==1){return h+i;}else{return i+h;}},buildDayLabel:function(g){return g.getDate();},createTitleBar:function(g){var h=c.getElementsByClassName(YAHOO.widget.CalendarGroup.CSS_2UPTITLE,\"div\",this.oDomContainer)[0]||document.createElement(\"div\");h.className=YAHOO.widget.CalendarGroup.CSS_2UPTITLE;h.innerHTML=g;this.oDomContainer.insertBefore(h,this.oDomContainer.firstChild);c.addClass(this.oDomContainer,this.Style.CSS_WITH_TITLE);return h;},removeTitleBar:function(){var g=c.getElementsByClassName(YAHOO.widget.CalendarGroup.CSS_2UPTITLE,\"div\",this.oDomContainer)[0]||null;if(g){a.purgeElement(g);this.oDomContainer.removeChild(g);}c.removeClass(this.oDomContainer,this.Style.CSS_WITH_TITLE);},createCloseButton:function(){var k=YAHOO.widget.CalendarGroup.CSS_2UPCLOSE,j=this.Style.CSS_LINK_CLOSE,m=\"us/my/bn/x_d.gif\",l=c.getElementsByClassName(j,\"a\",this.oDomContainer)[0],g=this.cfg.getProperty(b.STRINGS.key),h=(g&&g.close)?g.close:\"\";if(!l){l=document.createElement(\"a\");a.addListener(l,\"click\",function(o,n){n.hide();a.preventDefault(o);},this);}l.href=\"#\";l.className=j;if(f.IMG_ROOT!==null){var i=c.getElementsByClassName(k,\"img\",l)[0]||document.createElement(\"img\");i.src=f.IMG_ROOT+m;i.className=k;l.appendChild(i);}else{l.innerHTML='<span class=\"'+k+\" \"+this.Style.CSS_CLOSE+'\">'+h+\"</span>\";}this.oDomContainer.appendChild(l);return l;},removeCloseButton:function(){var g=c.getElementsByClassName(this.Style.CSS_LINK_CLOSE,\"a\",this.oDomContainer)[0]||null;if(g){a.purgeElement(g);this.oDomContainer.removeChild(g);}},renderHeader:function(q){var p=7,o=\"us/tr/callt.gif\",g=\"us/tr/calrt.gif\",n=this.cfg,k=n.getProperty(b.PAGEDATE.key),l=n.getProperty(b.STRINGS.key),v=(l&&l.previousMonth)?l.previousMonth:\"\",h=(l&&l.nextMonth)?l.nextMonth:\"\",m;if(n.getProperty(b.SHOW_WEEK_HEADER.key)){p+=1;}if(n.getProperty(b.SHOW_WEEK_FOOTER.key)){p+=1;}q[q.length]=\"<thead>\";q[q.length]=\"<tr>\";q[q.length]='<th colspan=\"'+p+'\" class=\"'+this.Style.CSS_HEADER_TEXT+'\">';q[q.length]='<div class=\"'+this.Style.CSS_HEADER+'\">';var x,u=false;if(this.parent){if(this.index===0){x=true;}if(this.index==(this.parent.cfg.getProperty(\"pages\")-1)){u=true;}}else{x=true;u=true;}if(x){m=this._buildMonthLabel(d.subtract(k,d.MONTH,1));var r=n.getProperty(b.NAV_ARROW_LEFT.key);if(r===null&&f.IMG_ROOT!==null){r=f.IMG_ROOT+o;}var i=(r===null)?\"\":' style=\"background-image:url('+r+')\"';q[q.length]='<a class=\"'+this.Style.CSS_NAV_LEFT+'\"'+i+' href=\"#\">'+v+\" (\"+m+\")\"+\"</a>\";}var w=this.buildMonthLabel();var s=this.parent||this;if(s.cfg.getProperty(\"navigator\")){w='<a class=\"'+this.Style.CSS_NAV+'\" href=\"#\">'+w+\"</a>\";}q[q.length]=w;if(u){m=this._buildMonthLabel(d.add(k,d.MONTH,1));var t=n.getProperty(b.NAV_ARROW_RIGHT.key);if(t===null&&f.IMG_ROOT!==null){t=f.IMG_ROOT+g;}var j=(t===null)?\"\":' style=\"background-image:url('+t+')\"';q[q.length]='<a class=\"'+this.Style.CSS_NAV_RIGHT+'\"'+j+' href=\"#\">'+h+\" (\"+m+\")\"+\"</a>\";}q[q.length]=\"</div>\\n</th>\\n</tr>\";if(n.getProperty(b.SHOW_WEEKDAYS.key)){q=this.buildWeekdays(q);}q[q.length]=\"</thead>\";return q;},buildWeekdays:function(h){h[h.length]='<tr class=\"'+this.Style.CSS_WEEKDAY_ROW+'\">';if(this.cfg.getProperty(b.SHOW_WEEK_HEADER.key)){h[h.length]=\"<th>&#160;</th>\";}for(var g=0;g<this.Locale.LOCALE_WEEKDAYS.length;++g){h[h.length]='<th class=\"'+this.Style.CSS_WEEKDAY_CELL+'\">'+this.Locale.LOCALE_WEEKDAYS[g]+\"</th>\";}if(this.cfg.getProperty(b.SHOW_WEEK_FOOTER.key)){h[h.length]=\"<th>&#160;</th>\";}h[h.length]=\"</tr>\";return h;},renderBody:function(T,Q){var ao=this.cfg.getProperty(b.START_WEEKDAY.key);this.preMonthDays=T.getDay();if(ao>0){this.preMonthDays-=ao;}if(this.preMonthDays<0){this.preMonthDays+=7;}this.monthDays=d.findMonthEnd(T).getDate();this.postMonthDays=f.DISPLAY_DAYS-this.preMonthDays-this.monthDays;T=d.subtract(T,d.DAY,this.preMonthDays);var F,q,o=\"w\",L=\"_cell\",J=\"wd\",Z=\"d\",v,X,af=this.today,u=this.cfg,ae,D=af.getFullYear(),Y=af.getMonth(),k=af.getDate(),ad=u.getProperty(b.PAGEDATE.key),j=u.getProperty(b.HIDE_BLANK_WEEKS.key),P=u.getProperty(b.SHOW_WEEK_FOOTER.key),I=u.getProperty(b.SHOW_WEEK_HEADER.key),O=u.getProperty(b.OOM_SELECT.key),B=u.getProperty(b.MINDATE.key),H=u.getProperty(b.MAXDATE.key),A=this.Locale.YEAR_OFFSET;if(B){B=d.clearTime(B);}if(H){H=d.clearTime(H);}Q[Q.length]='<tbody class=\"m'+(ad.getMonth()+1)+\" \"+this.Style.CSS_BODY+'\">';var am=0,w=document.createElement(\"div\"),R=document.createElement(\"td\");w.appendChild(R);var ac=this.parent||this;for(var ah=0;ah<6;ah++){F=d.getWeekNumber(T,ao);q=o+F;if(ah!==0&&j===true&&T.getMonth()!=ad.getMonth()){break;}else{Q[Q.length]='<tr class=\"'+q+'\">';if(I){Q=this.renderRowHeader(F,Q);}for(var an=0;an<7;an++){v=[];this.clearElement(R);R.className=this.Style.CSS_CELL;R.id=this.id+L+am;if(T.getDate()==k&&T.getMonth()==Y&&T.getFullYear()==D){v[v.length]=ac.renderCellStyleToday;}var G=[T.getFullYear(),T.getMonth()+1,T.getDate()];this.cellDates[this.cellDates.length]=G;ae=T.getMonth()!=ad.getMonth();if(ae&&!O){v[v.length]=ac.renderCellNotThisMonth;}else{c.addClass(R,J+T.getDay());c.addClass(R,Z+T.getDate());var S=this.renderStack.concat();for(var ag=0,al=S.length;ag<al;++ag){X=null;var aa=S[ag],ap=aa[0],h,K,n;switch(ap){case f.DATE:h=aa[1][1];K=aa[1][2];n=aa[1][0];if(T.getMonth()+1==h&&T.getDate()==K&&T.getFullYear()==n){X=aa[2];this.renderStack.splice(ag,1);}break;case f.MONTH_DAY:h=aa[1][0];K=aa[1][1];if(T.getMonth()+1==h&&T.getDate()==K){X=aa[2];this.renderStack.splice(ag,1);}break;case f.RANGE:var N=aa[1][0],M=aa[1][1],U=N[1],z=N[2],E=N[0],ak=d.getDate(E,U-1,z),m=M[1],W=M[2],g=M[0],aj=d.getDate(g,m-1,W);if(T.getTime()>=ak.getTime()&&T.getTime()<=aj.getTime()){X=aa[2];if(T.getTime()==aj.getTime()){this.renderStack.splice(ag,1);",
                "-}}break;case f.WEEKDAY:var y=aa[1][0];if(T.getDay()+1==y){X=aa[2];}break;case f.MONTH:h=aa[1][0];if(T.getMonth()+1==h){X=aa[2];}break;}if(X){v[v.length]=X;}}}if(this._indexOfSelectedFieldArray(G)>-1){v[v.length]=ac.renderCellStyleSelected;}if(ae){v[v.length]=ac.styleCellNotThisMonth;}if((B&&(T.getTime()<B.getTime()))||(H&&(T.getTime()>H.getTime()))){v[v.length]=ac.renderOutOfBoundsDate;}else{v[v.length]=ac.styleCellDefault;v[v.length]=ac.renderCellDefault;}for(var ab=0;ab<v.length;++ab){if(v[ab].call(ac,T,R)==f.STOP_RENDER){break;}}T.setTime(T.getTime()+d.ONE_DAY_MS);T=d.clearTime(T);if(am>=0&&am<=6){c.addClass(R,this.Style.CSS_CELL_TOP);}if((am%7)===0){c.addClass(R,this.Style.CSS_CELL_LEFT);}if(((am+1)%7)===0){c.addClass(R,this.Style.CSS_CELL_RIGHT);}var V=this.postMonthDays;if(j&&V>=7){var C=Math.floor(V/7);for(var ai=0;ai<C;++ai){V-=7;}}if(am>=((this.preMonthDays+V+this.monthDays)-7)){c.addClass(R,this.Style.CSS_CELL_BOTTOM);}Q[Q.length]=w.innerHTML;am++;}if(P){Q=this.renderRowFooter(F,Q);}Q[Q.length]=\"</tr>\";}}Q[Q.length]=\"</tbody>\";return Q;},renderFooter:function(g){return g;},render:function(){this.beforeRenderEvent.fire();var i=d.findMonthStart(this.cfg.getProperty(b.PAGEDATE.key));this.resetRenderers();this.cellDates.length=0;a.purgeElement(this.oDomContainer,true);var g=[],h;g[g.length]='<table cellSpacing=\"0\" class=\"'+this.Style.CSS_CALENDAR+\" y\"+(i.getFullYear()+this.Locale.YEAR_OFFSET)+'\" id=\"'+this.id+'\">';g=this.renderHeader(g);g=this.renderBody(i,g);g=this.renderFooter(g);g[g.length]=\"</table>\";this.oDomContainer.innerHTML=g.join(\"\\n\");this.applyListeners();h=((this._oDoc)&&this._oDoc.getElementById(this.id))||(this.id);this.cells=c.getElementsByClassName(this.Style.CSS_CELL,\"td\",h);this.cfg.refireEvent(b.TITLE.key);this.cfg.refireEvent(b.CLOSE.key);this.cfg.refireEvent(b.IFRAME.key);this.renderEvent.fire();},applyListeners:function(){var q=this.oDomContainer,h=this.parent||this,m=\"a\",t=\"click\";var n=c.getElementsByClassName(this.Style.CSS_NAV_LEFT,m,q),j=c.getElementsByClassName(this.Style.CSS_NAV_RIGHT,m,q);if(n&&n.length>0){this.linkLeft=n[0];a.addListener(this.linkLeft,t,this.doPreviousMonthNav,h,true);}if(j&&j.length>0){this.linkRight=j[0];a.addListener(this.linkRight,t,this.doNextMonthNav,h,true);}if(h.cfg.getProperty(\"navigator\")!==null){this.applyNavListeners();}if(this.domEventMap){var k,g;for(var s in this.domEventMap){if(e.hasOwnProperty(this.domEventMap,s)){var o=this.domEventMap[s];if(!(o instanceof Array)){o=[o];}for(var l=0;l<o.length;l++){var r=o[l];g=c.getElementsByClassName(s,r.tag,this.oDomContainer);for(var p=0;p<g.length;p++){k=g[p];a.addListener(k,r.event,r.handler,r.scope,r.correct);}}}}}a.addListener(this.oDomContainer,\"click\",this.doSelectCell,this);a.addListener(this.oDomContainer,\"mouseover\",this.doCellMouseOver,this);a.addListener(this.oDomContainer,\"mouseout\",this.doCellMouseOut,this);},applyNavListeners:function(){var h=this.parent||this,i=this,g=c.getElementsByClassName(this.Style.CSS_NAV,\"a\",this.oDomContainer);if(g.length>0){a.addListener(g,\"click\",function(n,m){var l=a.getTarget(n);if(this===l||c.isAncestor(this,l)){a.preventDefault(n);}var j=h.oNavigator;if(j){var k=i.cfg.getProperty(\"pagedate\");j.setYear(k.getFullYear()+i.Locale.YEAR_OFFSET);j.setMonth(k.getMonth());j.show();}});}},getDateByCellId:function(h){var g=this.getDateFieldsByCellId(h);return(g)?d.getDate(g[0],g[1]-1,g[2]):null;},getDateFieldsByCellId:function(g){g=this.getIndexFromId(g);return(g>-1)?this.cellDates[g]:null;},getCellIndex:function(j){var h=-1;if(j){var g=j.getMonth(),p=j.getFullYear(),o=j.getDate(),l=this.cellDates;for(var k=0;k<l.length;++k){var n=l[k];if(n[0]===p&&n[1]===g+1&&n[2]===o){h=k;break;}}}return h;},getIndexFromId:function(i){var h=-1,g=i.lastIndexOf(\"_cell\");if(g>-1){h=parseInt(i.substring(g+5),10);}return h;},renderOutOfBoundsDate:function(h,g){c.addClass(g,this.Style.CSS_CELL_OOB);g.innerHTML=h.getDate();return f.STOP_RENDER;},renderRowHeader:function(h,g){g[g.length]='<th class=\"'+this.Style.CSS_ROW_HEADER+'\">'+h+\"</th>\";return g;},renderRowFooter:function(h,g){g[g.length]='<th class=\"'+this.Style.CSS_ROW_FOOTER+'\">'+h+\"</th>\";return g;},renderCellDefault:function(h,g){g.innerHTML='<a href=\"#\" class=\"'+this.Style.CSS_CELL_SELECTOR+'\">'+this.buildDayLabel(h)+\"</a>\";},styleCellDefault:function(h,g){c.addClass(g,this.Style.CSS_CELL_SELECTABLE);},renderCellStyleHighlight1:function(h,g){c.addClass(g,this.Style.CSS_CELL_HIGHLIGHT1);},renderCellStyleHighlight2:function(h,g){c.addClass(g,this.Style.CSS_CELL_HIGHLIGHT2);},renderCellStyleHighlight3:function(h,g){c.addClass(g,this.Style.CSS_CELL_HIGHLIGHT3);},renderCellStyleHighlight4:function(h,g){c.addClass(g,this.Style.CSS_CELL_HIGHLIGHT4);},renderCellStyleToday:function(h,g){c.addClass(g,this.Style.CSS_CELL_TODAY);},renderCellStyleSelected:function(h,g){c.addClass(g,this.Style.CSS_CELL_SELECTED);},renderCellNotThisMonth:function(h,g){this.styleCellNotThisMonth(h,g);g.innerHTML=h.getDate();return f.STOP_RENDER;},styleCellNotThisMonth:function(h,g){YAHOO.util.Dom.addClass(g,this.Style.CSS_CELL_OOM);},renderBodyCellRestricted:function(h,g){c.addClass(g,this.Style.CSS_CELL);c.addClass(g,this.Style.CSS_CELL_RESTRICTED);g.innerHTML=h.getDate();return f.STOP_RENDER;},addMonths:function(i){var h=b.PAGEDATE.key,j=this.cfg.getProperty(h),g=d.add(j,d.MONTH,i);this.cfg.setProperty(h,g);this.resetRenderers();this.changePageEvent.fire(j,g);},subtractMonths:function(g){this.addMonths(-1*g);},addYears:function(i){var h=b.PAGEDATE.key,j=this.cfg.getProperty(h),g=d.add(j,d.YEAR,i);this.cfg.setProperty(h,g);this.resetRenderers();this.changePageEvent.fire(j,g);},subtractYears:function(g){this.addYears(-1*g);},nextMonth:function(){this.addMonths(1);},previousMonth:function(){this.addMonths(-1);},nextYear:function(){this.addYears(1);},previousYear:function(){this.addYears(-1);},reset:function(){this.cfg.resetProperty(b.SELECTED.key);this.cfg.resetProperty(b.PAGEDATE.key);this.resetEvent.fire();},clear:function(){this.cfg.setProperty(b.SELECTED.key,[]);",
                "-this.cfg.setProperty(b.PAGEDATE.key,new Date(this.today.getTime()));this.clearEvent.fire();},select:function(i){var l=this._toFieldArray(i),h=[],k=[],m=b.SELECTED.key;for(var g=0;g<l.length;++g){var j=l[g];if(!this.isDateOOB(this._toDate(j))){if(h.length===0){this.beforeSelectEvent.fire();k=this.cfg.getProperty(m);}h.push(j);if(this._indexOfSelectedFieldArray(j)==-1){k[k.length]=j;}}}if(h.length>0){if(this.parent){this.parent.cfg.setProperty(m,k);}else{this.cfg.setProperty(m,k);}this.selectEvent.fire(h);}return this.getSelectedDates();},selectCell:function(j){var h=this.cells[j],n=this.cellDates[j],m=this._toDate(n),i=c.hasClass(h,this.Style.CSS_CELL_SELECTABLE);if(i){this.beforeSelectEvent.fire();var l=b.SELECTED.key;var k=this.cfg.getProperty(l);var g=n.concat();if(this._indexOfSelectedFieldArray(g)==-1){k[k.length]=g;}if(this.parent){this.parent.cfg.setProperty(l,k);}else{this.cfg.setProperty(l,k);}this.renderCellStyleSelected(m,h);this.selectEvent.fire([g]);this.doCellMouseOut.call(h,null,this);}return this.getSelectedDates();},deselect:function(k){var g=this._toFieldArray(k),j=[],m=[],n=b.SELECTED.key;for(var h=0;h<g.length;++h){var l=g[h];if(!this.isDateOOB(this._toDate(l))){if(j.length===0){this.beforeDeselectEvent.fire();m=this.cfg.getProperty(n);}j.push(l);var i=this._indexOfSelectedFieldArray(l);if(i!=-1){m.splice(i,1);}}}if(j.length>0){if(this.parent){this.parent.cfg.setProperty(n,m);}else{this.cfg.setProperty(n,m);}this.deselectEvent.fire(j);}return this.getSelectedDates();},deselectCell:function(k){var h=this.cells[k],n=this.cellDates[k],i=this._indexOfSelectedFieldArray(n);var j=c.hasClass(h,this.Style.CSS_CELL_SELECTABLE);if(j){this.beforeDeselectEvent.fire();var l=this.cfg.getProperty(b.SELECTED.key),m=this._toDate(n),g=n.concat();if(i>-1){if((this.cfg.getProperty(b.PAGEDATE.key).getMonth()==m.getMonth()&&this.cfg.getProperty(b.PAGEDATE.key).getFullYear()==m.getFullYear())||this.cfg.getProperty(b.OOM_SELECT.key)){c.removeClass(h,this.Style.CSS_CELL_SELECTED);}l.splice(i,1);}if(this.parent){this.parent.cfg.setProperty(b.SELECTED.key,l);}else{this.cfg.setProperty(b.SELECTED.key,l);}this.deselectEvent.fire([g]);}return this.getSelectedDates();},deselectAll:function(){this.beforeDeselectEvent.fire();var j=b.SELECTED.key,g=this.cfg.getProperty(j),h=g.length,i=g.concat();if(this.parent){this.parent.cfg.setProperty(j,[]);}else{this.cfg.setProperty(j,[]);}if(h>0){this.deselectEvent.fire(i);}return this.getSelectedDates();},_toFieldArray:function(h){var g=[];if(h instanceof Date){g=[[h.getFullYear(),h.getMonth()+1,h.getDate()]];}else{if(e.isString(h)){g=this._parseDates(h);}else{if(e.isArray(h)){for(var j=0;j<h.length;++j){var k=h[j];g[g.length]=[k.getFullYear(),k.getMonth()+1,k.getDate()];}}}}return g;},toDate:function(g){return this._toDate(g);},_toDate:function(g){if(g instanceof Date){return g;}else{return d.getDate(g[0],g[1]-1,g[2]);}},_fieldArraysAreEqual:function(i,h){var g=false;if(i[0]==h[0]&&i[1]==h[1]&&i[2]==h[2]){g=true;}return g;},_indexOfSelectedFieldArray:function(k){var j=-1,g=this.cfg.getProperty(b.SELECTED.key);for(var i=0;i<g.length;++i){var h=g[i];if(k[0]==h[0]&&k[1]==h[1]&&k[2]==h[2]){j=i;break;}}return j;},isDateOOM:function(g){return(g.getMonth()!=this.cfg.getProperty(b.PAGEDATE.key).getMonth());},isDateOOB:function(i){var j=this.cfg.getProperty(b.MINDATE.key),k=this.cfg.getProperty(b.MAXDATE.key),h=d;if(j){j=h.clearTime(j);}if(k){k=h.clearTime(k);}var g=new Date(i.getTime());g=h.clearTime(g);return((j&&g.getTime()<j.getTime())||(k&&g.getTime()>k.getTime()));},_parsePageDate:function(g){var j;if(g){if(g instanceof Date){j=d.findMonthStart(g);}else{var k,i,h;h=g.split(this.cfg.getProperty(b.DATE_FIELD_DELIMITER.key));k=parseInt(h[this.cfg.getProperty(b.MY_MONTH_POSITION.key)-1],10)-1;i=parseInt(h[this.cfg.getProperty(b.MY_YEAR_POSITION.key)-1],10)-this.Locale.YEAR_OFFSET;j=d.getDate(i,k,1);}}else{j=d.getDate(this.today.getFullYear(),this.today.getMonth(),1);}return j;},onBeforeSelect:function(){if(this.cfg.getProperty(b.MULTI_SELECT.key)===false){if(this.parent){this.parent.callChildFunction(\"clearAllBodyCellStyles\",this.Style.CSS_CELL_SELECTED);this.parent.deselectAll();}else{this.clearAllBodyCellStyles(this.Style.CSS_CELL_SELECTED);this.deselectAll();}}},onSelect:function(g){},onBeforeDeselect:function(){},onDeselect:function(g){},onChangePage:function(){this.render();},onRender:function(){},onReset:function(){this.render();},onClear:function(){this.render();},validate:function(){return true;},_parseDate:function(j){var k=j.split(this.Locale.DATE_FIELD_DELIMITER),g;if(k.length==2){g=[k[this.Locale.MD_MONTH_POSITION-1],k[this.Locale.MD_DAY_POSITION-1]];g.type=f.MONTH_DAY;}else{g=[k[this.Locale.MDY_YEAR_POSITION-1]-this.Locale.YEAR_OFFSET,k[this.Locale.MDY_MONTH_POSITION-1],k[this.Locale.MDY_DAY_POSITION-1]];g.type=f.DATE;}for(var h=0;h<g.length;h++){g[h]=parseInt(g[h],10);}return g;},_parseDates:function(h){var o=[],n=h.split(this.Locale.DATE_DELIMITER);for(var m=0;m<n.length;++m){var l=n[m];if(l.indexOf(this.Locale.DATE_RANGE_DELIMITER)!=-1){var g=l.split(this.Locale.DATE_RANGE_DELIMITER),k=this._parseDate(g[0]),p=this._parseDate(g[1]),j=this._parseRange(k,p);o=o.concat(j);}else{var i=this._parseDate(l);o.push(i);}}return o;},_parseRange:function(g,k){var h=d.add(d.getDate(g[0],g[1]-1,g[2]),d.DAY,1),j=d.getDate(k[0],k[1]-1,k[2]),i=[];i.push(g);while(h.getTime()<=j.getTime()){i.push([h.getFullYear(),h.getMonth()+1,h.getDate()]);h=d.add(h,d.DAY,1);}return i;},resetRenderers:function(){this.renderStack=this._renderStack.concat();},removeRenderers:function(){this._renderStack=[];this.renderStack=[];},clearElement:function(g){g.innerHTML=\"&#160;\";g.className=\"\";},addRenderer:function(g,h){var k=this._parseDates(g);for(var j=0;j<k.length;++j){var l=k[j];if(l.length==2){if(l[0] instanceof Array){this._addRenderer(f.RANGE,l,h);}else{this._addRenderer(f.MONTH_DAY,l,h);}}else{if(l.length==3){this._addRenderer(f.DATE,l,h);}}}},_addRenderer:function(h,i,g){var j=[h,i,g];",
                "-this.renderStack.unshift(j);this._renderStack=this.renderStack.concat();},addMonthRenderer:function(h,g){this._addRenderer(f.MONTH,[h],g);},addWeekdayRenderer:function(h,g){this._addRenderer(f.WEEKDAY,[h],g);},clearAllBodyCellStyles:function(g){for(var h=0;h<this.cells.length;++h){c.removeClass(this.cells[h],g);}},setMonth:function(i){var g=b.PAGEDATE.key,h=this.cfg.getProperty(g);h.setMonth(parseInt(i,10));this.cfg.setProperty(g,h);},setYear:function(h){var g=b.PAGEDATE.key,i=this.cfg.getProperty(g);i.setFullYear(parseInt(h,10)-this.Locale.YEAR_OFFSET);this.cfg.setProperty(g,i);},getSelectedDates:function(){var i=[],h=this.cfg.getProperty(b.SELECTED.key);for(var k=0;k<h.length;++k){var j=h[k];var g=d.getDate(j[0],j[1]-1,j[2]);i.push(g);}i.sort(function(m,l){return m-l;});return i;},hide:function(){if(this.beforeHideEvent.fire()){this.oDomContainer.style.display=\"none\";this.hideEvent.fire();}},show:function(){if(this.beforeShowEvent.fire()){this.oDomContainer.style.display=\"block\";this.showEvent.fire();}},browser:(function(){var g=navigator.userAgent.toLowerCase();if(g.indexOf(\"opera\")!=-1){return\"opera\";}else{if(g.indexOf(\"msie 7\")!=-1){return\"ie7\";}else{if(g.indexOf(\"msie\")!=-1){return\"ie\";}else{if(g.indexOf(\"safari\")!=-1){return\"safari\";}else{if(g.indexOf(\"gecko\")!=-1){return\"gecko\";}else{return false;}}}}}})(),toString:function(){return\"Calendar \"+this.id;},destroy:function(){if(this.beforeDestroyEvent.fire()){var g=this;if(g.navigator){g.navigator.destroy();}if(g.cfg){g.cfg.destroy();}a.purgeElement(g.oDomContainer,true);c.removeClass(g.oDomContainer,g.Style.CSS_WITH_TITLE);c.removeClass(g.oDomContainer,g.Style.CSS_CONTAINER);c.removeClass(g.oDomContainer,g.Style.CSS_SINGLE);g.oDomContainer.innerHTML=\"\";g.oDomContainer=null;g.cells=null;this.destroyEvent.fire();}}};YAHOO.widget.Calendar=f;YAHOO.widget.Calendar_Core=YAHOO.widget.Calendar;YAHOO.widget.Cal_Core=YAHOO.widget.Calendar;})();(function(){var d=YAHOO.util.Dom,f=YAHOO.widget.DateMath,a=YAHOO.util.Event,e=YAHOO.lang,g=YAHOO.widget.Calendar;function b(j,h,i){if(arguments.length>0){this.init.apply(this,arguments);}}b.DEFAULT_CONFIG=b._DEFAULT_CONFIG=g.DEFAULT_CONFIG;b.DEFAULT_CONFIG.PAGES={key:\"pages\",value:2};var c=b.DEFAULT_CONFIG;b.prototype={init:function(k,i,j){var h=this._parseArgs(arguments);k=h.id;i=h.container;j=h.config;this.oDomContainer=d.get(i);if(!this.oDomContainer.id){this.oDomContainer.id=d.generateId();}if(!k){k=this.oDomContainer.id+\"_t\";}this.id=k;this.containerId=this.oDomContainer.id;this.initEvents();this.initStyles();this.pages=[];d.addClass(this.oDomContainer,b.CSS_CONTAINER);d.addClass(this.oDomContainer,b.CSS_MULTI_UP);this.cfg=new YAHOO.util.Config(this);this.Options={};this.Locale={};this.setupConfig();if(j){this.cfg.applyConfig(j,true);}this.cfg.fireQueue();},setupConfig:function(){var h=this.cfg;h.addProperty(c.PAGES.key,{value:c.PAGES.value,validator:h.checkNumber,handler:this.configPages});h.addProperty(c.YEAR_OFFSET.key,{value:c.YEAR_OFFSET.value,handler:this.delegateConfig,supercedes:c.YEAR_OFFSET.supercedes,suppressEvent:true});h.addProperty(c.TODAY.key,{value:new Date(c.TODAY.value.getTime()),supercedes:c.TODAY.supercedes,handler:this.configToday,suppressEvent:false});h.addProperty(c.PAGEDATE.key,{value:c.PAGEDATE.value||new Date(c.TODAY.value.getTime()),handler:this.configPageDate});h.addProperty(c.SELECTED.key,{value:[],handler:this.configSelected});h.addProperty(c.TITLE.key,{value:c.TITLE.value,handler:this.configTitle});h.addProperty(c.CLOSE.key,{value:c.CLOSE.value,handler:this.configClose});h.addProperty(c.IFRAME.key,{value:c.IFRAME.value,handler:this.configIframe,validator:h.checkBoolean});h.addProperty(c.MINDATE.key,{value:c.MINDATE.value,handler:this.delegateConfig});h.addProperty(c.MAXDATE.key,{value:c.MAXDATE.value,handler:this.delegateConfig});h.addProperty(c.MULTI_SELECT.key,{value:c.MULTI_SELECT.value,handler:this.delegateConfig,validator:h.checkBoolean});h.addProperty(c.OOM_SELECT.key,{value:c.OOM_SELECT.value,handler:this.delegateConfig,validator:h.checkBoolean});h.addProperty(c.START_WEEKDAY.key,{value:c.START_WEEKDAY.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.SHOW_WEEKDAYS.key,{value:c.SHOW_WEEKDAYS.value,handler:this.delegateConfig,validator:h.checkBoolean});h.addProperty(c.SHOW_WEEK_HEADER.key,{value:c.SHOW_WEEK_HEADER.value,handler:this.delegateConfig,validator:h.checkBoolean});h.addProperty(c.SHOW_WEEK_FOOTER.key,{value:c.SHOW_WEEK_FOOTER.value,handler:this.delegateConfig,validator:h.checkBoolean});h.addProperty(c.HIDE_BLANK_WEEKS.key,{value:c.HIDE_BLANK_WEEKS.value,handler:this.delegateConfig,validator:h.checkBoolean});h.addProperty(c.NAV_ARROW_LEFT.key,{value:c.NAV_ARROW_LEFT.value,handler:this.delegateConfig});h.addProperty(c.NAV_ARROW_RIGHT.key,{value:c.NAV_ARROW_RIGHT.value,handler:this.delegateConfig});h.addProperty(c.MONTHS_SHORT.key,{value:c.MONTHS_SHORT.value,handler:this.delegateConfig});h.addProperty(c.MONTHS_LONG.key,{value:c.MONTHS_LONG.value,handler:this.delegateConfig});h.addProperty(c.WEEKDAYS_1CHAR.key,{value:c.WEEKDAYS_1CHAR.value,handler:this.delegateConfig});h.addProperty(c.WEEKDAYS_SHORT.key,{value:c.WEEKDAYS_SHORT.value,handler:this.delegateConfig});h.addProperty(c.WEEKDAYS_MEDIUM.key,{value:c.WEEKDAYS_MEDIUM.value,handler:this.delegateConfig});h.addProperty(c.WEEKDAYS_LONG.key,{value:c.WEEKDAYS_LONG.value,handler:this.delegateConfig});h.addProperty(c.LOCALE_MONTHS.key,{value:c.LOCALE_MONTHS.value,handler:this.delegateConfig});h.addProperty(c.LOCALE_WEEKDAYS.key,{value:c.LOCALE_WEEKDAYS.value,handler:this.delegateConfig});h.addProperty(c.DATE_DELIMITER.key,{value:c.DATE_DELIMITER.value,handler:this.delegateConfig});h.addProperty(c.DATE_FIELD_DELIMITER.key,{value:c.DATE_FIELD_DELIMITER.value,handler:this.delegateConfig});h.addProperty(c.DATE_RANGE_DELIMITER.key,{value:c.DATE_RANGE_DELIMITER.value,handler:this.delegateConfig});h.addProperty(c.MY_MONTH_POSITION.key,{value:c.MY_MONTH_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});",
                "-h.addProperty(c.MY_YEAR_POSITION.key,{value:c.MY_YEAR_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MD_MONTH_POSITION.key,{value:c.MD_MONTH_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MD_DAY_POSITION.key,{value:c.MD_DAY_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MDY_MONTH_POSITION.key,{value:c.MDY_MONTH_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MDY_DAY_POSITION.key,{value:c.MDY_DAY_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MDY_YEAR_POSITION.key,{value:c.MDY_YEAR_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MY_LABEL_MONTH_POSITION.key,{value:c.MY_LABEL_MONTH_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MY_LABEL_YEAR_POSITION.key,{value:c.MY_LABEL_YEAR_POSITION.value,handler:this.delegateConfig,validator:h.checkNumber});h.addProperty(c.MY_LABEL_MONTH_SUFFIX.key,{value:c.MY_LABEL_MONTH_SUFFIX.value,handler:this.delegateConfig});h.addProperty(c.MY_LABEL_YEAR_SUFFIX.key,{value:c.MY_LABEL_YEAR_SUFFIX.value,handler:this.delegateConfig});h.addProperty(c.NAV.key,{value:c.NAV.value,handler:this.configNavigator});h.addProperty(c.STRINGS.key,{value:c.STRINGS.value,handler:this.configStrings,validator:function(i){return e.isObject(i);},supercedes:c.STRINGS.supercedes});},initEvents:function(){var j=this,l=\"Event\",m=YAHOO.util.CustomEvent;var i=function(o,s,n){for(var r=0;r<j.pages.length;++r){var q=j.pages[r];q[this.type+l].subscribe(o,s,n);}};var h=function(n,r){for(var q=0;q<j.pages.length;++q){var o=j.pages[q];o[this.type+l].unsubscribe(n,r);}};var k=g._EVENT_TYPES;j.beforeSelectEvent=new m(k.BEFORE_SELECT);j.beforeSelectEvent.subscribe=i;j.beforeSelectEvent.unsubscribe=h;j.selectEvent=new m(k.SELECT);j.selectEvent.subscribe=i;j.selectEvent.unsubscribe=h;j.beforeDeselectEvent=new m(k.BEFORE_DESELECT);j.beforeDeselectEvent.subscribe=i;j.beforeDeselectEvent.unsubscribe=h;j.deselectEvent=new m(k.DESELECT);j.deselectEvent.subscribe=i;j.deselectEvent.unsubscribe=h;j.changePageEvent=new m(k.CHANGE_PAGE);j.changePageEvent.subscribe=i;j.changePageEvent.unsubscribe=h;j.beforeRenderEvent=new m(k.BEFORE_RENDER);j.beforeRenderEvent.subscribe=i;j.beforeRenderEvent.unsubscribe=h;j.renderEvent=new m(k.RENDER);j.renderEvent.subscribe=i;j.renderEvent.unsubscribe=h;j.resetEvent=new m(k.RESET);j.resetEvent.subscribe=i;j.resetEvent.unsubscribe=h;j.clearEvent=new m(k.CLEAR);j.clearEvent.subscribe=i;j.clearEvent.unsubscribe=h;j.beforeShowEvent=new m(k.BEFORE_SHOW);j.showEvent=new m(k.SHOW);j.beforeHideEvent=new m(k.BEFORE_HIDE);j.hideEvent=new m(k.HIDE);j.beforeShowNavEvent=new m(k.BEFORE_SHOW_NAV);j.showNavEvent=new m(k.SHOW_NAV);j.beforeHideNavEvent=new m(k.BEFORE_HIDE_NAV);j.hideNavEvent=new m(k.HIDE_NAV);j.beforeRenderNavEvent=new m(k.BEFORE_RENDER_NAV);j.renderNavEvent=new m(k.RENDER_NAV);j.beforeDestroyEvent=new m(k.BEFORE_DESTROY);j.destroyEvent=new m(k.DESTROY);},configPages:function(u,s,n){var l=s[0],j=c.PAGEDATE.key,x=\"_\",m,o=null,t=\"groupcal\",w=\"first-of-type\",k=\"last-of-type\";for(var i=0;i<l;++i){var v=this.id+x+i,r=this.containerId+x+i,q=this.cfg.getConfig();q.close=false;q.title=false;q.navigator=null;if(i>0){m=new Date(o);this._setMonthOnDate(m,m.getMonth()+i);q.pageDate=m;}var h=this.constructChild(v,r,q);d.removeClass(h.oDomContainer,this.Style.CSS_SINGLE);d.addClass(h.oDomContainer,t);if(i===0){o=h.cfg.getProperty(j);d.addClass(h.oDomContainer,w);}if(i==(l-1)){d.addClass(h.oDomContainer,k);}h.parent=this;h.index=i;this.pages[this.pages.length]=h;}},configPageDate:function(o,n,l){var j=n[0],m;var k=c.PAGEDATE.key;for(var i=0;i<this.pages.length;++i){var h=this.pages[i];if(i===0){m=h._parsePageDate(j);h.cfg.setProperty(k,m);}else{var q=new Date(m);this._setMonthOnDate(q,q.getMonth()+i);h.cfg.setProperty(k,q);}}},configSelected:function(j,h,l){var k=c.SELECTED.key;this.delegateConfig(j,h,l);var i=(this.pages.length>0)?this.pages[0].cfg.getProperty(k):[];this.cfg.setProperty(k,i,true);},delegateConfig:function(i,h,l){var m=h[0];var k;for(var j=0;j<this.pages.length;j++){k=this.pages[j];k.cfg.setProperty(i,m);}},setChildFunction:function(k,i){var h=this.cfg.getProperty(c.PAGES.key);for(var j=0;j<h;++j){this.pages[j][k]=i;}},callChildFunction:function(m,i){var h=this.cfg.getProperty(c.PAGES.key);for(var l=0;l<h;++l){var k=this.pages[l];if(k[m]){var j=k[m];j.call(k,i);}}},constructChild:function(k,i,j){var h=document.getElementById(i);if(!h){h=document.createElement(\"div\");h.id=i;this.oDomContainer.appendChild(h);}return new g(k,i,j);},setMonth:function(l){l=parseInt(l,10);var m;var i=c.PAGEDATE.key;for(var k=0;k<this.pages.length;++k){var j=this.pages[k];var h=j.cfg.getProperty(i);if(k===0){m=h.getFullYear();}else{h.setFullYear(m);}this._setMonthOnDate(h,l+k);j.cfg.setProperty(i,h);}},setYear:function(j){var i=c.PAGEDATE.key;j=parseInt(j,10);for(var l=0;l<this.pages.length;++l){var k=this.pages[l];var h=k.cfg.getProperty(i);if((h.getMonth()+1)==1&&l>0){j+=1;}k.setYear(j);}},render:function(){this.renderHeader();for(var i=0;i<this.pages.length;++i){var h=this.pages[i];h.render();}this.renderFooter();},select:function(h){for(var j=0;j<this.pages.length;++j){var i=this.pages[j];i.select(h);}return this.getSelectedDates();},selectCell:function(h){for(var j=0;j<this.pages.length;++j){var i=this.pages[j];i.selectCell(h);}return this.getSelectedDates();},deselect:function(h){for(var j=0;j<this.pages.length;++j){var i=this.pages[j];i.deselect(h);}return this.getSelectedDates();},deselectAll:function(){for(var i=0;i<this.pages.length;++i){var h=this.pages[i];h.deselectAll();}return this.getSelectedDates();},deselectCell:function(h){for(var j=0;j<this.pages.length;++j){var i=this.pages[j];i.deselectCell(h);}return this.getSelectedDates();},reset:function(){for(var i=0;i<this.pages.length;++i){var h=this.pages[i];h.reset();}},clear:function(){for(var i=0;",
                "-i<this.pages.length;++i){var h=this.pages[i];h.clear();}this.cfg.setProperty(c.SELECTED.key,[]);this.cfg.setProperty(c.PAGEDATE.key,new Date(this.pages[0].today.getTime()));this.render();},nextMonth:function(){for(var i=0;i<this.pages.length;++i){var h=this.pages[i];h.nextMonth();}},previousMonth:function(){for(var i=this.pages.length-1;i>=0;--i){var h=this.pages[i];h.previousMonth();}},nextYear:function(){for(var i=0;i<this.pages.length;++i){var h=this.pages[i];h.nextYear();}},previousYear:function(){for(var i=0;i<this.pages.length;++i){var h=this.pages[i];h.previousYear();}},getSelectedDates:function(){var j=[];var i=this.cfg.getProperty(c.SELECTED.key);for(var l=0;l<i.length;++l){var k=i[l];var h=f.getDate(k[0],k[1]-1,k[2]);j.push(h);}j.sort(function(n,m){return n-m;});return j;},addRenderer:function(h,i){for(var k=0;k<this.pages.length;++k){var j=this.pages[k];j.addRenderer(h,i);}},addMonthRenderer:function(k,h){for(var j=0;j<this.pages.length;++j){var i=this.pages[j];i.addMonthRenderer(k,h);}},addWeekdayRenderer:function(i,h){for(var k=0;k<this.pages.length;++k){var j=this.pages[k];j.addWeekdayRenderer(i,h);}},removeRenderers:function(){this.callChildFunction(\"removeRenderers\");},renderHeader:function(){},renderFooter:function(){},addMonths:function(h){this.callChildFunction(\"addMonths\",h);},subtractMonths:function(h){this.callChildFunction(\"subtractMonths\",h);},addYears:function(h){this.callChildFunction(\"addYears\",h);},subtractYears:function(h){this.callChildFunction(\"subtractYears\",h);},getCalendarPage:function(l){var o=null;if(l){var p=l.getFullYear(),k=l.getMonth();var j=this.pages;for(var n=0;n<j.length;++n){var h=j[n].cfg.getProperty(\"pagedate\");if(h.getFullYear()===p&&h.getMonth()===k){o=j[n];break;}}}return o;},_setMonthOnDate:function(i,j){if(YAHOO.env.ua.webkit&&YAHOO.env.ua.webkit<420&&(j<0||j>11)){var h=f.add(i,f.MONTH,j-i.getMonth());i.setTime(h.getTime());}else{i.setMonth(j);}},_fixWidth:function(){var h=0;for(var j=0;j<this.pages.length;++j){var i=this.pages[j];h+=i.oDomContainer.offsetWidth;}if(h>0){this.oDomContainer.style.width=h+\"px\";}},toString:function(){return\"CalendarGroup \"+this.id;},destroy:function(){if(this.beforeDestroyEvent.fire()){var k=this;if(k.navigator){k.navigator.destroy();}if(k.cfg){k.cfg.destroy();}a.purgeElement(k.oDomContainer,true);d.removeClass(k.oDomContainer,b.CSS_CONTAINER);d.removeClass(k.oDomContainer,b.CSS_MULTI_UP);for(var j=0,h=k.pages.length;j<h;j++){k.pages[j].destroy();k.pages[j]=null;}k.oDomContainer.innerHTML=\"\";k.oDomContainer=null;this.destroyEvent.fire();}}};b.CSS_CONTAINER=\"yui-calcontainer\";b.CSS_MULTI_UP=\"multi\";b.CSS_2UPTITLE=\"title\";b.CSS_2UPCLOSE=\"close-icon\";YAHOO.lang.augmentProto(b,g,\"buildDayLabel\",\"buildMonthLabel\",\"renderOutOfBoundsDate\",\"renderRowHeader\",\"renderRowFooter\",\"renderCellDefault\",\"styleCellDefault\",\"renderCellStyleHighlight1\",\"renderCellStyleHighlight2\",\"renderCellStyleHighlight3\",\"renderCellStyleHighlight4\",\"renderCellStyleToday\",\"renderCellStyleSelected\",\"renderCellNotThisMonth\",\"styleCellNotThisMonth\",\"renderBodyCellRestricted\",\"initStyles\",\"configTitle\",\"configClose\",\"configIframe\",\"configStrings\",\"configToday\",\"configNavigator\",\"createTitleBar\",\"createCloseButton\",\"removeTitleBar\",\"removeCloseButton\",\"hide\",\"show\",\"toDate\",\"_toDate\",\"_parseArgs\",\"browser\");YAHOO.widget.CalGrp=b;YAHOO.widget.CalendarGroup=b;YAHOO.widget.Calendar2up=function(j,h,i){this.init(j,h,i);};YAHOO.extend(YAHOO.widget.Calendar2up,b);YAHOO.widget.Cal2up=YAHOO.widget.Calendar2up;})();YAHOO.widget.CalendarNavigator=function(a){this.init(a);};(function(){var a=YAHOO.widget.CalendarNavigator;a.CLASSES={NAV:\"yui-cal-nav\",NAV_VISIBLE:\"yui-cal-nav-visible\",MASK:\"yui-cal-nav-mask\",YEAR:\"yui-cal-nav-y\",MONTH:\"yui-cal-nav-m\",BUTTONS:\"yui-cal-nav-b\",BUTTON:\"yui-cal-nav-btn\",ERROR:\"yui-cal-nav-e\",YEAR_CTRL:\"yui-cal-nav-yc\",MONTH_CTRL:\"yui-cal-nav-mc\",INVALID:\"yui-invalid\",DEFAULT:\"yui-default\"};a.DEFAULT_CONFIG={strings:{month:\"Month\",year:\"Year\",submit:\"Okay\",cancel:\"Cancel\",invalidYear:\"Year needs to be a number\"},monthFormat:YAHOO.widget.Calendar.LONG,initialFocus:\"year\"};a._DEFAULT_CFG=a.DEFAULT_CONFIG;a.ID_SUFFIX=\"_nav\";a.MONTH_SUFFIX=\"_month\";a.YEAR_SUFFIX=\"_year\";a.ERROR_SUFFIX=\"_error\";a.CANCEL_SUFFIX=\"_cancel\";a.SUBMIT_SUFFIX=\"_submit\";a.YR_MAX_DIGITS=4;a.YR_MINOR_INC=1;a.YR_MAJOR_INC=10;a.UPDATE_DELAY=50;a.YR_PATTERN=/^\\d+$/;a.TRIM=/^\\s*(.*?)\\s*$/;})();YAHOO.widget.CalendarNavigator.prototype={id:null,cal:null,navEl:null,maskEl:null,yearEl:null,monthEl:null,errorEl:null,submitEl:null,cancelEl:null,firstCtrl:null,lastCtrl:null,_doc:null,_year:null,_month:0,__rendered:false,init:function(a){var c=a.oDomContainer;this.cal=a;this.id=c.id+YAHOO.widget.CalendarNavigator.ID_SUFFIX;this._doc=c.ownerDocument;var b=YAHOO.env.ua.ie;this.__isIEQuirks=(b&&((b<=6)||(this._doc.compatMode==\"BackCompat\")));},show:function(){var a=YAHOO.widget.CalendarNavigator.CLASSES;if(this.cal.beforeShowNavEvent.fire()){if(!this.__rendered){this.render();}this.clearErrors();this._updateMonthUI();this._updateYearUI();this._show(this.navEl,true);this.setInitialFocus();this.showMask();YAHOO.util.Dom.addClass(this.cal.oDomContainer,a.NAV_VISIBLE);this.cal.showNavEvent.fire();}},hide:function(){var a=YAHOO.widget.CalendarNavigator.CLASSES;if(this.cal.beforeHideNavEvent.fire()){this._show(this.navEl,false);this.hideMask();YAHOO.util.Dom.removeClass(this.cal.oDomContainer,a.NAV_VISIBLE);this.cal.hideNavEvent.fire();}},showMask:function(){this._show(this.maskEl,true);if(this.__isIEQuirks){this._syncMask();}},hideMask:function(){this._show(this.maskEl,false);},getMonth:function(){return this._month;},getYear:function(){return this._year;},setMonth:function(a){if(a>=0&&a<12){this._month=a;}this._updateMonthUI();},setYear:function(b){var a=YAHOO.widget.CalendarNavigator.YR_PATTERN;if(YAHOO.lang.isNumber(b)&&a.test(b+\"\")){this._year=b;}this._updateYearUI();},render:function(){this.cal.beforeRenderNavEvent.fire();if(!this.__rendered){this.createNav();this.createMask();this.applyListeners();",
                "-this.__rendered=true;}this.cal.renderNavEvent.fire();},createNav:function(){var b=YAHOO.widget.CalendarNavigator;var c=this._doc;var e=c.createElement(\"div\");e.className=b.CLASSES.NAV;var a=this.renderNavContents([]);e.innerHTML=a.join(\"\");this.cal.oDomContainer.appendChild(e);this.navEl=e;this.yearEl=c.getElementById(this.id+b.YEAR_SUFFIX);this.monthEl=c.getElementById(this.id+b.MONTH_SUFFIX);this.errorEl=c.getElementById(this.id+b.ERROR_SUFFIX);this.submitEl=c.getElementById(this.id+b.SUBMIT_SUFFIX);this.cancelEl=c.getElementById(this.id+b.CANCEL_SUFFIX);if(YAHOO.env.ua.gecko&&this.yearEl&&this.yearEl.type==\"text\"){this.yearEl.setAttribute(\"autocomplete\",\"off\");}this._setFirstLastElements();},createMask:function(){var b=YAHOO.widget.CalendarNavigator.CLASSES;var a=this._doc.createElement(\"div\");a.className=b.MASK;this.cal.oDomContainer.appendChild(a);this.maskEl=a;},_syncMask:function(){var b=this.cal.oDomContainer;if(b&&this.maskEl){var a=YAHOO.util.Dom.getRegion(b);YAHOO.util.Dom.setStyle(this.maskEl,\"width\",a.right-a.left+\"px\");YAHOO.util.Dom.setStyle(this.maskEl,\"height\",a.bottom-a.top+\"px\");}},renderNavContents:function(a){var c=YAHOO.widget.CalendarNavigator,d=c.CLASSES,b=a;b[b.length]='<div class=\"'+d.MONTH+'\">';this.renderMonth(b);b[b.length]=\"</div>\";b[b.length]='<div class=\"'+d.YEAR+'\">';this.renderYear(b);b[b.length]=\"</div>\";b[b.length]='<div class=\"'+d.BUTTONS+'\">';this.renderButtons(b);b[b.length]=\"</div>\";b[b.length]='<div class=\"'+d.ERROR+'\" id=\"'+this.id+c.ERROR_SUFFIX+'\"></div>';return b;},renderMonth:function(c){var f=YAHOO.widget.CalendarNavigator,g=f.CLASSES;var j=this.id+f.MONTH_SUFFIX,e=this.__getCfg(\"monthFormat\"),a=this.cal.cfg.getProperty((e==YAHOO.widget.Calendar.SHORT)?\"MONTHS_SHORT\":\"MONTHS_LONG\"),d=c;if(a&&a.length>0){d[d.length]='<label for=\"'+j+'\">';d[d.length]=this.__getCfg(\"month\",true);d[d.length]=\"</label>\";d[d.length]='<select name=\"'+j+'\" id=\"'+j+'\" class=\"'+g.MONTH_CTRL+'\">';for(var b=0;b<a.length;b++){d[d.length]='<option value=\"'+b+'\">';d[d.length]=a[b];d[d.length]=\"</option>\";}d[d.length]=\"</select>\";}return d;},renderYear:function(b){var d=YAHOO.widget.CalendarNavigator,e=d.CLASSES;var f=this.id+d.YEAR_SUFFIX,a=d.YR_MAX_DIGITS,c=b;c[c.length]='<label for=\"'+f+'\">';c[c.length]=this.__getCfg(\"year\",true);c[c.length]=\"</label>\";c[c.length]='<input type=\"text\" name=\"'+f+'\" id=\"'+f+'\" class=\"'+e.YEAR_CTRL+'\" maxlength=\"'+a+'\"/>';return c;},renderButtons:function(a){var c=YAHOO.widget.CalendarNavigator.CLASSES;var b=a;b[b.length]='<span class=\"'+c.BUTTON+\" \"+c.DEFAULT+'\">';b[b.length]='<button type=\"button\" id=\"'+this.id+\"_submit\"+'\">';b[b.length]=this.__getCfg(\"submit\",true);b[b.length]=\"</button>\";b[b.length]=\"</span>\";b[b.length]='<span class=\"'+c.BUTTON+'\">';b[b.length]='<button type=\"button\" id=\"'+this.id+\"_cancel\"+'\">';b[b.length]=this.__getCfg(\"cancel\",true);b[b.length]=\"</button>\";b[b.length]=\"</span>\";return b;},applyListeners:function(){var b=YAHOO.util.Event;function a(){if(this.validate()){this.setYear(this._getYearFromUI());}}function c(){this.setMonth(this._getMonthFromUI());}b.on(this.submitEl,\"click\",this.submit,this,true);b.on(this.cancelEl,\"click\",this.cancel,this,true);b.on(this.yearEl,\"blur\",a,this,true);b.on(this.monthEl,\"change\",c,this,true);if(this.__isIEQuirks){YAHOO.util.Event.on(this.cal.oDomContainer,\"resize\",this._syncMask,this,true);}this.applyKeyListeners();},purgeListeners:function(){var a=YAHOO.util.Event;a.removeListener(this.submitEl,\"click\",this.submit);a.removeListener(this.cancelEl,\"click\",this.cancel);a.removeListener(this.yearEl,\"blur\");a.removeListener(this.monthEl,\"change\");if(this.__isIEQuirks){a.removeListener(this.cal.oDomContainer,\"resize\",this._syncMask);}this.purgeKeyListeners();},applyKeyListeners:function(){var d=YAHOO.util.Event,a=YAHOO.env.ua;var c=(a.ie||a.webkit)?\"keydown\":\"keypress\";var b=(a.ie||a.opera||a.webkit)?\"keydown\":\"keypress\";d.on(this.yearEl,\"keypress\",this._handleEnterKey,this,true);d.on(this.yearEl,c,this._handleDirectionKeys,this,true);d.on(this.lastCtrl,b,this._handleTabKey,this,true);d.on(this.firstCtrl,b,this._handleShiftTabKey,this,true);},purgeKeyListeners:function(){var d=YAHOO.util.Event,a=YAHOO.env.ua;var c=(a.ie||a.webkit)?\"keydown\":\"keypress\";var b=(a.ie||a.opera||a.webkit)?\"keydown\":\"keypress\";d.removeListener(this.yearEl,\"keypress\",this._handleEnterKey);d.removeListener(this.yearEl,c,this._handleDirectionKeys);d.removeListener(this.lastCtrl,b,this._handleTabKey);d.removeListener(this.firstCtrl,b,this._handleShiftTabKey);},submit:function(){if(this.validate()){this.hide();this.setMonth(this._getMonthFromUI());this.setYear(this._getYearFromUI());var b=this.cal;var a=YAHOO.widget.CalendarNavigator.UPDATE_DELAY;if(a>0){var c=this;window.setTimeout(function(){c._update(b);},a);}else{this._update(b);}}},_update:function(b){var a=YAHOO.widget.DateMath.getDate(this.getYear()-b.cfg.getProperty(\"YEAR_OFFSET\"),this.getMonth(),1);b.cfg.setProperty(\"pagedate\",a);b.render();},cancel:function(){this.hide();},validate:function(){if(this._getYearFromUI()!==null){this.clearErrors();return true;}else{this.setYearError();this.setError(this.__getCfg(\"invalidYear\",true));return false;}},setError:function(a){if(this.errorEl){this.errorEl.innerHTML=a;this._show(this.errorEl,true);}},clearError:function(){if(this.errorEl){this.errorEl.innerHTML=\"\";this._show(this.errorEl,false);}},setYearError:function(){YAHOO.util.Dom.addClass(this.yearEl,YAHOO.widget.CalendarNavigator.CLASSES.INVALID);},clearYearError:function(){YAHOO.util.Dom.removeClass(this.yearEl,YAHOO.widget.CalendarNavigator.CLASSES.INVALID);},clearErrors:function(){this.clearError();this.clearYearError();},setInitialFocus:function(){var a=this.submitEl,c=this.__getCfg(\"initialFocus\");if(c&&c.toLowerCase){c=c.toLowerCase();if(c==\"year\"){a=this.yearEl;try{this.yearEl.select();}catch(b){}}else{if(c==\"month\"){a=this.monthEl;}}}if(a&&YAHOO.lang.isFunction(a.focus)){try{a.focus();}catch(d){}}},erase:function(){if(this.__rendered){this.purgeListeners();",
                "-this.yearEl=null;this.monthEl=null;this.errorEl=null;this.submitEl=null;this.cancelEl=null;this.firstCtrl=null;this.lastCtrl=null;if(this.navEl){this.navEl.innerHTML=\"\";}var b=this.navEl.parentNode;if(b){b.removeChild(this.navEl);}this.navEl=null;var a=this.maskEl.parentNode;if(a){a.removeChild(this.maskEl);}this.maskEl=null;this.__rendered=false;}},destroy:function(){this.erase();this._doc=null;this.cal=null;this.id=null;},_show:function(b,a){if(b){YAHOO.util.Dom.setStyle(b,\"display\",(a)?\"block\":\"none\");}},_getMonthFromUI:function(){if(this.monthEl){return this.monthEl.selectedIndex;}else{return 0;}},_getYearFromUI:function(){var b=YAHOO.widget.CalendarNavigator;var a=null;if(this.yearEl){var c=this.yearEl.value;c=c.replace(b.TRIM,\"$1\");if(b.YR_PATTERN.test(c)){a=parseInt(c,10);}}return a;},_updateYearUI:function(){if(this.yearEl&&this._year!==null){this.yearEl.value=this._year;}},_updateMonthUI:function(){if(this.monthEl){this.monthEl.selectedIndex=this._month;}},_setFirstLastElements:function(){this.firstCtrl=this.monthEl;this.lastCtrl=this.cancelEl;if(this.__isMac){if(YAHOO.env.ua.webkit&&YAHOO.env.ua.webkit<420){this.firstCtrl=this.monthEl;this.lastCtrl=this.yearEl;}if(YAHOO.env.ua.gecko){this.firstCtrl=this.yearEl;this.lastCtrl=this.yearEl;}}},_handleEnterKey:function(b){var a=YAHOO.util.KeyListener.KEY;if(YAHOO.util.Event.getCharCode(b)==a.ENTER){YAHOO.util.Event.preventDefault(b);this.submit();}},_handleDirectionKeys:function(h){var g=YAHOO.util.Event,a=YAHOO.util.KeyListener.KEY,d=YAHOO.widget.CalendarNavigator;var f=(this.yearEl.value)?parseInt(this.yearEl.value,10):null;if(isFinite(f)){var b=false;switch(g.getCharCode(h)){case a.UP:this.yearEl.value=f+d.YR_MINOR_INC;b=true;break;case a.DOWN:this.yearEl.value=Math.max(f-d.YR_MINOR_INC,0);b=true;break;case a.PAGE_UP:this.yearEl.value=f+d.YR_MAJOR_INC;b=true;break;case a.PAGE_DOWN:this.yearEl.value=Math.max(f-d.YR_MAJOR_INC,0);b=true;break;default:break;}if(b){g.preventDefault(h);try{this.yearEl.select();}catch(c){}}}},_handleTabKey:function(d){var c=YAHOO.util.Event,a=YAHOO.util.KeyListener.KEY;if(c.getCharCode(d)==a.TAB&&!d.shiftKey){try{c.preventDefault(d);this.firstCtrl.focus();}catch(b){}}},_handleShiftTabKey:function(d){var c=YAHOO.util.Event,a=YAHOO.util.KeyListener.KEY;if(d.shiftKey&&c.getCharCode(d)==a.TAB){try{c.preventDefault(d);this.lastCtrl.focus();}catch(b){}}},__getCfg:function(d,b){var c=YAHOO.widget.CalendarNavigator.DEFAULT_CONFIG;var a=this.cal.cfg.getProperty(\"navigator\");if(b){return(a!==true&&a.strings&&a.strings[d])?a.strings[d]:c.strings[d];}else{return(a!==true&&a[d])?a[d]:c[d];}},__isMac:(navigator.userAgent.toLowerCase().indexOf(\"macintosh\")!=-1)};YAHOO.register(\"calendar\",YAHOO.widget.Calendar,{version:\"2.9.0\",build:\"2800\"});",
                "\\ No newline at end of file",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar.js",
                "deleted file mode 100644",
                "index 05ce3ce3e1..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar.js",
                "+++ /dev/null",
                "@@ -1,7390 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-(function () {",
                "-",
                "-    /**",
                "-    * Config is a utility used within an Object to allow the implementer to",
                "-    * maintain a list of local configuration properties and listen for changes ",
                "-    * to those properties dynamically using CustomEvent. The initial values are ",
                "-    * also maintained so that the configuration can be reset at any given point ",
                "-    * to its initial state.",
                "-    * @namespace YAHOO.util",
                "-    * @class Config",
                "-    * @constructor",
                "-    * @param {Object} owner The owner Object to which this Config Object belongs",
                "-    */",
                "-    YAHOO.util.Config = function (owner) {",
                "-",
                "-        if (owner) {",
                "-            this.init(owner);",
                "-        }",
                "-",
                "-",
                "-    };",
                "-",
                "-",
                "-    var Lang = YAHOO.lang,",
                "-        CustomEvent = YAHOO.util.CustomEvent,",
                "-        Config = YAHOO.util.Config;",
                "-",
                "-",
                "-    /**",
                "-     * Constant representing the CustomEvent type for the config changed event.",
                "-     * @property YAHOO.util.Config.CONFIG_CHANGED_EVENT",
                "-     * @private",
                "-     * @static",
                "-     * @final",
                "-     */",
                "-    Config.CONFIG_CHANGED_EVENT = \"configChanged\";",
                "-    ",
                "-    /**",
                "-     * Constant representing the boolean type string",
                "-     * @property YAHOO.util.Config.BOOLEAN_TYPE",
                "-     * @private",
                "-     * @static",
                "-     * @final",
                "-     */",
                "-    Config.BOOLEAN_TYPE = \"boolean\";",
                "-    ",
                "-    Config.prototype = {",
                "-     ",
                "-        /**",
                "-        * Object reference to the owner of this Config Object",
                "-        * @property owner",
                "-        * @type Object",
                "-        */",
                "-        owner: null,",
                "-        ",
                "-        /**",
                "-        * Boolean flag that specifies whether a queue is currently ",
                "-        * being executed",
                "-        * @property queueInProgress",
                "-        * @type Boolean",
                "-        */",
                "-        queueInProgress: false,",
                "-        ",
                "-        /**",
                "-        * Maintains the local collection of configuration property objects and ",
                "-        * their specified values",
                "-        * @property config",
                "-        * @private",
                "-        * @type Object",
                "-        */ ",
                "-        config: null,",
                "-        ",
                "-        /**",
                "-        * Maintains the local collection of configuration property objects as ",
                "-        * they were initially applied.",
                "-        * This object is used when resetting a property.",
                "-        * @property initialConfig",
                "-        * @private",
                "-        * @type Object",
                "-        */ ",
                "-        initialConfig: null,",
                "-        ",
                "-        /**",
                "-        * Maintains the local, normalized CustomEvent queue",
                "-        * @property eventQueue",
                "-        * @private",
                "-        * @type Object",
                "-        */ ",
                "-        eventQueue: null,",
                "-        ",
                "-        /**",
                "-        * Custom Event, notifying subscribers when Config properties are set ",
                "-        * (setProperty is called without the silent flag",
                "-        * @event configChangedEvent",
                "-        */",
                "-        configChangedEvent: null,",
                "-    ",
                "-        /**",
                "-        * Initializes the configuration Object and all of its local members.",
                "-        * @method init",
                "-        * @param {Object} owner The owner Object to which this Config ",
                "-        * Object belongs",
                "-        */",
                "-        init: function (owner) {",
                "-    ",
                "-            this.owner = owner;",
                "-    ",
                "-            this.configChangedEvent = ",
                "-                this.createEvent(Config.CONFIG_CHANGED_EVENT);",
                "-    ",
                "-            this.configChangedEvent.signature = CustomEvent.LIST;",
                "-            this.queueInProgress = false;",
                "-            this.config = {};",
                "-            this.initialConfig = {};",
                "-            this.eventQueue = [];",
                "-        ",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Validates that the value passed in is a Boolean.",
                "-        * @method checkBoolean",
                "-        * @param {Object} val The value to validate",
                "-        * @return {Boolean} true, if the value is valid",
                "-        */ ",
                "-        checkBoolean: function (val) {",
                "-            return (typeof val == Config.BOOLEAN_TYPE);",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Validates that the value passed in is a number.",
                "-        * @method checkNumber",
                "-        * @param {Object} val The value to validate",
                "-        * @return {Boolean} true, if the value is valid",
                "-        */",
                "-        checkNumber: function (val) {",
                "-            return (!isNaN(val));",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Fires a configuration property event using the specified value. ",
                "-        * @method fireEvent",
                "-        * @private",
                "-        * @param {String} key The configuration property's name",
                "-        * @param {value} Object The value of the correct type for the property",
                "-        */ ",
                "-        fireEvent: function ( key, value ) {",
                "-            var property = this.config[key];",
                "-        ",
                "-            if (property && property.event) {",
                "-                property.event.fire(value);",
                "-            } ",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Adds a property to the Config Object's private config hash.",
                "-        * @method addProperty",
                "-        * @param {String} key The configuration property's name",
                "-        * @param {Object} propertyObject The Object containing all of this ",
                "-        * property's arguments",
                "-        */",
                "-        addProperty: function ( key, propertyObject ) {",
                "-            key = key.toLowerCase();",
                "-        ",
                "-            this.config[key] = propertyObject;",
                "-        ",
                "-            propertyObject.event = this.createEvent(key, { scope: this.owner });",
                "-            propertyObject.event.signature = CustomEvent.LIST;",
                "-            ",
                "-            ",
                "-            propertyObject.key = key;",
                "-        ",
                "-            if (propertyObject.handler) {",
                "-                propertyObject.event.subscribe(propertyObject.handler, ",
                "-                    this.owner);",
                "-            }",
                "-        ",
                "-            this.setProperty(key, propertyObject.value, true);",
                "-            ",
                "-            if (! propertyObject.suppressEvent) {",
                "-                this.queueProperty(key, propertyObject.value);",
                "-            }",
                "-            ",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Returns a key-value configuration map of the values currently set in  ",
                "-        * the Config Object.",
                "-        * @method getConfig",
                "-        * @return {Object} The current config, represented in a key-value map",
                "-        */",
                "-        getConfig: function () {",
                "-        ",
                "-            var cfg = {},",
                "-                currCfg = this.config,",
                "-                prop,",
                "-                property;",
                "-                ",
                "-            for (prop in currCfg) {",
                "-                if (Lang.hasOwnProperty(currCfg, prop)) {",
                "-                    property = currCfg[prop];",
                "-                    if (property && property.event) {",
                "-                        cfg[prop] = property.value;",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            return cfg;",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Returns the value of specified property.",
                "-        * @method getProperty",
                "-        * @param {String} key The name of the property",
                "-        * @return {Object}  The value of the specified property",
                "-        */",
                "-        getProperty: function (key) {",
                "-            var property = this.config[key.toLowerCase()];",
                "-            if (property && property.event) {",
                "-                return property.value;",
                "-            } else {",
                "-                return undefined;",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Resets the specified property's value to its initial value.",
                "-        * @method resetProperty",
                "-        * @param {String} key The name of the property",
                "-        * @return {Boolean} True is the property was reset, false if not",
                "-        */",
                "-        resetProperty: function (key) {",
                "-            key = key.toLowerCase();",
                "-",
                "-            var property = this.config[key];",
                "-",
                "-            if (property && property.event) {",
                "-                if (key in this.initialConfig) {",
                "-                    this.setProperty(key, this.initialConfig[key]);",
                "-                    return true;",
                "-                }",
                "-            } else {",
                "-                return false;",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Sets the value of a property. If the silent property is passed as ",
                "-        * true, the property's event will not be fired.",
                "-        * @method setProperty",
                "-        * @param {String} key The name of the property",
                "-        * @param {String} value The value to set the property to",
                "-        * @param {Boolean} silent Whether the value should be set silently, ",
                "-        * without firing the property event.",
                "-        * @return {Boolean} True, if the set was successful, false if it failed.",
                "-        */",
                "-        setProperty: function (key, value, silent) {",
                "-        ",
                "-            var property;",
                "-        ",
                "-            key = key.toLowerCase();",
                "-        ",
                "-            if (this.queueInProgress && ! silent) {",
                "-                // Currently running through a queue... ",
                "-                this.queueProperty(key,value);",
                "-                return true;",
                "-    ",
                "-            } else {",
                "-                property = this.config[key];",
                "-                if (property && property.event) {",
                "-                    if (property.validator && !property.validator(value)) {",
                "-                        return false;",
                "-                    } else {",
                "-                        property.value = value;",
                "-                        if (! silent) {",
                "-                            this.fireEvent(key, value);",
                "-                            this.configChangedEvent.fire([key, value]);",
                "-                        }",
                "-                        return true;",
                "-                    }",
                "-                } else {",
                "-                    return false;",
                "-                }",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Sets the value of a property and queues its event to execute. If the ",
                "-        * event is already scheduled to execute, it is",
                "-        * moved from its current position to the end of the queue.",
                "-        * @method queueProperty",
                "-        * @param {String} key The name of the property",
                "-        * @param {String} value The value to set the property to",
                "-        * @return {Boolean}  true, if the set was successful, false if ",
                "-        * it failed.",
                "-        */ ",
                "-        queueProperty: function (key, value) {",
                "-        ",
                "-            key = key.toLowerCase();",
                "-        ",
                "-            var property = this.config[key],",
                "-                foundDuplicate = false,",
                "-                iLen,",
                "-                queueItem,",
                "-                queueItemKey,",
                "-                queueItemValue,",
                "-                sLen,",
                "-                supercedesCheck,",
                "-                qLen,",
                "-                queueItemCheck,",
                "-                queueItemCheckKey,",
                "-                queueItemCheckValue,",
                "-                i,",
                "-                s,",
                "-                q;",
                "-                                ",
                "-            if (property && property.event) {",
                "-    ",
                "-                if (!Lang.isUndefined(value) && property.validator && ",
                "-                    !property.validator(value)) { // validator",
                "-                    return false;",
                "-                } else {",
                "-        ",
                "-                    if (!Lang.isUndefined(value)) {",
                "-                        property.value = value;",
                "-                    } else {",
                "-                        value = property.value;",
                "-                    }",
                "-        ",
                "-                    foundDuplicate = false;",
                "-                    iLen = this.eventQueue.length;",
                "-        ",
                "-                    for (i = 0; i < iLen; i++) {",
                "-                        queueItem = this.eventQueue[i];",
                "-        ",
                "-                        if (queueItem) {",
                "-                            queueItemKey = queueItem[0];",
                "-                            queueItemValue = queueItem[1];",
                "-",
                "-                            if (queueItemKey == key) {",
                "-    ",
                "-                                /*",
                "-                                    found a dupe... push to end of queue, null ",
                "-                                    current item, and break",
                "-                                */",
                "-    ",
                "-                                this.eventQueue[i] = null;",
                "-    ",
                "-                                this.eventQueue.push(",
                "-                                    [key, (!Lang.isUndefined(value) ? ",
                "-                                    value : queueItemValue)]);",
                "-    ",
                "-                                foundDuplicate = true;",
                "-                                break;",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                    ",
                "-                    // this is a refire, or a new property in the queue",
                "-    ",
                "-                    if (! foundDuplicate && !Lang.isUndefined(value)) { ",
                "-                        this.eventQueue.push([key, value]);",
                "-                    }",
                "-                }",
                "-        ",
                "-                if (property.supercedes) {",
                "-",
                "-                    sLen = property.supercedes.length;",
                "-",
                "-                    for (s = 0; s < sLen; s++) {",
                "-",
                "-                        supercedesCheck = property.supercedes[s];",
                "-                        qLen = this.eventQueue.length;",
                "-",
                "-                        for (q = 0; q < qLen; q++) {",
                "-                            queueItemCheck = this.eventQueue[q];",
                "-",
                "-                            if (queueItemCheck) {",
                "-                                queueItemCheckKey = queueItemCheck[0];",
                "-                                queueItemCheckValue = queueItemCheck[1];",
                "-",
                "-                                if (queueItemCheckKey == ",
                "-                                    supercedesCheck.toLowerCase() ) {",
                "-",
                "-                                    this.eventQueue.push([queueItemCheckKey, ",
                "-                                        queueItemCheckValue]);",
                "-",
                "-                                    this.eventQueue[q] = null;",
                "-                                    break;",
                "-",
                "-                                }",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-",
                "-                return true;",
                "-            } else {",
                "-                return false;",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Fires the event for a property using the property's current value.",
                "-        * @method refireEvent",
                "-        * @param {String} key The name of the property",
                "-        */",
                "-        refireEvent: function (key) {",
                "-    ",
                "-            key = key.toLowerCase();",
                "-        ",
                "-            var property = this.config[key];",
                "-    ",
                "-            if (property && property.event && ",
                "-    ",
                "-                !Lang.isUndefined(property.value)) {",
                "-    ",
                "-                if (this.queueInProgress) {",
                "-    ",
                "-                    this.queueProperty(key);",
                "-    ",
                "-                } else {",
                "-    ",
                "-                    this.fireEvent(key, property.value);",
                "-    ",
                "-                }",
                "-    ",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Applies a key-value Object literal to the configuration, replacing  ",
                "-        * any existing values, and queueing the property events.",
                "-        * Although the values will be set, fireQueue() must be called for their ",
                "-        * associated events to execute.",
                "-        * @method applyConfig",
                "-        * @param {Object} userConfig The configuration Object literal",
                "-        * @param {Boolean} init  When set to true, the initialConfig will ",
                "-        * be set to the userConfig passed in, so that calling a reset will ",
                "-        * reset the properties to the passed values.",
                "-        */",
                "-        applyConfig: function (userConfig, init) {",
                "-        ",
                "-            var sKey,",
                "-                oConfig;",
                "-",
                "-            if (init) {",
                "-                oConfig = {};",
                "-                for (sKey in userConfig) {",
                "-                    if (Lang.hasOwnProperty(userConfig, sKey)) {",
                "-                        oConfig[sKey.toLowerCase()] = userConfig[sKey];",
                "-                    }",
                "-                }",
                "-                this.initialConfig = oConfig;",
                "-            }",
                "-",
                "-            for (sKey in userConfig) {",
                "-                if (Lang.hasOwnProperty(userConfig, sKey)) {",
                "-                    this.queueProperty(sKey, userConfig[sKey]);",
                "-                }",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Refires the events for all configuration properties using their ",
                "-        * current values.",
                "-        * @method refresh",
                "-        */",
                "-        refresh: function () {",
                "-",
                "-            var prop;",
                "-",
                "-            for (prop in this.config) {",
                "-                if (Lang.hasOwnProperty(this.config, prop)) {",
                "-                    this.refireEvent(prop);",
                "-                }",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Fires the normalized list of queued property change events",
                "-        * @method fireQueue",
                "-        */",
                "-        fireQueue: function () {",
                "-        ",
                "-            var i, ",
                "-                queueItem,",
                "-                key,",
                "-                value,",
                "-                property;",
                "-        ",
                "-            this.queueInProgress = true;",
                "-            for (i = 0;i < this.eventQueue.length; i++) {",
                "-                queueItem = this.eventQueue[i];",
                "-                if (queueItem) {",
                "-        ",
                "-                    key = queueItem[0];",
                "-                    value = queueItem[1];",
                "-                    property = this.config[key];",
                "-",
                "-                    property.value = value;",
                "-",
                "-                    // Clear out queue entry, to avoid it being ",
                "-                    // re-added to the queue by any queueProperty/supercedes",
                "-                    // calls which are invoked during fireEvent",
                "-                    this.eventQueue[i] = null;",
                "-",
                "-                    this.fireEvent(key,value);",
                "-                }",
                "-            }",
                "-            ",
                "-            this.queueInProgress = false;",
                "-            this.eventQueue = [];",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Subscribes an external handler to the change event for any ",
                "-        * given property. ",
                "-        * @method subscribeToConfigEvent",
                "-        * @param {String} key The property name",
                "-        * @param {Function} handler The handler function to use subscribe to ",
                "-        * the property's event",
                "-        * @param {Object} obj The Object to use for scoping the event handler ",
                "-        * (see CustomEvent documentation)",
                "-        * @param {Boolean} overrideContext Optional. If true, will override",
                "-        * \"this\" within the handler to map to the scope Object passed into the",
                "-        * method.",
                "-        * @return {Boolean} True, if the subscription was successful, ",
                "-        * otherwise false.",
                "-        */ ",
                "-        subscribeToConfigEvent: function (key, handler, obj, overrideContext) {",
                "-    ",
                "-            var property = this.config[key.toLowerCase()];",
                "-    ",
                "-            if (property && property.event) {",
                "-                if (!Config.alreadySubscribed(property.event, handler, obj)) {",
                "-                    property.event.subscribe(handler, obj, overrideContext);",
                "-                }",
                "-                return true;",
                "-            } else {",
                "-                return false;",
                "-            }",
                "-    ",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Unsubscribes an external handler from the change event for any ",
                "-        * given property. ",
                "-        * @method unsubscribeFromConfigEvent",
                "-        * @param {String} key The property name",
                "-        * @param {Function} handler The handler function to use subscribe to ",
                "-        * the property's event",
                "-        * @param {Object} obj The Object to use for scoping the event ",
                "-        * handler (see CustomEvent documentation)",
                "-        * @return {Boolean} True, if the unsubscription was successful, ",
                "-        * otherwise false.",
                "-        */",
                "-        unsubscribeFromConfigEvent: function (key, handler, obj) {",
                "-            var property = this.config[key.toLowerCase()];",
                "-            if (property && property.event) {",
                "-                return property.event.unsubscribe(handler, obj);",
                "-            } else {",
                "-                return false;",
                "-            }",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Returns a string representation of the Config object",
                "-        * @method toString",
                "-        * @return {String} The Config object in string format.",
                "-        */",
                "-        toString: function () {",
                "-            var output = \"Config\";",
                "-            if (this.owner) {",
                "-                output += \" [\" + this.owner.toString() + \"]\";",
                "-            }",
                "-            return output;",
                "-        },",
                "-        ",
                "-        /**",
                "-        * Returns a string representation of the Config object's current ",
                "-        * CustomEvent queue",
                "-        * @method outputEventQueue",
                "-        * @return {String} The string list of CustomEvents currently queued ",
                "-        * for execution",
                "-        */",
                "-        outputEventQueue: function () {",
                "-",
                "-            var output = \"\",",
                "-                queueItem,",
                "-                q,",
                "-                nQueue = this.eventQueue.length;",
                "-              ",
                "-            for (q = 0; q < nQueue; q++) {",
                "-                queueItem = this.eventQueue[q];",
                "-                if (queueItem) {",
                "-                    output += queueItem[0] + \"=\" + queueItem[1] + \", \";",
                "-                }",
                "-            }",
                "-            return output;",
                "-        },",
                "-",
                "-        /**",
                "-        * Sets all properties to null, unsubscribes all listeners from each ",
                "-        * property's change event and all listeners from the configChangedEvent.",
                "-        * @method destroy",
                "-        */",
                "-        destroy: function () {",
                "-",
                "-            var oConfig = this.config,",
                "-                sProperty,",
                "-                oProperty;",
                "-",
                "-",
                "-            for (sProperty in oConfig) {",
                "-            ",
                "-                if (Lang.hasOwnProperty(oConfig, sProperty)) {",
                "-",
                "-                    oProperty = oConfig[sProperty];",
                "-",
                "-                    oProperty.event.unsubscribeAll();",
                "-                    oProperty.event = null;",
                "-",
                "-                }",
                "-            ",
                "-            }",
                "-            ",
                "-            this.configChangedEvent.unsubscribeAll();",
                "-            ",
                "-            this.configChangedEvent = null;",
                "-            this.owner = null;",
                "-            this.config = null;",
                "-            this.initialConfig = null;",
                "-            this.eventQueue = null;",
                "-        ",
                "-        }",
                "-",
                "-    };",
                "-    ",
                "-    ",
                "-    ",
                "-    /**",
                "-    * Checks to determine if a particular function/Object pair are already ",
                "-    * subscribed to the specified CustomEvent",
                "-    * @method YAHOO.util.Config.alreadySubscribed",
                "-    * @static",
                "-    * @param {YAHOO.util.CustomEvent} evt The CustomEvent for which to check ",
                "-    * the subscriptions",
                "-    * @param {Function} fn The function to look for in the subscribers list",
                "-    * @param {Object} obj The execution scope Object for the subscription",
                "-    * @return {Boolean} true, if the function/Object pair is already subscribed ",
                "-    * to the CustomEvent passed in",
                "-    */",
                "-    Config.alreadySubscribed = function (evt, fn, obj) {",
                "-    ",
                "-        var nSubscribers = evt.subscribers.length,",
                "-            subsc,",
                "-            i;",
                "-",
                "-        if (nSubscribers > 0) {",
                "-            i = nSubscribers - 1;",
                "-            do {",
                "-                subsc = evt.subscribers[i];",
                "-                if (subsc && subsc.obj == obj && subsc.fn == fn) {",
                "-                    return true;",
                "-                }",
                "-            }",
                "-            while (i--);",
                "-        }",
                "-",
                "-        return false;",
                "-",
                "-    };",
                "-",
                "-    YAHOO.lang.augmentProto(Config, YAHOO.util.EventProvider);",
                "-",
                "-}());",
                "-/**",
                "-* The datemath module provides utility methods for basic JavaScript Date object manipulation and ",
                "-* comparison. ",
                "-* ",
                "-* @module datemath",
                "-*/",
                "-",
                "-/**",
                "-* YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility",
                "-* used for adding, subtracting, and comparing dates.",
                "-* @namespace YAHOO.widget",
                "-* @class DateMath",
                "-*/",
                "-YAHOO.widget.DateMath = {",
                "-    /**",
                "-    * Constant field representing Day",
                "-    * @property DAY",
                "-    * @static",
                "-    * @final",
                "-    * @type String",
                "-    */",
                "-    DAY : \"D\",",
                "-",
                "-    /**",
                "-    * Constant field representing Week",
                "-    * @property WEEK",
                "-    * @static",
                "-    * @final",
                "-    * @type String",
                "-    */",
                "-    WEEK : \"W\",",
                "-",
                "-    /**",
                "-    * Constant field representing Year",
                "-    * @property YEAR",
                "-    * @static",
                "-    * @final",
                "-    * @type String",
                "-    */",
                "-    YEAR : \"Y\",",
                "-",
                "-    /**",
                "-    * Constant field representing Month",
                "-    * @property MONTH",
                "-    * @static",
                "-    * @final",
                "-    * @type String",
                "-    */",
                "-    MONTH : \"M\",",
                "-",
                "-    /**",
                "-    * Constant field representing one day, in milliseconds",
                "-    * @property ONE_DAY_MS",
                "-    * @static",
                "-    * @final",
                "-    * @type Number",
                "-    */",
                "-    ONE_DAY_MS : 1000*60*60*24,",
                "-    ",
                "-    /**",
                "-     * Constant field representing the date in first week of January",
                "-     * which identifies the first week of the year.",
                "-     * <p>",
                "-     * In the U.S, Jan 1st is normally used based on a Sunday start of week.",
                "-     * ISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week.",
                "-     * </p>",
                "-     * @property WEEK_ONE_JAN_DATE",
                "-     * @static",
                "-     * @type Number",
                "-     */",
                "-    WEEK_ONE_JAN_DATE : 1,",
                "-",
                "-    /**",
                "-    * Adds the specified amount of time to the this instance.",
                "-    * @method add",
                "-    * @param {Date} date The JavaScript Date object to perform addition on",
                "-    * @param {String} field The field constant to be used for performing addition.",
                "-    * @param {Number} amount The number of units (measured in the field constant) to add to the date.",
                "-    * @return {Date} The resulting Date object",
                "-    */",
                "-    add : function(date, field, amount) {",
                "-        var d = new Date(date.getTime());",
                "-        switch (field) {",
                "-            case this.MONTH:",
                "-                var newMonth = date.getMonth() + amount;",
                "-                var years = 0;",
                "-",
                "-                if (newMonth < 0) {",
                "-                    while (newMonth < 0) {",
                "-                        newMonth += 12;",
                "-                        years -= 1;",
                "-                    }",
                "-                } else if (newMonth > 11) {",
                "-                    while (newMonth > 11) {",
                "-                        newMonth -= 12;",
                "-                        years += 1;",
                "-                    }",
                "-                }",
                "-",
                "-                d.setMonth(newMonth);",
                "-                d.setFullYear(date.getFullYear() + years);",
                "-                break;",
                "-            case this.DAY:",
                "-                this._addDays(d, amount);",
                "-                // d.setDate(date.getDate() + amount);",
                "-                break;",
                "-            case this.YEAR:",
                "-                d.setFullYear(date.getFullYear() + amount);",
                "-                break;",
                "-            case this.WEEK:",
                "-                this._addDays(d, (amount * 7));",
                "-                // d.setDate(date.getDate() + (amount * 7));",
                "-                break;",
                "-        }",
                "-        return d;",
                "-    },",
                "-",
                "-    /**",
                "-     * Private helper method to account for bug in Safari 2 (webkit < 420)",
                "-     * when Date.setDate(n) is called with n less than -128 or greater than 127.",
                "-     * <p>",
                "-     * Fix approach and original findings are available here:",
                "-     * http://brianary.blogspot.com/2006/03/safari-date-bug.html",
                "-     * </p>",
                "-     * @method _addDays",
                "-     * @param {Date} d JavaScript date object",
                "-     * @param {Number} nDays The number of days to add to the date object (can be negative)",
                "-     * @private",
                "-     */",
                "-    _addDays : function(d, nDays) {",
                "-        if (YAHOO.env.ua.webkit && YAHOO.env.ua.webkit < 420) {",
                "-            if (nDays < 0) {",
                "-                // Ensure we don't go below -128 (getDate() is always 1 to 31, so we won't go above 127)",
                "-                for(var min = -128; nDays < min; nDays -= min) {",
                "-                    d.setDate(d.getDate() + min);",
                "-                }",
                "-            } else {",
                "-                // Ensure we don't go above 96 + 31 = 127",
                "-                for(var max = 96; nDays > max; nDays -= max) {",
                "-                    d.setDate(d.getDate() + max);",
                "-                }",
                "-            }",
                "-            // nDays should be remainder between -128 and 96",
                "-        }",
                "-        d.setDate(d.getDate() + nDays);",
                "-    },",
                "-",
                "-    /**",
                "-    * Subtracts the specified amount of time from the this instance.",
                "-    * @method subtract",
                "-    * @param {Date} date The JavaScript Date object to perform subtraction on",
                "-    * @param {Number} field The this field constant to be used for performing subtraction.",
                "-    * @param {Number} amount The number of units (measured in the field constant) to subtract from the date.",
                "-    * @return {Date} The resulting Date object",
                "-    */",
                "-    subtract : function(date, field, amount) {",
                "-        return this.add(date, field, (amount*-1));",
                "-    },",
                "-",
                "-    /**",
                "-    * Determines whether a given date is before another date on the calendar.",
                "-    * @method before",
                "-    * @param {Date} date  The Date object to compare with the compare argument",
                "-    * @param {Date} compareTo The Date object to use for the comparison",
                "-    * @return {Boolean} true if the date occurs before the compared date; false if not.",
                "-    */",
                "-    before : function(date, compareTo) {",
                "-        var ms = compareTo.getTime();",
                "-        if (date.getTime() < ms) {",
                "-            return true;",
                "-        } else {",
                "-            return false;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Determines whether a given date is after another date on the calendar.",
                "-    * @method after",
                "-    * @param {Date} date  The Date object to compare with the compare argument",
                "-    * @param {Date} compareTo The Date object to use for the comparison",
                "-    * @return {Boolean} true if the date occurs after the compared date; false if not.",
                "-    */",
                "-    after : function(date, compareTo) {",
                "-        var ms = compareTo.getTime();",
                "-        if (date.getTime() > ms) {",
                "-            return true;",
                "-        } else {",
                "-            return false;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Determines whether a given date is between two other dates on the calendar.",
                "-    * @method between",
                "-    * @param {Date} date  The date to check for",
                "-    * @param {Date} dateBegin The start of the range",
                "-    * @param {Date} dateEnd  The end of the range",
                "-    * @return {Boolean} true if the date occurs between the compared dates; false if not.",
                "-    */",
                "-    between : function(date, dateBegin, dateEnd) {",
                "-        if (this.after(date, dateBegin) && this.before(date, dateEnd)) {",
                "-            return true;",
                "-        } else {",
                "-            return false;",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Retrieves a JavaScript Date object representing January 1 of any given year.",
                "-    * @method getJan1",
                "-    * @param {Number} calendarYear  The calendar year for which to retrieve January 1",
                "-    * @return {Date} January 1 of the calendar year specified.",
                "-    */",
                "-    getJan1 : function(calendarYear) {",
                "-        return this.getDate(calendarYear,0,1);",
                "-    },",
                "-",
                "-    /**",
                "-    * Calculates the number of days the specified date is from January 1 of the specified calendar year.",
                "-    * Passing January 1 to this function would return an offset value of zero.",
                "-    * @method getDayOffset",
                "-    * @param {Date} date The JavaScript date for which to find the offset",
                "-    * @param {Number} calendarYear The calendar year to use for determining the offset",
                "-    * @return {Number} The number of days since January 1 of the given year",
                "-    */",
                "-    getDayOffset : function(date, calendarYear) {",
                "-        var beginYear = this.getJan1(calendarYear); // Find the start of the year. This will be in week 1.",
                "-        ",
                "-        // Find the number of days the passed in date is away from the calendar year start",
                "-        var dayOffset = Math.ceil((date.getTime()-beginYear.getTime()) / this.ONE_DAY_MS);",
                "-        return dayOffset;",
                "-    },",
                "-",
                "-    /**",
                "-    * Calculates the week number for the given date. Can currently support standard",
                "-    * U.S. week numbers, based on Jan 1st defining the 1st week of the year, and ",
                "-    * ISO8601 week numbers, based on Jan 4th defining the 1st week of the year.",
                "-    * ",
                "-    * @method getWeekNumber",
                "-    * @param {Date} date The JavaScript date for which to find the week number",
                "-    * @param {Number} firstDayOfWeek The index of the first day of the week (0 = Sun, 1 = Mon ... 6 = Sat).",
                "-    * Defaults to 0",
                "-    * @param {Number} janDate The date in the first week of January which defines week one for the year",
                "-    * Defaults to the value of YAHOO.widget.DateMath.WEEK_ONE_JAN_DATE, which is 1 (Jan 1st). ",
                "-    * For the U.S, this is normally Jan 1st. ISO8601 uses Jan 4th to define the first week of the year.",
                "-    * ",
                "-    * @return {Number} The number of the week containing the given date.",
                "-    */",
                "-    getWeekNumber : function(date, firstDayOfWeek, janDate) {",
                "-",
                "-        // Setup Defaults",
                "-        firstDayOfWeek = firstDayOfWeek || 0;",
                "-        janDate = janDate || this.WEEK_ONE_JAN_DATE;",
                "-",
                "-        var targetDate = this.clearTime(date),",
                "-            startOfWeek,",
                "-            endOfWeek;",
                "-",
                "-        if (targetDate.getDay() === firstDayOfWeek) { ",
                "-            startOfWeek = targetDate;",
                "-        } else {",
                "-            startOfWeek = this.getFirstDayOfWeek(targetDate, firstDayOfWeek);",
                "-        }",
                "-",
                "-        var startYear = startOfWeek.getFullYear();",
                "-",
                "-        // DST shouldn't be a problem here, math is quicker than setDate();",
                "-        endOfWeek = new Date(startOfWeek.getTime() + 6*this.ONE_DAY_MS);",
                "-",
                "-        var weekNum;",
                "-        if (startYear !== endOfWeek.getFullYear() && endOfWeek.getDate() >= janDate) {",
                "-            // If years don't match, endOfWeek is in Jan. and if the ",
                "-            // week has WEEK_ONE_JAN_DATE in it, it's week one by definition.",
                "-            weekNum = 1;",
                "-        } else {",
                "-            // Get the 1st day of the 1st week, and ",
                "-            // find how many days away we are from it.",
                "-            var weekOne = this.clearTime(this.getDate(startYear, 0, janDate)),",
                "-                weekOneDayOne = this.getFirstDayOfWeek(weekOne, firstDayOfWeek);",
                "-",
                "-            // Round days to smoothen out 1 hr DST diff",
                "-            var daysDiff  = Math.round((targetDate.getTime() - weekOneDayOne.getTime())/this.ONE_DAY_MS);",
                "-",
                "-            // Calc. Full Weeks",
                "-            var rem = daysDiff % 7;",
                "-            var weeksDiff = (daysDiff - rem)/7;",
                "-            weekNum = weeksDiff + 1;",
                "-        }",
                "-        return weekNum;",
                "-    },",
                "-",
                "-    /**",
                "-     * Get the first day of the week, for the give date. ",
                "-     * @param {Date} dt The date in the week for which the first day is required.",
                "-     * @param {Number} startOfWeek The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)",
                "-     * @return {Date} The first day of the week",
                "-     */",
                "-    getFirstDayOfWeek : function (dt, startOfWeek) {",
                "-        startOfWeek = startOfWeek || 0;",
                "-        var dayOfWeekIndex = dt.getDay(),",
                "-            dayOfWeek = (dayOfWeekIndex - startOfWeek + 7) % 7;",
                "-",
                "-        return this.subtract(dt, this.DAY, dayOfWeek);",
                "-    },",
                "-",
                "-    /**",
                "-    * Determines if a given week overlaps two different years.",
                "-    * @method isYearOverlapWeek",
                "-    * @param {Date} weekBeginDate The JavaScript Date representing the first day of the week.",
                "-    * @return {Boolean} true if the date overlaps two different years.",
                "-    */",
                "-    isYearOverlapWeek : function(weekBeginDate) {",
                "-        var overlaps = false;",
                "-        var nextWeek = this.add(weekBeginDate, this.DAY, 6);",
                "-        if (nextWeek.getFullYear() != weekBeginDate.getFullYear()) {",
                "-            overlaps = true;",
                "-        }",
                "-        return overlaps;",
                "-    },",
                "-",
                "-    /**",
                "-    * Determines if a given week overlaps two different months.",
                "-    * @method isMonthOverlapWeek",
                "-    * @param {Date} weekBeginDate The JavaScript Date representing the first day of the week.",
                "-    * @return {Boolean} true if the date overlaps two different months.",
                "-    */",
                "-    isMonthOverlapWeek : function(weekBeginDate) {",
                "-        var overlaps = false;",
                "-        var nextWeek = this.add(weekBeginDate, this.DAY, 6);",
                "-        if (nextWeek.getMonth() != weekBeginDate.getMonth()) {",
                "-            overlaps = true;",
                "-        }",
                "-        return overlaps;",
                "-    },",
                "-",
                "-    /**",
                "-    * Gets the first day of a month containing a given date.",
                "-    * @method findMonthStart",
                "-    * @param {Date} date The JavaScript Date used to calculate the month start",
                "-    * @return {Date}  The JavaScript Date representing the first day of the month",
                "-    */",
                "-    findMonthStart : function(date) {",
                "-        var start = this.getDate(date.getFullYear(), date.getMonth(), 1);",
                "-        return start;",
                "-    },",
                "-",
                "-    /**",
                "-    * Gets the last day of a month containing a given date.",
                "-    * @method findMonthEnd",
                "-    * @param {Date} date The JavaScript Date used to calculate the month end",
                "-    * @return {Date}  The JavaScript Date representing the last day of the month",
                "-    */",
                "-    findMonthEnd : function(date) {",
                "-        var start = this.findMonthStart(date);",
                "-        var nextMonth = this.add(start, this.MONTH, 1);",
                "-        var end = this.subtract(nextMonth, this.DAY, 1);",
                "-        return end;",
                "-    },",
                "-",
                "-    /**",
                "-    * Clears the time fields from a given date, effectively setting the time to 12 noon.",
                "-    * @method clearTime",
                "-    * @param {Date} date The JavaScript Date for which the time fields will be cleared",
                "-    * @return {Date}  The JavaScript Date cleared of all time fields",
                "-    */",
                "-    clearTime : function(date) {",
                "-        date.setHours(12,0,0,0);",
                "-        return date;",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object",
                "-     * are set to 0. The method allows Date instances to be created with the a year less than 100. \"new Date(year, month, date)\" implementations ",
                "-     * set the year to 19xx if a year (xx) which is less than 100 is provided.",
                "-     * <p>",
                "-     * <em>NOTE:</em>Validation on argument values is not performed. It is the caller's responsibility to ensure",
                "-     * arguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.",
                "-     * </p>",
                "-     * @method getDate",
                "-     * @param {Number} y Year.",
                "-     * @param {Number} m Month index from 0 (Jan) to 11 (Dec).",
                "-     * @param {Number} d (optional) Date from 1 to 31. If not provided, defaults to 1.",
                "-     * @return {Date} The JavaScript date object with year, month, date set as provided.",
                "-     */",
                "-    getDate : function(y, m, d) {",
                "-        var dt = null;",
                "-        if (YAHOO.lang.isUndefined(d)) {",
                "-            d = 1;",
                "-        }",
                "-        if (y >= 100) {",
                "-            dt = new Date(y, m, d);",
                "-        } else {",
                "-            dt = new Date();",
                "-            dt.setFullYear(y);",
                "-            dt.setMonth(m);",
                "-            dt.setDate(d);",
                "-            dt.setHours(0,0,0,0);",
                "-        }",
                "-        return dt;",
                "-    }",
                "-};",
                "-/**",
                "-* The Calendar component is a UI control that enables users to choose one or more dates from a graphical calendar presented in a one-month or",
                "-* multi-month interface. Calendars are generated entirely via script and can be navigated without any page refreshes.",
                "-* @module    calendar",
                "-* @title    Calendar",
                "-* @namespace  YAHOO.widget",
                "-* @requires  yahoo,dom,event",
                "-*/",
                "-(function(){",
                "-",
                "-    var Dom = YAHOO.util.Dom,",
                "-        Event = YAHOO.util.Event,",
                "-        Lang = YAHOO.lang,",
                "-        DateMath = YAHOO.widget.DateMath;",
                "-",
                "-/**",
                "-* Calendar is the base class for the Calendar widget. In its most basic",
                "-* implementation, it has the ability to render a calendar widget on the page",
                "-* that can be manipulated to select a single date, move back and forth between",
                "-* months and years.",
                "-* <p>To construct the placeholder for the calendar widget, the code is as",
                "-* follows:",
                "-*   <xmp>",
                "-*       <div id=\"calContainer\"></div>",
                "-*   </xmp>",
                "-* </p>",
                "-* <p>",
                "-* <strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>",
                "-* The Calendar can be constructed by simply providing a container ID string, ",
                "-* or a reference to a container DIV HTMLElement (the element needs to exist ",
                "-* in the document).",
                "-* ",
                "-* E.g.:",
                "-*   <xmp>",
                "-*       var c = new YAHOO.widget.Calendar(\"calContainer\", configOptions);",
                "-*   </xmp>",
                "-* or:",
                "-*   <xmp>",
                "-*       var containerDiv = YAHOO.util.Dom.get(\"calContainer\");",
                "-*       var c = new YAHOO.widget.Calendar(containerDiv, configOptions);",
                "-*   </xmp>",
                "-* </p>",
                "-* <p>",
                "-* If not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.",
                "-* For example if an ID is not provided, and the container's ID is \"calContainer\", the Calendar's ID will be set to \"calContainer_t\".",
                "-* </p>",
                "-* ",
                "-* @namespace YAHOO.widget",
                "-* @class Calendar",
                "-* @constructor",
                "-* @param {String} id optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional.",
                "-* @param {String | HTMLElement} container The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document.",
                "-* @param {Object} config optional The configuration object containing the initial configuration values for the Calendar.",
                "-*/",
                "-function Calendar(id, containerId, config) {",
                "-    this.init.apply(this, arguments);",
                "-}",
                "-",
                "-/**",
                "-* The path to be used for images loaded for the Calendar",
                "-* @property YAHOO.widget.Calendar.IMG_ROOT",
                "-* @static",
                "-* @deprecated   You can now customize images by overriding the calclose, calnavleft and calnavright default CSS classes for the close icon, left arrow and right arrow respectively",
                "-* @type String",
                "-*/",
                "-Calendar.IMG_ROOT = null;",
                "-",
                "-/**",
                "-* Type constant used for renderers to represent an individual date (M/D/Y)",
                "-* @property YAHOO.widget.Calendar.DATE",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.DATE = \"D\";",
                "-",
                "-/**",
                "-* Type constant used for renderers to represent an individual date across any year (M/D)",
                "-* @property YAHOO.widget.Calendar.MONTH_DAY",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.MONTH_DAY = \"MD\";",
                "-",
                "-/**",
                "-* Type constant used for renderers to represent a weekday",
                "-* @property YAHOO.widget.Calendar.WEEKDAY",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.WEEKDAY = \"WD\";",
                "-",
                "-/**",
                "-* Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)",
                "-* @property YAHOO.widget.Calendar.RANGE",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.RANGE = \"R\";",
                "-",
                "-/**",
                "-* Type constant used for renderers to represent a month across any year",
                "-* @property YAHOO.widget.Calendar.MONTH",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.MONTH = \"M\";",
                "-",
                "-/**",
                "-* Constant that represents the total number of date cells that are displayed in a given month",
                "-* @property YAHOO.widget.Calendar.DISPLAY_DAYS",
                "-* @static",
                "-* @final",
                "-* @type Number",
                "-*/",
                "-Calendar.DISPLAY_DAYS = 42;",
                "-",
                "-/**",
                "-* Constant used for halting the execution of the remainder of the render stack",
                "-* @property YAHOO.widget.Calendar.STOP_RENDER",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.STOP_RENDER = \"S\";",
                "-",
                "-/**",
                "-* Constant used to represent short date field string formats (e.g. Tu or Feb)",
                "-* @property YAHOO.widget.Calendar.SHORT",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.SHORT = \"short\";",
                "-",
                "-/**",
                "-* Constant used to represent long date field string formats (e.g. Monday or February)",
                "-* @property YAHOO.widget.Calendar.LONG",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.LONG = \"long\";",
                "-",
                "-/**",
                "-* Constant used to represent medium date field string formats (e.g. Mon)",
                "-* @property YAHOO.widget.Calendar.MEDIUM",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.MEDIUM = \"medium\";",
                "-",
                "-/**",
                "-* Constant used to represent single character date field string formats (e.g. M, T, W)",
                "-* @property YAHOO.widget.Calendar.ONE_CHAR",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-Calendar.ONE_CHAR = \"1char\";",
                "-",
                "-/**",
                "-* The set of default Config property keys and values for the Calendar.",
                "-*",
                "-* <p>",
                "-* NOTE: This property is made public in order to allow users to change ",
                "-* the default values of configuration properties. Users should not ",
                "-* modify the key string, unless they are overriding the Calendar implementation",
                "-* </p>",
                "-*",
                "-* <p>",
                "-* The property is an object with key/value pairs, the key being the ",
                "-* uppercase configuration property name and the value being an object ",
                "-* literal with a key string property, and a value property, specifying the ",
                "-* default value of the property. To override a default value, you can set",
                "-* the value property, for example, <code>YAHOO.widget.Calendar.DEFAULT_CONFIG.MULTI_SELECT.value = true;</code>",
                "-* ",
                "-* @property YAHOO.widget.Calendar.DEFAULT_CONFIG",
                "-* @static",
                "-* @type Object",
                "-*/",
                "-",
                "-Calendar.DEFAULT_CONFIG = {",
                "-    YEAR_OFFSET : {key:\"year_offset\", value:0, supercedes:[\"pagedate\", \"selected\", \"mindate\",\"maxdate\"]},",
                "-    TODAY : {key:\"today\", value:new Date(), supercedes:[\"pagedate\"]}, ",
                "-    PAGEDATE : {key:\"pagedate\", value:null},",
                "-    SELECTED : {key:\"selected\", value:[]},",
                "-    TITLE : {key:\"title\", value:\"\"},",
                "-    CLOSE : {key:\"close\", value:false},",
                "-    IFRAME : {key:\"iframe\", value:(YAHOO.env.ua.ie && YAHOO.env.ua.ie <= 6) ? true : false},",
                "-    MINDATE : {key:\"mindate\", value:null},",
                "-    MAXDATE : {key:\"maxdate\", value:null},",
                "-    MULTI_SELECT : {key:\"multi_select\", value:false},",
                "-    OOM_SELECT : {key:\"oom_select\", value:false},",
                "-    START_WEEKDAY : {key:\"start_weekday\", value:0},",
                "-    SHOW_WEEKDAYS : {key:\"show_weekdays\", value:true},",
                "-    SHOW_WEEK_HEADER : {key:\"show_week_header\", value:false},",
                "-    SHOW_WEEK_FOOTER : {key:\"show_week_footer\", value:false},",
                "-    HIDE_BLANK_WEEKS : {key:\"hide_blank_weeks\", value:false},",
                "-    NAV_ARROW_LEFT: {key:\"nav_arrow_left\", value:null} ,",
                "-    NAV_ARROW_RIGHT : {key:\"nav_arrow_right\", value:null} ,",
                "-    MONTHS_SHORT : {key:\"months_short\", value:[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]},",
                "-    MONTHS_LONG: {key:\"months_long\", value:[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]},",
                "-    WEEKDAYS_1CHAR: {key:\"weekdays_1char\", value:[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]},",
                "-    WEEKDAYS_SHORT: {key:\"weekdays_short\", value:[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]},",
                "-    WEEKDAYS_MEDIUM: {key:\"weekdays_medium\", value:[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]},",
                "-    WEEKDAYS_LONG: {key:\"weekdays_long\", value:[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]},",
                "-    LOCALE_MONTHS:{key:\"locale_months\", value:\"long\"},",
                "-    LOCALE_WEEKDAYS:{key:\"locale_weekdays\", value:\"short\"},",
                "-    DATE_DELIMITER:{key:\"date_delimiter\", value:\",\"},",
                "-    DATE_FIELD_DELIMITER:{key:\"date_field_delimiter\", value:\"/\"},",
                "-    DATE_RANGE_DELIMITER:{key:\"date_range_delimiter\", value:\"-\"},",
                "-    MY_MONTH_POSITION:{key:\"my_month_position\", value:1},",
                "-    MY_YEAR_POSITION:{key:\"my_year_position\", value:2},",
                "-    MD_MONTH_POSITION:{key:\"md_month_position\", value:1},",
                "-    MD_DAY_POSITION:{key:\"md_day_position\", value:2},",
                "-    MDY_MONTH_POSITION:{key:\"mdy_month_position\", value:1},",
                "-    MDY_DAY_POSITION:{key:\"mdy_day_position\", value:2},",
                "-    MDY_YEAR_POSITION:{key:\"mdy_year_position\", value:3},",
                "-    MY_LABEL_MONTH_POSITION:{key:\"my_label_month_position\", value:1},",
                "-    MY_LABEL_YEAR_POSITION:{key:\"my_label_year_position\", value:2},",
                "-    MY_LABEL_MONTH_SUFFIX:{key:\"my_label_month_suffix\", value:\" \"},",
                "-    MY_LABEL_YEAR_SUFFIX:{key:\"my_label_year_suffix\", value:\"\"},",
                "-    NAV: {key:\"navigator\", value: null},",
                "-    STRINGS : { ",
                "-        key:\"strings\",",
                "-        value: {",
                "-            previousMonth : \"Previous Month\",",
                "-            nextMonth : \"Next Month\",",
                "-            close: \"Close\"",
                "-        },",
                "-        supercedes : [\"close\", \"title\"]",
                "-    }",
                "-};",
                "-",
                "-/**",
                "-* The set of default Config property keys and values for the Calendar",
                "-* @property YAHOO.widget.Calendar._DEFAULT_CONFIG",
                "-* @deprecated Made public. See the public DEFAULT_CONFIG property for details",
                "-* @final",
                "-* @static",
                "-* @private",
                "-* @type Object",
                "-*/",
                "-Calendar._DEFAULT_CONFIG = Calendar.DEFAULT_CONFIG;",
                "-",
                "-var DEF_CFG = Calendar.DEFAULT_CONFIG;",
                "-",
                "-/**",
                "-* The set of Custom Event types supported by the Calendar",
                "-* @property YAHOO.widget.Calendar._EVENT_TYPES",
                "-* @final",
                "-* @static",
                "-* @private",
                "-* @type Object",
                "-*/",
                "-Calendar._EVENT_TYPES = {",
                "-    BEFORE_SELECT : \"beforeSelect\", ",
                "-    SELECT : \"select\",",
                "-    BEFORE_DESELECT : \"beforeDeselect\",",
                "-    DESELECT : \"deselect\",",
                "-    CHANGE_PAGE : \"changePage\",",
                "-    BEFORE_RENDER : \"beforeRender\",",
                "-    RENDER : \"render\",",
                "-    BEFORE_DESTROY : \"beforeDestroy\",",
                "-    DESTROY : \"destroy\",",
                "-    RESET : \"reset\",",
                "-    CLEAR : \"clear\",",
                "-    BEFORE_HIDE : \"beforeHide\",",
                "-    HIDE : \"hide\",",
                "-    BEFORE_SHOW : \"beforeShow\",",
                "-    SHOW : \"show\",",
                "-    BEFORE_HIDE_NAV : \"beforeHideNav\",",
                "-    HIDE_NAV : \"hideNav\",",
                "-    BEFORE_SHOW_NAV : \"beforeShowNav\",",
                "-    SHOW_NAV : \"showNav\",",
                "-    BEFORE_RENDER_NAV : \"beforeRenderNav\",",
                "-    RENDER_NAV : \"renderNav\"",
                "-};",
                "-",
                "-/**",
                "-* The set of default style constants for the Calendar",
                "-* @property YAHOO.widget.Calendar.STYLES",
                "-* @static",
                "-* @type Object An object with name/value pairs for the class name identifier/value.",
                "-*/",
                "-Calendar.STYLES = {",
                "-    CSS_ROW_HEADER: \"calrowhead\",",
                "-    CSS_ROW_FOOTER: \"calrowfoot\",",
                "-    CSS_CELL : \"calcell\",",
                "-    CSS_CELL_SELECTOR : \"selector\",",
                "-    CSS_CELL_SELECTED : \"selected\",",
                "-    CSS_CELL_SELECTABLE : \"selectable\",",
                "-    CSS_CELL_RESTRICTED : \"restricted\",",
                "-    CSS_CELL_TODAY : \"today\",",
                "-    CSS_CELL_OOM : \"oom\",",
                "-    CSS_CELL_OOB : \"previous\",",
                "-    CSS_HEADER : \"calheader\",",
                "-    CSS_HEADER_TEXT : \"calhead\",",
                "-    CSS_BODY : \"calbody\",",
                "-    CSS_WEEKDAY_CELL : \"calweekdaycell\",",
                "-    CSS_WEEKDAY_ROW : \"calweekdayrow\",",
                "-    CSS_FOOTER : \"calfoot\",",
                "-    CSS_CALENDAR : \"yui-calendar\",",
                "-    CSS_SINGLE : \"single\",",
                "-    CSS_CONTAINER : \"yui-calcontainer\",",
                "-    CSS_NAV_LEFT : \"calnavleft\",",
                "-    CSS_NAV_RIGHT : \"calnavright\",",
                "-    CSS_NAV : \"calnav\",",
                "-    CSS_CLOSE : \"calclose\",",
                "-    CSS_CELL_TOP : \"calcelltop\",",
                "-    CSS_CELL_LEFT : \"calcellleft\",",
                "-    CSS_CELL_RIGHT : \"calcellright\",",
                "-    CSS_CELL_BOTTOM : \"calcellbottom\",",
                "-    CSS_CELL_HOVER : \"calcellhover\",",
                "-    CSS_CELL_HIGHLIGHT1 : \"highlight1\",",
                "-    CSS_CELL_HIGHLIGHT2 : \"highlight2\",",
                "-    CSS_CELL_HIGHLIGHT3 : \"highlight3\",",
                "-    CSS_CELL_HIGHLIGHT4 : \"highlight4\",",
                "-    CSS_WITH_TITLE: \"withtitle\",",
                "-    CSS_FIXED_SIZE: \"fixedsize\",",
                "-    CSS_LINK_CLOSE: \"link-close\"",
                "-};",
                "-",
                "-/**",
                "-* The set of default style constants for the Calendar",
                "-* @property YAHOO.widget.Calendar._STYLES",
                "-* @deprecated Made public. See the public STYLES property for details",
                "-* @final",
                "-* @static",
                "-* @private",
                "-* @type Object",
                "-*/",
                "-Calendar._STYLES = Calendar.STYLES;",
                "-",
                "-Calendar.prototype = {",
                "-",
                "-    /**",
                "-    * The configuration object used to set up the calendars various locale and style options.",
                "-    * @property Config",
                "-    * @private",
                "-    * @deprecated Configuration properties should be set by calling Calendar.cfg.setProperty.",
                "-    * @type Object",
                "-    */",
                "-    Config : null,",
                "-",
                "-    /**",
                "-    * The parent CalendarGroup, only to be set explicitly by the parent group",
                "-    * @property parent",
                "-    * @type CalendarGroup",
                "-    */ ",
                "-    parent : null,",
                "-",
                "-    /**",
                "-    * The index of this item in the parent group",
                "-    * @property index",
                "-    * @type Number",
                "-    */",
                "-    index : -1,",
                "-",
                "-    /**",
                "-    * The collection of calendar table cells",
                "-    * @property cells",
                "-    * @type HTMLTableCellElement[]",
                "-    */",
                "-    cells : null,",
                "-",
                "-    /**",
                "-    * The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D].",
                "-    * @property cellDates",
                "-    * @type Array[](Number[])",
                "-    */",
                "-    cellDates : null,",
                "-",
                "-    /**",
                "-    * The id that uniquely identifies this Calendar.",
                "-    * @property id",
                "-    * @type String",
                "-    */",
                "-    id : null,",
                "-",
                "-    /**",
                "-    * The unique id associated with the Calendar's container",
                "-    * @property containerId",
                "-    * @type String",
                "-    */",
                "-    containerId: null,",
                "-",
                "-    /**",
                "-    * The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered.",
                "-    * @property oDomContainer",
                "-    * @type HTMLElement",
                "-    */",
                "-    oDomContainer : null,",
                "-",
                "-    /**",
                "-    * A Date object representing today's date.",
                "-    * @deprecated Use the \"today\" configuration property",
                "-    * @property today",
                "-    * @type Date",
                "-    */",
                "-    today : null,",
                "-",
                "-    /**",
                "-    * The list of render functions, along with required parameters, used to render cells. ",
                "-    * @property renderStack",
                "-    * @type Array[]",
                "-    */",
                "-    renderStack : null,",
                "-",
                "-    /**",
                "-    * A copy of the initial render functions created before rendering.",
                "-    * @property _renderStack",
                "-    * @private",
                "-    * @type Array",
                "-    */",
                "-    _renderStack : null,",
                "-",
                "-    /**",
                "-    * A reference to the CalendarNavigator instance created for this Calendar.",
                "-    * Will be null if the \"navigator\" configuration property has not been set",
                "-    * @property oNavigator",
                "-    * @type CalendarNavigator",
                "-    */",
                "-    oNavigator : null,",
                "-",
                "-    /**",
                "-    * The private list of initially selected dates.",
                "-    * @property _selectedDates",
                "-    * @private",
                "-    * @type Array",
                "-    */",
                "-    _selectedDates : null,",
                "-",
                "-    /**",
                "-    * A map of DOM event handlers to attach to cells associated with specific CSS class names",
                "-    * @property domEventMap",
                "-    * @type Object",
                "-    */",
                "-    domEventMap : null,",
                "-",
                "-    /**",
                "-     * Protected helper used to parse Calendar constructor/init arguments.",
                "-     *",
                "-     * As of 2.4.0, Calendar supports a simpler constructor ",
                "-     * signature. This method reconciles arguments",
                "-     * received in the pre 2.4.0 and 2.4.0 formats.",
                "-     * ",
                "-     * @protected",
                "-     * @method _parseArgs",
                "-     * @param {Array} Function \"arguments\" array",
                "-     * @return {Object} Object with id, container, config properties containing",
                "-     * the reconciled argument values.",
                "-     **/",
                "-    _parseArgs : function(args) {",
                "-        /*",
                "-           2.4.0 Constructors signatures",
                "-",
                "-           new Calendar(String)",
                "-           new Calendar(HTMLElement)",
                "-           new Calendar(String, ConfigObject)",
                "-           new Calendar(HTMLElement, ConfigObject)",
                "-",
                "-           Pre 2.4.0 Constructor signatures",
                "-",
                "-           new Calendar(String, String)",
                "-           new Calendar(String, HTMLElement)",
                "-           new Calendar(String, String, ConfigObject)",
                "-           new Calendar(String, HTMLElement, ConfigObject)",
                "-         */",
                "-        var nArgs = {id:null, container:null, config:null};",
                "-",
                "-        if (args && args.length && args.length > 0) {",
                "-            switch (args.length) {",
                "-                case 1:",
                "-                    nArgs.id = null;",
                "-                    nArgs.container = args[0];",
                "-                    nArgs.config = null;",
                "-                    break;",
                "-                case 2:",
                "-                    if (Lang.isObject(args[1]) && !args[1].tagName && !(args[1] instanceof String)) {",
                "-                        nArgs.id = null;",
                "-                        nArgs.container = args[0];",
                "-                        nArgs.config = args[1];",
                "-                    } else {",
                "-                        nArgs.id = args[0];",
                "-                        nArgs.container = args[1];",
                "-                        nArgs.config = null;",
                "-                    }",
                "-                    break;",
                "-                default: // 3+",
                "-                    nArgs.id = args[0];",
                "-                    nArgs.container = args[1];",
                "-                    nArgs.config = args[2];",
                "-                    break;",
                "-            }",
                "-        } else {",
                "-        }",
                "-        return nArgs;",
                "-    },",
                "-",
                "-    /**",
                "-    * Initializes the Calendar widget.",
                "-    * @method init",
                "-    *",
                "-    * @param {String} id optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional.",
                "-    * @param {String | HTMLElement} container The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document.",
                "-    * @param {Object} config optional The configuration object containing the initial configuration values for the Calendar.",
                "-    */",
                "-    init : function(id, container, config) {",
                "-        // Normalize 2.4.0, pre 2.4.0 args",
                "-        var nArgs = this._parseArgs(arguments);",
                "-",
                "-        id = nArgs.id;",
                "-        container = nArgs.container;",
                "-        config = nArgs.config;",
                "-",
                "-        this.oDomContainer = Dom.get(container);",
                "-",
                "-        this._oDoc = this.oDomContainer.ownerDocument;",
                "-",
                "-        if (!this.oDomContainer.id) {",
                "-            this.oDomContainer.id = Dom.generateId();",
                "-        }",
                "-",
                "-        if (!id) {",
                "-            id = this.oDomContainer.id + \"_t\";",
                "-        }",
                "-",
                "-        this.id = id;",
                "-        this.containerId = this.oDomContainer.id;",
                "-",
                "-        this.initEvents();",
                "-",
                "-        /**",
                "-        * The Config object used to hold the configuration variables for the Calendar",
                "-        * @property cfg",
                "-        * @type YAHOO.util.Config",
                "-        */",
                "-        this.cfg = new YAHOO.util.Config(this);",
                "-",
                "-        /**",
                "-        * The local object which contains the Calendar's options",
                "-        * @property Options",
                "-        * @type Object",
                "-        */",
                "-        this.Options = {};",
                "-",
                "-        /**",
                "-        * The local object which contains the Calendar's locale settings",
                "-        * @property Locale",
                "-        * @type Object",
                "-        */",
                "-        this.Locale = {};",
                "-",
                "-        this.initStyles();",
                "-",
                "-        Dom.addClass(this.oDomContainer, this.Style.CSS_CONTAINER);",
                "-        Dom.addClass(this.oDomContainer, this.Style.CSS_SINGLE);",
                "-",
                "-        this.cellDates = [];",
                "-        this.cells = [];",
                "-        this.renderStack = [];",
                "-        this._renderStack = [];",
                "-",
                "-        this.setupConfig();",
                "-",
                "-        if (config) {",
                "-            this.cfg.applyConfig(config, true);",
                "-        }",
                "-",
                "-        this.cfg.fireQueue();",
                "-",
                "-        this.today = this.cfg.getProperty(\"today\");",
                "-    },",
                "-",
                "-    /**",
                "-    * Default Config listener for the iframe property. If the iframe config property is set to true, ",
                "-    * renders the built-in IFRAME shim if the container is relatively or absolutely positioned.",
                "-    * ",
                "-    * @method configIframe",
                "-    */",
                "-    configIframe : function(type, args, obj) {",
                "-        var useIframe = args[0];",
                "-    ",
                "-        if (!this.parent) {",
                "-            if (Dom.inDocument(this.oDomContainer)) {",
                "-                if (useIframe) {",
                "-                    var pos = Dom.getStyle(this.oDomContainer, \"position\");",
                "-                    ",
                "-                    if (pos == \"absolute\" || pos == \"relative\") {",
                "-                        ",
                "-                        if (!Dom.inDocument(this.iframe)) {",
                "-                            this.iframe = document.createElement(\"iframe\");",
                "-                            this.iframe.src = \"javascript:false;\";",
                "-    ",
                "-                            Dom.setStyle(this.iframe, \"opacity\", \"0\");",
                "-    ",
                "-                            if (YAHOO.env.ua.ie && YAHOO.env.ua.ie <= 6) {",
                "-                                Dom.addClass(this.iframe, this.Style.CSS_FIXED_SIZE);",
                "-                            }",
                "-    ",
                "-                            this.oDomContainer.insertBefore(this.iframe, this.oDomContainer.firstChild);",
                "-                        }",
                "-                    }",
                "-                } else {",
                "-                    if (this.iframe) {",
                "-                        if (this.iframe.parentNode) {",
                "-                            this.iframe.parentNode.removeChild(this.iframe);",
                "-                        }",
                "-                        this.iframe = null;",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Default handler for the \"title\" property",
                "-    * @method configTitle",
                "-    */",
                "-    configTitle : function(type, args, obj) {",
                "-        var title = args[0];",
                "-",
                "-        // \"\" disables title bar",
                "-        if (title) {",
                "-            this.createTitleBar(title);",
                "-        } else {",
                "-            var close = this.cfg.getProperty(DEF_CFG.CLOSE.key);",
                "-            if (!close) {",
                "-                this.removeTitleBar();",
                "-            } else {",
                "-                this.createTitleBar(\"&#160;\");",
                "-            }",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Default handler for the \"close\" property",
                "-    * @method configClose",
                "-    */",
                "-    configClose : function(type, args, obj) {",
                "-        var close = args[0],",
                "-            title = this.cfg.getProperty(DEF_CFG.TITLE.key);",
                "-    ",
                "-        if (close) {",
                "-            if (!title) {",
                "-                this.createTitleBar(\"&#160;\");",
                "-            }",
                "-            this.createCloseButton();",
                "-        } else {",
                "-            this.removeCloseButton();",
                "-            if (!title) {",
                "-                this.removeTitleBar();",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Initializes Calendar's built-in CustomEvents",
                "-    * @method initEvents",
                "-    */",
                "-    initEvents : function() {",
                "-",
                "-        var defEvents = Calendar._EVENT_TYPES,",
                "-            CE = YAHOO.util.CustomEvent,",
                "-            cal = this; // To help with minification",
                "-",
                "-        /**",
                "-        * Fired before a date selection is made",
                "-        * @event beforeSelectEvent",
                "-        */",
                "-        cal.beforeSelectEvent = new CE(defEvents.BEFORE_SELECT); ",
                "-",
                "-        /**",
                "-        * Fired when a date selection is made",
                "-        * @event selectEvent",
                "-        * @param {Array} Array of Date field arrays in the format [YYYY, MM, DD].",
                "-        */",
                "-        cal.selectEvent = new CE(defEvents.SELECT);",
                "-",
                "-        /**",
                "-        * Fired before a date or set of dates is deselected",
                "-        * @event beforeDeselectEvent",
                "-        */",
                "-        cal.beforeDeselectEvent = new CE(defEvents.BEFORE_DESELECT);",
                "-",
                "-        /**",
                "-        * Fired when a date or set of dates is deselected",
                "-        * @event deselectEvent",
                "-        * @param {Array} Array of Date field arrays in the format [YYYY, MM, DD].",
                "-        */",
                "-        cal.deselectEvent = new CE(defEvents.DESELECT);",
                "-    ",
                "-        /**",
                "-        * Fired when the Calendar page is changed",
                "-        * @event changePageEvent",
                "-        * @param {Date} prevDate The date before the page was changed",
                "-        * @param {Date} newDate The date after the page was changed",
                "-        */",
                "-        cal.changePageEvent = new CE(defEvents.CHANGE_PAGE);",
                "-    ",
                "-        /**",
                "-        * Fired before the Calendar is rendered",
                "-        * @event beforeRenderEvent",
                "-        */",
                "-        cal.beforeRenderEvent = new CE(defEvents.BEFORE_RENDER);",
                "-    ",
                "-        /**",
                "-        * Fired when the Calendar is rendered",
                "-        * @event renderEvent",
                "-        */",
                "-        cal.renderEvent = new CE(defEvents.RENDER);",
                "-",
                "-        /**",
                "-        * Fired just before the Calendar is to be destroyed",
                "-        * @event beforeDestroyEvent",
                "-        */",
                "-        cal.beforeDestroyEvent = new CE(defEvents.BEFORE_DESTROY);",
                "-",
                "-        /**",
                "-        * Fired after the Calendar is destroyed. This event should be used",
                "-        * for notification only. When this event is fired, important Calendar instance",
                "-        * properties, dom references and event listeners have already been ",
                "-        * removed/dereferenced, and hence the Calendar instance is not in a usable ",
                "-        * state.",
                "-        *",
                "-        * @event destroyEvent",
                "-        */",
                "-        cal.destroyEvent = new CE(defEvents.DESTROY);",
                "-",
                "-        /**",
                "-        * Fired when the Calendar is reset",
                "-        * @event resetEvent",
                "-        */",
                "-        cal.resetEvent = new CE(defEvents.RESET);",
                "-",
                "-        /**",
                "-        * Fired when the Calendar is cleared",
                "-        * @event clearEvent",
                "-        */",
                "-        cal.clearEvent = new CE(defEvents.CLEAR);",
                "-",
                "-        /**",
                "-        * Fired just before the Calendar is to be shown",
                "-        * @event beforeShowEvent",
                "-        */",
                "-        cal.beforeShowEvent = new CE(defEvents.BEFORE_SHOW);",
                "-",
                "-        /**",
                "-        * Fired after the Calendar is shown",
                "-        * @event showEvent",
                "-        */",
                "-        cal.showEvent = new CE(defEvents.SHOW);",
                "-",
                "-        /**",
                "-        * Fired just before the Calendar is to be hidden",
                "-        * @event beforeHideEvent",
                "-        */",
                "-        cal.beforeHideEvent = new CE(defEvents.BEFORE_HIDE);",
                "-",
                "-        /**",
                "-        * Fired after the Calendar is hidden",
                "-        * @event hideEvent",
                "-        */",
                "-        cal.hideEvent = new CE(defEvents.HIDE);",
                "-",
                "-        /**",
                "-        * Fired just before the CalendarNavigator is to be shown",
                "-        * @event beforeShowNavEvent",
                "-        */",
                "-        cal.beforeShowNavEvent = new CE(defEvents.BEFORE_SHOW_NAV);",
                "-    ",
                "-        /**",
                "-        * Fired after the CalendarNavigator is shown",
                "-        * @event showNavEvent",
                "-        */",
                "-        cal.showNavEvent = new CE(defEvents.SHOW_NAV);",
                "-    ",
                "-        /**",
                "-        * Fired just before the CalendarNavigator is to be hidden",
                "-        * @event beforeHideNavEvent",
                "-        */",
                "-        cal.beforeHideNavEvent = new CE(defEvents.BEFORE_HIDE_NAV);",
                "-    ",
                "-        /**",
                "-        * Fired after the CalendarNavigator is hidden",
                "-        * @event hideNavEvent",
                "-        */",
                "-        cal.hideNavEvent = new CE(defEvents.HIDE_NAV);",
                "-",
                "-        /**",
                "-        * Fired just before the CalendarNavigator is to be rendered",
                "-        * @event beforeRenderNavEvent",
                "-        */",
                "-        cal.beforeRenderNavEvent = new CE(defEvents.BEFORE_RENDER_NAV);",
                "-",
                "-        /**",
                "-        * Fired after the CalendarNavigator is rendered",
                "-        * @event renderNavEvent",
                "-        */",
                "-        cal.renderNavEvent = new CE(defEvents.RENDER_NAV);",
                "-",
                "-        cal.beforeSelectEvent.subscribe(cal.onBeforeSelect, this, true);",
                "-        cal.selectEvent.subscribe(cal.onSelect, this, true);",
                "-        cal.beforeDeselectEvent.subscribe(cal.onBeforeDeselect, this, true);",
                "-        cal.deselectEvent.subscribe(cal.onDeselect, this, true);",
                "-        cal.changePageEvent.subscribe(cal.onChangePage, this, true);",
                "-        cal.renderEvent.subscribe(cal.onRender, this, true);",
                "-        cal.resetEvent.subscribe(cal.onReset, this, true);",
                "-        cal.clearEvent.subscribe(cal.onClear, this, true);",
                "-    },",
                "-",
                "-    /**",
                "-    * The default event handler for clicks on the \"Previous Month\" navigation UI",
                "-    *",
                "-    * @method doPreviousMonthNav",
                "-    * @param {DOMEvent} e The DOM event",
                "-    * @param {Calendar} cal A reference to the calendar",
                "-    */",
                "-    doPreviousMonthNav : function(e, cal) {",
                "-        Event.preventDefault(e);",
                "-        // previousMonth invoked in a timeout, to allow",
                "-        // event to bubble up, with correct target. Calling",
                "-        // previousMonth, will call render which will remove ",
                "-        // HTML which generated the event, resulting in an ",
                "-        // invalid event target in certain browsers.",
                "-        setTimeout(function() {",
                "-            cal.previousMonth();",
                "-            var navs = Dom.getElementsByClassName(cal.Style.CSS_NAV_LEFT, \"a\", cal.oDomContainer);",
                "-            if (navs && navs[0]) {",
                "-                try {",
                "-                    navs[0].focus();",
                "-                } catch (ex) {",
                "-                    // ignore",
                "-                }",
                "-            }",
                "-        }, 0);",
                "-    },",
                "-",
                "-    /**",
                "-     * The default event handler for clicks on the \"Next Month\" navigation UI",
                "-     *",
                "-     * @method doNextMonthNav",
                "-     * @param {DOMEvent} e The DOM event",
                "-     * @param {Calendar} cal A reference to the calendar",
                "-     */",
                "-    doNextMonthNav : function(e, cal) {",
                "-        Event.preventDefault(e);",
                "-        setTimeout(function() {",
                "-            cal.nextMonth();",
                "-            var navs = Dom.getElementsByClassName(cal.Style.CSS_NAV_RIGHT, \"a\", cal.oDomContainer);",
                "-            if (navs && navs[0]) {",
                "-                try {",
                "-                    navs[0].focus();",
                "-                } catch (ex) {",
                "-                    // ignore",
                "-                }",
                "-            }",
                "-        }, 0);",
                "-    },",
                "-",
                "-    /**",
                "-    * The default event handler for date cell selection. Currently attached to ",
                "-    * the Calendar's bounding box, referenced by it's <a href=\"#property_oDomContainer\">oDomContainer</a> property.",
                "-    *",
                "-    * @method doSelectCell",
                "-    * @param {DOMEvent} e The DOM event",
                "-    * @param {Calendar} cal A reference to the calendar",
                "-    */",
                "-    doSelectCell : function(e, cal) {",
                "-        var cell, d, date, index;",
                "-",
                "-        var target = Event.getTarget(e),",
                "-            tagName = target.tagName.toLowerCase(),",
                "-            defSelector = false;",
                "-",
                "-        while (tagName != \"td\" && !Dom.hasClass(target, cal.Style.CSS_CELL_SELECTABLE)) {",
                "-",
                "-            if (!defSelector && tagName == \"a\" && Dom.hasClass(target, cal.Style.CSS_CELL_SELECTOR)) {",
                "-                defSelector = true;",
                "-            }",
                "-",
                "-            target = target.parentNode;",
                "-            tagName = target.tagName.toLowerCase();",
                "-",
                "-            if (target == this.oDomContainer || tagName == \"html\") {",
                "-                return;",
                "-            }",
                "-        }",
                "-",
                "-        if (defSelector) {",
                "-            // Stop link href navigation for default renderer",
                "-            Event.preventDefault(e);",
                "-        }",
                "-    ",
                "-        cell = target;",
                "-",
                "-        if (Dom.hasClass(cell, cal.Style.CSS_CELL_SELECTABLE)) {",
                "-            index = cal.getIndexFromId(cell.id);",
                "-            if (index > -1) {",
                "-                d = cal.cellDates[index];",
                "-                if (d) {",
                "-                    date = DateMath.getDate(d[0],d[1]-1,d[2]);",
                "-                ",
                "-                    var link;",
                "-",
                "-                    if (cal.Options.MULTI_SELECT) {",
                "-                        link = cell.getElementsByTagName(\"a\")[0];",
                "-                        if (link) {",
                "-                            link.blur();",
                "-                        }",
                "-",
                "-                        var cellDate = cal.cellDates[index];",
                "-                        var cellDateIndex = cal._indexOfSelectedFieldArray(cellDate);",
                "-",
                "-                        if (cellDateIndex > -1) { ",
                "-                            cal.deselectCell(index);",
                "-                        } else {",
                "-                            cal.selectCell(index);",
                "-                        }",
                "-",
                "-                    } else {",
                "-                        link = cell.getElementsByTagName(\"a\")[0];",
                "-                        if (link) {",
                "-                            link.blur();",
                "-                        }",
                "-                        cal.selectCell(index);",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * The event that is executed when the user hovers over a cell",
                "-    * @method doCellMouseOver",
                "-    * @param {DOMEvent} e The event",
                "-    * @param {Calendar} cal A reference to the calendar passed by the Event utility",
                "-    */",
                "-    doCellMouseOver : function(e, cal) {",
                "-        var target;",
                "-        if (e) {",
                "-            target = Event.getTarget(e);",
                "-        } else {",
                "-            target = this;",
                "-        }",
                "-",
                "-        while (target.tagName && target.tagName.toLowerCase() != \"td\") {",
                "-            target = target.parentNode;",
                "-            if (!target.tagName || target.tagName.toLowerCase() == \"html\") {",
                "-                return;",
                "-            }",
                "-        }",
                "-",
                "-        if (Dom.hasClass(target, cal.Style.CSS_CELL_SELECTABLE)) {",
                "-            Dom.addClass(target, cal.Style.CSS_CELL_HOVER);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * The event that is executed when the user moves the mouse out of a cell",
                "-    * @method doCellMouseOut",
                "-    * @param {DOMEvent} e The event",
                "-    * @param {Calendar} cal A reference to the calendar passed by the Event utility",
                "-    */",
                "-    doCellMouseOut : function(e, cal) {",
                "-        var target;",
                "-        if (e) {",
                "-            target = Event.getTarget(e);",
                "-        } else {",
                "-            target = this;",
                "-        }",
                "-",
                "-        while (target.tagName && target.tagName.toLowerCase() != \"td\") {",
                "-            target = target.parentNode;",
                "-            if (!target.tagName || target.tagName.toLowerCase() == \"html\") {",
                "-                return;",
                "-            }",
                "-        }",
                "-",
                "-        if (Dom.hasClass(target, cal.Style.CSS_CELL_SELECTABLE)) {",
                "-            Dom.removeClass(target, cal.Style.CSS_CELL_HOVER);",
                "-        }",
                "-    },",
                "-",
                "-    setupConfig : function() {",
                "-",
                "-        var cfg = this.cfg;",
                "-",
                "-        /**",
                "-        * The date to use to represent \"Today\".",
                "-        *",
                "-        * @config today",
                "-        * @type Date",
                "-        * @default The client side date (new Date()) when the Calendar is instantiated.",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.TODAY.key, { value: new Date(DEF_CFG.TODAY.value.getTime()), supercedes:DEF_CFG.TODAY.supercedes, handler:this.configToday, suppressEvent:true } );",
                "-",
                "-        /**",
                "-        * The month/year representing the current visible Calendar date (mm/yyyy)",
                "-        * @config pagedate",
                "-        * @type String | Date",
                "-        * @default Today's date",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.PAGEDATE.key, { value: DEF_CFG.PAGEDATE.value || new Date(DEF_CFG.TODAY.value.getTime()), handler:this.configPageDate } );",
                "-",
                "-        /**",
                "-        * The date or range of dates representing the current Calendar selection",
                "-        * @config selected",
                "-        * @type String",
                "-        * @default []",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.SELECTED.key, { value:DEF_CFG.SELECTED.value.concat(), handler:this.configSelected } );",
                "-",
                "-        /**",
                "-        * The title to display above the Calendar's month header. The title is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.   ",
                "-        * @config title",
                "-        * @type HTML",
                "-        * @default \"\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.TITLE.key, { value:DEF_CFG.TITLE.value, handler:this.configTitle } );",
                "-",
                "-        /**",
                "-        * Whether or not a close button should be displayed for this Calendar",
                "-        * @config close",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.CLOSE.key, { value:DEF_CFG.CLOSE.value, handler:this.configClose } );",
                "-",
                "-        /**",
                "-        * Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.",
                "-        * This property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be ",
                "-        * enabled if required.",
                "-        * ",
                "-        * @config iframe",
                "-        * @type Boolean",
                "-        * @default true for IE6 and below, false for all other browsers",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.IFRAME.key, { value:DEF_CFG.IFRAME.value, handler:this.configIframe, validator:cfg.checkBoolean } );",
                "-",
                "-        /**",
                "-        * The minimum selectable date in the current Calendar (mm/dd/yyyy)",
                "-        * @config mindate",
                "-        * @type String | Date",
                "-        * @default null",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MINDATE.key, { value:DEF_CFG.MINDATE.value, handler:this.configMinDate } );",
                "-",
                "-        /**",
                "-        * The maximum selectable date in the current Calendar (mm/dd/yyyy)",
                "-        * @config maxdate",
                "-        * @type String | Date",
                "-        * @default null",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MAXDATE.key, { value:DEF_CFG.MAXDATE.value, handler:this.configMaxDate } );",
                "-",
                "-        // Options properties",
                "-    ",
                "-        /**",
                "-        * True if the Calendar should allow multiple selections. False by default.",
                "-        * @config MULTI_SELECT",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MULTI_SELECT.key, { value:DEF_CFG.MULTI_SELECT.value, handler:this.configOptions, validator:cfg.checkBoolean } );",
                "-",
                "-        /**",
                "-        * True if the Calendar should allow selection of out-of-month dates. False by default.",
                "-        * @config OOM_SELECT",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.OOM_SELECT.key, { value:DEF_CFG.OOM_SELECT.value, handler:this.configOptions, validator:cfg.checkBoolean } );",
                "-",
                "-        /**",
                "-        * The weekday the week begins on. Default is 0 (Sunday = 0, Monday = 1 ... Saturday = 6).",
                "-        * @config START_WEEKDAY",
                "-        * @type number",
                "-        * @default 0",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.START_WEEKDAY.key, { value:DEF_CFG.START_WEEKDAY.value, handler:this.configOptions, validator:cfg.checkNumber  } );",
                "-    ",
                "-        /**",
                "-        * True if the Calendar should show weekday labels. True by default.",
                "-        * @config SHOW_WEEKDAYS",
                "-        * @type Boolean",
                "-        * @default true",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.SHOW_WEEKDAYS.key, { value:DEF_CFG.SHOW_WEEKDAYS.value, handler:this.configOptions, validator:cfg.checkBoolean  } );",
                "-    ",
                "-        /**",
                "-        * True if the Calendar should show week row headers. False by default.",
                "-        * @config SHOW_WEEK_HEADER",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.SHOW_WEEK_HEADER.key, { value:DEF_CFG.SHOW_WEEK_HEADER.value, handler:this.configOptions, validator:cfg.checkBoolean } );",
                "-    ",
                "-        /**",
                "-        * True if the Calendar should show week row footers. False by default.",
                "-        * @config SHOW_WEEK_FOOTER",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.SHOW_WEEK_FOOTER.key,{ value:DEF_CFG.SHOW_WEEK_FOOTER.value, handler:this.configOptions, validator:cfg.checkBoolean } );",
                "-    ",
                "-        /**",
                "-        * True if the Calendar should suppress weeks that are not a part of the current month. False by default.",
                "-        * @config HIDE_BLANK_WEEKS",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.HIDE_BLANK_WEEKS.key, { value:DEF_CFG.HIDE_BLANK_WEEKS.value, handler:this.configOptions, validator:cfg.checkBoolean } );",
                "-        ",
                "-        /**",
                "-        * The image URL that should be used for the left navigation arrow. The image URL is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config NAV_ARROW_LEFT",
                "-        * @type String",
                "-        * @deprecated You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"  ",
                "-        * @default null",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.NAV_ARROW_LEFT.key, { value:DEF_CFG.NAV_ARROW_LEFT.value, handler:this.configOptions } );",
                "-    ",
                "-        /**",
                "-        * The image URL that should be used for the right navigation arrow. The image URL is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config NAV_ARROW_RIGHT",
                "-        * @type String",
                "-        * @deprecated You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"",
                "-        * @default null",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.NAV_ARROW_RIGHT.key, { value:DEF_CFG.NAV_ARROW_RIGHT.value, handler:this.configOptions } );",
                "-    ",
                "-        // Locale properties",
                "-    ",
                "-        /**",
                "-        * The short month labels for the current locale. The month labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config MONTHS_SHORT",
                "-        * @type HTML[]",
                "-        * @default [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MONTHS_SHORT.key, { value:DEF_CFG.MONTHS_SHORT.value, handler:this.configLocale } );",
                "-",
                "-        /**",
                "-        * The long month labels for the current locale. The month labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config MONTHS_LONG",
                "-        * @type HTML[]",
                "-        * @default [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MONTHS_LONG.key,  { value:DEF_CFG.MONTHS_LONG.value, handler:this.configLocale } );",
                "-",
                "-        /**",
                "-        * The 1-character weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_1CHAR",
                "-        * @type HTML[]",
                "-        * @default [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_1CHAR.key, { value:DEF_CFG.WEEKDAYS_1CHAR.value, handler:this.configLocale } );",
                "-        ",
                "-        /**",
                "-        * The short weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_SHORT",
                "-        * @type HTML[]",
                "-        * @default [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_SHORT.key, { value:DEF_CFG.WEEKDAYS_SHORT.value, handler:this.configLocale } );",
                "-        ",
                "-        /**",
                "-        * The medium weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_MEDIUM",
                "-        * @type HTML[]",
                "-        * @default [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_MEDIUM.key, { value:DEF_CFG.WEEKDAYS_MEDIUM.value, handler:this.configLocale } );",
                "-        ",
                "-        /**",
                "-        * The long weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_LONG",
                "-        * @type HTML[]",
                "-        * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_LONG.key, { value:DEF_CFG.WEEKDAYS_LONG.value, handler:this.configLocale } );",
                "-",
                "-        /**",
                "-        * Refreshes the locale values used to build the Calendar.",
                "-        * @method refreshLocale",
                "-        * @private",
                "-        */",
                "-        var refreshLocale = function() {",
                "-            cfg.refireEvent(DEF_CFG.LOCALE_MONTHS.key);",
                "-            cfg.refireEvent(DEF_CFG.LOCALE_WEEKDAYS.key);",
                "-        };",
                "-    ",
                "-        cfg.subscribeToConfigEvent(DEF_CFG.START_WEEKDAY.key, refreshLocale, this, true);",
                "-        cfg.subscribeToConfigEvent(DEF_CFG.MONTHS_SHORT.key, refreshLocale, this, true);",
                "-        cfg.subscribeToConfigEvent(DEF_CFG.MONTHS_LONG.key, refreshLocale, this, true);",
                "-        cfg.subscribeToConfigEvent(DEF_CFG.WEEKDAYS_1CHAR.key, refreshLocale, this, true);",
                "-        cfg.subscribeToConfigEvent(DEF_CFG.WEEKDAYS_SHORT.key, refreshLocale, this, true);",
                "-        cfg.subscribeToConfigEvent(DEF_CFG.WEEKDAYS_MEDIUM.key, refreshLocale, this, true);",
                "-        cfg.subscribeToConfigEvent(DEF_CFG.WEEKDAYS_LONG.key, refreshLocale, this, true);",
                "-       ",
                "-        /**",
                "-        * The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".",
                "-        * @config LOCALE_MONTHS",
                "-        * @type String",
                "-        * @default \"long\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.LOCALE_MONTHS.key, { value:DEF_CFG.LOCALE_MONTHS.value, handler:this.configLocaleValues } );",
                "-        ",
                "-        /**",
                "-        * The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".",
                "-        * @config LOCALE_WEEKDAYS",
                "-        * @type String",
                "-        * @default \"short\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.LOCALE_WEEKDAYS.key, { value:DEF_CFG.LOCALE_WEEKDAYS.value, handler:this.configLocaleValues } );",
                "-",
                "-        /**",
                "-        * The positive or negative year offset from the Gregorian calendar year (assuming a January 1st rollover) to ",
                "-        * be used when displaying and parsing dates. NOTE: All JS Date objects returned by methods, or expected as input by",
                "-        * methods will always represent the Gregorian year, in order to maintain date/month/week values. ",
                "-        *",
                "-        * @config YEAR_OFFSET",
                "-        * @type Number",
                "-        * @default 0",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.YEAR_OFFSET.key, { value:DEF_CFG.YEAR_OFFSET.value, supercedes:DEF_CFG.YEAR_OFFSET.supercedes, handler:this.configLocale  } );",
                "-    ",
                "-        /**",
                "-        * The value used to delimit individual dates in a date string passed to various Calendar functions.",
                "-        * @config DATE_DELIMITER",
                "-        * @type String",
                "-        * @default \",\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.DATE_DELIMITER.key,  { value:DEF_CFG.DATE_DELIMITER.value, handler:this.configLocale } );",
                "-    ",
                "-        /**",
                "-        * The value used to delimit date fields in a date string passed to various Calendar functions.",
                "-        * @config DATE_FIELD_DELIMITER",
                "-        * @type String",
                "-        * @default \"/\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.DATE_FIELD_DELIMITER.key, { value:DEF_CFG.DATE_FIELD_DELIMITER.value, handler:this.configLocale } );",
                "-    ",
                "-        /**",
                "-        * The value used to delimit date ranges in a date string passed to various Calendar functions.",
                "-        * @config DATE_RANGE_DELIMITER",
                "-        * @type String",
                "-        * @default \"-\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.DATE_RANGE_DELIMITER.key, { value:DEF_CFG.DATE_RANGE_DELIMITER.value, handler:this.configLocale } );",
                "-    ",
                "-        /**",
                "-        * The position of the month in a month/year date string",
                "-        * @config MY_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_MONTH_POSITION.key, { value:DEF_CFG.MY_MONTH_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the year in a month/year date string",
                "-        * @config MY_YEAR_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_YEAR_POSITION.key, { value:DEF_CFG.MY_YEAR_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the month in a month/day date string",
                "-        * @config MD_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MD_MONTH_POSITION.key, { value:DEF_CFG.MD_MONTH_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the day in a month/year date string",
                "-        * @config MD_DAY_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MD_DAY_POSITION.key,  { value:DEF_CFG.MD_DAY_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the month in a month/day/year date string",
                "-        * @config MDY_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MDY_MONTH_POSITION.key, { value:DEF_CFG.MDY_MONTH_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the day in a month/day/year date string",
                "-        * @config MDY_DAY_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MDY_DAY_POSITION.key, { value:DEF_CFG.MDY_DAY_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the year in a month/day/year date string",
                "-        * @config MDY_YEAR_POSITION",
                "-        * @type Number",
                "-        * @default 3",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MDY_YEAR_POSITION.key, { value:DEF_CFG.MDY_YEAR_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The position of the month in the month year label string used as the Calendar header",
                "-        * @config MY_LABEL_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_MONTH_POSITION.key, { value:DEF_CFG.MY_LABEL_MONTH_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the year in the month year label string used as the Calendar header",
                "-        * @config MY_LABEL_YEAR_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_YEAR_POSITION.key, { value:DEF_CFG.MY_LABEL_YEAR_POSITION.value, handler:this.configLocale, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The suffix used after the month when rendering the Calendar header. The suffix is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config MY_LABEL_MONTH_SUFFIX",
                "-        * @type HTML",
                "-        * @default \" \"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_MONTH_SUFFIX.key, { value:DEF_CFG.MY_LABEL_MONTH_SUFFIX.value, handler:this.configLocale } );",
                "-        ",
                "-        /**",
                "-        * The suffix used after the year when rendering the Calendar header. The suffix is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config MY_LABEL_YEAR_SUFFIX",
                "-        * @type HTML",
                "-        * @default \"\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_YEAR_SUFFIX.key, { value:DEF_CFG.MY_LABEL_YEAR_SUFFIX.value, handler:this.configLocale } );",
                "-",
                "-        /**",
                "-        * Configuration for the Month/Year CalendarNavigator UI which allows the user to jump directly to a ",
                "-        * specific Month/Year without having to scroll sequentially through months.",
                "-        * <p>",
                "-        * Setting this property to null (default value) or false, will disable the CalendarNavigator UI.",
                "-        * </p>",
                "-        * <p>",
                "-        * Setting this property to true will enable the CalendarNavigatior UI with the default CalendarNavigator configuration values.",
                "-        * </p>",
                "-        * <p>",
                "-        * This property can also be set to an object literal containing configuration properties for the CalendarNavigator UI.",
                "-        * The configuration object expects the the following case-sensitive properties, with the \"strings\" property being a nested object.",
                "-        * Any properties which are not provided will use the default values (defined in the CalendarNavigator class).",
                "-        * </p>",
                "-        * <dl>",
                "-        * <dt>strings</dt>",
                "-        * <dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI. The strings are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source. ",
                "-        *     <dl>",
                "-        *         <dt>month</dt><dd><em>HTML</em> : The markup to use for the month label. Defaults to \"Month\".</dd>",
                "-        *         <dt>year</dt><dd><em>HTML</em> : The markup to use for the year label. Defaults to \"Year\".</dd>",
                "-        *         <dt>submit</dt><dd><em>HTML</em> : The markup to use for the submit button label. Defaults to \"Okay\".</dd>",
                "-        *         <dt>cancel</dt><dd><em>HTML</em> : The markup to use for the cancel button label. Defaults to \"Cancel\".</dd>",
                "-        *         <dt>invalidYear</dt><dd><em>HTML</em> : The markup to use for invalid year values. Defaults to \"Year needs to be a number\".</dd>",
                "-        *     </dl>",
                "-        * </dd>",
                "-        * <dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>",
                "-        * <dt>initialFocus</dt><dd><em>String</em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"</dd>",
                "-        * </dl>",
                "-        * <p>E.g.</p>",
                "-        * <pre>",
                "-        * var navConfig = {",
                "-        *   strings: {",
                "-        *    month:\"Calendar Month\",",
                "-        *    year:\"Calendar Year\",",
                "-        *    submit: \"Submit\",",
                "-        *    cancel: \"Cancel\",",
                "-        *    invalidYear: \"Please enter a valid year\"",
                "-        *   },",
                "-        *   monthFormat: YAHOO.widget.Calendar.SHORT,",
                "-        *   initialFocus: \"month\"",
                "-        * }",
                "-        * </pre>",
                "-        * @config navigator",
                "-        * @type {Object|Boolean}",
                "-        * @default null",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.NAV.key, { value:DEF_CFG.NAV.value, handler:this.configNavigator } );",
                "-",
                "-        /**",
                "-         * The map of UI strings which the Calendar UI uses.",
                "-         *",
                "-         * @config strings",
                "-         * @type {Object}",
                "-         * @default An object with the properties shown below:",
                "-         *     <dl>",
                "-         *         <dt>previousMonth</dt><dd><em>HTML</em> : The markup to use for the \"Previous Month\" navigation label. Defaults to \"Previous Month\". The string is added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.</dd>",
                "-         *         <dt>nextMonth</dt><dd><em>HTML</em> : The markup to use for the \"Next Month\" navigation UI. Defaults to \"Next Month\". The string is added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.</dd>",
                "-         *         <dt>close</dt><dd><em>HTML</em> : The markup to use for the close button label. Defaults to \"Close\". The string is added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.</dd>",
                "-         *     </dl>",
                "-         */",
                "-        cfg.addProperty(DEF_CFG.STRINGS.key, { ",
                "-            value:DEF_CFG.STRINGS.value,",
                "-            handler:this.configStrings,",
                "-            validator: function(val) {",
                "-                return Lang.isObject(val);",
                "-            },",
                "-            supercedes:DEF_CFG.STRINGS.supercedes",
                "-        });",
                "-    },",
                "-",
                "-    /**",
                "-    * The default handler for the \"strings\" property",
                "-    * @method configStrings",
                "-    */",
                "-    configStrings : function(type, args, obj) {",
                "-        var val = Lang.merge(DEF_CFG.STRINGS.value, args[0]);",
                "-        this.cfg.setProperty(DEF_CFG.STRINGS.key, val, true);",
                "-    },",
                "-",
                "-    /**",
                "-    * The default handler for the \"pagedate\" property",
                "-    * @method configPageDate",
                "-    */",
                "-    configPageDate : function(type, args, obj) {",
                "-        this.cfg.setProperty(DEF_CFG.PAGEDATE.key, this._parsePageDate(args[0]), true);",
                "-    },",
                "-",
                "-    /**",
                "-    * The default handler for the \"mindate\" property",
                "-    * @method configMinDate",
                "-    */",
                "-    configMinDate : function(type, args, obj) {",
                "-        var val = args[0];",
                "-        if (Lang.isString(val)) {",
                "-            val = this._parseDate(val);",
                "-            this.cfg.setProperty(DEF_CFG.MINDATE.key, DateMath.getDate(val[0],(val[1]-1),val[2]));",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * The default handler for the \"maxdate\" property",
                "-    * @method configMaxDate",
                "-    */",
                "-    configMaxDate : function(type, args, obj) {",
                "-        var val = args[0];",
                "-        if (Lang.isString(val)) {",
                "-            val = this._parseDate(val);",
                "-            this.cfg.setProperty(DEF_CFG.MAXDATE.key, DateMath.getDate(val[0],(val[1]-1),val[2]));",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * The default handler for the \"today\" property",
                "-    * @method configToday",
                "-    */",
                "-    configToday : function(type, args, obj) {",
                "-        // Only do this for initial set. Changing the today property after the initial",
                "-        // set, doesn't affect pagedate",
                "-        var val = args[0];",
                "-        if (Lang.isString(val)) {",
                "-            val = this._parseDate(val);",
                "-        }",
                "-        var today = DateMath.clearTime(val);",
                "-        if (!this.cfg.initialConfig[DEF_CFG.PAGEDATE.key]) {",
                "-            this.cfg.setProperty(DEF_CFG.PAGEDATE.key, today);",
                "-        }",
                "-        this.today = today;",
                "-        this.cfg.setProperty(DEF_CFG.TODAY.key, today, true);",
                "-    },",
                "-",
                "-    /**",
                "-    * The default handler for the \"selected\" property",
                "-    * @method configSelected",
                "-    */",
                "-    configSelected : function(type, args, obj) {",
                "-        var selected = args[0],",
                "-            cfgSelected = DEF_CFG.SELECTED.key;",
                "-        ",
                "-        if (selected) {",
                "-            if (Lang.isString(selected)) {",
                "-                this.cfg.setProperty(cfgSelected, this._parseDates(selected), true);",
                "-            } ",
                "-        }",
                "-        if (! this._selectedDates) {",
                "-            this._selectedDates = this.cfg.getProperty(cfgSelected);",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * The default handler for all configuration options properties",
                "-    * @method configOptions",
                "-    */",
                "-    configOptions : function(type, args, obj) {",
                "-        this.Options[type.toUpperCase()] = args[0];",
                "-    },",
                "-",
                "-    /**",
                "-    * The default handler for all configuration locale properties",
                "-    * @method configLocale",
                "-    */",
                "-    configLocale : function(type, args, obj) {",
                "-        this.Locale[type.toUpperCase()] = args[0];",
                "-",
                "-        this.cfg.refireEvent(DEF_CFG.LOCALE_MONTHS.key);",
                "-        this.cfg.refireEvent(DEF_CFG.LOCALE_WEEKDAYS.key);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * The default handler for all configuration locale field length properties",
                "-    * @method configLocaleValues",
                "-    */",
                "-    configLocaleValues : function(type, args, obj) {",
                "-",
                "-        type = type.toLowerCase();",
                "-",
                "-        var val = args[0],",
                "-            cfg = this.cfg,",
                "-            Locale = this.Locale;",
                "-",
                "-        switch (type) {",
                "-            case DEF_CFG.LOCALE_MONTHS.key:",
                "-                switch (val) {",
                "-                    case Calendar.SHORT:",
                "-                        Locale.LOCALE_MONTHS = cfg.getProperty(DEF_CFG.MONTHS_SHORT.key).concat();",
                "-                        break;",
                "-                    case Calendar.LONG:",
                "-                        Locale.LOCALE_MONTHS = cfg.getProperty(DEF_CFG.MONTHS_LONG.key).concat();",
                "-                        break;",
                "-                }",
                "-                break;",
                "-            case DEF_CFG.LOCALE_WEEKDAYS.key:",
                "-                switch (val) {",
                "-                    case Calendar.ONE_CHAR:",
                "-                        Locale.LOCALE_WEEKDAYS = cfg.getProperty(DEF_CFG.WEEKDAYS_1CHAR.key).concat();",
                "-                        break;",
                "-                    case Calendar.SHORT:",
                "-                        Locale.LOCALE_WEEKDAYS = cfg.getProperty(DEF_CFG.WEEKDAYS_SHORT.key).concat();",
                "-                        break;",
                "-                    case Calendar.MEDIUM:",
                "-                        Locale.LOCALE_WEEKDAYS = cfg.getProperty(DEF_CFG.WEEKDAYS_MEDIUM.key).concat();",
                "-                        break;",
                "-                    case Calendar.LONG:",
                "-                        Locale.LOCALE_WEEKDAYS = cfg.getProperty(DEF_CFG.WEEKDAYS_LONG.key).concat();",
                "-                        break;",
                "-                }",
                "-                ",
                "-                var START_WEEKDAY = cfg.getProperty(DEF_CFG.START_WEEKDAY.key);",
                "-    ",
                "-                if (START_WEEKDAY > 0) {",
                "-                    for (var w=0; w < START_WEEKDAY; ++w) {",
                "-                        Locale.LOCALE_WEEKDAYS.push(Locale.LOCALE_WEEKDAYS.shift());",
                "-                    }",
                "-                }",
                "-                break;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * The default handler for the \"navigator\" property",
                "-     * @method configNavigator",
                "-     */",
                "-    configNavigator : function(type, args, obj) {",
                "-        var val = args[0];",
                "-        if (YAHOO.widget.CalendarNavigator && (val === true || Lang.isObject(val))) {",
                "-            if (!this.oNavigator) {",
                "-                this.oNavigator = new YAHOO.widget.CalendarNavigator(this);",
                "-                // Cleanup DOM Refs/Events before innerHTML is removed.",
                "-                this.beforeRenderEvent.subscribe(function () {",
                "-                    if (!this.pages) {",
                "-                        this.oNavigator.erase();",
                "-                    }",
                "-                }, this, true);",
                "-            }",
                "-        } else {",
                "-            if (this.oNavigator) {",
                "-                this.oNavigator.destroy();",
                "-                this.oNavigator = null;",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Defines the class names used by Calendar when rendering to DOM. NOTE: The class names are added to the DOM as HTML and should be escaped by the implementor if coming from an external source. ",
                "-    * @method initStyles",
                "-    */",
                "-    initStyles : function() {",
                "-",
                "-        var defStyle = Calendar.STYLES;",
                "-",
                "-        this.Style = {",
                "-            /**",
                "-            * @property Style.CSS_ROW_HEADER",
                "-            */",
                "-            CSS_ROW_HEADER: defStyle.CSS_ROW_HEADER,",
                "-            /**",
                "-            * @property Style.CSS_ROW_FOOTER",
                "-            */",
                "-            CSS_ROW_FOOTER: defStyle.CSS_ROW_FOOTER,",
                "-            /**",
                "-            * @property Style.CSS_CELL",
                "-            */",
                "-            CSS_CELL : defStyle.CSS_CELL,",
                "-            /**",
                "-            * @property Style.CSS_CELL_SELECTOR",
                "-            */",
                "-            CSS_CELL_SELECTOR : defStyle.CSS_CELL_SELECTOR,",
                "-            /**",
                "-            * @property Style.CSS_CELL_SELECTED",
                "-            */",
                "-            CSS_CELL_SELECTED : defStyle.CSS_CELL_SELECTED,",
                "-            /**",
                "-            * @property Style.CSS_CELL_SELECTABLE",
                "-            */",
                "-            CSS_CELL_SELECTABLE : defStyle.CSS_CELL_SELECTABLE,",
                "-            /**",
                "-            * @property Style.CSS_CELL_RESTRICTED",
                "-            */",
                "-            CSS_CELL_RESTRICTED : defStyle.CSS_CELL_RESTRICTED,",
                "-            /**",
                "-            * @property Style.CSS_CELL_TODAY",
                "-            */",
                "-            CSS_CELL_TODAY : defStyle.CSS_CELL_TODAY,",
                "-            /**",
                "-            * @property Style.CSS_CELL_OOM",
                "-            */",
                "-            CSS_CELL_OOM : defStyle.CSS_CELL_OOM,",
                "-            /**",
                "-            * @property Style.CSS_CELL_OOB",
                "-            */",
                "-            CSS_CELL_OOB : defStyle.CSS_CELL_OOB,",
                "-            /**",
                "-            * @property Style.CSS_HEADER",
                "-            */",
                "-            CSS_HEADER : defStyle.CSS_HEADER,",
                "-            /**",
                "-            * @property Style.CSS_HEADER_TEXT",
                "-            */",
                "-            CSS_HEADER_TEXT : defStyle.CSS_HEADER_TEXT,",
                "-            /**",
                "-            * @property Style.CSS_BODY",
                "-            */",
                "-            CSS_BODY : defStyle.CSS_BODY,",
                "-            /**",
                "-            * @property Style.CSS_WEEKDAY_CELL",
                "-            */",
                "-            CSS_WEEKDAY_CELL : defStyle.CSS_WEEKDAY_CELL,",
                "-            /**",
                "-            * @property Style.CSS_WEEKDAY_ROW",
                "-            */",
                "-            CSS_WEEKDAY_ROW : defStyle.CSS_WEEKDAY_ROW,",
                "-            /**",
                "-            * @property Style.CSS_FOOTER",
                "-            */",
                "-            CSS_FOOTER : defStyle.CSS_FOOTER,",
                "-            /**",
                "-            * @property Style.CSS_CALENDAR",
                "-            */",
                "-            CSS_CALENDAR : defStyle.CSS_CALENDAR,",
                "-            /**",
                "-            * @property Style.CSS_SINGLE",
                "-            */",
                "-            CSS_SINGLE : defStyle.CSS_SINGLE,",
                "-            /**",
                "-            * @property Style.CSS_CONTAINER",
                "-            */",
                "-            CSS_CONTAINER : defStyle.CSS_CONTAINER,",
                "-            /**",
                "-            * @property Style.CSS_NAV_LEFT",
                "-            */",
                "-            CSS_NAV_LEFT : defStyle.CSS_NAV_LEFT,",
                "-            /**",
                "-            * @property Style.CSS_NAV_RIGHT",
                "-            */",
                "-            CSS_NAV_RIGHT : defStyle.CSS_NAV_RIGHT,",
                "-            /**",
                "-            * @property Style.CSS_NAV",
                "-            */",
                "-            CSS_NAV : defStyle.CSS_NAV,",
                "-            /**",
                "-            * @property Style.CSS_CLOSE",
                "-            */",
                "-            CSS_CLOSE : defStyle.CSS_CLOSE,",
                "-            /**",
                "-            * @property Style.CSS_CELL_TOP",
                "-            */",
                "-            CSS_CELL_TOP : defStyle.CSS_CELL_TOP,",
                "-            /**",
                "-            * @property Style.CSS_CELL_LEFT",
                "-            */",
                "-            CSS_CELL_LEFT : defStyle.CSS_CELL_LEFT,",
                "-            /**",
                "-            * @property Style.CSS_CELL_RIGHT",
                "-            */",
                "-            CSS_CELL_RIGHT : defStyle.CSS_CELL_RIGHT,",
                "-            /**",
                "-            * @property Style.CSS_CELL_BOTTOM",
                "-            */",
                "-            CSS_CELL_BOTTOM : defStyle.CSS_CELL_BOTTOM,",
                "-            /**",
                "-            * @property Style.CSS_CELL_HOVER",
                "-            */",
                "-            CSS_CELL_HOVER : defStyle.CSS_CELL_HOVER,",
                "-            /**",
                "-            * @property Style.CSS_CELL_HIGHLIGHT1",
                "-            */",
                "-            CSS_CELL_HIGHLIGHT1 : defStyle.CSS_CELL_HIGHLIGHT1,",
                "-            /**",
                "-            * @property Style.CSS_CELL_HIGHLIGHT2",
                "-            */",
                "-            CSS_CELL_HIGHLIGHT2 : defStyle.CSS_CELL_HIGHLIGHT2,",
                "-            /**",
                "-            * @property Style.CSS_CELL_HIGHLIGHT3",
                "-            */",
                "-            CSS_CELL_HIGHLIGHT3 : defStyle.CSS_CELL_HIGHLIGHT3,",
                "-            /**",
                "-            * @property Style.CSS_CELL_HIGHLIGHT4",
                "-            */",
                "-            CSS_CELL_HIGHLIGHT4 : defStyle.CSS_CELL_HIGHLIGHT4,",
                "-            /**",
                "-             * @property Style.CSS_WITH_TITLE",
                "-             */",
                "-            CSS_WITH_TITLE : defStyle.CSS_WITH_TITLE,",
                "-             /**",
                "-             * @property Style.CSS_FIXED_SIZE",
                "-             */",
                "-            CSS_FIXED_SIZE : defStyle.CSS_FIXED_SIZE,",
                "-             /**",
                "-             * @property Style.CSS_LINK_CLOSE",
                "-             */",
                "-            CSS_LINK_CLOSE : defStyle.CSS_LINK_CLOSE",
                "-        };",
                "-    },",
                "-",
                "-    /**",
                "-    * Builds the date label that will be displayed in the calendar header or",
                "-    * footer, depending on configuration.",
                "-    * @method buildMonthLabel",
                "-    * @return {HTML} The formatted calendar month label",
                "-    */",
                "-    buildMonthLabel : function() {",
                "-        return this._buildMonthLabel(this.cfg.getProperty(DEF_CFG.PAGEDATE.key));",
                "-    },",
                "-",
                "-    /**",
                "-     * Helper method, to format a Month Year string, given a JavaScript Date, based on the ",
                "-     * Calendar localization settings",
                "-     * ",
                "-     * @method _buildMonthLabel",
                "-     * @private",
                "-     * @param {Date} date",
                "-     * @return {HTML} Formated month, year string",
                "-     */",
                "-    _buildMonthLabel : function(date) {",
                "-        var monthLabel  = this.Locale.LOCALE_MONTHS[date.getMonth()] + this.Locale.MY_LABEL_MONTH_SUFFIX,",
                "-            yearLabel = (date.getFullYear() + this.Locale.YEAR_OFFSET) + this.Locale.MY_LABEL_YEAR_SUFFIX;",
                "-",
                "-        if (this.Locale.MY_LABEL_MONTH_POSITION == 2 || this.Locale.MY_LABEL_YEAR_POSITION == 1) {",
                "-            return yearLabel + monthLabel;",
                "-        } else {",
                "-            return monthLabel + yearLabel;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Builds the date digit that will be displayed in calendar cells",
                "-    * @method buildDayLabel",
                "-    * @param {Date} workingDate The current working date",
                "-    * @return {Number} The day",
                "-    */",
                "-    buildDayLabel : function(workingDate) {",
                "-        return workingDate.getDate();",
                "-    },",
                "-",
                "-    /**",
                "-     * Creates the title bar element and adds it to Calendar container DIV. NOTE: The title parameter passed into this method is added to the DOM as HTML and should be escaped by the implementor if coming from an external source.  ",
                "-     * ",
                "-     * @method createTitleBar",
                "-     * @param {HTML} strTitle The title to display in the title bar",
                "-     * @return The title bar element",
                "-     */",
                "-    createTitleBar : function(strTitle) {",
                "-        var tDiv = Dom.getElementsByClassName(YAHOO.widget.CalendarGroup.CSS_2UPTITLE, \"div\", this.oDomContainer)[0] || document.createElement(\"div\");",
                "-        tDiv.className = YAHOO.widget.CalendarGroup.CSS_2UPTITLE;",
                "-        tDiv.innerHTML = strTitle;",
                "-        this.oDomContainer.insertBefore(tDiv, this.oDomContainer.firstChild);",
                "-    ",
                "-        Dom.addClass(this.oDomContainer, this.Style.CSS_WITH_TITLE);",
                "-    ",
                "-        return tDiv;",
                "-    },",
                "-    ",
                "-    /**",
                "-     * Removes the title bar element from the DOM",
                "-     * ",
                "-     * @method removeTitleBar",
                "-     */",
                "-    removeTitleBar : function() {",
                "-        var tDiv = Dom.getElementsByClassName(YAHOO.widget.CalendarGroup.CSS_2UPTITLE, \"div\", this.oDomContainer)[0] || null;",
                "-        if (tDiv) {",
                "-            Event.purgeElement(tDiv);",
                "-            this.oDomContainer.removeChild(tDiv);",
                "-        }",
                "-        Dom.removeClass(this.oDomContainer, this.Style.CSS_WITH_TITLE);",
                "-    },",
                "-",
                "-    /**",
                "-     * Creates the close button HTML element and adds it to Calendar container DIV",
                "-     * ",
                "-     * @method createCloseButton",
                "-     * @return {HTMLElement} The close HTML element created",
                "-     */",
                "-    createCloseButton : function() {",
                "-        var cssClose = YAHOO.widget.CalendarGroup.CSS_2UPCLOSE,",
                "-            cssLinkClose = this.Style.CSS_LINK_CLOSE,",
                "-            DEPR_CLOSE_PATH = \"us/my/bn/x_d.gif\",",
                "-",
                "-            lnk = Dom.getElementsByClassName(cssLinkClose, \"a\", this.oDomContainer)[0],",
                "-            strings = this.cfg.getProperty(DEF_CFG.STRINGS.key),",
                "-            closeStr = (strings && strings.close) ? strings.close : \"\";",
                "-",
                "-        if (!lnk) {",
                "-            lnk = document.createElement(\"a\");",
                "-            Event.addListener(lnk, \"click\", function(e, cal) {",
                "-                cal.hide(); ",
                "-                Event.preventDefault(e);",
                "-            }, this);",
                "-        }",
                "-",
                "-        lnk.href = \"#\";",
                "-        lnk.className = cssLinkClose;",
                "-",
                "-        if (Calendar.IMG_ROOT !== null) {",
                "-            var img = Dom.getElementsByClassName(cssClose, \"img\", lnk)[0] || document.createElement(\"img\");",
                "-            img.src = Calendar.IMG_ROOT + DEPR_CLOSE_PATH;",
                "-            img.className = cssClose;",
                "-            lnk.appendChild(img);",
                "-        } else {",
                "-            lnk.innerHTML = '<span class=\"' + cssClose + ' ' + this.Style.CSS_CLOSE + '\">' + closeStr + '</span>';",
                "-        }",
                "-        this.oDomContainer.appendChild(lnk);",
                "-",
                "-        return lnk;",
                "-    },",
                "-    ",
                "-    /**",
                "-     * Removes the close button HTML element from the DOM",
                "-     * ",
                "-     * @method removeCloseButton",
                "-     */",
                "-    removeCloseButton : function() {",
                "-        var btn = Dom.getElementsByClassName(this.Style.CSS_LINK_CLOSE, \"a\", this.oDomContainer)[0] || null;",
                "-        if (btn) {",
                "-            Event.purgeElement(btn);",
                "-            this.oDomContainer.removeChild(btn);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders the calendar header. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-    * @method renderHeader",
                "-    * @param {HTML[]} html The current working HTML array",
                "-    * @return {HTML[]} The current working HTML array",
                "-    */",
                "-    renderHeader : function(html) {",
                "-",
                "-",
                "-        var colSpan = 7,",
                "-            DEPR_NAV_LEFT = \"us/tr/callt.gif\",",
                "-            DEPR_NAV_RIGHT = \"us/tr/calrt.gif\",",
                "-            cfg = this.cfg,",
                "-            pageDate = cfg.getProperty(DEF_CFG.PAGEDATE.key),",
                "-            strings= cfg.getProperty(DEF_CFG.STRINGS.key),",
                "-            prevStr = (strings && strings.previousMonth) ?  strings.previousMonth : \"\",",
                "-            nextStr = (strings && strings.nextMonth) ? strings.nextMonth : \"\",",
                "-            monthLabel;",
                "-",
                "-        if (cfg.getProperty(DEF_CFG.SHOW_WEEK_HEADER.key)) {",
                "-            colSpan += 1;",
                "-        }",
                "-    ",
                "-        if (cfg.getProperty(DEF_CFG.SHOW_WEEK_FOOTER.key)) {",
                "-            colSpan += 1;",
                "-        }",
                "-",
                "-        html[html.length] = \"<thead>\";",
                "-        html[html.length] =  \"<tr>\";",
                "-        html[html.length] =   '<th colspan=\"' + colSpan + '\" class=\"' + this.Style.CSS_HEADER_TEXT + '\">';",
                "-        html[html.length] =    '<div class=\"' + this.Style.CSS_HEADER + '\">';",
                "-",
                "-        var renderLeft, renderRight = false;",
                "-",
                "-        if (this.parent) {",
                "-            if (this.index === 0) {",
                "-                renderLeft = true;",
                "-            }",
                "-            if (this.index == (this.parent.cfg.getProperty(\"pages\") -1)) {",
                "-                renderRight = true;",
                "-            }",
                "-        } else {",
                "-            renderLeft = true;",
                "-            renderRight = true;",
                "-        }",
                "-",
                "-        if (renderLeft) {",
                "-            monthLabel  = this._buildMonthLabel(DateMath.subtract(pageDate, DateMath.MONTH, 1));",
                "-",
                "-            var leftArrow = cfg.getProperty(DEF_CFG.NAV_ARROW_LEFT.key);",
                "-            // Check for deprecated customization - If someone set IMG_ROOT, but didn't set NAV_ARROW_LEFT, then set NAV_ARROW_LEFT to the old deprecated value",
                "-            if (leftArrow === null && Calendar.IMG_ROOT !== null) {",
                "-                leftArrow = Calendar.IMG_ROOT + DEPR_NAV_LEFT;",
                "-            }",
                "-            var leftStyle = (leftArrow === null) ? \"\" : ' style=\"background-image:url(' + leftArrow + ')\"';",
                "-            html[html.length] = '<a class=\"' + this.Style.CSS_NAV_LEFT + '\"' + leftStyle + ' href=\"#\">' + prevStr + ' (' + monthLabel + ')' + '</a>';",
                "-        }",
                "-",
                "-        var lbl = this.buildMonthLabel();",
                "-        var cal = this.parent || this;",
                "-        if (cal.cfg.getProperty(\"navigator\")) {",
                "-            lbl = \"<a class=\\\"\" + this.Style.CSS_NAV + \"\\\" href=\\\"#\\\">\" + lbl + \"</a>\";",
                "-        }",
                "-        html[html.length] = lbl;",
                "-",
                "-        if (renderRight) {",
                "-            monthLabel  = this._buildMonthLabel(DateMath.add(pageDate, DateMath.MONTH, 1));",
                "-",
                "-            var rightArrow = cfg.getProperty(DEF_CFG.NAV_ARROW_RIGHT.key);",
                "-            if (rightArrow === null && Calendar.IMG_ROOT !== null) {",
                "-                rightArrow = Calendar.IMG_ROOT + DEPR_NAV_RIGHT;",
                "-            }",
                "-            var rightStyle = (rightArrow === null) ? \"\" : ' style=\"background-image:url(' + rightArrow + ')\"';",
                "-            html[html.length] = '<a class=\"' + this.Style.CSS_NAV_RIGHT + '\"' + rightStyle + ' href=\"#\">' + nextStr + ' (' + monthLabel + ')' + '</a>';",
                "-        }",
                "-",
                "-        html[html.length] = '</div>\\n</th>\\n</tr>';",
                "-",
                "-        if (cfg.getProperty(DEF_CFG.SHOW_WEEKDAYS.key)) {",
                "-            html = this.buildWeekdays(html);",
                "-        }",
                "-        ",
                "-        html[html.length] = '</thead>';",
                "-    ",
                "-        return html;",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders the Calendar's weekday headers. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-    * @method buildWeekdays",
                "-    * @param {HTML[]} html The current working HTML array",
                "-    * @return {HTML[]} The current working HTML array",
                "-    */",
                "-    buildWeekdays : function(html) {",
                "-",
                "-        html[html.length] = '<tr class=\"' + this.Style.CSS_WEEKDAY_ROW + '\">';",
                "-",
                "-        if (this.cfg.getProperty(DEF_CFG.SHOW_WEEK_HEADER.key)) {",
                "-            html[html.length] = '<th>&#160;</th>';",
                "-        }",
                "-",
                "-        for(var i=0;i < this.Locale.LOCALE_WEEKDAYS.length; ++i) {",
                "-            html[html.length] = '<th class=\"' + this.Style.CSS_WEEKDAY_CELL + '\">' + this.Locale.LOCALE_WEEKDAYS[i] + '</th>';",
                "-        }",
                "-",
                "-        if (this.cfg.getProperty(DEF_CFG.SHOW_WEEK_FOOTER.key)) {",
                "-            html[html.length] = '<th>&#160;</th>';",
                "-        }",
                "-",
                "-        html[html.length] = '</tr>';",
                "-",
                "-        return html;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Renders the calendar body. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-    * @method renderBody",
                "-    * @param {Date} workingDate The current working Date being used for the render process",
                "-    * @param {HTML[]} html The current working HTML array",
                "-    * @return {HTML[]} The current working HTML array",
                "-    */",
                "-    renderBody : function(workingDate, html) {",
                "-",
                "-        var startDay = this.cfg.getProperty(DEF_CFG.START_WEEKDAY.key);",
                "-",
                "-        this.preMonthDays = workingDate.getDay();",
                "-        if (startDay > 0) {",
                "-            this.preMonthDays -= startDay;",
                "-        }",
                "-        if (this.preMonthDays < 0) {",
                "-            this.preMonthDays += 7;",
                "-        }",
                "-",
                "-        this.monthDays = DateMath.findMonthEnd(workingDate).getDate();",
                "-        this.postMonthDays = Calendar.DISPLAY_DAYS-this.preMonthDays-this.monthDays;",
                "-",
                "-",
                "-        workingDate = DateMath.subtract(workingDate, DateMath.DAY, this.preMonthDays);",
                "-    ",
                "-        var weekNum,",
                "-            weekClass,",
                "-            weekPrefix = \"w\",",
                "-            cellPrefix = \"_cell\",",
                "-            workingDayPrefix = \"wd\",",
                "-            dayPrefix = \"d\",",
                "-            cellRenderers,",
                "-            renderer,",
                "-            t = this.today,",
                "-            cfg = this.cfg,",
                "-            oom,",
                "-            todayYear = t.getFullYear(),",
                "-            todayMonth = t.getMonth(),",
                "-            todayDate = t.getDate(),",
                "-            useDate = cfg.getProperty(DEF_CFG.PAGEDATE.key),",
                "-            hideBlankWeeks = cfg.getProperty(DEF_CFG.HIDE_BLANK_WEEKS.key),",
                "-            showWeekFooter = cfg.getProperty(DEF_CFG.SHOW_WEEK_FOOTER.key),",
                "-            showWeekHeader = cfg.getProperty(DEF_CFG.SHOW_WEEK_HEADER.key),",
                "-            oomSelect = cfg.getProperty(DEF_CFG.OOM_SELECT.key),",
                "-            mindate = cfg.getProperty(DEF_CFG.MINDATE.key),",
                "-            maxdate = cfg.getProperty(DEF_CFG.MAXDATE.key),",
                "-            yearOffset = this.Locale.YEAR_OFFSET;",
                "-",
                "-        if (mindate) {",
                "-            mindate = DateMath.clearTime(mindate);",
                "-        }",
                "-        if (maxdate) {",
                "-            maxdate = DateMath.clearTime(maxdate);",
                "-        }",
                "-",
                "-        html[html.length] = '<tbody class=\"m' + (useDate.getMonth()+1) + ' ' + this.Style.CSS_BODY + '\">';",
                "-",
                "-        var i = 0,",
                "-            tempDiv = document.createElement(\"div\"),",
                "-            cell = document.createElement(\"td\");",
                "-",
                "-        tempDiv.appendChild(cell);",
                "-",
                "-        var cal = this.parent || this;",
                "-",
                "-        for (var r = 0; r < 6; r++) {",
                "-            weekNum = DateMath.getWeekNumber(workingDate, startDay);",
                "-            weekClass = weekPrefix + weekNum;",
                "-",
                "-            // Local OOM check for performance, since we already have pagedate",
                "-            if (r !== 0 && hideBlankWeeks === true && workingDate.getMonth() != useDate.getMonth()) {",
                "-                break;",
                "-            } else {",
                "-                html[html.length] = '<tr class=\"' + weekClass + '\">';",
                "-",
                "-                if (showWeekHeader) { html = this.renderRowHeader(weekNum, html); }",
                "-",
                "-                for (var d=0; d < 7; d++){ // Render actual days",
                "-",
                "-                    cellRenderers = [];",
                "-",
                "-                    this.clearElement(cell);",
                "-                    cell.className = this.Style.CSS_CELL;",
                "-                    cell.id = this.id + cellPrefix + i;",
                "-",
                "-                    if (workingDate.getDate()  == todayDate && ",
                "-                        workingDate.getMonth()  == todayMonth &&",
                "-                        workingDate.getFullYear() == todayYear) {",
                "-                        cellRenderers[cellRenderers.length]=cal.renderCellStyleToday;",
                "-                    }",
                "-",
                "-                    var workingArray = [workingDate.getFullYear(),workingDate.getMonth()+1,workingDate.getDate()];",
                "-                    this.cellDates[this.cellDates.length] = workingArray; // Add this date to cellDates",
                "-",
                "-                    // Local OOM check for performance, since we already have pagedate",
                "-                    oom = workingDate.getMonth() != useDate.getMonth(); ",
                "-                    if (oom && !oomSelect) {",
                "-                        cellRenderers[cellRenderers.length]=cal.renderCellNotThisMonth;",
                "-                    } else {",
                "-                        Dom.addClass(cell, workingDayPrefix + workingDate.getDay());",
                "-                        Dom.addClass(cell, dayPrefix + workingDate.getDate());",
                "-",
                "-                        // Concat, so that we're not splicing from an array ",
                "-                        // which we're also iterating",
                "-                        var rs = this.renderStack.concat();",
                "-",
                "-                        for (var s=0, l = rs.length; s < l; ++s) {",
                "-",
                "-                            renderer = null;",
                "-",
                "-                            var rArray = rs[s],",
                "-                                type = rArray[0],",
                "-                                month,",
                "-                                day,",
                "-                                year;",
                "-",
                "-                            switch (type) {",
                "-                                case Calendar.DATE:",
                "-                                    month = rArray[1][1];",
                "-                                    day = rArray[1][2];",
                "-                                    year = rArray[1][0];",
                "-",
                "-                                    if (workingDate.getMonth()+1 == month && workingDate.getDate() == day && workingDate.getFullYear() == year) {",
                "-                                        renderer = rArray[2];",
                "-                                        this.renderStack.splice(s,1);",
                "-                                    }",
                "-",
                "-                                    break;",
                "-                                case Calendar.MONTH_DAY:",
                "-                                    month = rArray[1][0];",
                "-                                    day = rArray[1][1];",
                "-",
                "-                                    if (workingDate.getMonth()+1 == month && workingDate.getDate() == day) {",
                "-                                        renderer = rArray[2];",
                "-                                        this.renderStack.splice(s,1);",
                "-                                    }",
                "-                                    break;",
                "-                                case Calendar.RANGE:",
                "-                                    var date1 = rArray[1][0],",
                "-                                        date2 = rArray[1][1],",
                "-                                        d1month = date1[1],",
                "-                                        d1day = date1[2],",
                "-                                        d1year = date1[0],",
                "-                                        d1 = DateMath.getDate(d1year, d1month-1, d1day),",
                "-                                        d2month = date2[1],",
                "-                                        d2day = date2[2],",
                "-                                        d2year = date2[0],",
                "-                                        d2 = DateMath.getDate(d2year, d2month-1, d2day);",
                "-",
                "-                                    if (workingDate.getTime() >= d1.getTime() && workingDate.getTime() <= d2.getTime()) {",
                "-                                        renderer = rArray[2];",
                "-",
                "-                                        if (workingDate.getTime()==d2.getTime()) { ",
                "-                                            this.renderStack.splice(s,1);",
                "-                                        }",
                "-                                    }",
                "-                                    break;",
                "-                                case Calendar.WEEKDAY:",
                "-                                    var weekday = rArray[1][0];",
                "-                                    if (workingDate.getDay()+1 == weekday) {",
                "-                                        renderer = rArray[2];",
                "-                                    }",
                "-                                    break;",
                "-                                case Calendar.MONTH:",
                "-                                    month = rArray[1][0];",
                "-                                    if (workingDate.getMonth()+1 == month) {",
                "-                                        renderer = rArray[2];",
                "-                                    }",
                "-                                    break;",
                "-                            }",
                "-",
                "-                            if (renderer) {",
                "-                                cellRenderers[cellRenderers.length]=renderer;",
                "-                            }",
                "-                        }",
                "-",
                "-                    }",
                "-",
                "-                    if (this._indexOfSelectedFieldArray(workingArray) > -1) {",
                "-                        cellRenderers[cellRenderers.length]=cal.renderCellStyleSelected; ",
                "-                    }",
                "-",
                "-                    if (oom) {",
                "-                        cellRenderers[cellRenderers.length] = cal.styleCellNotThisMonth; ",
                "-                    }",
                "-",
                "-                    if ((mindate && (workingDate.getTime() < mindate.getTime())) || (maxdate && (workingDate.getTime() > maxdate.getTime()))) {",
                "-                        cellRenderers[cellRenderers.length] = cal.renderOutOfBoundsDate;",
                "-                    } else {",
                "-                        cellRenderers[cellRenderers.length] = cal.styleCellDefault;",
                "-                        cellRenderers[cellRenderers.length] = cal.renderCellDefault;",
                "-                    }",
                "-",
                "-                    for (var x=0; x < cellRenderers.length; ++x) {",
                "-                        if (cellRenderers[x].call(cal, workingDate, cell) == Calendar.STOP_RENDER) {",
                "-                            break;",
                "-                        }",
                "-                    }",
                "-",
                "-                    workingDate.setTime(workingDate.getTime() + DateMath.ONE_DAY_MS);",
                "-                    // Just in case we crossed DST/Summertime boundaries",
                "-                    workingDate = DateMath.clearTime(workingDate);",
                "-",
                "-                    if (i >= 0 && i <= 6) {",
                "-                        Dom.addClass(cell, this.Style.CSS_CELL_TOP);",
                "-                    }",
                "-                    if ((i % 7) === 0) {",
                "-                        Dom.addClass(cell, this.Style.CSS_CELL_LEFT);",
                "-                    }",
                "-                    if (((i+1) % 7) === 0) {",
                "-                        Dom.addClass(cell, this.Style.CSS_CELL_RIGHT);",
                "-                    }",
                "-",
                "-                    var postDays = this.postMonthDays; ",
                "-                    if (hideBlankWeeks && postDays >= 7) {",
                "-                        var blankWeeks = Math.floor(postDays/7);",
                "-                        for (var p=0;p<blankWeeks;++p) {",
                "-                            postDays -= 7;",
                "-                        }",
                "-                    }",
                "-                    ",
                "-                    if (i >= ((this.preMonthDays+postDays+this.monthDays)-7)) {",
                "-                        Dom.addClass(cell, this.Style.CSS_CELL_BOTTOM);",
                "-                    }",
                "-    ",
                "-                    html[html.length] = tempDiv.innerHTML;",
                "-                    i++;",
                "-                }",
                "-    ",
                "-                if (showWeekFooter) { html = this.renderRowFooter(weekNum, html); }",
                "-    ",
                "-                html[html.length] = '</tr>';",
                "-            }",
                "-        }",
                "-    ",
                "-        html[html.length] = '</tbody>';",
                "-    ",
                "-        return html;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Renders the calendar footer. In the default implementation, there is no footer. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-    * @method renderFooter",
                "-    * @param {HTML[]} html The current working HTML array",
                "-    * @return {HTML[]} The current working HTML array",
                "-    */",
                "-    renderFooter : function(html) { return html; },",
                "-    ",
                "-    /**",
                "-    * Renders the calendar after it has been configured. The render() method has a specific call chain that will execute",
                "-    * when the method is called: renderHeader, renderBody, renderFooter.",
                "-    * Refer to the documentation for those methods for information on individual render tasks.",
                "-    * @method render",
                "-    */",
                "-    render : function() {",
                "-        this.beforeRenderEvent.fire();",
                "-",
                "-        // Find starting day of the current month",
                "-        var workingDate = DateMath.findMonthStart(this.cfg.getProperty(DEF_CFG.PAGEDATE.key));",
                "-",
                "-        this.resetRenderers();",
                "-        this.cellDates.length = 0;",
                "-",
                "-        Event.purgeElement(this.oDomContainer, true);",
                "-",
                "-        var html = [], ",
                "-            table;",
                "-",
                "-        html[html.length] = '<table cellSpacing=\"0\" class=\"' + this.Style.CSS_CALENDAR + ' y' + (workingDate.getFullYear() + this.Locale.YEAR_OFFSET) +'\" id=\"' + this.id + '\">';",
                "-        html = this.renderHeader(html);",
                "-        html = this.renderBody(workingDate, html);",
                "-        html = this.renderFooter(html);",
                "-        html[html.length] = '</table>';",
                "-",
                "-        this.oDomContainer.innerHTML = html.join(\"\\n\");",
                "-",
                "-        this.applyListeners();",
                "-",
                "-        // Using oDomContainer.ownerDocument, to allow for cross-frame rendering",
                "-        table = ((this._oDoc) && this._oDoc.getElementById(this.id)) || (this.id);",
                "-",
                "-        this.cells = Dom.getElementsByClassName(this.Style.CSS_CELL, \"td\", table);",
                "-",
                "-        this.cfg.refireEvent(DEF_CFG.TITLE.key);",
                "-        this.cfg.refireEvent(DEF_CFG.CLOSE.key);",
                "-        this.cfg.refireEvent(DEF_CFG.IFRAME.key);",
                "-",
                "-        this.renderEvent.fire();",
                "-    },",
                "-",
                "-    /**",
                "-    * Applies the Calendar's DOM listeners to applicable elements.",
                "-    * @method applyListeners",
                "-    */",
                "-    applyListeners : function() {",
                "-        var root = this.oDomContainer,",
                "-            cal = this.parent || this,",
                "-            anchor = \"a\",",
                "-            click = \"click\";",
                "-",
                "-        var linkLeft = Dom.getElementsByClassName(this.Style.CSS_NAV_LEFT, anchor, root),",
                "-            linkRight = Dom.getElementsByClassName(this.Style.CSS_NAV_RIGHT, anchor, root);",
                "-",
                "-        if (linkLeft && linkLeft.length > 0) {",
                "-            this.linkLeft = linkLeft[0];",
                "-            Event.addListener(this.linkLeft, click, this.doPreviousMonthNav, cal, true);",
                "-        }",
                "-",
                "-        if (linkRight && linkRight.length > 0) {",
                "-            this.linkRight = linkRight[0];",
                "-            Event.addListener(this.linkRight, click, this.doNextMonthNav, cal, true);",
                "-        }",
                "-",
                "-        if (cal.cfg.getProperty(\"navigator\") !== null) {",
                "-            this.applyNavListeners();",
                "-        }",
                "-",
                "-        if (this.domEventMap) {",
                "-            var el,elements;",
                "-            for (var cls in this.domEventMap) { ",
                "-                if (Lang.hasOwnProperty(this.domEventMap, cls)) {",
                "-                    var items = this.domEventMap[cls];",
                "-    ",
                "-                    if (! (items instanceof Array)) {",
                "-                        items = [items];",
                "-                    }",
                "-    ",
                "-                    for (var i=0;i<items.length;i++) {",
                "-                        var item = items[i];",
                "-                        elements = Dom.getElementsByClassName(cls, item.tag, this.oDomContainer);",
                "-    ",
                "-                        for (var c=0;c<elements.length;c++) {",
                "-                            el = elements[c];",
                "-                             Event.addListener(el, item.event, item.handler, item.scope, item.correct );",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        Event.addListener(this.oDomContainer, \"click\", this.doSelectCell, this);",
                "-        Event.addListener(this.oDomContainer, \"mouseover\", this.doCellMouseOver, this);",
                "-        Event.addListener(this.oDomContainer, \"mouseout\", this.doCellMouseOut, this);",
                "-    },",
                "-",
                "-    /**",
                "-    * Applies the DOM listeners to activate the Calendar Navigator.",
                "-    * @method applyNavListeners",
                "-    */",
                "-    applyNavListeners : function() {",
                "-        var calParent = this.parent || this,",
                "-            cal = this,",
                "-            navBtns = Dom.getElementsByClassName(this.Style.CSS_NAV, \"a\", this.oDomContainer);",
                "-",
                "-        if (navBtns.length > 0) {",
                "-",
                "-            Event.addListener(navBtns, \"click\", function (e, obj) {",
                "-                var target = Event.getTarget(e);",
                "-                // this == navBtn",
                "-                if (this === target || Dom.isAncestor(this, target)) {",
                "-                    Event.preventDefault(e);",
                "-                }",
                "-                var navigator = calParent.oNavigator;",
                "-                if (navigator) {",
                "-                    var pgdate = cal.cfg.getProperty(\"pagedate\");",
                "-                    navigator.setYear(pgdate.getFullYear() + cal.Locale.YEAR_OFFSET);",
                "-                    navigator.setMonth(pgdate.getMonth());",
                "-                    navigator.show();",
                "-                }",
                "-            });",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Retrieves the Date object for the specified Calendar cell",
                "-    * @method getDateByCellId",
                "-    * @param {String} id The id of the cell",
                "-    * @return {Date} The Date object for the specified Calendar cell",
                "-    */",
                "-    getDateByCellId : function(id) {",
                "-        var date = this.getDateFieldsByCellId(id);",
                "-        return (date) ? DateMath.getDate(date[0],date[1]-1,date[2]) : null;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Retrieves the Date object for the specified Calendar cell",
                "-    * @method getDateFieldsByCellId",
                "-    * @param {String} id The id of the cell",
                "-    * @return {Array} The array of Date fields for the specified Calendar cell",
                "-    */",
                "-    getDateFieldsByCellId : function(id) {",
                "-        id = this.getIndexFromId(id);",
                "-        return (id > -1) ? this.cellDates[id] : null;",
                "-    },",
                "-",
                "-    /**",
                "-     * Find the Calendar's cell index for a given date.",
                "-     * If the date is not found, the method returns -1.",
                "-     * <p>",
                "-     * The returned index can be used to lookup the cell HTMLElement  ",
                "-     * using the Calendar's cells array or passed to selectCell to select ",
                "-     * cells by index. ",
                "-     * </p>",
                "-     *",
                "-     * See <a href=\"#cells\">cells</a>, <a href=\"#selectCell\">selectCell</a>.",
                "-     *",
                "-     * @method getCellIndex",
                "-     * @param {Date} date JavaScript Date object, for which to find a cell index.",
                "-     * @return {Number} The index of the date in Calendars cellDates/cells arrays, or -1 if the date ",
                "-     * is not on the curently rendered Calendar page.",
                "-     */",
                "-    getCellIndex : function(date) {",
                "-        var idx = -1;",
                "-        if (date) {",
                "-            var m = date.getMonth(),",
                "-                y = date.getFullYear(),",
                "-                d = date.getDate(),",
                "-                dates = this.cellDates;",
                "-",
                "-            for (var i = 0; i < dates.length; ++i) {",
                "-                var cellDate = dates[i];",
                "-                if (cellDate[0] === y && cellDate[1] === m+1 && cellDate[2] === d) {",
                "-                    idx = i;",
                "-                    break;",
                "-                }",
                "-            }",
                "-        }",
                "-        return idx;",
                "-    },",
                "-",
                "-    /**",
                "-     * Given the id used to mark each Calendar cell, this method",
                "-     * extracts the index number from the id.",
                "-     * ",
                "-     * @param {String} strId The cell id",
                "-     * @return {Number} The index of the cell, or -1 if id does not contain an index number",
                "-     */",
                "-    getIndexFromId : function(strId) {",
                "-        var idx = -1,",
                "-            li = strId.lastIndexOf(\"_cell\");",
                "-",
                "-        if (li > -1) {",
                "-            idx = parseInt(strId.substring(li + 5), 10);",
                "-        }",
                "-",
                "-        return idx;",
                "-    },",
                "-    ",
                "-    // BEGIN BUILT-IN TABLE CELL RENDERERS",
                "-    ",
                "-    /**",
                "-    * Renders a cell that falls before the minimum date or after the maximum date.",
                "-    * @method renderOutOfBoundsDate",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering",
                "-    *   should not be terminated",
                "-    */",
                "-    renderOutOfBoundsDate : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_OOB);",
                "-        cell.innerHTML = workingDate.getDate();",
                "-        return Calendar.STOP_RENDER;",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders the row header HTML for a week.",
                "-    *",
                "-    * @method renderRowHeader",
                "-    * @param {Number} weekNum The week number of the current row",
                "-    * @param {HTML[]} cell The current working HTML array",
                "-    */",
                "-    renderRowHeader : function(weekNum, html) {",
                "-        html[html.length] = '<th class=\"' + this.Style.CSS_ROW_HEADER + '\">' + weekNum + '</th>';",
                "-        return html;",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders the row footer HTML for a week.",
                "-    *",
                "-    * @method renderRowFooter",
                "-    * @param {Number} weekNum The week number of the current row",
                "-    * @param {HTML[]} cell The current working HTML array",
                "-    */",
                "-    renderRowFooter : function(weekNum, html) {",
                "-        html[html.length] = '<th class=\"' + this.Style.CSS_ROW_FOOTER + '\">' + weekNum + '</th>';",
                "-        return html;",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders a single standard calendar cell in the calendar widget table.",
                "-    *",
                "-    * All logic for determining how a standard default cell will be rendered is ",
                "-    * encapsulated in this method, and must be accounted for when extending the",
                "-    * widget class.",
                "-    *",
                "-    * @method renderCellDefault",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    */",
                "-    renderCellDefault : function(workingDate, cell) {",
                "-        cell.innerHTML = '<a href=\"#\" class=\"' + this.Style.CSS_CELL_SELECTOR + '\">' + this.buildDayLabel(workingDate) + \"</a>\";",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Styles a selectable cell.",
                "-    * @method styleCellDefault",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    */",
                "-    styleCellDefault : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_SELECTABLE);",
                "-    },",
                "-    ",
                "-    ",
                "-    /**",
                "-    * Renders a single standard calendar cell using the CSS hightlight1 style",
                "-    * @method renderCellStyleHighlight1",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    */",
                "-    renderCellStyleHighlight1 : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_HIGHLIGHT1);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Renders a single standard calendar cell using the CSS hightlight2 style",
                "-    * @method renderCellStyleHighlight2",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    */",
                "-    renderCellStyleHighlight2 : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_HIGHLIGHT2);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Renders a single standard calendar cell using the CSS hightlight3 style",
                "-    * @method renderCellStyleHighlight3",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    */",
                "-    renderCellStyleHighlight3 : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_HIGHLIGHT3);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Renders a single standard calendar cell using the CSS hightlight4 style",
                "-    * @method renderCellStyleHighlight4",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    */",
                "-    renderCellStyleHighlight4 : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_HIGHLIGHT4);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Applies the default style used for rendering today's date to the current calendar cell",
                "-    * @method renderCellStyleToday",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    */",
                "-    renderCellStyleToday : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_TODAY);",
                "-    },",
                "-",
                "-    /**",
                "-    * Applies the default style used for rendering selected dates to the current calendar cell",
                "-    * @method renderCellStyleSelected",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering",
                "-    *   should not be terminated",
                "-    */",
                "-    renderCellStyleSelected : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_SELECTED);",
                "-    },",
                "-",
                "-    /**",
                "-    * Applies the default style used for rendering dates that are not a part of the current",
                "-    * month (preceding or trailing the cells for the current month)",
                "-    *",
                "-    * @method renderCellNotThisMonth",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering",
                "-    *   should not be terminated",
                "-    */",
                "-    renderCellNotThisMonth : function(workingDate, cell) {",
                "-        this.styleCellNotThisMonth(workingDate, cell);",
                "-        cell.innerHTML=workingDate.getDate();",
                "-        return Calendar.STOP_RENDER;",
                "-    },",
                "-",
                "-    /** Applies the style used for rendering out-of-month dates to the current calendar cell",
                "-    * @method styleCellNotThisMonth",
                "-    * @param {Date}                 workingDate     The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell            The current working cell in the calendar",
                "-    */",
                "-    styleCellNotThisMonth : function(workingDate, cell) {",
                "-        YAHOO.util.Dom.addClass(cell, this.Style.CSS_CELL_OOM);",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders the current calendar cell as a non-selectable \"black-out\" date using the default",
                "-    * restricted style.",
                "-    * @method renderBodyCellRestricted",
                "-    * @param {Date}     workingDate  The current working Date object being used to generate the calendar",
                "-    * @param {HTMLTableCellElement} cell   The current working cell in the calendar",
                "-    * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering",
                "-    *   should not be terminated",
                "-    */",
                "-    renderBodyCellRestricted : function(workingDate, cell) {",
                "-        Dom.addClass(cell, this.Style.CSS_CELL);",
                "-        Dom.addClass(cell, this.Style.CSS_CELL_RESTRICTED);",
                "-        cell.innerHTML=workingDate.getDate();",
                "-        return Calendar.STOP_RENDER;",
                "-    },",
                "-    ",
                "-    // END BUILT-IN TABLE CELL RENDERERS",
                "-    ",
                "-    // BEGIN MONTH NAVIGATION METHODS",
                "-",
                "-    /**",
                "-    * Adds the designated number of months to the current calendar month, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method addMonths",
                "-    * @param {Number} count The number of months to add to the current calendar",
                "-    */",
                "-    addMonths : function(count) {",
                "-        var cfgPageDate = DEF_CFG.PAGEDATE.key,",
                "-",
                "-        prevDate = this.cfg.getProperty(cfgPageDate),",
                "-        newDate = DateMath.add(prevDate, DateMath.MONTH, count);",
                "-",
                "-        this.cfg.setProperty(cfgPageDate, newDate);",
                "-        this.resetRenderers();",
                "-        this.changePageEvent.fire(prevDate, newDate);",
                "-    },",
                "-",
                "-    /**",
                "-    * Subtracts the designated number of months from the current calendar month, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method subtractMonths",
                "-    * @param {Number} count The number of months to subtract from the current calendar",
                "-    */",
                "-    subtractMonths : function(count) {",
                "-        this.addMonths(-1*count);",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds the designated number of years to the current calendar, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method addYears",
                "-    * @param {Number} count The number of years to add to the current calendar",
                "-    */",
                "-    addYears : function(count) {",
                "-        var cfgPageDate = DEF_CFG.PAGEDATE.key,",
                "-",
                "-        prevDate = this.cfg.getProperty(cfgPageDate),",
                "-        newDate = DateMath.add(prevDate, DateMath.YEAR, count);",
                "-",
                "-        this.cfg.setProperty(cfgPageDate, newDate);",
                "-        this.resetRenderers();",
                "-        this.changePageEvent.fire(prevDate, newDate);",
                "-    },",
                "-",
                "-    /**",
                "-    * Subtcats the designated number of years from the current calendar, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method subtractYears",
                "-    * @param {Number} count The number of years to subtract from the current calendar",
                "-    */",
                "-    subtractYears : function(count) {",
                "-        this.addYears(-1*count);",
                "-    },",
                "-",
                "-    /**",
                "-    * Navigates to the next month page in the calendar widget.",
                "-    * @method nextMonth",
                "-    */",
                "-    nextMonth : function() {",
                "-        this.addMonths(1);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Navigates to the previous month page in the calendar widget.",
                "-    * @method previousMonth",
                "-    */",
                "-    previousMonth : function() {",
                "-        this.addMonths(-1);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Navigates to the next year in the currently selected month in the calendar widget.",
                "-    * @method nextYear",
                "-    */",
                "-    nextYear : function() {",
                "-        this.addYears(1);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Navigates to the previous year in the currently selected month in the calendar widget.",
                "-    * @method previousYear",
                "-    */",
                "-    previousYear : function() {",
                "-        this.addYears(-1);",
                "-    },",
                "-",
                "-    // END MONTH NAVIGATION METHODS",
                "-    ",
                "-    // BEGIN SELECTION METHODS",
                "-    ",
                "-    /**",
                "-    * Resets the calendar widget to the originally selected month and year, and ",
                "-    * sets the calendar to the initial selection(s).",
                "-    * @method reset",
                "-    */",
                "-    reset : function() {",
                "-        this.cfg.resetProperty(DEF_CFG.SELECTED.key);",
                "-        this.cfg.resetProperty(DEF_CFG.PAGEDATE.key);",
                "-        this.resetEvent.fire();",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Clears the selected dates in the current calendar widget and sets the calendar",
                "-    * to the current month and year.",
                "-    * @method clear",
                "-    */",
                "-    clear : function() {",
                "-        this.cfg.setProperty(DEF_CFG.SELECTED.key, []);",
                "-        this.cfg.setProperty(DEF_CFG.PAGEDATE.key, new Date(this.today.getTime()));",
                "-        this.clearEvent.fire();",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Selects a date or a collection of dates on the current calendar. This method, by default,",
                "-    * does not call the render method explicitly. Once selection has completed, render must be ",
                "-    * called for the changes to be reflected visually.",
                "-    *",
                "-    * Any dates which are OOB (out of bounds, not selectable) will not be selected and the array of ",
                "-    * selected dates passed to the selectEvent will not contain OOB dates.",
                "-    * ",
                "-    * If all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.",
                "-    *",
                "-    * @method select",
                "-    * @param {String/Date/Date[]} date The date string of dates to select in the current calendar. Valid formats are",
                "-    *        individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).",
                "-    *        Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).",
                "-    *        This method can also take a JavaScript Date object or an array of Date objects.",
                "-    * @return {Date[]}   Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    select : function(date) {",
                "-",
                "-        var aToBeSelected = this._toFieldArray(date),",
                "-            validDates = [],",
                "-            selected = [],",
                "-            cfgSelected = DEF_CFG.SELECTED.key;",
                "-",
                "-        ",
                "-        for (var a=0; a < aToBeSelected.length; ++a) {",
                "-            var toSelect = aToBeSelected[a];",
                "-",
                "-            if (!this.isDateOOB(this._toDate(toSelect))) {",
                "-",
                "-                if (validDates.length === 0) {",
                "-                    this.beforeSelectEvent.fire();",
                "-                    selected = this.cfg.getProperty(cfgSelected);",
                "-                }",
                "-                validDates.push(toSelect);",
                "-",
                "-                if (this._indexOfSelectedFieldArray(toSelect) == -1) { ",
                "-                    selected[selected.length] = toSelect;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-",
                "-        if (validDates.length > 0) {",
                "-            if (this.parent) {",
                "-                this.parent.cfg.setProperty(cfgSelected, selected);",
                "-            } else {",
                "-                this.cfg.setProperty(cfgSelected, selected);",
                "-            }",
                "-            this.selectEvent.fire(validDates);",
                "-        }",
                "-",
                "-        return this.getSelectedDates();",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Selects a date on the current calendar by referencing the index of the cell that should be selected.",
                "-    * This method is used to easily select a single cell (usually with a mouse click) without having to do",
                "-    * a full render. The selected style is applied to the cell directly.",
                "-    *",
                "-    * If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month ",
                "-    * or out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.",
                "-    * ",
                "-    * @method selectCell",
                "-    * @param {Number} cellIndex The index of the cell to select in the current calendar. ",
                "-    * @return {Date[]} Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    selectCell : function(cellIndex) {",
                "-",
                "-        var cell = this.cells[cellIndex],",
                "-            cellDate = this.cellDates[cellIndex],",
                "-            dCellDate = this._toDate(cellDate),",
                "-            selectable = Dom.hasClass(cell, this.Style.CSS_CELL_SELECTABLE);",
                "-",
                "-",
                "-        if (selectable) {",
                "-    ",
                "-            this.beforeSelectEvent.fire();",
                "-    ",
                "-            var cfgSelected = DEF_CFG.SELECTED.key;",
                "-            var selected = this.cfg.getProperty(cfgSelected);",
                "-    ",
                "-            var selectDate = cellDate.concat();",
                "-    ",
                "-            if (this._indexOfSelectedFieldArray(selectDate) == -1) {",
                "-                selected[selected.length] = selectDate;",
                "-            }",
                "-            if (this.parent) {",
                "-                this.parent.cfg.setProperty(cfgSelected, selected);",
                "-            } else {",
                "-                this.cfg.setProperty(cfgSelected, selected);",
                "-            }",
                "-            this.renderCellStyleSelected(dCellDate,cell);",
                "-            this.selectEvent.fire([selectDate]);",
                "-    ",
                "-            this.doCellMouseOut.call(cell, null, this);  ",
                "-        }",
                "-    ",
                "-        return this.getSelectedDates();",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Deselects a date or a collection of dates on the current calendar. This method, by default,",
                "-    * does not call the render method explicitly. Once deselection has completed, render must be ",
                "-    * called for the changes to be reflected visually.",
                "-    * ",
                "-    * The method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable) ",
                "-    * and the array of deselected dates passed to the deselectEvent will not contain any OOB dates.",
                "-    * ",
                "-    * If all dates are OOB, beforeDeselect and deselect events will not be fired.",
                "-    * ",
                "-    * @method deselect",
                "-    * @param {String/Date/Date[]} date The date string of dates to deselect in the current calendar. Valid formats are",
                "-    *        individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).",
                "-    *        Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).",
                "-    *        This method can also take a JavaScript Date object or an array of Date objects. ",
                "-    * @return {Date[]}   Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    deselect : function(date) {",
                "-",
                "-        var aToBeDeselected = this._toFieldArray(date),",
                "-            validDates = [],",
                "-            selected = [],",
                "-            cfgSelected = DEF_CFG.SELECTED.key;",
                "-",
                "-",
                "-        for (var a=0; a < aToBeDeselected.length; ++a) {",
                "-            var toDeselect = aToBeDeselected[a];",
                "-    ",
                "-            if (!this.isDateOOB(this._toDate(toDeselect))) {",
                "-    ",
                "-                if (validDates.length === 0) {",
                "-                    this.beforeDeselectEvent.fire();",
                "-                    selected = this.cfg.getProperty(cfgSelected);",
                "-                }",
                "-    ",
                "-                validDates.push(toDeselect);",
                "-    ",
                "-                var index = this._indexOfSelectedFieldArray(toDeselect);",
                "-                if (index != -1) { ",
                "-                    selected.splice(index,1);",
                "-                }",
                "-            }",
                "-        }",
                "-    ",
                "-    ",
                "-        if (validDates.length > 0) {",
                "-            if (this.parent) {",
                "-                this.parent.cfg.setProperty(cfgSelected, selected);",
                "-            } else {",
                "-                this.cfg.setProperty(cfgSelected, selected);",
                "-            }",
                "-            this.deselectEvent.fire(validDates);",
                "-        }",
                "-    ",
                "-        return this.getSelectedDates();",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Deselects a date on the current calendar by referencing the index of the cell that should be deselected.",
                "-    * This method is used to easily deselect a single cell (usually with a mouse click) without having to do",
                "-    * a full render. The selected style is removed from the cell directly.",
                "-    * ",
                "-    * If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month ",
                "-    * or out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and ",
                "-    * deselect events will not be fired.",
                "-    * ",
                "-    * @method deselectCell",
                "-    * @param {Number} cellIndex The index of the cell to deselect in the current calendar. ",
                "-    * @return {Date[]} Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    deselectCell : function(cellIndex) {",
                "-        var cell = this.cells[cellIndex],",
                "-            cellDate = this.cellDates[cellIndex],",
                "-            cellDateIndex = this._indexOfSelectedFieldArray(cellDate);",
                "-",
                "-        var selectable = Dom.hasClass(cell, this.Style.CSS_CELL_SELECTABLE);",
                "-",
                "-        if (selectable) {",
                "-",
                "-            this.beforeDeselectEvent.fire();",
                "-",
                "-            var selected = this.cfg.getProperty(DEF_CFG.SELECTED.key),",
                "-                dCellDate = this._toDate(cellDate),",
                "-                selectDate = cellDate.concat();",
                "-",
                "-            if (cellDateIndex > -1) {",
                "-                if ((this.cfg.getProperty(DEF_CFG.PAGEDATE.key).getMonth() == dCellDate.getMonth() &&",
                "-                    this.cfg.getProperty(DEF_CFG.PAGEDATE.key).getFullYear() == dCellDate.getFullYear()) || this.cfg.getProperty(DEF_CFG.OOM_SELECT.key)) {",
                "-                    Dom.removeClass(cell, this.Style.CSS_CELL_SELECTED);",
                "-                }",
                "-                selected.splice(cellDateIndex, 1);",
                "-            }",
                "-",
                "-            if (this.parent) {",
                "-                this.parent.cfg.setProperty(DEF_CFG.SELECTED.key, selected);",
                "-            } else {",
                "-                this.cfg.setProperty(DEF_CFG.SELECTED.key, selected);",
                "-            }",
                "-",
                "-            this.deselectEvent.fire([selectDate]);",
                "-        }",
                "-",
                "-        return this.getSelectedDates();",
                "-    },",
                "-",
                "-    /**",
                "-    * Deselects all dates on the current calendar.",
                "-    * @method deselectAll",
                "-    * @return {Date[]}  Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    *      Assuming that this function executes properly, the return value should be an empty array.",
                "-    *      However, the empty array is returned for the sake of being able to check the selection status",
                "-    *      of the calendar.",
                "-    */",
                "-    deselectAll : function() {",
                "-        this.beforeDeselectEvent.fire();",
                "-        ",
                "-        var cfgSelected = DEF_CFG.SELECTED.key,",
                "-            selected = this.cfg.getProperty(cfgSelected),",
                "-            count = selected.length,",
                "-            sel = selected.concat();",
                "-",
                "-        if (this.parent) {",
                "-            this.parent.cfg.setProperty(cfgSelected, []);",
                "-        } else {",
                "-            this.cfg.setProperty(cfgSelected, []);",
                "-        }",
                "-        ",
                "-        if (count > 0) {",
                "-            this.deselectEvent.fire(sel);",
                "-        }",
                "-    ",
                "-        return this.getSelectedDates();",
                "-    },",
                "-    ",
                "-    // END SELECTION METHODS",
                "-    ",
                "-    // BEGIN TYPE CONVERSION METHODS",
                "-    ",
                "-    /**",
                "-    * Converts a date (either a JavaScript Date object, or a date string) to the internal data structure",
                "-    * used to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].",
                "-    * @method _toFieldArray",
                "-    * @private",
                "-    * @param {String/Date/Date[]} date The date string of dates to deselect in the current calendar. Valid formats are",
                "-    *        individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).",
                "-    *        Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).",
                "-    *        This method can also take a JavaScript Date object or an array of Date objects. ",
                "-    * @return {Array[](Number[])} Array of date field arrays",
                "-    */",
                "-    _toFieldArray : function(date) {",
                "-        var returnDate = [];",
                "-    ",
                "-        if (date instanceof Date) {",
                "-            returnDate = [[date.getFullYear(), date.getMonth()+1, date.getDate()]];",
                "-        } else if (Lang.isString(date)) {",
                "-            returnDate = this._parseDates(date);",
                "-        } else if (Lang.isArray(date)) {",
                "-            for (var i=0;i<date.length;++i) {",
                "-                var d = date[i];",
                "-                returnDate[returnDate.length] = [d.getFullYear(),d.getMonth()+1,d.getDate()];",
                "-            }",
                "-        }",
                "-        ",
                "-        return returnDate;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array",
                "-    * is the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.",
                "-    * ",
                "-    * @method toDate",
                "-    * @param {Number[]} dateFieldArray The date field array to convert to a JavaScript Date.",
                "-    * @return {Date} JavaScript Date object representing the date field array.",
                "-    */",
                "-    toDate : function(dateFieldArray) {",
                "-        return this._toDate(dateFieldArray);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.",
                "-    * @method _toDate",
                "-    * @private",
                "-    * @deprecated Made public, toDate ",
                "-    * @param {Number[]}  dateFieldArray The date field array to convert to a JavaScript Date.",
                "-    * @return {Date} JavaScript Date object representing the date field array",
                "-    */",
                "-    _toDate : function(dateFieldArray) {",
                "-        if (dateFieldArray instanceof Date) {",
                "-            return dateFieldArray;",
                "-        } else {",
                "-            return DateMath.getDate(dateFieldArray[0],dateFieldArray[1]-1,dateFieldArray[2]);",
                "-        }",
                "-    },",
                "-    ",
                "-    // END TYPE CONVERSION METHODS ",
                "-    ",
                "-    // BEGIN UTILITY METHODS",
                "-    ",
                "-    /**",
                "-    * Determines if 2 field arrays are equal.",
                "-    * @method _fieldArraysAreEqual",
                "-    * @private",
                "-    * @param {Number[]} array1 The first date field array to compare",
                "-    * @param {Number[]} array2 The first date field array to compare",
                "-    * @return {Boolean} The boolean that represents the equality of the two arrays",
                "-    */",
                "-    _fieldArraysAreEqual : function(array1, array2) {",
                "-        var match = false;",
                "-    ",
                "-        if (array1[0]==array2[0]&&array1[1]==array2[1]&&array1[2]==array2[2]) {",
                "-            match=true; ",
                "-        }",
                "-    ",
                "-        return match;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.",
                "-    * @method _indexOfSelectedFieldArray",
                "-    * @private",
                "-    * @param {Number[]}  find The date field array to search for",
                "-    * @return {Number}   The index of the date field array within the collection of selected dates.",
                "-    *        -1 will be returned if the date is not found.",
                "-    */",
                "-    _indexOfSelectedFieldArray : function(find) {",
                "-        var selected = -1,",
                "-            seldates = this.cfg.getProperty(DEF_CFG.SELECTED.key);",
                "-    ",
                "-        for (var s=0;s<seldates.length;++s) {",
                "-            var sArray = seldates[s];",
                "-            if (find[0]==sArray[0]&&find[1]==sArray[1]&&find[2]==sArray[2]) {",
                "-                selected = s;",
                "-                break;",
                "-            }",
                "-        }",
                "-    ",
                "-        return selected;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Determines whether a given date is OOM (out of month).",
                "-    * @method isDateOOM",
                "-    * @param {Date} date The JavaScript Date object for which to check the OOM status",
                "-    * @return {Boolean} true if the date is OOM",
                "-    */",
                "-    isDateOOM : function(date) {",
                "-        return (date.getMonth() != this.cfg.getProperty(DEF_CFG.PAGEDATE.key).getMonth());",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate).",
                "-    *",
                "-    * @method isDateOOB",
                "-    * @param {Date} date The JavaScript Date object for which to check the OOB status",
                "-    * @return {Boolean} true if the date is OOB",
                "-    */",
                "-    isDateOOB : function(date) {",
                "-        var minDate = this.cfg.getProperty(DEF_CFG.MINDATE.key),",
                "-            maxDate = this.cfg.getProperty(DEF_CFG.MAXDATE.key),",
                "-            dm = DateMath;",
                "-        ",
                "-        if (minDate) {",
                "-            minDate = dm.clearTime(minDate);",
                "-        } ",
                "-        if (maxDate) {",
                "-            maxDate = dm.clearTime(maxDate);",
                "-        }",
                "-    ",
                "-        var clearedDate = new Date(date.getTime());",
                "-        clearedDate = dm.clearTime(clearedDate);",
                "-    ",
                "-        return ((minDate && clearedDate.getTime() < minDate.getTime()) || (maxDate && clearedDate.getTime() > maxDate.getTime()));",
                "-    },",
                "-    ",
                "-    /**",
                "-     * Parses a pagedate configuration property value. The value can either be specified as a string of form \"mm/yyyy\" or a Date object ",
                "-     * and is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today's date are used to create the Date object ",
                "-     * @method _parsePageDate",
                "-     * @private",
                "-     * @param {Date|String} date Pagedate value which needs to be parsed",
                "-     * @return {Date} The Date object representing the pagedate",
                "-     */",
                "-    _parsePageDate : function(date) {",
                "-        var parsedDate;",
                "-",
                "-        if (date) {",
                "-            if (date instanceof Date) {",
                "-                parsedDate = DateMath.findMonthStart(date);",
                "-            } else {",
                "-                var month, year, aMonthYear;",
                "-                aMonthYear = date.split(this.cfg.getProperty(DEF_CFG.DATE_FIELD_DELIMITER.key));",
                "-                month = parseInt(aMonthYear[this.cfg.getProperty(DEF_CFG.MY_MONTH_POSITION.key)-1], 10)-1;",
                "-                year = parseInt(aMonthYear[this.cfg.getProperty(DEF_CFG.MY_YEAR_POSITION.key)-1], 10) - this.Locale.YEAR_OFFSET;",
                "-",
                "-                parsedDate = DateMath.getDate(year, month, 1);",
                "-            }",
                "-        } else {",
                "-            parsedDate = DateMath.getDate(this.today.getFullYear(), this.today.getMonth(), 1);",
                "-        }",
                "-        return parsedDate;",
                "-    },",
                "-    ",
                "-    // END UTILITY METHODS",
                "-    ",
                "-    // BEGIN EVENT HANDLERS",
                "-    ",
                "-    /**",
                "-    * Event executed before a date is selected in the calendar widget.",
                "-    * @deprecated Event handlers for this event should be susbcribed to beforeSelectEvent.",
                "-    */",
                "-    onBeforeSelect : function() {",
                "-        if (this.cfg.getProperty(DEF_CFG.MULTI_SELECT.key) === false) {",
                "-            if (this.parent) {",
                "-                this.parent.callChildFunction(\"clearAllBodyCellStyles\", this.Style.CSS_CELL_SELECTED);",
                "-                this.parent.deselectAll();",
                "-            } else {",
                "-                this.clearAllBodyCellStyles(this.Style.CSS_CELL_SELECTED);",
                "-                this.deselectAll();",
                "-            }",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Event executed when a date is selected in the calendar widget.",
                "-    * @param {Array} selected An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]",
                "-    * @deprecated Event handlers for this event should be susbcribed to selectEvent.",
                "-    */",
                "-    onSelect : function(selected) { },",
                "-    ",
                "-    /**",
                "-    * Event executed before a date is deselected in the calendar widget.",
                "-    * @deprecated Event handlers for this event should be susbcribed to beforeDeselectEvent.",
                "-    */",
                "-    onBeforeDeselect : function() { },",
                "-    ",
                "-    /**",
                "-    * Event executed when a date is deselected in the calendar widget.",
                "-    * @param {Array} selected An array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]",
                "-    * @deprecated Event handlers for this event should be susbcribed to deselectEvent.",
                "-    */",
                "-    onDeselect : function(deselected) { },",
                "-    ",
                "-    /**",
                "-    * Event executed when the user navigates to a different calendar page.",
                "-    * @deprecated Event handlers for this event should be susbcribed to changePageEvent.",
                "-    */",
                "-    onChangePage : function() {",
                "-        this.render();",
                "-    },",
                "-",
                "-    /**",
                "-    * Event executed when the calendar widget is rendered.",
                "-    * @deprecated Event handlers for this event should be susbcribed to renderEvent.",
                "-    */",
                "-    onRender : function() { },",
                "-",
                "-    /**",
                "-    * Event executed when the calendar widget is reset to its original state.",
                "-    * @deprecated Event handlers for this event should be susbcribed to resetEvemt.",
                "-    */",
                "-    onReset : function() { this.render(); },",
                "-",
                "-    /**",
                "-    * Event executed when the calendar widget is completely cleared to the current month with no selections.",
                "-    * @deprecated Event handlers for this event should be susbcribed to clearEvent.",
                "-    */",
                "-    onClear : function() { this.render(); },",
                "-    ",
                "-    /**",
                "-    * Validates the calendar widget. This method has no default implementation",
                "-    * and must be extended by subclassing the widget.",
                "-    * @return Should return true if the widget validates, and false if",
                "-    * it doesn't.",
                "-    * @type Boolean",
                "-    */",
                "-    validate : function() { return true; },",
                "-    ",
                "-    // END EVENT HANDLERS",
                "-    ",
                "-    // BEGIN DATE PARSE METHODS",
                "-    ",
                "-    /**",
                "-    * Converts a date string to a date field array",
                "-    * @private",
                "-    * @param {String} sDate   Date string. Valid formats are mm/dd and mm/dd/yyyy.",
                "-    * @return    A date field array representing the string passed to the method",
                "-    * @type Array[](Number[])",
                "-    */",
                "-    _parseDate : function(sDate) {",
                "-        var aDate = sDate.split(this.Locale.DATE_FIELD_DELIMITER),",
                "-            rArray;",
                "-",
                "-        if (aDate.length == 2) {",
                "-            rArray = [aDate[this.Locale.MD_MONTH_POSITION-1],aDate[this.Locale.MD_DAY_POSITION-1]];",
                "-            rArray.type = Calendar.MONTH_DAY;",
                "-        } else {",
                "-            rArray = [aDate[this.Locale.MDY_YEAR_POSITION-1] - this.Locale.YEAR_OFFSET, aDate[this.Locale.MDY_MONTH_POSITION-1],aDate[this.Locale.MDY_DAY_POSITION-1]];",
                "-            rArray.type = Calendar.DATE;",
                "-        }",
                "-",
                "-        for (var i=0;i<rArray.length;i++) {",
                "-            rArray[i] = parseInt(rArray[i], 10);",
                "-        }",
                "-    ",
                "-        return rArray;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Converts a multi or single-date string to an array of date field arrays",
                "-    * @private",
                "-    * @param {String} sDates  Date string with one or more comma-delimited dates. Valid formats are mm/dd, mm/dd/yyyy, mm/dd/yyyy-mm/dd/yyyy",
                "-    * @return       An array of date field arrays",
                "-    * @type Array[](Number[])",
                "-    */",
                "-    _parseDates : function(sDates) {",
                "-        var aReturn = [],",
                "-            aDates = sDates.split(this.Locale.DATE_DELIMITER);",
                "-        ",
                "-        for (var d=0;d<aDates.length;++d) {",
                "-            var sDate = aDates[d];",
                "-    ",
                "-            if (sDate.indexOf(this.Locale.DATE_RANGE_DELIMITER) != -1) {",
                "-                // This is a range",
                "-                var aRange = sDate.split(this.Locale.DATE_RANGE_DELIMITER),",
                "-                    dateStart = this._parseDate(aRange[0]),",
                "-                    dateEnd = this._parseDate(aRange[1]),",
                "-                    fullRange = this._parseRange(dateStart, dateEnd);",
                "-",
                "-                aReturn = aReturn.concat(fullRange);",
                "-            } else {",
                "-                // This is not a range",
                "-                var aDate = this._parseDate(sDate);",
                "-                aReturn.push(aDate);",
                "-            }",
                "-        }",
                "-        return aReturn;",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Converts a date range to the full list of included dates",
                "-    * @private",
                "-    * @param {Number[]} startDate Date field array representing the first date in the range",
                "-    * @param {Number[]} endDate  Date field array representing the last date in the range",
                "-    * @return       An array of date field arrays",
                "-    * @type Array[](Number[])",
                "-    */",
                "-    _parseRange : function(startDate, endDate) {",
                "-        var dCurrent = DateMath.add(DateMath.getDate(startDate[0],startDate[1]-1,startDate[2]),DateMath.DAY,1),",
                "-            dEnd     = DateMath.getDate(endDate[0],  endDate[1]-1,  endDate[2]),",
                "-            results = [];",
                "-",
                "-        results.push(startDate);",
                "-        while (dCurrent.getTime() <= dEnd.getTime()) {",
                "-            results.push([dCurrent.getFullYear(),dCurrent.getMonth()+1,dCurrent.getDate()]);",
                "-            dCurrent = DateMath.add(dCurrent,DateMath.DAY,1);",
                "-        }",
                "-        return results;",
                "-    },",
                "-    ",
                "-    // END DATE PARSE METHODS",
                "-    ",
                "-    // BEGIN RENDERER METHODS",
                "-    ",
                "-    /**",
                "-    * Resets the render stack of the current calendar to its original pre-render value.",
                "-    */",
                "-    resetRenderers : function() {",
                "-        this.renderStack = this._renderStack.concat();",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and ",
                "-     * addWeekdayRenderer methods. Calendar's render method needs to be called after removing renderers ",
                "-     * to re-render the Calendar without custom renderers applied.",
                "-     */",
                "-    removeRenderers : function() {",
                "-        this._renderStack = [];",
                "-        this.renderStack = [];",
                "-    },",
                "-",
                "-    /**",
                "-    * Clears the inner HTML, CSS class and style information from the specified cell.",
                "-    * @method clearElement",
                "-    * @param {HTMLTableCellElement} cell The cell to clear",
                "-    */ ",
                "-    clearElement : function(cell) {",
                "-        cell.innerHTML = \"&#160;\";",
                "-        cell.className=\"\";",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Adds a renderer to the render stack. The function reference passed to this method will be executed",
                "-    * when a date cell matches the conditions specified in the date string for this renderer.",
                "-    * ",
                "-    * <p>NOTE: The contents of the cell set by the renderer will be added to the DOM as HTML. The custom renderer implementation should ",
                "-    * escape markup used to set the cell contents, if coming from an external source.<p>",
                "-    * @method addRenderer",
                "-    * @param {String} sDates  A date string to associate with the specified renderer. Valid formats",
                "-    *         include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)",
                "-    * @param {Function} fnRender The function executed to render cells that match the render rules for this renderer.",
                "-    */",
                "-    addRenderer : function(sDates, fnRender) {",
                "-        var aDates = this._parseDates(sDates);",
                "-        for (var i=0;i<aDates.length;++i) {",
                "-            var aDate = aDates[i];",
                "-        ",
                "-            if (aDate.length == 2) { // this is either a range or a month/day combo",
                "-                if (aDate[0] instanceof Array) { // this is a range",
                "-                    this._addRenderer(Calendar.RANGE,aDate,fnRender);",
                "-                } else { // this is a month/day combo",
                "-                    this._addRenderer(Calendar.MONTH_DAY,aDate,fnRender);",
                "-                }",
                "-            } else if (aDate.length == 3) {",
                "-                this._addRenderer(Calendar.DATE,aDate,fnRender);",
                "-            }",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * The private method used for adding cell renderers to the local render stack.",
                "-    * This method is called by other methods that set the renderer type prior to the method call.",
                "-    * @method _addRenderer",
                "-    * @private",
                "-    * @param {String} type  The type string that indicates the type of date renderer being added.",
                "-    *         Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,",
                "-    *         YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH",
                "-    * @param {Array}  aDates  An array of dates used to construct the renderer. The format varies based",
                "-    *         on the renderer type",
                "-    * @param {Function} fnRender The function executed to render cells that match the render rules for this renderer.",
                "-    */",
                "-    _addRenderer : function(type, aDates, fnRender) {",
                "-        var add = [type,aDates,fnRender];",
                "-        this.renderStack.unshift(add); ",
                "-        this._renderStack = this.renderStack.concat();",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds a month renderer to the render stack. The function reference passed to this method will be executed",
                "-    * when a date cell matches the month passed to this method",
                "-    * ",
                "-    * <p>NOTE: The contents of the cell set by the renderer will be added to the DOM as HTML. The custom renderer implementation should ",
                "-    * escape markup used to set the cell contents, if coming from an external source.<p>",
                "-    * @method addMonthRenderer",
                "-    * @param {Number} month  The month (1-12) to associate with this renderer",
                "-    * @param {Function} fnRender The function executed to render cells that match the render rules for this renderer.",
                "-    */",
                "-    addMonthRenderer : function(month, fnRender) {",
                "-        this._addRenderer(Calendar.MONTH,[month],fnRender);",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds a weekday renderer to the render stack. The function reference passed to this method will be executed",
                "-    * when a date cell matches the weekday passed to this method.",
                "-    *",
                "-    * <p>NOTE: The contents of the cell set by the renderer will be added to the DOM as HTML. The custom renderer implementation should ",
                "-    * escape HTML used to set the cell contents, if coming from an external source.<p>",
                "-    *",
                "-    * @method addWeekdayRenderer",
                "-    * @param {Number} weekday  The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer",
                "-    * @param {Function} fnRender The function executed to render cells that match the render rules for this renderer.",
                "-    */",
                "-    addWeekdayRenderer : function(weekday, fnRender) {",
                "-        this._addRenderer(Calendar.WEEKDAY,[weekday],fnRender);",
                "-    },",
                "-",
                "-    // END RENDERER METHODS",
                "-    ",
                "-    // BEGIN CSS METHODS",
                "-    ",
                "-    /**",
                "-    * Removes all styles from all body cells in the current calendar table.",
                "-    * @method clearAllBodyCellStyles",
                "-    * @param {style} style The CSS class name to remove from all calendar body cells",
                "-    */",
                "-    clearAllBodyCellStyles : function(style) {",
                "-        for (var c=0;c<this.cells.length;++c) {",
                "-            Dom.removeClass(this.cells[c],style);",
                "-        }",
                "-    },",
                "-    ",
                "-    // END CSS METHODS",
                "-    ",
                "-    // BEGIN GETTER/SETTER METHODS",
                "-    /**",
                "-    * Sets the calendar's month explicitly",
                "-    * @method setMonth",
                "-    * @param {Number} month  The numeric month, from 0 (January) to 11 (December)",
                "-    */",
                "-    setMonth : function(month) {",
                "-        var cfgPageDate = DEF_CFG.PAGEDATE.key,",
                "-            current = this.cfg.getProperty(cfgPageDate);",
                "-        current.setMonth(parseInt(month, 10));",
                "-        this.cfg.setProperty(cfgPageDate, current);",
                "-    },",
                "-",
                "-    /**",
                "-    * Sets the calendar's year explicitly.",
                "-    * @method setYear",
                "-    * @param {Number} year  The numeric 4-digit year",
                "-    */",
                "-    setYear : function(year) {",
                "-        var cfgPageDate = DEF_CFG.PAGEDATE.key,",
                "-            current = this.cfg.getProperty(cfgPageDate);",
                "-",
                "-        current.setFullYear(parseInt(year, 10) - this.Locale.YEAR_OFFSET);",
                "-        this.cfg.setProperty(cfgPageDate, current);",
                "-    },",
                "-",
                "-    /**",
                "-    * Gets the list of currently selected dates from the calendar.",
                "-    * @method getSelectedDates",
                "-    * @return {Date[]} An array of currently selected JavaScript Date objects.",
                "-    */",
                "-    getSelectedDates : function() {",
                "-        var returnDates = [],",
                "-            selected = this.cfg.getProperty(DEF_CFG.SELECTED.key);",
                "-",
                "-        for (var d=0;d<selected.length;++d) {",
                "-            var dateArray = selected[d];",
                "-",
                "-            var date = DateMath.getDate(dateArray[0],dateArray[1]-1,dateArray[2]);",
                "-            returnDates.push(date);",
                "-        }",
                "-",
                "-        returnDates.sort( function(a,b) { return a-b; } );",
                "-        return returnDates;",
                "-    },",
                "-",
                "-    /// END GETTER/SETTER METHODS ///",
                "-    ",
                "-    /**",
                "-    * Hides the Calendar's outer container from view.",
                "-    * @method hide",
                "-    */",
                "-    hide : function() {",
                "-        if (this.beforeHideEvent.fire()) {",
                "-            this.oDomContainer.style.display = \"none\";",
                "-            this.hideEvent.fire();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Shows the Calendar's outer container.",
                "-    * @method show",
                "-    */",
                "-    show : function() {",
                "-        if (this.beforeShowEvent.fire()) {",
                "-            this.oDomContainer.style.display = \"block\";",
                "-            this.showEvent.fire();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Returns a string representing the current browser.",
                "-    * @deprecated As of 2.3.0, environment information is available in YAHOO.env.ua",
                "-    * @see YAHOO.env.ua",
                "-    * @property browser",
                "-    * @type String",
                "-    */",
                "-    browser : (function() {",
                "-                var ua = navigator.userAgent.toLowerCase();",
                "-                      if (ua.indexOf('opera')!=-1) { // Opera (check first in case of spoof)",
                "-                         return 'opera';",
                "-                      } else if (ua.indexOf('msie 7')!=-1) { // IE7",
                "-                         return 'ie7';",
                "-                      } else if (ua.indexOf('msie') !=-1) { // IE",
                "-                         return 'ie';",
                "-                      } else if (ua.indexOf('safari')!=-1) { // Safari (check before Gecko because it includes \"like Gecko\")",
                "-                         return 'safari';",
                "-                      } else if (ua.indexOf('gecko') != -1) { // Gecko",
                "-                         return 'gecko';",
                "-                      } else {",
                "-                         return false;",
                "-                      }",
                "-                })(),",
                "-    /**",
                "-    * Returns a string representation of the object.",
                "-    * @method toString",
                "-    * @return {String} A string representation of the Calendar object.",
                "-    */",
                "-    toString : function() {",
                "-        return \"Calendar \" + this.id;",
                "-    },",
                "-",
                "-    /**",
                "-     * Destroys the Calendar instance. The method will remove references",
                "-     * to HTML elements, remove any event listeners added by the Calendar,",
                "-     * and destroy the Config and CalendarNavigator instances it has created.",
                "-     *",
                "-     * @method destroy",
                "-     */",
                "-    destroy : function() {",
                "-",
                "-        if (this.beforeDestroyEvent.fire()) {",
                "-            var cal = this;",
                "-",
                "-            // Child objects",
                "-            if (cal.navigator) {",
                "-                cal.navigator.destroy();",
                "-            }",
                "-",
                "-            if (cal.cfg) {",
                "-                cal.cfg.destroy();",
                "-            }",
                "-",
                "-            // DOM event listeners",
                "-            Event.purgeElement(cal.oDomContainer, true);",
                "-",
                "-            // Generated markup/DOM - Not removing the container DIV since we didn't create it.",
                "-            Dom.removeClass(cal.oDomContainer, cal.Style.CSS_WITH_TITLE);",
                "-            Dom.removeClass(cal.oDomContainer, cal.Style.CSS_CONTAINER);",
                "-            Dom.removeClass(cal.oDomContainer, cal.Style.CSS_SINGLE);",
                "-            cal.oDomContainer.innerHTML = \"\";",
                "-",
                "-            // JS-to-DOM references",
                "-            cal.oDomContainer = null;",
                "-            cal.cells = null;",
                "-",
                "-            this.destroyEvent.fire();",
                "-        }",
                "-    }",
                "-};",
                "-",
                "-YAHOO.widget.Calendar = Calendar;",
                "-",
                "-/**",
                "-* @namespace YAHOO.widget",
                "-* @class Calendar_Core",
                "-* @extends YAHOO.widget.Calendar",
                "-* @deprecated The old Calendar_Core class is no longer necessary.",
                "-*/",
                "-YAHOO.widget.Calendar_Core = YAHOO.widget.Calendar;",
                "-",
                "-YAHOO.widget.Cal_Core = YAHOO.widget.Calendar;",
                "-",
                "-})();",
                "-(function() {",
                "-",
                "-    var Dom = YAHOO.util.Dom,",
                "-        DateMath = YAHOO.widget.DateMath,",
                "-        Event = YAHOO.util.Event,",
                "-        Lang = YAHOO.lang,",
                "-        Calendar = YAHOO.widget.Calendar;",
                "-",
                "-/**",
                "-* YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates",
                "-* the ability to have multi-page calendar views that share a single dataset and are",
                "-* dependent on each other.",
                "-*",
                "-* The calendar group instance will refer to each of its elements using a 0-based index.",
                "-* For example, to construct the placeholder for a calendar group widget with id \"cal1\" and",
                "-* containerId of \"cal1Container\", the markup would be as follows:",
                "-*   <xmp>",
                "-*       <div id=\"cal1Container_0\"></div>",
                "-*       <div id=\"cal1Container_1\"></div>",
                "-*   </xmp>",
                "-* The tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers.",
                "-*",
                "-* <p>",
                "-* <strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>",
                "-* The CalendarGroup can be constructed by simply providing a container ID string, ",
                "-* or a reference to a container DIV HTMLElement (the element needs to exist ",
                "-* in the document).",
                "-* ",
                "-* E.g.:",
                "-*   <xmp>",
                "-*       var c = new YAHOO.widget.CalendarGroup(\"calContainer\", configOptions);",
                "-*   </xmp>",
                "-* or:",
                "-*   <xmp>",
                "-*       var containerDiv = YAHOO.util.Dom.get(\"calContainer\");",
                "-*       var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);",
                "-*   </xmp>",
                "-* </p>",
                "-* <p>",
                "-* If not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.",
                "-* For example if an ID is not provided, and the container's ID is \"calContainer\", the CalendarGroup's ID will be set to \"calContainer_t\".",
                "-* </p>",
                "-* ",
                "-* @namespace YAHOO.widget",
                "-* @class CalendarGroup",
                "-* @constructor",
                "-* @param {String} id optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional.",
                "-* @param {String | HTMLElement} container The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document.",
                "-* @param {Object} config optional The configuration object containing the initial configuration values for the CalendarGroup.",
                "-*/",
                "-function CalendarGroup(id, containerId, config) {",
                "-    if (arguments.length > 0) {",
                "-        this.init.apply(this, arguments);",
                "-    }",
                "-}",
                "-",
                "-/**",
                "-* The set of default Config property keys and values for the CalendarGroup.",
                "-* ",
                "-* <p>",
                "-* NOTE: This property is made public in order to allow users to change ",
                "-* the default values of configuration properties. Users should not ",
                "-* modify the key string, unless they are overriding the Calendar implementation",
                "-* </p>",
                "-*",
                "-* @property YAHOO.widget.CalendarGroup.DEFAULT_CONFIG",
                "-* @static",
                "-* @type Object An object with key/value pairs, the key being the ",
                "-* uppercase configuration property name and the value being an objec ",
                "-* literal with a key string property, and a value property, specifying the ",
                "-* default value of the property ",
                "-*/",
                "-",
                "-/**",
                "-* The set of default Config property keys and values for the CalendarGroup",
                "-* @property YAHOO.widget.CalendarGroup._DEFAULT_CONFIG",
                "-* @deprecated Made public. See the public DEFAULT_CONFIG property for details",
                "-* @private",
                "-* @static",
                "-* @type Object",
                "-*/",
                "-CalendarGroup.DEFAULT_CONFIG = CalendarGroup._DEFAULT_CONFIG = Calendar.DEFAULT_CONFIG;",
                "-CalendarGroup.DEFAULT_CONFIG.PAGES = {key:\"pages\", value:2};",
                "-",
                "-var DEF_CFG = CalendarGroup.DEFAULT_CONFIG;",
                "-",
                "-CalendarGroup.prototype = {",
                "-",
                "-    /**",
                "-    * Initializes the calendar group. All subclasses must call this method in order for the",
                "-    * group to be initialized properly.",
                "-    * @method init",
                "-    * @param {String} id optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional.",
                "-    * @param {String | HTMLElement} container The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document.",
                "-    * @param {Object} config optional The configuration object containing the initial configuration values for the CalendarGroup.",
                "-    */",
                "-    init : function(id, container, config) {",
                "-",
                "-        // Normalize 2.4.0, pre 2.4.0 args",
                "-        var nArgs = this._parseArgs(arguments);",
                "-",
                "-        id = nArgs.id;",
                "-        container = nArgs.container;",
                "-        config = nArgs.config;",
                "-",
                "-        this.oDomContainer = Dom.get(container);",
                "-",
                "-        if (!this.oDomContainer.id) {",
                "-            this.oDomContainer.id = Dom.generateId();",
                "-        }",
                "-        if (!id) {",
                "-            id = this.oDomContainer.id + \"_t\";",
                "-        }",
                "-",
                "-        /**",
                "-        * The unique id associated with the CalendarGroup",
                "-        * @property id",
                "-        * @type String",
                "-        */",
                "-        this.id = id;",
                "-",
                "-        /**",
                "-        * The unique id associated with the CalendarGroup container",
                "-        * @property containerId",
                "-        * @type String",
                "-        */",
                "-        this.containerId = this.oDomContainer.id;",
                "-",
                "-        this.initEvents();",
                "-        this.initStyles();",
                "-",
                "-        /**",
                "-        * The collection of Calendar pages contained within the CalendarGroup",
                "-        * @property pages",
                "-        * @type YAHOO.widget.Calendar[]",
                "-        */",
                "-        this.pages = [];",
                "-",
                "-        Dom.addClass(this.oDomContainer, CalendarGroup.CSS_CONTAINER);",
                "-        Dom.addClass(this.oDomContainer, CalendarGroup.CSS_MULTI_UP);",
                "-",
                "-        /**",
                "-        * The Config object used to hold the configuration variables for the CalendarGroup",
                "-        * @property cfg",
                "-        * @type YAHOO.util.Config",
                "-        */",
                "-        this.cfg = new YAHOO.util.Config(this);",
                "-",
                "-        /**",
                "-        * The local object which contains the CalendarGroup's options",
                "-        * @property Options",
                "-        * @type Object",
                "-        */",
                "-        this.Options = {};",
                "-",
                "-        /**",
                "-        * The local object which contains the CalendarGroup's locale settings",
                "-        * @property Locale",
                "-        * @type Object",
                "-        */",
                "-        this.Locale = {};",
                "-",
                "-        this.setupConfig();",
                "-",
                "-        if (config) {",
                "-            this.cfg.applyConfig(config, true);",
                "-        }",
                "-",
                "-        this.cfg.fireQueue();",
                "-",
                "-    },",
                "-",
                "-    setupConfig : function() {",
                "-",
                "-        var cfg = this.cfg;",
                "-",
                "-        /**",
                "-        * The number of pages to include in the CalendarGroup. This value can only be set once, in the CalendarGroup's constructor arguments.",
                "-        * @config pages",
                "-        * @type Number",
                "-        * @default 2",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.PAGES.key, { value:DEF_CFG.PAGES.value, validator:cfg.checkNumber, handler:this.configPages } );",
                "-",
                "-        /**",
                "-        * The positive or negative year offset from the Gregorian calendar year (assuming a January 1st rollover) to ",
                "-        * be used when displaying or parsing dates.  NOTE: All JS Date objects returned by methods, or expected as input by",
                "-        * methods will always represent the Gregorian year, in order to maintain date/month/week values.",
                "-        *",
                "-        * @config year_offset",
                "-        * @type Number",
                "-        * @default 0",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.YEAR_OFFSET.key, { value:DEF_CFG.YEAR_OFFSET.value, handler: this.delegateConfig, supercedes:DEF_CFG.YEAR_OFFSET.supercedes, suppressEvent:true } );",
                "-",
                "-        /**",
                "-        * The date to use to represent \"Today\".",
                "-        *",
                "-        * @config today",
                "-        * @type Date",
                "-        * @default Today's date",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.TODAY.key, { value: new Date(DEF_CFG.TODAY.value.getTime()), supercedes:DEF_CFG.TODAY.supercedes, handler: this.configToday, suppressEvent:false } );",
                "-",
                "-        /**",
                "-        * The month/year representing the current visible Calendar date (mm/yyyy)",
                "-        * @config pagedate",
                "-        * @type String | Date",
                "-        * @default Today's date",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.PAGEDATE.key, { value: DEF_CFG.PAGEDATE.value || new Date(DEF_CFG.TODAY.value.getTime()), handler:this.configPageDate } );",
                "-",
                "-        /**",
                "-        * The date or range of dates representing the current Calendar selection",
                "-        *",
                "-        * @config selected",
                "-        * @type String",
                "-        * @default []",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.SELECTED.key, { value:[], handler:this.configSelected } );",
                "-",
                "-        /**",
                "-        * The title to display above the CalendarGroup's month header. The title is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config title",
                "-        * @type HTML",
                "-        * @default \"\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.TITLE.key, { value:DEF_CFG.TITLE.value, handler:this.configTitle } );",
                "-",
                "-        /**",
                "-        * Whether or not a close button should be displayed for this CalendarGroup",
                "-        * @config close",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.CLOSE.key, { value:DEF_CFG.CLOSE.value, handler:this.configClose } );",
                "-",
                "-        /**",
                "-        * Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.",
                "-        * This property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be ",
                "-        * enabled if required.",
                "-        * ",
                "-        * @config iframe",
                "-        * @type Boolean",
                "-        * @default true for IE6 and below, false for all other browsers",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.IFRAME.key, { value:DEF_CFG.IFRAME.value, handler:this.configIframe, validator:cfg.checkBoolean } );",
                "-",
                "-        /**",
                "-        * The minimum selectable date in the current Calendar (mm/dd/yyyy)",
                "-        * @config mindate",
                "-        * @type String | Date",
                "-        * @default null",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MINDATE.key, { value:DEF_CFG.MINDATE.value, handler:this.delegateConfig } );",
                "-",
                "-        /**",
                "-        * The maximum selectable date in the current Calendar (mm/dd/yyyy)",
                "-        * @config maxdate",
                "-        * @type String | Date",
                "-        * @default null",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MAXDATE.key, { value:DEF_CFG.MAXDATE.value, handler:this.delegateConfig  } );",
                "-",
                "-        /**",
                "-        * True if the Calendar should allow multiple selections. False by default.",
                "-        * @config MULTI_SELECT",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MULTI_SELECT.key, { value:DEF_CFG.MULTI_SELECT.value, handler:this.delegateConfig, validator:cfg.checkBoolean } );",
                "-",
                "-        /**",
                "-        * True if the Calendar should allow selection of out-of-month dates. False by default.",
                "-        * @config OOM_SELECT",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.OOM_SELECT.key, { value:DEF_CFG.OOM_SELECT.value, handler:this.delegateConfig, validator:cfg.checkBoolean } );",
                "-",
                "-        /**",
                "-        * The weekday the week begins on. Default is 0 (Sunday).",
                "-        * @config START_WEEKDAY",
                "-        * @type number",
                "-        * @default 0",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.START_WEEKDAY.key, { value:DEF_CFG.START_WEEKDAY.value, handler:this.delegateConfig, validator:cfg.checkNumber  } );",
                "-        ",
                "-        /**",
                "-        * True if the Calendar should show weekday labels. True by default.",
                "-        * @config SHOW_WEEKDAYS",
                "-        * @type Boolean",
                "-        * @default true",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.SHOW_WEEKDAYS.key, { value:DEF_CFG.SHOW_WEEKDAYS.value, handler:this.delegateConfig, validator:cfg.checkBoolean } );",
                "-        ",
                "-        /**",
                "-        * True if the Calendar should show week row headers. False by default.",
                "-        * @config SHOW_WEEK_HEADER",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.SHOW_WEEK_HEADER.key,{ value:DEF_CFG.SHOW_WEEK_HEADER.value, handler:this.delegateConfig, validator:cfg.checkBoolean } );",
                "-        ",
                "-        /**",
                "-        * True if the Calendar should show week row footers. False by default.",
                "-        * @config SHOW_WEEK_FOOTER",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.SHOW_WEEK_FOOTER.key,{ value:DEF_CFG.SHOW_WEEK_FOOTER.value, handler:this.delegateConfig, validator:cfg.checkBoolean } );",
                "-        ",
                "-        /**",
                "-        * True if the Calendar should suppress weeks that are not a part of the current month. False by default.",
                "-        * @config HIDE_BLANK_WEEKS",
                "-        * @type Boolean",
                "-        * @default false",
                "-        */  ",
                "-        cfg.addProperty(DEF_CFG.HIDE_BLANK_WEEKS.key,{ value:DEF_CFG.HIDE_BLANK_WEEKS.value, handler:this.delegateConfig, validator:cfg.checkBoolean } );",
                "-",
                "-        /**",
                "-        * The image URL that should be used for the left navigation arrow. The image URL is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config NAV_ARROW_LEFT",
                "-        * @type String",
                "-        * @deprecated You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"",
                "-        * @default null",
                "-        */  ",
                "-        cfg.addProperty(DEF_CFG.NAV_ARROW_LEFT.key, { value:DEF_CFG.NAV_ARROW_LEFT.value, handler:this.delegateConfig } );",
                "-",
                "-        /**",
                "-        * The image URL that should be used for the right navigation arrow. The image URL is inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config NAV_ARROW_RIGHT",
                "-        * @type String",
                "-        * @deprecated You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"",
                "-        * @default null",
                "-        */  ",
                "-        cfg.addProperty(DEF_CFG.NAV_ARROW_RIGHT.key, { value:DEF_CFG.NAV_ARROW_RIGHT.value, handler:this.delegateConfig } );",
                "-    ",
                "-        // Locale properties",
                "-        ",
                "-        /**",
                "-        * The short month labels for the current locale. The month labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config MONTHS_SHORT",
                "-        * @type HTML[]",
                "-        * @default [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MONTHS_SHORT.key, { value:DEF_CFG.MONTHS_SHORT.value, handler:this.delegateConfig } );",
                "-        ",
                "-        /**",
                "-        * The long month labels for the current locale. The month labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config MONTHS_LONG",
                "-        * @type HTML[]",
                "-        * @default [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MONTHS_LONG.key,  { value:DEF_CFG.MONTHS_LONG.value, handler:this.delegateConfig } );",
                "-        ",
                "-        /**",
                "-        * The 1-character weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_1CHAR",
                "-        * @type HTML[]",
                "-        * @default [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_1CHAR.key, { value:DEF_CFG.WEEKDAYS_1CHAR.value, handler:this.delegateConfig } );",
                "-        ",
                "-        /**",
                "-        * The short weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_SHORT",
                "-        * @type HTML[]",
                "-        * @default [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_SHORT.key, { value:DEF_CFG.WEEKDAYS_SHORT.value, handler:this.delegateConfig } );",
                "-        ",
                "-        /**",
                "-        * The medium weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_MEDIUM",
                "-        * @type HTML[]",
                "-        * @default [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_MEDIUM.key, { value:DEF_CFG.WEEKDAYS_MEDIUM.value, handler:this.delegateConfig } );",
                "-        ",
                "-        /**",
                "-        * The long weekday labels for the current locale. The weekday labels are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-        * @config WEEKDAYS_LONG",
                "-        * @type HTML[]",
                "-        * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.WEEKDAYS_LONG.key, { value:DEF_CFG.WEEKDAYS_LONG.value, handler:this.delegateConfig } );",
                "-    ",
                "-        /**",
                "-        * The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".",
                "-        * @config LOCALE_MONTHS",
                "-        * @type String",
                "-        * @default \"long\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.LOCALE_MONTHS.key, { value:DEF_CFG.LOCALE_MONTHS.value, handler:this.delegateConfig } );",
                "-    ",
                "-        /**",
                "-        * The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".",
                "-        * @config LOCALE_WEEKDAYS",
                "-        * @type String",
                "-        * @default \"short\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.LOCALE_WEEKDAYS.key, { value:DEF_CFG.LOCALE_WEEKDAYS.value, handler:this.delegateConfig } );",
                "-    ",
                "-        /**",
                "-        * The value used to delimit individual dates in a date string passed to various Calendar functions.",
                "-        * @config DATE_DELIMITER",
                "-        * @type String",
                "-        * @default \",\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.DATE_DELIMITER.key,  { value:DEF_CFG.DATE_DELIMITER.value, handler:this.delegateConfig } );",
                "-    ",
                "-        /**",
                "-        * The value used to delimit date fields in a date string passed to various Calendar functions.",
                "-        * @config DATE_FIELD_DELIMITER",
                "-        * @type String",
                "-        * @default \"/\"",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.DATE_FIELD_DELIMITER.key,{ value:DEF_CFG.DATE_FIELD_DELIMITER.value, handler:this.delegateConfig } );",
                "-    ",
                "-        /**",
                "-        * The value used to delimit date ranges in a date string passed to various Calendar functions.",
                "-        * @config DATE_RANGE_DELIMITER",
                "-        * @type String",
                "-        * @default \"-\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.DATE_RANGE_DELIMITER.key,{ value:DEF_CFG.DATE_RANGE_DELIMITER.value, handler:this.delegateConfig } );",
                "-    ",
                "-        /**",
                "-        * The position of the month in a month/year date string",
                "-        * @config MY_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_MONTH_POSITION.key, { value:DEF_CFG.MY_MONTH_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The position of the year in a month/year date string",
                "-        * @config MY_YEAR_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MY_YEAR_POSITION.key, { value:DEF_CFG.MY_YEAR_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The position of the month in a month/day date string",
                "-        * @config MD_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MD_MONTH_POSITION.key, { value:DEF_CFG.MD_MONTH_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The position of the day in a month/year date string",
                "-        * @config MD_DAY_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MD_DAY_POSITION.key,  { value:DEF_CFG.MD_DAY_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The position of the month in a month/day/year date string",
                "-        * @config MDY_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MDY_MONTH_POSITION.key, { value:DEF_CFG.MDY_MONTH_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The position of the day in a month/day/year date string",
                "-        * @config MDY_DAY_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MDY_DAY_POSITION.key, { value:DEF_CFG.MDY_DAY_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-        ",
                "-        /**",
                "-        * The position of the year in a month/day/year date string",
                "-        * @config MDY_YEAR_POSITION",
                "-        * @type Number",
                "-        * @default 3",
                "-        */ ",
                "-        cfg.addProperty(DEF_CFG.MDY_YEAR_POSITION.key, { value:DEF_CFG.MDY_YEAR_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the month in the month year label string used as the Calendar header",
                "-        * @config MY_LABEL_MONTH_POSITION",
                "-        * @type Number",
                "-        * @default 1",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_MONTH_POSITION.key, { value:DEF_CFG.MY_LABEL_MONTH_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-    ",
                "-        /**",
                "-        * The position of the year in the month year label string used as the Calendar header",
                "-        * @config MY_LABEL_YEAR_POSITION",
                "-        * @type Number",
                "-        * @default 2",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_YEAR_POSITION.key, { value:DEF_CFG.MY_LABEL_YEAR_POSITION.value, handler:this.delegateConfig, validator:cfg.checkNumber } );",
                "-",
                "-        /**",
                "-        * The suffix used after the month when rendering the Calendar header",
                "-        * @config MY_LABEL_MONTH_SUFFIX",
                "-        * @type String",
                "-        * @default \" \"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_MONTH_SUFFIX.key, { value:DEF_CFG.MY_LABEL_MONTH_SUFFIX.value, handler:this.delegateConfig } );",
                "-        ",
                "-        /**",
                "-        * The suffix used after the year when rendering the Calendar header",
                "-        * @config MY_LABEL_YEAR_SUFFIX",
                "-        * @type String",
                "-        * @default \"\"",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.MY_LABEL_YEAR_SUFFIX.key, { value:DEF_CFG.MY_LABEL_YEAR_SUFFIX.value, handler:this.delegateConfig } );",
                "-",
                "-        /**",
                "-        * Configuration for the Month/Year CalendarNavigator UI which allows the user to jump directly to a ",
                "-        * specific Month/Year without having to scroll sequentially through months.",
                "-        * <p>",
                "-        * Setting this property to null (default value) or false, will disable the CalendarNavigator UI.",
                "-        * </p>",
                "-        * <p>",
                "-        * Setting this property to true will enable the CalendarNavigatior UI with the default CalendarNavigator configuration values.",
                "-        * </p>",
                "-        * <p>",
                "-        * This property can also be set to an object literal containing configuration properties for the CalendarNavigator UI.",
                "-        * The configuration object expects the the following case-sensitive properties, with the \"strings\" property being a nested object.",
                "-        * Any properties which are not provided will use the default values (defined in the CalendarNavigator class).",
                "-        * </p>",
                "-        * <dl>",
                "-        * <dt>strings</dt>",
                "-        * <dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI. The strings are inserted into the DOM as HTML, and should be escaped by the implementor if coming from an external source. ",
                "-        *     <dl>",
                "-        *         <dt>month</dt><dd><em>HTML</em> : The markup to use for the month label. Defaults to \"Month\".</dd>",
                "-        *         <dt>year</dt><dd><em>HTML</em> : The markup to use for the year label. Defaults to \"Year\".</dd>",
                "-        *         <dt>submit</dt><dd><em>HTML</em> : The markup to use for the submit button label. Defaults to \"Okay\".</dd>",
                "-        *         <dt>cancel</dt><dd><em>HTML</em> : The markup to use for the cancel button label. Defaults to \"Cancel\".</dd>",
                "-        *         <dt>invalidYear</dt><dd><em>HTML</em> : The markup to use for invalid year values. Defaults to \"Year needs to be a number\".</dd>",
                "-        *     </dl>",
                "-        * </dd>",
                "-        * <dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>",
                "-        * <dt>initialFocus</dt><dd><em>String</em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"</dd>",
                "-        * </dl>",
                "-        * <p>E.g.</p>",
                "-        * <pre>",
                "-        * var navConfig = {",
                "-        *   strings: {",
                "-        *    month:\"Calendar Month\",",
                "-        *    year:\"Calendar Year\",",
                "-        *    submit: \"Submit\",",
                "-        *    cancel: \"Cancel\",",
                "-        *    invalidYear: \"Please enter a valid year\"",
                "-        *   },",
                "-        *   monthFormat: YAHOO.widget.Calendar.SHORT,",
                "-        *   initialFocus: \"month\"",
                "-        * }",
                "-        * </pre>",
                "-        * @config navigator",
                "-        * @type {Object|Boolean}",
                "-        * @default null",
                "-        */",
                "-        cfg.addProperty(DEF_CFG.NAV.key, { value:DEF_CFG.NAV.value, handler:this.configNavigator } );",
                "-",
                "-        /**",
                "-         * The map of UI strings which the CalendarGroup UI uses.",
                "-         *",
                "-         * @config strings",
                "-         * @type {Object}",
                "-         * @default An object with the properties shown below:",
                "-         *     <dl>",
                "-         *         <dt>previousMonth</dt><dd><em>HTML</em> : The markup to use for the \"Previous Month\" navigation label. Defaults to \"Previous Month\". The string is added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.</dd>",
                "-         *         <dt>nextMonth</dt><dd><em>HTML</em> : The markup to use for the \"Next Month\" navigation UI. Defaults to \"Next Month\". The string is added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.</dd>",
                "-         *         <dt>close</dt><dd><em>HTML</em> : The markup to use for the close button label. Defaults to \"Close\". The string is added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.</dd>",
                "-         *     </dl>",
                "-         */",
                "-        cfg.addProperty(DEF_CFG.STRINGS.key, { ",
                "-            value:DEF_CFG.STRINGS.value, ",
                "-            handler:this.configStrings, ",
                "-            validator: function(val) {",
                "-                return Lang.isObject(val);",
                "-            },",
                "-            supercedes: DEF_CFG.STRINGS.supercedes",
                "-        });",
                "-    },",
                "-",
                "-    /**",
                "-    * Initializes CalendarGroup's built-in CustomEvents",
                "-    * @method initEvents",
                "-    */",
                "-    initEvents : function() {",
                "-",
                "-        var me = this,",
                "-            strEvent = \"Event\",",
                "-            CE = YAHOO.util.CustomEvent;",
                "-",
                "-        /**",
                "-        * Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents",
                "-        * @method sub",
                "-        * @private",
                "-        * @param {Function} fn The function to subscribe to this CustomEvent",
                "-        * @param {Object} obj The CustomEvent's scope object",
                "-        * @param {Boolean} bOverride Whether or not to apply scope correction",
                "-        */",
                "-        var sub = function(fn, obj, bOverride) {",
                "-            for (var p=0;p<me.pages.length;++p) {",
                "-                var cal = me.pages[p];",
                "-                cal[this.type + strEvent].subscribe(fn, obj, bOverride);",
                "-            }",
                "-        };",
                "-",
                "-        /**",
                "-        * Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents",
                "-        * @method unsub",
                "-        * @private",
                "-        * @param {Function} fn The function to subscribe to this CustomEvent",
                "-        * @param {Object} obj The CustomEvent's scope object",
                "-        */",
                "-        var unsub = function(fn, obj) {",
                "-            for (var p=0;p<me.pages.length;++p) {",
                "-                var cal = me.pages[p];",
                "-                cal[this.type + strEvent].unsubscribe(fn, obj);",
                "-            }",
                "-        };",
                "-",
                "-        var defEvents = Calendar._EVENT_TYPES;",
                "-",
                "-        /**",
                "-        * Fired before a date selection is made",
                "-        * @event beforeSelectEvent",
                "-        */",
                "-        me.beforeSelectEvent = new CE(defEvents.BEFORE_SELECT);",
                "-        me.beforeSelectEvent.subscribe = sub; me.beforeSelectEvent.unsubscribe = unsub;",
                "-",
                "-        /**",
                "-        * Fired when a date selection is made",
                "-        * @event selectEvent",
                "-        * @param {Array} Array of Date field arrays in the format [YYYY, MM, DD].",
                "-        */",
                "-        me.selectEvent = new CE(defEvents.SELECT); ",
                "-        me.selectEvent.subscribe = sub; me.selectEvent.unsubscribe = unsub;",
                "-",
                "-        /**",
                "-        * Fired before a date or set of dates is deselected",
                "-        * @event beforeDeselectEvent",
                "-        */",
                "-        me.beforeDeselectEvent = new CE(defEvents.BEFORE_DESELECT); ",
                "-        me.beforeDeselectEvent.subscribe = sub; me.beforeDeselectEvent.unsubscribe = unsub;",
                "-",
                "-        /**",
                "-        * Fired when a date or set of dates has been deselected",
                "-        * @event deselectEvent",
                "-        * @param {Array} Array of Date field arrays in the format [YYYY, MM, DD].",
                "-        */",
                "-        me.deselectEvent = new CE(defEvents.DESELECT); ",
                "-        me.deselectEvent.subscribe = sub; me.deselectEvent.unsubscribe = unsub;",
                "-        ",
                "-        /**",
                "-        * Fired when the Calendar page is changed",
                "-        * @event changePageEvent",
                "-        */",
                "-        me.changePageEvent = new CE(defEvents.CHANGE_PAGE); ",
                "-        me.changePageEvent.subscribe = sub; me.changePageEvent.unsubscribe = unsub;",
                "-",
                "-        /**",
                "-        * Fired before the Calendar is rendered",
                "-        * @event beforeRenderEvent",
                "-        */",
                "-        me.beforeRenderEvent = new CE(defEvents.BEFORE_RENDER);",
                "-        me.beforeRenderEvent.subscribe = sub; me.beforeRenderEvent.unsubscribe = unsub;",
                "-    ",
                "-        /**",
                "-        * Fired when the Calendar is rendered",
                "-        * @event renderEvent",
                "-        */",
                "-        me.renderEvent = new CE(defEvents.RENDER);",
                "-        me.renderEvent.subscribe = sub; me.renderEvent.unsubscribe = unsub;",
                "-    ",
                "-        /**",
                "-        * Fired when the Calendar is reset",
                "-        * @event resetEvent",
                "-        */",
                "-        me.resetEvent = new CE(defEvents.RESET); ",
                "-        me.resetEvent.subscribe = sub; me.resetEvent.unsubscribe = unsub;",
                "-    ",
                "-        /**",
                "-        * Fired when the Calendar is cleared",
                "-        * @event clearEvent",
                "-        */",
                "-        me.clearEvent = new CE(defEvents.CLEAR);",
                "-        me.clearEvent.subscribe = sub; me.clearEvent.unsubscribe = unsub;",
                "-",
                "-        /**",
                "-        * Fired just before the CalendarGroup is to be shown",
                "-        * @event beforeShowEvent",
                "-        */",
                "-        me.beforeShowEvent = new CE(defEvents.BEFORE_SHOW);",
                "-    ",
                "-        /**",
                "-        * Fired after the CalendarGroup is shown",
                "-        * @event showEvent",
                "-        */",
                "-        me.showEvent = new CE(defEvents.SHOW);",
                "-    ",
                "-        /**",
                "-        * Fired just before the CalendarGroup is to be hidden",
                "-        * @event beforeHideEvent",
                "-        */",
                "-        me.beforeHideEvent = new CE(defEvents.BEFORE_HIDE);",
                "-    ",
                "-        /**",
                "-        * Fired after the CalendarGroup is hidden",
                "-        * @event hideEvent",
                "-        */",
                "-        me.hideEvent = new CE(defEvents.HIDE);",
                "-",
                "-        /**",
                "-        * Fired just before the CalendarNavigator is to be shown",
                "-        * @event beforeShowNavEvent",
                "-        */",
                "-        me.beforeShowNavEvent = new CE(defEvents.BEFORE_SHOW_NAV);",
                "-    ",
                "-        /**",
                "-        * Fired after the CalendarNavigator is shown",
                "-        * @event showNavEvent",
                "-        */",
                "-        me.showNavEvent = new CE(defEvents.SHOW_NAV);",
                "-    ",
                "-        /**",
                "-        * Fired just before the CalendarNavigator is to be hidden",
                "-        * @event beforeHideNavEvent",
                "-        */",
                "-        me.beforeHideNavEvent = new CE(defEvents.BEFORE_HIDE_NAV);",
                "-",
                "-        /**",
                "-        * Fired after the CalendarNavigator is hidden",
                "-        * @event hideNavEvent",
                "-        */",
                "-        me.hideNavEvent = new CE(defEvents.HIDE_NAV);",
                "-",
                "-        /**",
                "-        * Fired just before the CalendarNavigator is to be rendered",
                "-        * @event beforeRenderNavEvent",
                "-        */",
                "-        me.beforeRenderNavEvent = new CE(defEvents.BEFORE_RENDER_NAV);",
                "-",
                "-        /**",
                "-        * Fired after the CalendarNavigator is rendered",
                "-        * @event renderNavEvent",
                "-        */",
                "-        me.renderNavEvent = new CE(defEvents.RENDER_NAV);",
                "-",
                "-        /**",
                "-        * Fired just before the CalendarGroup is to be destroyed",
                "-        * @event beforeDestroyEvent",
                "-        */",
                "-        me.beforeDestroyEvent = new CE(defEvents.BEFORE_DESTROY);",
                "-",
                "-        /**",
                "-        * Fired after the CalendarGroup is destroyed. This event should be used",
                "-        * for notification only. When this event is fired, important CalendarGroup instance",
                "-        * properties, dom references and event listeners have already been ",
                "-        * removed/dereferenced, and hence the CalendarGroup instance is not in a usable ",
                "-        * state.",
                "-        *",
                "-        * @event destroyEvent",
                "-        */",
                "-        me.destroyEvent = new CE(defEvents.DESTROY);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * The default Config handler for the \"pages\" property",
                "-    * @method configPages",
                "-    * @param {String} type The CustomEvent type (usually the property name)",
                "-    * @param {Object[]} args The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.",
                "-    * @param {Object} obj The scope object. For configuration handlers, this will usually equal the owner.",
                "-    */",
                "-    configPages : function(type, args, obj) {",
                "-        var pageCount = args[0],",
                "-            cfgPageDate = DEF_CFG.PAGEDATE.key,",
                "-            sep = \"_\",",
                "-            caldate,",
                "-            firstPageDate = null,",
                "-            groupCalClass = \"groupcal\",",
                "-            firstClass = \"first-of-type\",",
                "-            lastClass = \"last-of-type\";",
                "-",
                "-        for (var p=0;p<pageCount;++p) {",
                "-            var calId = this.id + sep + p,",
                "-                calContainerId = this.containerId + sep + p,",
                "-                childConfig = this.cfg.getConfig();",
                "-",
                "-            childConfig.close = false;",
                "-            childConfig.title = false;",
                "-            childConfig.navigator = null;",
                "-",
                "-            if (p > 0) {",
                "-                caldate = new Date(firstPageDate);",
                "-                this._setMonthOnDate(caldate, caldate.getMonth() + p);",
                "-                childConfig.pageDate = caldate;",
                "-            }",
                "-",
                "-            var cal = this.constructChild(calId, calContainerId, childConfig);",
                "-",
                "-            Dom.removeClass(cal.oDomContainer, this.Style.CSS_SINGLE);",
                "-            Dom.addClass(cal.oDomContainer, groupCalClass);",
                "-",
                "-            if (p===0) {",
                "-                firstPageDate = cal.cfg.getProperty(cfgPageDate);",
                "-                Dom.addClass(cal.oDomContainer, firstClass);",
                "-            }",
                "-    ",
                "-            if (p==(pageCount-1)) {",
                "-                Dom.addClass(cal.oDomContainer, lastClass);",
                "-            }",
                "-    ",
                "-            cal.parent = this;",
                "-            cal.index = p; ",
                "-    ",
                "-            this.pages[this.pages.length] = cal;",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * The default Config handler for the \"pagedate\" property",
                "-    * @method configPageDate",
                "-    * @param {String} type The CustomEvent type (usually the property name)",
                "-    * @param {Object[]} args The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.",
                "-    * @param {Object} obj The scope object. For configuration handlers, this will usually equal the owner.",
                "-    */",
                "-    configPageDate : function(type, args, obj) {",
                "-        var val = args[0],",
                "-            firstPageDate;",
                "-",
                "-        var cfgPageDate = DEF_CFG.PAGEDATE.key;",
                "-        ",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            if (p === 0) {",
                "-                firstPageDate = cal._parsePageDate(val);",
                "-                cal.cfg.setProperty(cfgPageDate, firstPageDate);",
                "-            } else {",
                "-                var pageDate = new Date(firstPageDate);",
                "-                this._setMonthOnDate(pageDate, pageDate.getMonth() + p);",
                "-                cal.cfg.setProperty(cfgPageDate, pageDate);",
                "-            }",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * The default Config handler for the CalendarGroup \"selected\" property",
                "-    * @method configSelected",
                "-    * @param {String} type The CustomEvent type (usually the property name)",
                "-    * @param {Object[]} args The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.",
                "-    * @param {Object} obj The scope object. For configuration handlers, this will usually equal the owner.",
                "-    */",
                "-    configSelected : function(type, args, obj) {",
                "-        var cfgSelected = DEF_CFG.SELECTED.key;",
                "-        this.delegateConfig(type, args, obj);",
                "-        var selected = (this.pages.length > 0) ? this.pages[0].cfg.getProperty(cfgSelected) : []; ",
                "-        this.cfg.setProperty(cfgSelected, selected, true);",
                "-    },",
                "-",
                "-    ",
                "-    /**",
                "-    * Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children",
                "-    * @method delegateConfig",
                "-    * @param {String} type The CustomEvent type (usually the property name)",
                "-    * @param {Object[]} args The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.",
                "-    * @param {Object} obj The scope object. For configuration handlers, this will usually equal the owner.",
                "-    */",
                "-    delegateConfig : function(type, args, obj) {",
                "-        var val = args[0];",
                "-        var cal;",
                "-    ",
                "-        for (var p=0;p<this.pages.length;p++) {",
                "-            cal = this.pages[p];",
                "-            cal.cfg.setProperty(type, val);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds a function to all child Calendars within this CalendarGroup.",
                "-    * @method setChildFunction",
                "-    * @param {String}  fnName  The name of the function",
                "-    * @param {Function}  fn   The function to apply to each Calendar page object",
                "-    */",
                "-    setChildFunction : function(fnName, fn) {",
                "-        var pageCount = this.cfg.getProperty(DEF_CFG.PAGES.key);",
                "-    ",
                "-        for (var p=0;p<pageCount;++p) {",
                "-            this.pages[p][fnName] = fn;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Calls a function within all child Calendars within this CalendarGroup.",
                "-    * @method callChildFunction",
                "-    * @param {String}  fnName  The name of the function",
                "-    * @param {Array}  args  The arguments to pass to the function",
                "-    */",
                "-    callChildFunction : function(fnName, args) {",
                "-        var pageCount = this.cfg.getProperty(DEF_CFG.PAGES.key);",
                "-",
                "-        for (var p=0;p<pageCount;++p) {",
                "-            var page = this.pages[p];",
                "-            if (page[fnName]) {",
                "-                var fn = page[fnName];",
                "-                fn.call(page, args);",
                "-            }",
                "-        } ",
                "-    },",
                "-",
                "-    /**",
                "-    * Constructs a child calendar. This method can be overridden if a subclassed version of the default",
                "-    * calendar is to be used.",
                "-    * @method constructChild",
                "-    * @param {String} id   The id of the table element that will represent the calendar widget",
                "-    * @param {String} containerId The id of the container div element that will wrap the calendar table",
                "-    * @param {Object} config  The configuration object containing the Calendar's arguments",
                "-    * @return {YAHOO.widget.Calendar} The YAHOO.widget.Calendar instance that is constructed",
                "-    */",
                "-    constructChild : function(id,containerId,config) {",
                "-        var container = document.getElementById(containerId);",
                "-        if (! container) {",
                "-            container = document.createElement(\"div\");",
                "-            container.id = containerId;",
                "-            this.oDomContainer.appendChild(container);",
                "-        }",
                "-        return new Calendar(id,containerId,config);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Sets the calendar group's month explicitly. This month will be set into the first",
                "-    * page of the multi-page calendar, and all other months will be iterated appropriately.",
                "-    * @method setMonth",
                "-    * @param {Number} month  The numeric month, from 0 (January) to 11 (December)",
                "-    */",
                "-    setMonth : function(month) {",
                "-        month = parseInt(month, 10);",
                "-        var currYear;",
                "-",
                "-        var cfgPageDate = DEF_CFG.PAGEDATE.key;",
                "-",
                "-        for (var p=0; p<this.pages.length; ++p) {",
                "-            var cal = this.pages[p];",
                "-            var pageDate = cal.cfg.getProperty(cfgPageDate);",
                "-            if (p === 0) {",
                "-                currYear = pageDate.getFullYear();",
                "-            } else {",
                "-                pageDate.setFullYear(currYear);",
                "-            }",
                "-            this._setMonthOnDate(pageDate, month+p); ",
                "-            cal.cfg.setProperty(cfgPageDate, pageDate);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Sets the calendar group's year explicitly. This year will be set into the first",
                "-    * page of the multi-page calendar, and all other months will be iterated appropriately.",
                "-    * @method setYear",
                "-    * @param {Number} year  The numeric 4-digit year",
                "-    */",
                "-    setYear : function(year) {",
                "-    ",
                "-        var cfgPageDate = DEF_CFG.PAGEDATE.key;",
                "-    ",
                "-        year = parseInt(year, 10);",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            var pageDate = cal.cfg.getProperty(cfgPageDate);",
                "-    ",
                "-            if ((pageDate.getMonth()+1) == 1 && p>0) {",
                "-                year+=1;",
                "-            }",
                "-            cal.setYear(year);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Calls the render function of all child calendars within the group.",
                "-    * @method render",
                "-    */",
                "-    render : function() {",
                "-        this.renderHeader();",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.render();",
                "-        }",
                "-        this.renderFooter();",
                "-    },",
                "-",
                "-    /**",
                "-    * Selects a date or a collection of dates on the current calendar. This method, by default,",
                "-    * does not call the render method explicitly. Once selection has completed, render must be ",
                "-    * called for the changes to be reflected visually.",
                "-    * @method select",
                "-    * @param    {String/Date/Date[]}    date    The date string of dates to select in the current calendar. Valid formats are",
                "-    *                               individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).",
                "-    *                               Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).",
                "-    *                               This method can also take a JavaScript Date object or an array of Date objects.",
                "-    * @return {Date[]} Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    select : function(date) {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.select(date);",
                "-        }",
                "-        return this.getSelectedDates();",
                "-    },",
                "-",
                "-    /**",
                "-    * Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.",
                "-    * The value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected. ",
                "-    * <ul>",
                "-    *    <li>If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.</li>",
                "-    *    <li>If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.</li>",
                "-    * </ul>",
                "-    * @method selectCell",
                "-    * @param {Number} cellIndex The index of the cell to be selected. ",
                "-    * @return {Date[]} Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    selectCell : function(cellIndex) {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.selectCell(cellIndex);",
                "-        }",
                "-        return this.getSelectedDates();",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Deselects a date or a collection of dates on the current calendar. This method, by default,",
                "-    * does not call the render method explicitly. Once deselection has completed, render must be ",
                "-    * called for the changes to be reflected visually.",
                "-    * @method deselect",
                "-    * @param {String/Date/Date[]} date The date string of dates to deselect in the current calendar. Valid formats are",
                "-    *        individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).",
                "-    *        Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).",
                "-    *        This method can also take a JavaScript Date object or an array of Date objects. ",
                "-    * @return {Date[]}   Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    deselect : function(date) {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.deselect(date);",
                "-        }",
                "-        return this.getSelectedDates();",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Deselects all dates on the current calendar.",
                "-    * @method deselectAll",
                "-    * @return {Date[]}  Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    *      Assuming that this function executes properly, the return value should be an empty array.",
                "-    *      However, the empty array is returned for the sake of being able to check the selection status",
                "-    *      of the calendar.",
                "-    */",
                "-    deselectAll : function() {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.deselectAll();",
                "-        }",
                "-        return this.getSelectedDates();",
                "-    },",
                "-",
                "-    /**",
                "-    * Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.",
                "-    * deselectCell will deselect the cell at the specified index on each displayed Calendar page.",
                "-    *",
                "-    * @method deselectCell",
                "-    * @param {Number} cellIndex The index of the cell to deselect. ",
                "-    * @return {Date[]} Array of JavaScript Date objects representing all individual dates that are currently selected.",
                "-    */",
                "-    deselectCell : function(cellIndex) {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.deselectCell(cellIndex);",
                "-        }",
                "-        return this.getSelectedDates();",
                "-    },",
                "-",
                "-    /**",
                "-    * Resets the calendar widget to the originally selected month and year, and ",
                "-    * sets the calendar to the initial selection(s).",
                "-    * @method reset",
                "-    */",
                "-    reset : function() {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.reset();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Clears the selected dates in the current calendar widget and sets the calendar",
                "-    * to the current month and year.",
                "-    * @method clear",
                "-    */",
                "-    clear : function() {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.clear();",
                "-        }",
                "-",
                "-        this.cfg.setProperty(DEF_CFG.SELECTED.key, []);",
                "-        this.cfg.setProperty(DEF_CFG.PAGEDATE.key, new Date(this.pages[0].today.getTime()));",
                "-        this.render();",
                "-    },",
                "-",
                "-    /**",
                "-    * Navigates to the next month page in the calendar widget.",
                "-    * @method nextMonth",
                "-    */",
                "-    nextMonth : function() {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.nextMonth();",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Navigates to the previous month page in the calendar widget.",
                "-    * @method previousMonth",
                "-    */",
                "-    previousMonth : function() {",
                "-        for (var p=this.pages.length-1;p>=0;--p) {",
                "-            var cal = this.pages[p];",
                "-            cal.previousMonth();",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Navigates to the next year in the currently selected month in the calendar widget.",
                "-    * @method nextYear",
                "-    */",
                "-    nextYear : function() {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.nextYear();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Navigates to the previous year in the currently selected month in the calendar widget.",
                "-    * @method previousYear",
                "-    */",
                "-    previousYear : function() {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.previousYear();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Gets the list of currently selected dates from the calendar.",
                "-    * @return   An array of currently selected JavaScript Date objects.",
                "-    * @type Date[]",
                "-    */",
                "-    getSelectedDates : function() { ",
                "-        var returnDates = [];",
                "-        var selected = this.cfg.getProperty(DEF_CFG.SELECTED.key);",
                "-        for (var d=0;d<selected.length;++d) {",
                "-            var dateArray = selected[d];",
                "-",
                "-            var date = DateMath.getDate(dateArray[0],dateArray[1]-1,dateArray[2]);",
                "-            returnDates.push(date);",
                "-        }",
                "-",
                "-        returnDates.sort( function(a,b) { return a-b; } );",
                "-        return returnDates;",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds a renderer to the render stack. The function reference passed to this method will be executed",
                "-    * when a date cell matches the conditions specified in the date string for this renderer.",
                "-    * ",
                "-    * <p>NOTE: The contents of the cell set by the renderer will be added to the DOM as HTML. The custom renderer implementation should ",
                "-    * escape markup used to set the cell contents, if coming from an external source.<p>",
                "-    * @method addRenderer",
                "-    * @param {String} sDates  A date string to associate with the specified renderer. Valid formats",
                "-    *         include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)",
                "-    * @param {Function} fnRender The function executed to render cells that match the render rules for this renderer.",
                "-    */",
                "-    addRenderer : function(sDates, fnRender) {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.addRenderer(sDates, fnRender);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds a month renderer to the render stack. The function reference passed to this method will be executed",
                "-    * when a date cell matches the month passed to this method",
                "-    * ",
                "-    * <p>NOTE: The contents of the cell set by the renderer will be added to the DOM as HTML. The custom renderer implementation should ",
                "-    * escape markup used to set the cell contents, if coming from an external source.<p>",
                "-    * @method addMonthRenderer",
                "-    * @param {Number} month  The month (1-12) to associate with this renderer",
                "-    * @param {Function} fnRender The function executed to render cells that match the render rules for this renderer.",
                "-    */",
                "-    addMonthRenderer : function(month, fnRender) {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.addMonthRenderer(month, fnRender);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds a weekday renderer to the render stack. The function reference passed to this method will be executed",
                "-    * when a date cell matches the weekday passed to this method.",
                "-    *",
                "-    * <p>NOTE: The contents of the cell set by the renderer will be added to the DOM as HTML. The custom renderer implementation should ",
                "-    * escape HTML used to set the cell contents, if coming from an external source.<p>",
                "-    *",
                "-    * @method addWeekdayRenderer",
                "-    * @param {Number} weekday  The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer",
                "-    * @param {Function} fnRender The function executed to render cells that match the render rules for this renderer.",
                "-    */",
                "-    addWeekdayRenderer : function(weekday, fnRender) {",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            cal.addWeekdayRenderer(weekday, fnRender);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and ",
                "-     * addWeekRenderer methods. CalendarGroup's render method needs to be called to after removing renderers ",
                "-     * to see the changes applied.",
                "-     * ",
                "-     * @method removeRenderers",
                "-     */",
                "-    removeRenderers : function() {",
                "-        this.callChildFunction(\"removeRenderers\");",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders the header for the CalendarGroup.",
                "-    * @method renderHeader",
                "-    */",
                "-    renderHeader : function() {",
                "-        // EMPTY DEFAULT IMPL",
                "-    },",
                "-",
                "-    /**",
                "-    * Renders a footer for the 2-up calendar container. By default, this method is",
                "-    * unimplemented.",
                "-    * @method renderFooter",
                "-    */",
                "-    renderFooter : function() {",
                "-        // EMPTY DEFAULT IMPL",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds the designated number of months to the current calendar month, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method addMonths",
                "-    * @param {Number} count The number of months to add to the current calendar",
                "-    */",
                "-    addMonths : function(count) {",
                "-        this.callChildFunction(\"addMonths\", count);",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Subtracts the designated number of months from the current calendar month, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method subtractMonths",
                "-    * @param {Number} count The number of months to subtract from the current calendar",
                "-    */",
                "-    subtractMonths : function(count) {",
                "-        this.callChildFunction(\"subtractMonths\", count);",
                "-    },",
                "-",
                "-    /**",
                "-    * Adds the designated number of years to the current calendar, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method addYears",
                "-    * @param {Number} count The number of years to add to the current calendar",
                "-    */",
                "-    addYears : function(count) {",
                "-        this.callChildFunction(\"addYears\", count);",
                "-    },",
                "-",
                "-    /**",
                "-    * Subtcats the designated number of years from the current calendar, and sets the current",
                "-    * calendar page date to the new month.",
                "-    * @method subtractYears",
                "-    * @param {Number} count The number of years to subtract from the current calendar",
                "-    */",
                "-    subtractYears : function(count) {",
                "-        this.callChildFunction(\"subtractYears\", count);",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns the Calendar page instance which has a pagedate (month/year) matching the given date. ",
                "-     * Returns null if no match is found.",
                "-     * ",
                "-     * @method getCalendarPage",
                "-     * @param {Date} date The JavaScript Date object for which a Calendar page is to be found.",
                "-     * @return {Calendar} The Calendar page instance representing the month to which the date ",
                "-     * belongs.",
                "-     */",
                "-    getCalendarPage : function(date) {",
                "-        var cal = null;",
                "-        if (date) {",
                "-            var y = date.getFullYear(),",
                "-                m = date.getMonth();",
                "-",
                "-            var pages = this.pages;",
                "-            for (var i = 0; i < pages.length; ++i) {",
                "-                var pageDate = pages[i].cfg.getProperty(\"pagedate\");",
                "-                if (pageDate.getFullYear() === y && pageDate.getMonth() === m) {",
                "-                    cal = pages[i];",
                "-                    break;",
                "-                }",
                "-            }",
                "-        }",
                "-        return cal;",
                "-    },",
                "-",
                "-    /**",
                "-    * Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.",
                "-    * The Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained",
                "-    * @method _setMonthOnDate",
                "-    * @private",
                "-    * @param {Date} date The Date object on which to set the month index",
                "-    * @param {Number} iMonth The month index to set",
                "-    */",
                "-    _setMonthOnDate : function(date, iMonth) {",
                "-        // Bug in Safari 1.3, 2.0 (WebKit build < 420), Date.setMonth does not work consistently if iMonth is not 0-11",
                "-        if (YAHOO.env.ua.webkit && YAHOO.env.ua.webkit < 420 && (iMonth < 0 || iMonth > 11)) {",
                "-            var newDate = DateMath.add(date, DateMath.MONTH, iMonth-date.getMonth());",
                "-            date.setTime(newDate.getTime());",
                "-        } else {",
                "-            date.setMonth(iMonth);",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-     * Fixes the width of the CalendarGroup container element, to account for miswrapped floats",
                "-     * @method _fixWidth",
                "-     * @private",
                "-     */",
                "-    _fixWidth : function() {",
                "-        var w = 0;",
                "-        for (var p=0;p<this.pages.length;++p) {",
                "-            var cal = this.pages[p];",
                "-            w += cal.oDomContainer.offsetWidth;",
                "-        }",
                "-        if (w > 0) {",
                "-            this.oDomContainer.style.width = w + \"px\";",
                "-        }",
                "-    },",
                "-    ",
                "-    /**",
                "-    * Returns a string representation of the object.",
                "-    * @method toString",
                "-    * @return {String} A string representation of the CalendarGroup object.",
                "-    */",
                "-    toString : function() {",
                "-        return \"CalendarGroup \" + this.id;",
                "-    },",
                "-",
                "-    /**",
                "-     * Destroys the CalendarGroup instance. The method will remove references",
                "-     * to HTML elements, remove any event listeners added by the CalendarGroup.",
                "-     * ",
                "-     * It will also destroy the Config and CalendarNavigator instances created by the ",
                "-     * CalendarGroup and the individual Calendar instances created for each page.",
                "-     *",
                "-     * @method destroy",
                "-     */",
                "-    destroy : function() {",
                "-",
                "-        if (this.beforeDestroyEvent.fire()) {",
                "-",
                "-            var cal = this;",
                "-    ",
                "-            // Child objects",
                "-            if (cal.navigator) {",
                "-                cal.navigator.destroy();",
                "-            }",
                "-    ",
                "-            if (cal.cfg) {",
                "-                cal.cfg.destroy();",
                "-            }",
                "-    ",
                "-            // DOM event listeners",
                "-            Event.purgeElement(cal.oDomContainer, true);",
                "-    ",
                "-            // Generated markup/DOM - Not removing the container DIV since we didn't create it.",
                "-            Dom.removeClass(cal.oDomContainer, CalendarGroup.CSS_CONTAINER);",
                "-            Dom.removeClass(cal.oDomContainer, CalendarGroup.CSS_MULTI_UP);",
                "-            ",
                "-            for (var i = 0, l = cal.pages.length; i < l; i++) {",
                "-                cal.pages[i].destroy();",
                "-                cal.pages[i] = null;",
                "-            }",
                "-    ",
                "-            cal.oDomContainer.innerHTML = \"\";",
                "-    ",
                "-            // JS-to-DOM references",
                "-            cal.oDomContainer = null;",
                "-    ",
                "-            this.destroyEvent.fire();",
                "-        }",
                "-    }",
                "-};",
                "-",
                "-/**",
                "-* CSS class representing the container for the calendar",
                "-* @property YAHOO.widget.CalendarGroup.CSS_CONTAINER",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-CalendarGroup.CSS_CONTAINER = \"yui-calcontainer\";",
                "-",
                "-/**",
                "-* CSS class representing the container for the calendar",
                "-* @property YAHOO.widget.CalendarGroup.CSS_MULTI_UP",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-CalendarGroup.CSS_MULTI_UP = \"multi\";",
                "-",
                "-/**",
                "-* CSS class representing the title for the 2-up calendar",
                "-* @property YAHOO.widget.CalendarGroup.CSS_2UPTITLE",
                "-* @static",
                "-* @final",
                "-* @type String",
                "-*/",
                "-CalendarGroup.CSS_2UPTITLE = \"title\";",
                "-",
                "-/**",
                "-* CSS class representing the close icon for the 2-up calendar",
                "-* @property YAHOO.widget.CalendarGroup.CSS_2UPCLOSE",
                "-* @static",
                "-* @final",
                "-* @deprecated Along with Calendar.IMG_ROOT and NAV_ARROW_LEFT, NAV_ARROW_RIGHT configuration properties.",
                "-*     Calendar's <a href=\"YAHOO.widget.Calendar.html#Style.CSS_CLOSE\">Style.CSS_CLOSE</a> property now represents the CSS class used to render the close icon",
                "-* @type String",
                "-*/",
                "-CalendarGroup.CSS_2UPCLOSE = \"close-icon\";",
                "-",
                "-YAHOO.lang.augmentProto(CalendarGroup, Calendar, \"buildDayLabel\",",
                "-                                                 \"buildMonthLabel\",",
                "-                                                 \"renderOutOfBoundsDate\",",
                "-                                                 \"renderRowHeader\",",
                "-                                                 \"renderRowFooter\",",
                "-                                                 \"renderCellDefault\",",
                "-                                                 \"styleCellDefault\",",
                "-                                                 \"renderCellStyleHighlight1\",",
                "-                                                 \"renderCellStyleHighlight2\",",
                "-                                                 \"renderCellStyleHighlight3\",",
                "-                                                 \"renderCellStyleHighlight4\",",
                "-                                                 \"renderCellStyleToday\",",
                "-                                                 \"renderCellStyleSelected\",",
                "-                                                 \"renderCellNotThisMonth\",",
                "-                                                 \"styleCellNotThisMonth\",",
                "-                                                 \"renderBodyCellRestricted\",",
                "-                                                 \"initStyles\",",
                "-                                                 \"configTitle\",",
                "-                                                 \"configClose\",",
                "-                                                 \"configIframe\",",
                "-                                                 \"configStrings\",",
                "-                                                 \"configToday\",",
                "-                                                 \"configNavigator\",",
                "-                                                 \"createTitleBar\",",
                "-                                                 \"createCloseButton\",",
                "-                                                 \"removeTitleBar\",",
                "-                                                 \"removeCloseButton\",",
                "-                                                 \"hide\",",
                "-                                                 \"show\",",
                "-                                                 \"toDate\",",
                "-                                                 \"_toDate\",",
                "-                                                 \"_parseArgs\",",
                "-                                                 \"browser\");",
                "-",
                "-YAHOO.widget.CalGrp = CalendarGroup;",
                "-YAHOO.widget.CalendarGroup = CalendarGroup;",
                "-",
                "-/**",
                "-* @class YAHOO.widget.Calendar2up",
                "-* @extends YAHOO.widget.CalendarGroup",
                "-* @deprecated The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.",
                "-*/",
                "-YAHOO.widget.Calendar2up = function(id, containerId, config) {",
                "-    this.init(id, containerId, config);",
                "-};",
                "-",
                "-YAHOO.extend(YAHOO.widget.Calendar2up, CalendarGroup);",
                "-",
                "-/**",
                "-* @deprecated The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.",
                "-*/",
                "-YAHOO.widget.Cal2up = YAHOO.widget.Calendar2up;",
                "-",
                "-})();",
                "-/**",
                "- * The CalendarNavigator is used along with a Calendar/CalendarGroup to ",
                "- * provide a Month/Year popup navigation control, allowing the user to navigate ",
                "- * to a specific month/year in the Calendar/CalendarGroup without having to ",
                "- * scroll through months sequentially",
                "- *",
                "- * @namespace YAHOO.widget",
                "- * @class CalendarNavigator",
                "- * @constructor",
                "- * @param {Calendar|CalendarGroup} cal The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached.",
                "- */",
                "-YAHOO.widget.CalendarNavigator = function(cal) {",
                "-    this.init(cal);",
                "-};",
                "-",
                "-(function() {",
                "-    // Setup static properties (inside anon fn, so that we can use shortcuts)",
                "-    var CN = YAHOO.widget.CalendarNavigator;",
                "-",
                "-    /**",
                "-     * YAHOO.widget.CalendarNavigator.CLASSES contains constants",
                "-     * for the class values applied to the CalendarNaviatgator's ",
                "-     * DOM elements",
                "-     * @property YAHOO.widget.CalendarNavigator.CLASSES",
                "-     * @type Object",
                "-     * @static",
                "-     */",
                "-    CN.CLASSES = {",
                "-        /**",
                "-         * Class applied to the Calendar Navigator's bounding box",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.NAV",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        NAV :\"yui-cal-nav\",",
                "-        /**",
                "-         * Class applied to the Calendar/CalendarGroup's bounding box to indicate",
                "-         * the Navigator is currently visible",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        NAV_VISIBLE: \"yui-cal-nav-visible\",",
                "-        /**",
                "-         * Class applied to the Navigator mask's bounding box",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.MASK",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        MASK : \"yui-cal-nav-mask\",",
                "-        /**",
                "-         * Class applied to the year label/control bounding box",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.YEAR",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        YEAR : \"yui-cal-nav-y\",",
                "-        /**",
                "-         * Class applied to the month label/control bounding box",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.MONTH",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        MONTH : \"yui-cal-nav-m\",",
                "-        /**",
                "-         * Class applied to the submit/cancel button's bounding box",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        BUTTONS : \"yui-cal-nav-b\",",
                "-        /**",
                "-         * Class applied to buttons wrapping element",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.BUTTON",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        BUTTON : \"yui-cal-nav-btn\",",
                "-        /**",
                "-         * Class applied to the validation error area's bounding box",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.ERROR",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        ERROR : \"yui-cal-nav-e\",",
                "-        /**",
                "-         * Class applied to the year input control",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        YEAR_CTRL : \"yui-cal-nav-yc\",",
                "-        /**",
                "-         * Class applied to the month input control",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        MONTH_CTRL : \"yui-cal-nav-mc\",",
                "-        /**",
                "-         * Class applied to controls with invalid data (e.g. a year input field with invalid an year)",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.INVALID",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        INVALID : \"yui-invalid\",",
                "-        /**",
                "-         * Class applied to default controls",
                "-         * @property YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT",
                "-         * @type String",
                "-         * @static",
                "-         */",
                "-        DEFAULT : \"yui-default\"",
                "-    };",
                "-",
                "-    /**",
                "-     * Object literal containing the default configuration values for the CalendarNavigator",
                "-     * The configuration object is expected to follow the format below, with the properties being",
                "-     * case sensitive.",
                "-     * <dl>",
                "-     * <dt>strings</dt>",
                "-     * <dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI",
                "-     *     <dl>",
                "-     *         <dt>month</dt><dd><em>HTML</em> : The markup to use for the month label. Defaults to \"Month\".</dd>",
                "-     *         <dt>year</dt><dd><em>HTML</em> : The markup to use for the year label. Defaults to \"Year\".</dd>",
                "-     *         <dt>submit</dt><dd><em>HTML</em> : The markup to use for the submit button label. Defaults to \"Okay\".</dd>",
                "-     *         <dt>cancel</dt><dd><em>HTML</em> : The markup to use for the cancel button label. Defaults to \"Cancel\".</dd>",
                "-     *         <dt>invalidYear</dt><dd><em>HTML</em> : The markup to use for invalid year values. Defaults to \"Year needs to be a number\".</dd>",
                "-     *     </dl>",
                "-     * </dd>",
                "-     * <dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>",
                "-     * <dt>initialFocus</dt><dd><em>String</em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"</dd>",
                "-     * </dl>",
                "-     * @property DEFAULT_CONFIG",
                "-     * @type Object",
                "-     * @static",
                "-     */",
                "-    CN.DEFAULT_CONFIG = {",
                "-        strings : {",
                "-            month: \"Month\",",
                "-            year: \"Year\",",
                "-            submit: \"Okay\",",
                "-            cancel: \"Cancel\",",
                "-            invalidYear : \"Year needs to be a number\"",
                "-        },",
                "-        monthFormat: YAHOO.widget.Calendar.LONG,",
                "-        initialFocus: \"year\"",
                "-    };",
                "-",
                "-    /**",
                "-     * Object literal containing the default configuration values for the CalendarNavigator",
                "-     * @property _DEFAULT_CFG",
                "-     * @protected",
                "-     * @deprecated Made public. See the public DEFAULT_CONFIG property",
                "-     * @type Object",
                "-     * @static",
                "-     */",
                "-    CN._DEFAULT_CFG = CN.DEFAULT_CONFIG;",
                "-",
                "-",
                "-    /**",
                "-     * The suffix added to the Calendar/CalendarGroup's ID, to generate",
                "-     * a unique ID for the Navigator and it's bounding box.",
                "-     * @property YAHOO.widget.CalendarNavigator.ID_SUFFIX",
                "-     * @static",
                "-     * @type String",
                "-     * @final",
                "-     */",
                "-    CN.ID_SUFFIX = \"_nav\";",
                "-    /**",
                "-     * The suffix added to the Navigator's ID, to generate",
                "-     * a unique ID for the month control.",
                "-     * @property YAHOO.widget.CalendarNavigator.MONTH_SUFFIX",
                "-     * @static",
                "-     * @type String ",
                "-     * @final",
                "-     */",
                "-    CN.MONTH_SUFFIX = \"_month\";",
                "-    /**",
                "-     * The suffix added to the Navigator's ID, to generate",
                "-     * a unique ID for the year control.",
                "-     * @property YAHOO.widget.CalendarNavigator.YEAR_SUFFIX",
                "-     * @static",
                "-     * @type String",
                "-     * @final",
                "-     */",
                "-    CN.YEAR_SUFFIX = \"_year\";",
                "-    /**",
                "-     * The suffix added to the Navigator's ID, to generate",
                "-     * a unique ID for the error bounding box.",
                "-     * @property YAHOO.widget.CalendarNavigator.ERROR_SUFFIX",
                "-     * @static",
                "-     * @type String",
                "-     * @final",
                "-     */",
                "-    CN.ERROR_SUFFIX = \"_error\";",
                "-    /**",
                "-     * The suffix added to the Navigator's ID, to generate",
                "-     * a unique ID for the \"Cancel\" button.",
                "-     * @property YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX",
                "-     * @static",
                "-     * @type String",
                "-     * @final",
                "-     */",
                "-    CN.CANCEL_SUFFIX = \"_cancel\";",
                "-    /**",
                "-     * The suffix added to the Navigator's ID, to generate",
                "-     * a unique ID for the \"Submit\" button.",
                "-     * @property YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX",
                "-     * @static",
                "-     * @type String",
                "-     * @final",
                "-     */",
                "-    CN.SUBMIT_SUFFIX = \"_submit\";",
                "-",
                "-    /**",
                "-     * The number of digits to which the year input control is to be limited.",
                "-     * @property YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS",
                "-     * @static",
                "-     * @type Number",
                "-     */",
                "-    CN.YR_MAX_DIGITS = 4;",
                "-",
                "-    /**",
                "-     * The amount by which to increment the current year value,",
                "-     * when the arrow up/down key is pressed on the year control",
                "-     * @property YAHOO.widget.CalendarNavigator.YR_MINOR_INC",
                "-     * @static",
                "-     * @type Number",
                "-     */",
                "-    CN.YR_MINOR_INC = 1;",
                "-",
                "-    /**",
                "-     * The amount by which to increment the current year value,",
                "-     * when the page up/down key is pressed on the year control",
                "-     * @property YAHOO.widget.CalendarNavigator.YR_MAJOR_INC",
                "-     * @static",
                "-     * @type Number",
                "-     */",
                "-    CN.YR_MAJOR_INC = 10;",
                "-",
                "-    /**",
                "-     * Artificial delay (in ms) between the time the Navigator is hidden",
                "-     * and the Calendar/CalendarGroup state is updated. Allows the user",
                "-     * the see the Calendar/CalendarGroup page changing. If set to 0",
                "-     * the Calendar/CalendarGroup page will be updated instantly",
                "-     * @property YAHOO.widget.CalendarNavigator.UPDATE_DELAY",
                "-     * @static",
                "-     * @type Number",
                "-     */",
                "-    CN.UPDATE_DELAY = 50;",
                "-",
                "-    /**",
                "-     * Regular expression used to validate the year input",
                "-     * @property YAHOO.widget.CalendarNavigator.YR_PATTERN",
                "-     * @static",
                "-     * @type RegExp",
                "-     */",
                "-    CN.YR_PATTERN = /^\\d+$/;",
                "-    /**",
                "-     * Regular expression used to trim strings",
                "-     * @property YAHOO.widget.CalendarNavigator.TRIM",
                "-     * @static",
                "-     * @type RegExp",
                "-     */",
                "-    CN.TRIM = /^\\s*(.*?)\\s*$/;",
                "-})();",
                "-",
                "-YAHOO.widget.CalendarNavigator.prototype = {",
                "-",
                "-    /**",
                "-     * The unique ID for this CalendarNavigator instance",
                "-     * @property id",
                "-     * @type String",
                "-     */",
                "-    id : null,",
                "-",
                "-    /**",
                "-     * The Calendar/CalendarGroup instance to which the navigator belongs",
                "-     * @property cal",
                "-     * @type {Calendar|CalendarGroup}",
                "-     */",
                "-    cal : null,",
                "-",
                "-    /**",
                "-     * Reference to the HTMLElement used to render the navigator's bounding box",
                "-     * @property navEl",
                "-     * @type HTMLElement",
                "-     */",
                "-    navEl : null,",
                "-",
                "-    /**",
                "-     * Reference to the HTMLElement used to render the navigator's mask",
                "-     * @property maskEl",
                "-     * @type HTMLElement",
                "-     */",
                "-    maskEl : null,",
                "-",
                "-    /**",
                "-     * Reference to the HTMLElement used to input the year",
                "-     * @property yearEl",
                "-     * @type HTMLElement",
                "-     */",
                "-    yearEl : null,",
                "-",
                "-    /**",
                "-     * Reference to the HTMLElement used to input the month",
                "-     * @property monthEl",
                "-     * @type HTMLElement",
                "-     */",
                "-    monthEl : null,",
                "-",
                "-    /**",
                "-     * Reference to the HTMLElement used to display validation errors",
                "-     * @property errorEl",
                "-     * @type HTMLElement",
                "-     */",
                "-    errorEl : null,",
                "-",
                "-    /**",
                "-     * Reference to the HTMLElement used to update the Calendar/Calendar group",
                "-     * with the month/year values",
                "-     * @property submitEl",
                "-     * @type HTMLElement",
                "-     */",
                "-    submitEl : null,",
                "-    ",
                "-    /**",
                "-     * Reference to the HTMLElement used to hide the navigator without updating the ",
                "-     * Calendar/Calendar group",
                "-     * @property cancelEl",
                "-     * @type HTMLElement",
                "-     */",
                "-    cancelEl : null,",
                "-",
                "-    /** ",
                "-     * Reference to the first focusable control in the navigator (by default monthEl)",
                "-     * @property firstCtrl",
                "-     * @type HTMLElement",
                "-     */",
                "-    firstCtrl : null,",
                "-    ",
                "-    /** ",
                "-     * Reference to the last focusable control in the navigator (by default cancelEl)",
                "-     * @property lastCtrl",
                "-     * @type HTMLElement",
                "-     */",
                "-    lastCtrl : null,",
                "-",
                "-    /**",
                "-     * The document containing the Calendar/Calendar group instance",
                "-     * @protected",
                "-     * @property _doc",
                "-     * @type HTMLDocument",
                "-     */",
                "-    _doc : null,",
                "-",
                "-    /**",
                "-     * Internal state property for the current year displayed in the navigator",
                "-     * @protected",
                "-     * @property _year",
                "-     * @type Number",
                "-     */",
                "-    _year: null,",
                "-    ",
                "-    /**",
                "-     * Internal state property for the current month index displayed in the navigator",
                "-     * @protected",
                "-     * @property _month",
                "-     * @type Number",
                "-     */",
                "-    _month: 0,",
                "-",
                "-    /**",
                "-     * Private internal state property which indicates whether or not the ",
                "-     * Navigator has been rendered.",
                "-     * @private",
                "-     * @property __rendered",
                "-     * @type Boolean",
                "-     */",
                "-    __rendered: false,",
                "-",
                "-    /**",
                "-     * Init lifecycle method called as part of construction",
                "-     * ",
                "-     * @method init",
                "-     * @param {Calendar} cal The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached",
                "-     */",
                "-    init : function(cal) {",
                "-        var calBox = cal.oDomContainer;",
                "-",
                "-        this.cal = cal;",
                "-        this.id = calBox.id + YAHOO.widget.CalendarNavigator.ID_SUFFIX;",
                "-        this._doc = calBox.ownerDocument;",
                "-",
                "-        /**",
                "-         * Private flag, to identify IE Quirks",
                "-         * @private",
                "-         * @property __isIEQuirks",
                "-         */",
                "-        var ie = YAHOO.env.ua.ie;",
                "-        this.__isIEQuirks = (ie && ((ie <= 6) || (this._doc.compatMode == \"BackCompat\")));",
                "-    },",
                "-",
                "-    /**",
                "-     * Displays the navigator and mask, updating the input controls to reflect the ",
                "-     * currently set month and year. The show method will invoke the render method",
                "-     * if the navigator has not been renderered already, allowing for lazy rendering",
                "-     * of the control.",
                "-     * ",
                "-     * The show method will fire the Calendar/CalendarGroup's beforeShowNav and showNav events",
                "-     * ",
                "-     * @method show",
                "-     */",
                "-    show : function() {",
                "-        var CLASSES = YAHOO.widget.CalendarNavigator.CLASSES;",
                "-",
                "-        if (this.cal.beforeShowNavEvent.fire()) {",
                "-            if (!this.__rendered) {",
                "-                this.render();",
                "-            }",
                "-            this.clearErrors();",
                "-",
                "-            this._updateMonthUI();",
                "-            this._updateYearUI();",
                "-            this._show(this.navEl, true);",
                "-",
                "-            this.setInitialFocus();",
                "-            this.showMask();",
                "-",
                "-            YAHOO.util.Dom.addClass(this.cal.oDomContainer, CLASSES.NAV_VISIBLE);",
                "-            this.cal.showNavEvent.fire();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Hides the navigator and mask",
                "-     * ",
                "-     * The show method will fire the Calendar/CalendarGroup's beforeHideNav event and hideNav events",
                "-     * @method hide",
                "-     */",
                "-    hide : function() {",
                "-        var CLASSES = YAHOO.widget.CalendarNavigator.CLASSES;",
                "-",
                "-        if (this.cal.beforeHideNavEvent.fire()) {",
                "-            this._show(this.navEl, false);",
                "-            this.hideMask();",
                "-            YAHOO.util.Dom.removeClass(this.cal.oDomContainer, CLASSES.NAV_VISIBLE);",
                "-            this.cal.hideNavEvent.fire();",
                "-        }",
                "-    },",
                "-    ",
                "-",
                "-    /**",
                "-     * Displays the navigator's mask element",
                "-     * ",
                "-     * @method showMask",
                "-     */",
                "-    showMask : function() {",
                "-        this._show(this.maskEl, true);",
                "-        if (this.__isIEQuirks) {",
                "-            this._syncMask();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Hides the navigator's mask element",
                "-     * ",
                "-     * @method hideMask",
                "-     */",
                "-    hideMask : function() {",
                "-        this._show(this.maskEl, false);",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns the current month set on the navigator",
                "-     * ",
                "-     * Note: This may not be the month set in the UI, if ",
                "-     * the UI contains an invalid value.",
                "-     * ",
                "-     * @method getMonth",
                "-     * @return {Number} The Navigator's current month index",
                "-     */",
                "-    getMonth: function() {",
                "-        return this._month;",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns the current year set on the navigator",
                "-     * ",
                "-     * Note: This may not be the year set in the UI, if ",
                "-     * the UI contains an invalid value.",
                "-     * ",
                "-     * @method getYear",
                "-     * @return {Number} The Navigator's current year value",
                "-     */",
                "-    getYear: function() {",
                "-        return this._year;",
                "-    },",
                "-",
                "-    /**",
                "-     * Sets the current month on the Navigator, and updates the UI",
                "-     * ",
                "-     * @method setMonth",
                "-     * @param {Number} nMonth The month index, from 0 (Jan) through 11 (Dec).",
                "-     */",
                "-    setMonth : function(nMonth) {",
                "-        if (nMonth >= 0 && nMonth < 12) {",
                "-            this._month = nMonth;",
                "-        }",
                "-        this._updateMonthUI();",
                "-    },",
                "-",
                "-    /**",
                "-     * Sets the current year on the Navigator, and updates the UI. If the ",
                "-     * provided year is invalid, it will not be set.",
                "-     * ",
                "-     * @method setYear",
                "-     * @param {Number} nYear The full year value to set the Navigator to.",
                "-     */",
                "-    setYear : function(nYear) {",
                "-        var yrPattern = YAHOO.widget.CalendarNavigator.YR_PATTERN;",
                "-        if (YAHOO.lang.isNumber(nYear) && yrPattern.test(nYear+\"\")) {",
                "-            this._year = nYear;",
                "-        }",
                "-        this._updateYearUI();",
                "-    },",
                "-",
                "-    /**",
                "-     * Renders the HTML for the navigator, adding it to the ",
                "-     * document and attaches event listeners if it has not ",
                "-     * already been rendered.",
                "-     * ",
                "-     * @method render",
                "-     */",
                "-    render: function() {",
                "-        this.cal.beforeRenderNavEvent.fire();",
                "-        if (!this.__rendered) {",
                "-            this.createNav();",
                "-            this.createMask();",
                "-            this.applyListeners();",
                "-            this.__rendered = true;",
                "-        }",
                "-        this.cal.renderNavEvent.fire();",
                "-    },",
                "-",
                "-    /**",
                "-     * Creates the navigator's containing HTMLElement, it's contents, and appends ",
                "-     * the containg element to the Calendar/CalendarGroup's container.",
                "-     * ",
                "-     * @method createNav",
                "-     */",
                "-    createNav : function() {",
                "-        var NAV = YAHOO.widget.CalendarNavigator;",
                "-        var doc = this._doc;",
                "-",
                "-        var d = doc.createElement(\"div\");",
                "-        d.className = NAV.CLASSES.NAV;",
                "-",
                "-        var htmlBuf = this.renderNavContents([]);",
                "-",
                "-        d.innerHTML = htmlBuf.join('');",
                "-        this.cal.oDomContainer.appendChild(d);",
                "-",
                "-        this.navEl = d;",
                "-",
                "-        this.yearEl = doc.getElementById(this.id + NAV.YEAR_SUFFIX);",
                "-        this.monthEl = doc.getElementById(this.id + NAV.MONTH_SUFFIX);",
                "-        this.errorEl = doc.getElementById(this.id + NAV.ERROR_SUFFIX);",
                "-        this.submitEl = doc.getElementById(this.id + NAV.SUBMIT_SUFFIX);",
                "-        this.cancelEl = doc.getElementById(this.id + NAV.CANCEL_SUFFIX);",
                "-",
                "-        if (YAHOO.env.ua.gecko && this.yearEl && this.yearEl.type == \"text\") {",
                "-            // Avoid XUL error on focus, select [ https://bugzilla.mozilla.org/show_bug.cgi?id=236791, ",
                "-            // supposedly fixed in 1.8.1, but there are reports of it still being around for methods other than blur ]",
                "-            this.yearEl.setAttribute(\"autocomplete\", \"off\");",
                "-        }",
                "-",
                "-        this._setFirstLastElements();",
                "-    },",
                "-",
                "-    /**",
                "-     * Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups",
                "-     * container.",
                "-     * ",
                "-     * @method createMask",
                "-     */",
                "-    createMask : function() {",
                "-        var C = YAHOO.widget.CalendarNavigator.CLASSES;",
                "-",
                "-        var d = this._doc.createElement(\"div\");",
                "-        d.className = C.MASK;",
                "-",
                "-        this.cal.oDomContainer.appendChild(d);",
                "-        this.maskEl = d;",
                "-    },",
                "-",
                "-    /**",
                "-     * Used to set the width/height of the mask in pixels to match the Calendar Container.",
                "-     * Currently only used for IE6 or IE in quirks mode. The other A-Grade browser are handled using CSS (width/height 100%).",
                "-     * <p>",
                "-     * The method is also registered as an HTMLElement resize listener on the Calendars container element.",
                "-     * </p>",
                "-     * @protected",
                "-     * @method _syncMask",
                "-     */",
                "-    _syncMask : function() {",
                "-        var c = this.cal.oDomContainer;",
                "-        if (c && this.maskEl) {",
                "-            var r = YAHOO.util.Dom.getRegion(c);",
                "-            YAHOO.util.Dom.setStyle(this.maskEl, \"width\", r.right - r.left + \"px\");",
                "-            YAHOO.util.Dom.setStyle(this.maskEl, \"height\", r.bottom - r.top + \"px\");",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Renders the contents of the navigator. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-     * ",
                "-     * @method renderNavContents",
                "-     * ",
                "-     * @param {HTML[]} html The HTML buffer to append the HTML to.",
                "-     * @return {HTML[]} A reference to the buffer passed in.",
                "-     */",
                "-    renderNavContents : function(html) {",
                "-        var NAV = YAHOO.widget.CalendarNavigator,",
                "-            C = NAV.CLASSES,",
                "-            h = html; // just to use a shorter name",
                "-",
                "-        h[h.length] = '<div class=\"' + C.MONTH + '\">';",
                "-        this.renderMonth(h);",
                "-        h[h.length] = '</div>';",
                "-        h[h.length] = '<div class=\"' + C.YEAR + '\">';",
                "-        this.renderYear(h);",
                "-        h[h.length] = '</div>';",
                "-        h[h.length] = '<div class=\"' + C.BUTTONS + '\">';",
                "-        this.renderButtons(h);",
                "-        h[h.length] = '</div>';",
                "-        h[h.length] = '<div class=\"' + C.ERROR + '\" id=\"' + this.id + NAV.ERROR_SUFFIX + '\"></div>';",
                "-",
                "-        return h;",
                "-    },",
                "-",
                "-    /**",
                "-     * Renders the month label and control for the navigator. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-     * ",
                "-     * @method renderNavContents",
                "-     * @param {HTML[]} html The HTML buffer to append the HTML to.",
                "-     * @return {HTML[]} A reference to the buffer passed in.",
                "-     */",
                "-    renderMonth : function(html) {",
                "-        var NAV = YAHOO.widget.CalendarNavigator,",
                "-            C = NAV.CLASSES;",
                "-",
                "-        var id = this.id + NAV.MONTH_SUFFIX,",
                "-            mf = this.__getCfg(\"monthFormat\"),",
                "-            months = this.cal.cfg.getProperty((mf == YAHOO.widget.Calendar.SHORT) ? \"MONTHS_SHORT\" : \"MONTHS_LONG\"),",
                "-            h = html;",
                "-",
                "-        if (months && months.length > 0) {",
                "-            h[h.length] = '<label for=\"' + id + '\">';",
                "-            h[h.length] = this.__getCfg(\"month\", true);",
                "-            h[h.length] = '</label>';",
                "-            h[h.length] = '<select name=\"' + id + '\" id=\"' + id + '\" class=\"' + C.MONTH_CTRL + '\">';",
                "-            for (var i = 0; i < months.length; i++) {",
                "-                h[h.length] = '<option value=\"' + i + '\">';",
                "-                h[h.length] = months[i];",
                "-                h[h.length] = '</option>';",
                "-            }",
                "-            h[h.length] = '</select>';",
                "-        }",
                "-        return h;",
                "-    },",
                "-",
                "-    /**",
                "-     * Renders the year label and control for the navigator. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source. ",
                "-     * ",
                "-     * @method renderYear",
                "-     * @param {Array} html The HTML buffer to append the HTML to.",
                "-     * @return {Array} A reference to the buffer passed in.",
                "-     */",
                "-    renderYear : function(html) {",
                "-        var NAV = YAHOO.widget.CalendarNavigator,",
                "-            C = NAV.CLASSES;",
                "-",
                "-        var id = this.id + NAV.YEAR_SUFFIX,",
                "-            size = NAV.YR_MAX_DIGITS,",
                "-            h = html;",
                "-",
                "-        h[h.length] = '<label for=\"' + id + '\">';",
                "-        h[h.length] = this.__getCfg(\"year\", true);",
                "-        h[h.length] = '</label>';",
                "-        h[h.length] = '<input type=\"text\" name=\"' + id + '\" id=\"' + id + '\" class=\"' + C.YEAR_CTRL + '\" maxlength=\"' + size + '\"/>';",
                "-        return h;",
                "-    },",
                "-",
                "-    /**",
                "-     * Renders the submit/cancel buttons for the navigator. NOTE: The contents of the array passed into this method are added to the DOM as HTML, and should be escaped by the implementor if coming from an external source.",
                "-     * ",
                "-     * @method renderButtons",
                "-     * @param {Array} html The HTML buffer to append the HTML to.",
                "-     * @return {Array} A reference to the buffer passed in.",
                "-     */",
                "-    renderButtons : function(html) {",
                "-        var C = YAHOO.widget.CalendarNavigator.CLASSES;",
                "-        var h = html;",
                "-",
                "-        h[h.length] = '<span class=\"' + C.BUTTON + ' ' + C.DEFAULT + '\">';",
                "-        h[h.length] = '<button type=\"button\" id=\"' + this.id + '_submit' + '\">';",
                "-        h[h.length] = this.__getCfg(\"submit\", true);",
                "-        h[h.length] = '</button>';",
                "-        h[h.length] = '</span>';",
                "-        h[h.length] = '<span class=\"' + C.BUTTON +'\">';",
                "-        h[h.length] = '<button type=\"button\" id=\"' + this.id + '_cancel' + '\">';",
                "-        h[h.length] = this.__getCfg(\"cancel\", true);",
                "-        h[h.length] = '</button>';",
                "-        h[h.length] = '</span>';",
                "-",
                "-        return h;",
                "-    },",
                "-",
                "-    /**",
                "-     * Attaches DOM event listeners to the rendered elements",
                "-     * <p>",
                "-     * The method will call applyKeyListeners, to setup keyboard specific ",
                "-     * listeners",
                "-     * </p>",
                "-     * @method applyListeners",
                "-     */",
                "-    applyListeners : function() {",
                "-        var E = YAHOO.util.Event;",
                "-",
                "-        function yearUpdateHandler() {",
                "-            if (this.validate()) {",
                "-                this.setYear(this._getYearFromUI());",
                "-            }",
                "-        }",
                "-",
                "-        function monthUpdateHandler() {",
                "-            this.setMonth(this._getMonthFromUI());",
                "-        }",
                "-",
                "-        E.on(this.submitEl, \"click\", this.submit, this, true);",
                "-        E.on(this.cancelEl, \"click\", this.cancel, this, true);",
                "-        E.on(this.yearEl, \"blur\", yearUpdateHandler, this, true);",
                "-        E.on(this.monthEl, \"change\", monthUpdateHandler, this, true);",
                "-",
                "-        if (this.__isIEQuirks) {",
                "-            YAHOO.util.Event.on(this.cal.oDomContainer, \"resize\", this._syncMask, this, true);",
                "-        }",
                "-",
                "-        this.applyKeyListeners();",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes/purges DOM event listeners from the rendered elements",
                "-     * ",
                "-     * @method purgeListeners",
                "-     */",
                "-    purgeListeners : function() {",
                "-        var E = YAHOO.util.Event;",
                "-        E.removeListener(this.submitEl, \"click\", this.submit);",
                "-        E.removeListener(this.cancelEl, \"click\", this.cancel);",
                "-        E.removeListener(this.yearEl, \"blur\");",
                "-        E.removeListener(this.monthEl, \"change\");",
                "-        if (this.__isIEQuirks) {",
                "-            E.removeListener(this.cal.oDomContainer, \"resize\", this._syncMask);",
                "-        }",
                "-",
                "-        this.purgeKeyListeners();",
                "-    },",
                "-",
                "-    /**",
                "-     * Attaches DOM listeners for keyboard support. ",
                "-     * Tab/Shift-Tab looping, Enter Key Submit on Year element,",
                "-     * Up/Down/PgUp/PgDown year increment on Year element",
                "-     * <p>",
                "-     * NOTE: MacOSX Safari 2.x doesn't let you tab to buttons and ",
                "-     * MacOSX Gecko does not let you tab to buttons or select controls,",
                "-     * so for these browsers, Tab/Shift-Tab looping is limited to the ",
                "-     * elements which can be reached using the tab key.",
                "-     * </p>",
                "-     * @method applyKeyListeners",
                "-     */",
                "-    applyKeyListeners : function() {",
                "-        var E = YAHOO.util.Event,",
                "-            ua = YAHOO.env.ua;",
                "-",
                "-        // IE/Safari 3.1 doesn't fire keypress for arrow/pg keys (non-char keys)",
                "-        var arrowEvt = (ua.ie || ua.webkit) ? \"keydown\" : \"keypress\";",
                "-",
                "-        // - IE/Safari 3.1 doesn't fire keypress for non-char keys",
                "-        // - Opera doesn't allow us to cancel keydown or keypress for tab, but ",
                "-        //   changes focus successfully on keydown (keypress is too late to change focus - opera's already moved on).",
                "-        var tabEvt = (ua.ie || ua.opera || ua.webkit) ? \"keydown\" : \"keypress\";",
                "-",
                "-        // Everyone likes keypress for Enter (char keys) - whoo hoo!",
                "-        E.on(this.yearEl, \"keypress\", this._handleEnterKey, this, true);",
                "-",
                "-        E.on(this.yearEl, arrowEvt, this._handleDirectionKeys, this, true);",
                "-        E.on(this.lastCtrl, tabEvt, this._handleTabKey, this, true);",
                "-        E.on(this.firstCtrl, tabEvt, this._handleShiftTabKey, this, true);",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes/purges DOM listeners for keyboard support",
                "-     *",
                "-     * @method purgeKeyListeners",
                "-     */",
                "-    purgeKeyListeners : function() {",
                "-        var E = YAHOO.util.Event,",
                "-            ua = YAHOO.env.ua;",
                "-",
                "-        var arrowEvt = (ua.ie || ua.webkit) ? \"keydown\" : \"keypress\";",
                "-        var tabEvt = (ua.ie || ua.opera || ua.webkit) ? \"keydown\" : \"keypress\";",
                "-",
                "-        E.removeListener(this.yearEl, \"keypress\", this._handleEnterKey);",
                "-        E.removeListener(this.yearEl, arrowEvt, this._handleDirectionKeys);",
                "-        E.removeListener(this.lastCtrl, tabEvt, this._handleTabKey);",
                "-        E.removeListener(this.firstCtrl, tabEvt, this._handleShiftTabKey);",
                "-    },",
                "-",
                "-    /**",
                "-     * Updates the Calendar/CalendarGroup's pagedate with the currently set month and year if valid.",
                "-     * <p>",
                "-     * If the currently set month/year is invalid, a validation error will be displayed and the ",
                "-     * Calendar/CalendarGroup's pagedate will not be updated.",
                "-     * </p>",
                "-     * @method submit",
                "-     */",
                "-    submit : function() {",
                "-        if (this.validate()) {",
                "-            this.hide();",
                "-",
                "-            this.setMonth(this._getMonthFromUI());",
                "-            this.setYear(this._getYearFromUI());",
                "-",
                "-            var cal = this.cal;",
                "-",
                "-            // Artificial delay, just to help the user see something changed",
                "-            var delay = YAHOO.widget.CalendarNavigator.UPDATE_DELAY;",
                "-            if (delay > 0) {",
                "-                var nav = this;",
                "-                window.setTimeout(function(){ nav._update(cal); }, delay);",
                "-            } else {",
                "-                this._update(cal);",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Updates the Calendar rendered state, based on the state of the CalendarNavigator",
                "-     * @method _update",
                "-     * @param cal The Calendar instance to update",
                "-     * @protected",
                "-     */",
                "-    _update : function(cal) {",
                "-        var date = YAHOO.widget.DateMath.getDate(this.getYear() - cal.cfg.getProperty(\"YEAR_OFFSET\"), this.getMonth(), 1);",
                "-        cal.cfg.setProperty(\"pagedate\", date);",
                "-        cal.render();",
                "-    },",
                "-",
                "-    /**",
                "-     * Hides the navigator and mask, without updating the Calendar/CalendarGroup's state",
                "-     * ",
                "-     * @method cancel",
                "-     */",
                "-    cancel : function() {",
                "-        this.hide();",
                "-    },",
                "-",
                "-    /**",
                "-     * Validates the current state of the UI controls",
                "-     * ",
                "-     * @method validate",
                "-     * @return {Boolean} true, if the current UI state contains valid values, false if not",
                "-     */",
                "-    validate : function() {",
                "-        if (this._getYearFromUI() !== null) {",
                "-            this.clearErrors();",
                "-            return true;",
                "-        } else {",
                "-            this.setYearError();",
                "-            this.setError(this.__getCfg(\"invalidYear\", true));",
                "-            return false;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Displays an error message in the Navigator's error panel.",
                "-     * ",
                "-     * @method setError",
                "-     * @param {HTML} msg The markup for the error message to display. NOTE: The msg passed into this method is added to the DOM as HTML, and should be escaped by the implementor if coming from an external source. ",
                "-     */",
                "-    setError : function(msg) {",
                "-        if (this.errorEl) {",
                "-            this.errorEl.innerHTML = msg;",
                "-            this._show(this.errorEl, true);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Clears the navigator's error message and hides the error panel",
                "-     * @method clearError ",
                "-     */",
                "-    clearError : function() {",
                "-        if (this.errorEl) {",
                "-            this.errorEl.innerHTML = \"\";",
                "-            this._show(this.errorEl, false);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Displays the validation error UI for the year control",
                "-     * @method setYearError",
                "-     */",
                "-    setYearError : function() {",
                "-        YAHOO.util.Dom.addClass(this.yearEl, YAHOO.widget.CalendarNavigator.CLASSES.INVALID);",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes the validation error UI for the year control",
                "-     * @method clearYearError",
                "-     */",
                "-    clearYearError : function() {",
                "-        YAHOO.util.Dom.removeClass(this.yearEl, YAHOO.widget.CalendarNavigator.CLASSES.INVALID);",
                "-    },",
                "-",
                "-    /**",
                "-     * Clears all validation and error messages in the UI",
                "-     * @method clearErrors",
                "-     */",
                "-    clearErrors : function() {",
                "-        this.clearError();",
                "-        this.clearYearError();",
                "-    },",
                "-",
                "-    /**",
                "-     * Sets the initial focus, based on the configured value",
                "-     * @method setInitialFocus",
                "-     */",
                "-    setInitialFocus : function() {",
                "-        var el = this.submitEl,",
                "-            f = this.__getCfg(\"initialFocus\");",
                "-",
                "-        if (f && f.toLowerCase) {",
                "-            f = f.toLowerCase();",
                "-            if (f == \"year\") {",
                "-                el = this.yearEl;",
                "-                try {",
                "-                    this.yearEl.select();",
                "-                } catch (selErr) {",
                "-                    // Ignore;",
                "-                }",
                "-            } else if (f == \"month\") {",
                "-                el = this.monthEl;",
                "-            }",
                "-        }",
                "-",
                "-        if (el && YAHOO.lang.isFunction(el.focus)) {",
                "-            try {",
                "-                el.focus();",
                "-            } catch (focusErr) {",
                "-                // TODO: Fall back if focus fails?",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes all renderered HTML elements for the Navigator from",
                "-     * the DOM, purges event listeners and clears (nulls) any property",
                "-     * references to HTML references",
                "-     * @method erase",
                "-     */",
                "-    erase : function() {",
                "-        if (this.__rendered) {",
                "-            this.purgeListeners();",
                "-",
                "-            // Clear out innerHTML references",
                "-            this.yearEl = null;",
                "-            this.monthEl = null;",
                "-            this.errorEl = null;",
                "-            this.submitEl = null;",
                "-            this.cancelEl = null;",
                "-            this.firstCtrl = null;",
                "-            this.lastCtrl = null;",
                "-            if (this.navEl) {",
                "-                this.navEl.innerHTML = \"\";",
                "-            }",
                "-",
                "-            var p = this.navEl.parentNode;",
                "-            if (p) {",
                "-                p.removeChild(this.navEl);",
                "-            }",
                "-            this.navEl = null;",
                "-",
                "-            var pm = this.maskEl.parentNode;",
                "-            if (pm) {",
                "-                pm.removeChild(this.maskEl);",
                "-            }",
                "-            this.maskEl = null;",
                "-            this.__rendered = false;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Destroys the Navigator object and any HTML references",
                "-     * @method destroy",
                "-     */",
                "-    destroy : function() {",
                "-        this.erase();",
                "-        this._doc = null;",
                "-        this.cal = null;",
                "-        this.id = null;",
                "-    },",
                "-",
                "-    /**",
                "-     * Protected implementation to handle how UI elements are ",
                "-     * hidden/shown.",
                "-     *",
                "-     * @method _show",
                "-     * @protected",
                "-     */",
                "-    _show : function(el, bShow) {",
                "-        if (el) {",
                "-            YAHOO.util.Dom.setStyle(el, \"display\", (bShow) ? \"block\" : \"none\");",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns the month value (index), from the month UI element",
                "-     * @protected",
                "-     * @method _getMonthFromUI",
                "-     * @return {Number} The month index, or 0 if a UI element for the month",
                "-     * is not found",
                "-     */",
                "-    _getMonthFromUI : function() {",
                "-        if (this.monthEl) {",
                "-            return this.monthEl.selectedIndex;",
                "-        } else {",
                "-            return 0; // Default to Jan",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns the year value, from the Navitator's year UI element",
                "-     * @protected",
                "-     * @method _getYearFromUI",
                "-     * @return {Number} The year value set in the UI, if valid. null is returned if ",
                "-     * the UI does not contain a valid year value.",
                "-     */",
                "-    _getYearFromUI : function() {",
                "-        var NAV = YAHOO.widget.CalendarNavigator;",
                "-",
                "-        var yr = null;",
                "-        if (this.yearEl) {",
                "-            var value = this.yearEl.value;",
                "-            value = value.replace(NAV.TRIM, \"$1\");",
                "-",
                "-            if (NAV.YR_PATTERN.test(value)) {",
                "-                yr = parseInt(value, 10);",
                "-            }",
                "-        }",
                "-        return yr;",
                "-    },",
                "-",
                "-    /**",
                "-     * Updates the Navigator's year UI, based on the year value set on the Navigator object",
                "-     * @protected",
                "-     * @method _updateYearUI",
                "-     */",
                "-    _updateYearUI : function() {",
                "-        if (this.yearEl && this._year !== null) {",
                "-            this.yearEl.value = this._year;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Updates the Navigator's month UI, based on the month value set on the Navigator object",
                "-     * @protected",
                "-     * @method _updateMonthUI",
                "-     */",
                "-    _updateMonthUI : function() {",
                "-        if (this.monthEl) {",
                "-            this.monthEl.selectedIndex = this._month;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Sets up references to the first and last focusable element in the Navigator's UI",
                "-     * in terms of tab order (Naviagator's firstEl and lastEl properties). The references",
                "-     * are used to control modality by looping around from the first to the last control",
                "-     * and visa versa for tab/shift-tab navigation.",
                "-     * <p>",
                "-     * See <a href=\"#applyKeyListeners\">applyKeyListeners</a>",
                "-     * </p>",
                "-     * @protected",
                "-     * @method _setFirstLastElements",
                "-     */",
                "-    _setFirstLastElements : function() {",
                "-        this.firstCtrl = this.monthEl;",
                "-        this.lastCtrl = this.cancelEl;",
                "-",
                "-        // Special handling for MacOSX.",
                "-        // - Safari 2.x can't focus on buttons",
                "-        // - Gecko can't focus on select boxes or buttons",
                "-        if (this.__isMac) {",
                "-            if (YAHOO.env.ua.webkit && YAHOO.env.ua.webkit < 420){",
                "-                this.firstCtrl = this.monthEl;",
                "-                this.lastCtrl = this.yearEl;",
                "-            }",
                "-            if (YAHOO.env.ua.gecko) {",
                "-                this.firstCtrl = this.yearEl;",
                "-                this.lastCtrl = this.yearEl;",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Default Keyboard event handler to capture Enter ",
                "-     * on the Navigator's year control (yearEl)",
                "-     * ",
                "-     * @method _handleEnterKey",
                "-     * @protected",
                "-     * @param {Event} e The DOM event being handled",
                "-     */",
                "-    _handleEnterKey : function(e) {",
                "-        var KEYS = YAHOO.util.KeyListener.KEY;",
                "-",
                "-        if (YAHOO.util.Event.getCharCode(e) == KEYS.ENTER) {",
                "-            YAHOO.util.Event.preventDefault(e);",
                "-            this.submit();",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Default Keyboard event handler to capture up/down/pgup/pgdown",
                "-     * on the Navigator's year control (yearEl).",
                "-     * ",
                "-     * @method _handleDirectionKeys",
                "-     * @protected",
                "-     * @param {Event} e The DOM event being handled",
                "-     */",
                "-    _handleDirectionKeys : function(e) {",
                "-        var E = YAHOO.util.Event,",
                "-            KEYS = YAHOO.util.KeyListener.KEY,",
                "-            NAV = YAHOO.widget.CalendarNavigator;",
                "-",
                "-        var value = (this.yearEl.value) ? parseInt(this.yearEl.value, 10) : null;",
                "-        if (isFinite(value)) {",
                "-            var dir = false;",
                "-            switch(E.getCharCode(e)) {",
                "-                case KEYS.UP:",
                "-                    this.yearEl.value = value + NAV.YR_MINOR_INC;",
                "-                    dir = true;",
                "-                    break;",
                "-                case KEYS.DOWN:",
                "-                    this.yearEl.value = Math.max(value - NAV.YR_MINOR_INC, 0);",
                "-                    dir = true;",
                "-                    break;",
                "-                case KEYS.PAGE_UP:",
                "-                    this.yearEl.value = value + NAV.YR_MAJOR_INC;",
                "-                    dir = true;",
                "-                    break;",
                "-                case KEYS.PAGE_DOWN:",
                "-                    this.yearEl.value = Math.max(value - NAV.YR_MAJOR_INC, 0);",
                "-                    dir = true;",
                "-                    break;",
                "-                default:",
                "-                    break;",
                "-            }",
                "-            if (dir) {",
                "-                E.preventDefault(e);",
                "-                try {",
                "-                    this.yearEl.select();",
                "-                } catch(err) {",
                "-                    // Ignore",
                "-                }",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Default Keyboard event handler to capture Tab ",
                "-     * on the last control (lastCtrl) in the Navigator.",
                "-     * ",
                "-     * @method _handleTabKey",
                "-     * @protected",
                "-     * @param {Event} e The DOM event being handled",
                "-     */",
                "-    _handleTabKey : function(e) {",
                "-        var E = YAHOO.util.Event,",
                "-            KEYS = YAHOO.util.KeyListener.KEY;",
                "-",
                "-        if (E.getCharCode(e) == KEYS.TAB && !e.shiftKey) {",
                "-            try {",
                "-                E.preventDefault(e);",
                "-                this.firstCtrl.focus();",
                "-            } catch (err) {",
                "-                // Ignore - mainly for focus edge cases",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Default Keyboard event handler to capture Shift-Tab ",
                "-     * on the first control (firstCtrl) in the Navigator.",
                "-     * ",
                "-     * @method _handleShiftTabKey",
                "-     * @protected",
                "-     * @param {Event} e The DOM event being handled",
                "-     */",
                "-    _handleShiftTabKey : function(e) {",
                "-        var E = YAHOO.util.Event,",
                "-            KEYS = YAHOO.util.KeyListener.KEY;",
                "-",
                "-        if (e.shiftKey && E.getCharCode(e) == KEYS.TAB) {",
                "-            try {",
                "-                E.preventDefault(e);",
                "-                this.lastCtrl.focus();",
                "-            } catch (err) {",
                "-                // Ignore - mainly for focus edge cases",
                "-            }",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Retrieve Navigator configuration values from ",
                "-     * the parent Calendar/CalendarGroup's config value.",
                "-     * <p>",
                "-     * If it has not been set in the user provided configuration, the method will ",
                "-     * return the default value of the configuration property, as set in DEFAULT_CONFIG",
                "-     * </p>",
                "-     * @private",
                "-     * @method __getCfg",
                "-     * @param {String} Case sensitive property name.",
                "-     * @param {Boolean} true, if the property is a string property, false if not.",
                "-     * @return The value of the configuration property",
                "-     */",
                "-    __getCfg : function(prop, bIsStr) {",
                "-        var DEF_CFG = YAHOO.widget.CalendarNavigator.DEFAULT_CONFIG;",
                "-        var cfg = this.cal.cfg.getProperty(\"navigator\");",
                "-",
                "-        if (bIsStr) {",
                "-            return (cfg !== true && cfg.strings && cfg.strings[prop]) ? cfg.strings[prop] : DEF_CFG.strings[prop];",
                "-        } else {",
                "-            return (cfg !== true && cfg[prop]) ? cfg[prop] : DEF_CFG[prop];",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Private flag, to identify MacOS",
                "-     * @private",
                "-     * @property __isMac",
                "-     */",
                "-    __isMac : (navigator.userAgent.toLowerCase().indexOf(\"macintosh\") != -1)",
                "-",
                "-};",
                "-YAHOO.register(\"calendar\", YAHOO.widget.Calendar, {version: \"2.9.0\", build: \"2800\"});",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon1.gif b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon1.gif",
                "deleted file mode 100644",
                "index c5e5c044b9..0000000000",
                "Binary files a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon1.gif and /dev/null differ",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon2.gif b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon2.gif",
                "deleted file mode 100644",
                "index b7d9077d45..0000000000",
                "Binary files a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon2.gif and /dev/null differ",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon3.gif b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon3.gif",
                "deleted file mode 100644",
                "index 45a24662c3..0000000000",
                "Binary files a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon3.gif and /dev/null differ",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/wicket-date.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/wicket-date.js",
                "deleted file mode 100644",
                "index 9a84fc38e4..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/wicket-date.js",
                "+++ /dev/null",
                "@@ -1,432 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-/*",
                "- * Wicket Date parse function for the Calendar/ Date picker component.",
                "- */",
                "-",
                "-/*globals YAHOO: true */",
                "-",
                "-;(function (undefined) {",
                "-\t'use strict';",
                "-",
                "-\t// Wicket Namespace",
                "-",
                "-\tif (typeof(Wicket) === \"undefined\") {",
                "-\t\twindow.Wicket = {};",
                "-\t}",
                "-",
                "-\tWicket.DateTime = {};",
                "-",
                "-\t/**",
                "-\t * Parses date from simple date pattern.",
                "-\t *",
                "-\t * Supports patterns built up from the following elements:",
                "-\t * yy OR yyyy for year",
                "-\t * M OR MM OR MMM OR MMMM for month",
                "-\t * d OR dd for day",
                "-\t * EEEE for weekday (optional)",
                "-\t */",
                "-\tWicket.DateTime.parseDate = function(cfg, value) {",
                "-\t\tvar numbers = value.match(/(\\d+)/g);",
                "-\t\tvar pattern = cfg.datePattern;",
                "-\t\tif (!numbers) {",
                "-\t\t\treturn NaN;",
                "-\t\t}",
                "-",
                "-\t\tvar day, month, year;",
                "-\t\tvar arrayPos = 0;",
                "-\t\tfor (var i = 0; i < pattern.length; i++) {",
                "-\t\t\tvar c = pattern.charAt(i);",
                "-\t\t\tvar len = 0;",
                "-\t\t\twhile ((pattern.charAt(i) === c) && (i < pattern.length)) {",
                "-\t\t\t\ti++;",
                "-\t\t\t\tlen++;",
                "-\t\t\t}",
                "-\t\t\tif (c === 'y') {",
                "-\t\t\t\tyear = numbers[arrayPos++];",
                "-\t\t\t} else if (c === 'M') {",
                "-\t\t\t\tvar nameArray;",
                "-\t\t\t\tswitch (len) {",
                "-\t\t\t\tcase 3:",
                "-\t\t\t\t\tnameArray = cfg.calendarInit.MONTHS_SHORT;",
                "-\t\t\t\t\tbreak;",
                "-\t\t\t\tcase 4:",
                "-\t\t\t\t\tnameArray = cfg.calendarInit.MONTHS_LONG;",
                "-\t\t\t\t\tbreak;",
                "-\t\t\t\tdefault:",
                "-\t\t\t\t\tnameArray = null;",
                "-\t\t\t\t}",
                "-\t\t\t\tif (nameArray) {",
                "-\t\t\t\t\tfor (var j = 0; j < nameArray.length; j++) {",
                "-\t\t\t\t\t\tif (value.indexOf(nameArray[j]) >= 0) {",
                "-\t\t\t\t\t\t\tmonth = j + 1;",
                "-\t\t\t\t\t\t\tbreak;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}",
                "-\t\t\t\t} else {",
                "-\t\t\t\t\tmonth = numbers[arrayPos++];",
                "-\t\t\t\t}",
                "-\t\t\t} else if (c === 'd') {",
                "-\t\t\t\tday = numbers[arrayPos++];",
                "-\t\t\t}",
                "-\t\t\tif (arrayPos > 2) {",
                "-\t\t\t\tbreak;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\t// TODO this is a bit crude. Make nicer some time.",
                "-\t\tif (year < 100) {",
                "-\t\t\tif (year < 70) {",
                "-\t\t\t\tyear = year * 1 + 2000;",
                "-\t\t\t} else {",
                "-\t\t\t\tyear = year * 1 + 1900;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tvar date = new Date();",
                "-\t\tdate.setHours(0);",
                "-\t\tdate.setMinutes(0);",
                "-\t\tdate.setSeconds(0);",
                "-\t\tdate.setMilliseconds(0);",
                "-\t\tdate.setFullYear(year, (month - 1), day);",
                "-",
                "-\t\treturn date;",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * Returns a string containing the value, with a leading zero if the value is < 10.",
                "-\t */",
                "-\tWicket.DateTime.padDateFragment = function(value) {",
                "-\t\treturn (value < 10 ? \"0\" : \"\") + value;",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * Gets the height of the displayed area of the window, as YAHOO.util.Dom.getViewportHeight()",
                "-\t * has issues with Firefox.",
                "-\t * See http://tech.groups.yahoo.com/group/ydn-javascript/message/5850",
                "-\t * Implementation taken from: http://www.quirksmode.org/viewport/compatibility.html#link2",
                "-\t */",
                "-\tWicket.DateTime.getViewportHeight = function() {",
                "-\t\tvar viewPortHeight;",
                "-",
                "-\t\tif (window.innerHeight) {// all browsers except IE",
                "-\t\t\tviewPortHeight = window.innerHeight;",
                "-\t\t} else if (document.documentElement && document.documentElement.clientHeight) {// IE 6 strict mode",
                "-\t\t\tviewPortHeight = document.documentElement.clientHeight;",
                "-\t\t} else if (document.body) {// other IEs",
                "-\t\t\tviewPortHeight = document.body.clientHeight;",
                "-\t\t}",
                "-\t\treturn viewPortHeight;",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * Position subject relative to target top-left by default.",
                "-\t * If there is too little space on the right side/bottom,",
                "-\t * the datepicker's position is corrected so that the right side/bottom",
                "-\t * is aligned with the display area's right side/bottom.",
                "-\t * @param subject the dom element to has to be positioned",
                "-\t * @param target id of the dom element to position relative to",
                "-\t */",
                "-\tWicket.DateTime.positionRelativeTo = function(subject, target) {",
                "-",
                "-\t\tvar targetPos = YAHOO.util.Dom.getXY(target);",
                "-\t\tvar targetHeight = YAHOO.util.Dom.get(target).offsetHeight;",
                "-\t\tvar subjectHeight = YAHOO.util.Dom.get(subject).offsetHeight;",
                "-\t\tvar subjectWidth = YAHOO.util.Dom.get(subject).offsetWidth;",
                "-",
                "-\t\tvar viewPortHeight = Wicket.DateTime.getViewportHeight();",
                "-\t\tvar viewPortWidth = YAHOO.util.Dom.getViewportWidth();",
                "-",
                "-\t\t// also take scroll position into account",
                "-\t\tvar scrollPos = [YAHOO.util.Dom.getDocumentScrollLeft(), YAHOO.util.Dom.getDocumentScrollTop()];",
                "-",
                "-\t\t// correct datepicker's position so that it isn't rendered off screen on the right side or bottom",
                "-\t\tif (targetPos[0] + subjectWidth > scrollPos[0] + viewPortWidth) {",
                "-\t\t\t// correct horizontal position",
                "-\t\t\tYAHOO.util.Dom.setX(subject, Math.max(targetPos[0], viewPortWidth) - subjectWidth);",
                "-\t\t} else {",
                "-\t\t\tYAHOO.util.Dom.setX(subject, targetPos[0]);",
                "-\t\t}",
                "-\t\tif (targetPos[1] + targetHeight + 1 + subjectHeight > scrollPos[1] + viewPortHeight) {",
                "-\t\t\t// correct vertical position",
                "-\t\t\tYAHOO.util.Dom.setY(subject, Math.max(targetPos[1], viewPortHeight) - subjectHeight);",
                "-\t\t} else {",
                "-\t\t\tYAHOO.util.Dom.setY(subject, targetPos[1] + targetHeight + 1);",
                "-\t\t}",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * Return the result of interpolating the value (datetime) argument with the date pattern.",
                "-\t * The date has to be an array, where year is in the first, month in the second",
                "-\t * and date (day of month) in the third slot.",
                "-\t */",
                "-\tWicket.DateTime.substituteDate = function(cfg, datetime) {",
                "-\t\tvar day = datetime[2];",
                "-\t\tvar month = datetime[1];",
                "-\t\tvar year = datetime[0];",
                "-",
                "-\t\tvar date = new Date();",
                "-\t\tdate.setHours(0);",
                "-\t\tdate.setMinutes(0);",
                "-\t\tdate.setSeconds(0);",
                "-\t\tdate.setMilliseconds(0);",
                "-\t\tdate.setFullYear(year, (month - 1), day);",
                "-",
                "-\t\tvar dayName = null;",
                "-\t\tvar datePattern = cfg.datePattern;",
                "-",
                "-\t\t// optionally do some padding to match the pattern",
                "-\t\tif(datePattern.match(/dd+/)) {",
                "-\t\t\tday = Wicket.DateTime.padDateFragment(day);",
                "-\t\t}",
                "-\t\tif (datePattern.match(/MMMM/)) {",
                "-\t\t\tmonth = cfg.calendarInit.MONTHS_LONG[month - 1];",
                "-\t\t}",
                "-\t\telse if (datePattern.match(/MMM/)) {",
                "-\t\t\tmonth = cfg.calendarInit.MONTHS_SHORT[month - 1];",
                "-\t\t}",
                "-\t\telse if(datePattern.match(/MM+/)) {",
                "-\t\t\tmonth = Wicket.DateTime.padDateFragment(month);",
                "-\t\t}",
                "-\t\tif(datePattern.match(/yyy+/)) {",
                "-\t\t\tyear = Wicket.DateTime.padDateFragment(year);",
                "-\t\t} else if(datePattern.match(/yy+/)) {",
                "-\t\t\tyear = Wicket.DateTime.padDateFragment(year % 100);",
                "-\t\t}",
                "-\t\tif (datePattern.match(/EEEE/)) {",
                "-\t\t\t// figure out which weekday it is...",
                "-\t\t\tvar engDayName = date.toString().match(/(\\S*)/)[0];",
                "-\t\t\tvar engDayNames = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];",
                "-\t\t\tfor (var i = 0; i < engDayNames.length; i++) {",
                "-\t\t\t\tif (engDayName === engDayNames[i]) {",
                "-\t\t\t\t\tdayName = cfg.calendarInit.WEEKDAYS_LONG[i];",
                "-\t\t\t\t\tbreak;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\t// replace pattern with real values",
                "-\t\tvar result = datePattern.replace(/d+/, day).replace(/y+/, year).replace(/M+/, month);",
                "-",
                "-\t\tif (dayName != null) {",
                "-\t\t\tresult = result.replace(/EEEE/, dayName);",
                "-\t\t}",
                "-",
                "-\t\treturn result;",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * Display the YUI calendar widget. If the date is not null (should be a string) then it is parsed",
                "-\t * using the provided date pattern, and set as the current date on the widget.",
                "-\t */",
                "-\tWicket.DateTime.showCalendar = function(widget, date, cfg) {",
                "-\t\tif (date) {",
                "-\t\t\tdate = Wicket.DateTime.parseDate(cfg, date);",
                "-\t\t\tif (!isNaN(date)) {",
                "-\t\t\t\twidget.select(date);",
                "-\t\t\t\tvar firstDate = widget.getSelectedDates()[0];",
                "-\t\t\t\tif (firstDate) {",
                "-\t\t\t\t\twidget.cfg.setProperty(\"pagedate\", (firstDate.getMonth() + 1) + \"/\" + firstDate.getFullYear());",
                "-\t\t\t\t\twidget.render();",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\twidget.show();",
                "-\t};",
                "-",
                "-\t// configures a datepicker using the cfg object",
                "-\tWicket.DateTime.init = function(cfg) {",
                "-\t\tcfg.dpJs = cfg.widgetId + \"DpJs\";",
                "-\t\tcfg.dp = cfg.widgetId + \"Dp\";",
                "-\t\tcfg.icon = cfg.widgetId +\"Icon\";",
                "-\t\tYAHOO.namespace(\"wicket\");",
                "-",
                "-\t\tif (cfg.calendarInit.pages && cfg.calendarInit.pages > 1) {",
                "-\t\t\tYAHOO.wicket[cfg.dpJs] = new YAHOO.widget.CalendarGroup(cfg.dpJs,cfg.dp, cfg.calendarInit);",
                "-\t\t} else {",
                "-\t\t\tYAHOO.wicket[cfg.dpJs] = new YAHOO.widget.Calendar(cfg.dpJs,cfg.dp, cfg.calendarInit);",
                "-\t\t}",
                "-\t\tYAHOO.wicket[cfg.dpJs].isVisible = function() { return YAHOO.wicket[cfg.dpJs].oDomContainer.style.display === 'block'; };",
                "-",
                "-\t\tfunction showCalendar() {",
                "-\t\t\tif (YAHOO.wicket[cfg.dpJs].oDomContainer.style.display !== 'block') {",
                "-\t\t\t\tWicket.DateTime.showCalendar(YAHOO.wicket[cfg.dpJs], YAHOO.util.Dom.get(cfg.componentId).value, cfg);",
                "-\t\t\t\tif (cfg.alignWithIcon) {",
                "-\t\t\t\t\tWicket.DateTime.positionRelativeTo(YAHOO.wicket[cfg.dpJs].oDomContainer, cfg.icon);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\tYAHOO.util.Event.addListener(cfg.icon, \"click\", showCalendar, YAHOO.wicket[cfg.dpJs], true);",
                "-",
                "-\t\tif (cfg.showOnFieldClick) {",
                "-\t\t\tYAHOO.util.Event.addListener(cfg.widgetId, \"click\", showCalendar, YAHOO.wicket[cfg.dpJs], true);",
                "-\t\t}",
                "-",
                "-\t\tYAHOO.wicket[cfg.dpJs].cfg.setProperty(YAHOO.widget.Calendar.DEFAULT_CONFIG.STRINGS.key, {\"close\": cfg.closeLabel});",
                "-",
                "-\t\tfunction selectHandler(type, args, cal) {",
                "-\t\t\tYAHOO.util.Dom.get(cfg.componentId).value = Wicket.DateTime.substituteDate(cfg, args[0][0]);",
                "-\t\t\tif (cal.isVisible()) {",
                "-\t\t\t\tif (cfg.hideOnSelect) {",
                "-\t\t\t\t\tcal.hide();",
                "-\t\t\t\t}",
                "-\t\t\t\tif (cfg.fireChangeEvent) {",
                "-\t\t\t\t\tvar field = YAHOO.util.Dom.get(cfg.componentId);",
                "-\t\t\t\t\tif (field.onchangeoriginal) {",
                "-\t\t\t\t\t\tfield.onchangeoriginal();",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tif (field.onchange) {",
                "-\t\t\t\t\t\tfield.onchange();",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tWicket.Event.fire(Wicket.$(cfg.componentId), 'change');",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\tYAHOO.wicket[cfg.dpJs].selectEvent.subscribe(selectHandler, YAHOO.wicket[cfg.dpJs]);",
                "-",
                "-\t\tif(cfg.autoHide) {",
                "-\t\t\tYAHOO.util.Event.on(document, \"click\", function(e) {",
                "-",
                "-\t\t\t\tvar el = YAHOO.util.Event.getTarget(e);",
                "-\t\t\t\tvar dialogEl = document.getElementById(cfg.dp);",
                "-\t\t\t\tvar showBtn = document.getElementById(cfg.icon);",
                "-\t\t\t\tvar fieldEl = document.getElementById(cfg.componentId);",
                "-",
                "-\t\t\t\tif (YAHOO.wicket[cfg.dpJs] &&",
                "-\t\t\t\t\tel !== dialogEl &&",
                "-\t\t\t\t\tel !== fieldEl &&",
                "-\t\t\t\t\t!YAHOO.util.Dom.isAncestor(dialogEl, el) &&",
                "-\t\t\t\t\tel !== showBtn &&",
                "-\t\t\t\t\t!YAHOO.util.Dom.isAncestor(showBtn, el))",
                "-\t\t\t\t{",
                "-\t\t\t\t\tYAHOO.wicket[cfg.dpJs].hide();",
                "-\t\t\t\t}",
                "-\t        });",
                "-\t    }",
                "-\t    YAHOO.wicket[cfg.dpJs].render();",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * Checks that `str` ends with `suffix`",
                "-\t * @param str The string to check",
                "-\t * @param suffix The suffix with which the `srt` must end",
                "-\t * @return {boolean} true if the `str` ends with `suffix`",
                "-\t */",
                "-\tvar endsWith = function(str, suffix) {",
                "-\t    return str.indexOf(suffix, str.length - suffix.length) !== -1;",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * @param toDestroy An array of Wicket DateTime objects to destroy",
                "-\t */",
                "-\tvar destroyInternal = function (toDestroy) {",
                "-\t",
                "-\t\t// avoids creation of a function inside a loop (JSLint warning)",
                "-\t\tfunction scheduleDestroy(toDestroy2) {",
                "-\t\t\twindow.setTimeout(function(){destroyInternal(toDestroy2);}, 5);",
                "-\t\t}",
                "-",
                "-\t\tif (toDestroy && toDestroy.length > 1) {",
                "-\t\t\tvar i = 0;",
                "-\t\t\twhile (toDestroy.length > 0) {",
                "-\t\t\t\tvar name = toDestroy.pop();",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\tif (YAHOO.wicket[name]) {",
                "-\t\t\t\t\t\t// this is expensive.",
                "-\t\t\t\t\t\tYAHOO.wicket[name].destroy();",
                "-\t\t\t\t\t\tdelete YAHOO.wicket[name];",
                "-\t\t\t\t\t}",
                "-\t\t\t\t} catch (e) {",
                "-\t\t\t\t\tif (Wicket.Log) {",
                "-\t\t\t\t\t\tWicket.Log.error(e);",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\ti++;",
                "-\t\t\t\tif (i === 20) {",
                "-\t\t\t\t\tscheduleDestroy(toDestroy);",
                "-\t\t\t\t\tbreak;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-\t};",
                "-",
                "-\t/**",
                "-\t * Schedules all YAHOO.wicket.** objects for destroy if their host HTML element",
                "-\t * is no more in the DOM document.",
                "-\t */",
                "-\tvar destroy = function() {",
                "-\t\tif (!YAHOO.wicket) {",
                "-\t\t\treturn;",
                "-\t\t}",
                "-\t\tvar deleted = 0;",
                "-\t\tvar available = 0;",
                "-\t\tvar toDestroy = [];",
                "-\t\tfor(var propertyName in YAHOO.wicket) {",
                "-\t\t\tif (endsWith(propertyName, \"DpJs\")) {",
                "-\t\t\t\tvar id = propertyName.substring(0, propertyName.length - 4);",
                "-\t\t\t\tvar e = Wicket.$(id);",
                "-\t\t\t\tavailable++;",
                "-\t\t\t\tif (e === null) {",
                "-\t\t\t\t\ttry {",
                "-\t\t\t\t\t\tdeleted++;",
                "-\t\t\t\t\t\ttoDestroy.push(propertyName);",
                "-\t\t\t\t\t} catch (ex) {",
                "-\t\t\t\t\t\tif (Wicket.Log) {",
                "-\t\t\t\t\t\t\tWicket.Log.error(ex);",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tif (Wicket.Log) {",
                "-\t\t\tWicket.Log.info(\"Date pickers to delete=\"+deleted+\", available=\"+available);",
                "-\t\t}",
                "-\t\tsetTimeout(function(){destroyInternal(toDestroy);}, 5);",
                "-\t};",
                "-",
                "-\t// init method variant that needs less character to invoke",
                "-\tWicket.DateTime.init2 = function(widgetId, componentId, calendarInit, datePattern,",
                "-\t\t\talignWithIcon, fireChangeEvent, hideOnSelect, showOnFieldClick, i18n, autoHide, closeLabel) {",
                "-\t\tcalendarInit.MONTHS_SHORT = i18n.MONTHS_SHORT;",
                "-\t\tcalendarInit.MONTHS_LONG = i18n.MONTHS_LONG;",
                "-\t\tcalendarInit.WEEKDAYS_MEDIUM = i18n.WEEKDAYS_MEDIUM;",
                "-\t\tcalendarInit.WEEKDAYS_LONG = i18n.WEEKDAYS_LONG;",
                "-\t\tcalendarInit.START_WEEKDAY = i18n.START_WEEKDAY;",
                "-\t\tcalendarInit.WEEKDAYS_1CHAR = i18n.WEEKDAYS_1CHAR;",
                "-\t\tcalendarInit.WEEKDAYS_SHORT = i18n.WEEKDAYS_SHORT;",
                "-",
                "-\t\tWicket.DateTime.init({",
                "-\t\t\twidgetId: widgetId,",
                "-\t\t\tcomponentId: componentId,",
                "-\t\t\tcalendarInit: calendarInit,",
                "-\t\t\tdatePattern: datePattern,",
                "-\t\t\talignWithIcon: alignWithIcon,",
                "-\t\t\tfireChangeEvent: fireChangeEvent,",
                "-\t\t\thideOnSelect: hideOnSelect,",
                "-\t\t\tshowOnFieldClick: showOnFieldClick,",
                "-\t\t\tautoHide: autoHide,",
                "-\t\t\tcloseLabel: closeLabel",
                "-\t\t});",
                "-\t};",
                "-",
                "-\tYAHOO.register(\"wicket-date\", Wicket.DateTime, {version: \"6.7.0\", build: \"1\"});",
                "-",
                "-\t// register a listener to clean up YAHOO.wicket cache.",
                "-\tWicket.Event.subscribe('/ajax/call/complete', function(jqEvent, attributes, jqXHR, errorThrown, textStatus) {",
                "-\t\twindow.setTimeout(function(){destroy();}, 10);",
                "-\t});",
                "-})();",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom-min.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom-min.js",
                "deleted file mode 100644",
                "index 194f1e8c03..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom-min.js",
                "+++ /dev/null",
                "@@ -1,9 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-(function(){YAHOO.env._id_counter=YAHOO.env._id_counter||0;var e=YAHOO.util,k=YAHOO.lang,L=YAHOO.env.ua,a=YAHOO.lang.trim,B={},F={},m=/^t(?:able|d|h)$/i,w=/color$/i,j=window.document,v=j.documentElement,C=\"ownerDocument\",M=\"defaultView\",U=\"documentElement\",S=\"compatMode\",z=\"offsetLeft\",o=\"offsetTop\",T=\"offsetParent\",x=\"parentNode\",K=\"nodeType\",c=\"tagName\",n=\"scrollLeft\",H=\"scrollTop\",p=\"getBoundingClientRect\",V=\"getComputedStyle\",y=\"currentStyle\",l=\"CSS1Compat\",A=\"BackCompat\",E=\"class\",f=\"className\",i=\"\",b=\" \",R=\"(?:^|\\\\s)\",J=\"(?= |$)\",t=\"g\",O=\"position\",D=\"fixed\",u=\"relative\",I=\"left\",N=\"top\",Q=\"medium\",P=\"borderLeftWidth\",q=\"borderTopWidth\",d=L.opera,h=L.webkit,g=L.gecko,s=L.ie;e.Dom={CUSTOM_ATTRIBUTES:(!v.hasAttribute)?{\"for\":\"htmlFor\",\"class\":f}:{\"htmlFor\":\"for\",\"className\":E},DOT_ATTRIBUTES:{checked:true},get:function(aa){var ac,X,ab,Z,W,G,Y=null;if(aa){if(typeof aa==\"string\"||typeof aa==\"number\"){ac=aa+\"\";aa=j.getElementById(aa);G=(aa)?aa.attributes:null;if(aa&&G&&G.id&&G.id.value===ac){return aa;}else{if(aa&&j.all){aa=null;X=j.all[ac];if(X&&X.length){for(Z=0,W=X.length;Z<W;++Z){if(X[Z].id===ac){return X[Z];}}}}}}else{if(e.Element&&aa instanceof e.Element){aa=aa.get(\"element\");}else{if(!aa.nodeType&&\"length\" in aa){ab=[];for(Z=0,W=aa.length;Z<W;++Z){ab[ab.length]=e.Dom.get(aa[Z]);}aa=ab;}}}Y=aa;}return Y;},getComputedStyle:function(G,W){if(window[V]){return G[C][M][V](G,null)[W];}else{if(G[y]){return e.Dom.IE_ComputedStyle.get(G,W);}}},getStyle:function(G,W){return e.Dom.batch(G,e.Dom._getStyle,W);},_getStyle:function(){if(window[V]){return function(G,Y){Y=(Y===\"float\")?Y=\"cssFloat\":e.Dom._toCamel(Y);var X=G.style[Y],W;if(!X){W=G[C][M][V](G,null);if(W){X=W[Y];}}return X;};}else{if(v[y]){return function(G,Y){var X;switch(Y){case\"opacity\":X=100;try{X=G.filters[\"DXImageTransform.Microsoft.Alpha\"].opacity;}catch(Z){try{X=G.filters(\"alpha\").opacity;}catch(W){}}return X/100;case\"float\":Y=\"styleFloat\";default:Y=e.Dom._toCamel(Y);X=G[y]?G[y][Y]:null;return(G.style[Y]||X);}};}}}(),setStyle:function(G,W,X){e.Dom.batch(G,e.Dom._setStyle,{prop:W,val:X});},_setStyle:function(){if(!window.getComputedStyle&&j.documentElement.currentStyle){return function(W,G){var X=e.Dom._toCamel(G.prop),Y=G.val;if(W){switch(X){case\"opacity\":if(Y===\"\"||Y===null||Y===1){W.style.removeAttribute(\"filter\");}else{if(k.isString(W.style.filter)){W.style.filter=\"alpha(opacity=\"+Y*100+\")\";if(!W[y]||!W[y].hasLayout){W.style.zoom=1;}}}break;case\"float\":X=\"styleFloat\";default:W.style[X]=Y;}}else{}};}else{return function(W,G){var X=e.Dom._toCamel(G.prop),Y=G.val;if(W){if(X==\"float\"){X=\"cssFloat\";}W.style[X]=Y;}else{}};}}(),getXY:function(G){return e.Dom.batch(G,e.Dom._getXY);},_canPosition:function(G){return(e.Dom._getStyle(G,\"display\")!==\"none\"&&e.Dom._inDoc(G));},_getXY:function(W){var X,G,Z,ab,Y,aa,ac=Math.round,ad=false;if(e.Dom._canPosition(W)){Z=W[p]();ab=W[C];X=e.Dom.getDocumentScrollLeft(ab);G=e.Dom.getDocumentScrollTop(ab);ad=[Z[I],Z[N]];if(Y||aa){ad[0]-=aa;ad[1]-=Y;}if((G||X)){ad[0]+=X;ad[1]+=G;}ad[0]=ac(ad[0]);ad[1]=ac(ad[1]);}else{}return ad;},getX:function(G){var W=function(X){return e.Dom.getXY(X)[0];};return e.Dom.batch(G,W,e.Dom,true);},getY:function(G){var W=function(X){return e.Dom.getXY(X)[1];};return e.Dom.batch(G,W,e.Dom,true);},setXY:function(G,X,W){e.Dom.batch(G,e.Dom._setXY,{pos:X,noRetry:W});},_setXY:function(G,Z){var aa=e.Dom._getStyle(G,O),Y=e.Dom.setStyle,ad=Z.pos,W=Z.noRetry,ab=[parseInt(e.Dom.getComputedStyle(G,I),10),parseInt(e.Dom.getComputedStyle(G,N),10)],ac,X;ac=e.Dom._getXY(G);if(!ad||ac===false){return false;}if(aa==\"static\"){aa=u;Y(G,O,aa);}if(isNaN(ab[0])){ab[0]=(aa==u)?0:G[z];}if(isNaN(ab[1])){ab[1]=(aa==u)?0:G[o];}if(ad[0]!==null){Y(G,I,ad[0]-ac[0]+ab[0]+\"px\");}if(ad[1]!==null){Y(G,N,ad[1]-ac[1]+ab[1]+\"px\");}if(!W){X=e.Dom._getXY(G);if((ad[0]!==null&&X[0]!=ad[0])||(ad[1]!==null&&X[1]!=ad[1])){e.Dom._setXY(G,{pos:ad,noRetry:true});}}},setX:function(W,G){e.Dom.setXY(W,[G,null]);},setY:function(G,W){e.Dom.setXY(G,[null,W]);},getRegion:function(G){var W=function(X){var Y=false;if(e.Dom._canPosition(X)){Y=e.Region.getRegion(X);}else{}return Y;};return e.Dom.batch(G,W,e.Dom,true);},getClientWidth:function(){return e.Dom.getViewportWidth();},getClientHeight:function(){return e.Dom.getViewportHeight();},getElementsByClassName:function(ab,af,ac,ae,X,ad){af=af||\"*\";ac=(ac)?e.Dom.get(ac):null||j;if(!ac){return[];}var W=[],G=ac.getElementsByTagName(af),Z=e.Dom.hasClass;for(var Y=0,aa=G.length;Y<aa;++Y){if(Z(G[Y],ab)){W[W.length]=G[Y];}}if(ae){e.Dom.batch(W,ae,X,ad);}return W;},hasClass:function(W,G){return e.Dom.batch(W,e.Dom._hasClass,G);},_hasClass:function(X,W){var G=false,Y;if(X&&W){Y=e.Dom._getAttribute(X,f)||i;if(Y){Y=Y.replace(/\\s+/g,b);}if(W.exec){G=W.test(Y);}else{G=W&&(b+Y+b).indexOf(b+W+b)>-1;}}else{}return G;},addClass:function(W,G){return e.Dom.batch(W,e.Dom._addClass,G);},_addClass:function(X,W){var G=false,Y;if(X&&W){Y=e.Dom._getAttribute(X,f)||i;if(!e.Dom._hasClass(X,W)){e.Dom.setAttribute(X,f,a(Y+b+W));G=true;}}else{}return G;},removeClass:function(W,G){return e.Dom.batch(W,e.Dom._removeClass,G);},_removeClass:function(Y,X){var W=false,aa,Z,G;if(Y&&X){aa=e.Dom._getAttribute(Y,f)||i;e.Dom.setAttribute(Y,f,aa.replace(e.Dom._getClassRegex(X),i));Z=e.Dom._getAttribute(Y,f);if(aa!==Z){e.Dom.setAttribute(Y,f,a(Z));W=true;if(e.Dom._getAttribute(Y,f)===\"\"){G=(Y.hasAttribute&&Y.hasAttribute(E))?E:f;Y.removeAttribute(G);}}}else{}return W;},replaceClass:function(X,W,G){return e.Dom.batch(X,e.Dom._replaceClass,{from:W,to:G});},_replaceClass:function(Y,X){var W,ab,aa,G=false,Z;if(Y&&X){ab=X.from;aa=X.to;if(!aa){G=false;}else{if(!ab){G=e.Dom._addClass(Y,X.to);}else{if(ab!==aa){Z=e.Dom._getAttribute(Y,f)||i;W=(b+Z.replace(e.Dom._getClassRegex(ab),b+aa).replace(/\\s+/g,b)).split(e.Dom._getClassRegex(aa));W.splice(1,0,b+aa);e.Dom.setAttribute(Y,f,a(W.join(i)));G=true;}}}}else{}return G;},generateId:function(G,X){X=X||\"yui-gen\";var W=function(Y){if(Y&&Y.id){return Y.id;}var Z=X+YAHOO.env._id_counter++;",
                "-if(Y){if(Y[C]&&Y[C].getElementById(Z)){return e.Dom.generateId(Y,Z+X);}Y.id=Z;}return Z;};return e.Dom.batch(G,W,e.Dom,true)||W.apply(e.Dom,arguments);},isAncestor:function(W,X){W=e.Dom.get(W);X=e.Dom.get(X);var G=false;if((W&&X)&&(W[K]&&X[K])){if(W.contains&&W!==X){G=W.contains(X);}else{if(W.compareDocumentPosition){G=!!(W.compareDocumentPosition(X)&16);}}}else{}return G;},inDocument:function(G,W){return e.Dom._inDoc(e.Dom.get(G),W);},_inDoc:function(W,X){var G=false;if(W&&W[c]){X=X||W[C];G=e.Dom.isAncestor(X[U],W);}else{}return G;},getElementsBy:function(W,af,ab,ad,X,ac,ae){af=af||\"*\";ab=(ab)?e.Dom.get(ab):null||j;var aa=(ae)?null:[],G;if(ab){G=ab.getElementsByTagName(af);for(var Y=0,Z=G.length;Y<Z;++Y){if(W(G[Y])){if(ae){aa=G[Y];break;}else{aa[aa.length]=G[Y];}}}if(ad){e.Dom.batch(aa,ad,X,ac);}}return aa;},getElementBy:function(X,G,W){return e.Dom.getElementsBy(X,G,W,null,null,null,true);},batch:function(X,ab,aa,Z){var Y=[],W=(Z)?aa:null;X=(X&&(X[c]||X.item))?X:e.Dom.get(X);if(X&&ab){if(X[c]||X.length===undefined){return ab.call(W,X,aa);}for(var G=0;G<X.length;++G){Y[Y.length]=ab.call(W||X[G],X[G],aa);}}else{return false;}return Y;},getDocumentHeight:function(){var W=(j[S]!=l||h)?j.body.scrollHeight:v.scrollHeight,G=Math.max(W,e.Dom.getViewportHeight());return G;},getDocumentWidth:function(){var W=(j[S]!=l||h)?j.body.scrollWidth:v.scrollWidth,G=Math.max(W,e.Dom.getViewportWidth());return G;},getViewportHeight:function(){var G=self.innerHeight,W=j[S];if((W||s)&&!d){G=(W==l)?v.clientHeight:j.body.clientHeight;}return G;},getViewportWidth:function(){var G=self.innerWidth,W=j[S];if(W||s){G=(W==l)?v.clientWidth:j.body.clientWidth;}return G;},getAncestorBy:function(G,W){while((G=G[x])){if(e.Dom._testElement(G,W)){return G;}}return null;},getAncestorByClassName:function(W,G){W=e.Dom.get(W);if(!W){return null;}var X=function(Y){return e.Dom.hasClass(Y,G);};return e.Dom.getAncestorBy(W,X);},getAncestorByTagName:function(W,G){W=e.Dom.get(W);if(!W){return null;}var X=function(Y){return Y[c]&&Y[c].toUpperCase()==G.toUpperCase();};return e.Dom.getAncestorBy(W,X);},getPreviousSiblingBy:function(G,W){while(G){G=G.previousSibling;if(e.Dom._testElement(G,W)){return G;}}return null;},getPreviousSibling:function(G){G=e.Dom.get(G);if(!G){return null;}return e.Dom.getPreviousSiblingBy(G);},getNextSiblingBy:function(G,W){while(G){G=G.nextSibling;if(e.Dom._testElement(G,W)){return G;}}return null;},getNextSibling:function(G){G=e.Dom.get(G);if(!G){return null;}return e.Dom.getNextSiblingBy(G);},getFirstChildBy:function(G,X){var W=(e.Dom._testElement(G.firstChild,X))?G.firstChild:null;return W||e.Dom.getNextSiblingBy(G.firstChild,X);},getFirstChild:function(G,W){G=e.Dom.get(G);if(!G){return null;}return e.Dom.getFirstChildBy(G);},getLastChildBy:function(G,X){if(!G){return null;}var W=(e.Dom._testElement(G.lastChild,X))?G.lastChild:null;return W||e.Dom.getPreviousSiblingBy(G.lastChild,X);},getLastChild:function(G){G=e.Dom.get(G);return e.Dom.getLastChildBy(G);},getChildrenBy:function(W,Y){var X=e.Dom.getFirstChildBy(W,Y),G=X?[X]:[];e.Dom.getNextSiblingBy(X,function(Z){if(!Y||Y(Z)){G[G.length]=Z;}return false;});return G;},getChildren:function(G){G=e.Dom.get(G);if(!G){}return e.Dom.getChildrenBy(G);},getDocumentScrollLeft:function(G){G=G||j;return Math.max(G[U].scrollLeft,G.body.scrollLeft);},getDocumentScrollTop:function(G){G=G||j;return Math.max(G[U].scrollTop,G.body.scrollTop);},insertBefore:function(W,G){W=e.Dom.get(W);G=e.Dom.get(G);if(!W||!G||!G[x]){return null;}return G[x].insertBefore(W,G);},insertAfter:function(W,G){W=e.Dom.get(W);G=e.Dom.get(G);if(!W||!G||!G[x]){return null;}if(G.nextSibling){return G[x].insertBefore(W,G.nextSibling);}else{return G[x].appendChild(W);}},getClientRegion:function(){var X=e.Dom.getDocumentScrollTop(),W=e.Dom.getDocumentScrollLeft(),Y=e.Dom.getViewportWidth()+W,G=e.Dom.getViewportHeight()+X;return new e.Region(X,Y,G,W);},setAttribute:function(W,G,X){e.Dom.batch(W,e.Dom._setAttribute,{attr:G,val:X});},_setAttribute:function(X,W){var G=e.Dom._toCamel(W.attr),Y=W.val;if(X&&X.setAttribute){if(e.Dom.DOT_ATTRIBUTES[G]&&X.tagName&&X.tagName!=\"BUTTON\"){X[G]=Y;}else{G=e.Dom.CUSTOM_ATTRIBUTES[G]||G;X.setAttribute(G,Y);}}else{}},getAttribute:function(W,G){return e.Dom.batch(W,e.Dom._getAttribute,G);},_getAttribute:function(W,G){var X;G=e.Dom.CUSTOM_ATTRIBUTES[G]||G;if(e.Dom.DOT_ATTRIBUTES[G]){X=W[G];}else{if(W&&\"getAttribute\" in W){if(/^(?:href|src)$/.test(G)){X=W.getAttribute(G,2);}else{X=W.getAttribute(G);}}else{}}return X;},_toCamel:function(W){var X=B;function G(Y,Z){return Z.toUpperCase();}return X[W]||(X[W]=W.indexOf(\"-\")===-1?W:W.replace(/-([a-z])/gi,G));},_getClassRegex:function(W){var G;if(W!==undefined){if(W.exec){G=W;}else{G=F[W];if(!G){W=W.replace(e.Dom._patterns.CLASS_RE_TOKENS,\"\\\\$1\");W=W.replace(/\\s+/g,b);G=F[W]=new RegExp(R+W+J,t);}}}return G;},_patterns:{ROOT_TAG:/^body|html$/i,CLASS_RE_TOKENS:/([\\.\\(\\)\\^\\$\\*\\+\\?\\|\\[\\]\\{\\}\\\\])/g},_testElement:function(G,W){return G&&G[K]==1&&(!W||W(G));},_calcBorders:function(X,Y){var W=parseInt(e.Dom[V](X,q),10)||0,G=parseInt(e.Dom[V](X,P),10)||0;if(g){if(m.test(X[c])){W=0;G=0;}}Y[0]+=G;Y[1]+=W;return Y;}};var r=e.Dom[V];if(L.opera){e.Dom[V]=function(W,G){var X=r(W,G);if(w.test(G)){X=e.Dom.Color.toRGB(X);}return X;};}if(L.webkit){e.Dom[V]=function(W,G){var X=r(W,G);if(X===\"rgba(0, 0, 0, 0)\"){X=\"transparent\";}return X;};}if(L.ie&&L.ie>=8){e.Dom.DOT_ATTRIBUTES.type=true;}})();YAHOO.util.Region=function(d,e,a,c){this.top=d;this.y=d;this[1]=d;this.right=e;this.bottom=a;this.left=c;this.x=c;this[0]=c;this.width=this.right-this.left;this.height=this.bottom-this.top;};YAHOO.util.Region.prototype.contains=function(a){return(a.left>=this.left&&a.right<=this.right&&a.top>=this.top&&a.bottom<=this.bottom);};YAHOO.util.Region.prototype.getArea=function(){return((this.bottom-this.top)*(this.right-this.left));};YAHOO.util.Region.prototype.intersect=function(f){var d=Math.max(this.top,f.top),e=Math.min(this.right,f.right),a=Math.min(this.bottom,f.bottom),c=Math.max(this.left,f.left);",
                "-if(a>=d&&e>=c){return new YAHOO.util.Region(d,e,a,c);}else{return null;}};YAHOO.util.Region.prototype.union=function(f){var d=Math.min(this.top,f.top),e=Math.max(this.right,f.right),a=Math.max(this.bottom,f.bottom),c=Math.min(this.left,f.left);return new YAHOO.util.Region(d,e,a,c);};YAHOO.util.Region.prototype.toString=function(){return(\"Region {\"+\"top: \"+this.top+\", right: \"+this.right+\", bottom: \"+this.bottom+\", left: \"+this.left+\", height: \"+this.height+\", width: \"+this.width+\"}\");};YAHOO.util.Region.getRegion=function(e){var g=YAHOO.util.Dom.getXY(e),d=g[1],f=g[0]+e.offsetWidth,a=g[1]+e.offsetHeight,c=g[0];return new YAHOO.util.Region(d,f,a,c);};YAHOO.util.Point=function(a,b){if(YAHOO.lang.isArray(a)){b=a[1];a=a[0];}YAHOO.util.Point.superclass.constructor.call(this,b,a,b,a);};YAHOO.extend(YAHOO.util.Point,YAHOO.util.Region);(function(){var b=YAHOO.util,a=\"clientTop\",f=\"clientLeft\",j=\"parentNode\",k=\"right\",w=\"hasLayout\",i=\"px\",u=\"opacity\",l=\"auto\",d=\"borderLeftWidth\",g=\"borderTopWidth\",p=\"borderRightWidth\",v=\"borderBottomWidth\",s=\"visible\",q=\"transparent\",n=\"height\",e=\"width\",h=\"style\",t=\"currentStyle\",r=/^width|height$/,o=/^(\\d[.\\d]*)+(em|ex|px|gd|rem|vw|vh|vm|ch|mm|cm|in|pt|pc|deg|rad|ms|s|hz|khz|%){1}?/i,m={get:function(x,z){var y=\"\",A=x[t][z];if(z===u){y=b.Dom.getStyle(x,u);}else{if(!A||(A.indexOf&&A.indexOf(i)>-1)){y=A;}else{if(b.Dom.IE_COMPUTED[z]){y=b.Dom.IE_COMPUTED[z](x,z);}else{if(o.test(A)){y=b.Dom.IE.ComputedStyle.getPixel(x,z);}else{y=A;}}}}return y;},getOffset:function(z,E){var B=z[t][E],x=E.charAt(0).toUpperCase()+E.substr(1),C=\"offset\"+x,y=\"pixel\"+x,A=\"\",D;if(B==l){D=z[C];if(D===undefined){A=0;}A=D;if(r.test(E)){z[h][E]=D;if(z[C]>D){A=D-(z[C]-D);}z[h][E]=l;}}else{if(!z[h][y]&&!z[h][E]){z[h][E]=B;}A=z[h][y];}return A+i;},getBorderWidth:function(x,z){var y=null;if(!x[t][w]){x[h].zoom=1;}switch(z){case g:y=x[a];break;case v:y=x.offsetHeight-x.clientHeight-x[a];break;case d:y=x[f];break;case p:y=x.offsetWidth-x.clientWidth-x[f];break;}return y+i;},getPixel:function(y,x){var A=null,B=y[t][k],z=y[t][x];y[h][k]=z;A=y[h].pixelRight;y[h][k]=B;return A+i;},getMargin:function(y,x){var z;if(y[t][x]==l){z=0+i;}else{z=b.Dom.IE.ComputedStyle.getPixel(y,x);}return z;},getVisibility:function(y,x){var z;while((z=y[t])&&z[x]==\"inherit\"){y=y[j];}return(z)?z[x]:s;},getColor:function(y,x){return b.Dom.Color.toRGB(y[t][x])||q;},getBorderColor:function(y,x){var z=y[t],A=z[x]||z.color;return b.Dom.Color.toRGB(b.Dom.Color.toHex(A));}},c={};c.top=c.right=c.bottom=c.left=c[e]=c[n]=m.getOffset;c.color=m.getColor;c[g]=c[p]=c[v]=c[d]=m.getBorderWidth;c.marginTop=c.marginRight=c.marginBottom=c.marginLeft=m.getMargin;c.visibility=m.getVisibility;c.borderColor=c.borderTopColor=c.borderRightColor=c.borderBottomColor=c.borderLeftColor=m.getBorderColor;b.Dom.IE_COMPUTED=c;b.Dom.IE_ComputedStyle=m;})();(function(){var c=\"toString\",a=parseInt,b=RegExp,d=YAHOO.util;d.Dom.Color={KEYWORDS:{black:\"000\",silver:\"c0c0c0\",gray:\"808080\",white:\"fff\",maroon:\"800000\",red:\"f00\",purple:\"800080\",fuchsia:\"f0f\",green:\"008000\",lime:\"0f0\",olive:\"808000\",yellow:\"ff0\",navy:\"000080\",blue:\"00f\",teal:\"008080\",aqua:\"0ff\"},re_RGB:/^rgb\\(([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\)$/i,re_hex:/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,re_hex3:/([0-9A-F])/gi,toRGB:function(e){if(!d.Dom.Color.re_RGB.test(e)){e=d.Dom.Color.toHex(e);}if(d.Dom.Color.re_hex.exec(e)){e=\"rgb(\"+[a(b.$1,16),a(b.$2,16),a(b.$3,16)].join(\", \")+\")\";}return e;},toHex:function(f){f=d.Dom.Color.KEYWORDS[f]||f;if(d.Dom.Color.re_RGB.exec(f)){f=[Number(b.$1).toString(16),Number(b.$2).toString(16),Number(b.$3).toString(16)];for(var e=0;e<f.length;e++){if(f[e].length<2){f[e]=\"0\"+f[e];}}f=f.join(\"\");}if(f.length<6){f=f.replace(d.Dom.Color.re_hex3,\"$1$1\");}if(f!==\"transparent\"&&f.indexOf(\"#\")<0){f=\"#\"+f;}return f.toUpperCase();}};}());YAHOO.register(\"dom\",YAHOO.util.Dom,{version:\"2.9.0\",build:\"2800\"});",
                "\\ No newline at end of file",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom.js",
                "deleted file mode 100644",
                "index 1ce4b23252..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom.js",
                "+++ /dev/null",
                "@@ -1,1846 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-/**",
                "- * The dom module provides helper methods for manipulating Dom elements.",
                "- * @module dom",
                "- *",
                "- */",
                "-",
                "-(function() {",
                "-    // for use with generateId (global to save state if Dom is overwritten)",
                "-    YAHOO.env._id_counter = YAHOO.env._id_counter || 0;",
                "-",
                "-    // internal shorthand",
                "-    var Y = YAHOO.util,",
                "-        lang = YAHOO.lang,",
                "-        UA = YAHOO.env.ua,",
                "-        trim = YAHOO.lang.trim,",
                "-        propertyCache = {}, // for faster hyphen converts",
                "-        reCache = {}, // cache className regexes",
                "-        RE_TABLE = /^t(?:able|d|h)$/i, // for _calcBorders",
                "-        RE_COLOR = /color$/i,",
                "-",
                "-        // DOM aliases ",
                "-        document = window.document,     ",
                "-        documentElement = document.documentElement,",
                "-",
                "-        // string constants",
                "-        OWNER_DOCUMENT = 'ownerDocument',",
                "-        DEFAULT_VIEW = 'defaultView',",
                "-        DOCUMENT_ELEMENT = 'documentElement',",
                "-        COMPAT_MODE = 'compatMode',",
                "-        OFFSET_LEFT = 'offsetLeft',",
                "-        OFFSET_TOP = 'offsetTop',",
                "-        OFFSET_PARENT = 'offsetParent',",
                "-        PARENT_NODE = 'parentNode',",
                "-        NODE_TYPE = 'nodeType',",
                "-        TAG_NAME = 'tagName',",
                "-        SCROLL_LEFT = 'scrollLeft',",
                "-        SCROLL_TOP = 'scrollTop',",
                "-        GET_BOUNDING_CLIENT_RECT = 'getBoundingClientRect',",
                "-        GET_COMPUTED_STYLE = 'getComputedStyle',",
                "-        CURRENT_STYLE = 'currentStyle',",
                "-        CSS1_COMPAT = 'CSS1Compat',",
                "-        _BACK_COMPAT = 'BackCompat',",
                "-        _CLASS = 'class', // underscore due to reserved word",
                "-        CLASS_NAME = 'className',",
                "-        EMPTY = '',",
                "-        SPACE = ' ',",
                "-        C_START = '(?:^|\\\\s)',",
                "-        C_END = '(?= |$)',",
                "-        G = 'g',",
                "-        POSITION = 'position',",
                "-        FIXED = 'fixed',",
                "-        RELATIVE = 'relative',",
                "-        LEFT = 'left',",
                "-        TOP = 'top',",
                "-        MEDIUM = 'medium',",
                "-        BORDER_LEFT_WIDTH = 'borderLeftWidth',",
                "-        BORDER_TOP_WIDTH = 'borderTopWidth',",
                "-    ",
                "-    // brower detection",
                "-        isOpera = UA.opera,",
                "-        isSafari = UA.webkit, ",
                "-        isGecko = UA.gecko, ",
                "-        isIE = UA.ie; ",
                "-    ",
                "-    /**",
                "-     * Provides helper methods for DOM elements.",
                "-     * @namespace YAHOO.util",
                "-     * @class Dom",
                "-     * @requires yahoo, event",
                "-     */",
                "-    Y.Dom = {",
                "-        CUSTOM_ATTRIBUTES: (!documentElement.hasAttribute) ? { // IE < 8",
                "-            'for': 'htmlFor',",
                "-            'class': CLASS_NAME",
                "-        } : { // w3c",
                "-            'htmlFor': 'for',",
                "-            'className': _CLASS",
                "-        },",
                "-",
                "-        DOT_ATTRIBUTES: {",
                "-            checked: true ",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns an HTMLElement reference.",
                "-         * @method get",
                "-         * @param {String | HTMLElement |Array} el Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and/or HTMLElements.",
                "-         * @return {HTMLElement | Array} A DOM reference to an HTML element or an array of HTMLElements.",
                "-         */",
                "-        get: function(el) {",
                "-            var id, nodes, c, i, len, attr, ret = null;",
                "-",
                "-            if (el) {",
                "-                if (typeof el == 'string' || typeof el == 'number') { // id",
                "-                    id = el + '';",
                "-                    el = document.getElementById(el);",
                "-                    attr = (el) ? el.attributes : null;",
                "-                    if (el && attr && attr.id && attr.id.value === id) { // IE: avoid false match on \"name\" attribute",
                "-                        return el;",
                "-                    } else if (el && document.all) { // filter by name",
                "-                        el = null;",
                "-                        nodes = document.all[id];",
                "-                        if (nodes && nodes.length) {",
                "-                            for (i = 0, len = nodes.length; i < len; ++i) {",
                "-                                if (nodes[i].id === id) {",
                "-                                    return nodes[i];",
                "-                                }",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                } else if (Y.Element && el instanceof Y.Element) {",
                "-                    el = el.get('element');",
                "-                } else if (!el.nodeType && 'length' in el) { // array-like ",
                "-                    c = [];",
                "-                    for (i = 0, len = el.length; i < len; ++i) {",
                "-                        c[c.length] = Y.Dom.get(el[i]);",
                "-                    }",
                "-                    ",
                "-                    el = c;",
                "-                }",
                "-",
                "-                ret = el;",
                "-            }",
                "-",
                "-            return ret;",
                "-        },",
                "-    ",
                "-        getComputedStyle: function(el, property) {",
                "-            if (window[GET_COMPUTED_STYLE]) {",
                "-                return el[OWNER_DOCUMENT][DEFAULT_VIEW][GET_COMPUTED_STYLE](el, null)[property];",
                "-            } else if (el[CURRENT_STYLE]) {",
                "-                return Y.Dom.IE_ComputedStyle.get(el, property);",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Normalizes currentStyle and ComputedStyle.",
                "-         * @method getStyle",
                "-         * @param {String | HTMLElement |Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.",
                "-         * @param {String} property The style property whose value is returned.",
                "-         * @return {String | Array} The current value of the style property for the element(s).",
                "-         */",
                "-        getStyle: function(el, property) {",
                "-            return Y.Dom.batch(el, Y.Dom._getStyle, property);",
                "-        },",
                "-",
                "-        // branching at load instead of runtime",
                "-        _getStyle: function() {",
                "-            if (window[GET_COMPUTED_STYLE]) { // W3C DOM method",
                "-                return function(el, property) {",
                "-                    property = (property === 'float') ? property = 'cssFloat' :",
                "-                            Y.Dom._toCamel(property);",
                "-",
                "-                    var value = el.style[property],",
                "-                        computed;",
                "-                    ",
                "-                    if (!value) {",
                "-                        computed = el[OWNER_DOCUMENT][DEFAULT_VIEW][GET_COMPUTED_STYLE](el, null);",
                "-                        if (computed) { // test computed before touching for safari",
                "-                            value = computed[property];",
                "-                        }",
                "-                    }",
                "-                    ",
                "-                    return value;",
                "-                };",
                "-            } else if (documentElement[CURRENT_STYLE]) {",
                "-                return function(el, property) {                         ",
                "-                    var value;",
                "-",
                "-                    switch(property) {",
                "-                        case 'opacity' :// IE opacity uses filter",
                "-                            value = 100;",
                "-                            try { // will error if no DXImageTransform",
                "-                                value = el.filters['DXImageTransform.Microsoft.Alpha'].opacity;",
                "-",
                "-                            } catch(e) {",
                "-                                try { // make sure its in the document",
                "-                                    value = el.filters('alpha').opacity;",
                "-                                } catch(err) {",
                "-                                }",
                "-                            }",
                "-                            return value / 100;",
                "-                        case 'float': // fix reserved word",
                "-                            property = 'styleFloat'; // fall through",
                "-                        default: ",
                "-                            property = Y.Dom._toCamel(property);",
                "-                            value = el[CURRENT_STYLE] ? el[CURRENT_STYLE][property] : null;",
                "-                            return ( el.style[property] || value );",
                "-                    }",
                "-                };",
                "-            }",
                "-        }(),",
                "-    ",
                "-        /**",
                "-         * Wrapper for setting style properties of HTMLElements.  Normalizes \"opacity\" across modern browsers.",
                "-         * @method setStyle",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.",
                "-         * @param {String} property The style property to be set.",
                "-         * @param {String} val The value to apply to the given property.",
                "-         */",
                "-        setStyle: function(el, property, val) {",
                "-            Y.Dom.batch(el, Y.Dom._setStyle, { prop: property, val: val });",
                "-        },",
                "-",
                "-        _setStyle: function() {",
                "-            if (!window.getComputedStyle && document.documentElement.currentStyle) {",
                "-                return function(el, args) {",
                "-                    var property = Y.Dom._toCamel(args.prop),",
                "-                        val = args.val;",
                "-",
                "-                    if (el) {",
                "-                        switch (property) {",
                "-                            case 'opacity':",
                "-                                // remove filter if unsetting or full opacity",
                "-                                if (val === '' || val === null || val === 1) {",
                "-                                    el.style.removeAttribute('filter');",
                "-                                } else if ( lang.isString(el.style.filter) ) { // in case not appended",
                "-                                    el.style.filter = 'alpha(opacity=' + val * 100 + ')';",
                "-                                    ",
                "-                                    if (!el[CURRENT_STYLE] || !el[CURRENT_STYLE].hasLayout) {",
                "-                                        el.style.zoom = 1; // when no layout or cant tell",
                "-                                    }",
                "-                                }",
                "-                                break;",
                "-                            case 'float':",
                "-                                property = 'styleFloat';",
                "-                            default:",
                "-                            el.style[property] = val;",
                "-                        }",
                "-                    } else {",
                "-                    }",
                "-                };",
                "-            } else {",
                "-                return function(el, args) {",
                "-                    var property = Y.Dom._toCamel(args.prop),",
                "-                        val = args.val;",
                "-                    if (el) {",
                "-                        if (property == 'float') {",
                "-                            property = 'cssFloat';",
                "-                        }",
                "-                        el.style[property] = val;",
                "-                    } else {",
                "-                    }",
                "-                };",
                "-            }",
                "-",
                "-        }(),",
                "-        ",
                "-        /**",
                "-         * Gets the current position of an element based on page coordinates. ",
                "-         * Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
                "-         * @method getXY",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM",
                "-         * reference, or an Array of IDs and/or HTMLElements",
                "-         * @return {Array} The XY position of the element(s)",
                "-         */",
                "-        getXY: function(el) {",
                "-            return Y.Dom.batch(el, Y.Dom._getXY);",
                "-        },",
                "-",
                "-        _canPosition: function(el) {",
                "-            return ( Y.Dom._getStyle(el, 'display') !== 'none' && Y.Dom._inDoc(el) );",
                "-        },",
                "-",
                "-        _getXY: function(node) {",
                "-            var scrollLeft, scrollTop, box, doc,",
                "-                clientTop, clientLeft,",
                "-                round = Math.round, // TODO: round?",
                "-                xy = false;",
                "-",
                "-            if (Y.Dom._canPosition(node)) {",
                "-                box = node[GET_BOUNDING_CLIENT_RECT]();",
                "-                doc = node[OWNER_DOCUMENT];",
                "-                scrollLeft = Y.Dom.getDocumentScrollLeft(doc);",
                "-                scrollTop = Y.Dom.getDocumentScrollTop(doc);",
                "-                xy = [box[LEFT], box[TOP]];",
                "-",
                "-                // remove IE default documentElement offset (border)",
                "-                if (clientTop || clientLeft) {",
                "-                    xy[0] -= clientLeft;",
                "-                    xy[1] -= clientTop;",
                "-                }",
                "-",
                "-                if ((scrollTop || scrollLeft)) {",
                "-                    xy[0] += scrollLeft;",
                "-                    xy[1] += scrollTop;",
                "-                }",
                "-",
                "-                // gecko may return sub-pixel (non-int) values",
                "-                xy[0] = round(xy[0]);",
                "-                xy[1] = round(xy[1]);",
                "-            } else {",
                "-            }",
                "-",
                "-            return xy;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
                "-         * @method getX",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements",
                "-         * @return {Number | Array} The X position of the element(s)",
                "-         */",
                "-        getX: function(el) {",
                "-            var f = function(el) {",
                "-                return Y.Dom.getXY(el)[0];",
                "-            };",
                "-            ",
                "-            return Y.Dom.batch(el, f, Y.Dom, true);",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
                "-         * @method getY",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements",
                "-         * @return {Number | Array} The Y position of the element(s)",
                "-         */",
                "-        getY: function(el) {",
                "-            var f = function(el) {",
                "-                return Y.Dom.getXY(el)[1];",
                "-            };",
                "-            ",
                "-            return Y.Dom.batch(el, f, Y.Dom, true);",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Set the position of an html element in page coordinates, regardless of how the element is positioned.",
                "-         * The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
                "-         * @method setXY",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements",
                "-         * @param {Array} pos Contains X & Y values for new position (coordinates are page-based)",
                "-         * @param {Boolean} noRetry By default we try and set the position a second time if the first fails",
                "-         */",
                "-        setXY: function(el, pos, noRetry) {",
                "-            Y.Dom.batch(el, Y.Dom._setXY, { pos: pos, noRetry: noRetry });",
                "-        },",
                "-",
                "-        _setXY: function(node, args) {",
                "-            var pos = Y.Dom._getStyle(node, POSITION),",
                "-                setStyle = Y.Dom.setStyle,",
                "-                xy = args.pos,",
                "-                noRetry = args.noRetry,",
                "-",
                "-                delta = [ // assuming pixels; if not we will have to retry",
                "-                    parseInt( Y.Dom.getComputedStyle(node, LEFT), 10 ),",
                "-                    parseInt( Y.Dom.getComputedStyle(node, TOP), 10 )",
                "-                ],",
                "-",
                "-                currentXY,",
                "-                newXY;",
                "-        ",
                "-            currentXY = Y.Dom._getXY(node);",
                "-",
                "-            if (!xy || currentXY === false) { // has to be part of doc to have xy",
                "-                return false; ",
                "-            }",
                "-            ",
                "-            if (pos == 'static') { // default to relative",
                "-                pos = RELATIVE;",
                "-                setStyle(node, POSITION, pos);",
                "-            }",
                "-",
                "-            if ( isNaN(delta[0]) ) {// in case of 'auto'",
                "-                delta[0] = (pos == RELATIVE) ? 0 : node[OFFSET_LEFT];",
                "-            } ",
                "-            if ( isNaN(delta[1]) ) { // in case of 'auto'",
                "-                delta[1] = (pos == RELATIVE) ? 0 : node[OFFSET_TOP];",
                "-            } ",
                "-",
                "-            if (xy[0] !== null) { // from setX",
                "-                setStyle(node, LEFT, xy[0] - currentXY[0] + delta[0] + 'px');",
                "-            }",
                "-",
                "-            if (xy[1] !== null) { // from setY",
                "-                setStyle(node, TOP, xy[1] - currentXY[1] + delta[1] + 'px');",
                "-            }",
                "-          ",
                "-            if (!noRetry) {",
                "-                newXY = Y.Dom._getXY(node);",
                "-",
                "-                // if retry is true, try one more time if we miss ",
                "-               if ( (xy[0] !== null && newXY[0] != xy[0]) || ",
                "-                    (xy[1] !== null && newXY[1] != xy[1]) ) {",
                "-                   Y.Dom._setXY(node, { pos: xy, noRetry: true });",
                "-               }",
                "-            }        ",
                "-",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Set the X position of an html element in page coordinates, regardless of how the element is positioned.",
                "-         * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
                "-         * @method setX",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.",
                "-         * @param {Int} x The value to use as the X coordinate for the element(s).",
                "-         */",
                "-        setX: function(el, x) {",
                "-            Y.Dom.setXY(el, [x, null]);",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Set the Y position of an html element in page coordinates, regardless of how the element is positioned.",
                "-         * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
                "-         * @method setY",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.",
                "-         * @param {Int} x To use as the Y coordinate for the element(s).",
                "-         */",
                "-        setY: function(el, y) {",
                "-            Y.Dom.setXY(el, [null, y]);",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the region position of the given element.",
                "-         * The element must be part of the DOM tree to have a region (display:none or elements not appended return false).",
                "-         * @method getRegion",
                "-         * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.",
                "-         * @return {Region | Array} A Region or array of Region instances containing \"top, left, bottom, right\" member data.",
                "-         */",
                "-        getRegion: function(el) {",
                "-            var f = function(el) {",
                "-                var region = false;",
                "-                if ( Y.Dom._canPosition(el) ) {",
                "-                    region = Y.Region.getRegion(el);",
                "-                } else {",
                "-                }",
                "-",
                "-                return region;",
                "-            };",
                "-            ",
                "-            return Y.Dom.batch(el, f, Y.Dom, true);",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the width of the client (viewport).",
                "-         * @method getClientWidth",
                "-         * @deprecated Now using getViewportWidth.  This interface left intact for back compat.",
                "-         * @return {Int} The width of the viewable area of the page.",
                "-         */",
                "-        getClientWidth: function() {",
                "-            return Y.Dom.getViewportWidth();",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the height of the client (viewport).",
                "-         * @method getClientHeight",
                "-         * @deprecated Now using getViewportHeight.  This interface left intact for back compat.",
                "-         * @return {Int} The height of the viewable area of the page.",
                "-         */",
                "-        getClientHeight: function() {",
                "-            return Y.Dom.getViewportHeight();",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns an array of HTMLElements with the given class.",
                "-         * For optimized performance, include a tag and/or root node when possible.",
                "-         * Note: This method operates against a live collection, so modifying the ",
                "-         * collection in the callback (removing/appending nodes, etc.) will have",
                "-         * side effects.  Instead you should iterate the returned nodes array,",
                "-         * as you would with the native \"getElementsByTagName\" method. ",
                "-         * @method getElementsByClassName",
                "-         * @param {String} className The class name to match against",
                "-         * @param {String} tag (optional) The tag name of the elements being collected",
                "-         * @param {String | HTMLElement} root (optional) The HTMLElement or an ID to use as the starting point.",
                "-         * This element is not included in the className scan.",
                "-         * @param {Function} apply (optional) A function to apply to each element when found ",
                "-         * @param {Any} o (optional) An optional arg that is passed to the supplied method",
                "-         * @param {Boolean} overrides (optional) Whether or not to override the scope of \"method\" with \"o\"",
                "-         * @return {Array} An array of elements that have the given class name",
                "-         */",
                "-        getElementsByClassName: function(className, tag, root, apply, o, overrides) {",
                "-            tag = tag || '*';",
                "-            root = (root) ? Y.Dom.get(root) : null || document; ",
                "-            if (!root) {",
                "-                return [];",
                "-            }",
                "-",
                "-            var nodes = [],",
                "-                elements = root.getElementsByTagName(tag),",
                "-                hasClass = Y.Dom.hasClass;",
                "-",
                "-            for (var i = 0, len = elements.length; i < len; ++i) {",
                "-                if ( hasClass(elements[i], className) ) {",
                "-                    nodes[nodes.length] = elements[i];",
                "-                }",
                "-            }",
                "-            ",
                "-            if (apply) {",
                "-                Y.Dom.batch(nodes, apply, o, overrides);",
                "-            }",
                "-",
                "-            return nodes;",
                "-        },",
                "-",
                "-        /**",
                "-         * Determines whether an HTMLElement has the given className.",
                "-         * @method hasClass",
                "-         * @param {String | HTMLElement | Array} el The element or collection to test",
                "-         * @param {String | RegExp} className the class name to search for, or a regular",
                "-         * expression to match against",
                "-         * @return {Boolean | Array} A boolean value or array of boolean values",
                "-         */",
                "-        hasClass: function(el, className) {",
                "-            return Y.Dom.batch(el, Y.Dom._hasClass, className);",
                "-        },",
                "-",
                "-        _hasClass: function(el, className) {",
                "-            var ret = false,",
                "-                current;",
                "-            ",
                "-            if (el && className) {",
                "-                current = Y.Dom._getAttribute(el, CLASS_NAME) || EMPTY;",
                "-                if (current) { // convert line breaks, tabs and other delims to spaces",
                "-                    current = current.replace(/\\s+/g, SPACE);",
                "-                }",
                "-",
                "-                if (className.exec) {",
                "-                    ret = className.test(current);",
                "-                } else {",
                "-                    ret = className && (SPACE + current + SPACE).",
                "-                        indexOf(SPACE + className + SPACE) > -1;",
                "-                }",
                "-            } else {",
                "-            }",
                "-",
                "-            return ret;",
                "-        },",
                "-    ",
                "-        /**",
                "-         * Adds a class name to a given element or collection of elements.",
                "-         * @method addClass         ",
                "-         * @param {String | HTMLElement | Array} el The element or collection to add the class to",
                "-         * @param {String} className the class name to add to the class attribute",
                "-         * @return {Boolean | Array} A pass/fail boolean or array of booleans",
                "-         */",
                "-        addClass: function(el, className) {",
                "-            return Y.Dom.batch(el, Y.Dom._addClass, className);",
                "-        },",
                "-",
                "-        _addClass: function(el, className) {",
                "-            var ret = false,",
                "-                current;",
                "-",
                "-            if (el && className) {",
                "-                current = Y.Dom._getAttribute(el, CLASS_NAME) || EMPTY;",
                "-                if ( !Y.Dom._hasClass(el, className) ) {",
                "-                    Y.Dom.setAttribute(el, CLASS_NAME, trim(current + SPACE + className));",
                "-                    ret = true;",
                "-                }",
                "-            } else {",
                "-            }",
                "-",
                "-            return ret;",
                "-        },",
                "-    ",
                "-        /**",
                "-         * Removes a class name from a given element or collection of elements.",
                "-         * @method removeClass         ",
                "-         * @param {String | HTMLElement | Array} el The element or collection to remove the class from",
                "-         * @param {String} className the class name to remove from the class attribute",
                "-         * @return {Boolean | Array} A pass/fail boolean or array of booleans",
                "-         */",
                "-        removeClass: function(el, className) {",
                "-            return Y.Dom.batch(el, Y.Dom._removeClass, className);",
                "-        },",
                "-        ",
                "-        _removeClass: function(el, className) {",
                "-            var ret = false,",
                "-                current,",
                "-                newClass,",
                "-                attr;",
                "-",
                "-            if (el && className) {",
                "-                current = Y.Dom._getAttribute(el, CLASS_NAME) || EMPTY;",
                "-                Y.Dom.setAttribute(el, CLASS_NAME, current.replace(Y.Dom._getClassRegex(className), EMPTY));",
                "-",
                "-                newClass = Y.Dom._getAttribute(el, CLASS_NAME);",
                "-                if (current !== newClass) { // else nothing changed",
                "-                    Y.Dom.setAttribute(el, CLASS_NAME, trim(newClass)); // trim after comparing to current class",
                "-                    ret = true;",
                "-",
                "-                    if (Y.Dom._getAttribute(el, CLASS_NAME) === '') { // remove class attribute if empty",
                "-                        attr = (el.hasAttribute && el.hasAttribute(_CLASS)) ? _CLASS : CLASS_NAME;",
                "-                        el.removeAttribute(attr);",
                "-                    }",
                "-                }",
                "-",
                "-            } else {",
                "-            }",
                "-",
                "-            return ret;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Replace a class with another class for a given element or collection of elements.",
                "-         * If no oldClassName is present, the newClassName is simply added.",
                "-         * @method replaceClass  ",
                "-         * @param {String | HTMLElement | Array} el The element or collection to remove the class from",
                "-         * @param {String} oldClassName the class name to be replaced",
                "-         * @param {String} newClassName the class name that will be replacing the old class name",
                "-         * @return {Boolean | Array} A pass/fail boolean or array of booleans",
                "-         */",
                "-        replaceClass: function(el, oldClassName, newClassName) {",
                "-            return Y.Dom.batch(el, Y.Dom._replaceClass, { from: oldClassName, to: newClassName });",
                "-        },",
                "-",
                "-        _replaceClass: function(el, classObj) {",
                "-            var className,",
                "-                from,",
                "-                to,",
                "-                ret = false,",
                "-                current;",
                "-",
                "-            if (el && classObj) {",
                "-                from = classObj.from;",
                "-                to = classObj.to;",
                "-",
                "-                if (!to) {",
                "-                    ret = false;",
                "-                }  else if (!from) { // just add if no \"from\"",
                "-                    ret = Y.Dom._addClass(el, classObj.to);",
                "-                } else if (from !== to) { // else nothing to replace",
                "-                    // May need to lead with DBLSPACE?",
                "-                    current = Y.Dom._getAttribute(el, CLASS_NAME) || EMPTY;",
                "-                    className = (SPACE + current.replace(Y.Dom._getClassRegex(from), SPACE + to).",
                "-                            replace(/\\s+/g, SPACE)). // normalize white space",
                "-                            split(Y.Dom._getClassRegex(to));",
                "-",
                "-                    // insert to into what would have been the first occurrence slot",
                "-                    className.splice(1, 0, SPACE + to);",
                "-                    Y.Dom.setAttribute(el, CLASS_NAME, trim(className.join(EMPTY)));",
                "-                    ret = true;",
                "-                }",
                "-            } else {",
                "-            }",
                "-",
                "-            return ret;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns an ID and applies it to the element \"el\", if provided.",
                "-         * @method generateId  ",
                "-         * @param {String | HTMLElement | Array} el (optional) An optional element array of elements to add an ID to (no ID is added if one is already present).",
                "-         * @param {String} prefix (optional) an optional prefix to use (defaults to \"yui-gen\").",
                "-         * @return {String | Array} The generated ID, or array of generated IDs (or original ID if already present on an element)",
                "-         */",
                "-        generateId: function(el, prefix) {",
                "-            prefix = prefix || 'yui-gen';",
                "-",
                "-            var f = function(el) {",
                "-                if (el && el.id) { // do not override existing ID",
                "-                    return el.id;",
                "-                }",
                "-",
                "-                var id = prefix + YAHOO.env._id_counter++;",
                "-",
                "-                if (el) {",
                "-                    if (el[OWNER_DOCUMENT] && el[OWNER_DOCUMENT].getElementById(id)) { // in case one already exists",
                "-                        // use failed id plus prefix to help ensure uniqueness",
                "-                        return Y.Dom.generateId(el, id + prefix);",
                "-                    }",
                "-                    el.id = id;",
                "-                }",
                "-                ",
                "-                return id;",
                "-            };",
                "-",
                "-            // batch fails when no element, so just generate and return single ID",
                "-            return Y.Dom.batch(el, f, Y.Dom, true) || f.apply(Y.Dom, arguments);",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.",
                "-         * @method isAncestor",
                "-         * @param {String | HTMLElement} haystack The possible ancestor",
                "-         * @param {String | HTMLElement} needle The possible descendent",
                "-         * @return {Boolean} Whether or not the haystack is an ancestor of needle",
                "-         */",
                "-        isAncestor: function(haystack, needle) {",
                "-            haystack = Y.Dom.get(haystack);",
                "-            needle = Y.Dom.get(needle);",
                "-            ",
                "-            var ret = false;",
                "-",
                "-            if ( (haystack && needle) && (haystack[NODE_TYPE] && needle[NODE_TYPE]) ) {",
                "-                if (haystack.contains && haystack !== needle) { // contains returns true when equal",
                "-                    ret = haystack.contains(needle);",
                "-                }",
                "-                else if (haystack.compareDocumentPosition) { // gecko",
                "-                    ret = !!(haystack.compareDocumentPosition(needle) & 16);",
                "-                }",
                "-            } else {",
                "-            }",
                "-            return ret;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Determines whether an HTMLElement is present in the current document.",
                "-         * @method inDocument         ",
                "-         * @param {String | HTMLElement} el The element to search for",
                "-         * @param {Object} doc An optional document to search, defaults to element's owner document ",
                "-         * @return {Boolean} Whether or not the element is present in the current document",
                "-         */",
                "-        inDocument: function(el, doc) {",
                "-            return Y.Dom._inDoc(Y.Dom.get(el), doc);",
                "-        },",
                "-",
                "-        _inDoc: function(el, doc) {",
                "-            var ret = false;",
                "-            if (el && el[TAG_NAME]) {",
                "-                doc = doc || el[OWNER_DOCUMENT]; ",
                "-                ret = Y.Dom.isAncestor(doc[DOCUMENT_ELEMENT], el);",
                "-            } else {",
                "-            }",
                "-            return ret;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns an array of HTMLElements that pass the test applied by supplied boolean method.",
                "-         * For optimized performance, include a tag and/or root node when possible.",
                "-         * Note: This method operates against a live collection, so modifying the ",
                "-         * collection in the callback (removing/appending nodes, etc.) will have",
                "-         * side effects.  Instead you should iterate the returned nodes array,",
                "-         * as you would with the native \"getElementsByTagName\" method. ",
                "-         * @method getElementsBy",
                "-         * @param {Function} method - A boolean method for testing elements which receives the element as its only argument.",
                "-         * @param {String} tag (optional) The tag name of the elements being collected",
                "-         * @param {String | HTMLElement} root (optional) The HTMLElement or an ID to use as the starting point ",
                "-         * @param {Function} apply (optional) A function to apply to each element when found ",
                "-         * @param {Any} o (optional) An optional arg that is passed to the supplied method",
                "-         * @param {Boolean} overrides (optional) Whether or not to override the scope of \"method\" with \"o\"",
                "-         * @return {Array} Array of HTMLElements",
                "-         */",
                "-        getElementsBy: function(method, tag, root, apply, o, overrides, firstOnly) {",
                "-            tag = tag || '*';",
                "-            root = (root) ? Y.Dom.get(root) : null || document; ",
                "-",
                "-                var ret = (firstOnly) ? null : [],",
                "-                    elements;",
                "-            ",
                "-            // in case Dom.get() returns null",
                "-            if (root) {",
                "-                elements = root.getElementsByTagName(tag);",
                "-                for (var i = 0, len = elements.length; i < len; ++i) {",
                "-                    if ( method(elements[i]) ) {",
                "-                        if (firstOnly) {",
                "-                            ret = elements[i]; ",
                "-                            break;",
                "-                        } else {",
                "-                            ret[ret.length] = elements[i];",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                if (apply) {",
                "-                    Y.Dom.batch(ret, apply, o, overrides);",
                "-                }",
                "-            }",
                "-",
                "-            ",
                "-            return ret;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the first HTMLElement that passes the test applied by the supplied boolean method.",
                "-         * @method getElementBy",
                "-         * @param {Function} method - A boolean method for testing elements which receives the element as its only argument.",
                "-         * @param {String} tag (optional) The tag name of the elements being collected",
                "-         * @param {String | HTMLElement} root (optional) The HTMLElement or an ID to use as the starting point ",
                "-         * @return {HTMLElement}",
                "-         */",
                "-        getElementBy: function(method, tag, root) {",
                "-            return Y.Dom.getElementsBy(method, tag, root, null, null, null, true); ",
                "-        },",
                "-",
                "-        /**",
                "-         * Runs the supplied method against each item in the Collection/Array.",
                "-         * The method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).",
                "-         * @method batch",
                "-         * @param {String | HTMLElement | Array} el (optional) An element or array of elements to apply the method to",
                "-         * @param {Function} method The method to apply to the element(s)",
                "-         * @param {Any} o (optional) An optional arg that is passed to the supplied method",
                "-         * @param {Boolean} overrides (optional) Whether or not to override the scope of \"method\" with \"o\"",
                "-         * @return {Any | Array} The return value(s) from the supplied method",
                "-         */",
                "-        batch: function(el, method, o, overrides) {",
                "-            var collection = [],",
                "-                scope = (overrides) ? o : null;",
                "-                ",
                "-            el = (el && (el[TAG_NAME] || el.item)) ? el : Y.Dom.get(el); // skip get() when possible",
                "-            if (el && method) {",
                "-                if (el[TAG_NAME] || el.length === undefined) { // element or not array-like ",
                "-                    return method.call(scope, el, o);",
                "-                } ",
                "-",
                "-                for (var i = 0; i < el.length; ++i) {",
                "-                    collection[collection.length] = method.call(scope || el[i], el[i], o);",
                "-                }",
                "-            } else {",
                "-                return false;",
                "-            } ",
                "-            return collection;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the height of the document.",
                "-         * @method getDocumentHeight",
                "-         * @return {Int} The height of the actual document (which includes the body and its margin).",
                "-         */",
                "-        getDocumentHeight: function() {",
                "-            var scrollHeight = (document[COMPAT_MODE] != CSS1_COMPAT || isSafari) ? document.body.scrollHeight : documentElement.scrollHeight,",
                "-                h = Math.max(scrollHeight, Y.Dom.getViewportHeight());",
                "-",
                "-            return h;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the width of the document.",
                "-         * @method getDocumentWidth",
                "-         * @return {Int} The width of the actual document (which includes the body and its margin).",
                "-         */",
                "-        getDocumentWidth: function() {",
                "-            var scrollWidth = (document[COMPAT_MODE] != CSS1_COMPAT || isSafari) ? document.body.scrollWidth : documentElement.scrollWidth,",
                "-                w = Math.max(scrollWidth, Y.Dom.getViewportWidth());",
                "-            return w;",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns the current height of the viewport.",
                "-         * @method getViewportHeight",
                "-         * @return {Int} The height of the viewable area of the page (excludes scrollbars).",
                "-         */",
                "-        getViewportHeight: function() {",
                "-            var height = self.innerHeight, // Safari, Opera",
                "-                mode = document[COMPAT_MODE];",
                "-        ",
                "-            if ( (mode || isIE) && !isOpera ) { // IE, Gecko",
                "-                height = (mode == CSS1_COMPAT) ?",
                "-                        documentElement.clientHeight : // Standards",
                "-                        document.body.clientHeight; // Quirks",
                "-            }",
                "-        ",
                "-            return height;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the current width of the viewport.",
                "-         * @method getViewportWidth",
                "-         * @return {Int} The width of the viewable area of the page (excludes scrollbars).",
                "-         */",
                "-        ",
                "-        getViewportWidth: function() {",
                "-            var width = self.innerWidth,  // Safari",
                "-                mode = document[COMPAT_MODE];",
                "-            ",
                "-            if (mode || isIE) { // IE, Gecko, Opera",
                "-                width = (mode == CSS1_COMPAT) ?",
                "-                        documentElement.clientWidth : // Standards",
                "-                        document.body.clientWidth; // Quirks",
                "-            }",
                "-            return width;",
                "-        },",
                "-",
                "-       /**",
                "-         * Returns the nearest ancestor that passes the test applied by supplied boolean method.",
                "-         * For performance reasons, IDs are not accepted and argument validation omitted.",
                "-         * @method getAncestorBy",
                "-         * @param {HTMLElement} node The HTMLElement to use as the starting point ",
                "-         * @param {Function} method - A boolean method for testing elements which receives the element as its only argument.",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getAncestorBy: function(node, method) {",
                "-            while ( (node = node[PARENT_NODE]) ) { // NOTE: assignment",
                "-                if ( Y.Dom._testElement(node, method) ) {",
                "-                    return node;",
                "-                }",
                "-            } ",
                "-",
                "-            return null;",
                "-        },",
                "-        ",
                "-        /**",
                "-         * Returns the nearest ancestor with the given className.",
                "-         * @method getAncestorByClassName",
                "-         * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point ",
                "-         * @param {String} className",
                "-         * @return {Object} HTMLElement",
                "-         */",
                "-        getAncestorByClassName: function(node, className) {",
                "-            node = Y.Dom.get(node);",
                "-            if (!node) {",
                "-                return null;",
                "-            }",
                "-            var method = function(el) { return Y.Dom.hasClass(el, className); };",
                "-            return Y.Dom.getAncestorBy(node, method);",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns the nearest ancestor with the given tagName.",
                "-         * @method getAncestorByTagName",
                "-         * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point ",
                "-         * @param {String} tagName",
                "-         * @return {Object} HTMLElement",
                "-         */",
                "-        getAncestorByTagName: function(node, tagName) {",
                "-            node = Y.Dom.get(node);",
                "-            if (!node) {",
                "-                return null;",
                "-            }",
                "-            var method = function(el) {",
                "-                 return el[TAG_NAME] && el[TAG_NAME].toUpperCase() == tagName.toUpperCase();",
                "-            };",
                "-",
                "-            return Y.Dom.getAncestorBy(node, method);",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns the previous sibling that is an HTMLElement. ",
                "-         * For performance reasons, IDs are not accepted and argument validation omitted.",
                "-         * Returns the nearest HTMLElement sibling if no method provided.",
                "-         * @method getPreviousSiblingBy",
                "-         * @param {HTMLElement} node The HTMLElement to use as the starting point ",
                "-         * @param {Function} method A boolean function used to test siblings",
                "-         * that receives the sibling node being tested as its only argument",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getPreviousSiblingBy: function(node, method) {",
                "-            while (node) {",
                "-                node = node.previousSibling;",
                "-                if ( Y.Dom._testElement(node, method) ) {",
                "-                    return node;",
                "-                }",
                "-            }",
                "-            return null;",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the previous sibling that is an HTMLElement ",
                "-         * @method getPreviousSibling",
                "-         * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point ",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getPreviousSibling: function(node) {",
                "-            node = Y.Dom.get(node);",
                "-            if (!node) {",
                "-                return null;",
                "-            }",
                "-",
                "-            return Y.Dom.getPreviousSiblingBy(node);",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the next HTMLElement sibling that passes the boolean method. ",
                "-         * For performance reasons, IDs are not accepted and argument validation omitted.",
                "-         * Returns the nearest HTMLElement sibling if no method provided.",
                "-         * @method getNextSiblingBy",
                "-         * @param {HTMLElement} node The HTMLElement to use as the starting point ",
                "-         * @param {Function} method A boolean function used to test siblings",
                "-         * that receives the sibling node being tested as its only argument",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getNextSiblingBy: function(node, method) {",
                "-            while (node) {",
                "-                node = node.nextSibling;",
                "-                if ( Y.Dom._testElement(node, method) ) {",
                "-                    return node;",
                "-                }",
                "-            }",
                "-            return null;",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the next sibling that is an HTMLElement ",
                "-         * @method getNextSibling",
                "-         * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point ",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getNextSibling: function(node) {",
                "-            node = Y.Dom.get(node);",
                "-            if (!node) {",
                "-                return null;",
                "-            }",
                "-",
                "-            return Y.Dom.getNextSiblingBy(node);",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the first HTMLElement child that passes the test method. ",
                "-         * @method getFirstChildBy",
                "-         * @param {HTMLElement} node The HTMLElement to use as the starting point ",
                "-         * @param {Function} method A boolean function used to test children",
                "-         * that receives the node being tested as its only argument",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getFirstChildBy: function(node, method) {",
                "-            var child = ( Y.Dom._testElement(node.firstChild, method) ) ? node.firstChild : null;",
                "-            return child || Y.Dom.getNextSiblingBy(node.firstChild, method);",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the first HTMLElement child. ",
                "-         * @method getFirstChild",
                "-         * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point ",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getFirstChild: function(node, method) {",
                "-            node = Y.Dom.get(node);",
                "-            if (!node) {",
                "-                return null;",
                "-            }",
                "-            return Y.Dom.getFirstChildBy(node);",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the last HTMLElement child that passes the test method. ",
                "-         * @method getLastChildBy",
                "-         * @param {HTMLElement} node The HTMLElement to use as the starting point ",
                "-         * @param {Function} method A boolean function used to test children",
                "-         * that receives the node being tested as its only argument",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getLastChildBy: function(node, method) {",
                "-            if (!node) {",
                "-                return null;",
                "-            }",
                "-            var child = ( Y.Dom._testElement(node.lastChild, method) ) ? node.lastChild : null;",
                "-            return child || Y.Dom.getPreviousSiblingBy(node.lastChild, method);",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the last HTMLElement child. ",
                "-         * @method getLastChild",
                "-         * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point ",
                "-         * @return {Object} HTMLElement or null if not found",
                "-         */",
                "-        getLastChild: function(node) {",
                "-            node = Y.Dom.get(node);",
                "-            return Y.Dom.getLastChildBy(node);",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns an array of HTMLElement childNodes that pass the test method. ",
                "-         * @method getChildrenBy",
                "-         * @param {HTMLElement} node The HTMLElement to start from",
                "-         * @param {Function} method A boolean function used to test children",
                "-         * that receives the node being tested as its only argument",
                "-         * @return {Array} A static array of HTMLElements",
                "-         */",
                "-        getChildrenBy: function(node, method) {",
                "-            var child = Y.Dom.getFirstChildBy(node, method),",
                "-                children = child ? [child] : [];",
                "-",
                "-            Y.Dom.getNextSiblingBy(child, function(node) {",
                "-                if ( !method || method(node) ) {",
                "-                    children[children.length] = node;",
                "-                }",
                "-                return false; // fail test to collect all children",
                "-            });",
                "-",
                "-            return children;",
                "-        },",
                "- ",
                "-        /**",
                "-         * Returns an array of HTMLElement childNodes. ",
                "-         * @method getChildren",
                "-         * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point ",
                "-         * @return {Array} A static array of HTMLElements",
                "-         */",
                "-        getChildren: function(node) {",
                "-            node = Y.Dom.get(node);",
                "-            if (!node) {",
                "-            }",
                "-",
                "-            return Y.Dom.getChildrenBy(node);",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns the left scroll value of the document ",
                "-         * @method getDocumentScrollLeft",
                "-         * @param {HTMLDocument} document (optional) The document to get the scroll value of",
                "-         * @return {Int}  The amount that the document is scrolled to the left",
                "-         */",
                "-        getDocumentScrollLeft: function(doc) {",
                "-            doc = doc || document;",
                "-            return Math.max(doc[DOCUMENT_ELEMENT].scrollLeft, doc.body.scrollLeft);",
                "-        }, ",
                "-",
                "-        /**",
                "-         * Returns the top scroll value of the document ",
                "-         * @method getDocumentScrollTop",
                "-         * @param {HTMLDocument} document (optional) The document to get the scroll value of",
                "-         * @return {Int}  The amount that the document is scrolled to the top",
                "-         */",
                "-        getDocumentScrollTop: function(doc) {",
                "-            doc = doc || document;",
                "-            return Math.max(doc[DOCUMENT_ELEMENT].scrollTop, doc.body.scrollTop);",
                "-        },",
                "-",
                "-        /**",
                "-         * Inserts the new node as the previous sibling of the reference node ",
                "-         * @method insertBefore",
                "-         * @param {String | HTMLElement} newNode The node to be inserted",
                "-         * @param {String | HTMLElement} referenceNode The node to insert the new node before ",
                "-         * @return {HTMLElement} The node that was inserted (or null if insert fails) ",
                "-         */",
                "-        insertBefore: function(newNode, referenceNode) {",
                "-            newNode = Y.Dom.get(newNode); ",
                "-            referenceNode = Y.Dom.get(referenceNode); ",
                "-            ",
                "-            if (!newNode || !referenceNode || !referenceNode[PARENT_NODE]) {",
                "-                return null;",
                "-            }       ",
                "-",
                "-            return referenceNode[PARENT_NODE].insertBefore(newNode, referenceNode); ",
                "-        },",
                "-",
                "-        /**",
                "-         * Inserts the new node as the next sibling of the reference node ",
                "-         * @method insertAfter",
                "-         * @param {String | HTMLElement} newNode The node to be inserted",
                "-         * @param {String | HTMLElement} referenceNode The node to insert the new node after ",
                "-         * @return {HTMLElement} The node that was inserted (or null if insert fails) ",
                "-         */",
                "-        insertAfter: function(newNode, referenceNode) {",
                "-            newNode = Y.Dom.get(newNode); ",
                "-            referenceNode = Y.Dom.get(referenceNode); ",
                "-            ",
                "-            if (!newNode || !referenceNode || !referenceNode[PARENT_NODE]) {",
                "-                return null;",
                "-            }       ",
                "-",
                "-            if (referenceNode.nextSibling) {",
                "-                return referenceNode[PARENT_NODE].insertBefore(newNode, referenceNode.nextSibling); ",
                "-            } else {",
                "-                return referenceNode[PARENT_NODE].appendChild(newNode);",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Creates a Region based on the viewport relative to the document. ",
                "-         * @method getClientRegion",
                "-         * @return {Region} A Region object representing the viewport which accounts for document scroll",
                "-         */",
                "-        getClientRegion: function() {",
                "-            var t = Y.Dom.getDocumentScrollTop(),",
                "-                l = Y.Dom.getDocumentScrollLeft(),",
                "-                r = Y.Dom.getViewportWidth() + l,",
                "-                b = Y.Dom.getViewportHeight() + t;",
                "-",
                "-            return new Y.Region(t, r, b, l);",
                "-        },",
                "-",
                "-        /**",
                "-         * Provides a normalized attribute interface. ",
                "-         * @method setAttribute",
                "-         * @param {String | HTMLElement} el The target element for the attribute.",
                "-         * @param {String} attr The attribute to set.",
                "-         * @param {String} val The value of the attribute.",
                "-         */",
                "-        setAttribute: function(el, attr, val) {",
                "-            Y.Dom.batch(el, Y.Dom._setAttribute, { attr: attr, val: val });",
                "-        },",
                "-",
                "-        _setAttribute: function(el, args) {",
                "-            var attr = Y.Dom._toCamel(args.attr),",
                "-                val = args.val;",
                "-",
                "-            if (el && el.setAttribute) {",
                "-                // set as DOM property, except for BUTTON, which errors on property setter",
                "-                if (Y.Dom.DOT_ATTRIBUTES[attr] && el.tagName && el.tagName != 'BUTTON') {",
                "-                    el[attr] = val;",
                "-                } else {",
                "-                    attr = Y.Dom.CUSTOM_ATTRIBUTES[attr] || attr;",
                "-                    el.setAttribute(attr, val);",
                "-                }",
                "-            } else {",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Provides a normalized attribute interface. ",
                "-         * @method getAttribute",
                "-         * @param {String | HTMLElement} el The target element for the attribute.",
                "-         * @param {String} attr The attribute to get.",
                "-         * @return {String} The current value of the attribute. ",
                "-         */",
                "-        getAttribute: function(el, attr) {",
                "-            return Y.Dom.batch(el, Y.Dom._getAttribute, attr);",
                "-        },",
                "-",
                "-",
                "-        _getAttribute: function(el, attr) {",
                "-            var val;",
                "-            attr = Y.Dom.CUSTOM_ATTRIBUTES[attr] || attr;",
                "-",
                "-            if (Y.Dom.DOT_ATTRIBUTES[attr]) {",
                "-                val = el[attr];",
                "-            } else if (el && 'getAttribute' in el) {",
                "-                if (/^(?:href|src)$/.test(attr)) { // use IE flag to return exact value",
                "-                    val = el.getAttribute(attr, 2);",
                "-                } else {",
                "-                    val = el.getAttribute(attr);",
                "-                }",
                "-            } else {",
                "-            }",
                "-",
                "-            return val;",
                "-        },",
                "-",
                "-        _toCamel: function(property) {",
                "-            var c = propertyCache;",
                "-",
                "-            function tU(x,l) {",
                "-                return l.toUpperCase();",
                "-            }",
                "-",
                "-            return c[property] || (c[property] = property.indexOf('-') === -1 ? ",
                "-                                    property :",
                "-                                    property.replace( /-([a-z])/gi, tU ));",
                "-        },",
                "-",
                "-        _getClassRegex: function(className) {",
                "-            var re;",
                "-            if (className !== undefined) { // allow empty string to pass",
                "-                if (className.exec) { // already a RegExp",
                "-                    re = className;",
                "-                } else {",
                "-                    re = reCache[className];",
                "-                    if (!re) {",
                "-                        // escape special chars (\".\", \"[\", etc.)",
                "-                        className = className.replace(Y.Dom._patterns.CLASS_RE_TOKENS, '\\\\$1');",
                "-                        className = className.replace(/\\s+/g, SPACE); // convert line breaks and other delims",
                "-                        re = reCache[className] = new RegExp(C_START + className + C_END, G);",
                "-                    }",
                "-                }",
                "-            }",
                "-            return re;",
                "-        },",
                "-",
                "-        _patterns: {",
                "-            ROOT_TAG: /^body|html$/i, // body for quirks mode, html for standards,",
                "-            CLASS_RE_TOKENS: /([\\.\\(\\)\\^\\$\\*\\+\\?\\|\\[\\]\\{\\}\\\\])/g",
                "-        },",
                "-",
                "-",
                "-        _testElement: function(node, method) {",
                "-            return node && node[NODE_TYPE] == 1 && ( !method || method(node) );",
                "-        },",
                "-",
                "-        _calcBorders: function(node, xy2) {",
                "-            var t = parseInt(Y.Dom[GET_COMPUTED_STYLE](node, BORDER_TOP_WIDTH), 10) || 0,",
                "-                l = parseInt(Y.Dom[GET_COMPUTED_STYLE](node, BORDER_LEFT_WIDTH), 10) || 0;",
                "-            if (isGecko) {",
                "-                if (RE_TABLE.test(node[TAG_NAME])) {",
                "-                    t = 0;",
                "-                    l = 0;",
                "-                }",
                "-            }",
                "-            xy2[0] += l;",
                "-            xy2[1] += t;",
                "-            return xy2;",
                "-        }",
                "-    };",
                "-        ",
                "-    var _getComputedStyle = Y.Dom[GET_COMPUTED_STYLE];",
                "-    // fix opera computedStyle default color unit (convert to rgb)",
                "-    if (UA.opera) {",
                "-        Y.Dom[GET_COMPUTED_STYLE] = function(node, att) {",
                "-            var val = _getComputedStyle(node, att);",
                "-            if (RE_COLOR.test(att)) {",
                "-                val = Y.Dom.Color.toRGB(val);",
                "-            }",
                "-",
                "-            return val;",
                "-        };",
                "-",
                "-    }",
                "-",
                "-    // safari converts transparent to rgba(), others use \"transparent\"",
                "-    if (UA.webkit) {",
                "-        Y.Dom[GET_COMPUTED_STYLE] = function(node, att) {",
                "-            var val = _getComputedStyle(node, att);",
                "-",
                "-            if (val === 'rgba(0, 0, 0, 0)') {",
                "-                val = 'transparent'; ",
                "-            }",
                "-",
                "-            return val;",
                "-        };",
                "-",
                "-    }",
                "-",
                "-    if (UA.ie && UA.ie >= 8) {",
                "-        Y.Dom.DOT_ATTRIBUTES.type = true; // IE 8 errors on input.setAttribute('type')",
                "-    }",
                "-})();",
                "-/**",
                "- * A region is a representation of an object on a grid.  It is defined",
                "- * by the top, right, bottom, left extents, so is rectangular by default.  If ",
                "- * other shapes are required, this class could be extended to support it.",
                "- * @namespace YAHOO.util",
                "- * @class Region",
                "- * @param {Int} t the top extent",
                "- * @param {Int} r the right extent",
                "- * @param {Int} b the bottom extent",
                "- * @param {Int} l the left extent",
                "- * @constructor",
                "- */",
                "-YAHOO.util.Region = function(t, r, b, l) {",
                "-",
                "-    /**",
                "-     * The region's top extent",
                "-     * @property top",
                "-     * @type Int",
                "-     */",
                "-    this.top = t;",
                "-    ",
                "-    /**",
                "-     * The region's top extent",
                "-     * @property y",
                "-     * @type Int",
                "-     */",
                "-    this.y = t;",
                "-    ",
                "-    /**",
                "-     * The region's top extent as index, for symmetry with set/getXY",
                "-     * @property 1",
                "-     * @type Int",
                "-     */",
                "-    this[1] = t;",
                "-",
                "-    /**",
                "-     * The region's right extent",
                "-     * @property right",
                "-     * @type int",
                "-     */",
                "-    this.right = r;",
                "-",
                "-    /**",
                "-     * The region's bottom extent",
                "-     * @property bottom",
                "-     * @type Int",
                "-     */",
                "-    this.bottom = b;",
                "-",
                "-    /**",
                "-     * The region's left extent",
                "-     * @property left",
                "-     * @type Int",
                "-     */",
                "-    this.left = l;",
                "-    ",
                "-    /**",
                "-     * The region's left extent",
                "-     * @property x",
                "-     * @type Int",
                "-     */",
                "-    this.x = l;",
                "-    ",
                "-    /**",
                "-     * The region's left extent as index, for symmetry with set/getXY",
                "-     * @property 0",
                "-     * @type Int",
                "-     */",
                "-    this[0] = l;",
                "-",
                "-    /**",
                "-     * The region's total width ",
                "-     * @property width ",
                "-     * @type Int",
                "-     */",
                "-    this.width = this.right - this.left;",
                "-",
                "-    /**",
                "-     * The region's total height ",
                "-     * @property height ",
                "-     * @type Int",
                "-     */",
                "-    this.height = this.bottom - this.top;",
                "-};",
                "-",
                "-/**",
                "- * Returns true if this region contains the region passed in",
                "- * @method contains",
                "- * @param  {Region}  region The region to evaluate",
                "- * @return {Boolean}        True if the region is contained with this region, ",
                "- *                          else false",
                "- */",
                "-YAHOO.util.Region.prototype.contains = function(region) {",
                "-    return ( region.left   >= this.left   && ",
                "-             region.right  <= this.right  && ",
                "-             region.top    >= this.top    && ",
                "-             region.bottom <= this.bottom    );",
                "-",
                "-};",
                "-",
                "-/**",
                "- * Returns the area of the region",
                "- * @method getArea",
                "- * @return {Int} the region's area",
                "- */",
                "-YAHOO.util.Region.prototype.getArea = function() {",
                "-    return ( (this.bottom - this.top) * (this.right - this.left) );",
                "-};",
                "-",
                "-/**",
                "- * Returns the region where the passed in region overlaps with this one",
                "- * @method intersect",
                "- * @param  {Region} region The region that intersects",
                "- * @return {Region}        The overlap region, or null if there is no overlap",
                "- */",
                "-YAHOO.util.Region.prototype.intersect = function(region) {",
                "-    var t = Math.max( this.top,    region.top    ),",
                "-        r = Math.min( this.right,  region.right  ),",
                "-        b = Math.min( this.bottom, region.bottom ),",
                "-        l = Math.max( this.left,   region.left   );",
                "-    ",
                "-    if (b >= t && r >= l) {",
                "-        return new YAHOO.util.Region(t, r, b, l);",
                "-    } else {",
                "-        return null;",
                "-    }",
                "-};",
                "-",
                "-/**",
                "- * Returns the region representing the smallest region that can contain both",
                "- * the passed in region and this region.",
                "- * @method union",
                "- * @param  {Region} region The region that to create the union with",
                "- * @return {Region}        The union region",
                "- */",
                "-YAHOO.util.Region.prototype.union = function(region) {",
                "-    var t = Math.min( this.top,    region.top    ),",
                "-        r = Math.max( this.right,  region.right  ),",
                "-        b = Math.max( this.bottom, region.bottom ),",
                "-        l = Math.min( this.left,   region.left   );",
                "-",
                "-    return new YAHOO.util.Region(t, r, b, l);",
                "-};",
                "-",
                "-/**",
                "- * toString",
                "- * @method toString",
                "- * @return string the region properties",
                "- */",
                "-YAHOO.util.Region.prototype.toString = function() {",
                "-    return ( \"Region {\"    +",
                "-             \"top: \"       + this.top    + ",
                "-             \", right: \"   + this.right  + ",
                "-             \", bottom: \"  + this.bottom + ",
                "-             \", left: \"    + this.left   + ",
                "-             \", height: \"  + this.height + ",
                "-             \", width: \"    + this.width   + ",
                "-             \"}\" );",
                "-};",
                "-",
                "-/**",
                "- * Returns a region that is occupied by the DOM element",
                "- * @method getRegion",
                "- * @param  {HTMLElement} el The element",
                "- * @return {Region}         The region that the element occupies",
                "- * @static",
                "- */",
                "-YAHOO.util.Region.getRegion = function(el) {",
                "-    var p = YAHOO.util.Dom.getXY(el),",
                "-        t = p[1],",
                "-        r = p[0] + el.offsetWidth,",
                "-        b = p[1] + el.offsetHeight,",
                "-        l = p[0];",
                "-",
                "-    return new YAHOO.util.Region(t, r, b, l);",
                "-};",
                "-",
                "-/////////////////////////////////////////////////////////////////////////////",
                "-",
                "-",
                "-/**",
                "- * A point is a region that is special in that it represents a single point on ",
                "- * the grid.",
                "- * @namespace YAHOO.util",
                "- * @class Point",
                "- * @param {Int} x The X position of the point",
                "- * @param {Int} y The Y position of the point",
                "- * @constructor",
                "- * @extends YAHOO.util.Region",
                "- */",
                "-YAHOO.util.Point = function(x, y) {",
                "-   if (YAHOO.lang.isArray(x)) { // accept input from Dom.getXY, Event.getXY, etc.",
                "-      y = x[1]; // dont blow away x yet",
                "-      x = x[0];",
                "-   }",
                "- ",
                "-    YAHOO.util.Point.superclass.constructor.call(this, y, x, y, x);",
                "-};",
                "-",
                "-YAHOO.extend(YAHOO.util.Point, YAHOO.util.Region);",
                "-",
                "-(function() {",
                "-/**",
                "- * Internal methods used to add style management functionality to DOM.",
                "- * @module dom",
                "- * @class IEStyle",
                "- * @namespace YAHOO.util.Dom",
                "- */",
                "-",
                "-var Y = YAHOO.util, ",
                "-    CLIENT_TOP = 'clientTop',",
                "-    CLIENT_LEFT = 'clientLeft',",
                "-    PARENT_NODE = 'parentNode',",
                "-    RIGHT = 'right',",
                "-    HAS_LAYOUT = 'hasLayout',",
                "-    PX = 'px',",
                "-    OPACITY = 'opacity',",
                "-    AUTO = 'auto',",
                "-    BORDER_LEFT_WIDTH = 'borderLeftWidth',",
                "-    BORDER_TOP_WIDTH = 'borderTopWidth',",
                "-    BORDER_RIGHT_WIDTH = 'borderRightWidth',",
                "-    BORDER_BOTTOM_WIDTH = 'borderBottomWidth',",
                "-    VISIBLE = 'visible',",
                "-    TRANSPARENT = 'transparent',",
                "-    HEIGHT = 'height',",
                "-    WIDTH = 'width',",
                "-    STYLE = 'style',",
                "-    CURRENT_STYLE = 'currentStyle',",
                "-",
                "-// IE getComputedStyle",
                "-// TODO: unit-less lineHeight (e.g. 1.22)",
                "-    re_size = /^width|height$/,",
                "-    re_unit = /^(\\d[.\\d]*)+(em|ex|px|gd|rem|vw|vh|vm|ch|mm|cm|in|pt|pc|deg|rad|ms|s|hz|khz|%){1}?/i,",
                "-",
                "-    ComputedStyle = {",
                "-        /**",
                "-        * @method get",
                "-        * @description Method used by DOM to get style information for IE",
                "-        * @param {HTMLElement} el The element to check",
                "-        * @param {String} property The property to check",
                "-        * @returns {String} The computed style",
                "-        */",
                "-        get: function(el, property) {",
                "-            var value = '',",
                "-                current = el[CURRENT_STYLE][property];",
                "-",
                "-            if (property === OPACITY) {",
                "-                value = Y.Dom.getStyle(el, OPACITY);        ",
                "-            } else if (!current || (current.indexOf && current.indexOf(PX) > -1)) { // no need to convert",
                "-                value = current;",
                "-            } else if (Y.Dom.IE_COMPUTED[property]) { // use compute function",
                "-                value = Y.Dom.IE_COMPUTED[property](el, property);",
                "-            } else if (re_unit.test(current)) { // convert to pixel",
                "-                value = Y.Dom.IE.ComputedStyle.getPixel(el, property);",
                "-            } else {",
                "-                value = current;",
                "-            }",
                "-",
                "-            return value;",
                "-        },",
                "-        /**",
                "-        * @method getOffset",
                "-        * @description Determine the offset of an element",
                "-        * @param {HTMLElement} el The element to check",
                "-        * @param {String} prop The property to check.",
                "-        * @return {String} The offset",
                "-        */",
                "-        getOffset: function(el, prop) {",
                "-            var current = el[CURRENT_STYLE][prop],                        // value of \"width\", \"top\", etc.",
                "-                capped = prop.charAt(0).toUpperCase() + prop.substr(1), // \"Width\", \"Top\", etc.",
                "-                offset = 'offset' + capped,                             // \"offsetWidth\", \"offsetTop\", etc.",
                "-                pixel = 'pixel' + capped,                               // \"pixelWidth\", \"pixelTop\", etc.",
                "-                value = '',",
                "-                actual;",
                "-",
                "-            if (current == AUTO) {",
                "-                actual = el[offset]; // offsetHeight/Top etc.",
                "-                if (actual === undefined) { // likely \"right\" or \"bottom\"",
                "-                    value = 0;",
                "-                }",
                "-",
                "-                value = actual;",
                "-                if (re_size.test(prop)) { // account for box model diff ",
                "-                    el[STYLE][prop] = actual; ",
                "-                    if (el[offset] > actual) {",
                "-                        // the difference is padding + border (works in Standards & Quirks modes)",
                "-                        value = actual - (el[offset] - actual);",
                "-                    }",
                "-                    el[STYLE][prop] = AUTO; // revert to auto",
                "-                }",
                "-            } else { // convert units to px",
                "-                if (!el[STYLE][pixel] && !el[STYLE][prop]) { // need to map style.width to currentStyle (no currentStyle.pixelWidth)",
                "-                    el[STYLE][prop] = current;              // no style.pixelWidth if no style.width",
                "-                }",
                "-                value = el[STYLE][pixel];",
                "-            }",
                "-            return value + PX;",
                "-        },",
                "-        /**",
                "-        * @method getBorderWidth",
                "-        * @description Try to determine the width of an elements border",
                "-        * @param {HTMLElement} el The element to check",
                "-        * @param {String} property The property to check",
                "-        * @return {String} The elements border width",
                "-        */",
                "-        getBorderWidth: function(el, property) {",
                "-            // clientHeight/Width = paddingBox (e.g. offsetWidth - borderWidth)",
                "-            // clientTop/Left = borderWidth",
                "-            var value = null;",
                "-            if (!el[CURRENT_STYLE][HAS_LAYOUT]) { // TODO: unset layout?",
                "-                el[STYLE].zoom = 1; // need layout to measure client",
                "-            }",
                "-",
                "-            switch(property) {",
                "-                case BORDER_TOP_WIDTH:",
                "-                    value = el[CLIENT_TOP];",
                "-                    break;",
                "-                case BORDER_BOTTOM_WIDTH:",
                "-                    value = el.offsetHeight - el.clientHeight - el[CLIENT_TOP];",
                "-                    break;",
                "-                case BORDER_LEFT_WIDTH:",
                "-                    value = el[CLIENT_LEFT];",
                "-                    break;",
                "-                case BORDER_RIGHT_WIDTH:",
                "-                    value = el.offsetWidth - el.clientWidth - el[CLIENT_LEFT];",
                "-                    break;",
                "-            }",
                "-            return value + PX;",
                "-        },",
                "-        /**",
                "-        * @method getPixel",
                "-        * @description Get the pixel value from a style property",
                "-        * @param {HTMLElement} node The element to check",
                "-        * @param {String} att The attribute to check",
                "-        * @return {String} The pixel value",
                "-        */",
                "-        getPixel: function(node, att) {",
                "-            // use pixelRight to convert to px",
                "-            var val = null,",
                "-                styleRight = node[CURRENT_STYLE][RIGHT],",
                "-                current = node[CURRENT_STYLE][att];",
                "-",
                "-            node[STYLE][RIGHT] = current;",
                "-            val = node[STYLE].pixelRight;",
                "-            node[STYLE][RIGHT] = styleRight; // revert",
                "-",
                "-            return val + PX;",
                "-        },",
                "-",
                "-        /**",
                "-        * @method getMargin",
                "-        * @description Get the margin value from a style property",
                "-        * @param {HTMLElement} node The element to check",
                "-        * @param {String} att The attribute to check",
                "-        * @return {String} The margin value",
                "-        */",
                "-        getMargin: function(node, att) {",
                "-            var val;",
                "-            if (node[CURRENT_STYLE][att] == AUTO) {",
                "-                val = 0 + PX;",
                "-            } else {",
                "-                val = Y.Dom.IE.ComputedStyle.getPixel(node, att);",
                "-            }",
                "-            return val;",
                "-        },",
                "-",
                "-        /**",
                "-        * @method getVisibility",
                "-        * @description Get the visibility of an element",
                "-        * @param {HTMLElement} node The element to check",
                "-        * @param {String} att The attribute to check",
                "-        * @return {String} The value",
                "-        */",
                "-        getVisibility: function(node, att) {",
                "-            var current;",
                "-            while ( (current = node[CURRENT_STYLE]) && current[att] == 'inherit') { // NOTE: assignment in test",
                "-                node = node[PARENT_NODE];",
                "-            }",
                "-            return (current) ? current[att] : VISIBLE;",
                "-        },",
                "-",
                "-        /**",
                "-        * @method getColor",
                "-        * @description Get the color of an element",
                "-        * @param {HTMLElement} node The element to check",
                "-        * @param {String} att The attribute to check",
                "-        * @return {String} The value",
                "-        */",
                "-        getColor: function(node, att) {",
                "-            return Y.Dom.Color.toRGB(node[CURRENT_STYLE][att]) || TRANSPARENT;",
                "-        },",
                "-",
                "-        /**",
                "-        * @method getBorderColor",
                "-        * @description Get the bordercolor of an element",
                "-        * @param {HTMLElement} node The element to check",
                "-        * @param {String} att The attribute to check",
                "-        * @return {String} The value",
                "-        */",
                "-        getBorderColor: function(node, att) {",
                "-            var current = node[CURRENT_STYLE],",
                "-                val = current[att] || current.color;",
                "-            return Y.Dom.Color.toRGB(Y.Dom.Color.toHex(val));",
                "-        }",
                "-",
                "-    },",
                "-",
                "-//fontSize: getPixelFont,",
                "-    IEComputed = {};",
                "-",
                "-IEComputed.top = IEComputed.right = IEComputed.bottom = IEComputed.left = ",
                "-        IEComputed[WIDTH] = IEComputed[HEIGHT] = ComputedStyle.getOffset;",
                "-",
                "-IEComputed.color = ComputedStyle.getColor;",
                "-",
                "-IEComputed[BORDER_TOP_WIDTH] = IEComputed[BORDER_RIGHT_WIDTH] =",
                "-        IEComputed[BORDER_BOTTOM_WIDTH] = IEComputed[BORDER_LEFT_WIDTH] =",
                "-        ComputedStyle.getBorderWidth;",
                "-",
                "-IEComputed.marginTop = IEComputed.marginRight = IEComputed.marginBottom =",
                "-        IEComputed.marginLeft = ComputedStyle.getMargin;",
                "-",
                "-IEComputed.visibility = ComputedStyle.getVisibility;",
                "-IEComputed.borderColor = IEComputed.borderTopColor =",
                "-        IEComputed.borderRightColor = IEComputed.borderBottomColor =",
                "-        IEComputed.borderLeftColor = ComputedStyle.getBorderColor;",
                "-",
                "-Y.Dom.IE_COMPUTED = IEComputed;",
                "-Y.Dom.IE_ComputedStyle = ComputedStyle;",
                "-})();",
                "-(function() {",
                "-/**",
                "- * Add style management functionality to DOM.",
                "- * @module dom",
                "- * @class Color",
                "- * @namespace YAHOO.util.Dom",
                "- */",
                "-",
                "-var TO_STRING = 'toString',",
                "-    PARSE_INT = parseInt,",
                "-    RE = RegExp,",
                "-    Y = YAHOO.util;",
                "-",
                "-Y.Dom.Color = {",
                "-    /**",
                "-    * @property KEYWORDS",
                "-    * @type Object",
                "-    * @description Color keywords used when converting to Hex",
                "-    */",
                "-    KEYWORDS: {",
                "-        black: '000',",
                "-        silver: 'c0c0c0',",
                "-        gray: '808080',",
                "-        white: 'fff',",
                "-        maroon: '800000',",
                "-        red: 'f00',",
                "-        purple: '800080',",
                "-        fuchsia: 'f0f',",
                "-        green: '008000',",
                "-        lime: '0f0',",
                "-        olive: '808000',",
                "-        yellow: 'ff0',",
                "-        navy: '000080',",
                "-        blue: '00f',",
                "-        teal: '008080',",
                "-        aqua: '0ff'",
                "-    },",
                "-    /**",
                "-    * @property re_RGB",
                "-    * @private",
                "-    * @type Regex",
                "-    * @description Regex to parse rgb(0,0,0) formatted strings",
                "-    */",
                "-    re_RGB: /^rgb\\(([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\)$/i,",
                "-    /**",
                "-    * @property re_hex",
                "-    * @private",
                "-    * @type Regex",
                "-    * @description Regex to parse #123456 formatted strings",
                "-    */",
                "-    re_hex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,",
                "-    /**",
                "-    * @property re_hex3",
                "-    * @private",
                "-    * @type Regex",
                "-    * @description Regex to parse #123 formatted strings",
                "-    */",
                "-    re_hex3: /([0-9A-F])/gi,",
                "-    /**",
                "-    * @method toRGB",
                "-    * @description Converts a hex or color string to an rgb string: rgb(0,0,0)",
                "-    * @param {String} val The string to convert to RGB notation.",
                "-    * @returns {String} The converted string",
                "-    */",
                "-    toRGB: function(val) {",
                "-        if (!Y.Dom.Color.re_RGB.test(val)) {",
                "-            val = Y.Dom.Color.toHex(val);",
                "-        }",
                "-",
                "-        if(Y.Dom.Color.re_hex.exec(val)) {",
                "-            val = 'rgb(' + [",
                "-                PARSE_INT(RE.$1, 16),",
                "-                PARSE_INT(RE.$2, 16),",
                "-                PARSE_INT(RE.$3, 16)",
                "-            ].join(', ') + ')';",
                "-        }",
                "-        return val;",
                "-    },",
                "-    /**",
                "-    * @method toHex",
                "-    * @description Converts an rgb or color string to a hex string: #123456",
                "-    * @param {String} val The string to convert to hex notation.",
                "-    * @returns {String} The converted string",
                "-    */",
                "-    toHex: function(val) {",
                "-        val = Y.Dom.Color.KEYWORDS[val] || val;",
                "-        if (Y.Dom.Color.re_RGB.exec(val)) {",
                "-            val = [",
                "-                Number(RE.$1).toString(16),",
                "-                Number(RE.$2).toString(16),",
                "-                Number(RE.$3).toString(16)",
                "-            ];",
                "-",
                "-            for (var i = 0; i < val.length; i++) {",
                "-                if (val[i].length < 2) {",
                "-                    val[i] = '0' + val[i];",
                "-                }",
                "-            }",
                "-",
                "-            val = val.join('');",
                "-        }",
                "-",
                "-        if (val.length < 6) {",
                "-            val = val.replace(Y.Dom.Color.re_hex3, '$1$1');",
                "-        }",
                "-",
                "-        if (val !== 'transparent' && val.indexOf('#') < 0) {",
                "-            val = '#' + val;",
                "-        }",
                "-",
                "-        return val.toUpperCase();",
                "-    }",
                "-};",
                "-}());",
                "-YAHOO.register(\"dom\", YAHOO.util.Dom, {version: \"2.9.0\", build: \"2800\"});",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event-min.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event-min.js",
                "deleted file mode 100644",
                "index f4a0f255e0..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event-min.js",
                "+++ /dev/null",
                "@@ -1,11 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-YAHOO.util.CustomEvent=function(d,c,b,a,e){this.type=d;this.scope=c||window;this.silent=b;this.fireOnce=e;this.fired=false;this.firedWith=null;this.signature=a||YAHOO.util.CustomEvent.LIST;this.subscribers=[];if(!this.silent){}var f=\"_YUICEOnSubscribe\";if(d!==f){this.subscribeEvent=new YAHOO.util.CustomEvent(f,this,true);}this.lastError=null;};YAHOO.util.CustomEvent.LIST=0;YAHOO.util.CustomEvent.FLAT=1;YAHOO.util.CustomEvent.prototype={subscribe:function(b,c,d){if(!b){throw new Error(\"Invalid callback for subscriber to '\"+this.type+\"'\");}if(this.subscribeEvent){this.subscribeEvent.fire(b,c,d);}var a=new YAHOO.util.Subscriber(b,c,d);if(this.fireOnce&&this.fired){this.notify(a,this.firedWith);}else{this.subscribers.push(a);}},unsubscribe:function(d,f){if(!d){return this.unsubscribeAll();}var e=false;for(var b=0,a=this.subscribers.length;b<a;++b){var c=this.subscribers[b];if(c&&c.contains(d,f)){this._delete(b);e=true;}}return e;},fire:function(){this.lastError=null;var h=[],a=this.subscribers.length;var d=[].slice.call(arguments,0),c=true,f,b=false;if(this.fireOnce){if(this.fired){return true;}else{this.firedWith=d;}}this.fired=true;if(!a&&this.silent){return true;}if(!this.silent){}var e=this.subscribers.slice();for(f=0;f<a;++f){var g=e[f];if(!g||!g.fn){b=true;}else{c=this.notify(g,d);if(false===c){if(!this.silent){}break;}}}return(c!==false);},notify:function(g,c){var b,i=null,f=g.getScope(this.scope),a=YAHOO.util.Event.throwErrors;if(!this.silent){}if(this.signature==YAHOO.util.CustomEvent.FLAT){if(c.length>0){i=c[0];}try{b=g.fn.call(f,i,g.obj);}catch(h){this.lastError=h;if(a){throw h;}}}else{try{b=g.fn.call(f,this.type,c,g.obj);}catch(d){this.lastError=d;if(a){throw d;}}}return b;},unsubscribeAll:function(){var a=this.subscribers.length,b;for(b=a-1;b>-1;b--){this._delete(b);}this.subscribers=[];return a;},_delete:function(a){var b=this.subscribers[a];if(b){delete b.fn;delete b.obj;}this.subscribers.splice(a,1);},toString:function(){return\"CustomEvent: \"+\"'\"+this.type+\"', \"+\"context: \"+this.scope;}};YAHOO.util.Subscriber=function(a,b,c){this.fn=a;this.obj=YAHOO.lang.isUndefined(b)?null:b;this.overrideContext=c;};YAHOO.util.Subscriber.prototype.getScope=function(a){if(this.overrideContext){if(this.overrideContext===true){return this.obj;}else{return this.overrideContext;}}return a;};YAHOO.util.Subscriber.prototype.contains=function(a,b){if(b){return(this.fn==a&&this.obj==b);}else{return(this.fn==a);}};YAHOO.util.Subscriber.prototype.toString=function(){return\"Subscriber { obj: \"+this.obj+\", overrideContext: \"+(this.overrideContext||\"no\")+\" }\";};if(!YAHOO.util.Event){YAHOO.util.Event=function(){var g=false,h=[],j=[],a=0,e=[],b=0,c={63232:38,63233:40,63234:37,63235:39,63276:33,63277:34,25:9},d=YAHOO.env.ua.ie,f=\"focusin\",i=\"focusout\";return{POLL_RETRYS:500,POLL_INTERVAL:40,EL:0,TYPE:1,FN:2,WFN:3,UNLOAD_OBJ:3,ADJ_SCOPE:4,OBJ:5,OVERRIDE:6,CAPTURE:7,lastError:null,isSafari:YAHOO.env.ua.webkit,webkit:YAHOO.env.ua.webkit,isIE:d,_interval:null,_dri:null,_specialTypes:{focusin:(d?\"focusin\":\"focus\"),focusout:(d?\"focusout\":\"blur\")},DOMReady:false,throwErrors:false,startInterval:function(){if(!this._interval){this._interval=YAHOO.lang.later(this.POLL_INTERVAL,this,this._tryPreloadAttach,null,true);}},onAvailable:function(q,m,o,p,n){var k=(YAHOO.lang.isString(q))?[q]:q;for(var l=0;l<k.length;l=l+1){e.push({id:k[l],fn:m,obj:o,overrideContext:p,checkReady:n});}a=this.POLL_RETRYS;this.startInterval();},onContentReady:function(n,k,l,m){this.onAvailable(n,k,l,m,true);},onDOMReady:function(){this.DOMReadyEvent.subscribe.apply(this.DOMReadyEvent,arguments);},_addListener:function(m,k,v,p,t,y){if(!v||!v.call){return false;}if(this._isValidCollection(m)){var w=true;for(var q=0,s=m.length;q<s;++q){w=this.on(m[q],k,v,p,t)&&w;}return w;}else{if(YAHOO.lang.isString(m)){var o=this.getEl(m);if(o){m=o;}else{this.onAvailable(m,function(){YAHOO.util.Event._addListener(m,k,v,p,t,y);});return true;}}}if(!m){return false;}if(\"unload\"==k&&p!==this){j[j.length]=[m,k,v,p,t];return true;}var l=m;if(t){if(t===true){l=p;}else{l=t;}}var n=function(z){return v.call(l,YAHOO.util.Event.getEvent(z,m),p);};var x=[m,k,v,n,l,p,t,y];var r=h.length;h[r]=x;try{this._simpleAdd(m,k,n,y);}catch(u){this.lastError=u;this.removeListener(m,k,v);return false;}return true;},_getType:function(k){return this._specialTypes[k]||k;},addListener:function(m,p,l,n,o){var k=((p==f||p==i)&&!YAHOO.env.ua.ie)?true:false;return this._addListener(m,this._getType(p),l,n,o,k);},addFocusListener:function(l,k,m,n){return this.on(l,f,k,m,n);},removeFocusListener:function(l,k){return this.removeListener(l,f,k);},addBlurListener:function(l,k,m,n){return this.on(l,i,k,m,n);},removeBlurListener:function(l,k){return this.removeListener(l,i,k);},removeListener:function(l,k,r){var m,p,u;k=this._getType(k);if(typeof l==\"string\"){l=this.getEl(l);}else{if(this._isValidCollection(l)){var s=true;for(m=l.length-1;m>-1;m--){s=(this.removeListener(l[m],k,r)&&s);}return s;}}if(!r||!r.call){return this.purgeElement(l,false,k);}if(\"unload\"==k){for(m=j.length-1;m>-1;m--){u=j[m];if(u&&u[0]==l&&u[1]==k&&u[2]==r){j.splice(m,1);return true;}}return false;}var n=null;var o=arguments[3];if(\"undefined\"===typeof o){o=this._getCacheIndex(h,l,k,r);}if(o>=0){n=h[o];}if(!l||!n){return false;}var t=n[this.CAPTURE]===true?true:false;try{this._simpleRemove(l,k,n[this.WFN],t);}catch(q){this.lastError=q;return false;}delete h[o][this.WFN];delete h[o][this.FN];h.splice(o,1);return true;},getTarget:function(m,l){var k=m.target||m.srcElement;return this.resolveTextNode(k);},resolveTextNode:function(l){try{if(l&&3==l.nodeType){return l.parentNode;}}catch(k){return null;}return l;},getPageX:function(l){var k=l.pageX;if(!k&&0!==k){k=l.clientX||0;if(this.isIE){k+=this._getScrollLeft();}}return k;},getPageY:function(k){var l=k.pageY;if(!l&&0!==l){l=k.clientY||0;if(this.isIE){l+=this._getScrollTop();}}return l;},getXY:function(k){return[this.getPageX(k),this.getPageY(k)];},getRelatedTarget:function(l){var k=l.relatedTarget;",
                "-if(!k){if(l.type==\"mouseout\"){k=l.toElement;}else{if(l.type==\"mouseover\"){k=l.fromElement;}}}return this.resolveTextNode(k);},getTime:function(m){if(!m.time){var l=new Date().getTime();try{m.time=l;}catch(k){this.lastError=k;return l;}}return m.time;},stopEvent:function(k){this.stopPropagation(k);this.preventDefault(k);},stopPropagation:function(k){if(k.stopPropagation){k.stopPropagation();}else{k.cancelBubble=true;}},preventDefault:function(k){if(k.preventDefault){k.preventDefault();}else{k.returnValue=false;}},getEvent:function(m,k){var l=m||window.event;if(!l){var n=this.getEvent.caller;while(n){l=n.arguments[0];if(l&&Event==l.constructor){break;}n=n.caller;}}return l;},getCharCode:function(l){var k=l.keyCode||l.charCode||0;if(YAHOO.env.ua.webkit&&(k in c)){k=c[k];}return k;},_getCacheIndex:function(n,q,r,p){for(var o=0,m=n.length;o<m;o=o+1){var k=n[o];if(k&&k[this.FN]==p&&k[this.EL]==q&&k[this.TYPE]==r){return o;}}return -1;},generateId:function(k){var l=k.id;if(!l){l=\"yuievtautoid-\"+b;++b;k.id=l;}return l;},_isValidCollection:function(l){try{return(l&&typeof l!==\"string\"&&l.length&&!l.tagName&&!l.alert&&typeof l[0]!==\"undefined\");}catch(k){return false;}},elCache:{},getEl:function(k){return(typeof k===\"string\")?document.getElementById(k):k;},clearCache:function(){},DOMReadyEvent:new YAHOO.util.CustomEvent(\"DOMReady\",YAHOO,0,0,1),_load:function(l){if(!g){g=true;var k=YAHOO.util.Event;k._ready();k._tryPreloadAttach();}},_ready:function(l){var k=YAHOO.util.Event;if(!k.DOMReady){k.DOMReady=true;k.DOMReadyEvent.fire();k._simpleRemove(document,\"DOMContentLoaded\",k._ready);}},_tryPreloadAttach:function(){if(e.length===0){a=0;if(this._interval){this._interval.cancel();this._interval=null;}return;}if(this.locked){return;}if(this.isIE){if(!this.DOMReady){this.startInterval();return;}}this.locked=true;var q=!g;if(!q){q=(a>0&&e.length>0);}var p=[];var r=function(t,u){var s=t;if(u.overrideContext){if(u.overrideContext===true){s=u.obj;}else{s=u.overrideContext;}}u.fn.call(s,u.obj);};var l,k,o,n,m=[];for(l=0,k=e.length;l<k;l=l+1){o=e[l];if(o){n=this.getEl(o.id);if(n){if(o.checkReady){if(g||n.nextSibling||!q){m.push(o);e[l]=null;}}else{r(n,o);e[l]=null;}}else{p.push(o);}}}for(l=0,k=m.length;l<k;l=l+1){o=m[l];r(this.getEl(o.id),o);}a--;if(q){for(l=e.length-1;l>-1;l--){o=e[l];if(!o||!o.id){e.splice(l,1);}}this.startInterval();}else{if(this._interval){this._interval.cancel();this._interval=null;}}this.locked=false;},purgeElement:function(p,q,s){var n=(YAHOO.lang.isString(p))?this.getEl(p):p;var r=this.getListeners(n,s),o,k;if(r){for(o=r.length-1;o>-1;o--){var m=r[o];this.removeListener(n,m.type,m.fn);}}if(q&&n&&n.childNodes){for(o=0,k=n.childNodes.length;o<k;++o){this.purgeElement(n.childNodes[o],q,s);}}},getListeners:function(n,k){var q=[],m;if(!k){m=[h,j];}else{if(k===\"unload\"){m=[j];}else{k=this._getType(k);m=[h];}}var s=(YAHOO.lang.isString(n))?this.getEl(n):n;for(var p=0;p<m.length;p=p+1){var u=m[p];if(u){for(var r=0,t=u.length;r<t;++r){var o=u[r];if(o&&o[this.EL]===s&&(!k||k===o[this.TYPE])){q.push({type:o[this.TYPE],fn:o[this.FN],obj:o[this.OBJ],adjust:o[this.OVERRIDE],scope:o[this.ADJ_SCOPE],index:r});}}}}return(q.length)?q:null;},_unload:function(s){var m=YAHOO.util.Event,p,o,n,r,q,t=j.slice(),k;for(p=0,r=j.length;p<r;++p){n=t[p];if(n){try{k=window;if(n[m.ADJ_SCOPE]){if(n[m.ADJ_SCOPE]===true){k=n[m.UNLOAD_OBJ];}else{k=n[m.ADJ_SCOPE];}}n[m.FN].call(k,m.getEvent(s,n[m.EL]),n[m.UNLOAD_OBJ]);}catch(w){}t[p]=null;}}n=null;k=null;j=null;if(h){for(o=h.length-1;o>-1;o--){n=h[o];if(n){try{m.removeListener(n[m.EL],n[m.TYPE],n[m.FN],o);}catch(v){}}}n=null;}try{m._simpleRemove(window,\"unload\",m._unload);m._simpleRemove(window,\"load\",m._load);}catch(u){}},_getScrollLeft:function(){return this._getScroll()[1];},_getScrollTop:function(){return this._getScroll()[0];},_getScroll:function(){var k=document.documentElement,l=document.body;if(k&&(k.scrollTop||k.scrollLeft)){return[k.scrollTop,k.scrollLeft];}else{if(l){return[l.scrollTop,l.scrollLeft];}else{return[0,0];}}},regCE:function(){},_simpleAdd:function(){if(window.addEventListener){return function(m,n,l,k){m.addEventListener(n,l,(k));};}else{if(window.attachEvent){return function(m,n,l,k){m.attachEvent(\"on\"+n,l);};}else{return function(){};}}}(),_simpleRemove:function(){if(window.removeEventListener){return function(m,n,l,k){m.removeEventListener(n,l,(k));};}else{if(window.detachEvent){return function(l,m,k){l.detachEvent(\"on\"+m,k);};}else{return function(){};}}}()};}();(function(){var a=YAHOO.util.Event;a.on=a.addListener;a.onFocus=a.addFocusListener;a.onBlur=a.addBlurListener;",
                "-/*! DOMReady: based on work by: Dean Edwards/John Resig/Matthias Miller/Diego Perini */",
                "-if(a.isIE){if(self!==self.top){document.onreadystatechange=function(){if(document.readyState==\"complete\"){document.onreadystatechange=null;a._ready();}};}else{YAHOO.util.Event.onDOMReady(YAHOO.util.Event._tryPreloadAttach,YAHOO.util.Event,true);var b=document.createElement(\"p\");a._dri=setInterval(function(){try{b.doScroll(\"left\");clearInterval(a._dri);a._dri=null;a._ready();b=null;}catch(c){}},a.POLL_INTERVAL);}}else{if(a.webkit&&a.webkit<525){a._dri=setInterval(function(){var c=document.readyState;if(\"loaded\"==c||\"complete\"==c){clearInterval(a._dri);a._dri=null;a._ready();}},a.POLL_INTERVAL);}else{a._simpleAdd(document,\"DOMContentLoaded\",a._ready);}}a._simpleAdd(window,\"load\",a._load);a._simpleAdd(window,\"unload\",a._unload);a._tryPreloadAttach();})();}YAHOO.util.EventProvider=function(){};YAHOO.util.EventProvider.prototype={__yui_events:null,__yui_subscribers:null,subscribe:function(a,c,f,e){this.__yui_events=this.__yui_events||{};var d=this.__yui_events[a];if(d){d.subscribe(c,f,e);}else{this.__yui_subscribers=this.__yui_subscribers||{};var b=this.__yui_subscribers;if(!b[a]){b[a]=[];}b[a].push({fn:c,obj:f,overrideContext:e});}},unsubscribe:function(c,e,g){this.__yui_events=this.__yui_events||{};var a=this.__yui_events;if(c){var f=a[c];if(f){return f.unsubscribe(e,g);}}else{var b=true;for(var d in a){if(YAHOO.lang.hasOwnProperty(a,d)){b=b&&a[d].unsubscribe(e,g);",
                "-}}return b;}return false;},unsubscribeAll:function(a){return this.unsubscribe(a);},createEvent:function(b,g){this.__yui_events=this.__yui_events||{};var e=g||{},d=this.__yui_events,f;if(d[b]){}else{f=new YAHOO.util.CustomEvent(b,e.scope||this,e.silent,YAHOO.util.CustomEvent.FLAT,e.fireOnce);d[b]=f;if(e.onSubscribeCallback){f.subscribeEvent.subscribe(e.onSubscribeCallback);}this.__yui_subscribers=this.__yui_subscribers||{};var a=this.__yui_subscribers[b];if(a){for(var c=0;c<a.length;++c){f.subscribe(a[c].fn,a[c].obj,a[c].overrideContext);}}}return d[b];},fireEvent:function(b){this.__yui_events=this.__yui_events||{};var d=this.__yui_events[b];if(!d){return null;}var a=[];for(var c=1;c<arguments.length;++c){a.push(arguments[c]);}return d.fire.apply(d,a);},hasEvent:function(a){if(this.__yui_events){if(this.__yui_events[a]){return true;}}return false;}};(function(){var a=YAHOO.util.Event,c=YAHOO.lang;YAHOO.util.KeyListener=function(d,i,e,f){if(!d){}else{if(!i){}else{if(!e){}}}if(!f){f=YAHOO.util.KeyListener.KEYDOWN;}var g=new YAHOO.util.CustomEvent(\"keyPressed\");this.enabledEvent=new YAHOO.util.CustomEvent(\"enabled\");this.disabledEvent=new YAHOO.util.CustomEvent(\"disabled\");if(c.isString(d)){d=document.getElementById(d);}if(c.isFunction(e)){g.subscribe(e);}else{g.subscribe(e.fn,e.scope,e.correctScope);}function h(o,n){if(!i.shift){i.shift=false;}if(!i.alt){i.alt=false;}if(!i.ctrl){i.ctrl=false;}if(o.shiftKey==i.shift&&o.altKey==i.alt&&o.ctrlKey==i.ctrl){var j,m=i.keys,l;if(YAHOO.lang.isArray(m)){for(var k=0;k<m.length;k++){j=m[k];l=a.getCharCode(o);if(j==l){g.fire(l,o);break;}}}else{l=a.getCharCode(o);if(m==l){g.fire(l,o);}}}}this.enable=function(){if(!this.enabled){a.on(d,f,h);this.enabledEvent.fire(i);}this.enabled=true;};this.disable=function(){if(this.enabled){a.removeListener(d,f,h);this.disabledEvent.fire(i);}this.enabled=false;};this.toString=function(){return\"KeyListener [\"+i.keys+\"] \"+d.tagName+(d.id?\"[\"+d.id+\"]\":\"\");};};var b=YAHOO.util.KeyListener;b.KEYDOWN=\"keydown\";b.KEYUP=\"keyup\";b.KEY={ALT:18,BACK_SPACE:8,CAPS_LOCK:20,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,META:224,NUM_LOCK:144,PAGE_DOWN:34,PAGE_UP:33,PAUSE:19,PRINTSCREEN:44,RIGHT:39,SCROLL_LOCK:145,SHIFT:16,SPACE:32,TAB:9,UP:38};})();YAHOO.register(\"event\",YAHOO.util.Event,{version:\"2.9.0\",build:\"2800\"});",
                "\\ No newline at end of file",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event.js",
                "deleted file mode 100644",
                "index 3b5c86d7c1..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event.js",
                "+++ /dev/null",
                "@@ -1,2537 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-",
                "-/**",
                "- * The CustomEvent class lets you define events for your application",
                "- * that can be subscribed to by one or more independent component.",
                "- *",
                "- * @param {String}  type The type of event, which is passed to the callback",
                "- *                  when the event fires",
                "- * @param {Object}  context The context the event will fire from.  \"this\" will",
                "- *                  refer to this object in the callback.  Default value:",
                "- *                  the window object.  The listener can override this.",
                "- * @param {boolean} silent pass true to prevent the event from writing to",
                "- *                  the debugsystem",
                "- * @param {int}     signature the signature that the custom event subscriber",
                "- *                  will receive. YAHOO.util.CustomEvent.LIST or",
                "- *                  YAHOO.util.CustomEvent.FLAT.  The default is",
                "- *                  YAHOO.util.CustomEvent.LIST.",
                "- * @param fireOnce {boolean} If configured to fire once, the custom event",
                "- * will only notify subscribers a single time regardless of how many times",
                "- * the event is fired.  In addition, new subscribers will be notified",
                "- * immediately if the event has already been fired.",
                "- * @namespace YAHOO.util",
                "- * @class CustomEvent",
                "- * @constructor",
                "- */",
                "-YAHOO.util.CustomEvent = function(type, context, silent, signature, fireOnce) {",
                "-",
                "-    /**",
                "-     * The type of event, returned to subscribers when the event fires",
                "-     * @property type",
                "-     * @type string",
                "-     */",
                "-    this.type = type;",
                "-",
                "-    /**",
                "-     * The context the event will fire from by default. Defaults to the window obj.",
                "-     * @property scope",
                "-     * @type object",
                "-     */",
                "-    this.scope = context || window;",
                "-",
                "-    /**",
                "-     * By default all custom events are logged in the debug build. Set silent to true",
                "-     * to disable debug output for this event.",
                "-     * @property silent",
                "-     * @type boolean",
                "-     */",
                "-    this.silent = silent;",
                "-",
                "-    /**",
                "-     * If configured to fire once, the custom event will only notify subscribers",
                "-     * a single time regardless of how many times the event is fired.  In addition,",
                "-     * new subscribers will be notified immediately if the event has already been",
                "-     * fired.",
                "-     * @property fireOnce",
                "-     * @type boolean",
                "-     * @default false",
                "-     */",
                "-    this.fireOnce = fireOnce;",
                "-",
                "-    /**",
                "-     * Indicates whether or not this event has ever been fired.",
                "-     * @property fired",
                "-     * @type boolean",
                "-     * @default false",
                "-     */",
                "-    this.fired = false;",
                "-",
                "-    /**",
                "-     * For fireOnce events the arguments the event was fired with are stored",
                "-     * so that new subscribers get the proper payload.",
                "-     * @property firedWith",
                "-     * @type Array",
                "-     */",
                "-    this.firedWith = null;",
                "-",
                "-    /**",
                "-     * Custom events support two styles of arguments provided to the event",
                "-     * subscribers.",
                "-     * <ul>",
                "-     * <li>YAHOO.util.CustomEvent.LIST:",
                "-     *   <ul>",
                "-     *   <li>param1: event name</li>",
                "-     *   <li>param2: array of arguments sent to fire</li>",
                "-     *   <li>param3: <optional> a custom object supplied by the subscriber</li>",
                "-     *   </ul>",
                "-     * </li>",
                "-     * <li>YAHOO.util.CustomEvent.FLAT",
                "-     *   <ul>",
                "-     *   <li>param1: the first argument passed to fire.  If you need to",
                "-     *           pass multiple parameters, use and array or object literal</li>",
                "-     *   <li>param2: <optional> a custom object supplied by the subscriber</li>",
                "-     *   </ul>",
                "-     * </li>",
                "-     * </ul>",
                "-     *   @property signature",
                "-     *   @type int",
                "-     */",
                "-    this.signature = signature || YAHOO.util.CustomEvent.LIST;",
                "-",
                "-    /**",
                "-     * The subscribers to this event",
                "-     * @property subscribers",
                "-     * @type Subscriber[]",
                "-     */",
                "-    this.subscribers = [];",
                "-",
                "-    if (!this.silent) {",
                "-    }",
                "-",
                "-    var onsubscribeType = \"_YUICEOnSubscribe\";",
                "-",
                "-    // Only add subscribe events for events that are not generated by",
                "-    // CustomEvent",
                "-    if (type !== onsubscribeType) {",
                "-",
                "-        /**",
                "-         * Custom events provide a custom event that fires whenever there is",
                "-         * a new subscriber to the event.  This provides an opportunity to",
                "-         * handle the case where there is a non-repeating event that has",
                "-         * already fired has a new subscriber.",
                "-         *",
                "-         * @event subscribeEvent",
                "-         * @type YAHOO.util.CustomEvent",
                "-         * @param fn {Function} The function to execute",
                "-         * @param obj <Object> An object to be passed along when the event fires.",
                "-         * Defaults to the custom event.",
                "-         * @param override <boolean|Object> If true, the obj passed in becomes the",
                "-         * execution context of the listener. If an object, that object becomes",
                "-         * the execution context. Defaults to the custom event.",
                "-         */",
                "-        this.subscribeEvent =",
                "-                new YAHOO.util.CustomEvent(onsubscribeType, this, true);",
                "-",
                "-    }",
                "-",
                "-",
                "-    /**",
                "-     * In order to make it possible to execute the rest of the subscriber",
                "-     * stack when one thows an exception, the subscribers exceptions are",
                "-     * caught.  The most recent exception is stored in this property",
                "-     * @property lastError",
                "-     * @type Error",
                "-     */",
                "-    this.lastError = null;",
                "-};",
                "-",
                "-/**",
                "- * Subscriber listener sigature constant.  The LIST type returns three",
                "- * parameters: the event type, the array of args passed to fire, and",
                "- * the optional custom object",
                "- * @property YAHOO.util.CustomEvent.LIST",
                "- * @static",
                "- * @type int",
                "- */",
                "-YAHOO.util.CustomEvent.LIST = 0;",
                "-",
                "-/**",
                "- * Subscriber listener sigature constant.  The FLAT type returns two",
                "- * parameters: the first argument passed to fire and the optional",
                "- * custom object",
                "- * @property YAHOO.util.CustomEvent.FLAT",
                "- * @static",
                "- * @type int",
                "- */",
                "-YAHOO.util.CustomEvent.FLAT = 1;",
                "-",
                "-YAHOO.util.CustomEvent.prototype = {",
                "-",
                "-    /**",
                "-     * Subscribes the caller to this event",
                "-     * @method subscribe",
                "-     * @param {Function} fn        The function to execute",
                "-     * @param {Object}   obj       An object to be passed along when the event",
                "-     * fires.",
                "-     * @param {boolean|Object} overrideContext If true, the obj passed in",
                "-     * becomes the execution.",
                "-     * context of the listener. If an object, that object becomes the execution",
                "-     * context.",
                "-     */",
                "-    subscribe: function(fn, obj, overrideContext) {",
                "-",
                "-        if (!fn) {",
                "-throw new Error(\"Invalid callback for subscriber to '\" + this.type + \"'\");",
                "-        }",
                "-",
                "-        if (this.subscribeEvent) {",
                "-            this.subscribeEvent.fire(fn, obj, overrideContext);",
                "-        }",
                "-",
                "-        var s = new YAHOO.util.Subscriber(fn, obj, overrideContext);",
                "-",
                "-        if (this.fireOnce && this.fired) {",
                "-            this.notify(s, this.firedWith);",
                "-        } else {",
                "-            this.subscribers.push(s);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Unsubscribes subscribers.",
                "-     * @method unsubscribe",
                "-     * @param {Function} fn  The subscribed function to remove, if not supplied",
                "-     *                       all will be removed",
                "-     * @param {Object}   obj  The custom object passed to subscribe.  This is",
                "-     *                        optional, but if supplied will be used to",
                "-     *                        disambiguate multiple listeners that are the same",
                "-     *                        (e.g., you subscribe many object using a function",
                "-     *                        that lives on the prototype)",
                "-     * @return {boolean} True if the subscriber was found and detached.",
                "-     */",
                "-    unsubscribe: function(fn, obj) {",
                "-",
                "-        if (!fn) {",
                "-            return this.unsubscribeAll();",
                "-        }",
                "-",
                "-        var found = false;",
                "-        for (var i=0, len=this.subscribers.length; i<len; ++i) {",
                "-            var s = this.subscribers[i];",
                "-            if (s && s.contains(fn, obj)) {",
                "-                this._delete(i);",
                "-                found = true;",
                "-            }",
                "-        }",
                "-",
                "-        return found;",
                "-    },",
                "-",
                "-    /**",
                "-     * Notifies the subscribers.  The callback functions will be executed",
                "-     * from the context specified when the event was created, and with the",
                "-     * following parameters:",
                "-     *   <ul>",
                "-     *   <li>The type of event</li>",
                "-     *   <li>All of the arguments fire() was executed with as an array</li>",
                "-     *   <li>The custom object (if any) that was passed into the subscribe()",
                "-     *       method</li>",
                "-     *   </ul>",
                "-     * @method fire",
                "-     * @param {Object*} arguments an arbitrary set of parameters to pass to",
                "-     *                            the handler.",
                "-     * @return {boolean} false if one of the subscribers returned false,",
                "-     *                   true otherwise",
                "-     */",
                "-    fire: function() {",
                "-",
                "-        this.lastError = null;",
                "-",
                "-        var errors = [],",
                "-            len=this.subscribers.length;",
                "-",
                "-",
                "-        var args=[].slice.call(arguments, 0), ret=true, i, rebuild=false;",
                "-",
                "-        if (this.fireOnce) {",
                "-            if (this.fired) {",
                "-                return true;",
                "-            } else {",
                "-                this.firedWith = args;",
                "-            }",
                "-        }",
                "-",
                "-        this.fired = true;",
                "-",
                "-        if (!len && this.silent) {",
                "-            return true;",
                "-        }",
                "-",
                "-        if (!this.silent) {",
                "-        }",
                "-",
                "-        // make a copy of the subscribers so that there are",
                "-        // no index problems if one subscriber removes another.",
                "-        var subs = this.subscribers.slice();",
                "-",
                "-        for (i=0; i<len; ++i) {",
                "-            var s = subs[i];",
                "-            if (!s || !s.fn) {",
                "-                rebuild=true;",
                "-            } else {",
                "-",
                "-                ret = this.notify(s, args);",
                "-",
                "-                if (false === ret) {",
                "-                    if (!this.silent) {",
                "-                    }",
                "-",
                "-                    break;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        return (ret !== false);",
                "-    },",
                "-",
                "-    notify: function(s, args) {",
                "-",
                "-        var ret, param=null, scope = s.getScope(this.scope),",
                "-                 throwErrors = YAHOO.util.Event.throwErrors;",
                "-",
                "-        if (!this.silent) {",
                "-        }",
                "-",
                "-        if (this.signature == YAHOO.util.CustomEvent.FLAT) {",
                "-",
                "-            if (args.length > 0) {",
                "-                param = args[0];",
                "-            }",
                "-",
                "-            try {",
                "-                ret = s.fn.call(scope, param, s.obj);",
                "-            } catch(e) {",
                "-                this.lastError = e;",
                "-                // errors.push(e);",
                "-                if (throwErrors) {",
                "-                    throw e;",
                "-                }",
                "-            }",
                "-        } else {",
                "-            try {",
                "-                ret = s.fn.call(scope, this.type, args, s.obj);",
                "-            } catch(ex) {",
                "-                this.lastError = ex;",
                "-                if (throwErrors) {",
                "-                    throw ex;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        return ret;",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes all listeners",
                "-     * @method unsubscribeAll",
                "-     * @return {int} The number of listeners unsubscribed",
                "-     */",
                "-    unsubscribeAll: function() {",
                "-        var l = this.subscribers.length, i;",
                "-        for (i=l-1; i>-1; i--) {",
                "-            this._delete(i);",
                "-        }",
                "-",
                "-        this.subscribers=[];",
                "-",
                "-        return l;",
                "-    },",
                "-",
                "-    /**",
                "-     * @method _delete",
                "-     * @private",
                "-     */",
                "-    _delete: function(index) {",
                "-        var s = this.subscribers[index];",
                "-        if (s) {",
                "-            delete s.fn;",
                "-            delete s.obj;",
                "-        }",
                "-",
                "-        // this.subscribers[index]=null;",
                "-        this.subscribers.splice(index, 1);",
                "-    },",
                "-",
                "-    /**",
                "-     * @method toString",
                "-     */",
                "-    toString: function() {",
                "-         return \"CustomEvent: \" + \"'\" + this.type  + \"', \" +",
                "-             \"context: \" + this.scope;",
                "-",
                "-    }",
                "-};",
                "-",
                "-/////////////////////////////////////////////////////////////////////",
                "-",
                "-/**",
                "- * Stores the subscriber information to be used when the event fires.",
                "- * @param {Function} fn       The function to execute",
                "- * @param {Object}   obj      An object to be passed along when the event fires",
                "- * @param {boolean}  overrideContext If true, the obj passed in becomes the execution",
                "- *                            context of the listener",
                "- * @class Subscriber",
                "- * @constructor",
                "- */",
                "-YAHOO.util.Subscriber = function(fn, obj, overrideContext) {",
                "-",
                "-    /**",
                "-     * The callback that will be execute when the event fires",
                "-     * @property fn",
                "-     * @type function",
                "-     */",
                "-    this.fn = fn;",
                "-",
                "-    /**",
                "-     * An optional custom object that will passed to the callback when",
                "-     * the event fires",
                "-     * @property obj",
                "-     * @type object",
                "-     */",
                "-    this.obj = YAHOO.lang.isUndefined(obj) ? null : obj;",
                "-",
                "-    /**",
                "-     * The default execution context for the event listener is defined when the",
                "-     * event is created (usually the object which contains the event).",
                "-     * By setting overrideContext to true, the execution context becomes the custom",
                "-     * object passed in by the subscriber.  If overrideContext is an object, that",
                "-     * object becomes the context.",
                "-     * @property overrideContext",
                "-     * @type boolean|object",
                "-     */",
                "-    this.overrideContext = overrideContext;",
                "-",
                "-};",
                "-",
                "-/**",
                "- * Returns the execution context for this listener.  If overrideContext was set to true",
                "- * the custom obj will be the context.  If overrideContext is an object, that is the",
                "- * context, otherwise the default context will be used.",
                "- * @method getScope",
                "- * @param {Object} defaultScope the context to use if this listener does not",
                "- *                              override it.",
                "- */",
                "-YAHOO.util.Subscriber.prototype.getScope = function(defaultScope) {",
                "-    if (this.overrideContext) {",
                "-        if (this.overrideContext === true) {",
                "-            return this.obj;",
                "-        } else {",
                "-            return this.overrideContext;",
                "-        }",
                "-    }",
                "-    return defaultScope;",
                "-};",
                "-",
                "-/**",
                "- * Returns true if the fn and obj match this objects properties.",
                "- * Used by the unsubscribe method to match the right subscriber.",
                "- *",
                "- * @method contains",
                "- * @param {Function} fn the function to execute",
                "- * @param {Object} obj an object to be passed along when the event fires",
                "- * @return {boolean} true if the supplied arguments match this",
                "- *                   subscriber's signature.",
                "- */",
                "-YAHOO.util.Subscriber.prototype.contains = function(fn, obj) {",
                "-    if (obj) {",
                "-        return (this.fn == fn && this.obj == obj);",
                "-    } else {",
                "-        return (this.fn == fn);",
                "-    }",
                "-};",
                "-",
                "-/**",
                "- * @method toString",
                "- */",
                "-YAHOO.util.Subscriber.prototype.toString = function() {",
                "-    return \"Subscriber { obj: \" + this.obj  +",
                "-           \", overrideContext: \" +  (this.overrideContext || \"no\") + \" }\";",
                "-};",
                "-",
                "-/**",
                "- * The Event Utility provides utilities for managing DOM Events and tools",
                "- * for building event systems",
                "- *",
                "- * @module event",
                "- * @title Event Utility",
                "- * @namespace YAHOO.util",
                "- * @requires yahoo",
                "- */",
                "-",
                "-// The first instance of Event will win if it is loaded more than once.",
                "-// @TODO this needs to be changed so that only the state data that needs to",
                "-// be preserved is kept, while methods are overwritten/added as needed.",
                "-// This means that the module pattern can't be used.",
                "-if (!YAHOO.util.Event) {",
                "-",
                "-/**",
                "- * The event utility provides functions to add and remove event listeners,",
                "- * event cleansing.  It also tries to automatically remove listeners it",
                "- * registers during the unload event.",
                "- *",
                "- * @class Event",
                "- * @static",
                "- */",
                "-    YAHOO.util.Event = function() {",
                "-",
                "-        /**",
                "-         * True after the onload event has fired",
                "-         * @property loadComplete",
                "-         * @type boolean",
                "-         * @static",
                "-         * @private",
                "-         */",
                "-        var loadComplete =  false,",
                "-",
                "-        /**",
                "-         * Cache of wrapped listeners",
                "-         * @property listeners",
                "-         * @type array",
                "-         * @static",
                "-         * @private",
                "-         */",
                "-        listeners = [],",
                "-",
                "-",
                "-        /**",
                "-         * User-defined unload function that will be fired before all events",
                "-         * are detached",
                "-         * @property unloadListeners",
                "-         * @type array",
                "-         * @static",
                "-         * @private",
                "-         */",
                "-        unloadListeners = [],",
                "-",
                "-        /**",
                "-         * The number of times to poll after window.onload.  This number is",
                "-         * increased if additional late-bound handlers are requested after",
                "-         * the page load.",
                "-         * @property retryCount",
                "-         * @static",
                "-         * @private",
                "-         */",
                "-        retryCount = 0,",
                "-",
                "-        /**",
                "-         * onAvailable listeners",
                "-         * @property onAvailStack",
                "-         * @static",
                "-         * @private",
                "-         */",
                "-        onAvailStack = [],",
                "-",
                "-        /**",
                "-         * Counter for auto id generation",
                "-         * @property counter",
                "-         * @static",
                "-         * @private",
                "-         */",
                "-        counter = 0,",
                "-",
                "-        /**",
                "-         * Normalized keycodes for webkit/safari",
                "-         * @property webkitKeymap",
                "-         * @type {int: int}",
                "-         * @private",
                "-         * @static",
                "-         * @final",
                "-         */",
                "-         webkitKeymap = {",
                "-            63232: 38, // up",
                "-            63233: 40, // down",
                "-            63234: 37, // left",
                "-            63235: 39, // right",
                "-            63276: 33, // page up",
                "-            63277: 34, // page down",
                "-            25: 9      // SHIFT-TAB (Safari provides a different key code in",
                "-                       // this case, even though the shiftKey modifier is set)",
                "-        },",
                "-",
                "-        isIE = YAHOO.env.ua.ie,",
                "-",
                "-        // String constants used by the addFocusListener and removeFocusListener methods",
                "-",
                "-        FOCUSIN = \"focusin\",",
                "-        FOCUSOUT = \"focusout\";",
                "-",
                "-        return {",
                "-",
                "-            /**",
                "-             * The number of times we should look for elements that are not",
                "-             * in the DOM at the time the event is requested after the document",
                "-             * has been loaded.  The default is 500@amp;40 ms, so it will poll",
                "-             * for 20 seconds or until all outstanding handlers are bound",
                "-             * (whichever comes first).",
                "-             * @property POLL_RETRYS",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            POLL_RETRYS: 500,",
                "-",
                "-            /**",
                "-             * The poll interval in milliseconds",
                "-             * @property POLL_INTERVAL",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            POLL_INTERVAL: 40,",
                "-",
                "-            /**",
                "-             * Element to bind, int constant",
                "-             * @property EL",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            EL: 0,",
                "-",
                "-            /**",
                "-             * Type of event, int constant",
                "-             * @property TYPE",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            TYPE: 1,",
                "-",
                "-            /**",
                "-             * Function to execute, int constant",
                "-             * @property FN",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            FN: 2,",
                "-",
                "-            /**",
                "-             * Function wrapped for context correction and cleanup, int constant",
                "-             * @property WFN",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            WFN: 3,",
                "-",
                "-            /**",
                "-             * Object passed in by the user that will be returned as a",
                "-             * parameter to the callback, int constant.  Specific to",
                "-             * unload listeners",
                "-             * @property OBJ",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            UNLOAD_OBJ: 3,",
                "-",
                "-            /**",
                "-             * Adjusted context, either the element we are registering the event",
                "-             * on or the custom object passed in by the listener, int constant",
                "-             * @property ADJ_SCOPE",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            ADJ_SCOPE: 4,",
                "-",
                "-            /**",
                "-             * The original obj passed into addListener",
                "-             * @property OBJ",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            OBJ: 5,",
                "-",
                "-            /**",
                "-             * The original context parameter passed into addListener",
                "-             * @property OVERRIDE",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            OVERRIDE: 6,",
                "-",
                "-            /**",
                "-             * The original capture parameter passed into addListener",
                "-             * @property CAPTURE",
                "-             * @type int",
                "-             * @static",
                "-             * @final",
                "-             */",
                "-            CAPTURE: 7,",
                "-",
                "-            /**",
                "-             * addListener/removeListener can throw errors in unexpected scenarios.",
                "-             * These errors are suppressed, the method returns false, and this property",
                "-             * is set",
                "-             * @property lastError",
                "-             * @static",
                "-             * @type Error",
                "-             */",
                "-            lastError: null,",
                "-",
                "-            /**",
                "-             * Safari detection",
                "-             * @property isSafari",
                "-             * @private",
                "-             * @static",
                "-             * @deprecated use YAHOO.env.ua.webkit",
                "-             */",
                "-            isSafari: YAHOO.env.ua.webkit,",
                "-",
                "-            /**",
                "-             * webkit version",
                "-             * @property webkit",
                "-             * @type string",
                "-             * @private",
                "-             * @static",
                "-             * @deprecated use YAHOO.env.ua.webkit",
                "-             */",
                "-            webkit: YAHOO.env.ua.webkit,",
                "-",
                "-            /**",
                "-             * IE detection",
                "-             * @property isIE",
                "-             * @private",
                "-             * @static",
                "-             * @deprecated use YAHOO.env.ua.ie",
                "-             */",
                "-            isIE: isIE,",
                "-",
                "-            /**",
                "-             * poll handle",
                "-             * @property _interval",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _interval: null,",
                "-",
                "-            /**",
                "-             * document readystate poll handle",
                "-             * @property _dri",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-             _dri: null,",
                "-",
                "-",
                "-            /**",
                "-             * Map of special event types",
                "-             * @property _specialTypes",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _specialTypes: {",
                "-                focusin: (isIE ? \"focusin\" : \"focus\"),",
                "-                focusout: (isIE ? \"focusout\" : \"blur\")",
                "-            },",
                "-",
                "-",
                "-            /**",
                "-             * True when the document is initially usable",
                "-             * @property DOMReady",
                "-             * @type boolean",
                "-             * @static",
                "-             */",
                "-            DOMReady: false,",
                "-",
                "-            /**",
                "-             * Errors thrown by subscribers of custom events are caught",
                "-             * and the error message is written to the debug console.  If",
                "-             * this property is set to true, it will also re-throw the",
                "-             * error.",
                "-             * @property throwErrors",
                "-             * @type boolean",
                "-             * @default false",
                "-             */",
                "-            throwErrors: false,",
                "-",
                "-",
                "-            /**",
                "-             * @method startInterval",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            startInterval: function() {",
                "-                if (!this._interval) {",
                "-                    // var self = this;",
                "-                    // var callback = function() { self._tryPreloadAttach(); };",
                "-                    // this._interval = setInterval(callback, this.POLL_INTERVAL);",
                "-                    this._interval = YAHOO.lang.later(this.POLL_INTERVAL, this, this._tryPreloadAttach, null, true);",
                "-                }",
                "-            },",
                "-",
                "-            /**",
                "-             * Executes the supplied callback when the item with the supplied",
                "-             * id is found.  This is meant to be used to execute behavior as",
                "-             * soon as possible as the page loads.  If you use this after the",
                "-             * initial page load it will poll for a fixed time for the element.",
                "-             * The number of times it will poll and the frequency are",
                "-             * configurable.  By default it will poll for 10 seconds.",
                "-             *",
                "-             * <p>The callback is executed with a single parameter:",
                "-             * the custom object parameter, if provided.</p>",
                "-             *",
                "-             * @method onAvailable",
                "-             *",
                "-             * @param {string||string[]}   id the id of the element, or an array",
                "-             * of ids to look for.",
                "-             * @param {function} fn what to execute when the element is found.",
                "-             * @param {object}   obj an optional object to be passed back as",
                "-             *                   a parameter to fn.",
                "-             * @param {boolean|object}  overrideContext If set to true, fn will execute",
                "-             *                   in the context of obj, if set to an object it",
                "-             *                   will execute in the context of that object",
                "-             * @param checkContent {boolean} check child node readiness (onContentReady)",
                "-             * @static",
                "-             */",
                "-            onAvailable: function(id, fn, obj, overrideContext, checkContent) {",
                "-",
                "-                var a = (YAHOO.lang.isString(id)) ? [id] : id;",
                "-",
                "-                for (var i=0; i<a.length; i=i+1) {",
                "-                    onAvailStack.push({id:         a[i],",
                "-                                       fn:         fn,",
                "-                                       obj:        obj,",
                "-                                       overrideContext:   overrideContext,",
                "-                                       checkReady: checkContent });",
                "-                }",
                "-",
                "-                retryCount = this.POLL_RETRYS;",
                "-",
                "-                this.startInterval();",
                "-            },",
                "-",
                "-            /**",
                "-             * Works the same way as onAvailable, but additionally checks the",
                "-             * state of sibling elements to determine if the content of the",
                "-             * available element is safe to modify.",
                "-             *",
                "-             * <p>The callback is executed with a single parameter:",
                "-             * the custom object parameter, if provided.</p>",
                "-             *",
                "-             * @method onContentReady",
                "-             *",
                "-             * @param {string}   id the id of the element to look for.",
                "-             * @param {function} fn what to execute when the element is ready.",
                "-             * @param {object}   obj an optional object to be passed back as",
                "-             *                   a parameter to fn.",
                "-             * @param {boolean|object}  overrideContext If set to true, fn will execute",
                "-             *                   in the context of obj.  If an object, fn will",
                "-             *                   exectute in the context of that object",
                "-             *",
                "-             * @static",
                "-             */",
                "-            onContentReady: function(id, fn, obj, overrideContext) {",
                "-                this.onAvailable(id, fn, obj, overrideContext, true);",
                "-            },",
                "-",
                "-            /**",
                "-             * Executes the supplied callback when the DOM is first usable.  This",
                "-             * will execute immediately if called after the DOMReady event has",
                "-             * fired.   @todo the DOMContentReady event does not fire when the",
                "-             * script is dynamically injected into the page.  This means the",
                "-             * DOMReady custom event will never fire in FireFox or Opera when the",
                "-             * library is injected.  It _will_ fire in Safari, and the IE",
                "-             * implementation would allow for us to fire it if the defered script",
                "-             * is not available.  We want this to behave the same in all browsers.",
                "-             * Is there a way to identify when the script has been injected",
                "-             * instead of included inline?  Is there a way to know whether the",
                "-             * window onload event has fired without having had a listener attached",
                "-             * to it when it did so?",
                "-             *",
                "-             * <p>The callback is a CustomEvent, so the signature is:</p>",
                "-             * <p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;</p>",
                "-             * <p>For DOMReady events, there are no fire argments, so the",
                "-             * signature is:</p>",
                "-             * <p>\"DOMReady\", [], obj</p>",
                "-             *",
                "-             *",
                "-             * @method onDOMReady",
                "-             *",
                "-             * @param {function} fn what to execute when the element is found.",
                "-             * @param {object}   obj an optional object to be passed back as",
                "-             *                   a parameter to fn.",
                "-             * @param {boolean|object}  overrideContext If set to true, fn will execute",
                "-             *                   in the context of obj, if set to an object it",
                "-             *                   will execute in the context of that object",
                "-             *",
                "-             * @static",
                "-             */",
                "-            // onDOMReady: function(fn, obj, overrideContext) {",
                "-            onDOMReady: function() {",
                "-                this.DOMReadyEvent.subscribe.apply(this.DOMReadyEvent, arguments);",
                "-            },",
                "-",
                "-",
                "-            /**",
                "-             * Appends an event handler",
                "-             *",
                "-             * @method _addListener",
                "-             *",
                "-             * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-             *  reference, or a collection of ids and/or elements to assign the",
                "-             *  listener to.",
                "-             * @param {String}   sType     The type of event to append",
                "-             * @param {Function} fn        The method the event invokes",
                "-             * @param {Object}   obj    An arbitrary object that will be",
                "-             *                             passed as a parameter to the handler",
                "-             * @param {Boolean|object}  overrideContext  If true, the obj passed in becomes",
                "-             *                             the execution context of the listener. If an",
                "-             *                             object, this object becomes the execution",
                "-             *                             context.",
                "-             * @param {boolen}      capture capture or bubble phase",
                "-             * @return {Boolean} True if the action was successful or defered,",
                "-             *                        false if one or more of the elements",
                "-             *                        could not have the listener attached,",
                "-             *                        or if the operation throws an exception.",
                "-             * @private",
                "-             * @static",
                "-             */",
                "-            _addListener: function(el, sType, fn, obj, overrideContext, bCapture) {",
                "-",
                "-                if (!fn || !fn.call) {",
                "-                    return false;",
                "-                }",
                "-",
                "-                // The el argument can be an array of elements or element ids.",
                "-                if ( this._isValidCollection(el)) {",
                "-                    var ok = true;",
                "-                    for (var i=0,len=el.length; i<len; ++i) {",
                "-                        ok = this.on(el[i],",
                "-                                       sType,",
                "-                                       fn,",
                "-                                       obj,",
                "-                                       overrideContext) && ok;",
                "-                    }",
                "-                    return ok;",
                "-",
                "-                } else if (YAHOO.lang.isString(el)) {",
                "-                    var oEl = this.getEl(el);",
                "-                    // If the el argument is a string, we assume it is",
                "-                    // actually the id of the element.  If the page is loaded",
                "-                    // we convert el to the actual element, otherwise we",
                "-                    // defer attaching the event until onload event fires",
                "-",
                "-                    // check to see if we need to delay hooking up the event",
                "-                    // until after the page loads.",
                "-                    if (oEl) {",
                "-                        el = oEl;",
                "-                    } else {",
                "-                        // defer adding the event until the element is available",
                "-                        this.onAvailable(el, function() {",
                "-                           YAHOO.util.Event._addListener(el, sType, fn, obj, overrideContext, bCapture);",
                "-                        });",
                "-",
                "-                        return true;",
                "-                    }",
                "-                }",
                "-",
                "-                // Element should be an html element or an array if we get",
                "-                // here.",
                "-                if (!el) {",
                "-                    return false;",
                "-                }",
                "-",
                "-                // we need to make sure we fire registered unload events",
                "-                // prior to automatically unhooking them.  So we hang on to",
                "-                // these instead of attaching them to the window and fire the",
                "-                // handles explicitly during our one unload event.",
                "-                if (\"unload\" == sType && obj !== this) {",
                "-                    unloadListeners[unloadListeners.length] =",
                "-                            [el, sType, fn, obj, overrideContext];",
                "-                    return true;",
                "-                }",
                "-",
                "-",
                "-                // if the user chooses to override the context, we use the custom",
                "-                // object passed in, otherwise the executing context will be the",
                "-                // HTML element that the event is registered on",
                "-                var context = el;",
                "-                if (overrideContext) {",
                "-                    if (overrideContext === true) {",
                "-                        context = obj;",
                "-                    } else {",
                "-                        context = overrideContext;",
                "-                    }",
                "-                }",
                "-",
                "-                // wrap the function so we can return the obj object when",
                "-                // the event fires;",
                "-                var wrappedFn = function(e) {",
                "-                        return fn.call(context, YAHOO.util.Event.getEvent(e, el),",
                "-                                obj);",
                "-                    };",
                "-",
                "-                var li = [el, sType, fn, wrappedFn, context, obj, overrideContext, bCapture];",
                "-                var index = listeners.length;",
                "-                // cache the listener so we can try to automatically unload",
                "-                listeners[index] = li;",
                "-",
                "-                try {",
                "-                    this._simpleAdd(el, sType, wrappedFn, bCapture);",
                "-                } catch(ex) {",
                "-                    // handle an error trying to attach an event.  If it fails",
                "-                    // we need to clean up the cache",
                "-                    this.lastError = ex;",
                "-                    this.removeListener(el, sType, fn);",
                "-                    return false;",
                "-                }",
                "-",
                "-                return true;",
                "-",
                "-            },",
                "-",
                "-            /**",
                "-             * Checks to see if the type requested is a special type",
                "-             * (as defined by the _specialTypes hash), and (if so) returns",
                "-             * the special type name.",
                "-             *",
                "-             * @method _getType",
                "-             *",
                "-             * @param {String}   sType     The type to look up",
                "-             * @private",
                "-             */",
                "-            _getType: function (type) {",
                "-",
                "-                return this._specialTypes[type] || type;",
                "-",
                "-            },",
                "-",
                "-",
                "-            /**",
                "-             * Appends an event handler",
                "-             *",
                "-             * @method addListener",
                "-             *",
                "-             * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-             *  reference, or a collection of ids and/or elements to assign the",
                "-             *  listener to.",
                "-             * @param {String}   sType     The type of event to append",
                "-             * @param {Function} fn        The method the event invokes",
                "-             * @param {Object}   obj    An arbitrary object that will be",
                "-             *                             passed as a parameter to the handler",
                "-             * @param {Boolean|object}  overrideContext  If true, the obj passed in becomes",
                "-             *                             the execution context of the listener. If an",
                "-             *                             object, this object becomes the execution",
                "-             *                             context.",
                "-             * @return {Boolean} True if the action was successful or defered,",
                "-             *                        false if one or more of the elements",
                "-             *                        could not have the listener attached,",
                "-             *                        or if the operation throws an exception.",
                "-             * @static",
                "-             */",
                "-            addListener: function (el, sType, fn, obj, overrideContext) {",
                "-",
                "-                var capture = ((sType == FOCUSIN || sType == FOCUSOUT) && !YAHOO.env.ua.ie) ? true : false;",
                "-",
                "-                return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);",
                "-",
                "-            },",
                "-",
                "-",
                "-            /**",
                "-             * Attaches a focusin event listener to the specified element for",
                "-             * the purpose of listening for the focus event on the element's",
                "-             * descendants.",
                "-             * @method addFocusListener",
                "-             *",
                "-             * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-             *  reference, or a collection of ids and/or elements to assign the",
                "-             *  listener to.",
                "-             * @param {Function} fn        The method the event invokes",
                "-             * @param {Object}   obj    An arbitrary object that will be",
                "-             *                             passed as a parameter to the handler",
                "-             * @param {Boolean|object}  overrideContext  If true, the obj passed in becomes",
                "-             *                             the execution context of the listener. If an",
                "-             *                             object, this object becomes the execution",
                "-             *                             context.",
                "-             * @return {Boolean} True if the action was successful or defered,",
                "-             *                        false if one or more of the elements",
                "-             *                        could not have the listener attached,",
                "-             *                        or if the operation throws an exception.",
                "-             * @static",
                "-            * @deprecated use YAHOO.util.Event.on and specify \"focusin\" as the event type.",
                "-             */",
                "-            addFocusListener: function (el, fn, obj, overrideContext) {",
                "-                return this.on(el, FOCUSIN, fn, obj, overrideContext);",
                "-            },",
                "-",
                "-",
                "-            /**",
                "-             * Removes a focusin event listener to the specified element for",
                "-             * the purpose of listening for the focus event on the element's",
                "-             * descendants.",
                "-             *",
                "-             * @method removeFocusListener",
                "-             *",
                "-             * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-             *  reference, or a collection of ids and/or elements to remove",
                "-             *  the listener from.",
                "-             * @param {Function} fn the method the event invokes.  If fn is",
                "-             *  undefined, then all event handlers for the type of event are",
                "-             *  removed.",
                "-             * @return {boolean} true if the unbind was successful, false",
                "-             *  otherwise.",
                "-             * @static",
                "-             * @deprecated use YAHOO.util.Event.removeListener and specify \"focusin\" as the event type.",
                "-             */",
                "-            removeFocusListener: function (el, fn) {",
                "-                return this.removeListener(el, FOCUSIN, fn);",
                "-            },",
                "-",
                "-            /**",
                "-             * Attaches a focusout event listener to the specified element for",
                "-             * the purpose of listening for the blur event on the element's",
                "-             * descendants.",
                "-             *",
                "-             * @method addBlurListener",
                "-             *",
                "-             * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-             *  reference, or a collection of ids and/or elements to assign the",
                "-             *  listener to.",
                "-             * @param {Function} fn        The method the event invokes",
                "-             * @param {Object}   obj    An arbitrary object that will be",
                "-             *                             passed as a parameter to the handler",
                "-             * @param {Boolean|object}  overrideContext  If true, the obj passed in becomes",
                "-             *                             the execution context of the listener. If an",
                "-             *                             object, this object becomes the execution",
                "-             *                             context.",
                "-             * @return {Boolean} True if the action was successful or defered,",
                "-             *                        false if one or more of the elements",
                "-             *                        could not have the listener attached,",
                "-             *                        or if the operation throws an exception.",
                "-             * @static",
                "-             * @deprecated use YAHOO.util.Event.on and specify \"focusout\" as the event type.",
                "-             */",
                "-            addBlurListener: function (el, fn, obj, overrideContext) {",
                "-                return this.on(el, FOCUSOUT, fn, obj, overrideContext);",
                "-            },",
                "-",
                "-            /**",
                "-             * Removes a focusout event listener to the specified element for",
                "-             * the purpose of listening for the blur event on the element's",
                "-             * descendants.",
                "-             *",
                "-             * @method removeBlurListener",
                "-             *",
                "-             * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-             *  reference, or a collection of ids and/or elements to remove",
                "-             *  the listener from.",
                "-             * @param {Function} fn the method the event invokes.  If fn is",
                "-             *  undefined, then all event handlers for the type of event are",
                "-             *  removed.",
                "-             * @return {boolean} true if the unbind was successful, false",
                "-             *  otherwise.",
                "-             * @static",
                "-             * @deprecated use YAHOO.util.Event.removeListener and specify \"focusout\" as the event type.",
                "-             */",
                "-            removeBlurListener: function (el, fn) {",
                "-                return this.removeListener(el, FOCUSOUT, fn);",
                "-            },",
                "-",
                "-            /**",
                "-             * Removes an event listener",
                "-             *",
                "-             * @method removeListener",
                "-             *",
                "-             * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-             *  reference, or a collection of ids and/or elements to remove",
                "-             *  the listener from.",
                "-             * @param {String} sType the type of event to remove.",
                "-             * @param {Function} fn the method the event invokes.  If fn is",
                "-             *  undefined, then all event handlers for the type of event are",
                "-             *  removed.",
                "-             * @return {boolean} true if the unbind was successful, false",
                "-             *  otherwise.",
                "-             * @static",
                "-             */",
                "-            removeListener: function(el, sType, fn) {",
                "-                var i, len, li;",
                "-",
                "-                sType = this._getType(sType);",
                "-",
                "-                // The el argument can be a string",
                "-                if (typeof el == \"string\") {",
                "-                    el = this.getEl(el);",
                "-                // The el argument can be an array of elements or element ids.",
                "-                } else if ( this._isValidCollection(el)) {",
                "-                    var ok = true;",
                "-                    for (i=el.length-1; i>-1; i--) {",
                "-                        ok = ( this.removeListener(el[i], sType, fn) && ok );",
                "-                    }",
                "-                    return ok;",
                "-                }",
                "-",
                "-                if (!fn || !fn.call) {",
                "-                    //return false;",
                "-                    return this.purgeElement(el, false, sType);",
                "-                }",
                "-",
                "-                if (\"unload\" == sType) {",
                "-",
                "-                    for (i=unloadListeners.length-1; i>-1; i--) {",
                "-                        li = unloadListeners[i];",
                "-                        if (li &&",
                "-                            li[0] == el &&",
                "-                            li[1] == sType &&",
                "-                            li[2] == fn) {",
                "-                                unloadListeners.splice(i, 1);",
                "-                                // unloadListeners[i]=null;",
                "-                                return true;",
                "-                        }",
                "-                    }",
                "-",
                "-                    return false;",
                "-                }",
                "-",
                "-                var cacheItem = null;",
                "-",
                "-                // The index is a hidden parameter; needed to remove it from",
                "-                // the method signature because it was tempting users to",
                "-                // try and take advantage of it, which is not possible.",
                "-                var index = arguments[3];",
                "-",
                "-                if (\"undefined\" === typeof index) {",
                "-                    index = this._getCacheIndex(listeners, el, sType, fn);",
                "-                }",
                "-",
                "-                if (index >= 0) {",
                "-                    cacheItem = listeners[index];",
                "-                }",
                "-",
                "-                if (!el || !cacheItem) {",
                "-                    return false;",
                "-                }",
                "-",
                "-",
                "-                var bCapture = cacheItem[this.CAPTURE] === true ? true : false;",
                "-",
                "-                try {",
                "-                    this._simpleRemove(el, sType, cacheItem[this.WFN], bCapture);",
                "-                } catch(ex) {",
                "-                    this.lastError = ex;",
                "-                    return false;",
                "-                }",
                "-",
                "-                // removed the wrapped handler",
                "-                delete listeners[index][this.WFN];",
                "-                delete listeners[index][this.FN];",
                "-                listeners.splice(index, 1);",
                "-                // listeners[index]=null;",
                "-",
                "-                return true;",
                "-",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the event's target element.  Safari sometimes provides",
                "-             * a text node, and this is automatically resolved to the text",
                "-             * node's parent so that it behaves like other browsers.",
                "-             * @method getTarget",
                "-             * @param {Event} ev the event",
                "-             * @param {boolean} resolveTextNode when set to true the target's",
                "-             *                  parent will be returned if the target is a",
                "-             *                  text node.  @deprecated, the text node is",
                "-             *                  now resolved automatically",
                "-             * @return {HTMLElement} the event's target",
                "-             * @static",
                "-             */",
                "-            getTarget: function(ev, resolveTextNode) {",
                "-                var t = ev.target || ev.srcElement;",
                "-                return this.resolveTextNode(t);",
                "-            },",
                "-",
                "-            /**",
                "-             * In some cases, some browsers will return a text node inside",
                "-             * the actual element that was targeted.  This normalizes the",
                "-             * return value for getTarget and getRelatedTarget.",
                "-             *",
                "-             * If accessing a property of the node throws an error, this is",
                "-             * probably the anonymous div wrapper Gecko adds inside text",
                "-             * nodes.  This likely will only occur when attempting to access",
                "-             * the relatedTarget.  In this case, we now return null because",
                "-             * the anonymous div is completely useless and we do not know",
                "-             * what the related target was because we can't even get to",
                "-             * the element's parent node.",
                "-             *",
                "-             * @method resolveTextNode",
                "-             * @param {HTMLElement} node node to resolve",
                "-             * @return {HTMLElement} the normized node",
                "-             * @static",
                "-             */",
                "-            resolveTextNode: function(n) {",
                "-                try {",
                "-                    if (n && 3 == n.nodeType) {",
                "-                        return n.parentNode;",
                "-                    }",
                "-                } catch(e) {",
                "-                    return null;",
                "-                }",
                "-",
                "-                return n;",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the event's pageX",
                "-             * @method getPageX",
                "-             * @param {Event} ev the event",
                "-             * @return {int} the event's pageX",
                "-             * @static",
                "-             */",
                "-            getPageX: function(ev) {",
                "-                var x = ev.pageX;",
                "-                if (!x && 0 !== x) {",
                "-                    x = ev.clientX || 0;",
                "-",
                "-                    if ( this.isIE ) {",
                "-                        x += this._getScrollLeft();",
                "-                    }",
                "-                }",
                "-",
                "-                return x;",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the event's pageY",
                "-             * @method getPageY",
                "-             * @param {Event} ev the event",
                "-             * @return {int} the event's pageY",
                "-             * @static",
                "-             */",
                "-            getPageY: function(ev) {",
                "-                var y = ev.pageY;",
                "-                if (!y && 0 !== y) {",
                "-                    y = ev.clientY || 0;",
                "-",
                "-                    if ( this.isIE ) {",
                "-                        y += this._getScrollTop();",
                "-                    }",
                "-                }",
                "-",
                "-",
                "-                return y;",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the pageX and pageY properties as an indexed array.",
                "-             * @method getXY",
                "-             * @param {Event} ev the event",
                "-             * @return {[x, y]} the pageX and pageY properties of the event",
                "-             * @static",
                "-             */",
                "-            getXY: function(ev) {",
                "-                return [this.getPageX(ev), this.getPageY(ev)];",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the event's related target",
                "-             * @method getRelatedTarget",
                "-             * @param {Event} ev the event",
                "-             * @return {HTMLElement} the event's relatedTarget",
                "-             * @static",
                "-             */",
                "-            getRelatedTarget: function(ev) {",
                "-                var t = ev.relatedTarget;",
                "-                if (!t) {",
                "-                    if (ev.type == \"mouseout\") {",
                "-                        t = ev.toElement;",
                "-                    } else if (ev.type == \"mouseover\") {",
                "-                        t = ev.fromElement;",
                "-                    }",
                "-                }",
                "-",
                "-                return this.resolveTextNode(t);",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the time of the event.  If the time is not included, the",
                "-             * event is modified using the current time.",
                "-             * @method getTime",
                "-             * @param {Event} ev the event",
                "-             * @return {Date} the time of the event",
                "-             * @static",
                "-             */",
                "-            getTime: function(ev) {",
                "-                if (!ev.time) {",
                "-                    var t = new Date().getTime();",
                "-                    try {",
                "-                        ev.time = t;",
                "-                    } catch(ex) {",
                "-                        this.lastError = ex;",
                "-                        return t;",
                "-                    }",
                "-                }",
                "-",
                "-                return ev.time;",
                "-            },",
                "-",
                "-            /**",
                "-             * Convenience method for stopPropagation + preventDefault",
                "-             * @method stopEvent",
                "-             * @param {Event} ev the event",
                "-             * @static",
                "-             */",
                "-            stopEvent: function(ev) {",
                "-                this.stopPropagation(ev);",
                "-                this.preventDefault(ev);",
                "-            },",
                "-",
                "-            /**",
                "-             * Stops event propagation",
                "-             * @method stopPropagation",
                "-             * @param {Event} ev the event",
                "-             * @static",
                "-             */",
                "-            stopPropagation: function(ev) {",
                "-                if (ev.stopPropagation) {",
                "-                    ev.stopPropagation();",
                "-                } else {",
                "-                    ev.cancelBubble = true;",
                "-                }",
                "-            },",
                "-",
                "-            /**",
                "-             * Prevents the default behavior of the event",
                "-             * @method preventDefault",
                "-             * @param {Event} ev the event",
                "-             * @static",
                "-             */",
                "-            preventDefault: function(ev) {",
                "-                if (ev.preventDefault) {",
                "-                    ev.preventDefault();",
                "-                } else {",
                "-                    ev.returnValue = false;",
                "-                }",
                "-            },",
                "-",
                "-            /**",
                "-             * Finds the event in the window object, the caller's arguments, or",
                "-             * in the arguments of another method in the callstack.  This is",
                "-             * executed automatically for events registered through the event",
                "-             * manager, so the implementer should not normally need to execute",
                "-             * this function at all.",
                "-             * @method getEvent",
                "-             * @param {Event} e the event parameter from the handler",
                "-             * @param {HTMLElement} boundEl the element the listener is attached to",
                "-             * @return {Event} the event",
                "-             * @static",
                "-             */",
                "-            getEvent: function(e, boundEl) {",
                "-                var ev = e || window.event;",
                "-",
                "-                if (!ev) {",
                "-                    var c = this.getEvent.caller;",
                "-                    while (c) {",
                "-                        ev = c.arguments[0];",
                "-                        if (ev && Event == ev.constructor) {",
                "-                            break;",
                "-                        }",
                "-                        c = c.caller;",
                "-                    }",
                "-                }",
                "-",
                "-                return ev;",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the charcode for an event",
                "-             * @method getCharCode",
                "-             * @param {Event} ev the event",
                "-             * @return {int} the event's charCode",
                "-             * @static",
                "-             */",
                "-            getCharCode: function(ev) {",
                "-                var code = ev.keyCode || ev.charCode || 0;",
                "-",
                "-                // webkit key normalization",
                "-                if (YAHOO.env.ua.webkit && (code in webkitKeymap)) {",
                "-                    code = webkitKeymap[code];",
                "-                }",
                "-                return code;",
                "-            },",
                "-",
                "-            /**",
                "-             * Locating the saved event handler data by function ref",
                "-             *",
                "-             * @method _getCacheIndex",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _getCacheIndex: function(a, el, sType, fn) {",
                "-                for (var i=0, l=a.length; i<l; i=i+1) {",
                "-                    var li = a[i];",
                "-                    if ( li                 &&",
                "-                         li[this.FN] == fn  &&",
                "-                         li[this.EL] == el  &&",
                "-                         li[this.TYPE] == sType ) {",
                "-                        return i;",
                "-                    }",
                "-                }",
                "-",
                "-                return -1;",
                "-            },",
                "-",
                "-            /**",
                "-             * Generates an unique ID for the element if it does not already",
                "-             * have one.",
                "-             * @method generateId",
                "-             * @param el the element to create the id for",
                "-             * @return {string} the resulting id of the element",
                "-             * @static",
                "-             */",
                "-            generateId: function(el) {",
                "-                var id = el.id;",
                "-",
                "-                if (!id) {",
                "-                    id = \"yuievtautoid-\" + counter;",
                "-                    ++counter;",
                "-                    el.id = id;",
                "-                }",
                "-",
                "-                return id;",
                "-            },",
                "-",
                "-",
                "-            /**",
                "-             * We want to be able to use getElementsByTagName as a collection",
                "-             * to attach a group of events to.  Unfortunately, different",
                "-             * browsers return different types of collections.  This function",
                "-             * tests to determine if the object is array-like.  It will also",
                "-             * fail if the object is an array, but is empty.",
                "-             * @method _isValidCollection",
                "-             * @param o the object to test",
                "-             * @return {boolean} true if the object is array-like and populated",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _isValidCollection: function(o) {",
                "-                try {",
                "-                    return ( o                     && // o is something",
                "-                             typeof o !== \"string\" && // o is not a string",
                "-                             o.length              && // o is indexed",
                "-                             !o.tagName            && // o is not an HTML element",
                "-                             !o.alert              && // o is not a window",
                "-                             typeof o[0] !== \"undefined\" );",
                "-                } catch(ex) {",
                "-                    return false;",
                "-                }",
                "-",
                "-            },",
                "-",
                "-            /**",
                "-             * @private",
                "-             * @property elCache",
                "-             * DOM element cache",
                "-             * @static",
                "-             * @deprecated Elements are not cached due to issues that arise when",
                "-             * elements are removed and re-added",
                "-             */",
                "-            elCache: {},",
                "-",
                "-            /**",
                "-             * We cache elements bound by id because when the unload event",
                "-             * fires, we can no longer use document.getElementById",
                "-             * @method getEl",
                "-             * @static",
                "-             * @private",
                "-             * @deprecated Elements are not cached any longer",
                "-             */",
                "-            getEl: function(id) {",
                "-                return (typeof id === \"string\") ? document.getElementById(id) : id;",
                "-            },",
                "-",
                "-            /**",
                "-             * Clears the element cache",
                "-             * @deprecated Elements are not cached any longer",
                "-             * @method clearCache",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            clearCache: function() { },",
                "-",
                "-            /**",
                "-             * Custom event the fires when the dom is initially usable",
                "-             * @event DOMReadyEvent",
                "-             */",
                "-            DOMReadyEvent: new YAHOO.util.CustomEvent(\"DOMReady\", YAHOO, 0, 0, 1),",
                "-",
                "-            /**",
                "-             * hook up any deferred listeners",
                "-             * @method _load",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _load: function(e) {",
                "-",
                "-                if (!loadComplete) {",
                "-                    loadComplete = true;",
                "-                    var EU = YAHOO.util.Event;",
                "-",
                "-                    // Just in case DOMReady did not go off for some reason",
                "-                    EU._ready();",
                "-",
                "-                    // Available elements may not have been detected before the",
                "-                    // window load event fires. Try to find them now so that the",
                "-                    // the user is more likely to get the onAvailable notifications",
                "-                    // before the window load notification",
                "-                    EU._tryPreloadAttach();",
                "-",
                "-                }",
                "-            },",
                "-",
                "-            /**",
                "-             * Fires the DOMReady event listeners the first time the document is",
                "-             * usable.",
                "-             * @method _ready",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _ready: function(e) {",
                "-                var EU = YAHOO.util.Event;",
                "-                if (!EU.DOMReady) {",
                "-                    EU.DOMReady=true;",
                "-",
                "-                    // Fire the content ready custom event",
                "-                    EU.DOMReadyEvent.fire();",
                "-",
                "-                    // Remove the DOMContentLoaded (FF/Opera)",
                "-                    EU._simpleRemove(document, \"DOMContentLoaded\", EU._ready);",
                "-                }",
                "-            },",
                "-",
                "-            /**",
                "-             * Polling function that runs before the onload event fires,",
                "-             * attempting to attach to DOM Nodes as soon as they are",
                "-             * available",
                "-             * @method _tryPreloadAttach",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _tryPreloadAttach: function() {",
                "-",
                "-                if (onAvailStack.length === 0) {",
                "-                    retryCount = 0;",
                "-                    if (this._interval) {",
                "-                        // clearInterval(this._interval);",
                "-                        this._interval.cancel();",
                "-                        this._interval = null;",
                "-                    }",
                "-                    return;",
                "-                }",
                "-",
                "-                if (this.locked) {",
                "-                    return;",
                "-                }",
                "-",
                "-                if (this.isIE) {",
                "-                    // Hold off if DOMReady has not fired and check current",
                "-                    // readyState to protect against the IE operation aborted",
                "-                    // issue.",
                "-                    if (!this.DOMReady) {",
                "-                        this.startInterval();",
                "-                        return;",
                "-                    }",
                "-                }",
                "-",
                "-                this.locked = true;",
                "-",
                "-",
                "-                // keep trying until after the page is loaded.  We need to",
                "-                // check the page load state prior to trying to bind the",
                "-                // elements so that we can be certain all elements have been",
                "-                // tested appropriately",
                "-                var tryAgain = !loadComplete;",
                "-                if (!tryAgain) {",
                "-                    tryAgain = (retryCount > 0 && onAvailStack.length > 0);",
                "-                }",
                "-",
                "-                // onAvailable",
                "-                var notAvail = [];",
                "-",
                "-                var executeItem = function (el, item) {",
                "-                    var context = el;",
                "-                    if (item.overrideContext) {",
                "-                        if (item.overrideContext === true) {",
                "-                            context = item.obj;",
                "-                        } else {",
                "-                            context = item.overrideContext;",
                "-                        }",
                "-                    }",
                "-                    item.fn.call(context, item.obj);",
                "-                };",
                "-",
                "-                var i, len, item, el, ready=[];",
                "-",
                "-                // onAvailable onContentReady",
                "-                for (i=0, len=onAvailStack.length; i<len; i=i+1) {",
                "-                    item = onAvailStack[i];",
                "-                    if (item) {",
                "-                        el = this.getEl(item.id);",
                "-                        if (el) {",
                "-                            if (item.checkReady) {",
                "-                                if (loadComplete || el.nextSibling || !tryAgain) {",
                "-                                    ready.push(item);",
                "-                                    onAvailStack[i] = null;",
                "-                                }",
                "-                            } else {",
                "-                                executeItem(el, item);",
                "-                                onAvailStack[i] = null;",
                "-                            }",
                "-                        } else {",
                "-                            notAvail.push(item);",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                // make sure onContentReady fires after onAvailable",
                "-                for (i=0, len=ready.length; i<len; i=i+1) {",
                "-                    item = ready[i];",
                "-                    executeItem(this.getEl(item.id), item);",
                "-                }",
                "-",
                "-",
                "-                retryCount--;",
                "-",
                "-                if (tryAgain) {",
                "-                    for (i=onAvailStack.length-1; i>-1; i--) {",
                "-                        item = onAvailStack[i];",
                "-                        if (!item || !item.id) {",
                "-                            onAvailStack.splice(i, 1);",
                "-                        }",
                "-                    }",
                "-",
                "-                    this.startInterval();",
                "-                } else {",
                "-                    if (this._interval) {",
                "-                        // clearInterval(this._interval);",
                "-                        this._interval.cancel();",
                "-                        this._interval = null;",
                "-                    }",
                "-                }",
                "-",
                "-                this.locked = false;",
                "-",
                "-            },",
                "-",
                "-            /**",
                "-             * Removes all listeners attached to the given element via addListener.",
                "-             * Optionally, the node's children can also be purged.",
                "-             * Optionally, you can specify a specific type of event to remove.",
                "-             * @method purgeElement",
                "-             * @param {HTMLElement} el the element to purge",
                "-             * @param {boolean} recurse recursively purge this element's children",
                "-             * as well.  Use with caution.",
                "-             * @param {string} sType optional type of listener to purge. If",
                "-             * left out, all listeners will be removed",
                "-             * @static",
                "-             */",
                "-            purgeElement: function(el, recurse, sType) {",
                "-                var oEl = (YAHOO.lang.isString(el)) ? this.getEl(el) : el;",
                "-                var elListeners = this.getListeners(oEl, sType), i, len;",
                "-                if (elListeners) {",
                "-                    for (i=elListeners.length-1; i>-1; i--) {",
                "-                        var l = elListeners[i];",
                "-                        this.removeListener(oEl, l.type, l.fn);",
                "-                    }",
                "-                }",
                "-",
                "-                if (recurse && oEl && oEl.childNodes) {",
                "-                    for (i=0,len=oEl.childNodes.length; i<len ; ++i) {",
                "-                        this.purgeElement(oEl.childNodes[i], recurse, sType);",
                "-                    }",
                "-                }",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns all listeners attached to the given element via addListener.",
                "-             * Optionally, you can specify a specific type of event to return.",
                "-             * @method getListeners",
                "-             * @param el {HTMLElement|string} the element or element id to inspect",
                "-             * @param sType {string} optional type of listener to return. If",
                "-             * left out, all listeners will be returned",
                "-             * @return {Object} the listener. Contains the following fields:",
                "-             * &nbsp;&nbsp;type:   (string)   the type of event",
                "-             * &nbsp;&nbsp;fn:     (function) the callback supplied to addListener",
                "-             * &nbsp;&nbsp;obj:    (object)   the custom object supplied to addListener",
                "-             * &nbsp;&nbsp;adjust: (boolean|object)  whether or not to adjust the default context",
                "-             * &nbsp;&nbsp;scope: (boolean)  the derived context based on the adjust parameter",
                "-             * &nbsp;&nbsp;index:  (int)      its position in the Event util listener cache",
                "-             * @static",
                "-             */",
                "-            getListeners: function(el, sType) {",
                "-                var results=[], searchLists;",
                "-                if (!sType) {",
                "-                    searchLists = [listeners, unloadListeners];",
                "-                } else if (sType === \"unload\") {",
                "-                    searchLists = [unloadListeners];",
                "-                } else {",
                "-                    sType = this._getType(sType);",
                "-                    searchLists = [listeners];",
                "-                }",
                "-",
                "-                var oEl = (YAHOO.lang.isString(el)) ? this.getEl(el) : el;",
                "-",
                "-                for (var j=0;j<searchLists.length; j=j+1) {",
                "-                    var searchList = searchLists[j];",
                "-                    if (searchList) {",
                "-                        for (var i=0,len=searchList.length; i<len ; ++i) {",
                "-                            var l = searchList[i];",
                "-                            if ( l  && l[this.EL] === oEl &&",
                "-                                    (!sType || sType === l[this.TYPE]) ) {",
                "-                                results.push({",
                "-                                    type:   l[this.TYPE],",
                "-                                    fn:     l[this.FN],",
                "-                                    obj:    l[this.OBJ],",
                "-                                    adjust: l[this.OVERRIDE],",
                "-                                    scope:  l[this.ADJ_SCOPE],",
                "-                                    index:  i",
                "-                                });",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                return (results.length) ? results : null;",
                "-            },",
                "-",
                "-            /**",
                "-             * Removes all listeners registered by pe.event.  Called",
                "-             * automatically during the unload event.",
                "-             * @method _unload",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _unload: function(e) {",
                "-",
                "-                var EU = YAHOO.util.Event, i, j, l, len, index,",
                "-                         ul = unloadListeners.slice(), context;",
                "-",
                "-                // execute and clear stored unload listeners",
                "-                for (i=0, len=unloadListeners.length; i<len; ++i) {",
                "-                    l = ul[i];",
                "-                    if (l) {",
                "-                        try {",
                "-                            context = window;",
                "-                            if (l[EU.ADJ_SCOPE]) {",
                "-                                if (l[EU.ADJ_SCOPE] === true) {",
                "-                                    context = l[EU.UNLOAD_OBJ];",
                "-                                } else {",
                "-                                    context = l[EU.ADJ_SCOPE];",
                "-                                }",
                "-                            }",
                "-                            l[EU.FN].call(context, EU.getEvent(e, l[EU.EL]), l[EU.UNLOAD_OBJ] );",
                "-                        } catch(e1) {}",
                "-                        ul[i] = null;",
                "-                    }",
                "-                }",
                "-",
                "-                l = null;",
                "-                context = null;",
                "-                unloadListeners = null;",
                "-",
                "-                // Remove listeners to handle IE memory leaks",
                "-                // 2.5.0 listeners are removed for all browsers again.  FireFox preserves",
                "-                // at least some listeners between page refreshes, potentially causing",
                "-                // errors during page load (mouseover listeners firing before they",
                "-                // should if the user moves the mouse at the correct moment).",
                "-                if (listeners) {",
                "-                    for (j=listeners.length-1; j>-1; j--) {",
                "-                        l = listeners[j];",
                "-                        if (l) {",
                "-                            try {",
                "-                                EU.removeListener(l[EU.EL], l[EU.TYPE], l[EU.FN], j);",
                "-                            } catch(e2) {}",
                "-                        }",
                "-                    }",
                "-                    l=null;",
                "-                }",
                "-",
                "-                try {",
                "-                    EU._simpleRemove(window, \"unload\", EU._unload);",
                "-                    EU._simpleRemove(window, \"load\", EU._load);",
                "-                } catch(e3) {}",
                "-",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns scrollLeft",
                "-             * @method _getScrollLeft",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _getScrollLeft: function() {",
                "-                return this._getScroll()[1];",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns scrollTop",
                "-             * @method _getScrollTop",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _getScrollTop: function() {",
                "-                return this._getScroll()[0];",
                "-            },",
                "-",
                "-            /**",
                "-             * Returns the scrollTop and scrollLeft.  Used to calculate the",
                "-             * pageX and pageY in Internet Explorer",
                "-             * @method _getScroll",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _getScroll: function() {",
                "-                var dd = document.documentElement, db = document.body;",
                "-                if (dd && (dd.scrollTop || dd.scrollLeft)) {",
                "-                    return [dd.scrollTop, dd.scrollLeft];",
                "-                } else if (db) {",
                "-                    return [db.scrollTop, db.scrollLeft];",
                "-                } else {",
                "-                    return [0, 0];",
                "-                }",
                "-            },",
                "-",
                "-            /**",
                "-             * Used by old versions of CustomEvent, restored for backwards",
                "-             * compatibility",
                "-             * @method regCE",
                "-             * @private",
                "-             * @static",
                "-             * @deprecated still here for backwards compatibility",
                "-             */",
                "-            regCE: function() {},",
                "-",
                "-            /**",
                "-             * Adds a DOM event directly without the caching, cleanup, context adj, etc",
                "-             *",
                "-             * @method _simpleAdd",
                "-             * @param {HTMLElement} el      the element to bind the handler to",
                "-             * @param {string}      sType   the type of event handler",
                "-             * @param {function}    fn      the callback to invoke",
                "-             * @param {boolen}      capture capture or bubble phase",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _simpleAdd: function () {",
                "-                if (window.addEventListener) {",
                "-                    return function(el, sType, fn, capture) {",
                "-                        el.addEventListener(sType, fn, (capture));",
                "-                    };",
                "-                } else if (window.attachEvent) {",
                "-                    return function(el, sType, fn, capture) {",
                "-                        el.attachEvent(\"on\" + sType, fn);",
                "-                    };",
                "-                } else {",
                "-                    return function(){};",
                "-                }",
                "-            }(),",
                "-",
                "-            /**",
                "-             * Basic remove listener",
                "-             *",
                "-             * @method _simpleRemove",
                "-             * @param {HTMLElement} el      the element to bind the handler to",
                "-             * @param {string}      sType   the type of event handler",
                "-             * @param {function}    fn      the callback to invoke",
                "-             * @param {boolen}      capture capture or bubble phase",
                "-             * @static",
                "-             * @private",
                "-             */",
                "-            _simpleRemove: function() {",
                "-                if (window.removeEventListener) {",
                "-                    return function (el, sType, fn, capture) {",
                "-                        el.removeEventListener(sType, fn, (capture));",
                "-                    };",
                "-                } else if (window.detachEvent) {",
                "-                    return function (el, sType, fn) {",
                "-                        el.detachEvent(\"on\" + sType, fn);",
                "-                    };",
                "-                } else {",
                "-                    return function(){};",
                "-                }",
                "-            }()",
                "-        };",
                "-",
                "-    }();",
                "-",
                "-    (function() {",
                "-        var EU = YAHOO.util.Event;",
                "-",
                "-        /**",
                "-         * Appends an event handler.  This is an alias for <code>addListener</code>",
                "-         *",
                "-         * @method on",
                "-         *",
                "-         * @param {String|HTMLElement|Array|NodeList} el An id, an element",
                "-         *  reference, or a collection of ids and/or elements to assign the",
                "-         *  listener to.",
                "-         * @param {String}   sType     The type of event to append",
                "-         * @param {Function} fn        The method the event invokes",
                "-         * @param {Object}   obj    An arbitrary object that will be",
                "-         *                             passed as a parameter to the handler",
                "-         * @param {Boolean|object}  overrideContext  If true, the obj passed in becomes",
                "-         *                             the execution context of the listener. If an",
                "-         *                             object, this object becomes the execution",
                "-         *                             context.",
                "-         * @return {Boolean} True if the action was successful or defered,",
                "-         *                        false if one or more of the elements",
                "-         *                        could not have the listener attached,",
                "-         *                        or if the operation throws an exception.",
                "-         * @static",
                "-         */",
                "-        EU.on = EU.addListener;",
                "-",
                "-        /**",
                "-         * YAHOO.util.Event.onFocus is an alias for addFocusListener",
                "-         * @method onFocus",
                "-         * @see addFocusListener",
                "-         * @static",
                "-         * @deprecated use YAHOO.util.Event.on and specify \"focusin\" as the event type.",
                "-         */",
                "-        EU.onFocus = EU.addFocusListener;",
                "-",
                "-        /**",
                "-         * YAHOO.util.Event.onBlur is an alias for addBlurListener",
                "-         * @method onBlur",
                "-         * @see addBlurListener",
                "-         * @static",
                "-         * @deprecated use YAHOO.util.Event.on and specify \"focusout\" as the event type.",
                "-         */",
                "-        EU.onBlur = EU.addBlurListener;",
                "-",
                "-/*! DOMReady: based on work by: Dean Edwards/John Resig/Matthias Miller/Diego Perini */",
                "-",
                "-        // Internet Explorer: use the readyState of a defered script.",
                "-        // This isolates what appears to be a safe moment to manipulate",
                "-        // the DOM prior to when the document's readyState suggests",
                "-        // it is safe to do so.",
                "-        if (EU.isIE) {",
                "-            if (self !== self.top) {",
                "-                document.onreadystatechange = function() {",
                "-                    if (document.readyState == 'complete') {",
                "-                        document.onreadystatechange = null;",
                "-                        EU._ready();",
                "-                    }",
                "-                };",
                "-            } else {",
                "-",
                "-                // Process onAvailable/onContentReady items when the",
                "-                // DOM is ready.",
                "-                YAHOO.util.Event.onDOMReady(",
                "-                        YAHOO.util.Event._tryPreloadAttach,",
                "-                        YAHOO.util.Event, true);",
                "-",
                "-                var n = document.createElement('p');",
                "-",
                "-                EU._dri = setInterval(function() {",
                "-                    try {",
                "-                        // throws an error if doc is not ready",
                "-                        n.doScroll('left');",
                "-                        clearInterval(EU._dri);",
                "-                        EU._dri = null;",
                "-                        EU._ready();",
                "-                        n = null;",
                "-                    } catch (ex) {",
                "-                    }",
                "-                }, EU.POLL_INTERVAL);",
                "-            }",
                "-",
                "-        // The document's readyState in Safari currently will",
                "-        // change to loaded/complete before images are loaded.",
                "-        } else if (EU.webkit && EU.webkit < 525) {",
                "-",
                "-            EU._dri = setInterval(function() {",
                "-                var rs=document.readyState;",
                "-                if (\"loaded\" == rs || \"complete\" == rs) {",
                "-                    clearInterval(EU._dri);",
                "-                    EU._dri = null;",
                "-                    EU._ready();",
                "-                }",
                "-            }, EU.POLL_INTERVAL);",
                "-",
                "-        // FireFox and Opera: These browsers provide a event for this",
                "-        // moment.  The latest WebKit releases now support this event.",
                "-        } else {",
                "-",
                "-            EU._simpleAdd(document, \"DOMContentLoaded\", EU._ready);",
                "-",
                "-        }",
                "-        /////////////////////////////////////////////////////////////",
                "-",
                "-",
                "-        EU._simpleAdd(window, \"load\", EU._load);",
                "-        EU._simpleAdd(window, \"unload\", EU._unload);",
                "-        EU._tryPreloadAttach();",
                "-    })();",
                "-",
                "-}",
                "-/**",
                "- * EventProvider is designed to be used with YAHOO.augment to wrap",
                "- * CustomEvents in an interface that allows events to be subscribed to",
                "- * and fired by name.  This makes it possible for implementing code to",
                "- * subscribe to an event that either has not been created yet, or will",
                "- * not be created at all.",
                "- *",
                "- * @Class EventProvider",
                "- */",
                "-YAHOO.util.EventProvider = function() { };",
                "-",
                "-YAHOO.util.EventProvider.prototype = {",
                "-",
                "-    /**",
                "-     * Private storage of custom events",
                "-     * @property __yui_events",
                "-     * @type Object[]",
                "-     * @private",
                "-     */",
                "-    __yui_events: null,",
                "-",
                "-    /**",
                "-     * Private storage of custom event subscribers",
                "-     * @property __yui_subscribers",
                "-     * @type Object[]",
                "-     * @private",
                "-     */",
                "-    __yui_subscribers: null,",
                "-",
                "-    /**",
                "-     * Subscribe to a CustomEvent by event type",
                "-     *",
                "-     * @method subscribe",
                "-     * @param p_type     {string}   the type, or name of the event",
                "-     * @param p_fn       {function} the function to exectute when the event fires",
                "-     * @param p_obj      {Object}   An object to be passed along when the event",
                "-     *                              fires",
                "-     * @param overrideContext {boolean}  If true, the obj passed in becomes the",
                "-     *                              execution scope of the listener",
                "-     */",
                "-    subscribe: function(p_type, p_fn, p_obj, overrideContext) {",
                "-",
                "-        this.__yui_events = this.__yui_events || {};",
                "-        var ce = this.__yui_events[p_type];",
                "-",
                "-        if (ce) {",
                "-            ce.subscribe(p_fn, p_obj, overrideContext);",
                "-        } else {",
                "-            this.__yui_subscribers = this.__yui_subscribers || {};",
                "-            var subs = this.__yui_subscribers;",
                "-            if (!subs[p_type]) {",
                "-                subs[p_type] = [];",
                "-            }",
                "-            subs[p_type].push(",
                "-                { fn: p_fn, obj: p_obj, overrideContext: overrideContext } );",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Unsubscribes one or more listeners the from the specified event",
                "-     * @method unsubscribe",
                "-     * @param p_type {string}   The type, or name of the event.  If the type",
                "-     *                          is not specified, it will attempt to remove",
                "-     *                          the listener from all hosted events.",
                "-     * @param p_fn   {Function} The subscribed function to unsubscribe, if not",
                "-     *                          supplied, all subscribers will be removed.",
                "-     * @param p_obj  {Object}   The custom object passed to subscribe.  This is",
                "-     *                        optional, but if supplied will be used to",
                "-     *                        disambiguate multiple listeners that are the same",
                "-     *                        (e.g., you subscribe many object using a function",
                "-     *                        that lives on the prototype)",
                "-     * @return {boolean} true if the subscriber was found and detached.",
                "-     */",
                "-    unsubscribe: function(p_type, p_fn, p_obj) {",
                "-        this.__yui_events = this.__yui_events || {};",
                "-        var evts = this.__yui_events;",
                "-        if (p_type) {",
                "-            var ce = evts[p_type];",
                "-            if (ce) {",
                "-                return ce.unsubscribe(p_fn, p_obj);",
                "-            }",
                "-        } else {",
                "-            var ret = true;",
                "-            for (var i in evts) {",
                "-                if (YAHOO.lang.hasOwnProperty(evts, i)) {",
                "-                    ret = ret && evts[i].unsubscribe(p_fn, p_obj);",
                "-                }",
                "-            }",
                "-            return ret;",
                "-        }",
                "-",
                "-        return false;",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes all listeners from the specified event.  If the event type",
                "-     * is not specified, all listeners from all hosted custom events will",
                "-     * be removed.",
                "-     * @method unsubscribeAll",
                "-     * @param p_type {string}   The type, or name of the event",
                "-     */",
                "-    unsubscribeAll: function(p_type) {",
                "-        return this.unsubscribe(p_type);",
                "-    },",
                "-",
                "-    /**",
                "-     * Creates a new custom event of the specified type.  If a custom event",
                "-     * by that name already exists, it will not be re-created.  In either",
                "-     * case the custom event is returned.",
                "-     *",
                "-     * @method createEvent",
                "-     *",
                "-     * @param p_type {string} the type, or name of the event",
                "-     * @param p_config {object} optional config params.  Valid properties are:",
                "-     *",
                "-     *  <ul>",
                "-     *    <li>",
                "-     *      scope: defines the default execution scope.  If not defined",
                "-     *      the default scope will be this instance.",
                "-     *    </li>",
                "-     *    <li>",
                "-     *      silent: if true, the custom event will not generate log messages.",
                "-     *      This is false by default.",
                "-     *    </li>",
                "-     *    <li>",
                "-     *      fireOnce: if true, the custom event will only notify subscribers",
                "-     *      once regardless of the number of times the event is fired.  In",
                "-     *      addition, new subscribers will be executed immediately if the",
                "-     *      event has already fired.",
                "-     *      This is false by default.",
                "-     *    </li>",
                "-     *    <li>",
                "-     *      onSubscribeCallback: specifies a callback to execute when the",
                "-     *      event has a new subscriber.  This will fire immediately for",
                "-     *      each queued subscriber if any exist prior to the creation of",
                "-     *      the event.",
                "-     *    </li>",
                "-     *  </ul>",
                "-     *",
                "-     *  @return {CustomEvent} the custom event",
                "-     *",
                "-     */",
                "-    createEvent: function(p_type, p_config) {",
                "-",
                "-        this.__yui_events = this.__yui_events || {};",
                "-        var opts = p_config || {},",
                "-            events = this.__yui_events, ce;",
                "-",
                "-        if (events[p_type]) {",
                "-        } else {",
                "-",
                "-            ce = new YAHOO.util.CustomEvent(p_type, opts.scope || this, opts.silent,",
                "-                         YAHOO.util.CustomEvent.FLAT, opts.fireOnce);",
                "-",
                "-            events[p_type] = ce;",
                "-",
                "-            if (opts.onSubscribeCallback) {",
                "-                ce.subscribeEvent.subscribe(opts.onSubscribeCallback);",
                "-            }",
                "-",
                "-            this.__yui_subscribers = this.__yui_subscribers || {};",
                "-            var qs = this.__yui_subscribers[p_type];",
                "-",
                "-            if (qs) {",
                "-                for (var i=0; i<qs.length; ++i) {",
                "-                    ce.subscribe(qs[i].fn, qs[i].obj, qs[i].overrideContext);",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        return events[p_type];",
                "-    },",
                "-",
                "-",
                "-   /**",
                "-     * Fire a custom event by name.  The callback functions will be executed",
                "-     * from the scope specified when the event was created, and with the",
                "-     * following parameters:",
                "-     *   <ul>",
                "-     *   <li>The first argument fire() was executed with</li>",
                "-     *   <li>The custom object (if any) that was passed into the subscribe()",
                "-     *       method</li>",
                "-     *   </ul>",
                "-     * @method fireEvent",
                "-     * @param p_type    {string}  the type, or name of the event",
                "-     * @param arguments {Object*} an arbitrary set of parameters to pass to",
                "-     *                            the handler.",
                "-     * @return {boolean} the return value from CustomEvent.fire",
                "-     *",
                "-     */",
                "-    fireEvent: function(p_type) {",
                "-",
                "-        this.__yui_events = this.__yui_events || {};",
                "-        var ce = this.__yui_events[p_type];",
                "-",
                "-        if (!ce) {",
                "-            return null;",
                "-        }",
                "-",
                "-        var args = [];",
                "-        for (var i=1; i<arguments.length; ++i) {",
                "-            args.push(arguments[i]);",
                "-        }",
                "-        return ce.fire.apply(ce, args);",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns true if the custom event of the provided type has been created",
                "-     * with createEvent.",
                "-     * @method hasEvent",
                "-     * @param type {string} the type, or name of the event",
                "-     */",
                "-    hasEvent: function(type) {",
                "-        if (this.__yui_events) {",
                "-            if (this.__yui_events[type]) {",
                "-                return true;",
                "-            }",
                "-        }",
                "-        return false;",
                "-    }",
                "-",
                "-};",
                "-",
                "-(function() {",
                "-",
                "-    var Event = YAHOO.util.Event, Lang = YAHOO.lang;",
                "-",
                "-/**",
                "-* KeyListener is a utility that provides an easy interface for listening for",
                "-* keydown/keyup events fired against DOM elements.",
                "-* @namespace YAHOO.util",
                "-* @class KeyListener",
                "-* @constructor",
                "-* @param {HTMLElement} attachTo The element or element ID to which the key",
                "-*                               event should be attached",
                "-* @param {String}      attachTo The element or element ID to which the key",
                "-*                               event should be attached",
                "-* @param {Object}      keyData  The object literal representing the key(s)",
                "-*                               to detect. Possible attributes are",
                "-*                               shift(boolean), alt(boolean), ctrl(boolean)",
                "-*                               and keys(either an int or an array of ints",
                "-*                               representing keycodes).",
                "-* @param {Function}    handler  The CustomEvent handler to fire when the",
                "-*                               key event is detected",
                "-* @param {Object}      handler  An object literal representing the handler.",
                "-* @param {String}      event    Optional. The event (keydown or keyup) to",
                "-*                               listen for. Defaults automatically to keydown.",
                "-*",
                "-* @knownissue the \"keypress\" event is completely broken in Safari 2.x and below.",
                "-*             the workaround is use \"keydown\" for key listening.  However, if",
                "-*             it is desired to prevent the default behavior of the keystroke,",
                "-*             that can only be done on the keypress event.  This makes key",
                "-*             handling quite ugly.",
                "-* @knownissue keydown is also broken in Safari 2.x and below for the ESC key.",
                "-*             There currently is no workaround other than choosing another",
                "-*             key to listen for.",
                "-*/",
                "-YAHOO.util.KeyListener = function(attachTo, keyData, handler, event) {",
                "-    if (!attachTo) {",
                "-    } else if (!keyData) {",
                "-    } else if (!handler) {",
                "-    }",
                "-",
                "-    if (!event) {",
                "-        event = YAHOO.util.KeyListener.KEYDOWN;",
                "-    }",
                "-",
                "-    /**",
                "-    * The CustomEvent fired internally when a key is pressed",
                "-    * @event keyEvent",
                "-    * @private",
                "-    * @param {Object} keyData The object literal representing the key(s) to",
                "-    *                         detect. Possible attributes are shift(boolean),",
                "-    *                         alt(boolean), ctrl(boolean) and keys(either an",
                "-    *                         int or an array of ints representing keycodes).",
                "-    */",
                "-    var keyEvent = new YAHOO.util.CustomEvent(\"keyPressed\");",
                "-",
                "-    /**",
                "-    * The CustomEvent fired when the KeyListener is enabled via the enable()",
                "-    * function",
                "-    * @event enabledEvent",
                "-    * @param {Object} keyData The object literal representing the key(s) to",
                "-    *                         detect. Possible attributes are shift(boolean),",
                "-    *                         alt(boolean), ctrl(boolean) and keys(either an",
                "-    *                         int or an array of ints representing keycodes).",
                "-    */",
                "-    this.enabledEvent = new YAHOO.util.CustomEvent(\"enabled\");",
                "-",
                "-    /**",
                "-    * The CustomEvent fired when the KeyListener is disabled via the",
                "-    * disable() function",
                "-    * @event disabledEvent",
                "-    * @param {Object} keyData The object literal representing the key(s) to",
                "-    *                         detect. Possible attributes are shift(boolean),",
                "-    *                         alt(boolean), ctrl(boolean) and keys(either an",
                "-    *                         int or an array of ints representing keycodes).",
                "-    */",
                "-    this.disabledEvent = new YAHOO.util.CustomEvent(\"disabled\");",
                "-",
                "-    if (Lang.isString(attachTo)) {",
                "-        attachTo = document.getElementById(attachTo); // No Dom util",
                "-    }",
                "-",
                "-    if (Lang.isFunction(handler)) {",
                "-        keyEvent.subscribe(handler);",
                "-    } else {",
                "-        keyEvent.subscribe(handler.fn, handler.scope, handler.correctScope);",
                "-    }",
                "-",
                "-    /**",
                "-    * Handles the key event when a key is pressed.",
                "-    * @method handleKeyPress",
                "-    * @param {DOMEvent} e   The keypress DOM event",
                "-    * @param {Object}   obj The DOM event scope object",
                "-    * @private",
                "-    */",
                "-    function handleKeyPress(e, obj) {",
                "-        if (! keyData.shift) {",
                "-            keyData.shift = false;",
                "-        }",
                "-        if (! keyData.alt) {",
                "-            keyData.alt = false;",
                "-        }",
                "-        if (! keyData.ctrl) {",
                "-            keyData.ctrl = false;",
                "-        }",
                "-",
                "-        // check held down modifying keys first",
                "-        if (e.shiftKey == keyData.shift &&",
                "-            e.altKey   == keyData.alt &&",
                "-            e.ctrlKey  == keyData.ctrl) { // if we pass this, all modifiers match",
                "-",
                "-            var dataItem, keys = keyData.keys, key;",
                "-",
                "-            if (YAHOO.lang.isArray(keys)) {",
                "-                for (var i=0;i<keys.length;i++) {",
                "-                    dataItem = keys[i];",
                "-                    key = Event.getCharCode(e);",
                "-",
                "-                    if (dataItem == key) {",
                "-                        keyEvent.fire(key, e);",
                "-                        break;",
                "-                    }",
                "-                }",
                "-            } else {",
                "-                key = Event.getCharCode(e);",
                "-                if (keys == key ) {",
                "-                    keyEvent.fire(key, e);",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-    * Enables the KeyListener by attaching the DOM event listeners to the",
                "-    * target DOM element",
                "-    * @method enable",
                "-    */",
                "-    this.enable = function() {",
                "-        if (! this.enabled) {",
                "-            Event.on(attachTo, event, handleKeyPress);",
                "-            this.enabledEvent.fire(keyData);",
                "-        }",
                "-        /**",
                "-        * Boolean indicating the enabled/disabled state of the Tooltip",
                "-        * @property enabled",
                "-        * @type Boolean",
                "-        */",
                "-        this.enabled = true;",
                "-    };",
                "-",
                "-    /**",
                "-    * Disables the KeyListener by removing the DOM event listeners from the",
                "-    * target DOM element",
                "-    * @method disable",
                "-    */",
                "-    this.disable = function() {",
                "-        if (this.enabled) {",
                "-            Event.removeListener(attachTo, event, handleKeyPress);",
                "-            this.disabledEvent.fire(keyData);",
                "-        }",
                "-        this.enabled = false;",
                "-    };",
                "-",
                "-    /**",
                "-    * Returns a String representation of the object.",
                "-    * @method toString",
                "-    * @return {String}  The string representation of the KeyListener",
                "-    */",
                "-    this.toString = function() {",
                "-        return \"KeyListener [\" + keyData.keys + \"] \" + attachTo.tagName +",
                "-                (attachTo.id ? \"[\" + attachTo.id + \"]\" : \"\");",
                "-    };",
                "-",
                "-};",
                "-",
                "-var KeyListener = YAHOO.util.KeyListener;",
                "-",
                "-/**",
                "- * Constant representing the DOM \"keydown\" event.",
                "- * @property YAHOO.util.KeyListener.KEYDOWN",
                "- * @static",
                "- * @final",
                "- * @type String",
                "- */",
                "-KeyListener.KEYDOWN = \"keydown\";",
                "-",
                "-/**",
                "- * Constant representing the DOM \"keyup\" event.",
                "- * @property YAHOO.util.KeyListener.KEYUP",
                "- * @static",
                "- * @final",
                "- * @type String",
                "- */",
                "-KeyListener.KEYUP = \"keyup\";",
                "-",
                "-/**",
                "- * keycode constants for a subset of the special keys",
                "- * @property KEY",
                "- * @static",
                "- * @final",
                "- */",
                "-KeyListener.KEY = {",
                "-    ALT          : 18,",
                "-    BACK_SPACE   : 8,",
                "-    CAPS_LOCK    : 20,",
                "-    CONTROL      : 17,",
                "-    DELETE       : 46,",
                "-    DOWN         : 40,",
                "-    END          : 35,",
                "-    ENTER        : 13,",
                "-    ESCAPE       : 27,",
                "-    HOME         : 36,",
                "-    LEFT         : 37,",
                "-    META         : 224,",
                "-    NUM_LOCK     : 144,",
                "-    PAGE_DOWN    : 34,",
                "-    PAGE_UP      : 33,",
                "-    PAUSE        : 19,",
                "-    PRINTSCREEN  : 44,",
                "-    RIGHT        : 39,",
                "-    SCROLL_LOCK  : 145,",
                "-    SHIFT        : 16,",
                "-    SPACE        : 32,",
                "-    TAB          : 9,",
                "-    UP           : 38",
                "-};",
                "-",
                "-})();",
                "-YAHOO.register(\"event\", YAHOO.util.Event, {version: \"2.9.0\", build: \"2800\"});",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo-min.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo-min.js",
                "deleted file mode 100644",
                "index 4f18140087..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo-min.js",
                "+++ /dev/null",
                "@@ -1,8 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-if(typeof YAHOO==\"undefined\"||!YAHOO){var YAHOO={};}YAHOO.namespace=function(){var b=arguments,g=null,e,c,f;for(e=0;e<b.length;e=e+1){f=(\"\"+b[e]).split(\".\");g=YAHOO;for(c=(f[0]==\"YAHOO\")?1:0;c<f.length;c=c+1){g[f[c]]=g[f[c]]||{};g=g[f[c]];}}return g;};YAHOO.log=function(d,a,c){var b=YAHOO.widget.Logger;if(b&&b.log){return b.log(d,a,c);}else{return false;}};YAHOO.register=function(a,f,e){var k=YAHOO.env.modules,c,j,h,g,d;if(!k[a]){k[a]={versions:[],builds:[]};}c=k[a];j=e.version;h=e.build;g=YAHOO.env.listeners;c.name=a;c.version=j;c.build=h;c.versions.push(j);c.builds.push(h);c.mainClass=f;for(d=0;d<g.length;d=d+1){g[d](c);}if(f){f.VERSION=j;f.BUILD=h;}else{YAHOO.log(\"mainClass is undefined for module \"+a,\"warn\");}};YAHOO.env=YAHOO.env||{modules:[],listeners:[]};YAHOO.env.getVersion=function(a){return YAHOO.env.modules[a]||null;};YAHOO.env.parseUA=function(d){var e=function(i){var j=0;return parseFloat(i.replace(/\\./g,function(){return(j++==1)?\"\":\".\";}));},h=navigator,g={ie:0,opera:0,gecko:0,webkit:0,chrome:0,mobile:null,air:0,ipad:0,iphone:0,ipod:0,ios:null,android:0,webos:0,caja:h&&h.cajaVersion,secure:false,os:null},c=d||(navigator&&navigator.userAgent),f=window&&window.location,b=f&&f.href,a;g.secure=b&&(b.toLowerCase().indexOf(\"https\")===0);if(c){if((/windows|win32/i).test(c)){g.os=\"windows\";}else{if((/macintosh/i).test(c)){g.os=\"macintosh\";}else{if((/rhino/i).test(c)){g.os=\"rhino\";}}}if((/KHTML/).test(c)){g.webkit=1;}a=c.match(/AppleWebKit\\/([^\\s]*)/);if(a&&a[1]){g.webkit=e(a[1]);if(/ Mobile\\//.test(c)){g.mobile=\"Apple\";a=c.match(/OS ([^\\s]*)/);if(a&&a[1]){a=e(a[1].replace(\"_\",\".\"));}g.ios=a;g.ipad=g.ipod=g.iphone=0;a=c.match(/iPad|iPod|iPhone/);if(a&&a[0]){g[a[0].toLowerCase()]=g.ios;}}else{a=c.match(/NokiaN[^\\/]*|Android \\d\\.\\d|webOS\\/\\d\\.\\d/);if(a){g.mobile=a[0];}if(/webOS/.test(c)){g.mobile=\"WebOS\";a=c.match(/webOS\\/([^\\s]*);/);if(a&&a[1]){g.webos=e(a[1]);}}if(/ Android/.test(c)){g.mobile=\"Android\";a=c.match(/Android ([^\\s]*);/);if(a&&a[1]){g.android=e(a[1]);}}}a=c.match(/Chrome\\/([^\\s]*)/);if(a&&a[1]){g.chrome=e(a[1]);}else{a=c.match(/AdobeAIR\\/([^\\s]*)/);if(a){g.air=a[0];}}}if(!g.webkit){a=c.match(/Opera[\\s\\/]([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);a=c.match(/Version\\/([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);}a=c.match(/Opera Mini[^;]*/);if(a){g.mobile=a[0];}}else{a=c.match(/MSIE\\s([^;]*)/);if(a&&a[1]){g.ie=e(a[1]);}else{a=c.match(/Gecko\\/([^\\s]*)/);if(a){g.gecko=1;a=c.match(/rv:([^\\s\\)]*)/);if(a&&a[1]){g.gecko=e(a[1]);}}}}}}return g;};YAHOO.env.ua=YAHOO.env.parseUA();(function(){YAHOO.namespace(\"util\",\"widget\",\"example\");if(\"undefined\"!==typeof YAHOO_config){var b=YAHOO_config.listener,a=YAHOO.env.listeners,d=true,c;if(b){for(c=0;c<a.length;c++){if(a[c]==b){d=false;break;}}if(d){a.push(b);}}}})();YAHOO.lang=YAHOO.lang||{};(function(){var f=YAHOO.lang,a=Object.prototype,c=\"[object Array]\",h=\"[object Function]\",i=\"[object Object]\",b=[],g={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"/\":\"&#x2F;\",\"`\":\"&#x60;\"},d=[\"toString\",\"valueOf\"],e={isArray:function(j){return a.toString.apply(j)===c;},isBoolean:function(j){return typeof j===\"boolean\";},isFunction:function(j){return(typeof j===\"function\")||a.toString.apply(j)===h;},isNull:function(j){return j===null;},isNumber:function(j){return typeof j===\"number\"&&isFinite(j);},isObject:function(j){return(j&&(typeof j===\"object\"||f.isFunction(j)))||false;},isString:function(j){return typeof j===\"string\";},isUndefined:function(j){return typeof j===\"undefined\";},_IEEnumFix:(YAHOO.env.ua.ie)?function(l,k){var j,n,m;for(j=0;j<d.length;j=j+1){n=d[j];m=k[n];if(f.isFunction(m)&&m!=a[n]){l[n]=m;}}}:function(){},escapeHTML:function(j){return j.replace(/[&<>\"'\\/`]/g,function(k){return g[k];});},extend:function(m,n,l){if(!n||!m){throw new Error(\"extend failed, please check that \"+\"all dependencies are included.\");}var k=function(){},j;k.prototype=n.prototype;m.prototype=new k();m.prototype.constructor=m;m.superclass=n.prototype;if(n.prototype.constructor==a.constructor){n.prototype.constructor=n;}if(l){for(j in l){if(f.hasOwnProperty(l,j)){m.prototype[j]=l[j];}}f._IEEnumFix(m.prototype,l);}},augmentObject:function(n,m){if(!m||!n){throw new Error(\"Absorb failed, verify dependencies.\");}var j=arguments,l,o,k=j[2];if(k&&k!==true){for(l=2;l<j.length;l=l+1){n[j[l]]=m[j[l]];}}else{for(o in m){if(k||!(o in n)){n[o]=m[o];}}f._IEEnumFix(n,m);}return n;},augmentProto:function(m,l){if(!l||!m){throw new Error(\"Augment failed, verify dependencies.\");}var j=[m.prototype,l.prototype],k;for(k=2;k<arguments.length;k=k+1){j.push(arguments[k]);}f.augmentObject.apply(this,j);return m;},dump:function(j,p){var l,n,r=[],t=\"{...}\",k=\"f(){...}\",q=\", \",m=\" => \";if(!f.isObject(j)){return j+\"\";}else{if(j instanceof Date||(\"nodeType\" in j&&\"tagName\" in j)){return j;}else{if(f.isFunction(j)){return k;}}}p=(f.isNumber(p))?p:3;if(f.isArray(j)){r.push(\"[\");for(l=0,n=j.length;l<n;l=l+1){if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}if(r.length>1){r.pop();}r.push(\"]\");}else{r.push(\"{\");for(l in j){if(f.hasOwnProperty(j,l)){r.push(l+m);if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}}if(r.length>1){r.pop();}r.push(\"}\");}return r.join(\"\");},substitute:function(x,y,E,l){var D,C,B,G,t,u,F=[],p,z=x.length,A=\"dump\",r=\" \",q=\"{\",m=\"}\",n,w;for(;;){D=x.lastIndexOf(q,z);if(D<0){break;}C=x.indexOf(m,D);if(D+1>C){break;}p=x.substring(D+1,C);G=p;u=null;B=G.indexOf(r);if(B>-1){u=G.substring(B+1);G=G.substring(0,B);}t=y[G];if(E){t=E(G,t,u);}if(f.isObject(t)){if(f.isArray(t)){t=f.dump(t,parseInt(u,10));}else{u=u||\"\";n=u.indexOf(A);if(n>-1){u=u.substring(4);}w=t.toString();if(w===i||n>-1){t=f.dump(t,parseInt(u,10));}else{t=w;}}}else{if(!f.isString(t)&&!f.isNumber(t)){t=\"~-\"+F.length+\"-~\";F[F.length]=p;}}x=x.substring(0,D)+t+x.substring(C+1);if(l===false){z=D-1;}}for(D=F.length-1;D>=0;D=D-1){x=x.replace(new RegExp(\"~-\"+D+\"-~\"),\"{\"+F[D]+\"}\",\"g\");}return x;},trim:function(j){try{return j.replace(/^\\s+|\\s+$/g,\"\");}catch(k){return j;",
                "-}},merge:function(){var n={},k=arguments,j=k.length,m;for(m=0;m<j;m=m+1){f.augmentObject(n,k[m],true);}return n;},later:function(t,k,u,n,p){t=t||0;k=k||{};var l=u,s=n,q,j;if(f.isString(u)){l=k[u];}if(!l){throw new TypeError(\"method undefined\");}if(!f.isUndefined(n)&&!f.isArray(s)){s=[n];}q=function(){l.apply(k,s||b);};j=(p)?setInterval(q,t):setTimeout(q,t);return{interval:p,cancel:function(){if(this.interval){clearInterval(j);}else{clearTimeout(j);}}};},isValue:function(j){return(f.isObject(j)||f.isString(j)||f.isNumber(j)||f.isBoolean(j));}};f.hasOwnProperty=(a.hasOwnProperty)?function(j,k){return j&&j.hasOwnProperty&&j.hasOwnProperty(k);}:function(j,k){return !f.isUndefined(j[k])&&j.constructor.prototype[k]!==j[k];};e.augmentObject(f,e,true);YAHOO.util.Lang=f;f.augment=f.augmentProto;YAHOO.augment=f.augmentProto;YAHOO.extend=f.extend;})();YAHOO.register(\"yahoo\",YAHOO,{version:\"2.9.0\",build:\"2800\"});",
                "\\ No newline at end of file",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo.js",
                "deleted file mode 100644",
                "index 6e33609f75..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo.js",
                "+++ /dev/null",
                "@@ -1,1229 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-/**",
                "- * The YAHOO object is the single global object used by YUI Library.  It",
                "- * contains utility function for setting up namespaces, inheritance, and",
                "- * logging.  YAHOO.util, YAHOO.widget, and YAHOO.example are namespaces",
                "- * created automatically for and used by the library.",
                "- * @module yahoo",
                "- * @title  YAHOO Global",
                "- */",
                "-",
                "-/**",
                "- * YAHOO_config is not included as part of the library.  Instead it is an",
                "- * object that can be defined by the implementer immediately before",
                "- * including the YUI library.  The properties included in this object",
                "- * will be used to configure global properties needed as soon as the",
                "- * library begins to load.",
                "- * @class YAHOO_config",
                "- * @static",
                "- */",
                "-",
                "-/**",
                "- * A reference to a function that will be executed every time a YAHOO module",
                "- * is loaded.  As parameter, this function will receive the version",
                "- * information for the module. See <a href=\"YAHOO.env.html#getVersion\">",
                "- * YAHOO.env.getVersion</a> for the description of the version data structure.",
                "- * @property listener",
                "- * @type Function",
                "- * @static",
                "- * @default undefined",
                "- */",
                "-",
                "-/**",
                "- * Set to true if the library will be dynamically loaded after window.onload.",
                "- * Defaults to false",
                "- * @property injecting",
                "- * @type boolean",
                "- * @static",
                "- * @default undefined",
                "- */",
                "-",
                "-/**",
                "- * Instructs the yuiloader component to dynamically load yui components and",
                "- * their dependencies.  See the yuiloader documentation for more information",
                "- * about dynamic loading",
                "- * @property load",
                "- * @static",
                "- * @default undefined",
                "- * @see yuiloader",
                "- */",
                "-",
                "-/**",
                "- * Forces the use of the supplied locale where applicable in the library",
                "- * @property locale",
                "- * @type string",
                "- * @static",
                "- * @default undefined",
                "- */",
                "-",
                "-if (typeof YAHOO == \"undefined\" || !YAHOO) {",
                "-    /**",
                "-     * The YAHOO global namespace object.  If YAHOO is already defined, the",
                "-     * existing YAHOO object will not be overwritten so that defined",
                "-     * namespaces are preserved.",
                "-     * @class YAHOO",
                "-     * @static",
                "-     */",
                "-    var YAHOO = {};",
                "-}",
                "-",
                "-/**",
                "- * Returns the namespace specified and creates it if it doesn't exist",
                "- * <pre>",
                "- * YAHOO.namespace(\"property.package\");",
                "- * YAHOO.namespace(\"YAHOO.property.package\");",
                "- * </pre>",
                "- * Either of the above would create YAHOO.property, then",
                "- * YAHOO.property.package",
                "- *",
                "- * Be careful when naming packages. Reserved words may work in some browsers",
                "- * and not others. For instance, the following will fail in Safari:",
                "- * <pre>",
                "- * YAHOO.namespace(\"really.long.nested.namespace\");",
                "- * </pre>",
                "- * This fails because \"long\" is a future reserved word in ECMAScript",
                "- *",
                "- * For implementation code that uses YUI, do not create your components",
                "- * in the namespaces defined by YUI (",
                "- * <code>YAHOO.util</code>,",
                "- * <code>YAHOO.widget</code>,",
                "- * <code>YAHOO.lang</code>,",
                "- * <code>YAHOO.tool</code>,",
                "- * <code>YAHOO.example</code>,",
                "- * <code>YAHOO.env</code>) -- create your own namespace (e.g., 'companyname').",
                "- *",
                "- * @method namespace",
                "- * @static",
                "- * @param  {String*} arguments 1-n namespaces to create",
                "- * @return {Object}  A reference to the last namespace object created",
                "- */",
                "-YAHOO.namespace = function() {",
                "-    var a=arguments, o=null, i, j, d;",
                "-    for (i=0; i<a.length; i=i+1) {",
                "-        d=(\"\"+a[i]).split(\".\");",
                "-        o=YAHOO;",
                "-",
                "-        // YAHOO is implied, so it is ignored if it is included",
                "-        for (j=(d[0] == \"YAHOO\") ? 1 : 0; j<d.length; j=j+1) {",
                "-            o[d[j]]=o[d[j]] || {};",
                "-            o=o[d[j]];",
                "-        }",
                "-    }",
                "-",
                "-    return o;",
                "-};",
                "-",
                "-/**",
                "- * Uses YAHOO.widget.Logger to output a log message, if the widget is",
                "- * available.",
                "- * Note: LogReader adds the message, category, and source to the DOM as HTML.",
                "- *",
                "- * @method log",
                "- * @static",
                "- * @param  {HTML}  msg  The message to log.",
                "- * @param  {HTML}  cat  The log category for the message.  Default",
                "- *                        categories are \"info\", \"warn\", \"error\", time\".",
                "- *                        Custom categories can be used as well. (opt)",
                "- * @param  {HTML}  src  The source of the the message (opt)",
                "- * @return {Boolean}      True if the log operation was successful.",
                "- */",
                "-YAHOO.log = function(msg, cat, src) {",
                "-    var l=YAHOO.widget.Logger;",
                "-    if(l && l.log) {",
                "-        return l.log(msg, cat, src);",
                "-    } else {",
                "-        return false;",
                "-    }",
                "-};",
                "-",
                "-/**",
                "- * Registers a module with the YAHOO object",
                "- * @method register",
                "- * @static",
                "- * @param {String}   name    the name of the module (event, slider, etc)",
                "- * @param {Function} mainClass a reference to class in the module.  This",
                "- *                             class will be tagged with the version info",
                "- *                             so that it will be possible to identify the",
                "- *                             version that is in use when multiple versions",
                "- *                             have loaded",
                "- * @param {Object}   data      metadata object for the module.  Currently it",
                "- *                             is expected to contain a \"version\" property",
                "- *                             and a \"build\" property at minimum.",
                "- */",
                "-YAHOO.register = function(name, mainClass, data) {",
                "-    var mods = YAHOO.env.modules, m, v, b, ls, i;",
                "-",
                "-    if (!mods[name]) {",
                "-        mods[name] = {",
                "-            versions:[],",
                "-            builds:[]",
                "-        };",
                "-    }",
                "-",
                "-    m  = mods[name];",
                "-    v  = data.version;",
                "-    b  = data.build;",
                "-    ls = YAHOO.env.listeners;",
                "-",
                "-    m.name = name;",
                "-    m.version = v;",
                "-    m.build = b;",
                "-    m.versions.push(v);",
                "-    m.builds.push(b);",
                "-    m.mainClass = mainClass;",
                "-",
                "-    // fire the module load listeners",
                "-    for (i=0;i<ls.length;i=i+1) {",
                "-        ls[i](m);",
                "-    }",
                "-    // label the main class",
                "-    if (mainClass) {",
                "-        mainClass.VERSION = v;",
                "-        mainClass.BUILD = b;",
                "-    } else {",
                "-        YAHOO.log(\"mainClass is undefined for module \" + name, \"warn\");",
                "-    }",
                "-};",
                "-",
                "-/**",
                "- * YAHOO.env is used to keep track of what is known about the YUI library and",
                "- * the browsing environment",
                "- * @class YAHOO.env",
                "- * @static",
                "- */",
                "-YAHOO.env = YAHOO.env || {",
                "-",
                "-    /**",
                "-     * Keeps the version info for all YUI modules that have reported themselves",
                "-     * @property modules",
                "-     * @type Object[]",
                "-     */",
                "-    modules: [],",
                "-",
                "-    /**",
                "-     * List of functions that should be executed every time a YUI module",
                "-     * reports itself.",
                "-     * @property listeners",
                "-     * @type Function[]",
                "-     */",
                "-    listeners: []",
                "-};",
                "-",
                "-/**",
                "- * Returns the version data for the specified module:",
                "- *      <dl>",
                "- *      <dt>name:</dt>      <dd>The name of the module</dd>",
                "- *      <dt>version:</dt>   <dd>The version in use</dd>",
                "- *      <dt>build:</dt>     <dd>The build number in use</dd>",
                "- *      <dt>versions:</dt>  <dd>All versions that were registered</dd>",
                "- *      <dt>builds:</dt>    <dd>All builds that were registered.</dd>",
                "- *      <dt>mainClass:</dt> <dd>An object that was was stamped with the",
                "- *                 current version and build. If",
                "- *                 mainClass.VERSION != version or mainClass.BUILD != build,",
                "- *                 multiple versions of pieces of the library have been",
                "- *                 loaded, potentially causing issues.</dd>",
                "- *       </dl>",
                "- *",
                "- * @method getVersion",
                "- * @static",
                "- * @param {String}  name the name of the module (event, slider, etc)",
                "- * @return {Object} The version info",
                "- */",
                "-YAHOO.env.getVersion = function(name) {",
                "-    return YAHOO.env.modules[name] || null;",
                "-};",
                "-",
                "-/**",
                "- * Do not fork for a browser if it can be avoided.  Use feature detection when",
                "- * you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version",
                "- * number for the browser engine, 0 otherwise.  This value may or may not map",
                "- * to the version number of the browser using the engine.  The value is",
                "- * presented as a float so that it can easily be used for boolean evaluation",
                "- * as well as for looking for a particular range of versions.  Because of this,",
                "- * some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9",
                "- * reports 1.8).",
                "- * @class YAHOO.env.ua",
                "- * @static",
                "- */",
                "-",
                "-/**",
                "- * parses a user agent string (or looks for one in navigator to parse if",
                "- * not supplied).",
                "- * @method parseUA",
                "- * @since 2.9.0",
                "- * @static",
                "- */",
                "-YAHOO.env.parseUA = function(agent) {",
                "-",
                "-        var numberify = function(s) {",
                "-            var c = 0;",
                "-            return parseFloat(s.replace(/\\./g, function() {",
                "-                return (c++ == 1) ? '' : '.';",
                "-            }));",
                "-        },",
                "-",
                "-        nav = navigator,",
                "-",
                "-        o = {",
                "-",
                "-        /**",
                "-         * Internet Explorer version number or 0.  Example: 6",
                "-         * @property ie",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ie: 0,",
                "-",
                "-        /**",
                "-         * Opera version number or 0.  Example: 9.2",
                "-         * @property opera",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        opera: 0,",
                "-",
                "-        /**",
                "-         * Gecko engine revision number.  Will evaluate to 1 if Gecko",
                "-         * is detected but the revision could not be found. Other browsers",
                "-         * will be 0.  Example: 1.8",
                "-         * <pre>",
                "-         * Firefox 1.0.0.4: 1.7.8   <-- Reports 1.7",
                "-         * Firefox 1.5.0.9: 1.8.0.9 <-- 1.8",
                "-         * Firefox 2.0.0.3: 1.8.1.3 <-- 1.81",
                "-         * Firefox 3.0   <-- 1.9",
                "-         * Firefox 3.5   <-- 1.91",
                "-         * </pre>",
                "-         * @property gecko",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        gecko: 0,",
                "-",
                "-        /**",
                "-         * AppleWebKit version.  KHTML browsers that are not WebKit browsers",
                "-         * will evaluate to 1, other browsers 0.  Example: 418.9",
                "-         * <pre>",
                "-         * Safari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the",
                "-         *                                   latest available for Mac OSX 10.3.",
                "-         * Safari 2.0.2:         416     <-- hasOwnProperty introduced",
                "-         * Safari 2.0.4:         418     <-- preventDefault fixed",
                "-         * Safari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run",
                "-         *                                   different versions of webkit",
                "-         * Safari 2.0.4 (419.3): 419     <-- Tiger installations that have been",
                "-         *                                   updated, but not updated",
                "-         *                                   to the latest patch.",
                "-         * Webkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native",
                "-         * SVG and many major issues fixed).",
                "-         * Safari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic",
                "-         * update from 2.x via the 10.4.11 OS patch.",
                "-         * Webkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.",
                "-         *                                   yahoo.com user agent hack removed.",
                "-         * </pre>",
                "-         * http://en.wikipedia.org/wiki/Safari_version_history",
                "-         * @property webkit",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        webkit: 0,",
                "-",
                "-        /**",
                "-         * Chrome will be detected as webkit, but this property will also",
                "-         * be populated with the Chrome version number",
                "-         * @property chrome",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        chrome: 0,",
                "-",
                "-        /**",
                "-         * The mobile property will be set to a string containing any relevant",
                "-         * user agent information when a modern mobile browser is detected.",
                "-         * Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series",
                "-         * devices with the WebKit-based browser, and Opera Mini.",
                "-         * @property mobile",
                "-         * @type string",
                "-         * @static",
                "-         */",
                "-        mobile: null,",
                "-",
                "-        /**",
                "-         * Adobe AIR version number or 0.  Only populated if webkit is detected.",
                "-         * Example: 1.0",
                "-         * @property air",
                "-         * @type float",
                "-         */",
                "-        air: 0,",
                "-        /**",
                "-         * Detects Apple iPad's OS version",
                "-         * @property ipad",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ipad: 0,",
                "-        /**",
                "-         * Detects Apple iPhone's OS version",
                "-         * @property iphone",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        iphone: 0,",
                "-        /**",
                "-         * Detects Apples iPod's OS version",
                "-         * @property ipod",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ipod: 0,",
                "-        /**",
                "-         * General truthy check for iPad, iPhone or iPod",
                "-         * @property ios",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ios: null,",
                "-        /**",
                "-         * Detects Googles Android OS version",
                "-         * @property android",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        android: 0,",
                "-        /**",
                "-         * Detects Palms WebOS version",
                "-         * @property webos",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        webos: 0,",
                "-",
                "-        /**",
                "-         * Google Caja version number or 0.",
                "-         * @property caja",
                "-         * @type float",
                "-         */",
                "-        caja: nav && nav.cajaVersion,",
                "-",
                "-        /**",
                "-         * Set to true if the page appears to be in SSL",
                "-         * @property secure",
                "-         * @type boolean",
                "-         * @static",
                "-         */",
                "-        secure: false,",
                "-",
                "-        /**",
                "-         * The operating system.  Currently only detecting windows or macintosh",
                "-         * @property os",
                "-         * @type string",
                "-         * @static",
                "-         */",
                "-        os: null",
                "-",
                "-    },",
                "-",
                "-    ua = agent || (navigator && navigator.userAgent),",
                "-",
                "-    loc = window && window.location,",
                "-",
                "-    href = loc && loc.href,",
                "-",
                "-    m;",
                "-",
                "-    o.secure = href && (href.toLowerCase().indexOf(\"https\") === 0);",
                "-",
                "-    if (ua) {",
                "-",
                "-        if ((/windows|win32/i).test(ua)) {",
                "-            o.os = 'windows';",
                "-        } else if ((/macintosh/i).test(ua)) {",
                "-            o.os = 'macintosh';",
                "-        } else if ((/rhino/i).test(ua)) {",
                "-            o.os = 'rhino';",
                "-        }",
                "-",
                "-        // Modern KHTML browsers should qualify as Safari X-Grade",
                "-        if ((/KHTML/).test(ua)) {",
                "-            o.webkit = 1;",
                "-        }",
                "-        // Modern WebKit browsers are at least X-Grade",
                "-        m = ua.match(/AppleWebKit\\/([^\\s]*)/);",
                "-        if (m && m[1]) {",
                "-            o.webkit = numberify(m[1]);",
                "-",
                "-            // Mobile browser check",
                "-            if (/ Mobile\\//.test(ua)) {",
                "-                o.mobile = 'Apple'; // iPhone or iPod Touch",
                "-",
                "-                m = ua.match(/OS ([^\\s]*)/);",
                "-                if (m && m[1]) {",
                "-                    m = numberify(m[1].replace('_', '.'));",
                "-                }",
                "-                o.ios = m;",
                "-                o.ipad = o.ipod = o.iphone = 0;",
                "-",
                "-                m = ua.match(/iPad|iPod|iPhone/);",
                "-                if (m && m[0]) {",
                "-                    o[m[0].toLowerCase()] = o.ios;",
                "-                }",
                "-            } else {",
                "-                m = ua.match(/NokiaN[^\\/]*|Android \\d\\.\\d|webOS\\/\\d\\.\\d/);",
                "-                if (m) {",
                "-                    // Nokia N-series, Android, webOS, ex: NokiaN95",
                "-                    o.mobile = m[0];",
                "-                }",
                "-                if (/webOS/.test(ua)) {",
                "-                    o.mobile = 'WebOS';",
                "-                    m = ua.match(/webOS\\/([^\\s]*);/);",
                "-                    if (m && m[1]) {",
                "-                        o.webos = numberify(m[1]);",
                "-                    }",
                "-                }",
                "-                if (/ Android/.test(ua)) {",
                "-                    o.mobile = 'Android';",
                "-                    m = ua.match(/Android ([^\\s]*);/);",
                "-                    if (m && m[1]) {",
                "-                        o.android = numberify(m[1]);",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-",
                "-            m = ua.match(/Chrome\\/([^\\s]*)/);",
                "-            if (m && m[1]) {",
                "-                o.chrome = numberify(m[1]); // Chrome",
                "-            } else {",
                "-                m = ua.match(/AdobeAIR\\/([^\\s]*)/);",
                "-                if (m) {",
                "-                    o.air = m[0]; // Adobe AIR 1.0 or better",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        if (!o.webkit) { // not webkit",
                "-// @todo check Opera/8.01 (J2ME/MIDP; Opera Mini/2.0.4509/1316; fi; U; ssr)",
                "-            m = ua.match(/Opera[\\s\\/]([^\\s]*)/);",
                "-            if (m && m[1]) {",
                "-                o.opera = numberify(m[1]);",
                "-                m = ua.match(/Version\\/([^\\s]*)/);",
                "-                if (m && m[1]) {",
                "-                    o.opera = numberify(m[1]); // opera 10+",
                "-                }",
                "-                m = ua.match(/Opera Mini[^;]*/);",
                "-                if (m) {",
                "-                    o.mobile = m[0]; // ex: Opera Mini/2.0.4509/1316",
                "-                }",
                "-            } else { // not opera or webkit",
                "-                m = ua.match(/MSIE\\s([^;]*)/);",
                "-                if (m && m[1]) {",
                "-                    o.ie = numberify(m[1]);",
                "-                } else { // not opera, webkit, or ie",
                "-                    m = ua.match(/Gecko\\/([^\\s]*)/);",
                "-                    if (m) {",
                "-                        o.gecko = 1; // Gecko detected, look for revision",
                "-                        m = ua.match(/rv:([^\\s\\)]*)/);",
                "-                        if (m && m[1]) {",
                "-                            o.gecko = numberify(m[1]);",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-    return o;",
                "-};",
                "-",
                "-YAHOO.env.ua = YAHOO.env.parseUA();",
                "-",
                "-/*",
                "- * Initializes the global by creating the default namespaces and applying",
                "- * any new configuration information that is detected.  This is the setup",
                "- * for env.",
                "- * @method init",
                "- * @static",
                "- * @private",
                "- */",
                "-(function() {",
                "-    YAHOO.namespace(\"util\", \"widget\", \"example\");",
                "-    /*global YAHOO_config*/",
                "-    if (\"undefined\" !== typeof YAHOO_config) {",
                "-        var l=YAHOO_config.listener, ls=YAHOO.env.listeners,unique=true, i;",
                "-        if (l) {",
                "-            // if YAHOO is loaded multiple times we need to check to see if",
                "-            // this is a new config object.  If it is, add the new component",
                "-            // load listener to the stack",
                "-            for (i=0; i<ls.length; i++) {",
                "-                if (ls[i] == l) {",
                "-                    unique = false;",
                "-                    break;",
                "-                }",
                "-            }",
                "-",
                "-            if (unique) {",
                "-                ls.push(l);",
                "-            }",
                "-        }",
                "-    }",
                "-})();",
                "-/**",
                "- * Provides the language utilites and extensions used by the library",
                "- * @class YAHOO.lang",
                "- */",
                "-YAHOO.lang = YAHOO.lang || {};",
                "-",
                "-(function() {",
                "-",
                "-",
                "-var L = YAHOO.lang,",
                "-",
                "-    OP = Object.prototype,",
                "-    ARRAY_TOSTRING = '[object Array]',",
                "-    FUNCTION_TOSTRING = '[object Function]',",
                "-    OBJECT_TOSTRING = '[object Object]',",
                "-    NOTHING = [],",
                "-",
                "-    HTML_CHARS = {",
                "-        '&': '&amp;',",
                "-        '<': '&lt;',",
                "-        '>': '&gt;',",
                "-        '\"': '&quot;',",
                "-        \"'\": '&#x27;',",
                "-        '/': '&#x2F;',",
                "-        '`': '&#x60;'",
                "-    },",
                "-",
                "-    // ADD = [\"toString\", \"valueOf\", \"hasOwnProperty\"],",
                "-    ADD = [\"toString\", \"valueOf\"],",
                "-",
                "-    OB = {",
                "-",
                "-    /**",
                "-     * Determines wheather or not the provided object is an array.",
                "-     * @method isArray",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isArray: function(o) {",
                "-        return OP.toString.apply(o) === ARRAY_TOSTRING;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a boolean",
                "-     * @method isBoolean",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isBoolean: function(o) {",
                "-        return typeof o === 'boolean';",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a function.",
                "-     * Note: Internet Explorer thinks certain functions are objects:",
                "-     *",
                "-     * var obj = document.createElement(\"object\");",
                "-     * YAHOO.lang.isFunction(obj.getAttribute) // reports false in IE",
                "-     *",
                "-     * var input = document.createElement(\"input\"); // append to body",
                "-     * YAHOO.lang.isFunction(input.focus) // reports false in IE",
                "-     *",
                "-     * You will have to implement additional tests if these functions",
                "-     * matter to you.",
                "-     *",
                "-     * @method isFunction",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isFunction: function(o) {",
                "-        return (typeof o === 'function') || OP.toString.apply(o) === FUNCTION_TOSTRING;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is null",
                "-     * @method isNull",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isNull: function(o) {",
                "-        return o === null;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a legal number",
                "-     * @method isNumber",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isNumber: function(o) {",
                "-        return typeof o === 'number' && isFinite(o);",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is of type object",
                "-     * or function",
                "-     * @method isObject",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isObject: function(o) {",
                "-return (o && (typeof o === 'object' || L.isFunction(o))) || false;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a string",
                "-     * @method isString",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isString: function(o) {",
                "-        return typeof o === 'string';",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is undefined",
                "-     * @method isUndefined",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isUndefined: function(o) {",
                "-        return typeof o === 'undefined';",
                "-    },",
                "-",
                "-",
                "-    /**",
                "-     * IE will not enumerate native functions in a derived object even if the",
                "-     * function was overridden.  This is a workaround for specific functions",
                "-     * we care about on the Object prototype.",
                "-     * @property _IEEnumFix",
                "-     * @param {Function} r  the object to receive the augmentation",
                "-     * @param {Function} s  the object that supplies the properties to augment",
                "-     * @static",
                "-     * @private",
                "-     */",
                "-    _IEEnumFix: (YAHOO.env.ua.ie) ? function(r, s) {",
                "-            var i, fname, f;",
                "-            for (i=0;i<ADD.length;i=i+1) {",
                "-",
                "-                fname = ADD[i];",
                "-                f = s[fname];",
                "-",
                "-                if (L.isFunction(f) && f!=OP[fname]) {",
                "-                    r[fname]=f;",
                "-                }",
                "-            }",
                "-    } : function(){},",
                "-",
                "-    /**",
                "-     * <p>",
                "-     * Returns a copy of the specified string with special HTML characters",
                "-     * escaped. The following characters will be converted to their",
                "-     * corresponding character entities:",
                "-     * <code>&amp; &lt; &gt; &quot; &#x27; &#x2F; &#x60;</code>",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * This implementation is based on the",
                "-     * <a href=\"http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">OWASP",
                "-     * HTML escaping recommendations</a>. In addition to the characters",
                "-     * in the OWASP recommendation, we also escape the <code>&#x60;</code>",
                "-     * character, since IE interprets it as an attribute delimiter when used in",
                "-     * innerHTML.",
                "-     * </p>",
                "-     *",
                "-     * @method escapeHTML",
                "-     * @param {String} html String to escape.",
                "-     * @return {String} Escaped string.",
                "-     * @static",
                "-     * @since 2.9.0",
                "-     */",
                "-    escapeHTML: function (html) {",
                "-        return html.replace(/[&<>\"'\\/`]/g, function (match) {",
                "-            return HTML_CHARS[match];",
                "-        });",
                "-    },",
                "-",
                "-    /**",
                "-     * Utility to set up the prototype, constructor and superclass properties to",
                "-     * support an inheritance strategy that can chain constructors and methods.",
                "-     * Static members will not be inherited.",
                "-     *",
                "-     * @method extend",
                "-     * @static",
                "-     * @param {Function} subc   the object to modify",
                "-     * @param {Function} superc the object to inherit",
                "-     * @param {Object} overrides  additional properties/methods to add to the",
                "-     *                              subclass prototype.  These will override the",
                "-     *                              matching items obtained from the superclass",
                "-     *                              if present.",
                "-     */",
                "-    extend: function(subc, superc, overrides) {",
                "-        if (!superc||!subc) {",
                "-            throw new Error(\"extend failed, please check that \" +",
                "-                            \"all dependencies are included.\");",
                "-        }",
                "-        var F = function() {}, i;",
                "-        F.prototype=superc.prototype;",
                "-        subc.prototype=new F();",
                "-        subc.prototype.constructor=subc;",
                "-        subc.superclass=superc.prototype;",
                "-        if (superc.prototype.constructor == OP.constructor) {",
                "-            superc.prototype.constructor=superc;",
                "-        }",
                "-",
                "-        if (overrides) {",
                "-            for (i in overrides) {",
                "-                if (L.hasOwnProperty(overrides, i)) {",
                "-                    subc.prototype[i]=overrides[i];",
                "-                }",
                "-            }",
                "-",
                "-            L._IEEnumFix(subc.prototype, overrides);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Applies all properties in the supplier to the receiver if the",
                "-     * receiver does not have these properties yet.  Optionally, one or",
                "-     * more methods/properties can be specified (as additional",
                "-     * parameters).  This option will overwrite the property if receiver",
                "-     * has it already.  If true is passed as the third parameter, all",
                "-     * properties will be applied and _will_ overwrite properties in",
                "-     * the receiver.",
                "-     *",
                "-     * @method augmentObject",
                "-     * @static",
                "-     * @since 2.3.0",
                "-     * @param {Function} r  the object to receive the augmentation",
                "-     * @param {Function} s  the object that supplies the properties to augment",
                "-     * @param {String*|boolean}  arguments zero or more properties methods",
                "-     *        to augment the receiver with.  If none specified, everything",
                "-     *        in the supplier will be used unless it would",
                "-     *        overwrite an existing property in the receiver. If true",
                "-     *        is specified as the third parameter, all properties will",
                "-     *        be applied and will overwrite an existing property in",
                "-     *        the receiver",
                "-     */",
                "-    augmentObject: function(r, s) {",
                "-        if (!s||!r) {",
                "-            throw new Error(\"Absorb failed, verify dependencies.\");",
                "-        }",
                "-        var a=arguments, i, p, overrideList=a[2];",
                "-        if (overrideList && overrideList!==true) { // only absorb the specified properties",
                "-            for (i=2; i<a.length; i=i+1) {",
                "-                r[a[i]] = s[a[i]];",
                "-            }",
                "-        } else { // take everything, overwriting only if the third parameter is true",
                "-            for (p in s) {",
                "-                if (overrideList || !(p in r)) {",
                "-                    r[p] = s[p];",
                "-                }",
                "-            }",
                "-",
                "-            L._IEEnumFix(r, s);",
                "-        }",
                "-",
                "-        return r;",
                "-    },",
                "-",
                "-    /**",
                "-     * Same as YAHOO.lang.augmentObject, except it only applies prototype properties",
                "-     * @see YAHOO.lang.augmentObject",
                "-     * @method augmentProto",
                "-     * @static",
                "-     * @param {Function} r  the object to receive the augmentation",
                "-     * @param {Function} s  the object that supplies the properties to augment",
                "-     * @param {String*|boolean}  arguments zero or more properties methods",
                "-     *        to augment the receiver with.  If none specified, everything",
                "-     *        in the supplier will be used unless it would overwrite an existing",
                "-     *        property in the receiver.  if true is specified as the third",
                "-     *        parameter, all properties will be applied and will overwrite an",
                "-     *        existing property in the receiver",
                "-     */",
                "-    augmentProto: function(r, s) {",
                "-        if (!s||!r) {",
                "-            throw new Error(\"Augment failed, verify dependencies.\");",
                "-        }",
                "-        //var a=[].concat(arguments);",
                "-        var a=[r.prototype,s.prototype], i;",
                "-        for (i=2;i<arguments.length;i=i+1) {",
                "-            a.push(arguments[i]);",
                "-        }",
                "-        L.augmentObject.apply(this, a);",
                "-",
                "-        return r;",
                "-    },",
                "-",
                "-",
                "-    /**",
                "-     * Returns a simple string representation of the object or array.",
                "-     * Other types of objects will be returned unprocessed.  Arrays",
                "-     * are expected to be indexed.  Use object notation for",
                "-     * associative arrays.",
                "-     * @method dump",
                "-     * @since 2.3.0",
                "-     * @param o {Object} The object to dump",
                "-     * @param d {int} How deep to recurse child objects, default 3",
                "-     * @return {String} the dump result",
                "-     */",
                "-    dump: function(o, d) {",
                "-        var i,len,s=[],OBJ=\"{...}\",FUN=\"f(){...}\",",
                "-            COMMA=', ', ARROW=' => ';",
                "-",
                "-        // Cast non-objects to string",
                "-        // Skip dates because the std toString is what we want",
                "-        // Skip HTMLElement-like objects because trying to dump",
                "-        // an element will cause an unhandled exception in FF 2.x",
                "-        if (!L.isObject(o)) {",
                "-            return o + \"\";",
                "-        } else if (o instanceof Date || (\"nodeType\" in o && \"tagName\" in o)) {",
                "-            return o;",
                "-        } else if  (L.isFunction(o)) {",
                "-            return FUN;",
                "-        }",
                "-",
                "-        // dig into child objects the depth specifed. Default 3",
                "-        d = (L.isNumber(d)) ? d : 3;",
                "-",
                "-        // arrays [1, 2, 3]",
                "-        if (L.isArray(o)) {",
                "-            s.push(\"[\");",
                "-            for (i=0,len=o.length;i<len;i=i+1) {",
                "-                if (L.isObject(o[i])) {",
                "-                    s.push((d > 0) ? L.dump(o[i], d-1) : OBJ);",
                "-                } else {",
                "-                    s.push(o[i]);",
                "-                }",
                "-                s.push(COMMA);",
                "-            }",
                "-            if (s.length > 1) {",
                "-                s.pop();",
                "-            }",
                "-            s.push(\"]\");",
                "-        // objects {k1 => v1, k2 => v2}",
                "-        } else {",
                "-            s.push(\"{\");",
                "-            for (i in o) {",
                "-                if (L.hasOwnProperty(o, i)) {",
                "-                    s.push(i + ARROW);",
                "-                    if (L.isObject(o[i])) {",
                "-                        s.push((d > 0) ? L.dump(o[i], d-1) : OBJ);",
                "-                    } else {",
                "-                        s.push(o[i]);",
                "-                    }",
                "-                    s.push(COMMA);",
                "-                }",
                "-            }",
                "-            if (s.length > 1) {",
                "-                s.pop();",
                "-            }",
                "-            s.push(\"}\");",
                "-        }",
                "-",
                "-        return s.join(\"\");",
                "-    },",
                "-",
                "-    /**",
                "-     * Does variable substitution on a string. It scans through the string",
                "-     * looking for expressions enclosed in { } braces. If an expression",
                "-     * is found, it is used a key on the object.  If there is a space in",
                "-     * the key, the first word is used for the key and the rest is provided",
                "-     * to an optional function to be used to programatically determine the",
                "-     * value (the extra information might be used for this decision). If",
                "-     * the value for the key in the object, or what is returned from the",
                "-     * function has a string value, number value, or object value, it is",
                "-     * substituted for the bracket expression and it repeats.  If this",
                "-     * value is an object, it uses the Object's toString() if this has",
                "-     * been overridden, otherwise it does a shallow dump of the key/value",
                "-     * pairs.",
                "-     *",
                "-     * By specifying the recurse option, the string is rescanned after",
                "-     * every replacement, allowing for nested template substitutions.",
                "-     * The side effect of this option is that curly braces in the",
                "-     * replacement content must be encoded.",
                "-     *",
                "-     * @method substitute",
                "-     * @since 2.3.0",
                "-     * @param s {String} The string that will be modified.",
                "-     * @param o {Object} An object containing the replacement values",
                "-     * @param f {Function} An optional function that can be used to",
                "-     *                     process each match.  It receives the key,",
                "-     *                     value, and any extra metadata included with",
                "-     *                     the key inside of the braces.",
                "-     * @param recurse {boolean} default true - if not false, the replaced",
                "-     * string will be rescanned so that nested substitutions are possible.",
                "-     * @return {String} the substituted string",
                "-     */",
                "-    substitute: function (s, o, f, recurse) {",
                "-        var i, j, k, key, v, meta, saved=[], token, lidx=s.length,",
                "-            DUMP='dump', SPACE=' ', LBRACE='{', RBRACE='}',",
                "-            dump, objstr;",
                "-",
                "-        for (;;) {",
                "-            i = s.lastIndexOf(LBRACE, lidx);",
                "-            if (i < 0) {",
                "-                break;",
                "-            }",
                "-            j = s.indexOf(RBRACE, i);",
                "-            if (i + 1 > j) {",
                "-                break;",
                "-            }",
                "-",
                "-            //Extract key and meta info",
                "-            token = s.substring(i + 1, j);",
                "-            key = token;",
                "-            meta = null;",
                "-            k = key.indexOf(SPACE);",
                "-            if (k > -1) {",
                "-                meta = key.substring(k + 1);",
                "-                key = key.substring(0, k);",
                "-            }",
                "-",
                "-            // lookup the value",
                "-            v = o[key];",
                "-",
                "-            // if a substitution function was provided, execute it",
                "-            if (f) {",
                "-                v = f(key, v, meta);",
                "-            }",
                "-",
                "-            if (L.isObject(v)) {",
                "-                if (L.isArray(v)) {",
                "-                    v = L.dump(v, parseInt(meta, 10));",
                "-                } else {",
                "-                    meta = meta || \"\";",
                "-",
                "-                    // look for the keyword 'dump', if found force obj dump",
                "-                    dump = meta.indexOf(DUMP);",
                "-                    if (dump > -1) {",
                "-                        meta = meta.substring(4);",
                "-                    }",
                "-",
                "-                    objstr = v.toString();",
                "-",
                "-                    // use the toString if it is not the Object toString",
                "-                    // and the 'dump' meta info was not found",
                "-                    if (objstr === OBJECT_TOSTRING || dump > -1) {",
                "-                        v = L.dump(v, parseInt(meta, 10));",
                "-                    } else {",
                "-                        v = objstr;",
                "-                    }",
                "-                }",
                "-            } else if (!L.isString(v) && !L.isNumber(v)) {",
                "-                // This {block} has no replace string. Save it for later.",
                "-                v = \"~-\" + saved.length + \"-~\";",
                "-                saved[saved.length] = token;",
                "-",
                "-                // break;",
                "-            }",
                "-",
                "-            s = s.substring(0, i) + v + s.substring(j + 1);",
                "-",
                "-            if (recurse === false) {",
                "-                lidx = i-1;",
                "-            }",
                "-",
                "-        }",
                "-",
                "-        // restore saved {block}s",
                "-        for (i=saved.length-1; i>=0; i=i-1) {",
                "-            s = s.replace(new RegExp(\"~-\" + i + \"-~\"), \"{\"  + saved[i] + \"}\", \"g\");",
                "-        }",
                "-",
                "-        return s;",
                "-    },",
                "-",
                "-",
                "-    /**",
                "-     * Returns a string without any leading or trailing whitespace.  If",
                "-     * the input is not a string, the input will be returned untouched.",
                "-     * @method trim",
                "-     * @since 2.3.0",
                "-     * @param s {string} the string to trim",
                "-     * @return {string} the trimmed string",
                "-     */",
                "-    trim: function(s){",
                "-        try {",
                "-            return s.replace(/^\\s+|\\s+$/g, \"\");",
                "-        } catch(e) {",
                "-            return s;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns a new object containing all of the properties of",
                "-     * all the supplied objects.  The properties from later objects",
                "-     * will overwrite those in earlier objects.",
                "-     * @method merge",
                "-     * @since 2.3.0",
                "-     * @param arguments {Object*} the objects to merge",
                "-     * @return the new merged object",
                "-     */",
                "-    merge: function() {",
                "-        var o={}, a=arguments, l=a.length, i;",
                "-        for (i=0; i<l; i=i+1) {",
                "-            L.augmentObject(o, a[i], true);",
                "-        }",
                "-        return o;",
                "-    },",
                "-",
                "-    /**",
                "-     * Executes the supplied function in the context of the supplied",
                "-     * object 'when' milliseconds later.  Executes the function a",
                "-     * single time unless periodic is set to true.",
                "-     * @method later",
                "-     * @since 2.4.0",
                "-     * @param when {int} the number of milliseconds to wait until the fn",
                "-     * is executed",
                "-     * @param o the context object",
                "-     * @param fn {Function|String} the function to execute or the name of",
                "-     * the method in the 'o' object to execute",
                "-     * @param data [Array] data that is provided to the function.  This accepts",
                "-     * either a single item or an array.  If an array is provided, the",
                "-     * function is executed with one parameter for each array item.  If",
                "-     * you need to pass a single array parameter, it needs to be wrapped in",
                "-     * an array [myarray]",
                "-     * @param periodic {boolean} if true, executes continuously at supplied",
                "-     * interval until canceled",
                "-     * @return a timer object. Call the cancel() method on this object to",
                "-     * stop the timer.",
                "-     */",
                "-    later: function(when, o, fn, data, periodic) {",
                "-        when = when || 0;",
                "-        o = o || {};",
                "-        var m=fn, d=data, f, r;",
                "-",
                "-        if (L.isString(fn)) {",
                "-            m = o[fn];",
                "-        }",
                "-",
                "-        if (!m) {",
                "-            throw new TypeError(\"method undefined\");",
                "-        }",
                "-",
                "-        if (!L.isUndefined(data) && !L.isArray(d)) {",
                "-            d = [data];",
                "-        }",
                "-",
                "-        f = function() {",
                "-            m.apply(o, d || NOTHING);",
                "-        };",
                "-",
                "-        r = (periodic) ? setInterval(f, when) : setTimeout(f, when);",
                "-",
                "-        return {",
                "-            interval: periodic,",
                "-            cancel: function() {",
                "-                if (this.interval) {",
                "-                    clearInterval(r);",
                "-                } else {",
                "-                    clearTimeout(r);",
                "-                }",
                "-            }",
                "-        };",
                "-    },",
                "-",
                "-    /**",
                "-     * A convenience method for detecting a legitimate non-null value.",
                "-     * Returns false for null/undefined/NaN, true for other values,",
                "-     * including 0/false/''",
                "-     * @method isValue",
                "-     * @since 2.3.0",
                "-     * @param o {any} the item to test",
                "-     * @return {boolean} true if it is not null/undefined/NaN || false",
                "-     */",
                "-    isValue: function(o) {",
                "-        // return (o || o === false || o === 0 || o === ''); // Infinity fails",
                "-return (L.isObject(o) || L.isString(o) || L.isNumber(o) || L.isBoolean(o));",
                "-    }",
                "-",
                "-};",
                "-",
                "-/**",
                "- * Determines whether or not the property was added",
                "- * to the object instance.  Returns false if the property is not present",
                "- * in the object, or was inherited from the prototype.",
                "- * This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.",
                "- * There is a discrepancy between YAHOO.lang.hasOwnProperty and",
                "- * Object.prototype.hasOwnProperty when the property is a primitive added to",
                "- * both the instance AND prototype with the same value:",
                "- * <pre>",
                "- * var A = function() {};",
                "- * A.prototype.foo = 'foo';",
                "- * var a = new A();",
                "- * a.foo = 'foo';",
                "- * alert(a.hasOwnProperty('foo')); // true",
                "- * alert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback",
                "- * </pre>",
                "- * @method hasOwnProperty",
                "- * @param {any} o The object being testing",
                "- * @param prop {string} the name of the property to test",
                "- * @return {boolean} the result",
                "- */",
                "-L.hasOwnProperty = (OP.hasOwnProperty) ?",
                "-    function(o, prop) {",
                "-        return o && o.hasOwnProperty && o.hasOwnProperty(prop);",
                "-    } : function(o, prop) {",
                "-        return !L.isUndefined(o[prop]) &&",
                "-                o.constructor.prototype[prop] !== o[prop];",
                "-    };",
                "-",
                "-// new lang wins",
                "-OB.augmentObject(L, OB, true);",
                "-",
                "-/*",
                "- * An alias for <a href=\"YAHOO.lang.html\">YAHOO.lang</a>",
                "- * @class YAHOO.util.Lang",
                "- */",
                "-YAHOO.util.Lang = L;",
                "-",
                "-/**",
                "- * Same as YAHOO.lang.augmentObject, except it only applies prototype",
                "- * properties.  This is an alias for augmentProto.",
                "- * @see YAHOO.lang.augmentObject",
                "- * @method augment",
                "- * @static",
                "- * @param {Function} r  the object to receive the augmentation",
                "- * @param {Function} s  the object that supplies the properties to augment",
                "- * @param {String*|boolean}  arguments zero or more properties methods to",
                "- *        augment the receiver with.  If none specified, everything",
                "- *        in the supplier will be used unless it would",
                "- *        overwrite an existing property in the receiver.  if true",
                "- *        is specified as the third parameter, all properties will",
                "- *        be applied and will overwrite an existing property in",
                "- *        the receiver",
                "- */",
                "-L.augment = L.augmentProto;",
                "-",
                "-/**",
                "- * An alias for <a href=\"YAHOO.lang.html#augment\">YAHOO.lang.augment</a>",
                "- * @for YAHOO",
                "- * @method augment",
                "- * @static",
                "- * @param {Function} r  the object to receive the augmentation",
                "- * @param {Function} s  the object that supplies the properties to augment",
                "- * @param {String*}  arguments zero or more properties methods to",
                "- *        augment the receiver with.  If none specified, everything",
                "- *        in the supplier will be used unless it would",
                "- *        overwrite an existing property in the receiver",
                "- */",
                "-YAHOO.augment = L.augmentProto;",
                "-",
                "-/**",
                "- * An alias for <a href=\"YAHOO.lang.html#extend\">YAHOO.lang.extend</a>",
                "- * @method extend",
                "- * @static",
                "- * @param {Function} subc   the object to modify",
                "- * @param {Function} superc the object to inherit",
                "- * @param {Object} overrides  additional properties/methods to add to the",
                "- *        subclass prototype.  These will override the",
                "- *        matching items obtained from the superclass if present.",
                "- */",
                "-YAHOO.extend = L.extend;",
                "-",
                "-})();",
                "-YAHOO.register(\"yahoo\", YAHOO, {version: \"2.9.0\", build: \"2800\"});",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoodomevent/yahoo-dom-event.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoodomevent/yahoo-dom-event.js",
                "deleted file mode 100644",
                "index 46c58bfed4..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoodomevent/yahoo-dom-event.js",
                "+++ /dev/null",
                "@@ -1,14 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-if(typeof YAHOO==\"undefined\"||!YAHOO){var YAHOO={};}YAHOO.namespace=function(){var b=arguments,g=null,e,c,f;for(e=0;e<b.length;e=e+1){f=(\"\"+b[e]).split(\".\");g=YAHOO;for(c=(f[0]==\"YAHOO\")?1:0;c<f.length;c=c+1){g[f[c]]=g[f[c]]||{};g=g[f[c]];}}return g;};YAHOO.log=function(d,a,c){var b=YAHOO.widget.Logger;if(b&&b.log){return b.log(d,a,c);}else{return false;}};YAHOO.register=function(a,f,e){var k=YAHOO.env.modules,c,j,h,g,d;if(!k[a]){k[a]={versions:[],builds:[]};}c=k[a];j=e.version;h=e.build;g=YAHOO.env.listeners;c.name=a;c.version=j;c.build=h;c.versions.push(j);c.builds.push(h);c.mainClass=f;for(d=0;d<g.length;d=d+1){g[d](c);}if(f){f.VERSION=j;f.BUILD=h;}else{YAHOO.log(\"mainClass is undefined for module \"+a,\"warn\");}};YAHOO.env=YAHOO.env||{modules:[],listeners:[]};YAHOO.env.getVersion=function(a){return YAHOO.env.modules[a]||null;};YAHOO.env.parseUA=function(d){var e=function(i){var j=0;return parseFloat(i.replace(/\\./g,function(){return(j++==1)?\"\":\".\";}));},h=navigator,g={ie:0,opera:0,gecko:0,webkit:0,chrome:0,mobile:null,air:0,ipad:0,iphone:0,ipod:0,ios:null,android:0,webos:0,caja:h&&h.cajaVersion,secure:false,os:null},c=d||(navigator&&navigator.userAgent),f=window&&window.location,b=f&&f.href,a;g.secure=b&&(b.toLowerCase().indexOf(\"https\")===0);if(c){if((/windows|win32/i).test(c)){g.os=\"windows\";}else{if((/macintosh/i).test(c)){g.os=\"macintosh\";}else{if((/rhino/i).test(c)){g.os=\"rhino\";}}}if((/KHTML/).test(c)){g.webkit=1;}a=c.match(/AppleWebKit\\/([^\\s]*)/);if(a&&a[1]){g.webkit=e(a[1]);if(/ Mobile\\//.test(c)){g.mobile=\"Apple\";a=c.match(/OS ([^\\s]*)/);if(a&&a[1]){a=e(a[1].replace(\"_\",\".\"));}g.ios=a;g.ipad=g.ipod=g.iphone=0;a=c.match(/iPad|iPod|iPhone/);if(a&&a[0]){g[a[0].toLowerCase()]=g.ios;}}else{a=c.match(/NokiaN[^\\/]*|Android \\d\\.\\d|webOS\\/\\d\\.\\d/);if(a){g.mobile=a[0];}if(/webOS/.test(c)){g.mobile=\"WebOS\";a=c.match(/webOS\\/([^\\s]*);/);if(a&&a[1]){g.webos=e(a[1]);}}if(/ Android/.test(c)){g.mobile=\"Android\";a=c.match(/Android ([^\\s]*);/);if(a&&a[1]){g.android=e(a[1]);}}}a=c.match(/Chrome\\/([^\\s]*)/);if(a&&a[1]){g.chrome=e(a[1]);}else{a=c.match(/AdobeAIR\\/([^\\s]*)/);if(a){g.air=a[0];}}}if(!g.webkit){a=c.match(/Opera[\\s\\/]([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);a=c.match(/Version\\/([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);}a=c.match(/Opera Mini[^;]*/);if(a){g.mobile=a[0];}}else{a=c.match(/MSIE\\s([^;]*)/);if(a&&a[1]){g.ie=e(a[1]);}else{a=c.match(/Gecko\\/([^\\s]*)/);if(a){g.gecko=1;a=c.match(/rv:([^\\s\\)]*)/);if(a&&a[1]){g.gecko=e(a[1]);}}}}}}return g;};YAHOO.env.ua=YAHOO.env.parseUA();(function(){YAHOO.namespace(\"util\",\"widget\",\"example\");if(\"undefined\"!==typeof YAHOO_config){var b=YAHOO_config.listener,a=YAHOO.env.listeners,d=true,c;if(b){for(c=0;c<a.length;c++){if(a[c]==b){d=false;break;}}if(d){a.push(b);}}}})();YAHOO.lang=YAHOO.lang||{};(function(){var f=YAHOO.lang,a=Object.prototype,c=\"[object Array]\",h=\"[object Function]\",i=\"[object Object]\",b=[],g={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"/\":\"&#x2F;\",\"`\":\"&#x60;\"},d=[\"toString\",\"valueOf\"],e={isArray:function(j){return a.toString.apply(j)===c;},isBoolean:function(j){return typeof j===\"boolean\";},isFunction:function(j){return(typeof j===\"function\")||a.toString.apply(j)===h;},isNull:function(j){return j===null;},isNumber:function(j){return typeof j===\"number\"&&isFinite(j);},isObject:function(j){return(j&&(typeof j===\"object\"||f.isFunction(j)))||false;},isString:function(j){return typeof j===\"string\";},isUndefined:function(j){return typeof j===\"undefined\";},_IEEnumFix:(YAHOO.env.ua.ie)?function(l,k){var j,n,m;for(j=0;j<d.length;j=j+1){n=d[j];m=k[n];if(f.isFunction(m)&&m!=a[n]){l[n]=m;}}}:function(){},escapeHTML:function(j){return j.replace(/[&<>\"'\\/`]/g,function(k){return g[k];});},extend:function(m,n,l){if(!n||!m){throw new Error(\"extend failed, please check that \"+\"all dependencies are included.\");}var k=function(){},j;k.prototype=n.prototype;m.prototype=new k();m.prototype.constructor=m;m.superclass=n.prototype;if(n.prototype.constructor==a.constructor){n.prototype.constructor=n;}if(l){for(j in l){if(f.hasOwnProperty(l,j)){m.prototype[j]=l[j];}}f._IEEnumFix(m.prototype,l);}},augmentObject:function(n,m){if(!m||!n){throw new Error(\"Absorb failed, verify dependencies.\");}var j=arguments,l,o,k=j[2];if(k&&k!==true){for(l=2;l<j.length;l=l+1){n[j[l]]=m[j[l]];}}else{for(o in m){if(k||!(o in n)){n[o]=m[o];}}f._IEEnumFix(n,m);}return n;},augmentProto:function(m,l){if(!l||!m){throw new Error(\"Augment failed, verify dependencies.\");}var j=[m.prototype,l.prototype],k;for(k=2;k<arguments.length;k=k+1){j.push(arguments[k]);}f.augmentObject.apply(this,j);return m;},dump:function(j,p){var l,n,r=[],t=\"{...}\",k=\"f(){...}\",q=\", \",m=\" => \";if(!f.isObject(j)){return j+\"\";}else{if(j instanceof Date||(\"nodeType\" in j&&\"tagName\" in j)){return j;}else{if(f.isFunction(j)){return k;}}}p=(f.isNumber(p))?p:3;if(f.isArray(j)){r.push(\"[\");for(l=0,n=j.length;l<n;l=l+1){if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}if(r.length>1){r.pop();}r.push(\"]\");}else{r.push(\"{\");for(l in j){if(f.hasOwnProperty(j,l)){r.push(l+m);if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}}if(r.length>1){r.pop();}r.push(\"}\");}return r.join(\"\");},substitute:function(x,y,E,l){var D,C,B,G,t,u,F=[],p,z=x.length,A=\"dump\",r=\" \",q=\"{\",m=\"}\",n,w;for(;;){D=x.lastIndexOf(q,z);if(D<0){break;}C=x.indexOf(m,D);if(D+1>C){break;}p=x.substring(D+1,C);G=p;u=null;B=G.indexOf(r);if(B>-1){u=G.substring(B+1);G=G.substring(0,B);}t=y[G];if(E){t=E(G,t,u);}if(f.isObject(t)){if(f.isArray(t)){t=f.dump(t,parseInt(u,10));}else{u=u||\"\";n=u.indexOf(A);if(n>-1){u=u.substring(4);}w=t.toString();if(w===i||n>-1){t=f.dump(t,parseInt(u,10));}else{t=w;}}}else{if(!f.isString(t)&&!f.isNumber(t)){t=\"~-\"+F.length+\"-~\";F[F.length]=p;}}x=x.substring(0,D)+t+x.substring(C+1);if(l===false){z=D-1;}}for(D=F.length-1;D>=0;D=D-1){x=x.replace(new RegExp(\"~-\"+D+\"-~\"),\"{\"+F[D]+\"}\",\"g\");}return x;},trim:function(j){try{return j.replace(/^\\s+|\\s+$/g,\"\");}catch(k){return j;",
                "-}},merge:function(){var n={},k=arguments,j=k.length,m;for(m=0;m<j;m=m+1){f.augmentObject(n,k[m],true);}return n;},later:function(t,k,u,n,p){t=t||0;k=k||{};var l=u,s=n,q,j;if(f.isString(u)){l=k[u];}if(!l){throw new TypeError(\"method undefined\");}if(!f.isUndefined(n)&&!f.isArray(s)){s=[n];}q=function(){l.apply(k,s||b);};j=(p)?setInterval(q,t):setTimeout(q,t);return{interval:p,cancel:function(){if(this.interval){clearInterval(j);}else{clearTimeout(j);}}};},isValue:function(j){return(f.isObject(j)||f.isString(j)||f.isNumber(j)||f.isBoolean(j));}};f.hasOwnProperty=(a.hasOwnProperty)?function(j,k){return j&&j.hasOwnProperty&&j.hasOwnProperty(k);}:function(j,k){return !f.isUndefined(j[k])&&j.constructor.prototype[k]!==j[k];};e.augmentObject(f,e,true);YAHOO.util.Lang=f;f.augment=f.augmentProto;YAHOO.augment=f.augmentProto;YAHOO.extend=f.extend;})();YAHOO.register(\"yahoo\",YAHOO,{version:\"2.9.0\",build:\"2800\"});(function(){YAHOO.env._id_counter=YAHOO.env._id_counter||0;var e=YAHOO.util,k=YAHOO.lang,L=YAHOO.env.ua,a=YAHOO.lang.trim,B={},F={},m=/^t(?:able|d|h)$/i,w=/color$/i,j=window.document,v=j.documentElement,C=\"ownerDocument\",M=\"defaultView\",U=\"documentElement\",S=\"compatMode\",z=\"offsetLeft\",o=\"offsetTop\",T=\"offsetParent\",x=\"parentNode\",K=\"nodeType\",c=\"tagName\",n=\"scrollLeft\",H=\"scrollTop\",p=\"getBoundingClientRect\",V=\"getComputedStyle\",y=\"currentStyle\",l=\"CSS1Compat\",A=\"BackCompat\",E=\"class\",f=\"className\",i=\"\",b=\" \",R=\"(?:^|\\\\s)\",J=\"(?= |$)\",t=\"g\",O=\"position\",D=\"fixed\",u=\"relative\",I=\"left\",N=\"top\",Q=\"medium\",P=\"borderLeftWidth\",q=\"borderTopWidth\",d=L.opera,h=L.webkit,g=L.gecko,s=L.ie;e.Dom={CUSTOM_ATTRIBUTES:(!v.hasAttribute)?{\"for\":\"htmlFor\",\"class\":f}:{\"htmlFor\":\"for\",\"className\":E},DOT_ATTRIBUTES:{checked:true},get:function(aa){var ac,X,ab,Z,W,G,Y=null;if(aa){if(typeof aa==\"string\"||typeof aa==\"number\"){ac=aa+\"\";aa=j.getElementById(aa);G=(aa)?aa.attributes:null;if(aa&&G&&G.id&&G.id.value===ac){return aa;}else{if(aa&&j.all){aa=null;X=j.all[ac];if(X&&X.length){for(Z=0,W=X.length;Z<W;++Z){if(X[Z].id===ac){return X[Z];}}}}}}else{if(e.Element&&aa instanceof e.Element){aa=aa.get(\"element\");}else{if(!aa.nodeType&&\"length\" in aa){ab=[];for(Z=0,W=aa.length;Z<W;++Z){ab[ab.length]=e.Dom.get(aa[Z]);}aa=ab;}}}Y=aa;}return Y;},getComputedStyle:function(G,W){if(window[V]){return G[C][M][V](G,null)[W];}else{if(G[y]){return e.Dom.IE_ComputedStyle.get(G,W);}}},getStyle:function(G,W){return e.Dom.batch(G,e.Dom._getStyle,W);},_getStyle:function(){if(window[V]){return function(G,Y){Y=(Y===\"float\")?Y=\"cssFloat\":e.Dom._toCamel(Y);var X=G.style[Y],W;if(!X){W=G[C][M][V](G,null);if(W){X=W[Y];}}return X;};}else{if(v[y]){return function(G,Y){var X;switch(Y){case\"opacity\":X=100;try{X=G.filters[\"DXImageTransform.Microsoft.Alpha\"].opacity;}catch(Z){try{X=G.filters(\"alpha\").opacity;}catch(W){}}return X/100;case\"float\":Y=\"styleFloat\";default:Y=e.Dom._toCamel(Y);X=G[y]?G[y][Y]:null;return(G.style[Y]||X);}};}}}(),setStyle:function(G,W,X){e.Dom.batch(G,e.Dom._setStyle,{prop:W,val:X});},_setStyle:function(){if(!window.getComputedStyle&&j.documentElement.currentStyle){return function(W,G){var X=e.Dom._toCamel(G.prop),Y=G.val;if(W){switch(X){case\"opacity\":if(Y===\"\"||Y===null||Y===1){W.style.removeAttribute(\"filter\");}else{if(k.isString(W.style.filter)){W.style.filter=\"alpha(opacity=\"+Y*100+\")\";if(!W[y]||!W[y].hasLayout){W.style.zoom=1;}}}break;case\"float\":X=\"styleFloat\";default:W.style[X]=Y;}}else{}};}else{return function(W,G){var X=e.Dom._toCamel(G.prop),Y=G.val;if(W){if(X==\"float\"){X=\"cssFloat\";}W.style[X]=Y;}else{}};}}(),getXY:function(G){return e.Dom.batch(G,e.Dom._getXY);},_canPosition:function(G){return(e.Dom._getStyle(G,\"display\")!==\"none\"&&e.Dom._inDoc(G));},_getXY:function(W){var X,G,Z,ab,Y,aa,ac=Math.round,ad=false;if(e.Dom._canPosition(W)){Z=W[p]();ab=W[C];X=e.Dom.getDocumentScrollLeft(ab);G=e.Dom.getDocumentScrollTop(ab);ad=[Z[I],Z[N]];if(Y||aa){ad[0]-=aa;ad[1]-=Y;}if((G||X)){ad[0]+=X;ad[1]+=G;}ad[0]=ac(ad[0]);ad[1]=ac(ad[1]);}else{}return ad;},getX:function(G){var W=function(X){return e.Dom.getXY(X)[0];};return e.Dom.batch(G,W,e.Dom,true);},getY:function(G){var W=function(X){return e.Dom.getXY(X)[1];};return e.Dom.batch(G,W,e.Dom,true);},setXY:function(G,X,W){e.Dom.batch(G,e.Dom._setXY,{pos:X,noRetry:W});},_setXY:function(G,Z){var aa=e.Dom._getStyle(G,O),Y=e.Dom.setStyle,ad=Z.pos,W=Z.noRetry,ab=[parseInt(e.Dom.getComputedStyle(G,I),10),parseInt(e.Dom.getComputedStyle(G,N),10)],ac,X;ac=e.Dom._getXY(G);if(!ad||ac===false){return false;}if(aa==\"static\"){aa=u;Y(G,O,aa);}if(isNaN(ab[0])){ab[0]=(aa==u)?0:G[z];}if(isNaN(ab[1])){ab[1]=(aa==u)?0:G[o];}if(ad[0]!==null){Y(G,I,ad[0]-ac[0]+ab[0]+\"px\");}if(ad[1]!==null){Y(G,N,ad[1]-ac[1]+ab[1]+\"px\");}if(!W){X=e.Dom._getXY(G);if((ad[0]!==null&&X[0]!=ad[0])||(ad[1]!==null&&X[1]!=ad[1])){e.Dom._setXY(G,{pos:ad,noRetry:true});}}},setX:function(W,G){e.Dom.setXY(W,[G,null]);},setY:function(G,W){e.Dom.setXY(G,[null,W]);},getRegion:function(G){var W=function(X){var Y=false;if(e.Dom._canPosition(X)){Y=e.Region.getRegion(X);}else{}return Y;};return e.Dom.batch(G,W,e.Dom,true);},getClientWidth:function(){return e.Dom.getViewportWidth();},getClientHeight:function(){return e.Dom.getViewportHeight();},getElementsByClassName:function(ab,af,ac,ae,X,ad){af=af||\"*\";ac=(ac)?e.Dom.get(ac):null||j;if(!ac){return[];}var W=[],G=ac.getElementsByTagName(af),Z=e.Dom.hasClass;for(var Y=0,aa=G.length;Y<aa;++Y){if(Z(G[Y],ab)){W[W.length]=G[Y];}}if(ae){e.Dom.batch(W,ae,X,ad);}return W;},hasClass:function(W,G){return e.Dom.batch(W,e.Dom._hasClass,G);},_hasClass:function(X,W){var G=false,Y;if(X&&W){Y=e.Dom._getAttribute(X,f)||i;if(Y){Y=Y.replace(/\\s+/g,b);}if(W.exec){G=W.test(Y);}else{G=W&&(b+Y+b).indexOf(b+W+b)>-1;}}else{}return G;},addClass:function(W,G){return e.Dom.batch(W,e.Dom._addClass,G);},_addClass:function(X,W){var G=false,Y;if(X&&W){Y=e.Dom._getAttribute(X,f)||i;if(!e.Dom._hasClass(X,W)){e.Dom.setAttribute(X,f,a(Y+b+W));G=true;}}else{}return G;},removeClass:function(W,G){return e.Dom.batch(W,e.Dom._removeClass,G);},_removeClass:function(Y,X){var W=false,aa,Z,G;if(Y&&X){aa=e.Dom._getAttribute(Y,f)||i;e.Dom.setAttribute(Y,f,aa.replace(e.Dom._getClassRegex(X),i));Z=e.Dom._getAttribute(Y,f);if(aa!==Z){e.Dom.setAttribute(Y,f,a(Z));W=true;if(e.Dom._getAttribute(Y,f)===\"\"){G=(Y.hasAttribute&&Y.hasAttribute(E))?E:f;Y.removeAttribute(G);}}}else{}return W;},replaceClass:function(X,W,G){return e.Dom.batch(X,e.Dom._replaceClass,{from:W,to:G});},_replaceClass:function(Y,X){var W,ab,aa,G=false,Z;if(Y&&X){ab=X.from;aa=X.to;if(!aa){G=false;}else{if(!ab){G=e.Dom._addClass(Y,X.to);}else{if(ab!==aa){Z=e.Dom._getAttribute(Y,f)||i;W=(b+Z.replace(e.Dom._getClassRegex(ab),b+aa).replace(/\\s+/g,b)).split(e.Dom._getClassRegex(aa));W.splice(1,0,b+aa);e.Dom.setAttribute(Y,f,a(W.join(i)));G=true;}}}}else{}return G;},generateId:function(G,X){X=X||\"yui-gen\";var W=function(Y){if(Y&&Y.id){return Y.id;}var Z=X+YAHOO.env._id_counter++;",
                "-if(Y){if(Y[C]&&Y[C].getElementById(Z)){return e.Dom.generateId(Y,Z+X);}Y.id=Z;}return Z;};return e.Dom.batch(G,W,e.Dom,true)||W.apply(e.Dom,arguments);},isAncestor:function(W,X){W=e.Dom.get(W);X=e.Dom.get(X);var G=false;if((W&&X)&&(W[K]&&X[K])){if(W.contains&&W!==X){G=W.contains(X);}else{if(W.compareDocumentPosition){G=!!(W.compareDocumentPosition(X)&16);}}}else{}return G;},inDocument:function(G,W){return e.Dom._inDoc(e.Dom.get(G),W);},_inDoc:function(W,X){var G=false;if(W&&W[c]){X=X||W[C];G=e.Dom.isAncestor(X[U],W);}else{}return G;},getElementsBy:function(W,af,ab,ad,X,ac,ae){af=af||\"*\";ab=(ab)?e.Dom.get(ab):null||j;var aa=(ae)?null:[],G;if(ab){G=ab.getElementsByTagName(af);for(var Y=0,Z=G.length;Y<Z;++Y){if(W(G[Y])){if(ae){aa=G[Y];break;}else{aa[aa.length]=G[Y];}}}if(ad){e.Dom.batch(aa,ad,X,ac);}}return aa;},getElementBy:function(X,G,W){return e.Dom.getElementsBy(X,G,W,null,null,null,true);},batch:function(X,ab,aa,Z){var Y=[],W=(Z)?aa:null;X=(X&&(X[c]||X.item))?X:e.Dom.get(X);if(X&&ab){if(X[c]||X.length===undefined){return ab.call(W,X,aa);}for(var G=0;G<X.length;++G){Y[Y.length]=ab.call(W||X[G],X[G],aa);}}else{return false;}return Y;},getDocumentHeight:function(){var W=(j[S]!=l||h)?j.body.scrollHeight:v.scrollHeight,G=Math.max(W,e.Dom.getViewportHeight());return G;},getDocumentWidth:function(){var W=(j[S]!=l||h)?j.body.scrollWidth:v.scrollWidth,G=Math.max(W,e.Dom.getViewportWidth());return G;},getViewportHeight:function(){var G=self.innerHeight,W=j[S];if((W||s)&&!d){G=(W==l)?v.clientHeight:j.body.clientHeight;}return G;},getViewportWidth:function(){var G=self.innerWidth,W=j[S];if(W||s){G=(W==l)?v.clientWidth:j.body.clientWidth;}return G;},getAncestorBy:function(G,W){while((G=G[x])){if(e.Dom._testElement(G,W)){return G;}}return null;},getAncestorByClassName:function(W,G){W=e.Dom.get(W);if(!W){return null;}var X=function(Y){return e.Dom.hasClass(Y,G);};return e.Dom.getAncestorBy(W,X);},getAncestorByTagName:function(W,G){W=e.Dom.get(W);if(!W){return null;}var X=function(Y){return Y[c]&&Y[c].toUpperCase()==G.toUpperCase();};return e.Dom.getAncestorBy(W,X);},getPreviousSiblingBy:function(G,W){while(G){G=G.previousSibling;if(e.Dom._testElement(G,W)){return G;}}return null;},getPreviousSibling:function(G){G=e.Dom.get(G);if(!G){return null;}return e.Dom.getPreviousSiblingBy(G);},getNextSiblingBy:function(G,W){while(G){G=G.nextSibling;if(e.Dom._testElement(G,W)){return G;}}return null;},getNextSibling:function(G){G=e.Dom.get(G);if(!G){return null;}return e.Dom.getNextSiblingBy(G);},getFirstChildBy:function(G,X){var W=(e.Dom._testElement(G.firstChild,X))?G.firstChild:null;return W||e.Dom.getNextSiblingBy(G.firstChild,X);},getFirstChild:function(G,W){G=e.Dom.get(G);if(!G){return null;}return e.Dom.getFirstChildBy(G);},getLastChildBy:function(G,X){if(!G){return null;}var W=(e.Dom._testElement(G.lastChild,X))?G.lastChild:null;return W||e.Dom.getPreviousSiblingBy(G.lastChild,X);},getLastChild:function(G){G=e.Dom.get(G);return e.Dom.getLastChildBy(G);},getChildrenBy:function(W,Y){var X=e.Dom.getFirstChildBy(W,Y),G=X?[X]:[];e.Dom.getNextSiblingBy(X,function(Z){if(!Y||Y(Z)){G[G.length]=Z;}return false;});return G;},getChildren:function(G){G=e.Dom.get(G);if(!G){}return e.Dom.getChildrenBy(G);},getDocumentScrollLeft:function(G){G=G||j;return Math.max(G[U].scrollLeft,G.body.scrollLeft);},getDocumentScrollTop:function(G){G=G||j;return Math.max(G[U].scrollTop,G.body.scrollTop);},insertBefore:function(W,G){W=e.Dom.get(W);G=e.Dom.get(G);if(!W||!G||!G[x]){return null;}return G[x].insertBefore(W,G);},insertAfter:function(W,G){W=e.Dom.get(W);G=e.Dom.get(G);if(!W||!G||!G[x]){return null;}if(G.nextSibling){return G[x].insertBefore(W,G.nextSibling);}else{return G[x].appendChild(W);}},getClientRegion:function(){var X=e.Dom.getDocumentScrollTop(),W=e.Dom.getDocumentScrollLeft(),Y=e.Dom.getViewportWidth()+W,G=e.Dom.getViewportHeight()+X;return new e.Region(X,Y,G,W);},setAttribute:function(W,G,X){e.Dom.batch(W,e.Dom._setAttribute,{attr:G,val:X});},_setAttribute:function(X,W){var G=e.Dom._toCamel(W.attr),Y=W.val;if(X&&X.setAttribute){if(e.Dom.DOT_ATTRIBUTES[G]&&X.tagName&&X.tagName!=\"BUTTON\"){X[G]=Y;}else{G=e.Dom.CUSTOM_ATTRIBUTES[G]||G;X.setAttribute(G,Y);}}else{}},getAttribute:function(W,G){return e.Dom.batch(W,e.Dom._getAttribute,G);},_getAttribute:function(W,G){var X;G=e.Dom.CUSTOM_ATTRIBUTES[G]||G;if(e.Dom.DOT_ATTRIBUTES[G]){X=W[G];}else{if(W&&\"getAttribute\" in W){if(/^(?:href|src)$/.test(G)){X=W.getAttribute(G,2);}else{X=W.getAttribute(G);}}else{}}return X;},_toCamel:function(W){var X=B;function G(Y,Z){return Z.toUpperCase();}return X[W]||(X[W]=W.indexOf(\"-\")===-1?W:W.replace(/-([a-z])/gi,G));},_getClassRegex:function(W){var G;if(W!==undefined){if(W.exec){G=W;}else{G=F[W];if(!G){W=W.replace(e.Dom._patterns.CLASS_RE_TOKENS,\"\\\\$1\");W=W.replace(/\\s+/g,b);G=F[W]=new RegExp(R+W+J,t);}}}return G;},_patterns:{ROOT_TAG:/^body|html$/i,CLASS_RE_TOKENS:/([\\.\\(\\)\\^\\$\\*\\+\\?\\|\\[\\]\\{\\}\\\\])/g},_testElement:function(G,W){return G&&G[K]==1&&(!W||W(G));},_calcBorders:function(X,Y){var W=parseInt(e.Dom[V](X,q),10)||0,G=parseInt(e.Dom[V](X,P),10)||0;if(g){if(m.test(X[c])){W=0;G=0;}}Y[0]+=G;Y[1]+=W;return Y;}};var r=e.Dom[V];if(L.opera){e.Dom[V]=function(W,G){var X=r(W,G);if(w.test(G)){X=e.Dom.Color.toRGB(X);}return X;};}if(L.webkit){e.Dom[V]=function(W,G){var X=r(W,G);if(X===\"rgba(0, 0, 0, 0)\"){X=\"transparent\";}return X;};}if(L.ie&&L.ie>=8){e.Dom.DOT_ATTRIBUTES.type=true;}})();YAHOO.util.Region=function(d,e,a,c){this.top=d;this.y=d;this[1]=d;this.right=e;this.bottom=a;this.left=c;this.x=c;this[0]=c;this.width=this.right-this.left;this.height=this.bottom-this.top;};YAHOO.util.Region.prototype.contains=function(a){return(a.left>=this.left&&a.right<=this.right&&a.top>=this.top&&a.bottom<=this.bottom);};YAHOO.util.Region.prototype.getArea=function(){return((this.bottom-this.top)*(this.right-this.left));};YAHOO.util.Region.prototype.intersect=function(f){var d=Math.max(this.top,f.top),e=Math.min(this.right,f.right),a=Math.min(this.bottom,f.bottom),c=Math.max(this.left,f.left);",
                "-if(a>=d&&e>=c){return new YAHOO.util.Region(d,e,a,c);}else{return null;}};YAHOO.util.Region.prototype.union=function(f){var d=Math.min(this.top,f.top),e=Math.max(this.right,f.right),a=Math.max(this.bottom,f.bottom),c=Math.min(this.left,f.left);return new YAHOO.util.Region(d,e,a,c);};YAHOO.util.Region.prototype.toString=function(){return(\"Region {\"+\"top: \"+this.top+\", right: \"+this.right+\", bottom: \"+this.bottom+\", left: \"+this.left+\", height: \"+this.height+\", width: \"+this.width+\"}\");};YAHOO.util.Region.getRegion=function(e){var g=YAHOO.util.Dom.getXY(e),d=g[1],f=g[0]+e.offsetWidth,a=g[1]+e.offsetHeight,c=g[0];return new YAHOO.util.Region(d,f,a,c);};YAHOO.util.Point=function(a,b){if(YAHOO.lang.isArray(a)){b=a[1];a=a[0];}YAHOO.util.Point.superclass.constructor.call(this,b,a,b,a);};YAHOO.extend(YAHOO.util.Point,YAHOO.util.Region);(function(){var b=YAHOO.util,a=\"clientTop\",f=\"clientLeft\",j=\"parentNode\",k=\"right\",w=\"hasLayout\",i=\"px\",u=\"opacity\",l=\"auto\",d=\"borderLeftWidth\",g=\"borderTopWidth\",p=\"borderRightWidth\",v=\"borderBottomWidth\",s=\"visible\",q=\"transparent\",n=\"height\",e=\"width\",h=\"style\",t=\"currentStyle\",r=/^width|height$/,o=/^(\\d[.\\d]*)+(em|ex|px|gd|rem|vw|vh|vm|ch|mm|cm|in|pt|pc|deg|rad|ms|s|hz|khz|%){1}?/i,m={get:function(x,z){var y=\"\",A=x[t][z];if(z===u){y=b.Dom.getStyle(x,u);}else{if(!A||(A.indexOf&&A.indexOf(i)>-1)){y=A;}else{if(b.Dom.IE_COMPUTED[z]){y=b.Dom.IE_COMPUTED[z](x,z);}else{if(o.test(A)){y=b.Dom.IE.ComputedStyle.getPixel(x,z);}else{y=A;}}}}return y;},getOffset:function(z,E){var B=z[t][E],x=E.charAt(0).toUpperCase()+E.substr(1),C=\"offset\"+x,y=\"pixel\"+x,A=\"\",D;if(B==l){D=z[C];if(D===undefined){A=0;}A=D;if(r.test(E)){z[h][E]=D;if(z[C]>D){A=D-(z[C]-D);}z[h][E]=l;}}else{if(!z[h][y]&&!z[h][E]){z[h][E]=B;}A=z[h][y];}return A+i;},getBorderWidth:function(x,z){var y=null;if(!x[t][w]){x[h].zoom=1;}switch(z){case g:y=x[a];break;case v:y=x.offsetHeight-x.clientHeight-x[a];break;case d:y=x[f];break;case p:y=x.offsetWidth-x.clientWidth-x[f];break;}return y+i;},getPixel:function(y,x){var A=null,B=y[t][k],z=y[t][x];y[h][k]=z;A=y[h].pixelRight;y[h][k]=B;return A+i;},getMargin:function(y,x){var z;if(y[t][x]==l){z=0+i;}else{z=b.Dom.IE.ComputedStyle.getPixel(y,x);}return z;},getVisibility:function(y,x){var z;while((z=y[t])&&z[x]==\"inherit\"){y=y[j];}return(z)?z[x]:s;},getColor:function(y,x){return b.Dom.Color.toRGB(y[t][x])||q;},getBorderColor:function(y,x){var z=y[t],A=z[x]||z.color;return b.Dom.Color.toRGB(b.Dom.Color.toHex(A));}},c={};c.top=c.right=c.bottom=c.left=c[e]=c[n]=m.getOffset;c.color=m.getColor;c[g]=c[p]=c[v]=c[d]=m.getBorderWidth;c.marginTop=c.marginRight=c.marginBottom=c.marginLeft=m.getMargin;c.visibility=m.getVisibility;c.borderColor=c.borderTopColor=c.borderRightColor=c.borderBottomColor=c.borderLeftColor=m.getBorderColor;b.Dom.IE_COMPUTED=c;b.Dom.IE_ComputedStyle=m;})();(function(){var c=\"toString\",a=parseInt,b=RegExp,d=YAHOO.util;d.Dom.Color={KEYWORDS:{black:\"000\",silver:\"c0c0c0\",gray:\"808080\",white:\"fff\",maroon:\"800000\",red:\"f00\",purple:\"800080\",fuchsia:\"f0f\",green:\"008000\",lime:\"0f0\",olive:\"808000\",yellow:\"ff0\",navy:\"000080\",blue:\"00f\",teal:\"008080\",aqua:\"0ff\"},re_RGB:/^rgb\\(([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\)$/i,re_hex:/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,re_hex3:/([0-9A-F])/gi,toRGB:function(e){if(!d.Dom.Color.re_RGB.test(e)){e=d.Dom.Color.toHex(e);}if(d.Dom.Color.re_hex.exec(e)){e=\"rgb(\"+[a(b.$1,16),a(b.$2,16),a(b.$3,16)].join(\", \")+\")\";}return e;},toHex:function(f){f=d.Dom.Color.KEYWORDS[f]||f;if(d.Dom.Color.re_RGB.exec(f)){f=[Number(b.$1).toString(16),Number(b.$2).toString(16),Number(b.$3).toString(16)];for(var e=0;e<f.length;e++){if(f[e].length<2){f[e]=\"0\"+f[e];}}f=f.join(\"\");}if(f.length<6){f=f.replace(d.Dom.Color.re_hex3,\"$1$1\");}if(f!==\"transparent\"&&f.indexOf(\"#\")<0){f=\"#\"+f;}return f.toUpperCase();}};}());YAHOO.register(\"dom\",YAHOO.util.Dom,{version:\"2.9.0\",build:\"2800\"});YAHOO.util.CustomEvent=function(d,c,b,a,e){this.type=d;this.scope=c||window;this.silent=b;this.fireOnce=e;this.fired=false;this.firedWith=null;this.signature=a||YAHOO.util.CustomEvent.LIST;this.subscribers=[];if(!this.silent){}var f=\"_YUICEOnSubscribe\";if(d!==f){this.subscribeEvent=new YAHOO.util.CustomEvent(f,this,true);}this.lastError=null;};YAHOO.util.CustomEvent.LIST=0;YAHOO.util.CustomEvent.FLAT=1;YAHOO.util.CustomEvent.prototype={subscribe:function(b,c,d){if(!b){throw new Error(\"Invalid callback for subscriber to '\"+this.type+\"'\");}if(this.subscribeEvent){this.subscribeEvent.fire(b,c,d);}var a=new YAHOO.util.Subscriber(b,c,d);if(this.fireOnce&&this.fired){this.notify(a,this.firedWith);}else{this.subscribers.push(a);}},unsubscribe:function(d,f){if(!d){return this.unsubscribeAll();}var e=false;for(var b=0,a=this.subscribers.length;b<a;++b){var c=this.subscribers[b];if(c&&c.contains(d,f)){this._delete(b);e=true;}}return e;},fire:function(){this.lastError=null;var h=[],a=this.subscribers.length;var d=[].slice.call(arguments,0),c=true,f,b=false;if(this.fireOnce){if(this.fired){return true;}else{this.firedWith=d;}}this.fired=true;if(!a&&this.silent){return true;}if(!this.silent){}var e=this.subscribers.slice();for(f=0;f<a;++f){var g=e[f];if(!g||!g.fn){b=true;}else{c=this.notify(g,d);if(false===c){if(!this.silent){}break;}}}return(c!==false);},notify:function(g,c){var b,i=null,f=g.getScope(this.scope),a=YAHOO.util.Event.throwErrors;if(!this.silent){}if(this.signature==YAHOO.util.CustomEvent.FLAT){if(c.length>0){i=c[0];}try{b=g.fn.call(f,i,g.obj);}catch(h){this.lastError=h;if(a){throw h;}}}else{try{b=g.fn.call(f,this.type,c,g.obj);}catch(d){this.lastError=d;if(a){throw d;}}}return b;},unsubscribeAll:function(){var a=this.subscribers.length,b;for(b=a-1;b>-1;b--){this._delete(b);}this.subscribers=[];return a;},_delete:function(a){var b=this.subscribers[a];if(b){delete b.fn;delete b.obj;}this.subscribers.splice(a,1);},toString:function(){return\"CustomEvent: \"+\"'\"+this.type+\"', \"+\"context: \"+this.scope;}};YAHOO.util.Subscriber=function(a,b,c){this.fn=a;this.obj=YAHOO.lang.isUndefined(b)?null:b;this.overrideContext=c;};YAHOO.util.Subscriber.prototype.getScope=function(a){if(this.overrideContext){if(this.overrideContext===true){return this.obj;}else{return this.overrideContext;}}return a;};YAHOO.util.Subscriber.prototype.contains=function(a,b){if(b){return(this.fn==a&&this.obj==b);}else{return(this.fn==a);}};YAHOO.util.Subscriber.prototype.toString=function(){return\"Subscriber { obj: \"+this.obj+\", overrideContext: \"+(this.overrideContext||\"no\")+\" }\";};if(!YAHOO.util.Event){YAHOO.util.Event=function(){var g=false,h=[],j=[],a=0,e=[],b=0,c={63232:38,63233:40,63234:37,63235:39,63276:33,63277:34,25:9},d=YAHOO.env.ua.ie,f=\"focusin\",i=\"focusout\";return{POLL_RETRYS:500,POLL_INTERVAL:40,EL:0,TYPE:1,FN:2,WFN:3,UNLOAD_OBJ:3,ADJ_SCOPE:4,OBJ:5,OVERRIDE:6,CAPTURE:7,lastError:null,isSafari:YAHOO.env.ua.webkit,webkit:YAHOO.env.ua.webkit,isIE:d,_interval:null,_dri:null,_specialTypes:{focusin:(d?\"focusin\":\"focus\"),focusout:(d?\"focusout\":\"blur\")},DOMReady:false,throwErrors:false,startInterval:function(){if(!this._interval){this._interval=YAHOO.lang.later(this.POLL_INTERVAL,this,this._tryPreloadAttach,null,true);}},onAvailable:function(q,m,o,p,n){var k=(YAHOO.lang.isString(q))?[q]:q;for(var l=0;l<k.length;l=l+1){e.push({id:k[l],fn:m,obj:o,overrideContext:p,checkReady:n});}a=this.POLL_RETRYS;this.startInterval();},onContentReady:function(n,k,l,m){this.onAvailable(n,k,l,m,true);},onDOMReady:function(){this.DOMReadyEvent.subscribe.apply(this.DOMReadyEvent,arguments);},_addListener:function(m,k,v,p,t,y){if(!v||!v.call){return false;}if(this._isValidCollection(m)){var w=true;for(var q=0,s=m.length;q<s;++q){w=this.on(m[q],k,v,p,t)&&w;}return w;}else{if(YAHOO.lang.isString(m)){var o=this.getEl(m);if(o){m=o;}else{this.onAvailable(m,function(){YAHOO.util.Event._addListener(m,k,v,p,t,y);});return true;}}}if(!m){return false;}if(\"unload\"==k&&p!==this){j[j.length]=[m,k,v,p,t];return true;}var l=m;if(t){if(t===true){l=p;}else{l=t;}}var n=function(z){return v.call(l,YAHOO.util.Event.getEvent(z,m),p);};var x=[m,k,v,n,l,p,t,y];var r=h.length;h[r]=x;try{this._simpleAdd(m,k,n,y);}catch(u){this.lastError=u;this.removeListener(m,k,v);return false;}return true;},_getType:function(k){return this._specialTypes[k]||k;},addListener:function(m,p,l,n,o){var k=((p==f||p==i)&&!YAHOO.env.ua.ie)?true:false;return this._addListener(m,this._getType(p),l,n,o,k);},addFocusListener:function(l,k,m,n){return this.on(l,f,k,m,n);},removeFocusListener:function(l,k){return this.removeListener(l,f,k);},addBlurListener:function(l,k,m,n){return this.on(l,i,k,m,n);},removeBlurListener:function(l,k){return this.removeListener(l,i,k);},removeListener:function(l,k,r){var m,p,u;k=this._getType(k);if(typeof l==\"string\"){l=this.getEl(l);}else{if(this._isValidCollection(l)){var s=true;for(m=l.length-1;m>-1;m--){s=(this.removeListener(l[m],k,r)&&s);}return s;}}if(!r||!r.call){return this.purgeElement(l,false,k);}if(\"unload\"==k){for(m=j.length-1;m>-1;m--){u=j[m];if(u&&u[0]==l&&u[1]==k&&u[2]==r){j.splice(m,1);return true;}}return false;}var n=null;var o=arguments[3];if(\"undefined\"===typeof o){o=this._getCacheIndex(h,l,k,r);}if(o>=0){n=h[o];}if(!l||!n){return false;}var t=n[this.CAPTURE]===true?true:false;try{this._simpleRemove(l,k,n[this.WFN],t);}catch(q){this.lastError=q;return false;}delete h[o][this.WFN];delete h[o][this.FN];h.splice(o,1);return true;},getTarget:function(m,l){var k=m.target||m.srcElement;return this.resolveTextNode(k);},resolveTextNode:function(l){try{if(l&&3==l.nodeType){return l.parentNode;}}catch(k){return null;}return l;},getPageX:function(l){var k=l.pageX;if(!k&&0!==k){k=l.clientX||0;if(this.isIE){k+=this._getScrollLeft();}}return k;},getPageY:function(k){var l=k.pageY;if(!l&&0!==l){l=k.clientY||0;if(this.isIE){l+=this._getScrollTop();}}return l;},getXY:function(k){return[this.getPageX(k),this.getPageY(k)];},getRelatedTarget:function(l){var k=l.relatedTarget;",
                "-if(!k){if(l.type==\"mouseout\"){k=l.toElement;}else{if(l.type==\"mouseover\"){k=l.fromElement;}}}return this.resolveTextNode(k);},getTime:function(m){if(!m.time){var l=new Date().getTime();try{m.time=l;}catch(k){this.lastError=k;return l;}}return m.time;},stopEvent:function(k){this.stopPropagation(k);this.preventDefault(k);},stopPropagation:function(k){if(k.stopPropagation){k.stopPropagation();}else{k.cancelBubble=true;}},preventDefault:function(k){if(k.preventDefault){k.preventDefault();}else{k.returnValue=false;}},getEvent:function(m,k){var l=m||window.event;if(!l){var n=this.getEvent.caller;while(n){l=n.arguments[0];if(l&&Event==l.constructor){break;}n=n.caller;}}return l;},getCharCode:function(l){var k=l.keyCode||l.charCode||0;if(YAHOO.env.ua.webkit&&(k in c)){k=c[k];}return k;},_getCacheIndex:function(n,q,r,p){for(var o=0,m=n.length;o<m;o=o+1){var k=n[o];if(k&&k[this.FN]==p&&k[this.EL]==q&&k[this.TYPE]==r){return o;}}return -1;},generateId:function(k){var l=k.id;if(!l){l=\"yuievtautoid-\"+b;++b;k.id=l;}return l;},_isValidCollection:function(l){try{return(l&&typeof l!==\"string\"&&l.length&&!l.tagName&&!l.alert&&typeof l[0]!==\"undefined\");}catch(k){return false;}},elCache:{},getEl:function(k){return(typeof k===\"string\")?document.getElementById(k):k;},clearCache:function(){},DOMReadyEvent:new YAHOO.util.CustomEvent(\"DOMReady\",YAHOO,0,0,1),_load:function(l){if(!g){g=true;var k=YAHOO.util.Event;k._ready();k._tryPreloadAttach();}},_ready:function(l){var k=YAHOO.util.Event;if(!k.DOMReady){k.DOMReady=true;k.DOMReadyEvent.fire();k._simpleRemove(document,\"DOMContentLoaded\",k._ready);}},_tryPreloadAttach:function(){if(e.length===0){a=0;if(this._interval){this._interval.cancel();this._interval=null;}return;}if(this.locked){return;}if(this.isIE){if(!this.DOMReady){this.startInterval();return;}}this.locked=true;var q=!g;if(!q){q=(a>0&&e.length>0);}var p=[];var r=function(t,u){var s=t;if(u.overrideContext){if(u.overrideContext===true){s=u.obj;}else{s=u.overrideContext;}}u.fn.call(s,u.obj);};var l,k,o,n,m=[];for(l=0,k=e.length;l<k;l=l+1){o=e[l];if(o){n=this.getEl(o.id);if(n){if(o.checkReady){if(g||n.nextSibling||!q){m.push(o);e[l]=null;}}else{r(n,o);e[l]=null;}}else{p.push(o);}}}for(l=0,k=m.length;l<k;l=l+1){o=m[l];r(this.getEl(o.id),o);}a--;if(q){for(l=e.length-1;l>-1;l--){o=e[l];if(!o||!o.id){e.splice(l,1);}}this.startInterval();}else{if(this._interval){this._interval.cancel();this._interval=null;}}this.locked=false;},purgeElement:function(p,q,s){var n=(YAHOO.lang.isString(p))?this.getEl(p):p;var r=this.getListeners(n,s),o,k;if(r){for(o=r.length-1;o>-1;o--){var m=r[o];this.removeListener(n,m.type,m.fn);}}if(q&&n&&n.childNodes){for(o=0,k=n.childNodes.length;o<k;++o){this.purgeElement(n.childNodes[o],q,s);}}},getListeners:function(n,k){var q=[],m;if(!k){m=[h,j];}else{if(k===\"unload\"){m=[j];}else{k=this._getType(k);m=[h];}}var s=(YAHOO.lang.isString(n))?this.getEl(n):n;for(var p=0;p<m.length;p=p+1){var u=m[p];if(u){for(var r=0,t=u.length;r<t;++r){var o=u[r];if(o&&o[this.EL]===s&&(!k||k===o[this.TYPE])){q.push({type:o[this.TYPE],fn:o[this.FN],obj:o[this.OBJ],adjust:o[this.OVERRIDE],scope:o[this.ADJ_SCOPE],index:r});}}}}return(q.length)?q:null;},_unload:function(s){var m=YAHOO.util.Event,p,o,n,r,q,t=j.slice(),k;for(p=0,r=j.length;p<r;++p){n=t[p];if(n){try{k=window;if(n[m.ADJ_SCOPE]){if(n[m.ADJ_SCOPE]===true){k=n[m.UNLOAD_OBJ];}else{k=n[m.ADJ_SCOPE];}}n[m.FN].call(k,m.getEvent(s,n[m.EL]),n[m.UNLOAD_OBJ]);}catch(w){}t[p]=null;}}n=null;k=null;j=null;if(h){for(o=h.length-1;o>-1;o--){n=h[o];if(n){try{m.removeListener(n[m.EL],n[m.TYPE],n[m.FN],o);}catch(v){}}}n=null;}try{m._simpleRemove(window,\"unload\",m._unload);m._simpleRemove(window,\"load\",m._load);}catch(u){}},_getScrollLeft:function(){return this._getScroll()[1];},_getScrollTop:function(){return this._getScroll()[0];},_getScroll:function(){var k=document.documentElement,l=document.body;if(k&&(k.scrollTop||k.scrollLeft)){return[k.scrollTop,k.scrollLeft];}else{if(l){return[l.scrollTop,l.scrollLeft];}else{return[0,0];}}},regCE:function(){},_simpleAdd:function(){if(window.addEventListener){return function(m,n,l,k){m.addEventListener(n,l,(k));};}else{if(window.attachEvent){return function(m,n,l,k){m.attachEvent(\"on\"+n,l);};}else{return function(){};}}}(),_simpleRemove:function(){if(window.removeEventListener){return function(m,n,l,k){m.removeEventListener(n,l,(k));};}else{if(window.detachEvent){return function(l,m,k){l.detachEvent(\"on\"+m,k);};}else{return function(){};}}}()};}();(function(){var a=YAHOO.util.Event;a.on=a.addListener;a.onFocus=a.addFocusListener;a.onBlur=a.addBlurListener;",
                "-/*! DOMReady: based on work by: Dean Edwards/John Resig/Matthias Miller/Diego Perini */",
                "-if(a.isIE){if(self!==self.top){document.onreadystatechange=function(){if(document.readyState==\"complete\"){document.onreadystatechange=null;a._ready();}};}else{YAHOO.util.Event.onDOMReady(YAHOO.util.Event._tryPreloadAttach,YAHOO.util.Event,true);var b=document.createElement(\"p\");a._dri=setInterval(function(){try{b.doScroll(\"left\");clearInterval(a._dri);a._dri=null;a._ready();b=null;}catch(c){}},a.POLL_INTERVAL);}}else{if(a.webkit&&a.webkit<525){a._dri=setInterval(function(){var c=document.readyState;if(\"loaded\"==c||\"complete\"==c){clearInterval(a._dri);a._dri=null;a._ready();}},a.POLL_INTERVAL);}else{a._simpleAdd(document,\"DOMContentLoaded\",a._ready);}}a._simpleAdd(window,\"load\",a._load);a._simpleAdd(window,\"unload\",a._unload);a._tryPreloadAttach();})();}YAHOO.util.EventProvider=function(){};YAHOO.util.EventProvider.prototype={__yui_events:null,__yui_subscribers:null,subscribe:function(a,c,f,e){this.__yui_events=this.__yui_events||{};var d=this.__yui_events[a];if(d){d.subscribe(c,f,e);}else{this.__yui_subscribers=this.__yui_subscribers||{};var b=this.__yui_subscribers;if(!b[a]){b[a]=[];}b[a].push({fn:c,obj:f,overrideContext:e});}},unsubscribe:function(c,e,g){this.__yui_events=this.__yui_events||{};var a=this.__yui_events;if(c){var f=a[c];if(f){return f.unsubscribe(e,g);}}else{var b=true;for(var d in a){if(YAHOO.lang.hasOwnProperty(a,d)){b=b&&a[d].unsubscribe(e,g);",
                "-}}return b;}return false;},unsubscribeAll:function(a){return this.unsubscribe(a);},createEvent:function(b,g){this.__yui_events=this.__yui_events||{};var e=g||{},d=this.__yui_events,f;if(d[b]){}else{f=new YAHOO.util.CustomEvent(b,e.scope||this,e.silent,YAHOO.util.CustomEvent.FLAT,e.fireOnce);d[b]=f;if(e.onSubscribeCallback){f.subscribeEvent.subscribe(e.onSubscribeCallback);}this.__yui_subscribers=this.__yui_subscribers||{};var a=this.__yui_subscribers[b];if(a){for(var c=0;c<a.length;++c){f.subscribe(a[c].fn,a[c].obj,a[c].overrideContext);}}}return d[b];},fireEvent:function(b){this.__yui_events=this.__yui_events||{};var d=this.__yui_events[b];if(!d){return null;}var a=[];for(var c=1;c<arguments.length;++c){a.push(arguments[c]);}return d.fire.apply(d,a);},hasEvent:function(a){if(this.__yui_events){if(this.__yui_events[a]){return true;}}return false;}};(function(){var a=YAHOO.util.Event,c=YAHOO.lang;YAHOO.util.KeyListener=function(d,i,e,f){if(!d){}else{if(!i){}else{if(!e){}}}if(!f){f=YAHOO.util.KeyListener.KEYDOWN;}var g=new YAHOO.util.CustomEvent(\"keyPressed\");this.enabledEvent=new YAHOO.util.CustomEvent(\"enabled\");this.disabledEvent=new YAHOO.util.CustomEvent(\"disabled\");if(c.isString(d)){d=document.getElementById(d);}if(c.isFunction(e)){g.subscribe(e);}else{g.subscribe(e.fn,e.scope,e.correctScope);}function h(o,n){if(!i.shift){i.shift=false;}if(!i.alt){i.alt=false;}if(!i.ctrl){i.ctrl=false;}if(o.shiftKey==i.shift&&o.altKey==i.alt&&o.ctrlKey==i.ctrl){var j,m=i.keys,l;if(YAHOO.lang.isArray(m)){for(var k=0;k<m.length;k++){j=m[k];l=a.getCharCode(o);if(j==l){g.fire(l,o);break;}}}else{l=a.getCharCode(o);if(m==l){g.fire(l,o);}}}}this.enable=function(){if(!this.enabled){a.on(d,f,h);this.enabledEvent.fire(i);}this.enabled=true;};this.disable=function(){if(this.enabled){a.removeListener(d,f,h);this.disabledEvent.fire(i);}this.enabled=false;};this.toString=function(){return\"KeyListener [\"+i.keys+\"] \"+d.tagName+(d.id?\"[\"+d.id+\"]\":\"\");};};var b=YAHOO.util.KeyListener;b.KEYDOWN=\"keydown\";b.KEYUP=\"keyup\";b.KEY={ALT:18,BACK_SPACE:8,CAPS_LOCK:20,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,META:224,NUM_LOCK:144,PAGE_DOWN:34,PAGE_UP:33,PAUSE:19,PRINTSCREEN:44,RIGHT:39,SCROLL_LOCK:145,SHIFT:16,SPACE:32,TAB:9,UP:38};})();YAHOO.register(\"event\",YAHOO.util.Event,{version:\"2.9.0\",build:\"2800\"});YAHOO.register(\"yahoo-dom-event\", YAHOO, {version: \"2.9.0\", build: \"2800\"});",
                "\\ No newline at end of file",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader-min.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader-min.js",
                "deleted file mode 100644",
                "index 9934bb0b25..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader-min.js",
                "+++ /dev/null",
                "@@ -1,11 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-if(typeof YAHOO==\"undefined\"||!YAHOO){var YAHOO={};}YAHOO.namespace=function(){var b=arguments,g=null,e,c,f;for(e=0;e<b.length;e=e+1){f=(\"\"+b[e]).split(\".\");g=YAHOO;for(c=(f[0]==\"YAHOO\")?1:0;c<f.length;c=c+1){g[f[c]]=g[f[c]]||{};g=g[f[c]];}}return g;};YAHOO.log=function(d,a,c){var b=YAHOO.widget.Logger;if(b&&b.log){return b.log(d,a,c);}else{return false;}};YAHOO.register=function(a,f,e){var k=YAHOO.env.modules,c,j,h,g,d;if(!k[a]){k[a]={versions:[],builds:[]};}c=k[a];j=e.version;h=e.build;g=YAHOO.env.listeners;c.name=a;c.version=j;c.build=h;c.versions.push(j);c.builds.push(h);c.mainClass=f;for(d=0;d<g.length;d=d+1){g[d](c);}if(f){f.VERSION=j;f.BUILD=h;}else{YAHOO.log(\"mainClass is undefined for module \"+a,\"warn\");}};YAHOO.env=YAHOO.env||{modules:[],listeners:[]};YAHOO.env.getVersion=function(a){return YAHOO.env.modules[a]||null;};YAHOO.env.parseUA=function(d){var e=function(i){var j=0;return parseFloat(i.replace(/\\./g,function(){return(j++==1)?\"\":\".\";}));},h=navigator,g={ie:0,opera:0,gecko:0,webkit:0,chrome:0,mobile:null,air:0,ipad:0,iphone:0,ipod:0,ios:null,android:0,webos:0,caja:h&&h.cajaVersion,secure:false,os:null},c=d||(navigator&&navigator.userAgent),f=window&&window.location,b=f&&f.href,a;g.secure=b&&(b.toLowerCase().indexOf(\"https\")===0);if(c){if((/windows|win32/i).test(c)){g.os=\"windows\";}else{if((/macintosh/i).test(c)){g.os=\"macintosh\";}else{if((/rhino/i).test(c)){g.os=\"rhino\";}}}if((/KHTML/).test(c)){g.webkit=1;}a=c.match(/AppleWebKit\\/([^\\s]*)/);if(a&&a[1]){g.webkit=e(a[1]);if(/ Mobile\\//.test(c)){g.mobile=\"Apple\";a=c.match(/OS ([^\\s]*)/);if(a&&a[1]){a=e(a[1].replace(\"_\",\".\"));}g.ios=a;g.ipad=g.ipod=g.iphone=0;a=c.match(/iPad|iPod|iPhone/);if(a&&a[0]){g[a[0].toLowerCase()]=g.ios;}}else{a=c.match(/NokiaN[^\\/]*|Android \\d\\.\\d|webOS\\/\\d\\.\\d/);if(a){g.mobile=a[0];}if(/webOS/.test(c)){g.mobile=\"WebOS\";a=c.match(/webOS\\/([^\\s]*);/);if(a&&a[1]){g.webos=e(a[1]);}}if(/ Android/.test(c)){g.mobile=\"Android\";a=c.match(/Android ([^\\s]*);/);if(a&&a[1]){g.android=e(a[1]);}}}a=c.match(/Chrome\\/([^\\s]*)/);if(a&&a[1]){g.chrome=e(a[1]);}else{a=c.match(/AdobeAIR\\/([^\\s]*)/);if(a){g.air=a[0];}}}if(!g.webkit){a=c.match(/Opera[\\s\\/]([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);a=c.match(/Version\\/([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);}a=c.match(/Opera Mini[^;]*/);if(a){g.mobile=a[0];}}else{a=c.match(/MSIE\\s([^;]*)/);if(a&&a[1]){g.ie=e(a[1]);}else{a=c.match(/Gecko\\/([^\\s]*)/);if(a){g.gecko=1;a=c.match(/rv:([^\\s\\)]*)/);if(a&&a[1]){g.gecko=e(a[1]);}}}}}}return g;};YAHOO.env.ua=YAHOO.env.parseUA();(function(){YAHOO.namespace(\"util\",\"widget\",\"example\");if(\"undefined\"!==typeof YAHOO_config){var b=YAHOO_config.listener,a=YAHOO.env.listeners,d=true,c;if(b){for(c=0;c<a.length;c++){if(a[c]==b){d=false;break;}}if(d){a.push(b);}}}})();YAHOO.lang=YAHOO.lang||{};(function(){var f=YAHOO.lang,a=Object.prototype,c=\"[object Array]\",h=\"[object Function]\",i=\"[object Object]\",b=[],g={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"/\":\"&#x2F;\",\"`\":\"&#x60;\"},d=[\"toString\",\"valueOf\"],e={isArray:function(j){return a.toString.apply(j)===c;},isBoolean:function(j){return typeof j===\"boolean\";},isFunction:function(j){return(typeof j===\"function\")||a.toString.apply(j)===h;},isNull:function(j){return j===null;},isNumber:function(j){return typeof j===\"number\"&&isFinite(j);},isObject:function(j){return(j&&(typeof j===\"object\"||f.isFunction(j)))||false;},isString:function(j){return typeof j===\"string\";},isUndefined:function(j){return typeof j===\"undefined\";},_IEEnumFix:(YAHOO.env.ua.ie)?function(l,k){var j,n,m;for(j=0;j<d.length;j=j+1){n=d[j];m=k[n];if(f.isFunction(m)&&m!=a[n]){l[n]=m;}}}:function(){},escapeHTML:function(j){return j.replace(/[&<>\"'\\/`]/g,function(k){return g[k];});},extend:function(m,n,l){if(!n||!m){throw new Error(\"extend failed, please check that \"+\"all dependencies are included.\");}var k=function(){},j;k.prototype=n.prototype;m.prototype=new k();m.prototype.constructor=m;m.superclass=n.prototype;if(n.prototype.constructor==a.constructor){n.prototype.constructor=n;}if(l){for(j in l){if(f.hasOwnProperty(l,j)){m.prototype[j]=l[j];}}f._IEEnumFix(m.prototype,l);}},augmentObject:function(n,m){if(!m||!n){throw new Error(\"Absorb failed, verify dependencies.\");}var j=arguments,l,o,k=j[2];if(k&&k!==true){for(l=2;l<j.length;l=l+1){n[j[l]]=m[j[l]];}}else{for(o in m){if(k||!(o in n)){n[o]=m[o];}}f._IEEnumFix(n,m);}return n;},augmentProto:function(m,l){if(!l||!m){throw new Error(\"Augment failed, verify dependencies.\");}var j=[m.prototype,l.prototype],k;for(k=2;k<arguments.length;k=k+1){j.push(arguments[k]);}f.augmentObject.apply(this,j);return m;},dump:function(j,p){var l,n,r=[],t=\"{...}\",k=\"f(){...}\",q=\", \",m=\" => \";if(!f.isObject(j)){return j+\"\";}else{if(j instanceof Date||(\"nodeType\" in j&&\"tagName\" in j)){return j;}else{if(f.isFunction(j)){return k;}}}p=(f.isNumber(p))?p:3;if(f.isArray(j)){r.push(\"[\");for(l=0,n=j.length;l<n;l=l+1){if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}if(r.length>1){r.pop();}r.push(\"]\");}else{r.push(\"{\");for(l in j){if(f.hasOwnProperty(j,l)){r.push(l+m);if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}}if(r.length>1){r.pop();}r.push(\"}\");}return r.join(\"\");},substitute:function(x,y,E,l){var D,C,B,G,t,u,F=[],p,z=x.length,A=\"dump\",r=\" \",q=\"{\",m=\"}\",n,w;for(;;){D=x.lastIndexOf(q,z);if(D<0){break;}C=x.indexOf(m,D);if(D+1>C){break;}p=x.substring(D+1,C);G=p;u=null;B=G.indexOf(r);if(B>-1){u=G.substring(B+1);G=G.substring(0,B);}t=y[G];if(E){t=E(G,t,u);}if(f.isObject(t)){if(f.isArray(t)){t=f.dump(t,parseInt(u,10));}else{u=u||\"\";n=u.indexOf(A);if(n>-1){u=u.substring(4);}w=t.toString();if(w===i||n>-1){t=f.dump(t,parseInt(u,10));}else{t=w;}}}else{if(!f.isString(t)&&!f.isNumber(t)){t=\"~-\"+F.length+\"-~\";F[F.length]=p;}}x=x.substring(0,D)+t+x.substring(C+1);if(l===false){z=D-1;}}for(D=F.length-1;D>=0;D=D-1){x=x.replace(new RegExp(\"~-\"+D+\"-~\"),\"{\"+F[D]+\"}\",\"g\");}return x;},trim:function(j){try{return j.replace(/^\\s+|\\s+$/g,\"\");}catch(k){return j;",
                "-}},merge:function(){var n={},k=arguments,j=k.length,m;for(m=0;m<j;m=m+1){f.augmentObject(n,k[m],true);}return n;},later:function(t,k,u,n,p){t=t||0;k=k||{};var l=u,s=n,q,j;if(f.isString(u)){l=k[u];}if(!l){throw new TypeError(\"method undefined\");}if(!f.isUndefined(n)&&!f.isArray(s)){s=[n];}q=function(){l.apply(k,s||b);};j=(p)?setInterval(q,t):setTimeout(q,t);return{interval:p,cancel:function(){if(this.interval){clearInterval(j);}else{clearTimeout(j);}}};},isValue:function(j){return(f.isObject(j)||f.isString(j)||f.isNumber(j)||f.isBoolean(j));}};f.hasOwnProperty=(a.hasOwnProperty)?function(j,k){return j&&j.hasOwnProperty&&j.hasOwnProperty(k);}:function(j,k){return !f.isUndefined(j[k])&&j.constructor.prototype[k]!==j[k];};e.augmentObject(f,e,true);YAHOO.util.Lang=f;f.augment=f.augmentProto;YAHOO.augment=f.augmentProto;YAHOO.extend=f.extend;})();YAHOO.register(\"yahoo\",YAHOO,{version:\"2.9.0\",build:\"2800\"});YAHOO.util.Get=function(){var m={},k=0,r=0,l=false,n=YAHOO.env.ua,s=YAHOO.lang,q,d,e,i=function(x,t,y){var u=y||window,z=u.document,A=z.createElement(x),v;for(v in t){if(t.hasOwnProperty(v)){A.setAttribute(v,t[v]);}}return A;},h=function(u,v,t){var w={id:\"yui__dyn_\"+(r++),type:\"text/css\",rel:\"stylesheet\",href:u};if(t){s.augmentObject(w,t);}return i(\"link\",w,v);},p=function(u,v,t){var w={id:\"yui__dyn_\"+(r++),type:\"text/javascript\",src:u};if(t){s.augmentObject(w,t);}return i(\"script\",w,v);},a=function(t,u){return{tId:t.tId,win:t.win,data:t.data,nodes:t.nodes,msg:u,purge:function(){d(this.tId);}};},b=function(t,w){var u=m[w],v=(s.isString(t))?u.win.document.getElementById(t):t;if(!v){q(w,\"target node not found: \"+t);}return v;},c=function(w){YAHOO.log(\"Finishing transaction \"+w);var u=m[w],v,t;u.finished=true;if(u.aborted){v=\"transaction \"+w+\" was aborted\";q(w,v);return;}if(u.onSuccess){t=u.scope||u.win;u.onSuccess.call(t,a(u));}},o=function(v){YAHOO.log(\"Timeout \"+v,\"info\",\"get\");var u=m[v],t;if(u.onTimeout){t=u.scope||u;u.onTimeout.call(t,a(u));}},f=function(v,A){YAHOO.log(\"_next: \"+v+\", loaded: \"+A,\"info\",\"Get\");var u=m[v],D=u.win,C=D.document,B=C.getElementsByTagName(\"head\")[0],x,y,t,E,z;if(u.timer){u.timer.cancel();}if(u.aborted){y=\"transaction \"+v+\" was aborted\";q(v,y);return;}if(A){u.url.shift();if(u.varName){u.varName.shift();}}else{u.url=(s.isString(u.url))?[u.url]:u.url;if(u.varName){u.varName=(s.isString(u.varName))?[u.varName]:u.varName;}}if(u.url.length===0){if(u.type===\"script\"&&n.webkit&&n.webkit<420&&!u.finalpass&&!u.varName){z=p(null,u.win,u.attributes);z.innerHTML='YAHOO.util.Get._finalize(\"'+v+'\");';u.nodes.push(z);B.appendChild(z);}else{c(v);}return;}t=u.url[0];if(!t){u.url.shift();YAHOO.log(\"skipping empty url\");return f(v);}YAHOO.log(\"attempting to load \"+t,\"info\",\"Get\");if(u.timeout){u.timer=s.later(u.timeout,u,o,v);}if(u.type===\"script\"){x=p(t,D,u.attributes);}else{x=h(t,D,u.attributes);}e(u.type,x,v,t,D,u.url.length);u.nodes.push(x);if(u.insertBefore){E=b(u.insertBefore,v);if(E){E.parentNode.insertBefore(x,E);}}else{B.appendChild(x);}YAHOO.log(\"Appending node: \"+t,\"info\",\"Get\");if((n.webkit||n.gecko)&&u.type===\"css\"){f(v,t);}},j=function(){if(l){return;}l=true;var t,u;for(t in m){if(m.hasOwnProperty(t)){u=m[t];if(u.autopurge&&u.finished){d(u.tId);delete m[t];}}}l=false;},g=function(u,t,v){var x=\"q\"+(k++),w;v=v||{};if(k%YAHOO.util.Get.PURGE_THRESH===0){j();}m[x]=s.merge(v,{tId:x,type:u,url:t,finished:false,aborted:false,nodes:[]});w=m[x];w.win=w.win||window;w.scope=w.scope||w.win;w.autopurge=(\"autopurge\" in w)?w.autopurge:(u===\"script\")?true:false;w.attributes=w.attributes||{};w.attributes.charset=v.charset||w.attributes.charset||\"utf-8\";s.later(0,w,f,x);return{tId:x};};e=function(H,z,x,u,D,E,G){var F=G||f,B,t,I,v,J,A,C,y;if(n.ie){z.onreadystatechange=function(){B=this.readyState;if(\"loaded\"===B||\"complete\"===B){YAHOO.log(x+\" onload \"+u,\"info\",\"Get\");z.onreadystatechange=null;F(x,u);}};}else{if(n.webkit){if(H===\"script\"){if(n.webkit>=420){z.addEventListener(\"load\",function(){YAHOO.log(x+\" DOM2 onload \"+u,\"info\",\"Get\");F(x,u);});}else{t=m[x];if(t.varName){v=YAHOO.util.Get.POLL_FREQ;YAHOO.log(\"Polling for \"+t.varName[0]);t.maxattempts=YAHOO.util.Get.TIMEOUT/v;t.attempts=0;t._cache=t.varName[0].split(\".\");t.timer=s.later(v,t,function(w){I=this._cache;A=I.length;J=this.win;for(C=0;C<A;C=C+1){J=J[I[C]];if(!J){this.attempts++;if(this.attempts++>this.maxattempts){y=\"Over retry limit, giving up\";t.timer.cancel();q(x,y);}else{YAHOO.log(I[C]+\" failed, retrying\");}return;}}YAHOO.log(\"Safari poll complete\");t.timer.cancel();F(x,u);},null,true);}else{s.later(YAHOO.util.Get.POLL_FREQ,null,F,[x,u]);}}}}else{z.onload=function(){YAHOO.log(x+\" onload \"+u,\"info\",\"Get\");F(x,u);};}}};q=function(w,v){YAHOO.log(\"get failure: \"+v,\"warn\",\"Get\");var u=m[w],t;if(u.onFailure){t=u.scope||u.win;u.onFailure.call(t,a(u,v));}};d=function(z){if(m[z]){var t=m[z],u=t.nodes,x=u.length,C=t.win.document,A=C.getElementsByTagName(\"head\")[0],v,y,w,B;if(t.insertBefore){v=b(t.insertBefore,z);if(v){A=v.parentNode;}}for(y=0;y<x;y=y+1){w=u[y];if(w.clearAttributes){w.clearAttributes();}else{for(B in w){if(w.hasOwnProperty(B)){delete w[B];}}}A.removeChild(w);}t.nodes=[];}};return{POLL_FREQ:10,PURGE_THRESH:20,TIMEOUT:2000,_finalize:function(t){YAHOO.log(t+\" finalized \",\"info\",\"Get\");s.later(0,null,c,t);},abort:function(u){var v=(s.isString(u))?u:u.tId,t=m[v];if(t){YAHOO.log(\"Aborting \"+v,\"info\",\"Get\");t.aborted=true;}},script:function(t,u){return g(\"script\",t,u);},css:function(t,u){return g(\"css\",t,u);}};}();YAHOO.register(\"get\",YAHOO.util.Get,{version:\"2.9.0\",build:\"2800\"});(function(){var Y=YAHOO,util=Y.util,lang=Y.lang,env=Y.env,PROV=\"_provides\",SUPER=\"_supersedes\",REQ=\"expanded\",AFTER=\"_after\",VERSION=\"2.9.0\";var YUI={dupsAllowed:{\"yahoo\":true,\"get\":true},info:{\"root\":VERSION+\"/build/\",\"base\":\"http://yui.yahooapis.com/\"+VERSION+\"/build/\",\"comboBase\":\"http://yui.yahooapis.com/combo?\",\"skin\":{\"defaultSkin\":\"sam\",\"base\":\"assets/skins/\",\"path\":\"skin.css\",\"after\":[\"reset\",\"fonts\",\"grids\",\"base\"],\"rollup\":3},dupsAllowed:[\"yahoo\",\"get\"],\"moduleInfo\":{\"animation\":{\"type\":\"js\",\"path\":\"animation/animation-min.js\",\"requires\":[\"dom\",\"event\"]},\"autocomplete\":{\"type\":\"js\",\"path\":\"autocomplete/autocomplete-min.js\",\"requires\":[\"dom\",\"event\",\"datasource\"],\"optional\":[\"connection\",\"animation\"],\"skinnable\":true},\"base\":{\"type\":\"css\",\"path\":\"base/base-min.css\",\"after\":[\"reset\",\"fonts\",\"grids\"]},\"button\":{\"type\":\"js\",\"path\":\"button/button-min.js\",\"requires\":[\"element\"],\"optional\":[\"menu\"],\"skinnable\":true},\"calendar\":{\"type\":\"js\",\"path\":\"calendar/calendar-min.js\",\"requires\":[\"event\",\"dom\"],supersedes:[\"datemath\"],\"skinnable\":true},\"carousel\":{\"type\":\"js\",\"path\":\"carousel/carousel-min.js\",\"requires\":[\"element\"],\"optional\":[\"animation\"],\"skinnable\":true},\"charts\":{\"type\":\"js\",\"path\":\"charts/charts-min.js\",\"requires\":[\"element\",\"json\",\"datasource\",\"swf\"]},\"colorpicker\":{\"type\":\"js\",\"path\":\"colorpicker/colorpicker-min.js\",\"requires\":[\"slider\",\"element\"],\"optional\":[\"animation\"],\"skinnable\":true},\"connection\":{\"type\":\"js\",\"path\":\"connection/connection-min.js\",\"requires\":[\"event\"],\"supersedes\":[\"connectioncore\"]},\"connectioncore\":{\"type\":\"js\",\"path\":\"connection/connection_core-min.js\",\"requires\":[\"event\"],\"pkg\":\"connection\"},\"container\":{\"type\":\"js\",\"path\":\"container/container-min.js\",\"requires\":[\"dom\",\"event\"],\"optional\":[\"dragdrop\",\"animation\",\"connection\"],\"supersedes\":[\"containercore\"],\"skinnable\":true},\"containercore\":{\"type\":\"js\",\"path\":\"container/container_core-min.js\",\"requires\":[\"dom\",\"event\"],\"pkg\":\"container\"},\"cookie\":{\"type\":\"js\",\"path\":\"cookie/cookie-min.js\",\"requires\":[\"yahoo\"]},\"datasource\":{\"type\":\"js\",\"path\":\"datasource/datasource-min.js\",\"requires\":[\"event\"],\"optional\":[\"connection\"]},\"datatable\":{\"type\":\"js\",\"path\":\"datatable/datatable-min.js\",\"requires\":[\"element\",\"datasource\"],\"optional\":[\"calendar\",\"dragdrop\",\"paginator\"],\"skinnable\":true},datemath:{\"type\":\"js\",\"path\":\"datemath/datemath-min.js\",\"requires\":[\"yahoo\"]},\"dom\":{\"type\":\"js\",\"path\":\"dom/dom-min.js\",\"requires\":[\"yahoo\"]},\"dragdrop\":{\"type\":\"js\",\"path\":\"dragdrop/dragdrop-min.js\",\"requires\":[\"dom\",\"event\"]},\"editor\":{\"type\":\"js\",\"path\":\"editor/editor-min.js\",\"requires\":[\"menu\",\"element\",\"button\"],\"optional\":[\"animation\",\"dragdrop\"],\"supersedes\":[\"simpleeditor\"],\"skinnable\":true},\"element\":{\"type\":\"js\",\"path\":\"element/element-min.js\",\"requires\":[\"dom\",\"event\"],\"optional\":[\"event-mouseenter\",\"event-delegate\"]},\"element-delegate\":{\"type\":\"js\",\"path\":\"element-delegate/element-delegate-min.js\",\"requires\":[\"element\"]},\"event\":{\"type\":\"js\",\"path\":\"event/event-min.js\",\"requires\":[\"yahoo\"]},\"event-simulate\":{\"type\":\"js\",\"path\":\"event-simulate/event-simulate-min.js\",\"requires\":[\"event\"]},\"event-delegate\":{\"type\":\"js\",\"path\":\"event-delegate/event-delegate-min.js\",\"requires\":[\"event\"],\"optional\":[\"selector\"]},\"event-mouseenter\":{\"type\":\"js\",\"path\":\"event-mouseenter/event-mouseenter-min.js\",\"requires\":[\"dom\",\"event\"]},\"fonts\":{\"type\":\"css\",\"path\":\"fonts/fonts-min.css\"},\"get\":{\"type\":\"js\",\"path\":\"get/get-min.js\",\"requires\":[\"yahoo\"]},\"grids\":{\"type\":\"css\",\"path\":\"grids/grids-min.css\",\"requires\":[\"fonts\"],\"optional\":[\"reset\"]},\"history\":{\"type\":\"js\",\"path\":\"history/history-min.js\",\"requires\":[\"event\"]},\"imagecropper\":{\"type\":\"js\",\"path\":\"imagecropper/imagecropper-min.js\",\"requires\":[\"dragdrop\",\"element\",\"resize\"],\"skinnable\":true},\"imageloader\":{\"type\":\"js\",\"path\":\"imageloader/imageloader-min.js\",\"requires\":[\"event\",\"dom\"]},\"json\":{\"type\":\"js\",\"path\":\"json/json-min.js\",\"requires\":[\"yahoo\"]},\"layout\":{\"type\":\"js\",\"path\":\"layout/layout-min.js\",\"requires\":[\"element\"],\"optional\":[\"animation\",\"dragdrop\",\"resize\",\"selector\"],\"skinnable\":true},\"logger\":{\"type\":\"js\",\"path\":\"logger/logger-min.js\",\"requires\":[\"event\",\"dom\"],\"optional\":[\"dragdrop\"],\"skinnable\":true},\"menu\":{\"type\":\"js\",\"path\":\"menu/menu-min.js\",\"requires\":[\"containercore\"],\"skinnable\":true},\"paginator\":{\"type\":\"js\",\"path\":\"paginator/paginator-min.js\",\"requires\":[\"element\"],\"skinnable\":true},\"profiler\":{\"type\":\"js\",\"path\":\"profiler/profiler-min.js\",\"requires\":[\"yahoo\"]},\"profilerviewer\":{\"type\":\"js\",\"path\":\"profilerviewer/profilerviewer-min.js\",\"requires\":[\"profiler\",\"yuiloader\",\"element\"],\"skinnable\":true},\"progressbar\":{\"type\":\"js\",\"path\":\"progressbar/progressbar-min.js\",\"requires\":[\"element\"],\"optional\":[\"animation\"],\"skinnable\":true},\"reset\":{\"type\":\"css\",\"path\":\"reset/reset-min.css\"},\"reset-fonts-grids\":{\"type\":\"css\",\"path\":\"reset-fonts-grids/reset-fonts-grids.css\",\"supersedes\":[\"reset\",\"fonts\",\"grids\",\"reset-fonts\"],\"rollup\":4},\"reset-fonts\":{\"type\":\"css\",\"path\":\"reset-fonts/reset-fonts.css\",\"supersedes\":[\"reset\",\"fonts\"],\"rollup\":2},\"resize\":{\"type\":\"js\",\"path\":\"resize/resize-min.js\",\"requires\":[\"dragdrop\",\"element\"],\"optional\":[\"animation\"],\"skinnable\":true},\"selector\":{\"type\":\"js\",\"path\":\"selector/selector-min.js\",\"requires\":[\"yahoo\",\"dom\"]},\"simpleeditor\":{\"type\":\"js\",\"path\":\"editor/simpleeditor-min.js\",\"requires\":[\"element\"],\"optional\":[\"containercore\",\"menu\",\"button\",\"animation\",\"dragdrop\"],\"skinnable\":true,\"pkg\":\"editor\"},\"slider\":{\"type\":\"js\",\"path\":\"slider/slider-min.js\",\"requires\":[\"dragdrop\"],\"optional\":[\"animation\"],\"skinnable\":true},\"storage\":{\"type\":\"js\",\"path\":\"storage/storage-min.js\",\"requires\":[\"yahoo\",\"event\",\"cookie\"],\"optional\":[\"swfstore\"]},\"stylesheet\":{\"type\":\"js\",\"path\":\"stylesheet/stylesheet-min.js\",\"requires\":[\"yahoo\"]},\"swf\":{\"type\":\"js\",\"path\":\"swf/swf-min.js\",\"requires\":[\"element\"],\"supersedes\":[\"swfdetect\"]},\"swfdetect\":{\"type\":\"js\",\"path\":\"swfdetect/swfdetect-min.js\",\"requires\":[\"yahoo\"]},\"swfstore\":{\"type\":\"js\",\"path\":\"swfstore/swfstore-min.js\",\"requires\":[\"element\",\"cookie\",\"swf\"]},\"tabview\":{\"type\":\"js\",\"path\":\"tabview/tabview-min.js\",\"requires\":[\"element\"],\"optional\":[\"connection\"],\"skinnable\":true},\"treeview\":{\"type\":\"js\",\"path\":\"treeview/treeview-min.js\",\"requires\":[\"event\",\"dom\"],\"optional\":[\"json\",\"animation\",\"calendar\"],\"skinnable\":true},\"uploader\":{\"type\":\"js\",\"path\":\"uploader/uploader-min.js\",\"requires\":[\"element\"]},\"utilities\":{\"type\":\"js\",\"path\":\"utilities/utilities.js\",\"supersedes\":[\"yahoo\",\"event\",\"dragdrop\",\"animation\",\"dom\",\"connection\",\"element\",\"yahoo-dom-event\",\"get\",\"yuiloader\",\"yuiloader-dom-event\"],\"rollup\":8},\"yahoo\":{\"type\":\"js\",\"path\":\"yahoo/yahoo-min.js\"},\"yahoo-dom-event\":{\"type\":\"js\",\"path\":\"yahoodomevent/yahoo-dom-event.js\",\"supersedes\":[\"yahoo\",\"event\",\"dom\"],\"rollup\":3},\"yuiloader\":{\"type\":\"js\",\"path\":\"yuiloader/yuiloader-min.js\",\"supersedes\":[\"yahoo\",\"get\"]},\"yuiloader-dom-event\":{\"type\":\"js\",\"path\":\"yuiloader-dom-event/yuiloader-dom-event.js\",\"supersedes\":[\"yahoo\",\"dom\",\"event\",\"get\",\"yuiloader\",\"yahoo-dom-event\"],\"rollup\":5},\"yuitest\":{\"type\":\"js\",\"path\":\"yuitest/yuitest-min.js\",\"requires\":[\"logger\"],\"optional\":[\"event-simulate\"],\"skinnable\":true}}},ObjectUtil:{appendArray:function(o,a){if(a){for(var i=0;",
                "-i<a.length;i=i+1){o[a[i]]=true;}}},keys:function(o,ordered){var a=[],i;for(i in o){if(lang.hasOwnProperty(o,i)){a.push(i);}}return a;}},ArrayUtil:{appendArray:function(a1,a2){Array.prototype.push.apply(a1,a2);},indexOf:function(a,val){for(var i=0;i<a.length;i=i+1){if(a[i]===val){return i;}}return -1;},toObject:function(a){var o={};for(var i=0;i<a.length;i=i+1){o[a[i]]=true;}return o;},uniq:function(a){return YUI.ObjectUtil.keys(YUI.ArrayUtil.toObject(a));}}};YAHOO.util.YUILoader=function(o){this._internalCallback=null;this._useYahooListener=false;this.onSuccess=null;this.onFailure=Y.log;this.onProgress=null;this.onTimeout=null;this.scope=this;this.data=null;this.insertBefore=null;this.charset=null;this.varName=null;this.base=YUI.info.base;this.comboBase=YUI.info.comboBase;this.combine=false;this.root=YUI.info.root;this.timeout=0;this.ignore=null;this.force=null;this.allowRollup=true;this.filter=null;this.required={};this.moduleInfo=lang.merge(YUI.info.moduleInfo);this.rollups=null;this.loadOptional=false;this.sorted=[];this.loaded={};this.dirty=true;this.inserted={};var self=this;env.listeners.push(function(m){if(self._useYahooListener){self.loadNext(m.name);}});this.skin=lang.merge(YUI.info.skin);this._config(o);};Y.util.YUILoader.prototype={FILTERS:{RAW:{\"searchExp\":\"-min\\\\.js\",\"replaceStr\":\".js\"},DEBUG:{\"searchExp\":\"-min\\\\.js\",\"replaceStr\":\"-debug.js\"}},SKIN_PREFIX:\"skin-\",_config:function(o){if(o){for(var i in o){if(lang.hasOwnProperty(o,i)){if(i==\"require\"){this.require(o[i]);}else{this[i]=o[i];}}}}var f=this.filter;if(lang.isString(f)){f=f.toUpperCase();if(f===\"DEBUG\"){this.require(\"logger\");}if(!Y.widget.LogWriter){Y.widget.LogWriter=function(){return Y;};}this.filter=this.FILTERS[f];}},addModule:function(o){if(!o||!o.name||!o.type||(!o.path&&!o.fullpath)){return false;}o.ext=(\"ext\" in o)?o.ext:true;o.requires=o.requires||[];this.moduleInfo[o.name]=o;this.dirty=true;return true;},require:function(what){var a=(typeof what===\"string\")?arguments:what;this.dirty=true;YUI.ObjectUtil.appendArray(this.required,a);},_addSkin:function(skin,mod){var name=this.formatSkin(skin),info=this.moduleInfo,sinf=this.skin,ext=info[mod]&&info[mod].ext;if(!info[name]){this.addModule({\"name\":name,\"type\":\"css\",\"path\":sinf.base+skin+\"/\"+sinf.path,\"after\":sinf.after,\"rollup\":sinf.rollup,\"ext\":ext});}if(mod){name=this.formatSkin(skin,mod);if(!info[name]){var mdef=info[mod],pkg=mdef.pkg||mod;this.addModule({\"name\":name,\"type\":\"css\",\"after\":sinf.after,\"path\":pkg+\"/\"+sinf.base+skin+\"/\"+mod+\".css\",\"ext\":ext});}}return name;},getRequires:function(mod){if(!mod){return[];}if(!this.dirty&&mod.expanded){return mod.expanded;}mod.requires=mod.requires||[];var i,d=[],r=mod.requires,o=mod.optional,info=this.moduleInfo,m;for(i=0;i<r.length;i=i+1){d.push(r[i]);m=info[r[i]];YUI.ArrayUtil.appendArray(d,this.getRequires(m));}if(o&&this.loadOptional){for(i=0;i<o.length;i=i+1){d.push(o[i]);YUI.ArrayUtil.appendArray(d,this.getRequires(info[o[i]]));}}mod.expanded=YUI.ArrayUtil.uniq(d);return mod.expanded;},getProvides:function(name,notMe){var addMe=!(notMe),ckey=(addMe)?PROV:SUPER,m=this.moduleInfo[name],o={};if(!m){return o;}if(m[ckey]){return m[ckey];}var s=m.supersedes,done={},me=this;var add=function(mm){if(!done[mm]){done[mm]=true;lang.augmentObject(o,me.getProvides(mm));}};if(s){for(var i=0;i<s.length;i=i+1){add(s[i]);}}m[SUPER]=o;m[PROV]=lang.merge(o);m[PROV][name]=true;return m[ckey];},calculate:function(o){if(o||this.dirty){this._config(o);this._setup();this._explode();if(this.allowRollup){this._rollup();}this._reduce();this._sort();this.dirty=false;}},_setup:function(){var info=this.moduleInfo,name,i,j;for(name in info){if(lang.hasOwnProperty(info,name)){var m=info[name];if(m&&m.skinnable){var o=this.skin.overrides,smod;if(o&&o[name]){for(i=0;i<o[name].length;i=i+1){smod=this._addSkin(o[name][i],name);}}else{smod=this._addSkin(this.skin.defaultSkin,name);}if(YUI.ArrayUtil.indexOf(m.requires,smod)==-1){m.requires.push(smod);}}}}var l=lang.merge(this.inserted);if(!this._sandbox){l=lang.merge(l,env.modules);}if(this.ignore){YUI.ObjectUtil.appendArray(l,this.ignore);}if(this.force){for(i=0;i<this.force.length;i=i+1){if(this.force[i] in l){delete l[this.force[i]];}}}for(j in l){if(lang.hasOwnProperty(l,j)){lang.augmentObject(l,this.getProvides(j));}}this.loaded=l;},_explode:function(){var r=this.required,i,mod;for(i in r){if(lang.hasOwnProperty(r,i)){mod=this.moduleInfo[i];if(mod){var req=this.getRequires(mod);if(req){YUI.ObjectUtil.appendArray(r,req);}}}}},_skin:function(){},formatSkin:function(skin,mod){var s=this.SKIN_PREFIX+skin;if(mod){s=s+\"-\"+mod;}return s;},parseSkin:function(mod){if(mod.indexOf(this.SKIN_PREFIX)===0){var a=mod.split(\"-\");return{skin:a[1],module:a[2]};}return null;},_rollup:function(){var i,j,m,s,rollups={},r=this.required,roll,info=this.moduleInfo;if(this.dirty||!this.rollups){for(i in info){if(lang.hasOwnProperty(info,i)){m=info[i];if(m&&m.rollup){rollups[i]=m;}}}this.rollups=rollups;}for(;;){var rolled=false;for(i in rollups){if(!r[i]&&!this.loaded[i]){m=info[i];s=m.supersedes;roll=false;if(!m.rollup){continue;}var skin=(m.ext)?false:this.parseSkin(i),c=0;if(skin){for(j in r){if(lang.hasOwnProperty(r,j)){if(i!==j&&this.parseSkin(j)){c++;roll=(c>=m.rollup);if(roll){break;}}}}}else{for(j=0;j<s.length;j=j+1){if(this.loaded[s[j]]&&(!YUI.dupsAllowed[s[j]])){roll=false;break;}else{if(r[s[j]]){c++;roll=(c>=m.rollup);if(roll){break;}}}}}if(roll){r[i]=true;rolled=true;this.getRequires(m);}}}if(!rolled){break;}}},_reduce:function(){var i,j,s,m,r=this.required;for(i in r){if(i in this.loaded){delete r[i];}else{var skinDef=this.parseSkin(i);if(skinDef){if(!skinDef.module){var skin_pre=this.SKIN_PREFIX+skinDef.skin;for(j in r){if(lang.hasOwnProperty(r,j)){m=this.moduleInfo[j];var ext=m&&m.ext;if(!ext&&j!==i&&j.indexOf(skin_pre)>-1){delete r[j];}}}}}else{m=this.moduleInfo[i];s=m&&m.supersedes;if(s){for(j=0;j<s.length;j=j+1){if(s[j] in r){delete r[s[j]];}}}}}}},_onFailure:function(msg){YAHOO.log(\"Failure\",\"info\",\"loader\");",
                "-var f=this.onFailure;if(f){f.call(this.scope,{msg:\"failure: \"+msg,data:this.data,success:false});}},_onTimeout:function(){YAHOO.log(\"Timeout\",\"info\",\"loader\");var f=this.onTimeout;if(f){f.call(this.scope,{msg:\"timeout\",data:this.data,success:false});}},_sort:function(){var s=[],info=this.moduleInfo,loaded=this.loaded,checkOptional=!this.loadOptional,me=this;var requires=function(aa,bb){var mm=info[aa];if(loaded[bb]||!mm){return false;}var ii,rr=mm.expanded,after=mm.after,other=info[bb],optional=mm.optional;if(rr&&YUI.ArrayUtil.indexOf(rr,bb)>-1){return true;}if(after&&YUI.ArrayUtil.indexOf(after,bb)>-1){return true;}if(checkOptional&&optional&&YUI.ArrayUtil.indexOf(optional,bb)>-1){return true;}var ss=info[bb]&&info[bb].supersedes;if(ss){for(ii=0;ii<ss.length;ii=ii+1){if(requires(aa,ss[ii])){return true;}}}if(mm.ext&&mm.type==\"css\"&&!other.ext&&other.type==\"css\"){return true;}return false;};for(var i in this.required){if(lang.hasOwnProperty(this.required,i)){s.push(i);}}var p=0;for(;;){var l=s.length,a,b,j,k,moved=false;for(j=p;j<l;j=j+1){a=s[j];for(k=j+1;k<l;k=k+1){if(requires(a,s[k])){b=s.splice(k,1);s.splice(j,0,b[0]);moved=true;break;}}if(moved){break;}else{p=p+1;}}if(!moved){break;}}this.sorted=s;},toString:function(){var o={type:\"YUILoader\",base:this.base,filter:this.filter,required:this.required,loaded:this.loaded,inserted:this.inserted};lang.dump(o,1);},_combine:function(){this._combining=[];var self=this,s=this.sorted,len=s.length,js=this.comboBase,css=this.comboBase,target,startLen=js.length,i,m,type=this.loadType;YAHOO.log(\"type \"+type);for(i=0;i<len;i=i+1){m=this.moduleInfo[s[i]];if(m&&!m.ext&&(!type||type===m.type)){target=this.root+m.path;target+=\"&\";if(m.type==\"js\"){js+=target;}else{css+=target;}this._combining.push(s[i]);}}if(this._combining.length){YAHOO.log(\"Attempting to combine: \"+this._combining,\"info\",\"loader\");var callback=function(o){var c=this._combining,len=c.length,i,m;for(i=0;i<len;i=i+1){this.inserted[c[i]]=true;}this.loadNext(o.data);},loadScript=function(){if(js.length>startLen){YAHOO.util.Get.script(self._filter(js),{data:self._loading,onSuccess:callback,onFailure:self._onFailure,onTimeout:self._onTimeout,insertBefore:self.insertBefore,charset:self.charset,timeout:self.timeout,scope:self});}else{this.loadNext();}};if(css.length>startLen){YAHOO.util.Get.css(this._filter(css),{data:this._loading,onSuccess:loadScript,onFailure:this._onFailure,onTimeout:this._onTimeout,insertBefore:this.insertBefore,charset:this.charset,timeout:this.timeout,scope:self});}else{loadScript();}return;}else{this.loadNext(this._loading);}},insert:function(o,type){this.calculate(o);this._loading=true;this.loadType=type;if(this.combine){return this._combine();}if(!type){var self=this;this._internalCallback=function(){self._internalCallback=null;self.insert(null,\"js\");};this.insert(null,\"css\");return;}this.loadNext();},sandbox:function(o,type){var self=this,success=function(o){var idx=o.argument[0],name=o.argument[2];self._scriptText[idx]=o.responseText;if(self.onProgress){self.onProgress.call(self.scope,{name:name,scriptText:o.responseText,xhrResponse:o,data:self.data});}self._loadCount++;if(self._loadCount>=self._stopCount){var v=self.varName||\"YAHOO\";var t=\"(function() {\\n\";var b=\"\\nreturn \"+v+\";\\n})();\";var ref=eval(t+self._scriptText.join(\"\\n\")+b);self._pushEvents(ref);if(ref){self.onSuccess.call(self.scope,{reference:ref,data:self.data});}else{self._onFailure.call(self.varName+\" reference failure\");}}},failure=function(o){self.onFailure.call(self.scope,{msg:\"XHR failure\",xhrResponse:o,data:self.data});};self._config(o);if(!self.onSuccess){throw new Error(\"You must supply an onSuccess handler for your sandbox\");}self._sandbox=true;if(!type||type!==\"js\"){self._internalCallback=function(){self._internalCallback=null;self.sandbox(null,\"js\");};self.insert(null,\"css\");return;}if(!util.Connect){var ld=new YAHOO.util.YUILoader();ld.insert({base:self.base,filter:self.filter,require:\"connection\",insertBefore:self.insertBefore,charset:self.charset,onSuccess:function(){self.sandbox(null,\"js\");},scope:self},\"js\");return;}self._scriptText=[];self._loadCount=0;self._stopCount=self.sorted.length;self._xhr=[];self.calculate();var s=self.sorted,l=s.length,i,m,url;for(i=0;i<l;i=i+1){m=self.moduleInfo[s[i]];if(!m){self._onFailure(\"undefined module \"+m);for(var j=0;j<self._xhr.length;j=j+1){self._xhr[j].abort();}return;}if(m.type!==\"js\"){self._loadCount++;continue;}url=m.fullpath;url=(url)?self._filter(url):self._url(m.path);var xhrData={success:success,failure:failure,scope:self,argument:[i,url,s[i]]};self._xhr.push(util.Connect.asyncRequest(\"GET\",url,xhrData));}},loadNext:function(mname){if(!this._loading){return;}var self=this,donext=function(o){self.loadNext(o.data);},successfn,s=this.sorted,len=s.length,i,fn,m,url;if(mname){if(mname!==this._loading){return;}this.inserted[mname]=true;if(this.onProgress){this.onProgress.call(this.scope,{name:mname,data:this.data});}}for(i=0;i<len;i=i+1){if(s[i] in this.inserted){continue;}if(s[i]===this._loading){return;}m=this.moduleInfo[s[i]];if(!m){this.onFailure.call(this.scope,{msg:\"undefined module \"+m,data:this.data});return;}if(!this.loadType||this.loadType===m.type){successfn=donext;this._loading=s[i];fn=(m.type===\"css\")?util.Get.css:util.Get.script;url=m.fullpath;url=(url)?this._filter(url):this._url(m.path);if(env.ua.webkit&&env.ua.webkit<420&&m.type===\"js\"&&!m.varName){successfn=null;this._useYahooListener=true;}fn(url,{data:s[i],onSuccess:successfn,onFailure:this._onFailure,onTimeout:this._onTimeout,insertBefore:this.insertBefore,charset:this.charset,timeout:this.timeout,varName:m.varName,scope:self});return;}}this._loading=null;if(this._internalCallback){var f=this._internalCallback;this._internalCallback=null;f.call(this);}else{if(this.onSuccess){this._pushEvents();this.onSuccess.call(this.scope,{data:this.data});}}},_pushEvents:function(ref){var r=ref||YAHOO;if(r.util&&r.util.Event){r.util.Event._load();}},_filter:function(str){var f=this.filter;return(f)?str.replace(new RegExp(f.searchExp,\"g\"),f.replaceStr):str;",
                "-},_url:function(path){return this._filter((this.base||\"\")+path);}};})();YAHOO.register(\"yuiloader\",YAHOO.util.YUILoader,{version:\"2.9.0\",build:\"2800\"});",
                "\\ No newline at end of file",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader.js b/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader.js",
                "deleted file mode 100644",
                "index a63c6d9cac..0000000000",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader.js",
                "+++ /dev/null",
                "@@ -1,4065 +0,0 @@",
                "-/*",
                "-Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
                "-Code licensed under the BSD License:",
                "-http://developer.yahoo.com/yui/license.html",
                "-version: 2.9.0",
                "-*/",
                "-/**",
                "- * The YAHOO object is the single global object used by YUI Library.  It",
                "- * contains utility function for setting up namespaces, inheritance, and",
                "- * logging.  YAHOO.util, YAHOO.widget, and YAHOO.example are namespaces",
                "- * created automatically for and used by the library.",
                "- * @module yahoo",
                "- * @title  YAHOO Global",
                "- */",
                "-",
                "-/**",
                "- * YAHOO_config is not included as part of the library.  Instead it is an",
                "- * object that can be defined by the implementer immediately before",
                "- * including the YUI library.  The properties included in this object",
                "- * will be used to configure global properties needed as soon as the",
                "- * library begins to load.",
                "- * @class YAHOO_config",
                "- * @static",
                "- */",
                "-",
                "-/**",
                "- * A reference to a function that will be executed every time a YAHOO module",
                "- * is loaded.  As parameter, this function will receive the version",
                "- * information for the module. See <a href=\"YAHOO.env.html#getVersion\">",
                "- * YAHOO.env.getVersion</a> for the description of the version data structure.",
                "- * @property listener",
                "- * @type Function",
                "- * @static",
                "- * @default undefined",
                "- */",
                "-",
                "-/**",
                "- * Set to true if the library will be dynamically loaded after window.onload.",
                "- * Defaults to false",
                "- * @property injecting",
                "- * @type boolean",
                "- * @static",
                "- * @default undefined",
                "- */",
                "-",
                "-/**",
                "- * Instructs the yuiloader component to dynamically load yui components and",
                "- * their dependencies.  See the yuiloader documentation for more information",
                "- * about dynamic loading",
                "- * @property load",
                "- * @static",
                "- * @default undefined",
                "- * @see yuiloader",
                "- */",
                "-",
                "-/**",
                "- * Forces the use of the supplied locale where applicable in the library",
                "- * @property locale",
                "- * @type string",
                "- * @static",
                "- * @default undefined",
                "- */",
                "-",
                "-if (typeof YAHOO == \"undefined\" || !YAHOO) {",
                "-    /**",
                "-     * The YAHOO global namespace object.  If YAHOO is already defined, the",
                "-     * existing YAHOO object will not be overwritten so that defined",
                "-     * namespaces are preserved.",
                "-     * @class YAHOO",
                "-     * @static",
                "-     */",
                "-    var YAHOO = {};",
                "-}",
                "-",
                "-/**",
                "- * Returns the namespace specified and creates it if it doesn't exist",
                "- * <pre>",
                "- * YAHOO.namespace(\"property.package\");",
                "- * YAHOO.namespace(\"YAHOO.property.package\");",
                "- * </pre>",
                "- * Either of the above would create YAHOO.property, then",
                "- * YAHOO.property.package",
                "- *",
                "- * Be careful when naming packages. Reserved words may work in some browsers",
                "- * and not others. For instance, the following will fail in Safari:",
                "- * <pre>",
                "- * YAHOO.namespace(\"really.long.nested.namespace\");",
                "- * </pre>",
                "- * This fails because \"long\" is a future reserved word in ECMAScript",
                "- *",
                "- * For implementation code that uses YUI, do not create your components",
                "- * in the namespaces defined by YUI (",
                "- * <code>YAHOO.util</code>,",
                "- * <code>YAHOO.widget</code>,",
                "- * <code>YAHOO.lang</code>,",
                "- * <code>YAHOO.tool</code>,",
                "- * <code>YAHOO.example</code>,",
                "- * <code>YAHOO.env</code>) -- create your own namespace (e.g., 'companyname').",
                "- *",
                "- * @method namespace",
                "- * @static",
                "- * @param  {String*} arguments 1-n namespaces to create",
                "- * @return {Object}  A reference to the last namespace object created",
                "- */",
                "-YAHOO.namespace = function() {",
                "-    var a=arguments, o=null, i, j, d;",
                "-    for (i=0; i<a.length; i=i+1) {",
                "-        d=(\"\"+a[i]).split(\".\");",
                "-        o=YAHOO;",
                "-",
                "-        // YAHOO is implied, so it is ignored if it is included",
                "-        for (j=(d[0] == \"YAHOO\") ? 1 : 0; j<d.length; j=j+1) {",
                "-            o[d[j]]=o[d[j]] || {};",
                "-            o=o[d[j]];",
                "-        }",
                "-    }",
                "-",
                "-    return o;",
                "-};",
                "-",
                "-/**",
                "- * Uses YAHOO.widget.Logger to output a log message, if the widget is",
                "- * available.",
                "- * Note: LogReader adds the message, category, and source to the DOM as HTML.",
                "- *",
                "- * @method log",
                "- * @static",
                "- * @param  {HTML}  msg  The message to log.",
                "- * @param  {HTML}  cat  The log category for the message.  Default",
                "- *                        categories are \"info\", \"warn\", \"error\", time\".",
                "- *                        Custom categories can be used as well. (opt)",
                "- * @param  {HTML}  src  The source of the the message (opt)",
                "- * @return {Boolean}      True if the log operation was successful.",
                "- */",
                "-YAHOO.log = function(msg, cat, src) {",
                "-    var l=YAHOO.widget.Logger;",
                "-    if(l && l.log) {",
                "-        return l.log(msg, cat, src);",
                "-    } else {",
                "-        return false;",
                "-    }",
                "-};",
                "-",
                "-/**",
                "- * Registers a module with the YAHOO object",
                "- * @method register",
                "- * @static",
                "- * @param {String}   name    the name of the module (event, slider, etc)",
                "- * @param {Function} mainClass a reference to class in the module.  This",
                "- *                             class will be tagged with the version info",
                "- *                             so that it will be possible to identify the",
                "- *                             version that is in use when multiple versions",
                "- *                             have loaded",
                "- * @param {Object}   data      metadata object for the module.  Currently it",
                "- *                             is expected to contain a \"version\" property",
                "- *                             and a \"build\" property at minimum.",
                "- */",
                "-YAHOO.register = function(name, mainClass, data) {",
                "-    var mods = YAHOO.env.modules, m, v, b, ls, i;",
                "-",
                "-    if (!mods[name]) {",
                "-        mods[name] = {",
                "-            versions:[],",
                "-            builds:[]",
                "-        };",
                "-    }",
                "-",
                "-    m  = mods[name];",
                "-    v  = data.version;",
                "-    b  = data.build;",
                "-    ls = YAHOO.env.listeners;",
                "-",
                "-    m.name = name;",
                "-    m.version = v;",
                "-    m.build = b;",
                "-    m.versions.push(v);",
                "-    m.builds.push(b);",
                "-    m.mainClass = mainClass;",
                "-",
                "-    // fire the module load listeners",
                "-    for (i=0;i<ls.length;i=i+1) {",
                "-        ls[i](m);",
                "-    }",
                "-    // label the main class",
                "-    if (mainClass) {",
                "-        mainClass.VERSION = v;",
                "-        mainClass.BUILD = b;",
                "-    } else {",
                "-        YAHOO.log(\"mainClass is undefined for module \" + name, \"warn\");",
                "-    }",
                "-};",
                "-",
                "-/**",
                "- * YAHOO.env is used to keep track of what is known about the YUI library and",
                "- * the browsing environment",
                "- * @class YAHOO.env",
                "- * @static",
                "- */",
                "-YAHOO.env = YAHOO.env || {",
                "-",
                "-    /**",
                "-     * Keeps the version info for all YUI modules that have reported themselves",
                "-     * @property modules",
                "-     * @type Object[]",
                "-     */",
                "-    modules: [],",
                "-",
                "-    /**",
                "-     * List of functions that should be executed every time a YUI module",
                "-     * reports itself.",
                "-     * @property listeners",
                "-     * @type Function[]",
                "-     */",
                "-    listeners: []",
                "-};",
                "-",
                "-/**",
                "- * Returns the version data for the specified module:",
                "- *      <dl>",
                "- *      <dt>name:</dt>      <dd>The name of the module</dd>",
                "- *      <dt>version:</dt>   <dd>The version in use</dd>",
                "- *      <dt>build:</dt>     <dd>The build number in use</dd>",
                "- *      <dt>versions:</dt>  <dd>All versions that were registered</dd>",
                "- *      <dt>builds:</dt>    <dd>All builds that were registered.</dd>",
                "- *      <dt>mainClass:</dt> <dd>An object that was was stamped with the",
                "- *                 current version and build. If",
                "- *                 mainClass.VERSION != version or mainClass.BUILD != build,",
                "- *                 multiple versions of pieces of the library have been",
                "- *                 loaded, potentially causing issues.</dd>",
                "- *       </dl>",
                "- *",
                "- * @method getVersion",
                "- * @static",
                "- * @param {String}  name the name of the module (event, slider, etc)",
                "- * @return {Object} The version info",
                "- */",
                "-YAHOO.env.getVersion = function(name) {",
                "-    return YAHOO.env.modules[name] || null;",
                "-};",
                "-",
                "-/**",
                "- * Do not fork for a browser if it can be avoided.  Use feature detection when",
                "- * you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version",
                "- * number for the browser engine, 0 otherwise.  This value may or may not map",
                "- * to the version number of the browser using the engine.  The value is",
                "- * presented as a float so that it can easily be used for boolean evaluation",
                "- * as well as for looking for a particular range of versions.  Because of this,",
                "- * some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9",
                "- * reports 1.8).",
                "- * @class YAHOO.env.ua",
                "- * @static",
                "- */",
                "-",
                "-/**",
                "- * parses a user agent string (or looks for one in navigator to parse if",
                "- * not supplied).",
                "- * @method parseUA",
                "- * @since 2.9.0",
                "- * @static",
                "- */",
                "-YAHOO.env.parseUA = function(agent) {",
                "-",
                "-        var numberify = function(s) {",
                "-            var c = 0;",
                "-            return parseFloat(s.replace(/\\./g, function() {",
                "-                return (c++ == 1) ? '' : '.';",
                "-            }));",
                "-        },",
                "-",
                "-        nav = navigator,",
                "-",
                "-        o = {",
                "-",
                "-        /**",
                "-         * Internet Explorer version number or 0.  Example: 6",
                "-         * @property ie",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ie: 0,",
                "-",
                "-        /**",
                "-         * Opera version number or 0.  Example: 9.2",
                "-         * @property opera",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        opera: 0,",
                "-",
                "-        /**",
                "-         * Gecko engine revision number.  Will evaluate to 1 if Gecko",
                "-         * is detected but the revision could not be found. Other browsers",
                "-         * will be 0.  Example: 1.8",
                "-         * <pre>",
                "-         * Firefox 1.0.0.4: 1.7.8   <-- Reports 1.7",
                "-         * Firefox 1.5.0.9: 1.8.0.9 <-- 1.8",
                "-         * Firefox 2.0.0.3: 1.8.1.3 <-- 1.81",
                "-         * Firefox 3.0   <-- 1.9",
                "-         * Firefox 3.5   <-- 1.91",
                "-         * </pre>",
                "-         * @property gecko",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        gecko: 0,",
                "-",
                "-        /**",
                "-         * AppleWebKit version.  KHTML browsers that are not WebKit browsers",
                "-         * will evaluate to 1, other browsers 0.  Example: 418.9",
                "-         * <pre>",
                "-         * Safari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the",
                "-         *                                   latest available for Mac OSX 10.3.",
                "-         * Safari 2.0.2:         416     <-- hasOwnProperty introduced",
                "-         * Safari 2.0.4:         418     <-- preventDefault fixed",
                "-         * Safari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run",
                "-         *                                   different versions of webkit",
                "-         * Safari 2.0.4 (419.3): 419     <-- Tiger installations that have been",
                "-         *                                   updated, but not updated",
                "-         *                                   to the latest patch.",
                "-         * Webkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native",
                "-         * SVG and many major issues fixed).",
                "-         * Safari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic",
                "-         * update from 2.x via the 10.4.11 OS patch.",
                "-         * Webkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.",
                "-         *                                   yahoo.com user agent hack removed.",
                "-         * </pre>",
                "-         * http://en.wikipedia.org/wiki/Safari_version_history",
                "-         * @property webkit",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        webkit: 0,",
                "-",
                "-        /**",
                "-         * Chrome will be detected as webkit, but this property will also",
                "-         * be populated with the Chrome version number",
                "-         * @property chrome",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        chrome: 0,",
                "-",
                "-        /**",
                "-         * The mobile property will be set to a string containing any relevant",
                "-         * user agent information when a modern mobile browser is detected.",
                "-         * Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series",
                "-         * devices with the WebKit-based browser, and Opera Mini.",
                "-         * @property mobile",
                "-         * @type string",
                "-         * @static",
                "-         */",
                "-        mobile: null,",
                "-",
                "-        /**",
                "-         * Adobe AIR version number or 0.  Only populated if webkit is detected.",
                "-         * Example: 1.0",
                "-         * @property air",
                "-         * @type float",
                "-         */",
                "-        air: 0,",
                "-        /**",
                "-         * Detects Apple iPad's OS version",
                "-         * @property ipad",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ipad: 0,",
                "-        /**",
                "-         * Detects Apple iPhone's OS version",
                "-         * @property iphone",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        iphone: 0,",
                "-        /**",
                "-         * Detects Apples iPod's OS version",
                "-         * @property ipod",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ipod: 0,",
                "-        /**",
                "-         * General truthy check for iPad, iPhone or iPod",
                "-         * @property ios",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        ios: null,",
                "-        /**",
                "-         * Detects Googles Android OS version",
                "-         * @property android",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        android: 0,",
                "-        /**",
                "-         * Detects Palms WebOS version",
                "-         * @property webos",
                "-         * @type float",
                "-         * @static",
                "-         */",
                "-        webos: 0,",
                "-",
                "-        /**",
                "-         * Google Caja version number or 0.",
                "-         * @property caja",
                "-         * @type float",
                "-         */",
                "-        caja: nav && nav.cajaVersion,",
                "-",
                "-        /**",
                "-         * Set to true if the page appears to be in SSL",
                "-         * @property secure",
                "-         * @type boolean",
                "-         * @static",
                "-         */",
                "-        secure: false,",
                "-",
                "-        /**",
                "-         * The operating system.  Currently only detecting windows or macintosh",
                "-         * @property os",
                "-         * @type string",
                "-         * @static",
                "-         */",
                "-        os: null",
                "-",
                "-    },",
                "-",
                "-    ua = agent || (navigator && navigator.userAgent),",
                "-",
                "-    loc = window && window.location,",
                "-",
                "-    href = loc && loc.href,",
                "-",
                "-    m;",
                "-",
                "-    o.secure = href && (href.toLowerCase().indexOf(\"https\") === 0);",
                "-",
                "-    if (ua) {",
                "-",
                "-        if ((/windows|win32/i).test(ua)) {",
                "-            o.os = 'windows';",
                "-        } else if ((/macintosh/i).test(ua)) {",
                "-            o.os = 'macintosh';",
                "-        } else if ((/rhino/i).test(ua)) {",
                "-            o.os = 'rhino';",
                "-        }",
                "-",
                "-        // Modern KHTML browsers should qualify as Safari X-Grade",
                "-        if ((/KHTML/).test(ua)) {",
                "-            o.webkit = 1;",
                "-        }",
                "-        // Modern WebKit browsers are at least X-Grade",
                "-        m = ua.match(/AppleWebKit\\/([^\\s]*)/);",
                "-        if (m && m[1]) {",
                "-            o.webkit = numberify(m[1]);",
                "-",
                "-            // Mobile browser check",
                "-            if (/ Mobile\\//.test(ua)) {",
                "-                o.mobile = 'Apple'; // iPhone or iPod Touch",
                "-",
                "-                m = ua.match(/OS ([^\\s]*)/);",
                "-                if (m && m[1]) {",
                "-                    m = numberify(m[1].replace('_', '.'));",
                "-                }",
                "-                o.ios = m;",
                "-                o.ipad = o.ipod = o.iphone = 0;",
                "-",
                "-                m = ua.match(/iPad|iPod|iPhone/);",
                "-                if (m && m[0]) {",
                "-                    o[m[0].toLowerCase()] = o.ios;",
                "-                }",
                "-            } else {",
                "-                m = ua.match(/NokiaN[^\\/]*|Android \\d\\.\\d|webOS\\/\\d\\.\\d/);",
                "-                if (m) {",
                "-                    // Nokia N-series, Android, webOS, ex: NokiaN95",
                "-                    o.mobile = m[0];",
                "-                }",
                "-                if (/webOS/.test(ua)) {",
                "-                    o.mobile = 'WebOS';",
                "-                    m = ua.match(/webOS\\/([^\\s]*);/);",
                "-                    if (m && m[1]) {",
                "-                        o.webos = numberify(m[1]);",
                "-                    }",
                "-                }",
                "-                if (/ Android/.test(ua)) {",
                "-                    o.mobile = 'Android';",
                "-                    m = ua.match(/Android ([^\\s]*);/);",
                "-                    if (m && m[1]) {",
                "-                        o.android = numberify(m[1]);",
                "-                    }",
                "-",
                "-                }",
                "-            }",
                "-",
                "-            m = ua.match(/Chrome\\/([^\\s]*)/);",
                "-            if (m && m[1]) {",
                "-                o.chrome = numberify(m[1]); // Chrome",
                "-            } else {",
                "-                m = ua.match(/AdobeAIR\\/([^\\s]*)/);",
                "-                if (m) {",
                "-                    o.air = m[0]; // Adobe AIR 1.0 or better",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        if (!o.webkit) { // not webkit",
                "-// @todo check Opera/8.01 (J2ME/MIDP; Opera Mini/2.0.4509/1316; fi; U; ssr)",
                "-            m = ua.match(/Opera[\\s\\/]([^\\s]*)/);",
                "-            if (m && m[1]) {",
                "-                o.opera = numberify(m[1]);",
                "-                m = ua.match(/Version\\/([^\\s]*)/);",
                "-                if (m && m[1]) {",
                "-                    o.opera = numberify(m[1]); // opera 10+",
                "-                }",
                "-                m = ua.match(/Opera Mini[^;]*/);",
                "-                if (m) {",
                "-                    o.mobile = m[0]; // ex: Opera Mini/2.0.4509/1316",
                "-                }",
                "-            } else { // not opera or webkit",
                "-                m = ua.match(/MSIE\\s([^;]*)/);",
                "-                if (m && m[1]) {",
                "-                    o.ie = numberify(m[1]);",
                "-                } else { // not opera, webkit, or ie",
                "-                    m = ua.match(/Gecko\\/([^\\s]*)/);",
                "-                    if (m) {",
                "-                        o.gecko = 1; // Gecko detected, look for revision",
                "-                        m = ua.match(/rv:([^\\s\\)]*)/);",
                "-                        if (m && m[1]) {",
                "-                            o.gecko = numberify(m[1]);",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-    return o;",
                "-};",
                "-",
                "-YAHOO.env.ua = YAHOO.env.parseUA();",
                "-",
                "-/*",
                "- * Initializes the global by creating the default namespaces and applying",
                "- * any new configuration information that is detected.  This is the setup",
                "- * for env.",
                "- * @method init",
                "- * @static",
                "- * @private",
                "- */",
                "-(function() {",
                "-    YAHOO.namespace(\"util\", \"widget\", \"example\");",
                "-    /*global YAHOO_config*/",
                "-    if (\"undefined\" !== typeof YAHOO_config) {",
                "-        var l=YAHOO_config.listener, ls=YAHOO.env.listeners,unique=true, i;",
                "-        if (l) {",
                "-            // if YAHOO is loaded multiple times we need to check to see if",
                "-            // this is a new config object.  If it is, add the new component",
                "-            // load listener to the stack",
                "-            for (i=0; i<ls.length; i++) {",
                "-                if (ls[i] == l) {",
                "-                    unique = false;",
                "-                    break;",
                "-                }",
                "-            }",
                "-",
                "-            if (unique) {",
                "-                ls.push(l);",
                "-            }",
                "-        }",
                "-    }",
                "-})();",
                "-/**",
                "- * Provides the language utilites and extensions used by the library",
                "- * @class YAHOO.lang",
                "- */",
                "-YAHOO.lang = YAHOO.lang || {};",
                "-",
                "-(function() {",
                "-",
                "-",
                "-var L = YAHOO.lang,",
                "-",
                "-    OP = Object.prototype,",
                "-    ARRAY_TOSTRING = '[object Array]',",
                "-    FUNCTION_TOSTRING = '[object Function]',",
                "-    OBJECT_TOSTRING = '[object Object]',",
                "-    NOTHING = [],",
                "-",
                "-    HTML_CHARS = {",
                "-        '&': '&amp;',",
                "-        '<': '&lt;',",
                "-        '>': '&gt;',",
                "-        '\"': '&quot;',",
                "-        \"'\": '&#x27;',",
                "-        '/': '&#x2F;',",
                "-        '`': '&#x60;'",
                "-    },",
                "-",
                "-    // ADD = [\"toString\", \"valueOf\", \"hasOwnProperty\"],",
                "-    ADD = [\"toString\", \"valueOf\"],",
                "-",
                "-    OB = {",
                "-",
                "-    /**",
                "-     * Determines wheather or not the provided object is an array.",
                "-     * @method isArray",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isArray: function(o) {",
                "-        return OP.toString.apply(o) === ARRAY_TOSTRING;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a boolean",
                "-     * @method isBoolean",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isBoolean: function(o) {",
                "-        return typeof o === 'boolean';",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a function.",
                "-     * Note: Internet Explorer thinks certain functions are objects:",
                "-     *",
                "-     * var obj = document.createElement(\"object\");",
                "-     * YAHOO.lang.isFunction(obj.getAttribute) // reports false in IE",
                "-     *",
                "-     * var input = document.createElement(\"input\"); // append to body",
                "-     * YAHOO.lang.isFunction(input.focus) // reports false in IE",
                "-     *",
                "-     * You will have to implement additional tests if these functions",
                "-     * matter to you.",
                "-     *",
                "-     * @method isFunction",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isFunction: function(o) {",
                "-        return (typeof o === 'function') || OP.toString.apply(o) === FUNCTION_TOSTRING;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is null",
                "-     * @method isNull",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isNull: function(o) {",
                "-        return o === null;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a legal number",
                "-     * @method isNumber",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isNumber: function(o) {",
                "-        return typeof o === 'number' && isFinite(o);",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is of type object",
                "-     * or function",
                "-     * @method isObject",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isObject: function(o) {",
                "-return (o && (typeof o === 'object' || L.isFunction(o))) || false;",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is a string",
                "-     * @method isString",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isString: function(o) {",
                "-        return typeof o === 'string';",
                "-    },",
                "-",
                "-    /**",
                "-     * Determines whether or not the provided object is undefined",
                "-     * @method isUndefined",
                "-     * @param {any} o The object being testing",
                "-     * @return {boolean} the result",
                "-     */",
                "-    isUndefined: function(o) {",
                "-        return typeof o === 'undefined';",
                "-    },",
                "-",
                "-",
                "-    /**",
                "-     * IE will not enumerate native functions in a derived object even if the",
                "-     * function was overridden.  This is a workaround for specific functions",
                "-     * we care about on the Object prototype.",
                "-     * @property _IEEnumFix",
                "-     * @param {Function} r  the object to receive the augmentation",
                "-     * @param {Function} s  the object that supplies the properties to augment",
                "-     * @static",
                "-     * @private",
                "-     */",
                "-    _IEEnumFix: (YAHOO.env.ua.ie) ? function(r, s) {",
                "-            var i, fname, f;",
                "-            for (i=0;i<ADD.length;i=i+1) {",
                "-",
                "-                fname = ADD[i];",
                "-                f = s[fname];",
                "-",
                "-                if (L.isFunction(f) && f!=OP[fname]) {",
                "-                    r[fname]=f;",
                "-                }",
                "-            }",
                "-    } : function(){},",
                "-",
                "-    /**",
                "-     * <p>",
                "-     * Returns a copy of the specified string with special HTML characters",
                "-     * escaped. The following characters will be converted to their",
                "-     * corresponding character entities:",
                "-     * <code>&amp; &lt; &gt; &quot; &#x27; &#x2F; &#x60;</code>",
                "-     * </p>",
                "-     *",
                "-     * <p>",
                "-     * This implementation is based on the",
                "-     * <a href=\"http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">OWASP",
                "-     * HTML escaping recommendations</a>. In addition to the characters",
                "-     * in the OWASP recommendation, we also escape the <code>&#x60;</code>",
                "-     * character, since IE interprets it as an attribute delimiter when used in",
                "-     * innerHTML.",
                "-     * </p>",
                "-     *",
                "-     * @method escapeHTML",
                "-     * @param {String} html String to escape.",
                "-     * @return {String} Escaped string.",
                "-     * @static",
                "-     * @since 2.9.0",
                "-     */",
                "-    escapeHTML: function (html) {",
                "-        return html.replace(/[&<>\"'\\/`]/g, function (match) {",
                "-            return HTML_CHARS[match];",
                "-        });",
                "-    },",
                "-",
                "-    /**",
                "-     * Utility to set up the prototype, constructor and superclass properties to",
                "-     * support an inheritance strategy that can chain constructors and methods.",
                "-     * Static members will not be inherited.",
                "-     *",
                "-     * @method extend",
                "-     * @static",
                "-     * @param {Function} subc   the object to modify",
                "-     * @param {Function} superc the object to inherit",
                "-     * @param {Object} overrides  additional properties/methods to add to the",
                "-     *                              subclass prototype.  These will override the",
                "-     *                              matching items obtained from the superclass",
                "-     *                              if present.",
                "-     */",
                "-    extend: function(subc, superc, overrides) {",
                "-        if (!superc||!subc) {",
                "-            throw new Error(\"extend failed, please check that \" +",
                "-                            \"all dependencies are included.\");",
                "-        }",
                "-        var F = function() {}, i;",
                "-        F.prototype=superc.prototype;",
                "-        subc.prototype=new F();",
                "-        subc.prototype.constructor=subc;",
                "-        subc.superclass=superc.prototype;",
                "-        if (superc.prototype.constructor == OP.constructor) {",
                "-            superc.prototype.constructor=superc;",
                "-        }",
                "-",
                "-        if (overrides) {",
                "-            for (i in overrides) {",
                "-                if (L.hasOwnProperty(overrides, i)) {",
                "-                    subc.prototype[i]=overrides[i];",
                "-                }",
                "-            }",
                "-",
                "-            L._IEEnumFix(subc.prototype, overrides);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Applies all properties in the supplier to the receiver if the",
                "-     * receiver does not have these properties yet.  Optionally, one or",
                "-     * more methods/properties can be specified (as additional",
                "-     * parameters).  This option will overwrite the property if receiver",
                "-     * has it already.  If true is passed as the third parameter, all",
                "-     * properties will be applied and _will_ overwrite properties in",
                "-     * the receiver.",
                "-     *",
                "-     * @method augmentObject",
                "-     * @static",
                "-     * @since 2.3.0",
                "-     * @param {Function} r  the object to receive the augmentation",
                "-     * @param {Function} s  the object that supplies the properties to augment",
                "-     * @param {String*|boolean}  arguments zero or more properties methods",
                "-     *        to augment the receiver with.  If none specified, everything",
                "-     *        in the supplier will be used unless it would",
                "-     *        overwrite an existing property in the receiver. If true",
                "-     *        is specified as the third parameter, all properties will",
                "-     *        be applied and will overwrite an existing property in",
                "-     *        the receiver",
                "-     */",
                "-    augmentObject: function(r, s) {",
                "-        if (!s||!r) {",
                "-            throw new Error(\"Absorb failed, verify dependencies.\");",
                "-        }",
                "-        var a=arguments, i, p, overrideList=a[2];",
                "-        if (overrideList && overrideList!==true) { // only absorb the specified properties",
                "-            for (i=2; i<a.length; i=i+1) {",
                "-                r[a[i]] = s[a[i]];",
                "-            }",
                "-        } else { // take everything, overwriting only if the third parameter is true",
                "-            for (p in s) {",
                "-                if (overrideList || !(p in r)) {",
                "-                    r[p] = s[p];",
                "-                }",
                "-            }",
                "-",
                "-            L._IEEnumFix(r, s);",
                "-        }",
                "-",
                "-        return r;",
                "-    },",
                "-",
                "-    /**",
                "-     * Same as YAHOO.lang.augmentObject, except it only applies prototype properties",
                "-     * @see YAHOO.lang.augmentObject",
                "-     * @method augmentProto",
                "-     * @static",
                "-     * @param {Function} r  the object to receive the augmentation",
                "-     * @param {Function} s  the object that supplies the properties to augment",
                "-     * @param {String*|boolean}  arguments zero or more properties methods",
                "-     *        to augment the receiver with.  If none specified, everything",
                "-     *        in the supplier will be used unless it would overwrite an existing",
                "-     *        property in the receiver.  if true is specified as the third",
                "-     *        parameter, all properties will be applied and will overwrite an",
                "-     *        existing property in the receiver",
                "-     */",
                "-    augmentProto: function(r, s) {",
                "-        if (!s||!r) {",
                "-            throw new Error(\"Augment failed, verify dependencies.\");",
                "-        }",
                "-        //var a=[].concat(arguments);",
                "-        var a=[r.prototype,s.prototype], i;",
                "-        for (i=2;i<arguments.length;i=i+1) {",
                "-            a.push(arguments[i]);",
                "-        }",
                "-        L.augmentObject.apply(this, a);",
                "-",
                "-        return r;",
                "-    },",
                "-",
                "-",
                "-    /**",
                "-     * Returns a simple string representation of the object or array.",
                "-     * Other types of objects will be returned unprocessed.  Arrays",
                "-     * are expected to be indexed.  Use object notation for",
                "-     * associative arrays.",
                "-     * @method dump",
                "-     * @since 2.3.0",
                "-     * @param o {Object} The object to dump",
                "-     * @param d {int} How deep to recurse child objects, default 3",
                "-     * @return {String} the dump result",
                "-     */",
                "-    dump: function(o, d) {",
                "-        var i,len,s=[],OBJ=\"{...}\",FUN=\"f(){...}\",",
                "-            COMMA=', ', ARROW=' => ';",
                "-",
                "-        // Cast non-objects to string",
                "-        // Skip dates because the std toString is what we want",
                "-        // Skip HTMLElement-like objects because trying to dump",
                "-        // an element will cause an unhandled exception in FF 2.x",
                "-        if (!L.isObject(o)) {",
                "-            return o + \"\";",
                "-        } else if (o instanceof Date || (\"nodeType\" in o && \"tagName\" in o)) {",
                "-            return o;",
                "-        } else if  (L.isFunction(o)) {",
                "-            return FUN;",
                "-        }",
                "-",
                "-        // dig into child objects the depth specifed. Default 3",
                "-        d = (L.isNumber(d)) ? d : 3;",
                "-",
                "-        // arrays [1, 2, 3]",
                "-        if (L.isArray(o)) {",
                "-            s.push(\"[\");",
                "-            for (i=0,len=o.length;i<len;i=i+1) {",
                "-                if (L.isObject(o[i])) {",
                "-                    s.push((d > 0) ? L.dump(o[i], d-1) : OBJ);",
                "-                } else {",
                "-                    s.push(o[i]);",
                "-                }",
                "-                s.push(COMMA);",
                "-            }",
                "-            if (s.length > 1) {",
                "-                s.pop();",
                "-            }",
                "-            s.push(\"]\");",
                "-        // objects {k1 => v1, k2 => v2}",
                "-        } else {",
                "-            s.push(\"{\");",
                "-            for (i in o) {",
                "-                if (L.hasOwnProperty(o, i)) {",
                "-                    s.push(i + ARROW);",
                "-                    if (L.isObject(o[i])) {",
                "-                        s.push((d > 0) ? L.dump(o[i], d-1) : OBJ);",
                "-                    } else {",
                "-                        s.push(o[i]);",
                "-                    }",
                "-                    s.push(COMMA);",
                "-                }",
                "-            }",
                "-            if (s.length > 1) {",
                "-                s.pop();",
                "-            }",
                "-            s.push(\"}\");",
                "-        }",
                "-",
                "-        return s.join(\"\");",
                "-    },",
                "-",
                "-    /**",
                "-     * Does variable substitution on a string. It scans through the string",
                "-     * looking for expressions enclosed in { } braces. If an expression",
                "-     * is found, it is used a key on the object.  If there is a space in",
                "-     * the key, the first word is used for the key and the rest is provided",
                "-     * to an optional function to be used to programatically determine the",
                "-     * value (the extra information might be used for this decision). If",
                "-     * the value for the key in the object, or what is returned from the",
                "-     * function has a string value, number value, or object value, it is",
                "-     * substituted for the bracket expression and it repeats.  If this",
                "-     * value is an object, it uses the Object's toString() if this has",
                "-     * been overridden, otherwise it does a shallow dump of the key/value",
                "-     * pairs.",
                "-     *",
                "-     * By specifying the recurse option, the string is rescanned after",
                "-     * every replacement, allowing for nested template substitutions.",
                "-     * The side effect of this option is that curly braces in the",
                "-     * replacement content must be encoded.",
                "-     *",
                "-     * @method substitute",
                "-     * @since 2.3.0",
                "-     * @param s {String} The string that will be modified.",
                "-     * @param o {Object} An object containing the replacement values",
                "-     * @param f {Function} An optional function that can be used to",
                "-     *                     process each match.  It receives the key,",
                "-     *                     value, and any extra metadata included with",
                "-     *                     the key inside of the braces.",
                "-     * @param recurse {boolean} default true - if not false, the replaced",
                "-     * string will be rescanned so that nested substitutions are possible.",
                "-     * @return {String} the substituted string",
                "-     */",
                "-    substitute: function (s, o, f, recurse) {",
                "-        var i, j, k, key, v, meta, saved=[], token, lidx=s.length,",
                "-            DUMP='dump', SPACE=' ', LBRACE='{', RBRACE='}',",
                "-            dump, objstr;",
                "-",
                "-        for (;;) {",
                "-            i = s.lastIndexOf(LBRACE, lidx);",
                "-            if (i < 0) {",
                "-                break;",
                "-            }",
                "-            j = s.indexOf(RBRACE, i);",
                "-            if (i + 1 > j) {",
                "-                break;",
                "-            }",
                "-",
                "-            //Extract key and meta info",
                "-            token = s.substring(i + 1, j);",
                "-            key = token;",
                "-            meta = null;",
                "-            k = key.indexOf(SPACE);",
                "-            if (k > -1) {",
                "-                meta = key.substring(k + 1);",
                "-                key = key.substring(0, k);",
                "-            }",
                "-",
                "-            // lookup the value",
                "-            v = o[key];",
                "-",
                "-            // if a substitution function was provided, execute it",
                "-            if (f) {",
                "-                v = f(key, v, meta);",
                "-            }",
                "-",
                "-            if (L.isObject(v)) {",
                "-                if (L.isArray(v)) {",
                "-                    v = L.dump(v, parseInt(meta, 10));",
                "-                } else {",
                "-                    meta = meta || \"\";",
                "-",
                "-                    // look for the keyword 'dump', if found force obj dump",
                "-                    dump = meta.indexOf(DUMP);",
                "-                    if (dump > -1) {",
                "-                        meta = meta.substring(4);",
                "-                    }",
                "-",
                "-                    objstr = v.toString();",
                "-",
                "-                    // use the toString if it is not the Object toString",
                "-                    // and the 'dump' meta info was not found",
                "-                    if (objstr === OBJECT_TOSTRING || dump > -1) {",
                "-                        v = L.dump(v, parseInt(meta, 10));",
                "-                    } else {",
                "-                        v = objstr;",
                "-                    }",
                "-                }",
                "-            } else if (!L.isString(v) && !L.isNumber(v)) {",
                "-                // This {block} has no replace string. Save it for later.",
                "-                v = \"~-\" + saved.length + \"-~\";",
                "-                saved[saved.length] = token;",
                "-",
                "-                // break;",
                "-            }",
                "-",
                "-            s = s.substring(0, i) + v + s.substring(j + 1);",
                "-",
                "-            if (recurse === false) {",
                "-                lidx = i-1;",
                "-            }",
                "-",
                "-        }",
                "-",
                "-        // restore saved {block}s",
                "-        for (i=saved.length-1; i>=0; i=i-1) {",
                "-            s = s.replace(new RegExp(\"~-\" + i + \"-~\"), \"{\"  + saved[i] + \"}\", \"g\");",
                "-        }",
                "-",
                "-        return s;",
                "-    },",
                "-",
                "-",
                "-    /**",
                "-     * Returns a string without any leading or trailing whitespace.  If",
                "-     * the input is not a string, the input will be returned untouched.",
                "-     * @method trim",
                "-     * @since 2.3.0",
                "-     * @param s {string} the string to trim",
                "-     * @return {string} the trimmed string",
                "-     */",
                "-    trim: function(s){",
                "-        try {",
                "-            return s.replace(/^\\s+|\\s+$/g, \"\");",
                "-        } catch(e) {",
                "-            return s;",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns a new object containing all of the properties of",
                "-     * all the supplied objects.  The properties from later objects",
                "-     * will overwrite those in earlier objects.",
                "-     * @method merge",
                "-     * @since 2.3.0",
                "-     * @param arguments {Object*} the objects to merge",
                "-     * @return the new merged object",
                "-     */",
                "-    merge: function() {",
                "-        var o={}, a=arguments, l=a.length, i;",
                "-        for (i=0; i<l; i=i+1) {",
                "-            L.augmentObject(o, a[i], true);",
                "-        }",
                "-        return o;",
                "-    },",
                "-",
                "-    /**",
                "-     * Executes the supplied function in the context of the supplied",
                "-     * object 'when' milliseconds later.  Executes the function a",
                "-     * single time unless periodic is set to true.",
                "-     * @method later",
                "-     * @since 2.4.0",
                "-     * @param when {int} the number of milliseconds to wait until the fn",
                "-     * is executed",
                "-     * @param o the context object",
                "-     * @param fn {Function|String} the function to execute or the name of",
                "-     * the method in the 'o' object to execute",
                "-     * @param data [Array] data that is provided to the function.  This accepts",
                "-     * either a single item or an array.  If an array is provided, the",
                "-     * function is executed with one parameter for each array item.  If",
                "-     * you need to pass a single array parameter, it needs to be wrapped in",
                "-     * an array [myarray]",
                "-     * @param periodic {boolean} if true, executes continuously at supplied",
                "-     * interval until canceled",
                "-     * @return a timer object. Call the cancel() method on this object to",
                "-     * stop the timer.",
                "-     */",
                "-    later: function(when, o, fn, data, periodic) {",
                "-        when = when || 0;",
                "-        o = o || {};",
                "-        var m=fn, d=data, f, r;",
                "-",
                "-        if (L.isString(fn)) {",
                "-            m = o[fn];",
                "-        }",
                "-",
                "-        if (!m) {",
                "-            throw new TypeError(\"method undefined\");",
                "-        }",
                "-",
                "-        if (!L.isUndefined(data) && !L.isArray(d)) {",
                "-            d = [data];",
                "-        }",
                "-",
                "-        f = function() {",
                "-            m.apply(o, d || NOTHING);",
                "-        };",
                "-",
                "-        r = (periodic) ? setInterval(f, when) : setTimeout(f, when);",
                "-",
                "-        return {",
                "-            interval: periodic,",
                "-            cancel: function() {",
                "-                if (this.interval) {",
                "-                    clearInterval(r);",
                "-                } else {",
                "-                    clearTimeout(r);",
                "-                }",
                "-            }",
                "-        };",
                "-    },",
                "-",
                "-    /**",
                "-     * A convenience method for detecting a legitimate non-null value.",
                "-     * Returns false for null/undefined/NaN, true for other values,",
                "-     * including 0/false/''",
                "-     * @method isValue",
                "-     * @since 2.3.0",
                "-     * @param o {any} the item to test",
                "-     * @return {boolean} true if it is not null/undefined/NaN || false",
                "-     */",
                "-    isValue: function(o) {",
                "-        // return (o || o === false || o === 0 || o === ''); // Infinity fails",
                "-return (L.isObject(o) || L.isString(o) || L.isNumber(o) || L.isBoolean(o));",
                "-    }",
                "-",
                "-};",
                "-",
                "-/**",
                "- * Determines whether or not the property was added",
                "- * to the object instance.  Returns false if the property is not present",
                "- * in the object, or was inherited from the prototype.",
                "- * This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.",
                "- * There is a discrepancy between YAHOO.lang.hasOwnProperty and",
                "- * Object.prototype.hasOwnProperty when the property is a primitive added to",
                "- * both the instance AND prototype with the same value:",
                "- * <pre>",
                "- * var A = function() {};",
                "- * A.prototype.foo = 'foo';",
                "- * var a = new A();",
                "- * a.foo = 'foo';",
                "- * alert(a.hasOwnProperty('foo')); // true",
                "- * alert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback",
                "- * </pre>",
                "- * @method hasOwnProperty",
                "- * @param {any} o The object being testing",
                "- * @param prop {string} the name of the property to test",
                "- * @return {boolean} the result",
                "- */",
                "-L.hasOwnProperty = (OP.hasOwnProperty) ?",
                "-    function(o, prop) {",
                "-        return o && o.hasOwnProperty && o.hasOwnProperty(prop);",
                "-    } : function(o, prop) {",
                "-        return !L.isUndefined(o[prop]) &&",
                "-                o.constructor.prototype[prop] !== o[prop];",
                "-    };",
                "-",
                "-// new lang wins",
                "-OB.augmentObject(L, OB, true);",
                "-",
                "-/*",
                "- * An alias for <a href=\"YAHOO.lang.html\">YAHOO.lang</a>",
                "- * @class YAHOO.util.Lang",
                "- */",
                "-YAHOO.util.Lang = L;",
                "-",
                "-/**",
                "- * Same as YAHOO.lang.augmentObject, except it only applies prototype",
                "- * properties.  This is an alias for augmentProto.",
                "- * @see YAHOO.lang.augmentObject",
                "- * @method augment",
                "- * @static",
                "- * @param {Function} r  the object to receive the augmentation",
                "- * @param {Function} s  the object that supplies the properties to augment",
                "- * @param {String*|boolean}  arguments zero or more properties methods to",
                "- *        augment the receiver with.  If none specified, everything",
                "- *        in the supplier will be used unless it would",
                "- *        overwrite an existing property in the receiver.  if true",
                "- *        is specified as the third parameter, all properties will",
                "- *        be applied and will overwrite an existing property in",
                "- *        the receiver",
                "- */",
                "-L.augment = L.augmentProto;",
                "-",
                "-/**",
                "- * An alias for <a href=\"YAHOO.lang.html#augment\">YAHOO.lang.augment</a>",
                "- * @for YAHOO",
                "- * @method augment",
                "- * @static",
                "- * @param {Function} r  the object to receive the augmentation",
                "- * @param {Function} s  the object that supplies the properties to augment",
                "- * @param {String*}  arguments zero or more properties methods to",
                "- *        augment the receiver with.  If none specified, everything",
                "- *        in the supplier will be used unless it would",
                "- *        overwrite an existing property in the receiver",
                "- */",
                "-YAHOO.augment = L.augmentProto;",
                "-",
                "-/**",
                "- * An alias for <a href=\"YAHOO.lang.html#extend\">YAHOO.lang.extend</a>",
                "- * @method extend",
                "- * @static",
                "- * @param {Function} subc   the object to modify",
                "- * @param {Function} superc the object to inherit",
                "- * @param {Object} overrides  additional properties/methods to add to the",
                "- *        subclass prototype.  These will override the",
                "- *        matching items obtained from the superclass if present.",
                "- */",
                "-YAHOO.extend = L.extend;",
                "-",
                "-})();",
                "-YAHOO.register(\"yahoo\", YAHOO, {version: \"2.9.0\", build: \"2800\"});",
                "-/**",
                "- * Provides a mechanism to fetch remote resources and",
                "- * insert them into a document",
                "- * This utility can fetch JavaScript and CSS files, inserting script",
                "- * tags for script and link tags for CSS.  Note, this",
                "- * is done via the normal browser mechanisms for inserting",
                "- * these resources and making the content available to",
                "- * code that would access it.  Be careful when retreiving",
                "- * remote resources.  Only use this utility to fetch",
                "- * files from sites you trust.",
                "- *",
                "- * @module get",
                "- * @requires yahoo",
                "- */",
                "-",
                "-/**",
                "- * Fetches and inserts one or more script or link nodes into the document.",
                "- * This utility can fetch JavaScript and CSS files, inserting script",
                "- * tags for script and link tags for CSS.  Note, this",
                "- * is done via the normal browser mechanisms for inserting",
                "- * these resources and making the content available to",
                "- * code that would access it.  Be careful when retreiving",
                "- * remote resources.  Only use this utility to fetch",
                "- * files from sites you trust.",
                "- *",
                "- * @namespace YAHOO.util",
                "- * @class YAHOO.util.Get",
                "- */",
                "-YAHOO.util.Get = function() {",
                "-",
                "-    /**",
                "-     * hash of queues to manage multiple requests",
                "-     * @property queues",
                "-     * @private",
                "-     */",
                "-    var queues={},",
                "-",
                "-    /**",
                "-     * queue index used to generate transaction ids",
                "-     * @property qidx",
                "-     * @type int",
                "-     * @private",
                "-     */",
                "-        qidx=0,",
                "-",
                "-    /**",
                "-     * node index used to generate unique node ids",
                "-     * @property nidx",
                "-     * @type int",
                "-     * @private",
                "-     */",
                "-        nidx=0,",
                "-",
                "-    /**",
                "-     * interal property used to prevent multiple simultaneous purge",
                "-     * processes",
                "-     * @property purging",
                "-     * @type boolean",
                "-     * @private",
                "-     */",
                "-        _purging=false,",
                "-",
                "-        ua=YAHOO.env.ua,",
                "-",
                "-        lang=YAHOO.lang,",
                "-",
                "-    _fail,",
                "-    _purge,",
                "-    _track,",
                "-",
                "-    /**",
                "-     * Generates an HTML element, this is not appended to a document",
                "-     * @method _node",
                "-     * @param type {string} the type of element",
                "-     * @param attr {string} the attributes",
                "-     * @param win {Window} optional window to create the element in",
                "-     * @return {HTMLElement} the generated node",
                "-     * @private",
                "-     */",
                "-    _node = function(type, attr, win) {",
                "-        var w = win || window, d=w.document, n=d.createElement(type), i;",
                "-",
                "-        for (i in attr) {",
                "-            if (attr.hasOwnProperty(i)) {",
                "-                n.setAttribute(i, attr[i]);",
                "-            }",
                "-        }",
                "-",
                "-        return n;",
                "-    },",
                "-",
                "-    /**",
                "-     * Generates a link node",
                "-     * @method _linkNode",
                "-     * @param url {string} the url for the css file",
                "-     * @param win {Window} optional window to create the node in",
                "-     * @return {HTMLElement} the generated node",
                "-     * @private",
                "-     */",
                "-    _linkNode = function(url, win, attributes) {",
                "-",
                "-        var o = {",
                "-            id:   \"yui__dyn_\" + (nidx++),",
                "-            type: \"text/css\",",
                "-            rel:  \"stylesheet\",",
                "-            href: url",
                "-        };",
                "-",
                "-        if (attributes) {",
                "-            lang.augmentObject(o, attributes);",
                "-        }",
                "-",
                "-        return _node(\"link\", o, win);",
                "-    },",
                "-",
                "-    /**",
                "-     * Generates a script node",
                "-     * @method _scriptNode",
                "-     * @param url {string} the url for the script file",
                "-     * @param win {Window} optional window to create the node in",
                "-     * @return {HTMLElement} the generated node",
                "-     * @private",
                "-     */",
                "-    _scriptNode = function(url, win, attributes) {",
                "-        var o = {",
                "-            id:   \"yui__dyn_\" + (nidx++),",
                "-            type: \"text/javascript\",",
                "-            src:  url",
                "-        };",
                "-",
                "-        if (attributes) {",
                "-            lang.augmentObject(o, attributes);",
                "-        }",
                "-",
                "-        return _node(\"script\", o, win);",
                "-    },",
                "-",
                "-    /**",
                "-     * Returns the data payload for callback functions",
                "-     * @method _returnData",
                "-     * @private",
                "-     */",
                "-    _returnData = function(q, msg) {",
                "-        return {",
                "-                tId: q.tId,",
                "-                win: q.win,",
                "-                data: q.data,",
                "-                nodes: q.nodes,",
                "-                msg: msg,",
                "-                purge: function() {",
                "-                    _purge(this.tId);",
                "-                }",
                "-            };",
                "-    },",
                "-",
                "-    _get = function(nId, tId) {",
                "-        var q = queues[tId],",
                "-            n = (lang.isString(nId)) ? q.win.document.getElementById(nId) : nId;",
                "-        if (!n) {",
                "-            _fail(tId, \"target node not found: \" + nId);",
                "-        }",
                "-",
                "-        return n;",
                "-    },",
                "-",
                "-",
                "-    /**",
                "-     * The request is complete, so executing the requester's callback",
                "-     * @method _finish",
                "-     * @param id {string} the id of the request",
                "-     * @private",
                "-     */",
                "-    _finish = function(id) {",
                "-        YAHOO.log(\"Finishing transaction \" + id);",
                "-        var q = queues[id], msg, context;",
                "-        q.finished = true;",
                "-",
                "-        if (q.aborted) {",
                "-            msg = \"transaction \" + id + \" was aborted\";",
                "-            _fail(id, msg);",
                "-            return;",
                "-        }",
                "-",
                "-        // execute success callback",
                "-        if (q.onSuccess) {",
                "-            context = q.scope || q.win;",
                "-            q.onSuccess.call(context, _returnData(q));",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Timeout detected",
                "-     * @method _timeout",
                "-     * @param id {string} the id of the request",
                "-     * @private",
                "-     */",
                "-    _timeout = function(id) {",
                "-        YAHOO.log(\"Timeout \" + id, \"info\", \"get\");",
                "-        var q = queues[id], context;",
                "-        if (q.onTimeout) {",
                "-            context = q.scope || q;",
                "-            q.onTimeout.call(context, _returnData(q));",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Loads the next item for a given request",
                "-     * @method _next",
                "-     * @param id {string} the id of the request",
                "-     * @param loaded {string} the url that was just loaded, if any",
                "-     * @private",
                "-     */",
                "-    _next = function(id, loaded) {",
                "-",
                "-        YAHOO.log(\"_next: \" + id + \", loaded: \" + loaded, \"info\", \"Get\");",
                "-",
                "-        var q = queues[id], w=q.win, d=w.document, h=d.getElementsByTagName(\"head\")[0],",
                "-            n, msg, url, s, extra;",
                "-",
                "-        if (q.timer) {",
                "-            // Y.log('cancel timer');",
                "-            q.timer.cancel();",
                "-        }",
                "-",
                "-        if (q.aborted) {",
                "-            msg = \"transaction \" + id + \" was aborted\";",
                "-            _fail(id, msg);",
                "-            return;",
                "-        }",
                "-",
                "-        if (loaded) {",
                "-            q.url.shift();",
                "-            if (q.varName) {",
                "-                q.varName.shift();",
                "-            }",
                "-        } else {",
                "-            // This is the first pass: make sure the url is an array",
                "-            q.url = (lang.isString(q.url)) ? [q.url] : q.url;",
                "-            if (q.varName) {",
                "-                q.varName = (lang.isString(q.varName)) ? [q.varName] : q.varName;",
                "-            }",
                "-        }",
                "-",
                "-",
                "-        if (q.url.length === 0) {",
                "-            // Safari 2.x workaround - There is no way to know when",
                "-            // a script is ready in versions of Safari prior to 3.x.",
                "-            // Adding an extra node reduces the problem, but doesn't",
                "-            // eliminate it completely because the browser executes",
                "-            // them asynchronously.",
                "-            if (q.type === \"script\" && ua.webkit && ua.webkit < 420 &&",
                "-                    !q.finalpass && !q.varName) {",
                "-                // Add another script node.  This does not guarantee that the",
                "-                // scripts will execute in order, but it does appear to fix the",
                "-                // problem on fast connections more effectively than using an",
                "-                // arbitrary timeout.  It is possible that the browser does",
                "-                // block subsequent script execution in this case for a limited",
                "-                // time.",
                "-                extra = _scriptNode(null, q.win, q.attributes);",
                "-                extra.innerHTML='YAHOO.util.Get._finalize(\"' + id + '\");';",
                "-                q.nodes.push(extra); h.appendChild(extra);",
                "-",
                "-            } else {",
                "-                _finish(id);",
                "-            }",
                "-",
                "-            return;",
                "-        }",
                "-",
                "-",
                "-        url = q.url[0];",
                "-",
                "-        // if the url is undefined, this is probably a trailing comma problem in IE",
                "-        if (!url) {",
                "-            q.url.shift();",
                "-            YAHOO.log('skipping empty url');",
                "-            return _next(id);",
                "-        }",
                "-",
                "-        YAHOO.log(\"attempting to load \" + url, \"info\", \"Get\");",
                "-",
                "-        if (q.timeout) {",
                "-            // Y.log('create timer');",
                "-            q.timer = lang.later(q.timeout, q, _timeout, id);",
                "-        }",
                "-",
                "-        if (q.type === \"script\") {",
                "-            n = _scriptNode(url, w, q.attributes);",
                "-        } else {",
                "-            n = _linkNode(url, w, q.attributes);",
                "-        }",
                "-",
                "-        // track this node's load progress",
                "-        _track(q.type, n, id, url, w, q.url.length);",
                "-",
                "-        // add the node to the queue so we can return it to the user supplied callback",
                "-        q.nodes.push(n);",
                "-",
                "-        // add it to the head or insert it before 'insertBefore'",
                "-        if (q.insertBefore) {",
                "-            s = _get(q.insertBefore, id);",
                "-            if (s) {",
                "-                s.parentNode.insertBefore(n, s);",
                "-            }",
                "-        } else {",
                "-            h.appendChild(n);",
                "-        }",
                "-",
                "-        YAHOO.log(\"Appending node: \" + url, \"info\", \"Get\");",
                "-",
                "-        // FireFox does not support the onload event for link nodes, so there is",
                "-        // no way to make the css requests synchronous. This means that the css",
                "-        // rules in multiple files could be applied out of order in this browser",
                "-        // if a later request returns before an earlier one.  Safari too.",
                "-        if ((ua.webkit || ua.gecko) && q.type === \"css\") {",
                "-            _next(id, url);",
                "-        }",
                "-    },",
                "-",
                "-    /**",
                "-     * Removes processed queues and corresponding nodes",
                "-     * @method _autoPurge",
                "-     * @private",
                "-     */",
                "-    _autoPurge = function() {",
                "-",
                "-        if (_purging) {",
                "-            return;",
                "-        }",
                "-",
                "-        _purging = true;",
                "-",
                "-        var i, q;",
                "-",
                "-        for (i in queues) {",
                "-            if (queues.hasOwnProperty(i)) {",
                "-                q = queues[i];",
                "-                if (q.autopurge && q.finished) {",
                "-                    _purge(q.tId);",
                "-                    delete queues[i];",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        _purging = false;",
                "-    },",
                "-",
                "-    /**",
                "-     * Saves the state for the request and begins loading",
                "-     * the requested urls",
                "-     * @method queue",
                "-     * @param type {string} the type of node to insert",
                "-     * @param url {string} the url to load",
                "-     * @param opts the hash of options for this request",
                "-     * @private",
                "-     */",
                "-    _queue = function(type, url, opts) {",
                "-",
                "-        var id = \"q\" + (qidx++), q;",
                "-        opts = opts || {};",
                "-",
                "-        if (qidx % YAHOO.util.Get.PURGE_THRESH === 0) {",
                "-            _autoPurge();",
                "-        }",
                "-",
                "-        queues[id] = lang.merge(opts, {",
                "-            tId: id,",
                "-            type: type,",
                "-            url: url,",
                "-            finished: false,",
                "-            aborted: false,",
                "-            nodes: []",
                "-        });",
                "-",
                "-        q = queues[id];",
                "-        q.win = q.win || window;",
                "-        q.scope = q.scope || q.win;",
                "-        q.autopurge = (\"autopurge\" in q) ? q.autopurge :",
                "-                      (type === \"script\") ? true : false;",
                "-",
                "-        q.attributes = q.attributes || {};",
                "-        q.attributes.charset = opts.charset || q.attributes.charset || 'utf-8';",
                "-",
                "-        lang.later(0, q, _next, id);",
                "-",
                "-        return {",
                "-            tId: id",
                "-        };",
                "-    };",
                "-",
                "-    /**",
                "-     * Detects when a node has been loaded.  In the case of",
                "-     * script nodes, this does not guarantee that contained",
                "-     * script is ready to use.",
                "-     * @method _track",
                "-     * @param type {string} the type of node to track",
                "-     * @param n {HTMLElement} the node to track",
                "-     * @param id {string} the id of the request",
                "-     * @param url {string} the url that is being loaded",
                "-     * @param win {Window} the targeted window",
                "-     * @param qlength the number of remaining items in the queue,",
                "-     * including this one",
                "-     * @param trackfn {Function} function to execute when finished",
                "-     * the default is _next",
                "-     * @private",
                "-     */",
                "-    _track = function(type, n, id, url, win, qlength, trackfn) {",
                "-        var f = trackfn || _next, rs, q, a, freq, w, l, i, msg;",
                "-",
                "-        // IE supports the readystatechange event for script and css nodes",
                "-        if (ua.ie) {",
                "-            n.onreadystatechange = function() {",
                "-                rs = this.readyState;",
                "-                if (\"loaded\" === rs || \"complete\" === rs) {",
                "-                    YAHOO.log(id + \" onload \" + url, \"info\", \"Get\");",
                "-                    n.onreadystatechange = null;",
                "-                    f(id, url);",
                "-                }",
                "-            };",
                "-",
                "-        // webkit prior to 3.x is problemmatic",
                "-        } else if (ua.webkit) {",
                "-",
                "-            if (type === \"script\") {",
                "-",
                "-                // Safari 3.x supports the load event for script nodes (DOM2)",
                "-                if (ua.webkit >= 420) {",
                "-",
                "-                    n.addEventListener(\"load\", function() {",
                "-                        YAHOO.log(id + \" DOM2 onload \" + url, \"info\", \"Get\");",
                "-                        f(id, url);",
                "-                    });",
                "-",
                "-                // Nothing can be done with Safari < 3.x except to pause and hope",
                "-                // for the best, particularly after last script is inserted. The",
                "-                // scripts will always execute in the order they arrive, not",
                "-                // necessarily the order in which they were inserted.  To support",
                "-                // script nodes with complete reliability in these browsers, script",
                "-                // nodes either need to invoke a function in the window once they",
                "-                // are loaded or the implementer needs to provide a well-known",
                "-                // property that the utility can poll for.",
                "-                } else {",
                "-                    // Poll for the existence of the named variable, if it",
                "-                    // was supplied.",
                "-                    q = queues[id];",
                "-                    if (q.varName) {",
                "-                        freq = YAHOO.util.Get.POLL_FREQ;",
                "-                        YAHOO.log(\"Polling for \" + q.varName[0]);",
                "-                        q.maxattempts = YAHOO.util.Get.TIMEOUT/freq;",
                "-                        q.attempts = 0;",
                "-                        q._cache = q.varName[0].split(\".\");",
                "-                        q.timer = lang.later(freq, q, function(o) {",
                "-                            a = this._cache;",
                "-                            l = a.length;",
                "-                            w = this.win;",
                "-                            for (i=0; i<l; i=i+1) {",
                "-                                w = w[a[i]];",
                "-                                if (!w) {",
                "-                                    // if we have exausted our attempts, give up",
                "-                                    this.attempts++;",
                "-                                    if (this.attempts++ > this.maxattempts) {",
                "-                                        msg = \"Over retry limit, giving up\";",
                "-                                        q.timer.cancel();",
                "-                                        _fail(id, msg);",
                "-                                    } else {",
                "-                                        YAHOO.log(a[i] + \" failed, retrying\");",
                "-                                    }",
                "-                                    return;",
                "-                                }",
                "-                            }",
                "-",
                "-                            YAHOO.log(\"Safari poll complete\");",
                "-",
                "-                            q.timer.cancel();",
                "-                            f(id, url);",
                "-",
                "-                        }, null, true);",
                "-                    } else {",
                "-                        lang.later(YAHOO.util.Get.POLL_FREQ, null, f, [id, url]);",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-        // FireFox and Opera support onload (but not DOM2 in FF) handlers for",
                "-        // script nodes.  Opera, but not FF, supports the onload event for link",
                "-        // nodes.",
                "-        } else {",
                "-            n.onload = function() {",
                "-                YAHOO.log(id + \" onload \" + url, \"info\", \"Get\");",
                "-                f(id, url);",
                "-            };",
                "-        }",
                "-    };",
                "-",
                "-    /*",
                "-     * The request failed, execute fail handler with whatever",
                "-     * was accomplished.  There isn't a failure case at the",
                "-     * moment unless you count aborted transactions",
                "-     * @method _fail",
                "-     * @param id {string} the id of the request",
                "-     * @private",
                "-     */",
                "-    _fail = function(id, msg) {",
                "-        YAHOO.log(\"get failure: \" + msg, \"warn\", \"Get\");",
                "-        var q = queues[id], context;",
                "-        // execute failure callback",
                "-        if (q.onFailure) {",
                "-            context = q.scope || q.win;",
                "-            q.onFailure.call(context, _returnData(q, msg));",
                "-        }",
                "-    };",
                "-",
                "-    /**",
                "-     * Removes the nodes for the specified queue",
                "-     * @method _purge",
                "-     * @private",
                "-     */",
                "-    _purge = function(tId) {",
                "-        if (queues[tId]) {",
                "-",
                "-            var q     = queues[tId],",
                "-                nodes = q.nodes,",
                "-                l     = nodes.length,",
                "-                d     = q.win.document,",
                "-                h     = d.getElementsByTagName(\"head\")[0],",
                "-                sib, i, node, attr;",
                "-",
                "-            if (q.insertBefore) {",
                "-                sib = _get(q.insertBefore, tId);",
                "-                if (sib) {",
                "-                    h = sib.parentNode;",
                "-                }",
                "-            }",
                "-",
                "-            for (i=0; i<l; i=i+1) {",
                "-                node = nodes[i];",
                "-                if (node.clearAttributes) {",
                "-                    node.clearAttributes();",
                "-                } else {",
                "-                    for (attr in node) {",
                "-                        if (node.hasOwnProperty(attr)) {",
                "-                            delete node[attr];",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                h.removeChild(node);",
                "-            }",
                "-",
                "-            q.nodes = [];",
                "-        }",
                "-    };",
                "-",
                "-",
                "-    return {",
                "-",
                "-        /**",
                "-         * The default poll freqency in ms, when needed",
                "-         * @property POLL_FREQ",
                "-         * @static",
                "-         * @type int",
                "-         * @default 10",
                "-         */",
                "-        POLL_FREQ: 10,",
                "-",
                "-        /**",
                "-         * The number of request required before an automatic purge.",
                "-         * property PURGE_THRESH",
                "-         * @static",
                "-         * @type int",
                "-         * @default 20",
                "-         */",
                "-        PURGE_THRESH: 20,",
                "-",
                "-        /**",
                "-         * The length time to poll for varName when loading a script in",
                "-         * Safari 2.x before the transaction fails.",
                "-         * property TIMEOUT",
                "-         * @static",
                "-         * @type int",
                "-         * @default 2000",
                "-         */",
                "-        TIMEOUT: 2000,",
                "-",
                "-        /**",
                "-         * Called by the the helper for detecting script load in Safari",
                "-         * @method _finalize",
                "-         * @param id {string} the transaction id",
                "-         * @private",
                "-         */",
                "-        _finalize: function(id) {",
                "-            YAHOO.log(id + \" finalized \", \"info\", \"Get\");",
                "-            lang.later(0, null, _finish, id);",
                "-        },",
                "-",
                "-        /**",
                "-         * Abort a transaction",
                "-         * @method abort",
                "-         * @param {string|object} either the tId or the object returned from",
                "-         * script() or css()",
                "-         */",
                "-        abort: function(o) {",
                "-            var id = (lang.isString(o)) ? o : o.tId,",
                "-                q = queues[id];",
                "-            if (q) {",
                "-                YAHOO.log(\"Aborting \" + id, \"info\", \"Get\");",
                "-                q.aborted = true;",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Fetches and inserts one or more script nodes into the head",
                "-         * of the current document or the document in a specified window.",
                "-         *",
                "-         * @method script",
                "-         * @static",
                "-         * @param url {string|string[]} the url or urls to the script(s)",
                "-         * @param opts {object} Options:",
                "-         * <dl>",
                "-         * <dt>onSuccess</dt>",
                "-         * <dd>",
                "-         * callback to execute when the script(s) are finished loading",
                "-         * The callback receives an object back with the following",
                "-         * data:",
                "-         * <dl>",
                "-         * <dt>win</dt>",
                "-         * <dd>the window the script(s) were inserted into</dd>",
                "-         * <dt>data</dt>",
                "-         * <dd>the data object passed in when the request was made</dd>",
                "-         * <dt>nodes</dt>",
                "-         * <dd>An array containing references to the nodes that were",
                "-         * inserted</dd>",
                "-         * <dt>purge</dt>",
                "-         * <dd>A function that, when executed, will remove the nodes",
                "-         * that were inserted</dd>",
                "-         * <dt>",
                "-         * </dl>",
                "-         * </dd>",
                "-         * <dt>onFailure</dt>",
                "-         * <dd>",
                "-         * callback to execute when the script load operation fails",
                "-         * The callback receives an object back with the following",
                "-         * data:",
                "-         * <dl>",
                "-         * <dt>win</dt>",
                "-         * <dd>the window the script(s) were inserted into</dd>",
                "-         * <dt>data</dt>",
                "-         * <dd>the data object passed in when the request was made</dd>",
                "-         * <dt>nodes</dt>",
                "-         * <dd>An array containing references to the nodes that were",
                "-         * inserted successfully</dd>",
                "-         * <dt>purge</dt>",
                "-         * <dd>A function that, when executed, will remove any nodes",
                "-         * that were inserted</dd>",
                "-         * <dt>",
                "-         * </dl>",
                "-         * </dd>",
                "-         * <dt>onTimeout</dt>",
                "-         * <dd>",
                "-         * callback to execute when a timeout occurs.",
                "-         * The callback receives an object back with the following",
                "-         * data:",
                "-         * <dl>",
                "-         * <dt>win</dt>",
                "-         * <dd>the window the script(s) were inserted into</dd>",
                "-         * <dt>data</dt>",
                "-         * <dd>the data object passed in when the request was made</dd>",
                "-         * <dt>nodes</dt>",
                "-         * <dd>An array containing references to the nodes that were",
                "-         * inserted</dd>",
                "-         * <dt>purge</dt>",
                "-         * <dd>A function that, when executed, will remove the nodes",
                "-         * that were inserted</dd>",
                "-         * <dt>",
                "-         * </dl>",
                "-         * </dd>",
                "-         * <dt>scope</dt>",
                "-         * <dd>the execution context for the callbacks</dd>",
                "-         * <dt>win</dt>",
                "-         * <dd>a window other than the one the utility occupies</dd>",
                "-         * <dt>autopurge</dt>",
                "-         * <dd>",
                "-         * setting to true will let the utilities cleanup routine purge",
                "-         * the script once loaded",
                "-         * </dd>",
                "-         * <dt>data</dt>",
                "-         * <dd>",
                "-         * data that is supplied to the callback when the script(s) are",
                "-         * loaded.",
                "-         * </dd>",
                "-         * <dt>varName</dt>",
                "-         * <dd>",
                "-         * variable that should be available when a script is finished",
                "-         * loading.  Used to help Safari 2.x and below with script load",
                "-         * detection.  The type of this property should match what was",
                "-         * passed into the url parameter: if loading a single url, a",
                "-         * string can be supplied.  If loading multiple scripts, you",
                "-         * must supply an array that contains the variable name for",
                "-         * each script.",
                "-         * </dd>",
                "-         * <dt>insertBefore</dt>",
                "-         * <dd>node or node id that will become the new node's nextSibling</dd>",
                "-         * </dl>",
                "-         * <dt>charset</dt>",
                "-         * <dd>Node charset, deprecated, use 'attributes'</dd>",
                "-         * <dt>attributes</dt>",
                "-         * <dd>A hash of attributes to apply to dynamic nodes.</dd>",
                "-         * <dt>timeout</dt>",
                "-         * <dd>Number of milliseconds to wait before aborting and firing the timeout event</dd>",
                "-         * <pre>",
                "-         * // assumes yahoo, dom, and event are already on the page",
                "-         * &nbsp;&nbsp;YAHOO.util.Get.script(",
                "-         * &nbsp;&nbsp;[\"http://yui.yahooapis.com/2.7.0/build/dragdrop/dragdrop-min.js\",",
                "-         * &nbsp;&nbsp;&nbsp;\"http://yui.yahooapis.com/2.7.0/build/animation/animation-min.js\"], &#123;",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(o.data); // foo",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new YAHOO.util.DDProxy(\"dd1\"); // also new o.reference(\"dd1\"); would work",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because YAHOO is the scope\");",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) // true",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// o.purge(); // optionally remove the script nodes immediately",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(\"transaction failed\");",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, // 10 second timeout",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;scope: YAHOO,",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;// win: otherframe // target another window/frame",
                "-         * &nbsp;&nbsp;&nbsp;&nbsp;autopurge: true // allow the utility to choose when to remove the nodes",
                "-         * &nbsp;&nbsp;&#125;);",
                "-         * </pre>",
                "-         * @return {tId: string} an object containing info about the transaction",
                "-         */",
                "-        script: function(url, opts) { return _queue(\"script\", url, opts); },",
                "-",
                "-        /**",
                "-         * Fetches and inserts one or more css link nodes into the",
                "-         * head of the current document or the document in a specified",
                "-         * window.",
                "-         * @method css",
                "-         * @static",
                "-         * @param url {string} the url or urls to the css file(s)",
                "-         * @param opts Options:",
                "-         * <dl>",
                "-         * <dt>onSuccess</dt>",
                "-         * <dd>",
                "-         * callback to execute when the css file(s) are finished loading",
                "-         * The callback receives an object back with the following",
                "-         * data:",
                "-         * <dl>win</dl>",
                "-         * <dd>the window the link nodes(s) were inserted into</dd>",
                "-         * <dt>data</dt>",
                "-         * <dd>the data object passed in when the request was made</dd>",
                "-         * <dt>nodes</dt>",
                "-         * <dd>An array containing references to the nodes that were",
                "-         * inserted</dd>",
                "-         * <dt>purge</dt>",
                "-         * <dd>A function that, when executed, will remove the nodes",
                "-         * that were inserted</dd>",
                "-         * <dt>",
                "-         * </dl>",
                "-         * </dd>",
                "-         * <dt>scope</dt>",
                "-         * <dd>the execution context for the callbacks</dd>",
                "-         * <dt>win</dt>",
                "-         * <dd>a window other than the one the utility occupies</dd>",
                "-         * <dt>data</dt>",
                "-         * <dd>",
                "-         * data that is supplied to the callbacks when the nodes(s) are",
                "-         * loaded.",
                "-         * </dd>",
                "-         * <dt>insertBefore</dt>",
                "-         * <dd>node or node id that will become the new node's nextSibling</dd>",
                "-         * <dt>charset</dt>",
                "-         * <dd>Node charset, deprecated, use 'attributes'</dd>",
                "-         * <dt>attributes</dt>",
                "-         * <dd>A hash of attributes to apply to dynamic nodes.</dd>",
                "-         * </dl>",
                "-         * <pre>",
                "-         *      YAHOO.util.Get.css(\"http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css\");",
                "-         * </pre>",
                "-         * <pre>",
                "-         *      YAHOO.util.Get.css([\"http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css\",",
                "-         *                          \"http://yui.yahooapis.com/2.7.0/build/logger/assets/skins/sam/logger.css\"]);",
                "-         * </pre>",
                "-         * @return {tId: string} an object containing info about the transaction",
                "-         */",
                "-        css: function(url, opts) {",
                "-            return _queue(\"css\", url, opts);",
                "-        }",
                "-    };",
                "-}();",
                "-",
                "-YAHOO.register(\"get\", YAHOO.util.Get, {version: \"2.9.0\", build: \"2800\"});",
                "-/*jslint evil: true, strict: false, regexp: false*/",
                "-",
                "-/**",
                "- * Provides dynamic loading for the YUI library.  It includes the dependency",
                "- * info for the library, and will automatically pull in dependencies for",
                "- * the modules requested.  It supports rollup files (such as utilities.js",
                "- * and yahoo-dom-event.js), and will automatically use these when",
                "- * appropriate in order to minimize the number of http connections",
                "- * required to load all of the dependencies.",
                "- *",
                "- * @module yuiloader",
                "- * @namespace YAHOO.util",
                "- */",
                "-",
                "-/**",
                "- * YUILoader provides dynamic loading for YUI.",
                "- * @class YAHOO.util.YUILoader",
                "- * @todo",
                "- *      version management, automatic sandboxing",
                "- */",
                "-(function() {",
                "-",
                "-    var Y = YAHOO,",
                "-        util = Y.util,",
                "-        lang = Y.lang,",
                "-        env = Y.env,",
                "-        PROV = \"_provides\",",
                "-        SUPER = \"_supersedes\",",
                "-        REQ = \"expanded\",",
                "-        AFTER = \"_after\",",
                "-        VERSION = \"2.9.0\";",
                "-",
                "-    // version hack for cdn testing",
                "-    // if (/VERSION/.test(VERSION)) {",
                "-        // VERSION = \"2.8.2\";",
                "-    // }",
                "-",
                "-    var YUI = {",
                "-",
                "-        dupsAllowed: {'yahoo': true, 'get': true},",
                "-",
                "-        /*",
                "-         * The library metadata for the current release  The is the default",
                "-         * value for YAHOO.util.YUILoader.moduleInfo",
                "-         * @property YUIInfo",
                "-         * @static",
                "-         */",
                "-        info: {",
                "-",
                "-    // 'root': '2.5.2/build/',",
                "-    // 'base': 'http://yui.yahooapis.com/2.5.2/build/',",
                "-",
                "-    'root': VERSION + '/build/',",
                "-    'base': 'http://yui.yahooapis.com/' + VERSION + '/build/',",
                "-",
                "-    'comboBase': 'http://yui.yahooapis.com/combo?',",
                "-",
                "-    'skin': {",
                "-        'defaultSkin': 'sam',",
                "-        'base': 'assets/skins/',",
                "-        'path': 'skin.css',",
                "-        'after': ['reset', 'fonts', 'grids', 'base'],",
                "-        'rollup': 3",
                "-    },",
                "-",
                "-    dupsAllowed: ['yahoo', 'get'],",
                "-",
                "-    'moduleInfo': {",
                "-",
                "-        'animation': {",
                "-            'type': 'js',",
                "-            'path': 'animation/animation-min.js',",
                "-            'requires': ['dom', 'event']",
                "-        },",
                "-",
                "-        'autocomplete': {",
                "-            'type': 'js',",
                "-            'path': 'autocomplete/autocomplete-min.js',",
                "-            'requires': ['dom', 'event', 'datasource'],",
                "-            'optional': ['connection', 'animation'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'base': {",
                "-            'type': 'css',",
                "-            'path': 'base/base-min.css',",
                "-            'after': ['reset', 'fonts', 'grids']",
                "-        },",
                "-",
                "-        'button': {",
                "-            'type': 'js',",
                "-            'path': 'button/button-min.js',",
                "-            'requires': ['element'],",
                "-            'optional': ['menu'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'calendar': {",
                "-            'type': 'js',",
                "-            'path': 'calendar/calendar-min.js',",
                "-            'requires': ['event', 'dom'],",
                "-            supersedes: ['datemath'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'carousel': {",
                "-            'type': 'js',",
                "-            'path': 'carousel/carousel-min.js',",
                "-            'requires': ['element'],",
                "-            'optional': ['animation'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'charts': {",
                "-            'type': 'js',",
                "-            'path': 'charts/charts-min.js',",
                "-            'requires': ['element', 'json', 'datasource', 'swf']",
                "-        },",
                "-",
                "-        'colorpicker': {",
                "-            'type': 'js',",
                "-            'path': 'colorpicker/colorpicker-min.js',",
                "-            'requires': ['slider', 'element'],",
                "-            'optional': ['animation'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'connection': {",
                "-            'type': 'js',",
                "-            'path': 'connection/connection-min.js',",
                "-            'requires': ['event'],",
                "-            'supersedes': ['connectioncore']",
                "-        },",
                "-",
                "-        'connectioncore': {",
                "-            'type': 'js',",
                "-            'path': 'connection/connection_core-min.js',",
                "-            'requires': ['event'],",
                "-            'pkg': 'connection'",
                "-        },",
                "-",
                "-        'container': {",
                "-            'type': 'js',",
                "-            'path': 'container/container-min.js',",
                "-            'requires': ['dom', 'event'],",
                "-            // button is also optional, but this creates a circular",
                "-            // dependency when loadOptional is specified.  button",
                "-            // optionally includes menu, menu requires container.",
                "-            'optional': ['dragdrop', 'animation', 'connection'],",
                "-            'supersedes': ['containercore'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'containercore': {",
                "-            'type': 'js',",
                "-            'path': 'container/container_core-min.js',",
                "-            'requires': ['dom', 'event'],",
                "-            'pkg': 'container'",
                "-        },",
                "-",
                "-        'cookie': {",
                "-            'type': 'js',",
                "-            'path': 'cookie/cookie-min.js',",
                "-            'requires': ['yahoo']",
                "-        },",
                "-",
                "-        'datasource': {",
                "-            'type': 'js',",
                "-            'path': 'datasource/datasource-min.js',",
                "-            'requires': ['event'],",
                "-            'optional': ['connection']",
                "-        },",
                "-",
                "-        'datatable': {",
                "-            'type': 'js',",
                "-            'path': 'datatable/datatable-min.js',",
                "-            'requires': ['element', 'datasource'],",
                "-            'optional': ['calendar', 'dragdrop', 'paginator'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        datemath: {",
                "-            'type': 'js',",
                "-            'path': 'datemath/datemath-min.js',",
                "-            'requires': ['yahoo']",
                "-        },",
                "-",
                "-        'dom': {",
                "-            'type': 'js',",
                "-            'path': 'dom/dom-min.js',",
                "-            'requires': ['yahoo']",
                "-        },",
                "-",
                "-        'dragdrop': {",
                "-            'type': 'js',",
                "-            'path': 'dragdrop/dragdrop-min.js',",
                "-            'requires': ['dom', 'event']",
                "-        },",
                "-",
                "-        'editor': {",
                "-            'type': 'js',",
                "-            'path': 'editor/editor-min.js',",
                "-            'requires': ['menu', 'element', 'button'],",
                "-            'optional': ['animation', 'dragdrop'],",
                "-            'supersedes': ['simpleeditor'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'element': {",
                "-            'type': 'js',",
                "-            'path': 'element/element-min.js',",
                "-            'requires': ['dom', 'event'],",
                "-            'optional': ['event-mouseenter', 'event-delegate']",
                "-        },",
                "-",
                "-        'element-delegate': {",
                "-            'type': 'js',",
                "-            'path': 'element-delegate/element-delegate-min.js',",
                "-            'requires': ['element']",
                "-        },",
                "-",
                "-        'event': {",
                "-            'type': 'js',",
                "-            'path': 'event/event-min.js',",
                "-            'requires': ['yahoo']",
                "-        },",
                "-",
                "-        'event-simulate': {",
                "-            'type': 'js',",
                "-            'path': 'event-simulate/event-simulate-min.js',",
                "-            'requires': ['event']",
                "-        },",
                "-",
                "-        'event-delegate': {",
                "-            'type': 'js',",
                "-            'path': 'event-delegate/event-delegate-min.js',",
                "-            'requires': ['event'],",
                "-            'optional': ['selector']",
                "-        },",
                "-",
                "-        'event-mouseenter': {",
                "-            'type': 'js',",
                "-            'path': 'event-mouseenter/event-mouseenter-min.js',",
                "-            'requires': ['dom', 'event']",
                "-        },",
                "-",
                "-        'fonts': {",
                "-            'type': 'css',",
                "-            'path': 'fonts/fonts-min.css'",
                "-        },",
                "-",
                "-        'get': {",
                "-            'type': 'js',",
                "-            'path': 'get/get-min.js',",
                "-            'requires': ['yahoo']",
                "-        },",
                "-",
                "-        'grids': {",
                "-            'type': 'css',",
                "-            'path': 'grids/grids-min.css',",
                "-            'requires': ['fonts'],",
                "-            'optional': ['reset']",
                "-        },",
                "-",
                "-        'history': {",
                "-            'type': 'js',",
                "-            'path': 'history/history-min.js',",
                "-            'requires': ['event']",
                "-        },",
                "-",
                "-         'imagecropper': {",
                "-             'type': 'js',",
                "-             'path': 'imagecropper/imagecropper-min.js',",
                "-             'requires': ['dragdrop', 'element', 'resize'],",
                "-             'skinnable': true",
                "-         },",
                "-",
                "-         'imageloader': {",
                "-            'type': 'js',",
                "-            'path': 'imageloader/imageloader-min.js',",
                "-            'requires': ['event', 'dom']",
                "-         },",
                "-",
                "-         'json': {",
                "-            'type': 'js',",
                "-            'path': 'json/json-min.js',",
                "-            'requires': ['yahoo']",
                "-         },",
                "-",
                "-         'layout': {",
                "-             'type': 'js',",
                "-             'path': 'layout/layout-min.js',",
                "-             'requires': ['element'],",
                "-             'optional': ['animation', 'dragdrop', 'resize', 'selector'],",
                "-             'skinnable': true",
                "-         },",
                "-",
                "-        'logger': {",
                "-            'type': 'js',",
                "-            'path': 'logger/logger-min.js',",
                "-            'requires': ['event', 'dom'],",
                "-            'optional': ['dragdrop'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'menu': {",
                "-            'type': 'js',",
                "-            'path': 'menu/menu-min.js',",
                "-            'requires': ['containercore'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'paginator': {",
                "-            'type': 'js',",
                "-            'path': 'paginator/paginator-min.js',",
                "-            'requires': ['element'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'profiler': {",
                "-            'type': 'js',",
                "-            'path': 'profiler/profiler-min.js',",
                "-            'requires': ['yahoo']",
                "-        },",
                "-",
                "-",
                "-        'profilerviewer': {",
                "-            'type': 'js',",
                "-            'path': 'profilerviewer/profilerviewer-min.js',",
                "-            'requires': ['profiler', 'yuiloader', 'element'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'progressbar': {",
                "-            'type': 'js',",
                "-            'path': 'progressbar/progressbar-min.js',",
                "-            'requires': ['element'],",
                "-            'optional': ['animation'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'reset': {",
                "-            'type': 'css',",
                "-            'path': 'reset/reset-min.css'",
                "-        },",
                "-",
                "-        'reset-fonts-grids': {",
                "-            'type': 'css',",
                "-            'path': 'reset-fonts-grids/reset-fonts-grids.css',",
                "-            'supersedes': ['reset', 'fonts', 'grids', 'reset-fonts'],",
                "-            'rollup': 4",
                "-        },",
                "-",
                "-        'reset-fonts': {",
                "-            'type': 'css',",
                "-            'path': 'reset-fonts/reset-fonts.css',",
                "-            'supersedes': ['reset', 'fonts'],",
                "-            'rollup': 2",
                "-        },",
                "-",
                "-         'resize': {",
                "-             'type': 'js',",
                "-             'path': 'resize/resize-min.js',",
                "-             'requires': ['dragdrop', 'element'],",
                "-             'optional': ['animation'],",
                "-             'skinnable': true",
                "-         },",
                "-",
                "-        'selector': {",
                "-            'type': 'js',",
                "-            'path': 'selector/selector-min.js',",
                "-            'requires': ['yahoo', 'dom']",
                "-        },",
                "-",
                "-        'simpleeditor': {",
                "-            'type': 'js',",
                "-            'path': 'editor/simpleeditor-min.js',",
                "-            'requires': ['element'],",
                "-            'optional': ['containercore', 'menu', 'button', 'animation', 'dragdrop'],",
                "-            'skinnable': true,",
                "-            'pkg': 'editor'",
                "-        },",
                "-",
                "-        'slider': {",
                "-            'type': 'js',",
                "-            'path': 'slider/slider-min.js',",
                "-            'requires': ['dragdrop'],",
                "-            'optional': ['animation'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'storage': {",
                "-            'type': 'js',",
                "-            'path': 'storage/storage-min.js',",
                "-            'requires': ['yahoo', 'event', 'cookie'],",
                "-            'optional': ['swfstore']",
                "-        },",
                "-",
                "-         'stylesheet': {",
                "-            'type': 'js',",
                "-            'path': 'stylesheet/stylesheet-min.js',",
                "-            'requires': ['yahoo']",
                "-         },",
                "-",
                "-        'swf': {",
                "-            'type': 'js',",
                "-            'path': 'swf/swf-min.js',",
                "-            'requires': ['element'],",
                "-            'supersedes': ['swfdetect']",
                "-        },",
                "-",
                "-        'swfdetect': {",
                "-            'type': 'js',",
                "-            'path': 'swfdetect/swfdetect-min.js',",
                "-            'requires': ['yahoo']",
                "-        },",
                "-",
                "-        'swfstore': {",
                "-            'type': 'js',",
                "-            'path': 'swfstore/swfstore-min.js',",
                "-            'requires': ['element', 'cookie', 'swf']",
                "-        },",
                "-",
                "-        'tabview': {",
                "-            'type': 'js',",
                "-            'path': 'tabview/tabview-min.js',",
                "-            'requires': ['element'],",
                "-            'optional': ['connection'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'treeview': {",
                "-            'type': 'js',",
                "-            'path': 'treeview/treeview-min.js',",
                "-            'requires': ['event', 'dom'],",
                "-            'optional': ['json', 'animation', 'calendar'],",
                "-            'skinnable': true",
                "-        },",
                "-",
                "-        'uploader': {",
                "-            'type': 'js',",
                "-            'path': 'uploader/uploader-min.js',",
                "-            'requires': ['element']",
                "-        },",
                "-",
                "-        'utilities': {",
                "-            'type': 'js',",
                "-            'path': 'utilities/utilities.js',",
                "-            'supersedes': ['yahoo', 'event', 'dragdrop', 'animation', 'dom', 'connection', 'element', 'yahoo-dom-event', 'get', 'yuiloader', 'yuiloader-dom-event'],",
                "-            'rollup': 8",
                "-        },",
                "-",
                "-        'yahoo': {",
                "-            'type': 'js',",
                "-            'path': 'yahoo/yahoo-min.js'",
                "-        },",
                "-",
                "-        'yahoo-dom-event': {",
                "-            'type': 'js',",
                "-            'path': 'yahoodomevent/yahoo-dom-event.js',",
                "-            'supersedes': ['yahoo', 'event', 'dom'],",
                "-            'rollup': 3",
                "-        },",
                "-",
                "-        'yuiloader': {",
                "-            'type': 'js',",
                "-            'path': 'yuiloader/yuiloader-min.js',",
                "-            'supersedes': ['yahoo', 'get']",
                "-        },",
                "-",
                "-        'yuiloader-dom-event': {",
                "-            'type': 'js',",
                "-            'path': 'yuiloader-dom-event/yuiloader-dom-event.js',",
                "-            'supersedes': ['yahoo', 'dom', 'event', 'get', 'yuiloader', 'yahoo-dom-event'],",
                "-            'rollup': 5",
                "-        },",
                "-",
                "-        'yuitest': {",
                "-            'type': 'js',",
                "-            'path': 'yuitest/yuitest-min.js',",
                "-            'requires': ['logger'],",
                "-            'optional': ['event-simulate'],",
                "-            'skinnable': true",
                "-        }",
                "-    }",
                "-},",
                "-        ObjectUtil: {",
                "-            appendArray: function(o, a) {",
                "-                if (a) {",
                "-                    for (var i=0; i<a.length; i=i+1) {",
                "-                        o[a[i]] = true;",
                "-                    }",
                "-                }",
                "-            },",
                "-",
                "-            keys: function(o, ordered) {",
                "-                var a=[], i;",
                "-                for (i in o) {",
                "-                    if (lang.hasOwnProperty(o, i)) {",
                "-                        a.push(i);",
                "-                    }",
                "-                }",
                "-",
                "-                return a;",
                "-            }",
                "-        },",
                "-",
                "-        ArrayUtil: {",
                "-",
                "-            appendArray: function(a1, a2) {",
                "-                Array.prototype.push.apply(a1, a2);",
                "-                /*",
                "-                for (var i=0; i<a2.length; i=i+1) {",
                "-                    a1.push(a2[i]);",
                "-                }",
                "-                */",
                "-            },",
                "-",
                "-            indexOf: function(a, val) {",
                "-                for (var i=0; i<a.length; i=i+1) {",
                "-                    if (a[i] === val) {",
                "-                        return i;",
                "-                    }",
                "-                }",
                "-",
                "-                return -1;",
                "-            },",
                "-",
                "-            toObject: function(a) {",
                "-                var o = {};",
                "-                for (var i=0; i<a.length; i=i+1) {",
                "-                    o[a[i]] = true;",
                "-                }",
                "-",
                "-                return o;",
                "-            },",
                "-",
                "-            /*",
                "-             * Returns a unique array.  Does not maintain order, which is fine",
                "-             * for this application, and performs better than it would if it",
                "-             * did.",
                "-             */",
                "-            uniq: function(a) {",
                "-                return YUI.ObjectUtil.keys(YUI.ArrayUtil.toObject(a));",
                "-            }",
                "-        }",
                "-    };",
                "-",
                "-    YAHOO.util.YUILoader = function(o) {",
                "-",
                "-        /**",
                "-         * Internal callback to handle multiple internal insert() calls",
                "-         * so that css is inserted prior to js",
                "-         * @property _internalCallback",
                "-         * @private",
                "-         */",
                "-        this._internalCallback = null;",
                "-",
                "-        /**",
                "-         * Use the YAHOO environment listener to detect script load.  This",
                "-         * is only switched on for Safari 2.x and below.",
                "-         * @property _useYahooListener",
                "-         * @private",
                "-         */",
                "-        this._useYahooListener = false;",
                "-",
                "-        /**",
                "-         * Callback that will be executed when the loader is finished",
                "-         * with an insert",
                "-         * @method onSuccess",
                "-         * @type function",
                "-         */",
                "-        this.onSuccess = null;",
                "-",
                "-        /**",
                "-         * Callback that will be executed if there is a failure",
                "-         * @method onFailure",
                "-         * @type function",
                "-         */",
                "-        this.onFailure = Y.log;",
                "-",
                "-        /**",
                "-         * Callback that will be executed each time a new module is loaded",
                "-         * @method onProgress",
                "-         * @type function",
                "-         */",
                "-        this.onProgress = null;",
                "-",
                "-        /**",
                "-         * Callback that will be executed if a timeout occurs",
                "-         * @method onTimeout",
                "-         * @type function",
                "-         */",
                "-        this.onTimeout = null;",
                "-",
                "-        /**",
                "-         * The execution scope for all callbacks",
                "-         * @property scope",
                "-         * @default this",
                "-         */",
                "-        this.scope = this;",
                "-",
                "-        /**",
                "-         * Data that is passed to all callbacks",
                "-         * @property data",
                "-         */",
                "-        this.data = null;",
                "-",
                "-        /**",
                "-         * Node reference or id where new nodes should be inserted before",
                "-         * @property insertBefore",
                "-         * @type string|HTMLElement",
                "-         */",
                "-        this.insertBefore = null;",
                "-",
                "-        /**",
                "-         * The charset attribute for inserted nodes",
                "-         * @property charset",
                "-         * @type string",
                "-         * @default utf-8",
                "-         */",
                "-        this.charset = null;",
                "-",
                "-        /**",
                "-         * The name of the variable in a sandbox or script node",
                "-         * (for external script support in Safari 2.x and earlier)",
                "-         * to reference when the load is complete.  If this variable",
                "-         * is not available in the specified scripts, the operation will",
                "-         * fail.",
                "-         * @property varName",
                "-         * @type string",
                "-         */",
                "-        this.varName = null;",
                "-",
                "-        /**",
                "-         * The base directory.",
                "-         * @property base",
                "-         * @type string",
                "-         * @default http://yui.yahooapis.com/[YUI VERSION]/build/",
                "-         */",
                "-        this.base = YUI.info.base;",
                "-",
                "-        /**",
                "-         * Base path for the combo service",
                "-         * @property comboBase",
                "-         * @type string",
                "-         * @default http://yui.yahooapis.com/combo?",
                "-         */",
                "-        this.comboBase = YUI.info.comboBase;",
                "-",
                "-        /**",
                "-         * If configured, YUI will use the the combo handler on the",
                "-         * Yahoo! CDN to pontentially reduce the number of http requests",
                "-         * required.",
                "-         * @property combine",
                "-         * @type boolean",
                "-         * @default false",
                "-         */",
                "-        // this.combine = (o && !('base' in o));",
                "-        this.combine = false;",
                "-",
                "-",
                "-        /**",
                "-         * Root path to prepend to module path for the combo",
                "-         * service",
                "-         * @property root",
                "-         * @type string",
                "-         * @default [YUI VERSION]/build/",
                "-         */",
                "-        this.root = YUI.info.root;",
                "-",
                "-        /**",
                "-         * Timeout value in milliseconds.  If set, this value will be used by",
                "-         * the get utility.  the timeout event will fire if",
                "-         * a timeout occurs.",
                "-         * @property timeout",
                "-         * @type int",
                "-         */",
                "-        this.timeout = 0;",
                "-",
                "-        /**",
                "-         * A list of modules that should not be loaded, even if",
                "-         * they turn up in the dependency tree",
                "-         * @property ignore",
                "-         * @type string[]",
                "-         */",
                "-        this.ignore = null;",
                "-",
                "-        /**",
                "-         * A list of modules that should always be loaded, even",
                "-         * if they have already been inserted into the page.",
                "-         * @property force",
                "-         * @type string[]",
                "-         */",
                "-        this.force = null;",
                "-",
                "-        /**",
                "-         * Should we allow rollups",
                "-         * @property allowRollup",
                "-         * @type boolean",
                "-         * @default true",
                "-         */",
                "-        this.allowRollup = true;",
                "-",
                "-        /**",
                "-         * A filter to apply to result urls.  This filter will modify the default",
                "-         * path for all modules.  The default path for the YUI library is the",
                "-         * minified version of the files (e.g., event-min.js).  The filter property",
                "-         * can be a predefined filter or a custom filter.  The valid predefined",
                "-         * filters are:",
                "-         * <dl>",
                "-         *  <dt>DEBUG</dt>",
                "-         *  <dd>Selects the debug versions of the library (e.g., event-debug.js).",
                "-         *      This option will automatically include the logger widget</dd>",
                "-         *  <dt>RAW</dt>",
                "-         *  <dd>Selects the non-minified version of the library (e.g., event.js).",
                "-         * </dl>",
                "-         * You can also define a custom filter, which must be an object literal",
                "-         * containing a search expression and a replace string:",
                "-         * <pre>",
                "-         *  myFilter: &#123;",
                "-         *      'searchExp': \"-min\\\\.js\",",
                "-         *      'replaceStr': \"-debug.js\"",
                "-         *  &#125;",
                "-         * </pre>",
                "-         * @property filter",
                "-         * @type string|{searchExp: string, replaceStr: string}",
                "-         */",
                "-        this.filter = null;",
                "-",
                "-        /**",
                "-         * The list of requested modules",
                "-         * @property required",
                "-         * @type {string: boolean}",
                "-         */",
                "-        this.required = {};",
                "-",
                "-        /**",
                "-         * The library metadata",
                "-         * @property moduleInfo",
                "-         */",
                "-        this.moduleInfo = lang.merge(YUI.info.moduleInfo);",
                "-",
                "-        /**",
                "-         * List of rollup files found in the library metadata",
                "-         * @property rollups",
                "-         */",
                "-        this.rollups = null;",
                "-",
                "-        /**",
                "-         * Whether or not to load optional dependencies for",
                "-         * the requested modules",
                "-         * @property loadOptional",
                "-         * @type boolean",
                "-         * @default false",
                "-         */",
                "-        this.loadOptional = false;",
                "-",
                "-        /**",
                "-         * All of the derived dependencies in sorted order, which",
                "-         * will be populated when either calculate() or insert()",
                "-         * is called",
                "-         * @property sorted",
                "-         * @type string[]",
                "-         */",
                "-        this.sorted = [];",
                "-",
                "-        /**",
                "-         * Set when beginning to compute the dependency tree.",
                "-         * Composed of what YAHOO reports to be loaded combined",
                "-         * with what has been loaded by the tool",
                "-         * @propery loaded",
                "-         * @type {string: boolean}",
                "-         */",
                "-        this.loaded = {};",
                "-",
                "-        /**",
                "-         * Flag to indicate the dependency tree needs to be recomputed",
                "-         * if insert is called again.",
                "-         * @property dirty",
                "-         * @type boolean",
                "-         * @default true",
                "-         */",
                "-        this.dirty = true;",
                "-",
                "-        /**",
                "-         * List of modules inserted by the utility",
                "-         * @property inserted",
                "-         * @type {string: boolean}",
                "-         */",
                "-        this.inserted = {};",
                "-",
                "-        /**",
                "-         * Provides the information used to skin the skinnable components.",
                "-         * The following skin definition would result in 'skin1' and 'skin2'",
                "-         * being loaded for calendar (if calendar was requested), and",
                "-         * 'sam' for all other skinnable components:",
                "-         *",
                "-         *   <code>",
                "-         *   skin: {",
                "-         *",
                "-         *      // The default skin, which is automatically applied if not",
                "-         *      // overriden by a component-specific skin definition.",
                "-         *      // Change this in to apply a different skin globally",
                "-         *      defaultSkin: 'sam',",
                "-         *",
                "-         *      // This is combined with the loader base property to get",
                "-         *      // the default root directory for a skin. ex:",
                "-         *      // http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/",
                "-         *      base: 'assets/skins/',",
                "-         *",
                "-         *      // The name of the rollup css file for the skin",
                "-         *      path: 'skin.css',",
                "-         *",
                "-         *      // The number of skinnable components requested that are",
                "-         *      // required before using the rollup file rather than the",
                "-         *      // individual component css files",
                "-         *      rollup: 3,",
                "-         *",
                "-         *      // Any component-specific overrides can be specified here,",
                "-         *      // making it possible to load different skins for different",
                "-         *      // components.  It is possible to load more than one skin",
                "-         *      // for a given component as well.",
                "-         *      overrides: {",
                "-         *          calendar: ['skin1', 'skin2']",
                "-         *      }",
                "-         *   }",
                "-         *   </code>",
                "-         *   @property skin",
                "-         */",
                "-",
                "-        var self = this;",
                "-",
                "-        env.listeners.push(function(m) {",
                "-            if (self._useYahooListener) {",
                "-                //Y.log(\"YAHOO listener: \" + m.name);",
                "-                self.loadNext(m.name);",
                "-            }",
                "-        });",
                "-",
                "-        this.skin = lang.merge(YUI.info.skin);",
                "-",
                "-        this._config(o);",
                "-",
                "-    };",
                "-",
                "-    Y.util.YUILoader.prototype = {",
                "-",
                "-        FILTERS: {",
                "-            RAW: {",
                "-                'searchExp': \"-min\\\\.js\",",
                "-                'replaceStr': \".js\"",
                "-            },",
                "-            DEBUG: {",
                "-                'searchExp': \"-min\\\\.js\",",
                "-                'replaceStr': \"-debug.js\"",
                "-            }",
                "-        },",
                "-",
                "-        SKIN_PREFIX: \"skin-\",",
                "-",
                "-        _config: function(o) {",
                "-",
                "-            // apply config values",
                "-            if (o) {",
                "-                for (var i in o) {",
                "-                    if (lang.hasOwnProperty(o, i)) {",
                "-                        if (i == \"require\") {",
                "-                            this.require(o[i]);",
                "-                        } else {",
                "-                            this[i] = o[i];",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            // fix filter",
                "-            var f = this.filter;",
                "-",
                "-            if (lang.isString(f)) {",
                "-                f = f.toUpperCase();",
                "-",
                "-                // the logger must be available in order to use the debug",
                "-                // versions of the library",
                "-                if (f === \"DEBUG\") {",
                "-                    this.require(\"logger\");",
                "-                }",
                "-",
                "-                // hack to handle a a bug where LogWriter is being instantiated",
                "-                // at load time, and the loader has no way to sort above it",
                "-                // at the moment.",
                "-                if (!Y.widget.LogWriter) {",
                "-                    Y.widget.LogWriter = function() {",
                "-                        return Y;",
                "-                    };",
                "-                }",
                "-",
                "-                this.filter = this.FILTERS[f];",
                "-            }",
                "-",
                "-        },",
                "-",
                "-        /** Add a new module to the component metadata.",
                "-         * <dl>",
                "-         *     <dt>name:</dt>       <dd>required, the component name</dd>",
                "-         *     <dt>type:</dt>       <dd>required, the component type (js or css)</dd>",
                "-         *     <dt>path:</dt>       <dd>required, the path to the script from \"base\"</dd>",
                "-         *     <dt>requires:</dt>   <dd>array of modules required by this component</dd>",
                "-         *     <dt>optional:</dt>   <dd>array of optional modules for this component</dd>",
                "-         *     <dt>supersedes:</dt> <dd>array of the modules this component replaces</dd>",
                "-         *     <dt>after:</dt>      <dd>array of modules the components which, if present, should be sorted above this one</dd>",
                "-         *     <dt>rollup:</dt>     <dd>the number of superseded modules required for automatic rollup</dd>",
                "-         *     <dt>fullpath:</dt>   <dd>If fullpath is specified, this is used instead of the configured base + path</dd>",
                "-         *     <dt>skinnable:</dt>  <dd>flag to determine if skin assets should automatically be pulled in</dd>",
                "-         * </dl>",
                "-         * @method addModule",
                "-         * @param o An object containing the module data",
                "-         * @return {boolean} true if the module was added, false if",
                "-         * the object passed in did not provide all required attributes",
                "-         */",
                "-        addModule: function(o) {",
                "-",
                "-            if (!o || !o.name || !o.type || (!o.path && !o.fullpath)) {",
                "-                return false;",
                "-            }",
                "-",
                "-            o.ext = ('ext' in o) ? o.ext : true;",
                "-            o.requires = o.requires || [];",
                "-",
                "-            this.moduleInfo[o.name] = o;",
                "-            this.dirty = true;",
                "-",
                "-            return true;",
                "-        },",
                "-",
                "-        /**",
                "-         * Add a requirement for one or more module",
                "-         * @method require",
                "-         * @param what {string[] | string*} the modules to load",
                "-         */",
                "-        require: function(what) {",
                "-            var a = (typeof what === \"string\") ? arguments : what;",
                "-            this.dirty = true;",
                "-            YUI.ObjectUtil.appendArray(this.required, a);",
                "-        },",
                "-",
                "-        /**",
                "-         * Adds the skin def to the module info",
                "-         * @method _addSkin",
                "-         * @param skin {string} the name of the skin",
                "-         * @param mod {string} the name of the module",
                "-         * @return {string} the module name for the skin",
                "-         * @private",
                "-         */",
                "-        _addSkin: function(skin, mod) {",
                "-",
                "-            // Add a module definition for the skin rollup css",
                "-            var name = this.formatSkin(skin), info = this.moduleInfo,",
                "-                sinf = this.skin, ext = info[mod] && info[mod].ext;",
                "-",
                "-            // Y.log('ext? ' + mod + \": \" + ext);",
                "-            if (!info[name]) {",
                "-                // Y.log('adding skin ' + name);",
                "-                this.addModule({",
                "-                    'name': name,",
                "-                    'type': 'css',",
                "-                    'path': sinf.base + skin + '/' + sinf.path,",
                "-                    //'supersedes': '*',",
                "-                    'after': sinf.after,",
                "-                    'rollup': sinf.rollup,",
                "-                    'ext': ext",
                "-                });",
                "-            }",
                "-",
                "-            // Add a module definition for the module-specific skin css",
                "-            if (mod) {",
                "-                name = this.formatSkin(skin, mod);",
                "-                if (!info[name]) {",
                "-                    var mdef = info[mod], pkg = mdef.pkg || mod;",
                "-                    // Y.log('adding skin ' + name);",
                "-                    this.addModule({",
                "-                        'name': name,",
                "-                        'type': 'css',",
                "-                        'after': sinf.after,",
                "-                        'path': pkg + '/' + sinf.base + skin + '/' + mod + '.css',",
                "-                        'ext': ext",
                "-                    });",
                "-                }",
                "-            }",
                "-",
                "-            return name;",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns an object containing properties for all modules required",
                "-         * in order to load the requested module",
                "-         * @method getRequires",
                "-         * @param mod The module definition from moduleInfo",
                "-         */",
                "-        getRequires: function(mod) {",
                "-            if (!mod) {",
                "-                return [];",
                "-            }",
                "-",
                "-            if (!this.dirty && mod.expanded) {",
                "-                return mod.expanded;",
                "-            }",
                "-",
                "-            mod.requires=mod.requires || [];",
                "-            var i, d=[], r=mod.requires, o=mod.optional, info=this.moduleInfo, m;",
                "-            for (i=0; i<r.length; i=i+1) {",
                "-                d.push(r[i]);",
                "-                m = info[r[i]];",
                "-                YUI.ArrayUtil.appendArray(d, this.getRequires(m));",
                "-            }",
                "-",
                "-            if (o && this.loadOptional) {",
                "-                for (i=0; i<o.length; i=i+1) {",
                "-                    d.push(o[i]);",
                "-                    YUI.ArrayUtil.appendArray(d, this.getRequires(info[o[i]]));",
                "-                }",
                "-            }",
                "-",
                "-            mod.expanded = YUI.ArrayUtil.uniq(d);",
                "-",
                "-            return mod.expanded;",
                "-        },",
                "-",
                "-",
                "-        /**",
                "-         * Returns an object literal of the modules the supplied module satisfies",
                "-         * @method getProvides",
                "-         * @param name{string} The name of the module",
                "-         * @param notMe {string} don't add this module name, only include superseded modules",
                "-         * @return what this module provides",
                "-         */",
                "-        getProvides: function(name, notMe) {",
                "-            var addMe = !(notMe), ckey = (addMe) ? PROV : SUPER,",
                "-                m = this.moduleInfo[name], o = {};",
                "-",
                "-            if (!m) {",
                "-                return o;",
                "-            }",
                "-",
                "-            if (m[ckey]) {",
                "-// Y.log('cached: ' + name + ' ' + ckey + ' ' + lang.dump(this.moduleInfo[name][ckey], 0));",
                "-                return m[ckey];",
                "-            }",
                "-",
                "-            var s = m.supersedes, done={}, me = this;",
                "-",
                "-            // use worker to break cycles",
                "-            var add = function(mm) {",
                "-                if (!done[mm]) {",
                "-                    // Y.log(name + ' provides worker trying: ' + mm);",
                "-                    done[mm] = true;",
                "-                    // we always want the return value normal behavior",
                "-                    // (provides) for superseded modules.",
                "-                    lang.augmentObject(o, me.getProvides(mm));",
                "-                }",
                "-",
                "-                // else {",
                "-                // Y.log(name + ' provides worker skipping done: ' + mm);",
                "-                // }",
                "-            };",
                "-",
                "-            // calculate superseded modules",
                "-            if (s) {",
                "-                for (var i=0; i<s.length; i=i+1) {",
                "-                    add(s[i]);",
                "-                }",
                "-            }",
                "-",
                "-            // supersedes cache",
                "-            m[SUPER] = o;",
                "-            // provides cache",
                "-            m[PROV] = lang.merge(o);",
                "-            m[PROV][name] = true;",
                "-",
                "-// Y.log(name + \" supersedes \" + lang.dump(m[SUPER], 0));",
                "-// Y.log(name + \" provides \" + lang.dump(m[PROV], 0));",
                "-",
                "-            return m[ckey];",
                "-        },",
                "-",
                "-",
                "-        /**",
                "-         * Calculates the dependency tree, the result is stored in the sorted",
                "-         * property",
                "-         * @method calculate",
                "-         * @param o optional options object",
                "-         */",
                "-        calculate: function(o) {",
                "-            if (o || this.dirty) {",
                "-                this._config(o);",
                "-                this._setup();",
                "-                this._explode();",
                "-                if (this.allowRollup) {",
                "-                    this._rollup();",
                "-                }",
                "-                this._reduce();",
                "-                this._sort();",
                "-",
                "-                // Y.log(\"after calculate: \" + lang.dump(this.required));",
                "-",
                "-                this.dirty = false;",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Investigates the current YUI configuration on the page.  By default,",
                "-         * modules already detected will not be loaded again unless a force",
                "-         * option is encountered.  Called by calculate()",
                "-         * @method _setup",
                "-         * @private",
                "-         */",
                "-        _setup: function() {",
                "-",
                "-            var info = this.moduleInfo, name, i, j;",
                "-",
                "-            // Create skin modules",
                "-            for (name in info) {",
                "-",
                "-                if (lang.hasOwnProperty(info, name)) {",
                "-                    var m = info[name];",
                "-                    if (m && m.skinnable) {",
                "-                        // Y.log(\"skinning: \" + name);",
                "-                        var o=this.skin.overrides, smod;",
                "-                        if (o && o[name]) {",
                "-                            for (i=0; i<o[name].length; i=i+1) {",
                "-                                smod = this._addSkin(o[name][i], name);",
                "-                            }",
                "-                        } else {",
                "-                            smod = this._addSkin(this.skin.defaultSkin, name);",
                "-                        }",
                "-",
                "-                        if (YUI.ArrayUtil.indexOf(m.requires, smod) == -1) {",
                "-                            m.requires.push(smod);",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-            }",
                "-",
                "-            var l = lang.merge(this.inserted); // shallow clone",
                "-",
                "-            if (!this._sandbox) {",
                "-                l = lang.merge(l, env.modules);",
                "-            }",
                "-",
                "-            // Y.log(\"Already loaded stuff: \" + lang.dump(l, 0));",
                "-",
                "-            // add the ignore list to the list of loaded packages",
                "-            if (this.ignore) {",
                "-                YUI.ObjectUtil.appendArray(l, this.ignore);",
                "-            }",
                "-",
                "-            // remove modules on the force list from the loaded list",
                "-            if (this.force) {",
                "-                for (i=0; i<this.force.length; i=i+1) {",
                "-                    if (this.force[i] in l) {",
                "-                        delete l[this.force[i]];",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            // expand the list to include superseded modules",
                "-            for (j in l) {",
                "-                // Y.log(\"expanding: \" + j);",
                "-                if (lang.hasOwnProperty(l, j)) {",
                "-                    lang.augmentObject(l, this.getProvides(j));",
                "-                }",
                "-            }",
                "-",
                "-            // Y.log(\"loaded expanded: \" + lang.dump(l, 0));",
                "-",
                "-            this.loaded = l;",
                "-",
                "-        },",
                "-",
                "-",
                "-        /**",
                "-         * Inspects the required modules list looking for additional",
                "-         * dependencies.  Expands the required list to include all",
                "-         * required modules.  Called by calculate()",
                "-         * @method _explode",
                "-         * @private",
                "-         */",
                "-        _explode: function() {",
                "-",
                "-            var r=this.required, i, mod;",
                "-",
                "-            for (i in r) {",
                "-                if (lang.hasOwnProperty(r, i)) {",
                "-                    mod = this.moduleInfo[i];",
                "-                    if (mod) {",
                "-",
                "-                        var req = this.getRequires(mod);",
                "-",
                "-                        if (req) {",
                "-                            YUI.ObjectUtil.appendArray(r, req);",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-        },",
                "-",
                "-        /*",
                "-         * @method _skin",
                "-         * @private",
                "-         * @deprecated",
                "-         */",
                "-        _skin: function() {",
                "-        },",
                "-",
                "-        /**",
                "-         * Returns the skin module name for the specified skin name.  If a",
                "-         * module name is supplied, the returned skin module name is",
                "-         * specific to the module passed in.",
                "-         * @method formatSkin",
                "-         * @param skin {string} the name of the skin",
                "-         * @param mod {string} optional: the name of a module to skin",
                "-         * @return {string} the full skin module name",
                "-         */",
                "-        formatSkin: function(skin, mod) {",
                "-            var s = this.SKIN_PREFIX + skin;",
                "-            if (mod) {",
                "-                s = s + \"-\" + mod;",
                "-            }",
                "-",
                "-            return s;",
                "-        },",
                "-",
                "-        /**",
                "-         * Reverses <code>formatSkin</code>, providing the skin name and",
                "-         * module name if the string matches the pattern for skins.",
                "-         * @method parseSkin",
                "-         * @param mod {string} the module name to parse",
                "-         * @return {skin: string, module: string} the parsed skin name",
                "-         * and module name, or null if the supplied string does not match",
                "-         * the skin pattern",
                "-         */",
                "-        parseSkin: function(mod) {",
                "-",
                "-            if (mod.indexOf(this.SKIN_PREFIX) === 0) {",
                "-                var a = mod.split(\"-\");",
                "-                return {skin: a[1], module: a[2]};",
                "-            }",
                "-",
                "-            return null;",
                "-        },",
                "-",
                "-        /**",
                "-         * Look for rollup packages to determine if all of the modules a",
                "-         * rollup supersedes are required.  If so, include the rollup to",
                "-         * help reduce the total number of connections required.  Called",
                "-         * by calculate()",
                "-         * @method _rollup",
                "-         * @private",
                "-         */",
                "-        _rollup: function() {",
                "-            var i, j, m, s, rollups={}, r=this.required, roll,",
                "-                info = this.moduleInfo;",
                "-",
                "-            // find and cache rollup modules",
                "-            if (this.dirty || !this.rollups) {",
                "-                for (i in info) {",
                "-                    if (lang.hasOwnProperty(info, i)) {",
                "-                        m = info[i];",
                "-                        //if (m && m.rollup && m.supersedes) {",
                "-                        if (m && m.rollup) {",
                "-                            rollups[i] = m;",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                this.rollups = rollups;",
                "-            }",
                "-",
                "-            // make as many passes as needed to pick up rollup rollups",
                "-            for (;;) {",
                "-                var rolled = false;",
                "-",
                "-                // go through the rollup candidates",
                "-                for (i in rollups) {",
                "-",
                "-                    // there can be only one",
                "-                    if (!r[i] && !this.loaded[i]) {",
                "-                        m =info[i]; s = m.supersedes; roll=false;",
                "-",
                "-                        if (!m.rollup) {",
                "-                            continue;",
                "-                        }",
                "-",
                "-                        var skin = (m.ext) ? false : this.parseSkin(i), c = 0;",
                "-",
                "-                        // Y.log('skin? ' + i + \": \" + skin);",
                "-                        if (skin) {",
                "-                            for (j in r) {",
                "-                                if (lang.hasOwnProperty(r, j)) {",
                "-                                    if (i !== j && this.parseSkin(j)) {",
                "-                                        c++;",
                "-                                        roll = (c >= m.rollup);",
                "-                                        if (roll) {",
                "-                                            // Y.log(\"skin rollup \" + lang.dump(r));",
                "-                                            break;",
                "-                                        }",
                "-                                    }",
                "-                                }",
                "-                            }",
                "-",
                "-                        } else {",
                "-",
                "-                            // check the threshold",
                "-                            for (j=0;j<s.length;j=j+1) {",
                "-",
                "-                                // if the superseded module is loaded, we can't load the rollup",
                "-                                if (this.loaded[s[j]] && (!YUI.dupsAllowed[s[j]])) {",
                "-                                    roll = false;",
                "-                                    break;",
                "-                                // increment the counter if this module is required.  if we are",
                "-                                // beyond the rollup threshold, we will use the rollup module",
                "-                                } else if (r[s[j]]) {",
                "-                                    c++;",
                "-                                    roll = (c >= m.rollup);",
                "-                                    if (roll) {",
                "-                                        // Y.log(\"over thresh \" + c + \", \" + lang.dump(r));",
                "-                                        break;",
                "-                                    }",
                "-                                }",
                "-                            }",
                "-                        }",
                "-",
                "-                        if (roll) {",
                "-                            // Y.log(\"rollup: \" +  i + \", \" + lang.dump(this, 1));",
                "-                            // add the rollup",
                "-                            r[i] = true;",
                "-                            rolled = true;",
                "-",
                "-                            // expand the rollup's dependencies",
                "-                            this.getRequires(m);",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                // if we made it here w/o rolling up something, we are done",
                "-                if (!rolled) {",
                "-                    break;",
                "-                }",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Remove superceded modules and loaded modules.  Called by",
                "-         * calculate() after we have the mega list of all dependencies",
                "-         * @method _reduce",
                "-         * @private",
                "-         */",
                "-        _reduce: function() {",
                "-",
                "-            var i, j, s, m, r=this.required;",
                "-            for (i in r) {",
                "-",
                "-                // remove if already loaded",
                "-                if (i in this.loaded) {",
                "-                    delete r[i];",
                "-",
                "-                // remove anything this module supersedes",
                "-                } else {",
                "-",
                "-                    var skinDef = this.parseSkin(i);",
                "-",
                "-                    if (skinDef) {",
                "-                        //YAHOO.log(\"skin found in reduce: \" + skinDef.skin + \", \" + skinDef.module);",
                "-                        // the skin rollup will not have a module name",
                "-                        if (!skinDef.module) {",
                "-                            var skin_pre = this.SKIN_PREFIX + skinDef.skin;",
                "-                            //YAHOO.log(\"skin_pre: \" + skin_pre);",
                "-                            for (j in r) {",
                "-",
                "-                                if (lang.hasOwnProperty(r, j)) {",
                "-                                    m = this.moduleInfo[j];",
                "-                                    var ext = m && m.ext;",
                "-                                    if (!ext && j !== i && j.indexOf(skin_pre) > -1) {",
                "-                                        // Y.log (\"removing component skin: \" + j);",
                "-                                        delete r[j];",
                "-                                    }",
                "-                                }",
                "-                            }",
                "-                        }",
                "-                    } else {",
                "-",
                "-                         m = this.moduleInfo[i];",
                "-                         s = m && m.supersedes;",
                "-                         if (s) {",
                "-                             for (j=0; j<s.length; j=j+1) {",
                "-                                 if (s[j] in r) {",
                "-                                     delete r[s[j]];",
                "-                                 }",
                "-                             }",
                "-                         }",
                "-                    }",
                "-                }",
                "-            }",
                "-        },",
                "-",
                "-        _onFailure: function(msg) {",
                "-            YAHOO.log('Failure', 'info', 'loader');",
                "-",
                "-            var f = this.onFailure;",
                "-            if (f) {",
                "-                f.call(this.scope, {",
                "-                    msg: 'failure: ' + msg,",
                "-                    data: this.data,",
                "-                    success: false",
                "-                });",
                "-            }",
                "-        },",
                "-",
                "-        _onTimeout: function() {",
                "-            YAHOO.log('Timeout', 'info', 'loader');",
                "-            var f = this.onTimeout;",
                "-            if (f) {",
                "-                f.call(this.scope, {",
                "-                    msg: 'timeout',",
                "-                    data: this.data,",
                "-                    success: false",
                "-                });",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Sorts the dependency tree.  The last step of calculate()",
                "-         * @method _sort",
                "-         * @private",
                "-         */",
                "-        _sort: function() {",
                "-            // create an indexed list",
                "-            var s=[], info=this.moduleInfo, loaded=this.loaded,",
                "-                checkOptional=!this.loadOptional, me = this;",
                "-",
                "-            // returns true if b is not loaded, and is required",
                "-            // directly or by means of modules it supersedes.",
                "-            var requires = function(aa, bb) {",
                "-",
                "-                var mm=info[aa];",
                "-",
                "-                if (loaded[bb] || !mm) {",
                "-                    return false;",
                "-                }",
                "-",
                "-                var ii,",
                "-                    rr = mm.expanded,",
                "-                    after = mm.after,",
                "-                    other = info[bb],",
                "-                    optional = mm.optional;",
                "-",
                "-",
                "-                // check if this module requires the other directly",
                "-                if (rr && YUI.ArrayUtil.indexOf(rr, bb) > -1) {",
                "-                    return true;",
                "-                }",
                "-",
                "-                // check if this module should be sorted after the other",
                "-                if (after && YUI.ArrayUtil.indexOf(after, bb) > -1) {",
                "-                    return true;",
                "-                }",
                "-",
                "-                // if loadOptional is not specified, optional dependencies still",
                "-                // must be sorted correctly when present.",
                "-                if (checkOptional && optional && YUI.ArrayUtil.indexOf(optional, bb) > -1) {",
                "-                    return true;",
                "-                }",
                "-",
                "-                // check if this module requires one the other supersedes",
                "-                var ss=info[bb] && info[bb].supersedes;",
                "-                if (ss) {",
                "-                    for (ii=0; ii<ss.length; ii=ii+1) {",
                "-                        if (requires(aa, ss[ii])) {",
                "-                            return true;",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                // external css files should be sorted below yui css",
                "-                if (mm.ext && mm.type == 'css' && !other.ext && other.type == 'css') {",
                "-                    return true;",
                "-                }",
                "-",
                "-                return false;",
                "-            };",
                "-",
                "-            // get the required items out of the obj into an array so we",
                "-            // can sort",
                "-            for (var i in this.required) {",
                "-                if (lang.hasOwnProperty(this.required, i)) {",
                "-                    s.push(i);",
                "-                }",
                "-            }",
                "-",
                "-            // pointer to the first unsorted item",
                "-            var p=0;",
                "-",
                "-            // keep going until we make a pass without moving anything",
                "-            for (;;) {",
                "-",
                "-                var l=s.length, a, b, j, k, moved=false;",
                "-",
                "-                // start the loop after items that are already sorted",
                "-                for (j=p; j<l; j=j+1) {",
                "-",
                "-                    // check the next module on the list to see if its",
                "-                    // dependencies have been met",
                "-                    a = s[j];",
                "-",
                "-                    // check everything below current item and move if we",
                "-                    // find a requirement for the current item",
                "-                    for (k=j+1; k<l; k=k+1) {",
                "-                        if (requires(a, s[k])) {",
                "-",
                "-                            // extract the dependency so we can move it up",
                "-                            b = s.splice(k, 1);",
                "-",
                "-                            // insert the dependency above the item that",
                "-                            // requires it",
                "-                            s.splice(j, 0, b[0]);",
                "-",
                "-                            moved = true;",
                "-                            break;",
                "-                        }",
                "-                    }",
                "-",
                "-                    // jump out of loop if we moved something",
                "-                    if (moved) {",
                "-                        break;",
                "-                    // this item is sorted, move our pointer and keep going",
                "-                    } else {",
                "-                        p = p + 1;",
                "-                    }",
                "-                }",
                "-",
                "-                // when we make it here and moved is false, we are",
                "-                // finished sorting",
                "-                if (!moved) {",
                "-                    break;",
                "-                }",
                "-",
                "-            }",
                "-",
                "-            this.sorted = s;",
                "-        },",
                "-",
                "-        toString: function() {",
                "-            var o = {",
                "-                type: \"YUILoader\",",
                "-                base: this.base,",
                "-                filter: this.filter,",
                "-                required: this.required,",
                "-                loaded: this.loaded,",
                "-                inserted: this.inserted",
                "-            };",
                "-",
                "-            lang.dump(o, 1);",
                "-        },",
                "-",
                "-        _combine: function() {",
                "-",
                "-                this._combining = [];",
                "-",
                "-                var self = this,",
                "-                    s=this.sorted,",
                "-                    len = s.length,",
                "-                    js = this.comboBase,",
                "-                    css = this.comboBase,",
                "-                    target,",
                "-                    startLen = js.length,",
                "-                    i, m, type = this.loadType;",
                "-",
                "-                YAHOO.log('type ' + type);",
                "-",
                "-                for (i=0; i<len; i=i+1) {",
                "-",
                "-                    m = this.moduleInfo[s[i]];",
                "-",
                "-                    if (m && !m.ext && (!type || type === m.type)) {",
                "-",
                "-                        target = this.root + m.path;",
                "-",
                "-                        // if (i < len-1) {",
                "-                        target += '&';",
                "-                        // }",
                "-",
                "-                        if (m.type == 'js') {",
                "-                            js += target;",
                "-                        } else {",
                "-                            css += target;",
                "-                        }",
                "-",
                "-                        // YAHOO.log(target);",
                "-                        this._combining.push(s[i]);",
                "-                    }",
                "-                }",
                "-",
                "-                if (this._combining.length) {",
                "-",
                "-YAHOO.log('Attempting to combine: ' + this._combining, \"info\", \"loader\");",
                "-",
                "-                    var callback=function(o) {",
                "-                        // YAHOO.log('Combo complete: ' + o.data, \"info\", \"loader\");",
                "-                        // this._combineComplete = true;",
                "-",
                "-                        var c=this._combining, len=c.length, i, m;",
                "-                        for (i=0; i<len; i=i+1) {",
                "-                            this.inserted[c[i]] = true;",
                "-                        }",
                "-",
                "-                        this.loadNext(o.data);",
                "-                    },",
                "-",
                "-                    loadScript = function() {",
                "-                        // YAHOO.log('combining js: ' + js);",
                "-                        if (js.length > startLen) {",
                "-                            YAHOO.util.Get.script(self._filter(js), {",
                "-                                data: self._loading,",
                "-                                onSuccess: callback,",
                "-                                onFailure: self._onFailure,",
                "-                                onTimeout: self._onTimeout,",
                "-                                insertBefore: self.insertBefore,",
                "-                                charset: self.charset,",
                "-                                timeout: self.timeout,",
                "-                                scope: self",
                "-                            });",
                "-                        } else {",
                "-                            this.loadNext();",
                "-                        }",
                "-                    };",
                "-",
                "-                    // load the css first",
                "-                    // YAHOO.log('combining css: ' + css);",
                "-                    if (css.length > startLen) {",
                "-                        YAHOO.util.Get.css(this._filter(css), {",
                "-                            data: this._loading,",
                "-                            onSuccess: loadScript,",
                "-                            onFailure: this._onFailure,",
                "-                            onTimeout: this._onTimeout,",
                "-                            insertBefore: this.insertBefore,",
                "-                            charset: this.charset,",
                "-                            timeout: this.timeout,",
                "-                            scope: self",
                "-                        });",
                "-                    } else {",
                "-                        loadScript();",
                "-                    }",
                "-",
                "-                    return;",
                "-",
                "-                } else {",
                "-                    // this._combineComplete = true;",
                "-                    this.loadNext(this._loading);",
                "-                }",
                "-        },",
                "-",
                "-        /**",
                "-         * inserts the requested modules and their dependencies.",
                "-         * <code>type</code> can be \"js\" or \"css\".  Both script and",
                "-         * css are inserted if type is not provided.",
                "-         * @method insert",
                "-         * @param o optional options object",
                "-         * @param type {string} the type of dependency to insert",
                "-         */",
                "-        insert: function(o, type) {",
                "-            // if (o) {",
                "-            //     Y.log(\"insert: \" + lang.dump(o, 1) + \", \" + type);",
                "-            // } else {",
                "-            //     Y.log(\"insert: \" + this.toString() + \", \" + type);",
                "-            // }",
                "-",
                "-            // build the dependency list",
                "-            this.calculate(o);",
                "-",
                "-",
                "-            // set a flag to indicate the load has started",
                "-            this._loading = true;",
                "-",
                "-            // flag to indicate we are done with the combo service",
                "-            // and any additional files will need to be loaded",
                "-            // individually",
                "-            // this._combineComplete = false;",
                "-",
                "-            // keep the loadType (js, css or undefined) cached",
                "-            this.loadType = type;",
                "-",
                "-            if (this.combine) {",
                "-                return this._combine();",
                "-            }",
                "-",
                "-            if (!type) {",
                "-                // Y.log(\"trying to load css first\");",
                "-                var self = this;",
                "-                this._internalCallback = function() {",
                "-                            self._internalCallback = null;",
                "-                            self.insert(null, \"js\");",
                "-                        };",
                "-                this.insert(null, \"css\");",
                "-                return;",
                "-            }",
                "-",
                "-",
                "-            // start the load",
                "-            this.loadNext();",
                "-",
                "-        },",
                "-",
                "-        /**",
                "-         * Interns the script for the requested modules.  The callback is",
                "-         * provided a reference to the sandboxed YAHOO object.  This only",
                "-         * applies to the script: css can not be sandboxed; css will be",
                "-         * loaded into the page normally if specified.",
                "-         * @method sandbox",
                "-         * @param callback {Function} the callback to exectued when the load is",
                "-         *        complete.",
                "-         */",
                "-        sandbox: function(o, type) {",
                "-            // if (o) {",
                "-                // YAHOO.log(\"sandbox: \" + lang.dump(o, 1) + \", \" + type);",
                "-            // } else {",
                "-                // YAHOO.log(\"sandbox: \" + this.toString() + \", \" + type);",
                "-            // }",
                "-",
                "-            var self = this,",
                "-                success = function(o) {",
                "-",
                "-                    var idx=o.argument[0], name=o.argument[2];",
                "-",
                "-                    // store the response in the position it was requested",
                "-                    self._scriptText[idx] = o.responseText;",
                "-",
                "-                    // YAHOO.log(\"received: \" + o.responseText.substr(0, 100) + \", \" + idx);",
                "-",
                "-                    if (self.onProgress) {",
                "-                        self.onProgress.call(self.scope, {",
                "-                                    name: name,",
                "-                                    scriptText: o.responseText,",
                "-                                    xhrResponse: o,",
                "-                                    data: self.data",
                "-                                });",
                "-                    }",
                "-",
                "-                    // only generate the sandbox once everything is loaded",
                "-                    self._loadCount++;",
                "-",
                "-                    if (self._loadCount >= self._stopCount) {",
                "-",
                "-                        // the variable to find",
                "-                        var v = self.varName || \"YAHOO\";",
                "-",
                "-                        // wrap the contents of the requested modules in an anonymous function",
                "-                        var t = \"(function() {\\n\";",
                "-",
                "-                        // return the locally scoped reference.",
                "-                        var b = \"\\nreturn \" + v + \";\\n})();\";",
                "-",
                "-                        var ref = eval(t + self._scriptText.join(\"\\n\") + b);",
                "-",
                "-                        self._pushEvents(ref);",
                "-",
                "-                        if (ref) {",
                "-                            self.onSuccess.call(self.scope, {",
                "-                                    reference: ref,",
                "-                                    data: self.data",
                "-                                });",
                "-                        } else {",
                "-                            self._onFailure.call(self.varName + \" reference failure\");",
                "-                        }",
                "-                    }",
                "-                },",
                "-",
                "-                failure = function(o) {",
                "-                    self.onFailure.call(self.scope, {",
                "-                            msg: \"XHR failure\",",
                "-                            xhrResponse: o,",
                "-                            data: self.data",
                "-                        });",
                "-                };",
                "-",
                "-            self._config(o);",
                "-",
                "-            if (!self.onSuccess) {",
                "-throw new Error(\"You must supply an onSuccess handler for your sandbox\");",
                "-            }",
                "-",
                "-            self._sandbox = true;",
                "-",
                "-",
                "-            // take care of any css first (this can't be sandboxed)",
                "-            if (!type || type !== \"js\") {",
                "-                self._internalCallback = function() {",
                "-                            self._internalCallback = null;",
                "-                            self.sandbox(null, \"js\");",
                "-                        };",
                "-                self.insert(null, \"css\");",
                "-                return;",
                "-            }",
                "-",
                "-            // get the connection manager if not on the page",
                "-            if (!util.Connect) {",
                "-                // get a new loader instance to load connection.",
                "-                var ld = new YAHOO.util.YUILoader();",
                "-                ld.insert({",
                "-                    base: self.base,",
                "-                    filter: self.filter,",
                "-                    require: \"connection\",",
                "-                    insertBefore: self.insertBefore,",
                "-                    charset: self.charset,",
                "-                    onSuccess: function() {",
                "-                        self.sandbox(null, \"js\");",
                "-                    },",
                "-                    scope: self",
                "-                }, \"js\");",
                "-                return;",
                "-            }",
                "-",
                "-            self._scriptText = [];",
                "-            self._loadCount = 0;",
                "-            self._stopCount = self.sorted.length;",
                "-            self._xhr = [];",
                "-",
                "-            self.calculate();",
                "-",
                "-            var s=self.sorted, l=s.length, i, m, url;",
                "-",
                "-            for (i=0; i<l; i=i+1) {",
                "-                m = self.moduleInfo[s[i]];",
                "-",
                "-                // undefined modules cause a failure",
                "-                if (!m) {",
                "-                    self._onFailure(\"undefined module \" + m);",
                "-                    for (var j=0;j<self._xhr.length;j=j+1) {",
                "-                        self._xhr[j].abort();",
                "-                    }",
                "-                    return;",
                "-                }",
                "-",
                "-                // css files should be done",
                "-                if (m.type !== \"js\") {",
                "-                    self._loadCount++;",
                "-                    continue;",
                "-                }",
                "-",
                "-                url = m.fullpath;",
                "-                url = (url) ? self._filter(url) : self._url(m.path);",
                "-",
                "-                // YAHOO.log(\"xhr request: \" + url + \", \" + i);",
                "-",
                "-                var xhrData = {",
                "-                    success: success,",
                "-                    failure: failure,",
                "-                    scope: self,",
                "-                    // [module index, module name, sandbox name]",
                "-                    argument: [i, url, s[i]]",
                "-                };",
                "-",
                "-                self._xhr.push(util.Connect.asyncRequest('GET', url, xhrData));",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Executed every time a module is loaded, and if we are in a load",
                "-         * cycle, we attempt to load the next script.  Public so that it",
                "-         * is possible to call this if using a method other than",
                "-         * YAHOO.register to determine when scripts are fully loaded",
                "-         * @method loadNext",
                "-         * @param mname {string} optional the name of the module that has",
                "-         * been loaded (which is usually why it is time to load the next",
                "-         * one)",
                "-         */",
                "-        loadNext: function(mname) {",
                "-",
                "-            // It is possible that this function is executed due to something",
                "-            // else one the page loading a YUI module.  Only react when we",
                "-            // are actively loading something",
                "-            if (!this._loading) {",
                "-                return;",
                "-            }",
                "-",
                "-            var self = this,",
                "-                donext = function(o) {",
                "-                    self.loadNext(o.data);",
                "-                }, successfn, s = this.sorted, len=s.length, i, fn, m, url;",
                "-",
                "-",
                "-            if (mname) {",
                "-",
                "-                // if the module that was just loaded isn't what we were expecting,",
                "-                // continue to wait",
                "-                if (mname !== this._loading) {",
                "-                    return;",
                "-                }",
                "-",
                "-                // YAHOO.log(\"loadNext executing, just loaded \" + mname);",
                "-",
                "-                // The global handler that is called when each module is loaded",
                "-                // will pass that module name to this function.  Storing this",
                "-                // data to avoid loading the same module multiple times",
                "-                this.inserted[mname] = true;",
                "-",
                "-                if (this.onProgress) {",
                "-                    this.onProgress.call(this.scope, {",
                "-                            name: mname,",
                "-                            data: this.data",
                "-                        });",
                "-                }",
                "-                //var o = this.getProvides(mname);",
                "-                //this.inserted = lang.merge(this.inserted, o);",
                "-            }",
                "-",
                "-",
                "-",
                "-            for (i=0; i<len; i=i+1) {",
                "-",
                "-                // This.inserted keeps track of what the loader has loaded",
                "-                if (s[i] in this.inserted) {",
                "-                    // YAHOO.log(s[i] + \" alread loaded \");",
                "-                    continue;",
                "-                }",
                "-",
                "-                // Because rollups will cause multiple load notifications",
                "-                // from YAHOO, loadNext may be called multiple times for",
                "-                // the same module when loading a rollup.  We can safely",
                "-                // skip the subsequent requests",
                "-                if (s[i] === this._loading) {",
                "-                    // YAHOO.log(\"still loading \" + s[i] + \", waiting\");",
                "-                    return;",
                "-                }",
                "-",
                "-                // log(\"inserting \" + s[i]);",
                "-                m = this.moduleInfo[s[i]];",
                "-",
                "-                if (!m) {",
                "-                    this.onFailure.call(this.scope, {",
                "-                            msg: \"undefined module \" + m,",
                "-                            data: this.data",
                "-                        });",
                "-                    return;",
                "-                }",
                "-",
                "-                // The load type is stored to offer the possibility to load",
                "-                // the css separately from the script.",
                "-                if (!this.loadType || this.loadType === m.type) {",
                "-",
                "-                    successfn = donext;",
                "-",
                "-                    this._loading = s[i];",
                "-                    //YAHOO.log(\"attempting to load \" + s[i] + \", \" + this.base);",
                "-",
                "-                    fn = (m.type === \"css\") ? util.Get.css : util.Get.script;",
                "-                    url = m.fullpath;",
                "-                    url = (url) ? this._filter(url) : this._url(m.path);",
                "-",
                "-                    // safari 2.x or lower, script, and part of YUI",
                "-                    if (env.ua.webkit && env.ua.webkit < 420 && m.type === \"js\" &&",
                "-                          !m.varName) {",
                "-                          //YUI.info.moduleInfo[s[i]]) {",
                "-                          //YAHOO.log(\"using YAHOO env \" + s[i] + \", \" + m.varName);",
                "-                        successfn = null;",
                "-                        this._useYahooListener = true;",
                "-                    }",
                "-",
                "-                    fn(url, {",
                "-                        data: s[i],",
                "-                        onSuccess: successfn,",
                "-                        onFailure: this._onFailure,",
                "-                        onTimeout: this._onTimeout,",
                "-                        insertBefore: this.insertBefore,",
                "-                        charset: this.charset,",
                "-                        timeout: this.timeout,",
                "-                        varName: m.varName,",
                "-                        scope: self",
                "-                    });",
                "-",
                "-                    return;",
                "-                }",
                "-            }",
                "-",
                "-            // we are finished",
                "-            this._loading = null;",
                "-",
                "-            // internal callback for loading css first",
                "-            if (this._internalCallback) {",
                "-                var f = this._internalCallback;",
                "-                this._internalCallback = null;",
                "-                f.call(this);",
                "-            } else if (this.onSuccess) {",
                "-                this._pushEvents();",
                "-                this.onSuccess.call(this.scope, {",
                "-                        data: this.data",
                "-                    });",
                "-            }",
                "-",
                "-        },",
                "-",
                "-        /**",
                "-         * In IE, the onAvailable/onDOMReady events need help when Event is",
                "-         * loaded dynamically",
                "-         * @method _pushEvents",
                "-         * @param {Function} optional function reference",
                "-         * @private",
                "-         */",
                "-        _pushEvents: function(ref) {",
                "-            var r = ref || YAHOO;",
                "-            if (r.util && r.util.Event) {",
                "-                r.util.Event._load();",
                "-            }",
                "-        },",
                "-",
                "-        /**",
                "-         * Applies filter",
                "-         * method _filter",
                "-         * @return {string} the filtered string",
                "-         * @private",
                "-         */",
                "-        _filter: function(str) {",
                "-            var f = this.filter;",
                "-            return (f) ?  str.replace(new RegExp(f.searchExp, 'g'), f.replaceStr) : str;",
                "-        },",
                "-",
                "-        /**",
                "-         * Generates the full url for a module",
                "-         * method _url",
                "-         * @param path {string} the path fragment",
                "-         * @return {string} the full url",
                "-         * @private",
                "-         */",
                "-        _url: function(path) {",
                "-            return this._filter((this.base || \"\") + path);",
                "-        }",
                "-",
                "-    };",
                "-",
                "-})();",
                "-",
                "-YAHOO.register(\"yuiloader\", YAHOO.util.YUILoader, {version: \"2.9.0\", build: \"2800\"});",
                "diff --git a/wicket-examples/.tomcatplugin b/wicket-examples/.tomcatplugin",
                "index d0a1479d6c..75ef825dd2 100644",
                "--- a/wicket-examples/.tomcatplugin",
                "+++ b/wicket-examples/.tomcatplugin",
                "@@ -12,3 +12,2 @@",
                "         <webClassPathEntry>/wicket-auth-roles/target/classes</webClassPathEntry>",
                "-        <webClassPathEntry>/wicket-datetime/target/classes</webClassPathEntry>",
                "         <webClassPathEntry>/wicket-examples/target/classes</webClassPathEntry>",
                "@@ -30,3 +29,2 @@",
                "         <webClassPathEntry>M2_REPO/javax/portlet/portlet-api/1.0/portlet-api-1.0.jar</webClassPathEntry>",
                "-        <webClassPathEntry>M2_REPO/joda-time/joda-time/1.4/joda-time-1.4.jar</webClassPathEntry>",
                "         <webClassPathEntry>M2_REPO/jtidy/jtidy/4aug2000r7-dev/jtidy-4aug2000r7-dev.jar</webClassPathEntry>",
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 76366e2d38..78497801ae 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -33,28 +33,28 @@",
                "-    <properties>",
                "-        <docker-maven-plugin.version>1.0.0</docker-maven-plugin.version>",
                "-    </properties>",
                "+\t<properties>",
                "+\t\t<docker-maven-plugin.version>1.0.0</docker-maven-plugin.version>",
                "+\t</properties>",
                " \t<dependencyManagement>",
                "-    \t<dependencies>",
                "-    \t\t<dependency>",
                "-    \t\t\t<groupId>com.github.axet</groupId>",
                "-    \t\t\t<artifactId>kaptcha</artifactId>",
                "-    \t\t\t<version>0.0.9</version>",
                "-    \t\t</dependency>",
                "-    \t\t<dependency>",
                "-    \t\t\t<groupId>com.github.cage</groupId>",
                "-    \t\t\t<artifactId>cage</artifactId>",
                "-    \t\t\t<version>1.0</version>",
                "-    \t\t</dependency>",
                "-    \t\t<dependency>",
                "-    \t\t\t<groupId>org.codelibs</groupId>",
                "-    \t\t\t<artifactId>jhighlight</artifactId>",
                "-    \t\t\t<version>1.0.3</version>",
                "-    \t\t\t<exclusions>",
                "-    \t\t\t\t<exclusion>",
                "-    \t\t\t\t\t<groupId>javax.servlet</groupId>",
                "-    \t\t\t\t\t<artifactId>servlet-api</artifactId>",
                "-    \t\t\t\t</exclusion>",
                "-    \t\t\t</exclusions>",
                "+\t\t<dependencies>",
                "+\t\t\t<dependency>",
                "+\t\t\t\t<groupId>com.github.axet</groupId>",
                "+\t\t\t\t<artifactId>kaptcha</artifactId>",
                "+\t\t\t\t<version>0.0.9</version>",
                "+\t\t\t</dependency>",
                "+\t\t\t<dependency>",
                "+\t\t\t\t<groupId>com.github.cage</groupId>",
                "+\t\t\t\t<artifactId>cage</artifactId>",
                "+\t\t\t\t<version>1.0</version>",
                "+\t\t\t</dependency>",
                "+\t\t\t<dependency>",
                "+\t\t\t\t<groupId>org.codelibs</groupId>",
                "+\t\t\t\t<artifactId>jhighlight</artifactId>",
                "+\t\t\t\t<version>1.0.3</version>",
                "+\t\t\t\t<exclusions>",
                "+\t\t\t\t\t<exclusion>",
                "+\t\t\t\t\t\t<groupId>javax.servlet</groupId>",
                "+\t\t\t\t\t\t<artifactId>servlet-api</artifactId>",
                "+\t\t\t\t\t</exclusion>",
                "+\t\t\t\t</exclusions>",
                " \t\t\t</dependency>",
                "@@ -120,6 +120,2 @@",
                " \t\t</dependency>",
                "-\t\t<dependency>",
                "-\t\t\t<groupId>org.apache.wicket</groupId>",
                "-\t\t\t<artifactId>wicket-datetime</artifactId>",
                "-\t\t</dependency>",
                " \t\t<dependency>",
                "@@ -148,6 +144,6 @@",
                " \t\t</dependency>",
                "-        <dependency>",
                "-            <groupId>org.apache.wicket</groupId>",
                "-            <artifactId>wicket-native-websocket-javax</artifactId>",
                "-        </dependency>",
                "+\t\t<dependency>",
                "+\t\t\t<groupId>org.apache.wicket</groupId>",
                "+\t\t\t<artifactId>wicket-native-websocket-javax</artifactId>",
                "+\t\t</dependency>",
                " \t\t<dependency>",
                "@@ -241,34 +237,34 @@",
                " \t\t\t<plugins>",
                "-    \t\t\t<plugin>",
                "-    \t\t\t\t<groupId>org.apache.maven.plugins</groupId>",
                "-    \t\t\t\t<artifactId>maven-javadoc-plugin</artifactId>",
                "-    \t\t\t\t<configuration>",
                "-    \t\t\t\t\t<skip>true</skip>",
                "-    \t\t\t\t</configuration>",
                "-    \t\t\t</plugin>",
                "-    \t\t\t<plugin>",
                "-    \t\t\t\t<groupId>org.apache.maven.plugins</groupId>",
                "-    \t\t\t\t<artifactId>maven-war-plugin</artifactId>",
                "-    \t\t\t\t<configuration>",
                "-    \t\t\t\t\t<!--  include the manifest entries so that we can emit the version of the examples. -->",
                "-    \t\t\t\t\t<archive>",
                "-    \t\t\t\t\t\t<manifest>",
                "-    \t\t\t\t\t\t\t<addDefaultImplementationEntries>true</addDefaultImplementationEntries>",
                "-    \t\t\t\t\t\t\t<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>",
                "-    \t\t\t\t\t\t</manifest>",
                "-    \t\t\t\t\t</archive>",
                "-    \t\t\t\t</configuration>",
                "-    \t\t\t</plugin>",
                "-    \t\t\t<plugin>",
                "-    \t\t\t\t<groupId>org.mortbay.jetty</groupId>",
                "-    \t\t\t\t<artifactId>jetty-maven-plugin</artifactId>",
                "-                    <version>${jetty.version}</version>",
                "-                    <dependencies>",
                "-                \t\t<dependency>",
                "-                \t\t\t<groupId>javax.validation</groupId>",
                "-                \t\t\t<artifactId>validation-api</artifactId>",
                "-                \t\t\t<version>1.1.0.Final</version>",
                "-                \t\t</dependency>",
                "-                    </dependencies>",
                "-    \t\t\t</plugin>",
                "+\t\t\t\t<plugin>",
                "+\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>",
                "+\t\t\t\t\t<artifactId>maven-javadoc-plugin</artifactId>",
                "+\t\t\t\t\t<configuration>",
                "+\t\t\t\t\t\t<skip>true</skip>",
                "+\t\t\t\t\t</configuration>",
                "+\t\t\t\t</plugin>",
                "+\t\t\t\t<plugin>",
                "+\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>",
                "+\t\t\t\t\t<artifactId>maven-war-plugin</artifactId>",
                "+\t\t\t\t\t<configuration>",
                "+\t\t\t\t\t\t<!--  include the manifest entries so that we can emit the version of the examples. -->",
                "+\t\t\t\t\t\t<archive>",
                "+\t\t\t\t\t\t\t<manifest>",
                "+\t\t\t\t\t\t\t\t<addDefaultImplementationEntries>true</addDefaultImplementationEntries>",
                "+\t\t\t\t\t\t\t\t<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>",
                "+\t\t\t\t\t\t\t</manifest>",
                "+\t\t\t\t\t\t</archive>",
                "+\t\t\t\t\t</configuration>",
                "+\t\t\t\t</plugin>",
                "+\t\t\t\t<plugin>",
                "+\t\t\t\t\t<groupId>org.mortbay.jetty</groupId>",
                "+\t\t\t\t\t<artifactId>jetty-maven-plugin</artifactId>",
                "+\t\t\t\t\t<version>${jetty.version}</version>",
                "+\t\t\t\t\t<dependencies>",
                "+\t\t\t\t\t\t<dependency>",
                "+\t\t\t\t\t\t\t<groupId>javax.validation</groupId>",
                "+\t\t\t\t\t\t\t<artifactId>validation-api</artifactId>",
                "+\t\t\t\t\t\t\t<version>1.1.0.Final</version>",
                "+\t\t\t\t\t\t</dependency>",
                "+\t\t\t\t\t</dependencies>",
                "+\t\t\t\t</plugin>",
                " \t\t\t</plugins>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.html b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.html",
                "index c5e8099b21..528940efec 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.html",
                "@@ -4,3 +4,3 @@",
                " \t\t<title>This is modal window</title>",
                "-\t\t<style type=\"text/css\">\t\t\t",
                "+\t\t<style type=\"text/css\">",
                " \t\t\tbody {",
                "@@ -8,3 +8,3 @@",
                " \t\t\t\tfont-size: 82%;",
                "-\t\t\t\tbackground-color: white;\t\t\t\t",
                "+\t\t\t\tbackground-color: white;",
                " \t\t\t}",
                "@@ -20,10 +20,8 @@",
                " \t\t\t<div wicket:id=\"modal\"></div>",
                "-\t\t\t<a wicket:id=\"open\">Open another modal dialog</a>\t\t\t",
                "+\t\t\t<a wicket:id=\"open\">Open another modal dialog</a>",
                " \t\t</p>",
                "-\t\t  ",
                " \t\t<p>",
                "-\t\t  <div>An example of a component that uses header contributions</div>",
                "-\t\t  <div wicket:id=\"dateTimeField\" />",
                "+\t\t\t<div>An example of a component that uses header contributions</div>",
                "+\t\t\t<div wicket:id=\"dateTimeField\" />",
                " \t\t</p>",
                "-\t\t  ",
                " \t</body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "index eb9d800de1..5c252e4cad 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "@@ -22,3 +22,3 @@ import org.apache.wicket.ajax.markup.html.AjaxLink;",
                " import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;",
                "-import org.apache.wicket.extensions.yui.calendar.DateTimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.DateTimeField;",
                " import org.apache.wicket.markup.html.WebPage;",
                "@@ -32,2 +32,3 @@ public class ModalContent1Page extends WebPage",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "@@ -42,2 +43,4 @@ public class ModalContent1Page extends WebPage",
                " \t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -53,2 +56,4 @@ public class ModalContent1Page extends WebPage",
                " \t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -87,2 +92,4 @@ public class ModalContent1Page extends WebPage",
                " \t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent2Page.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent2Page.java",
                "index 0189a933e2..4b668acd38 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent2Page.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent2Page.java",
                "@@ -30,2 +30,3 @@ public class ModalContent2Page extends WebPage",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "index 6a5f5abf23..3a9389a679 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "@@ -18,5 +18,3 @@ package org.apache.wicket.examples.ajax.builtin.modal;",
                "-import java.util.Map;",
                "-",
                "-import org.apache.wicket.extensions.yui.calendar.DateTimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.DateTimeField;",
                " import org.apache.wicket.markup.html.panel.Panel;",
                "@@ -28,2 +26,3 @@ public class ModalPanel1 extends Panel",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "@@ -35,18 +34,4 @@ public class ModalPanel1 extends Panel",
                " \t\tsuper(id);",
                "-",
                "-\t\tadd(new DateTimeField(\"dateTimeField\")",
                "-\t\t{",
                "-\t\t\t/**",
                "-\t\t\t * @see org.apache.wicket.extensions.yui.calendar.DateTimeField#configure(java.util.Map)",
                "-\t\t\t */",
                "-\t\t\t@Override",
                "-\t\t\tprotected void configure(Map<String, Object> widgetProperties)",
                "-\t\t\t{",
                "-\t\t\t\tsuper.configure(widgetProperties);",
                "-\t\t\t\t// IE 6 breaks layout with iframe - is that a YUI bug?",
                "-\t\t\t\twidgetProperties.put(\"iframe\", false);",
                "-\t\t\t}",
                "-\t\t});",
                "+\t\tadd(new DateTimeField(\"dateTimeField\"));",
                " \t}",
                "-",
                " }",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.java",
                "index 7de1620d23..f8376fffdd 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.java",
                "@@ -31,2 +31,4 @@ public class ModalWindowPage extends BasePage",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \tpublic ModalWindowPage()",
                "@@ -55,2 +57,4 @@ public class ModalWindowPage extends BasePage",
                " \t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -82,2 +86,4 @@ public class ModalWindowPage extends BasePage",
                " \t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "index a459fd90b6..db04a1c844 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "@@ -7,2 +7,4 @@",
                " \t.required {font-weight: bold;}",
                "+\ttable {border-collapse: collapse; border-spacing: 0;}",
                "+\tth, td {padding: 4px;}",
                " </style>",
                "@@ -10,8 +12,8 @@",
                " <body>",
                "-\t<span wicket:id=\"mainNavigation\" />",
                "+\t<span wicket:id=\"mainNavigation\"></span>",
                " \t<div wicket:id=\"feedbackErrors\"></div>",
                "-\t",
                "+",
                " \t<form wicket:id=\"form\" novalidate=\"novalidate\">",
                "-\t\t<table cellspacing=\"0\" cellpadding=\"4\">",
                "+\t\t<table style=\"border-collapse: collapse; border-spacing: 0;\">",
                " \t\t\t<tr>",
                "@@ -37,7 +39,8 @@",
                " \t\t\t<tr>",
                "-                <td><label wicket:for=\"password\"><wicket:label>Password</wicket:label></label></td>",
                "-                <td><input wicket:id=\"password\" type=\"text\" size=\"10\"/></td>",
                "-                <td><pre class=\"note\">Custom constraint @ValidPassword with custom message bundles.<br/>A valid password must contain only alphanumeric chars and at least two digits.</pre>",
                "-                </td>",
                "-            </tr>",
                "+\t\t\t\t<td><label wicket:for=\"password\"><wicket:label>Password</wicket:label></label></td>",
                "+\t\t\t\t<td><input wicket:id=\"password\" type=\"text\" size=\"10\"/></td>",
                "+\t\t\t\t<td>",
                "+\t\t\t\t\t<pre class=\"note\">Custom constraint @ValidPassword with custom message bundles.<br/>A valid password must contain only alphanumeric chars and at least two digits.</pre>",
                "+\t\t\t\t</td>",
                "+\t\t\t</tr>",
                " \t\t\t<tr>",
                "@@ -51,3 +54,3 @@",
                " \t</form>",
                "-    <div wicket:id=\"feedbackSuccess\"></div>",
                "+\t<div wicket:id=\"feedbackSuccess\"></div>",
                " </body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "index faec290041..e1eb59df30 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "@@ -19,4 +19,4 @@ package org.apache.wicket.examples.bean.validation;",
                " import org.apache.wicket.bean.validation.PropertyValidator;",
                "-import org.apache.wicket.datetime.StyleDateConverter;",
                "-import org.apache.wicket.datetime.markup.html.form.DateTextField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.DateField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.StyleDateConverter;",
                " import org.apache.wicket.examples.WicketExamplePage;",
                "@@ -31,3 +31,3 @@ public class BeanValidationPage extends WicketExamplePage",
                " {",
                "-",
                "+\tprivate static final long serialVersionUID = 1L;",
                " \tPerson person = new Person();",
                "@@ -39,2 +39,4 @@ public class BeanValidationPage extends WicketExamplePage",
                " \t\tForm<?> form = new Form<Void>(\"form\") {",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -52,4 +54,4 @@ public class BeanValidationPage extends WicketExamplePage",
                " \t\tform.add(new TextField<>(\"email\", new PropertyModel<String>(this, \"person.email\")).add(new PropertyValidator<>()));",
                "-\t\tform.add(new DateTextField(\"birthdate\", new PropertyModel<>(this, \"person.birthdate\"),",
                "-\t\t\tnew StyleDateConverter(\"S-\", true)).add(new PropertyValidator<>()));",
                "+\t\tform.add(new DateField(\"birthdate\", new PropertyModel<>(this, \"person.birthdate\"),",
                "+\t\t\tnew StyleDateConverter(\"S-\")).add(new PropertyValidator<>()));",
                " \t\tform.add(new TextField<>(\"password\", new PropertyModel<String>(this, \"person.password\")).add(new PropertyValidator<>()));",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/Person.java b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/Person.java",
                "index 59293dc064..feb056492d 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/Person.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/Person.java",
                "@@ -19,4 +19,5 @@ package org.apache.wicket.examples.bean.validation;",
                " import java.io.Serializable;",
                "-import java.util.Date;",
                "+import java.time.LocalDate;",
                "+import javax.validation.constraints.Email;",
                " import javax.validation.constraints.NotNull;",
                "@@ -27,3 +28,2 @@ import javax.validation.constraints.Size;",
                " import org.apache.wicket.examples.bean.validation.constraint.ValidPassword;",
                "-import org.hibernate.validator.constraints.Email;",
                "@@ -31,2 +31,4 @@ public class Person implements Serializable",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t@NotNull",
                "@@ -43,3 +45,3 @@ public class Person implements Serializable",
                " \t@Past",
                "-\tprivate Date birthdate;",
                "+\tprivate LocalDate birthdate;",
                "@@ -78,3 +80,3 @@ public class Person implements Serializable",
                "-\tpublic Date getBirthdate()",
                "+\tpublic LocalDate getBirthdate()",
                " \t{",
                "@@ -83,3 +85,3 @@ public class Person implements Serializable",
                "-\tpublic void setBirthdate(Date birthdate)",
                "+\tpublic void setBirthdate(LocalDate birthdate)",
                " \t{",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html",
                "deleted file mode 100644",
                "index ad22d67f7f..0000000000",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html",
                "+++ /dev/null",
                "@@ -1,47 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "-\t<head>",
                "-\t\t<title>Wicket Examples - dates</title>",
                "-\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />",
                "-\t\t<style type=\"text/css\">",
                "-\t\t\tth {",
                "-\t\t\t\tcolor: grey;",
                "-\t\t\t}",
                "-\t\t</style>",
                "-\t</head>",
                "-\t<body>",
                "-\t\t<span wicket:id=\"mainNavigation\"></span>",
                "-\t\t<form wicket:id=\"localeForm\">",
                "-\t\t<p><select wicket:id=\"localeSelect\" /> [<a href=\"#\"",
                "-\t\t\twicket:id=\"localeUSLink\">set to english</a>]</p>",
                "-\t\t</form>",
                "-\t\t<p>",
                "-\t\tExample using DateTextField (auto-hides the picker when clicking on the document):&#160;",
                "-\t\t<form wicket:id=\"form\"><input type=\"text\"",
                "-\t\t\twicket:id=\"dateTextField\" /> <input type=\"submit\" value=\"submit\" /></form>",
                "-\t\t</p>",
                "-\t\t",
                "-\t\t<br/>",
                "-\t\t<p>",
                "-\t\tExample using DateTimeField:&#160;",
                "-\t\t<form wicket:id=\"form2\">",
                "-\t\t<span wicket:id=\"dateTimeField\"></span>",
                "-\t\t<input type=\"submit\" value=\"submit\" />",
                "-\t\t</form>",
                "-\t\t</p>",
                "-\t\t",
                "-\t\t<br/>",
                "-\t\t<p>",
                "-\t\tExample using TimeField:&#160;",
                "-\t\t<form wicket:id=\"form3\">",
                "-\t\t\t<span wicket:id=\"timeField\"></span>",
                "-\t\t\t<input type=\"submit\" value=\"submit\" />",
                "-\t\t</form>",
                "-\t\t</p>\t\t",
                "-\t\t",
                "-\t\t<p>",
                "-\t\t\t<div wicket:id=\"feedback\"></div>",
                "-\t\t</p>",
                "-\t\t",
                "-\t</body>",
                "-</html>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java",
                "deleted file mode 100644",
                "index dadad43871..0000000000",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java",
                "+++ /dev/null",
                "@@ -1,217 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.examples.dates;",
                "-",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Collections;",
                "-import java.util.Comparator;",
                "-import java.util.Date;",
                "-import java.util.List;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.Session;",
                "-import org.apache.wicket.datetime.StyleDateConverter;",
                "-import org.apache.wicket.datetime.markup.html.form.DateTextField;",
                "-import org.apache.wicket.examples.WicketExamplePage;",
                "-import org.apache.wicket.extensions.yui.calendar.DatePicker;",
                "-import org.apache.wicket.extensions.yui.calendar.DateTimeField;",
                "-import org.apache.wicket.extensions.yui.calendar.TimeField;",
                "-import org.apache.wicket.markup.html.form.ChoiceRenderer;",
                "-import org.apache.wicket.markup.html.form.DropDownChoice;",
                "-import org.apache.wicket.markup.html.form.Form;",
                "-import org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior;",
                "-import org.apache.wicket.markup.html.link.Link;",
                "-import org.apache.wicket.markup.html.panel.FeedbackPanel;",
                "-import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.model.PropertyModel;",
                "-",
                "-/**",
                "- * Demonstrates components from the wicket-date project and a bunch of locale fiddling.",
                "- */",
                "-public class DatesPage extends WicketExamplePage",
                "-{",
                "-\t/**",
                "-\t * Choice for a locale.",
                "-\t */",
                "-\tprivate final class LocaleChoiceRenderer extends ChoiceRenderer<Locale>",
                "-\t{",
                "-\t\t/**",
                "-\t\t * Constructor.",
                "-\t\t */",
                "-\t\tpublic LocaleChoiceRenderer()",
                "-\t\t{",
                "-\t\t}",
                "-",
                "-\t\t@Override",
                "-\t\tpublic Object getDisplayValue(Locale locale)",
                "-\t\t{",
                "-\t\t\tString enName = locale.getDisplayName(LOCALE_EN);",
                "-\t\t\tString localizedName = locale.getDisplayName(selectedLocale);",
                "-\t\t\treturn localizedName + (!enName.equals(localizedName) ? (\" (\" + enName + \")\") : \"\");",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Dropdown with Locales.",
                "-\t */",
                "-\tprivate final class LocaleDropDownChoice extends DropDownChoice<Locale>",
                "-\t{",
                "-\t\t/**",
                "-\t\t * Construct.",
                "-\t\t * ",
                "-\t\t * @param id",
                "-\t\t *            component id",
                "-\t\t */",
                "-\t\tpublic LocaleDropDownChoice(String id)",
                "-\t\t{",
                "-\t\t\tsuper(id);",
                "-\t\t\t// sort locales on strings of selected locale",
                "-\t\t\tsetChoices(new IModel<List<Locale>>()",
                "-\t\t\t{",
                "-\t\t\t\t@Override",
                "-\t\t\t\tpublic List<Locale> getObject()",
                "-\t\t\t\t{",
                "-\t\t\t\t\tList<Locale> locales = new ArrayList<>(LOCALES);",
                "-\t\t\t\t\tCollections.sort(locales, new Comparator<Locale>()",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\t@Override",
                "-\t\t\t\t\t\tpublic int compare(Locale o1, Locale o2)",
                "-\t\t\t\t\t\t{",
                "-\t\t\t\t\t\t\treturn o1.getDisplayName(selectedLocale).compareTo(",
                "-\t\t\t\t\t\t\t\to2.getDisplayName(selectedLocale));",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t});",
                "-\t\t\t\t\treturn locales;",
                "-\t\t\t\t}",
                "-\t\t\t});",
                "-\t\t\tsetChoiceRenderer(new LocaleChoiceRenderer());",
                "-\t\t\tsetDefaultModel(new PropertyModel<>(DatesPage.this, \"selectedLocale\"));",
                "-\t\t\t",
                "-\t\t\tadd(new FormComponentUpdatingBehavior());",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate static final Locale LOCALE_EN = new Locale(\"en\");",
                "-",
                "-\tprivate static final List<Locale> LOCALES;",
                "-\tstatic",
                "-\t{",
                "-\t\tLOCALES = Arrays.asList(Locale.getAvailableLocales());",
                "-\t}",
                "-",
                "-\t/** the backing object for DateTextField demo */",
                "-\tprivate final Date date = new Date();",
                "-",
                "-\t/** the backing object for DateTimeField demo */",
                "-\tprivate final Date date2 = new Date();",
                "-",
                "-\t/** the backing object for TimeField demo */",
                "-\tprivate final Date time = new Date();",
                "-",
                "-\tprivate Locale selectedLocale = LOCALE_EN;",
                "-",
                "-\t/**",
                "-\t * Constructor",
                "-\t */",
                "-\tpublic DatesPage()",
                "-\t{",
                "-\t\tselectedLocale = Session.get().getLocale();",
                "-\t\tForm<?> localeForm = new Form<>(\"localeForm\");",
                "-\t\tlocaleForm.add(new LocaleDropDownChoice(\"localeSelect\"));",
                "-\t\tlocaleForm.add(new Link<Void>(\"localeUSLink\")",
                "-\t\t{",
                "-\t\t\t@Override",
                "-\t\t\tpublic void onClick()",
                "-\t\t\t{",
                "-\t\t\t\tselectedLocale = LOCALE_EN;",
                "-\t\t\t}",
                "-\t\t});",
                "-\t\tadd(localeForm);",
                "-\t\tDateTextField dateTextField = new DateTextField(\"dateTextField\", new PropertyModel<>(",
                "-\t\t\tthis, \"date\"), new StyleDateConverter(\"S-\", true))",
                "-\t\t{",
                "-\t\t\t@Override",
                "-\t\t\tpublic Locale getLocale()",
                "-\t\t\t{",
                "-\t\t\t\treturn selectedLocale;",
                "-\t\t\t}",
                "-\t\t};",
                "-\t\tForm<?> form = new Form<Void>(\"form\")",
                "-\t\t{",
                "-\t\t\t@Override",
                "-\t\t\tprotected void onSubmit()",
                "-\t\t\t{",
                "-\t\t\t\tinfo(\"set date to \" + date);",
                "-\t\t\t}",
                "-\t\t};",
                "-\t\tadd(form);",
                "-\t\tform.add(dateTextField);",
                "-",
                "-\t\tDatePicker datePicker = new DatePicker()",
                "-\t\t{",
                "-\t\t\t@Override",
                "-\t\t\tprotected String getAdditionalJavaScript()",
                "-\t\t\t{",
                "-\t\t\t\treturn \"${calendar}.cfg.setProperty(\\\"navigator\\\",true,false); ${calendar}.render();\";",
                "-\t\t\t}",
                "-\t\t};",
                "-\t\tdatePicker.setShowOnFieldClick(true);",
                "-\t\tdatePicker.setAutoHide(true);",
                "-\t\tdateTextField.add(datePicker);",
                "-\t\tadd(new FeedbackPanel(\"feedback\"));",
                "-",
                "-\t\tForm<?> form2 = new Form<Void>(\"form2\")",
                "-\t\t{",
                "-\t\t\t@Override",
                "-\t\t\tprotected void onSubmit()",
                "-\t\t\t{",
                "-\t\t\t\tinfo(\"set date2 to \" + date2);",
                "-\t\t\t}",
                "-\t\t};",
                "-\t\tadd(form2);",
                "-\t\tform2.add(new DateTimeField(\"dateTimeField\", new PropertyModel<>(this, \"date2\")));",
                "-",
                "-",
                "-\t\tForm<?> form3 = new Form<Void>(\"form3\")",
                "-\t\t{",
                "-\t\t\t@Override",
                "-\t\t\tprotected void onSubmit()",
                "-\t\t\t{",
                "-\t\t\t\tinfo(\"set time to \" + time);",
                "-\t\t\t}",
                "-\t\t};",
                "-\t\tadd(form3);",
                "-\t\tform3.add(new TimeField(\"timeField\", new PropertyModel<>(this, \"time\")));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return the selected locale",
                "-\t */",
                "-\tpublic final Locale getSelectedLocale()",
                "-\t{",
                "-\t\treturn selectedLocale;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param selectedLocale",
                "-\t */",
                "-\tpublic final void setSelectedLocale(Locale selectedLocale)",
                "-\t{",
                "-\t\tthis.selectedLocale = selectedLocale;",
                "-\t}",
                "-}",
                "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.js b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "similarity index 69%",
                "rename from wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.js",
                "rename to wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "index e40e0c23d3..7dc4282a8b 100644",
                "--- a/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.js",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "@@ -16,6 +16,18 @@",
                "  */",
                "-Wicket.DateTimeInit.CalendarAdd(function() {",
                "-\tWicket.DateTime.init2(\"${widgetId}\", \"${componentId}\", ${calendarInit}, \"${datePattern}\",",
                "-\t\t\t${alignWithIcon}, ${fireChangeEvent}, ${hideOnSelect}, ${showOnFieldClick}, ${i18n}, ${autoHide}, \"${closeLabel}\");",
                "-\t${additionalJavascript}",
                "-});",
                "+package org.apache.wicket.examples.datetime;",
                "+",
                "+import org.apache.wicket.Page;",
                "+import org.apache.wicket.examples.WicketExampleApplication;",
                "+",
                "+/**",
                "+ * Application class for the DateTime example.",
                "+ * ",
                "+ */",
                "+public class DateTimeApplication extends WicketExampleApplication",
                "+{",
                "+\t@Override",
                "+\tpublic Class< ? extends Page> getHomePage()",
                "+\t{",
                "+\t\treturn DateTimePage.class;",
                "+\t}",
                "+}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html",
                "new file mode 100644",
                "index 0000000000..eed587851c",
                "--- /dev/null",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html",
                "@@ -0,0 +1,34 @@",
                "+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"",
                "+\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\"",
                "+\txmlns:wicket=\"http://wicket.apache.org\" xml:lang=\"en\" lang=\"en\">",
                "+\t<head>",
                "+\t\t<title>Wicket Examples - DateTime</title>",
                "+\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />",
                "+\t</head>",
                "+\t<body>",
                "+\t\t<span wicket:id=\"mainNavigation\" />",
                "+",
                "+\t\t<h3>Demo for short style time</h3>",
                "+\t\t<span wicket:id=\"time1\"></span><br/>",
                "+",
                "+\t\t<hr/>",
                "+",
                "+\t\t<h3>Demo for Full style time</h3>",
                "+\t\t<span wicket:id=\"time2\"></span><br/>",
                "+",
                "+\t\t<hr/>",
                "+",
                "+\t\t<h3>Demo for Short style time with 24-hours</h3>",
                "+\t\t<span wicket:id=\"time3\"></span><br/>",
                "+",
                "+\t\t<hr/>",
                "+",
                "+\t\t<form wicket:id=\"form\">",
                "+\t\t\t<h3>Demo for default Local Date Time in Form</h3>",
                "+\t\t\t<span wicket:id=\"datetime1\"></span><br/>",
                "+\t\t\t<input wicket:id=\"submit\" type=\"submit\" value=\"Submit\"/>",
                "+\t\t\t<div wicket:id=\"feedback\"></div>",
                "+\t\t</form>",
                "+\t</body>",
                "+</html>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "new file mode 100644",
                "index 0000000000..6294863a1b",
                "--- /dev/null",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "@@ -0,0 +1,79 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.examples.datetime;",
                "+",
                "+import java.time.LocalDateTime;",
                "+import java.time.LocalTime;",
                "+",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.markup.html.form.AjaxButton;",
                "+import org.apache.wicket.examples.WicketExamplePage;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.DateTimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.StyleTimeConverter;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.TimeField;",
                "+import org.apache.wicket.markup.html.form.Form;",
                "+import org.apache.wicket.markup.html.panel.FeedbackPanel;",
                "+import org.apache.wicket.model.Model;",
                "+",
                "+/**",
                "+ * DateTime example page.",
                "+ * ",
                "+ */",
                "+public class DateTimePage extends WicketExamplePage",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Constructor.",
                "+\t */",
                "+\tpublic DateTimePage()",
                "+\t{",
                "+\t\tadd(TimeField.forShortStyle(\"time1\", Model.of(LocalTime.of(22, 15))));",
                "+\t\tadd(TimeField.forTimeStyle(\"time2\", Model.of(LocalTime.of(22, 15)), \"F\"));",
                "+\t\tadd(new TimeField(\"time3\", Model.of(LocalTime.of(22, 15)), new StyleTimeConverter(\"S\")) {",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected boolean use12HourFormat() {",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\tfinal DateTimeField datetime1 = new DateTimeField(\"datetime1\", Model.of(LocalDateTime.now()));",
                "+\t\tfinal FeedbackPanel feedback = new FeedbackPanel(\"feedback\");",
                "+\t\tForm<String> form = new Form<>(\"form\");",
                "+\t\tadd(form.add(datetime1)",
                "+\t\t\t\t.add(feedback.setOutputMarkupId(true))",
                "+\t\t\t\t.add(new AjaxButton(\"submit\")",
                "+\t\t\t\t{",
                "+\t\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t\t\t@Override",
                "+\t\t\t\t\tprotected void onSubmit(AjaxRequestTarget target)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tform.info(String.format(\"DateTime was just submitted: %s\", datetime1.getModelObject()));",
                "+\t\t\t\t\t\ttarget.add(feedback);",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t@Override",
                "+\t\t\t\t\tprotected void onError(AjaxRequestTarget target)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\ttarget.add(feedback);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t})",
                "+\t\t\t);",
                "+\t}",
                "+}",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html b/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "index 1175eab657..8e91b6065d 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "@@ -52,3 +52,3 @@",
                "         <tr><td align=\"right\"><a href=\"kitten-captcha\">kitten-captcha</a></td><td> - Another approach to captchas</td></tr>",
                "-\t\t<tr><td align=\"right\"><a href=\"dates\">dates</a></td><td> - Date component example from the wicket-date project.</td></tr>",
                "+\t\t<tr><td align=\"right\"><a href=\"datetime\">dates and times</a></td><td> - Date components example.</td></tr>",
                "diff --git a/wicket-examples/src/main/webapp/WEB-INF/web.xml b/wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "index 67f11f44a0..e530a051b5 100644",
                "--- a/wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "+++ b/wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "@@ -411,11 +411,2 @@",
                "-\t<filter>",
                "-\t\t<filter-name>DatesApplication</filter-name>",
                "-\t\t<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>",
                "-\t\t<init-param>",
                "-\t\t\t<param-name>applicationClassName</param-name>",
                "-\t\t\t<param-value>org.apache.wicket.examples.dates.DatesApplication</param-value>",
                "-\t\t</init-param>",
                "-\t</filter>",
                "-",
                " \t<!-- The WicketSesionFilter can be used to provide thread local access to servlets/ JSPs/ etc -->",
                "@@ -751,9 +742,2 @@",
                "-\t<filter-mapping>",
                "-\t\t<filter-name>DatesApplication</filter-name>",
                "-\t\t<url-pattern>/dates/*</url-pattern>",
                "-\t\t<dispatcher>REQUEST</dispatcher>",
                "-\t\t<dispatcher>INCLUDE</dispatcher>",
                "-\t</filter-mapping>",
                "-",
                " \t<filter-mapping>",
                "@@ -833,2 +817,15 @@",
                "+\t<filter>",
                "+\t\t<filter-name>DateTimeApplication</filter-name>",
                "+\t\t<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>",
                "+\t\t<init-param>",
                "+\t\t\t<param-name>applicationClassName</param-name>",
                "+\t\t\t<param-value>org.apache.wicket.examples.datetime.DateTimeApplication</param-value>",
                "+\t\t</init-param>",
                "+\t</filter>",
                "+\t<filter-mapping>",
                "+\t\t<filter-name>DateTimeApplication</filter-name>",
                "+\t\t<url-pattern>/datetime/*</url-pattern>",
                "+\t</filter-mapping>",
                "+",
                " \t<!--",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html",
                "new file mode 100644",
                "index 0000000000..d92f2ce7e7",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html",
                "@@ -0,0 +1,23 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                "+<!--",
                "+   Licensed to the Apache Software Foundation (ASF) under one or more",
                "+   contributor license agreements.  See the NOTICE file distributed with",
                "+   this work for additional information regarding copyright ownership.",
                "+   The ASF licenses this file to You under the Apache License, Version 2.0",
                "+   (the \"License\"); you may not use this file except in compliance with",
                "+   the License.  You may obtain a copy of the License at",
                "+",
                "+        http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+   Unless required by applicable law or agreed to in writing, software",
                "+   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+   See the License for the specific language governing permissions and",
                "+   limitations under the License.",
                "+-->",
                "+<wicket:panel xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <span style=\"white-space: nowrap;\">",
                "+    <input type=\"text\" wicket:id=\"date\" size=\"12\" />",
                "+    <span wicket:id=\"time\" />",
                "+  </span>",
                "+</wicket:panel>",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "new file mode 100644",
                "index 0000000000..5ec27a6c08",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "@@ -0,0 +1,244 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.LocalTime;",
                "+import java.time.temporal.Temporal;",
                "+import java.util.Date;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                "+import org.apache.wicket.markup.html.form.FormComponentPanel;",
                "+import org.apache.wicket.model.IModel;",
                "+",
                "+/**",
                "+ * Works on a {@link java.time.ZonedDateTime} object. Displays a date field and a DatePicker, a field",
                "+ * for hours and a field for minutes, and an AM/PM field. The format (12h/24h) of the hours field",
                "+ * depends on the time format of this {@link AbstractDateTimeField}'s {@link Locale}, as does the visibility",
                "+ * of the AM/PM field (see {@link AbstractDateTimeField#use12HourFormat}).",
                "+ * <p>",
                "+ * <strong>Ajaxifying the DateTimeField</strong>: If you want to update a DateTimeField with an",
                "+ * {@link AjaxFormComponentUpdatingBehavior}, you have to attach it to the contained",
                "+ * {@link DateField} by overriding {@link #newDateTextField(String, IModel)} and calling",
                "+ * {@link #processInput()}:",
                "+ * ",
                "+ * <pre>{@code",
                "+ *  DateTimeField dateTimeField = new DateTimeField(...) {",
                "+ *    protected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)",
                "+ *    {",
                "+ *      DateTextField dateField = super.newDateTextField(id, dateFieldModel);     ",
                "+ *      dateField.add(new AjaxFormComponentUpdatingBehavior(\"change\") {",
                "+ *        protected void onUpdate(AjaxRequestTarget target) {",
                "+ *          processInput(); // let DateTimeField process input too",
                "+ *",
                "+ *          ...",
                "+ *        }",
                "+ *      });",
                "+ *      return recorder;",
                "+ *    }",
                "+ *  }",
                "+ * }</pre>",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ * @see DateField for a variant with just the date field and date picker",
                "+ */",
                "+abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPanel<T>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t// Component-IDs",
                "+\tprotected static final String DATE = \"date\";",
                "+\tprotected static final String TIME = \"time\";",
                "+",
                "+\t// The date TextField and it's associated model object",
                "+\t// Note that any time information in date will be ignored",
                "+\tprivate DateField dateField;",
                "+\tprivate TimeField timeField;",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t */",
                "+\tpublic AbstractDateTimeField(final String id)",
                "+\t{",
                "+\t\tthis(id, null);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t * @param model",
                "+\t */",
                "+\tpublic AbstractDateTimeField(final String id, final IModel<T> model)",
                "+\t{",
                "+\t\tsuper(id, model);",
                "+",
                "+\t\t// Create and add the date TextField",
                "+\t\tadd(dateField = newDateField(DATE, new DateModel()));",
                "+\t\tadd(timeField = newTimeField(TIME, new TimeModel()));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * ",
                "+\t * @return The date TextField",
                "+\t */",
                "+\tprotected final DateField getDateField()",
                "+\t{",
                "+\t\treturn dateField;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * ",
                "+\t * @return The date TextField",
                "+\t */",
                "+\tprotected final TimeField getTimeField()",
                "+\t{",
                "+\t\treturn timeField;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic String getInput()",
                "+\t{",
                "+\t\t// since we override convertInput, we can let this method return a value",
                "+\t\t// that is just suitable for error reporting",
                "+\t\treturn String.format(\"%s, %s\", dateField.getInput(), timeField.getInput());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Sets the converted input, which is an instance of {@link Date}, possibly null. It combines",
                "+\t * the inputs of the nested date, hours, minutes and am/pm fields and constructs a date from it.",
                "+\t * <p>",
                "+\t * Note that overriding this method is a better option than overriding {@link #updateModel()}",
                "+\t * like the first versions of this class did. The reason for that is that this method can be",
                "+\t * used by form validators without having to depend on the actual model being updated, and this",
                "+\t * method is called by the default implementation of {@link #updateModel()} anyway (so we don't",
                "+\t * have to override that anymore).",
                "+\t */",
                "+\t@Override",
                "+\tpublic void convertInput()",
                "+\t{",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\t// Get the converted input values",
                "+\t\t\tLocalDate localDate = dateField.getConvertedInput();",
                "+",
                "+\t\t\tif (localDate == null)",
                "+\t\t\t{",
                "+\t\t\t\treturn;",
                "+\t\t\t}",
                "+",
                "+\t\t\t// Use the input to create a date object with proper timezone",
                "+\t\t\tLocalTime localTime = timeField.getConvertedInput();",
                "+",
                "+\t\t\t// The date will be in the server's timezone",
                "+\t\t\tsetConvertedInput(performConvert(localDate, localTime));",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tAbstractDateTimeField.this.error(e.getMessage());",
                "+\t\t\tinvalid();",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tabstract T performConvert(LocalDate date, LocalTime time);",
                "+",
                "+\tabstract void prepareObject();",
                "+",
                "+\t/**",
                "+\t * create a new {@link DateField} instance to be added to this panel.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param dateFieldModel",
                "+\t *            model that should be used by the {@link DateField}",
                "+\t * @return a new date text field instance",
                "+\t */",
                "+\tprotected DateField newDateField(String id, IModel<LocalDate> dateFieldModel)",
                "+\t{",
                "+\t\treturn DateField.forShortStyle(id, dateFieldModel);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * create a new {@link TimeField} instance to be added to this panel.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param timeFieldModel",
                "+\t *            model that should be used by the {@link TimeField}",
                "+\t * @return a new time text field instance",
                "+\t */",
                "+\tprotected TimeField newTimeField(String id, IModel<LocalTime> timeFieldModel)",
                "+\t{",
                "+\t\treturn TimeField.forShortStyle(id, timeFieldModel);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see org.apache.wicket.Component#onBeforeRender()",
                "+\t */",
                "+\t@Override",
                "+\tprotected void onBeforeRender()",
                "+\t{",
                "+\t\tdateField.setRequired(isRequired());",
                "+\t\ttimeField.setRequired(isRequired());",
                "+",
                "+\t\tprepareObject();",
                "+",
                "+\t\tsuper.onBeforeRender();",
                "+\t}",
                "+",
                "+\tabstract LocalDate getLocalDate();",
                "+\tabstract void setLocalDate(LocalDate date);",
                "+\tabstract LocalTime getLocalTime();",
                "+\tabstract void setLocalTime(LocalTime time);",
                "+",
                "+\tprotected class DateModel implements IModel<LocalDate>",
                "+\t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t@Override",
                "+\t\tpublic LocalDate getObject()",
                "+\t\t{",
                "+\t\t\treturn getLocalDate();",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void setObject(LocalDate date)",
                "+\t\t{",
                "+\t\t\tsetLocalDate(date);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprotected class TimeModel implements IModel<LocalTime>",
                "+\t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t@Override",
                "+\t\tpublic LocalTime getObject()",
                "+\t\t{",
                "+\t\t\treturn getLocalTime();",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void setObject(LocalTime time)",
                "+\t\t{",
                "+\t\t\tsetLocalTime(time);",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java",
                "new file mode 100644",
                "index 0000000000..895c0c6321",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java",
                "@@ -0,0 +1,252 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.text.SimpleDateFormat;",
                "+import java.time.LocalDate;",
                "+import java.time.format.FormatStyle;",
                "+",
                "+import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "+import org.apache.wicket.markup.html.form.TextField;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.lang.Args;",
                "+",
                "+/**",
                "+ * A TextField that is mapped to a <code>java.time.LocalDate</code> object and that uses java.time time to",
                "+ * parse and format values.",
                "+ * <p>",
                "+ * You should use on of the factory methods to construct the kind you want or use the public",
                "+ * constructor and pass in the converter to use.",
                "+ * </p>",
                "+ * <p>",
                "+ * This component tries to apply the time zone difference between the client and server. See the",
                "+ * {@link ZonedDateTimeConverter#getApplyTimeZoneDifference() date converter} of this package for more",
                "+ * information on that.",
                "+ * </p>",
                "+ * ",
                "+ * @see StyleZonedDateTimeConverter",
                "+ * @see java.time.ZonedDateTime",
                "+ * @see java.time.format.DateTimeFormatter",
                "+ * @see java.time.ZoneId",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class DateField extends TextField<LocalDate> implements ITextFormatProvider",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @param datePattern",
                "+\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "+\t *            patterns.",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField forDatePattern(String id, IModel<LocalDate> model, String datePattern)",
                "+\t{",
                "+\t\treturn new DateField(id, model, new PatternDateConverter(datePattern));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param datePattern",
                "+\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "+\t *            patterns.",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField forDatePattern(String id, String datePattern)",
                "+\t{",
                "+\t\treturn forDatePattern(id, null, datePattern);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField using the provided date style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @param dateStyle",
                "+\t *            Date style to use. The first character is the date style, and the second character",
                "+\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "+\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "+\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField forDateStyle(String id, IModel<LocalDate> model, String dateStyle)",
                "+\t{",
                "+\t\treturn new DateField(id, model, new StyleDateConverter(dateStyle));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField using the provided date style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param dateStyle",
                "+\t *            Date style to use. The first character is the date style, and the second character",
                "+\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "+\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "+\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField forDateStyle(String id, String dateStyle)",
                "+\t{",
                "+\t\treturn forDateStyle(id, null, dateStyle);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField forShortStyle(String id)",
                "+\t{",
                "+\t\treturn forShortStyle(id, null);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField forShortStyle(String id, IModel<LocalDate> model)",
                "+\t{",
                "+\t\treturn new DateField(id, model, new StyleDateConverter());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField using the provided converter.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param converter",
                "+\t *            the date converter",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField withConverter(String id, LocalDateConverter converter)",
                "+\t{",
                "+\t\treturn withConverter(id, null, converter);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new DateField using the provided converter.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @param converter",
                "+\t *            the date converter",
                "+\t * @return DateField",
                "+\t */",
                "+\tpublic static DateField withConverter(String id, IModel<LocalDate> model, LocalDateConverter converter)",
                "+\t{",
                "+\t\treturn new DateField(id, model, converter);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * The converter for the TextField",
                "+\t */",
                "+\tprivate final LocalDateConverter converter;",
                "+",
                "+\t/**",
                "+\t * Construct with a converter.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The component id",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @param converter",
                "+\t *            The converter to use",
                "+\t */",
                "+\tpublic DateField(String id, IModel<LocalDate> model, LocalDateConverter converter)",
                "+\t{",
                "+\t\tsuper(id, model, LocalDate.class);",
                "+",
                "+\t\tArgs.notNull(converter, \"converter\");",
                "+\t\tthis.converter = converter;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct with a converter, and a null model.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The component id",
                "+\t * @param converter",
                "+\t *            The converter to use",
                "+\t */",
                "+\tpublic DateField(String id, LocalDateConverter converter)",
                "+\t{",
                "+\t\tthis(id, null, converter);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return The specialized converter.",
                "+\t * @see org.apache.wicket.Component#createConverter(java.lang.Class)",
                "+\t */",
                "+\t@Override",
                "+\tprotected IConverter<?> createConverter(Class<?> clazz)",
                "+\t{",
                "+\t\tif (LocalDate.class.isAssignableFrom(clazz))",
                "+\t\t{",
                "+\t\t\treturn converter;",
                "+\t\t}",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider#getTextFormat()",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getTextFormat()",
                "+\t{",
                "+\t\treturn converter.getPattern(getLocale());",
                "+\t}",
                "+",
                "+\tpublic static FormatStyle parseFormatStyle(char style)",
                "+\t{",
                "+\t\tswitch (style)",
                "+\t\t{",
                "+\t\t\tcase 'S':",
                "+\t\t\t\treturn FormatStyle.SHORT;",
                "+\t\t\tcase 'M':",
                "+\t\t\t\treturn FormatStyle.MEDIUM;",
                "+\t\t\tcase 'L':",
                "+\t\t\t\treturn FormatStyle.LONG;",
                "+\t\t\tcase 'F':",
                "+\t\t\t\treturn FormatStyle.FULL;",
                "+\t\t\tdefault:",
                "+\t\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "new file mode 100644",
                "index 0000000000..8ff825a3ec",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "@@ -0,0 +1,123 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.LocalDateTime;",
                "+import java.time.LocalTime;",
                "+import java.time.temporal.ChronoField;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                "+import org.apache.wicket.model.IModel;",
                "+",
                "+/**",
                "+ * Works on a {@link java.time.LocalDateTimeTime} object. Displays a date field and a DatePicker, a field",
                "+ * for hours and a field for minutes, and an AM/PM field. The format (12h/24h) of the hours field",
                "+ * depends on the time format of this {@link DateTimeField}'s {@link Locale}, as does the visibility",
                "+ * of the AM/PM field (see {@link DateTimeField#use12HourFormat}).",
                "+ * <p>",
                "+ * <strong>Ajaxifying the DateTimeField</strong>: If you want to update a DateTimeField with an",
                "+ * {@link AjaxFormComponentUpdatingBehavior}, you have to attach it to the contained",
                "+ * {@link DateField} by overriding {@link #newDateTextField(String, IModel)} and calling",
                "+ * {@link #processInput()}:",
                "+ * ",
                "+ * <pre>{@code",
                "+ *  DateTimeField dateTimeField = new DateTimeField(...) {",
                "+ *    protected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)",
                "+ *    {",
                "+ *      DateTextField dateField = super.newDateTextField(id, dateFieldModel);     ",
                "+ *      dateField.add(new AjaxFormComponentUpdatingBehavior(\"change\") {",
                "+ *        protected void onUpdate(AjaxRequestTarget target) {",
                "+ *          processInput(); // let DateTimeField process input too",
                "+ *",
                "+ *          ...",
                "+ *        }",
                "+ *      });",
                "+ *      return recorder;",
                "+ *    }",
                "+ *  }",
                "+ * }</pre>",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ * @see DateField for a variant with just the date field and date picker",
                "+ */",
                "+public class DateTimeField extends AbstractDateTimeField<LocalDateTime>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\tprivate LocalDateTime dateTime = LocalDateTime.now();",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t */",
                "+\tpublic DateTimeField(final String id)",
                "+\t{",
                "+\t\tthis(id, null);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t * @param model",
                "+\t */",
                "+\tpublic DateTimeField(final String id, final IModel<LocalDateTime> model)",
                "+\t{",
                "+\t\tsuper(id, model);",
                "+",
                "+\t\t// Sets the type that will be used when updating the model for this component.",
                "+\t\tsetType(LocalDateTime.class);",
                "+\t}",
                "+",
                "+\tLocalDateTime performConvert(LocalDate date, LocalTime time) {",
                "+\t\treturn LocalDateTime.of(date, time);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tvoid prepareObject() {",
                "+\t\tif (getModelObject() == null)",
                "+\t\t{",
                "+\t\t\tdateTime = null;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tLocalDate getLocalDate()",
                "+\t{",
                "+\t\treturn dateTime.toLocalDate();",
                "+\t}",
                "+",
                "+\tvoid setLocalDate(LocalDate date)",
                "+\t{",
                "+\t\tdateTime = dateTime.with(ChronoField.YEAR, date.getYear())",
                "+\t\t\t\t.with(ChronoField.MONTH_OF_YEAR, date.getMonthValue())",
                "+\t\t\t\t.with(ChronoField.DAY_OF_YEAR, date.getDayOfMonth());",
                "+\t}",
                "+",
                "+\tLocalTime getLocalTime()",
                "+\t{",
                "+\t\treturn dateTime.toLocalTime();",
                "+\t}",
                "+",
                "+\tvoid setLocalTime(LocalTime time)",
                "+\t{",
                "+\t\tdateTime = dateTime.with(ChronoField.HOUR_OF_DAY, time.getHour())",
                "+\t\t\t\t.with(ChronoField.MINUTE_OF_HOUR, time.getMinute());",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java",
                "new file mode 100644",
                "index 0000000000..95e1a47a04",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java",
                "@@ -0,0 +1,104 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.util.convert.ConversionException;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.lang.Args;",
                "+import org.apache.wicket.util.string.Strings;",
                "+",
                "+",
                "+/**",
                "+ * Base class for java.time based date converters. It contains the logic to parse and format,",
                "+ * optionally taking the time zone difference between clients and the server into account.",
                "+ * <p>",
                "+ * Converters of this class are best suited for per-component use.",
                "+ * </p>",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public abstract class LocalDateConverter implements IConverter<LocalDate>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\tpublic LocalDate convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\t// parse date retaining the time of the submission",
                "+\t\t\treturn LocalDate.parse(value, format);",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tthrow newConversionException(e, locale);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic LocalDate convertToObject(String value, Locale locale)",
                "+\t{",
                "+\t\tif (Strings.isEmpty(value))",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\tDateTimeFormatter format = getFormat(locale);",
                "+\t\tArgs.notNull(format, \"format\");",
                "+",
                "+\t\treturn convertToObject(value, format, locale);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a ConversionException and sets additional context information to it.",
                "+\t *",
                "+\t * @param cause",
                "+\t *            - {@link RuntimeException} cause",
                "+\t * @param locale",
                "+\t *            - {@link Locale} used to set 'format' variable with localized pattern",
                "+\t * @return {@link ConversionException}",
                "+\t */",
                "+\tConversionException newConversionException(RuntimeException cause, Locale locale)",
                "+\t{",
                "+\t\treturn new ConversionException(cause)",
                "+\t\t\t\t.setVariable(\"format\", getPattern(locale));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic String convertToString(LocalDate dateTime, Locale locale)",
                "+\t{",
                "+\t\tDateTimeFormatter format = getFormat(locale);",
                "+\t\treturn format.format(dateTime);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @param locale",
                "+\t *            The locale used to convert the value",
                "+\t * @return Gets the pattern that is used for printing and parsing",
                "+\t */",
                "+\tpublic abstract String getPattern(Locale locale);",
                "+",
                "+\t/**",
                "+\t * @param locale",
                "+\t *            The locale used to convert the value",
                "+\t * ",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\tpublic abstract DateTimeFormatter getFormat(Locale locale);",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java",
                "new file mode 100644",
                "index 0000000000..1597ab6d46",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java",
                "@@ -0,0 +1,104 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalTime;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.util.convert.ConversionException;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.lang.Args;",
                "+import org.apache.wicket.util.string.Strings;",
                "+",
                "+",
                "+/**",
                "+ * Base class for java.time based date converters. It contains the logic to parse and format,",
                "+ * optionally taking the time zone difference between clients and the server into account.",
                "+ * <p>",
                "+ * Converters of this class are best suited for per-component use.",
                "+ * </p>",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public abstract class LocalTimeConverter implements IConverter<LocalTime>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\tpublic LocalTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\t// parse date retaining the time of the submission",
                "+\t\t\treturn LocalTime.parse(value, format);",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tthrow newConversionException(e, locale);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic LocalTime convertToObject(String value, Locale locale)",
                "+\t{",
                "+\t\tif (Strings.isEmpty(value))",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\tDateTimeFormatter format = getFormat(locale);",
                "+\t\tArgs.notNull(format, \"format\");",
                "+",
                "+\t\treturn convertToObject(value, format, locale);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a ConversionException and sets additional context information to it.",
                "+\t *",
                "+\t * @param cause",
                "+\t *            - {@link RuntimeException} cause",
                "+\t * @param locale",
                "+\t *            - {@link Locale} used to set 'format' variable with localized pattern",
                "+\t * @return {@link ConversionException}",
                "+\t */",
                "+\tConversionException newConversionException(RuntimeException cause, Locale locale)",
                "+\t{",
                "+\t\treturn new ConversionException(cause)",
                "+\t\t\t\t.setVariable(\"format\", getPattern(locale));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic String convertToString(LocalTime time, Locale locale)",
                "+\t{",
                "+\t\tDateTimeFormatter format = getFormat(locale);",
                "+\t\treturn format.format(time);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @param locale",
                "+\t *            The locale used to convert the value",
                "+\t * @return Gets the pattern that is used for printing and parsing",
                "+\t */",
                "+\tpublic abstract String getPattern(Locale locale);",
                "+",
                "+\t/**",
                "+\t * @param locale",
                "+\t *            The locale used to convert the value",
                "+\t * ",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\tpublic abstract DateTimeFormatter getFormat(Locale locale);",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java",
                "new file mode 100644",
                "index 0000000000..54ea179d6d",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java",
                "@@ -0,0 +1,85 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.text.SimpleDateFormat;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.util.lang.Args;",
                "+",
                "+",
                "+/**",
                "+ * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "+ * clients and server into account. This converter is hard coded to use the provided custom date",
                "+ * pattern, no matter what current locale is used. See {@link SimpleDateFormat} for available",
                "+ * patterns.",
                "+ * <p>",
                "+ * This converter is especially suited on a per-component base.",
                "+ * </p>",
                "+ * ",
                "+ * @see SimpleDateFormat",
                "+ * @see StyleDateConverter",
                "+ * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "+ * @see java.time.LocalDate",
                "+ * @see DateTimeFormatter",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class PatternDateConverter extends LocalDateConverter",
                "+{",
                "+",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/** pattern to use. */",
                "+\tprivate final String datePattern;",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param datePattern",
                "+\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "+\t *            patterns.",
                "+\t * @throws IllegalArgumentException",
                "+\t *             in case the date pattern is null",
                "+\t */",
                "+\tpublic PatternDateConverter(String datePattern)",
                "+\t{",
                "+\t\tsuper();",
                "+\t\tthis.datePattern = Args.notNull(datePattern, \"datePattern\");",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets the optional date pattern.",
                "+\t * ",
                "+\t * @return datePattern",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getPattern(Locale locale)",
                "+\t{",
                "+\t\treturn datePattern;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\t@Override",
                "+\tpublic DateTimeFormatter getFormat(Locale locale)",
                "+\t{",
                "+\t\treturn DateTimeFormatter.ofPattern(datePattern).withLocale(locale);",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java",
                "new file mode 100644",
                "index 0000000000..021f500f68",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java",
                "@@ -0,0 +1,85 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.text.SimpleDateFormat;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.util.lang.Args;",
                "+",
                "+",
                "+/**",
                "+ * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "+ * clients and server into account. This converter is hard coded to use the provided custom date",
                "+ * pattern, no matter what current locale is used. See {@link SimpleDateFormat} for available",
                "+ * patterns.",
                "+ * <p>",
                "+ * This converter is especially suited on a per-component base.",
                "+ * </p>",
                "+ * ",
                "+ * @see SimpleDateFormat",
                "+ * @see StyleDateConverter",
                "+ * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "+ * @see java.time.LocalTime",
                "+ * @see DateTimeFormatter",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class PatternTimeConverter extends LocalTimeConverter",
                "+{",
                "+",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/** pattern to use. */",
                "+\tprivate final String timePattern;",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param timePattern",
                "+\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "+\t *            patterns.",
                "+\t * @throws IllegalArgumentException",
                "+\t *             in case the date pattern is null",
                "+\t */",
                "+\tpublic PatternTimeConverter(String timePattern)",
                "+\t{",
                "+\t\tsuper();",
                "+\t\tthis.timePattern = Args.notNull(timePattern, \"timePattern\");",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets the optional date pattern.",
                "+\t * ",
                "+\t * @return datePattern",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getPattern(Locale locale)",
                "+\t{",
                "+\t\treturn timePattern;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\t@Override",
                "+\tpublic DateTimeFormatter getFormat(Locale locale)",
                "+\t{",
                "+\t\treturn DateTimeFormatter.ofPattern(timePattern).withLocale(locale);",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java",
                "new file mode 100644",
                "index 0000000000..c432d907eb",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java",
                "@@ -0,0 +1,97 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.text.SimpleDateFormat;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.util.lang.Args;",
                "+",
                "+",
                "+/**",
                "+ * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "+ * clients and server into account. This converter is hard coded to use the provided custom date",
                "+ * pattern, no matter what current locale is used. See {@link SimpleDateFormat} for available",
                "+ * patterns.",
                "+ * <p>",
                "+ * This converter is especially suited on a per-component base.",
                "+ * </p>",
                "+ * ",
                "+ * @see SimpleDateFormat",
                "+ * @see StyleZonedDateTimeConverter",
                "+ * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "+ * @see java.time.ZonedDateTime",
                "+ * @see DateTimeFormatter",
                "+ * @see java.time.ZoneId",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class PatternZonedDateTimeConverter extends ZonedDateTimeConverter",
                "+{",
                "+",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/** pattern to use. */",
                "+\tprivate final String datePattern;",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * </p>",
                "+\t * When applyTimeZoneDifference is true, the current time is applied on the parsed date, and the",
                "+\t * date will be corrected for the time zone difference between the server and the client. For",
                "+\t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9",
                "+\t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the",
                "+\t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while",
                "+\t * the client sees 12/24.",
                "+\t * </p>",
                "+\t * ",
                "+\t * @param datePattern",
                "+\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "+\t *            patterns.",
                "+\t * @param applyTimeZoneDifference",
                "+\t *            whether to apply the difference in time zones between client and server",
                "+\t * @throws IllegalArgumentException",
                "+\t *             in case the date pattern is null",
                "+\t */",
                "+\tpublic PatternZonedDateTimeConverter(String datePattern, boolean applyTimeZoneDifference)",
                "+\t{",
                "+",
                "+\t\tsuper(applyTimeZoneDifference);",
                "+\t\tthis.datePattern = Args.notNull(datePattern, \"datePattern\");",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets the optional date pattern.",
                "+\t * ",
                "+\t * @return datePattern",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getPattern(Locale locale)",
                "+\t{",
                "+\t\treturn datePattern;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\t@Override",
                "+\tpublic DateTimeFormatter getFormat(Locale locale)",
                "+\t{",
                "+\t\treturn DateTimeFormatter.ofPattern(datePattern).withLocale(locale);",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java",
                "new file mode 100644",
                "index 0000000000..79decad7d2",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java",
                "@@ -0,0 +1,118 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.chrono.IsoChronology;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.time.format.DateTimeFormatterBuilder;",
                "+import java.time.format.FormatStyle;",
                "+import java.util.Locale;",
                "+",
                "+/**",
                "+ * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "+ * clients and server into account, and that is configured for a certain date style. The pattern",
                "+ * will always be locale specific.",
                "+ * <p>",
                "+ * This converter is especially suited on a per-component base.",
                "+ * </p>",
                "+ * ",
                "+ * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "+ * @see java.time.LocalDate",
                "+ * @see DateTimeFormatter",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class StyleDateConverter extends LocalDateConverter",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "+\t */",
                "+\tprivate final FormatStyle dateStyle;",
                "+",
                "+\t/**",
                "+\t * Construct. The dateStyle 'S-' (which is the same as {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}) will",
                "+\t * be used for constructing the date format for the current locale.",
                "+\t * ",
                "+\t */",
                "+\tpublic StyleDateConverter()",
                "+\t{",
                "+\t\tthis(FormatStyle.SHORT);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct. The provided pattern will be used as the base format (but they will be localized",
                "+\t * for the current locale) and if null, {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)} will be used.",
                "+\t * ",
                "+\t * @param dateStyle",
                "+\t *            Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "+\t * @throws IllegalArgumentException",
                "+\t *             in case dateStyle is null",
                "+\t */",
                "+\tpublic StyleDateConverter(FormatStyle dateStyle)",
                "+\t{",
                "+\t\tsuper();",
                "+\t\tthis.dateStyle = dateStyle;",
                "+\t}",
                "+",
                "+\tpublic StyleDateConverter(String dateStyle)",
                "+\t{",
                "+\t\tthis(parseFormatStyle(dateStyle.charAt(0)));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets the optional date pattern.",
                "+\t * ",
                "+\t * @return datePattern",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getPattern(Locale locale)",
                "+\t{",
                "+\t\treturn DateTimeFormatterBuilder.getLocalizedDateTimePattern(dateStyle, null, IsoChronology.INSTANCE, locale);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\t@Override",
                "+\tpublic DateTimeFormatter getFormat(Locale locale)",
                "+\t{",
                "+\t\treturn dateStyle == null ? null : DateTimeFormatter.ofLocalizedDate(dateStyle).withLocale(locale);",
                "+\t}",
                "+",
                "+\tpublic static FormatStyle parseFormatStyle(char style)",
                "+\t{",
                "+\t\treturn DateField.parseFormatStyle(style);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic LocalDate convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "+\t\tif (format == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\treturn LocalDate.parse(value, format);",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tthrow newConversionException(e, locale);",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java",
                "new file mode 100644",
                "index 0000000000..e95725b13e",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java",
                "@@ -0,0 +1,114 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalTime;",
                "+import java.time.chrono.IsoChronology;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.time.format.DateTimeFormatterBuilder;",
                "+import java.time.format.FormatStyle;",
                "+import java.util.Locale;",
                "+",
                "+/**",
                "+ * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "+ * clients and server into account, and that is configured for a certain date style. The pattern",
                "+ * will always be locale specific.",
                "+ * <p>",
                "+ * This converter is especially suited on a per-component base.",
                "+ * </p>",
                "+ * ",
                "+ * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "+ */",
                "+public class StyleTimeConverter extends LocalTimeConverter",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Date style to use. See {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}.",
                "+\t */",
                "+\tprivate final FormatStyle timeStyle;",
                "+",
                "+\t/**",
                "+\t * Construct. The dateStyle 'S-' (which is the same as {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}) will",
                "+\t * be used for constructing the date format for the current locale.",
                "+\t * ",
                "+\t */",
                "+\tpublic StyleTimeConverter()",
                "+\t{",
                "+\t\tthis(FormatStyle.SHORT);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct. The provided pattern will be used as the base format (but they will be localized",
                "+\t * for the current locale) and if null, {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)} will be used.",
                "+\t * ",
                "+\t * @param timeStyle",
                "+\t *            Date style to use. See {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}.",
                "+\t * @throws IllegalArgumentException",
                "+\t *             in case dateStyle is null",
                "+\t */",
                "+\tpublic StyleTimeConverter(FormatStyle timeStyle)",
                "+\t{",
                "+\t\tsuper();",
                "+\t\tthis.timeStyle = timeStyle;",
                "+\t}",
                "+",
                "+\tpublic StyleTimeConverter(String timeStyle)",
                "+\t{",
                "+\t\tthis(parseFormatStyle(timeStyle.charAt(0)));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets the optional time pattern.",
                "+\t * ",
                "+\t * @return timePattern",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getPattern(Locale locale)",
                "+\t{",
                "+\t\treturn DateTimeFormatterBuilder.getLocalizedDateTimePattern(null, timeStyle, IsoChronology.INSTANCE, locale);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\t@Override",
                "+\tpublic DateTimeFormatter getFormat(Locale locale)",
                "+\t{",
                "+\t\treturn timeStyle == null ? null : DateTimeFormatter.ofLocalizedTime(timeStyle).withLocale(locale);",
                "+\t}",
                "+",
                "+\tpublic static FormatStyle parseFormatStyle(char style)",
                "+\t{",
                "+\t\treturn TimeField.parseFormatStyle(style);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic LocalTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "+\t\tif (format == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\treturn LocalTime.parse(value, format);",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tthrow newConversionException(e, locale);",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java",
                "new file mode 100644",
                "index 0000000000..c186cfe67c",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java",
                "@@ -0,0 +1,168 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.ZonedDateTime;",
                "+import java.time.chrono.IsoChronology;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.time.format.DateTimeFormatterBuilder;",
                "+import java.time.format.FormatStyle;",
                "+import java.util.Locale;",
                "+",
                "+/**",
                "+ * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "+ * clients and server into account, and that is configured for a certain date style. The pattern",
                "+ * will always be locale specific.",
                "+ * <p>",
                "+ * This converter is especially suited on a per-component base.",
                "+ * </p>",
                "+ * ",
                "+ * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "+ * @see java.time.ZonedDateTime",
                "+ * @see DateTimeFormatter",
                "+ * @see java.time.ZoneId",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class StyleZonedDateTimeConverter extends ZonedDateTimeConverter",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "+\t */",
                "+\tprivate final FormatStyle dateStyle;",
                "+",
                "+\tprivate final FormatStyle timeStyle;",
                "+",
                "+\t/**",
                "+\t * Construct. The dateStyle 'S-' (which is the same as {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}) will",
                "+\t * be used for constructing the date format for the current locale. </p> When",
                "+\t * applyTimeZoneDifference is true, the current time is applied on the parsed date, and the date",
                "+\t * will be corrected for the time zone difference between the server and the client. For",
                "+\t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9",
                "+\t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the",
                "+\t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while",
                "+\t * the client sees 12/24. </p>",
                "+\t * ",
                "+\t * @param applyTimeZoneDifference",
                "+\t *            whether to apply the difference in time zones between client and server",
                "+\t */",
                "+\tpublic StyleZonedDateTimeConverter(boolean applyTimeZoneDifference)",
                "+\t{",
                "+\t\tthis(FormatStyle.SHORT, null, applyTimeZoneDifference);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct. The provided pattern will be used as the base format (but they will be localized",
                "+\t * for the current locale) and if null, {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)} will be used. </p>",
                "+\t * When applyTimeZoneDifference is true, the current time is applied on the parsed date, and the",
                "+\t * date will be corrected for the time zone difference between the server and the client. For",
                "+\t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9",
                "+\t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the",
                "+\t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while",
                "+\t * the client sees 12/24. </p>",
                "+\t * ",
                "+\t * @param dateStyle",
                "+\t *            Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "+\t * @param timeStyle",
                "+\t *            Time style to use. See {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}",
                "+\t * @param applyTimeZoneDifference",
                "+\t *            whether to apply the difference in time zones between client and server",
                "+\t * @throws IllegalArgumentException",
                "+\t *             in case dateStyle is null",
                "+\t */",
                "+\tpublic StyleZonedDateTimeConverter(FormatStyle dateStyle, FormatStyle timeStyle, boolean applyTimeZoneDifference)",
                "+\t{",
                "+\t\tsuper(applyTimeZoneDifference);",
                "+\t\tthis.dateStyle = dateStyle;",
                "+\t\tthis.timeStyle = timeStyle;",
                "+\t}",
                "+",
                "+\tpublic StyleZonedDateTimeConverter(String dateTimeStyle, boolean applyTimeZoneDifference)",
                "+\t{",
                "+\t\tthis(parseFormatStyle(dateTimeStyle.charAt(0)), parseFormatStyle(dateTimeStyle.charAt(1)), applyTimeZoneDifference);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets the optional date pattern.",
                "+\t * ",
                "+\t * @return datePattern",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getPattern(Locale locale)",
                "+\t{",
                "+\t\tString localizedDateTimePattern = DateTimeFormatterBuilder.getLocalizedDateTimePattern(dateStyle, timeStyle, IsoChronology.INSTANCE, locale);",
                "+\t\treturn localizedDateTimePattern;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\t@Override",
                "+\tpublic DateTimeFormatter getFormat(Locale locale)",
                "+\t{",
                "+\t\tDateTimeFormatter df = null;",
                "+\t\tif (dateStyle == null && timeStyle == null) {",
                "+\t\t\treturn df;",
                "+\t\t}",
                "+\t\tif (timeStyle == null)",
                "+\t\t{",
                "+\t\t\tdf = DateTimeFormatter.ofLocalizedDate(dateStyle);",
                "+\t\t}",
                "+\t\telse if (dateStyle == null)",
                "+\t\t{",
                "+\t\t\tdf = DateTimeFormatter.ofLocalizedTime(timeStyle);",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\tdf = DateTimeFormatter.ofLocalizedDateTime(dateStyle, timeStyle);",
                "+\t\t}",
                "+\t\treturn df.withLocale(locale);",
                "+\t}",
                "+",
                "+\tpublic static FormatStyle parseFormatStyle(char style)",
                "+\t{",
                "+\t\treturn DateField.parseFormatStyle(style);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic ZonedDateTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "+\t\tif (format == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\tif (timeStyle == null)",
                "+\t\t\t{",
                "+\t\t\t\tLocalDate d = LocalDate.parse(value, format);",
                "+\t\t\t\treturn ZonedDateTime.of(d.atStartOfDay(), getTimeZone());",
                "+\t\t\t}",
                "+\t\t\telse if (dateStyle == null)",
                "+\t\t\t{",
                "+\t\t\t\t// not sure how we can get ZonedDateTime from time",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+\t\t\treturn super.convertToObject(value, format, locale);",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tthrow newConversionException(e, locale);",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html",
                "new file mode 100644",
                "index 0000000000..82cb00de69",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html",
                "@@ -0,0 +1,25 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                "+<!--",
                "+   Licensed to the Apache Software Foundation (ASF) under one or more",
                "+   contributor license agreements.  See the NOTICE file distributed with",
                "+   this work for additional information regarding copyright ownership.",
                "+   The ASF licenses this file to You under the Apache License, Version 2.0",
                "+   (the \"License\"); you may not use this file except in compliance with",
                "+   the License.  You may obtain a copy of the License at",
                "+",
                "+        http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+   Unless required by applicable law or agreed to in writing, software",
                "+   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+   See the License for the specific language governing permissions and",
                "+   limitations under the License.",
                "+-->",
                "+<wicket:panel xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <span style=\"white-space: nowrap;\">",
                "+    <input type=\"number\" wicket:id=\"hours\" size=\"2\" maxlength=\"2\" />",
                "+    <span wicket:id=\"hoursSeparator\">&#160;:</span>",
                "+    <input type=\"number\" wicket:id=\"minutes\" size=\"2\" maxlength=\"2\" />",
                "+    <select wicket:id=\"amOrPmChoice\"></select>",
                "+  </span>",
                "+</wicket:panel>",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "new file mode 100644",
                "index 0000000000..68af251606",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "@@ -0,0 +1,520 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.text.DecimalFormat;",
                "+import java.text.NumberFormat;",
                "+import java.text.SimpleDateFormat;",
                "+import java.time.LocalTime;",
                "+import java.time.chrono.IsoChronology;",
                "+import java.time.format.DateTimeFormatterBuilder;",
                "+import java.time.format.FormatStyle;",
                "+import java.time.temporal.ChronoField;",
                "+import java.util.Arrays;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.AttributeModifier;",
                "+import org.apache.wicket.markup.html.WebMarkupContainer;",
                "+import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "+import org.apache.wicket.markup.html.form.DropDownChoice;",
                "+import org.apache.wicket.markup.html.form.FormComponentPanel;",
                "+import org.apache.wicket.markup.html.form.TextField;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.Model;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.convert.converter.IntegerConverter;",
                "+import org.apache.wicket.util.lang.Args;",
                "+import org.apache.wicket.validation.validator.RangeValidator;",
                "+",
                "+/**",
                "+ * Works on a {@link java.util.Date} object. Displays a field for hours and a field for minutes, and",
                "+ * an AM/PM field. The format (12h/24h) of the hours field depends on the time format of this",
                "+ * {@link TimeField}'s {@link Locale}, as does the visibility of the AM/PM field (see",
                "+ * {@link TimeField#use12HourFormat}).",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ * @see TimeField for a variant with just the date field and date picker",
                "+ */",
                "+public class TimeField extends FormComponentPanel<LocalTime> implements ITextFormatProvider",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Enumerated type for different ways of handling the render part of requests.",
                "+\t */",
                "+\tpublic enum AM_PM {",
                "+\t\t/** */",
                "+\t\tAM(\"AM\"),",
                "+",
                "+\t\t/** */",
                "+\t\tPM(\"PM\");",
                "+",
                "+\t\tprivate  final String value;",
                "+",
                "+\t\tAM_PM(final String name)",
                "+\t\t{",
                "+\t\t\tvalue = name;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic String toString()",
                "+\t\t{",
                "+\t\t\treturn value;",
                "+\t\t}",
                "+\t}",
                "+\tprotected static final String HOURS = \"hours\";",
                "+\tprotected static final String MINUTES = \"minutes\";",
                "+\tprotected static final String AM_OR_PM_CHOICE = \"amOrPmChoice\";",
                "+",
                "+\tprivate static final IConverter<Integer> MINUTES_CONVERTER = new IntegerConverter() {",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\tprotected NumberFormat newNumberFormat(Locale locale) {",
                "+\t\t\treturn new DecimalFormat(\"00\");",
                "+\t\t}",
                "+\t};",
                "+",
                "+\t// The TextField for \"hours\" and it's associated model object",
                "+\tprivate TextField<Integer> hoursField;",
                "+",
                "+\t// The TextField for \"minutes\" and it's associated model object",
                "+\tprivate TextField<Integer> minutesField;",
                "+",
                "+\t// The dropdown list for AM/PM and it's associated model object",
                "+\tprivate DropDownChoice<AM_PM> amOrPmChoice;",
                "+\tprivate LocalTime time = LocalTime.now();",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @param timePattern",
                "+\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "+\t *            patterns.",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField forTimePattern(String id, IModel<LocalTime> model, String timePattern)",
                "+\t{",
                "+\t\treturn new TimeField(id, model, new PatternTimeConverter(timePattern));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param timePattern",
                "+\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "+\t *            patterns.",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField forTimePattern(String id, String timePattern)",
                "+\t{",
                "+\t\treturn forTimePattern(id, null, timePattern);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField using the provided date style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @param timeStyle",
                "+\t *            Date style to use. The first character is the date style, and the second character",
                "+\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "+\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "+\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField forTimeStyle(String id, IModel<LocalTime> model, String timeStyle)",
                "+\t{",
                "+\t\treturn new TimeField(id, model, new StyleTimeConverter(timeStyle));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField using the provided date style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param timeStyle",
                "+\t *            Date style to use. The first character is the date style, and the second character",
                "+\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "+\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "+\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField forTimeStyle(String id, String timeStyle)",
                "+\t{",
                "+\t\treturn forTimeStyle(id, null, timeStyle);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField forShortStyle(String id)",
                "+\t{",
                "+\t\treturn forShortStyle(id, null);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField defaulting to using a short date pattern",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField forShortStyle(String id, IModel<LocalTime> model)",
                "+\t{",
                "+\t\treturn new TimeField(id, model, new StyleTimeConverter());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField using the provided converter.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param converter",
                "+\t *            the date converter",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField withConverter(String id, LocalTimeConverter converter)",
                "+\t{",
                "+\t\treturn withConverter(id, null, converter);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new TimeField using the provided converter.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            The id of the text field",
                "+\t * @param model",
                "+\t *            The model",
                "+\t * @param converter",
                "+\t *            the date converter",
                "+\t * @return TimeField",
                "+\t */",
                "+\tpublic static TimeField withConverter(String id, IModel<LocalTime> model, LocalTimeConverter converter)",
                "+\t{",
                "+\t\treturn new TimeField(id, model, converter);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * The converter for the TextField",
                "+\t */",
                "+\tprivate final LocalTimeConverter converter;",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t *      the component id",
                "+\t */",
                "+\tpublic TimeField(String id, LocalTimeConverter converter)",
                "+\t{",
                "+\t\tthis(id, null, converter);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t *      the component id",
                "+\t * @param model",
                "+\t *      the component's model",
                "+\t */",
                "+\tpublic TimeField(String id, IModel<LocalTime> model, LocalTimeConverter converter)",
                "+\t{",
                "+\t\tsuper(id, model);",
                "+",
                "+\t\tArgs.notNull(converter, \"converter\");",
                "+\t\tthis.converter = converter;",
                "+",
                "+\t\t// Sets the type that will be used when updating the model for this component.",
                "+\t\tsetType(LocalTime.class);",
                "+",
                "+",
                "+\t\t// Create and add the \"hours\" TextField",
                "+\t\tadd(hoursField = newHoursTextField(HOURS, new HoursModel(), Integer.class));",
                "+",
                "+\t\t// Create and add the \"minutes\" TextField",
                "+\t\tadd(minutesField = newMinutesTextField(MINUTES, new MinutesModel(), Integer.class));",
                "+",
                "+\t\t// Create and add the \"AM/PM\" Listbox",
                "+\t\tadd(amOrPmChoice = new DropDownChoice<>(AM_OR_PM_CHOICE, new AmPmModel(), Arrays.asList(AM_PM.values())));",
                "+",
                "+\t\tadd(new WebMarkupContainer(\"hoursSeparator\")",
                "+\t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic boolean isVisible()",
                "+\t\t\t{",
                "+\t\t\t\treturn minutesField.determineVisibility();",
                "+\t\t\t}",
                "+\t\t});",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * create a new {@link TextField} instance for hours to be added to this panel.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            model that should be used by the {@link TextField}",
                "+\t * @param type",
                "+\t *            the type of the text field",
                "+\t * @return a new text field instance",
                "+\t */",
                "+\tprotected TextField<Integer> newHoursTextField(final String id, IModel<Integer> model, Class<Integer> type) {",
                "+\t\tTextField<Integer> hoursTextField = new TextField<Integer>(id, model, type)",
                "+\t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected String[] getInputTypes()",
                "+\t\t\t{",
                "+\t\t\t\treturn new String[] {\"number\"};",
                "+\t\t\t}",
                "+\t\t};",
                "+\t\thoursTextField.add(AttributeModifier.append(\"min\", getMaximumHours() == 24 ? 0 : 1));",
                "+\t\thoursTextField.add(AttributeModifier.append(\"max\", getMaximumHours() == 24 ? 23 : 12));",
                "+\t\thoursTextField.add(getMaximumHours() == 24 ? RangeValidator.range(0, 23) : RangeValidator.range(1, 12));",
                "+\t\thoursTextField.setLabel(new Model<>(HOURS));",
                "+\t\treturn hoursTextField;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * create a new {@link TextField} instance for minutes to be added to this panel.",
                "+\t *",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            model that should be used by the {@link TextField}",
                "+\t * @param type",
                "+\t *            the type of the text field",
                "+\t * @return a new text field instance",
                "+\t */",
                "+\tprotected TextField<Integer> newMinutesTextField(final String id, IModel<Integer> model,",
                "+\t\tClass<Integer> type)",
                "+\t{",
                "+\t\tTextField<Integer> minutesField = new TextField<Integer>(id, model, type)",
                "+\t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected IConverter<?> createConverter(Class<?> type)",
                "+\t\t\t{",
                "+\t\t\t\tif (Integer.class.isAssignableFrom(type))",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn MINUTES_CONVERTER;",
                "+\t\t\t\t}",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected String[] getInputTypes()",
                "+\t\t\t{",
                "+\t\t\t\treturn new String[] {\"number\"};",
                "+\t\t\t}",
                "+\t\t};",
                "+\t\tminutesField.add(AttributeModifier.append(\"min\", 0));",
                "+\t\tminutesField.add(AttributeModifier.append(\"max\", 59));",
                "+\t\tminutesField.add(new RangeValidator<>(0, 59));",
                "+\t\tminutesField.setLabel(new Model<>(MINUTES));",
                "+\t\treturn minutesField;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic String getInput()",
                "+\t{",
                "+\t\t// since we override convertInput, we can let this method return a value",
                "+\t\t// that is just suitable for error reporting",
                "+\t\treturn String.format(\"%s:%s\", hoursField.getInput(), minutesField.getInput());",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void convertInput()",
                "+\t{",
                "+\t\tInteger hours = hoursField.getConvertedInput();",
                "+\t\tInteger minutes = minutesField.getConvertedInput();",
                "+\t\tAM_PM amOrPmInput = amOrPmChoice.getConvertedInput();",
                "+",
                "+\t\tLocalTime localTime = null;",
                "+\t\tif (hours != null && minutes != null)",
                "+\t\t{",
                "+\t\t\t// Use the input to create a LocalTime object",
                "+\t\t\tlocalTime = LocalTime.of(hours, minutes);",
                "+",
                "+\t\t\t// Adjust for halfday if needed",
                "+\t\t\tif (use12HourFormat())",
                "+\t\t\t{",
                "+\t\t\t\tint halfday = (amOrPmInput == AM_PM.PM ? 1 : 0);",
                "+\t\t\t\tlocalTime = localTime.with(ChronoField.AMPM_OF_DAY, halfday);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tsetConvertedInput(localTime);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void onBeforeRender() {",
                "+\t\thoursField.setRequired(isRequired());",
                "+\t\tminutesField.setRequired(isRequired());",
                "+",
                "+\t\tboolean use12HourFormat = use12HourFormat();",
                "+\t\tamOrPmChoice.setVisible(use12HourFormat);",
                "+\t\tsuper.onBeforeRender();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Checks whether the current {@link Locale} uses the 12h or 24h time format. This method can be",
                "+\t * overridden to e.g. always use 24h format.",
                "+\t * ",
                "+\t * @return true, if the current {@link Locale} uses the 12h format.<br/>",
                "+\t *         false, otherwise",
                "+\t */",
                "+\tprotected boolean use12HourFormat()",
                "+\t{",
                "+\t\tString pattern = DateTimeFormatterBuilder.getLocalizedDateTimePattern(null, FormatStyle.SHORT, IsoChronology.INSTANCE, getLocale());",
                "+\t\treturn pattern.indexOf('a') != -1 || pattern.indexOf('h') != -1 || pattern.indexOf('K') != -1;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return either 12 or 24, depending on the hour format of the current {@link Locale}",
                "+\t */",
                "+\tprivate int getMaximumHours()",
                "+\t{",
                "+\t\treturn getMaximumHours(use12HourFormat());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Convenience method (mainly for optimization purposes), in case {@link #use12HourFormat()} has",
                "+\t * already been stored in a local variable and thus doesn't need to be computed again.",
                "+\t * ",
                "+\t * @param use12HourFormat",
                "+\t *            the hour format to use",
                "+\t * @return either 12 or 24, depending on the parameter <code>use12HourFormat</code>",
                "+\t */",
                "+\tprivate int getMaximumHours(boolean use12HourFormat)",
                "+\t{",
                "+\t\treturn use12HourFormat ? 12 : 24;",
                "+\t}",
                "+",
                "+\tprotected class HoursModel implements IModel<Integer>",
                "+\t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t@Override",
                "+\t\tpublic Integer getObject()",
                "+\t\t{",
                "+\t\t\tLocalTime t = TimeField.this.getModelObject();",
                "+\t\t\tif (t == null)",
                "+\t\t\t{",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+\t\t\treturn getMaximumHours() == 24 ? t.getHour() : t.get(ChronoField.CLOCK_HOUR_OF_AMPM);",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void setObject(Integer hour)",
                "+\t\t{",
                "+\t\t\ttime = time.with(getMaximumHours() == 24 ? ChronoField.HOUR_OF_DAY : ChronoField.CLOCK_HOUR_OF_AMPM, hour);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprotected class MinutesModel implements IModel<Integer>",
                "+\t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t@Override",
                "+\t\tpublic Integer getObject()",
                "+\t\t{",
                "+\t\t\tLocalTime t = TimeField.this.getModelObject();",
                "+\t\t\treturn t == null ? null : t.getMinute();",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void setObject(Integer minute)",
                "+\t\t{",
                "+\t\t\ttime = time.with(ChronoField.MINUTE_OF_HOUR, minute);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprotected class AmPmModel implements IModel<AM_PM>",
                "+\t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t@Override",
                "+\t\tpublic AM_PM getObject()",
                "+\t\t{",
                "+\t\t\tLocalTime t = TimeField.this.getModelObject();",
                "+\t\t\tint i = t == null ? 0 : t.get(ChronoField.AMPM_OF_DAY);",
                "+\t\t\treturn i == 0 ? AM_PM.AM : AM_PM.PM;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void setObject(AM_PM amPm)",
                "+\t\t{",
                "+\t\t\tint i = AM_PM.AM == amPm ? 0 : 1;",
                "+\t\t\ttime = time.with(ChronoField.AMPM_OF_DAY, i);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return The specialized converter.",
                "+\t * @see org.apache.wicket.Component#createConverter(java.lang.Class)",
                "+\t */",
                "+\t@Override",
                "+\tprotected IConverter<?> createConverter(Class<?> clazz)",
                "+\t{",
                "+\t\tif (LocalTime.class.isAssignableFrom(clazz))",
                "+\t\t{",
                "+\t\t\treturn converter;",
                "+\t\t}",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider#getTextFormat()",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getTextFormat()",
                "+\t{",
                "+\t\treturn converter.getPattern(getLocale());",
                "+\t}",
                "+",
                "+\tpublic static FormatStyle parseFormatStyle(char style)",
                "+\t{",
                "+\t\tswitch (style)",
                "+\t\t{",
                "+\t\t\tcase 'M':",
                "+\t\t\t\treturn FormatStyle.MEDIUM;",
                "+\t\t\tcase 'S':",
                "+\t\t\tdefault:",
                "+\t\t\t\treturn FormatStyle.SHORT;",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java",
                "new file mode 100644",
                "index 0000000000..9286f2eabe",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java",
                "@@ -0,0 +1,203 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.ZoneId;",
                "+import java.time.ZonedDateTime;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.util.Locale;",
                "+import java.util.TimeZone;",
                "+",
                "+import org.apache.wicket.Session;",
                "+import org.apache.wicket.core.request.ClientInfo;",
                "+import org.apache.wicket.protocol.http.request.WebClientInfo;",
                "+import org.apache.wicket.util.convert.ConversionException;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.lang.Args;",
                "+import org.apache.wicket.util.string.Strings;",
                "+",
                "+",
                "+/**",
                "+ * Base class for javax.time based date converters. It contains the logic to parse and format,",
                "+ * optionally taking the time zone difference between clients and the server into account.",
                "+ * <p>",
                "+ * Converters of this class are best suited for per-component use.",
                "+ * </p>",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public abstract class ZonedDateTimeConverter implements IConverter<ZonedDateTime>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Whether to apply the time zone difference when interpreting dates.",
                "+\t */",
                "+\tprivate final boolean applyTimeZoneDifference;",
                "+",
                "+\t/**",
                "+\t * Construct. <p> When applyTimeZoneDifference is true, the current time is applied on the",
                "+\t * parsed date, and the date will be corrected for the time zone difference between the server",
                "+\t * and the client. For instance, if I'm in Seattle and the server I'm working on is in",
                "+\t * Amsterdam, the server is 9 hours ahead. So, if I'm inputting say 12/24 at a couple of hours",
                "+\t * before midnight, at the server it is already 12/25. If this boolean is true, it will be",
                "+\t * transformed to 12/25, while the client sees 12/24. </p>",
                "+\t * ",
                "+\t * @param applyTimeZoneDifference",
                "+\t *            whether to apply the difference in time zones between client and server",
                "+\t */",
                "+\tpublic ZonedDateTimeConverter(boolean applyTimeZoneDifference)",
                "+\t{",
                "+\t\tthis.applyTimeZoneDifference = applyTimeZoneDifference;",
                "+\t}",
                "+",
                "+\tpublic ZonedDateTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\t// parse date retaining the time of the submission",
                "+\t\t\treturn ZonedDateTime.parse(value, format);",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tthrow newConversionException(e, locale);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic ZonedDateTime convertToObject(String value, Locale locale)",
                "+\t{",
                "+\t\tif (Strings.isEmpty(value))",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\tDateTimeFormatter format = getFormat(locale);",
                "+\t\tArgs.notNull(format, \"format\");",
                "+",
                "+\t\tif (applyTimeZoneDifference)",
                "+\t\t{",
                "+\t\t\tZoneId zoneId = getClientTimeZone();",
                "+",
                "+\t\t\t// set time zone for client",
                "+\t\t\tformat = format.withZone(getTimeZone());",
                "+",
                "+\t\t\tZonedDateTime dateTime = convertToObject(value, format, locale);",
                "+\t\t\t// apply the server time zone to the parsed value",
                "+\t\t\tif (zoneId != null)",
                "+\t\t\t{",
                "+\t\t\t\tdateTime = dateTime.withZoneSameInstant(zoneId);",
                "+\t\t\t}",
                "+",
                "+\t\t\treturn dateTime;",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\treturn convertToObject(value, format, locale);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a ConversionException and sets additional context information to it.",
                "+\t *",
                "+\t * @param cause",
                "+\t *            - {@link RuntimeException} cause",
                "+\t * @param locale",
                "+\t *            - {@link Locale} used to set 'format' variable with localized pattern",
                "+\t * @return {@link ConversionException}",
                "+\t */",
                "+\tConversionException newConversionException(RuntimeException cause, Locale locale)",
                "+\t{",
                "+\t\treturn new ConversionException(cause)",
                "+\t\t\t\t.setVariable(\"format\", getPattern(locale));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic String convertToString(ZonedDateTime dateTime, Locale locale)",
                "+\t{",
                "+\t\tDateTimeFormatter format = getFormat(locale);",
                "+",
                "+\t\tif (applyTimeZoneDifference)",
                "+\t\t{",
                "+\t\t\tZoneId zoneId = getClientTimeZone();",
                "+\t\t\tif (zoneId != null)",
                "+\t\t\t{",
                "+\t\t\t\t// apply time zone to formatter",
                "+\t\t\t\tformat = format.withZone(zoneId);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn format.format(dateTime);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets whether to apply the time zone difference when interpreting dates.",
                "+\t * ",
                "+\t * </p> When true, the current time is applied on the parsed date, and the date will be",
                "+\t * corrected for the time zone difference between the server and the client. For instance, if",
                "+\t * I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9 hours ahead.",
                "+\t * So, if I'm inputting say 12/24 at a couple of hours before midnight, at the server it is",
                "+\t * already 12/25. If this boolean is true, it will be transformed to 12/25, while the client",
                "+\t * sees 12/24. </p>",
                "+\t * ",
                "+\t * @return whether to apply the difference in time zones between client and server",
                "+\t */",
                "+\tpublic final boolean getApplyTimeZoneDifference()",
                "+\t{",
                "+\t\treturn applyTimeZoneDifference;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @param locale",
                "+\t *            The locale used to convert the value",
                "+\t * @return Gets the pattern that is used for printing and parsing",
                "+\t */",
                "+\tpublic abstract String getPattern(Locale locale);",
                "+",
                "+\t/**",
                "+\t * Gets the client's time zone.",
                "+\t * ",
                "+\t * @return The client's time zone or null",
                "+\t */",
                "+\tprotected ZoneId getClientTimeZone()",
                "+\t{",
                "+\t\tClientInfo info = Session.get().getClientInfo();",
                "+\t\tif (info instanceof WebClientInfo)",
                "+\t\t{",
                "+\t\t\tTimeZone timeZone = ((WebClientInfo) info).getProperties().getTimeZone();",
                "+\t\t\treturn timeZone.toZoneId();",
                "+\t\t}",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @param locale",
                "+\t *            The locale used to convert the value",
                "+\t * ",
                "+\t * @return formatter The formatter for the current conversion",
                "+\t */",
                "+\tpublic abstract DateTimeFormatter getFormat(Locale locale);",
                "+",
                "+\t/**",
                "+\t * Gets the server time zone. Override this method if you want to fix to a certain time zone,",
                "+\t * regardless of what actual time zone the server is in.",
                "+\t * ",
                "+\t * @return The server time zone",
                "+\t */",
                "+\tprotected ZoneId getTimeZone()",
                "+\t{",
                "+\t\treturn ZoneId.systemDefault();",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "new file mode 100644",
                "index 0000000000..a6814f8c61",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "@@ -0,0 +1,154 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.LocalTime;",
                "+import java.time.ZoneId;",
                "+import java.time.ZonedDateTime;",
                "+import java.time.temporal.ChronoField;",
                "+import java.util.Locale;",
                "+import java.util.TimeZone;",
                "+",
                "+import org.apache.wicket.Session;",
                "+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                "+import org.apache.wicket.core.request.ClientInfo;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.protocol.http.request.WebClientInfo;",
                "+",
                "+/**",
                "+ * Works on a {@link java.time.ZonedDateTimeTime} object. Displays a date field and a DatePicker, a field",
                "+ * for hours and a field for minutes, and an AM/PM field. The format (12h/24h) of the hours field",
                "+ * depends on the time format of this {@link ZonedDateTimeField}'s {@link Locale}, as does the visibility",
                "+ * of the AM/PM field (see {@link ZonedDateTimeField#use12HourFormat}).",
                "+ * <p>",
                "+ * <strong>Ajaxifying the DateTimeField</strong>: If you want to update a DateTimeField with an",
                "+ * {@link AjaxFormComponentUpdatingBehavior}, you have to attach it to the contained",
                "+ * {@link DateField} by overriding {@link #newDateTextField(String, IModel)} and calling",
                "+ * {@link #processInput()}:",
                "+ * ",
                "+ * <pre>{@code",
                "+ *  DateTimeField dateTimeField = new DateTimeField(...) {",
                "+ *    protected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)",
                "+ *    {",
                "+ *      DateTextField dateField = super.newDateTextField(id, dateFieldModel);     ",
                "+ *      dateField.add(new AjaxFormComponentUpdatingBehavior(\"change\") {",
                "+ *        protected void onUpdate(AjaxRequestTarget target) {",
                "+ *          processInput(); // let DateTimeField process input too",
                "+ *",
                "+ *          ...",
                "+ *        }",
                "+ *      });",
                "+ *      return recorder;",
                "+ *    }",
                "+ *  }",
                "+ * }</pre>",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ * @see DateField for a variant with just the date field and date picker",
                "+ */",
                "+public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\tprivate ZonedDateTime dateTime = ZonedDateTime.now();",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t */",
                "+\tpublic ZonedDateTimeField(final String id)",
                "+\t{",
                "+\t\tthis(id, null);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t * @param model",
                "+\t */",
                "+\tpublic ZonedDateTimeField(final String id, final IModel<ZonedDateTime> model)",
                "+\t{",
                "+\t\tsuper(id, model);",
                "+",
                "+\t\t// Sets the type that will be used when updating the model for this component.",
                "+\t\tsetType(ZonedDateTime.class);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Gets the client's time zone.",
                "+\t * ",
                "+\t * @return The client's time zone or null",
                "+\t */",
                "+\tprotected ZoneId getClientTimeZone()",
                "+\t{",
                "+\t\tClientInfo info = Session.get().getClientInfo();",
                "+\t\tif (info instanceof WebClientInfo)",
                "+\t\t{",
                "+\t\t\tTimeZone timeZone = ((WebClientInfo) info).getProperties().getTimeZone();",
                "+\t\t\treturn timeZone != null ? timeZone.toZoneId() : null;",
                "+\t\t}",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\tZonedDateTime performConvert(LocalDate date, LocalTime time) {",
                "+\t\treturn ZonedDateTime.of(date, time, getClientTimeZone());",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tvoid prepareObject() {",
                "+\t\tZonedDateTime modelObject = getModelObject();",
                "+\t\tif (modelObject == null)",
                "+\t\t{",
                "+\t\t\tdateTime = null;",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\t// convert date to the client's time zone if we have that info",
                "+\t\t\tZoneId zone = getClientTimeZone();",
                "+\t\t\tif (zone != null)",
                "+\t\t\t{",
                "+\t\t\t\tmodelObject = modelObject.withZoneSameInstant(zone);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tLocalDate getLocalDate()",
                "+\t{",
                "+\t\treturn dateTime.toLocalDate();",
                "+\t}",
                "+",
                "+\tvoid setLocalDate(LocalDate date)",
                "+\t{",
                "+\t\tdateTime = dateTime.with(ChronoField.YEAR, date.getYear())",
                "+\t\t\t\t.with(ChronoField.MONTH_OF_YEAR, date.getMonthValue())",
                "+\t\t\t\t.with(ChronoField.DAY_OF_YEAR, date.getDayOfMonth());",
                "+\t}",
                "+",
                "+\tLocalTime getLocalTime()",
                "+\t{",
                "+\t\treturn dateTime.toLocalTime();",
                "+\t}",
                "+",
                "+\tvoid setLocalTime(LocalTime time)",
                "+\t{",
                "+\t\tdateTime = dateTime.with(ChronoField.HOUR_OF_DAY, time.getHour())",
                "+\t\t\t\t.with(ChronoField.MINUTE_OF_HOUR, time.getMinute());",
                "+\t}",
                "+}",
                "diff --git a/wicket-user-guide/src/main/asciidoc/helloWorld/helloWorld_1.adoc b/wicket-user-guide/src/main/asciidoc/helloWorld/helloWorld_1.adoc",
                "index c24e4dd06c..5dac973877 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/helloWorld/helloWorld_1.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/helloWorld/helloWorld_1.adoc",
                "@@ -8,3 +8,2 @@ Wicket is available as a binary package on the main site  http://wicket.apache.o",
                " | wicket-util | Contains general-purpose utility classes for functional areas such as I/O, lang, string manipulation, security, etc... | None",
                "-| wicket-datetime | Contains special purpose components designed to work with date and time. | wicket-core",
                " | wicket-bean-validation | Provides support for JSR 303 standard validation. | wicket-core"
            ],
            "changed_files": [
                "pom.xml",
                "testing/wicket-common-tests/pom.xml",
                "testing/wicket-js-tests/Gruntfile.js",
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java",
                "wicket-datetime/pom.xml",
                "wicket-datetime/src/main/java/org/apache/wicket/datetime/markup/html/basic/DateLabel.java",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/VERSION",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/YuiLib.java",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/assets/skins/sam/sprite.png",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/AbstractCalendar.java",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePickerInit.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/TimeField.java",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/assets/skins/sam/calendar.css",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar-min.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/calendar.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon1.gif",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon2.gif",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/icon3.gif",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/wicket-date.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom-min.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/dom/dom.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event-min.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/event/event.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo-min.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoo/yahoo.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yahoodomevent/yahoo-dom-event.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader-min.js",
                "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/yuiloader/yuiloader.js",
                "wicket-examples/.tomcatplugin",
                "wicket-examples/pom.xml",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent2Page.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalWindowPage.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/Person.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "wicket-user-guide/src/main/asciidoc/helloWorld/helloWorld_1.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6105": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6105",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63cf15f351da8733999164822ae64f6d2d0bc561",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516617226,
            "hunks": 13,
            "message": "WICKET-6498 JavaScriptDeferHeaderResponse - translates OnDomReady and Load header items to their native non-jquery equivalents - application uses a default IHeaderResponseDecorator now, that decorates with the ResourceAggregator; this allows to chain header response before and *after* the aggregator",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Application.java b/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "index d6d4bb51fa..356c8b92b7 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "@@ -197,3 +197,5 @@ public abstract class Application implements UnboundListener, IEventSink",
                " \t */",
                "-\tprivate IHeaderResponseDecorator headerResponseDecorator;",
                "+\tprivate IHeaderResponseDecorator headerResponseDecorator = (headerresponse) -> {",
                "+\t\treturn new ResourceAggregator(headerresponse);",
                "+\t};",
                "@@ -1616,5 +1618,6 @@ public abstract class Application implements UnboundListener, IEventSink",
                " \t */",
                "-\tpublic final Application setHeaderResponseDecorator(",
                "-\t\tfinal IHeaderResponseDecorator headerResponseDecorator)",
                "+\tpublic final Application setHeaderResponseDecorator(final IHeaderResponseDecorator headerResponseDecorator)",
                " \t{",
                "+\t\tArgs.notNull(headerResponseDecorator, \"headerResponseDecorator\");",
                "+\t\t",
                " \t\tthis.headerResponseDecorator = headerResponseDecorator;",
                "@@ -1638,10 +1641,3 @@ public abstract class Application implements UnboundListener, IEventSink",
                " \t{",
                "-\t\tfinal IHeaderResponse aggregatingResponse = new ResourceAggregator(response);",
                "-",
                "-\t\tif (headerResponseDecorator == null)",
                "-\t\t{",
                "-\t\t\treturn aggregatingResponse;",
                "-\t\t}",
                "-",
                "-\t\treturn headerResponseDecorator.decorate(aggregatingResponse);",
                "+\t\treturn headerResponseDecorator.decorate(response);",
                " \t}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "index 8dee02e6cd..233b588253 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "@@ -29,3 +29,2 @@ import org.apache.wicket.markup.head.HeaderItem;",
                " import org.apache.wicket.markup.head.IHeaderResponse;",
                "-import org.apache.wicket.markup.head.ResourceAggregator;",
                " import org.apache.wicket.markup.head.internal.HeaderResponse;",
                "@@ -265,10 +264,8 @@ public class FilteringHeaderResponse extends DecoratingHeaderResponse",
                "-\t\tResourceAggregator resourceAggregator = new ResourceAggregator(headerRenderer);",
                "-",
                " \t\tfor (HeaderItem curItem : resp)",
                " \t\t{",
                "-\t\t\tresourceAggregator.render(curItem);",
                "+\t\t\theaderRenderer.render(curItem);",
                " \t\t}",
                "-\t\tresourceAggregator.close();",
                "+\t\theaderRenderer.close();",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "new file mode 100644",
                "index 0000000000..15dd49e43b",
                "--- /dev/null",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "@@ -0,0 +1,111 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.markup.head.filter;",
                "+",
                "+import org.apache.wicket.core.util.string.JavaScriptUtils;",
                "+import org.apache.wicket.markup.head.AbstractJavaScriptReferenceHeaderItem;",
                "+import org.apache.wicket.markup.head.HeaderItem;",
                "+import org.apache.wicket.markup.head.IHeaderResponse;",
                "+import org.apache.wicket.markup.head.IWrappedHeaderItem;",
                "+import org.apache.wicket.markup.head.JavaScriptContentHeaderItem;",
                "+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                "+import org.apache.wicket.markup.head.OnLoadHeaderItem;",
                "+import org.apache.wicket.markup.html.DecoratingHeaderResponse;",
                "+import org.apache.wicket.request.Response;",
                "+import org.apache.wicket.util.string.Strings;",
                "+",
                "+/**",
                "+ * A header response that defers all {@link AbstractJavaScriptReferenceHeaderItem}s.",
                "+ * ",
                "+ * @author svenmeier",
                "++ */",
                "+public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                "+{",
                "+\tpublic JavaScriptDeferHeaderResponse(IHeaderResponse response)",
                "+\t{",
                "+\t\tsuper(response);",
                "+\t}",
                "+\t",
                "+\t@Override",
                "+\tpublic void render(HeaderItem item)",
                "+\t{",
                "+\t\tif (item instanceof IWrappedHeaderItem) {",
                "+\t\t\titem = ((IWrappedHeaderItem)item).getWrapped();",
                "+\t\t}",
                "+",
                "+\t\tif (item instanceof AbstractJavaScriptReferenceHeaderItem) {",
                "+\t\t\t((AbstractJavaScriptReferenceHeaderItem)item).setDefer(true);",
                "+\t\t} else if (item instanceof OnDomReadyHeaderItem) {",
                "+\t\t\titem = new NativeOnDomContentLoadedHeaderItem(((OnDomReadyHeaderItem)item).getJavaScript());",
                "+\t\t} else if (item instanceof OnLoadHeaderItem) {",
                "+\t\t\titem = new NativeOnLoadHeaderItem(((OnLoadHeaderItem)item).getJavaScript());",
                "+\t\t} else if (item instanceof JavaScriptContentHeaderItem) {",
                "+\t\t\titem = new NativeOnDomContentLoadedHeaderItem(((JavaScriptContentHeaderItem)item).getJavaScript());",
                "+\t\t}",
                "+\t\t",
                "+\t\tsuper.render(item);",
                "+\t}",
                "+",
                "+\tprivate class NativeOnDomContentLoadedHeaderItem extends OnDomReadyHeaderItem",
                "+\t{",
                "+\t\t/**",
                "+\t\t * Construct.",
                "+\t\t *",
                "+\t\t * @param javaScript",
                "+\t\t */",
                "+\t\tpublic NativeOnDomContentLoadedHeaderItem(CharSequence javaScript)",
                "+\t\t{",
                "+\t\t\tsuper(javaScript);",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void render(Response response)",
                "+\t\t{",
                "+\t\t\tCharSequence js = getJavaScript();",
                "+\t\t\tif (Strings.isEmpty(js) == false)",
                "+\t\t\t{",
                "+\t\t\t\tJavaScriptUtils.writeJavaScript(response,",
                "+\t\t\t\t\t\"(function(){ var f = function() {\" + js + \";};\\nif ('loading' !== document.readyState) f(); else document.addEventListener('DOMContentLoaded', f); })();\");",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\t",
                "+\tprivate class NativeOnLoadHeaderItem extends OnLoadHeaderItem",
                "+\t{",
                "+",
                "+\t\t/**",
                "+\t\t * Construct.",
                "+\t\t *",
                "+\t\t * @param javaScript",
                "+\t\t */",
                "+\t\tpublic NativeOnLoadHeaderItem(CharSequence javaScript)",
                "+\t\t{",
                "+\t\t\tsuper(javaScript);",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void render(Response response)",
                "+\t\t{",
                "+\t\t\tCharSequence js = getJavaScript();",
                "+\t\t\tif (Strings.isEmpty(js) == false)",
                "+\t\t\t{",
                "+\t\t\t\tJavaScriptUtils.writeJavaScript(response,",
                "+\t\t\t\t\t\"(function(){ var f = function() {\" + js + \";};\\nif ('complete' === document.readyState) f(); else window.addEventListener('load', f); })();\");",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}\t",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "index 82caa41a0a..c38265aa9c 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "@@ -24,2 +24,4 @@ import org.apache.wicket.examples.WicketExampleApplication;",
                " import org.apache.wicket.examples.ajax.builtin.modal.ModalWindowPage;",
                "+import org.apache.wicket.markup.head.ResourceAggregator;",
                "+import org.apache.wicket.markup.head.filter.JavaScriptDeferHeaderResponse;",
                " import org.apache.wicket.markup.html.WebPage;",
                "@@ -46,2 +48,7 @@ public class AjaxApplication extends WicketExampleApplication",
                "+\t\tsetHeaderResponseDecorator(response -> {",
                "+\t\t\t// use this header resource decorator to defer all JavaScript resources",
                "+\t\t\treturn new ResourceAggregator(new JavaScriptDeferHeaderResponse(response));",
                "+\t\t});",
                "+",
                " \t\tgetComponentInitializationListeners().add(new IComponentInitializationListener()",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/resourcedecoration/ResourceDecorationApplication.java b/wicket-examples/src/main/java/org/apache/wicket/examples/resourcedecoration/ResourceDecorationApplication.java",
                "index 5af41de2cb..b8b45e97f4 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/resourcedecoration/ResourceDecorationApplication.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/resourcedecoration/ResourceDecorationApplication.java",
                "@@ -19,2 +19,3 @@ package org.apache.wicket.examples.resourcedecoration;",
                " import org.apache.wicket.Application;",
                "+import org.apache.wicket.markup.head.ResourceAggregator;",
                " import org.apache.wicket.markup.head.filter.JavaScriptFilteredIntoFooterHeaderResponse;",
                "@@ -48,3 +49,3 @@ public class ResourceDecorationApplication extends WebApplication",
                " \t\t\t// footer (after </body>)",
                "-\t\t\treturn new JavaScriptFilteredIntoFooterHeaderResponse(response, \"footerJS\");",
                "+\t\t\treturn new ResourceAggregator(new JavaScriptFilteredIntoFooterHeaderResponse(response, \"footerJS\"));",
                " \t\t});"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/Application.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/resourcedecoration/ResourceDecorationApplication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6498": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: jquery",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6498",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e4496e20b5b4f8edf28bed873ddcf61f07dd29a",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517008449,
            "hunks": 1,
            "message": "WICKET-6517 fixed grunt error",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "index b2ad3a04e8..075a9cade3 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "@@ -660,3 +660,3 @@",
                "-\t\t\tvar wwwFormUrlEncoded = undefined; // default",
                "+\t\t\tvar wwwFormUrlEncoded; // undefined is jQuery's default",
                " \t\t\tif (attrs.mp) {"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6517": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: jquery",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6517",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9e3e16709b4652f091ae1c946b6f0618e040ce18",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508254325,
            "hunks": 3,
            "message": "WICKET-6481 code review feedbacks",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java",
                "index 74b13682c2..52b81a7b8c 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java",
                "@@ -173,4 +173,5 @@ public class PageInstanceMapper extends AbstractComponentMapper",
                " \t\tString pageIdentifier = getContext().getPageIdentifier();",
                "+\t\tList<String> segments = url.getSegments();",
                "-\t\tif (hasSegmentsAfterPageIdentifier(url, pageIdentifier))",
                "+\t\tif (isNotPageInstanceUrl(segments, pageIdentifier))",
                " \t\t{",
                "@@ -195,7 +196,13 @@ public class PageInstanceMapper extends AbstractComponentMapper",
                "-\tprivate boolean hasSegmentsAfterPageIdentifier(Url url, String pageIdentifier) ",
                "-\t{",
                "-\t\tList<String> segments = url.getSegments();",
                "+",
                "+\tprivate boolean isNotPageInstanceUrl(List<String> segments, String pageIdentifier) ",
                "+\t{\t\t",
                "+\t\tif (segments.size() > 2 ) ",
                "+\t\t{",
                "+\t\t\treturn true;",
                "+\t\t} ",
                "+\t\t",
                " \t\tint pageIdIndex = segments.indexOf(pageIdentifier);",
                "+\t\t//check if we have segments after pageIdentifier",
                " \t\treturn pageIdIndex < 0 || segments.size() - 1 > pageIdIndex;"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6481": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6481",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f642f4ad4266319731b200e517eadf53fef5a56b",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1515757555,
            "hunks": 8,
            "message": "WICKET-6517 use FormData, removed submitMultipartForm",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "index d4f3100397..801a47da7f 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "@@ -645,7 +645,2 @@",
                "-\t\t\tif (attrs.mp) { // multipart form. jQuery.ajax() doesn't help here ...",
                "-\t\t\t\tvar ret = self.submitMultipartForm(context);",
                "-\t\t\t\treturn ret;",
                "-\t\t\t}",
                "-",
                " \t\t\tif (attrs.f) {",
                "@@ -660,3 +655,2 @@",
                " \t\t\t\t}",
                "-",
                " \t\t\t} else if (attrs.c && !jQuery.isWindow(attrs.c)) {",
                "@@ -667,4 +661,16 @@",
                "-\t\t\t// convert to URL encoded string",
                "-\t\t\tdata = jQuery.param(data);",
                "+\t\t\tvar wwwFormUrlEncoded = undefined; // default",
                "+\t\t\tif (attrs.mp) {",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\tvar formData = new FormData();",
                "+\t\t\t\t\tfor (var i = 0; i < data.length; i++) {",
                "+\t\t\t\t\t\tformData.append(data[i].name, data[i].value);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\t",
                "+\t\t\t\t\tdata = formData;",
                "+\t\t\t\t\twwwFormUrlEncoded = false;",
                "+\t\t\t\t} catch (exception) {",
                "+\t\t\t\t\tWicket.Log.error(\"Ajax multipat not supported:\" + exception);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "@@ -675,4 +681,6 @@",
                " \t\t\t\tcontext: self,",
                "+\t\t\t\tprocessData: wwwFormUrlEncoded,",
                "+\t\t\t\tcontentType: wwwFormUrlEncoded,",
                "+\t\t\t\t",
                " \t\t\t\tbeforeSend: function (jqXHR, settings) {",
                "-",
                " \t\t\t\t\t// collect the dynamic extra parameters",
                "@@ -833,199 +841,2 @@",
                "-\t\t/**",
                "-\t\t * This method serializes a form and sends it as POST body. If the form contains multipart content",
                "-\t\t * this function will post the form using an iframe instead of the regular ajax call",
                "-\t\t * and bridge the output - transparently making this work  as if it was an ajax call.",
                "-\t\t *",
                "-\t\t * @param {Object} context - the context for the ajax call (request attributes + steps)",
                "-\t\t */",
                "-\t\tsubmitMultipartForm: function (context) {",
                "-",
                "-\t\t\tvar attrs = context.attrs;",
                "-",
                "-\t\t\tvar form = Wicket.$(attrs.f);",
                "-\t\t\tif (!form) {",
                "-\t\t\t\tWicket.Log.error(\"Wicket.Ajax.Call.submitForm: Trying to submit form with id '\" + attrs.f + \"' that is not in document.\");",
                "-\t\t\t\treturn;",
                "-\t\t\t}",
                "-",
                "-\t\t\t// find root form",
                "-\t\t\tif (form.tagName.toLowerCase() !== \"form\") {",
                "-\t\t\t\tdo {",
                "-\t\t\t\t\tform = form.parentNode;",
                "-\t\t\t\t} while(form.tagName.toLowerCase() !== \"form\" && form !== document.body);",
                "-\t\t\t}",
                "-",
                "-\t\t\tif (form.tagName.toLowerCase() !== \"form\") {",
                "-\t\t\t\tWicket.Log.error(\"Cannot submit form with id \" + attrs.f + \" because there is no form element in the hierarchy.\");",
                "-\t\t\t\treturn false;",
                "-\t\t\t}",
                "-",
                "-\t\t\tvar submittingAttribute = 'data-wicket-submitting';",
                "-",
                "-\t\t\tif (form.onsubmit && !form.getAttribute(submittingAttribute)) {",
                "-\t\t\t\tform.setAttribute(submittingAttribute, submittingAttribute);",
                "-\t\t\t\tvar retValue = true;",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\tretValue = form.onsubmit();",
                "-\t\t\t\t} finally {",
                "-\t\t\t\t\tform.removeAttribute(submittingAttribute);",
                "-\t\t\t\t}",
                "-\t\t\t\tif (!retValue) {",
                "-\t\t\t\t\treturn;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-",
                "-\t\t\tvar originalFormAction = form.action;",
                "-\t\t\tvar originalFormTarget = form.target;",
                "-\t\t\tvar originalFormMethod = form.method;",
                "-\t\t\tvar originalFormEnctype = form.enctype;",
                "-\t\t\tvar originalFormEncoding = form.encoding;",
                "-",
                "-\t\t\tvar iframeName = \"wicket-submit-\" + (\"\" + Math.random()).substr(2);",
                "-",
                "-\t\t\tvar iframe = createIFrame(iframeName);",
                "-",
                "-\t\t\tdocument.body.appendChild(iframe);",
                "-",
                "-\t\t\t// reconfigure the form",
                "-\t\t\tform.target = iframe.name;",
                "-\t\t\tvar separator = (attrs.u.indexOf(\"?\")>-1 ? \"&\" : \"?\");",
                "-\t\t\tform.action = attrs.u + separator + \"wicket-ajax=true&wicket-ajax-baseurl=\" + Wicket.Form.encode(getAjaxBaseUrl());",
                "-",
                "-\t\t\t// add the static extra parameters",
                "-\t\t\tif (attrs.ep) {",
                "-\t\t\t\tvar extraParametersArray = this._asParamArray(attrs.ep);",
                "-\t\t\t\tif (extraParametersArray.length > 0) {",
                "-\t\t\t\t\tvar extraParametersQueryString = jQuery.param(extraParametersArray);",
                "-\t\t\t\t\tform.action = form.action + '&' + extraParametersQueryString;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-",
                "-\t\t\t// add the dynamic extra parameters",
                "-\t\t\tif (jQuery.isArray(attrs.dep)) {",
                "-\t\t\t\tvar dynamicExtraParameters = this._calculateDynamicParameters(attrs);",
                "-\t\t\t\tif (dynamicExtraParameters) {",
                "-\t\t\t\t\tform.action = form.action + '&' + dynamicExtraParameters;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tform.method = 'post';",
                "-\t\t\tform.enctype = \"multipart/form-data\";",
                "-\t\t\tform.encoding = \"multipart/form-data\";",
                "-",
                "-\t\t\t// create submitting button element",
                "-\t\t\tif (attrs.sc) {",
                "-\t\t\t\tvar $btn = jQuery(\"<input type='hidden' name='\" + attrs.sc + \"' id='\" + iframe.id + \"-btn' value='1'/>\");",
                "-\t\t\t\tform.appendChild($btn[0]);",
                "-\t\t\t}",
                "-",
                "-\t\t\tvar we = Wicket.Event;",
                "-\t\t\tvar topic = we.Topic;",
                "-",
                "-\t\t\tthis._executeHandlers(attrs.bsh, attrs, null, null);",
                "-\t\t\twe.publish(topic.AJAX_CALL_BEFORE_SEND, attrs, null, null);",
                "-",
                "-\t\t\tif (attrs.i) {",
                "-\t\t\t\t// show the indicator",
                "-\t\t\t\tWicket.DOM.showIncrementally(attrs.i);",
                "-\t\t\t}",
                "-",
                "-\t\t\t//submit the form into the iframe, response will be handled by the onload callback",
                "-\t\t\tform.submit();",
                "-",
                "-\t\t\tthis._executeHandlers(attrs.ah, attrs);",
                "-\t\t\twe.publish(topic.AJAX_CALL_AFTER, attrs);",
                "-",
                "-\t\t\t// a step to execute in both successful and erroneous completion",
                "-\t\t\tcontext.endStep = jQuery.proxy(function(notify) {",
                "-\t\t\t\t// remove the iframe and button elements",
                "-\t\t\t\tsetTimeout(function() {",
                "-\t\t\t\t\tjQuery('#'+iframe.id + '-btn').remove();",
                "-\t\t\t\t\tjQuery(iframe).remove();",
                "-\t\t\t\t}, 0);",
                "-",
                "-\t\t\t\tvar attrs = context.attrs;",
                "-\t\t\t\tif (attrs.i && context.isRedirecting !== true) {",
                "-\t\t\t\t\t// hide the indicator",
                "-\t\t\t\t\tWicket.DOM.hideIncrementally(attrs.i);",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\tthis._executeHandlers(attrs.coh, attrs, null, null);",
                "-\t\t\t\tWicket.Event.publish(Wicket.Event.Topic.AJAX_CALL_COMPLETE, attrs, null, null);",
                "-",
                "-\t\t\t\tthis.done(attrs);",
                "-\t\t\t\treturn FunctionsExecuter.DONE;",
                "-\t\t\t}, this);",
                "-",
                "-\t\t\t// an error handler that is used when the connection to the server fails for any reason",
                "-\t\t\tif (attrs.rt) {",
                "-\t\t\t\tcontext.errorHandle = setTimeout(jQuery.proxy(function () {",
                "-\t\t\t\t\tthis.failure(context, null, \"No XML response in the IFrame document\", \"Failure\");",
                "-",
                "-\t\t\t\t\tcontext.steps.push(context.endStep);",
                "-\t\t\t\t\tvar executer = new FunctionsExecuter(context.steps);",
                "-\t\t\t\t\texecuter.start();",
                "-\t\t\t\t}, this), attrs.rt);",
                "-\t\t\t} else {",
                "-\t\t\t\tWicket.Log.info(\"Submitting a multipart form without a timeout. \" +",
                "-\t\t\t\t\t\"Use AjaxRequestAttributes.setRequestTimeout(duration) if need to handle connection timeouts.\");",
                "-\t\t\t}",
                "-",
                "-\t\t\t// install handler to deal with the ajax response",
                "-\t\t\t// ... we add the onload event after form submit because chrome fires it prematurely",
                "-\t\t\twe.add(iframe, \"load.handleMultipartComplete\", jQuery.proxy(this.handleMultipartComplete, this), context);",
                "-",
                "-",
                "-\t\t\t// handled, restore state and return true",
                "-\t\t\tform.action = originalFormAction;",
                "-\t\t\tform.target = originalFormTarget;",
                "-\t\t\tform.method = originalFormMethod;",
                "-\t\t\tform.enctype = originalFormEnctype;",
                "-\t\t\tform.encoding = originalFormEncoding;",
                "-",
                "-\t\t\treturn true;",
                "-\t\t},",
                "-",
                "-\t\t/**",
                "-\t\t * Completes the multipart ajax handling started via handleMultipart()",
                "-\t\t * @param {jQuery.Event} event",
                "-\t\t */",
                "-\t\thandleMultipartComplete: function (event) {",
                "-",
                "-\t\t\tvar context = event.data,",
                "-\t\t\t\tiframe = event.target,",
                "-\t\t\t\tenvelope;",
                "-",
                "-\t\t\tif (!isUndef(context.errorHandle)) {",
                "-\t\t\t\tclearTimeout(context.errorHandle);",
                "-\t\t\t}",
                "-",
                "-\t\t\t// stop the event",
                "-\t\t\tevent.stopPropagation();",
                "-",
                "-\t\t\t// remove the event",
                "-\t\t\tjQuery(iframe).off(\"load.handleMultipartComplete\");",
                "-",
                "-\t\t\ttry {",
                "-\t\t\t\tenvelope = iframe.contentWindow.document;",
                "-\t\t\t} catch (e) {",
                "-\t\t\t\tWicket.Log.error(\"Cannot read Ajax response for multipart form submit: \" + e);",
                "-\t\t\t}",
                "-",
                "-\t\t\tif (isUndef(envelope)) {",
                "-\t\t\t\tthis.failure(context, null, \"No XML response in the IFrame document\", \"Failure\");",
                "-\t\t\t}",
                "-\t\t\telse {",
                "-\t\t\t\tif (envelope.XMLDocument) {",
                "-\t\t\t\t\tenvelope = envelope.XMLDocument;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\t// process the response",
                "-\t\t\t\tthis.loadedCallback(envelope, context);",
                "-\t\t\t}",
                "-",
                "-\t\t\tcontext.steps.push(context.endStep);",
                "-\t\t\tvar executer = new FunctionsExecuter(context.steps);",
                "-\t\t\texecuter.start();",
                "-\t\t},",
                "-",
                " \t\t// Processes the response",
                "@@ -1490,5 +1301,12 @@",
                " \t\t\t\tvar result = [];",
                "-\t\t\t\tif (input && input.type && !(input.type === 'image' || input.type === 'submit')) {",
                "+\t\t\t\tif (input && input.type) {",
                " \t\t\t\t\tvar $input = jQuery(input);",
                "-\t\t\t\t\tresult = $input.serializeArray();",
                "+\t\t\t\t\t",
                "+\t\t\t\t\tif (input.type === 'file') {",
                "+\t\t\t\t\t\tfor (var f = 0; f < input.files.length; f++) {",
                "+\t\t\t\t\t\t\tresult.push({\"name\" : input.name, \"value\" : input.files[f]});",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t} else if (!(input.type === 'image' || input.type === 'submit')) {",
                "+\t\t\t\t\t\tresult = $input.serializeArray();",
                "+\t\t\t\t\t}",
                " \t\t\t\t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6517": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: jquery",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6517",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "44fb374876210fc0545a5c02a83232ebc1500a38",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516145549,
            "hunks": 16,
            "message": "WICKET-6517 dep could be multipart too",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "index 801a47da7f..b2ad3a04e8 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "@@ -51,4 +51,3 @@",
                "-\tvar createIFrame,",
                "-\t\tgetAjaxBaseUrl,",
                "+\tvar getAjaxBaseUrl,",
                " \t\tisUndef,",
                "@@ -67,15 +66,2 @@",
                "-\t/**",
                "-\t * Creates an iframe that can be used to load data asynchronously or as a",
                "-\t * target for Ajax form submit.",
                "-\t *",
                "-\t * @param iframeName {String} the value of the iframe's name attribute",
                "-\t */",
                "-\tcreateIFrame = function (iframeName) {",
                "-\t\t// WICKET-6340 properly close tag for XHTML markup",
                "-\t\tvar $iframe = jQuery('<iframe name=\"'+iframeName+'\" id=\"'+iframeName+",
                "-\t\t\t'\" src=\"about:blank\" style=\"position: absolute; top: -9999px; left: -9999px;\"></iframe>');",
                "-\t\treturn $iframe[0];",
                "-\t};",
                "-",
                " \t/**",
                "@@ -555,3 +541,3 @@",
                " \t\t\t}",
                "-\t\t\treturn jQuery.param(params);",
                "+\t\t\treturn params;",
                " \t\t},",
                "@@ -585,2 +571,4 @@",
                " \t\t\t\t},",
                "+\t\t\t\t",
                "+\t\t\t\turl = attrs.u,",
                "@@ -660,2 +648,13 @@",
                " \t\t\t}",
                "+\t\t\t",
                "+\t\t\t// collect the dynamic extra parameters",
                "+\t\t\tif (jQuery.isArray(attrs.dep)) {",
                "+\t\t\t\tvar dynamicData = this._calculateDynamicParameters(attrs);",
                "+\t\t\t\tif (attrs.m.toLowerCase() === 'post') {",
                "+\t\t\t\t\tdata = data.concat(dynamicData);",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\tvar separator = url.indexOf('?') > -1 ? '&' : '?';",
                "+\t\t\t\t\turl = url + separator + jQuery.param(dynamicData);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "@@ -678,3 +677,3 @@",
                " \t\t\tvar jqXHR = jQuery.ajax({",
                "-\t\t\t\turl: attrs.u,",
                "+\t\t\t\turl: url,",
                " \t\t\t\ttype: attrs.m,",
                "@@ -685,18 +684,2 @@",
                " \t\t\t\tbeforeSend: function (jqXHR, settings) {",
                "-\t\t\t\t\t// collect the dynamic extra parameters",
                "-\t\t\t\t\tif (jQuery.isArray(attrs.dep)) {",
                "-\t\t\t\t\t\tvar queryString,",
                "-\t\t\t\t\t\t\tseparator;",
                "-",
                "-\t\t\t\t\t\tqueryString = this._calculateDynamicParameters(attrs);",
                "-\t\t\t\t\t\tif (settings.type.toLowerCase() === 'post') {",
                "-\t\t\t\t\t\t\tseparator = settings.data.length > 0 ? '&' : '';",
                "-\t\t\t\t\t\t\tsettings.data = settings.data + separator + queryString;",
                "-\t\t\t\t\t\t\tjqXHR.setRequestHeader(\"Content-Type\", settings.contentType);",
                "-\t\t\t\t\t\t} else {",
                "-\t\t\t\t\t\t\tseparator = settings.url.indexOf('?') > -1 ? '&' : '?';",
                "-\t\t\t\t\t\t\tsettings.url = settings.url + separator + queryString;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}",
                "-",
                " \t\t\t\t\tself._executeHandlers(attrs.bsh, attrs, jqXHR, settings);",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "index 9351d4c9d9..4642ae3c1c 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "@@ -1,2 +1,4 @@",
                " <?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                "+<html>",
                "+<body>",
                " <wicket:extend xmlns:wicket=\"http://wicket.apache.org\">",
                "@@ -15,2 +17,8 @@ Demonstrates Wicket's ability to transparently handle multipart forms via AJAX.<",
                "-</wicket:extend>",
                "\\ No newline at end of file",
                "+<div wicket:id=\"drop\" style=\"border: 1px dotted black; width:200px; height:200px;\">",
                "+\tDrop file here.",
                "+</div>",
                "+",
                "+</wicket:extend>",
                "+</body>",
                "+</html>",
                "\\ No newline at end of file",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "index e2eda2e1fa..ca6dc70541 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "@@ -18,2 +18,4 @@ package org.apache.wicket.examples.ajax.builtin;",
                "+import java.util.List;",
                "+",
                " import org.apache.wicket.Component;",
                "@@ -21,3 +23,5 @@ import org.apache.wicket.ajax.AjaxRequestTarget;",
                " import org.apache.wicket.ajax.markup.html.form.AjaxButton;",
                "+import org.apache.wicket.extensions.ajax.markup.html.AjaxFileUploadBehavior;",
                " import org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadProgressBar;",
                "+import org.apache.wicket.markup.html.WebMarkupContainer;",
                " import org.apache.wicket.markup.html.basic.Label;",
                "@@ -112,2 +116,24 @@ public class FileUploadPage extends BasePage",
                " \t\t});",
                "+\t\t",
                "+\t\tWebMarkupContainer drop = new WebMarkupContainer(\"drop\");",
                "+\t\tdrop.add(new AjaxFileUploadBehavior() {",
                "+\t\t\tprotected void onFileUpload(AjaxRequestTarget target, List<FileUpload> files) {",
                "+\t\t\t    ",
                "+\t\t\t\t// display uploaded info",
                "+\t\t\t\tif (files == null || files.isEmpty())",
                "+\t\t\t\t{",
                "+\t\t\t\t\tinfo(\"No file uploaded\");",
                "+\t\t\t\t}",
                "+\t\t\t\telse",
                "+\t\t\t\t{",
                "+\t\t\t\t    for (FileUpload file : files) {",
                "+\t\t\t\t    \tinfo(\"File-Name: \" + file.getClientFileName() + \" File-Size: \" +",
                "+\t\t\t\t    \t\tBytes.bytes(file.getSize()).toString());",
                "+\t\t\t\t    }",
                "+\t\t\t\t}",
                "+\t\t\t\t",
                "+\t\t\t\ttarget.add(feedback);",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\tadd(drop);",
                " \t}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileUploadBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileUploadBehavior.java",
                "new file mode 100644",
                "index 0000000000..3801c62d73",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileUploadBehavior.java",
                "@@ -0,0 +1,156 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.ajax.markup.html;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.commons.fileupload.FileItem;",
                "+import org.apache.commons.fileupload.FileUploadException;",
                "+import org.apache.wicket.Component;",
                "+import org.apache.wicket.ajax.AjaxEventBehavior;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;",
                "+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes.Method;",
                "+import org.apache.wicket.markup.head.IHeaderResponse;",
                "+import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                "+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                "+import org.apache.wicket.markup.html.form.upload.FileUpload;",
                "+import org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest;",
                "+import org.apache.wicket.protocol.http.servlet.ServletWebRequest;",
                "+import org.apache.wicket.request.resource.PackageResourceReference;",
                "+import org.apache.wicket.request.resource.ResourceReference;",
                "+import org.apache.wicket.util.lang.Args;",
                "+import org.apache.wicket.util.lang.Bytes;",
                "+",
                "+/**",
                "+ * Uploads files from a drop event.",
                "+ * ",
                "+ * @author svenmeier",
                "+ */",
                "+public class AjaxFileUploadBehavior extends AjaxEventBehavior",
                "+{",
                "+",
                "+\tprivate static final ResourceReference JS = new PackageResourceReference(AjaxFileUploadBehavior.class, \"datatransfer.js\");",
                "+",
                "+\t/**",
                "+\t *  Maximum size of all uploaded files in bytes in a request.",
                "+\t */",
                "+\tprivate Bytes maxSize;",
                "+",
                "+\t/**",
                "+\t *  Maximum size of file of upload in bytes (if there are more than one) in a request.",
                "+\t */",
                "+\tprivate Bytes fileMaxSize;",
                "+",
                "+\tprivate String parameterName = \"f\";",
                "+\t",
                "+\tpublic AjaxFileUploadBehavior()",
                "+\t{",
                "+\t\tsuper(\"drop\");",
                "+\t}",
                "+\t",
                "+\t@Override",
                "+\tpublic void renderHead(Component component, IHeaderResponse response)",
                "+\t{",
                "+\t\tsuper.renderHead(component, response);",
                "+\t\t",
                "+\t\tresponse.render(JavaScriptHeaderItem.forReference(JS));",
                "+\t\t",
                "+\t\t// default must be prevented for dragover event, otherwise browser will consume the dataTransfer",
                "+\t\tresponse.render(OnDomReadyHeaderItem.forScript(String.format(\"jQuery('#%s').on('dragover', function(e) { e.preventDefault(); });\", component.getMarkupId())));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)",
                "+\t{",
                "+\t\tsuper.updateAjaxAttributes(attributes);",
                "+",
                "+\t\tattributes.setMultipart(true);",
                "+\t\tattributes.setMethod(Method.POST);",
                "+\t\t// default must be prevented, otherwise browser will consume the dataTransfer",
                "+\t\tattributes.setPreventDefault(true);",
                "+",
                "+\t\tattributes.getDynamicExtraParameters().add(",
                "+\t\t\tString.format(\"return Wicket.DataTransfer.getFilesAsParamArray(attrs.event.originalEvent, '%s');\", parameterName)",
                "+\t\t);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void onEvent(AjaxRequestTarget target)",
                "+\t{",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\tServletWebRequest request = (ServletWebRequest)getComponent().getRequest();",
                "+\t\t\tfinal MultipartServletWebRequest multipartWebRequest = request.newMultipartWebRequest(",
                "+\t\t\t\tgetMaxSize(), getComponent().getPage().getId());",
                "+\t\t\tmultipartWebRequest.setFileMaxSize(getFileMaxSize());",
                "+\t\t\tmultipartWebRequest.parseFileParts();",
                "+",
                "+\t\t\t// TODO: Can't this be detected from header?",
                "+\t\t\tgetComponent().getRequestCycle().setRequest(multipartWebRequest);",
                "+\t\t\t",
                "+\t\t\tArrayList<FileUpload> fileUploads = new ArrayList<>();",
                "+",
                "+\t\t\t// Get the item for the path",
                "+\t\t\tfinal List<FileItem> fileItems = multipartWebRequest.getFile(parameterName);",
                "+",
                "+\t\t\tif (fileItems != null)",
                "+\t\t\t{",
                "+\t\t\t\tfor (FileItem item : fileItems)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tfileUploads.add(new FileUpload(item));",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\t",
                "+\t\t\tonFileUpload(target, fileUploads);",
                "+\t\t}",
                "+\t\tcatch (final FileUploadException fux)",
                "+\t\t{",
                "+\t\t\tonError(fux);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic Bytes getMaxSize()",
                "+\t{",
                "+\t\treturn maxSize;",
                "+\t}",
                "+",
                "+\tpublic void setMaxSize(Bytes maxSize)",
                "+\t{",
                "+\t\tArgs.notNull(maxSize, \"maxSize\");",
                "+\t\tthis.maxSize = maxSize;",
                "+\t}",
                "+",
                "+\tpublic Bytes getFileMaxSize()",
                "+\t{",
                "+\t\treturn fileMaxSize;",
                "+\t}",
                "+",
                "+\tpublic void setFileMaxSize(Bytes fileMaxSize)",
                "+\t{",
                "+\t\tthis.fileMaxSize = fileMaxSize;",
                "+\t}",
                "+\t",
                "+\tprotected void onFileUpload(AjaxRequestTarget target, List<FileUpload> files)",
                "+\t{",
                "+\t}",
                "+",
                "+\tprotected void onError(FileUploadException fux)",
                "+\t{",
                "+\t}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/datatransfer.js b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/datatransfer.js",
                "new file mode 100644",
                "index 0000000000..05ff68a2e1",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/datatransfer.js",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+;(function (undefined) {",
                "+\t'use strict';",
                "+",
                "+\tif (typeof(Wicket) === \"undefined\") {",
                "+\t\twindow.Wicket = {};",
                "+\t}",
                "+",
                "+\tif (Wicket.DataTransfer) {",
                "+\t\treturn;",
                "+\t}",
                "+",
                "+\tWicket.DataTransfer = {",
                "+\t\tgetFilesAsParamArray : function(ev, name) {",
                "+\t\t\tvar files = [];",
                "+\t\t\t\t",
                "+\t\t\tfunction pushFile(file) {",
                "+\t\t\t\tfiles.push({'name' : name, 'value' : file}); ",
                "+\t\t\t};",
                "+",
                "+\t\t\tvar dataTransfer = ev.dataTransfer; ",
                "+\t\t\tvar i;",
                "+\t\t\tif (dataTransfer.items) { ",
                "+\t\t\t  for (i = 0; i < dataTransfer.items.length; i++) { ",
                "+\t\t\t    if (dataTransfer.items[i].kind == 'file') { ",
                "+\t\t\t      pushFile(dataTransfer.items[i].getAsFile()); ",
                "+\t\t\t    } ",
                "+\t\t\t  } ",
                "+\t\t\t} else { ",
                "+\t\t\t  for (i = 0; i < dataTransfer.files.length; i++) { ",
                "+\t\t\t    pushFile(dataTransfer.files[i]); ",
                "+\t\t\t  } ",
                "+\t\t\t}",
                "+\t\t\t",
                "+\t\t\treturn files;",
                "+\t\t}",
                "+\t};",
                "+})();"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileUploadBehavior.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/datatransfer.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6517": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: jquery",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6517",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "831395a2c34645accd146bfa24abdcf943f83ab7",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510678157,
            "hunks": 59,
            "message": "WICKET-6490 Fixed missing license header and html format errors",
            "diff": [
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExampleHeader.java b/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExampleHeader.java",
                "index 0a40094cf5..71115e03c5 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExampleHeader.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExampleHeader.java",
                "@@ -18,5 +18,5 @@ package org.apache.wicket.examples;",
                "+import org.apache.wicket.devutils.debugbar.DebugBar;",
                " import org.apache.wicket.markup.html.image.Image;",
                " import org.apache.wicket.markup.html.panel.Panel;",
                "-import org.apache.wicket.devutils.debugbar.DebugBar;",
                " import org.apache.wicket.request.resource.PackageResourceReference;",
                "@@ -35,4 +35,2 @@ public final class WicketExampleHeader extends Panel",
                " \t *            id of the component",
                "-\t * @param exampleTitle",
                "-\t *            title of the example",
                " \t * @param page",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExamplePage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExamplePage.html",
                "index 595d84c12c..b07d0a3285 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExamplePage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/WicketExamplePage.html",
                "@@ -1,7 +1,6 @@",
                " <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<html>",
                "+<html xmlns:wicket=\"http://wicket.apache.org\">",
                " <head>",
                "-<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">",
                "-<meta charset=\"utf-8\">",
                "-<title>Home | Apache Wicket</title>",
                "+<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>",
                "+<meta charset=\"utf-8\"/>",
                " <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/prototype/Index.html b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/prototype/Index.html",
                "index f4e393f6e9..1e931bd85a 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/prototype/Index.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/prototype/Index.html",
                "@@ -3,2 +3,3 @@",
                " \t<script type=\"text/javascript\" src=\"prototype.js\"></script>",
                "+\t<title>Wicket Examples - Prototype.js / component render</title>",
                " </wicket:head>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/compref/Index.html b/wicket-examples/src/main/java/org/apache/wicket/examples/compref/Index.html",
                "index cd9808ba41..0d574e70cc 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/compref/Index.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/compref/Index.html",
                "@@ -2,5 +2,5 @@",
                " <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - component reference</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/customresourceloading/CustomLoadedTemplate.html b/wicket-examples/src/main/java/org/apache/wicket/examples/customresourceloading/CustomLoadedTemplate.html",
                "index 8cb5874ace..af4d41ddb9 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/customresourceloading/CustomLoadedTemplate.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/customresourceloading/CustomLoadedTemplate.html",
                "@@ -1,6 +1,6 @@",
                " <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<html>",
                "+<html xmlns:wicket=\"http://wicket.apache.org\">",
                " <head>",
                "-<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">",
                "-<meta charset=\"utf-8\">",
                "+<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>",
                "+<meta charset=\"utf-8\"/>",
                " <title>Home | Apache Wicket</title>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/encodings/Home.html b/wicket-examples/src/main/java/org/apache/wicket/examples/encodings/Home.html",
                "index 0fa2b65c1c..037d36c702 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/encodings/Home.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/encodings/Home.html",
                "@@ -3,5 +3,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                " \t<title>Wicket Examples - encodings</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInput.html b/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInput.html",
                "index 25cb9c78ab..f57d84930e 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInput.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInput.html",
                "@@ -1,5 +1,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - forminput</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.html b/wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.html",
                "index 865c6072d5..acb0dcdc69 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.html",
                "@@ -1,5 +1,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                " \t<title>Wicket Examples - guestbook</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/hangman/Home.html b/wicket-examples/src/main/java/org/apache/wicket/examples/hangman/Home.html",
                "index b66eead5f0..c72a11a612 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/hangman/Home.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/hangman/Home.html",
                "@@ -1,5 +1,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - hangman</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/helloworld/HelloWorld.html b/wicket-examples/src/main/java/org/apache/wicket/examples/helloworld/HelloWorld.html",
                "index 1c357f26a0..6fb7d10237 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/helloworld/HelloWorld.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/helloworld/HelloWorld.html",
                "@@ -2,5 +2,5 @@",
                " <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - helloworld</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.html b/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.html",
                "index 14337cd435..9000015049 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.html",
                "@@ -3,3 +3,3 @@",
                " <head>",
                "-<meta charset=\"UTF-8\">",
                "+<meta charset=\"UTF-8\"/>",
                " <title>Insert title here</title>",
                "@@ -7,3 +7,3 @@",
                " <body>",
                "-\t<wicket:panel>",
                "+\t<wicket:panel xmlns:wicket=\"http://wicket.apache.org\">",
                " \t\t<div class=\"header jumbotron\">",
                "@@ -12,3 +12,3 @@",
                " \t\t\t<div class=\"jumbotron-logo\">",
                "-\t\t\t\t<a wicket:id=\"headerhomelink\"><img wicket:id=\"headerimage\" alt=\"Apache Wicket\"></a>",
                "+\t\t\t\t<a wicket:id=\"headerhomelink\"><img wicket:id=\"headerimage\" alt=\"Apache Wicket\"/></a>",
                " \t\t\t</div>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.java b/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.java",
                "index 7c205f62ca..4395db0da4 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.java",
                "@@ -1 +1,17 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                " package org.apache.wicket.examples.homepage;",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.html b/wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.html",
                "index f99927e602..18ef0bea55 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.html",
                "@@ -1,5 +1,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - images</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/library/Home.html b/wicket-examples/src/main/java/org/apache/wicket/examples/library/Home.html",
                "index 5757e1dd83..52c97a770a 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/library/Home.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/library/Home.html",
                "@@ -1,2 +1,6 @@",
                "-<wicket:extend xmlns:wicket=\"http://wicket.apache.org\">",
                "+<html xmlns:wicket=\"http://wicket.apache.org\">",
                "+<wicket:head>",
                "+    <title>Wicket Examples - library</title>",
                "+</wicket:head>",
                "+<wicket:extend>",
                "   <table width = \"100%\">",
                "@@ -40,2 +44,3 @@",
                "-</wicket:extend>",
                "\\ No newline at end of file",
                "+</wicket:extend>",
                "+</html>",
                "\\ No newline at end of file",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.html b/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.html",
                "index 38f7e281a5..ff0814ea5c 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.html",
                "@@ -1,5 +1,6 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - library</title>",
                "-</head>",
                "+</wicket:head>",
                "+",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.java b/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.java",
                "index a87d721a4f..7a3543186a 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.java",
                "@@ -46,2 +46,3 @@ public final class SignIn extends WicketExamplePage",
                " \t{",
                "+\t\tsuper(parameters);",
                " \t\tadd(new SignInPanel(\"signInPanel\", false));",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/linkomatic/Home.html b/wicket-examples/src/main/java/org/apache/wicket/examples/linkomatic/Home.html",
                "index 3bfd11eb61..fef2c3b4cb 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/linkomatic/Home.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/linkomatic/Home.html",
                "@@ -1,5 +1,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - linkomatic</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/Home.html b/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/Home.html",
                "index d7672fef8e..d0cdf00f7b 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/Home.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/Home.html",
                "@@ -1,5 +1,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-\t<head>",
                "+\t<wicket:head>",
                " \t\t<title>Wicket Examples - niceurl</title>",
                "-\t</head>",
                "+\t</wicket:head>",
                " \t<body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/DataGridPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/DataGridPage.html",
                "index e6980699d7..ea99664aac 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/DataGridPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/DataGridPage.html",
                "@@ -1,2 +1,3 @@",
                "-<wicket:head>",
                "+<html xmlns:wicket=\"http://wicket.apache.org\">",
                "+<wicket:head xmlns:wicket=\"http://wicket.apache.org\">",
                " <style type=\"text/css\">",
                "@@ -15,2 +16,3 @@ table, th, td {",
                " </wicket:head>",
                "+<body>",
                " <wicket:extend xmlns:wicket=\"http://wicket.apache.org\">",
                "@@ -32,2 +34,4 @@ This is a demo of the DataGridView (builds on top of DataView). Provided feature",
                " </div>",
                "-</wicket:extend>",
                "\\ No newline at end of file",
                "+</wicket:extend>",
                "+</body>",
                "+</html>",
                "\\ No newline at end of file",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ExamplePage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ExamplePage.html",
                "index 863d0e488c..6e38c4f733 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ExamplePage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ExamplePage.html",
                "@@ -1,5 +1,5 @@",
                " <html xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - repeater views</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/GridViewPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/GridViewPage.html",
                "index a7a274b6b0..abcd397976 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/GridViewPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/GridViewPage.html",
                "@@ -1 +1,3 @@",
                "+<html xmlns:wicket=\"http://wicket.apache.org\">",
                "+<head>",
                " <wicket:head>",
                "@@ -15,3 +17,5 @@ table, th, td {",
                " </wicket:head>",
                "-<wicket:extend xmlns:wicket=\"http://wicket.apache.org\">",
                "+</head>",
                "+<body>",
                "+<wicket:extend>",
                "@@ -30 +34,3 @@ This page demonstrates the GridView component",
                " </wicket:extend>",
                "+</body>",
                "+</html>",
                "\\ No newline at end of file",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/template/Index.html b/wicket-examples/src/main/java/org/apache/wicket/examples/template/Index.html",
                "index 612a4cfa29..d01203dd6e 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/template/Index.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/template/Index.html",
                "@@ -2,5 +2,5 @@",
                " <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - template</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/demo.html b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/demo.html",
                "index 187e0200a9..76ae5e0bf7 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/demo.html",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/demo.html",
                "@@ -8,3 +8,3 @@",
                " \t<title>Font Face Demo</title>",
                "-\t<link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" charset=\"utf-8\">",
                "+\t<link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" charset=\"utf-8\"/>",
                " \t<style type=\"text/css\" media=\"screen\">",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/stylesheet.css b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/stylesheet.css",
                "index e004a3c6fa..f9ff29757c 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/stylesheet.css",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/stylesheet.css",
                "@@ -1,2 +1,17 @@",
                "-/* Generated by Font Squirrel (http://www.fontsquirrel.com) on May 6, 2013 09:10:34 AM America/New_York */",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                " @font-face {",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/demo.html b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/demo.html",
                "index a092d5239e..0a32baa971 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/demo.html",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/demo.html",
                "@@ -8,3 +8,3 @@",
                " \t<title>Font Face Demo</title>",
                "-\t<link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" charset=\"utf-8\">",
                "+\t<link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" charset=\"utf-8\"/>",
                " \t<style type=\"text/css\" media=\"screen\">",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/stylesheet.css b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/stylesheet.css",
                "index dac55d86b8..5cb79b4a86 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/stylesheet.css",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/stylesheet.css",
                "@@ -1,5 +1,17 @@",
                "-/* Generated by Font Squirrel (http://www.fontsquirrel.com) on May 6, 2013 09:32:51 AM America/New_York */",
                "-",
                "-",
                "-",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                " @font-face {",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/demo.html b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/demo.html",
                "index 0e5808609b..d734bca826 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/demo.html",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/demo.html",
                "@@ -8,3 +8,3 @@",
                " \t<title>Font Face Demo</title>",
                "-\t<link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" charset=\"utf-8\">",
                "+\t<link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" charset=\"utf-8\"/>",
                " \t<style type=\"text/css\" media=\"screen\">",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/stylesheet.css b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/stylesheet.css",
                "index 073cac6d2e..d39d4c696a 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/stylesheet.css",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/stylesheet.css",
                "@@ -1,5 +1,17 @@",
                "-/* Generated by Font Squirrel (http://www.fontsquirrel.com) on May 6, 2013 09:11:38 AM America/New_York */",
                "-",
                "-",
                "-",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                " @font-face {",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html b/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "index cda1c01cdb..a58b6c13f5 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "@@ -1,2 +1,2 @@",
                "-<wicket:extend>",
                "+<wicket:extend xmlns:wicket=\"http://wicket.apache.org\">",
                " \t<h1>&#160;&#160;&#160;&#160;Menu</h1>",
                "diff --git a/wicket-examples/src/main/resources/org/apache/wicket/examples/style.css b/wicket-examples/src/main/resources/org/apache/wicket/examples/style.css",
                "index 328f5bbddd..db8b754846 100644",
                "--- a/wicket-examples/src/main/resources/org/apache/wicket/examples/style.css",
                "+++ b/wicket-examples/src/main/resources/org/apache/wicket/examples/style.css",
                "@@ -1 +1,17 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                " @import url(./fonts/source-code-pro/stylesheet.css);",
                "diff --git a/wicket-examples/src/main/webapp/WEB-INF/templates/AlternativePageFromWebContext.html b/wicket-examples/src/main/webapp/WEB-INF/templates/AlternativePageFromWebContext.html",
                "index fb80bc9663..4664b03b55 100644",
                "--- a/wicket-examples/src/main/webapp/WEB-INF/templates/AlternativePageFromWebContext.html",
                "+++ b/wicket-examples/src/main/webapp/WEB-INF/templates/AlternativePageFromWebContext.html",
                "@@ -2,5 +2,5 @@",
                " <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - custom resource loading</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>",
                "diff --git a/wicket-examples/src/main/webapp/WEB-INF/templates/org/apache/wicket/examples/customresourceloading/PageFromWebContext.html b/wicket-examples/src/main/webapp/WEB-INF/templates/org/apache/wicket/examples/customresourceloading/PageFromWebContext.html",
                "index 0ac0118884..d3d61e2665 100644",
                "--- a/wicket-examples/src/main/webapp/WEB-INF/templates/org/apache/wicket/examples/customresourceloading/PageFromWebContext.html",
                "+++ b/wicket-examples/src/main/webapp/WEB-INF/templates/org/apache/wicket/examples/customresourceloading/PageFromWebContext.html",
                "@@ -2,5 +2,5 @@",
                " <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "-<head>",
                "+<wicket:head>",
                "     <title>Wicket Examples - custom resource loading</title>",
                "-</head>",
                "+</wicket:head>",
                " <body>"
            ],
            "changed_files": [
                "wicket-examples/src/main/java/org/apache/wicket/examples/WicketExampleHeader.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/WicketExamplePage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/prototype/Index.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/compref/Index.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/customresourceloading/CustomLoadedTemplate.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/encodings/Home.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInput.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/hangman/Home.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/helloworld/HelloWorld.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/homepage/HomePageHeader.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/library/Home.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/library/SignIn.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/linkomatic/Home.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/Home.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/repeater/DataGridPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ExamplePage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/repeater/GridViewPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/template/Index.html",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/demo.html",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/league-gothic/stylesheet.css",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/demo.html",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-code-pro/stylesheet.css",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/demo.html",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/fonts/source-sans-pro/stylesheet.css",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/homepage/HomePage.html",
                "wicket-examples/src/main/resources/org/apache/wicket/examples/style.css",
                "wicket-examples/src/main/webapp/WEB-INF/templates/AlternativePageFromWebContext.html",
                "wicket-examples/src/main/webapp/WEB-INF/templates/org/apache/wicket/examples/customresourceloading/PageFromWebContext.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6490": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6490",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4f3de6cc38b91de9c06f4af6d854aeb6de9484df",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511423257,
            "hunks": 2,
            "message": "Revert \"INFRA-15525 Wicket examples do not update when there is a new Docker image\" This reverts commit 6654faa8fd689c05e7bf5ce41fca1697e6ecc47a.",
            "diff": [
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 3aaccd6e26..8c66e6ad90 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -234,21 +234,2 @@",
                " \t\t\t\t<plugins>",
                "-\t\t\t\t\t<plugin>",
                "-\t\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>",
                "-\t\t\t\t\t\t<artifactId>buildnumber-maven-plugin</artifactId>",
                "-\t\t\t\t\t\t<version>1.4</version>",
                "-\t\t\t\t\t\t<configuration>",
                "-\t\t\t\t\t\t\t<format>{0,date,yyyyMMddHHmmss}</format>",
                "-\t\t\t\t\t\t\t<items>",
                "-\t\t\t\t\t\t\t\t<item>timestamp</item>",
                "-\t\t\t\t\t\t\t</items>",
                "-\t\t\t\t\t\t</configuration>",
                "-\t\t\t\t\t\t<executions>",
                "-\t\t\t\t\t\t\t<execution>",
                "-\t\t\t\t\t\t\t\t<phase>validate</phase>",
                "-\t\t\t\t\t\t\t\t<goals>",
                "-\t\t\t\t\t\t\t\t\t<goal>create</goal>",
                "-\t\t\t\t\t\t\t\t</goals>",
                "-\t\t\t\t\t\t\t</execution>",
                "-\t\t\t\t\t\t</executions>",
                "-\t\t\t\t\t</plugin>",
                " \t\t\t\t\t<plugin>",
                "@@ -272,4 +253,4 @@",
                " \t\t\t\t\t\t<configuration>",
                "-\t\t\t\t\t\t\t<repository>apache-docker-wicket-docker.bintray.io/wicket-examples-6</repository>",
                "-\t\t\t\t\t\t\t<tag>${buildNumber}</tag>",
                "+\t\t\t\t\t\t\t<repository>apache-docker-wicket-docker.bintray.io/wicket-examples</repository>",
                "+\t\t\t\t\t\t\t<tag>LATEST-6</tag>",
                " \t\t\t\t\t\t</configuration>"
            ],
            "changed_files": [
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "INFRA-15525": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "57c7126e94beb652a7b687a6385d5cd0d38f2bcc"
                ],
                [
                    "no-tag",
                    "5757290ad4ba2afddddf33a419513c41c64a1efd"
                ]
            ],
            "tags": [
                "rel/wicket-6.29.0",
                "rel/wicket-6.30.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: INFRA-15525",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e5ddaaaf5978ef5f68117902c44bbfffab3eb4b9",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511788120,
            "hunks": 2,
            "message": "[WICKET-6501] storeSettings.isAsynchronous() is honored",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/DefaultPageManagerProvider.java b/wicket-core/src/main/java/org/apache/wicket/DefaultPageManagerProvider.java",
                "index a6e7591d89..deb4ade2fe 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/DefaultPageManagerProvider.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/DefaultPageManagerProvider.java",
                "@@ -41,4 +41,4 @@ public class DefaultPageManagerProvider implements IPageManagerProvider",
                " \t/**",
                "-\t * Construct.",
                "-\t * ",
                "+\t * Constructor.",
                "+\t *",
                " \t * @param application",
                "@@ -57,3 +57,3 @@ public class DefaultPageManagerProvider implements IPageManagerProvider",
                "-\t\tif (dataStore.canBeAsynchronous())",
                "+\t\tif (dataStore.canBeAsynchronous() && storeSettings.isAsynchronous())",
                " \t\t{"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/DefaultPageManagerProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6501": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "caddaed006efcc30339cafd2482a29d7ec5bd38c"
                ],
                [
                    "no-tag",
                    "383c40f2557e78ac852ca4ea4300901281902435"
                ]
            ],
            "tags": [
                "rel/wicket-6.29.0",
                "rel/wicket-6.30.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6501",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "884018dcfd11408767e4a22b9f9d18cf0f0ede1e",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508340486,
            "hunks": 4,
            "message": "WICKET-6481 Added JavaDoc to avoid mount paths starting with reserved URL segments",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/IMapperContext.java b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/IMapperContext.java",
                "index 52366d352e..5c6e91f519 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/IMapperContext.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/IMapperContext.java",
                "@@ -23,3 +23,5 @@ import org.apache.wicket.request.resource.ResourceReferenceRegistry;",
                " /**",
                "- * Utility interface for providing and creating new page instances.",
                "+ * Utility interface for providing and creating new page instances. This interface is used also to ",
                "+ * define which segments are reserved for internal use (see methods {@link #getNamespace()}, {@link #getPageIdentifier()},",
                "+ * {@link #getBookmarkableIdentifier()} and {@link #getResourceIdentifier()}).",
                "  *",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java b/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "index 5ed6fb07a2..97b657b344 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "@@ -330,2 +330,6 @@ public abstract class WebApplication extends Application",
                " \t * ",
                "+\t * <p>",
                "+\t * NOTE: mount path must not start with reserved URL segments! See {@link IMapperContext} to know",
                "+\t * which segments are reserved for internal use.",
                "+\t * </p>",
                " \t * @param <T>",
                "@@ -347,3 +351,7 @@ public abstract class WebApplication extends Application",
                " \t * Mounts a shared resource to the given path.",
                "-\t * ",
                "+\t *",
                "+\t * <p>",
                "+\t * NOTE: mount path must not start with reserved URL segments! See {@link IMapperContext} to know",
                "+\t * which segments are reserved for internal use.",
                "+\t * </p> ",
                " \t * @param path",
                "@@ -366,3 +374,7 @@ public abstract class WebApplication extends Application",
                " \t * Mounts mounts all bookmarkable pages in a the pageClass's package to the given path.",
                "-\t * ",
                "+\t *",
                "+\t * <p>",
                "+\t * NOTE: mount path must not start with reserved URL segments! See {@link IMapperContext} to know",
                "+\t * which segments are reserved for internal use.",
                "+\t * </p> ",
                " \t * @param <P>"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/request/mapper/IMapperContext.java",
                "wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6481": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "49d398333a1a256078ceecac5a58d768674e77de"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6481",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e4ee449e54df86664e132c60892fffcc7aa0fac5",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514672972,
            "hunks": 1,
            "message": "WICKET-6477 Component.getDefaultModelObject() wraps in RuntimeException instead of WicketRuntimeException",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Component.java b/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "index aef02939e3..7240a13438 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "@@ -1648,3 +1648,3 @@ public abstract class Component",
                " \t\t\t\t// wrap the exception so that it brings info about the component",
                "-\t\t\t\tRuntimeException rex = new RuntimeException(",
                "+\t\t\t\tWicketRuntimeException rex = new WicketRuntimeException(",
                " \t\t\t\t\t\"An error occurred while getting the model object for Component: \" +"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/Component.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6477": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2acd52de099330a73f2f2b7445822798c0abda6c"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6477",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a6b48110f130cb3074b78f8add29b59d4a0ecc7f",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517316689,
            "hunks": 7,
            "message": "WICKET-6522: move ThreadLocal to a static field to prevent leaks",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java b/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
                "index 97d5b5982a..88c164586f 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
                "@@ -45,6 +45,25 @@ public class PageStoreManager extends AbstractPageManager",
                "-\tprivate final IPageStore pageStore;",
                "+\t/**",
                "+\t * A flag indicating whether this session entry is being re-set in the Session.",
                "+\t * <p>",
                "+\t * Web containers intercept",
                "+\t * {@link javax.servlet.http.HttpSession#setAttribute(String, Object)} to detect changes and",
                "+\t * replicate the session. If the attribute has been already bound in the session then",
                "+\t * {@link #valueUnbound(HttpSessionBindingEvent)} might get called - this flag",
                "+\t * helps us to ignore the invocation in that case.",
                "+\t * ",
                "+\t * @see #valueUnbound(HttpSessionBindingEvent)",
                "+\t */",
                "+\tprivate static final ThreadLocal<Boolean> STORING_TOUCHED_PAGES = new ThreadLocal<Boolean>()",
                "+\t{",
                "+\t\tprotected Boolean initialValue()",
                "+\t\t{",
                "+\t\t\treturn Boolean.FALSE;",
                "+\t\t};",
                "+\t};",
                "+\tprivate final IPageStore pageStore;",
                "+\t",
                " \tprivate final String applicationName;",
                "-",
                "+\t",
                " \t/**",
                "@@ -95,20 +114,2 @@ public class PageStoreManager extends AbstractPageManager",
                "-\t\t/**",
                "-\t\t * A flag indicating whether this session entry is being re-set in the Session.",
                "-\t\t * <p>",
                "-\t\t * Web containers intercept",
                "-\t\t * {@link javax.servlet.http.HttpSession#setAttribute(String, Object)} to detect changes and",
                "-\t\t * replicate the session. If the attribute has been already bound in the session then",
                "-\t\t * {@link #valueUnbound(HttpSessionBindingEvent)} might get called - this flag",
                "-\t\t * helps us to ignore the invocation in that case.",
                "-\t\t * ",
                "-\t\t * @see #valueUnbound(HttpSessionBindingEvent)",
                "-\t\t */",
                "-\t\tprivate transient ThreadLocal<Boolean> storingTouchedPages = new ThreadLocal<Boolean>()",
                "-\t\t{",
                "-\t\t\tprotected Boolean initialValue()",
                "-\t\t\t{",
                "-\t\t\t\treturn Boolean.FALSE;",
                "-\t\t\t};",
                "-\t\t};",
                "@@ -315,10 +316,2 @@ public class PageStoreManager extends AbstractPageManager",
                "-\t\t\tstoringTouchedPages = new ThreadLocal<Boolean>()",
                "-\t\t\t{",
                "-\t\t\t\tprotected Boolean initialValue()",
                "-\t\t\t\t{",
                "-\t\t\t\t\treturn Boolean.FALSE;",
                "-\t\t\t\t};",
                "-\t\t\t};",
                "-",
                " \t\t\tafterReadObject = new ArrayList<>();",
                "@@ -353,3 +346,3 @@ public class PageStoreManager extends AbstractPageManager",
                " \t\t{",
                "-\t\t\tif (storingTouchedPages == null || storingTouchedPages.get())",
                "+\t\t\tif (STORING_TOUCHED_PAGES.get())",
                " \t\t\t{",
                "@@ -470,3 +463,3 @@ public class PageStoreManager extends AbstractPageManager",
                "-\t\t\t\tentry.storingTouchedPages.set(true);",
                "+\t\t\t\tSTORING_TOUCHED_PAGES.set(true);",
                " \t\t\t\ttry",
                "@@ -477,3 +470,3 @@ public class PageStoreManager extends AbstractPageManager",
                " \t\t\t\t{",
                "-\t\t\t\t\tentry.storingTouchedPages.set(false);",
                "+\t\t\t\t\tSTORING_TOUCHED_PAGES.remove();",
                " \t\t\t\t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6522": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "242d4e9e1c32b2cb5c03a657ecafdd50dc9f6c30"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6522",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "29d2775c05e8084ff3a01c2f2da27efcaa6d4b03",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516350155,
            "hunks": 4,
            "message": "WICKET-6517 moved behavior out of markup package This closes #256",
            "diff": [
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "index 2ed083d2e4..18d2bfba6b 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "@@ -1,3 +1,3 @@",
                " <?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                "-<html>",
                "+<html xmlns:wicket=\"http://wicket.apache.org\">",
                " <head>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "index f7a473c21d..598efee7c4 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "@@ -24,3 +24,3 @@ import org.apache.wicket.ajax.AjaxRequestTarget;",
                " import org.apache.wicket.ajax.markup.html.form.AjaxButton;",
                "-import org.apache.wicket.extensions.ajax.markup.html.AjaxFileDropBehavior;",
                "+import org.apache.wicket.extensions.ajax.AjaxFileDropBehavior;",
                " import org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadProgressBar;",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxFileDropBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxFileDropBehavior.java",
                "new file mode 100644",
                "index 0000000000..0501610c74",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxFileDropBehavior.java",
                "@@ -0,0 +1,211 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.ajax;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.commons.fileupload.FileItem;",
                "+import org.apache.commons.fileupload.FileUploadException;",
                "+import org.apache.wicket.Component;",
                "+import org.apache.wicket.WicketRuntimeException;",
                "+import org.apache.wicket.ajax.AjaxEventBehavior;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.attributes.AjaxCallListener;",
                "+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;",
                "+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes.Method;",
                "+import org.apache.wicket.core.util.string.CssUtils;",
                "+import org.apache.wicket.markup.head.IHeaderResponse;",
                "+import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                "+import org.apache.wicket.markup.html.form.upload.FileUpload;",
                "+import org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest;",
                "+import org.apache.wicket.protocol.http.servlet.ServletWebRequest;",
                "+import org.apache.wicket.request.resource.PackageResourceReference;",
                "+import org.apache.wicket.request.resource.ResourceReference;",
                "+import org.apache.wicket.util.lang.Args;",
                "+import org.apache.wicket.util.lang.Bytes;",
                "+",
                "+/**",
                "+ * Uploads files from a drop event.",
                "+ *",
                "+ * @author Andrew Kondratev",
                "+ * @author svenmeier",
                "+ */",
                "+public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "+{",
                "+",
                "+\tpublic static final String DRAG_OVER_CLASS_KEY = CssUtils.key(AjaxFileDropBehavior.class, \"dragover\");",
                "+",
                "+\tprivate static final ResourceReference JS = new PackageResourceReference(",
                "+\t\tAjaxFileDropBehavior.class, \"wicket-ajaxupload.js\");",
                "+",
                "+\t/**",
                "+\t * Maximum size of all uploaded files in bytes in a request.",
                "+\t */",
                "+\tprivate Bytes maxSize;",
                "+",
                "+\t/**",
                "+\t * Maximum size of file of upload in bytes (if there are more than one) in a request.",
                "+\t */",
                "+\tprivate Bytes fileMaxSize;",
                "+",
                "+\tprivate String parameterName = \"f\";",
                "+",
                "+\t/**",
                "+\t * Listen for 'dragover' and 'drop' events and prevent them, only 'drop' will initiate",
                "+\t * an Ajax request.",
                "+\t */",
                "+\tpublic AjaxFileDropBehavior()",
                "+\t{",
                "+\t\tsuper(\"dragenter dragover dragleave drop\");",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void renderHead(Component component, IHeaderResponse response)",
                "+\t{",
                "+\t\tsuper.renderHead(component, response);",
                "+",
                "+\t\tresponse.render(JavaScriptHeaderItem.forReference(JS));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)",
                "+\t{",
                "+\t\tsuper.updateAjaxAttributes(attributes);",
                "+",
                "+\t\tattributes.setMultipart(true);",
                "+\t\tattributes.setMethod(Method.POST);",
                "+\t\t// default must be prevented, otherwise browser will consume the dataTransfer",
                "+\t\tattributes.setPreventDefault(true);",
                "+",
                "+\t\tattributes.getAjaxCallListeners().add(new AjaxCallListener() {",
                "+\t\t\t@Override",
                "+\t\t\tpublic CharSequence getPrecondition(Component component)",
                "+\t\t\t{",
                "+\t\t\t\tString css = getComponent().getString(DRAG_OVER_CLASS_KEY);",
                "+\t\t\t\t",
                "+\t\t\t\treturn String.format(\"jQuery('#' + attrs.c).toggleClass('%s', attrs.event.type === 'dragover'); return (attrs.event.type === 'drop');\", css);",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\t",
                "+\t\tattributes.getDynamicExtraParameters()",
                "+\t\t\t.add(String.format(",
                "+\t\t\t\t\"return Wicket.DataTransfer.getFilesAsParamArray(attrs.event.originalEvent, '%s');\",",
                "+\t\t\t\tparameterName));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void onEvent(AjaxRequestTarget target)",
                "+\t{",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\tServletWebRequest request = (ServletWebRequest)getComponent().getRequest();",
                "+\t\t\tfinal MultipartServletWebRequest multipartWebRequest = request",
                "+\t\t\t\t.newMultipartWebRequest(getMaxSize(), getComponent().getPage().getId());",
                "+\t\t\tmultipartWebRequest.setFileMaxSize(getFileMaxSize());",
                "+\t\t\tmultipartWebRequest.parseFileParts();",
                "+",
                "+\t\t\t// TODO: Can't this be detected from header?",
                "+\t\t\tgetComponent().getRequestCycle().setRequest(multipartWebRequest);",
                "+",
                "+\t\t\tArrayList<FileUpload> fileUploads = new ArrayList<>();",
                "+",
                "+\t\t\t// Get the item for the path",
                "+\t\t\tfinal List<FileItem> fileItems = multipartWebRequest.getFile(parameterName);",
                "+",
                "+\t\t\tif (fileItems != null)",
                "+\t\t\t{",
                "+\t\t\t\tfor (FileItem item : fileItems)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tfileUploads.add(new FileUpload(item));",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\tonFileUpload(target, fileUploads);",
                "+\t\t}",
                "+\t\tcatch (final FileUploadException fux)",
                "+\t\t{",
                "+\t\t\tonError(target, fux);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic Bytes getMaxSize()",
                "+\t{",
                "+\t\tif (maxSize == null)",
                "+\t\t{",
                "+\t\t\tmaxSize = getComponent().getApplication().getApplicationSettings()",
                "+\t\t\t\t.getDefaultMaximumUploadSize();",
                "+\t\t}",
                "+\t\treturn maxSize;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the maximum upload size.",
                "+\t * ",
                "+\t * @param maxSize maximum size, must not be null",
                "+\t */",
                "+\tpublic void setMaxSize(Bytes maxSize)",
                "+\t{",
                "+\t\tArgs.notNull(maxSize, \"maxSize\");",
                "+\t\tthis.maxSize = maxSize;",
                "+\t}",
                "+",
                "+\tpublic Bytes getFileMaxSize()",
                "+\t{",
                "+\t\treturn fileMaxSize;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set an optional maximum size per file.",
                "+\t * ",
                "+\t * @param fileMaxSize maximum size for each uploaded file",
                "+\t */",
                "+\tpublic void setFileMaxSize(Bytes fileMaxSize)",
                "+\t{",
                "+\t\tthis.fileMaxSize = fileMaxSize;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Hook method called after a file was uploaded.",
                "+\t * <p>",
                "+\t * Note: {@link #onError(AjaxRequestTarget, FileUploadException)} is called instead when",
                "+\t * uploading failed",
                "+\t * ",
                "+\t * @param target",
                "+\t *            the current request handler",
                "+\t * @param files",
                "+\t *            uploaded files",
                "+\t */",
                "+\tprotected void onFileUpload(AjaxRequestTarget target, List<FileUpload> files)",
                "+\t{",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Hook method called to handle any error during uploading of the file.",
                "+\t * <p>",
                "+\t * Default implementation re-throws the exception. ",
                "+\t *",
                "+\t * @param target",
                "+\t *            the current request handler",
                "+\t * @param e",
                "+\t *            the error that occurred",
                "+\t */",
                "+\tprotected void onError(AjaxRequestTarget target, FileUploadException fux)",
                "+\t{",
                "+\t\tthrow new WicketRuntimeException(fux);",
                "+\t}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxupload.js b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxupload.js",
                "new file mode 100644",
                "index 0000000000..05ff68a2e1",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxupload.js",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+;(function (undefined) {",
                "+\t'use strict';",
                "+",
                "+\tif (typeof(Wicket) === \"undefined\") {",
                "+\t\twindow.Wicket = {};",
                "+\t}",
                "+",
                "+\tif (Wicket.DataTransfer) {",
                "+\t\treturn;",
                "+\t}",
                "+",
                "+\tWicket.DataTransfer = {",
                "+\t\tgetFilesAsParamArray : function(ev, name) {",
                "+\t\t\tvar files = [];",
                "+\t\t\t\t",
                "+\t\t\tfunction pushFile(file) {",
                "+\t\t\t\tfiles.push({'name' : name, 'value' : file}); ",
                "+\t\t\t};",
                "+",
                "+\t\t\tvar dataTransfer = ev.dataTransfer; ",
                "+\t\t\tvar i;",
                "+\t\t\tif (dataTransfer.items) { ",
                "+\t\t\t  for (i = 0; i < dataTransfer.items.length; i++) { ",
                "+\t\t\t    if (dataTransfer.items[i].kind == 'file') { ",
                "+\t\t\t      pushFile(dataTransfer.items[i].getAsFile()); ",
                "+\t\t\t    } ",
                "+\t\t\t  } ",
                "+\t\t\t} else { ",
                "+\t\t\t  for (i = 0; i < dataTransfer.files.length; i++) { ",
                "+\t\t\t    pushFile(dataTransfer.files[i]); ",
                "+\t\t\t  } ",
                "+\t\t\t}",
                "+\t\t\t",
                "+\t\t\treturn files;",
                "+\t\t}",
                "+\t};",
                "+})();"
            ],
            "changed_files": [
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxFileDropBehavior.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxupload.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6517": ""
            },
            "ghissue_refs": {
                "256": "Allow multipart submission of non modified FormData with Wicket.Ajax #255"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6517",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 256",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a03ee37d17b2e07f3d74268a4d874ac92cf69925",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517699423,
            "hunks": 6,
            "message": "WICKET-6526 check HTTP method for all form submissions this moves the HTTP method check from onFormSubmitted to onFormSubmitted(submitter) so that every form submission performs this check, instead of only non-ajax requests. also adds tests that verify this.",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "index 376d954e49..c0108463a0 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "@@ -687,22 +687,2 @@ public class Form<T> extends WebMarkupContainer",
                " \t{",
                "-\t\t// check methods match",
                "-\t\tif (getRequest().getContainerRequest() instanceof HttpServletRequest)",
                "-\t\t{",
                "-\t\t\tString desiredMethod = getMethod();",
                "-\t\t\tString actualMethod = ((HttpServletRequest)getRequest().getContainerRequest()).getMethod();",
                "-\t\t\tif (!actualMethod.equalsIgnoreCase(desiredMethod))",
                "-\t\t\t{",
                "-\t\t\t\tMethodMismatchResponse response = onMethodMismatch();",
                "-\t\t\t\tswitch (response)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tcase ABORT :",
                "-\t\t\t\t\t\treturn;",
                "-\t\t\t\t\tcase CONTINUE :",
                "-\t\t\t\t\t\tbreak;",
                "-\t\t\t\t\tdefault :",
                "-\t\t\t\t\t\tthrow new IllegalStateException(\"Invalid \" +",
                "-\t\t\t\t\t\t\tMethodMismatchResponse.class.getName() + \" value: \" + response);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                " \t\tonFormSubmitted(null);",
                "@@ -736,2 +716,23 @@ public class Form<T> extends WebMarkupContainer",
                " \t{",
                "+\t\t// check methods match",
                "+\t\tif (getRequest().getContainerRequest() instanceof HttpServletRequest)",
                "+\t\t{",
                "+\t\t\tString desiredMethod = getMethod();",
                "+\t\t\tString actualMethod = ((HttpServletRequest)getRequest().getContainerRequest()).getMethod();",
                "+\t\t\tif (!actualMethod.equalsIgnoreCase(desiredMethod))",
                "+\t\t\t{",
                "+\t\t\t\tMethodMismatchResponse response = onMethodMismatch();",
                "+\t\t\t\tswitch (response)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tcase ABORT :",
                "+\t\t\t\t\t\treturn;",
                "+\t\t\t\t\tcase CONTINUE :",
                "+\t\t\t\t\t\tbreak;",
                "+\t\t\t\t\tdefault :",
                "+\t\t\t\t\t\tthrow new IllegalStateException(\"Invalid \" +",
                "+\t\t\t\t\t\t\t\tMethodMismatchResponse.class.getName() + \" value: \" + response);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                " \t\tmarkFormsSubmitted(submitter);",
                "@@ -1345,3 +1346,3 @@ public class Form<T> extends WebMarkupContainer",
                " \t\t\t\t\t});",
                "-\t\t\t",
                "+",
                " \t\t\tif (Boolean.TRUE.equals(anyEmbeddedMultipart)) {",
                "@@ -1625,4 +1626,4 @@ public class Form<T> extends WebMarkupContainer",
                " \t/**",
                "-\t * Should URL query parameters be encoded in hidden fields. ",
                "-\t *  ",
                "+\t * Should URL query parameters be encoded in hidden fields.",
                "+\t *",
                " \t * @return true if form's method is 'get'",
                "@@ -1673,3 +1674,3 @@ public class Form<T> extends WebMarkupContainer",
                " \t\t\twriteParamsAsHiddenFields(params, buffer);",
                "-\t\t\t",
                "+",
                " \t\t\tbuffer.append(\"</div>\");",
                "@@ -1748,3 +1749,3 @@ public class Form<T> extends WebMarkupContainer",
                " \t}",
                "-\t",
                "+",
                " \t@Override"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6526": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "83ff231a10bd079f569c75253c4917ef69dcb0b9"
                ],
                [
                    "no-tag",
                    "f850e13b6767debf23fd0bc6208187daf0a5d481"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6526",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5324ae3facba7dd3d94abaaf48ef134a33048e0d",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514672744,
            "hunks": 3,
            "message": "WICKET-6441 MockHttpSession and MockSessionStore don't call onInvalidate() on invalidate() (cherry picked from commit e6e0f0ef908dc99a924f6b1358ec5b7f3791e1f3)",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpSession.java b/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpSession.java",
                "index dc92f1daf1..28aa536715 100755",
                "--- a/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpSession.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpSession.java",
                "@@ -26,2 +26,4 @@ import javax.servlet.http.HttpSession;",
                "+import org.apache.wicket.Session;",
                "+import org.apache.wicket.util.tester.BaseWicketTester;",
                " import org.apache.wicket.util.value.ValueMap;",
                "@@ -188,2 +190,7 @@ public class MockHttpSession implements HttpSession, Serializable",
                " \t{",
                "+\t\tSession session = (Session) attributes.get(\"wicket:\" + BaseWicketTester.TestFilterConfig.class.getName() + \":session\");",
                "+\t\tif (session != null)",
                "+\t\t{",
                "+\t\t\tsession.onInvalidate();",
                "+\t\t}",
                " \t\tattributes.clear();",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java b/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java",
                "index 696415c6e0..7a0863a39d 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java",
                "@@ -2942,6 +2942,3 @@ public class BaseWicketTester",
                "-\t/**",
                "-\t *",
                "-\t */",
                "-\tprivate class TestFilterConfig implements FilterConfig",
                "+\tpublic class TestFilterConfig implements FilterConfig",
                " \t{"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpSession.java",
                "wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6441": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e6e0f0ef908dc99a924f6b1358ec5b7f3791e1f3"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6441",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cbf458380afb1a71d97ee2b77196ff85ea258c37",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514668941,
            "hunks": 12,
            "message": "WICKET-6504 Use a serializable model for FileSystemResource's path",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java b/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java",
                "index a940b1c80c..bc5c859b31 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java",
                "@@ -22,2 +22,3 @@ import java.nio.file.Files;",
                " import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                " import java.nio.file.attribute.BasicFileAttributes;",
                "@@ -26,2 +27,3 @@ import org.apache.wicket.Application;",
                " import org.apache.wicket.WicketRuntimeException;",
                "+import org.apache.wicket.model.LoadableDetachableModel;",
                " import org.apache.wicket.request.cycle.RequestCycle;",
                "@@ -29,2 +31,3 @@ import org.apache.wicket.request.resource.AbstractResource;",
                " import org.apache.wicket.request.resource.PartWriterCallback;",
                "+import org.apache.wicket.util.lang.Args;",
                "@@ -42,3 +45,3 @@ public class FileSystemResource extends AbstractResource",
                "-\tprivate Path path;",
                "+\tprivate LoadableDetachableModel<Path> path;",
                "@@ -52,3 +55,3 @@ public class FileSystemResource extends AbstractResource",
                " \t{",
                "-\t\tthis.path = path;",
                "+\t\tthis.path = new PathModel(path);",
                " \t}",
                "@@ -70,3 +73,19 @@ public class FileSystemResource extends AbstractResource",
                " \t{",
                "-\t\treturn createResourceResponse(attributes, path);",
                "+\t\treturn createResourceResponse(attributes, getPath());",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void respond(Attributes attributes)",
                "+\t{",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\tsuper.respond(attributes);",
                "+\t\t}",
                "+\t\tfinally",
                "+\t\t{",
                "+\t\t\tif (path != null)",
                "+\t\t\t{",
                "+\t\t\t\tpath.detach();",
                "+\t\t\t}",
                "+\t\t}",
                " \t}",
                "@@ -91,3 +110,3 @@ public class FileSystemResource extends AbstractResource",
                " \t\t\t}",
                "-\t\t\tthis.path = path;",
                "+\t\t\tthis.path = new PathModel(path);",
                " \t\t\tlong size = getSize();",
                "@@ -123,3 +142,3 @@ public class FileSystemResource extends AbstractResource",
                " \t{",
                "-\t\treturn Files.readAttributes(path, BasicFileAttributes.class).size();",
                "+\t\treturn Files.readAttributes(getPath(), BasicFileAttributes.class).size();",
                " \t}",
                "@@ -136,2 +155,3 @@ public class FileSystemResource extends AbstractResource",
                " \t{",
                "+\t\tfinal Path _path = getPath();",
                " \t\tString mimeType = null;",
                "@@ -139,3 +159,3 @@ public class FileSystemResource extends AbstractResource",
                " \t\t{",
                "-\t\t\tmimeType = Application.get().getMimeType(path.getFileName().toString());",
                "+\t\t\tmimeType = Application.get().getMimeType(_path.getFileName().toString());",
                " \t\t}",
                "@@ -143,3 +163,3 @@ public class FileSystemResource extends AbstractResource",
                " \t\t{",
                "-\t\t\tmimeType = Files.probeContentType(path);",
                "+\t\t\tmimeType = Files.probeContentType(_path);",
                " \t\t}",
                "@@ -157,3 +177,26 @@ public class FileSystemResource extends AbstractResource",
                " \t{",
                "-\t\treturn Files.newInputStream(path);",
                "+\t\treturn Files.newInputStream(getPath());",
                "+\t}",
                "+",
                "+\tprivate Path getPath()",
                "+\t{",
                "+\t\treturn path.getObject();",
                "+\t}",
                "+",
                "+\tprivate static class PathModel extends LoadableDetachableModel<Path>",
                "+\t{",
                "+\t\tprivate final String pathAsString;",
                "+",
                "+\t\tpublic PathModel(Path path)",
                "+\t\t{",
                "+\t\t\tsuper(path);",
                "+\t\t\tArgs.notNull(path, \"path\");",
                "+\t\t\tthis.pathAsString = path.toString();",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tprotected Path load()",
                "+\t\t{",
                "+\t\t\treturn Paths.get(pathAsString);",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6504": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "74d0f9f5bcf0bfa01f2bf0562afe51069c9ceb7f"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6504",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d519b75f1d35f3d6300d444b32d73aa87ce87e85",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508333714,
            "hunks": 3,
            "message": "WICKET-6481 PageInstanceMapper must not deal with anything that has more segments than \"page\".",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java",
                "index a03464270a..a62fde1814 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java",
                "@@ -18,2 +18,3 @@ package org.apache.wicket.core.request.mapper;",
                "+import java.util.List;",
                " import org.apache.wicket.RequestListenerInterface;",
                "@@ -180,2 +181,8 @@ public class PageInstanceMapper extends AbstractComponentMapper",
                " \t\tString pageIdentifier = getContext().getPageIdentifier();",
                "+\t\tList<String> segments = url.getSegments();",
                "+\t\t",
                "+\t\tif (isNotPageInstanceUrl(segments, pageIdentifier))",
                "+\t\t{",
                "+\t\t\treturn false;",
                "+\t\t}",
                "@@ -196,2 +203,15 @@ public class PageInstanceMapper extends AbstractComponentMapper",
                " \t}",
                "+",
                "+\tprivate boolean isNotPageInstanceUrl(List<String> segments, String pageIdentifier) ",
                "+\t{\t\t",
                "+\t\tif (segments.size() > 2 ) ",
                "+\t\t{",
                "+\t\t\treturn true;",
                "+\t\t} ",
                "+\t\t",
                "+\t\tint pageIdIndex = segments.indexOf(pageIdentifier);",
                "+\t\t",
                "+\t\t//check if we have segments after pageIdentifier",
                "+\t\treturn pageIdIndex < 0 || segments.size() - 1 > pageIdIndex;",
                "+\t}",
                " }"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/request/mapper/PageInstanceMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6481": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7c601fccef5a8a32692e195988872f3c0ca3939a"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6481",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0fb4468d97e3c19ea0c21860b857b41b3314494a",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507924678,
            "hunks": 3,
            "message": "WICKET-6482 delegate to nested behaviors",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/validation/CompoundValidator.java b/wicket-core/src/main/java/org/apache/wicket/validation/CompoundValidator.java",
                "index 3d9ef8f0dc..77b2c6009c 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/validation/CompoundValidator.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/validation/CompoundValidator.java",
                "@@ -23,3 +23,7 @@ import java.util.List;",
                "+import org.apache.wicket.Component;",
                " import org.apache.wicket.behavior.Behavior;",
                "+import org.apache.wicket.event.IEvent;",
                "+import org.apache.wicket.markup.ComponentTag;",
                "+import org.apache.wicket.markup.head.IHeaderResponse;",
                " import org.apache.wicket.util.lang.Args;",
                "@@ -85,2 +89,122 @@ public class CompoundValidator<T> extends Behavior implements IValidator<T>",
                " \t}",
                "+",
                "+\t@Override",
                "+\tpublic void beforeRender(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).beforeRender(component);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void afterRender(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).afterRender(component);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void bind(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).bind(component);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void unbind(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).unbind(component);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\t",
                "+\t@Override",
                "+\tpublic void detach(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).detach(component);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void onException(Component component, RuntimeException exception)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).onException(component, exception);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic boolean getStatelessHint(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior && ((Behavior)validator).getStatelessHint(component) == false) {",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn super.getStatelessHint(component);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void onComponentTag(Component component, ComponentTag tag)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).onComponentTag(component, tag);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void renderHead(Component component, IHeaderResponse response)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).renderHead(component, response);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void onConfigure(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).onConfigure(component);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void onEvent(Component component, IEvent<?> event)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).onEvent(component, event);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void onRemove(Component component)",
                "+\t{",
                "+\t\tfor (IValidator<T> validator : validators) {",
                "+\t\t\tif (validator instanceof Behavior) {",
                "+\t\t\t\t((Behavior)validator).onRemove(component);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                " }"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/validation/CompoundValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6482": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "123c10a20f5152ff2b236ae5fe6dcbe6e9ba060f"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6482",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "869ff926557468b23032ca78e1503ecd530e9aac",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514670522,
            "hunks": 1,
            "message": "WICKET-6513 NullPointerException at PageStoreManager$SessionEntry after login Check for storeTouchedPages == null before trying to use it. It might be null in case an alternative serialization library is used",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java b/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
                "index 2db301f532..97d5b5982a 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
                "@@ -353,3 +353,3 @@ public class PageStoreManager extends AbstractPageManager",
                " \t\t{",
                "-\t\t\tif (storingTouchedPages.get())",
                "+\t\t\tif (storingTouchedPages == null || storingTouchedPages.get())",
                " \t\t\t{"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/page/PageStoreManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6513": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8c7f583a3c74d4a9fa7ac1caa1bd06e432986902"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6513",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5cabbb68effd82e7d195d39c16e3e700d53eb9cc",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514672153,
            "hunks": 3,
            "message": "WICKET-6441 MockSessionStore doesn't call onInvalidate() on invalidate()",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/mock/MockSessionStore.java b/wicket-core/src/main/java/org/apache/wicket/mock/MockSessionStore.java",
                "index 3975faef4b..d0fd08ef3e 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/mock/MockSessionStore.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/mock/MockSessionStore.java",
                "@@ -47,5 +47,5 @@ public class MockSessionStore implements ISessionStore",
                " \tprivate String sessionId;",
                "-\tprivate final Map<String, Serializable> attributes = new HashMap<String, Serializable>();",
                "-\tprivate final Set<UnboundListener> unboundListeners = new CopyOnWriteArraySet<UnboundListener>();",
                "-\tprivate final Set<BindListener> bindListeners = new CopyOnWriteArraySet<BindListener>();",
                "+\tprivate final Map<String, Serializable> attributes = new HashMap<>();",
                "+\tprivate final Set<UnboundListener> unboundListeners = new CopyOnWriteArraySet<>();",
                "+\tprivate final Set<BindListener> bindListeners = new CopyOnWriteArraySet<>();",
                "@@ -74,3 +74,3 @@ public class MockSessionStore implements ISessionStore",
                " \t{",
                "-\t\treturn Collections.unmodifiableList(new ArrayList<String>(attributes.keySet()));",
                "+\t\treturn Collections.unmodifiableList(new ArrayList<>(attributes.keySet()));",
                " \t}",
                "@@ -98,2 +98,6 @@ public class MockSessionStore implements ISessionStore",
                " \t\tString sessId = sessionId;",
                "+\t\tif (session != null)",
                "+\t\t{",
                "+\t\t\tsession.onInvalidate();",
                "+\t\t}",
                " \t\tcleanup();"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/mock/MockSessionStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6441": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "92fe4c3e60e7406252ab38689cec8d25e0e6de61"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6441",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e25f47fd1259c34824d40d5ec52e0b595ded774",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514880468,
            "hunks": 4,
            "message": "[WICKET-6504] path can be null",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java b/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java",
                "index bc5c859b31..f8aca6f786 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java",
                "@@ -31,3 +31,2 @@ import org.apache.wicket.request.resource.AbstractResource;",
                " import org.apache.wicket.request.resource.PartWriterCallback;",
                "-import org.apache.wicket.util.lang.Args;",
                "@@ -187,2 +186,3 @@ public class FileSystemResource extends AbstractResource",
                " \t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                " \t\tprivate final String pathAsString;",
                "@@ -192,4 +192,3 @@ public class FileSystemResource extends AbstractResource",
                " \t\t\tsuper(path);",
                "-\t\t\tArgs.notNull(path, \"path\");",
                "-\t\t\tthis.pathAsString = path.toString();",
                "+\t\t\tthis.pathAsString = path == null ? null : path.toString();",
                " \t\t}",
                "@@ -199,3 +198,3 @@ public class FileSystemResource extends AbstractResource",
                " \t\t{",
                "-\t\t\treturn Paths.get(pathAsString);",
                "+\t\t\treturn pathAsString == null ? null : Paths.get(pathAsString);",
                " \t\t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/resource/FileSystemResource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6504": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae7f324dd3a5145d174245093c766d2bb5098bdc"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6504",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8403c3725d71c33b87b3c4e196cf078e7762840d",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514673888,
            "hunks": 1,
            "message": "WICKET-6484 Wicket.Cookie.set does not set 'secure' flag",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js",
                "index 83e1d26b79..b00ceec42c 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js",
                "@@ -1669,3 +1669,6 @@",
                " \t\t\texdate.setDate(exdate.getDate() + expiredays);",
                "-\t\t\tdocument.cookie = name + \"=\" + window.escape(value) + ((expiredays === null) ? \"\" : \";expires=\"+exdate);",
                "+\t\t\tvar secure = /^https/.test(location.protocol) ? ';secure' : '';",
                "+\t\t\tdocument.cookie = name + \"=\" + window.escape(value) +",
                "+\t\t\t\t((expiredays === null) ? \"\" : \";expires=\"+exdate) +",
                "+\t\t\t\tsecure;",
                " \t\t}"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/res/modal.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6484": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d0967b2312ed999b289566fbdd81eb282ad20c8e"
                ],
                [
                    "no-tag",
                    "5452f734c25a0bf5a57ce2ec6af5d39ded83bc31"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6484",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "68f23440c439814b46e1ea6a91e3d7219bc7c876",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514671444,
            "hunks": 7,
            "message": "WICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request (cherry picked from commit 922d56236157b3356c9eba7a43aed8c838b0b4e2)",
            "diff": [
                "diff --git a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "index 755ac3b8a3..8cad7a882d 100644",
                "--- a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "+++ b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "@@ -19,2 +19,3 @@ package org.apache.wicket.protocol.ws.api;",
                " import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpSession;",
                "@@ -97,3 +98,3 @@ public abstract class AbstractWebSocketProcessor implements IWebSocketProcessor",
                " \t * @param request",
                "-\t *      the http request that was used to create the TomcatWebSocketProcessor",
                "+\t *      the http request that was used to create this {@link IWebSocketProcessor}",
                " \t * @param application",
                "@@ -103,4 +104,9 @@ public abstract class AbstractWebSocketProcessor implements IWebSocketProcessor",
                " \t{",
                "-\t\tthis.sessionId = request.getSession(true).getId();",
                "-",
                "+\t\tfinal HttpSession httpSession = request.getSession(true);",
                "+\t\tif (httpSession == null)",
                "+\t\t{",
                "+\t\t\tthrow new IllegalStateException(\"There is no HTTP Session bound. Without a session Wicket won't be \" +",
                "+\t\t\t\t\t\"able to find the stored page to update its components\");",
                "+\t\t}",
                "+\t\tthis.sessionId = httpSession.getId();",
                " \t\tString pageId = request.getParameter(\"pageId\");",
                "diff --git a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/registry/IWebSocketConnectionRegistry.java b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/registry/IWebSocketConnectionRegistry.java",
                "index 0afaefa1b5..2782a93b01 100644",
                "--- a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/registry/IWebSocketConnectionRegistry.java",
                "+++ b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/registry/IWebSocketConnectionRegistry.java",
                "@@ -34,3 +34,3 @@ public interface IWebSocketConnectionRegistry",
                " \t * @param sessionId",
                "-\t *      the web socket client session id",
                "+\t *      the http session id",
                " \t * @param key",
                "@@ -45,2 +45,3 @@ public interface IWebSocketConnectionRegistry",
                " \t * @param sessionId",
                "+\t *            the http session id",
                " \t * @return collection of web socket connection used by a client with the given session id",
                "@@ -63,3 +64,3 @@ public interface IWebSocketConnectionRegistry",
                " \t * @param sessionId",
                "-\t *      the web socket client session id",
                "+\t *      the http session id",
                " \t * @param key",
                "@@ -77,3 +78,3 @@ public interface IWebSocketConnectionRegistry",
                " \t * @param sessionId",
                "-\t *      the web socket client session id",
                "+\t *      the http session id",
                " \t * @param key"
            ],
            "changed_files": [
                "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/registry/IWebSocketConnectionRegistry.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6493": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "922d56236157b3356c9eba7a43aed8c838b0b4e2"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6493",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d43ab39a216a4bc6e0df0225b61e7dc643f9469",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517231766,
            "hunks": 5,
            "message": "WICKET-6498 allow subclasses to decorate response so it's possible to use the former setup of a ResourceAggregator nested in FilteringHeaderResponse; don't use JavaScriptDeferHeaderResponse for AjaxApplication yet, it doesn't support older IE versions This closes pull request #258",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "index 233b588253..4b27c02ae3 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "@@ -235,2 +235,3 @@ public class FilteringHeaderResponse extends DecoratingHeaderResponse",
                " \t */",
                "+\t@SuppressWarnings(\"resource\")",
                " \tpublic final CharSequence getContent(String filterName)",
                "@@ -264,2 +265,4 @@ public class FilteringHeaderResponse extends DecoratingHeaderResponse",
                "+\t\theaderRenderer = decorate(headerRenderer);",
                "+",
                " \t\tfor (HeaderItem curItem : resp)",
                "@@ -274,2 +277,14 @@ public class FilteringHeaderResponse extends DecoratingHeaderResponse",
                "+\t/**",
                "+\t * Decorate the given response used to get contents.",
                "+\t * ",
                "+\t * @param response",
                "+\t *            response to decorate",
                "+\t * @return default implementation just returns the response",
                "+\t */",
                "+\tprotected IHeaderResponse decorate(IHeaderResponse response)",
                "+\t{",
                "+\t\treturn response;",
                "+\t}",
                "+",
                " \tprivate void render(HeaderItem item, String filterName)",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "index 9f8327e327..82caa41a0a 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "@@ -24,4 +24,2 @@ import org.apache.wicket.examples.WicketExampleApplication;",
                " import org.apache.wicket.examples.ajax.builtin.modal.ModalWindowPage;",
                "-import org.apache.wicket.markup.head.ResourceAggregator;",
                "-import org.apache.wicket.markup.head.filter.JavaScriptDeferHeaderResponse;",
                " import org.apache.wicket.markup.html.WebPage;",
                "@@ -48,5 +46,2 @@ public class AjaxApplication extends WicketExampleApplication",
                "-\t\t// use this header resource decorator to defer all JavaScript resources",
                "-\t\tsetHeaderResponseDecorator(response -> new ResourceAggregator(new JavaScriptDeferHeaderResponse(response)));",
                "-",
                " \t\tgetComponentInitializationListeners().add(new IComponentInitializationListener()"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteringHeaderResponse.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6498": ""
            },
            "ghissue_refs": {
                "258": "WICKET-6498 deferred javascript #253"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6498",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 258",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "40231badbc05527b363624fdbd630b2a55da5bd1",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511339668,
            "hunks": 2,
            "message": "INFRA-15525 Wicket examples do not update when there is a new Docker image Rename the Docker image to wicket-examples-V and the tag to a timestamp (cherry picked from commit d3da4e14518cced036611e880b64fc15b95d1501)",
            "diff": [
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index ca087c9dbc..5ca68f169f 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -300,2 +300,21 @@",
                " \t\t\t\t<plugins>",
                "+\t\t\t\t\t<plugin>",
                "+\t\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>",
                "+\t\t\t\t\t\t<artifactId>buildnumber-maven-plugin</artifactId>",
                "+\t\t\t\t\t\t<version>1.4</version>",
                "+\t\t\t\t\t\t<configuration>",
                "+\t\t\t\t\t\t\t<format>{0,date,yyyyMMddHHmmss}</format>",
                "+\t\t\t\t\t\t\t<items>",
                "+\t\t\t\t\t\t\t\t<item>timestamp</item>",
                "+\t\t\t\t\t\t\t</items>",
                "+\t\t\t\t\t\t</configuration>",
                "+\t\t\t\t\t\t<executions>",
                "+\t\t\t\t\t\t\t<execution>",
                "+\t\t\t\t\t\t\t\t<phase>validate</phase>",
                "+\t\t\t\t\t\t\t\t<goals>",
                "+\t\t\t\t\t\t\t\t\t<goal>create</goal>",
                "+\t\t\t\t\t\t\t\t</goals>",
                "+\t\t\t\t\t\t\t</execution>",
                "+\t\t\t\t\t\t</executions>",
                "+\t\t\t\t\t</plugin>",
                " \t\t\t\t\t<plugin>",
                "@@ -319,4 +338,4 @@",
                " \t\t\t\t\t\t<configuration>",
                "-\t\t\t\t\t\t\t<repository>apache-docker-wicket-docker.bintray.io/wicket-examples</repository>",
                "-\t\t\t\t\t\t\t<tag>LATEST-7</tag>",
                "+\t\t\t\t\t\t\t<repository>apache-docker-wicket-docker.bintray.io/wicket-examples-7</repository>",
                "+\t\t\t\t\t\t\t<tag>${buildNumber}</tag>",
                " \t\t\t\t\t\t</configuration>"
            ],
            "changed_files": [
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "INFRA-15525": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d3da4e14518cced036611e880b64fc15b95d1501"
                ],
                [
                    "no-tag",
                    "6654faa8fd689c05e7bf5ce41fca1697e6ecc47a"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: INFRA-15525",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "11bbfbcdb3bed0afc38699e2ca8ce6c5f17554c4",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1512042290,
            "hunks": 2,
            "message": "WICKET-6448 Added javadoc",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "index a07a7f79dd..15819c71ce 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "@@ -25,2 +25,4 @@ import org.apache.wicket.ajax.attributes.AjaxCallListener;",
                "  * hence it can be used only with those HTML components that support this attribute.",
                "+ * If you want to use it with other kinds of components you should override {@link #generateHandlerJavaScript}",
                "+ * to generate the proper enable/disable JavaScript.",
                "  * ",
                "@@ -55,2 +57,7 @@ public class AjaxDisableComponentListener extends AjaxCallListener",
                "+\t/**",
                "+\t * Generate the proper enable/disable JavaScript code for the given component.",
                "+\t * By default component is enabled/disabled using DOM attribute 'disabled'.",
                "+\t * ",
                "+\t */",
                " \tprotected String generateHandlerJavaScript(Component component, boolean disabled)"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6448": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "837917cc8c59119230e6e7e127aa68d2218ad093"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6448",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c27a57b31a0e519ef15dfe08b425d85f9a24f685",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1513234553,
            "hunks": 83,
            "message": "WICKET-6503 beforeRender clean-up - prepare all components before writing them to Ajax response - simplified delayed preparation of feedbacks - clean-up internal component API an flags this closes #250",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Component.java b/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "index 7240a13438..fc32b09d47 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "@@ -19,3 +19,2 @@ package org.apache.wicket;",
                " import java.io.Serializable;",
                "-import java.util.ArrayList;",
                " import java.util.Arrays;",
                "@@ -24,2 +23,3 @@ import java.util.List;",
                " import java.util.Locale;",
                "+import java.util.Optional;",
                "@@ -42,2 +42,3 @@ import org.apache.wicket.event.IEventSink;",
                " import org.apache.wicket.event.IEventSource;",
                "+import org.apache.wicket.feedback.FeedbackDelay;",
                " import org.apache.wicket.feedback.FeedbackMessage;",
                "@@ -88,3 +89,2 @@ import org.apache.wicket.util.string.Strings;",
                " import org.apache.wicket.util.value.ValueMap;",
                "-import org.apache.wicket.util.visit.IVisit;",
                " import org.apache.wicket.util.visit.IVisitFilter;",
                "@@ -314,8 +314,2 @@ public abstract class Component",
                "-\t/** an unused flag */",
                "-\tprivate static final int FLAG_UNUSED0 = 0x20000000;",
                "-\tprivate static final int FLAG_UNUSED1 = 0x800000;",
                "-\tprivate static final int FLAG_UNUSED2 = 0x1000000;",
                "-\tprivate static final int FLAG_UNUSED3 = 0x10000000;",
                "-",
                " \t/** True when a component is being auto-added */",
                "@@ -391,13 +385,2 @@ public abstract class Component",
                "-\t/** True when a component is being removed from the hierarchy */",
                "-\tprotected static final int FLAG_REMOVING_FROM_HIERARCHY = 0x200000;",
                "-",
                "-\t/**",
                "-\t * Flag that makes we are in before-render callback phase Set after component.onBeforeRender is",
                "-\t * invoked (right before invoking beforeRender on children)",
                "-\t */",
                "-\tprotected static final int FLAG_RENDERING = 0x2000000;",
                "-\tprotected static final int FLAG_PREPARED_FOR_RENDER = 0x4000000;",
                "-\tprotected static final int FLAG_AFTER_RENDERING = 0x8000000;",
                "-",
                " \t/**",
                "@@ -410,4 +393,2 @@ public abstract class Component",
                "-\tprivate static final int FLAG_DETACHING = 0x80000000;",
                "-\t",
                " \t/**",
                "@@ -449,2 +430,12 @@ public abstract class Component",
                " \tprivate static final short RFLAG_ON_RE_ADD_SUPER_CALL_VERIFIED = 0x100;",
                "+\t/**",
                "+\t * Flag that makes we are in before-render callback phase Set after component.onBeforeRender is",
                "+\t * invoked (right before invoking beforeRender on children)",
                "+\t */",
                "+\tprivate static final short RFLAG_RENDERING = 0x200;",
                "+\tprivate static final short RFLAG_PREPARED_FOR_RENDER = 0x400;",
                "+\tprivate static final short RFLAG_AFTER_RENDERING = 0x800;",
                "+\tprivate static final short RFLAG_DETACHING = 0x1000;\t",
                "+\t/** True when a component is being removed from the hierarchy */",
                "+\tprivate static final short RFLAG_REMOVING_FROM_HIERARCHY = 0x2000;",
                "@@ -791,3 +782,3 @@ public abstract class Component",
                " \t/**",
                "-\t * Called once per request on components before they are about to be rendered. This method",
                "+\t * Called on all components before any component is rendered. This method",
                " \t * should be used to configure such things as visibility and enabled flags.",
                "@@ -859,3 +850,3 @@ public abstract class Component",
                " \t/**",
                "-\t * THIS METHOD IS NOT PART OF THE PUBLIC API, DO NOT CALL IT",
                "+\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                " \t * ",
                "@@ -905,14 +896,11 @@ public abstract class Component",
                " \t/**",
                "-\t * Called on every component after the page is rendered. It will call onAfterRender for it self",
                "-\t * and its children.",
                "+\t * Called on every component after the page is rendered. Calls hook {@link #onAfterRender()}.",
                " \t */",
                "-\tpublic final void afterRender()",
                "+\tfinal void afterRender()",
                " \t{",
                "+\t\tsetRequestFlag(RFLAG_PREPARED_FOR_RENDER, false);",
                "+\t\t",
                " \t\ttry",
                " \t\t{",
                "-\t\t\tsetFlag(FLAG_AFTER_RENDERING, true);",
                "-",
                "-\t\t\t// always detach children because components can be attached",
                "-\t\t\t// independently of their parents",
                "-\t\t\tonAfterRenderChildren();",
                "+\t\t\tsetRequestFlag(RFLAG_AFTER_RENDERING, true);",
                "@@ -920,3 +908,3 @@ public abstract class Component",
                " \t\t\tgetApplication().getComponentOnAfterRenderListeners().onAfterRender(this);",
                "-\t\t\tif (getFlag(FLAG_AFTER_RENDERING))",
                "+\t\t\tif (getRequestFlag(RFLAG_AFTER_RENDERING))",
                " \t\t\t{",
                "@@ -931,3 +919,3 @@ public abstract class Component",
                " \t\t\t// this flag must always be set to false.",
                "-\t\t\tmarkRendering(false);",
                "+\t\t\tsetRequestFlag(RFLAG_RENDERING, false);",
                " \t\t}",
                "@@ -935,44 +923,8 @@ public abstract class Component",
                "-\tprivate void internalBeforeRender()",
                "-\t{",
                "-\t\tconfigure();",
                "-",
                "-\t\tif ((determineVisibility()) && !getFlag(FLAG_RENDERING) &&",
                "-\t\t\t!getFlag(FLAG_PREPARED_FOR_RENDER))",
                "-\t\t{",
                "-\t\t\tsetRequestFlag(RFLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, false);",
                "-",
                "-\t\t\tApplication application = getApplication();",
                "-\t\t\tapplication.getComponentPreOnBeforeRenderListeners().onBeforeRender(this);",
                "-",
                "-\t\t\tonBeforeRender();",
                "-\t\t\tapplication.getComponentPostOnBeforeRenderListeners().onBeforeRender(this);",
                "-",
                "-\t\t\tif (!getRequestFlag(RFLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED))",
                "-\t\t\t{",
                "-\t\t\t\tthrow new IllegalStateException(Component.class.getName() +",
                "-\t\t\t\t\t\" has not been properly rendered. Something in the hierarchy of \" +",
                "-\t\t\t\t\tgetClass().getName() +",
                "-\t\t\t\t\t\" has not called super.onBeforeRender() in the override of onBeforeRender() method\");",
                "-\t\t\t}",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * We need to postpone calling beforeRender() on components that implement {@link IFeedback}, to",
                "-\t * be sure that all other component's beforeRender() has been already called, so that IFeedbacks",
                "-\t * can collect all feedback messages. This is the key under list of postponed {@link IFeedback}",
                "-\t * is stored to request cycle metadata. The List is then iterated over in",
                "-\t * {@link #prepareForRender()} after calling {@link #beforeRender()}, to initialize postponed",
                "-\t * components.",
                "-\t */",
                "-\tprivate static final MetaDataKey<List<Component>> FEEDBACK_LIST = new MetaDataKey<List<Component>>()",
                "-\t{",
                "-\t\tprivate static final long serialVersionUID = 1L;",
                "-\t};",
                "-",
                " \t/**",
                "-\t * Called for every component when the page is getting to be rendered. it will call",
                "-\t * {@link #configure()} and {@link #onBeforeRender()} for this component and all the child",
                "-\t * components",
                "+\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "+\t * ",
                "+\t * Called on all components before any component is rendered. Calls hooks",
                "+\t * {@link #configure()} and (if visible) {@link #onBeforeRender()}",
                "+\t * and delegates to {@link #beforeRender()} of all child components.",
                " \t */",
                "@@ -982,36 +934,34 @@ public abstract class Component",
                " \t\t{",
                "-\t\t\t// this component is a feedback. Feedback must be initialized last, so that",
                "-\t\t\t// they can collect messages from other components",
                "-\t\t\tList<Component> feedbacks = getRequestCycle().getMetaData(FEEDBACK_LIST);",
                "-\t\t\tif (feedbacks == null)",
                "-\t\t\t{",
                "-\t\t\t\tfeedbacks = new ArrayList<>();",
                "-\t\t\t\tgetRequestCycle().setMetaData(FEEDBACK_LIST, feedbacks);",
                "+\t\t\tOptional<FeedbackDelay> delay = FeedbackDelay.get(getRequestCycle());",
                "+\t\t\tif (delay.isPresent()) {",
                "+\t\t\t\tdelay.get().postpone((IFeedback)this);",
                "+\t\t\t\treturn;",
                " \t\t\t}",
                "+\t\t}",
                "-\t\t\tif (this instanceof MarkupContainer)",
                "-\t\t\t{",
                "-\t\t\t\t((MarkupContainer)this).visitChildren(IFeedback.class,",
                "-\t\t\t\t\tnew IVisitor<Component, Void>()",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\t@Override",
                "-\t\t\t\t\t\tpublic void component(Component feedback, IVisit<Void> visit)",
                "-\t\t\t\t\t\t{",
                "-\t\t\t\t\t\t\tfeedback.beforeRender();",
                "-",
                "-\t\t\t\t\t\t\t// don't need to go deeper,",
                "-\t\t\t\t\t\t\t// as the feedback will visit its children on its own",
                "-\t\t\t\t\t\t\tvisit.dontGoDeeper();",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t});",
                "-\t\t\t}",
                "+\t\tconfigure();",
                "-\t\t\tif (!feedbacks.contains(this))",
                "-\t\t\t{",
                "-\t\t\t\tfeedbacks.add(this);",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\telse",
                "+\t\tif ((determineVisibility()) && !getRequestFlag(RFLAG_RENDERING) &&",
                "+\t\t\t!getRequestFlag(RFLAG_PREPARED_FOR_RENDER))",
                " \t\t{",
                "-\t\t\tinternalBeforeRender();",
                "+\t\t\ttry {",
                "+\t\t\t\tsetRequestFlag(RFLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED, false);",
                "+",
                "+\t\t\t\tApplication application = getApplication();",
                "+\t\t\t\tapplication.getComponentPreOnBeforeRenderListeners().onBeforeRender(this);",
                "+",
                "+\t\t\t\tonBeforeRender();",
                "+\t\t\t\tapplication.getComponentPostOnBeforeRenderListeners().onBeforeRender(this);",
                "+",
                "+\t\t\t\tif (!getRequestFlag(RFLAG_BEFORE_RENDER_SUPER_CALL_VERIFIED))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tthrow new IllegalStateException(Component.class.getName() +",
                "+\t\t\t\t\t\t\" has not been properly rendered. Something in the hierarchy of \" +",
                "+\t\t\t\t\t\tgetClass().getName() +",
                "+\t\t\t\t\t\t\" has not called super.onBeforeRender() in the override of onBeforeRender() method\");",
                "+\t\t\t\t}",
                "+\t\t\t} catch (RuntimeException ex) {",
                "+\t\t\t\tsetRequestFlag(RFLAG_PREPARED_FOR_RENDER, false);",
                "+\t\t\t\tthrow ex;",
                "+\t\t\t}",
                " \t\t}",
                "@@ -1074,5 +1024,2 @@ public abstract class Component",
                " \t/**",
                "-\t * ",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "-\t * ",
                " \t * Called after the {@link #onConfigure()}, but before {@link #onBeforeRender()}",
                "@@ -1136,6 +1083,6 @@ public abstract class Component",
                " \t{",
                "-\t\tsetFlag(FLAG_REMOVING_FROM_HIERARCHY, true);",
                "+\t\tsetRequestFlag(RFLAG_REMOVING_FROM_HIERARCHY, true);",
                " \t\tonRemove();",
                " \t\tsetFlag(FLAG_REMOVED, true);",
                "-\t\tif (getFlag(FLAG_REMOVING_FROM_HIERARCHY))",
                "+\t\tif (getRequestFlag(RFLAG_REMOVING_FROM_HIERARCHY))",
                " \t\t{",
                "@@ -1159,5 +1106,5 @@ public abstract class Component",
                " \t\t{",
                "-\t\t\tsetFlag(FLAG_DETACHING, true);",
                "+\t\t\tsetRequestFlag(RFLAG_DETACHING, true);",
                " \t\t\tonDetach();",
                "-\t\t\tif (getFlag(FLAG_DETACHING))",
                "+\t\t\tif (getRequestFlag(RFLAG_DETACHING))",
                " \t\t\t{",
                "@@ -1471,3 +1418,3 @@ public abstract class Component",
                " \t/**",
                "-\t * THIS IS WICKET INTERNAL ONLY. DO NOT USE IT.",
                "+\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                " \t * ",
                "@@ -2171,19 +2118,2 @@ public abstract class Component",
                "-\t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "-\t * ",
                "-\t * Sets the RENDERING flag and removes the PREPARED_FOR_RENDER flag on component and it's",
                "-\t * children.",
                "-\t * ",
                "-\t * @param setRenderingFlag",
                "-\t *            if this is false only the PREPARED_FOR_RENDER flag is removed from component, the",
                "-\t *            RENDERING flag is not set.",
                "-\t * ",
                "-\t * @see #internalPrepareForRender(boolean)",
                "-\t */",
                "-\tpublic final void markRendering(boolean setRenderingFlag)",
                "-\t{",
                "-\t\tinternalMarkRendering(setRenderingFlag);",
                "-\t}",
                "-",
                " \t/**",
                "@@ -2216,58 +2146,2 @@ public abstract class Component",
                "-\t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "-\t * <p>",
                "-\t * Prepares the component and it's children for rendering. On whole page render this method must",
                "-\t * be called on the page. On AJAX request, this method must be called on the updated component.",
                "-\t * ",
                "-\t * @param setRenderingFlag",
                "-\t *            Whether to set the rendering flag. This must be true if the page is about to be",
                "-\t *            rendered. However, there are usecases to call this method without an immediate",
                "-\t *            render (e.g. on stateless listener request target to build the component",
                "-\t *            hierarchy), in that case setRenderingFlag should be false.",
                "-\t */",
                "-\tpublic void internalPrepareForRender(boolean setRenderingFlag)",
                "-\t{",
                "-\t\tbeforeRender();",
                "-",
                "-\t\tif (setRenderingFlag)",
                "-\t\t{",
                "-\t\t\t// only process feedback panel when we are about to be rendered.",
                "-\t\t\t// setRenderingFlag is false in case prepareForRender is called only to build component",
                "-\t\t\t// hierarchy (i.e. in BookmarkableListenerRequestHandler).",
                "-\t\t\t// prepareForRender(true) is always called before the actual rendering is done so",
                "-\t\t\t// that's where feedback panels gather the messages",
                "-",
                "-\t\t\tList<Component> feedbacks = getRequestCycle().getMetaData(FEEDBACK_LIST);",
                "-\t\t\tif (feedbacks != null)",
                "-\t\t\t{",
                "-\t\t\t\t// iterate over a copy because a IFeedback may add more IFeedback children",
                "-// (WICKET-4687)",
                "-\t\t\t\tComponent[] feedbacksCopy = feedbacks.toArray(new Component[feedbacks.size()]);",
                "-\t\t\t\tfor (Component feedback : feedbacksCopy)",
                "-\t\t\t\t{",
                "-\t\t\t\t\t// render it only if it is still in the page hierarchy (WICKET-4895)",
                "-\t\t\t\t\tif (feedback.findPage() != null)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tfeedback.internalBeforeRender();",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tgetRequestCycle().setMetaData(FEEDBACK_LIST, null);",
                "-\t\t}",
                "-",
                "-\t\tmarkRendering(setRenderingFlag);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "-\t * ",
                "-\t * Prepares the component and it's children for rendering. On whole page render this method must",
                "-\t * be called on the page. On AJAX request, this method must be called on updated component.",
                "-\t */",
                "-\tpublic final void prepareForRender()",
                "-\t{",
                "-\t\tinternalPrepareForRender(true);",
                "-\t}",
                "-",
                " \t/**",
                "@@ -2305,5 +2179,23 @@ public abstract class Component",
                "+\t/**",
                "+\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "+\t * <p>",
                "+\t * Renders this component as a part of a response - the caller has to",
                "+\t * make sure that this component is prepared for render.",
                "+\t * ",
                "+\t * @see #beforeRender()",
                "+\t */",
                "+\tpublic final void renderPart() {",
                "+\t\tPage page = getPage();",
                "+",
                "+\t\tpage.startComponentRender(this);",
                "+",
                "+\t\trender();",
                "+\t\t",
                "+\t\tpage.endComponentRender(this);",
                "+\t}",
                " \t/**",
                "-\t * Render the Component.",
                "+\t * Render this component and all its children. Always calls hook {@link #onAfterRender()}",
                "+\t * regardless of any exception.",
                " \t */",
                "@@ -2311,14 +2203,14 @@ public abstract class Component",
                " \t{",
                "-\t\tRuntimeException exception = null;",
                "+\t\tif (isAuto())",
                "+\t\t{",
                "+\t\t\t// auto components are prepared when rendered",
                "+\t\t\tbeforeRender();",
                "+\t\t}",
                "+\t\t// Do the render",
                "+\t\tRuntimeException exception = null;",
                " \t\ttry",
                " \t\t{",
                "-\t\t\t// Invoke prepareForRender only if this is the root component to be rendered",
                "-\t\t\tMarkupContainer parent = getParent();",
                "-\t\t\tif ((parent == null) || (parent.getFlag(FLAG_RENDERING) == false) || isAuto())",
                "-\t\t\t{",
                "-\t\t\t\tinternalPrepareForRender(true);",
                "-\t\t\t}",
                "-",
                "-\t\t\t// Do the render",
                "+\t\t\tsetRequestFlag(RFLAG_RENDERING, true);",
                "+\t\t\t",
                " \t\t\tinternalRender();",
                "@@ -2369,5 +2261,2 @@ public abstract class Component",
                "-\t\t// Flag: we started the render process",
                "-\t\tmarkRendering(true);",
                "-",
                " \t\tMarkupElement elem = markup.get(0);",
                "@@ -2515,3 +2404,3 @@ public abstract class Component",
                " \t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT.",
                "+\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                " \t * <p>",
                "@@ -2521,3 +2410,3 @@ public abstract class Component",
                " \t */",
                "-\tpublic final void internalRenderComponent()",
                "+\tprotected final void internalRenderComponent()",
                " \t{",
                "@@ -2700,3 +2589,3 @@ public abstract class Component",
                " \t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT.",
                "+\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                " \t * ",
                "@@ -3647,3 +3536,3 @@ public abstract class Component",
                " \t\t// Throw exception if modification is attempted during rendering",
                "-\t\tif (getFlag(FLAG_RENDERING) && !component.isAuto())",
                "+\t\tif (getRequestFlag(RFLAG_RENDERING) && !component.isAuto())",
                " \t\t{",
                "@@ -3878,3 +3767,4 @@ public abstract class Component",
                " \t/**",
                "-\t * Called just after a component is rendered.",
                "+\t * Called immediately after a component and all its children have been rendered,",
                "+\t * regardless of any exception.",
                " \t */",
                "@@ -3882,3 +3772,3 @@ public abstract class Component",
                " \t{",
                "-\t\tsetFlag(FLAG_AFTER_RENDERING, false);",
                "+\t\tsetRequestFlag(RFLAG_AFTER_RENDERING, false);",
                " \t}",
                "@@ -3886,3 +3776,3 @@ public abstract class Component",
                " \t/**",
                "-\t * Called just before a component is rendered only if the component is visible.",
                "+\t * Called on all visible components before any component is rendered.",
                " \t * <p>",
                "@@ -3902,3 +3792,2 @@ public abstract class Component",
                " \t{",
                "-\t\tsetFlag(FLAG_PREPARED_FOR_RENDER, true);",
                " \t\tonBeforeRenderChildren();",
                "@@ -3960,3 +3849,3 @@ public abstract class Component",
                " \t{",
                "-\t\tsetFlag(FLAG_DETACHING, false);",
                "+\t\tsetRequestFlag(RFLAG_DETACHING, false);",
                " \t}",
                "@@ -3971,3 +3860,3 @@ public abstract class Component",
                " \t{",
                "-\t\tsetFlag(FLAG_REMOVING_FROM_HIERARCHY, false);",
                "+\t\tsetRequestFlag(RFLAG_REMOVING_FROM_HIERARCHY, false);",
                " \t}",
                "@@ -4163,4 +4052,2 @@ public abstract class Component",
                " \t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "-\t * ",
                " \t * @param flag",
                "@@ -4170,3 +4057,3 @@ public abstract class Component",
                " \t */",
                "-\tprotected final Component setRequestFlag(final short flag, final boolean set)",
                "+\tfinal Component setRequestFlag(final short flag, final boolean set)",
                " \t{",
                "@@ -4246,14 +4133,2 @@ public abstract class Component",
                "-\t/**",
                "-\t * @param setRenderingFlag",
                "-\t *            rendering flag",
                "-\t */",
                "-\tvoid internalMarkRendering(boolean setRenderingFlag)",
                "-\t{",
                "-\t\t// WICKET-5460 no longer prepared for render",
                "-\t\tsetFlag(FLAG_PREPARED_FOR_RENDER, false);",
                "-",
                "-\t\tsetFlag(FLAG_RENDERING, setRenderingFlag);",
                "-\t}",
                "-",
                " \t/**",
                "@@ -4280,10 +4155,3 @@ public abstract class Component",
                " \t{",
                "-\t\treturn getFlag(FLAG_PREPARED_FOR_RENDER);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * ",
                "-\t */",
                "-\tprotected void onAfterRenderChildren()",
                "-\t{",
                "+\t\treturn getRequestFlag(RFLAG_PREPARED_FOR_RENDER);",
                " \t}",
                "@@ -4476,3 +4344,3 @@ public abstract class Component",
                " \t{",
                "-\t\treturn getFlag(FLAG_RENDERING);",
                "+\t\treturn getRequestFlag(RFLAG_RENDERING);",
                " \t}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "index 36b768401a..aad0aac2b2 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "@@ -1696,13 +1696,2 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp",
                "-\t@Override",
                "-\tvoid internalMarkRendering(boolean setRenderingFlag)",
                "-\t{",
                "-\t\tsuper.internalMarkRendering(setRenderingFlag);",
                "-",
                "-\t\tfor (Component child : this)",
                "-\t\t{",
                "-\t\t\tchild.internalMarkRendering(setRenderingFlag);",
                "-\t\t}",
                "-\t}",
                "-",
                " \t/**",
                "@@ -1794,13 +1783,2 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp",
                "-\t@Override",
                "-\tprotected void onAfterRenderChildren()",
                "-\t{",
                "-\t\tfor (Component child : this)",
                "-\t\t{",
                "-\t\t\t// set RENDERING_FLAG to false for auto-component's children (like Enclosure)",
                "-\t\t\tchild.markRendering(false);",
                "-\t\t}",
                "-\t\tsuper.onAfterRenderChildren();",
                "-\t}",
                "-",
                " \t@Override",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Page.java b/wicket-core/src/main/java/org/apache/wicket/Page.java",
                "index fb4f04da10..9b8dc7f615 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Page.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Page.java",
                "@@ -26,2 +26,3 @@ import org.apache.wicket.authorization.UnauthorizedActionException;",
                " import org.apache.wicket.core.util.lang.WicketObjects;",
                "+import org.apache.wicket.feedback.FeedbackDelay;",
                " import org.apache.wicket.markup.MarkupException;",
                "@@ -231,3 +232,3 @@ public abstract class Page extends MarkupContainer",
                " \t@Override",
                "-\tpublic void internalPrepareForRender(boolean setRenderingFlag)",
                "+\tprotected void onConfigure()",
                " \t{",
                "@@ -238,3 +239,4 @@ public abstract class Page extends MarkupContainer",
                " \t\t}",
                "-\t\tsuper.internalPrepareForRender(setRenderingFlag);",
                "+\t\t",
                "+\t\tsuper.onConfigure();",
                " \t}",
                "@@ -302,5 +304,3 @@ public abstract class Page extends MarkupContainer",
                " \t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL.",
                "-\t * ",
                "-\t * This method is called when a component was rendered standalone. If it is a <code>",
                "+\t * This method is called when a component was rendered as a part. If it is a <code>",
                " \t * MarkupContainer</code> then the rendering for that container is checked.",
                "@@ -308,4 +308,6 @@ public abstract class Page extends MarkupContainer",
                " \t * @param component",
                "+\t * ",
                "+\t * @see Component#renderPart()",
                " \t */",
                "-\tpublic final void endComponentRender(Component component)",
                "+\tfinal void endComponentRender(Component component)",
                " \t{",
                "@@ -529,5 +531,3 @@ public abstract class Page extends MarkupContainer",
                " \t/**",
                "-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL.",
                "-\t * ",
                "-\t * This method is called when a component will be rendered standalone.",
                "+\t * This method is called when a component will be rendered as a part.",
                " \t * ",
                "@@ -535,4 +535,5 @@ public abstract class Page extends MarkupContainer",
                " \t * ",
                "+\t * @see Component#renderPart()",
                " \t */",
                "-\tpublic final void startComponentRender(Component component)",
                "+\tfinal void startComponentRender(Component component)",
                " \t{",
                "@@ -986,5 +987,13 @@ public abstract class Page extends MarkupContainer",
                " \t\t\t++renderCount;",
                "-\t\t\trender();",
                "-\t\t\t// stateless = null;",
                "+\t\t\tFeedbackDelay delay = new FeedbackDelay(getRequestCycle());",
                "+\t\t\ttry {",
                "+\t\t\t\tbeforeRender();",
                "+\t\t\t\t",
                "+\t\t\t\tdelay.beforeRender();",
                "+\t\t\t} finally {",
                "+\t\t\t\tdelay.release();",
                "+\t\t\t}",
                "+",
                "+\t\t\trender();",
                " \t\t}",
                "@@ -1006,3 +1015,2 @@ public abstract class Page extends MarkupContainer",
                " \t}",
                "-",
                "-}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ComponentRenderingRequestHandler.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ComponentRenderingRequestHandler.java",
                "index 1636707fab..e6d58747d2 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ComponentRenderingRequestHandler.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ComponentRenderingRequestHandler.java",
                "@@ -66,9 +66,4 @@ public class ComponentRenderingRequestHandler implements IComponentRequestHandle",
                "-\t\tPage page = component.getPage();",
                "-",
                "-\t\tpage.startComponentRender(component);",
                "-",
                "-\t\tcomponent.render();",
                "-",
                "-\t\tpage.endComponentRender(component);",
                "+\t\tcomponent.beforeRender();",
                "+\t\tcomponent.renderPart();",
                " \t}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java",
                "index 8bdfa93822..de59ecc6bc 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java",
                "@@ -171,3 +171,3 @@ public class PageAndComponentProvider extends PageProvider implements IPageAndCo",
                " \t\t\t\t\tp.internalInitialize();",
                "-\t\t\t\t\tp.internalPrepareForRender(false);",
                "+\t\t\t\t\tp.beforeRender();",
                " \t\t\t\t\tcomponent = page.get(componentPath);",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java b/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "index d5830578c6..9104eb9629 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "@@ -418,3 +418,4 @@ public class ComponentRenderer",
                "-\t\t\tcomponent.render();",
                "+\t\t\tcomponent.beforeRender();",
                "+\t\t\tcomponent.renderPart();",
                " \t\t}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackDelay.java b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackDelay.java",
                "new file mode 100644",
                "index 0000000000..4d0ef30ec3",
                "--- /dev/null",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackDelay.java",
                "@@ -0,0 +1,119 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.feedback;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Optional;",
                "+",
                "+import org.apache.wicket.Component;",
                "+import org.apache.wicket.MetaDataKey;",
                "+import org.apache.wicket.Page;",
                "+import org.apache.wicket.WicketRuntimeException;",
                "+import org.apache.wicket.request.cycle.RequestCycle;",
                "+",
                "+/**",
                "+ * Postpone calling {@link IFeedback#beforeRender()} after other components.",
                "+ * <p>",
                "+ * This gives other {@link Component#beforeRender()} the possibility to report feedbacks,",
                "+ * which can then be collected by {@link IFeedback}s afterwards.",
                "+ */",
                "+public class FeedbackDelay implements Serializable",
                "+{",
                "+\tprivate static final MetaDataKey<FeedbackDelay> KEY = new MetaDataKey<FeedbackDelay>()",
                "+\t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+\t};",
                "+\t",
                "+\tprivate List<IFeedback> feedbacks = new ArrayList<>();",
                "+",
                "+\tprivate RequestCycle cycle;",
                "+\t",
                "+\t/**",
                "+\t * Delay all feedbacks for the given cycle.",
                "+\t * <p>",
                "+\t * All postponed feedbacks will be prepared for render with {@link #beforeRender()}.",
                "+\t * ",
                "+\t * @param cycle",
                "+\t *            request cycle",
                "+\t */",
                "+\tpublic FeedbackDelay(RequestCycle cycle) {",
                "+\t\tif (get(cycle).isPresent()) {",
                "+\t\t\tthrow new WicketRuntimeException(\"feedbacks are already delayed\");",
                "+\t\t}",
                "+\t\t",
                "+\t\tcycle.setMetaData(KEY, this);",
                "+\t\t",
                "+\t\tthis.cycle = cycle;",
                "+\t}",
                "+\t",
                "+\t/**",
                "+\t * Get the current delay.",
                "+\t * ",
                "+\t * @param cycle",
                "+\t * @return optional delay",
                "+\t */",
                "+\tpublic static Optional<FeedbackDelay> get(RequestCycle cycle) {",
                "+\t\treturn Optional.ofNullable(cycle.getMetaData(KEY));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Postpone {@link Component#beforeRender()} on the given feedback.",
                "+\t * ",
                "+\t * @param feedback",
                "+\t * @return",
                "+\t */",
                "+\tpublic FeedbackDelay postpone(IFeedback feedback) {",
                "+\t\tfeedbacks.add(feedback);",
                "+\t\t",
                "+\t\treturn this;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Prepares all postponed feedbacks for render.",
                "+\t * ",
                "+\t * @see IFeedback#beforeRender()",
                "+\t */",
                "+\tpublic void beforeRender() {",
                "+\t\tcycle.setMetaData(KEY, null);",
                "+\t\tcycle = null;",
                "+\t\t",
                "+\t\tfor (IFeedback feedback : feedbacks)",
                "+\t\t{",
                "+\t\t\tif (feedback instanceof Component) {",
                "+\t\t\t\tComponent component = (Component)feedback;",
                "+\t\t\t\t",
                "+\t\t\t\t// render only if it is still in the page hierarchy (WICKET-4895)",
                "+\t\t\t\tif (component.findParent(Page.class) == null)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tcontinue;",
                "+\t\t\t\t}\t\t\t",
                "+\t\t\t}",
                "+\t\t",
                "+\t\t\tfeedback.beforeRender();",
                "+\t\t}",
                "+\t}",
                "+\t",
                "+\tpublic void release() {",
                "+\t\tif (cycle != null) {",
                "+\t\t\tcycle.setMetaData(KEY, null);",
                "+\t\t\tcycle = null;",
                "+\t\t\tfeedbacks.clear();",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/feedback/IFeedback.java b/wicket-core/src/main/java/org/apache/wicket/feedback/IFeedback.java",
                "index a1bd08cfcf..6e0085e998 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/feedback/IFeedback.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/feedback/IFeedback.java",
                "@@ -22,4 +22,4 @@ package org.apache.wicket.feedback;",
                "  * ",
                "- * This is basically a marker interface that tells Wicket that this component's onBeforeRender",
                "- * method must be called after all non feedback components have been initialized.",
                "+ * This is tells Wicket that a component's {@link Component#beforeRender()} must be called after all non",
                "+ * feedback components have been initialized.",
                "  * ",
                "@@ -30,2 +30,3 @@ public interface IFeedback",
                " {",
                "+\tvoid beforeRender();",
                " }",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/page/PartialPageUpdate.java b/wicket-core/src/main/java/org/apache/wicket/page/PartialPageUpdate.java",
                "index 2bef5e2d1c..caec116b78 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/page/PartialPageUpdate.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/page/PartialPageUpdate.java",
                "@@ -30,2 +30,3 @@ import org.apache.wicket.Component;",
                " import org.apache.wicket.Page;",
                "+import org.apache.wicket.feedback.FeedbackDelay;",
                " import org.apache.wicket.markup.head.HeaderItem;",
                "@@ -240,11 +241,26 @@ public abstract class PartialPageUpdate",
                "-\t\t// process component markup",
                "-\t\tfor (Map.Entry<String, Component> stringComponentEntry : markupIdToComponent.entrySet())",
                "-\t\t{",
                "-\t\t\tfinal Component component = stringComponentEntry.getValue();",
                "-",
                "-\t\t\tif (!containsAncestorFor(component))",
                "+\t\tList<Component> prepared = new ArrayList<>(markupIdToComponent.size());",
                "+\t\t",
                "+\t\t// prepare components",
                "+\t\tFeedbackDelay delay = new FeedbackDelay(RequestCycle.get());",
                "+\t\ttry {",
                "+\t\t\tfor (Component component : markupIdToComponent.values())",
                " \t\t\t{",
                "-\t\t\t\twriteComponent(response, component.getAjaxRegionMarkupId(), component, encoding);",
                "+\t\t\t\tif (!containsAncestorFor(component))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tprepareComponent(component);",
                "+\t\t\t\t\tprepared.add(component);",
                "+\t\t\t\t}",
                " \t\t\t}",
                "+",
                "+\t\t\t// .. now prepare all postponed feedbacks",
                "+\t\t\tdelay.beforeRender();",
                "+\t\t} finally {",
                "+\t\t\tdelay.release();",
                "+\t\t}",
                "+",
                "+\t\t// write components",
                "+\t\tfor (Component component : prepared)",
                "+\t\t{",
                "+\t\t\twriteComponent(response, component.getAjaxRegionMarkupId(), component, encoding);",
                " \t\t}",
                "@@ -253,2 +269,4 @@ public abstract class PartialPageUpdate",
                " \t\t{",
                "+\t\t\tRequestCycle cycle = RequestCycle.get();",
                "+\t\t\t",
                " \t\t\t// some header responses buffer all calls to render*** until close is called.",
                "@@ -260,3 +278,3 @@ public abstract class PartialPageUpdate",
                " \t\t\t// save old response, set new",
                "-\t\t\tResponse oldResponse = RequestCycle.get().setResponse(headerBuffer);",
                "+\t\t\tResponse oldResponse = cycle.setResponse(headerBuffer);",
                " \t\t\theaderBuffer.reset();",
                "@@ -267,3 +285,3 @@ public abstract class PartialPageUpdate",
                " \t\t\t// revert to old response",
                "-\t\t\tRequestCycle.get().setResponse(oldResponse);",
                "+\t\t\tcycle.setResponse(oldResponse);",
                "@@ -275,2 +293,40 @@ public abstract class PartialPageUpdate",
                "+\t/**",
                "+\t * Prepare a single component",
                "+\t *",
                "+\t * @param component",
                "+\t *      the component to prepare",
                "+\t */",
                "+\tprotected void prepareComponent(Component component)",
                "+\t{",
                "+\t\tif (component.getRenderBodyOnly() == true)",
                "+\t\t{",
                "+\t\t\tthrow new IllegalStateException(",
                "+\t\t\t\t\t\"A partial update is not possible for a component that has renderBodyOnly enabled. Component: \" +",
                "+\t\t\t\t\t\t\tcomponent.toString());",
                "+\t\t}",
                "+",
                "+\t\tcomponent.setOutputMarkupId(true);",
                "+",
                "+\t\t// Initialize temporary variables",
                "+\t\tfinal Page page = component.findParent(Page.class);",
                "+\t\tif (page == null)",
                "+\t\t{",
                "+\t\t\t// dont throw an exception but just ignore this component, somehow",
                "+\t\t\t// it got removed from the page.",
                "+\t\t\tLOG.warn(\"Component '{}' not rendered because it was already removed from page\", component);",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\tcomponent.beforeRender();",
                "+\t\t}",
                "+\t\tcatch (RuntimeException e)",
                "+\t\t{",
                "+\t\t\tbodyBuffer.reset();",
                "+\t\t\tthrow e;",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/page/XmlPartialPageUpdate.java b/wicket-core/src/main/java/org/apache/wicket/page/XmlPartialPageUpdate.java",
                "index 28c2ffa475..5f78ef33b7 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/page/XmlPartialPageUpdate.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/page/XmlPartialPageUpdate.java",
                "@@ -61,3 +61,3 @@ public class XmlPartialPageUpdate extends PartialPageUpdate",
                " \t}",
                "-",
                "+\t",
                " \t@Override",
                "@@ -65,21 +65,3 @@ public class XmlPartialPageUpdate extends PartialPageUpdate",
                " \t{",
                "-\t\tif (component.getRenderBodyOnly() == true)",
                "-\t\t{",
                "-\t\t\tthrow new IllegalStateException(",
                "-\t\t\t\t\t\"A partial update is not possible for a component that has renderBodyOnly enabled. Component: \" +",
                "-\t\t\t\t\t\t\tcomponent.toString());",
                "-\t\t}",
                "-",
                "-\t\tcomponent.setOutputMarkupId(true);",
                "-",
                "-\t\t// Initialize temporary variables",
                " \t\tfinal Page page = component.findParent(Page.class);",
                "-\t\tif (page == null)",
                "-\t\t{",
                "-\t\t\t// dont throw an exception but just ignore this component, somehow",
                "-\t\t\t// it got removed from the page.",
                "-\t\t\tLOG.warn(\"Component '{}' with markupid: '{}' not rendered because it was already removed from page\",",
                "-\t\t\t\t\tcomponent, markupId);",
                "-\t\t\treturn;",
                "-\t\t}",
                "@@ -91,30 +73,10 @@ public class XmlPartialPageUpdate extends PartialPageUpdate",
                " \t\t{",
                "+\t\t\t// render any associated headers of the component",
                "+\t\t\twriteHeaderContribution(response, component);",
                "+\t\t\t",
                " \t\t\tbodyBuffer.reset();",
                "-\t\t\tpage.startComponentRender(component);",
                "-",
                "-\t\t\ttry",
                "-\t\t\t{",
                "-\t\t\t\tcomponent.prepareForRender();",
                "-",
                "-\t\t\t\t// render any associated headers of the component",
                "-\t\t\t\twriteHeaderContribution(response, component);",
                "-\t\t\t}",
                "-\t\t\tcatch (RuntimeException e)",
                "-\t\t\t{",
                "-\t\t\t\ttry",
                "-\t\t\t\t{",
                "-\t\t\t\t\tcomponent.afterRender();",
                "-\t\t\t\t}",
                "-\t\t\t\tcatch (RuntimeException e2)",
                "-\t\t\t\t{",
                "-\t\t\t\t\t// ignore this one could be a result off.",
                "-\t\t\t\t}",
                "-\t\t\t\tbodyBuffer.reset();",
                "-\t\t\t\tthrow e;",
                "-\t\t\t}",
                "-",
                " \t\t\ttry",
                " \t\t\t{",
                "-\t\t\t\tcomponent.render();",
                "+\t\t\t\tcomponent.renderPart();",
                " \t\t\t}",
                "@@ -125,4 +87,2 @@ public class XmlPartialPageUpdate extends PartialPageUpdate",
                " \t\t\t}",
                "-",
                "-\t\t\tpage.endComponentRender(component);",
                " \t\t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/Component.java",
                "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "wicket-core/src/main/java/org/apache/wicket/Page.java",
                "wicket-core/src/main/java/org/apache/wicket/core/request/handler/ComponentRenderingRequestHandler.java",
                "wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java",
                "wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackDelay.java",
                "wicket-core/src/main/java/org/apache/wicket/feedback/IFeedback.java",
                "wicket-core/src/main/java/org/apache/wicket/page/PartialPageUpdate.java",
                "wicket-core/src/main/java/org/apache/wicket/page/XmlPartialPageUpdate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6503": ""
            },
            "ghissue_refs": {
                "250": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6503",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 250",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a352fe2befbbf6ce60c1d9617df34f54fa7190ac",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1513267415,
            "hunks": 2,
            "message": "WICKET-6506: Fix performance regression Due to the way modcount == 0 was handled, the iterator was reinitialized on every call to next. The fix is to no longer reset the modcount on detach but increment it. This even fixed a corner case that was marked in the tests.",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "index 86fac874cc..563ac07ff8 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "@@ -593,3 +593,3 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp",
                " \t\t\t{",
                "-\t\t\t\tif (modCounter != 0 && expectedModCounter >= modCounter)",
                "+\t\t\t\tif (expectedModCounter >= modCounter)",
                " \t\t\t\t\treturn;",
                "@@ -1937,3 +1937,3 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp",
                "-\t\tmodCounter = 0;",
                "+\t\tmodCounter++;",
                " \t\tremovals_clear();"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6506": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0dc04e448ba31de15d8c32b1ee964bebed55bc36"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6506",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a647d62a771e503b408c4e0e3e3374f5ff53f65f",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511955902,
            "hunks": 1,
            "message": "WICKET-6448 Provide behavior that disables a button after click",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "new file mode 100644",
                "index 0000000000..109ad1ecc7",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.ajax;",
                "+",
                "+import org.apache.wicket.Component;",
                "+import org.apache.wicket.ajax.attributes.AjaxCallListener;",
                "+",
                "+/**",
                "+ * An {@link AjaxCallListener} to disable the associated component while the AJAX request is running.",
                "+ * Please note that under the hood this class uses DOM attribute 'disabled' to disable a component,",
                "+ * hence it can be used only with those HTML components that support this attribute.",
                "+ * ",
                "+ * @author Andrea Del Bene",
                "+ *",
                "+ */",
                "+public class AjaxDisableComponentListener extends AjaxCallListener",
                "+{",
                "+\t/**",
                "+\t * ",
                "+\t */",
                "+\tprivate static final long serialVersionUID = -3772784701483881109L;",
                "+\tprivate static final String DISABLE_ENABLE_JS = \";document.getElementById('%s').disabled = %s;\";",
                "+",
                "+\t@Override",
                "+\tpublic CharSequence getBeforeHandler(Component component)",
                "+\t{",
                "+\t\treturn generateHandlerJs(component, true);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic CharSequence getCompleteHandler(Component component)",
                "+\t{",
                "+\t\treturn generateHandlerJs(component, false);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic CharSequence getFailureHandler(Component component)",
                "+\t{",
                "+\t\treturn generateHandlerJs(component, false);",
                "+\t}",
                "+",
                "+\tprotected String generateHandlerJ(Component component, boolean disabled)",
                "+\t{",
                "+\t\treturn String.format(DISABLE_ENABLE_JS, component.getMarkupId(), disabled);",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6448": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7eca428fff85cba214b76edee8e486d4aee816d5"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6448",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1176c0a6d7051f51d72eafdd648602c9fad6669a",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508140803,
            "hunks": 34,
            "message": "WICKET-6105 serialVersionUID are added and whitespaces are fixed This closes #235",
            "diff": [
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "index 713f5b7685..fa29a219ed 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "@@ -39,3 +39,3 @@ public class DateTimeApplication extends WicketExampleApplication",
                " \t\treturn DateTimePage.class;",
                "-\t}\t",
                "-}",
                "\\ No newline at end of file",
                "+\t}",
                "+}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "index b102c2ed5b..de0f8ea7df 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "@@ -97,2 +97,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\tpublic void onClick()",
                "@@ -129,2 +131,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -141,2 +145,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t\t@Override",
                "@@ -160,2 +166,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t\t@Override",
                "@@ -199,2 +207,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t@Override",
                "@@ -211,2 +221,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t/**",
                "@@ -225,2 +237,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t\t@Override",
                "@@ -236,2 +250,3 @@ public class DateTimePage extends WicketExamplePage",
                " \t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "@@ -241,2 +256,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t\t@Override",
                "@@ -253,2 +270,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t\t@Override",
                "@@ -278,2 +297,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t\tprotected void onUpdate()",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties b/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "index b9a7819566..98f7925698 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "@@ -46,2 +46,2 @@ TimeField.hoursSeparator=\\u00a0:\\u00a0",
                " TimeField.CSS.hours=time-hours",
                "-TimeField.CSS.minutes=time-minutes",
                "\\ No newline at end of file",
                "+TimeField.CSS.minutes=time-minutes",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "index 2f86c19c04..a9e9cf2b5c 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "@@ -209,2 +209,4 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\treturn new LocalDateTextField(id, dateFieldModel, FormatStyle.SHORT) {",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -231,2 +233,4 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\treturn new TimeField(id, timeFieldModel) {",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java",
                "index a1d1dc0b51..68d46de143 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java",
                "@@ -63,3 +63,4 @@ public class LocalDateTextField extends TextField<LocalDate> implements ITextFor",
                " \t\tthis.converter = new TextFormatConverter() {",
                "-\t\t\t",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -106,3 +107,4 @@ public class LocalDateTextField extends TextField<LocalDate> implements ITextFor",
                " \t\tthis.converter = new TextFormatConverter() {",
                "-\t\t\t",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -159,5 +161,6 @@ public class LocalDateTextField extends TextField<LocalDate> implements ITextFor",
                " \tprivate abstract class TextFormatConverter extends LocalDateConverter {",
                "-\t\t",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\tpublic abstract String getTextFormat(Locale locale);",
                " \t}",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java",
                "index 772b5f319c..5095334eb3 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java",
                "@@ -63,3 +63,4 @@ public class LocalDateTimeTextField extends TextField<LocalDateTime> implements",
                " \t\tthis.converter = new TextFormatConverter() {",
                "-\t\t\t",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -106,3 +107,4 @@ public class LocalDateTimeTextField extends TextField<LocalDateTime> implements",
                " \t\tthis.converter = new TextFormatConverter() {",
                "-\t\t\t",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -159,3 +161,4 @@ public class LocalDateTimeTextField extends TextField<LocalDateTime> implements",
                " \tprivate abstract class TextFormatConverter extends LocalDateTimeConverter {",
                "-\t\t",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\tpublic abstract String getTextFormat(Locale locale);",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java",
                "index 5ea7e3af0f..36df2e1028 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java",
                "@@ -63,3 +63,4 @@ public class LocalTimeTextField extends TextField<LocalTime> implements ITextFor",
                " \t\tthis.converter = new TextFormatConverter() {",
                "-\t\t\t",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -106,3 +107,4 @@ public class LocalTimeTextField extends TextField<LocalTime> implements ITextFor",
                " \t\tthis.converter = new TextFormatConverter() {",
                "-\t\t\t",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "@@ -159,3 +161,4 @@ public class LocalTimeTextField extends TextField<LocalTime> implements ITextFor",
                " \tprivate abstract class TextFormatConverter extends LocalTimeConverter {",
                "-\t\t",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\tpublic abstract String getTextFormat(Locale locale);",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "index 976bc49336..8f56031a03 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "@@ -140,2 +140,4 @@ public class TimeField extends FormComponentPanel<LocalTime>",
                " \t\t\tArrays.asList(AM_PM.values())) {",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t\t@Override",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "index 4b3143d767..c1b8403564 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "@@ -79,2 +79,2 @@ public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                " \t}",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "index 0fcb79cc93..4571b3675d 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "@@ -38,2 +38,3 @@ public class ZonedToLocalDateTimeModel implements IModel<LocalDateTime>",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                " \tprivate IModel<ZonedDateTime> model;",
                "@@ -117,2 +118,2 @@ public class ZonedToLocalDateTimeModel implements IModel<LocalDateTime>",
                " \t}",
                "-}",
                "\\ No newline at end of file",
                "+}"
            ],
            "changed_files": [
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6105": ""
            },
            "ghissue_refs": {
                "235": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6105",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "37a91e4594f15ba48e999a5c7393ebbfb5c470cc",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514669712,
            "hunks": 2,
            "message": "WICKET-6509 Import junit packages as optional",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4fa7ad5a9a..66a2014c00 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -731,3 +731,3 @@",
                " \t\t\t\t\t<artifactId>maven-bundle-plugin</artifactId>",
                "-\t\t\t\t\t<version>3.3.0</version>",
                "+\t\t\t\t\t<version>3.4.0</version>",
                " \t\t\t\t\t<extensions>true</extensions>",
                "@@ -743,4 +743,6 @@",
                " \t\t\t\t\t\t\t\t\t<Export-Package>*</Export-Package>",
                "-\t\t\t\t\t\t\t\t\t<Import-Package>org.apache.wicket*</Import-Package>",
                "-\t\t\t\t\t\t\t\t\t<DynamicImport-Package>*</DynamicImport-Package>",
                "+\t\t\t\t\t\t\t\t\t<Import-Package>org.apache.wicket*",
                "+\t\t\t\t\t\t\t\t\t\torg.junit*;resolution:=optional",
                "+\t\t\t\t\t\t\t\t\t\tjunit.framework*;resolution:=optional</Import-Package>",
                "+\t\t\t\t\t\t\t\t\t<DynamicImport-Package>!junit.framework,!org.junit,*</DynamicImport-Package>",
                " \t\t\t\t\t\t\t\t\t<_nouses>true</_nouses>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6509": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "39d7ac1f80c4ea5366e91eb0fd6deceb219e1b26"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6509",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "58d8ae6694cb3f3370b8e5b604e29e553d6cb9b4",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508590359,
            "hunks": 2,
            "message": "Code formatting",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java",
                "index 0a4170afb8..91b8b2a768 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java",
                "@@ -79,7 +79,12 @@ public class ListenerRequestHandler",
                "-\tpublic boolean includeRenderCount() {",
                "-\t\tif (behaviorId == null) {",
                "+\tpublic boolean includeRenderCount()",
                "+\t{",
                "+\t\tif (behaviorId == null)",
                "+\t\t{",
                " \t\t\treturn ((IRequestListener)getComponent()).rendersPage();",
                "-\t\t} else {",
                "-\t\t\treturn ((IRequestListener)getComponent().getBehaviorById(getBehaviorIndex())).rendersPage();",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\treturn ((IRequestListener)getComponent().getBehaviorById(getBehaviorIndex()))",
                "+\t\t\t\t.rendersPage();",
                " \t\t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b0a12b72d2f298801faac660fde44ba15591f6b7",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507994897,
            "hunks": 2,
            "message": "WICKET-6481 null-safe equals to check page class",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/MountedMapper.java b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/MountedMapper.java",
                "index 39def49c98..5eab42e77c 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/MountedMapper.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/MountedMapper.java",
                "@@ -34,2 +34,3 @@ import org.apache.wicket.util.reference.ClassReference;",
                " import org.apache.wicket.util.string.Strings;",
                "+import java.util.Objects;",
                "@@ -262,3 +263,3 @@ public class MountedMapper extends AbstractBookmarkableMapper",
                " \t{",
                "-\t\treturn pageClass.equals(this.getPageClass());",
                "+\t\treturn Objects.equals(pageClass, this.getPageClass());",
                " \t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/request/mapper/MountedMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6481": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e4f89ca9979af7af05efaf66dea344936d06b943"
                ]
            ],
            "tags": [
                "rel/wicket-7.10.0",
                "rel/wicket-7.11.0",
                "rel/wicket-7.12.0",
                "rel/wicket-7.13.0",
                "rel/wicket-7.14.0",
                "rel/wicket-7.15.0",
                "rel/wicket-7.16.0",
                "rel/wicket-7.17.0",
                "rel/wicket-7.18.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6481",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "34177bf8d1a0de1690a2759d2351efe4634ad902",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507673135,
            "hunks": 25,
            "message": "WICKET-6479 keep window name if the page was not yet rendered into any window, just keep the window name as is, instead of changing it This closes #238",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java b/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java",
                "index 0dff1542f3..357120a820 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java",
                "@@ -21,10 +21,7 @@ import java.util.UUID;",
                " import org.apache.wicket.Component;",
                "-import org.apache.wicket.WicketRuntimeException;",
                "+import org.apache.wicket.Page;",
                " import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;",
                " import org.apache.wicket.markup.head.IHeaderResponse;",
                "-import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                " import org.apache.wicket.markup.head.OnLoadHeaderItem;",
                "-import org.apache.wicket.markup.html.WebPage;",
                " import org.apache.wicket.util.lang.Args;",
                "-import org.apache.wicket.util.string.StringValue;",
                " import org.apache.wicket.util.string.Strings;",
                "@@ -33,6 +30,4 @@ import org.danekja.java.util.function.serializable.SerializableConsumer;",
                " /**",
                "- * An Ajax behavior that notifies when a new browser window/tab is opened with",
                "- * url to a page instance which is already opened in another window/tab in the same user session.",
                "- *",
                "- * Note: this behavior may be assigned only to an instance of a WebPage class.",
                "+ * An Ajax behavior that notifies when a new browser window/tab is opened with url to a page",
                "+ * instance which is already opened in another window/tab in the same user session.",
                "  *",
                "@@ -41,3 +36,3 @@ import org.danekja.java.util.function.serializable.SerializableConsumer;",
                "  */",
                "-public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjaxBehavior",
                "+public class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjaxBehavior",
                " {",
                "@@ -46,8 +41,3 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                " \t/**",
                "-\t * A unique name used for the page window's name",
                "-\t */",
                "-\tprivate final String windowName;",
                "-",
                "-\t/**",
                "-\t * The name of the HTTP request parameter that brings the current page window's name.",
                "+\t * The name of the HTTP request parameter that transports the current page window's name.",
                " \t */",
                "@@ -56,37 +46,9 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                " \t/**",
                "-\t * A flag whether this behavior has been rendered at least once.",
                "+\t * The name of the window the page is bound to.",
                " \t */",
                "-\tprivate boolean hasBeenRendered;",
                "+\tprivate String boundName;",
                " \t/**",
                "-\t * Constructor.",
                "+\t * Overridden to add the current window name to the request.",
                " \t */",
                "-\tpublic AjaxNewWindowNotifyingBehavior()",
                "-\t{",
                "-\t\tthis(UUID.randomUUID().toString());",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Constructor.",
                "-\t *",
                "-\t * @param windowName",
                "-\t *      the custom name to use for the page's window",
                "-\t */",
                "-\tpublic AjaxNewWindowNotifyingBehavior(final String windowName)",
                "-\t{",
                "-\t\tthis.windowName = windowName;",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tprotected final void onBind()",
                "-\t{",
                "-\t\tsuper.onBind();",
                "-",
                "-\t\tComponent component = getComponent();",
                "-\t\tif (component instanceof WebPage == false)",
                "-\t\t{",
                "-\t\t\tthrow new WicketRuntimeException(AjaxNewWindowNotifyingBehavior.class.getName() + \" can be assigned only to WebPage instances.\");",
                "-\t\t}",
                "-\t}",
                "-",
                " \t@Override",
                "@@ -95,7 +57,10 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                " \t\tsuper.updateAjaxAttributes(attributes);",
                "-\t\t",
                "-\t\tString uuidParam = \"return {'\"+ PARAM_WINDOW_NAME +\"': window.name}\";",
                "-\t\tattributes.getDynamicExtraParameters().add(uuidParam);",
                "+",
                "+\t\tString parameter = \"return {'\" + PARAM_WINDOW_NAME + \"': window.name}\";",
                "+\t\tattributes.getDynamicExtraParameters().add(parameter);",
                " \t}",
                "+\t/**",
                "+\t * Overridden to initiate a request once the page was rendered.",
                "+\t */",
                " \t@Override",
                "@@ -105,8 +70,4 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                "-\t\tif (hasBeenRendered == false)",
                "-\t\t{",
                "-\t\t\thasBeenRendered = true;",
                "-\t\t\tresponse.render(OnDomReadyHeaderItem.forScript(String.format(\"window.name='%s'\", windowName)));",
                "-\t\t}",
                "-\t\tresponse.render(OnLoadHeaderItem.forScript(\"setTimeout(function() {\" + getCallbackScript().toString() + \"}, 30);\"));",
                "+\t\tresponse.render(OnLoadHeaderItem",
                "+\t\t\t.forScript(\"setTimeout(function() {\" + getCallbackScript().toString() + \"}, 30);\"));",
                " \t}",
                "@@ -116,5 +77,20 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                " \t{",
                "-\t\tStringValue uuidParam = getComponent().getRequest().getRequestParameters().getParameterValue(PARAM_WINDOW_NAME);",
                "+\t\tString windowName = getComponent().getRequest().getRequestParameters()",
                "+\t\t\t.getParameterValue(PARAM_WINDOW_NAME).toString();",
                "-\t\tif (windowName.equals(uuidParam.toString()) == false)",
                "+\t\tif (boundName == null)",
                "+\t\t{",
                "+\t\t\t// not bound to any window yet",
                "+",
                "+\t\t\tif (Strings.isEmpty(windowName))",
                "+\t\t\t{",
                "+\t\t\t\t// create new name",
                "+\t\t\t\twindowName = newWindowName();",
                "+\t\t\t\ttarget.appendJavaScript(String.format(\"window.name = '%s';\", windowName));",
                "+\t\t\t}",
                "+",
                "+\t\t\t// now bound to window",
                "+\t\t\tboundName = windowName;",
                "+\t\t}",
                "+\t\telse if (boundName.equals(windowName) == false)",
                " \t\t{",
                "@@ -125,9 +101,26 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                " \t/**",
                "-\t * A callback method when a new window/tab is opened for a page instance",
                "-\t * which is already opened in another window/tab.",
                "+\t * Create a name for a nameless window, default uses a random {@link UUID}.",
                "+\t * ",
                "+\t * @return window name",
                "+\t */",
                "+\tprotected String newWindowName()",
                "+\t{",
                "+\t\treturn UUID.randomUUID().toString();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * A callback method when a new window/tab is opened for a page instance which is already opened",
                "+\t * in another window/tab.",
                "+\t * <p>",
                "+\t * Default implementation redirects to a new page instance with identical page parameters.",
                " \t *",
                " \t * @param target",
                "-\t *      the current ajax request handler",
                "+\t *            the current request handler",
                " \t */",
                "-\tprotected abstract void onNewWindow(AjaxRequestTarget target);",
                "+\tprotected void onNewWindow(AjaxRequestTarget target)",
                "+\t{",
                "+\t\tPage page = getComponent().getPage();",
                "+",
                "+\t\tgetComponent().setResponsePage(page.getClass(), page.getPageParameters());",
                "+\t}",
                "@@ -136,4 +129,2 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                " \t * ",
                "-\t * @param windowName",
                "-\t *            the window name",
                " \t * @param onNewWindow",
                "@@ -142,3 +133,3 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                " \t */",
                "-\tpublic static AjaxNewWindowNotifyingBehavior onNewWindow(String windowName, SerializableConsumer<AjaxRequestTarget> onNewWindow)",
                "+\tpublic static AjaxNewWindowNotifyingBehavior onNewWindow(SerializableConsumer<AjaxRequestTarget> onNewWindow)",
                " \t{",
                "@@ -146,8 +137,3 @@ public abstract class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjax",
                "-\t\tif (Strings.isEmpty(windowName))",
                "-\t\t{",
                "-\t\t\twindowName = UUID.randomUUID().toString();",
                "-\t\t}",
                "-",
                "-\t\treturn new AjaxNewWindowNotifyingBehavior(windowName)",
                "+\t\treturn new AjaxNewWindowNotifyingBehavior()",
                " \t\t{",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "index dd44b56ea7..82caa41a0a 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "@@ -18,5 +18,9 @@ package org.apache.wicket.examples.ajax.builtin;",
                "+import org.apache.wicket.Component;",
                " import org.apache.wicket.Page;",
                "+import org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior;",
                "+import org.apache.wicket.application.IComponentInitializationListener;",
                " import org.apache.wicket.examples.WicketExampleApplication;",
                " import org.apache.wicket.examples.ajax.builtin.modal.ModalWindowPage;",
                "+import org.apache.wicket.markup.html.WebPage;",
                " import org.apache.wicket.response.filter.AjaxServerAndClientTimeFilter;",
                "@@ -41,2 +45,13 @@ public class AjaxApplication extends WicketExampleApplication",
                " \t\tgetDebugSettings().setAjaxDebugModeEnabled(true);",
                "+\t\t",
                "+\t\tgetComponentInitializationListeners().add(new IComponentInitializationListener()",
                "+\t\t{",
                "+\t\t\t@Override",
                "+\t\t\tpublic void onInitialize(Component component)",
                "+\t\t\t{",
                "+\t\t\t\tif (component instanceof WebPage) {",
                "+\t\t\t\t\tcomponent.add(new AjaxNewWindowNotifyingBehavior());",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t});"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6479": ""
            },
            "ghissue_refs": {
                "238": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6479",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 238",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "11877422bc2f5a934d8bc9c3080ffc108e4d4314",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508502315,
            "hunks": 60,
            "message": "WICKET-6055 non-blocking lazy loading this closes #151 and closes #240",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java b/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java",
                "index 0c9a276762..7fd36062d6 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java",
                "@@ -114,2 +114,6 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav",
                " \t{",
                "+\t\t// onTimer might remove this behavior, so keep the component",
                "+\t\t// so the timeout can be cleared later on",
                "+\t\tComponent component = getComponent();",
                "+\t\t",
                " \t\tif (shouldTrigger())",
                "@@ -126,3 +130,3 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav",
                "-\t\tclearTimeout(target.getHeaderResponse());",
                "+\t\tclearTimeout(component, target.getHeaderResponse());",
                " \t}",
                "@@ -183,5 +187,5 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav",
                "-\tprivate void clearTimeout(IHeaderResponse headerResponse)",
                "+\tprivate void clearTimeout(Component component, IHeaderResponse headerResponse)",
                " \t{",
                "-\t\theaderResponse.render(OnLoadHeaderItem.forScript(\"Wicket.Timer.clear('\" + getComponent().getMarkupId() + \"');\"));",
                "+\t\theaderResponse.render(OnLoadHeaderItem.forScript(\"Wicket.Timer.clear('\" + component.getMarkupId() + \"');\"));",
                " \t}",
                "@@ -202,3 +206,3 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav",
                " \t\t\t{",
                "-\t\t\t\tclearTimeout(target.getHeaderResponse());",
                "+\t\t\t\tclearTimeout(getComponent(), target.getHeaderResponse());",
                " \t\t\t}",
                "@@ -210,3 +214,3 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav",
                " \t{",
                "-\t\tcomponent.getRequestCycle().find(IPartialPageRequestHandler.class).ifPresent(target -> clearTimeout(target.getHeaderResponse()));",
                "+\t\tcomponent.getRequestCycle().find(IPartialPageRequestHandler.class).ifPresent(target -> clearTimeout(component, target.getHeaderResponse()));",
                " \t}",
                "@@ -216,3 +220,5 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav",
                " \t{",
                "-\t\tgetComponent().getRequestCycle().find(IPartialPageRequestHandler.class).ifPresent(target -> clearTimeout(target.getHeaderResponse()));",
                "+\t\tComponent component = getComponent();",
                "+\t\t",
                "+\t\tcomponent.getRequestCycle().find(IPartialPageRequestHandler.class).ifPresent(target -> clearTimeout(component, target.getHeaderResponse()));",
                " \t}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.html",
                "index 821833d2ab..576b194f3c 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.html",
                "@@ -3,2 +3,3 @@",
                "+<p>",
                " This example demonstrates the AjaxLazyLoadPanel",
                "@@ -7,6 +8,20 @@ So panels that can take a while too create can be lazy created",
                " by an ajax call after the page is rendered.",
                "-  ",
                "-<br/><br/>",
                "+</p>",
                "+",
                "+<div wicket:id=\"nonblocking\">",
                "+\t<h2>Non-blocking lazy panels</h2>",
                "+",
                "+\t<p><a href=\"#\" wicket:id=\"start\">Start non-blocking panels</a> (<a href=\"#\" wicket:id=\"startAjax\">via Ajax</a>)</p>",
                "+",
                "+\t<div wicket:id=\"repeater\"></div>",
                "+</div>",
                "+",
                "+<div wicket:id=\"blocking\">",
                "+\t<h2>Blocking lazy panels</h2>",
                "+\t",
                "+\t<p><a href=\"#\" wicket:id=\"start\">Start blocking panels</a> (<a href=\"#\" wicket:id=\"startAjax\">via Ajax</a>)</p>",
                "+",
                "+\t<div wicket:id=\"repeater\"></div>",
                "+</div>",
                "-<div wicket:id=\"lazy\"></div>",
                " </wicket:extend>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.java",
                "index 23b4403e09..ba8908476f 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.java",
                "@@ -18,35 +18,136 @@ package org.apache.wicket.examples.ajax.builtin;",
                "-import org.apache.wicket.Component;",
                "+import java.util.Random;",
                "+",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.markup.html.AjaxLink;",
                " import org.apache.wicket.extensions.ajax.markup.html.AjaxLazyLoadPanel;",
                "+import org.apache.wicket.markup.html.WebMarkupContainer;",
                " import org.apache.wicket.markup.html.basic.Label;",
                "+import org.apache.wicket.markup.html.link.Link;",
                "+import org.apache.wicket.markup.repeater.RepeatingView;",
                "+import org.apache.wicket.util.time.Duration;",
                "-/**",
                "- * @author jcompagner",
                "- */",
                "+@SuppressWarnings({ \"javadoc\", \"serial\" })",
                " public class LazyLoadingPage extends BasePage",
                " {",
                "-\t/**",
                "-\t * Construct.",
                "-\t */",
                "+\tprivate Random r = new Random();",
                "+\tprivate WebMarkupContainer nonblocking;",
                "+\tprivate WebMarkupContainer blocking;",
                "+\tprivate RepeatingView blockingRepeater;",
                "+\tprivate RepeatingView nonBlockingRepeater;",
                "+",
                " \tpublic LazyLoadingPage()",
                " \t{",
                "-\t\tadd(new AjaxLazyLoadPanel(\"lazy\")",
                "+\t\tnonblocking = new WebMarkupContainer(\"nonblocking\");",
                "+\t\tnonblocking.setOutputMarkupId(true);",
                "+\t\tadd(nonblocking);",
                "+\t\t",
                "+\t\tnonblocking.add(new Link<Void>(\"start\")",
                "+\t\t{",
                "+\t\t\t@Override",
                "+\t\t\tpublic void onClick()",
                "+\t\t\t{",
                "+\t\t\t\taddNonBlockingPanels();",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\tnonblocking.add(new AjaxLink<Void>(\"startAjax\")",
                "+\t\t{",
                "+\t\t\t@Override",
                "+\t\t\tpublic void onClick(AjaxRequestTarget target)",
                "+\t\t\t{",
                "+\t\t\t\taddNonBlockingPanels();",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\t",
                "+\t\tnonBlockingRepeater = new RepeatingView(\"repeater\");",
                "+\t\tnonblocking.add(nonBlockingRepeater);",
                "+\t\t",
                "+\t\tblocking = new WebMarkupContainer(\"blocking\");",
                "+\t\tblocking.setOutputMarkupId(true);",
                "+\t\tadd(blocking);",
                "+\t\t",
                "+\t\tblocking.add(new Link<Void>(\"start\")",
                " \t\t{",
                "-",
                " \t\t\t@Override",
                "-\t\t\tpublic Component getLazyLoadComponent(String id)",
                "+\t\t\tpublic void onClick()",
                " \t\t\t{",
                "-\t\t\t\t// sleep for 5 seconds to show the behavior",
                "-\t\t\t\ttry",
                "+\t\t\t\taddBlockingPanels();",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\tblocking.add(new AjaxLink<Void>(\"startAjax\")",
                "+\t\t{",
                "+\t\t\t@Override",
                "+\t\t\tpublic void onClick(AjaxRequestTarget target)",
                "+\t\t\t{",
                "+\t\t\t\taddBlockingPanels();",
                "+\t\t\t}",
                "+\t\t});",
                "+",
                "+\t\tblockingRepeater = new RepeatingView(\"repeater\");",
                "+\t\tblocking.add(blockingRepeater);",
                "+\t}",
                "+",
                "+\tprivate void addNonBlockingPanels()",
                "+\t{",
                "+\t\tnonBlockingRepeater.removeAll();",
                "+",
                "+\t\tfor (int i = 0; i < 10; i++)",
                "+\t\t\tnonBlockingRepeater.add(new AjaxLazyLoadPanel<Label>(nonBlockingRepeater.newChildId())",
                "+\t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t\tprivate long startTime = System.currentTimeMillis();",
                "+",
                "+\t\t\t\tprivate int seconds = r.nextInt(10);",
                "+",
                "+\t\t\t\t@Override",
                "+\t\t\t\tprotected boolean isContentReady()",
                " \t\t\t\t{",
                "-\t\t\t\t\tThread.sleep(5000);",
                "+\t\t\t\t\treturn Duration.milliseconds(System.currentTimeMillis() - startTime)",
                "+\t\t\t\t\t\t.seconds() > seconds;",
                " \t\t\t\t}",
                "-\t\t\t\tcatch (InterruptedException e)",
                "+\t\t\t\t",
                "+\t\t\t\t@Override",
                "+\t\t\t\tprotected Duration getUpdateInterval()",
                " \t\t\t\t{",
                "-\t\t\t\t\tthrow new RuntimeException(e);",
                "+\t\t\t\t\treturn Duration.milliseconds(seconds * 1000 / 10);",
                " \t\t\t\t}",
                "-\t\t\t\treturn new Label(id, \"Lazy Loaded after 5 seconds\");",
                "-\t\t\t}",
                "-\t\t});",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic Label getLazyLoadComponent(String id)",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn new Label(id, \"Lazy Loaded after \" + seconds + \" seconds\");",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t",
                "+\t\tgetRequestCycle().find(AjaxRequestTarget.class).ifPresent(t -> t.add(nonblocking));",
                "+\t}",
                "+",
                "+\tprivate void addBlockingPanels()",
                "+\t{",
                "+\t\tblockingRepeater.removeAll();",
                "+",
                "+\t\tfor (int i = 0; i < 5; i++)",
                "+\t\t\tblockingRepeater.add(new AjaxLazyLoadPanel<Label>(blockingRepeater.newChildId())",
                "+\t\t\t{",
                "+\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t\tprivate int seconds = r.nextInt(5);",
                "+",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic Label getLazyLoadComponent(String markupId)",
                "+\t\t\t\t{",
                "+\t\t\t\t\ttry",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tThread.sleep(seconds * 1000);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcatch (InterruptedException e)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\treturn new Label(markupId,",
                "+\t\t\t\t\t\t\"Lazy loaded after blocking the Wicket thread for \" + seconds + \" seconds\");",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t",
                "+\t\tgetRequestCycle().find(AjaxRequestTarget.class).ifPresent(t -> t.add(blocking));",
                " \t}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanel.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanel.java",
                "index ce473ad01c..783b64d66d 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanel.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanel.java",
                "@@ -18,3 +18,7 @@ package org.apache.wicket.extensions.ajax.markup.html;",
                "+import java.util.List;",
                "+import java.util.Optional;",
                "+",
                " import org.apache.wicket.Component;",
                "+import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;",
                " import org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;",
                "@@ -23,3 +27,2 @@ import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;",
                " import org.apache.wicket.markup.head.IHeaderResponse;",
                "-import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                " import org.apache.wicket.markup.html.basic.Label;",
                "@@ -30,9 +33,18 @@ import org.apache.wicket.request.cycle.RequestCycle;",
                " import org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler;",
                "+import org.apache.wicket.util.time.Duration;",
                "+import org.apache.wicket.util.visit.IVisit;",
                "+import org.apache.wicket.util.visit.IVisitor;",
                " /**",
                "- * A panel where you can lazy load another panel. This can be used if you have a panel/component",
                "- * that is pretty heavy in creation and you first want to show the user the page and then replace",
                "- * the panel when it is ready.",
                "- * ",
                "- * @author jcompagner",
                "+ * A panel which load lazily a single content component. This can be used if you have a",
                "+ * component that is pretty heavy in creation and you first want to show the user the page and",
                "+ * then replace the panel when it is ready.",
                "+ * <p>",
                "+ * This panel will wait with adding the content until {@link #isContentReady()} returns",
                "+ * {@code true}. It will poll using an {@link AbstractAjaxTimerBehavior} that is installed on the page. When the",
                "+ * component is replaced, the timer stops. When you have multiple {@code AjaxLazyLoadPanel}s on the",
                "+ * same page, only one timer is used and all panels piggyback on this single timer.",
                "+ * <p> ",
                "+ * This component will also replace the contents when a normal request comes through and the",
                "+ * content is ready.",
                "  * ",
                "@@ -40,3 +52,3 @@ import org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandle",
                "  */",
                "-public abstract class AjaxLazyLoadPanel extends Panel",
                "+public abstract class AjaxLazyLoadPanel<T extends Component> extends Panel",
                " {",
                "@@ -47,9 +59,11 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t */",
                "-\tpublic static final String LAZY_LOAD_COMPONENT_ID = \"content\";",
                "+\tprivate static final String CONTENT_ID = \"content\";",
                "+\t",
                "+\t/**",
                "+\t * @deprecated will be removed in Wicket 9",
                "+\t */",
                "+\t@Deprecated",
                "+\tpublic static final String LAZY_LOAD_COMPONENT_ID = CONTENT_ID;",
                "-\t// state,",
                "-\t// 0:add loading component",
                "-\t// 1:loading component added, waiting for ajax replace",
                "-\t// 2:ajax replacement completed",
                "-\tprivate byte state = 0;",
                "+\tprivate boolean loaded;",
                "@@ -76,43 +90,15 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t\tsetOutputMarkupId(true);",
                "-",
                "-\t\tadd(new AbstractDefaultAjaxBehavior()",
                "-\t\t{",
                "-\t\t\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tprotected void respond(final AjaxRequestTarget target)",
                "-\t\t\t{",
                "-\t\t\t\tif (state < 2)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tComponent component = getLazyLoadComponent(LAZY_LOAD_COMPONENT_ID);",
                "-\t\t\t\t\tAjaxLazyLoadPanel.this.replace(component);",
                "-\t\t\t\t\tsetState((byte) 2);",
                "-\t\t\t\t\tAjaxLazyLoadPanel.this.onComponentLoaded(component, target);",
                "-\t\t\t\t}",
                "-\t\t\t\ttarget.add(AjaxLazyLoadPanel.this);",
                "-",
                "-\t\t\t}",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)",
                "-\t\t\t{",
                "-\t\t\t\tsuper.updateAjaxAttributes(attributes);",
                "-\t\t\t\tAjaxLazyLoadPanel.this.updateAjaxAttributes(attributes);",
                "-\t\t\t}",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tpublic void renderHead(final Component component, final IHeaderResponse response)",
                "-\t\t\t{",
                "-\t\t\t\tsuper.renderHead(component, response);",
                "-\t\t\t\tif (state < 2)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tCharSequence js = getCallbackScript(component);",
                "-\t\t\t\t\thandleCallbackScript(response, js, component);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t});",
                " \t}",
                "-\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)",
                "+\t/**",
                "+\t * Determines that the content we're waiting for is ready, typically used in polling background",
                "+\t * threads for their result. Override this to implement your own check.",
                "+\t * <p>",
                "+\t * This default implementation returns {@code true}, i.e. assuming the content is ready immediately.",
                "+\t * ",
                "+\t * @return whether the actual content is ready",
                "+\t */",
                "+\tprotected boolean isContentReady()",
                " \t{",
                "+\t\treturn true;",
                " \t}",
                "@@ -120,15 +106,6 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t/**",
                "-\t * Allows subclasses to change the callback script if needed.",
                "-\t * ",
                "-\t * @param response",
                "-\t *      the current response that writes to the header",
                "-\t * @param callbackScript",
                "-\t *      the JavaScript to write in the header",
                "-\t * @param component",
                "-\t *      the component which produced the callback script",
                "-\t */",
                "-\tprotected void handleCallbackScript(final IHeaderResponse response,",
                "-\t\tfinal CharSequence callbackScript, final Component component)",
                "+\t * @deprecated this method is not called, and will be removed in Wicket 9",
                "+\t */",
                "+\tprotected final void updateAjaxAttributes(AjaxRequestAttributes attributes)",
                " \t{",
                "-\t\tresponse.render(OnDomReadyHeaderItem.forScript(callbackScript));",
                " \t}",
                "@@ -136,13 +113,9 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t/**",
                "-\t * @see org.apache.wicket.Component#onBeforeRender()",
                "+\t * @deprecated this method is not called, and will be removed in Wicket 9",
                " \t */",
                "-\t@Override",
                "-\tprotected void onBeforeRender()",
                "+\t@Deprecated",
                "+\tprotected final void handleCallbackScript(final IHeaderResponse response,",
                "+\t\tfinal CharSequence callbackScript, final Component component)",
                " \t{",
                "-\t\tif (state == 0)",
                "-\t\t{",
                "-\t\t\tadd(getLoadingComponent(LAZY_LOAD_COMPONENT_ID));",
                "-\t\t\tsetState((byte)1);",
                "-\t\t}",
                "-\t\tsuper.onBeforeRender();",
                "+\t\t",
                " \t}",
                "@@ -150,9 +123,15 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t/**",
                "+\t * Create a loading component shown instead of the actual content until it is {@link #isContentReady()}.",
                " \t * ",
                "-\t * @param state",
                "+\t * @param markupId",
                "+\t *            The components markupid.",
                "+\t * @return The component to show while the real content isn't ready yet",
                " \t */",
                "-\tprivate void setState(final byte state)",
                "+\tpublic Component getLoadingComponent(final String markupId)",
                " \t{",
                "-\t\tthis.state = state;",
                "-\t\tgetPage().dirty();",
                "+\t\tIRequestHandler handler = new ResourceReferenceRequestHandler(",
                "+\t\t\tAbstractDefaultAjaxBehavior.INDICATOR);",
                "+\t\treturn new Label(markupId,",
                "+\t\t\t\"<img alt=\\\"Loading...\\\" src=\\\"\" + RequestCycle.get().urlFor(handler) + \"\\\"/>\")",
                "+\t\t\t\t.setEscapeModelStrings(false);",
                " \t}",
                "@@ -160,2 +139,5 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t/**",
                "+\t * Factory method for creating the lazily loaded content that replaces the loading component after",
                "+\t * {@link #isContentReady()} returns {@code true}. You may call setRenderBodyOnly(true)",
                "+\t * on this component if you need the body only.",
                " \t * ",
                "@@ -163,16 +145,25 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t *            The components markupid.",
                "-\t * @return The component that must be lazy created. You may call setRenderBodyOnly(true) on this",
                "-\t *         component if you need the body only.",
                "+\t * @return the content to show after {@link #isContentReady()}",
                " \t */",
                "-\tpublic abstract Component getLazyLoadComponent(String markupId);",
                "+\tpublic abstract T getLazyLoadComponent(String markupId);",
                " \t/**",
                "-\t * Called when the placeholder component is replaced with the lazy loaded one.",
                "+\t * @deprecated override {@link #onContentLoaded(Component, Optional)} instead - will be removed in Wicket 9",
                "+\t */",
                "+\t@Deprecated",
                "+\tprotected final void onComponentLoaded(Component component, AjaxRequestTarget target)",
                "+\t{",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Called after the loading component was replaced with the lazy loaded content.",
                "+\t * <p>",
                "+\t * This default implementation does nothing.",
                " \t *",
                "-\t * @param component",
                "-\t *      The lazy loaded component",
                "+\t * @param content",
                "+\t *            The lazy loaded content",
                " \t * @param target",
                "-\t *      The Ajax request handler",
                "+\t *            optional Ajax request handler",
                " \t */",
                "-\tprotected void onComponentLoaded(Component component, AjaxRequestTarget target)",
                "+\tprotected void onContentLoaded(T content, Optional<AjaxRequestTarget> target)",
                " \t{",
                "@@ -181,14 +172,144 @@ public abstract class AjaxLazyLoadPanel extends Panel",
                " \t/**",
                "-\t * @param markupId",
                "-\t *            The components markupid.",
                "-\t * @return The component to show while the real component is being created.",
                "+\t * Installs a page-global timer if not already present.",
                " \t */",
                "-\tpublic Component getLoadingComponent(final String markupId)",
                "+\t@Override",
                "+\tprotected void onInitialize()",
                " \t{",
                "-\t\tIRequestHandler handler = new ResourceReferenceRequestHandler(",
                "-\t\t\tAbstractDefaultAjaxBehavior.INDICATOR);",
                "-\t\treturn new Label(markupId, \"<img alt=\\\"Loading...\\\" src=\\\"\" +",
                "-\t\t\tRequestCycle.get().urlFor(handler) + \"\\\"/>\").setEscapeModelStrings(false);",
                "+\t\tsuper.onInitialize();",
                "+",
                "+\t\tinitTimer();",
                " \t}",
                "+\t/**",
                "+\t * Initialize a timer - default implementation installs an {@link AbstractAjaxTimerBehavior} on the page,",
                "+\t * if it is not already present.",
                "+\t */",
                "+\tprotected void initTimer()",
                "+\t{",
                "+\t\t// when the timer is not yet installed add it",
                "+\t\tList<AjaxLazyLoadTimer> behaviors = getPage().getBehaviors(AjaxLazyLoadTimer.class);",
                "+\t\tif (behaviors.isEmpty()) {",
                "+\t\t\tAbstractAjaxTimerBehavior timer = new AjaxLazyLoadTimer();",
                "+\t\t\tgetPage().add(timer);",
                "+\t\t\t",
                "+\t\t\tgetRequestCycle().find(AjaxRequestTarget.class).ifPresent(target -> {",
                "+\t\t\t\t// the timer will not be rendered, so stop it first",
                "+\t\t\t\t// and restart it immediately on the Ajax request",
                "+\t\t\t\ttimer.stop(null);",
                "+\t\t\t\ttimer.restart(target);",
                "+\t\t\t});",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void onConfigure()",
                "+\t{",
                "+\t\tsuper.onConfigure();",
                "+",
                "+\t\tif (get(CONTENT_ID) == null) {",
                "+\t\t\tadd(getLoadingComponent(CONTENT_ID));",
                "+\t\t} else {",
                "+\t\t\tisLoaded();",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Get the preferred interval for updates.",
                "+\t * <p>",
                "+\t * Since all LazyLoadingPanels on a page share the same Ajax timer, its update interval",
                "+\t * is derived from the minimum of all panel's update intervals.",
                "+\t * ",
                "+\t * @return update interval, must not be {@value null}",
                "+\t */",
                "+\tprotected Duration getUpdateInterval() {",
                "+\t\treturn Duration.seconds(1);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Check whether the content is loaded.",
                "+\t * <p>",
                "+\t * If not loaded already and the content is ready, replaces the lazy loading component with ",
                "+\t * the lazily loaded content. ",
                "+\t * ",
                "+\t * @return {@code true} if content is loaded",
                "+\t * ",
                "+\t * @see #isContentReady()",
                "+\t */",
                "+\tprotected final boolean isLoaded() {",
                "+\t\tif (loaded == false)",
                "+\t\t{",
                "+\t\t\tif (isContentReady())",
                "+\t\t\t{",
                "+\t\t\t\tloaded = true;",
                "+",
                "+\t\t\t\t// create the lazy load component",
                "+\t\t\t\tT content = getLazyLoadComponent(CONTENT_ID);",
                "+",
                "+\t\t\t\t// replace the loading component with the new component",
                "+\t\t\t\tAjaxLazyLoadPanel.this.replace(content);",
                "+",
                "+\t\t\t\tOptional<AjaxRequestTarget> target = getRequestCycle().find(AjaxRequestTarget.class);",
                "+",
                "+\t\t\t\t// notify our subclasses of the updated component",
                "+\t\t\t\tonContentLoaded(content, target);",
                "+",
                "+\t\t\t\t// repaint our selves if there's an AJAX request in play, otherwise let the page",
                "+\t\t\t\t// redraw itself",
                "+\t\t\t\ttarget.ifPresent(t -> t.add(AjaxLazyLoadPanel.this));",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\t",
                "+\t\treturn loaded;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * The AJAX timer for updating the AjaxLazyLoadPanel. Is designed to be a page-local singleton",
                "+\t * running as long as LazyLoadPanels are still loading.",
                "+\t * ",
                "+\t * @see AjaxLazyLoadPanel#isLoaded()",
                "+\t */",
                "+\tstatic class AjaxLazyLoadTimer extends AbstractAjaxTimerBehavior",
                "+\t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\tpublic AjaxLazyLoadTimer()",
                "+\t\t{",
                "+\t\t\tsuper(Duration.ONE_SECOND);",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tprotected void onTimer(AjaxRequestTarget target)",
                "+\t\t{",
                "+\t\t\tload(target);",
                "+\t\t}",
                "+",
                "+\t\tpublic void load(AjaxRequestTarget target)",
                "+\t\t{",
                "+\t\t\tsetUpdateInterval(Duration.MAXIMUM);",
                "+\t\t\t",
                "+\t\t\tgetComponent().getPage().visitChildren(AjaxLazyLoadPanel.class, new IVisitor<AjaxLazyLoadPanel<?>, Void>()",
                "+\t\t\t{",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic void component(AjaxLazyLoadPanel<?> panel, IVisit<Void> visit)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tif (panel.isLoaded() == false) {",
                "+\t\t\t\t\t\tDuration updateInterval = panel.getUpdateInterval();",
                "+\t\t\t\t\t\tif (getUpdateInterval() == null) {",
                "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"update interval must not ben null\");",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t",
                "+\t\t\t\t\t\tsetUpdateInterval(Duration.min(getUpdateInterval(), updateInterval));",
                "+\t\t\t\t\t}\t\t\t\t\t\t",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+",
                "+\t\t\t// all panels have completed their replacements, we can stop the timer",
                "+\t\t\tif (Duration.MAXIMUM.equals(getUpdateInterval()))",
                "+\t\t\t{",
                "+\t\t\t\tstop(target);",
                "+\t\t\t\t",
                "+\t\t\t\tgetComponent().remove(this);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                " }",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanelTester.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanelTester.java",
                "index a141108458..13a65b9ac5 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanelTester.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanelTester.java",
                "@@ -20,9 +20,6 @@ import java.util.List;",
                "-import org.apache.wicket.MarkupContainer;",
                "-import org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior;",
                "-import org.apache.wicket.behavior.AbstractAjaxBehavior;",
                "-import org.apache.wicket.behavior.Behavior;",
                "+import org.apache.wicket.Page;",
                "+import org.apache.wicket.extensions.ajax.markup.html.AjaxLazyLoadPanel.AjaxLazyLoadTimer;",
                " import org.apache.wicket.util.tester.BaseWicketTester;",
                "-import org.apache.wicket.util.visit.IVisit;",
                "-import org.apache.wicket.util.visit.IVisitor;",
                "+import org.apache.wicket.util.time.Duration;",
                " import org.slf4j.Logger;",
                "@@ -37,3 +34,2 @@ public class AjaxLazyLoadPanelTester",
                " {",
                "-",
                " \tprivate static final Logger logger = LoggerFactory.getLogger(AjaxLazyLoadPanelTester.class);",
                "@@ -41,43 +37,58 @@ public class AjaxLazyLoadPanelTester",
                " \t/**",
                "-\t * Searches the {@link MarkupContainer}, looking for and triggering {@link AjaxLazyLoadPanel}s",
                "-\t * to fetch their contents. Very useful for testing pages / panels that use",
                "-\t * {@link AjaxLazyLoadPanel}s.",
                "+\t * Triggers loading of all {@link AjaxLazyLoadPanel}'s content in the last rendered page.",
                " \t * ",
                " \t * @param wt",
                "-\t *            the {@link BaseWicketTester} to execute the behaviour (",
                "-\t *            {@link BaseWicketTester#executeBehavior} ).",
                "-\t * @param container",
                "-\t *            contains the {@link AjaxLazyLoadPanel} to trigger",
                "+\t *            the tester",
                " \t */",
                "-\tpublic static void executeAjaxLazyLoadPanel(final BaseWicketTester wt,",
                "-\t\tfinal MarkupContainer container)",
                "+\tpublic static void executeAjaxLazyLoadPanel(final BaseWicketTester wt)",
                " \t{",
                "-\t\tcontainer.visitChildren(AjaxLazyLoadPanel.class, new IVisitor<AjaxLazyLoadPanel, Void>()",
                "-\t\t{",
                "-\t\t\t@Override",
                "-\t\t\tpublic void component(final AjaxLazyLoadPanel component, final IVisit<Void> visit)",
                "-\t\t\t{",
                "-\t\t\t\t// get the AbstractAjaxBehaviour which is responsible for",
                "-\t\t\t\t// getting the contents of the lazy panel",
                "-\t\t\t\tList<AbstractAjaxBehavior> behaviors = component.getBehaviors(AbstractAjaxBehavior.class);",
                "-\t\t\t\tif (behaviors.size() == 0)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tlogger.warn(\"AjaxLazyLoadPanel child found, but no attached AbstractAjaxBehaviors found. A curious situation...\");",
                "-\t\t\t\t}",
                "-\t\t\t\tfor (Behavior b : behaviors)",
                "-\t\t\t\t{",
                "-\t\t\t\t\tif (!(b instanceof AjaxSelfUpdatingTimerBehavior))",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\t// tell wicket tester to execute it :)",
                "-\t\t\t\t\t\tlogger.debug(\"Triggering lazy panel: \" + component.getClassRelativePath());",
                "-\t\t\t\t\t\tAbstractAjaxBehavior abstractAjaxBehaviour = (AbstractAjaxBehavior)b;",
                "-\t\t\t\t\t\twt.executeBehavior(abstractAjaxBehaviour);",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\t// continue looking for other AjazLazyLoadPanel",
                "-\t\t\t}",
                "-\t\t});",
                "+\t\texecuteAjaxLazyLoadPanel(wt, wt.getLastRenderedPage());",
                " \t}",
                "+\t/**",
                "+\t * Triggers loading of all {@link AjaxLazyLoadPanel}'s content in a page.",
                "+\t * ",
                "+\t * @param wt",
                "+\t *            the tester",
                "+\t * @param page",
                "+\t *            contains the {@link AjaxLazyLoadPanel}s to trigger",
                "+\t */",
                "+\tpublic static void executeAjaxLazyLoadPanel(final BaseWicketTester wt, final Page page)",
                "+\t{",
                "+\t\t// get the AbstractAjaxBehaviour which is responsible for",
                "+\t\t// getting the contents of the lazy panel",
                "+\t\tList<AjaxLazyLoadTimer> behaviors = page.getBehaviors(AjaxLazyLoadTimer.class);",
                "+\t\tif (behaviors.size() == 0)",
                "+\t\t{",
                "+\t\t\tlogger.warn(\"No timer behavior for AjaxLazyLoadPanel found. A curious situation...\");",
                "+\t\t}",
                "+\t\telse if (behaviors.size() > 1)",
                "+\t\t{",
                "+\t\t\tlogger.warn(",
                "+\t\t\t\t\"Multiple timer behavior for AjaxLazyLoadPanel found. A curious situation...\");",
                "+\t\t}",
                "+\t\twt.executeBehavior(behaviors.get(0));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Triggers loading of a single {@link AjaxLazyLoadPanel}.",
                "+\t * ",
                "+\t * @param wt",
                "+\t *            the tester",
                "+\t * @param panel",
                "+\t *            the panel",
                "+\t * @return\tupdate duration or {@value null} of already loadedO",
                "+\t */",
                "+\tpublic static Duration loadAjaxLazyLoadPanel(final BaseWicketTester wt, final AjaxLazyLoadPanel<?> panel)",
                "+\t{",
                "+\t\tif (panel.isLoaded())",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\treturn panel.getUpdateInterval();",
                "+\t\t}",
                "+\t}",
                " }",
                "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/value/LongValue.java b/wicket-util/src/main/java/org/apache/wicket/util/value/LongValue.java",
                "index 8c960601c9..3e5e4bc42c 100755",
                "--- a/wicket-util/src/main/java/org/apache/wicket/util/value/LongValue.java",
                "+++ b/wicket-util/src/main/java/org/apache/wicket/util/value/LongValue.java",
                "@@ -219,2 +219,23 @@ public class LongValue implements Comparable<LongValue>, Serializable",
                "+\t/**",
                "+\t * Returns the min of the two long values.",
                "+\t * ",
                "+\t * @param <T>",
                "+\t * @param lhs",
                "+\t * @param rhs",
                "+\t * @throws IllegalArgumentException",
                "+\t *             if either argument is {@code null}",
                "+\t * @return min value",
                "+\t */",
                "+\tpublic static <T extends LongValue> T min(final T lhs, final T rhs)",
                "+\t{",
                "+\t\tArgs.notNull(lhs, \"lhs\");",
                "+\t\tArgs.notNull(rhs, \"rhs\");",
                "+\t\tif (lhs.compareTo(rhs) < 0)",
                "+\t\t{",
                "+\t\t\treturn lhs;",
                "+\t\t}",
                "+\t\treturn rhs;",
                "+\t}",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/LazyLoadingPage.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanel.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxLazyLoadPanelTester.java",
                "wicket-util/src/main/java/org/apache/wicket/util/value/LongValue.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6055": ""
            },
            "ghissue_refs": {
                "151": "WICKET-6055 non-blocking lazy loading volume II #239 WICKET-6055 non-blocking lazy loading #240",
                "240": "WICKET-6055 Made AjaxLazyLoadPanel non-blocking #151"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6055",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 151, 240",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f1dd096c772feb9f878f783c5764a37403e82e5b",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516311801,
            "hunks": 11,
            "message": "WICKET-6517 added some CSS styling",
            "diff": [
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "index 4642ae3c1c..2ed083d2e4 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "@@ -2,2 +2,17 @@",
                " <html>",
                "+<head>",
                "+\t<wicket:head>",
                "+\t\t<style>",
                "+\t\t\t.drop-zone {",
                "+\t\t\t\tborder: 1px dotted #FF9925;",
                "+\t\t\t\twidth:200px;",
                "+\t\t\t\theight:200px;",
                "+\t\t\t}",
                "+\t\t\t.drop-zone.drag-over {",
                "+\t\t\t\tbackground: #FF9925;",
                "+\t\t\t\tcolor: #ffffff;",
                "+\t\t\t}",
                "+\t\t</style>",
                "+\t</wicket:head>",
                "+</head>",
                " <body>",
                "@@ -17,3 +32,3 @@ Demonstrates Wicket's ability to transparently handle multipart forms via AJAX.<",
                "-<div wicket:id=\"drop\" style=\"border: 1px dotted black; width:200px; height:200px;\">",
                "+<div wicket:id=\"drop\" class=\"drop-zone\">",
                " \tDrop file here.",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties b/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "index 98f7925698..6b43d432e5 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "@@ -47 +47,3 @@ TimeField.CSS.hours=time-hours",
                " TimeField.CSS.minutes=time-minutes",
                "+",
                "+AjaxFileDropBehavior.CSS.dragover=drag-over",
                "\\ No newline at end of file",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "index b8806d986e..817c2f4dee 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "@@ -27,7 +27,8 @@ import org.apache.wicket.ajax.AjaxEventBehavior;",
                " import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.attributes.AjaxCallListener;",
                " import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;",
                " import org.apache.wicket.ajax.attributes.AjaxRequestAttributes.Method;",
                "+import org.apache.wicket.core.util.string.CssUtils;",
                " import org.apache.wicket.markup.head.IHeaderResponse;",
                " import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                "-import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                " import org.apache.wicket.markup.html.form.upload.FileUpload;",
                "@@ -49,2 +50,4 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "+\tpublic static final String DRAG_OVER_CLASS_KEY = CssUtils.key(AjaxFileDropBehavior.class, \"dragover\");",
                "+",
                " \tprivate static final ResourceReference JS = new PackageResourceReference(",
                "@@ -64,5 +67,9 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "+\t/**",
                "+\t * Listen for 'dragover' and 'drop' events and prevent them, only 'drop' will initiate",
                "+\t * an Ajax request.",
                "+\t */",
                " \tpublic AjaxFileDropBehavior()",
                " \t{",
                "-\t\tsuper(\"drop\");",
                "+\t\tsuper(\"dragenter dragover dragleave drop\");",
                " \t}",
                "@@ -75,8 +82,2 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t\tresponse.render(JavaScriptHeaderItem.forReference(JS));",
                "-",
                "-\t\t// default must be prevented for dragover event, otherwise browser will consume the",
                "-\t\t// dataTransfer",
                "-\t\tresponse.render(OnDomReadyHeaderItem.forScript(",
                "-\t\t\tString.format(\"jQuery('#%s').on('dragover', function(e) { e.preventDefault(); });\",",
                "-\t\t\t\tcomponent.getMarkupId())));",
                " \t}",
                "@@ -93,2 +94,12 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "+\t\tattributes.getAjaxCallListeners().add(new AjaxCallListener() {",
                "+\t\t\t@Override",
                "+\t\t\tpublic CharSequence getPrecondition(Component component)",
                "+\t\t\t{",
                "+\t\t\t\tString css = getComponent().getString(DRAG_OVER_CLASS_KEY);",
                "+\t\t\t\t",
                "+\t\t\t\treturn String.format(\"jQuery('#' + attrs.c).toggleClass('%s', attrs.event.type === 'dragover'); return (attrs.event.type === 'drop');\", css);",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\t",
                " \t\tattributes.getDynamicExtraParameters()"
            ],
            "changed_files": [
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.html",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6517": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6517",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9e028af34cc432ddbffd6e09e82bf46d6226c0c8",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508268318,
            "hunks": 4,
            "message": "WICKET-6348 minor addition: update raw input when component is not contained in form this wasn't done in 7.x either, but for consistency the raw input should be updated, so it is available when a validation fails",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentUpdatingBehavior.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentUpdatingBehavior.java",
                "index 0d5f410d34..d913e77d07 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentUpdatingBehavior.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentUpdatingBehavior.java",
                "@@ -235,2 +235,6 @@ public class FormComponentUpdatingBehavior extends Behavior implements IRequestL",
                " \t\t{",
                "+\t\t\t// let form component change its input, so it is available",
                "+\t\t\t// in case of any errors",
                "+\t\t\tformComponent.inputChanged();",
                "+",
                " \t\t\tprocess();",
                "@@ -266,2 +270,3 @@ public class FormComponentUpdatingBehavior extends Behavior implements IRequestL",
                " \t\t\t\t{",
                "+\t\t\t\t\t// do not process the whole form",
                " \t\t\t\t\treturn false;",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "index 4571b3675d..e4b27dedd0 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "@@ -26,3 +26,2 @@ import org.apache.wicket.core.request.ClientInfo;",
                " import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.model.Model;",
                " import org.apache.wicket.protocol.http.request.WebClientInfo;",
                "@@ -110,10 +109,2 @@ public class ZonedToLocalDateTimeModel implements IModel<LocalDateTime>",
                " \t}",
                "-",
                "-\t/**",
                "-\t * Convenience factory for a date time.",
                "-\t */",
                "-\tpublic static IModel<LocalDateTime> of(ZonedDateTime dateTime)",
                "-\t{",
                "-\t\treturn new ZonedToLocalDateTimeModel(new Model<ZonedDateTime>(dateTime));",
                "-\t}",
                "-}",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponentUpdatingBehavior.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6348": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6348",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb9f6c9cf3f5b644f9107558751cc38c0a47abc8",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516377259,
            "hunks": 17,
            "message": "WICKET-6503 update component lifecycle",
            "diff": [
                "diff --git a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_1.adoc b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_1.adoc",
                "index bc38266708..a2c778ad99 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_1.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_1.adoc",
                "@@ -3,7 +3,8 @@",
                "-During its life a Wicket component goes through three basic stages:",
                "+During its life a Wicket component goes through the following stages:",
                "-1. *Initialization:* a component is instantiated by Wicket and prepared for the rendering phase.",
                "-2. *Rendering:* in this stage Wicket generates component markup. If a component contains children (i.e. is a subclass of _MarkupContainer_) it must first wait for them to be rendered before starting its own rendering. ",
                "-3. *Removing:* this stage is triggered when a component is explicitly removed from its component hierarchy, i.e. when its parent invokes _remove(component)_ on it. This stage is facultative and is never triggered for pages.",
                "+1. *Initialization:* a component is instantiated and initialized by Wicket.",
                "+2. *Rendering:* components are prepared for rendering and generate markup. If a component contains children (i.e. is a subclass of _MarkupContainer_) their rendering result is included in the resulting markup.",
                "+3. *Removed:* this stage is triggered when a component is explicitly removed from its component hierarchy, i.e. when its parent invokes _remove(component)_ on it. This stage is facultative and is never triggered for pages.",
                "+3. *Detached:* after request processing has ended all components are notified to detach any state that is no longer needed. ",
                "@@ -13,3 +14,3 @@ image::../img/component-lifecycle.png[]",
                "-Once a component has been removed it can be added again to a container, but the initialization stage won't be executed again.",
                "+Once a component has been removed it could be added again to a container, but the initialization stage won't be executed again - it is easier to just create a new component instance instead.",
                "diff --git a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_2.adoc b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_2.adoc",
                "index 7eda2e2698..0224dbd173 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_2.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_2.adoc",
                "@@ -8,7 +8,8 @@ In the following table these methods are grouped according to the stage in which",
                " |*Cycle stage* | *Involved methods*",
                "-|Initialization | onInitialize",
                "-|Rendering | onConfigure, onBeforeRender, onRender, onComponentTag, onComponentTagBody, onAfterRenderChildren, onAfterRender",
                "-|Removing | onRemove",
                "+|Initialization | constructor, onInitialize()",
                "+|Rendering | onConfigure(), onBeforeRender(), renderHead(), onRender(), onComponentTag(), onComponentTagBody(), onAfterRender()",
                "+|Removed | onRemove()",
                "+|Detached | onDetach()",
                " |===",
                "-Now let's take a closer look at each stage and to at hook methods.",
                "+Now let's take a closer look at each stage and its hook methods.",
                "diff --git a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_3.adoc b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_3.adoc",
                "index cb6593bae7..5c7a6cd4bc 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_3.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_3.adoc",
                "@@ -3,4 +3,6 @@",
                "-This stage is performed at the beginning of the component lifecycle. During initialization, the component has already been inserted into its component hierarchy so we can safely access to its parent container or to its page with methods _getParent()_ or _getPage()_. The only method triggered during this stage is _onInitialize()_. This method is a sort of \u00e2\u0080\u009cspecial\u00e2\u0080\u009d constructor where we can execute a custom initialization of our component.   ",
                "+This stage is the beginning of the component lifecycle.",
                "-Since _onInitialize_ is similar to a regular constructor, when we override this method we have to call _super.onInitialize_ inside its body, usually as first instruction.",
                "+A component is instantiated by application code (or by Wicket in case of bookmarkable page) and added to a parental component. As soon as the component is contained in a component tree rooted in a page, a \u00e2\u0080\u009cpost\u00e2\u0080\u009d-constructor _onInitialize()_ is called where we can execute custom initialization of our component.",
                "+",
                "+When we override this method we have to call _super.onInitialize()_, usually before anything else in that method.",
                "diff --git a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_4.adoc b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_4.adoc",
                "index a5425d85ff..4cdd67225a 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_4.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_4.adoc",
                "@@ -1,3 +1,3 @@",
                "-This stage is triggered each time a component is rendered by Wicket, typically when its page is requested or when it is refreshed via AJAX.",
                "+This stage is reached each time a component is rendered, typically when a page is requested or when the component or one of its ancestors is refreshed via AJAX.",
                "@@ -5,3 +5,5 @@ This stage is triggered each time a component is rendered by Wicket, typically w",
                "-Method _onConfigure()_ has been introduced in order to provide a good point to manage the component states such as its visibility or enabled state. This method is called before the render phase starts. As stated in <<_hiding_or_disabling_a_component,chapter 6.1>>, _isVisible_ and _isEnabled_ are called multiple times when a page or a component is rendered, so it's highly recommended not to directly override these method, but rather to use _onConfigure_ to change component states. On the contrary method _onBeforeRender_ (see the next paragraph) is not indicated for this task because it will not be invoked if component visibility is set to false.",
                "+Method _onConfigure()_ has been introduced in order to provide a good point to manage the component states such as its visibility or enabled state. This method is called an all components whose parent is visible.",
                "+",
                "+As stated in <<_hiding_or_disabling_a_component,chapter 6.1>>, _isVisible()_ and _isEnabled()_ are called multiple times when a page or a component is rendered, so it's highly recommended not to directly override these method, but rather to use _onConfigure()_ to change component states. On the contrary method _onBeforeRender_ (see the next paragraph) is not indicated for this task because it will not be invoked if component visibility is set to false.",
                "@@ -9,5 +11,5 @@ Method _onConfigure()_ has been introduced in order to provide a good point to m",
                "-The most important hook method of this stage is probably _onBeforeRender()_. This method is called before a component starts its rendering phase and it is our last chance to change its children hierarchy.",
                "+The most important hook method of this stage is probably _onBeforeRender()_. This method is called on all visible components before any of them are rendered. It is our last chance to change a component's state prior to rendering - no change to a component's state is allowed afterwards.",
                "-If we want add/remove children components this is the right place to do it. In the next example (project LifeCycleStages) we will create a page which alternately displays two different labels, swapping between them each time it is rendered:",
                "+If we want to add/remove child components this is the right place to do it. In the next example (project LifeCycleStages) we will create a page which alternately displays two different labels, swapping between them each time it is rendered:",
                "@@ -53,2 +55,9 @@ WARNING: If we forget to call superclass version of methods _onInitialize()_ or",
                "+=== Method renderHead",
                "+",
                "+This method gives all components the possibility to add items to the page header through its argument of type _org.apache.wicket.markup.head.IHeaderResponse_",
                "+",
                "+=== Method onRender",
                "+",
                "+This method does the actual rendering - you will rarely have to implement it, since most components already contain a specific implementation to produce their markup.",
                "@@ -56,3 +65,3 @@ WARNING: If we forget to call superclass version of methods _onInitialize()_ or",
                "-Method _onComponentTag(ComponentTag)_ is called to process component tag, which can be freely manipulated through its argument of type _org.apache.wicket.markup.ComponentTag_. For example we can add/remove tag attributes with methods _put(String key, String value)_ and _remove(String key)_, or we can even decide to change the tag or rename it with method _setName(String)_ (the following code is taken from project OnComponentTagExample):",
                "+Method _onComponentTag(ComponentTag)_ is called to process a component tag, which can be freely manipulated through its argument of type _org.apache.wicket.markup.ComponentTag_. For example we can add/remove tag attributes with methods _put(String key, String value)_ and _remove(String key)_, or we can even decide to change the tag or rename it with method _setName(String)_ (the following code is taken from project OnComponentTagExample):",
                "@@ -134 +143,5 @@ public class HomePage extends WebPage {",
                " Note that the original version of _onComponentTagBody_ is invoked only when we want to preserve the standard rendering mechanism for the tag's body (in our example this happens when the component is enabled).",
                "+",
                "+=== Methods onAfterRender",
                "+",
                "+Called on each rendered component immediately after it has been rendered - _onAfterRender()_ will even be called when rendering failed with an exception.",
                "\\ No newline at end of file",
                "diff --git a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_5.adoc b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_5.adoc",
                "index 5f13e162b9..c08351b103 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_5.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_5.adoc",
                "@@ -3,6 +3,6 @@",
                "-This stage is triggered when a component is removed from its container hierarchy. The only hook method for this phase is _onRemove()_. If our component still holds some resources needed during rendering phase, we can override this method to release them.",
                "+This stage is entered when a component is removed from its container hierarchy. The only hook method for this phase is _onRemove()_. If our component still holds some resources needed during rendering phase, we can override this method to release them.",
                "-Once a component has been removed we are free to add it again to the same container or to a different one. Starting from version 6.18.0 Wicket added a further hook method called _onReAdd()_ which is triggered every time a previously removed component is re-added to a cointainer.",
                "-Please note that while _onInitialize_ is called only the very first time a component is added, _onReAdd_ is called every time it is re-added after having been removed.",
                "+Once a component has been removed we are free to add it again to the same container or to a different one. Starting from version 6.18.0 Wicket added a further hook method called _onReAdd()_ which is triggered every time a previously removed component is re-added to a container.",
                "+Please note that while _onInitialize()_ is called only the very first time a component is added, _onReAdd()_ is called every time it is re-added after having been removed.",
                "diff --git a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_6.adoc b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_6.adoc",
                "index 50fbb17a05..ff1da28974 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_6.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_6.adoc",
                "@@ -3,3 +3,4 @@",
                "-In this chapter we have seen which stages compose the lifecycle of Wicket components and which hook methods they provide. Overriding these methods we can dynamically modify the component hierarchy and we can enrich the behavior of our custom components.",
                "+When a request has finished, the page and all its contained components move a the detached stage:",
                "+The hook method _onDetach()_ notifies each component that it should release all held resources no longer needed until the next request.",
                "\\ No newline at end of file",
                "diff --git a/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_7.adoc b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_7.adoc",
                "new file mode 100644",
                "index 0000000000..50fbb17a05",
                "--- /dev/null",
                "+++ b/wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_7.adoc",
                "@@ -0,0 +1,5 @@",
                "+",
                "+",
                "+",
                "+In this chapter we have seen which stages compose the lifecycle of Wicket components and which hook methods they provide. Overriding these methods we can dynamically modify the component hierarchy and we can enrich the behavior of our custom components.",
                "+",
                "diff --git a/wicket-user-guide/src/main/asciidoc/img/component-lifecycle.png b/wicket-user-guide/src/main/asciidoc/img/component-lifecycle.png",
                "index 52e09fd458..601639a56d 100644",
                "Binary files a/wicket-user-guide/src/main/asciidoc/img/component-lifecycle.png and b/wicket-user-guide/src/main/asciidoc/img/component-lifecycle.png differ",
                "diff --git a/wicket-user-guide/src/main/asciidoc/single.adoc b/wicket-user-guide/src/main/asciidoc/single.adoc",
                "index 4fc1464d7b..0974694775 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/single.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/single.adoc",
                "@@ -155,3 +155,3 @@ include::componentLifecycle/componentLifecycle_4.adoc[leveloffset=+1]",
                "-=== Removing stage",
                "+=== Removed stage",
                "@@ -159,3 +159,3 @@ include::componentLifecycle/componentLifecycle_5.adoc[leveloffset=+1]",
                "-=== Summary",
                "+=== Detached stage",
                "@@ -163,2 +163,6 @@ include::componentLifecycle/componentLifecycle_6.adoc[leveloffset=+1]",
                "+=== Summary",
                "+",
                "+include::componentLifecycle/componentLifecycle_7.adoc[leveloffset=+1]",
                "+",
                " == Page versioning and caching"
            ],
            "changed_files": [
                "wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_1.adoc",
                "wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_2.adoc",
                "wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_3.adoc",
                "wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_4.adoc",
                "wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_5.adoc",
                "wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_6.adoc",
                "wicket-user-guide/src/main/asciidoc/componentLifecycle/componentLifecycle_7.adoc",
                "wicket-user-guide/src/main/asciidoc/img/component-lifecycle.png",
                "wicket-user-guide/src/main/asciidoc/single.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6503": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6503",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1b366f0c7f205971a5d83c6cc853af0efdfac5df",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511509711,
            "hunks": 6,
            "message": "WICKET-6148 Remove AjaxEventBehavior#onCheckEvent() before Wicket 8.0.0",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxEventBehavior.java b/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxEventBehavior.java",
                "index a244a3a5f6..23d8a4bc31 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxEventBehavior.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxEventBehavior.java",
                "@@ -20,3 +20,2 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "-import java.util.Locale;",
                "@@ -79,4 +78,2 @@ public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior",
                "-\t\tonCheckEvent(event);",
                "-",
                " \t\tthis.event = event;",
                "@@ -107,23 +104,2 @@ public abstract class AjaxEventBehavior extends AbstractDefaultAjaxBehavior",
                "-\t/**",
                "-\t * ",
                "-\t * @param event",
                "-\t *      the event this behavior will be attached to",
                "-\t * @deprecated Wicket 8 Remove this method for Wicket 8.0.0",
                "-\t */",
                "-\t@Deprecated",
                "-\tprotected void onCheckEvent(final String event)",
                "-\t{",
                "-\t\tif (event.startsWith(\"on\"))",
                "-\t\t{",
                "-\t\t\tString shortName = event.substring(2);",
                "-\t\t\tthrow new IllegalArgumentException(",
                "-\t\t\t\t\tString.format(\"Since version 6.0.0 Wicket uses JavaScript event registration so there is no need of the leading \" +",
                "-\t\t\t\t\t\t\t\t\t\"'on' in the event name '%s'. Please use just '%s'. Wicket 8.x won't manipulate the provided event \" +",
                "-\t\t\t\t\t\t\t\t\t\"names so the leading 'on' may break your application.\"",
                "-\t\t\t\t\t\t\t, event, shortName.toLowerCase(Locale.ENGLISH)));",
                "-\t\t}",
                "-",
                "-\t}",
                "-",
                " \t/**",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "index b69e7a487d..62f3667fef 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "@@ -85,13 +85,3 @@ public class OnEventHeaderItem extends HeaderItem",
                " \t\tevent = event.toLowerCase(Locale.ENGLISH);",
                "-\t\tif (event.startsWith(\"on\"))",
                "-\t\t{",
                "-\t\t\tString shortName = event.substring(2);",
                "-\t\t\tthrow new IllegalArgumentException(",
                "-\t\t\t\t\tString.format(\"Since version 6.0.0 Wicket uses JavaScript event registration so there is no need of the leading \" +",
                "-\t\t\t\t\t\t\t\t\t\"'on' in the event name '%s'. Please use just '%s'. Wicket 8.x won't manipulate the provided event \" +",
                "-\t\t\t\t\t\t\t\t\t\"names so the leading 'on' may break your application.\"",
                "-\t\t\t\t\t\t\t, event, shortName));",
                "-\t\t}",
                " \t\tthis.event = event;",
                "-",
                " \t\tthis.javaScript = javaScript;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTesterHelper.java b/wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTesterHelper.java",
                "index c9590e3b33..27e66e40fd 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTesterHelper.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTesterHelper.java",
                "@@ -208,12 +208,2 @@ public class WicketTesterHelper",
                " \t\t{",
                "-\t\t\tif (eventName.startsWith(\"on\"))",
                "-\t\t\t{",
                "-\t\t\t\tString shortName = event.substring(2);",
                "-\t\t\t\tthrow new IllegalArgumentException(",
                "-\t\t\t\t\t\tString.format(\"Since version 6.0.0 Wicket uses JavaScript event registration so there is no need of the leading \" +",
                "-\t\t\t\t\t\t\t\t\t\t\"'on' in the event name '%s'. Please use just '%s'. Wicket 8.x won't manipulate the provided event \" +",
                "-\t\t\t\t\t\t\t\t\t\t\"names so the leading 'on' may break your application.\"",
                "-\t\t\t\t\t\t\t\t, event, shortName));",
                "-\t\t\t}",
                "-",
                " \t\t\tfor (Behavior behavior : component.getBehaviors())"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/AjaxEventBehavior.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/OnEventHeaderItem.java",
                "wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTesterHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6148": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6148",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a4b5f2eb0ae047c127a2d07f084d299d59eabc1",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507898782,
            "hunks": 142,
            "message": "WICKET-6105 restructured, fixed javadoc",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java b/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "index 373f3cda8c..dbef956e94 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "@@ -24,2 +24,3 @@ import java.time.LocalDateTime;",
                " import java.time.LocalTime;",
                "+import java.time.ZonedDateTime;",
                " import java.util.Calendar;",
                "@@ -50,2 +51,3 @@ import org.apache.wicket.util.convert.converter.SqlTimeConverter;",
                " import org.apache.wicket.util.convert.converter.SqlTimestampConverter;",
                "+import org.apache.wicket.util.convert.converter.ZonedDateTimeConverter;",
                " import org.apache.wicket.util.lang.Args;",
                "@@ -186,2 +188,3 @@ public class ConverterLocator implements IConverterLocator",
                " \t\tset(LocalTime.class, new LocalTimeConverter());",
                "+\t\tset(ZonedDateTime.class, new ZonedDateTimeConverter());",
                " \t}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "index 5c252e4cad..94ba192ebb 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "@@ -22,3 +22,3 @@ import org.apache.wicket.ajax.markup.html.AjaxLink;",
                " import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;",
                "-import org.apache.wicket.extensions.markup.html.form.datetime.DateTimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.LocalDateTimeField;",
                " import org.apache.wicket.markup.html.WebPage;",
                "@@ -67,3 +67,3 @@ public class ModalContent1Page extends WebPage",
                "-\t\tadd(new DateTimeField(\"dateTimeField\"));",
                "+\t\tadd(new LocalDateTimeField(\"dateTimeField\"));",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "index 3a9389a679..884077cf14 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "@@ -18,3 +18,3 @@ package org.apache.wicket.examples.ajax.builtin.modal;",
                "-import org.apache.wicket.extensions.markup.html.form.datetime.DateTimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.LocalDateTimeField;",
                " import org.apache.wicket.markup.html.panel.Panel;",
                "@@ -34,3 +34,3 @@ public class ModalPanel1 extends Panel",
                " \t\tsuper(id);",
                "-\t\tadd(new DateTimeField(\"dateTimeField\"));",
                "+\t\tadd(new LocalDateTimeField(\"dateTimeField\"));",
                " \t}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "index db04a1c844..7b5f6fa6bb 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "@@ -36,3 +36,3 @@",
                " \t\t\t\t<td><input wicket:id=\"birthdate\" type=\"text\" size=\"10\"/></td>",
                "-\t\t\t\t<td><pre class=\"note\">m/d/yyyy field with @Past</pre></td>",
                "+\t\t\t\t<td><pre class=\"note\"><span wicket:id=\"pattern\" /> field with @Past</pre></td>",
                " \t\t\t</tr>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "index e1eb59df30..317386763c 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "@@ -18,8 +18,10 @@ package org.apache.wicket.examples.bean.validation;",
                "+import java.time.format.FormatStyle;",
                "+",
                " import org.apache.wicket.bean.validation.PropertyValidator;",
                "-import org.apache.wicket.extensions.markup.html.form.datetime.DateField;",
                "-import org.apache.wicket.extensions.markup.html.form.datetime.StyleDateConverter;",
                " import org.apache.wicket.examples.WicketExamplePage;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.LocalDateTextField;",
                " import org.apache.wicket.feedback.ExactLevelFeedbackMessageFilter;",
                " import org.apache.wicket.feedback.FeedbackMessage;",
                "+import org.apache.wicket.markup.html.basic.Label;",
                " import org.apache.wicket.markup.html.form.Form;",
                "@@ -54,4 +56,5 @@ public class BeanValidationPage extends WicketExamplePage",
                " \t\tform.add(new TextField<>(\"email\", new PropertyModel<String>(this, \"person.email\")).add(new PropertyValidator<>()));",
                "-\t\tform.add(new DateField(\"birthdate\", new PropertyModel<>(this, \"person.birthdate\"),",
                "-\t\t\tnew StyleDateConverter(\"S-\")).add(new PropertyValidator<>()));",
                "+\t\tLocalDateTextField dateField = new LocalDateTextField(\"birthdate\", new PropertyModel<>(this, \"person.birthdate\"), FormatStyle.SHORT);",
                "+\t\tform.add(dateField.add(new PropertyValidator<>()));",
                "+\t\tform.add(new Label(\"pattern\", new PropertyModel<>(dateField, \"textFormat\")));",
                " \t\tform.add(new TextField<>(\"password\", new PropertyModel<String>(this, \"person.password\")).add(new PropertyValidator<>()));",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "index 7dc4282a8b..713f5b7685 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "@@ -27,2 +27,10 @@ public class DateTimeApplication extends WicketExampleApplication",
                " {",
                "+\t@Override",
                "+\tprotected void init()",
                "+\t{",
                "+\t\tsuper.init();",
                "+\t\t",
                "+\t\tgetRequestCycleSettings().setGatherExtendedBrowserInfo(true);",
                "+\t}",
                "+",
                " \t@Override",
                "@@ -31,3 +39,3 @@ public class DateTimeApplication extends WicketExampleApplication",
                " \t\treturn DateTimePage.class;",
                "-\t}",
                "-}",
                "+\t}\t",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html",
                "index eed587851c..2589935745 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html",
                "@@ -11,22 +11,47 @@",
                "-\t\t<h3>Demo for short style time</h3>",
                "-\t\t<span wicket:id=\"time1\"></span><br/>",
                "-",
                "-\t\t<hr/>",
                "+\t\t<form wicket:id=\"form\">",
                "+\t\t \t <div>",
                "+\t\t \t \t<wicket:message key=\"locale\"></wicket:message>",
                "+\t\t\t\t<select wicket:id=\"localeSelect\"></select>",
                "+\t\t\t\t<a href=\"#\" wicket:id=\"defaultLocaleLink\">[<wicket:message key=\"default\" />]</a>",
                "+     \t\t</div>",
                "+\t\t",
                "+\t\t\t<hr/>",
                "+\t\t",
                "+\t\t\t<h3>TimeField 12-hours</h3>",
                "+\t\t\t<span wicket:id=\"time1\"></span><br/>",
                "+\t",
                "+\t\t\t<hr/>",
                "+\t",
                "+\t\t\t<h3>TimeField 24-hours</h3>",
                "+\t\t\t<span wicket:id=\"time2\"></span><br/>",
                "+\t",
                "+\t\t\t<hr/>",
                "-\t\t<h3>Demo for Full style time</h3>",
                "-\t\t<span wicket:id=\"time2\"></span><br/>",
                "+\t\t\t<h3>LocalDateTimeField (default time 00:00)</h3>",
                "+\t\t\t<span wicket:id=\"datetime0\"></span><br/>",
                "-\t\t<hr/>",
                "+\t\t\t<hr/>",
                "-\t\t<h3>Demo for Short style time with 24-hours</h3>",
                "-\t\t<span wicket:id=\"time3\"></span><br/>",
                "+\t \t \t<wicket:message key=\"clientZone\"></wicket:message>",
                "+\t\t\t<select wicket:id=\"zoneSelect\"></select>",
                "+\t\t\t<br/>",
                "+\t\t\t",
                "+\t\t\t<h3>LocalDateTimeField with a ZonedDateTime (<span wicket:id=\"datetime1-label\" />) adjusted to client's time zone</h3>",
                "+\t\t\t<span wicket:id=\"datetime1\"></span>",
                "+\t\t\t<br/>",
                "-\t\t<hr/>",
                "+\t\t\t<h3>LocalDateTimeTextField with a ZonedDateTime (<span wicket:id=\"datetime2-label\" />) adjusted to client's time zone</h3>",
                "+\t\t\t<input wicket:id=\"datetime2\" type=\"text\" />",
                "+\t\t\t<br/>",
                "+\t\t\t",
                "+\t\t\t<h3>ZonedDateTimeField</h3>",
                "+\t\t\t<span wicket:id=\"datetime3\"></span>",
                "+\t\t\t<br/>",
                "+\t\t\t",
                "+\t\t\t<hr/>",
                "-\t\t<form wicket:id=\"form\">",
                "-\t\t\t<h3>Demo for default Local Date Time in Form</h3>",
                "-\t\t\t<span wicket:id=\"datetime1\"></span><br/>",
                "-\t\t\t<input wicket:id=\"submit\" type=\"submit\" value=\"Submit\"/>",
                " \t\t\t<div wicket:id=\"feedback\"></div>",
                "+\t\t\t",
                "+\t\t\t<input wicket:id=\"submit\" type=\"submit\" value=\"Submit\"/>",
                " \t\t</form>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "index 6294863a1b..b102c2ed5b 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "@@ -20,12 +20,32 @@ import java.time.LocalDateTime;",
                " import java.time.LocalTime;",
                "+import java.time.ZoneId;",
                "+import java.time.ZoneOffset;",
                "+import java.time.ZonedDateTime;",
                "+import java.time.format.FormatStyle;",
                "+import java.time.format.TextStyle;",
                "+import java.util.List;",
                "+import java.util.Locale;",
                "+import java.util.stream.Collectors;",
                "-import org.apache.wicket.ajax.AjaxRequestTarget;",
                "-import org.apache.wicket.ajax.markup.html.form.AjaxButton;",
                "+import org.apache.wicket.Session;",
                " import org.apache.wicket.examples.WicketExamplePage;",
                "-import org.apache.wicket.extensions.markup.html.form.datetime.DateTimeField;",
                "-import org.apache.wicket.extensions.markup.html.form.datetime.StyleTimeConverter;",
                "+import org.apache.wicket.examples.forminput.FormInputApplication;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.LocalDateTimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.LocalDateTimeTextField;",
                " import org.apache.wicket.extensions.markup.html.form.datetime.TimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.ZonedDateTimeField;",
                "+import org.apache.wicket.extensions.markup.html.form.datetime.ZonedToLocalDateTimeModel;",
                "+import org.apache.wicket.markup.html.basic.Label;",
                "+import org.apache.wicket.markup.html.form.Button;",
                "+import org.apache.wicket.markup.html.form.ChoiceRenderer;",
                "+import org.apache.wicket.markup.html.form.DropDownChoice;",
                " import org.apache.wicket.markup.html.form.Form;",
                "+import org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior;",
                "+import org.apache.wicket.markup.html.form.IChoiceRenderer;",
                "+import org.apache.wicket.markup.html.link.Link;",
                " import org.apache.wicket.markup.html.panel.FeedbackPanel;",
                "-import org.apache.wicket.model.Model;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.PropertyModel;",
                "+import org.apache.wicket.protocol.http.request.WebClientInfo;",
                "+import org.apache.wicket.request.http.WebRequest;",
                "@@ -39,2 +59,24 @@ public class DateTimePage extends WicketExamplePage",
                "+\tprivate ZoneId clientZone;",
                "+",
                "+\tprivate ZoneId targetZone = ZoneId.of(\"UTC+8\");",
                "+",
                "+\t@SuppressWarnings(\"unused\")",
                "+\tprivate LocalTime time1 = LocalTime.of(22, 15);",
                "+",
                "+\t@SuppressWarnings(\"unused\")",
                "+\tprivate LocalTime time2 = LocalTime.of(22, 15);",
                "+",
                "+\t@SuppressWarnings(\"unused\")",
                "+\tprivate LocalDateTime dateTime0 = LocalDateTime.now();",
                "+",
                "+\t@SuppressWarnings(\"unused\")",
                "+\tprivate ZonedDateTime dateTime1 = LocalDateTime.now().atZone(targetZone);",
                "+",
                "+\t@SuppressWarnings(\"unused\")",
                "+\tprivate ZonedDateTime dateTime2 = LocalDateTime.now().atZone(targetZone);",
                "+",
                "+\t@SuppressWarnings(\"unused\")",
                "+\tprivate ZonedDateTime dateTime3 = ZonedDateTime.now();",
                "+",
                " \t/**",
                "@@ -44,5 +86,33 @@ public class DateTimePage extends WicketExamplePage",
                " \t{",
                "-\t\tadd(TimeField.forShortStyle(\"time1\", Model.of(LocalTime.of(22, 15))));",
                "-\t\tadd(TimeField.forTimeStyle(\"time2\", Model.of(LocalTime.of(22, 15)), \"F\"));",
                "-\t\tadd(new TimeField(\"time3\", Model.of(LocalTime.of(22, 15)), new StyleTimeConverter(\"S\")) {",
                "+\t\tForm<String> form = new Form<>(\"form\");",
                "+\t\tthis.add(form);",
                "+",
                "+\t\tform.add(new ZoneDropDownChoice(\"zoneSelect\"));",
                "+",
                "+\t\t// Dropdown for selecting locale",
                "+\t\tform.add(new LocaleDropDownChoice(\"localeSelect\"));",
                "+",
                "+\t\t// Link to return to default locale",
                "+\t\tform.add(new Link<Void>(\"defaultLocaleLink\")",
                "+\t\t{",
                "+\t\t\tpublic void onClick()",
                "+\t\t\t{",
                "+\t\t\t\tWebRequest request = (WebRequest)getRequest();",
                "+\t\t\t\tgetSession().setLocale(request.getLocale());",
                "+\t\t\t}",
                "+\t\t});",
                "+",
                "+\t\tform.add(new TimeField(\"time1\", new PropertyModel<>(this, \"time1\"))",
                "+\t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected boolean use12HourFormat()",
                "+\t\t\t{",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                "+\t\t});",
                "+",
                "+\t\tform.add(new TimeField(\"time2\", new PropertyModel<>(this, \"time2\"))",
                "+\t\t{",
                " \t\t\tprivate static final long serialVersionUID = 1L;",
                "@@ -50,3 +120,4 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t\t@Override",
                "-\t\t\tprotected boolean use12HourFormat() {",
                "+\t\t\tprotected boolean use12HourFormat()",
                "+\t\t\t{",
                " \t\t\t\treturn false;",
                "@@ -54,25 +125,162 @@ public class DateTimePage extends WicketExamplePage",
                " \t\t});",
                "-\t\tfinal DateTimeField datetime1 = new DateTimeField(\"datetime1\", Model.of(LocalDateTime.now()));",
                "+",
                "+\t\tfinal LocalDateTimeField datetimeField0 = new LocalDateTimeField(\"datetime0\",",
                "+\t\t\tnew PropertyModel<>(this, \"dateTime0\"))",
                "+\t\t{",
                "+\t\t\t@Override",
                "+\t\t\tprotected LocalTime getDefaultTime()",
                "+\t\t\t{",
                "+\t\t\t\treturn LocalTime.of(0, 0);",
                "+\t\t\t}",
                "+\t\t};",
                "+\t\tform.add(datetimeField0);",
                "+",
                "+\t\tIModel<ZonedDateTime> zonedDateTime1 = new PropertyModel<>(this, \"dateTime1\");",
                "+\t\tfinal LocalDateTimeField datetimeField1 = new LocalDateTimeField(\"datetime1\",",
                "+\t\t\tnew ZonedToLocalDateTimeModel(zonedDateTime1)",
                "+\t\t\t{",
                "+\t\t\t\t@Override",
                "+\t\t\t\tprotected ZoneId getClientTimeZone()",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn clientZone;",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\t@Override",
                "+\t\t\t\tprotected ZoneId getTargetTimeZone()",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn targetZone;",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\tform.add(datetimeField1);",
                "+\t\tform.add(new Label(\"datetime1-label\", zonedDateTime1));",
                "+",
                "+\t\tIModel<ZonedDateTime> zonedDateTime2 = new PropertyModel<>(this, \"dateTime2\");",
                "+\t\tLocalDateTimeTextField datetime2 = new LocalDateTimeTextField(\"datetime2\",",
                "+\t\t\tnew ZonedToLocalDateTimeModel(zonedDateTime2)",
                "+\t\t\t{",
                "+\t\t\t\t@Override",
                "+\t\t\t\tprotected ZoneId getClientTimeZone()",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn clientZone;",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\t@Override",
                "+\t\t\t\tprotected ZoneId getTargetTimeZone()",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn targetZone;",
                "+\t\t\t\t}",
                "+\t\t\t}, FormatStyle.SHORT, FormatStyle.SHORT);",
                "+\t\tform.add(datetime2);",
                "+\t\tform.add(new Label(\"datetime2-label\", zonedDateTime2));",
                "+",
                "+\t\tfinal ZonedDateTimeField datetimeField3 = new ZonedDateTimeField(\"datetime3\",",
                "+\t\t\tnew PropertyModel<>(this, \"dateTime3\"));",
                "+\t\tform.add(datetimeField3);",
                "+",
                " \t\tfinal FeedbackPanel feedback = new FeedbackPanel(\"feedback\");",
                "-\t\tForm<String> form = new Form<>(\"form\");",
                "-\t\tadd(form.add(datetime1)",
                "-\t\t\t\t.add(feedback.setOutputMarkupId(true))",
                "-\t\t\t\t.add(new AjaxButton(\"submit\")",
                "+\t\tform.add(feedback);",
                "+",
                "+\t\tform.add(new Button(\"submit\"));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void onInitialize()",
                "+\t{",
                "+\t\tsuper.onInitialize();",
                "+",
                "+\t\tclientZone = ((WebClientInfo)Session.get().getClientInfo()).getProperties().getTimeZone()",
                "+\t\t\t.toZoneId();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Choice for a locale.",
                "+\t */",
                "+\tprivate final class LocaleChoiceRenderer extends ChoiceRenderer<Locale>",
                "+\t{",
                "+\t\t@Override",
                "+\t\tpublic Object getDisplayValue(Locale locale)",
                "+\t\t{",
                "+\t\t\treturn locale.getDisplayName(getLocale());",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Dropdown with Locales.",
                "+\t */",
                "+\tprivate final class LocaleDropDownChoice extends DropDownChoice<Locale>",
                "+\t{",
                "+\t\t/**",
                "+\t\t * Construct.",
                "+\t\t * ",
                "+\t\t * @param id",
                "+\t\t *            component id",
                "+\t\t */",
                "+\t\tpublic LocaleDropDownChoice(String id)",
                "+\t\t{",
                "+\t\t\tsuper(id, FormInputApplication.LOCALES, new LocaleChoiceRenderer());",
                "+",
                "+\t\t\tsetModel(new PropertyModel<>(this, \"session.locale\"));",
                "+",
                "+\t\t\tadd(new FormComponentUpdatingBehavior()",
                "+\t\t\t{",
                "+\t\t\t\t@Override",
                "+\t\t\t\tprotected void onUpdate()",
                "+\t\t\t\t{",
                "+\t\t\t\t\tsetResponsePage(getPage().getClass());",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate class ZoneDropDownChoice extends DropDownChoice<ZoneId>",
                "+\t{",
                "+",
                "+\t\tpublic ZoneDropDownChoice(String id)",
                "+\t\t{",
                "+\t\t\tsuper(id, new IModel<List<ZoneId>>()",
                "+\t\t\t{",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic List<ZoneId> getObject()",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn ZoneId.getAvailableZoneIds().stream().map(id -> ZoneId.of(id))",
                "+\t\t\t\t\t\t.collect(Collectors.toList());",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+",
                "+\t\t\tsetModel(new PropertyModel<ZoneId>(DateTimePage.this, \"clientZone\"));",
                "+",
                "+\t\t\tsetChoiceRenderer(new IChoiceRenderer<ZoneId>()",
                "+\t\t\t{",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic Object getDisplayValue(ZoneId object)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tString name = object.getDisplayName(TextStyle.FULL, getLocale());",
                "+",
                "+\t\t\t\t\tZoneOffset offset = LocalDateTime.now().atZone(object).getOffset();",
                "+",
                "+\t\t\t\t\treturn name + offset;",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic String getIdValue(ZoneId object, int index)",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn object.getId();",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic ZoneId getObject(String id, IModel<? extends List<? extends ZoneId>> choices)",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn ZoneId.of(id);",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+",
                "+\t\t\tadd(new FormComponentUpdatingBehavior()",
                "+\t\t\t{",
                "+\t\t\t\tprotected void onUpdate()",
                " \t\t\t\t{",
                "-\t\t\t\t\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t\t\t\t\t@Override",
                "-\t\t\t\t\tprotected void onSubmit(AjaxRequestTarget target)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tform.info(String.format(\"DateTime was just submitted: %s\", datetime1.getModelObject()));",
                "-\t\t\t\t\t\ttarget.add(feedback);",
                "-\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\t@Override",
                "-\t\t\t\t\tprotected void onError(AjaxRequestTarget target)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\ttarget.add(feedback);",
                "-\t\t\t\t\t}",
                "-\t\t\t\t})",
                "-\t\t\t);",
                "+\t\t\t\t\t// clear raw input of all inputs so that values are reformatted",
                "+\t\t\t\t\tgetForm().clearInput();",
                "+\t\t\t\t};",
                "+\t\t\t});",
                "+\t\t}",
                " \t}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.properties b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.properties",
                "new file mode 100644",
                "index 0000000000..6a4447b3d5",
                "--- /dev/null",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.properties",
                "@@ -0,0 +1,17 @@",
                "+#  Licensed to the Apache Software Foundation (ASF) under one or more",
                "+#  contributor license agreements.  See the NOTICE file distributed with",
                "+#  this work for additional information regarding copyright ownership.",
                "+#  The ASF licenses this file to You under the Apache License, Version 2.0",
                "+#  (the \"License\"); you may not use this file except in compliance with",
                "+#  the License.  You may obtain a copy of the License at",
                "+#",
                "+#      http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+#  Unless required by applicable law or agreed to in writing, software",
                "+#  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+#  See the License for the specific language governing permissions and",
                "+#  limitations under the License.",
                "+locale=Locale",
                "+default=default",
                "+clientZone=Client timezone",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties b/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "index 326f2a78f6..b9a7819566 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "@@ -40 +40,8 @@ Folder.CSS.open=tree-folder-open",
                " Folder.CSS.selected=selected",
                "+",
                "+AbstractDateTimeField.timeSeparator=\\u00a0-\\u00a0 ",
                "+AbstractDateTimeField.CSS.date=datetime-date",
                "+AbstractDateTimeField.CSS.time=datetime-time",
                "+TimeField.hoursSeparator=\\u00a0:\\u00a0",
                "+TimeField.CSS.hours=time-hours",
                "+TimeField.CSS.minutes=time-minutes",
                "\\ No newline at end of file",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html",
                "index d92f2ce7e7..3230a08543 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html",
                "@@ -18,4 +18,5 @@",
                " <wicket:panel xmlns:wicket=\"http://wicket.apache.org\">",
                "-  <span style=\"white-space: nowrap;\">",
                "+  <span>",
                "     <input type=\"text\" wicket:id=\"date\" size=\"12\" />",
                "+    <span wicket:id=\"timeSeparator\"> - </span>",
                "     <span wicket:id=\"time\" />",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "index 8b6f85ddeb..2f86c19c04 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "@@ -20,20 +20,21 @@ import java.time.LocalDate;",
                " import java.time.LocalTime;",
                "+import java.time.format.FormatStyle;",
                " import java.time.temporal.Temporal;",
                " import java.util.Date;",
                "-import java.util.Locale;",
                " import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                "+import org.apache.wicket.core.util.string.CssUtils;",
                "+import org.apache.wicket.markup.ComponentTag;",
                "+import org.apache.wicket.markup.html.basic.Label;",
                " import org.apache.wicket.markup.html.form.FormComponentPanel;",
                " import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.ResourceModel;",
                "+import org.apache.wicket.util.convert.ConversionException;",
                " /**",
                "- * Works on a {@link java.time.ZonedDateTime} object. Displays a date field and a DatePicker, a field",
                "- * for hours and a field for minutes, and an AM/PM field. The format (12h/24h) of the hours field",
                "- * depends on the time format of this {@link AbstractDateTimeField}'s {@link Locale}, as does the visibility",
                "- * of the AM/PM field (see {@link AbstractDateTimeField#use12HourFormat}).",
                "+ * Works on a {@link java.time.Temporal} object, aggregating a {@link LocalDateTextField} and a {@link TimeField}.",
                "  * <p>",
                "- * <strong>Ajaxifying the DateTimeField</strong>: If you want to update a DateTimeField with an",
                "- * {@link AjaxFormComponentUpdatingBehavior}, you have to attach it to the contained",
                "- * {@link DateField} by overriding {@link #newDateTextField(String, IModel)} and calling",
                "- * {@link #processInput()}:",
                "+ * <strong>Ajaxifying an AbstractDateTimeField</strong>:",
                "+ * If you want to update this component with an {@link AjaxFormComponentUpdatingBehavior}, you have to attach it",
                "+ * to the contained components by overriding {@link #newDateTextField(String, IModel)}:",
                "  * ",
                "@@ -57,3 +58,2 @@ import org.apache.wicket.model.IModel;",
                "  * @author eelcohillenius",
                "- * @see DateField for a variant with just the date field and date picker",
                "  */",
                "@@ -63,9 +63,8 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                "-\t// Component-IDs",
                "-\tprotected static final String DATE = \"date\";",
                "-\tprotected static final String TIME = \"time\";",
                "+\tpublic static final String DATE_CSS_CLASS_KEY = CssUtils.key(AbstractDateTimeField.class, \"date\");",
                "-\t// The date TextField and it's associated model object",
                "-\t// Note that any time information in date will be ignored",
                "-\tprivate DateField dateField;",
                "+\tpublic static final String TIME_CSS_CLASS_KEY = CssUtils.key(AbstractDateTimeField.class, \"time\");",
                "+",
                "+\tprivate LocalDateTextField localDateField;",
                "+\t",
                " \tprivate TimeField timeField;",
                "@@ -92,5 +91,25 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                "-\t\t// Create and add the date TextField",
                "-\t\tadd(dateField = newDateField(DATE, new DateModel()));",
                "-\t\tadd(timeField = newTimeField(TIME, new TimeModel()));",
                "+\t\tadd(new Label(\"timeSeparator\", new ResourceModel(\"AbstractDateTimeField.timeSeparator\"))",
                "+\t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected void onConfigure()",
                "+\t\t\t{",
                "+\t\t\t\tsuper.onConfigure();",
                "+",
                "+\t\t\t\ttimeField.configure();",
                "+\t\t\t\t",
                "+\t\t\t\tsetVisible(timeField.isVisible());",
                "+\t\t\t}",
                "+\t\t});",
                "+\t}",
                "+\t",
                "+\t@Override",
                "+\tprotected void onInitialize()",
                "+\t{",
                "+\t\tsuper.onInitialize();",
                "+\t\t",
                "+\t\tadd(localDateField = newDateField(\"date\", new DateModel()));",
                "+\t\tadd(timeField = newTimeField(\"time\", new TimeModel()));",
                " \t}",
                "@@ -101,5 +120,5 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t */",
                "-\tprotected final DateField getDateField()",
                "+\tprotected final LocalDateTextField getDateField()",
                " \t{",
                "-\t\treturn dateField;",
                "+\t\treturn localDateField;",
                " \t}",
                "@@ -120,3 +139,3 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\t// that is just suitable for error reporting",
                "-\t\treturn String.format(\"%s, %s\", dateField.getInput(), timeField.getInput());",
                "+\t\treturn String.format(\"%s, %s\", localDateField.getInput(), timeField.getInput());",
                " \t}",
                "@@ -136,29 +155,42 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t{",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\t// Get the converted input values",
                "-\t\t\tLocalDate date = dateField.getConvertedInput();",
                "-\t\t\tLocalTime time = timeField.getConvertedInput();",
                "+\t\t// Get the converted input values",
                "+\t\tLocalDate date = localDateField.getConvertedInput();",
                "+\t\tLocalTime time = timeField.getConvertedInput();",
                "-\t\t\tif (date == null || time == null)",
                "+\t\tT temporal;",
                "+\t\tif (date == null && time == null)",
                "+\t\t{",
                "+\t\t\ttemporal = null;",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\tif (date == null)",
                " \t\t\t{",
                "-\t\t\t\tsetConvertedInput(null);",
                "+\t\t\t\terror(newValidationError(new ConversionException(\"Cannot create temporal without date\").setTargetType(getType())));",
                "+\t\t\t\treturn;",
                " \t\t\t}",
                "-\t\t\telse",
                "+\t\t\tif (time == null)",
                " \t\t\t{",
                "-\t\t\t\t// Use the input to create proper date-time",
                "-\t\t\t\tsetConvertedInput(performConvert(date, time));",
                "+\t\t\t\ttime = getDefaultTime();",
                "+\t\t\t\tif (time == null) {",
                "+\t\t\t\t\terror(newValidationError(new ConversionException(\"Cannot create temporal without time\").setTargetType(getType())));",
                "+\t\t\t\t\treturn;",
                "+\t\t\t\t}",
                " \t\t\t}",
                "+\t\t\t",
                "+\t\t\t// Use the input to create proper date-time",
                "+\t\t\ttemporal = createTemporal(date, time);",
                " \t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tAbstractDateTimeField.this.error(e.getMessage());",
                "-\t\t\tinvalid();",
                "-\t\t}",
                "+\t\t",
                "+\t\tsetConvertedInput(temporal);",
                " \t}",
                "-\tabstract T performConvert(LocalDate date, LocalTime time);",
                "-",
                "-\tvoid prepareObject() {",
                "-\t\t// no-op by default",
                "+\t/**",
                "+\t * Get a default time if none was entered.",
                "+\t * ",
                "+\t * @return {@value null} by default",
                "+\t */",
                "+\tprotected LocalTime getDefaultTime()",
                "+\t{",
                "+\t\treturn null;",
                " \t}",
                "@@ -166,3 +198,3 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t/**",
                "-\t * create a new {@link DateField} instance to be added to this panel.",
                "+\t * create a new {@link LocalDateTextField} instance to be added to this panel.",
                " \t * ",
                "@@ -171,8 +203,16 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t * @param dateFieldModel",
                "-\t *            model that should be used by the {@link DateField}",
                "+\t *            model that should be used by the {@link LocalDateTextField}",
                " \t * @return a new date text field instance",
                " \t */",
                "-\tprotected DateField newDateField(String id, IModel<LocalDate> dateFieldModel)",
                "+\tprotected LocalDateTextField newDateField(String id, IModel<LocalDate> dateFieldModel)",
                " \t{",
                "-\t\treturn DateField.forShortStyle(id, dateFieldModel);",
                "+\t\treturn new LocalDateTextField(id, dateFieldModel, FormatStyle.SHORT) {",
                "+\t\t\t@Override",
                "+\t\t\tprotected void onComponentTag(ComponentTag tag)",
                "+\t\t\t{",
                "+\t\t\t\tsuper.onComponentTag(tag);",
                "+\t\t\t\t",
                "+\t\t\t\ttag.append(\"class\", getString(DATE_CSS_CLASS_KEY), \" \");",
                "+\t\t\t}",
                "+\t\t};",
                " \t}",
                "@@ -190,3 +230,11 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t{",
                "-\t\treturn TimeField.forShortStyle(id, timeFieldModel);",
                "+\t\treturn new TimeField(id, timeFieldModel) {",
                "+\t\t\t@Override",
                "+\t\t\tprotected void onComponentTag(ComponentTag tag)",
                "+\t\t\t{",
                "+\t\t\t\tsuper.onComponentTag(tag);",
                "+\t\t\t\t",
                "+\t\t\t\ttag.append(\"class\", getString(TIME_CSS_CLASS_KEY), \" \");",
                "+\t\t\t}",
                "+\t\t};",
                " \t}",
                "@@ -199,7 +247,5 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t{",
                "-\t\tdateField.setRequired(isRequired());",
                "+\t\tlocalDateField.setRequired(isRequired());",
                " \t\ttimeField.setRequired(isRequired());",
                "-\t\tprepareObject();",
                "-",
                " \t\tsuper.onBeforeRender();",
                "@@ -207,8 +253,28 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                "-\tabstract LocalDate getLocalDate();",
                "-\tabstract void setLocalDate(LocalDate date);",
                "-\tabstract LocalTime getLocalTime();",
                "-\tabstract void setLocalTime(LocalTime time);",
                "+\t/**",
                "+\t * Get the local date from the given temporal.",
                "+\t * ",
                "+\t * @param temporal",
                "+\t * @return local date",
                "+\t */",
                "+\tprotected abstract LocalDate getLocalDate(T temporal);",
                "-\tprotected class DateModel implements IModel<LocalDate>",
                "+\t/**",
                "+\t * Get the time from the given temporal.",
                "+\t * ",
                "+\t * @param temporal",
                "+\t * @return time",
                "+\t */",
                "+\tprotected abstract LocalTime getLocalTime(T temporal);",
                "+",
                "+\t/**",
                "+\t * Create the temporal object from date and time. ",
                "+\t * ",
                "+\t * @param date",
                "+\t * @param time",
                "+\t * @return",
                "+\t */",
                "+\tprotected abstract T createTemporal(LocalDate date, LocalTime time);",
                "+",
                "+\tprivate class DateModel implements IModel<LocalDate>",
                " \t{",
                "@@ -219,3 +285,8 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\t{",
                "-\t\t\treturn getLocalDate();",
                "+\t\t\tT temporal = getModelObject();",
                "+\t\t\tif (temporal == null) {",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+\t\t\t",
                "+\t\t\treturn getLocalDate(temporal);",
                " \t\t}",
                "@@ -225,3 +296,3 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\t{",
                "-\t\t\tsetLocalDate(date);",
                "+\t\t\t// ignored",
                " \t\t}",
                "@@ -229,3 +300,3 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                "-\tprotected class TimeModel implements IModel<LocalTime>",
                "+\tprivate class TimeModel implements IModel<LocalTime>",
                " \t{",
                "@@ -236,3 +307,8 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\t{",
                "-\t\t\treturn getLocalTime();",
                "+\t\t\tT temporal = getModelObject();",
                "+\t\t\tif (temporal == null) {",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+\t\t\t",
                "+\t\t\treturn getLocalTime(temporal);",
                " \t\t}",
                "@@ -242,3 +318,3 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\t{",
                "-\t\t\tsetLocalTime(time);",
                "+\t\t\t// ignored",
                " \t\t}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java",
                "deleted file mode 100644",
                "index 895c0c6321..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java",
                "+++ /dev/null",
                "@@ -1,252 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.text.SimpleDateFormat;",
                "-import java.time.LocalDate;",
                "-import java.time.format.FormatStyle;",
                "-",
                "-import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "-import org.apache.wicket.markup.html.form.TextField;",
                "-import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.util.convert.IConverter;",
                "-import org.apache.wicket.util.lang.Args;",
                "-",
                "-/**",
                "- * A TextField that is mapped to a <code>java.time.LocalDate</code> object and that uses java.time time to",
                "- * parse and format values.",
                "- * <p>",
                "- * You should use on of the factory methods to construct the kind you want or use the public",
                "- * constructor and pass in the converter to use.",
                "- * </p>",
                "- * <p>",
                "- * This component tries to apply the time zone difference between the client and server. See the",
                "- * {@link ZonedDateTimeConverter#getApplyTimeZoneDifference() date converter} of this package for more",
                "- * information on that.",
                "- * </p>",
                "- * ",
                "- * @see StyleZonedDateTimeConverter",
                "- * @see java.time.ZonedDateTime",
                "- * @see java.time.format.DateTimeFormatter",
                "- * @see java.time.ZoneId",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class DateField extends TextField<LocalDate> implements ITextFormatProvider",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param datePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField forDatePattern(String id, IModel<LocalDate> model, String datePattern)",
                "-\t{",
                "-\t\treturn new DateField(id, model, new PatternDateConverter(datePattern));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param datePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField forDatePattern(String id, String datePattern)",
                "-\t{",
                "-\t\treturn forDatePattern(id, null, datePattern);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField using the provided date style.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param dateStyle",
                "-\t *            Date style to use. The first character is the date style, and the second character",
                "-\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "-\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "-\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField forDateStyle(String id, IModel<LocalDate> model, String dateStyle)",
                "-\t{",
                "-\t\treturn new DateField(id, model, new StyleDateConverter(dateStyle));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField using the provided date style.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param dateStyle",
                "-\t *            Date style to use. The first character is the date style, and the second character",
                "-\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "-\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "-\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField forDateStyle(String id, String dateStyle)",
                "-\t{",
                "-\t\treturn forDateStyle(id, null, dateStyle);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField forShortStyle(String id)",
                "-\t{",
                "-\t\treturn forShortStyle(id, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField forShortStyle(String id, IModel<LocalDate> model)",
                "-\t{",
                "-\t\treturn new DateField(id, model, new StyleDateConverter());",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField using the provided converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param converter",
                "-\t *            the date converter",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField withConverter(String id, LocalDateConverter converter)",
                "-\t{",
                "-\t\treturn withConverter(id, null, converter);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new DateField using the provided converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param converter",
                "-\t *            the date converter",
                "-\t * @return DateField",
                "-\t */",
                "-\tpublic static DateField withConverter(String id, IModel<LocalDate> model, LocalDateConverter converter)",
                "-\t{",
                "-\t\treturn new DateField(id, model, converter);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * The converter for the TextField",
                "-\t */",
                "-\tprivate final LocalDateConverter converter;",
                "-",
                "-\t/**",
                "-\t * Construct with a converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The component id",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param converter",
                "-\t *            The converter to use",
                "-\t */",
                "-\tpublic DateField(String id, IModel<LocalDate> model, LocalDateConverter converter)",
                "-\t{",
                "-\t\tsuper(id, model, LocalDate.class);",
                "-",
                "-\t\tArgs.notNull(converter, \"converter\");",
                "-\t\tthis.converter = converter;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct with a converter, and a null model.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The component id",
                "-\t * @param converter",
                "-\t *            The converter to use",
                "-\t */",
                "-\tpublic DateField(String id, LocalDateConverter converter)",
                "-\t{",
                "-\t\tthis(id, null, converter);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return The specialized converter.",
                "-\t * @see org.apache.wicket.Component#createConverter(java.lang.Class)",
                "-\t */",
                "-\t@Override",
                "-\tprotected IConverter<?> createConverter(Class<?> clazz)",
                "-\t{",
                "-\t\tif (LocalDate.class.isAssignableFrom(clazz))",
                "-\t\t{",
                "-\t\t\treturn converter;",
                "-\t\t}",
                "-\t\treturn null;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @see org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider#getTextFormat()",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getTextFormat()",
                "-\t{",
                "-\t\treturn converter.getPattern(getLocale());",
                "-\t}",
                "-",
                "-\tpublic static FormatStyle parseFormatStyle(char style)",
                "-\t{",
                "-\t\tswitch (style)",
                "-\t\t{",
                "-\t\t\tcase 'S':",
                "-\t\t\t\treturn FormatStyle.SHORT;",
                "-\t\t\tcase 'M':",
                "-\t\t\t\treturn FormatStyle.MEDIUM;",
                "-\t\t\tcase 'L':",
                "-\t\t\t\treturn FormatStyle.LONG;",
                "-\t\t\tcase 'F':",
                "-\t\t\t\treturn FormatStyle.FULL;",
                "-\t\t\tdefault:",
                "-\t\t\t\treturn null;",
                "-\t\t}",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "deleted file mode 100644",
                "index bc4801c67f..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "+++ /dev/null",
                "@@ -1,115 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.time.LocalDate;",
                "-import java.time.LocalDateTime;",
                "-import java.time.LocalTime;",
                "-import java.time.temporal.ChronoField;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                "-import org.apache.wicket.model.IModel;",
                "-",
                "-/**",
                "- * Works on a {@link java.time.LocalDateTimeTime} object. Displays a date field and a DatePicker, a field",
                "- * for hours and a field for minutes, and an AM/PM field. The format (12h/24h) of the hours field",
                "- * depends on the time format of this {@link DateTimeField}'s {@link Locale}, as does the visibility",
                "- * of the AM/PM field (see {@link DateTimeField#use12HourFormat}).",
                "- * <p>",
                "- * <strong>Ajaxifying the DateTimeField</strong>: If you want to update a DateTimeField with an",
                "- * {@link AjaxFormComponentUpdatingBehavior}, you have to attach it to the contained",
                "- * {@link DateField} by overriding {@link #newDateTextField(String, IModel)} and calling",
                "- * {@link #processInput()}:",
                "- * ",
                "- * <pre>{@code",
                "- *  DateTimeField dateTimeField = new DateTimeField(...) {",
                "- *    protected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)",
                "- *    {",
                "- *      DateTextField dateField = super.newDateTextField(id, dateFieldModel);     ",
                "- *      dateField.add(new AjaxFormComponentUpdatingBehavior(\"change\") {",
                "- *        protected void onUpdate(AjaxRequestTarget target) {",
                "- *          processInput(); // let DateTimeField process input too",
                "- *",
                "- *          ...",
                "- *        }",
                "- *      });",
                "- *      return recorder;",
                "- *    }",
                "- *  }",
                "- * }</pre>",
                "- * ",
                "- * @author eelcohillenius",
                "- * @see DateField for a variant with just the date field and date picker",
                "- */",
                "-public class DateTimeField extends AbstractDateTimeField<LocalDateTime>",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\tprivate LocalDateTime dateTime = LocalDateTime.now();",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t */",
                "-\tpublic DateTimeField(final String id)",
                "-\t{",
                "-\t\tthis(id, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t * @param model",
                "-\t */",
                "-\tpublic DateTimeField(final String id, final IModel<LocalDateTime> model)",
                "-\t{",
                "-\t\tsuper(id, model);",
                "-",
                "-\t\t// Sets the type that will be used when updating the model for this component.",
                "-\t\tsetType(LocalDateTime.class);",
                "-\t}",
                "-",
                "-\tLocalDateTime performConvert(LocalDate date, LocalTime time) {",
                "-\t\treturn LocalDateTime.of(date, time);",
                "-\t}",
                "-",
                "-\tLocalDate getLocalDate()",
                "-\t{",
                "-\t\treturn getModelObject() == null ? null : dateTime.toLocalDate();",
                "-\t}",
                "-",
                "-\tvoid setLocalDate(LocalDate date)",
                "-\t{",
                "-\t\tdateTime = dateTime.with(ChronoField.YEAR, date.getYear())",
                "-\t\t\t\t.with(ChronoField.MONTH_OF_YEAR, date.getMonthValue())",
                "-\t\t\t\t.with(ChronoField.DAY_OF_YEAR, date.getDayOfMonth());",
                "-\t}",
                "-",
                "-\tLocalTime getLocalTime()",
                "-\t{",
                "-\t\treturn getModelObject() == null ? null : dateTime.toLocalTime();",
                "-\t}",
                "-",
                "-\tvoid setLocalTime(LocalTime time)",
                "-\t{",
                "-\t\tdateTime = dateTime.with(ChronoField.HOUR_OF_DAY, time.getHour())",
                "-\t\t\t\t.with(ChronoField.MINUTE_OF_HOUR, time.getMinute());",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java",
                "deleted file mode 100644",
                "index 95e1a47a04..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java",
                "+++ /dev/null",
                "@@ -1,104 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.time.LocalDate;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.util.convert.ConversionException;",
                "-import org.apache.wicket.util.convert.IConverter;",
                "-import org.apache.wicket.util.lang.Args;",
                "-import org.apache.wicket.util.string.Strings;",
                "-",
                "-",
                "-/**",
                "- * Base class for java.time based date converters. It contains the logic to parse and format,",
                "- * optionally taking the time zone difference between clients and the server into account.",
                "- * <p>",
                "- * Converters of this class are best suited for per-component use.",
                "- * </p>",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public abstract class LocalDateConverter implements IConverter<LocalDate>",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\tpublic LocalDate convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\t// parse date retaining the time of the submission",
                "-\t\t\treturn LocalDate.parse(value, format);",
                "-\t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tthrow newConversionException(e, locale);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic LocalDate convertToObject(String value, Locale locale)",
                "-\t{",
                "-\t\tif (Strings.isEmpty(value))",
                "-\t\t{",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-",
                "-\t\tDateTimeFormatter format = getFormat(locale);",
                "-\t\tArgs.notNull(format, \"format\");",
                "-",
                "-\t\treturn convertToObject(value, format, locale);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a ConversionException and sets additional context information to it.",
                "-\t *",
                "-\t * @param cause",
                "-\t *            - {@link RuntimeException} cause",
                "-\t * @param locale",
                "-\t *            - {@link Locale} used to set 'format' variable with localized pattern",
                "-\t * @return {@link ConversionException}",
                "-\t */",
                "-\tConversionException newConversionException(RuntimeException cause, Locale locale)",
                "-\t{",
                "-\t\treturn new ConversionException(cause)",
                "-\t\t\t\t.setVariable(\"format\", getPattern(locale));",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic String convertToString(LocalDate dateTime, Locale locale)",
                "-\t{",
                "-\t\tDateTimeFormatter format = getFormat(locale);",
                "-\t\treturn format.format(dateTime);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param locale",
                "-\t *            The locale used to convert the value",
                "-\t * @return Gets the pattern that is used for printing and parsing",
                "-\t */",
                "-\tpublic abstract String getPattern(Locale locale);",
                "-",
                "-\t/**",
                "-\t * @param locale",
                "-\t *            The locale used to convert the value",
                "-\t * ",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\tpublic abstract DateTimeFormatter getFormat(Locale locale);",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java",
                "new file mode 100644",
                "index 0000000000..a1d1dc0b51",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.chrono.IsoChronology;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.time.format.DateTimeFormatterBuilder;",
                "+import java.time.format.FormatStyle;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "+import org.apache.wicket.markup.html.form.TextField;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.convert.converter.LocalDateConverter;",
                "+",
                "+/**",
                "+ * A TextField that is mapped to a <code>java.time.LocalDate</code> object and that uses java.time time to",
                "+ * parse and format values.",
                "+ * ",
                "+ * @see java.time.format.DateTimeFormatter",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class LocalDateTextField extends TextField<LocalDate> implements ITextFormatProvider",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * The converter for the TextField",
                "+\t */",
                "+\tprivate final TextFormatConverter converter;",
                "+\t",
                "+\t/**",
                "+\t * Construct with a pattern.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            the model",
                "+\t * @param pattern",
                "+\t *            the pattern to use",
                "+\t */",
                "+\tpublic LocalDateTextField(String id, IModel<LocalDate> model, String datePattern)",
                "+\t{",
                "+\t\tsuper(id, model, LocalDate.class);",
                "+",
                "+\t\tthis.converter = new TextFormatConverter() {",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic DateTimeFormatter getDateTimeFormatter(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatter.ofPattern(datePattern).withLocale(locale);",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic String getTextFormat(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn datePattern;",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct with a pattern.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param pattern",
                "+\t *            the pattern to use",
                "+\t */",
                "+\tpublic LocalDateTextField(String id, String datePattern)",
                "+\t{",
                "+\t\tthis(id, null, datePattern);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct with a style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            the model",
                "+\t * @param dateStyle",
                "+\t *            the style to use",
                "+\t */",
                "+\tpublic LocalDateTextField(String id, IModel<LocalDate> model, FormatStyle dateStyle)",
                "+\t{",
                "+\t\tsuper(id, model, LocalDate.class);",
                "+",
                "+\t\tthis.converter = new TextFormatConverter() {",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic DateTimeFormatter getDateTimeFormatter(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatter.ofLocalizedDate(dateStyle).withLocale(locale);",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic String getTextFormat(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatterBuilder.getLocalizedDateTimePattern(dateStyle, null, IsoChronology.INSTANCE, locale);",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+",
                "+\t/**",
                "+\t * Construct with a style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param dateStyle",
                "+\t *            the style to use",
                "+\t */",
                "+\tpublic LocalDateTextField(String id, FormatStyle dateStyle)",
                "+\t{",
                "+\t\tthis(id, null, dateStyle);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return The specialized converter.",
                "+\t * @see org.apache.wicket.Component#createConverter(java.lang.Class)",
                "+\t */",
                "+\t@Override",
                "+\tprotected IConverter<?> createConverter(Class<?> clazz)",
                "+\t{",
                "+\t\tif (LocalDate.class.isAssignableFrom(clazz))",
                "+\t\t{",
                "+\t\t\treturn converter;",
                "+\t\t}",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider#getTextFormat()",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getTextFormat()",
                "+\t{",
                "+\t\treturn converter.getTextFormat(getLocale());",
                "+\t}",
                "+",
                "+\tprivate abstract class TextFormatConverter extends LocalDateConverter {",
                "+\t\t",
                "+\t\tpublic abstract String getTextFormat(Locale locale);",
                "+\t}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeField.java",
                "new file mode 100644",
                "index 0000000000..2283904d69",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeField.java",
                "@@ -0,0 +1,74 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.LocalDateTime;",
                "+import java.time.LocalTime;",
                "+",
                "+import org.apache.wicket.model.IModel;",
                "+",
                "+/**",
                "+ * Works on a {@link java.time.LocalDateTime} object. See {@link AbstractDateTimeField} for",
                "+ * further details.",
                "+ *  ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class LocalDateTimeField extends AbstractDateTimeField<LocalDateTime>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t */",
                "+\tpublic LocalDateTimeField(final String id)",
                "+\t{",
                "+\t\tthis(id, null);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct.",
                "+\t * ",
                "+\t * @param id",
                "+\t * @param model",
                "+\t */",
                "+\tpublic LocalDateTimeField(final String id, final IModel<LocalDateTime> model)",
                "+\t{",
                "+\t\tsuper(id, model);",
                "+",
                "+\t\t// Sets the type that will be used when updating the model for this component.",
                "+\t\tsetType(LocalDateTime.class);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected LocalDateTime createTemporal(LocalDate date, LocalTime time) {",
                "+\t\treturn LocalDateTime.of(date, time);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected LocalDate getLocalDate(LocalDateTime temporal)",
                "+\t{",
                "+\t\treturn temporal.toLocalDate();",
                "+\t}",
                "+",
                "+\tprotected LocalTime getLocalTime(LocalDateTime temporal)",
                "+\t{",
                "+\t\treturn temporal.toLocalTime();",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java",
                "new file mode 100644",
                "index 0000000000..772b5f319c",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDateTime;",
                "+import java.time.chrono.IsoChronology;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.time.format.DateTimeFormatterBuilder;",
                "+import java.time.format.FormatStyle;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "+import org.apache.wicket.markup.html.form.TextField;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.convert.converter.LocalDateTimeConverter;",
                "+",
                "+/**",
                "+ * A TextField that is mapped to a <code>java.time.LocalDateTime</code> object and that uses java.time time to",
                "+ * parse and format values.",
                "+ * ",
                "+ * @see java.time.format.DateTimeFormatter",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class LocalDateTimeTextField extends TextField<LocalDateTime> implements ITextFormatProvider",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * The converter for the TextField",
                "+\t */",
                "+\tprivate final TextFormatConverter converter;",
                "+\t",
                "+\t/**",
                "+\t * Construct with a pattern.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            the model",
                "+\t * @param pattern",
                "+\t *            the pattern to use",
                "+\t */",
                "+\tpublic LocalDateTimeTextField(String id, IModel<LocalDateTime> model, String dateTimePattern)",
                "+\t{",
                "+\t\tsuper(id, model, LocalDateTime.class);",
                "+",
                "+\t\tthis.converter = new TextFormatConverter() {",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic DateTimeFormatter getDateTimeFormatter(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatter.ofPattern(dateTimePattern).withLocale(locale);",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic String getTextFormat(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn dateTimePattern;",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct with a pattern.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param pattern",
                "+\t *            the pattern to use",
                "+\t */",
                "+\tpublic LocalDateTimeTextField(String id, String dateTimePattern)",
                "+\t{",
                "+\t\tthis(id, null, dateTimePattern);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct with a style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            the model",
                "+\t * @param timeStyle",
                "+\t *            the style to use",
                "+\t */",
                "+\tpublic LocalDateTimeTextField(String id, IModel<LocalDateTime> model, FormatStyle dateStyle, FormatStyle timeStyle)",
                "+\t{",
                "+\t\tsuper(id, model, LocalDateTime.class);",
                "+",
                "+\t\tthis.converter = new TextFormatConverter() {",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic DateTimeFormatter getDateTimeFormatter(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatter.ofLocalizedDateTime(dateStyle, timeStyle).withLocale(locale);",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic String getTextFormat(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatterBuilder.getLocalizedDateTimePattern(dateStyle, timeStyle, IsoChronology.INSTANCE, locale);",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+",
                "+\t/**",
                "+\t * Construct with a style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param timeStyle",
                "+\t *            the style to use",
                "+\t */",
                "+\tpublic LocalDateTimeTextField(String id, FormatStyle dateStyle, FormatStyle timeStyle)",
                "+\t{",
                "+\t\tthis(id, null, dateStyle, timeStyle);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return The specialized converter.",
                "+\t * @see org.apache.wicket.Component#createConverter(java.lang.Class)",
                "+\t */",
                "+\t@Override",
                "+\tprotected IConverter<?> createConverter(Class<?> clazz)",
                "+\t{",
                "+\t\tif (LocalDateTime.class.isAssignableFrom(clazz))",
                "+\t\t{",
                "+\t\t\treturn converter;",
                "+\t\t}",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider#getTextFormat()",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getTextFormat()",
                "+\t{",
                "+\t\treturn converter.getTextFormat(getLocale());",
                "+\t}",
                "+",
                "+\tprivate abstract class TextFormatConverter extends LocalDateTimeConverter {",
                "+\t\t",
                "+\t\tpublic abstract String getTextFormat(Locale locale);",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java",
                "deleted file mode 100644",
                "index 1597ab6d46..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java",
                "+++ /dev/null",
                "@@ -1,104 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.time.LocalTime;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.util.convert.ConversionException;",
                "-import org.apache.wicket.util.convert.IConverter;",
                "-import org.apache.wicket.util.lang.Args;",
                "-import org.apache.wicket.util.string.Strings;",
                "-",
                "-",
                "-/**",
                "- * Base class for java.time based date converters. It contains the logic to parse and format,",
                "- * optionally taking the time zone difference between clients and the server into account.",
                "- * <p>",
                "- * Converters of this class are best suited for per-component use.",
                "- * </p>",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public abstract class LocalTimeConverter implements IConverter<LocalTime>",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\tpublic LocalTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\t// parse date retaining the time of the submission",
                "-\t\t\treturn LocalTime.parse(value, format);",
                "-\t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tthrow newConversionException(e, locale);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic LocalTime convertToObject(String value, Locale locale)",
                "-\t{",
                "-\t\tif (Strings.isEmpty(value))",
                "-\t\t{",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-",
                "-\t\tDateTimeFormatter format = getFormat(locale);",
                "-\t\tArgs.notNull(format, \"format\");",
                "-",
                "-\t\treturn convertToObject(value, format, locale);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a ConversionException and sets additional context information to it.",
                "-\t *",
                "-\t * @param cause",
                "-\t *            - {@link RuntimeException} cause",
                "-\t * @param locale",
                "-\t *            - {@link Locale} used to set 'format' variable with localized pattern",
                "-\t * @return {@link ConversionException}",
                "-\t */",
                "-\tConversionException newConversionException(RuntimeException cause, Locale locale)",
                "-\t{",
                "-\t\treturn new ConversionException(cause)",
                "-\t\t\t\t.setVariable(\"format\", getPattern(locale));",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic String convertToString(LocalTime time, Locale locale)",
                "-\t{",
                "-\t\tDateTimeFormatter format = getFormat(locale);",
                "-\t\treturn format.format(time);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param locale",
                "-\t *            The locale used to convert the value",
                "-\t * @return Gets the pattern that is used for printing and parsing",
                "-\t */",
                "-\tpublic abstract String getPattern(Locale locale);",
                "-",
                "-\t/**",
                "-\t * @param locale",
                "-\t *            The locale used to convert the value",
                "-\t * ",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\tpublic abstract DateTimeFormatter getFormat(Locale locale);",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java",
                "new file mode 100644",
                "index 0000000000..5ea7e3af0f",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalTime;",
                "+import java.time.chrono.IsoChronology;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.time.format.DateTimeFormatterBuilder;",
                "+import java.time.format.FormatStyle;",
                "+import java.util.Locale;",
                "+",
                "+import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "+import org.apache.wicket.markup.html.form.TextField;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.util.convert.IConverter;",
                "+import org.apache.wicket.util.convert.converter.LocalTimeConverter;",
                "+",
                "+/**",
                "+ * A TextField that is mapped to a <code>java.time.LocalTime</code> object and that uses java.time time to",
                "+ * parse and format values.",
                "+ * ",
                "+ * @see java.time.format.DateTimeFormatter",
                "+ * ",
                "+ * @author eelcohillenius",
                "+ */",
                "+public class LocalTimeTextField extends TextField<LocalTime> implements ITextFormatProvider",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\t/**",
                "+\t * The converter for the TextField",
                "+\t */",
                "+\tprivate final TextFormatConverter converter;",
                "+\t",
                "+\t/**",
                "+\t * Construct with a pattern.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            the model",
                "+\t * @param pattern",
                "+\t *            the pattern to use",
                "+\t */",
                "+\tpublic LocalTimeTextField(String id, IModel<LocalTime> model, String timePattern)",
                "+\t{",
                "+\t\tsuper(id, model, LocalTime.class);",
                "+",
                "+\t\tthis.converter = new TextFormatConverter() {",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic DateTimeFormatter getDateTimeFormatter(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatter.ofPattern(timePattern).withLocale(locale);",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic String getTextFormat(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn timePattern;",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct with a pattern.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param pattern",
                "+\t *            the pattern to use",
                "+\t */",
                "+\tpublic LocalTimeTextField(String id, String datePattern)",
                "+\t{",
                "+\t\tthis(id, null, datePattern);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct with a style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param model",
                "+\t *            the model",
                "+\t * @param timeStyle",
                "+\t *            the style to use",
                "+\t */",
                "+\tpublic LocalTimeTextField(String id, IModel<LocalTime> model, FormatStyle timeStyle)",
                "+\t{",
                "+\t\tsuper(id, model, LocalTime.class);",
                "+",
                "+\t\tthis.converter = new TextFormatConverter() {",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic DateTimeFormatter getDateTimeFormatter(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatter.ofLocalizedTime(timeStyle).withLocale(locale);",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic String getTextFormat(Locale locale)",
                "+\t\t\t{",
                "+\t\t\t\treturn DateTimeFormatterBuilder.getLocalizedDateTimePattern(null, timeStyle, IsoChronology.INSTANCE, locale);",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+",
                "+\t/**",
                "+\t * Construct with a style.",
                "+\t * ",
                "+\t * @param id",
                "+\t *            the component id",
                "+\t * @param timeStyle",
                "+\t *            the style to use",
                "+\t */",
                "+\tpublic LocalTimeTextField(String id, FormatStyle timeStyle)",
                "+\t{",
                "+\t\tthis(id, null, timeStyle);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @return The specialized converter.",
                "+\t * @see org.apache.wicket.Component#createConverter(java.lang.Class)",
                "+\t */",
                "+\t@Override",
                "+\tprotected IConverter<?> createConverter(Class<?> clazz)",
                "+\t{",
                "+\t\tif (LocalTime.class.isAssignableFrom(clazz))",
                "+\t\t{",
                "+\t\t\treturn converter;",
                "+\t\t}",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider#getTextFormat()",
                "+\t */",
                "+\t@Override",
                "+\tpublic final String getTextFormat()",
                "+\t{",
                "+\t\treturn converter.getTextFormat(getLocale());",
                "+\t}",
                "+",
                "+\tprivate abstract class TextFormatConverter extends LocalTimeConverter {",
                "+\t\t",
                "+\t\tpublic abstract String getTextFormat(Locale locale);",
                "+\t}",
                "+}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java",
                "deleted file mode 100644",
                "index 54ea179d6d..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java",
                "+++ /dev/null",
                "@@ -1,85 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.text.SimpleDateFormat;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.util.lang.Args;",
                "-",
                "-",
                "-/**",
                "- * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "- * clients and server into account. This converter is hard coded to use the provided custom date",
                "- * pattern, no matter what current locale is used. See {@link SimpleDateFormat} for available",
                "- * patterns.",
                "- * <p>",
                "- * This converter is especially suited on a per-component base.",
                "- * </p>",
                "- * ",
                "- * @see SimpleDateFormat",
                "- * @see StyleDateConverter",
                "- * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "- * @see java.time.LocalDate",
                "- * @see DateTimeFormatter",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class PatternDateConverter extends LocalDateConverter",
                "-{",
                "-",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/** pattern to use. */",
                "-\tprivate final String datePattern;",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param datePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @throws IllegalArgumentException",
                "-\t *             in case the date pattern is null",
                "-\t */",
                "-\tpublic PatternDateConverter(String datePattern)",
                "-\t{",
                "-\t\tsuper();",
                "-\t\tthis.datePattern = Args.notNull(datePattern, \"datePattern\");",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the optional date pattern.",
                "-\t * ",
                "-\t * @return datePattern",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getPattern(Locale locale)",
                "-\t{",
                "-\t\treturn datePattern;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\t@Override",
                "-\tpublic DateTimeFormatter getFormat(Locale locale)",
                "-\t{",
                "-\t\treturn DateTimeFormatter.ofPattern(datePattern).withLocale(locale);",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java",
                "deleted file mode 100644",
                "index 021f500f68..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java",
                "+++ /dev/null",
                "@@ -1,85 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.text.SimpleDateFormat;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.util.lang.Args;",
                "-",
                "-",
                "-/**",
                "- * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "- * clients and server into account. This converter is hard coded to use the provided custom date",
                "- * pattern, no matter what current locale is used. See {@link SimpleDateFormat} for available",
                "- * patterns.",
                "- * <p>",
                "- * This converter is especially suited on a per-component base.",
                "- * </p>",
                "- * ",
                "- * @see SimpleDateFormat",
                "- * @see StyleDateConverter",
                "- * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "- * @see java.time.LocalTime",
                "- * @see DateTimeFormatter",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class PatternTimeConverter extends LocalTimeConverter",
                "-{",
                "-",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/** pattern to use. */",
                "-\tprivate final String timePattern;",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param timePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @throws IllegalArgumentException",
                "-\t *             in case the date pattern is null",
                "-\t */",
                "-\tpublic PatternTimeConverter(String timePattern)",
                "-\t{",
                "-\t\tsuper();",
                "-\t\tthis.timePattern = Args.notNull(timePattern, \"timePattern\");",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the optional date pattern.",
                "-\t * ",
                "-\t * @return datePattern",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getPattern(Locale locale)",
                "-\t{",
                "-\t\treturn timePattern;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\t@Override",
                "-\tpublic DateTimeFormatter getFormat(Locale locale)",
                "-\t{",
                "-\t\treturn DateTimeFormatter.ofPattern(timePattern).withLocale(locale);",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java",
                "deleted file mode 100644",
                "index c432d907eb..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java",
                "+++ /dev/null",
                "@@ -1,97 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.text.SimpleDateFormat;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.util.Locale;",
                "-",
                "-import org.apache.wicket.util.lang.Args;",
                "-",
                "-",
                "-/**",
                "- * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "- * clients and server into account. This converter is hard coded to use the provided custom date",
                "- * pattern, no matter what current locale is used. See {@link SimpleDateFormat} for available",
                "- * patterns.",
                "- * <p>",
                "- * This converter is especially suited on a per-component base.",
                "- * </p>",
                "- * ",
                "- * @see SimpleDateFormat",
                "- * @see StyleZonedDateTimeConverter",
                "- * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "- * @see java.time.ZonedDateTime",
                "- * @see DateTimeFormatter",
                "- * @see java.time.ZoneId",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class PatternZonedDateTimeConverter extends ZonedDateTimeConverter",
                "-{",
                "-",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/** pattern to use. */",
                "-\tprivate final String datePattern;",
                "-",
                "-\t/**",
                "-\t * Construct.",
                "-\t * </p>",
                "-\t * When applyTimeZoneDifference is true, the current time is applied on the parsed date, and the",
                "-\t * date will be corrected for the time zone difference between the server and the client. For",
                "-\t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9",
                "-\t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the",
                "-\t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while",
                "-\t * the client sees 12/24.",
                "-\t * </p>",
                "-\t * ",
                "-\t * @param datePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @param applyTimeZoneDifference",
                "-\t *            whether to apply the difference in time zones between client and server",
                "-\t * @throws IllegalArgumentException",
                "-\t *             in case the date pattern is null",
                "-\t */",
                "-\tpublic PatternZonedDateTimeConverter(String datePattern, boolean applyTimeZoneDifference)",
                "-\t{",
                "-",
                "-\t\tsuper(applyTimeZoneDifference);",
                "-\t\tthis.datePattern = Args.notNull(datePattern, \"datePattern\");",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the optional date pattern.",
                "-\t * ",
                "-\t * @return datePattern",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getPattern(Locale locale)",
                "-\t{",
                "-\t\treturn datePattern;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\t@Override",
                "-\tpublic DateTimeFormatter getFormat(Locale locale)",
                "-\t{",
                "-\t\treturn DateTimeFormatter.ofPattern(datePattern).withLocale(locale);",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java",
                "deleted file mode 100644",
                "index 79decad7d2..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java",
                "+++ /dev/null",
                "@@ -1,118 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.time.LocalDate;",
                "-import java.time.chrono.IsoChronology;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.time.format.DateTimeFormatterBuilder;",
                "-import java.time.format.FormatStyle;",
                "-import java.util.Locale;",
                "-",
                "-/**",
                "- * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "- * clients and server into account, and that is configured for a certain date style. The pattern",
                "- * will always be locale specific.",
                "- * <p>",
                "- * This converter is especially suited on a per-component base.",
                "- * </p>",
                "- * ",
                "- * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "- * @see java.time.LocalDate",
                "- * @see DateTimeFormatter",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class StyleDateConverter extends LocalDateConverter",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "-\t */",
                "-\tprivate final FormatStyle dateStyle;",
                "-",
                "-\t/**",
                "-\t * Construct. The dateStyle 'S-' (which is the same as {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}) will",
                "-\t * be used for constructing the date format for the current locale.",
                "-\t * ",
                "-\t */",
                "-\tpublic StyleDateConverter()",
                "-\t{",
                "-\t\tthis(FormatStyle.SHORT);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct. The provided pattern will be used as the base format (but they will be localized",
                "-\t * for the current locale) and if null, {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)} will be used.",
                "-\t * ",
                "-\t * @param dateStyle",
                "-\t *            Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "-\t * @throws IllegalArgumentException",
                "-\t *             in case dateStyle is null",
                "-\t */",
                "-\tpublic StyleDateConverter(FormatStyle dateStyle)",
                "-\t{",
                "-\t\tsuper();",
                "-\t\tthis.dateStyle = dateStyle;",
                "-\t}",
                "-",
                "-\tpublic StyleDateConverter(String dateStyle)",
                "-\t{",
                "-\t\tthis(parseFormatStyle(dateStyle.charAt(0)));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the optional date pattern.",
                "-\t * ",
                "-\t * @return datePattern",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getPattern(Locale locale)",
                "-\t{",
                "-\t\treturn DateTimeFormatterBuilder.getLocalizedDateTimePattern(dateStyle, null, IsoChronology.INSTANCE, locale);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\t@Override",
                "-\tpublic DateTimeFormatter getFormat(Locale locale)",
                "-\t{",
                "-\t\treturn dateStyle == null ? null : DateTimeFormatter.ofLocalizedDate(dateStyle).withLocale(locale);",
                "-\t}",
                "-",
                "-\tpublic static FormatStyle parseFormatStyle(char style)",
                "-\t{",
                "-\t\treturn DateField.parseFormatStyle(style);",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic LocalDate convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "-\t\tif (format == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\treturn LocalDate.parse(value, format);",
                "-\t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tthrow newConversionException(e, locale);",
                "-\t\t}",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java",
                "deleted file mode 100644",
                "index e95725b13e..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java",
                "+++ /dev/null",
                "@@ -1,114 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.time.LocalTime;",
                "-import java.time.chrono.IsoChronology;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.time.format.DateTimeFormatterBuilder;",
                "-import java.time.format.FormatStyle;",
                "-import java.util.Locale;",
                "-",
                "-/**",
                "- * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "- * clients and server into account, and that is configured for a certain date style. The pattern",
                "- * will always be locale specific.",
                "- * <p>",
                "- * This converter is especially suited on a per-component base.",
                "- * </p>",
                "- * ",
                "- * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "- */",
                "-public class StyleTimeConverter extends LocalTimeConverter",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Date style to use. See {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}.",
                "-\t */",
                "-\tprivate final FormatStyle timeStyle;",
                "-",
                "-\t/**",
                "-\t * Construct. The dateStyle 'S-' (which is the same as {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}) will",
                "-\t * be used for constructing the date format for the current locale.",
                "-\t * ",
                "-\t */",
                "-\tpublic StyleTimeConverter()",
                "-\t{",
                "-\t\tthis(FormatStyle.SHORT);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct. The provided pattern will be used as the base format (but they will be localized",
                "-\t * for the current locale) and if null, {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)} will be used.",
                "-\t * ",
                "-\t * @param timeStyle",
                "-\t *            Date style to use. See {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}.",
                "-\t * @throws IllegalArgumentException",
                "-\t *             in case dateStyle is null",
                "-\t */",
                "-\tpublic StyleTimeConverter(FormatStyle timeStyle)",
                "-\t{",
                "-\t\tsuper();",
                "-\t\tthis.timeStyle = timeStyle;",
                "-\t}",
                "-",
                "-\tpublic StyleTimeConverter(String timeStyle)",
                "-\t{",
                "-\t\tthis(parseFormatStyle(timeStyle.charAt(0)));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the optional time pattern.",
                "-\t * ",
                "-\t * @return timePattern",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getPattern(Locale locale)",
                "-\t{",
                "-\t\treturn DateTimeFormatterBuilder.getLocalizedDateTimePattern(null, timeStyle, IsoChronology.INSTANCE, locale);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\t@Override",
                "-\tpublic DateTimeFormatter getFormat(Locale locale)",
                "-\t{",
                "-\t\treturn timeStyle == null ? null : DateTimeFormatter.ofLocalizedTime(timeStyle).withLocale(locale);",
                "-\t}",
                "-",
                "-\tpublic static FormatStyle parseFormatStyle(char style)",
                "-\t{",
                "-\t\treturn TimeField.parseFormatStyle(style);",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic LocalTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "-\t\tif (format == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\treturn LocalTime.parse(value, format);",
                "-\t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tthrow newConversionException(e, locale);",
                "-\t\t}",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java",
                "deleted file mode 100644",
                "index c186cfe67c..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java",
                "+++ /dev/null",
                "@@ -1,168 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.time.LocalDate;",
                "-import java.time.ZonedDateTime;",
                "-import java.time.chrono.IsoChronology;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.time.format.DateTimeFormatterBuilder;",
                "-import java.time.format.FormatStyle;",
                "-import java.util.Locale;",
                "-",
                "-/**",
                "- * Date converter that uses javax.time and can be configured to take the time zone difference between",
                "- * clients and server into account, and that is configured for a certain date style. The pattern",
                "- * will always be locale specific.",
                "- * <p>",
                "- * This converter is especially suited on a per-component base.",
                "- * </p>",
                "- * ",
                "- * @see org.apache.wicket.extensions.markup.html.form.DateTextField",
                "- * @see java.time.ZonedDateTime",
                "- * @see DateTimeFormatter",
                "- * @see java.time.ZoneId",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public class StyleZonedDateTimeConverter extends ZonedDateTimeConverter",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "-\t */",
                "-\tprivate final FormatStyle dateStyle;",
                "-",
                "-\tprivate final FormatStyle timeStyle;",
                "-",
                "-\t/**",
                "-\t * Construct. The dateStyle 'S-' (which is the same as {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}) will",
                "-\t * be used for constructing the date format for the current locale. </p> When",
                "-\t * applyTimeZoneDifference is true, the current time is applied on the parsed date, and the date",
                "-\t * will be corrected for the time zone difference between the server and the client. For",
                "-\t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9",
                "-\t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the",
                "-\t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while",
                "-\t * the client sees 12/24. </p>",
                "-\t * ",
                "-\t * @param applyTimeZoneDifference",
                "-\t *            whether to apply the difference in time zones between client and server",
                "-\t */",
                "-\tpublic StyleZonedDateTimeConverter(boolean applyTimeZoneDifference)",
                "-\t{",
                "-\t\tthis(FormatStyle.SHORT, null, applyTimeZoneDifference);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Construct. The provided pattern will be used as the base format (but they will be localized",
                "-\t * for the current locale) and if null, {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)} will be used. </p>",
                "-\t * When applyTimeZoneDifference is true, the current time is applied on the parsed date, and the",
                "-\t * date will be corrected for the time zone difference between the server and the client. For",
                "-\t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9",
                "-\t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the",
                "-\t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while",
                "-\t * the client sees 12/24. </p>",
                "-\t * ",
                "-\t * @param dateStyle",
                "-\t *            Date style to use. See {@link DateTimeFormatter#ofLocalizedDate(FormatStyle)}.",
                "-\t * @param timeStyle",
                "-\t *            Time style to use. See {@link DateTimeFormatter#ofLocalizedTime(FormatStyle)}",
                "-\t * @param applyTimeZoneDifference",
                "-\t *            whether to apply the difference in time zones between client and server",
                "-\t * @throws IllegalArgumentException",
                "-\t *             in case dateStyle is null",
                "-\t */",
                "-\tpublic StyleZonedDateTimeConverter(FormatStyle dateStyle, FormatStyle timeStyle, boolean applyTimeZoneDifference)",
                "-\t{",
                "-\t\tsuper(applyTimeZoneDifference);",
                "-\t\tthis.dateStyle = dateStyle;",
                "-\t\tthis.timeStyle = timeStyle;",
                "-\t}",
                "-",
                "-\tpublic StyleZonedDateTimeConverter(String dateTimeStyle, boolean applyTimeZoneDifference)",
                "-\t{",
                "-\t\tthis(parseFormatStyle(dateTimeStyle.charAt(0)), parseFormatStyle(dateTimeStyle.charAt(1)), applyTimeZoneDifference);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets the optional date pattern.",
                "-\t * ",
                "-\t * @return datePattern",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getPattern(Locale locale)",
                "-\t{",
                "-\t\tString localizedDateTimePattern = DateTimeFormatterBuilder.getLocalizedDateTimePattern(dateStyle, timeStyle, IsoChronology.INSTANCE, locale);",
                "-\t\treturn localizedDateTimePattern;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\t@Override",
                "-\tpublic DateTimeFormatter getFormat(Locale locale)",
                "-\t{",
                "-\t\tDateTimeFormatter df = null;",
                "-\t\tif (dateStyle == null && timeStyle == null) {",
                "-\t\t\treturn df;",
                "-\t\t}",
                "-\t\tif (timeStyle == null)",
                "-\t\t{",
                "-\t\t\tdf = DateTimeFormatter.ofLocalizedDate(dateStyle);",
                "-\t\t}",
                "-\t\telse if (dateStyle == null)",
                "-\t\t{",
                "-\t\t\tdf = DateTimeFormatter.ofLocalizedTime(timeStyle);",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\tdf = DateTimeFormatter.ofLocalizedDateTime(dateStyle, timeStyle);",
                "-\t\t}",
                "-\t\treturn df.withLocale(locale);",
                "-\t}",
                "-",
                "-\tpublic static FormatStyle parseFormatStyle(char style)",
                "-\t{",
                "-\t\treturn DateField.parseFormatStyle(style);",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic ZonedDateTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "-\t\tif (format == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\tif (timeStyle == null)",
                "-\t\t\t{",
                "-\t\t\t\tLocalDate d = LocalDate.parse(value, format);",
                "-\t\t\t\treturn ZonedDateTime.of(d.atStartOfDay(), getTimeZone());",
                "-\t\t\t}",
                "-\t\t\telse if (dateStyle == null)",
                "-\t\t\t{",
                "-\t\t\t\t// not sure how we can get ZonedDateTime from time",
                "-\t\t\t\treturn null;",
                "-\t\t\t}",
                "-\t\t\treturn super.convertToObject(value, format, locale);",
                "-\t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tthrow newConversionException(e, locale);",
                "-\t\t}",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html",
                "index 82cb00de69..b80249c23b 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html",
                "@@ -18,5 +18,5 @@",
                " <wicket:panel xmlns:wicket=\"http://wicket.apache.org\">",
                "-  <span style=\"white-space: nowrap;\">",
                "+  <span>",
                "     <input type=\"number\" wicket:id=\"hours\" size=\"2\" maxlength=\"2\" />",
                "-    <span wicket:id=\"hoursSeparator\">&#160;:</span>",
                "+    <span wicket:id=\"hoursSeparator\"> : </span>",
                "     <input type=\"number\" wicket:id=\"minutes\" size=\"2\" maxlength=\"2\" />",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "index 68af251606..976bc49336 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "@@ -20,3 +20,2 @@ import java.text.DecimalFormat;",
                " import java.text.NumberFormat;",
                "-import java.text.SimpleDateFormat;",
                " import java.time.LocalTime;",
                "@@ -29,5 +28,5 @@ import java.util.Locale;",
                "-import org.apache.wicket.AttributeModifier;",
                "-import org.apache.wicket.markup.html.WebMarkupContainer;",
                "-import org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider;",
                "+import org.apache.wicket.core.util.string.CssUtils;",
                "+import org.apache.wicket.markup.ComponentTag;",
                "+import org.apache.wicket.markup.html.basic.Label;",
                " import org.apache.wicket.markup.html.form.DropDownChoice;",
                "@@ -36,6 +35,6 @@ import org.apache.wicket.markup.html.form.TextField;",
                " import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.model.Model;",
                "+import org.apache.wicket.model.ResourceModel;",
                "+import org.apache.wicket.util.convert.ConversionException;",
                " import org.apache.wicket.util.convert.IConverter;",
                " import org.apache.wicket.util.convert.converter.IntegerConverter;",
                "-import org.apache.wicket.util.lang.Args;",
                " import org.apache.wicket.validation.validator.RangeValidator;",
                "@@ -43,4 +42,4 @@ import org.apache.wicket.validation.validator.RangeValidator;",
                " /**",
                "- * Works on a {@link java.util.Date} object. Displays a field for hours and a field for minutes, and",
                "- * an AM/PM field. The format (12h/24h) of the hours field depends on the time format of this",
                "+ * Works on a {@link LocalTime} object. Displays a field for hours and a field for minutes, and an",
                "+ * AM/PM field. The format (12h/24h) of the hours field depends on the time format of this",
                "  * {@link TimeField}'s {@link Locale}, as does the visibility of the AM/PM field (see",
                "@@ -49,5 +48,4 @@ import org.apache.wicket.validation.validator.RangeValidator;",
                "  * @author eelcohillenius",
                "- * @see TimeField for a variant with just the date field and date picker",
                "  */",
                "-public class TimeField extends FormComponentPanel<LocalTime> implements ITextFormatProvider",
                "+public class TimeField extends FormComponentPanel<LocalTime>",
                " {",
                "@@ -55,2 +53,6 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                "+\tpublic static final String HOURS_CSS_CLASS_KEY = CssUtils.key(TimeField.class, \"hours\");",
                "+",
                "+\tpublic static final String MINUTES_CSS_CLASS_KEY = CssUtils.key(TimeField.class, \"minutes\");",
                "+",
                " \t/**",
                "@@ -58,30 +60,13 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t */",
                "-\tpublic enum AM_PM {",
                "-\t\t/** */",
                "-\t\tAM(\"AM\"),",
                "-",
                "-\t\t/** */",
                "-\t\tPM(\"PM\");",
                "-",
                "-\t\tprivate  final String value;",
                "-",
                "-\t\tAM_PM(final String name)",
                "-\t\t{",
                "-\t\t\tvalue = name;",
                "-\t\t}",
                "-",
                "-\t\t@Override",
                "-\t\tpublic String toString()",
                "-\t\t{",
                "-\t\t\treturn value;",
                "-\t\t}",
                "+\tpublic enum AM_PM",
                "+\t{",
                "+\t\tAM, PM;",
                " \t}",
                "-\tprotected static final String HOURS = \"hours\";",
                "-\tprotected static final String MINUTES = \"minutes\";",
                "-\tprotected static final String AM_OR_PM_CHOICE = \"amOrPmChoice\";",
                "-\tprivate static final IConverter<Integer> MINUTES_CONVERTER = new IntegerConverter() {",
                "+\tprivate static final IConverter<Integer> MINUTES_CONVERTER = new IntegerConverter()",
                "+\t{",
                " \t\tprivate static final long serialVersionUID = 1L;",
                "-\t\tprotected NumberFormat newNumberFormat(Locale locale) {",
                "+\t\tprotected NumberFormat newNumberFormat(Locale locale)",
                "+\t\t{",
                " \t\t\treturn new DecimalFormat(\"00\");",
                "@@ -98,34 +83,12 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \tprivate DropDownChoice<AM_PM> amOrPmChoice;",
                "-\tprivate LocalTime time = LocalTime.now();",
                " \t/**",
                "-\t * Creates a new TimeField defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param timePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @return TimeField",
                "-\t */",
                "-\tpublic static TimeField forTimePattern(String id, IModel<LocalTime> model, String timePattern)",
                "-\t{",
                "-\t\treturn new TimeField(id, model, new PatternTimeConverter(timePattern));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new TimeField defaulting to using a short date pattern",
                "+\t * Construct.",
                " \t * ",
                " \t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param timePattern",
                "-\t *            The pattern to use. Must be not null. See {@link SimpleDateFormat} for available",
                "-\t *            patterns.",
                "-\t * @return TimeField",
                "+\t *            the component id",
                " \t */",
                "-\tpublic static TimeField forTimePattern(String id, String timePattern)",
                "+\tpublic TimeField(String id)",
                " \t{",
                "-\t\treturn forTimePattern(id, null, timePattern);",
                "+\t\tthis(id, null);",
                " \t}",
                "@@ -133,145 +96,50 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t/**",
                "-\t * Creates a new TimeField using the provided date style.",
                "+\t * Construct.",
                " \t * ",
                " \t * @param id",
                "-\t *            The id of the text field",
                "+\t *            the component id",
                " \t * @param model",
                "-\t *            The model",
                "-\t * @param timeStyle",
                "-\t *            Date style to use. The first character is the date style, and the second character",
                "-\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "-\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "-\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "-\t * @return TimeField",
                "-\t */",
                "-\tpublic static TimeField forTimeStyle(String id, IModel<LocalTime> model, String timeStyle)",
                "-\t{",
                "-\t\treturn new TimeField(id, model, new StyleTimeConverter(timeStyle));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new TimeField using the provided date style.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param timeStyle",
                "-\t *            Date style to use. The first character is the date style, and the second character",
                "-\t *            is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L'",
                "-\t *            for long, and 'F' for full. A date or time may be ommitted by specifying a style",
                "-\t *            character '-'. See {@link org.joda.time.DateTimeFormat#forStyle(String)}.",
                "-\t * @return TimeField",
                "+\t *            the component's model",
                " \t */",
                "-\tpublic static TimeField forTimeStyle(String id, String timeStyle)",
                "+\tpublic TimeField(String id, IModel<LocalTime> model)",
                " \t{",
                "-\t\treturn forTimeStyle(id, null, timeStyle);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new TimeField defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @return TimeField",
                "-\t */",
                "-\tpublic static TimeField forShortStyle(String id)",
                "-\t{",
                "-\t\treturn forShortStyle(id, null);",
                "-\t}",
                "+\t\tsuper(id, model);",
                "-\t/**",
                "-\t * Creates a new TimeField defaulting to using a short date pattern",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @return TimeField",
                "-\t */",
                "-\tpublic static TimeField forShortStyle(String id, IModel<LocalTime> model)",
                "-\t{",
                "-\t\treturn new TimeField(id, model, new StyleTimeConverter());",
                "-\t}",
                "+\t\t// Sets the type that will be used when updating the model for this component.",
                "+\t\tsetType(LocalTime.class);",
                "-\t/**",
                "-\t * Creates a new TimeField using the provided converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param converter",
                "-\t *            the date converter",
                "-\t * @return TimeField",
                "-\t */",
                "-\tpublic static TimeField withConverter(String id, LocalTimeConverter converter)",
                "-\t{",
                "-\t\treturn withConverter(id, null, converter);",
                "-\t}",
                "+\t\tadd(new Label(\"hoursSeparator\", new ResourceModel(\"TimeField.hoursSeparator\"))",
                "+\t\t{",
                "+\t\t\tprivate static final long serialVersionUID = 1L;",
                "-\t/**",
                "-\t * Creates a new TimeField using the provided converter.",
                "-\t * ",
                "-\t * @param id",
                "-\t *            The id of the text field",
                "-\t * @param model",
                "-\t *            The model",
                "-\t * @param converter",
                "-\t *            the date converter",
                "-\t * @return TimeField",
                "-\t */",
                "-\tpublic static TimeField withConverter(String id, IModel<LocalTime> model, LocalTimeConverter converter)",
                "-\t{",
                "-\t\treturn new TimeField(id, model, converter);",
                "-\t}",
                "+\t\t\t@Override",
                "+\t\t\tprotected void onConfigure()",
                "+\t\t\t{",
                "+\t\t\t\tsuper.onConfigure();",
                "-\t/**",
                "-\t * The converter for the TextField",
                "-\t */",
                "-\tprivate final LocalTimeConverter converter;",
                "+\t\t\t\tminutesField.configure();",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t *      the component id",
                "-\t */",
                "-\tpublic TimeField(String id, LocalTimeConverter converter)",
                "-\t{",
                "-\t\tthis(id, null, converter);",
                "+\t\t\t\tsetVisible(minutesField.isVisible());",
                "+\t\t\t}",
                "+\t\t});",
                " \t}",
                "-\t/**",
                "-\t * Construct.",
                "-\t * ",
                "-\t * @param id",
                "-\t *      the component id",
                "-\t * @param model",
                "-\t *      the component's model",
                "-\t */",
                "-\tpublic TimeField(String id, IModel<LocalTime> model, LocalTimeConverter converter)",
                "+\t@Override",
                "+\tprotected void onInitialize()",
                " \t{",
                "-\t\tsuper(id, model);",
                "-",
                "-\t\tArgs.notNull(converter, \"converter\");",
                "-\t\tthis.converter = converter;",
                "-",
                "-\t\t// Sets the type that will be used when updating the model for this component.",
                "-\t\tsetType(LocalTime.class);",
                "-",
                "+\t\tsuper.onInitialize();",
                " \t\t// Create and add the \"hours\" TextField",
                "-\t\tadd(hoursField = newHoursTextField(HOURS, new HoursModel(), Integer.class));",
                "+\t\tadd(hoursField = newHoursTextField(\"hours\", new HoursModel(), Integer.class));",
                " \t\t// Create and add the \"minutes\" TextField",
                "-\t\tadd(minutesField = newMinutesTextField(MINUTES, new MinutesModel(), Integer.class));",
                "-",
                "-\t\t// Create and add the \"AM/PM\" Listbox",
                "-\t\tadd(amOrPmChoice = new DropDownChoice<>(AM_OR_PM_CHOICE, new AmPmModel(), Arrays.asList(AM_PM.values())));",
                "-",
                "-\t\tadd(new WebMarkupContainer(\"hoursSeparator\")",
                "-\t\t{",
                "-\t\t\tprivate static final long serialVersionUID = 1L;",
                "+\t\tadd(minutesField = newMinutesTextField(\"minutes\", new MinutesModel(), Integer.class));",
                "+\t\t// Create and add the \"AM/PM\" choice",
                "+\t\tadd(amOrPmChoice = new DropDownChoice<AM_PM>(\"amOrPmChoice\", new AmPmModel(),",
                "+\t\t\tArrays.asList(AM_PM.values())) {",
                " \t\t\t@Override",
                "-\t\t\tpublic boolean isVisible()",
                "+\t\t\tprotected boolean localizeDisplayValues()",
                " \t\t\t{",
                "-\t\t\t\treturn minutesField.determineVisibility();",
                "+\t\t\t\treturn true;",
                " \t\t\t}",
                "@@ -291,3 +159,5 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t */",
                "-\tprotected TextField<Integer> newHoursTextField(final String id, IModel<Integer> model, Class<Integer> type) {",
                "+\tprotected TextField<Integer> newHoursTextField(final String id, IModel<Integer> model,",
                "+\t\tClass<Integer> type)",
                "+\t{",
                " \t\tTextField<Integer> hoursTextField = new TextField<Integer>(id, model, type)",
                "@@ -299,9 +169,18 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t\t\t{",
                "-\t\t\t\treturn new String[] {\"number\"};",
                "+\t\t\t\treturn new String[] { \"number\" };",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected void onComponentTag(ComponentTag tag)",
                "+\t\t\t{",
                "+\t\t\t\tsuper.onComponentTag(tag);",
                "+",
                "+\t\t\t\ttag.append(\"class\", getString(HOURS_CSS_CLASS_KEY), \" \");",
                "+",
                "+\t\t\t\ttag.put(\"min\", use12HourFormat() ? 1 : 0);",
                "+\t\t\t\ttag.put(\"max\", use12HourFormat() ? 12 : 23);",
                " \t\t\t}",
                " \t\t};",
                "-\t\thoursTextField.add(AttributeModifier.append(\"min\", getMaximumHours() == 24 ? 0 : 1));",
                "-\t\thoursTextField.add(AttributeModifier.append(\"max\", getMaximumHours() == 24 ? 23 : 12));",
                "-\t\thoursTextField.add(getMaximumHours() == 24 ? RangeValidator.range(0, 23) : RangeValidator.range(1, 12));",
                "-\t\thoursTextField.setLabel(new Model<>(HOURS));",
                "+\t\thoursTextField",
                "+\t\t\t.add(use12HourFormat() ? RangeValidator.range(1, 12) : RangeValidator.range(0, 23));",
                " \t\treturn hoursTextField;",
                "@@ -340,9 +219,17 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t\t\t{",
                "-\t\t\t\treturn new String[] {\"number\"};",
                "+\t\t\t\treturn new String[] { \"number\" };",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected void onComponentTag(ComponentTag tag)",
                "+\t\t\t{",
                "+\t\t\t\tsuper.onComponentTag(tag);",
                "+",
                "+\t\t\t\ttag.append(\"class\", getString(MINUTES_CSS_CLASS_KEY), \" \");",
                "+",
                "+\t\t\t\ttag.put(\"min\", 0);",
                "+\t\t\t\ttag.put(\"max\", 59);",
                " \t\t\t}",
                " \t\t};",
                "-\t\tminutesField.add(AttributeModifier.append(\"min\", 0));",
                "-\t\tminutesField.add(AttributeModifier.append(\"max\", 59));",
                " \t\tminutesField.add(new RangeValidator<>(0, 59));",
                "-\t\tminutesField.setLabel(new Model<>(MINUTES));",
                " \t\treturn minutesField;",
                "@@ -365,4 +252,8 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                "-\t\tLocalTime localTime = null;",
                "-\t\tif (hours != null && minutes != null)",
                "+\t\tLocalTime localTime;",
                "+\t\tif (hours == null && minutes == null)",
                "+\t\t{",
                "+\t\t\tlocalTime = null;",
                "+\t\t}",
                "+\t\telse if (hours != null && minutes != null)",
                " \t\t{",
                "@@ -378,2 +269,8 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\terror(newValidationError(new ConversionException(\"Cannot parse time\").setTargetType(getType())));",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                " \t\tsetConvertedInput(localTime);",
                "@@ -382,3 +279,6 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t@Override",
                "-\tprotected void onBeforeRender() {",
                "+\tprotected void onConfigure()",
                "+\t{",
                "+\t\tsuper.onConfigure();",
                "+",
                " \t\thoursField.setRequired(isRequired());",
                "@@ -386,5 +286,3 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                "-\t\tboolean use12HourFormat = use12HourFormat();",
                "-\t\tamOrPmChoice.setVisible(use12HourFormat);",
                "-\t\tsuper.onBeforeRender();",
                "+\t\tamOrPmChoice.setVisible(use12HourFormat());",
                " \t}",
                "@@ -395,4 +293,4 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t * ",
                "-\t * @return true, if the current {@link Locale} uses the 12h format.<br/>",
                "-\t *         false, otherwise",
                "+\t * @return {@value true}, if the current {@link Locale} uses the 12h format.<br/>",
                "+\t *         {@value false}, otherwise",
                " \t */",
                "@@ -400,25 +298,6 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t{",
                "-\t\tString pattern = DateTimeFormatterBuilder.getLocalizedDateTimePattern(null, FormatStyle.SHORT, IsoChronology.INSTANCE, getLocale());",
                "-\t\treturn pattern.indexOf('a') != -1 || pattern.indexOf('h') != -1 || pattern.indexOf('K') != -1;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return either 12 or 24, depending on the hour format of the current {@link Locale}",
                "-\t */",
                "-\tprivate int getMaximumHours()",
                "-\t{",
                "-\t\treturn getMaximumHours(use12HourFormat());",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Convenience method (mainly for optimization purposes), in case {@link #use12HourFormat()} has",
                "-\t * already been stored in a local variable and thus doesn't need to be computed again.",
                "-\t * ",
                "-\t * @param use12HourFormat",
                "-\t *            the hour format to use",
                "-\t * @return either 12 or 24, depending on the parameter <code>use12HourFormat</code>",
                "-\t */",
                "-\tprivate int getMaximumHours(boolean use12HourFormat)",
                "-\t{",
                "-\t\treturn use12HourFormat ? 12 : 24;",
                "+\t\tString pattern = DateTimeFormatterBuilder.getLocalizedDateTimePattern(null,",
                "+\t\t\tFormatStyle.SHORT, IsoChronology.INSTANCE, getLocale());",
                "+\t\treturn pattern.indexOf('a') != -1 || pattern.indexOf('h') != -1",
                "+\t\t\t|| pattern.indexOf('K') != -1;",
                " \t}",
                "@@ -437,3 +316,3 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t\t\t}",
                "-\t\t\treturn getMaximumHours() == 24 ? t.getHour() : t.get(ChronoField.CLOCK_HOUR_OF_AMPM);",
                "+\t\t\treturn use12HourFormat() ? t.get(ChronoField.CLOCK_HOUR_OF_AMPM) : t.getHour();",
                " \t\t}",
                "@@ -443,3 +322,3 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t\t{",
                "-\t\t\ttime = time.with(getMaximumHours() == 24 ? ChronoField.HOUR_OF_DAY : ChronoField.CLOCK_HOUR_OF_AMPM, hour);",
                "+\t\t\t// ignored",
                " \t\t}",
                "@@ -461,3 +340,3 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t\t{",
                "-\t\t\ttime = time.with(ChronoField.MINUTE_OF_HOUR, minute);",
                "+\t\t\t// ignored",
                " \t\t}",
                "@@ -480,41 +359,5 @@ public class TimeField extends FormComponentPanel<LocalTime> implements ITextFor",
                " \t\t{",
                "-\t\t\tint i = AM_PM.AM == amPm ? 0 : 1;",
                "-\t\t\ttime = time.with(ChronoField.AMPM_OF_DAY, i);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @return The specialized converter.",
                "-\t * @see org.apache.wicket.Component#createConverter(java.lang.Class)",
                "-\t */",
                "-\t@Override",
                "-\tprotected IConverter<?> createConverter(Class<?> clazz)",
                "-\t{",
                "-\t\tif (LocalTime.class.isAssignableFrom(clazz))",
                "-\t\t{",
                "-\t\t\treturn converter;",
                "-\t\t}",
                "-\t\treturn null;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @see org.apache.wicket.markup.html.form.AbstractTextComponent.ITextFormatProvider#getTextFormat()",
                "-\t */",
                "-\t@Override",
                "-\tpublic final String getTextFormat()",
                "-\t{",
                "-\t\treturn converter.getPattern(getLocale());",
                "-\t}",
                "-",
                "-\tpublic static FormatStyle parseFormatStyle(char style)",
                "-\t{",
                "-\t\tswitch (style)",
                "-\t\t{",
                "-\t\t\tcase 'M':",
                "-\t\t\t\treturn FormatStyle.MEDIUM;",
                "-\t\t\tcase 'S':",
                "-\t\t\tdefault:",
                "-\t\t\t\treturn FormatStyle.SHORT;",
                "+\t\t\t// ignored",
                " \t\t}",
                " \t}",
                "-}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java",
                "deleted file mode 100644",
                "index 9286f2eabe..0000000000",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java",
                "+++ /dev/null",
                "@@ -1,203 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.extensions.markup.html.form.datetime;",
                "-",
                "-import java.time.ZoneId;",
                "-import java.time.ZonedDateTime;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.util.Locale;",
                "-import java.util.TimeZone;",
                "-",
                "-import org.apache.wicket.Session;",
                "-import org.apache.wicket.core.request.ClientInfo;",
                "-import org.apache.wicket.protocol.http.request.WebClientInfo;",
                "-import org.apache.wicket.util.convert.ConversionException;",
                "-import org.apache.wicket.util.convert.IConverter;",
                "-import org.apache.wicket.util.lang.Args;",
                "-import org.apache.wicket.util.string.Strings;",
                "-",
                "-",
                "-/**",
                "- * Base class for javax.time based date converters. It contains the logic to parse and format,",
                "- * optionally taking the time zone difference between clients and the server into account.",
                "- * <p>",
                "- * Converters of this class are best suited for per-component use.",
                "- * </p>",
                "- * ",
                "- * @author eelcohillenius",
                "- */",
                "-public abstract class ZonedDateTimeConverter implements IConverter<ZonedDateTime>",
                "-{",
                "-\tprivate static final long serialVersionUID = 1L;",
                "-",
                "-\t/**",
                "-\t * Whether to apply the time zone difference when interpreting dates.",
                "-\t */",
                "-\tprivate final boolean applyTimeZoneDifference;",
                "-",
                "-\t/**",
                "-\t * Construct. <p> When applyTimeZoneDifference is true, the current time is applied on the",
                "-\t * parsed date, and the date will be corrected for the time zone difference between the server",
                "-\t * and the client. For instance, if I'm in Seattle and the server I'm working on is in",
                "-\t * Amsterdam, the server is 9 hours ahead. So, if I'm inputting say 12/24 at a couple of hours",
                "-\t * before midnight, at the server it is already 12/25. If this boolean is true, it will be",
                "-\t * transformed to 12/25, while the client sees 12/24. </p>",
                "-\t * ",
                "-\t * @param applyTimeZoneDifference",
                "-\t *            whether to apply the difference in time zones between client and server",
                "-\t */",
                "-\tpublic ZonedDateTimeConverter(boolean applyTimeZoneDifference)",
                "-\t{",
                "-\t\tthis.applyTimeZoneDifference = applyTimeZoneDifference;",
                "-\t}",
                "-",
                "-\tpublic ZonedDateTime convertToObject(String value, DateTimeFormatter format, Locale locale) {",
                "-\t\ttry",
                "-\t\t{",
                "-\t\t\t// parse date retaining the time of the submission",
                "-\t\t\treturn ZonedDateTime.parse(value, format);",
                "-\t\t}",
                "-\t\tcatch (RuntimeException e)",
                "-\t\t{",
                "-\t\t\tthrow newConversionException(e, locale);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic ZonedDateTime convertToObject(String value, Locale locale)",
                "-\t{",
                "-\t\tif (Strings.isEmpty(value))",
                "-\t\t{",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-",
                "-\t\tDateTimeFormatter format = getFormat(locale);",
                "-\t\tArgs.notNull(format, \"format\");",
                "-",
                "-\t\tif (applyTimeZoneDifference)",
                "-\t\t{",
                "-\t\t\tZoneId zoneId = getClientTimeZone();",
                "-",
                "-\t\t\t// set time zone for client",
                "-\t\t\tformat = format.withZone(getTimeZone());",
                "-",
                "-\t\t\tZonedDateTime dateTime = convertToObject(value, format, locale);",
                "-\t\t\t// apply the server time zone to the parsed value",
                "-\t\t\tif (zoneId != null)",
                "-\t\t\t{",
                "-\t\t\t\tdateTime = dateTime.withZoneSameInstant(zoneId);",
                "-\t\t\t}",
                "-",
                "-\t\t\treturn dateTime;",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\treturn convertToObject(value, format, locale);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a ConversionException and sets additional context information to it.",
                "-\t *",
                "-\t * @param cause",
                "-\t *            - {@link RuntimeException} cause",
                "-\t * @param locale",
                "-\t *            - {@link Locale} used to set 'format' variable with localized pattern",
                "-\t * @return {@link ConversionException}",
                "-\t */",
                "-\tConversionException newConversionException(RuntimeException cause, Locale locale)",
                "-\t{",
                "-\t\treturn new ConversionException(cause)",
                "-\t\t\t\t.setVariable(\"format\", getPattern(locale));",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic String convertToString(ZonedDateTime dateTime, Locale locale)",
                "-\t{",
                "-\t\tDateTimeFormatter format = getFormat(locale);",
                "-",
                "-\t\tif (applyTimeZoneDifference)",
                "-\t\t{",
                "-\t\t\tZoneId zoneId = getClientTimeZone();",
                "-\t\t\tif (zoneId != null)",
                "-\t\t\t{",
                "-\t\t\t\t// apply time zone to formatter",
                "-\t\t\t\tformat = format.withZone(zoneId);",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\treturn format.format(dateTime);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Gets whether to apply the time zone difference when interpreting dates.",
                "-\t * ",
                "-\t * </p> When true, the current time is applied on the parsed date, and the date will be",
                "-\t * corrected for the time zone difference between the server and the client. For instance, if",
                "-\t * I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9 hours ahead.",
                "-\t * So, if I'm inputting say 12/24 at a couple of hours before midnight, at the server it is",
                "-\t * already 12/25. If this boolean is true, it will be transformed to 12/25, while the client",
                "-\t * sees 12/24. </p>",
                "-\t * ",
                "-\t * @return whether to apply the difference in time zones between client and server",
                "-\t */",
                "-\tpublic final boolean getApplyTimeZoneDifference()",
                "-\t{",
                "-\t\treturn applyTimeZoneDifference;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param locale",
                "-\t *            The locale used to convert the value",
                "-\t * @return Gets the pattern that is used for printing and parsing",
                "-\t */",
                "-\tpublic abstract String getPattern(Locale locale);",
                "-",
                "-\t/**",
                "-\t * Gets the client's time zone.",
                "-\t * ",
                "-\t * @return The client's time zone or null",
                "-\t */",
                "-\tprotected ZoneId getClientTimeZone()",
                "-\t{",
                "-\t\tClientInfo info = Session.get().getClientInfo();",
                "-\t\tif (info instanceof WebClientInfo)",
                "-\t\t{",
                "-\t\t\tTimeZone timeZone = ((WebClientInfo) info).getProperties().getTimeZone();",
                "-\t\t\treturn timeZone.toZoneId();",
                "-\t\t}",
                "-\t\treturn null;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * @param locale",
                "-\t *            The locale used to convert the value",
                "-\t * ",
                "-\t * @return formatter The formatter for the current conversion",
                "-\t */",
                "-\tpublic abstract DateTimeFormatter getFormat(Locale locale);",
                "-",
                "-\t/**",
                "-\t * Gets the server time zone. Override this method if you want to fix to a certain time zone,",
                "-\t * regardless of what actual time zone the server is in.",
                "-\t * ",
                "-\t * @return The server time zone",
                "-\t */",
                "-\tprotected ZoneId getTimeZone()",
                "-\t{",
                "-\t\treturn ZoneId.systemDefault();",
                "-\t}",
                "-}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "index eb70e12f4d..4b3143d767 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "@@ -22,42 +22,10 @@ import java.time.ZoneId;",
                " import java.time.ZonedDateTime;",
                "-import java.time.temporal.ChronoField;",
                "-import java.util.Locale;",
                "-import java.util.TimeZone;",
                "-import org.apache.wicket.Session;",
                "-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                "-import org.apache.wicket.core.request.ClientInfo;",
                " import org.apache.wicket.model.IModel;",
                "-import org.apache.wicket.protocol.http.request.WebClientInfo;",
                " /**",
                "- * Works on a {@link java.time.ZonedDateTimeTime} object. Displays a date field and a DatePicker, a field",
                "- * for hours and a field for minutes, and an AM/PM field. The format (12h/24h) of the hours field",
                "- * depends on the time format of this {@link ZonedDateTimeField}'s {@link Locale}, as does the visibility",
                "- * of the AM/PM field (see {@link ZonedDateTimeField#use12HourFormat}).",
                "- * <p>",
                "- * <strong>Ajaxifying the DateTimeField</strong>: If you want to update a DateTimeField with an",
                "- * {@link AjaxFormComponentUpdatingBehavior}, you have to attach it to the contained",
                "- * {@link DateField} by overriding {@link #newDateTextField(String, IModel)} and calling",
                "- * {@link #processInput()}:",
                "- * ",
                "- * <pre>{@code",
                "- *  DateTimeField dateTimeField = new DateTimeField(...) {",
                "- *    protected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)",
                "- *    {",
                "- *      DateTextField dateField = super.newDateTextField(id, dateFieldModel);     ",
                "- *      dateField.add(new AjaxFormComponentUpdatingBehavior(\"change\") {",
                "- *        protected void onUpdate(AjaxRequestTarget target) {",
                "- *          processInput(); // let DateTimeField process input too",
                "- *",
                "- *          ...",
                "- *        }",
                "- *      });",
                "- *      return recorder;",
                "- *    }",
                "- *  }",
                "- * }</pre>",
                "+ * Works on a {@link java.time.ZonedDateTimeTime} object. See {@link AbstractDateTimeField} for",
                "+ * further details.",
                "  * ",
                "  * @author eelcohillenius",
                "- * @see DateField for a variant with just the date field and date picker",
                "  */",
                "@@ -67,4 +35,2 @@ public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                "-\tprivate ZonedDateTime dateTime = ZonedDateTime.now();",
                "-",
                " \t/**",
                "@@ -94,19 +60,8 @@ public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                " \t/**",
                "-\t * Gets the client's time zone.",
                "+\t * Creates a zoned date time in the systems default zone.",
                " \t * ",
                "-\t * @return The client's time zone or null",
                "+\t * @see ZoneId#systemDefault()",
                " \t */",
                "-\tprotected ZoneId getClientTimeZone()",
                "-\t{",
                "-\t\tClientInfo info = Session.get().getClientInfo();",
                "-\t\tif (info instanceof WebClientInfo)",
                "-\t\t{",
                "-\t\t\tTimeZone timeZone = ((WebClientInfo) info).getProperties().getTimeZone();",
                "-\t\t\treturn timeZone != null ? timeZone.toZoneId() : null;",
                "-\t\t}",
                "-\t\treturn null;",
                "-\t}",
                "-",
                "-\tZonedDateTime performConvert(LocalDate date, LocalTime time) {",
                "-\t\treturn ZonedDateTime.of(date, time, getClientTimeZone());",
                "+\tprotected ZonedDateTime createTemporal(LocalDate date, LocalTime time) {",
                "+\t\treturn ZonedDateTime.of(date, time, ZoneId.systemDefault());",
                " \t}",
                "@@ -114,37 +69,12 @@ public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                " \t@Override",
                "-\tvoid prepareObject() {",
                "-\t\tZonedDateTime modelObject = getModelObject();",
                "-\t\tif (modelObject != null)",
                "-\t\t{",
                "-\t\t\t// convert date to the client's time zone if we have that info",
                "-\t\t\tZoneId zone = getClientTimeZone();",
                "-\t\t\tif (zone != null)",
                "-\t\t\t{",
                "-\t\t\t\tmodelObject = modelObject.withZoneSameInstant(zone);",
                "-\t\t\t}",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tLocalDate getLocalDate()",
                "+\tprotected LocalDate getLocalDate(ZonedDateTime temporal)",
                " \t{",
                "-\t\treturn getModelObject() == null ? null : dateTime.toLocalDate();",
                "+\t\treturn temporal.toLocalDate();",
                " \t}",
                "-\tvoid setLocalDate(LocalDate date)",
                "-\t{",
                "-\t\tdateTime = dateTime.with(ChronoField.YEAR, date.getYear())",
                "-\t\t\t\t.with(ChronoField.MONTH_OF_YEAR, date.getMonthValue())",
                "-\t\t\t\t.with(ChronoField.DAY_OF_YEAR, date.getDayOfMonth());",
                "-\t}",
                "-",
                "-\tLocalTime getLocalTime()",
                "-\t{",
                "-\t\treturn getModelObject() == null ? null : dateTime.toLocalTime();",
                "-\t}",
                "-",
                "-\tvoid setLocalTime(LocalTime time)",
                "+\t@Override",
                "+\tprotected LocalTime getLocalTime(ZonedDateTime temporal)",
                " \t{",
                "-\t\tdateTime = dateTime.with(ChronoField.HOUR_OF_DAY, time.getHour())",
                "-\t\t\t\t.with(ChronoField.MINUTE_OF_HOUR, time.getMinute());",
                "+\t\treturn temporal.toLocalTime();",
                " \t}",
                "-}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "new file mode 100644",
                "index 0000000000..0fcb79cc93",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "@@ -0,0 +1,118 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.markup.html.form.datetime;",
                "+",
                "+import java.time.LocalDateTime;",
                "+import java.time.ZoneId;",
                "+import java.time.ZonedDateTime;",
                "+import java.util.TimeZone;",
                "+",
                "+import org.apache.wicket.Session;",
                "+import org.apache.wicket.core.request.ClientInfo;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.Model;",
                "+import org.apache.wicket.protocol.http.request.WebClientInfo;",
                "+import org.apache.wicket.settings.RequestCycleSettings;",
                "+import org.apache.wicket.util.lang.Args;",
                "+",
                "+/**",
                "+ * Model mapping {@link ZonedDateTime} to a {@link LocalDateTime} in {@link #getClientTimeZone()}.",
                "+ * ",
                "+ * @author svenmeier",
                "+ */",
                "+public class ZonedToLocalDateTimeModel implements IModel<LocalDateTime>",
                "+{",
                "+\tprivate IModel<ZonedDateTime> model;",
                "+",
                "+\t/**",
                "+\t * Map the given {@link ZonedDateTime} to a {@link LocalDateTime} in the client's time zone.",
                "+\t *  ",
                "+\t * @param model zoned date time",
                "+\t */",
                "+\tpublic ZonedToLocalDateTimeModel(IModel<ZonedDateTime> model)",
                "+\t{",
                "+\t\tArgs.notNull(model, \"model\");",
                "+\t\t",
                "+\t\tthis.model = model;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void detach()",
                "+\t{",
                "+\t\tmodel.detach();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * What is the {@link ZoneId} of the client.",
                "+\t * ",
                "+\t * @see RequestCycleSettings#getGatherExtendedBrowserInfo()",
                "+\t * @see ZoneId#systemDefault()",
                "+\t */",
                "+\tprotected ZoneId getClientTimeZone()",
                "+\t{",
                "+\t\tClientInfo info = Session.get().getClientInfo();",
                "+\t\tif (info instanceof WebClientInfo)",
                "+\t\t{",
                "+\t\t\tTimeZone timeZone = ((WebClientInfo)info).getProperties().getTimeZone();",
                "+\t\t\treturn timeZone != null ? timeZone.toZoneId() : null;",
                "+\t\t}",
                "+\t\treturn ZoneId.systemDefault();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * What is the {@link ZoneId} of created {@link ZonedDateTime} objects. ",
                "+\t */",
                "+\tprotected ZoneId getTargetTimeZone()",
                "+\t{",
                "+\t\treturn ZoneId.systemDefault();",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic LocalDateTime getObject()",
                "+\t{",
                "+\t\tZonedDateTime zonedDateTime = model.getObject();",
                "+\t\tif (zonedDateTime == null)",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\treturn zonedDateTime.withZoneSameInstant(getClientTimeZone()).toLocalDateTime();",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void setObject(LocalDateTime dateTime)",
                "+\t{",
                "+\t\tif (dateTime == null)",
                "+\t\t{",
                "+\t\t\tmodel.setObject(null);",
                "+\t\t}",
                "+\t\telse",
                "+\t\t{",
                "+\t\t\tmodel.setObject(dateTime.atZone(getClientTimeZone()).withZoneSameInstant(getTargetTimeZone()));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Convenience factory for a date time.",
                "+\t */",
                "+\tpublic static IModel<LocalDateTime> of(ZonedDateTime dateTime)",
                "+\t{",
                "+\t\treturn new ZonedToLocalDateTimeModel(new Model<ZonedDateTime>(dateTime));",
                "+\t}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java",
                "index 2972b20bfa..dd85a77a55 100644",
                "--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java",
                "+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java",
                "@@ -18,3 +18,2 @@ package org.apache.wicket.util.convert.converter;",
                "-import java.time.ZoneId;",
                " import java.time.ZonedDateTime;",
                "@@ -31,3 +30,3 @@ public class ZonedDateTimeConverter extends AbstractJavaTimeConverter<ZonedDateT",
                "-\tprivate static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);",
                "+\tprivate static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM, FormatStyle.FULL);",
                "@@ -47,3 +46,3 @@ public class ZonedDateTimeConverter extends AbstractJavaTimeConverter<ZonedDateT",
                " \tprotected DateTimeFormatter getDateTimeFormatter() {",
                "-\t\treturn DATE_TIME_FORMATTER.withZone(ZoneId.systemDefault());",
                "+\t\treturn DATE_TIME_FORMATTER;",
                " \t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalContent1Page.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/modal/ModalPanel1.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/BeanValidationPage.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimeApplication.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/datetime/DateTimePage.properties",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/Initializer.properties",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.html",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTextField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalDateTimeTextField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/LocalTimeTextField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternDateConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/PatternZonedDateTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleDateConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/StyleZonedDateTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.html",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/TimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeConverter.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedToLocalDateTimeModel.java",
                "wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6105": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6105",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d8f7bebf98d648a7632bc07096ceea6ad54ec8f3",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511509982,
            "hunks": 1,
            "message": "Debian based Tomcat 8.5 is used for wicket-examples",
            "diff": [
                "diff --git a/wicket-examples/Dockerfile b/wicket-examples/Dockerfile",
                "index e51f6f86b9..ac71634e03 100644",
                "--- a/wicket-examples/Dockerfile",
                "+++ b/wicket-examples/Dockerfile",
                "@@ -1,2 +1,2 @@",
                "-FROM tomcat:8.5-jre8-alpine",
                "+FROM tomcat:8.5-jre8",
                " MAINTAINER Apache Wicket Team <dev@wicket.apache.org>"
            ],
            "changed_files": [
                "wicket-examples/Dockerfile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a0daccd6e32e1a8361ee1d2cbb6796c23c9661e8"
                ],
                [
                    "no-tag",
                    "e1ba7f90643358b708ea11777499acd6d507defa"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e5d21dac1e9356584ed6d5ff93ef7ab4a403ec8b",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507363041,
            "hunks": 3,
            "message": "WICKET-6200 handle DateTimeParseException; support ZonedDateTime",
            "diff": [
                "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractJavaTimeConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractJavaTimeConverter.java",
                "index d870b545b7..23e5e77462 100644",
                "--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractJavaTimeConverter.java",
                "+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractJavaTimeConverter.java",
                "@@ -19,2 +19,3 @@ package org.apache.wicket.util.convert.converter;",
                " import java.time.format.DateTimeFormatter;",
                "+import java.time.format.DateTimeParseException;",
                " import java.time.temporal.Temporal;",
                "@@ -52,3 +53,10 @@ public abstract class AbstractJavaTimeConverter<T extends Temporal> extends Abst",
                " \t\tDateTimeFormatter dateTimeFormatter = getDateTimeFormatter(locale);",
                "-\t\tTemporalAccessor temporalAccessor = dateTimeFormatter.parse(value);",
                "+\t\t",
                "+\t\tTemporalAccessor temporalAccessor;",
                "+\t\ttry {",
                "+\t\t\ttemporalAccessor = dateTimeFormatter.parse(value);",
                "+\t\t} catch (DateTimeParseException ex) {",
                "+\t\t\tthrow newConversionException(\"Cannot parse '\" + value, value, locale);",
                "+\t\t}",
                "+\t\t",
                " \t\treturn createTemporal(temporalAccessor);",
                "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java",
                "new file mode 100644",
                "index 0000000000..2972b20bfa",
                "--- /dev/null",
                "+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java",
                "@@ -0,0 +1,50 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.util.convert.converter;",
                "+",
                "+import java.time.ZoneId;",
                "+import java.time.ZonedDateTime;",
                "+import java.time.format.DateTimeFormatter;",
                "+import java.time.format.FormatStyle;",
                "+import java.time.temporal.TemporalAccessor;",
                "+",
                "+/**",
                "+ * Converts to {@link java.time.ZonedDateTime}.",
                "+ */",
                "+public class ZonedDateTimeConverter extends AbstractJavaTimeConverter<ZonedDateTime>",
                "+{",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                "+\tprivate static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);",
                "+",
                "+\t@Override",
                "+\tprotected Class<ZonedDateTime> getTargetType()",
                "+\t{",
                "+\t\treturn ZonedDateTime.class;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected ZonedDateTime createTemporal(TemporalAccessor temporalAccessor)",
                "+\t{",
                "+\t\treturn ZonedDateTime.from(temporalAccessor);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected DateTimeFormatter getDateTimeFormatter() {",
                "+\t\treturn DATE_TIME_FORMATTER.withZone(ZoneId.systemDefault());",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractJavaTimeConverter.java",
                "wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZonedDateTimeConverter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6200": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6200",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d79ff13b9b128aef6bae7a639725b784f1352f34",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1515936733,
            "hunks": 1,
            "message": "Release wicket-eclipse-settings 4",
            "diff": [
                "diff --git a/wicket-eclipse-settings/pom.xml b/wicket-eclipse-settings/pom.xml",
                "index 129aa83c62..cb2ed7fa26 100644",
                "--- a/wicket-eclipse-settings/pom.xml",
                "+++ b/wicket-eclipse-settings/pom.xml",
                "@@ -29,3 +29,3 @@",
                "   <artifactId>wicket-eclipse-settings</artifactId>",
                "-  <version>4-SNAPSHOT</version>",
                "+  <version>4</version>",
                "   <packaging>jar</packaging>"
            ],
            "changed_files": [
                "wicket-eclipse-settings/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "34872517516ee6bf121f6cf998cc7da5e9597bba"
                ]
            ],
            "tags": [
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c69592d147ef4ba404dc96068e9624b54c3d45cd",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1515078073,
            "hunks": 6,
            "message": "WICKET-6514 refactoring of FencedFeedbackPanel",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java",
                "index ab8f5cd5ad..b574b36417 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java",
                "@@ -50,3 +50,6 @@ public class FeedbackMessagesModel implements IModel<List<FeedbackMessage>>",
                "-\t/** Controls whether or not feedback from the {@link Session} will be collected **/",
                "+\t/** ",
                "+\t * Controls whether or not feedback from the {@link Session} will be collected.",
                "+\t * By default is true.",
                "+\t */",
                " \tprivate boolean includeSession = true;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java b/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "index 7360d61810..feac05980a 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "@@ -79,2 +79,3 @@ public class FencedFeedbackPanel extends FeedbackPanel",
                " {",
                "+\t",
                " \tprivate static final long serialVersionUID = 1L;",
                "@@ -181,11 +182,3 @@ public class FencedFeedbackPanel extends FeedbackPanel",
                " \t\t\t\t\t// this is the catch-all panel",
                "-",
                "-\t\t\t\t\treturn new FeedbackCollector(panel.getPage(), true)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\t@Override",
                "-\t\t\t\t\t\tprotected boolean shouldRecurseInto(Component component)",
                "-\t\t\t\t\t\t{",
                "-\t\t\t\t\t\t\treturn !componentIsMarkedAsFence(component);",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}.collect(filter);",
                "+\t\t\t\t\treturn new FencedFeedbackCollector(panel.getPage(), true).collect(filter);",
                " \t\t\t\t}",
                "@@ -194,12 +187,3 @@ public class FencedFeedbackPanel extends FeedbackPanel",
                " \t\t\t\t\t// this is a fenced panel",
                "-",
                "-\t\t\t\t\treturn new FeedbackCollector(fence)",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\t@Override",
                "-\t\t\t\t\t\tprotected boolean shouldRecurseInto(Component component)",
                "-\t\t\t\t\t\t{",
                "-\t\t\t\t\t\t\t// only recurse into components that are not fences",
                "-\t\t\t\t\t\t\treturn !componentIsMarkedAsFence(component);",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}.setIncludeSession(false).collect(filter);",
                "+\t\t\t\t\treturn new FencedFeedbackCollector(fence, false).collect(filter);",
                " \t\t\t\t}",
                "@@ -209,7 +193,2 @@ public class FencedFeedbackPanel extends FeedbackPanel",
                "-\tprivate boolean componentIsMarkedAsFence(Component component)",
                "-\t{",
                "-\t\treturn component.getMetaData(FENCE_KEY) != null;",
                "-\t}",
                "-",
                " \t@Override",
                "@@ -226,2 +205,21 @@ public class FencedFeedbackPanel extends FeedbackPanel",
                " \t}",
                "+\t",
                "+\tprivate final class FencedFeedbackCollector extends FeedbackCollector",
                "+\t{",
                "+\t\tprivate FencedFeedbackCollector(Component component, boolean includeSession)",
                "+\t\t{",
                "+\t\t\tsuper(component, includeSession);",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tprotected boolean shouldRecurseInto(Component component)",
                "+\t\t{",
                "+\t\t\treturn !componentIsMarkedAsFence(component);",
                "+\t\t}",
                "+\t\t",
                "+\t\tprivate boolean componentIsMarkedAsFence(Component component)",
                "+\t\t{",
                "+\t\t\treturn component.getMetaData(FENCE_KEY) != null;",
                "+\t\t}",
                "+\t}",
                " }"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java",
                "wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6514": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6514",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "237147fee94e7fb2c0e91216aee0e4a51b448c30",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516177407,
            "hunks": 3,
            "message": "WICKET-6517 new AjaxFileDropBehavior",
            "diff": [
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "index ca6dc70541..739930188f 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "@@ -23,3 +23,3 @@ import org.apache.wicket.ajax.AjaxRequestTarget;",
                " import org.apache.wicket.ajax.markup.html.form.AjaxButton;",
                "-import org.apache.wicket.extensions.ajax.markup.html.AjaxFileUploadBehavior;",
                "+import org.apache.wicket.extensions.ajax.markup.html.AjaxFileDropBehavior;",
                " import org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadProgressBar;",
                "@@ -118,3 +118,3 @@ public class FileUploadPage extends BasePage",
                " \t\tWebMarkupContainer drop = new WebMarkupContainer(\"drop\");",
                "-\t\tdrop.add(new AjaxFileUploadBehavior() {",
                "+\t\tdrop.add(new AjaxFileDropBehavior() {",
                " \t\t\tprotected void onFileUpload(AjaxRequestTarget target, List<FileUpload> files) {",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "new file mode 100644",
                "index 0000000000..9073cd3426",
                "--- /dev/null",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "@@ -0,0 +1,160 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.wicket.extensions.ajax.markup.html;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.commons.fileupload.FileItem;",
                "+import org.apache.commons.fileupload.FileUploadException;",
                "+import org.apache.wicket.Component;",
                "+import org.apache.wicket.ajax.AjaxEventBehavior;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;",
                "+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes.Method;",
                "+import org.apache.wicket.markup.head.IHeaderResponse;",
                "+import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                "+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                "+import org.apache.wicket.markup.html.form.upload.FileUpload;",
                "+import org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest;",
                "+import org.apache.wicket.protocol.http.servlet.ServletWebRequest;",
                "+import org.apache.wicket.request.resource.PackageResourceReference;",
                "+import org.apache.wicket.request.resource.ResourceReference;",
                "+import org.apache.wicket.util.lang.Args;",
                "+import org.apache.wicket.util.lang.Bytes;",
                "+",
                "+/**",
                "+ * Uploads files from a drop event.",
                "+ *",
                "+ * @author Andrew Kondratev",
                "+ * @author svenmeier",
                "+ */",
                "+public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "+{",
                "+",
                "+\tprivate static final ResourceReference JS = new PackageResourceReference(AjaxFileDropBehavior.class, \"datatransfer.js\");",
                "+",
                "+\t/**",
                "+\t *  Maximum size of all uploaded files in bytes in a request.",
                "+\t */",
                "+\tprivate Bytes maxSize;",
                "+",
                "+\t/**",
                "+\t *  Maximum size of file of upload in bytes (if there are more than one) in a request.",
                "+\t */",
                "+\tprivate Bytes fileMaxSize;",
                "+",
                "+\tprivate String parameterName = \"f\";",
                "+\t",
                "+\tpublic AjaxFileDropBehavior()",
                "+\t{",
                "+\t\tsuper(\"drop\");",
                "+\t}",
                "+\t",
                "+\t@Override",
                "+\tpublic void renderHead(Component component, IHeaderResponse response)",
                "+\t{",
                "+\t\tsuper.renderHead(component, response);",
                "+\t\t",
                "+\t\tresponse.render(JavaScriptHeaderItem.forReference(JS));",
                "+\t\t",
                "+\t\t// default must be prevented for dragover event, otherwise browser will consume the dataTransfer",
                "+\t\tresponse.render(OnDomReadyHeaderItem.forScript(String.format(\"jQuery('#%s').on('dragover', function(e) { e.preventDefault(); });\", component.getMarkupId())));",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)",
                "+\t{",
                "+\t\tsuper.updateAjaxAttributes(attributes);",
                "+",
                "+\t\tattributes.setMultipart(true);",
                "+\t\tattributes.setMethod(Method.POST);",
                "+\t\t// default must be prevented, otherwise browser will consume the dataTransfer",
                "+\t\tattributes.setPreventDefault(true);",
                "+",
                "+\t\tattributes.getDynamicExtraParameters().add(",
                "+\t\t\tString.format(\"return Wicket.DataTransfer.getFilesAsParamArray(attrs.event.originalEvent, '%s');\", parameterName)",
                "+\t\t);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected void onEvent(AjaxRequestTarget target)",
                "+\t{",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\tServletWebRequest request = (ServletWebRequest)getComponent().getRequest();",
                "+\t\t\tfinal MultipartServletWebRequest multipartWebRequest = request.newMultipartWebRequest(",
                "+\t\t\t\tgetMaxSize(), getComponent().getPage().getId());",
                "+\t\t\tmultipartWebRequest.setFileMaxSize(getFileMaxSize());",
                "+\t\t\tmultipartWebRequest.parseFileParts();",
                "+",
                "+\t\t\t// TODO: Can't this be detected from header?",
                "+\t\t\tgetComponent().getRequestCycle().setRequest(multipartWebRequest);",
                "+\t\t\t",
                "+\t\t\tArrayList<FileUpload> fileUploads = new ArrayList<>();",
                "+",
                "+\t\t\t// Get the item for the path",
                "+\t\t\tfinal List<FileItem> fileItems = multipartWebRequest.getFile(parameterName);",
                "+",
                "+\t\t\tif (fileItems != null)",
                "+\t\t\t{",
                "+\t\t\t\tfor (FileItem item : fileItems)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tfileUploads.add(new FileUpload(item));",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\t",
                "+\t\t\tonFileUpload(target, fileUploads);",
                "+\t\t}",
                "+\t\tcatch (final FileUploadException fux)",
                "+\t\t{",
                "+\t\t\tonError(fux);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic Bytes getMaxSize()",
                "+\t{",
                "+\t\tif (maxSize == null) {",
                "+\t\t\tmaxSize = getComponent().getApplication().getApplicationSettings().getDefaultMaximumUploadSize();",
                "+\t\t}",
                "+\t\treturn maxSize;",
                "+\t}",
                "+",
                "+\tpublic void setMaxSize(Bytes maxSize)",
                "+\t{",
                "+\t\tArgs.notNull(maxSize, \"maxSize\");",
                "+\t\tthis.maxSize = maxSize;",
                "+\t}",
                "+",
                "+\tpublic Bytes getFileMaxSize()",
                "+\t{",
                "+\t\treturn fileMaxSize;",
                "+\t}",
                "+",
                "+\tpublic void setFileMaxSize(Bytes fileMaxSize)",
                "+\t{",
                "+\t\tthis.fileMaxSize = fileMaxSize;",
                "+\t}",
                "+\t",
                "+\tprotected void onFileUpload(AjaxRequestTarget target, List<FileUpload> files)",
                "+\t{",
                "+\t}",
                "+",
                "+\tprotected void onError(FileUploadException fux)",
                "+\t{",
                "+\t}",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6517": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6517",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "caf528b4a106cbf7077d07137bb96857f4c6a4fa",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511270442,
            "hunks": 7,
            "message": "Use custom Dockerfile for creating the image with the examples Removes the default applications in Tomcat8.5 image and adds wicket-examples as ROOT.war so that it is at the root context path (cherry picked from commit f4d022fcd974521def89796c1d58fe4b09a5b10c)",
            "diff": [
                "diff --git a/wicket-examples/Dockerfile b/wicket-examples/Dockerfile",
                "new file mode 100644",
                "index 0000000000..a83a579985",
                "--- /dev/null",
                "+++ b/wicket-examples/Dockerfile",
                "@@ -0,0 +1,7 @@",
                "+FROM tomcat:8.5-jre8-alpine",
                "+MAINTAINER Apache Wicket Team <dev@wicket.apache.org>",
                "+",
                "+RUN rm -rf /usr/local/tomcat/webapps/*",
                "+",
                "+ADD target/ROOT.war /usr/local/tomcat/webapps/",
                "+",
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 0f23b03e0d..8c66e6ad90 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -33,5 +33,5 @@",
                "-    <properties>",
                "-        <docker-maven-plugin.version>1.0.0</docker-maven-plugin.version>",
                "-    </properties>",
                "+\t<properties>",
                "+\t\t<dockerfile-maven-plugin.version>1.3.6</dockerfile-maven-plugin.version>",
                "+\t</properties>",
                "@@ -228,22 +228,29 @@",
                " \t\t\t<id>docker</id>",
                "+\t\t\t<properties>",
                "+\t\t\t\t<warName>ROOT</warName>",
                "+\t\t\t</properties>",
                " \t\t\t<build>",
                "+\t\t\t\t<finalName>${warName}</finalName>",
                " \t\t\t\t<plugins>",
                "+\t\t\t\t\t<plugin>",
                "+\t\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>",
                "+\t\t\t\t\t\t<artifactId>maven-war-plugin</artifactId>",
                "+\t\t\t\t\t\t<configuration>",
                "+\t\t\t\t\t\t\t<warName>${warName}</warName>",
                "+\t\t\t\t\t\t\t<!--  include the manifest entries so that we can emit the version of the examples. -->",
                "+\t\t\t\t\t\t\t<archive>",
                "+\t\t\t\t\t\t\t\t<manifest>",
                "+\t\t\t\t\t\t\t\t\t<addDefaultImplementationEntries>true</addDefaultImplementationEntries>",
                "+\t\t\t\t\t\t\t\t\t<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>",
                "+\t\t\t\t\t\t\t\t</manifest>",
                "+\t\t\t\t\t\t\t</archive>",
                "+\t\t\t\t\t\t</configuration>",
                "+\t\t\t\t\t</plugin>",
                " \t\t\t\t\t<plugin>",
                " \t\t\t\t\t\t<groupId>com.spotify</groupId>",
                "-\t\t\t\t\t\t<artifactId>docker-maven-plugin</artifactId>",
                "-\t\t\t\t\t\t<version>${docker-maven-plugin.version}</version>",
                "+\t\t\t\t\t\t<artifactId>dockerfile-maven-plugin</artifactId>",
                "+\t\t\t\t\t\t<version>${dockerfile-maven-plugin.version}</version>",
                " \t\t\t\t\t\t<configuration>",
                "-\t\t\t\t\t\t\t<imageName>apache-docker-wicket-docker.bintray.io/wicket-examples:LATEST-6</imageName>",
                "-\t\t\t\t\t\t\t<baseImage>tomcat:8.5-jre8-alpine</baseImage>",
                "-\t\t\t\t\t\t\t<resources>",
                "-\t\t\t\t\t\t\t\t<resource>",
                "-\t\t\t\t\t\t\t\t\t<targetPath>/usr/local/tomcat/webapps</targetPath>",
                "-\t\t\t\t\t\t\t\t\t<directory>${project.build.directory}</directory>",
                "-\t\t\t\t\t\t\t\t\t<include>wicket-examples.war</include>",
                "-\t\t\t\t\t\t\t\t</resource>",
                "-\t\t\t\t\t\t\t</resources>",
                "-\t\t\t\t\t\t\t<forceTags>true</forceTags>",
                "-\t\t\t\t\t\t\t<imageTags>",
                "-\t\t\t\t\t\t\t\t<imageTag>LATEST-6</imageTag>",
                "-\t\t\t\t\t\t\t</imageTags>",
                "+\t\t\t\t\t\t\t<repository>apache-docker-wicket-docker.bintray.io/wicket-examples</repository>",
                "+\t\t\t\t\t\t\t<tag>LATEST-6</tag>",
                " \t\t\t\t\t\t</configuration>"
            ],
            "changed_files": [
                "wicket-examples/Dockerfile",
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e4ea6d7b488f04948fd50b69e06da2d231e3b5ba"
                ],
                [
                    "no-tag",
                    "2b44218a2e92f0aeef20c718780ec644b144b558"
                ]
            ],
            "tags": [
                "rel/wicket-6.29.0",
                "rel/wicket-6.30.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9937049136d3b1726e1e6d0f53ea7973d6bb2c74",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511431560,
            "hunks": 1,
            "message": "Revert \"Fixed link to examples site\" This reverts commit b230793bab0cc53f8c128fe7551e3b1a36e27fbf. The new Docker image now uses ROOT.war",
            "diff": [
                "diff --git a/wicket-user-guide/src/main/asciidoc/single.adoc b/wicket-user-guide/src/main/asciidoc/single.adoc",
                "index f989ff4d36..4fc1464d7b 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/single.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/single.adoc",
                "@@ -9,3 +9,3 @@ The Apache Software Foundation",
                " //custom variables used inside the guide",
                "-:wicket_examples_url: http://examples8x.wicket.apache.org/wicket-examples",
                "+:wicket_examples_url: http://examples8x.wicket.apache.org",
                " :wicket_tutorial_examples_url: https://wicket-guide.herokuapp.com/"
            ],
            "changed_files": [
                "wicket-user-guide/src/main/asciidoc/single.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0f0220bdfc62380acf1d8ddb69f6cb728228399e"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b230793bab0cc53f8c128fe7551e3b1a36e27fbf",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511021530,
            "hunks": 1,
            "message": "Fixed link to examples site",
            "diff": [
                "diff --git a/wicket-user-guide/src/main/asciidoc/single.adoc b/wicket-user-guide/src/main/asciidoc/single.adoc",
                "index 4fc1464d7b..f989ff4d36 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/single.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/single.adoc",
                "@@ -9,3 +9,3 @@ The Apache Software Foundation",
                " //custom variables used inside the guide",
                "-:wicket_examples_url: http://examples8x.wicket.apache.org",
                "+:wicket_examples_url: http://examples8x.wicket.apache.org/wicket-examples",
                " :wicket_tutorial_examples_url: https://wicket-guide.herokuapp.com/"
            ],
            "changed_files": [
                "wicket-user-guide/src/main/asciidoc/single.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "63ec7f0b6953138515ce29414d460a09d9caac5b"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1e6235e33156086fc3b7b13d49261ef10c2183d",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510229726,
            "hunks": 20,
            "message": "[WICKET-6491] ajax download seems to work under both IE11 and Edge",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java",
                "index 787c826614..69e1d0d401 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java",
                "@@ -50,3 +50,3 @@ import com.github.openjson.JSONObject;",
                "  * Usage:",
                "- * ",
                "+ *",
                "  * <pre>",
                "@@ -54,3 +54,3 @@ import com.github.openjson.JSONObject;",
                "  * add(download);",
                "- * ",
                "+ *",
                "  * add(new AjaxButton(\"download\")",
                "@@ -68,3 +68,3 @@ import com.github.openjson.JSONObject;",
                "  * {@link org.apache.wicket.request.resource.AbstractResource.ResourceResponse#setFileName(String)}</p>",
                "- * ",
                "+ *",
                "  * @author svenmeier",
                "@@ -132,3 +132,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * Download of a {@link Resource}.",
                "-\t * ",
                "+\t *",
                " \t * @param resource",
                "@@ -149,3 +149,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * {@link #onDownloadSuccess(AjaxRequestTarget)} will not work.",
                "-\t * ",
                "+\t *",
                " \t * @param reference",
                "@@ -164,3 +164,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * {@link #onDownloadSuccess(AjaxRequestTarget)} will not work.",
                "-\t * ",
                "+\t *",
                " \t * @param reference",
                "@@ -202,3 +202,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * Call this method to initiate the download.",
                "-\t * ",
                "+\t *",
                " \t * @param target",
                "@@ -232,3 +232,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\t\turl = getComponent().getRequestCycle()",
                "-\t\t\t\t.urlFor(new ResourceReferenceRequestHandler(resourceReference, parameters));",
                "+\t\t\t\t.urlFor(new ResourceReferenceRequestHandler(resourceReference, addAntiCache(parameters)));",
                " \t\t}",
                "@@ -236,3 +236,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\t{",
                "-\t\t\turl = resourceBehavior.getUrl();",
                "+\t\t\turl = resourceBehavior.getUrl(addAntiCache(null));",
                " \t\t}",
                "@@ -324,2 +324,21 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                "+\t/**",
                "+\t * Controls if anti cache parameter should be added to the URL or not",
                "+\t *",
                "+\t * @return {@code true} to add the anti cache request parameter, {@code false} - otherwise",
                "+\t */",
                "+\tprotected boolean shouldAddAntiCacheParameter() {",
                "+\t\treturn true;",
                "+\t}",
                "+",
                "+\tprivate PageParameters addAntiCache(PageParameters params) {",
                "+\t\tif (shouldAddAntiCacheParameter()) {",
                "+\t\t\tif (params == null) {",
                "+\t\t\t\tparams = new PageParameters();",
                "+\t\t\t}",
                "+\t\t\tparams.add(\"antiCache\", String.valueOf(System.currentTimeMillis()));",
                "+\t\t}",
                "+\t\treturn params;",
                "+\t}",
                "+",
                " \t/**",
                "@@ -329,2 +348,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                " \t\tprivate final IResource resource;",
                "@@ -341,3 +361,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\t}",
                "-\t\t",
                "+",
                " \t\t@Override",
                "@@ -354,5 +374,5 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                "-\t\tpublic CharSequence getUrl()",
                "+\t\tpublic CharSequence getUrl(PageParameters params)",
                " \t\t{",
                "-\t\t\treturn getComponent().urlForListener(this, null);",
                "+\t\t\treturn getComponent().urlForListener(this, params);",
                " \t\t}",
                "@@ -365,3 +385,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * {@link #AjaxDownloadBehavior(IResource)}.",
                "-\t * ",
                "+\t *",
                " \t * @param attributes",
                "@@ -379,3 +399,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\tCookie cookie = new Cookie(name, \"complete\");",
                "-\t\t",
                "+",
                " \t\t// has to be on root, otherwise JavaScript will not be able to access the",
                "@@ -384,3 +404,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\tcookie.setPath(\"/\");",
                "-\t\t",
                "+",
                " \t\treturn cookie;",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js",
                "index f8452ae5ae..6aaa43afbd 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js",
                "@@ -110,3 +110,3 @@",
                " \t\t\t\t\t\t\tvar matches = /filename[^;=\\n]*=(([\"\"]).*?\\2|[^;\\n]*)/.exec(disposition);",
                "-\t\t\t\t\t\t\tif (matches != null && matches[1]) {",
                "+\t\t\t\t\t\t\tif (matches !== null && matches[1]) {",
                " \t\t\t\t\t\t\t\tfilename = matches[1].replace(/[\"\"]/g, \"\");",
                "@@ -115,20 +115,23 @@",
                "-\t\t\t\t\t\tvar type = xhr.getResponseHeader(\"Content-Type\");",
                "-\t\t\t\t\t\tvar blob = new Blob([xhr.response], {type: type});",
                "+\t\t\t\t\t\tif (typeof window.navigator.msSaveOrOpenBlob !== 'undefined') {",
                "+\t\t\t\t\t\t\twindow.navigator.msSaveOrOpenBlob(xhr.response, filename);",
                "+\t\t\t\t\t\t} else {",
                "+\t\t\t\t\t\t\tvar type = xhr.getResponseHeader(\"Content-Type\");",
                "+\t\t\t\t\t\t\tvar blob = new Blob([xhr.response], {type: type});",
                "-\t\t\t\t\t\tvar blobUrl = (window.URL || window.webkitURL).createObjectURL(blob);",
                "+\t\t\t\t\t\t\tvar blobUrl = (window.URL || window.webkitURL).createObjectURL(blob);",
                "-\t\t\t\t\t\tvar anchor = jQuery(\"<a></a>\")",
                "-\t\t\t\t\t\t\t.prop(\"href\", blobUrl)",
                "-\t\t\t\t\t\t\t.prop(\"download\", filename)",
                "-\t\t\t\t\t\t\t.appendTo(\"body\")",
                "-\t\t\t\t\t\t\t.hide();",
                "-\t\t\t\t\t\t",
                "-\t\t\t\t\t\tanchor[0].click();",
                "-\t\t\t\t\t\t",
                "-\t\t\t\t\t\tsetTimeout(function () {",
                "-\t\t\t\t\t\t\tURL.revokeObjectURL(blobUrl);",
                "-\t\t\t\t\t\t\tanchor.remove();",
                "-\t\t\t\t\t\t}, 100);",
                "+\t\t\t\t\t\t\tvar anchor = jQuery(\"<a></a>\")",
                "+\t\t\t\t\t\t\t\t.prop(\"href\", blobUrl)",
                "+\t\t\t\t\t\t\t\t.prop(\"download\", filename)",
                "+\t\t\t\t\t\t\t\t.appendTo(\"body\")",
                "+\t\t\t\t\t\t\t\t.hide();",
                "+\t\t\t\t\t\t\tanchor[0].click();",
                "+",
                "+\t\t\t\t\t\t\tsetTimeout(function () {",
                "+\t\t\t\t\t\t\t\tURL.revokeObjectURL(blobUrl);",
                "+\t\t\t\t\t\t\t\tanchor.remove();",
                "+\t\t\t\t\t\t\t}, 100);",
                "+\t\t\t\t\t\t}",
                " \t\t\t\t\t\tnotifyServer(\"success\");",
                "@@ -145,3 +148,2 @@",
                " \t}; ",
                "-\t",
                " })();"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/wicket-ajaxdownload.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6491": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6491",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d2286b2bcc391b9595bc48d8082fb8c6ee911d2c",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510287258,
            "hunks": 17,
            "message": "[WICKET-6491] redundant anti-cache parameter is removed",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java",
                "index 69e1d0d401..787c826614 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java",
                "@@ -50,3 +50,3 @@ import com.github.openjson.JSONObject;",
                "  * Usage:",
                "- *",
                "+ * ",
                "  * <pre>",
                "@@ -54,3 +54,3 @@ import com.github.openjson.JSONObject;",
                "  * add(download);",
                "- *",
                "+ * ",
                "  * add(new AjaxButton(\"download\")",
                "@@ -68,3 +68,3 @@ import com.github.openjson.JSONObject;",
                "  * {@link org.apache.wicket.request.resource.AbstractResource.ResourceResponse#setFileName(String)}</p>",
                "- *",
                "+ * ",
                "  * @author svenmeier",
                "@@ -132,3 +132,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * Download of a {@link Resource}.",
                "-\t *",
                "+\t * ",
                " \t * @param resource",
                "@@ -149,3 +149,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * {@link #onDownloadSuccess(AjaxRequestTarget)} will not work.",
                "-\t *",
                "+\t * ",
                " \t * @param reference",
                "@@ -164,3 +164,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * {@link #onDownloadSuccess(AjaxRequestTarget)} will not work.",
                "-\t *",
                "+\t * ",
                " \t * @param reference",
                "@@ -202,3 +202,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * Call this method to initiate the download.",
                "-\t *",
                "+\t * ",
                " \t * @param target",
                "@@ -232,3 +232,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\t\turl = getComponent().getRequestCycle()",
                "-\t\t\t\t.urlFor(new ResourceReferenceRequestHandler(resourceReference, addAntiCache(parameters)));",
                "+\t\t\t\t.urlFor(new ResourceReferenceRequestHandler(resourceReference, parameters));",
                " \t\t}",
                "@@ -236,3 +236,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\t{",
                "-\t\t\turl = resourceBehavior.getUrl(addAntiCache(null));",
                "+\t\t\turl = resourceBehavior.getUrl();",
                " \t\t}",
                "@@ -324,21 +324,2 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                "-\t/**",
                "-\t * Controls if anti cache parameter should be added to the URL or not",
                "-\t *",
                "-\t * @return {@code true} to add the anti cache request parameter, {@code false} - otherwise",
                "-\t */",
                "-\tprotected boolean shouldAddAntiCacheParameter() {",
                "-\t\treturn true;",
                "-\t}",
                "-",
                "-\tprivate PageParameters addAntiCache(PageParameters params) {",
                "-\t\tif (shouldAddAntiCacheParameter()) {",
                "-\t\t\tif (params == null) {",
                "-\t\t\t\tparams = new PageParameters();",
                "-\t\t\t}",
                "-\t\t\tparams.add(\"antiCache\", String.valueOf(System.currentTimeMillis()));",
                "-\t\t}",
                "-\t\treturn params;",
                "-\t}",
                "-",
                " \t/**",
                "@@ -348,3 +329,2 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t{",
                "-\t\tprivate static final long serialVersionUID = 1L;",
                " \t\tprivate final IResource resource;",
                "@@ -361,3 +341,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\t}",
                "-",
                "+\t\t",
                " \t\t@Override",
                "@@ -374,5 +354,5 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                "-\t\tpublic CharSequence getUrl(PageParameters params)",
                "+\t\tpublic CharSequence getUrl()",
                " \t\t{",
                "-\t\t\treturn getComponent().urlForListener(this, params);",
                "+\t\t\treturn getComponent().urlForListener(this, null);",
                " \t\t}",
                "@@ -385,3 +365,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t * {@link #AjaxDownloadBehavior(IResource)}.",
                "-\t *",
                "+\t * ",
                " \t * @param attributes",
                "@@ -399,3 +379,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\tCookie cookie = new Cookie(name, \"complete\");",
                "-",
                "+\t\t",
                " \t\t// has to be on root, otherwise JavaScript will not be able to access the",
                "@@ -404,3 +384,3 @@ public class AjaxDownloadBehavior extends AbstractDefaultAjaxBehavior",
                " \t\tcookie.setPath(\"/\");",
                "-",
                "+\t\t",
                " \t\treturn cookie;"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDownloadBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6491": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6491",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "00109395588662ca380bdf82e8fc6cc75069565a",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1515078048,
            "hunks": 4,
            "message": "WICKET-6514 restored original behavior of FeedbackPanel to collect session messages",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java",
                "index d6d915a79b..ab8f5cd5ad 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java",
                "@@ -25,2 +25,3 @@ import org.apache.wicket.Component;",
                " import org.apache.wicket.Page;",
                "+import org.apache.wicket.Session;",
                " import org.apache.wicket.model.IModel;",
                "@@ -49,2 +50,5 @@ public class FeedbackMessagesModel implements IModel<List<FeedbackMessage>>",
                "+\t/** Controls whether or not feedback from the {@link Session} will be collected **/",
                "+\tprivate boolean includeSession = true;",
                "+",
                " \t/**",
                "@@ -128,3 +132,3 @@ public class FeedbackMessagesModel implements IModel<List<FeedbackMessage>>",
                " \t{",
                "-\t\treturn new FeedbackCollector(pageResolvingComponent.getPage()).collect(filter);",
                "+\t\treturn new FeedbackCollector(pageResolvingComponent.getPage(), includeSession).collect(filter);",
                " \t}",
                "@@ -182,2 +186,17 @@ public class FeedbackMessagesModel implements IModel<List<FeedbackMessage>>",
                " \t}",
                "+",
                "+\t/**",
                "+\t * Controls whether or not feedback from the {@link Session} will be collected.",
                "+\t * ",
                "+\t * See {@link FeedbackCollector#setIncludeSession} and {@link Session#getFeedbackMessages} ",
                "+\t * ",
                "+\t * @param value",
                "+\t * @return ",
                "+\t * @return {@code this} for chaining",
                "+\t */",
                "+\tpublic FeedbackMessagesModel setIncludeSession(boolean includeSession)",
                "+\t{",
                "+\t\tthis.includeSession = includeSession;",
                "+\t\treturn this;",
                "+\t}",
                " }"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6514": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6514",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "08083aed20e8c60b6bf829fe460f768f7fa404ab",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516617936,
            "hunks": 18,
            "message": "WICKET-6498 always add event listener regardless of readyState for Ajax requests PartialPageUpdate will pack all OnDomReady and OnLoad items into an <evaluate> block anyways",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Application.java b/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "index 356c8b92b7..9415afac15 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "@@ -43,2 +43,3 @@ import org.apache.wicket.javascript.DefaultJavaScriptCompressor;",
                " import org.apache.wicket.markup.MarkupFactory;",
                "+import org.apache.wicket.markup.head.HeaderItem;",
                " import org.apache.wicket.markup.head.IHeaderResponse;",
                "@@ -1614,5 +1615,9 @@ public abstract class Application implements UnboundListener, IEventSink",
                " \t * header responses.",
                "+\t * <p>",
                "+\t * Calling this method replaces the default decorator, which utilizes a {@link ResourceAggregator}:",
                "+\t * The given implementation should make sure, that it too wraps responses in a {@link ResourceAggregator},",
                "+\t * otherwise no dependencies for {@link HeaderItem}s will be resolved.   ",
                " \t * ",
                " \t * @param headerResponseDecorator",
                "-\t *            your custom decorator",
                "+\t *            your custom decorator, must not be null",
                " \t */",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "index 15dd49e43b..300f960e50 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "@@ -24,2 +24,3 @@ import org.apache.wicket.markup.head.IWrappedHeaderItem;",
                " import org.apache.wicket.markup.head.JavaScriptContentHeaderItem;",
                "+import org.apache.wicket.markup.head.JavaScriptHeaderItem;",
                " import org.apache.wicket.markup.head.OnDomReadyHeaderItem;",
                "@@ -27,2 +28,3 @@ import org.apache.wicket.markup.head.OnLoadHeaderItem;",
                " import org.apache.wicket.markup.html.DecoratingHeaderResponse;",
                "+import org.apache.wicket.page.PartialPageUpdate;",
                " import org.apache.wicket.request.Response;",
                "@@ -32,2 +34,6 @@ import org.apache.wicket.util.string.Strings;",
                "  * A header response that defers all {@link AbstractJavaScriptReferenceHeaderItem}s.",
                "+ * <p>",
                "+ * To prevent any error because of possible dependencies to referenced JavaScript files",
                "+ * *all* {@link JavaScriptHeaderItem}s are replaced with suitable implementations that",
                "+ * delay any execution until {@link AbstractJavaScriptReferenceHeaderItem}s have been loaded.",
                "  * ",
                "@@ -37,2 +43,7 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " {",
                "+\t/**",
                "+\t * Decorate the given response.",
                "+\t * ",
                "+\t * @param response",
                "+\t */",
                " \tpublic JavaScriptDeferHeaderResponse(IHeaderResponse response)",
                "@@ -51,2 +62,4 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t\t\t((AbstractJavaScriptReferenceHeaderItem)item).setDefer(true);",
                "+\t\t} else if (item instanceof JavaScriptContentHeaderItem) {",
                "+\t\t\titem = new NativeOnDomContentLoadedHeaderItem(((JavaScriptContentHeaderItem)item).getJavaScript());",
                " \t\t} else if (item instanceof OnDomReadyHeaderItem) {",
                "@@ -55,4 +68,2 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t\t\titem = new NativeOnLoadHeaderItem(((OnLoadHeaderItem)item).getJavaScript());",
                "-\t\t} else if (item instanceof JavaScriptContentHeaderItem) {",
                "-\t\t\titem = new NativeOnDomContentLoadedHeaderItem(((JavaScriptContentHeaderItem)item).getJavaScript());",
                " \t\t}",
                "@@ -62,2 +73,8 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                "+\t/**",
                "+\t * A specialization that uses native \"DOMContentLoaded\" events without dependency to external JavaScript.",
                "+\t * <p>",
                "+\t * For Ajax requests we utilize the fact, that {@link PartialPageUpdate} renders {@link #getJavaScript()} only,",
                "+\t * thus executing the JavaScript directly without any event registration.",
                "+\t */",
                " \tprivate class NativeOnDomContentLoadedHeaderItem extends OnDomReadyHeaderItem",
                "@@ -74,2 +91,5 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                "+\t\t/**",
                "+\t\t * Overriden to use native {@code addEventListener('DOMContentLoaded')} instead.",
                "+\t\t */",
                " \t\t@Override",
                "@@ -80,4 +100,3 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t\t\t{",
                "-\t\t\t\tJavaScriptUtils.writeJavaScript(response,",
                "-\t\t\t\t\t\"(function(){ var f = function() {\" + js + \";};\\nif ('loading' !== document.readyState) f(); else document.addEventListener('DOMContentLoaded', f); })();\");",
                "+\t\t\t\tJavaScriptUtils.writeJavaScript(response, \"document.addEventListener('DOMContentLoaded', function() { \" + js + \"; });\");",
                " \t\t\t}",
                "@@ -86,2 +105,8 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                "+\t/**",
                "+\t * A specialization that uses native \"load\" events without dependency to external JavaScript ",
                "+\t * <p>",
                "+\t * For Ajax requests we utilize the fact, that {@link PartialPageUpdate} renders {@link #getJavaScript()} only,",
                "+\t * thus executing the JavaScript directly without any event registration.",
                "+\t */",
                " \tprivate class NativeOnLoadHeaderItem extends OnLoadHeaderItem",
                "@@ -99,2 +124,5 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                "+\t\t/**",
                "+\t\t * Overriden to use native {@code addEventListener('load')} instead.",
                "+\t\t */",
                " \t\t@Override",
                "@@ -105,4 +133,3 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t\t\t{",
                "-\t\t\t\tJavaScriptUtils.writeJavaScript(response,",
                "-\t\t\t\t\t\"(function(){ var f = function() {\" + js + \";};\\nif ('complete' === document.readyState) f(); else window.addEventListener('load', f); })();\");",
                "+\t\t\t\tJavaScriptUtils.writeJavaScript(response, \"window.addEventListener('load', function() { \" + js + \"; });\");",
                " \t\t\t}",
                "@@ -110,2 +137,2 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t}\t",
                "-} ",
                "\\ No newline at end of file",
                "+} ",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/IHeaderResponseDecorator.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/IHeaderResponseDecorator.java",
                "index 3e502b9d53..00c9b178d4 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/IHeaderResponseDecorator.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/IHeaderResponseDecorator.java",
                "@@ -21,6 +21,6 @@ import org.apache.wicket.markup.head.IHeaderResponse;",
                " /**",
                "- * Setting an IHeaderResponseDecorator on an application allows you to wrap any IHeaderResponse",
                "- * created by Wicket in a separate implementation that incrementally adds functionality to the",
                "- * IHeaderResponse that is used by all IHeaderContributor components or behaviors.",
                "- * ",
                "+ * Setting an IHeaderResponseDecorator on an application allows you to wrap any {@link IHeaderResponse}",
                "+ * created by Wicket in a separate implementation that adds functionality to it when used by all",
                "+ * {@link IHeaderContributor} components or behaviors.",
                "+ * <p>",
                "  * Everywhere that Wicket creates an instance of IHeaderResponse, it will call to your application"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/Application.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/html/IHeaderResponseDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6498": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6498",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ba74ad84911b3a6af65bd8169b9bcd9b757ba6e3",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511517036,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master' into WICKET-6497-unify-js",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6497": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6497",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f9bd3c4831427a75294cd11de46ed4c8170dcf9",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517116224,
            "hunks": 5,
            "message": "WICKET-6498 missing serialVersionUID are added, minor compiler warnings are fixed",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java",
                "index 18745a27df..e1728ec774 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java",
                "@@ -37,2 +37,4 @@ public class FilteredHeaderItem extends HeaderItem implements IWrappedHeaderItem",
                " {",
                "+\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \tprivate HeaderItem wrapped;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "index 300f960e50..1a5da3fec9 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "@@ -81,2 +81,4 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "+",
                " \t\t/**",
                "@@ -113,2 +115,3 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t{",
                "+\t\tprivate static final long serialVersionUID = 1L;",
                "@@ -137,2 +140,2 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t}\t",
                "-} ",
                "+}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "index c38265aa9c..9f8327e327 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java",
                "@@ -48,6 +48,4 @@ public class AjaxApplication extends WicketExampleApplication",
                "-\t\tsetHeaderResponseDecorator(response -> {",
                "-\t\t\t// use this header resource decorator to defer all JavaScript resources",
                "-\t\t\treturn new ResourceAggregator(new JavaScriptDeferHeaderResponse(response));",
                "-\t\t});",
                "+\t\t// use this header resource decorator to defer all JavaScript resources",
                "+\t\tsetHeaderResponseDecorator(response -> new ResourceAggregator(new JavaScriptDeferHeaderResponse(response)));"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AjaxApplication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6498": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6498",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05a8c7e57d6a2822d09fa1806955707c4cca368e",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514268633,
            "hunks": 2,
            "message": "[WICKET-6512] feedbackMessages, style, pageId, sequence and temporarySessionAttributes are not being dropped while session replacement",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Session.java b/wicket-core/src/main/java/org/apache/wicket/Session.java",
                "index e7f9c144cd..2c5616b67c 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Session.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Session.java",
                "@@ -499,7 +499,2 @@ public abstract class Session implements IClusterable, IEventSink",
                " \t\t\tmetaData = null;",
                "-\t\t\tfeedbackMessages.clear();",
                "-\t\t\tsetStyle(null);",
                "-\t\t\tpageId.set(0);",
                "-\t\t\tsequence.set(0);",
                "-\t\t\ttemporarySessionAttributes = null;",
                " \t\t}",
                "@@ -517,2 +512,7 @@ public abstract class Session implements IClusterable, IEventSink",
                " \t\tdestroy();",
                "+\t\tfeedbackMessages.clear();",
                "+\t\tsetStyle(null);",
                "+\t\tpageId.set(0);",
                "+\t\tsequence.set(0);",
                "+\t\ttemporarySessionAttributes = null;",
                " \t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/Session.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6512": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6512",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3183aeb24f09d57e91bfc01813005f01cfd671df",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508493201,
            "hunks": 16,
            "message": "WICKET-6485 reintroduce PageExpiredException in IPageStore for methods getPageClass, getPageInstance and getPageParameters",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/IPageProvider.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/IPageProvider.java",
                "index f0843dc233..cc69e0215a 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/IPageProvider.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/IPageProvider.java",
                "@@ -18,3 +18,2 @@ package org.apache.wicket.core.request.handler;",
                "-import org.apache.wicket.core.request.mapper.StalePageException;",
                " import org.apache.wicket.protocol.http.PageExpiredException;",
                "@@ -38,5 +37,2 @@ public interface IPageProvider",
                " \t * @return page instance",
                "-\t * @throws StalePageException",
                "-\t *             if render count has been specified in constructor and the render count of page",
                "-\t *             does not match the value",
                " \t * @throws PageExpiredException if the specified page",
                "@@ -45,3 +41,3 @@ public interface IPageProvider",
                " \t */",
                "-\tIRequestablePage getPageInstance();",
                "+\tIRequestablePage getPageInstance()  throws PageExpiredException;",
                "@@ -51,4 +47,7 @@ public interface IPageProvider",
                " \t * @return page parameters",
                "+\t * @throws PageExpiredException if the specified page",
                "+     *          could not have been found and the constructor used did not provide enough information",
                "+     *          to create new page instance",
                " \t */",
                "-\tPageParameters getPageParameters();",
                "+\tPageParameters getPageParameters()  throws PageExpiredException;",
                "@@ -69,6 +68,8 @@ public interface IPageProvider",
                " \t * Returns class of the page.",
                "-\t *",
                "+\t * @throws PageExpiredException if the specified page",
                "+     *          could not have been found and the constructor used did not provide enough information",
                "+     *          to create new page instance",
                " \t * @return page class",
                " \t */",
                "-\tClass<? extends IRequestablePage> getPageClass();",
                "+\tClass<? extends IRequestablePage> getPageClass() throws PageExpiredException;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java",
                "index d36cce9ee4..0a4170afb8 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java",
                "@@ -25,3 +25,2 @@ import org.apache.wicket.core.request.handler.RenderPageRequestHandler.RedirectP",
                " import org.apache.wicket.core.request.handler.logger.ListenerLogData;",
                "-import org.apache.wicket.protocol.http.PageExpiredException;",
                " import org.apache.wicket.request.ILoggableRequestHandler;",
                "@@ -97,9 +96,3 @@ public class ListenerRequestHandler",
                " \t{",
                "-\t\tIRequestablePage page = pageComponentProvider.getPageInstance();",
                "-\t\tif (page == null && pageComponentProvider.wasExpired())",
                "-\t\t{",
                "-\t\t\tthrow new PageExpiredException(",
                "-\t\t\t\t\"Page with id '\" + pageComponentProvider.getPageId() + \"' has expired.\");",
                "-\t\t}",
                "-\t\treturn page;",
                "+\t\treturn pageComponentProvider.getPageInstance();\t\t",
                " \t}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageProvider.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageProvider.java",
                "index 4079eb75ea..7bd473ec6c 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageProvider.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageProvider.java",
                "@@ -22,2 +22,3 @@ import org.apache.wicket.core.request.mapper.StalePageException;",
                " import org.apache.wicket.page.IPageManager;",
                "+import org.apache.wicket.protocol.http.PageExpiredException;",
                " import org.apache.wicket.request.IRequestHandler;",
                "@@ -167,5 +168,12 @@ public class PageProvider implements IPageProvider, IClusterable",
                " \t@Override",
                "-\tpublic IRequestablePage getPageInstance()",
                "+\tpublic IRequestablePage getPageInstance() throws PageExpiredException",
                " \t{",
                "-\t\treturn getProvision().getPage();",
                "+\t\tIRequestablePage page = getProvision().getPage();",
                "+\t\t",
                "+\t\tif (page == null && wasExpired()) ",
                "+\t\t{",
                "+\t\t\tthrow new PageExpiredException(\"Page with id '\" + pageId + \"' has expired.\");",
                "+\t\t}",
                "+\t\t",
                "+\t\treturn page;",
                " \t}",
                "@@ -173,3 +181,3 @@ public class PageProvider implements IPageProvider, IClusterable",
                " \t@Override",
                "-\tpublic PageParameters getPageParameters()",
                "+\tpublic PageParameters getPageParameters() throws PageExpiredException",
                " \t{",
                "@@ -240,3 +248,3 @@ public class PageProvider implements IPageProvider, IClusterable",
                " \t@Override",
                "-\tpublic Class<? extends IRequestablePage> getPageClass()",
                "+\tpublic Class<? extends IRequestablePage> getPageClass() throws PageExpiredException",
                " \t{",
                "@@ -246,3 +254,3 @@ public class PageProvider implements IPageProvider, IClusterable",
                " \t\t}",
                "-\t\telse if (hasPageInstance())",
                "+\t\telse",
                " \t\t{",
                "@@ -250,4 +258,2 @@ public class PageProvider implements IPageProvider, IClusterable",
                " \t\t}",
                "-",
                "-\t\treturn null;",
                " \t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/request/handler/IPageProvider.java",
                "wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerRequestHandler.java",
                "wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6485": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6485",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "297dcee7d2609ac21e70d37d5ad81e48684881f3",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511965544,
            "hunks": 4,
            "message": "Fixed a type",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "index 109ad1ecc7..a07a7f79dd 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java",
                "@@ -40,3 +40,3 @@ public class AjaxDisableComponentListener extends AjaxCallListener",
                " \t{",
                "-\t\treturn generateHandlerJs(component, true);",
                "+\t\treturn generateHandlerJavaScript(component, true);",
                " \t}",
                "@@ -46,3 +46,3 @@ public class AjaxDisableComponentListener extends AjaxCallListener",
                " \t{",
                "-\t\treturn generateHandlerJs(component, false);",
                "+\t\treturn generateHandlerJavaScript(component, false);",
                " \t}",
                "@@ -52,6 +52,6 @@ public class AjaxDisableComponentListener extends AjaxCallListener",
                " \t{",
                "-\t\treturn generateHandlerJs(component, false);",
                "+\t\treturn generateHandlerJavaScript(component, false);",
                " \t}",
                "-\tprotected String generateHandlerJ(Component component, boolean disabled)",
                "+\tprotected String generateHandlerJavaScript(Component component, boolean disabled)",
                " \t{"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/AjaxDisableComponentListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b9b4682edad16d03753caf39c21add53f81ad9ea"
                ]
            ],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1d20044b5e9a5d282217514bffd040c13794b808",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516591319,
            "hunks": 0,
            "message": "Merge branch 'master' into WICKET-6518-quickstart-logback",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6518": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6518",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb64b2af424f1492e60c6a2038c466878a855b01",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508350793,
            "hunks": 4,
            "message": "WICKET-6479 do not send request when name has not changed",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java b/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java",
                "index 357120a820..4f8cb06ab2 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java",
                "@@ -22,2 +22,3 @@ import org.apache.wicket.Component;",
                " import org.apache.wicket.Page;",
                "+import org.apache.wicket.ajax.attributes.AjaxCallListener;",
                " import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;",
                "@@ -50,2 +51,12 @@ public class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjaxBehavior",
                "+\t/**",
                "+\t * Returns the window's name.",
                "+\t * ",
                "+\t * @return name of {@value null} if not yet bound to a window",
                "+\t */",
                "+\tpublic String getWindowName()",
                "+\t{",
                "+\t\treturn boundName;",
                "+\t}",
                "+\t",
                " \t/**",
                "@@ -60,2 +71,15 @@ public class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjaxBehavior",
                " \t\tattributes.getDynamicExtraParameters().add(parameter);",
                "+",
                "+\t\tif (boundName != null)",
                "+\t\t{",
                "+\t\t\t// already bound, send request only when changed",
                "+\t\t\tattributes.getAjaxCallListeners().add(new AjaxCallListener()",
                "+\t\t\t{",
                "+\t\t\t\t@Override",
                "+\t\t\t\tpublic CharSequence getPrecondition(Component component)",
                "+\t\t\t\t{",
                "+\t\t\t\t\treturn String.format(\"return (window.name !== '%s');\", boundName);",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t}",
                " \t}",
                "@@ -77,4 +101,3 @@ public class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjaxBehavior",
                " \t{",
                "-\t\tString windowName = getComponent().getRequest().getRequestParameters()",
                "-\t\t\t.getParameterValue(PARAM_WINDOW_NAME).toString();",
                "+\t\tString windowName = getComponent().getRequest().getRequestParameters().getParameterValue(PARAM_WINDOW_NAME).toString();"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/AjaxNewWindowNotifyingBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6479": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6479",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b80674c108f8dfd125d022ddf9a1fa3d94eac5ff",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510630689,
            "hunks": 0,
            "message": "Merge branch 'WICKET-6492-minify-fix'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6492": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6492",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "39e731510cd3084d6109cb7e126ececc5bdf7da0",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511087217,
            "hunks": 18,
            "message": "WICKET-6499 Support Bean Validation 2.0 this closes 246",
            "diff": [
                "diff --git a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "index 862a69b309..5ae231420b 100644",
                "--- a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "+++ b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "@@ -2,2 +2,3 @@ package org.apache.wicket.bean.validation;",
                "+import java.lang.annotation.Annotation;",
                " import java.util.ArrayList;",
                "@@ -11,2 +12,4 @@ import javax.validation.ConstraintViolation;",
                " import javax.validation.Validator;",
                "+import javax.validation.constraints.NotBlank;",
                "+import javax.validation.constraints.NotEmpty;",
                " import javax.validation.constraints.NotNull;",
                "@@ -60,2 +63,4 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                " \tprivate static final Class<?>[] EMPTY = new Class<?>[0];",
                "+\tprivate static final List<Class<? extends Annotation>> NOT_NULL_ANNOTATIONS =",
                "+\t\t\tArrays.asList(NotNull.class, NotBlank.class, NotEmpty.class);",
                "@@ -186,3 +191,3 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                "-\tprivate List<NotNull> findNotNullConstraints()",
                "+\tprivate List<ConstraintDescriptor<?>> findNotNullConstraints(List<Class<? extends Annotation>> notNullAnnotationTypes)",
                " \t{",
                "@@ -192,3 +197,3 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                "-\t\tList<NotNull> constraints = new ArrayList<NotNull>();",
                "+\t\tList<ConstraintDescriptor<?>> constraints = new ArrayList<>();",
                "@@ -199,5 +204,7 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                " \t\t\tConstraintDescriptor<?> desc = it.next();",
                "-\t\t\tif (desc.getAnnotation().annotationType().equals(NotNull.class))",
                "+\t\t\tAnnotation annotation = desc.getAnnotation();",
                "+\t\t\tClass<? extends Annotation> annotationType = annotation.annotationType();",
                "+\t\t\tif (notNullAnnotationTypes.contains(annotationType))",
                " \t\t\t{",
                "-\t\t\t\tconstraints.add((NotNull)desc.getAnnotation());",
                "+\t\t\t\tconstraints.add(desc);",
                " \t\t\t}",
                "@@ -210,3 +217,3 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                " \t{",
                "-\t\tList<NotNull> constraints = findNotNullConstraints();",
                "+\t\tList<ConstraintDescriptor<?>> constraints = findNotNullConstraints(NOT_NULL_ANNOTATIONS);",
                "@@ -217,6 +224,6 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                "-\t\tHashSet<Class<?>> validatorGroups = new HashSet<Class<?>>();",
                "+\t\tSet<Class<?>> validatorGroups = new HashSet<>();",
                " \t\tvalidatorGroups.addAll(Arrays.asList(getGroups()));",
                "-\t\tfor (NotNull constraint : constraints)",
                "+\t\tfor (ConstraintDescriptor<?> constraint : constraints)",
                " \t\t{",
                "@@ -227,3 +234,3 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                "-\t\t\tfor (Class<?> constraintGroup : constraint.groups())",
                "+\t\t\tfor (Class<?> constraintGroup : constraint.getGroups())",
                " \t\t\t{",
                "@@ -239,5 +246,5 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                "-\tprivate boolean canApplyToDefaultGroup(NotNull constraint)",
                "+\tprivate boolean canApplyToDefaultGroup(ConstraintDescriptor<?> constraint)",
                " \t{",
                "-\t\tList<Class<?>> groups = Arrays.asList(constraint.groups());",
                "+\t\tSet<Class<?>> groups = constraint.getGroups();",
                " \t\t//the constraint can be applied to default group either if its group array is empty",
                "diff --git a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.properties b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.properties",
                "index b706fc94c0..29f5511b42 100644",
                "--- a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.properties",
                "+++ b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.properties",
                "@@ -1,15 +1,24 @@",
                "-javax.validation.constraints.AssertFalse.message = '${label}' must be false",
                "-javax.validation.constraints.AssertTrue.message  = '${label}' must be true",
                "-javax.validation.constraints.DecimalMax.message  = '${label}' must be less than or equal to ${value}",
                "-javax.validation.constraints.DecimalMin.message  = '${label}' must be greater than or equal to ${value}",
                "-javax.validation.constraints.Digits.message      = '${label}' numeric value out of bounds (<${integer} digits>.<${fraction} digits> expected)",
                "-javax.validation.constraints.Future.message      = '${label}' must be in the future",
                "-javax.validation.constraints.Max.message         = '${label}' must be less than or equal to ${value}",
                "-javax.validation.constraints.Min.message         = '${label}' must be greater than or equal to ${value}",
                "-javax.validation.constraints.NotNull.message     = '${label}' may not be null",
                "-javax.validation.constraints.Null.message        = '${label}' must be null",
                "-javax.validation.constraints.Past.message        = '${label}' must be in the past",
                "-javax.validation.constraints.Pattern.message     = '${label}' must match \"${regexp}\"",
                "-javax.validation.constraints.Size.message        = '${label}' must be between ${min} and ${max}",
                "-javax.validation.constraints.Size.message.String = '${label}' length must be between ${min} and ${max}",
                "+javax.validation.constraints.AssertFalse.message        = '${label}' must be false",
                "+javax.validation.constraints.AssertTrue.message         = '${label}' must be true",
                "+javax.validation.constraints.DecimalMax.message         = '${label}' must be less than or equal to ${value}",
                "+javax.validation.constraints.DecimalMin.message         = '${label}' must be greater than or equal to ${value}",
                "+javax.validation.constraints.Digits.message             = '${label}' numeric value out of bounds (<${integer} digits>.<${fraction} digits> expected)",
                "+javax.validation.constraints.Email.message              = '${label}' is not a well-formed email address",
                "+javax.validation.constraints.Future.message             = '${label}' must be in the future",
                "+javax.validation.constraints.FutureOrPresent.message    = '${label}' must be in the future or present",
                "+javax.validation.constraints.Max.message                = '${label}' must be less than or equal to ${value}",
                "+javax.validation.constraints.Min.message                = '${label}' must be greater than or equal to ${value}",
                "+javax.validation.constraints.Negative.message           = '${label}' must be negative",
                "+javax.validation.constraints.NegativeOrZero.message     = '${label}' must be negative or zero",
                "+javax.validation.constraints.NotNull.message            = '${label}' may not be null",
                "+javax.validation.constraints.NotBlank.message           = '${label}' may not be empty",
                "+javax.validation.constraints.NotEmpty.message           = '${label}' may not be empty",
                "+javax.validation.constraints.Null.message               = '${label}' must be null",
                "+javax.validation.constraints.Past.message               = '${label}' must be in the past",
                "+javax.validation.constraints.PastOrPresent.message      = '${label}' must be in the past or present",
                "+javax.validation.constraints.Pattern.message            = '${label}' must match \"${regexp}\"",
                "+javax.validation.constraints.Positive.message           = '${label}' must be positive",
                "+javax.validation.constraints.PositiveOrZero.message     = '${label}' must be positive or zero",
                "+javax.validation.constraints.Size.message               = '${label}' must be between ${min} and ${max}",
                "+javax.validation.constraints.Size.message.String        = '${label}' length must be between ${min} and ${max}",
                "diff --git a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml",
                "index 54333e2c9f..0354b5d8d3 100644",
                "--- a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml",
                "+++ b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml",
                "@@ -24,8 +24,17 @@",
                " \t<entry key=\"javax.validation.constraints.Digits.message\">Le champ '${label}' valeur num\u00c3\u00a9rique hors limite (&lt;${integer} chiffres&gt;.&lt;${fraction} chiffres&gt; attendu)</entry>",
                "+\t<entry key=\"javax.validation.constraints.Email.message\">Le champ '${label}' n'est pas une adresse mail valide</entry>",
                " \t<entry key=\"javax.validation.constraints.Future.message\">Le champ '${label}' doit \u00c3\u00aatre dans le futur</entry>",
                "+\t<entry key=\"javax.validation.constraints.FutureOrPresent.message\">Le champ '${label}' doit \u00c3\u00aatre dans le futur ou le pr\u00c3\u00a9sent</entry>",
                " \t<entry key=\"javax.validation.constraints.Max.message\">Le champ '${label}' doit \u00c3\u00aatre inf\u00c3\u00a9rieur ou \u00c3\u00a9gal \u00c3\u00a0 ${value}</entry>",
                " \t<entry key=\"javax.validation.constraints.Min.message\">Le champ '${label}' doit \u00c3\u00aatre sup\u00c3\u00a9rieur ou \u00c3\u00a9gal \u00c3\u00a0 ${value}</entry>",
                "-\t<entry key=\"javax.validation.constraints.NotNull.message\">Le champ '${label}' ne doit pas \u00c3\u00aatre null</entry>",
                "-\t<entry key=\"javax.validation.constraints.Null.message\">Le champ '${label}' doit \u00c3\u00aatre null</entry>",
                "+\t<entry key=\"javax.validation.constraints.Negative.message\">Le champ '${label}' doit \u00c3\u00aatre n\u00c3\u00a9gatif,</entry>",
                "+\t<entry key=\"javax.validation.constraints.NegativeOrZero.message\">Le champ '${label}' doit \u00c3\u00aatre n\u00c3\u00a9gatif, ou z\u00c3\u00a9ro</entry>",
                "+    <entry key=\"javax.validation.constraints.NotBlank.message\">Le champ '${label}' ne peut pas \u00c3\u00aatre vide</entry>",
                "+    <entry key=\"javax.validation.constraints.NotEmpty.message\">Le champ '${label}' ne peut pas \u00c3\u00aatre vide</entry>",
                "+    <entry key=\"javax.validation.constraints.NotNull.message\">Le champ '${label}' ne doit pas \u00c3\u00aatre null</entry>",
                "+    <entry key=\"javax.validation.constraints.Null.message\">Le champ '${label}' doit \u00c3\u00aatre null</entry>",
                " \t<entry key=\"javax.validation.constraints.Past.message\">Le champ '${label}' doit \u00c3\u00aatre dans le pass\u00c3\u00a9</entry>",
                "+\t<entry key=\"javax.validation.constraints.PastOrPresent.message\">Le champ '${label}' doit \u00c3\u00aatre dans le pass\u00c3\u00a9 ou le pr\u00c3\u00a9sent</entry>",
                "+\t<entry key=\"javax.validation.constraints.Positive.message\">Le champ '${label}' doit \u00c3\u00aatre positif</entry>",
                "+\t<entry key=\"javax.validation.constraints.PositiveOrZero.message\">Le champ '${label}' doit \u00c3\u00aatre positif ou z\u00c3\u00a9ro</entry>",
                " \t<entry key=\"javax.validation.constraints.Pattern.message\">Le champ '${label}' doit correspondre \u00c3\u00a0 \"${regexp}\"</entry>"
            ],
            "changed_files": [
                "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.properties",
                "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6499": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6499",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81260044ce93f5903a33dc66c8feb9e0b0fbbd35",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510582573,
            "hunks": 2,
            "message": "WICKET-6496 Duplicate definition of interface JSONString",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONFunction.java b/wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONFunction.java",
                "index 006a798d34..525e16ebbe 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONFunction.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONFunction.java",
                "@@ -18,2 +18,3 @@ package org.apache.wicket.ajax.json;",
                "+import com.github.openjson.JSONString;",
                " import org.apache.wicket.util.io.IClusterable;",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONString.java b/wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONString.java",
                "deleted file mode 100755",
                "index a3d25b6e40..0000000000",
                "--- a/wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONString.java",
                "+++ /dev/null",
                "@@ -1,34 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.wicket.ajax.json;",
                "-/**",
                "- * The <code>JSONString</code> interface allows a <code>toJSONString()</code>",
                "- * method so that a class can change the behavior of",
                "- * <code>JSONObject.toString()</code>, <code>JSONArray.toString()</code>,",
                "- * and <code>JSONWriter.value(</code>Object<code>)</code>. The",
                "- * <code>toJSONString</code> method will be used instead of the default behavior",
                "- * of using the Object's <code>toString()</code> method and quoting the result.",
                "- */",
                "-public interface JSONString {",
                "-    /**",
                "-     * The <code>toJSONString</code> method allows a class to produce its own JSON",
                "-     * serialization.",
                "-     *",
                "-     * @return A strictly syntactically correct JSON text.",
                "-     */",
                "-    String toJSONString();",
                "-}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONFunction.java",
                "wicket-core/src/main/java/org/apache/wicket/ajax/json/JSONString.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6496": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6496",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e3832fd8276d56be8b678d5d0ebbf5ddd1673c4f",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510404419,
            "hunks": 3,
            "message": "[WICKET-6492] minified js/css files are bundled",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 32d9fd84db..4fa7ad5a9a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -636,2 +636,10 @@",
                " \t\t\t</resource>",
                "+\t\t\t<resource>",
                "+\t\t\t\t<filtering>false</filtering>",
                "+\t\t\t\t<directory>${project.build.directory}/generated-res</directory>",
                "+\t\t\t\t<excludes>",
                "+\t\t\t\t\t<exclude>**/*min.min.js</exclude>",
                "+\t\t\t\t\t<exclude>**/*min.min.css</exclude>",
                "+\t\t\t\t</excludes>",
                "+\t\t\t</resource>",
                " \t\t</resources>",
                "@@ -710,2 +718,3 @@",
                " \t\t\t\t\t\t<suffix>.min</suffix>",
                "+\t\t\t\t\t\t<outputDirectory>${project.build.directory}/generated-res</outputDirectory>",
                " \t\t\t\t\t</configuration>",
                "diff --git a/wicket-objectsizeof-agent/src/main/resources/META-INF/MANIFEST.MF b/wicket-objectsizeof-agent/src/main/resources/META-INF/MANIFEST.MF",
                "index 5e589d4be2..7e3da3996d 100644",
                "--- a/wicket-objectsizeof-agent/src/main/resources/META-INF/MANIFEST.MF",
                "+++ b/wicket-objectsizeof-agent/src/main/resources/META-INF/MANIFEST.MF",
                "@@ -1,2 +1 @@",
                "-Manifest-Version: 1.0",
                " Premain-Class: org.apache.wicket.util.instrument.ObjectSizeOfAgent"
            ],
            "changed_files": [
                "pom.xml",
                "wicket-objectsizeof-agent/src/main/resources/META-INF/MANIFEST.MF"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6492": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6492",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "abedb468e52f6db07d1cf689b0fbd426fca36313",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517774894,
            "hunks": 6,
            "message": "WICKET-6525 restored check for onsubmit on form which was lost in WICKET_6348",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java",
                "index 80e01d9744..f7f181b3c2 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java",
                "@@ -209,5 +209,14 @@ public class SubmitLink extends AbstractSubmitLink implements IRequestListener",
                "+\t\t\tStringBuilder script = new StringBuilder();",
                "+\t\t\tif (shouldInvokeJavaScriptFormOnsubmit())",
                "+\t\t\t{",
                "+\t\t\t\tscript.append(String.format(\"var ff=document.getElementById('%s');\", getForm().getMarkupId()));",
                "+\t\t\t\tscript.append(\"if (typeof ff.onsubmit === 'function' && ff.onsubmit() == false) return false;\");",
                "+\t\t\t}",
                "+\t\t\t",
                " \t\t\tCharSequence url = urlForListener(new PageParameters());",
                "-",
                "-\t\t\treturn root.getJsForListenerUrl(url);",
                "+\t\t\tscript.append(root.getJsForListenerUrl(url));",
                "+\t\t\tscript.append(\"return false;\");",
                "+\t\t\t",
                "+\t\t\treturn script;",
                " \t\t}",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.html",
                "index a5c26ca477..e5bfee34e4 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.html",
                "@@ -13,9 +13,9 @@",
                " \tA SubmitLink is a special link that acts like a submit button.",
                "-\tIt can be inside the form component or inside the form component.",
                "+\tIt can be inside the form component or outside the form component.",
                " \t</p>",
                " \t<p>",
                "-\t <form wicket:id=\"form\">",
                "+\t <form wicket:id=\"form\" onsubmit=\"return confirm('Do you really want to submit?');\">",
                " \t  <a wicket:id=\"internal\">Internal SubmitLink</a>",
                " \t </form>",
                "-\t  <a wicket:id=\"external\">External SubmitLink</a>",
                "+\t  <a wicket:id=\"external\">External SubmitLink with confirmation</a>",
                " \t <span wicket:id=\"feedback\">feedbackmessages will be put here</span>",
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.java",
                "index fab473f184..0a96d83d17 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.java",
                "@@ -46,2 +46,8 @@ public class SubmitLinkPage extends WicketExamplePage",
                " \t\t{",
                "+\t\t\t@Override",
                "+\t\t\tprotected boolean shouldInvokeJavaScriptFormOnsubmit()",
                "+\t\t\t{",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+\t\t\t",
                " \t\t\t@Override"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/SubmitLink.java",
                "wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.html",
                "wicket-examples/src/main/java/org/apache/wicket/examples/compref/SubmitLinkPage.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6525": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6525",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "50bc0d61c95ad13cb35f2f1b515c0241f02be756",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510630547,
            "hunks": 1,
            "message": "[WICKET-6496] javadoc clean-up",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/util/string/JavaScriptUtils.java b/wicket-core/src/main/java/org/apache/wicket/core/util/string/JavaScriptUtils.java",
                "index b95c5316df..8e4d042cd1 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/util/string/JavaScriptUtils.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/util/string/JavaScriptUtils.java",
                "@@ -85,3 +85,2 @@ public class JavaScriptUtils",
                " \t * @return Escaped version of the input",
                "-\t * @see org.apache.wicket.ajax.json.JSONObject#quote(String)",
                " \t */"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/util/string/JavaScriptUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6496": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6496",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "273d479fa24783fd8182e2922bf7afee97933283",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517584759,
            "hunks": 7,
            "message": "WICKET-6524: do not require validation-api-2.0.0, keep support",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b784a44d68..c51cf622a7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -177,3 +177,3 @@",
                " \t\t\t\t<artifactId>validation-api</artifactId>",
                "-\t\t\t\t<version>2.0.0.Final</version>",
                "+\t\t\t\t<version>1.1.0.Final</version>",
                " \t\t\t\t<scope>provided</scope>",
                "@@ -534,3 +534,3 @@",
                " \t\t\t\t<artifactId>hibernate-validator</artifactId>",
                "-\t\t\t\t<version>6.0.1.Final</version>",
                "+\t\t\t\t<version>5.4.2.Final</version>",
                " \t\t\t\t<scope>test</scope>",
                "diff --git a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "index 5ae231420b..9cee8f8e3b 100644",
                "--- a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "+++ b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "@@ -5,2 +5,3 @@ import java.util.ArrayList;",
                " import java.util.Arrays;",
                "+import java.util.Collections;",
                " import java.util.HashSet;",
                "@@ -12,4 +13,2 @@ import javax.validation.ConstraintViolation;",
                " import javax.validation.Validator;",
                "-import javax.validation.constraints.NotBlank;",
                "-import javax.validation.constraints.NotEmpty;",
                " import javax.validation.constraints.NotNull;",
                "@@ -63,4 +62,20 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>",
                " \tprivate static final Class<?>[] EMPTY = new Class<?>[0];",
                "-\tprivate static final List<Class<? extends Annotation>> NOT_NULL_ANNOTATIONS =",
                "-\t\t\tArrays.asList(NotNull.class, NotBlank.class, NotEmpty.class);",
                "+\tprivate static final List<Class<? extends Annotation>> NOT_NULL_ANNOTATIONS;",
                "+\tstatic",
                "+\t{",
                "+\t\tList<Class<? extends Annotation>> tmp = new ArrayList<>();",
                "+\t\ttmp.add(NotNull.class);",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\ttmp.add(Class.forName(\"javax.validation.constraints.NotBlank\")",
                "+\t\t\t\t.asSubclass(Annotation.class));",
                "+\t\t\ttmp.add(Class.forName(\"javax.validation.constraints.NotEmpty\")",
                "+\t\t\t\t.asSubclass(Annotation.class));",
                "+\t\t}",
                "+\t\tcatch (ClassNotFoundException e)",
                "+\t\t{",
                "+\t\t\t// ignore exception, we are using bean validation 1.1",
                "+\t\t}",
                "+\t\tNOT_NULL_ANNOTATIONS = Collections.unmodifiableList(tmp);",
                "+\t}",
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 25328bd4c0..550a5f46bb 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -49,2 +49,7 @@",
                " \t\t\t</dependency>",
                "+\t\t\t<dependency>",
                "+\t\t\t\t<groupId>javax.validation</groupId>",
                "+\t\t\t\t<artifactId>validation-api</artifactId>",
                "+\t\t\t\t<version>2.0.0.Final</version>",
                "+\t\t\t</dependency>",
                " \t\t\t<dependency>",
                "@@ -60,2 +65,7 @@",
                " \t\t\t</dependency>",
                "+\t\t\t<dependency>",
                "+\t\t\t\t<groupId>org.hibernate</groupId>",
                "+\t\t\t\t<artifactId>hibernate-validator</artifactId>",
                "+\t\t\t\t<version>6.0.7.Final</version>",
                "+\t\t\t</dependency>",
                " \t\t</dependencies>"
            ],
            "changed_files": [
                "pom.xml",
                "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java",
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6524": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6524",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "36b8402636994fcf73a4e7a56470520d55144030",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517614945,
            "hunks": 3,
            "message": "WICKET-6525 url parameter as hidden field",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "index 1350e25312..376d954e49 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "@@ -530,3 +530,19 @@ public class Form<T> extends WebMarkupContainer",
                " \t\tForm<?> root = getRootForm();",
                "-\t\treturn String.format(\"var f = document.getElementById('%s'); f.action='%s';f.submit();\", root.getMarkupId(), url);",
                "+",
                "+\t\tStringBuilder string = new StringBuilder();",
                "+\t\tstring.append(String.format(\"var f = document.getElementById('%s');\", root.getMarkupId()));",
                "+",
                "+\t\tString action = url.toString();",
                "+\t\tif (root.encodeUrlInHiddenFields()) {",
                "+\t\t\t// parameter must be sent as hidden field, as it would be ignored in the action URL",
                "+\t\t\tint i = action.indexOf('?');",
                "+\t\t\tif (i != -1) {",
                "+\t\t\t\tstring.append(String.format(\"f.getElementsByTagName('input')[0].name = '%s';\", action.substring(i + 1)));",
                "+\t\t\t\taction = action.substring(0, i);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tstring.append(String.format(\"f.action='%s';\", action));",
                "+\t\tstring.append(\"f.submit();\");",
                "+\t\treturn string;",
                " \t}",
                "@@ -1265,13 +1281,2 @@ public class Form<T> extends WebMarkupContainer",
                "-\t/**",
                "-\t * Returns the HiddenFieldId which will be used as the name and id property of the hiddenfield",
                "-\t * that is generated for event dispatches.",
                "-\t * ",
                "-\t * @return The name and id of the hidden field.",
                "-\t */",
                "-\tpublic final String getHiddenFieldId()",
                "-\t{",
                "-\t\treturn getInputNamePrefix() + getMarkupId() + \"_hf_0\";",
                "-\t}",
                "-",
                " \t/**",
                "@@ -1620,3 +1625,4 @@ public class Form<T> extends WebMarkupContainer",
                " \t/**",
                "-\t * ",
                "+\t * Should URL query parameters be encoded in hidden fields. ",
                "+\t *  ",
                " \t * @return true if form's method is 'get'"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6525": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6525",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "634fd247d8c2b0d3cfa01e4679d34fb256191c5f",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517595123,
            "hunks": 5,
            "message": "WICKET-6498 unwrap recursively use inner static classes, added details to javadoc",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "index 1a5da3fec9..c00519f332 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java",
                "@@ -33,3 +33,3 @@ import org.apache.wicket.util.string.Strings;",
                " /**",
                "- * A header response that defers all {@link AbstractJavaScriptReferenceHeaderItem}s.",
                "+ * A header response which defers all {@link AbstractJavaScriptReferenceHeaderItem}s.",
                "  * <p>",
                "@@ -37,3 +37,9 @@ import org.apache.wicket.util.string.Strings;",
                "  * *all* {@link JavaScriptHeaderItem}s are replaced with suitable implementations that",
                "- * delay any execution until {@link AbstractJavaScriptReferenceHeaderItem}s have been loaded.",
                "+ * delay any execution until all deferred {@link AbstractJavaScriptReferenceHeaderItem}s",
                "+ * have been loaded.",
                "+ * <p>",
                "+ * Note: This solution depends on the execution order of JavaScript in the browser:",
                "+ * The 'DOMContentLoaded' event has to be fired <me>after</em> all deferred JavaScript",
                "+ * resources have been loaded. This doesn't seem to be the case in all browsers, thus",
                "+ * this class should be considered experimental.",
                "  * ",
                "@@ -56,3 +62,3 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t{",
                "-\t\tif (item instanceof IWrappedHeaderItem) {",
                "+\t\twhile (item instanceof IWrappedHeaderItem) {",
                " \t\t\titem = ((IWrappedHeaderItem)item).getWrapped();",
                "@@ -79,3 +85,3 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t */",
                "-\tprivate class NativeOnDomContentLoadedHeaderItem extends OnDomReadyHeaderItem",
                "+\tprivate static class NativeOnDomContentLoadedHeaderItem extends OnDomReadyHeaderItem",
                " \t{",
                "@@ -113,3 +119,3 @@ public class JavaScriptDeferHeaderResponse extends DecoratingHeaderResponse",
                " \t */",
                "-\tprivate class NativeOnLoadHeaderItem extends OnLoadHeaderItem",
                "+\tprivate static class NativeOnLoadHeaderItem extends OnLoadHeaderItem",
                " \t{"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/head/filter/JavaScriptDeferHeaderResponse.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6498": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6498",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63a3296c7e56be1d0a41541989834b21f976c363",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514667290,
            "hunks": 7,
            "message": "WICKET-6514 FeedbackCollector(Component) should not collect session-scoped feedback messages",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackCollector.java b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackCollector.java",
                "index 3a3fb2e0a5..2af17f6752 100755",
                "--- a/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackCollector.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackCollector.java",
                "@@ -40,3 +40,3 @@ public class FeedbackCollector",
                " \t * Constructs a collector that will only collect messages from {@link Session}. To collect",
                "-\t * messages from session and components use {@link #FeedbackCollector(Component)}.",
                "+\t * messages from session and components use {@link #FeedbackCollector(Component, boolean)}.",
                " \t */",
                "@@ -44,3 +44,3 @@ public class FeedbackCollector",
                " \t{",
                "-\t\tthis(null);",
                "+\t\tthis(null, true);",
                " \t}",
                "@@ -48,3 +48,3 @@ public class FeedbackCollector",
                " \t/**",
                "-\t * Constructs a collector that will collect messages from {@link Session} and specified",
                "+\t * Constructs a collector that will collect messages from the specified",
                " \t * {@code container}",
                "@@ -55,4 +55,19 @@ public class FeedbackCollector",
                " \tpublic FeedbackCollector(Component component)",
                "+\t{",
                "+\t\tthis(component, false);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Constructs a collector that will collect messages from {@link Session} and specified",
                "+\t * {@code container}",
                "+\t *",
                "+\t * @param component",
                "+\t *            root component from which feedback will be collected",
                "+\t * @param includeSession",
                "+\t *            controls whether or not feedback from the {@link Session} will be collected",
                "+\t */",
                "+\tpublic FeedbackCollector(Component component, boolean includeSession)",
                " \t{",
                " \t\tthis.component = component;",
                "+\t\tthis.includeSession = includeSession;",
                " \t}",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java b/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "index 42e134405f..7360d61810 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "@@ -182,3 +182,3 @@ public class FencedFeedbackPanel extends FeedbackPanel",
                "-\t\t\t\t\treturn new FeedbackCollector(panel.getPage())",
                "+\t\t\t\t\treturn new FeedbackCollector(panel.getPage(), true)",
                " \t\t\t\t\t{",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java b/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java",
                "index b0263c7ee4..fe66d12604 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java",
                "@@ -2222,3 +2222,3 @@ public class BaseWicketTester",
                " \t{",
                "-\t\treturn new FeedbackCollector(getLastRenderedPage()).collect(filter);",
                "+\t\treturn new FeedbackCollector(getLastRenderedPage(), true).collect(filter);",
                " \t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackCollector.java",
                "wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6514": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6514",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cb0b1d6f7f0b49e8c1e724180b7d450da1390850",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510612784,
            "hunks": 0,
            "message": "commit c1a145db252be0ea037ea040e1a04564eb42bebd closes #243",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "243": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 243",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "897573d997880b60fb976d1ec316702e130059cb",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511711990,
            "hunks": 9,
            "message": "[WICKET-6499] russian translation is improved",
            "diff": [
                "diff --git a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml",
                "index 0354b5d8d3..5375e13770 100644",
                "--- a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml",
                "+++ b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml",
                "@@ -31,6 +31,6 @@",
                " \t<entry key=\"javax.validation.constraints.NegativeOrZero.message\">Le champ '${label}' doit \u00c3\u00aatre n\u00c3\u00a9gatif, ou z\u00c3\u00a9ro</entry>",
                "-    <entry key=\"javax.validation.constraints.NotBlank.message\">Le champ '${label}' ne peut pas \u00c3\u00aatre vide</entry>",
                "-    <entry key=\"javax.validation.constraints.NotEmpty.message\">Le champ '${label}' ne peut pas \u00c3\u00aatre vide</entry>",
                "-    <entry key=\"javax.validation.constraints.NotNull.message\">Le champ '${label}' ne doit pas \u00c3\u00aatre null</entry>",
                "-    <entry key=\"javax.validation.constraints.Null.message\">Le champ '${label}' doit \u00c3\u00aatre null</entry>",
                "+\t<entry key=\"javax.validation.constraints.NotBlank.message\">Le champ '${label}' ne peut pas \u00c3\u00aatre vide</entry>",
                "+\t<entry key=\"javax.validation.constraints.NotEmpty.message\">Le champ '${label}' ne peut pas \u00c3\u00aatre vide</entry>",
                "+\t<entry key=\"javax.validation.constraints.NotNull.message\">Le champ '${label}' ne doit pas \u00c3\u00aatre null</entry>",
                "+\t<entry key=\"javax.validation.constraints.Null.message\">Le champ '${label}' doit \u00c3\u00aatre null</entry>",
                " \t<entry key=\"javax.validation.constraints.Past.message\">Le champ '${label}' doit \u00c3\u00aatre dans le pass\u00c3\u00a9</entry>",
                "@@ -48,4 +48,4 @@",
                " \t<entry key=\"org.hibernate.validator.constraints.NotEmpty.message\">Le champ '${label}' ne peut pas \u00c3\u00aatre vide</entry>",
                "-\t<entry key=\"org.hibernate.validator.constraints.SafeHtml.message\">Le champ '${label}' pourrait contenir du contenu HTML dangereux</entry>",
                " \t<entry key=\"org.hibernate.validator.constraints.Range.message\">Le champ '${label}' doit \u00c3\u00aatre entre ${min} et ${max}</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.SafeHtml.message\">Le champ '${label}' pourrait contenir du contenu HTML dangereux</entry>",
                " \t<entry key=\"org.hibernate.validator.constraints.ScriptAssert.message\">Le script \"${script}\" du champ '${label}' n'a pas retourn\u00c3\u00a9 true</entry>",
                "@@ -53,2 +53,2 @@",
                "-</properties>",
                "\\ No newline at end of file",
                "+</properties>",
                "diff --git a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml",
                "index 7acbfe824a..c5d6fb7a79 100644",
                "--- a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml",
                "+++ b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml",
                "@@ -24,5 +24,11 @@",
                " \t<entry key=\"javax.validation.constraints.Digits.message\"><![CDATA['${label}' \u00d1\u0087\u00d0\u00b8\u00d1\u0081\u00d0\u00bb\u00d0\u00be\u00d0\u00b2\u00d0\u00be\u00d0\u00b5 \u00d0\u00b7\u00d0\u00bd\u00d0\u00b0\u00d1\u0087\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d0\u00b5 \u00d0\u00bd\u00d0\u00b5 \u00d1\u0081\u00d0\u00be\u00d0\u00be\u00d1\u0082\u00d0\u00b2\u00d0\u00b5\u00d1\u0082\u00d1\u0081\u00d1\u0082\u00d0\u00b2\u00d1\u0083\u00d0\u00b5\u00d1\u0082 \u00d0\u00be\u00d0\u00b3\u00d1\u0080\u00d0\u00b0\u00d0\u00bd\u00d0\u00b8\u00d1\u0087\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d1\u008f\u00d0\u00bc (<${integer} \u00d0\u00b7\u00d0\u00bd\u00d0\u00b0\u00d0\u00ba\u00d0\u00be\u00d0\u00b2>.<${fraction} \u00d0\u00b7\u00d0\u00bd\u00d0\u00b0\u00d0\u00ba\u00d0\u00be\u00d0\u00b2> expected)]]></entry>",
                "+\t<entry key=\"javax.validation.constraints.Email.message\">'${label}' '${label}' \u00d0\u00bd\u00d0\u00b5\u00d0\u00ba\u00d0\u00be\u00d1\u0080\u00d1\u0080\u00d0\u00b5\u00d0\u00ba\u00d1\u0082\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 \u00d0\u00b0\u00d0\u00b4\u00d1\u0080\u00d0\u00b5\u00d1\u0081 \u00d1\u008d\u00d0\u00bb\u00d0\u00b5\u00d0\u00ba\u00d1\u0082\u00d1\u0080\u00d0\u00be\u00d0\u00bd\u00d0\u00bd\u00d0\u00be\u00d0\u00b9 \u00d0\u00bf\u00d0\u00be\u00d1\u0087\u00d1\u0082\u00d1\u008b</entry>",
                " \t<entry key=\"javax.validation.constraints.Future.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b2 \u00d0\u00b1\u00d1\u0083\u00d0\u00b4\u00d1\u0083\u00d1\u008e\u00d1\u0089\u00d0\u00b5\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.FutureOrPresent.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b2 \u00d0\u00b1\u00d1\u0083\u00d0\u00b4\u00d1\u0083\u00d1\u008e\u00d1\u0089\u00d0\u00b5\u00d0\u00bc \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d0\u00b2 \u00d0\u00bd\u00d0\u00b0\u00d1\u0081\u00d1\u0082\u00d0\u00be\u00d1\u008f\u00d1\u0089\u00d0\u00b5\u00d0\u00bc</entry>",
                " \t<entry key=\"javax.validation.constraints.Max.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u008c\u00d1\u0088\u00d0\u00b5 \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00b2\u00d0\u00bd\u00d0\u00be ${value}</entry>",
                " \t<entry key=\"javax.validation.constraints.Min.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d1\u0088\u00d0\u00b5 \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00b2\u00d0\u00bd\u00d0\u00be ${value}</entry>",
                "+\t<entry key=\"javax.validation.constraints.Negative.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00be\u00d1\u0082\u00d1\u0080\u00d0\u00b8\u00d1\u0086\u00d0\u00b0\u00d1\u0082\u00d0\u00b5\u00d0\u00bb\u00d1\u008c\u00d0\u00bd\u00d1\u008b\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.NegativeOrZero.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00be\u00d1\u0082\u00d1\u0080\u00d0\u00b8\u00d1\u0086\u00d0\u00b0\u00d1\u0082\u00d0\u00b5\u00d0\u00bb\u00d1\u008c\u00d0\u00bd\u00d1\u008b\u00d0\u00bc \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d0\u00bd\u00d1\u0083\u00d0\u00bb\u00d1\u0091\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.NotBlank.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d1\u0083\u00d1\u0081\u00d1\u0082\u00d0\u00be</entry>",
                "+\t<entry key=\"javax.validation.constraints.NotEmpty.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d1\u0083\u00d1\u0081\u00d1\u0082\u00d0\u00be</entry>",
                " \t<entry key=\"javax.validation.constraints.NotNull.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d1\u0083\u00d1\u0081\u00d1\u0082\u00d0\u00be</entry>",
                "@@ -30,2 +36,5 @@",
                " \t<entry key=\"javax.validation.constraints.Past.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b2 \u00d0\u00bf\u00d1\u0080\u00d0\u00be\u00d1\u0088\u00d0\u00bb\u00d0\u00be\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.PastOrPresent.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b2 \u00d0\u00bf\u00d1\u0080\u00d0\u00be\u00d1\u0088\u00d0\u00bb\u00d0\u00be\u00d0\u00bc \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d0\u00bd\u00d0\u00b0\u00d1\u0081\u00d1\u0082\u00d0\u00be\u00d1\u008f\u00d1\u0089\u00d0\u00b5\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.Positive.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d0\u00be\u00d0\u00bb\u00d0\u00be\u00d0\u00b6\u00d0\u00b8\u00d1\u0082\u00d0\u00b5\u00d0\u00bb\u00d1\u008c\u00d0\u00bd\u00d1\u008b\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.PositiveOrZero.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d0\u00be\u00d0\u00bb\u00d0\u00be\u00d0\u00b6\u00d0\u00b8\u00d1\u0082\u00d0\u00b5\u00d0\u00bb\u00d1\u008c\u00d0\u00bd\u00d1\u008b\u00d0\u00bc \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d0\u00bd\u00d1\u0083\u00d0\u00bb\u00d1\u0091\u00d0\u00bc</entry>",
                " \t<entry key=\"javax.validation.constraints.Pattern.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d1\u0081\u00d0\u00be\u00d0\u00be\u00d1\u0082\u00d0\u00b2\u00d0\u00b5\u00d1\u0082\u00d1\u0081\u00d1\u0082\u00d0\u00b2\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d1\u0082\u00d1\u008c \u00d1\u0080\u00d0\u00b5\u00d0\u00b3\u00d1\u0083\u00d0\u00bb\u00d1\u008f\u00d1\u0080\u00d0\u00bd\u00d0\u00be\u00d0\u00bc\u00d1\u0083 \u00d0\u00b2\u00d1\u008b\u00d1\u0080\u00d0\u00b0\u00d0\u00b6\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d1\u008e \"${regexp}\"</entry>"
            ],
            "changed_files": [
                "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_fr.properties.xml",
                "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6499": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6499",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "db2317bf4c08074277294dbe596af841639513de",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514346454,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/WICKET-6512-replaceSession'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6512": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6512",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb41b00035e4089f32c7a9bbe7c53f36929bec89",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511711081,
            "hunks": 1,
            "message": "[WICKET-6499] russian translation is added",
            "diff": [
                "diff --git a/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml",
                "new file mode 100644",
                "index 0000000000..7acbfe824a",
                "--- /dev/null",
                "+++ b/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml",
                "@@ -0,0 +1,44 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+   Licensed to the Apache Software Foundation (ASF) under one or more",
                "+   contributor license agreements.  See the NOTICE file distributed with",
                "+   this work for additional information regarding copyright ownership.",
                "+   The ASF licenses this file to You under the Apache License, Version 2.0",
                "+   (the \"License\"); you may not use this file except in compliance with",
                "+   the License.  You may obtain a copy of the License at",
                "+",
                "+        http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+   Unless required by applicable law or agreed to in writing, software",
                "+   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+   See the License for the specific language governing permissions and",
                "+   limitations under the License.",
                "+-->",
                "+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">",
                "+<properties>",
                "+\t<entry key=\"javax.validation.constraints.AssertFalse.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bb\u00d0\u00be\u00d0\u00b6\u00d0\u00bd\u00d1\u008b\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.AssertTrue.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b8\u00d1\u0081\u00d1\u0082\u00d0\u00b8\u00d0\u00bd\u00d0\u00bd\u00d1\u008b\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.DecimalMax.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u008c\u00d1\u0088\u00d0\u00b5 \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00b2\u00d0\u00bd\u00d0\u00be ${value}</entry>",
                "+\t<entry key=\"javax.validation.constraints.DecimalMin.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d1\u0088\u00d0\u00b5 \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00b2\u00d0\u00bd\u00d0\u00be ${value}</entry>",
                "+\t<entry key=\"javax.validation.constraints.Digits.message\"><![CDATA['${label}' \u00d1\u0087\u00d0\u00b8\u00d1\u0081\u00d0\u00bb\u00d0\u00be\u00d0\u00b2\u00d0\u00be\u00d0\u00b5 \u00d0\u00b7\u00d0\u00bd\u00d0\u00b0\u00d1\u0087\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d0\u00b5 \u00d0\u00bd\u00d0\u00b5 \u00d1\u0081\u00d0\u00be\u00d0\u00be\u00d1\u0082\u00d0\u00b2\u00d0\u00b5\u00d1\u0082\u00d1\u0081\u00d1\u0082\u00d0\u00b2\u00d1\u0083\u00d0\u00b5\u00d1\u0082 \u00d0\u00be\u00d0\u00b3\u00d1\u0080\u00d0\u00b0\u00d0\u00bd\u00d0\u00b8\u00d1\u0087\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d1\u008f\u00d0\u00bc (<${integer} \u00d0\u00b7\u00d0\u00bd\u00d0\u00b0\u00d0\u00ba\u00d0\u00be\u00d0\u00b2>.<${fraction} \u00d0\u00b7\u00d0\u00bd\u00d0\u00b0\u00d0\u00ba\u00d0\u00be\u00d0\u00b2> expected)]]></entry>",
                "+\t<entry key=\"javax.validation.constraints.Future.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b2 \u00d0\u00b1\u00d1\u0083\u00d0\u00b4\u00d1\u0083\u00d1\u008e\u00d1\u0089\u00d0\u00b5\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.Max.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d1\u008c\u00d1\u0088\u00d0\u00b5 \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00b2\u00d0\u00bd\u00d0\u00be ${value}</entry>",
                "+\t<entry key=\"javax.validation.constraints.Min.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b1\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d1\u0088\u00d0\u00b5 \u00d0\u00b8\u00d0\u00bb\u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00b2\u00d0\u00bd\u00d0\u00be ${value}</entry>",
                "+\t<entry key=\"javax.validation.constraints.NotNull.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d1\u0083\u00d1\u0081\u00d1\u0082\u00d0\u00be</entry>",
                "+\t<entry key=\"javax.validation.constraints.Null.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d1\u0083\u00d1\u0081\u00d1\u0082\u00d0\u00be</entry>",
                "+\t<entry key=\"javax.validation.constraints.Past.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00b2 \u00d0\u00bf\u00d1\u0080\u00d0\u00be\u00d1\u0088\u00d0\u00bb\u00d0\u00be\u00d0\u00bc</entry>",
                "+\t<entry key=\"javax.validation.constraints.Pattern.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d1\u0081\u00d0\u00be\u00d0\u00be\u00d1\u0082\u00d0\u00b2\u00d0\u00b5\u00d1\u0082\u00d1\u0081\u00d1\u0082\u00d0\u00b2\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d1\u0082\u00d1\u008c \u00d1\u0080\u00d0\u00b5\u00d0\u00b3\u00d1\u0083\u00d0\u00bb\u00d1\u008f\u00d1\u0080\u00d0\u00bd\u00d0\u00be\u00d0\u00bc\u00d1\u0083 \u00d0\u00b2\u00d1\u008b\u00d1\u0080\u00d0\u00b0\u00d0\u00b6\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d1\u008e \"${regexp}\"</entry>",
                "+\t<entry key=\"javax.validation.constraints.Size.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bc\u00d0\u00b5\u00d0\u00b6\u00d0\u00b4\u00d1\u0083 ${min} \u00d0\u00b8 ${max}</entry>",
                "+\t<entry key=\"javax.validation.constraints.Size.message.String\">'${label}' \u00d0\u00b4\u00d0\u00bb\u00d0\u00b8\u00d0\u00bd\u00d0\u00b0 \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00b0 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bc\u00d0\u00b5\u00d0\u00b6\u00d0\u00b4\u00d1\u0083 ${min} \u00d0\u00b8 ${max}</entry>",
                "+",
                "+\t<entry key=\"org.hibernate.validator.constraints.CreditCardNumber.message\">'${label}' \u00d0\u00bd\u00d0\u00b5\u00d0\u00ba\u00d0\u00be\u00d1\u0080\u00d1\u0080\u00d0\u00b5\u00d0\u00ba\u00d1\u0082\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 \u00d0\u00bd\u00d0\u00be\u00d0\u00bc\u00d0\u00b5\u00d1\u0080 \u00d0\u00ba\u00d1\u0080\u00d0\u00b5\u00d0\u00b4\u00d0\u00b8\u00d1\u0082\u00d0\u00bd\u00d0\u00be\u00d0\u00b9 \u00d0\u00ba\u00d0\u00b0\u00d1\u0080\u00d1\u0082\u00d1\u008b</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.Email.message\">'${label}' \u00d0\u00bd\u00d0\u00b5\u00d0\u00ba\u00d0\u00be\u00d1\u0080\u00d1\u0080\u00d0\u00b5\u00d0\u00ba\u00d1\u0082\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 \u00d0\u00b0\u00d0\u00b4\u00d1\u0080\u00d0\u00b5\u00d1\u0081 \u00d1\u008d\u00d0\u00bb\u00d0\u00b5\u00d0\u00ba\u00d1\u0082\u00d1\u0080\u00d0\u00be\u00d0\u00bd\u00d0\u00bd\u00d0\u00be\u00d0\u00b9 \u00d0\u00bf\u00d0\u00be\u00d1\u0087\u00d1\u0082\u00d1\u008b</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.Length.message\">'${label}' \u00d0\u00b4\u00d0\u00bb\u00d0\u00b8\u00d0\u00bd\u00d0\u00b0 \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00b0 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bc\u00d0\u00b5\u00d0\u00b6\u00d0\u00b4\u00d1\u0083 ${min} \u00d0\u00b8 ${max}</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.NotBlank.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d1\u0083\u00d1\u0081\u00d1\u0082\u00d0\u00be</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.NotEmpty.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082 \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bf\u00d1\u0083\u00d1\u0081\u00d1\u0082\u00d0\u00be</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.Range.message\">'${label}' \u00d0\u00b4\u00d0\u00be\u00d0\u00bb\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d0\u00b1\u00d1\u008b\u00d1\u0082\u00d1\u008c \u00d0\u00bc\u00d0\u00b5\u00d0\u00b6\u00d0\u00b4\u00d1\u0083 ${min} \u00d0\u00b8 ${max}</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.SafeHtml.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082 \u00d1\u0081\u00d0\u00be\u00d0\u00b4\u00d0\u00b5\u00d1\u0080\u00d0\u00b6\u00d0\u00b0\u00d1\u0082\u00d1\u008c \u00d0\u00bd\u00d0\u00b5\u00d0\u00b1\u00d0\u00b5\u00d0\u00b7\u00d0\u00be\u00d0\u00bf\u00d0\u00b0\u00d1\u0081\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 html \u00d1\u0082\u00d1\u008d\u00d0\u00b3\u00d0\u00b8</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.ScriptAssert.message\">'${label}' \u00d1\u0080\u00d0\u00b5\u00d0\u00b7\u00d1\u0083\u00d0\u00bb\u00d1\u008c\u00d1\u0082\u00d0\u00b0\u00d1\u0082 \u00d1\u0081\u00d0\u00ba\u00d1\u0080\u00d0\u00b8\u00d0\u00bf\u00d1\u0082\u00d0\u00be\u00d0\u00b2\u00d0\u00be\u00d0\u00b3\u00d0\u00be \u00d0\u00b2\u00d1\u008b\u00d1\u0080\u00d0\u00b0\u00d0\u00b6\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d0\u00b5 \"${script}\" \u00d0\u00bd\u00d0\u00b5 \u00d1\u008f\u00d0\u00b2\u00d0\u00bb\u00d1\u008f\u00d0\u00b5\u00d1\u0082\u00d1\u0081\u00d1\u008f \u00d0\u00b8\u00d1\u0081\u00d1\u0082\u00d0\u00b8\u00d0\u00bd\u00d0\u00bd\u00d1\u008b\u00d0\u00bc</entry>",
                "+\t<entry key=\"org.hibernate.validator.constraints.URL.message\">'${label}' \u00d0\u00bd\u00d0\u00b5 \u00d1\u008f\u00d0\u00b2\u00d0\u00bb\u00d1\u008f\u00d0\u00b5\u00d1\u0082\u00d1\u0081\u00d1\u008f \u00d0\u00ba\u00d0\u00be\u00d1\u0080\u00d1\u0080\u00d0\u00b5\u00d0\u00ba\u00d1\u0082\u00d0\u00bd\u00d1\u008b\u00d0\u00bc URL</entry>",
                "+</properties>"
            ],
            "changed_files": [
                "wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator_ru.properties.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6499": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6499",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a148e088f13a4ec1cebfc938e24d6215e19576c8",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1512635052,
            "hunks": 18,
            "message": "easier rendering of components, closes #249 setup ThreadLocal independently from filter or tester",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java b/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "index 0cf63bf4fc..d5830578c6 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "@@ -18,2 +18,7 @@ package org.apache.wicket.core.util.string;",
                "+import java.io.Serializable;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+import java.util.function.Supplier;",
                "+",
                " import org.apache.wicket.Application;",
                "@@ -21,2 +26,5 @@ import org.apache.wicket.Component;",
                " import org.apache.wicket.MarkupContainer;",
                "+import org.apache.wicket.Page;",
                "+import org.apache.wicket.RuntimeConfigurationType;",
                "+import org.apache.wicket.Session;",
                " import org.apache.wicket.ThreadContext;",
                "@@ -27,5 +35,13 @@ import org.apache.wicket.markup.MarkupNotFoundException;",
                " import org.apache.wicket.markup.html.WebPage;",
                "+import org.apache.wicket.mock.MockApplication;",
                "+import org.apache.wicket.mock.MockWebRequest;",
                " import org.apache.wicket.protocol.http.BufferedWebResponse;",
                "+import org.apache.wicket.protocol.http.WebApplication;",
                "+import org.apache.wicket.protocol.http.mock.MockServletContext;",
                "+import org.apache.wicket.request.Request;",
                " import org.apache.wicket.request.Response;",
                "+import org.apache.wicket.request.Url;",
                " import org.apache.wicket.request.cycle.RequestCycle;",
                "+import org.apache.wicket.serialize.ISerializer;",
                "+import org.apache.wicket.session.ISessionStore;",
                " import org.apache.wicket.util.resource.IResourceStream;",
                "@@ -37,5 +53,13 @@ import org.slf4j.LoggerFactory;",
                "  * A helper class for rendering components and pages.",
                "- *",
                "- * <p><strong>Note</strong>: {@link #renderComponent(Component)} does <strong>not</strong>",
                "- * support rendering {@link org.apache.wicket.markup.html.panel.Fragment} instances!</p>",
                "+ * <p>",
                "+ * With the static methods of this class components and pages can be rendered on a thread already",
                "+ * processing an {@link Application}.",
                "+ * <p>",
                "+ * If you want to render independently from any web request processing (e.g. generating an email",
                "+ * body on a worker thread), you can create an instance of this class.<br/>",
                "+ * You may use an existing application, create a fresh one or just use the automatically created",
                "+ * mocked application with sensible defaults.",
                "+ * <p>",
                "+ * Note: For performance reasons instances can and should be reused, be sure to call {@link #destroy()} when",
                "+ * they are no longer needed.",
                "  */",
                "@@ -45,4 +69,277 @@ public class ComponentRenderer",
                "+\tprivate Application application;",
                "+",
                "+\t/**",
                "+\t * A renderer using a default mocked application, which",
                "+\t * <ul>",
                "+\t * <li>never shares anything in a session</li>",
                "+\t * <li>never serializes anything</li>",
                "+\t * </ul>",
                "+\t */",
                "+\tpublic ComponentRenderer()",
                "+\t{",
                "+\t\tthis(new MockApplication()",
                "+\t\t{",
                "+\t\t\t@Override",
                "+\t\t\tpublic RuntimeConfigurationType getConfigurationType()",
                "+\t\t\t{",
                "+\t\t\t\treturn RuntimeConfigurationType.DEPLOYMENT;",
                "+\t\t\t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tprotected void init()",
                "+\t\t\t{",
                "+\t\t\t\tsuper.init();",
                "+",
                "+\t\t\t\tsetSessionStoreProvider(() -> new NeverSessionStore());",
                "+\t\t\t\tgetFrameworkSettings().setSerializer(new NeverSerializer());",
                "+\t\t\t}",
                "+\t\t});",
                "+\t}",
                "+",
                " \t/**",
                "-\t * Collects the html generated by the rendering of a page.",
                "+\t * A renderer using the given application.",
                "+\t * <p>",
                "+\t * If the application was not yet initialized - e.g. it is not reused from an already running",
                "+\t * web container - it will be initialized.",
                "+\t * ",
                "+\t * @param application the application to render components in",
                "+\t * ",
                "+\t * @see Application#initApplication()",
                "+\t */",
                "+\tpublic ComponentRenderer(Application application)",
                "+\t{",
                "+\t\tthis.application = application;",
                "+",
                "+\t\tif (application.getName() == null)",
                "+\t\t{",
                "+\t\t\t// not yet initialized",
                "+\t\t\tinThreadContext(this::initApplication);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate void initApplication()",
                "+\t{",
                "+\t\tif (application instanceof WebApplication) {",
                "+\t\t\tWebApplication webApplication = (WebApplication)application;",
                "+\t\t\t",
                "+\t\t\t// WebApplication requires a servlet context",
                "+\t\t\twebApplication.setServletContext(new MockServletContext(application, null));",
                "+\t\t}",
                "+\t\t",
                "+\t\tapplication.setName(\"ComponentRenderer[\" + System.identityHashCode(ComponentRenderer.this) + \"]\");",
                "+\t\tapplication.initApplication();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Destroy this renderer.",
                "+\t */",
                "+\tpublic void destroy()",
                "+\t{",
                "+\t\tinThreadContext(() -> {",
                "+\t\t\tapplication.internalDestroy();",
                "+\t\t\tapplication = null;",
                "+\t\t});",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * ",
                "+\t * Collects the Html generated by rendering a component.",
                "+\t * ",
                "+\t * @param component",
                "+\t *            supplier of the component",
                "+\t * @return html rendered by the panel",
                "+\t */",
                "+\tpublic CharSequence renderComponent(final Supplier<Component> component)",
                "+\t{",
                "+\t\treturn renderPage(() -> new RenderPage(component.get()));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Collects the html generated by rendering a page.",
                "+\t *",
                "+\t * @param page",
                "+\t *            supplier of the page",
                "+\t * @return the html rendered by the panel",
                "+\t */",
                "+\tpublic CharSequence renderPage(final Supplier<? extends Page> page)",
                "+\t{",
                "+\t\treturn inThreadContext(() -> {",
                "+\t\t\tRequest request = newRequest();",
                "+",
                "+\t\t\tBufferedWebResponse response = new BufferedWebResponse(null);",
                "+",
                "+\t\t\tRequestCycle cycle = application.createRequestCycle(request, response);",
                "+",
                "+\t\t\tThreadContext.setRequestCycle(cycle);",
                "+",
                "+\t\t\tpage.get().renderPage();",
                "+",
                "+\t\t\treturn response.getText();",
                "+\t\t});",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Run the given runnable inside a bound {@link ThreadContext}.",
                "+\t * ",
                "+\t * @param runnable",
                "+\t *            runnable",
                "+\t */",
                "+\tprivate void inThreadContext(Runnable runnable)",
                "+\t{",
                "+\t\tinThreadContext(() -> {",
                "+\t\t\trunnable.run();",
                "+\t\t\treturn null;",
                "+\t\t});",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Get the result from the given supplier inside a bound {@link ThreadContext}.",
                "+\t * ",
                "+\t * @param supplier",
                "+\t *            supplier",
                "+\t * @return result of {@link Supplier#get()}",
                "+\t */",
                "+\tprivate <T> T inThreadContext(Supplier<T> supplier)",
                "+\t{",
                "+\t\tThreadContext oldContext = ThreadContext.detach();",
                "+",
                "+\t\ttry",
                "+\t\t{",
                "+\t\t\tThreadContext.setApplication(application);",
                "+",
                "+\t\t\treturn supplier.get();",
                "+\t\t}",
                "+\t\tfinally",
                "+\t\t{",
                "+",
                "+\t\t\tThreadContext.restore(oldContext);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Create a new request, by default a {@link MockWebRequest}.",
                "+\t */",
                "+\tprotected Request newRequest()",
                "+\t{",
                "+\t\treturn new MockWebRequest(Url.parse(\"/\"));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Never serialize.",
                "+\t */",
                "+\tprivate static final class NeverSerializer implements ISerializer",
                "+\t{",
                "+\t\t@Override",
                "+\t\tpublic byte[] serialize(Object object)",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic Object deserialize(byte[] data)",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Never share anything.",
                "+\t */",
                "+\tprivate static class NeverSessionStore implements ISessionStore",
                "+\t{",
                "+",
                "+\t\t@Override",
                "+\t\tpublic Serializable getAttribute(Request request, String name)",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic List<String> getAttributeNames(Request request)",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void setAttribute(Request request, String name, Serializable value)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void removeAttribute(Request request, String name)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void invalidate(Request request)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic String getSessionId(Request request, boolean create)",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic Session lookup(Request request)",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void bind(Request request, Session newSession)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void flushSession(Request request, Session session)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void destroy()",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void registerUnboundListener(UnboundListener listener)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void unregisterUnboundListener(UnboundListener listener)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic Set<UnboundListener> getUnboundListener()",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void registerBindListener(BindListener listener)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic void unregisterBindListener(BindListener listener)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+",
                "+\t\t@Override",
                "+",
                "+\t\tpublic Set<BindListener> getBindListeners()",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Collects the Html generated by the rendering a page.",
                "+\t * <p>",
                "+\t * Important note: Must be called on a thread bound to an application's {@link ThreadContext}!",
                " \t *",
                "@@ -51,2 +348,4 @@ public class ComponentRenderer",
                " \t * @return the html rendered by a page",
                "+\t * ",
                "+\t * @see ThreadContext",
                " \t */",
                "@@ -60,3 +359,4 @@ public class ComponentRenderer",
                "-\t\tRequestCycle tempRequestCycle = application.createRequestCycle(originalRequestCycle.getRequest(), tempResponse);",
                "+\t\tRequestCycle tempRequestCycle = application",
                "+\t\t\t.createRequestCycle(originalRequestCycle.getRequest(), tempResponse);",
                "@@ -76,9 +376,13 @@ public class ComponentRenderer",
                " \t/**",
                "-\t * Collects the html generated by the rendering of a component.",
                "-\t *",
                "+\t * Collects the Html generated by rendering a component.",
                " \t * <p>",
                "-\t * NOTE: this method is meant to render fresh component instances that are disposed after the",
                "-\t * html has been generate. To avoid unwanted side effects do not use it with components that ",
                "-\t * are from an existing hierarchy.",
                "-\t * </p>",
                "+\t * Important notes:",
                "+\t * <ul>",
                "+\t * <li>this method is meant to render fresh component instances that are disposed after the html",
                "+\t * has been generate. To avoid unwanted side effects do not use it with components that are from",
                "+\t * an existing hierarchy.</li>",
                "+\t * <li>does <strong>not</strong> support rendering",
                "+\t * {@link org.apache.wicket.markup.html.panel.Fragment} instances</li>",
                "+\t * <li>must be called on a thread bound to an application's {@link ThreadContext}!</li>",
                "+\t * </ul>",
                " \t *",
                "@@ -87,2 +391,4 @@ public class ComponentRenderer",
                " \t * @return the html rendered by the component",
                "+\t * ",
                "+\t * @see ThreadContext",
                " \t */",
                "@@ -99,6 +405,5 @@ public class ComponentRenderer",
                " \t\t{",
                "-\t\t\tLOGGER.warn(\"Component '{}' with a parent '{}' is passed for standalone rendering. \" +",
                "-\t\t\t\t\t\"It is recommended to render only orphan components because they are not cleaned up/detached\" +",
                "-\t\t\t\t\t\" after the rendering.\",",
                "-\t\t\t\t\tcomponent, oldParent);",
                "+\t\t\tLOGGER.warn(\"Component '{}' with a parent '{}' is passed for standalone rendering. \"",
                "+\t\t\t\t+ \"It is recommended to render only orphan components because they are not cleaned up/detached\"",
                "+\t\t\t\t+ \" after the rendering.\", component, oldParent);",
                " \t\t}",
                "@@ -131,3 +436,6 @@ public class ComponentRenderer",
                " \t */",
                "-\tprivate static class RenderPage extends WebPage implements IMarkupResourceStreamProvider, IMarkupCacheKeyProvider",
                "+\tprivate static class RenderPage extends WebPage",
                "+\t\timplements",
                "+\t\t\tIMarkupResourceStreamProvider,",
                "+\t\t\tIMarkupCacheKeyProvider",
                " \t{",
                "@@ -152,3 +460,4 @@ public class ComponentRenderer",
                " \t\t\t\tcomponentMarkup = component.getMarkup().toString(true);",
                "-\t\t\t} catch (MarkupNotFoundException mnfx)",
                "+\t\t\t}",
                "+\t\t\tcatch (MarkupNotFoundException mnfx)",
                " \t\t\t{",
                "@@ -161,3 +470,4 @@ public class ComponentRenderer",
                " \t\t@Override",
                "-\t\tpublic IResourceStream getMarkupResourceStream(MarkupContainer container, Class<?> containerClass)",
                "+\t\tpublic IResourceStream getMarkupResourceStream(MarkupContainer container,",
                "+\t\t\tClass<?> containerClass)",
                " \t\t{"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "249": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 249",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e545f66c1db7448f1962ca519d0b685c8b8ded9",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1515832568,
            "hunks": 1,
            "message": "[WICKET-6518] missing logback.xml is added",
            "diff": [
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml",
                "new file mode 100644",
                "index 0000000000..f749c749b4",
                "--- /dev/null",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml",
                "@@ -0,0 +1,30 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  Licensed to the Apache Software Foundation (ASF) under one",
                "+  or more contributor license agreements.  See the NOTICE file",
                "+  distributed with this work for additional information",
                "+  regarding copyright ownership.  The ASF licenses this file",
                "+  to you under the Apache License, Version 2.0 (the",
                "+  \"License\"); you may not use this file except in compliance",
                "+  with the License.  You may obtain a copy of the License at",
                "+",
                "+      http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+  Unless required by applicable law or agreed to in writing,",
                "+  software distributed under the License is distributed on an",
                "+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+  KIND, either express or implied.  See the License for the",
                "+  specific language governing permissions and limitations",
                "+  under the License.",
                "+",
                "+-->",
                "+<configuration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
                "+\t<appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">",
                "+\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">",
                "+\t\t\t<pattern>%5p %d{MM-dd HH:mm:ss.SSS } %r %L %c{15} [%.15thread] - %m%n</pattern>",
                "+\t\t</layout>",
                "+\t</appender>",
                "+\t<root level=\"WARN\">",
                "+\t\t<appender-ref ref=\"CONSOLE\" />",
                "+\t</root>",
                "+</configuration>"
            ],
            "changed_files": [
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6518": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6518",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f5c2932c47a6798b3dd361c98bb5756b623eaaf",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516258011,
            "hunks": 21,
            "message": "WICKET-6517 pass ajax target to onError",
            "diff": [
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "index 739930188f..f7a473c21d 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "@@ -20,2 +20,3 @@ import java.util.List;",
                "+import org.apache.commons.fileupload.FileUploadException;",
                " import org.apache.wicket.Component;",
                "@@ -136,2 +137,10 @@ public class FileUploadPage extends BasePage",
                " \t\t\t}",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tprotected void onError(AjaxRequestTarget target, FileUploadException fux)",
                "+\t\t\t{",
                "+\t\t\t\tinfo(fux.getMessage());",
                "+\t\t\t\t",
                "+\t\t\t\ttarget.add(feedback);\t\t\t\t",
                "+\t\t\t}",
                " \t\t});",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "index 9073cd3426..b8806d986e 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java",
                "@@ -24,2 +24,3 @@ import org.apache.commons.fileupload.FileUploadException;",
                " import org.apache.wicket.Component;",
                "+import org.apache.wicket.WicketRuntimeException;",
                " import org.apache.wicket.ajax.AjaxEventBehavior;",
                "@@ -48,6 +49,7 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "-\tprivate static final ResourceReference JS = new PackageResourceReference(AjaxFileDropBehavior.class, \"datatransfer.js\");",
                "+\tprivate static final ResourceReference JS = new PackageResourceReference(",
                "+\t\tAjaxFileDropBehavior.class, \"datatransfer.js\");",
                " \t/**",
                "-\t *  Maximum size of all uploaded files in bytes in a request.",
                "+\t * Maximum size of all uploaded files in bytes in a request.",
                " \t */",
                "@@ -56,3 +58,3 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t/**",
                "-\t *  Maximum size of file of upload in bytes (if there are more than one) in a request.",
                "+\t * Maximum size of file of upload in bytes (if there are more than one) in a request.",
                " \t */",
                "@@ -61,3 +63,3 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \tprivate String parameterName = \"f\";",
                "-\t",
                "+",
                " \tpublic AjaxFileDropBehavior()",
                "@@ -66,3 +68,3 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t}",
                "-\t",
                "+",
                " \t@Override",
                "@@ -71,7 +73,10 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t\tsuper.renderHead(component, response);",
                "-\t\t",
                "+",
                " \t\tresponse.render(JavaScriptHeaderItem.forReference(JS));",
                "-\t\t",
                "-\t\t// default must be prevented for dragover event, otherwise browser will consume the dataTransfer",
                "-\t\tresponse.render(OnDomReadyHeaderItem.forScript(String.format(\"jQuery('#%s').on('dragover', function(e) { e.preventDefault(); });\", component.getMarkupId())));",
                "+",
                "+\t\t// default must be prevented for dragover event, otherwise browser will consume the",
                "+\t\t// dataTransfer",
                "+\t\tresponse.render(OnDomReadyHeaderItem.forScript(",
                "+\t\t\tString.format(\"jQuery('#%s').on('dragover', function(e) { e.preventDefault(); });\",",
                "+\t\t\t\tcomponent.getMarkupId())));",
                " \t}",
                "@@ -88,5 +93,6 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "-\t\tattributes.getDynamicExtraParameters().add(",
                "-\t\t\tString.format(\"return Wicket.DataTransfer.getFilesAsParamArray(attrs.event.originalEvent, '%s');\", parameterName)",
                "-\t\t);",
                "+\t\tattributes.getDynamicExtraParameters()",
                "+\t\t\t.add(String.format(",
                "+\t\t\t\t\"return Wicket.DataTransfer.getFilesAsParamArray(attrs.event.originalEvent, '%s');\",",
                "+\t\t\t\tparameterName));",
                " \t}",
                "@@ -99,4 +105,4 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t\t\tServletWebRequest request = (ServletWebRequest)getComponent().getRequest();",
                "-\t\t\tfinal MultipartServletWebRequest multipartWebRequest = request.newMultipartWebRequest(",
                "-\t\t\t\tgetMaxSize(), getComponent().getPage().getId());",
                "+\t\t\tfinal MultipartServletWebRequest multipartWebRequest = request",
                "+\t\t\t\t.newMultipartWebRequest(getMaxSize(), getComponent().getPage().getId());",
                " \t\t\tmultipartWebRequest.setFileMaxSize(getFileMaxSize());",
                "@@ -106,3 +112,3 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t\t\tgetComponent().getRequestCycle().setRequest(multipartWebRequest);",
                "-\t\t\t",
                "+",
                " \t\t\tArrayList<FileUpload> fileUploads = new ArrayList<>();",
                "@@ -119,3 +125,3 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t\t\t}",
                "-\t\t\t",
                "+",
                " \t\t\tonFileUpload(target, fileUploads);",
                "@@ -124,3 +130,3 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t\t{",
                "-\t\t\tonError(fux);",
                "+\t\t\tonError(target, fux);",
                " \t\t}",
                "@@ -130,4 +136,6 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t{",
                "-\t\tif (maxSize == null) {",
                "-\t\t\tmaxSize = getComponent().getApplication().getApplicationSettings().getDefaultMaximumUploadSize();",
                "+\t\tif (maxSize == null)",
                "+\t\t{",
                "+\t\t\tmaxSize = getComponent().getApplication().getApplicationSettings()",
                "+\t\t\t\t.getDefaultMaximumUploadSize();",
                " \t\t}",
                "@@ -136,2 +144,7 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "+\t/**",
                "+\t * Set the maximum upload size.",
                "+\t * ",
                "+\t * @param maxSize maximum size, must not be null",
                "+\t */",
                " \tpublic void setMaxSize(Bytes maxSize)",
                "@@ -147,2 +160,7 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "+\t/**",
                "+\t * Set an optional maximum size per file.",
                "+\t * ",
                "+\t * @param fileMaxSize maximum size for each uploaded file",
                "+\t */",
                " \tpublic void setFileMaxSize(Bytes fileMaxSize)",
                "@@ -151,3 +169,14 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                " \t}",
                "-\t",
                "+",
                "+\t/**",
                "+\t * Hook method called after a file was uploaded.",
                "+\t * <p>",
                "+\t * Note: {@link #onError(AjaxRequestTarget, FileUploadException)} is called instead when",
                "+\t * uploading failed",
                "+\t * ",
                "+\t * @param target",
                "+\t *            the current request handler",
                "+\t * @param files",
                "+\t *            uploaded files",
                "+\t */",
                " \tprotected void onFileUpload(AjaxRequestTarget target, List<FileUpload> files)",
                "@@ -156,4 +185,15 @@ public class AjaxFileDropBehavior extends AjaxEventBehavior",
                "-\tprotected void onError(FileUploadException fux)",
                "+\t/**",
                "+\t * Hook method called to handle any error during uploading of the file.",
                "+\t * <p>",
                "+\t * Default implementation re-throws the exception. ",
                "+\t *",
                "+\t * @param target",
                "+\t *            the current request handler",
                "+\t * @param e",
                "+\t *            the error that occurred",
                "+\t */",
                "+\tprotected void onError(AjaxRequestTarget target, FileUploadException fux)",
                " \t{",
                "+\t\tthrow new WicketRuntimeException(fux);",
                " \t}"
            ],
            "changed_files": [
                "wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/FileUploadPage.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxFileDropBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6517": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6517",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f6b59effd25a92385417e65724d835c8fdc0459",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507266928,
            "hunks": 10,
            "message": "WICKET-6105 More tests are added some issues are fixed",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "index 5ec27a6c08..8b6f85ddeb 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "@@ -139,14 +139,14 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                " \t\t\t// Get the converted input values",
                "-\t\t\tLocalDate localDate = dateField.getConvertedInput();",
                "+\t\t\tLocalDate date = dateField.getConvertedInput();",
                "+\t\t\tLocalTime time = timeField.getConvertedInput();",
                "-\t\t\tif (localDate == null)",
                "+\t\t\tif (date == null || time == null)",
                " \t\t\t{",
                "-\t\t\t\treturn;",
                "+\t\t\t\tsetConvertedInput(null);",
                "+\t\t\t}",
                "+\t\t\telse",
                "+\t\t\t{",
                "+\t\t\t\t// Use the input to create proper date-time",
                "+\t\t\t\tsetConvertedInput(performConvert(date, time));",
                " \t\t\t}",
                "-",
                "-\t\t\t// Use the input to create a date object with proper timezone",
                "-\t\t\tLocalTime localTime = timeField.getConvertedInput();",
                "-",
                "-\t\t\t// The date will be in the server's timezone",
                "-\t\t\tsetConvertedInput(performConvert(localDate, localTime));",
                " \t\t}",
                "@@ -161,3 +161,5 @@ abstract class AbstractDateTimeField<T extends Temporal> extends FormComponentPa",
                "-\tabstract void prepareObject();",
                "+\tvoid prepareObject() {",
                "+\t\t// no-op by default",
                "+\t}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "index 8ff825a3ec..bc4801c67f 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "@@ -92,13 +92,5 @@ public class DateTimeField extends AbstractDateTimeField<LocalDateTime>",
                "-\t@Override",
                "-\tvoid prepareObject() {",
                "-\t\tif (getModelObject() == null)",
                "-\t\t{",
                "-\t\t\tdateTime = null;",
                "-\t\t}",
                "-\t}",
                "-",
                " \tLocalDate getLocalDate()",
                " \t{",
                "-\t\treturn dateTime.toLocalDate();",
                "+\t\treturn getModelObject() == null ? null : dateTime.toLocalDate();",
                " \t}",
                "@@ -114,3 +106,3 @@ public class DateTimeField extends AbstractDateTimeField<LocalDateTime>",
                " \t{",
                "-\t\treturn dateTime.toLocalTime();",
                "+\t\treturn getModelObject() == null ? null : dateTime.toLocalTime();",
                " \t}",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "index a6814f8c61..eb70e12f4d 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java",
                "@@ -116,7 +116,3 @@ public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                " \t\tZonedDateTime modelObject = getModelObject();",
                "-\t\tif (modelObject == null)",
                "-\t\t{",
                "-\t\t\tdateTime = null;",
                "-\t\t}",
                "-\t\telse",
                "+\t\tif (modelObject != null)",
                " \t\t{",
                "@@ -133,3 +129,3 @@ public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                " \t{",
                "-\t\treturn dateTime.toLocalDate();",
                "+\t\treturn getModelObject() == null ? null : dateTime.toLocalDate();",
                " \t}",
                "@@ -145,3 +141,3 @@ public class ZonedDateTimeField extends AbstractDateTimeField<ZonedDateTime>",
                " \t{",
                "-\t\treturn dateTime.toLocalTime();",
                "+\t\treturn getModelObject() == null ? null : dateTime.toLocalTime();",
                " \t}"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/AbstractDateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/DateTimeField.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/datetime/ZonedDateTimeField.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6105": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6105",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cfd6a55fc9d613d4412a004efcc8e06d6ac1d73d",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1515813536,
            "hunks": 8,
            "message": "[WICKET-6518] Log4j is replaced with logback",
            "diff": [
                "diff --git a/archetypes/quickstart/src/main/resources/META-INF/maven/archetype-metadata.xml b/archetypes/quickstart/src/main/resources/META-INF/maven/archetype-metadata.xml",
                "index 14dcce01ce..d31de29b10 100644",
                "--- a/archetypes/quickstart/src/main/resources/META-INF/maven/archetype-metadata.xml",
                "+++ b/archetypes/quickstart/src/main/resources/META-INF/maven/archetype-metadata.xml",
                "@@ -2,7 +2,2 @@",
                " <archetype-descriptor name=\"quickstart\">",
                "-\t<requiredProperties>",
                "-\t\t<requiredProperty key=\"log4j.properties\">",
                "-\t\t\t<defaultValue>log4j2.xml</defaultValue>",
                "-\t\t</requiredProperty>",
                "-\t</requiredProperties>",
                " \t<fileSets>",
                "@@ -30,3 +25,3 @@",
                " \t\t\t<includes>",
                "-\t\t\t\t<include>__log4j.properties__</include>",
                "+\t\t\t\t<include>**/*.xml</include>",
                " \t\t\t</includes>",
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml b/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "index 395ab9c7e7..a32fb9f811 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "@@ -46,3 +46,3 @@",
                " \t\t<jetty9.version>@jetty.version@</jetty9.version>",
                "-\t\t<log4j.version>@log4j.version@</log4j.version>",
                "+\t\t<logback.version>@logback.version@</logback.version>",
                " \t\t<junit.version>@junit.version@</junit.version>",
                "@@ -67,12 +67,7 @@",
                "-\t\t<!-- LOGGING DEPENDENCIES - LOG4J -->",
                "+\t\t<!-- LOGGING DEPENDENCIES - LOGBACK -->",
                " \t\t<dependency>",
                "-\t\t\t<groupId>org.apache.logging.log4j</groupId>",
                "-\t\t\t<artifactId>log4j-slf4j-impl</artifactId>",
                "-\t\t\t<version>${log4j.version}</version>",
                "-\t\t</dependency>",
                "-\t\t<dependency>",
                "-\t\t\t<groupId>org.apache.logging.log4j</groupId>",
                "-\t\t\t<artifactId>log4j-core</artifactId>",
                "-\t\t\t<version>${log4j.version}</version>",
                "+\t\t\t<groupId>ch.qos.logback</groupId>",
                "+\t\t\t<artifactId>logback-classic</artifactId>",
                "+\t\t\t<version>${logback.version}</version>",
                " \t\t</dependency>",
                "@@ -105,3 +100,3 @@",
                " \t\t\t<artifactId>javax-websocket-server-impl</artifactId>",
                "-\t\t\t<version>${jetty.version}</version>",
                "+\t\t\t<version>${jetty9.version}</version>",
                " \t\t\t<scope>test</scope>",
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__",
                "deleted file mode 100644",
                "index 63e60305fe..0000000000",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__",
                "+++ /dev/null",
                "@@ -1,16 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" configDebug=\"true\">",
                "-\t<Appenders>",
                "-\t\t<Console name=\"CONSOLE\" target=\"SYSTEM_OUT\">",
                "-\t\t\t<PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>",
                "-\t\t</Console>",
                "-\t</Appenders>",
                "-\t<Loggers>",
                "-\t\t<logger name=\"org.apache.wicket\" level=\"INFO\" additivity=\"false\">",
                "-\t\t\t<AppenderRef ref=\"CONSOLE\"/>",
                "-\t\t</logger>",
                "-\t\t<Root level=\"WARN\">",
                "-\t\t\t<AppenderRef ref=\"CONSOLE\"/>",
                "-\t\t</Root>",
                "-\t</Loggers>",
                "-</log4j:configuration>",
                "diff --git a/pom.xml b/pom.xml",
                "index 94d04ca5c1..218e0363aa 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -136,3 +136,3 @@",
                " \t\t<slf4j.version>1.7.25</slf4j.version>",
                "-\t\t<log4j.version>2.9.0</log4j.version>",
                "+\t\t<logback.version>1.2.3</logback.version>",
                " \t\t<hamcrest.version>2.0.0.0</hamcrest.version>"
            ],
            "changed_files": [
                "archetypes/quickstart/src/main/resources/META-INF/maven/archetype-metadata.xml",
                "archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6518": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6518",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d21bfe32525151a235afb3a6288ea11bcfa15329",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1517086966,
            "hunks": 7,
            "message": "WICKET-6503 reintroduced markRendering - so rendered page or part checks hierarchy changes while rendering - stateless pages can be unmarked after beforeRender() in PageAndComponentProvider - prevent multiple onBeforeRender() calls for auto components that are already added",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Component.java b/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "index fc32b09d47..c1ae823452 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Component.java",
                "@@ -2118,2 +2118,19 @@ public abstract class Component",
                "+\t/**",
                "+\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!",
                "+\t * ",
                "+\t * Sets the RENDERING flag and removes the PREPARED_FOR_RENDER flag on component and it's",
                "+\t * children.",
                "+\t * ",
                "+\t * @param setRenderingFlag",
                "+\t *            if this is false only the PREPARED_FOR_RENDER flag is removed from component, the",
                "+\t *            RENDERING flag is not set.",
                "+\t * ",
                "+\t * @see #internalPrepareForRender(boolean)",
                "+\t */",
                "+\tpublic final void markRendering(boolean setRenderingFlag)",
                "+\t{",
                "+\t\tinternalMarkRendering(setRenderingFlag);",
                "+\t}",
                "+",
                " \t/**",
                "@@ -2192,2 +2209,4 @@ public abstract class Component",
                "+\t\tmarkRendering(true);",
                "+",
                " \t\trender();",
                "@@ -3792,2 +3811,3 @@ public abstract class Component",
                " \t{",
                "+\t\tsetRequestFlag(RFLAG_PREPARED_FOR_RENDER, true);",
                " \t\tonBeforeRenderChildren();",
                "@@ -4133,2 +4153,14 @@ public abstract class Component",
                "+\t/**",
                "+\t * @param setRenderingFlag",
                "+\t *            rendering flag",
                "+\t */",
                "+\tvoid internalMarkRendering(boolean setRenderingFlag)",
                "+\t{",
                "+\t\t// WICKET-5460 no longer prepared for render",
                "+\t\tsetRequestFlag(RFLAG_PREPARED_FOR_RENDER, false);",
                "+",
                "+\t\tsetRequestFlag(RFLAG_RENDERING, setRenderingFlag);",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "index aad0aac2b2..038585deea 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "@@ -1696,2 +1696,17 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp",
                "+\t/**",
                "+\t * ",
                "+\t * @see org.apache.wicket.Component#internalMarkRendering(boolean)",
                "+\t */",
                "+\t@Override",
                "+\tvoid internalMarkRendering(boolean setRenderingFlag)",
                "+\t{",
                "+\t\tsuper.internalMarkRendering(setRenderingFlag);",
                "+",
                "+\t\tfor (Component child : this)",
                "+\t\t{",
                "+\t\t\tchild.internalMarkRendering(setRenderingFlag);",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/Page.java b/wicket-core/src/main/java/org/apache/wicket/Page.java",
                "index 9b8dc7f615..ca8a87480c 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/Page.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/Page.java",
                "@@ -997,2 +997,4 @@ public abstract class Page extends MarkupContainer",
                "+\t\t\tmarkRendering(true);",
                "+\t\t\t",
                " \t\t\trender();",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java",
                "index de59ecc6bc..79b8d0dfdd 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java",
                "@@ -172,2 +172,3 @@ public class PageAndComponentProvider extends PageProvider implements IPageAndCo",
                " \t\t\t\t\tp.beforeRender();",
                "+\t\t\t\t\tp.markRendering(false);",
                " \t\t\t\t\tcomponent = page.get(componentPath);"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/Component.java",
                "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "wicket-core/src/main/java/org/apache/wicket/Page.java",
                "wicket-core/src/main/java/org/apache/wicket/core/request/handler/PageAndComponentProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6503": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6503",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e7597f03f2c605badfa114011935cb79a51f2717",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1512667049,
            "hunks": 17,
            "message": "dont search for ajax indicator twice ajaAttributes already contains the id; removed superfluous arguments from JavaScript",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java",
                "index 7164ee4eab..6e9db0f21b 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java",
                "@@ -38,3 +38,2 @@ import org.apache.wicket.request.resource.JavaScriptResourceReference;",
                " import org.apache.wicket.request.resource.ResourceReference;",
                "-import org.apache.wicket.util.string.Strings;",
                "@@ -158,16 +157,4 @@ public abstract class AbstractAutoCompleteBehavior extends AbstractDefaultAjaxBe",
                " \t\tresponse.render(JavaScriptHeaderItem.forReference(AUTOCOMPLETE_JS));",
                "-\t\tfinal String id = getComponent().getMarkupId();",
                "-\t\tString indicatorId = findIndicatorId();",
                "-\t\tif (Strings.isEmpty(indicatorId))",
                "-\t\t{",
                "-\t\t\tindicatorId = \"null\";",
                "-\t\t}",
                "-\t\telse",
                "-\t\t{",
                "-\t\t\tindicatorId = \"'\" + indicatorId + \"'\";",
                "-\t\t}",
                "-",
                "-\t\tString initJS = String.format(\"new Wicket.AutoComplete('%s', %s, %s, %s);\", id,",
                "-\t\t\trenderAjaxAttributes(getComponent(), getAttributes()), constructSettingsJS(), indicatorId);",
                "+\t\tString initJS = String.format(\"new Wicket.AutoComplete(%s, %s);\", renderAjaxAttributes(getComponent()), constructSettingsJS());",
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/wicket-autocomplete.js b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/wicket-autocomplete.js",
                "index 5fa8d2ebca..26f4b8d448 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/wicket-autocomplete.js",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/wicket-autocomplete.js",
                "@@ -37,3 +37,3 @@",
                "-\tWicket.AutoComplete=function(elementId, ajaxAttributes, cfg, indicatorId){",
                "+\tWicket.AutoComplete=function(ajaxAttributes, cfg){",
                " \t\tvar KEY_TAB=9;",
                "@@ -87,3 +87,3 @@",
                "-\t\t\tvar obj = Wicket.$(elementId);",
                "+\t\t\tvar obj = Wicket.$(ajaxAttributes.c);",
                " \t\t\tinitialElement = obj;",
                "@@ -122,3 +122,3 @@",
                "-\t\t\t\t\t\tvar searchTerm = Wicket.$(elementId).value;",
                "+\t\t\t\t\t\tvar searchTerm = Wicket.$(ajaxAttributes.c).value;",
                " \t\t\t\t\t\tif(selected === -1 && searchTerm) {",
                "@@ -294,3 +294,3 @@",
                " \t\tfunction getMenuId() {",
                "-\t\t\treturn elementId+\"-autocomplete\";",
                "+\t\t\treturn ajaxAttributes.c+\"-autocomplete\";",
                " \t\t}",
                "@@ -347,3 +347,3 @@",
                " \t\tfunction actualUpdateChoices() {",
                "-\t\t\tprepareAndExecuteAjaxUpdate(doUpdateChoices, Wicket.$(elementId).value);",
                "+\t\t\tprepareAndExecuteAjaxUpdate(doUpdateChoices, Wicket.$(ajaxAttributes.c).value);",
                " \t\t}",
                "@@ -359,3 +359,3 @@",
                " \t\t\tattrs.pre.push(function (attributes) {",
                "-\t\t\t\tvar input = Wicket.$(elementId);",
                "+\t\t\t\tvar input = Wicket.$(ajaxAttributes.c);",
                " \t\t\t\tif (!input) {",
                "@@ -387,3 +387,3 @@",
                " \t\tfunction showIndicator() {",
                "-\t\t\tWicket.DOM.show(indicatorId);",
                "+\t\t\tWicket.DOM.show(ajaxAttributes.i);",
                " \t\t}",
                "@@ -391,3 +391,3 @@",
                " \t\tfunction hideIndicator() {",
                "-\t\t\tWicket.DOM.hide(indicatorId);",
                "+\t\t\tWicket.DOM.hide(ajaxAttributes.i);",
                " \t\t}",
                "@@ -395,5 +395,5 @@",
                " \t\tfunction showAutoComplete() {",
                "-\t\t\tvar input = Wicket.$(elementId);",
                "+\t\t\tvar input = Wicket.$(ajaxAttributes.c);",
                " \t\t\tvar container = getAutocompleteContainer();",
                "-\t\t\tvar index=getOffsetParentZIndex(elementId);",
                "+\t\t\tvar index=getOffsetParentZIndex(ajaxAttributes.c);",
                " \t\t\tcontainer.show();",
                "@@ -451,3 +451,3 @@",
                " \t\t\tif (triggerChangeOnHide) {",
                "-\t\t\t\tvar input = Wicket.$(elementId);",
                "+\t\t\t\tvar input = Wicket.$(ajaxAttributes.c);",
                " \t\t\t\tjQuery(input).triggerHandler('change');",
                "@@ -589,3 +589,3 @@",
                " \t\t\t// check if the input hasn't been cleared in the meanwhile or has been replaced by ajax",
                "-\t\t\tvar input=Wicket.$(elementId);",
                "+\t\t\tvar input=Wicket.$(ajaxAttributes.c);",
                " \t\t\tif ((input !== initialElement) || (document.activeElement !== input) || !cfg.showListOnEmptyInput && (input.value === null || input.value === \"\")) {",
                "@@ -617,3 +617,3 @@",
                "-\t\t\t\t\tvar input = Wicket.$(elementId);",
                "+\t\t\t\t\tvar input = Wicket.$(ajaxAttributes.c);",
                " \t\t\t\t\tif (value) {",
                "@@ -688,3 +688,3 @@",
                " \t\t\twindow.setTimeout(function() {",
                "-\t\t\t\tvar input=Wicket.$(elementId);",
                "+\t\t\t\tvar input=Wicket.$(ajaxAttributes.c);",
                "@@ -784,3 +784,3 @@",
                " \t\t\tif (sizeAffected) {",
                "-\t\t\t\tcalculateAndSetPopupBounds(Wicket.$(elementId), menu.parentNode);",
                "+\t\t\t\tcalculateAndSetPopupBounds(Wicket.$(ajaxAttributes.c), menu.parentNode);",
                " \t\t\t} // update stuff related to bounds if needed"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java",
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/wicket-autocomplete.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ae7abe4118ed8672f4edf2467eb5d59c5ce34120",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1509640436,
            "hunks": 3,
            "message": "Documentation updated due to Joda Time decommissioning",
            "diff": [
                "diff --git a/wicket-user-guide/src/main/asciidoc/jsintegration/jsintegration_2.adoc b/wicket-user-guide/src/main/asciidoc/jsintegration/jsintegration_2.adoc",
                "index e839d9ab69..205e7d34fa 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/jsintegration/jsintegration_2.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/jsintegration/jsintegration_2.adoc",
                "@@ -55,3 +55,3 @@ Function initCalendar is a simple utility function that sets the initialization",
                "-The initialization code for our component is contained inside its method onInitialize and is the following:",
                "+The component is based on _LocalDateTextField_ which supports pattern-based conversion for dates. The initialization code is the following:",
                "@@ -59,32 +59,42 @@ The initialization code for our component is contained inside its method onIniti",
                " ----",
                "-@Override",
                "-protected void onInitialize() {",
                "-\tsuper.onInitialize();",
                "-\tsetOutputMarkupId(true);",
                "-",
                "-\tdatePattern =  new ResourceModel(\"jqueryDateField.shortDatePattern\", \"mm/dd/yy\")",
                "-                                          .getObject();\t\t",
                "-\tcountryIsoCode = new ResourceModel(\"jqueryDateField.countryIsoCode\", \"en-GB\")                                                             ",
                "-                                          .getObject();",
                "-",
                "-\tPackageResourceReference resourceReference = ",
                "-                            new PackageResourceReference(getClass(), \"calendar.jpg\");",
                "-\t\t",
                "-\turlForIcon = urlFor(resourceReference, new PageParameters());",
                "-\tdateConverter = new PatternDateConverter(datePattern, false);\t",
                "-}\t",
                "-\t",
                "-@Override",
                "-public <Date> IConverter<Date> getConverter(Class<Date> type) {",
                "-\treturn (IConverter<Date>) dateConverter;",
                "-}",
                "+public class JQueryDateField extends LocalDateTextField {",
                "+",
                "+    /**",
                "+     * ",
                "+     */",
                "+    private static final long serialVersionUID = 5088998263851588184L;",
                "+    private final String datePattern;",
                "+    private final String countryIsoCode;",
                "+    private CharSequence urlForIcon;",
                "+    private static final PackageResourceReference JQDatePickerRef = ",
                "+                           new PackageResourceReference(JQueryDateField.class, \"JQDatePicker.js\");",
                "+    ",
                "+    public JQueryDateField(String id, IModel<LocalDate> dateModel, ",
                "+            String datePattern, String countryIsoCode){",
                "+        super(id, dateModel, datePattern);",
                "+        this.datePattern = datePattern;",
                "+        this.countryIsoCode = countryIsoCode;",
                "+    }",
                "+    ",
                "+    @Override",
                "+    protected void onInitialize() {",
                "+        super.onInitialize();",
                "+        ",
                "+        setOutputMarkupId(true);",
                "+        ",
                "+        PackageResourceReference resourceReference = new PackageResourceReference(getClass(), \"calendar.jpg\");",
                "+        ",
                "+        urlForIcon = urlFor(resourceReference, new PageParameters());",
                "+        ",
                "+        add(AttributeModifier.replace(\"size\", \"12\"));",
                "+    }",
                "+...    ",
                " ----",
                "-The first thing to do inside onInitialize is to ensure that our component will have a markup id for its related text field. This is done invoking setOutputMarkupId(true). ",
                "+The first thing we do inside onInitialize is to ensure that our component will have a markup id for its related text field. This is done invoking setOutputMarkupId(true). ",
                "-Next, JQueryDateField tries to retrieve the date format and the ISO language code that must be used as initialization parameters. This is done using class _ResourceModel_ which searches for a given resource in the available bundles. If no value is found for date format or for ISO language code, default values will be used ('mm/dd/yy' and 'en-GB'). ",
                "+Next, to generate the relative URL for the calendar icon we load its file as package resource reference and then we use _Component_'s method urlFor to get the URL value (we have seen this method in <<requestProcessing.adoc#_the_director_of_request_processing_requestcycle,paragraph 9.3.2>>).",
                "-To generate the relative URL for calendar icon, we load it as package resource reference and then we use _Component_'s method urlFor to get the URL value (we have seen this method in <<requestProcessing.adoc#_the_director_of_request_processing_requestcycle,paragraph 9.3.2>>).",
                "+NOTE: as you might have noted in the constructor we need to pass the ISO language code along with the date pattern. The ISO code will be used to generate the JavaScript for the calendar. ",
                "-The last configuration instruction executed inside onInitialize is the instantiation of the custom converter used by our component. This converter is an instance of the built-in class _org.apache.wicket.datetime.PatternDateConvert_ and must use the previously retrieved date format to perform conversion operations. Now to tell our component to use this converter we must return it overriding _FormComponent_'s method _getConverter_. "
            ],
            "changed_files": [
                "wicket-user-guide/src/main/asciidoc/jsintegration/jsintegration_2.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cfde8230b20dc7c4b82f5286e97932db36077964",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508596805,
            "hunks": 59,
            "message": "[maven-release-plugin] prepare release rel/wicket-8.0.0-M8",
            "diff": [
                "diff --git a/archetypes/quickstart/pom.xml b/archetypes/quickstart/pom.xml",
                "index 09ffb23df3..a346a50b10 100644",
                "--- a/archetypes/quickstart/pom.xml",
                "+++ b/archetypes/quickstart/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 3c2657ed2e..3560cb234b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -26,3 +26,3 @@",
                " \t<artifactId>wicket-parent</artifactId>",
                "-\t<version>8.0.0-SNAPSHOT</version>",
                "+\t<version>8.0.0-M8</version>",
                " \t<packaging>pom</packaging>",
                "@@ -84,3 +84,3 @@",
                " \t\t<url>http://git-wip-us.apache.org/repos/asf/wicket/repo?p=wicket.git</url>",
                "-\t\t<tag>HEAD</tag>",
                "+\t\t<tag>rel/wicket-8.0.0-M8</tag>",
                " \t</scm>",
                "@@ -272,3 +272,3 @@",
                " \t\t\t\t<artifactId>wicket</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<!-- It seems there is a bug in Maven (2.2.1 & 3.0.1) and",
                "@@ -281,3 +281,3 @@",
                " \t\t\t\t<artifactId>wicket-auth-roles</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -287,3 +287,3 @@",
                " \t\t\t\t<artifactId>wicket-bean-validation</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -293,3 +293,3 @@",
                " \t\t\t\t<artifactId>wicket-cdi</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -299,3 +299,3 @@",
                " \t\t\t\t<artifactId>wicket-cdi-1.1</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -305,3 +305,3 @@",
                " \t\t\t\t<artifactId>wicket-core</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -317,3 +317,3 @@",
                " \t\t\t\t<artifactId>wicket-devutils</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -328,3 +328,3 @@",
                " \t\t\t\t<artifactId>wicket-extensions</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -334,3 +334,3 @@",
                " \t\t\t\t<artifactId>wicket-guice</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -340,3 +340,3 @@",
                " \t\t\t\t<artifactId>wicket-ioc</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -346,3 +346,3 @@",
                " \t\t\t\t<artifactId>wicket-jmx</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -352,3 +352,3 @@",
                " \t\t\t\t<artifactId>wicket-native-websocket-core</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -358,3 +358,3 @@",
                " \t\t\t\t<artifactId>wicket-native-websocket-javax</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -370,3 +370,3 @@",
                " \t\t\t\t<artifactId>wicket-request</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -376,3 +376,3 @@",
                " \t\t\t\t<artifactId>wicket-spring</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -382,3 +382,3 @@",
                " \t\t\t\t<artifactId>wicket-util</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -388,3 +388,3 @@",
                " \t\t\t\t<artifactId>wicket-velocity</artifactId>",
                "-\t\t\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t\t\t<version>8.0.0-M8</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -394,3 +394,3 @@",
                " \t\t\t\t<artifactId>wicket-metrics</artifactId>",
                "-\t\t\t\t<version>0.4-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.4</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -400,3 +400,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-core</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.3</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -406,3 +406,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-jetty</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.3</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -412,3 +412,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-tomcat</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.3</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -418,3 +418,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-undertow</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.3</version>",
                " \t\t\t\t<type>jar</type>",
                "diff --git a/testing/wicket-arquillian/pom.xml b/testing/wicket-arquillian/pom.xml",
                "index 94613da219..32e792897c 100644",
                "--- a/testing/wicket-arquillian/pom.xml",
                "+++ b/testing/wicket-arquillian/pom.xml",
                "@@ -23,3 +23,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../../pom.xml</relativePath>",
                "@@ -28,2 +28,3 @@",
                " \t<artifactId>wicket-arquillian-testing</artifactId>",
                "+  <version>8.0.0</version>",
                " \t<packaging>war</packaging>",
                "diff --git a/testing/wicket-common-tests/pom.xml b/testing/wicket-common-tests/pom.xml",
                "index a8a3750745..32e6c239d3 100644",
                "--- a/testing/wicket-common-tests/pom.xml",
                "+++ b/testing/wicket-common-tests/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../../pom.xml</relativePath>",
                "diff --git a/testing/wicket-js-tests/pom.xml b/testing/wicket-js-tests/pom.xml",
                "index 3e79a2ccee..83630d2ca8 100644",
                "--- a/testing/wicket-js-tests/pom.xml",
                "+++ b/testing/wicket-js-tests/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../../pom.xml</relativePath>",
                "diff --git a/wicket-auth-roles/pom.xml b/wicket-auth-roles/pom.xml",
                "index 442eb7ee38..83d03a95dc 100644",
                "--- a/wicket-auth-roles/pom.xml",
                "+++ b/wicket-auth-roles/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-bean-validation/pom.xml b/wicket-bean-validation/pom.xml",
                "index c9b345b5da..70c25a1fcd 100644",
                "--- a/wicket-bean-validation/pom.xml",
                "+++ b/wicket-bean-validation/pom.xml",
                "@@ -6,3 +6,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-cdi-1.1/pom.xml b/wicket-cdi-1.1/pom.xml",
                "index 82058a8b14..36f7bc641e 100644",
                "--- a/wicket-cdi-1.1/pom.xml",
                "+++ b/wicket-cdi-1.1/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-cdi/pom.xml b/wicket-cdi/pom.xml",
                "index ffb927d34a..5b9a836ef1 100644",
                "--- a/wicket-cdi/pom.xml",
                "+++ b/wicket-cdi/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-core/pom.xml b/wicket-core/pom.xml",
                "index d9386c5aaa..efe3f41626 100644",
                "--- a/wicket-core/pom.xml",
                "+++ b/wicket-core/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-devutils/pom.xml b/wicket-devutils/pom.xml",
                "index b21d499eeb..1309076bb4 100644",
                "--- a/wicket-devutils/pom.xml",
                "+++ b/wicket-devutils/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 78497801ae..fd3f434159 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/pom.xml b/wicket-experimental/pom.xml",
                "index ff4012ad51..19dcb36e66 100644",
                "--- a/wicket-experimental/pom.xml",
                "+++ b/wicket-experimental/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-http2/pom.xml b/wicket-experimental/wicket-http2/pom.xml",
                "index e287d66b48..63f4a3b73f 100644",
                "--- a/wicket-experimental/wicket-http2/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-experimental</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "@@ -26,3 +26,3 @@",
                " \t<artifactId>wicket-http2</artifactId>",
                "-\t<version>0.3-SNAPSHOT</version>",
                "+\t<version>0.3</version>",
                " \t<packaging>pom</packaging>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "index d8f4f4573d..ada28f5a00 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.3</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "index 792ebe488f..b5ab5241e9 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.3</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "index 0b731459dd..9ebba0ddd9 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.3</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "index a49fdcc239..7c6016e8ee 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.3</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-metrics/pom.xml b/wicket-experimental/wicket-metrics/pom.xml",
                "index 5818409765..270e2be131 100644",
                "--- a/wicket-experimental/wicket-metrics/pom.xml",
                "+++ b/wicket-experimental/wicket-metrics/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-experimental</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "@@ -26,3 +26,3 @@",
                " \t<artifactId>wicket-metrics</artifactId>",
                "-\t<version>0.4-SNAPSHOT</version>",
                "+\t<version>0.4</version>",
                " \t<packaging>bundle</packaging>",
                "diff --git a/wicket-extensions/pom.xml b/wicket-extensions/pom.xml",
                "index 96508cad07..55e618f13b 100644",
                "--- a/wicket-extensions/pom.xml",
                "+++ b/wicket-extensions/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-guice/pom.xml b/wicket-guice/pom.xml",
                "index 6f4011ac8c..a4bba0bbf5 100644",
                "--- a/wicket-guice/pom.xml",
                "+++ b/wicket-guice/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-ioc/pom.xml b/wicket-ioc/pom.xml",
                "index b1f517d91d..2560885f62 100644",
                "--- a/wicket-ioc/pom.xml",
                "+++ b/wicket-ioc/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-jmx/pom.xml b/wicket-jmx/pom.xml",
                "index f1ceb0ab0e..e2e0c085e7 100644",
                "--- a/wicket-jmx/pom.xml",
                "+++ b/wicket-jmx/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-native-websocket/pom.xml b/wicket-native-websocket/pom.xml",
                "index 3c4309baa3..7e84ef92e7 100644",
                "--- a/wicket-native-websocket/pom.xml",
                "+++ b/wicket-native-websocket/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-native-websocket/wicket-native-websocket-core/pom.xml b/wicket-native-websocket/wicket-native-websocket-core/pom.xml",
                "index 6a1e53fd24..19c87522e6 100644",
                "--- a/wicket-native-websocket/wicket-native-websocket-core/pom.xml",
                "+++ b/wicket-native-websocket/wicket-native-websocket-core/pom.xml",
                "@@ -23,3 +23,3 @@",
                "         <artifactId>wicket-native-websocket</artifactId>",
                "-        <version>8.0.0-SNAPSHOT</version>",
                "+        <version>8.0.0-M8</version>",
                "         <relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-native-websocket/wicket-native-websocket-javax/pom.xml b/wicket-native-websocket/wicket-native-websocket-javax/pom.xml",
                "index 27825f36e0..962350ccff 100644",
                "--- a/wicket-native-websocket/wicket-native-websocket-javax/pom.xml",
                "+++ b/wicket-native-websocket/wicket-native-websocket-javax/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-native-websocket</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-objectsizeof-agent/pom.xml b/wicket-objectsizeof-agent/pom.xml",
                "index 65e9dd334c..fcf74689cc 100644",
                "--- a/wicket-objectsizeof-agent/pom.xml",
                "+++ b/wicket-objectsizeof-agent/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-request/pom.xml b/wicket-request/pom.xml",
                "index b6409d44b3..07d5e167d6 100755",
                "--- a/wicket-request/pom.xml",
                "+++ b/wicket-request/pom.xml",
                "@@ -22,3 +22,3 @@",
                "     <groupId>org.apache.wicket</groupId>",
                "-    <version>8.0.0-SNAPSHOT</version>",
                "+    <version>8.0.0-M8</version>",
                "   </parent>",
                "diff --git a/wicket-spring/pom.xml b/wicket-spring/pom.xml",
                "index d545bf9d9c..d8db604c88 100644",
                "--- a/wicket-spring/pom.xml",
                "+++ b/wicket-spring/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-user-guide/pom.xml b/wicket-user-guide/pom.xml",
                "index 90f0f682d4..f5e63f2d89 100644",
                "--- a/wicket-user-guide/pom.xml",
                "+++ b/wicket-user-guide/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-util/pom.xml b/wicket-util/pom.xml",
                "index b9caec1cd0..b21f25fd86 100755",
                "--- a/wicket-util/pom.xml",
                "+++ b/wicket-util/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-velocity/pom.xml b/wicket-velocity/pom.xml",
                "index c7617ee4cc..ee56539b0c 100644",
                "--- a/wicket-velocity/pom.xml",
                "+++ b/wicket-velocity/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket/pom.xml b/wicket/pom.xml",
                "index f69621669b..45fd782e00 100644",
                "--- a/wicket/pom.xml",
                "+++ b/wicket/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-parent</artifactId>",
                "-\t\t<version>8.0.0-SNAPSHOT</version>",
                "+\t\t<version>8.0.0-M8</version>",
                " \t\t<relativePath>../pom.xml</relativePath>"
            ],
            "changed_files": [
                "archetypes/quickstart/pom.xml",
                "pom.xml",
                "testing/wicket-arquillian/pom.xml",
                "testing/wicket-common-tests/pom.xml",
                "testing/wicket-js-tests/pom.xml",
                "wicket-auth-roles/pom.xml",
                "wicket-bean-validation/pom.xml",
                "wicket-cdi-1.1/pom.xml",
                "wicket-cdi/pom.xml",
                "wicket-core/pom.xml",
                "wicket-devutils/pom.xml",
                "wicket-examples/pom.xml",
                "wicket-experimental/pom.xml",
                "wicket-experimental/wicket-http2/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "wicket-experimental/wicket-metrics/pom.xml",
                "wicket-extensions/pom.xml",
                "wicket-guice/pom.xml",
                "wicket-ioc/pom.xml",
                "wicket-jmx/pom.xml",
                "wicket-native-websocket/pom.xml",
                "wicket-native-websocket/wicket-native-websocket-core/pom.xml",
                "wicket-native-websocket/wicket-native-websocket-javax/pom.xml",
                "wicket-objectsizeof-agent/pom.xml",
                "wicket-request/pom.xml",
                "wicket-spring/pom.xml",
                "wicket-user-guide/pom.xml",
                "wicket-util/pom.xml",
                "wicket-velocity/pom.xml",
                "wicket/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-8.0.0-M8"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "54f4db03a5cfd211c8464ca45965ad8a89bfda3c",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514671941,
            "hunks": 123,
            "message": "Update Node.js to 8.9.0 and npm to 5.6.0",
            "diff": [
                "diff --git a/testing/wicket-js-tests/package-lock.json b/testing/wicket-js-tests/package-lock.json",
                "index 1a433768a1..49a71f2cb5 100644",
                "--- a/testing/wicket-js-tests/package-lock.json",
                "+++ b/testing/wicket-js-tests/package-lock.json",
                "@@ -4,2 +4,3 @@",
                "   \"lockfileVersion\": 1,",
                "+  \"requires\": true,",
                "   \"dependencies\": {",
                "@@ -14,2 +15,6 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"mime-types\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.11.tgz\",",
                "+        \"negotiator\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -23,3 +28,6 @@",
                "           \"integrity\": \"sha1-wlnEcb2oCKhdbNGTtDCl+uRHOzw=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"mime-db\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.23.0.tgz\"",
                "+          }",
                "         }",
                "@@ -40,3 +48,6 @@",
                "       \"integrity\": \"sha1-wolQZIBVeBDxSovGLXoG9j7X+VE=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"sprintf-js\": \"https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz\"",
                "+      }",
                "     },",
                "@@ -86,2 +97,5 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"readable-stream\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.0.6.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -95,3 +109,11 @@",
                "           \"integrity\": \"sha1-j5A0HmilPMySh4jaz80Rs265t44=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz\",",
                "+            \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+            \"isarray\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+            \"process-nextick-args\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.6.tgz\",",
                "+            \"string_decoder\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz\",",
                "+            \"util-deprecate\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\"",
                "+          }",
                "         }",
                "@@ -102,3 +124,6 @@",
                "       \"integrity\": \"sha1-OciRjO/1eZ+D+UkqhI9iWt0Mdm8=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"hoek\": \"https://registry.npmjs.org/hoek/-/hoek-2.16.3.tgz\"",
                "+      }",
                "     },",
                "@@ -107,3 +132,7 @@",
                "       \"integrity\": \"sha1-Rr/1ARXUf8mriYVKu4fZgHihCZE=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"balanced-match\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-0.3.0.tgz\",",
                "+        \"concat-map\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -122,3 +151,6 @@",
                "       \"integrity\": \"sha1-yImSRkqOKm7ehpMDdfkrWAd++Xw=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"burrito\": \"https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz\"",
                "+      }",
                "     },",
                "@@ -128,2 +160,6 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"traverse\": \"https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz\",",
                "+        \"uglify-js\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-1.1.1.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -144,3 +180,7 @@",
                "       \"integrity\": \"sha1-MIvur/3ygRkFHvodkyITyRuPkuc=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"camelcase\": \"https://registry.npmjs.org/camelcase/-/camelcase-2.1.1.tgz\",",
                "+        \"map-obj\": \"https://registry.npmjs.org/map-obj/-/map-obj-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -154,3 +194,10 @@",
                "       \"integrity\": \"sha1-UJr7ZwZudJn36zU1x3RFdyri0Bk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ansi-styles\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.1.0.tgz\",",
                "+        \"escape-string-regexp\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.4.tgz\",",
                "+        \"has-ansi\": \"https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz\",",
                "+        \"strip-ansi\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.0.tgz\",",
                "+        \"supports-color\": \"https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -164,3 +211,7 @@",
                "       \"integrity\": \"sha1-Aq1Eo4Cr8nraxebwzdewQ9dMU+M=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"exit\": \"https://registry.npmjs.org/exit/-/exit-0.1.2.tgz\",",
                "+        \"glob\": \"https://registry.npmjs.org/glob/-/glob-3.2.11.tgz\"",
                "+      }",
                "     },",
                "@@ -179,3 +230,6 @@",
                "       \"integrity\": \"sha1-k4NwpXtKUd6ix3wV1cX9+JUWQAk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"delayed-stream\": \"https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -184,3 +238,6 @@",
                "       \"integrity\": \"sha1-nJkJQXbhIkDLItbFFGCYQA/g99Q=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-readlink\": \"https://registry.npmjs.org/graceful-readlink/-/graceful-readlink-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -195,2 +252,7 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+        \"readable-stream\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.0.6.tgz\",",
                "+        \"typedarray\": \"https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -204,3 +266,11 @@",
                "           \"integrity\": \"sha1-j5A0HmilPMySh4jaz80Rs265t44=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz\",",
                "+            \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+            \"isarray\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+            \"process-nextick-args\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.6.tgz\",",
                "+            \"string_decoder\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz\",",
                "+            \"util-deprecate\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\"",
                "+          }",
                "         }",
                "@@ -211,3 +281,9 @@",
                "       \"integrity\": \"sha1-ohNh0/QJnvdhzabcSpc7seuwo00=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+        \"finalhandler\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-0.4.1.tgz\",",
                "+        \"parseurl\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz\",",
                "+        \"utils-merge\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -221,3 +297,6 @@",
                "       \"integrity\": \"sha1-8CQcRXMKn8YyOyBtvzjtx0HQuxA=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"date-now\": \"https://registry.npmjs.org/date-now/-/date-now-0.1.4.tgz\"",
                "+      }",
                "     },",
                "@@ -231,3 +310,6 @@",
                "       \"integrity\": \"sha1-O9/s3GCBR8HGcgL6KR59ylnqo7g=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"boom\": \"https://registry.npmjs.org/boom/-/boom-2.10.1.tgz\"",
                "+      }",
                "     },",
                "@@ -237,2 +319,5 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert-plus\": \"https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -253,3 +338,7 @@",
                "       \"integrity\": \"sha1-nxJLZ1lMk3/3BpMuSmQsyo27/uk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"get-stdin\": \"https://registry.npmjs.org/get-stdin/-/get-stdin-4.0.1.tgz\",",
                "+        \"meow\": \"https://registry.npmjs.org/meow/-/meow-3.7.0.tgz\"",
                "+      }",
                "     },",
                "@@ -258,3 +347,6 @@",
                "       \"integrity\": \"sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ms\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\"",
                "+      }",
                "     },",
                "@@ -293,3 +385,8 @@",
                "       \"integrity\": \"sha1-qyOzH1ZJtvqo49KsvTNEZzZcpvo=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"charm\": \"https://registry.npmjs.org/charm/-/charm-0.1.2.tgz\",",
                "+        \"deep-is\": \"https://registry.npmjs.org/deep-is/-/deep-is-0.1.3.tgz\",",
                "+        \"traverse\": \"https://registry.npmjs.org/traverse/-/traverse-0.6.6.tgz\"",
                "+      }",
                "     },",
                "@@ -299,2 +396,6 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"domelementtype\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz\",",
                "+        \"entities\": \"https://registry.npmjs.org/entities/-/entities-1.1.1.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -320,3 +421,6 @@",
                "       \"integrity\": \"sha1-LeWaCCLVAn+r/28DLCsloqir5zg=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"domelementtype\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz\"",
                "+      }",
                "     },",
                "@@ -325,3 +429,7 @@",
                "       \"integrity\": \"sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"dom-serializer\": \"https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz\",",
                "+        \"domelementtype\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz\"",
                "+      }",
                "     },",
                "@@ -331,3 +439,6 @@",
                "       \"dev\": true,",
                "-      \"optional\": true",
                "+      \"optional\": true,",
                "+      \"requires\": {",
                "+        \"jsbn\": \"https://registry.npmjs.org/jsbn/-/jsbn-0.1.0.tgz\"",
                "+      }",
                "     },",
                "@@ -351,3 +462,6 @@",
                "       \"integrity\": \"sha1-5ntD8+gsluo6WE/+4Ln8MyXYAtk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-arrayish\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz\"",
                "+      }",
                "     },",
                "@@ -392,2 +506,8 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"concat-stream\": \"https://registry.npmjs.org/concat-stream/-/concat-stream-1.5.0.tgz\",",
                "+        \"debug\": \"https://registry.npmjs.org/debug/-/debug-0.7.4.tgz\",",
                "+        \"mkdirp\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.0.tgz\",",
                "+        \"yauzl\": \"https://registry.npmjs.org/yauzl/-/yauzl-2.4.1.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -407,3 +527,6 @@",
                "           \"integrity\": \"sha1-HXMHam35hs2TROFecfzAWkyavxI=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"minimist\": \"0.0.8\"",
                "+          }",
                "         }",
                "@@ -419,3 +542,6 @@",
                "       \"integrity\": \"sha1-i1vL2ewyfFBBv5qwI/1nUPEXfmU=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pend\": \"https://registry.npmjs.org/pend/-/pend-1.2.0.tgz\"",
                "+      }",
                "     },",
                "@@ -424,3 +550,9 @@",
                "       \"integrity\": \"sha1-haF8bFmpRxfSYtYSMNSw6+PUoU0=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+        \"escape-html\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",",
                "+        \"on-finished\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",",
                "+        \"unpipe\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -429,3 +561,7 @@",
                "       \"integrity\": \"sha1-ay6YIrGizgpgq2TWEOzK1TyyTQ8=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"path-exists\": \"https://registry.npmjs.org/path-exists/-/path-exists-2.1.0.tgz\",",
                "+        \"pinkie-promise\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -435,2 +571,5 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob\": \"https://registry.npmjs.org/glob/-/glob-5.0.15.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -440,2 +579,9 @@",
                "           \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inflight\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.4.tgz\",",
                "+            \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+            \"minimatch\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.0.tgz\",",
                "+            \"once\": \"https://registry.npmjs.org/once/-/once-1.3.3.tgz\",",
                "+            \"path-is-absolute\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.0.tgz\"",
                "+          },",
                "           \"dependencies\": {",
                "@@ -444,3 +590,7 @@",
                "               \"integrity\": \"sha1-bLtFIevVHODsCpNr/XZX736bFyo=\",",
                "-              \"dev\": true",
                "+              \"dev\": true,",
                "+              \"requires\": {",
                "+                \"once\": \"https://registry.npmjs.org/once/-/once-1.3.3.tgz\",",
                "+                \"wrappy\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.1.tgz\"",
                "+              }",
                "             },",
                "@@ -454,3 +604,6 @@",
                "               \"integrity\": \"sha1-UjYVelHk8ATBd/s8Un/33Xjw74M=\",",
                "-              \"dev\": true",
                "+              \"dev\": true,",
                "+              \"requires\": {",
                "+                \"brace-expansion\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.3.tgz\"",
                "+              }",
                "             },",
                "@@ -459,3 +612,6 @@",
                "               \"integrity\": \"sha1-suJhVXzkwxTsgwTz+oJmPkKXyiA=\",",
                "-              \"dev\": true",
                "+              \"dev\": true,",
                "+              \"requires\": {",
                "+                \"wrappy\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.1.tgz\"",
                "+              }",
                "             }",
                "@@ -473,3 +629,8 @@",
                "       \"integrity\": \"sha1-BaxrwiIntD5EYfSIFhVUaZ1Pi14=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",",
                "+        \"combined-stream\": \"https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.5.tgz\",",
                "+        \"mime-types\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.10.tgz\"",
                "+      }",
                "     },",
                "@@ -483,3 +644,10 @@",
                "       \"integrity\": \"sha1-muH92UiXeY7at20JGM9C0MMYT6k=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.3.tgz\",",
                "+        \"jsonfile\": \"https://registry.npmjs.org/jsonfile/-/jsonfile-2.3.0.tgz\",",
                "+        \"klaw\": \"https://registry.npmjs.org/klaw/-/klaw-1.2.0.tgz\",",
                "+        \"path-is-absolute\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.0.tgz\",",
                "+        \"rimraf\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.5.2.tgz\"",
                "+      }",
                "     },",
                "@@ -493,3 +661,6 @@",
                "       \"integrity\": \"sha1-nA4cQDCM6AT0eDYYuTf6iPmdUNA=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-property\": \"https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz\"",
                "+      }",
                "     },",
                "@@ -509,2 +680,6 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+        \"minimatch\": \"https://registry.npmjs.org/minimatch/-/minimatch-0.3.0.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -513,3 +688,7 @@",
                "           \"integrity\": \"sha1-J12O2qxPG7MyZHIInnlJyDlGmd0=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"lru-cache\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-2.7.3.tgz\",",
                "+            \"sigmund\": \"https://registry.npmjs.org/sigmund/-/sigmund-1.0.1.tgz\"",
                "+          }",
                "         }",
                "@@ -531,2 +710,20 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"coffee-script\": \"https://registry.npmjs.org/coffee-script/-/coffee-script-1.10.0.tgz\",",
                "+        \"dateformat\": \"https://registry.npmjs.org/dateformat/-/dateformat-1.0.12.tgz\",",
                "+        \"eventemitter2\": \"https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.14.tgz\",",
                "+        \"exit\": \"https://registry.npmjs.org/exit/-/exit-0.1.2.tgz\",",
                "+        \"findup-sync\": \"https://registry.npmjs.org/findup-sync/-/findup-sync-0.3.0.tgz\",",
                "+        \"glob\": \"https://registry.npmjs.org/glob/-/glob-7.0.3.tgz\",",
                "+        \"grunt-cli\": \"https://registry.npmjs.org/grunt-cli/-/grunt-cli-1.2.0.tgz\",",
                "+        \"grunt-known-options\": \"https://registry.npmjs.org/grunt-known-options/-/grunt-known-options-1.1.0.tgz\",",
                "+        \"grunt-legacy-log\": \"https://registry.npmjs.org/grunt-legacy-log/-/grunt-legacy-log-1.0.0.tgz\",",
                "+        \"grunt-legacy-util\": \"https://registry.npmjs.org/grunt-legacy-util/-/grunt-legacy-util-1.0.0.tgz\",",
                "+        \"iconv-lite\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.13.tgz\",",
                "+        \"js-yaml\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-3.5.5.tgz\",",
                "+        \"minimatch\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.0.tgz\",",
                "+        \"nopt\": \"https://registry.npmjs.org/nopt/-/nopt-3.0.6.tgz\",",
                "+        \"path-is-absolute\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.0.tgz\",",
                "+        \"rimraf\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.2.8.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -535,3 +732,10 @@",
                "           \"integrity\": \"sha1-CqI1kxpKlqwT1g/6wvuHe9btT1g=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inflight\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.4.tgz\",",
                "+            \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+            \"minimatch\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.0.tgz\",",
                "+            \"once\": \"https://registry.npmjs.org/once/-/once-1.3.3.tgz\",",
                "+            \"path-is-absolute\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.0.tgz\"",
                "+          }",
                "         },",
                "@@ -540,3 +744,9 @@",
                "           \"integrity\": \"sha1-VisRnrsGndtGSs4oRVAb6Xs1tqg=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"findup-sync\": \"https://registry.npmjs.org/findup-sync/-/findup-sync-0.3.0.tgz\",",
                "+            \"grunt-known-options\": \"https://registry.npmjs.org/grunt-known-options/-/grunt-known-options-1.1.0.tgz\",",
                "+            \"nopt\": \"https://registry.npmjs.org/nopt/-/nopt-3.0.6.tgz\",",
                "+            \"resolve\": \"https://registry.npmjs.org/resolve/-/resolve-1.1.7.tgz\"",
                "+          }",
                "         },",
                "@@ -545,3 +755,6 @@",
                "           \"integrity\": \"sha1-UjYVelHk8ATBd/s8Un/33Xjw74M=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.3.tgz\"",
                "+          }",
                "         },",
                "@@ -557,3 +770,9 @@",
                "       \"integrity\": \"sha1-VisRnrsGndtGSs4oRVAb6Xs1tqg=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"findup-sync\": \"https://registry.npmjs.org/findup-sync/-/findup-sync-0.3.0.tgz\",",
                "+        \"grunt-known-options\": \"https://registry.npmjs.org/grunt-known-options/-/grunt-known-options-1.1.0.tgz\",",
                "+        \"nopt\": \"https://registry.npmjs.org/nopt/-/nopt-3.0.6.tgz\",",
                "+        \"resolve\": \"https://registry.npmjs.org/resolve/-/resolve-1.1.7.tgz\"",
                "+      }",
                "     },",
                "@@ -562,3 +781,14 @@",
                "       \"integrity\": \"sha1-XPkzuRpnOGBEJzwLJERgPNmIebo=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",",
                "+        \"connect\": \"https://registry.npmjs.org/connect/-/connect-3.4.1.tgz\",",
                "+        \"connect-livereload\": \"https://registry.npmjs.org/connect-livereload/-/connect-livereload-0.5.4.tgz\",",
                "+        \"http2\": \"https://registry.npmjs.org/http2/-/http2-3.3.4.tgz\",",
                "+        \"morgan\": \"https://registry.npmjs.org/morgan/-/morgan-1.7.0.tgz\",",
                "+        \"opn\": \"https://registry.npmjs.org/opn/-/opn-4.0.2.tgz\",",
                "+        \"portscanner\": \"https://registry.npmjs.org/portscanner/-/portscanner-1.0.0.tgz\",",
                "+        \"serve-index\": \"https://registry.npmjs.org/serve-index/-/serve-index-1.8.0.tgz\",",
                "+        \"serve-static\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.11.1.tgz\"",
                "+      }",
                "     },",
                "@@ -567,3 +797,8 @@",
                "       \"integrity\": \"sha1-MPQFpR3mVr+m6wKbmkZLn+AqQCo=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"https://registry.npmjs.org/chalk/-/chalk-1.1.1.tgz\",",
                "+        \"hooker\": \"https://registry.npmjs.org/hooker/-/hooker-0.2.3.tgz\",",
                "+        \"jshint\": \"https://registry.npmjs.org/jshint/-/jshint-2.9.2.tgz\"",
                "+      }",
                "     },",
                "@@ -572,3 +807,6 @@",
                "       \"integrity\": \"sha1-b0iFVe2cDIR4hUEDxx7bH8RoXwU=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"nodeunit\": \"https://registry.npmjs.org/nodeunit/-/nodeunit-0.9.1.tgz\"",
                "+      }",
                "     },",
                "@@ -577,3 +815,6 @@",
                "       \"integrity\": \"sha1-du6HzozBV1koArt1RTkvZxzLSVY=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"grunt-lib-phantomjs\": \"https://registry.npmjs.org/grunt-lib-phantomjs/-/grunt-lib-phantomjs-1.0.2.tgz\"",
                "+      }",
                "     },",
                "@@ -588,2 +829,9 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"colors\": \"https://registry.npmjs.org/colors/-/colors-1.1.2.tgz\",",
                "+        \"grunt-legacy-log-utils\": \"https://registry.npmjs.org/grunt-legacy-log-utils/-/grunt-legacy-log-utils-1.0.0.tgz\",",
                "+        \"hooker\": \"https://registry.npmjs.org/hooker/-/hooker-0.2.3.tgz\",",
                "+        \"lodash\": \"https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz\",",
                "+        \"underscore.string\": \"https://registry.npmjs.org/underscore.string/-/underscore.string-3.2.3.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -600,2 +848,6 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"https://registry.npmjs.org/chalk/-/chalk-1.1.1.tgz\",",
                "+        \"lodash\": \"https://registry.npmjs.org/lodash/-/lodash-4.3.0.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -612,2 +864,11 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",",
                "+        \"exit\": \"https://registry.npmjs.org/exit/-/exit-0.1.2.tgz\",",
                "+        \"getobject\": \"https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz\",",
                "+        \"hooker\": \"https://registry.npmjs.org/hooker/-/hooker-0.2.3.tgz\",",
                "+        \"lodash\": \"https://registry.npmjs.org/lodash/-/lodash-4.3.0.tgz\",",
                "+        \"underscore.string\": \"https://registry.npmjs.org/underscore.string/-/underscore.string-3.2.3.tgz\",",
                "+        \"which\": \"https://registry.npmjs.org/which/-/which-1.2.4.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -629,2 +890,9 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"eventemitter2\": \"https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.14.tgz\",",
                "+        \"phantomjs-prebuilt\": \"https://registry.npmjs.org/phantomjs-prebuilt/-/phantomjs-prebuilt-2.1.7.tgz\",",
                "+        \"rimraf\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.5.2.tgz\",",
                "+        \"semver\": \"https://registry.npmjs.org/semver/-/semver-5.1.0.tgz\",",
                "+        \"temporary\": \"https://registry.npmjs.org/temporary/-/temporary-0.0.8.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -640,3 +908,9 @@",
                "       \"integrity\": \"sha1-zcvAgYgmWtEZtqWnyKtw7s+10n0=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"https://registry.npmjs.org/chalk/-/chalk-1.1.1.tgz\",",
                "+        \"commander\": \"https://registry.npmjs.org/commander/-/commander-2.9.0.tgz\",",
                "+        \"is-my-json-valid\": \"https://registry.npmjs.org/is-my-json-valid/-/is-my-json-valid-2.13.1.tgz\",",
                "+        \"pinkie-promise\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -645,3 +919,6 @@",
                "       \"integrity\": \"sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ansi-regex\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -650,3 +927,7 @@",
                "       \"integrity\": \"sha1-eNfL/B5tZjA/55g3NlmEUXsvbuE=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-stream\": \"https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz\",",
                "+        \"pinkie-promise\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -655,3 +936,9 @@",
                "       \"integrity\": \"sha1-B4REvXwWQLD+VA0sm3PVlnjo4cQ=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"boom\": \"https://registry.npmjs.org/boom/-/boom-2.10.1.tgz\",",
                "+        \"cryptiles\": \"https://registry.npmjs.org/cryptiles/-/cryptiles-2.0.5.tgz\",",
                "+        \"hoek\": \"https://registry.npmjs.org/hoek/-/hoek-2.16.3.tgz\",",
                "+        \"sntp\": \"https://registry.npmjs.org/sntp/-/sntp-1.0.9.tgz\"",
                "+      }",
                "     },",
                "@@ -675,3 +962,10 @@",
                "       \"integrity\": \"sha1-mWwosZFRaovoZQGn15dX5ccMEGg=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"domelementtype\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz\",",
                "+        \"domhandler\": \"https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz\",",
                "+        \"domutils\": \"https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz\",",
                "+        \"entities\": \"https://registry.npmjs.org/entities/-/entities-1.0.0.tgz\",",
                "+        \"readable-stream\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz\"",
                "+      }",
                "     },",
                "@@ -680,3 +974,8 @@",
                "       \"integrity\": \"sha1-scs9gmD9jiOGytMYkEWUM3LUghE=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+        \"setprototypeof\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.0.1.tgz\",",
                "+        \"statuses\": \"https://registry.npmjs.org/statuses/-/statuses-1.3.0.tgz\"",
                "+      }",
                "     },",
                "@@ -685,3 +984,8 @@",
                "       \"integrity\": \"sha1-33LiZwZs0Kxn+3at+OE0qPvPkb8=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert-plus\": \"https://registry.npmjs.org/assert-plus/-/assert-plus-0.2.0.tgz\",",
                "+        \"jsprim\": \"https://registry.npmjs.org/jsprim/-/jsprim-1.2.2.tgz\",",
                "+        \"sshpk\": \"https://registry.npmjs.org/sshpk/-/sshpk-1.7.4.tgz\"",
                "+      }",
                "     },",
                "@@ -700,3 +1004,6 @@",
                "       \"integrity\": \"sha1-ji1INIdCEhtKghi3oTfppSBJ3IA=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"repeating\": \"https://registry.npmjs.org/repeating/-/repeating-2.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -705,3 +1012,7 @@",
                "       \"integrity\": \"sha1-bLtFIevVHODsCpNr/XZX736bFyo=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"once\": \"https://registry.npmjs.org/once/-/once-1.3.3.tgz\",",
                "+        \"wrappy\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -715,3 +1026,6 @@",
                "       \"integrity\": \"sha1-hHSREZ/MtftDYhfMc39/qtUPYD8=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-relative\": \"https://registry.npmjs.org/is-relative/-/is-relative-0.1.3.tgz\"",
                "+      }",
                "     },",
                "@@ -725,3 +1039,6 @@",
                "       \"integrity\": \"sha1-VAVy0096wxGfj3bDDLwbHgN6/74=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"builtin-modules\": \"https://registry.npmjs.org/builtin-modules/-/builtin-modules-1.1.1.tgz\"",
                "+      }",
                "     },",
                "@@ -730,3 +1047,6 @@",
                "       \"integrity\": \"sha1-ZDhgPq6+J5OUj/SkJi7I2z1iWXs=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"number-is-nan\": \"https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -735,3 +1055,9 @@",
                "       \"integrity\": \"sha1-1Vd4qC/rawlj/0vhEdXRaE6JBwc=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"generate-function\": \"https://registry.npmjs.org/generate-function/-/generate-function-2.0.0.tgz\",",
                "+        \"generate-object-property\": \"https://registry.npmjs.org/generate-object-property/-/generate-object-property-1.2.0.tgz\",",
                "+        \"jsonpointer\": \"https://registry.npmjs.org/jsonpointer/-/jsonpointer-2.0.0.tgz\",",
                "+        \"xtend\": \"https://registry.npmjs.org/xtend/-/xtend-4.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -781,3 +1107,6 @@",
                "       \"dev\": true,",
                "-      \"optional\": true",
                "+      \"optional\": true,",
                "+      \"requires\": {",
                "+        \"jsbn\": \"https://registry.npmjs.org/jsbn/-/jsbn-0.1.0.tgz\"",
                "+      }",
                "     },",
                "@@ -786,3 +1115,7 @@",
                "       \"integrity\": \"sha1-A3fDgBfKvHMisNH7zSWkkWQfL74=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"argparse\": \"https://registry.npmjs.org/argparse/-/argparse-1.0.7.tgz\",",
                "+        \"esprima\": \"https://registry.npmjs.org/esprima/-/esprima-2.7.2.tgz\"",
                "+      }",
                "     },",
                "@@ -797,3 +1130,13 @@",
                "       \"integrity\": \"sha1-CxLXX46vsII7e/jvuyZbMmJAFhk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"cli\": \"https://registry.npmjs.org/cli/-/cli-0.6.6.tgz\",",
                "+        \"console-browserify\": \"https://registry.npmjs.org/console-browserify/-/console-browserify-1.1.0.tgz\",",
                "+        \"exit\": \"https://registry.npmjs.org/exit/-/exit-0.1.2.tgz\",",
                "+        \"htmlparser2\": \"https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz\",",
                "+        \"lodash\": \"https://registry.npmjs.org/lodash/-/lodash-3.7.0.tgz\",",
                "+        \"minimatch\": \"https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz\",",
                "+        \"shelljs\": \"https://registry.npmjs.org/shelljs/-/shelljs-0.3.0.tgz\",",
                "+        \"strip-json-comments\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-1.0.4.tgz\"",
                "+      }",
                "     },",
                "@@ -822,3 +1165,8 @@",
                "       \"integrity\": \"sha1-8gyQaskqvVjjt5rIvHCkiDJRLaE=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"extsprintf\": \"https://registry.npmjs.org/extsprintf/-/extsprintf-1.0.2.tgz\",",
                "+        \"json-schema\": \"https://registry.npmjs.org/json-schema/-/json-schema-0.2.2.tgz\",",
                "+        \"verror\": \"https://registry.npmjs.org/verror/-/verror-1.3.6.tgz\"",
                "+      }",
                "     },",
                "@@ -837,3 +1185,10 @@",
                "       \"integrity\": \"sha1-lWkFcI1YtLq0wiYbBPWfMcmTdMA=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.3.tgz\",",
                "+        \"parse-json\": \"https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz\",",
                "+        \"pify\": \"https://registry.npmjs.org/pify/-/pify-2.3.0.tgz\",",
                "+        \"pinkie-promise\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.0.tgz\",",
                "+        \"strip-bom\": \"https://registry.npmjs.org/strip-bom/-/strip-bom-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -847,3 +1202,7 @@",
                "       \"integrity\": \"sha1-8omjkvF9K6rPGU0KZzAEOUQzsRU=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"array-find-index\": \"https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.1.tgz\",",
                "+        \"signal-exit\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-2.1.2.tgz\"",
                "+      }",
                "     },",
                "@@ -862,3 +1221,15 @@",
                "       \"integrity\": \"sha1-cstmi0JSKCkKu/qFaJJYcwioAfs=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"camelcase-keys\": \"https://registry.npmjs.org/camelcase-keys/-/camelcase-keys-2.1.0.tgz\",",
                "+        \"decamelize\": \"https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz\",",
                "+        \"loud-rejection\": \"https://registry.npmjs.org/loud-rejection/-/loud-rejection-1.3.0.tgz\",",
                "+        \"map-obj\": \"https://registry.npmjs.org/map-obj/-/map-obj-1.0.1.tgz\",",
                "+        \"minimist\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",",
                "+        \"normalize-package-data\": \"https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.3.5.tgz\",",
                "+        \"object-assign\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.0.1.tgz\",",
                "+        \"read-pkg-up\": \"https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-1.0.1.tgz\",",
                "+        \"redent\": \"https://registry.npmjs.org/redent/-/redent-1.0.0.tgz\",",
                "+        \"trim-newlines\": \"https://registry.npmjs.org/trim-newlines/-/trim-newlines-1.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -877,3 +1248,6 @@",
                "       \"integrity\": \"sha1-uTx8tDYuFtQQcqflRTj7TUMHCDc=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"mime-db\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.22.0.tgz\"",
                "+      }",
                "     },",
                "@@ -882,3 +1256,6 @@",
                "       \"integrity\": \"sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"brace-expansion\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.3.tgz\"",
                "+      }",
                "     },",
                "@@ -893,2 +1270,5 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"minimist\": \"https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -904,3 +1284,10 @@",
                "       \"integrity\": \"sha1-6xDKjlDRq+D409rVwCAdBS2YHGI=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"basic-auth\": \"https://registry.npmjs.org/basic-auth/-/basic-auth-1.0.4.tgz\",",
                "+        \"debug\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+        \"depd\": \"https://registry.npmjs.org/depd/-/depd-1.1.0.tgz\",",
                "+        \"on-finished\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",",
                "+        \"on-headers\": \"https://registry.npmjs.org/on-headers/-/on-headers-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -924,3 +1311,6 @@",
                "       \"integrity\": \"sha1-5VPdQdh2lALDuasy0OculmhAUTk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"tap\": \"https://registry.npmjs.org/tap/-/tap-0.7.1.tgz\"",
                "+      }",
                "     },",
                "@@ -929,3 +1319,6 @@",
                "       \"integrity\": \"sha1-xkZdvwirzU2zWTF/eaxopkayj/k=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"abbrev\": \"https://registry.npmjs.org/abbrev/-/abbrev-1.0.7.tgz\"",
                "+      }",
                "     },",
                "@@ -934,3 +1327,9 @@",
                "       \"integrity\": \"sha1-jZJPFClg4Xd+f/4XBUNjHMfLAt8=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"hosted-git-info\": \"https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.1.4.tgz\",",
                "+        \"is-builtin-module\": \"https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-1.0.0.tgz\",",
                "+        \"semver\": \"https://registry.npmjs.org/semver/-/semver-4.3.6.tgz\",",
                "+        \"validate-npm-package-license\": \"https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -954,3 +1353,6 @@",
                "       \"integrity\": \"sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ee-first\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\"",
                "+      }",
                "     },",
                "@@ -964,3 +1366,6 @@",
                "       \"integrity\": \"sha1-suJhVXzkwxTsgwTz+oJmPkKXyiA=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"wrappy\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -969,3 +1374,7 @@",
                "       \"integrity\": \"sha1-erwi5kTf9jsKltWrfyeQwPAavJU=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"object-assign\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.0.1.tgz\",",
                "+        \"pinkie-promise\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -979,3 +1388,6 @@",
                "       \"integrity\": \"sha1-9ID0BDTvgHQfhGkJn43qGPVaTck=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"error-ex\": \"https://registry.npmjs.org/error-ex/-/error-ex-1.3.0.tgz\"",
                "+      }",
                "     },",
                "@@ -989,3 +1401,6 @@",
                "       \"integrity\": \"sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pinkie-promise\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -999,3 +1414,8 @@",
                "       \"integrity\": \"sha1-WcRPfuSR2nBNpBXaWkBwuk+P5EE=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.3.tgz\",",
                "+        \"pify\": \"https://registry.npmjs.org/pify/-/pify-2.3.0.tgz\",",
                "+        \"pinkie-promise\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -1009,3 +1429,13 @@",
                "       \"integrity\": \"sha1-yQvxuXcvoZeZQzH88/ZwmaloU8o=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"extract-zip\": \"https://registry.npmjs.org/extract-zip/-/extract-zip-1.5.0.tgz\",",
                "+        \"fs-extra\": \"https://registry.npmjs.org/fs-extra/-/fs-extra-0.26.7.tgz\",",
                "+        \"hasha\": \"https://registry.npmjs.org/hasha/-/hasha-2.2.0.tgz\",",
                "+        \"kew\": \"https://registry.npmjs.org/kew/-/kew-0.7.0.tgz\",",
                "+        \"progress\": \"https://registry.npmjs.org/progress/-/progress-1.1.8.tgz\",",
                "+        \"request\": \"https://registry.npmjs.org/request/-/request-2.67.0.tgz\",",
                "+        \"request-progress\": \"https://registry.npmjs.org/request-progress/-/request-progress-2.0.1.tgz\",",
                "+        \"which\": \"https://registry.npmjs.org/which/-/which-1.2.4.tgz\"",
                "+      }",
                "     },",
                "@@ -1024,3 +1454,6 @@",
                "       \"integrity\": \"sha1-TINTjeH25mDCngoTRGhE96foglk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pinkie\": \"https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz\"",
                "+      }",
                "     },",
                "@@ -1030,2 +1463,5 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"https://registry.npmjs.org/async/-/async-0.1.15.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -1061,3 +1497,8 @@",
                "       \"integrity\": \"sha1-9f+qXs0pyzHAR0vKfXVra7KePyg=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"load-json-file\": \"https://registry.npmjs.org/load-json-file/-/load-json-file-1.1.0.tgz\",",
                "+        \"normalize-package-data\": \"https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.3.5.tgz\",",
                "+        \"path-type\": \"https://registry.npmjs.org/path-type/-/path-type-1.1.0.tgz\"",
                "+      }",
                "     },",
                "@@ -1066,3 +1507,7 @@",
                "       \"integrity\": \"sha1-nWPBMnbAZZGNV/ACpX9AobZD+wI=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"find-up\": \"https://registry.npmjs.org/find-up/-/find-up-1.1.2.tgz\",",
                "+        \"read-pkg\": \"https://registry.npmjs.org/read-pkg/-/read-pkg-1.1.0.tgz\"",
                "+      }",
                "     },",
                "@@ -1071,3 +1516,9 @@",
                "       \"integrity\": \"sha1-fPTFTvZI44EwhMY23SB54WbAgdk=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"core-util-is\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz\",",
                "+        \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+        \"isarray\": \"https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz\",",
                "+        \"string_decoder\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz\"",
                "+      }",
                "     },",
                "@@ -1076,3 +1527,7 @@",
                "       \"integrity\": \"sha1-z5Fqsf1fHxbfsggi3W7H9zDCr94=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"indent-string\": \"https://registry.npmjs.org/indent-string/-/indent-string-2.1.0.tgz\",",
                "+        \"strip-indent\": \"https://registry.npmjs.org/strip-indent/-/strip-indent-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1081,3 +1536,6 @@",
                "       \"integrity\": \"sha1-UhTFOpJtNVJwdSf7q0FdvAjQbdo=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-finite\": \"https://registry.npmjs.org/is-finite/-/is-finite-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1086,3 +1544,25 @@",
                "       \"integrity\": \"sha1-ivdHgOK/EeoK6aqWXBHxGv0nJ0I=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"aws-sign2\": \"https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.6.0.tgz\",",
                "+        \"bl\": \"https://registry.npmjs.org/bl/-/bl-1.0.3.tgz\",",
                "+        \"caseless\": \"https://registry.npmjs.org/caseless/-/caseless-0.11.0.tgz\",",
                "+        \"combined-stream\": \"https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.5.tgz\",",
                "+        \"extend\": \"https://registry.npmjs.org/extend/-/extend-3.0.0.tgz\",",
                "+        \"forever-agent\": \"https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz\",",
                "+        \"form-data\": \"https://registry.npmjs.org/form-data/-/form-data-1.0.0-rc4.tgz\",",
                "+        \"har-validator\": \"https://registry.npmjs.org/har-validator/-/har-validator-2.0.6.tgz\",",
                "+        \"hawk\": \"https://registry.npmjs.org/hawk/-/hawk-3.1.3.tgz\",",
                "+        \"http-signature\": \"https://registry.npmjs.org/http-signature/-/http-signature-1.1.1.tgz\",",
                "+        \"is-typedarray\": \"https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz\",",
                "+        \"isstream\": \"https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz\",",
                "+        \"json-stringify-safe\": \"https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz\",",
                "+        \"mime-types\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.10.tgz\",",
                "+        \"node-uuid\": \"https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.7.tgz\",",
                "+        \"oauth-sign\": \"https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.1.tgz\",",
                "+        \"qs\": \"https://registry.npmjs.org/qs/-/qs-5.2.0.tgz\",",
                "+        \"stringstream\": \"https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz\",",
                "+        \"tough-cookie\": \"https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.2.2.tgz\",",
                "+        \"tunnel-agent\": \"https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.2.tgz\"",
                "+      }",
                "     },",
                "@@ -1091,3 +1571,6 @@",
                "       \"integrity\": \"sha1-XTa7V5YcZzqlt4jbyBQf3yO0Tgg=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"throttleit\": \"https://registry.npmjs.org/throttleit/-/throttleit-1.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -1102,2 +1585,5 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob\": \"https://registry.npmjs.org/glob/-/glob-7.0.3.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -1106,3 +1592,10 @@",
                "           \"integrity\": \"sha1-CqI1kxpKlqwT1g/6wvuHe9btT1g=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inflight\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.4.tgz\",",
                "+            \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+            \"minimatch\": \"https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz\",",
                "+            \"once\": \"https://registry.npmjs.org/once/-/once-1.3.3.tgz\",",
                "+            \"path-is-absolute\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.0.tgz\"",
                "+          }",
                "         }",
                "@@ -1113,3 +1606,6 @@",
                "       \"integrity\": \"sha1-NE8FfY1F0zrrxsyCIEZ49pxIV8w=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"bunker\": \"https://registry.npmjs.org/bunker/-/bunker-0.1.2.tgz\"",
                "+      }",
                "     },",
                "@@ -1123,3 +1619,18 @@",
                "       \"integrity\": \"sha1-qVSYQyU5L1FTKndgdg5FlZjIn3o=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+        \"depd\": \"https://registry.npmjs.org/depd/-/depd-1.1.0.tgz\",",
                "+        \"destroy\": \"https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz\",",
                "+        \"encodeurl\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.1.tgz\",",
                "+        \"escape-html\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",",
                "+        \"etag\": \"https://registry.npmjs.org/etag/-/etag-1.7.0.tgz\",",
                "+        \"fresh\": \"https://registry.npmjs.org/fresh/-/fresh-0.3.0.tgz\",",
                "+        \"http-errors\": \"https://registry.npmjs.org/http-errors/-/http-errors-1.5.0.tgz\",",
                "+        \"mime\": \"https://registry.npmjs.org/mime/-/mime-1.3.4.tgz\",",
                "+        \"ms\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\",",
                "+        \"on-finished\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",",
                "+        \"range-parser\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz\",",
                "+        \"statuses\": \"https://registry.npmjs.org/statuses/-/statuses-1.3.0.tgz\"",
                "+      }",
                "     },",
                "@@ -1129,2 +1640,11 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"accepts\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.3.tgz\",",
                "+        \"batch\": \"https://registry.npmjs.org/batch/-/batch-0.5.3.tgz\",",
                "+        \"debug\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+        \"escape-html\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",",
                "+        \"http-errors\": \"https://registry.npmjs.org/http-errors/-/http-errors-1.5.0.tgz\",",
                "+        \"mime-types\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.11.tgz\",",
                "+        \"parseurl\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -1138,3 +1658,6 @@",
                "           \"integrity\": \"sha1-wlnEcb2oCKhdbNGTtDCl+uRHOzw=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"mime-db\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.23.0.tgz\"",
                "+          }",
                "         }",
                "@@ -1145,3 +1668,9 @@",
                "       \"integrity\": \"sha1-1sznaTUF9zPHWd5Xvvwa92wPCAU=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"encodeurl\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.1.tgz\",",
                "+        \"escape-html\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",",
                "+        \"parseurl\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz\",",
                "+        \"send\": \"https://registry.npmjs.org/send/-/send-0.14.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1175,3 +1704,6 @@",
                "       \"integrity\": \"sha1-ZUEYTMkK7qbG57NeJlkIJEPGYZg=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"hoek\": \"https://registry.npmjs.org/hoek/-/hoek-2.16.3.tgz\"",
                "+      }",
                "     },",
                "@@ -1180,3 +1712,6 @@",
                "       \"integrity\": \"sha1-SzBz2TP/UfORLwOsVRlJikFQ20A=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"spdx-license-ids\": \"https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-1.2.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1190,3 +1725,7 @@",
                "       \"integrity\": \"sha1-1SsUtelnB3FECvIlvLVjEirEUvY=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"spdx-exceptions\": \"https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-1.0.4.tgz\",",
                "+        \"spdx-license-ids\": \"https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-1.2.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1205,3 +1744,12 @@",
                "       \"integrity\": \"sha1-rXtH3vymHIQV2WQkO2KwzmD7yjg=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"asn1\": \"https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz\",",
                "+        \"assert-plus\": \"https://registry.npmjs.org/assert-plus/-/assert-plus-0.2.0.tgz\",",
                "+        \"dashdash\": \"https://registry.npmjs.org/dashdash/-/dashdash-1.13.0.tgz\",",
                "+        \"ecc-jsbn\": \"https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz\",",
                "+        \"jodid25519\": \"https://registry.npmjs.org/jodid25519/-/jodid25519-1.0.2.tgz\",",
                "+        \"jsbn\": \"https://registry.npmjs.org/jsbn/-/jsbn-0.1.0.tgz\",",
                "+        \"tweetnacl\": \"https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.3.tgz\"",
                "+      }",
                "     },",
                "@@ -1225,3 +1773,6 @@",
                "       \"integrity\": \"sha1-dRC2ZVZ8qRTMtdfgcnY6yWi+NyQ=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ansi-regex\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.0.0.tgz\"",
                "+      }",
                "     },",
                "@@ -1230,3 +1781,6 @@",
                "       \"integrity\": \"sha1-YhmoVhZSBJHzV4i9vxRHqZx+aw4=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-utf8\": \"https://registry.npmjs.org/is-utf8/-/is-utf8-0.2.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1235,3 +1789,6 @@",
                "       \"integrity\": \"sha1-DHlipq3vp7vUrDZkYKY4VSrhoKI=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"get-stdin\": \"https://registry.npmjs.org/get-stdin/-/get-stdin-4.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1251,2 +1808,14 @@",
                "       \"dev\": true,",
                "+      \"requires\": {",
                "+        \"buffer-equal\": \"https://registry.npmjs.org/buffer-equal/-/buffer-equal-0.0.2.tgz\",",
                "+        \"deep-equal\": \"https://registry.npmjs.org/deep-equal/-/deep-equal-1.0.1.tgz\",",
                "+        \"difflet\": \"https://registry.npmjs.org/difflet/-/difflet-0.2.6.tgz\",",
                "+        \"glob\": \"https://registry.npmjs.org/glob/-/glob-4.5.3.tgz\",",
                "+        \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+        \"mkdirp\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",",
                "+        \"nopt\": \"https://registry.npmjs.org/nopt/-/nopt-3.0.6.tgz\",",
                "+        \"runforcover\": \"https://registry.npmjs.org/runforcover/-/runforcover-0.0.2.tgz\",",
                "+        \"slide\": \"https://registry.npmjs.org/slide/-/slide-1.1.6.tgz\",",
                "+        \"yamlish\": \"https://registry.npmjs.org/yamlish/-/yamlish-0.0.7.tgz\"",
                "+      },",
                "       \"dependencies\": {",
                "@@ -1255,3 +1824,9 @@",
                "           \"integrity\": \"sha1-xstz0yJsHv7wTePFbQEvAzd+4V8=\",",
                "-          \"dev\": true",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inflight\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.4.tgz\",",
                "+            \"inherits\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+            \"minimatch\": \"https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz\",",
                "+            \"once\": \"https://registry.npmjs.org/once/-/once-1.3.3.tgz\"",
                "+          }",
                "         }",
                "@@ -1262,3 +1837,6 @@",
                "       \"integrity\": \"sha1-oYqYHSi6jKNgJ/s8MFOMPst0CsA=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"package\": \"https://registry.npmjs.org/package/-/package-1.0.1.tgz\"",
                "+      }",
                "     },",
                "@@ -1328,3 +1906,7 @@",
                "       \"integrity\": \"sha1-KAS6vnEq0zeUWaz74kdGqywwP7w=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"spdx-correct\": \"https://registry.npmjs.org/spdx-correct/-/spdx-correct-1.0.2.tgz\",",
                "+        \"spdx-expression-parse\": \"https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-1.0.2.tgz\"",
                "+      }",
                "     },",
                "@@ -1333,3 +1915,6 @@",
                "       \"integrity\": \"sha1-z/XfEpRtKX0rqu+qJoniW+AcAFw=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"extsprintf\": \"https://registry.npmjs.org/extsprintf/-/extsprintf-1.0.2.tgz\"",
                "+      }",
                "     },",
                "@@ -1338,3 +1923,7 @@",
                "       \"integrity\": \"sha1-FVf5YIBgTlsRs1meufRbUKnv1yI=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-absolute\": \"https://registry.npmjs.org/is-absolute/-/is-absolute-0.1.7.tgz\",",
                "+        \"isexe\": \"https://registry.npmjs.org/isexe/-/isexe-1.1.2.tgz\"",
                "+      }",
                "     },",
                "@@ -1358,3 +1947,6 @@",
                "       \"integrity\": \"sha1-lSj0QtqxsihOWLQ3m7GU4i4MQAU=\",",
                "-      \"dev\": true",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"fd-slicer\": \"https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.0.1.tgz\"",
                "+      }",
                "     }",
                "diff --git a/testing/wicket-js-tests/pom.xml b/testing/wicket-js-tests/pom.xml",
                "index 3e79a2ccee..01ba33c991 100644",
                "--- a/testing/wicket-js-tests/pom.xml",
                "+++ b/testing/wicket-js-tests/pom.xml",
                "@@ -65,3 +65,3 @@",
                " \t\t\t\t\t\t<artifactId>frontend-maven-plugin</artifactId>",
                "-\t\t\t\t\t\t<version>1.4</version>",
                "+\t\t\t\t\t\t<version>1.6</version>",
                " \t\t\t\t\t\t<executions>",
                "@@ -74,4 +74,4 @@",
                " \t\t\t\t\t\t\t\t<configuration>",
                "-\t\t\t\t\t\t\t\t\t<npmVersion>5.0.0</npmVersion>",
                "-\t\t\t\t\t\t\t\t\t<nodeVersion>v8.0.0</nodeVersion>",
                "+\t\t\t\t\t\t\t\t\t<npmVersion>5.6.0</npmVersion>",
                "+\t\t\t\t\t\t\t\t\t<nodeVersion>v8.9.0</nodeVersion>",
                " \t\t\t\t\t\t\t\t</configuration>"
            ],
            "changed_files": [
                "testing/wicket-js-tests/package-lock.json",
                "testing/wicket-js-tests/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fe9fa67fc6015bb41521b25775e5dcf8cb4a0b4e",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514193667,
            "hunks": 3,
            "message": "Update links to HTTPS in Quickstart application",
            "diff": [
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html",
                "index 600a957399..505ed1c0f9 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html",
                "@@ -5,3 +5,3 @@",
                " \t\t<title>Apache Wicket Quickstart</title>",
                "-\t\t<link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular,bold' rel='stylesheet' type='text/css' />",
                "+\t\t<link href='https://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular,bold' rel='stylesheet' type='text/css' />",
                " \t\t<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" media=\"screen\" title=\"Stylesheet\" />",
                "@@ -31,5 +31,4 @@",
                " \t\t\t<ul>",
                "-\t\t\t\t<li>work through <a href=\"http://wicket.apache.org/learn/examples\" target=\"_blank\" title=\"Hello world and friends\">some examples</a></li>",
                "-\t\t\t\t<li>read <a href=\"http://wicket.apache.org/learn/books\" target=\"_blank\" title=\"Books about Wicket in English, German and Japanese\">some books</a></li>",
                "-\t\t\t\t<li>find <a href=\"http://wicket.apache.org/learn/projects\" target=\"_blank\" title=\"Additional projects, components and libraries\">additional components, projects and libraries</a></li>",
                "+\t\t\t\t<li>work through <a href=\"https://wicket.apache.org/learn/examples\" target=\"_blank\" title=\"Hello world and friends\">some examples</a></li>",
                "+\t\t\t\t<li>read <a href=\"https://wicket.apache.org/learn/books\" target=\"_blank\" title=\"Books about Wicket in English, German and Japanese\">some books</a></li>",
                " \t\t\t</ul>",
                "@@ -42,3 +41,3 @@",
                " \t\t\t\t<li><a href=\"http://wicket-users.markmail.org/\" target=\"_blank\" title=\"Search the mailing list archives\">search</a> our mailing list archives</li>",
                "-\t\t\t\t<li>ask a question on the <a href=\"http://wicket.apache.org/help/email.html\">users list</a></li>",
                "+\t\t\t\t<li>ask a question on the <a href=\"https://wicket.apache.org/help/email.html\">users list</a></li>",
                " \t\t\t</ul>"
            ],
            "changed_files": [
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "19c8998e99754abb0138ff1cc33bd0a366034444",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1514931924,
            "hunks": 1,
            "message": "provide more information on read only LambdaModel setObject exception",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/model/LambdaModel.java b/wicket-core/src/main/java/org/apache/wicket/model/LambdaModel.java",
                "index 7806ae3a72..96d4f204b7 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/model/LambdaModel.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/model/LambdaModel.java",
                "@@ -157,2 +157,7 @@ public abstract class LambdaModel<T> implements IModel<T>",
                "+\t\t\t@Override",
                "+\t\t\tpublic void setObject(R r) {",
                "+\t\t\t\tthrow new UnsupportedOperationException(\"setObject(Object) on \" + target + \" is not supported\");",
                "+\t\t\t}",
                "+",
                " \t\t\t@Override"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/model/LambdaModel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0769a6002a1f45a6eaba3a8429f21c11185f9366",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1509567510,
            "hunks": 1,
            "message": "Fix class object memory leak by enabing cache.",
            "diff": [
                "diff --git a/wicket-ioc/src/main/java/org/apache/wicket/proxy/objenesis/ObjenesisProxyFactory.java b/wicket-ioc/src/main/java/org/apache/wicket/proxy/objenesis/ObjenesisProxyFactory.java",
                "index 686acac4e2..041faafd5c 100644",
                "--- a/wicket-ioc/src/main/java/org/apache/wicket/proxy/objenesis/ObjenesisProxyFactory.java",
                "+++ b/wicket-ioc/src/main/java/org/apache/wicket/proxy/objenesis/ObjenesisProxyFactory.java",
                "@@ -41,3 +41,2 @@ public class ObjenesisProxyFactory",
                " \t\te.setNamingPolicy(namingPolicy);",
                "-\t\te.setUseCache(false);"
            ],
            "changed_files": [
                "wicket-ioc/src/main/java/org/apache/wicket/proxy/objenesis/ObjenesisProxyFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "196c33c8b7f03c6d1f3111e0bb1f5d15645f2206",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511265374,
            "hunks": 2,
            "message": "Jetty dependencies scope overridden to run wicket-examples with Eclipse Jetty Integration plugin",
            "diff": [
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 183cb3ffd9..20e6f47e6f 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -66,2 +66,3 @@",
                "             <artifactId>jetty-server</artifactId>",
                "+            <scope>runtime</scope>",
                "         </dependency>",
                "@@ -70,2 +71,3 @@",
                " \t\t\t<artifactId>jetty-webapp</artifactId>",
                "+            <scope>runtime</scope>",
                " \t\t</dependency>"
            ],
            "changed_files": [
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1617e2b136e8b9c050b6c590d6ff1773a2b67d29",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516269296,
            "hunks": 2,
            "message": "Upgrade eclipse settings for Java 8",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 94d04ca5c1..ead585cfd6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -323,3 +323,3 @@",
                " \t\t\t\t<artifactId>wicket-eclipse-settings</artifactId>",
                "-\t\t\t\t<version>3</version>",
                "+\t\t\t\t<version>4</version>",
                " \t\t\t</dependency>",
                "@@ -789,3 +789,3 @@",
                " \t\t\t\t            <artifactId>wicket-eclipse-settings</artifactId>",
                "-\t\t\t\t            <version>3</version>",
                "+\t\t\t\t            <version>4</version>",
                " \t\t\t\t        </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3b136d6c809461260393a4d2816dc2334e4867d6",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511955882,
            "hunks": 4,
            "message": "Added a constructor to use custom busy indicator (as ResourceReference)",
            "diff": [
                "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxIndicatorAppender.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxIndicatorAppender.java",
                "index 5e9cde1810..d0fee97ebd 100644",
                "--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxIndicatorAppender.java",
                "+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxIndicatorAppender.java",
                "@@ -28,2 +28,3 @@ import org.apache.wicket.request.cycle.RequestCycle;",
                " import org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler;",
                "+import org.apache.wicket.request.resource.ResourceReference;",
                "@@ -55,2 +56,4 @@ public class AjaxIndicatorAppender extends Behavior",
                "+\tprivate final ResourceReference indicator;",
                "+",
                " \t/**",
                "@@ -60,2 +63,14 @@ public class AjaxIndicatorAppender extends Behavior",
                " \t{",
                "+\t\tthis(AbstractDefaultAjaxBehavior.INDICATOR);",
                "+\t}",
                "+\t",
                "+\t/**",
                "+\t * Build a new instance specifing a custom busy indicator as {@link ResourceReference}.",
                "+\t * ",
                "+\t * @param indicator",
                "+\t *             The {@link ResourceReference} to use as busy indicator.     ",
                "+\t */",
                "+\tpublic AjaxIndicatorAppender(ResourceReference indicator)",
                "+\t{",
                "+\t\tthis.indicator = indicator;",
                " \t}",
                "@@ -99,4 +114,3 @@ public class AjaxIndicatorAppender extends Behavior",
                " \t{",
                "-\t\tIRequestHandler handler = new ResourceReferenceRequestHandler(",
                "-\t\t\tAbstractDefaultAjaxBehavior.INDICATOR);",
                "+\t\tIRequestHandler handler = new ResourceReferenceRequestHandler(indicator);",
                " \t\treturn RequestCycle.get().urlFor(handler);"
            ],
            "changed_files": [
                "wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxIndicatorAppender.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d88cebe581232022bb481c325ea23bd0fe9a0110",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508593636,
            "hunks": 2,
            "message": "ListItemModel: allow modification (https://github.com/apache/wicket/pull/237)",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/list/ListItemModel.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/list/ListItemModel.java",
                "index 42d8969015..87bda6776b 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/list/ListItemModel.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/list/ListItemModel.java",
                "@@ -58,5 +58,5 @@ public class ListItemModel<T> implements IModel<T>",
                " \t@Override",
                "-\tpublic final void setObject(T object)",
                "+\tpublic void setObject(T object)",
                " \t{",
                "-\t\tIModel.super.setObject(object);",
                "+\t\tlistView.getModelObject().set(index, object);",
                " \t}"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/html/list/ListItemModel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "da3b69f55077e8945108990df14dc751e4504741",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1516073433,
            "hunks": 4,
            "message": "Logback is replaced with slf4j-simple",
            "diff": [
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml b/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "index a32fb9f811..0a14313a85 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "@@ -46,3 +46,3 @@",
                " \t\t<jetty9.version>@jetty.version@</jetty9.version>",
                "-\t\t<logback.version>@logback.version@</logback.version>",
                "+\t\t<slf4j.version>@slf4j.version@</slf4j.version>",
                " \t\t<junit.version>@junit.version@</junit.version>",
                "@@ -67,7 +67,7 @@",
                "-\t\t<!-- LOGGING DEPENDENCIES - LOGBACK -->",
                "+\t\t<!-- LOGGING DEPENDENCIES - SLF4J-SIMPLE -->",
                " \t\t<dependency>",
                "-\t\t\t<groupId>ch.qos.logback</groupId>",
                "-\t\t\t<artifactId>logback-classic</artifactId>",
                "-\t\t\t<version>${logback.version}</version>",
                "+\t\t\t<groupId>org.slf4j</groupId>",
                "+\t\t\t<artifactId>slf4j-simple</artifactId>",
                "+\t\t\t<version>${slf4j.version}</version>",
                " \t\t</dependency>",
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml",
                "deleted file mode 100644",
                "index f749c749b4..0000000000",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml",
                "+++ /dev/null",
                "@@ -1,30 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<!--",
                "-  Licensed to the Apache Software Foundation (ASF) under one",
                "-  or more contributor license agreements.  See the NOTICE file",
                "-  distributed with this work for additional information",
                "-  regarding copyright ownership.  The ASF licenses this file",
                "-  to you under the Apache License, Version 2.0 (the",
                "-  \"License\"); you may not use this file except in compliance",
                "-  with the License.  You may obtain a copy of the License at",
                "-",
                "-      http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-  Unless required by applicable law or agreed to in writing,",
                "-  software distributed under the License is distributed on an",
                "-  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-  KIND, either express or implied.  See the License for the",
                "-  specific language governing permissions and limitations",
                "-  under the License.",
                "-",
                "--->",
                "-<configuration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
                "-\t<appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">",
                "-\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">",
                "-\t\t\t<pattern>%5p %d{MM-dd HH:mm:ss.SSS } %r %L %c{15} [%.15thread] - %m%n</pattern>",
                "-\t\t</layout>",
                "-\t</appender>",
                "-\t<root level=\"WARN\">",
                "-\t\t<appender-ref ref=\"CONSOLE\" />",
                "-\t</root>",
                "-</configuration>"
            ],
            "changed_files": [
                "archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/logback.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c787470d15a7a6241ca42398f3b62af5097ca4c4",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1515766166,
            "hunks": 9,
            "message": "White-spaces in quick-start application are unified",
            "diff": [
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml b/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "index 20c3fa63d6..395ab9c7e7 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "@@ -101,3 +101,3 @@",
                "-        <!-- uncomment if WebSocket support is needed",
                "+\t\t<!-- uncomment if WebSocket support is needed",
                " \t\t<dependency>",
                "@@ -108,3 +108,3 @@",
                " \t\t</dependency>",
                "-        -->",
                "+\t\t-->",
                " \t</dependencies>",
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html",
                "index 505ed1c0f9..4ca32fc74b 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html",
                "@@ -19,4 +19,4 @@",
                " \t\t\t\tYour quick start works! This project is especially useful to",
                "-                start developing your Wicket application or to create a test",
                "-                case for a bug report.",
                "+\t\t\t\tstart developing your Wicket application or to create a test",
                "+\t\t\t\tcase for a bug report.",
                " \t\t\t</p>",
                "@@ -28,3 +28,3 @@",
                " \t\t\t\tFrom here you can start hacking away at your application and",
                "-                wow your clients:",
                "+\t\t\t\twow your clients:",
                " \t\t\t</p>",
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.java b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.java",
                "index 68c4976bc4..87f4c43386 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.java",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.java",
                "@@ -16,3 +16,3 @@ public class HomePage extends WebPage {",
                "-    }",
                "+\t}",
                " }",
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__",
                "index 5596dd5f40..63e60305fe 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__",
                "@@ -2,15 +2,15 @@",
                " <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" configDebug=\"true\">",
                "-  <Appenders>",
                "-    <Console name=\"CONSOLE\" target=\"SYSTEM_OUT\">",
                "-      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>",
                "-    </Console>",
                "-  </Appenders>",
                "-  <Loggers>",
                "-  \t<logger name=\"org.apache.wicket\" level=\"INFO\" additivity=\"false\">",
                "-  \t\t<AppenderRef ref=\"CONSOLE\"/>",
                "-  \t</logger>",
                "-    <Root level=\"WARN\">",
                "-      <AppenderRef ref=\"CONSOLE\"/>",
                "-    </Root>",
                "-  </Loggers>",
                "-</log4j:configuration>",
                "\\ No newline at end of file",
                "+\t<Appenders>",
                "+\t\t<Console name=\"CONSOLE\" target=\"SYSTEM_OUT\">",
                "+\t\t\t<PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>",
                "+\t\t</Console>",
                "+\t</Appenders>",
                "+\t<Loggers>",
                "+\t\t<logger name=\"org.apache.wicket\" level=\"INFO\" additivity=\"false\">",
                "+\t\t\t<AppenderRef ref=\"CONSOLE\"/>",
                "+\t\t</logger>",
                "+\t\t<Root level=\"WARN\">",
                "+\t\t\t<AppenderRef ref=\"CONSOLE\"/>",
                "+\t\t</Root>",
                "+\t</Loggers>",
                "+</log4j:configuration>",
                "diff --git a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/webapp/style.css b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/webapp/style.css",
                "index fc137cadb0..87576a78c7 100644",
                "--- a/archetypes/quickstart/src/main/resources/archetype-resources/src/main/webapp/style.css",
                "+++ b/archetypes/quickstart/src/main/resources/archetype-resources/src/main/webapp/style.css",
                "@@ -67,2 +67,2 @@ h3 {",
                " \tcolor:#092E67;",
                "-}",
                "\\ No newline at end of file",
                "+}"
            ],
            "changed_files": [
                "archetypes/quickstart/src/main/resources/archetype-resources/pom.xml",
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.html",
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/java/HomePage.java",
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/resources/__log4j.properties__",
                "archetypes/quickstart/src/main/resources/archetype-resources/src/main/webapp/style.css"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "604030ed3fd024dce38aedc1588c5ba04924f609",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510863732,
            "hunks": 2,
            "message": "Remove duplicate dependency to jetty-webapp",
            "diff": [
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 8a1e2e49ec..b57f0dc2e8 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -63,2 +63,6 @@",
                " \t<dependencies>",
                "+\t\t<dependency>",
                "+            <groupId>org.eclipse.jetty</groupId>",
                "+            <artifactId>jetty-server</artifactId>",
                "+        </dependency>",
                " \t\t<dependency>",
                "@@ -181,12 +185,2 @@",
                " \t\t</dependency>",
                "-\t\t<dependency>",
                "-            <groupId>org.eclipse.jetty</groupId>",
                "-            <artifactId>jetty-webapp</artifactId>",
                "-            <scope>runtime</scope>",
                "-        </dependency>",
                "-\t\t<dependency>",
                "-            <groupId>org.eclipse.jetty</groupId>",
                "-            <artifactId>jetty-server</artifactId>",
                "-            <scope>runtime</scope>",
                "-        </dependency>",
                " \t</dependencies>"
            ],
            "changed_files": [
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "01e76cf5e6f13962af0b336f7d02e256cb0ea68e",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1510863749,
            "hunks": 1,
            "message": "Push the new image to Bintray when 'docker' profile is active",
            "diff": [
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index b57f0dc2e8..183cb3ffd9 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -286,2 +286,5 @@",
                " \t\t\t<id>docker</id>",
                "+\t\t\t<properties>",
                "+\t\t\t\t<pushImage/>",
                "+\t\t\t</properties>",
                " \t\t\t<build>"
            ],
            "changed_files": [
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "51d9e533dc3a45183210a1f4852851b485f02ea3",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1512056128,
            "hunks": 4,
            "message": "added javadoc for stable Check/Radio\u00c3\u00a4getValue()",
            "diff": [
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "index 6f7ff26d59..b9358bf0a1 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "@@ -112,6 +112,9 @@ public class Check<T> extends LabeledWebMarkupContainer implements IGenericCompo",
                " \t/**",
                "-\t * Form submission value used for this radio component. This string will appear as the value of",
                "-\t * the <code>value</code> html attribute for the <code>input</code> tag.",
                "+\t * Form submission value used for the Html <code>value</code> attribute of the <code>input</code> tag.",
                "+\t * <p>",
                "+\t * If {@link Check}s are recreated on each render of their {@link CheckGroup}, this method should",
                "+\t * be overridden to return a 'stable' value, otherwise its selection will be lost after a {@link Form}",
                "+\t * was submitted and resulted in {@link Form#hasError()}.",
                " \t * ",
                "-\t * @return form submission value",
                "+\t * @return input value",
                " \t */",
                "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Radio.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Radio.java",
                "index df26e56346..f42ecf020a 100644",
                "--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Radio.java",
                "+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Radio.java",
                "@@ -107,6 +107,9 @@ public class Radio<T> extends LabeledWebMarkupContainer implements IGenericCompo",
                " \t/**",
                "-\t * Form submission value used for this radio component. This string will appear as the value of",
                "-\t * the <code>value</code> html attribute for the <code>input</code> tag.",
                "+\t * Form submission value used for the Html <code>value</code> attribute of the <code>input</code> tag.",
                "+\t * <p>",
                "+\t * If {@link Radio}s are recreated on each render of their {@link RadioGroup}, this method should",
                "+\t * be overridden to return a 'stable' value, otherwise its selection will be lost after a {@link Form}",
                "+\t * was submitted and resulted in {@link Form#hasError()}.",
                " \t * ",
                "-\t * @return form submission value",
                "+\t * @return input value",
                " \t */"
            ],
            "changed_files": [
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Radio.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b310085e2a9e8a684a202822129c47d1ad202336",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1511711127,
            "hunks": 0,
            "message": "Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/wicket",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cfcfc26d76fe399b20eaaadcb2780570a10e82ef",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507908306,
            "hunks": 1,
            "message": "Jetty updated due to bug https://github.com/eclipse/jetty.project/issues/1797",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c2b4997181..a5cf4dbbd7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -128,3 +128,3 @@",
                " \t\t<jacoco.version>0.7.9</jacoco.version>",
                "-\t\t<jetty.version>9.4.6.v20170531</jetty.version>",
                "+\t\t<jetty.version>9.4.7.v20170914</jetty.version>",
                " \t\t<joda-time.version>2.9.9</joda-time.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9eba234e8087edc368a2804a90c93fe4aeec4c5d",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1507551990,
            "hunks": 1,
            "message": "Small fix to text formatting",
            "diff": [
                "diff --git a/wicket-user-guide/src/main/asciidoc/resources/resources_8.adoc b/wicket-user-guide/src/main/asciidoc/resources/resources_8.adoc",
                "index 5df17038ff..16a99549b4 100644",
                "--- a/wicket-user-guide/src/main/asciidoc/resources/resources_8.adoc",
                "+++ b/wicket-user-guide/src/main/asciidoc/resources/resources_8.adoc",
                "@@ -60,3 +60,3 @@ The following code is taken from the Application class of the project:",
                "-As you can see in the code above the _bucket_ that will contain JavaScript tags is called _ .[footer-container] To make a use of it the developer have to add a special component called _HeaderResponseContainer_ in his page:",
                "+As you can see in the code above the _bucket_ that will contain JavaScript tags is called _footer-container_ To make a use of it the developer have to add a special component called _HeaderResponseContainer_ in his page:"
            ],
            "changed_files": [
                "wicket-user-guide/src/main/asciidoc/resources/resources_8.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M8",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7f9079ac8385366ab05f2b676aa35a2460295516",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1508952119,
            "hunks": 11,
            "message": "Start next development version",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3c2657ed2e..32d9fd84db 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -394,3 +394,3 @@",
                " \t\t\t\t<artifactId>wicket-metrics</artifactId>",
                "-\t\t\t\t<version>0.4-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.5-SNAPSHOT</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -400,3 +400,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-core</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -406,3 +406,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-jetty</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -412,3 +412,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-tomcat</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t\t\t<type>jar</type>",
                "@@ -418,3 +418,3 @@",
                " \t\t\t\t<artifactId>wicket-http2-undertow</artifactId>",
                "-\t\t\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t\t\t<type>jar</type>",
                "diff --git a/wicket-experimental/wicket-http2/pom.xml b/wicket-experimental/wicket-http2/pom.xml",
                "index e287d66b48..38252c1d1c 100644",
                "--- a/wicket-experimental/wicket-http2/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/pom.xml",
                "@@ -26,3 +26,3 @@",
                " \t<artifactId>wicket-http2</artifactId>",
                "-\t<version>0.3-SNAPSHOT</version>",
                "+\t<version>0.4-SNAPSHOT</version>",
                " \t<packaging>pom</packaging>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "index d8f4f4573d..cfd3a6fb79 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "index 792ebe488f..bf6845f99f 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "index 0b731459dd..9933b6e543 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml b/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "index a49fdcc239..2e14bcc4ef 100644",
                "--- a/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "+++ b/wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<artifactId>wicket-http2</artifactId>",
                "-\t\t<version>0.3-SNAPSHOT</version>",
                "+\t\t<version>0.4-SNAPSHOT</version>",
                " \t\t<relativePath>../pom.xml</relativePath>",
                "diff --git a/wicket-experimental/wicket-metrics/pom.xml b/wicket-experimental/wicket-metrics/pom.xml",
                "index 5818409765..2fc4920740 100644",
                "--- a/wicket-experimental/wicket-metrics/pom.xml",
                "+++ b/wicket-experimental/wicket-metrics/pom.xml",
                "@@ -26,3 +26,3 @@",
                " \t<artifactId>wicket-metrics</artifactId>",
                "-\t<version>0.4-SNAPSHOT</version>",
                "+\t<version>0.5-SNAPSHOT</version>",
                " \t<packaging>bundle</packaging>"
            ],
            "changed_files": [
                "pom.xml",
                "wicket-experimental/wicket-http2/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-core/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-jetty/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-tomcat/pom.xml",
                "wicket-experimental/wicket-http2/wicket-http2-undertow/pom.xml",
                "wicket-experimental/wicket-metrics/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "da8d5999f89949e2d38856eb315fcc1712d044f1",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1509359018,
            "hunks": 1,
            "message": "Added Jetty dependencies to run examples with this web server",
            "diff": [
                "diff --git a/wicket-examples/pom.xml b/wicket-examples/pom.xml",
                "index 78497801ae..29e5908fa7 100644",
                "--- a/wicket-examples/pom.xml",
                "+++ b/wicket-examples/pom.xml",
                "@@ -181,2 +181,12 @@",
                " \t\t</dependency>",
                "+\t\t<dependency>",
                "+            <groupId>org.eclipse.jetty</groupId>",
                "+            <artifactId>jetty-webapp</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                "+\t\t<dependency>",
                "+            <groupId>org.eclipse.jetty</groupId>",
                "+            <artifactId>jetty-server</artifactId>",
                "+            <scope>runtime</scope>",
                "+        </dependency>",
                " \t</dependencies>"
            ],
            "changed_files": [
                "wicket-examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "693dad38af9cab4824147f5acc84b31b25e3cf9a",
            "repository": "https://github.com/apache/wicket",
            "timestamp": 1512501754,
            "hunks": 2,
            "message": "restored comments from former submit",
            "diff": [
                "diff --git a/wicket-examples/src/main/java/org/apache/wicket/examples/spring/annot/web/AnnotPage.html b/wicket-examples/src/main/java/org/apache/wicket/examples/spring/annot/web/AnnotPage.html",
                "index 704c4ecd81..128260bcb5 100644",
                "--- a/wicket-examples/src/main/java/org/apache/wicket/examples/spring/annot/web/AnnotPage.html",
                "+++ b/wicket-examples/src/main/java/org/apache/wicket/examples/spring/annot/web/AnnotPage.html",
                "@@ -21,3 +21,3 @@ Interesting classes:<br/>",
                " <ul>",
                "-\t<li>SpringComponentInjector - an implementation of . that performs the injection</li>",
                "+\t<li>SpringComponentInjector - an implementation of IComponentInstantiationListener that performs the injection</li>",
                " \t<li>AnnotPage - contains an annotated field whose value will be initialized with a proxy by the injector</li>",
                "diff --git a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/package.html b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/package.html",
                "index a1a887511d..2c7d72df6d 100644",
                "--- a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/package.html",
                "+++ b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/package.html",
                "@@ -28,3 +28,3 @@ To setup automatic injection of wicket components in your application subclass i",
                " <code>",
                "-addComponent.(new SpringComponentInjector(this));",
                "+addComponentInstantiationListener(new SpringComponentInjector(this));",
                " </code>"
            ],
            "changed_files": [
                "wicket-examples/src/main/java/org/apache/wicket/examples/spring/annot/web/AnnotPage.html",
                "wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/package.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "rel/wicket-10.0.0",
                "rel/wicket-10.0.0-M1",
                "rel/wicket-10.0.0-M2",
                "rel/wicket-10.1.0",
                "rel/wicket-8.0.0",
                "rel/wicket-8.0.0-M9",
                "rel/wicket-8.1.0",
                "rel/wicket-8.10.0",
                "rel/wicket-8.11.0",
                "rel/wicket-8.12.0",
                "rel/wicket-8.13.0",
                "rel/wicket-8.14.0",
                "rel/wicket-8.15.0",
                "rel/wicket-8.16.0",
                "rel/wicket-8.2.0",
                "rel/wicket-8.3.0",
                "rel/wicket-8.4.0",
                "rel/wicket-8.5.0",
                "rel/wicket-8.6.0",
                "rel/wicket-8.6.1",
                "rel/wicket-8.7.0",
                "rel/wicket-8.8.0",
                "rel/wicket-8.9.0",
                "rel/wicket-9.0.0",
                "rel/wicket-9.0.0-M1",
                "rel/wicket-9.0.0-M2",
                "rel/wicket-9.0.0-M3",
                "rel/wicket-9.0.0-M4",
                "rel/wicket-9.0.0-M5",
                "rel/wicket-9.1.0",
                "rel/wicket-9.10.0",
                "rel/wicket-9.11.0",
                "rel/wicket-9.12.0",
                "rel/wicket-9.13.0",
                "rel/wicket-9.14.0",
                "rel/wicket-9.15.0",
                "rel/wicket-9.16.0",
                "rel/wicket-9.17.0",
                "rel/wicket-9.18.0",
                "rel/wicket-9.2.0",
                "rel/wicket-9.3.0",
                "rel/wicket-9.4.0",
                "rel/wicket-9.5.0",
                "rel/wicket-9.6.0",
                "rel/wicket-9.7.0",
                "rel/wicket-9.8.0",
                "rel/wicket-9.9.0",
                "rel/wicket-9.9.1",
                "rel/wicket-eclipse-settings-4"
            ],
            "matched_rules": []
        }
    ]
}
