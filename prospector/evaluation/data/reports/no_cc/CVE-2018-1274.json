{
    "advisory_record": {
        "cve_id": "CVE-2018-1274",
        "description": "Spring Data Commons, versions 1.13 to 1.13.10, 2.0 to 2.0.5, and older unsupported versions, contain a property path parser vulnerability caused by unlimited resource allocation. An unauthenticated remote malicious user (or attacker) can issue requests against Spring Data REST endpoints or endpoints using property path parsing which can cause a denial of service (CPU and memory consumption).",
        "reserved_timestamp": 1512518400,
        "published_timestamp": 1523318400,
        "updated_timestamp": 1658512694,
        "repository_url": null,
        "references": {
            "https://pivotal.io/security/cve-2018-1274": 4,
            "http://www.securityfocus.com/bid/103769": 2,
            "https://www.oracle.com/security-alerts/cpujul2022.html": 2,
            "https://jira.spring.io/browse/DATACMNS-1285": 2,
            "commit::371f6590c509c72f8e600f3d05e110941607fbad": 2,
            "commit::3d8576fe4e4e71c23b9e6796b32fd56e51182ee0": 2,
            "": 2
        },
        "affected_products": [
            "Spring Framework",
            "Spring",
            "Commons",
            "Data"
        ],
        "versions": {
            "status": "affected",
            "version": "Versions 1.13 to 1.13.10, 2.0 to 2.0.5"
        },
        "files": [
            "REST",
            "CPU"
        ],
        "keywords": [
            "consumption",
            "cause",
            "endpoint",
            "attacker",
            "data",
            "commons",
            "allocation",
            "denial",
            "memory",
            "resource",
            "request",
            "version",
            "parsing",
            "property",
            "service",
            "contain",
            "parser",
            "issue",
            "rest",
            "spring",
            "vulnerability",
            "path",
            "user"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "3d8576fe4e4e71c23b9e6796b32fd56e51182ee0",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522774875,
            "hunks": 2,
            "message": "DATACMNS-1285 - PropertyPath now limits the depth of its parsing to 1000 segments.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/PropertyPath.java b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "index 920488699..2f12529cc 100644",
                "--- a/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "+++ b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "@@ -48,2 +48,4 @@ public class PropertyPath implements Streamable<PropertyPath> {",
                "+\tprivate static final String PARSE_DEPTH_EXCEEDED = \"Trying to parse a path with depth greater than 1000! This has been disabled for security reasons to prevent parsing overflows.\";",
                "+",
                " \tprivate static final String DELIMITERS = \"_\\\\.\";",
                "@@ -344,2 +346,6 @@ public class PropertyPath implements Streamable<PropertyPath> {",
                "+\t\tif (base.size() > 1000) {",
                "+\t\t\tthrow new IllegalArgumentException(PARSE_DEPTH_EXCEEDED);",
                "+\t\t}",
                "+",
                " \t\tPropertyReferenceException exception = null;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/PropertyPath.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "06b0dab536963da78dadf2ba407e5937d81c348a"
                ],
                [
                    "no-tag",
                    "371f6590c509c72f8e600f3d05e110941607fbad"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: path, parsing, property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: path, property",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "00d752052efa78b4b928f610779985740bd46769",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522959375,
            "hunks": 172,
            "message": "DATACMNS-1291 - Documentation full editing pass. Edited for spelling, punctuation, grammar, and corporate voice. Also added cross-references in a few places. Original pull request: #281.",
            "diff": [
                "diff --git a/index-multi.adoc b/index-multi.adoc",
                "new file mode 100644",
                "index 000000000..561f4833b",
                "--- /dev/null",
                "+++ b/index-multi.adoc",
                "@@ -0,0 +1,11 @@",
                "+= Spring Data Commons Reference Guide",
                "+",
                "+The reference documentation consists of the following sections:",
                "+",
                "+[horizontal]",
                "+link:preface.html[Preface] :: Project metadata (version control, bug tracker, and so on).",
                "+link:dependencies.html[Dependencies] :: Dependency Management with Spring Boot, Spring Framework.",
                "+link:repositories.html[Repositories] :: Core concepts, defining queries, repository interfaces, and more.",
                "+link:repository-projections.html[Projections] :: Interface-based projections, class-based projections, dynamic projections.",
                "+link:query-by-example.html[Query by Example] :: Usage, `Example`, `ExampleMatcher`.",
                "+link:auditing.html[Auditing] :: Annotation-based auditing metadata, interface-based auditing metadata, `AuditorAware`.",
                "diff --git a/src/main/asciidoc/auditing.adoc b/src/main/asciidoc/auditing.adoc",
                "index 99c9a972b..30884b796 100644",
                "--- a/src/main/asciidoc/auditing.adoc",
                "+++ b/src/main/asciidoc/auditing.adoc",
                "@@ -5,7 +5,7 @@",
                " == Basics",
                "-Spring Data provides sophisticated support to transparently keep track of who created or changed an entity and the point in time this happened. To benefit from that functionality you have to equip your entity classes with auditing metadata that can be defined either using annotations or by implementing an interface.",
                "+Spring Data provides sophisticated support to transparently keep track of who created or changed an entity and when the change happened. To benefit from that functionality, you have to equip your entity classes with auditing metadata that can be defined either using annotations or by implementing an interface.",
                " [[auditing.annotations]]",
                "-=== Annotation based auditing metadata",
                "-We provide `@CreatedBy`, `@LastModifiedBy` to capture the user who created or modified the entity as well as `@CreatedDate` and `@LastModifiedDate` to capture the point in time this happened.",
                "+=== Annotation-based Auditing Metadata",
                "+We provide `@CreatedBy` and `@LastModifiedBy` to capture the user who created or modified the entity as well as `@CreatedDate` and `@LastModifiedDate` to capture when the change happened.",
                "@@ -28,16 +28,16 @@ class Customer {",
                "-As you can see, the annotations can be applied selectively, depending on which information you'd like to capture. For the annotations capturing the points in time can be used on properties of type JodaTimes `DateTime`, legacy Java `Date` and `Calendar`, JDK8 date/time types as well as `long`/`Long`.",
                "+As you can see, the annotations can be applied selectively, depending on which information you want to capture. The annotations capturing when changes were made can be used on properties of type Joda-Time, `DateTime`, legacy Java `Date` and `Calendar`, JDK8 date and time types, and `long` or `Long`.",
                " [[auditing.interfaces]]",
                "-=== Interface-based auditing metadata",
                "-In case you don't want to use annotations to define auditing metadata you can let your domain class implement the `Auditable` interface. It exposes setter methods for all of the auditing properties.",
                "+=== Interface-based Auditing Metadata",
                "+In case you do not want to use annotations to define auditing metadata, you can let your domain class implement the `Auditable` interface. It exposes setter methods for all of the auditing properties.",
                "-There's also a convenience base class `AbstractAuditable` which you can extend to avoid the need to manually implement the interface methods. Be aware that this increases the coupling of your domain classes to Spring Data which might be something you want to avoid. Usually the annotation based way of defining auditing metadata is preferred as it is less invasive and more flexible.",
                "+There is also a convenience base class, `AbstractAuditable`, which you can extend to avoid the need to manually implement the interface methods. Doing so increases the coupling of your domain classes to Spring Data, which might be something you want to avoid. Usually, the annotation-based way of defining auditing metadata is preferred as it is less invasive and more flexible.",
                " [[auditing.auditor-aware]]",
                "-=== AuditorAware",
                "+=== `AuditorAware`",
                "-In case you use either `@CreatedBy` or `@LastModifiedBy`, the auditing infrastructure somehow needs to become aware of the current principal. To do so, we provide an `AuditorAware<T>` SPI interface that you have to implement to tell the infrastructure who the current user or system interacting with the application is. The generic type `T` defines of what type the properties annotated with `@CreatedBy` or `@LastModifiedBy` have to be.",
                "+In case you use either `@CreatedBy` or `@LastModifiedBy`, the auditing infrastructure somehow needs to become aware of the current principal. To do so, we provide an `AuditorAware<T>` SPI interface that you have to implement to tell the infrastructure who the current user or system interacting with the application is. The generic type `T` defines what type the properties annotated with `@CreatedBy` or `@LastModifiedBy` have to be.",
                "-Here's an example implementation of the interface using Spring Security's `Authentication` object:",
                "+The following example shows an implementation of the interface that uses Spring Security's `Authentication` object:",
                "@@ -63,3 +63,2 @@ class SpringSecurityAuditorAware implements AuditorAware<User> {",
                "-The implementation is accessing the `Authentication` object provided by Spring Security and looks up the custom `UserDetails` instance from it that you have created in your `UserDetailsService` implementation. We're assuming here that you are exposing the domain user through that `UserDetails` implementation but you could also look it up from anywhere based on the `Authentication` found.",
                "-",
                "+The implementation accesses the `Authentication` object provided by Spring Security and looks up the custom `UserDetails` instance that you have created in your `UserDetailsService` implementation. We assume here that you are exposing the domain user through the `UserDetails` implementation but that, based on the `Authentication` found, you could also look it up from anywhere.",
                "diff --git a/src/main/asciidoc/dependencies.adoc b/src/main/asciidoc/dependencies.adoc",
                "index f98600b08..3a5d86d5e 100644",
                "--- a/src/main/asciidoc/dependencies.adoc",
                "+++ b/src/main/asciidoc/dependencies.adoc",
                "@@ -3,3 +3,3 @@",
                "-Due to different inception dates of individual Spring Data modules, most of them carry different major and minor version numbers. The easiest way to find compatible ones is by relying on the Spring Data Release Train BOM we ship with the compatible versions defined. In a Maven project you'd declare this dependency in the `<dependencyManagement />` section of your POM:",
                "+Due to the different inception dates of individual Spring Data modules, most of them carry different major and minor version numbers. The easiest way to find compatible ones is to rely on the Spring Data Release Train BOM that we ship with the compatible versions defined. In a Maven project, you would declare this dependency in the `<dependencyManagement />` section of your POM, as follows:",
                "@@ -24,11 +24,11 @@ Due to different inception dates of individual Spring Data modules, most of them",
                " [[dependencies.train-names]]",
                "-The current release train version is `{releasetrainVersion}`. The train names are ascending alphabetically and currently available ones are listed https://github.com/spring-projects/spring-data-commons/wiki/Release-planning[here]. The version name follows the following pattern: `${name}-${release}` where release can be one of the following:",
                "+The current release train version is `{releasetrainVersion}`. The train names ascend alphabetically and the currently available trains are listed https://github.com/spring-projects/spring-data-commons/wiki/Release-planning[here]. The version name follows the following pattern: `${name}-${release}`, where release can be one of the following:",
                "-* `BUILD-SNAPSHOT` - current snapshots",
                "-* `M1`, `M2` etc. - milestones",
                "-* `RC1`, `RC2` etc. - release candidates",
                "-* `RELEASE` - GA release",
                "-* `SR1`, `SR2` etc. - service releases",
                "+* `BUILD-SNAPSHOT`: Current snapshots",
                "+* `M1`, `M2`, and so on: Milestones",
                "+* `RC1`, `RC2`, and so on: Release candidates",
                "+* `RELEASE`: GA release",
                "+* `SR1`, `SR2`, and so on: Service releases",
                "-A working example of using the BOMs can be found in our https://github.com/spring-projects/spring-data-examples/tree/master/bom[Spring Data examples repository]. If that's in place declare the Spring Data modules you'd like to use without a version in the `<dependencies />` block.",
                "+A working example of using the BOMs can be found in our https://github.com/spring-projects/spring-data-examples/tree/master/bom[Spring Data examples repository]. With that in place, you can declare the Spring Data modules you would like to use without a version in the `<dependencies />` block, as follows:",
                "@@ -48,5 +48,5 @@ A working example of using the BOMs can be found in our https://github.com/sprin",
                " [[dependencies.spring-boot]]",
                "-== Dependency management with Spring Boot",
                "+== Dependency Management with Spring Boot",
                "-Spring Boot already selects a very recent version of Spring Data modules for you. In case you want to upgrade to a newer version nonetheless, simply configure the property `spring-data-releasetrain.version` to the <<dependencies.train-names,train name and iteration>> you'd like to use.",
                "+Spring Boot selects a recent version of Spring Data modules for you. If you still want to upgrade to a newer version, configure the property `spring-data-releasetrain.version` to the <<dependencies.train-names,train name and iteration>> you would like to use.",
                "@@ -56,2 +56 @@ Spring Boot already selects a very recent version of Spring Data modules for you",
                " The current version of Spring Data modules require Spring Framework in version {springVersion} or better. The modules might also work with an older bugfix version of that minor version. However, using the most recent version within that generation is highly recommended.",
                "-",
                "diff --git a/src/main/asciidoc/index.adoc b/src/main/asciidoc/index.adoc",
                "index 7394c9508..fad8595b8 100644",
                "--- a/src/main/asciidoc/index.adoc",
                "+++ b/src/main/asciidoc/index.adoc",
                "@@ -1,7 +1,13 @@",
                " = Spring Data Commons - Reference Documentation",
                "-Oliver Gierke; Thomas Darimont; Christoph Strobl; Mark Pollack; Thomas Risberg; Mark Paluch;",
                "+Oliver Gierke; Thomas Darimont; Christoph Strobl; Mark Pollack; Thomas Risberg; Mark Paluch; Jay Bryant",
                " :revnumber: {version}",
                " :revdate: {localdate}",
                "-:toc:",
                "-:toc-placement!:",
                "+:linkcss:",
                "+:doctype: book",
                "+:docinfo: shared",
                "+:toc: left",
                "+:toclevels: 4",
                "+:source-highlighter: prettify",
                "+:icons: font",
                "+",
                "@@ -11,4 +17,2 @@ NOTE: Copies of this document may be made for your own use and for distribution",
                "-toc::[]",
                "-",
                " include::preface.adoc[]",
                "@@ -16,3 +20,3 @@ include::preface.adoc[]",
                " [[reference-documentation]]",
                "-= Reference documentation",
                "+= Reference Documentation",
                "@@ -36,2 +40 @@ include::repository-query-return-types-reference.adoc[]",
                " :leveloffset: -1",
                "-",
                "diff --git a/src/main/asciidoc/preface.adoc b/src/main/asciidoc/preface.adoc",
                "index 226ebd440..76eb5e607 100644",
                "--- a/src/main/asciidoc/preface.adoc",
                "+++ b/src/main/asciidoc/preface.adoc",
                "@@ -5,9 +5,8 @@ The Spring Data Commons project applies core Spring concepts to the development",
                " [[project]]",
                "-[preface]",
                "-== Project metadata",
                "+== Project Metadata",
                "-* Version control - http://github.com/spring-projects/spring-data-commons",
                "-* Bugtracker - https://jira.spring.io/browse/DATACMNS",
                "-* Release repository - https://repo.spring.io/libs-release",
                "-* Milestone repository - https://repo.spring.io/libs-milestone",
                "-* Snapshot repository - https://repo.spring.io/libs-snapshot",
                "+* Version control: http://github.com/spring-projects/spring-data-commons",
                "+* Bugtracker: https://jira.spring.io/browse/DATACMNS",
                "+* Release repository: https://repo.spring.io/libs-release",
                "+* Milestone repository: https://repo.spring.io/libs-milestone",
                "+* Snapshot repository: https://repo.spring.io/libs-snapshot",
                "diff --git a/src/main/asciidoc/query-by-example.adoc b/src/main/asciidoc/query-by-example.adoc",
                "index bec6bcadb..073f8fd72 100644",
                "--- a/src/main/asciidoc/query-by-example.adoc",
                "+++ b/src/main/asciidoc/query-by-example.adoc",
                "@@ -6,5 +6,5 @@",
                "-This chapter will give you an introduction to Query by Example and explain how to use Examples.",
                "+This chapter provides an introduction to Query by Example and explains how to use it.",
                "-Query by Example (QBE) is a user-friendly querying technique with a simple interface. It allows dynamic query creation and does not require to write queries containing field names. In fact, Query by Example does not require to write queries using store-specific query languages at all.",
                "+Query by Example (QBE) is a user-friendly querying technique with a simple interface. It allows dynamic query creation and does not require you to write queries that contain field names. In fact, Query by Example does not require you to write queries by using store-specific query languages at all.",
                "@@ -15,3 +15,3 @@ The Query by Example API consists of three parts:",
                "-* Probe: That is the actual example of a domain object with populated fields.",
                "+* Probe: The actual example of a domain object with populated fields.",
                " * `ExampleMatcher`: The `ExampleMatcher` carries details on how to match particular fields. It can be reused across multiple Examples.",
                "@@ -19,16 +19,14 @@ The Query by Example API consists of three parts:",
                "-Query by Example is suited for several use-cases but also comes with limitations:",
                "+Query by Example is well suited for several use cases:",
                "-**When to use**",
                "+* Querying your data store with a set of static or dynamic constraints.",
                "+* Frequent refactoring of the domain objects without worrying about breaking existing queries.",
                "+* Working independently from the underlying data store API.",
                "-* Querying your data store with a set of static or dynamic constraints",
                "-* Frequent refactoring of the domain objects without worrying about breaking existing queries",
                "-* Works independently from the underlying data store API",
                "+Query by Example also has several limitations:",
                "-**Limitations**",
                "+* No support for nested or grouped property constraints, such as `firstname = ?0 or (firstname = ?1 and lastname = ?2)`.",
                "+* Only supports starts/contains/ends/regex matching for strings and exact matching for other property types.",
                "-* No support for nested/grouped property constraints like `firstname = ?0 or (firstname = ?1 and lastname = ?2)`",
                "-* Only supports starts/contains/ends/regex matching for strings and exact matching for other property types",
                "-",
                "-Before getting started with Query by Example, you need to have a domain object. To get started, simply create an interface for your repository:",
                "+Before getting started with Query by Example, you need to have a domain object. To get started, create an interface for your repository, as shown in the following example:",
                "@@ -51,3 +49,3 @@ public class Person {",
                "-This is a simple domain object. You can use it to create an `Example`. By default, fields having `null` values are ignored, and strings are matched using the store specific defaults. Examples can be built by either using the `of` factory method or by using <<query-by-example.matchers,`ExampleMatcher`>>. `Example` is immutable.",
                "+The preceding example shows a simple domain object. You can use it to create an `Example`. By default, fields having `null` values are ignored, and strings are matched by using the store specific defaults. Examples can be built by either using the `of` factory method or by using <<query-by-example.matchers,`ExampleMatcher`>>. `Example` is immutable. The following listing shows a simple Example:",
                "@@ -62,8 +60,8 @@ Example<Person> example = Example.of(person);         <3>",
                " ----",
                "-<1> Create a new instance of the domain object",
                "-<2> Set the properties to query",
                "-<3> Create the `Example`",
                "+<1> Create a new instance of the domain object.",
                "+<2> Set the properties to query.",
                "+<3> Create the `Example`.",
                " ====",
                "-Examples are ideally be executed with repositories. To do so, let your repository interface extend `QueryByExampleExecutor<T>`. Here's an excerpt from the `QueryByExampleExecutor` interface:",
                "+Examples are ideally be executed with repositories. To do so, let your repository interface extend `QueryByExampleExecutor<T>`. The following listing shows an excerpt from the `QueryByExampleExecutor` interface:",
                "@@ -85,5 +83,5 @@ public interface QueryByExampleExecutor<T> {",
                " [[query-by-example.matchers]]",
                "-== Example matchers",
                "+== Example Matchers",
                "-Examples are not limited to default settings. You can specify own defaults for string matching, null handling and property-specific settings using the `ExampleMatcher`.",
                "+Examples are not limited to default settings. You can specify your own defaults for string matching, null handling, and property-specific settings by using the `ExampleMatcher`, as shown in the following example:",
                "@@ -106,6 +104,6 @@ Example<Person> example = Example.of(person, matcher); <7>",
                " <2> Set properties.",
                "-<3> Create an `ExampleMatcher` to expect all values to match. It's usable at this stage even without further configuration.",
                "-<4> Construct a new `ExampleMatcher` to ignore the property path `lastname`.",
                "-<5> Construct a new `ExampleMatcher` to ignore the property path `lastname` and to include null values.",
                "-<6> Construct a new `ExampleMatcher` to ignore the property path `lastname`, to include null values, and use perform suffix string matching.",
                "+<3> Create an `ExampleMatcher` to expect all values to match. It is usable at this stage even without further configuration.",
                "+<4> Construct a new `ExampleMatcher` to ignore the `lastname` property path.",
                "+<5> Construct a new `ExampleMatcher` to ignore the `lastname` property path and to include null values.",
                "+<6> Construct a new `ExampleMatcher` to ignore the `lastname` property path, to include null values, and to perform suffix string matching.",
                " <7> Create a new `Example` based on the domain object and the configured `ExampleMatcher`.",
                "@@ -113,5 +111,5 @@ Example<Person> example = Example.of(person, matcher); <7>",
                "-By default the `ExampleMatcher` will expect all values set on the probe to match. If you want to get results matching any of the predicates defined implicitly, use `ExampleMatcher.matchingAny()`.",
                "+By default, the `ExampleMatcher` expects all values set on the probe to match. If you want to get results matching any of the predicates defined implicitly, use `ExampleMatcher.matchingAny()`.",
                "-You can specify behavior for individual properties (e.g. \"firstname\" and \"lastname\", \"address.city\" for nested properties). You can tune it with matching options and case sensitivity.",
                "+You can specify behavior for individual properties (such as \"firstname\" and \"lastname\" or, for nested properties, \"address.city\"). You can tune it with matching options and case sensitivity, as shown in the following example:",
                "@@ -128,3 +126,3 @@ ExampleMatcher matcher = ExampleMatcher.matching()",
                "-Another style to configure matcher options is by using Java 8 lambdas. This approach is a callback that asks the implementor to modify the matcher. It's not required to return the matcher because configuration options are held within the matcher instance.",
                "+Another way to configure matcher options is to use lambdas (introduced in Java 8). This approach creates a callback that asks the implementor to modify the matcher. You need not return the matcher, because configuration options are held within the matcher instance. The following example shows a matcher that uses lambdas:",
                "@@ -141,3 +139,3 @@ ExampleMatcher matcher = ExampleMatcher.matching()",
                "-Queries created by `Example` use a merged view of the configuration. Default matching settings can be set at `ExampleMatcher` level while individual settings can be applied to particular property paths. Settings that are set on `ExampleMatcher` are inherited by property path settings unless they are defined explicitly. Settings on a property patch have higher precedence than default settings.",
                "+Queries created by `Example` use a merged view of the configuration. Default matching settings can be set at the `ExampleMatcher` level, while individual settings can be applied to particular property paths. Settings that are set on `ExampleMatcher` are inherited by property path settings unless they are defined explicitly. Settings on a property patch have higher precedence than default settings. The following table describes the scope of the various `ExampleMatcher` settings:",
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index f4d3497ae..af7ee136e 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -6,3 +6,3 @@",
                "-The goal of Spring Data repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores.",
                "+The goal of the Spring Data repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores.",
                "@@ -12,3 +12,3 @@ _Spring Data repository documentation and your module_",
                "-This chapter explains the core concepts and interfaces of Spring Data repositories. The information in this chapter is pulled from the Spring Data Commons module. It uses the configuration and code samples for the Java Persistence API (JPA) module. Adapt the XML namespace declaration and the types to be extended to the equivalents of the particular module that you are using. <<repositories.namespace-reference>> covers XML configuration which is supported across all Spring Data modules supporting the repository API, <<repository-query-keywords>> covers the query method keywords supported by the repository abstraction in general. For detailed information on the specific features of your module, consult the chapter on that module of this document.",
                "+This chapter explains the core concepts and interfaces of Spring Data repositories. The information in this chapter is pulled from the Spring Data Commons module. It uses the configuration and code samples for the Java Persistence API (JPA) module. You should adapt the XML namespace declaration and the types to be extended to the equivalents of the particular module that you use. \"`<<repositories.namespace-reference>>`\" covers XML configuration, which is supported across all Spring Data modules supporting the repository API. \"`<<repository-query-keywords>>`\" covers the query method keywords supported by the repository abstraction in general. For detailed information on the specific features of your module, see the chapter on that module of this document.",
                " ====",
                "@@ -17,6 +17,6 @@ This chapter explains the core concepts and interfaces of Spring Data repositori",
                " == Core concepts",
                "-The central interface in Spring Data repository abstraction is `Repository` (probably not that much of a surprise). It takes the domain class to manage as well as the id type of the domain class as type arguments. This interface acts primarily as a marker interface to capture the types to work with and to help you to discover interfaces that extend this one. The `CrudRepository` provides sophisticated CRUD functionality for the entity class that is being managed.",
                "+The central interface in the Spring Data repository abstraction is `Repository`. It takes the domain class to manage as well as the ID type of the domain class as type arguments. This interface acts primarily as a marker interface to capture the types to work with and to help you to discover interfaces that extend this one. The `CrudRepository` provides sophisticated CRUD functionality for the entity class that is being managed.",
                " [[repositories.repository]]",
                "-.CrudRepository interface",
                "+.`CrudRepository` interface",
                " ====",
                "@@ -43,3 +43,3 @@ public interface CrudRepository<T, ID extends Serializable>",
                " <1> Saves the given entity.",
                "-<2> Returns the entity identified by the given id.",
                "+<2> Returns the entity identified by the given ID.",
                " <3> Returns all entities.",
                "@@ -47,10 +47,10 @@ public interface CrudRepository<T, ID extends Serializable>",
                " <5> Deletes the given entity.",
                "-<6> Indicates whether an entity with the given id exists.",
                "+<6> Indicates whether an entity with the given ID exists.",
                " ====",
                "-NOTE: We also provide persistence technology-specific abstractions like e.g. `JpaRepository` or `MongoRepository`. Those interfaces extend    `CrudRepository` and expose the capabilities of the underlying persistence technology in addition to the rather generic persistence technology-agnostic interfaces like e.g. CrudRepository.",
                "+NOTE: We also provide persistence technology-specific abstractions, such as `JpaRepository` or `MongoRepository`. Those interfaces extend `CrudRepository` and expose the capabilities of the underlying persistence technology in addition to the rather generic persistence technology-agnostic interfaces such as `CrudRepository`.",
                "-On top of the `CrudRepository` there is a `PagingAndSortingRepository` abstraction that adds additional methods to ease paginated access to entities:",
                "+On top of the `CrudRepository`, there is a `PagingAndSortingRepository` abstraction that adds additional methods to ease paginated access to entities:",
                "-.PagingAndSortingRepository",
                "+.`PagingAndSortingRepository` interface",
                " ====",
                "@@ -68,3 +68,3 @@ public interface PagingAndSortingRepository<T, ID extends Serializable>",
                "-Accessing the second page of `User` by a page size of 20 you could simply do something like this:",
                "+To access the second page of `User` by a page size of 20, you could do something like the following:",
                "@@ -76,3 +76,3 @@ Page<User> users = repository.findAll(new PageRequest(1, 20));",
                "-In addition to query methods, query derivation for both count and delete queries, is available.",
                "+In addition to query methods, query derivation for both count and delete queries is available. The following list shows the interface definition for a derived count query:",
                "@@ -89,2 +89,4 @@ interface UserRepository extends CrudRepository<User, Long> {",
                "+The following list shows the interface definition for a derived delete query:",
                "+",
                " .Derived Delete Query",
                "@@ -107,3 +109,3 @@ Standard CRUD functionality repositories usually have queries on the underlying",
                "-. Declare an interface extending Repository or one of its subinterfaces and type it to the domain class and ID type that it will handle.",
                "+. Declare an interface extending Repository or one of its subinterfaces and type it to the domain class and ID type that it should handle, as shown in the following example:",
                " +",
                "@@ -125,3 +127,5 @@ interface PersonRepository extends Repository<Person, Long> {",
                "-. Set up Spring to create proxy instances for those interfaces. Either via <<repositories.create-instances.java-config,JavaConfig>>:",
                "+. Set up Spring to create proxy instances for those interfaces, either with <<repositories.create-instances.java-config,JavaConfig>> or with <<repositories.create-instances,XML configuration>>.",
                "+",
                "+.. To use Java configuration, create a class similar to the following:",
                " +",
                "@@ -136,4 +140,4 @@ class Config {}",
                "-+",
                "-or via <<repositories.create-instances,XML configuration>>:",
                "+",
                "+.. To use XML configuration, define a bean similar to the following:",
                " +",
                "@@ -157,7 +161,7 @@ or via <<repositories.create-instances,XML configuration>>:",
                " +",
                "-The JPA namespace is used in this example. If you are using the repository abstraction for any other store, you need to change this to the appropriate namespace declaration of your store module which should be exchanging `jpa` in favor of, for example, `mongodb`.",
                "+The JPA namespace is used in this example. If you use the repository abstraction for any other store, you need to change this to the appropriate namespace declaration of your store module. In other words, you should exchange `jpa` in favor of, for example, `mongodb`.",
                " +",
                "-Also, note that the JavaConfig variant doesn't configure a package explictly as the package of the annotated class is used by default. To customize the package to scan use one of the `basePackage\u00e2\u0080\u00a6` attribute of the data-store specific repository `@Enable\u00e2\u0080\u00a6`-annotation.",
                "+Also, note that the JavaConfig variant does not configure a package explicitly, because the package of the annotated class is used by default. To customize the package to scan, use one of the `basePackage\u00e2\u0080\u00a6` attributes of the data-store-specific repository's `@Enable\u00e2\u0080\u00a6`-annotation.",
                "-. Get the repository instance injected and use it.",
                "+. Inject the repository instance and use it, as shown in the following example:",
                " +",
                "@@ -180,15 +184,22 @@ class SomeClient {",
                "-The sections that follow explain each step in detail.",
                "+The sections that follow explain each step in detail:",
                "+",
                "+* <<repositories.definition>>",
                "+* <<repositories.query-methods.details>>",
                "+* <<repositories.create-instances>>",
                "+* <<repositories.custom-implementations>>",
                " [[repositories.definition]]",
                "-== Defining repository interfaces",
                "+== Defining Repository Interfaces",
                "-As a first step you define a domain class-specific repository interface. The interface must extend Repository and be typed to the domain class and an ID type. If you want to expose CRUD methods for that domain type, extend `CrudRepository` instead of `Repository`.",
                "+First, define a domain class-specific repository interface. The interface must extend `Repository` and be typed to the domain class and an ID type. If you want to expose CRUD methods for that domain type, extend `CrudRepository` instead of `Repository`.",
                " [[repositories.definition-tuning]]",
                "-=== Fine-tuning repository definition",
                "+=== Fine-tuning Repository Definition",
                "-Typically, your repository interface will extend `Repository`, `CrudRepository` or `PagingAndSortingRepository`. Alternatively, if you do not want to extend Spring Data interfaces, you can also annotate your repository interface with `@RepositoryDefinition`. Extending `CrudRepository` exposes a complete set of methods to manipulate your entities. If you prefer to be selective about the methods being exposed, simply copy the ones you want to expose from `CrudRepository` into your domain repository.",
                "+Typically, your repository interface extends `Repository`, `CrudRepository`, or `PagingAndSortingRepository`. Alternatively, if you do not want to extend Spring Data interfaces, you can also annotate your repository interface with `@RepositoryDefinition`. Extending `CrudRepository` exposes a complete set of methods to manipulate your entities. If you prefer to be selective about the methods being exposed, copy the methods you want to expose from `CrudRepository` into your domain repository.",
                "-NOTE: This allows you to define your own abstractions on top of the provided Spring Data Repositories functionality.",
                "+NOTE: Doing so lets you define your own abstractions on top of the provided Spring Data Repositories functionality.",
                "+",
                "+The following example shows how to selectively expose CRUD methods (`findById` and `save`, in this case):",
                "@@ -212,12 +223,11 @@ interface UserRepository extends MyBaseRepository<User, Long> {",
                "-In this first step you defined a common base interface for all your domain repositories and exposed `findById(\u00e2\u0080\u00a6)` as well as `save(\u00e2\u0080\u00a6)`.These methods will be routed into the base repository implementation of the store of your choice provided by Spring Data ,e.g. in the case if JPA `SimpleJpaRepository`, because they are matching the method signatures in `CrudRepository`. So the `UserRepository` will now be able to save users, and find single ones by id, as well as triggering a query to find `Users` by their email address.",
                "-",
                "-NOTE: Note, that the intermediate repository interface is annotated with `@NoRepositoryBean`. Make sure you add that annotation to all repository interfaces that Spring Data should not create instances for at runtime.",
                "+In the prior example, you defined a common base interface for all your domain repositories and exposed `findById(\u00e2\u0080\u00a6)` as well as `save(\u00e2\u0080\u00a6)`.These methods are routed into the base repository implementation of the store of your choice provided by Spring Data (for example, if you use JPA, the implementation is `SimpleJpaRepository`), because they match the method signatures in `CrudRepository`. So the `UserRepository` can now save users, find individual users by ID, and trigger a query to find `Users` by email address.",
                "+NOTE: The intermediate repository interface is annotated with `@NoRepositoryBean`. Make sure you add that annotation to all repository interfaces for which Spring Data should not create instances at runtime.",
                " [[repositories.nullability]]",
                "-=== Null handling of repository methods",
                "+=== Null Handling of Repository Methods",
                " As of Spring Data 2.0, repository CRUD methods that return an individual aggregate instance use Java 8's `Optional` to indicate the potential absence of a value.",
                "-Besides that, Spring Data supports to return other wrapper types on query methods:",
                "+Besides that, Spring Data supports returning the following wrapper types on query methods:",
                "@@ -226,24 +236,24 @@ Besides that, Spring Data supports to return other wrapper types on query method",
                " * `io.vavr.control.Option`",
                "-* `javaslang.control.Option` (deprecated as Javaslang is deprecated)",
                "+* `javaslang.control.Option` (deprecated as `javaslang` is deprecated)",
                "-Alternatively query methods can choose not to use a wrapper type at all.",
                "-The absence of a query result will then be indicated by returning `null`.",
                "+Alternatively, query methods can choose not to use a wrapper type at all.",
                "+The absence of a query result is then indicated by returning `null`.",
                " Repository methods returning collections, collection alternatives, wrappers, and streams are guaranteed never to return `null` but rather the corresponding empty representation.",
                "-See <<repository-query-return-types>> for details.",
                "+See \"`<<repository-query-return-types>>`\" for details.",
                " [[repositories.nullability.annotations]]",
                "-==== Nullability annotations",
                "+==== Nullability Annotations",
                "-You can express nullability constraints for repository methods using link:{spring-framework-docs}/core.html#null-safety[Spring Framework's nullability annotations].",
                "-They provide a tooling-friendly approach and opt-in `null` checks during runtime:",
                "+You can express nullability constraints for repository methods by using link:{spring-framework-docs}/core.html#null-safety[Spring Framework's nullability annotations].",
                "+They provide a tooling-friendly approach and opt-in `null` checks during runtime, as follows:",
                "-* {spring-framework-javadoc}/org/springframework/lang/NonNullApi.html[`@NonNullApi`] \u00e2\u0080\u0093 to be used on the package level to declare that the default behavior for parameters and return values is to not accept or produce `null` values.",
                "-* {spring-framework-javadoc}/org/springframework/lang/NonNull.html[`@NonNull`] \u00e2\u0080\u0093 to be used on a parameter or return value that must not be `null`",
                "- (not needed on parameter and return value where `@NonNullApi` applies).",
                "-* {spring-framework-javadoc}/org/springframework/lang/Nullable.html[`@Nullable`] \u00e2\u0080\u0093 to be used on a parameter or return value that can be `null`.",
                "+* {spring-framework-javadoc}/org/springframework/lang/NonNullApi.html[`@NonNullApi`]: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce `null` values.",
                "+* {spring-framework-javadoc}/org/springframework/lang/NonNull.html[`@NonNull`]: Used on a parameter or return value that must not be `null`",
                "+ (not needed on a parameter and return value where `@NonNullApi` applies).",
                "+* {spring-framework-javadoc}/org/springframework/lang/Nullable.html[`@Nullable`]: Used on a parameter or return value that can be `null`.",
                "-Spring annotations are meta-annotated with https://jcp.org/en/jsr/detail?id=305[JSR 305] annotations (a dormant but widely spread JSR). JSR 305 meta-annotations allow tooling vendors like https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html[IDEA], http://help.eclipse.org/oxygen/index.jsp?topic=/org.eclipse.jdt.doc.user/tasks/task-using_external_null_annotations.htm[Eclipse], or link:https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types[Kotlin] to provide null-safety support in a generic way, without having to hard-code support for Spring annotations.",
                "-To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on package level using Spring\u00e2\u0080\u0099s `@NonNullApi` in `package-info.java`:",
                "+Spring annotations are meta-annotated with https://jcp.org/en/jsr/detail?id=305[JSR 305] annotations (a dormant but widely spread JSR). JSR 305 meta-annotations let tooling vendors such as https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html[IDEA], http://help.eclipse.org/oxygen/index.jsp?topic=/org.eclipse.jdt.doc.user/tasks/task-using_external_null_annotations.htm[Eclipse], and link:https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types[Kotlin] provide null-safety support in a generic way, without having to hard-code support for Spring annotations.",
                "+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u00e2\u0080\u0099s `@NonNullApi` in `package-info.java`, as shown in the following example:",
                "-.Declaring non-nullability in `package-info.java`",
                "+.Declaring Non-nullability in `package-info.java`",
                " ====",
                "@@ -256,6 +266,8 @@ package com.acme;",
                "-Once non-null defaulting is in place, repository query method invocations will get validated at runtime for nullability constraints.",
                "-Exceptions will be thrown in case a query execution result violates the defined constraint, i.e. the method would return `null` for some reason but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                "-If you want to opt-in to nullable results again, selectively use `@Nullable` that a method.",
                "-Using the aforementioned result wrapper types will continue to work as expected, i.e. an empty result will be translated into the value representing absence.",
                "+Once non-null defaulting is in place, repository query method invocations get validated at runtime for nullability constraints.",
                "+if a query execution result violates the defined constraint, an exception is thrown. This happens when the method would return `null` but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                "+If you want to opt-in to nullable results again, selectively use `@Nullable` on individual methods.",
                "+Using the result wrapper types mentioned at the start of this section continues to work as expected: An empty result is translated into the value that represents absence.",
                "+",
                "+The following example shows a number of the techniques just described:",
                "@@ -279,6 +291,6 @@ interface UserRepository extends Repository<User, Long> {",
                " ----",
                "-<1> The repository resides in a package (or sub-package) for which we've defined non-null behavior (see above).",
                "-<2> Will throw an `EmptyResultDataAccessException` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                "-<3> Will return `null` in case the query executed does not produce a result. Also accepts `null` as value for `emailAddress`.",
                "-<4> Will return `Optional.empty()` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                "+<1> The repository resides in a package (or sub-package) for which we have defined non-null behavior.",
                "+<2> Throws an `EmptyResultDataAccessException` when the query executed does not produce a result. Throws an `IllegalArgumentException` when the `emailAddress` handed to the method is `null`.",
                "+<3> Returns `null` when the query executed does not produce a result. Also accepts `null` as the value for `emailAddress`.",
                "+<4> Returns `Optional.empty()` when the query executed does not produce a result. Throws an `IllegalArgumentException` when the `emailAddress` handed to the method is `null`.",
                " ====",
                "@@ -286,8 +298,7 @@ interface UserRepository extends Repository<User, Long> {",
                " [[repositories.nullability.kotlin]]",
                "-==== Nullability in Kotlin-based repositories",
                "+==== Nullability in Kotlin-based Repositories",
                "-Kotlin has the definition of https://kotlinlang.org/docs/reference/null-safety.html[nullability constraints]",
                "- baked into the language.",
                "-Kotlin code compiles to bytecode which does not express nullability constraints using method signatures but rather compiled-in metadata. Make sure to include the `kotlin-reflect` JAR in your project to enable introspection of Kotlin's nullability constraints.",
                "-Spring Data repositories use the language mechanism to define those constraints to apply the same runtime checks:",
                "+Kotlin has the definition of https://kotlinlang.org/docs/reference/null-safety.html[nullability constraints] baked into the language.",
                "+Kotlin code compiles to bytecode, which does not express nullability constraints through method signatures but rather through compiled-in metadata. Make sure to include the `kotlin-reflect` JAR in your project to enable introspection of Kotlin's nullability constraints.",
                "+Spring Data repositories use the language mechanism to define those constraints to apply the same runtime checks, as follows:",
                "@@ -304,4 +315,4 @@ interface UserRepository : Repository<User, String> {",
                " ----",
                "-<1> The method defines both, the parameter as non-nullable (the Kotlin default) as well as the result. The Kotlin compiler will already reject method invocations trying to hand `null` into the method. In case the query execution yields an empty result, an `EmptyResultDataAccessException` will be thrown.",
                "-<2> This method accepts `null` as parameter for `firstname` and returns `null` in case the query execution does not produce a result.",
                "+<1> The method defines both the parameter and the result as non-nullable (the Kotlin default). The Kotlin compiler rejects method invocations that pass `null` to the method. If the query execution yields an empty result, an `EmptyResultDataAccessException` is thrown.",
                "+<2> This method accepts `null` for the `firstname` parameter and returns `null` if the query execution does not produce a result.",
                " ====",
                "@@ -309,11 +320,13 @@ interface UserRepository : Repository<User, String> {",
                " [[repositories.multiple-modules]]",
                "-=== Using Repositories with multiple Spring Data modules",
                "+=== Using Repositories with Multiple Spring Data Modules",
                "+",
                "+Using a unique Spring Data module in your application makes things simple, because all repository interfaces in the defined scope are bound to the Spring Data module. Sometimes, applications require using more than one Spring Data module. In such cases, a repository definition must distinguish between persistence technologies. When it detects multiple repository factories on the class path, Spring Data enters strict repository configuration mode. Strict configuration uses details on the repository or the domain class to decide about Spring Data module binding for a repository definition:",
                "-Using a unique Spring Data module in your application makes things simple hence, all repository interfaces in the defined scope are bound to the Spring Data module. Sometimes applications require using more than one Spring Data module. In such case, it's required for a repository definition to distinguish between persistence technologies. Spring Data enters strict repository configuration mode because it detects multiple repository factories on the class path. Strict configuration requires details on the repository or the domain class to decide about Spring Data module binding for a repository definition:",
                "+1. If the repository definition <<repositories.multiple-modules.types,extends the module-specific repository>>, then it is a valid candidate for the particular Spring Data module.",
                "+2. If the domain class is <<repositories.multiple-modules.annotations,annotated with the module-specific type annotation>>, then it is a valid candidate for the particular Spring Data module. Spring Data modules accept either third-party annotations (such as JPA's `@Entity`) or provide their own annotations (such as `@Document` for Spring Data MongoDB and Spring Data Elasticsearch).",
                "-1. If the repository definition <<repositories.multiple-modules.types,extends the module-specific repository>>, then it's a valid candidate for the particular Spring Data module.",
                "-2. If the domain class is <<repositories.multiple-modules.annotations,annotated with the module-specific type annotation>>, then it's a valid candidate for the particular Spring Data module. Spring Data modules accept either 3rd party annotations (such as JPA's `@Entity`) or provide own annotations such as `@Document` for Spring Data MongoDB/Spring Data Elasticsearch.",
                "+The following example shows a repository that uses module-specific interfaces (JPA in this case):",
                " [[repositories.multiple-modules.types]]",
                "-.Repository definitions using Module-specific Interfaces",
                "+.Repository definitions using module-specific interfaces",
                " ====",
                "@@ -335,3 +348,5 @@ interface UserRepository extends MyBaseRepository<User, Long> {",
                "-.Repository definitions using generic Interfaces",
                "+The following example shows a repository that uses generic interfaces:",
                "+",
                "+.Repository definitions using generic interfaces",
                " ====",
                "@@ -352,7 +367,9 @@ interface AmbiguousUserRepository extends MyBaseRepository<User, Long> {",
                " ----",
                "-`AmbiguousRepository` and `AmbiguousUserRepository` extend only `Repository` and `CrudRepository` in their type hierarchy. While this is perfectly fine using a unique Spring Data module, multiple modules cannot distinguish to which particular Spring Data these repositories should be bound.",
                "+`AmbiguousRepository` and `AmbiguousUserRepository` extend only `Repository` and `CrudRepository` in their type hierarchy. While this is perfectly fine when using a unique Spring Data module, multiple modules cannot distinguish to which particular Spring Data these repositories should be bound.",
                " ====",
                "+The following example shows a repository that uses domain classes with annotations:",
                "+",
                " [[repositories.multiple-modules.annotations]]",
                "-.Repository definitions using Domain Classes with Annotations",
                "+.Repository definitions using domain classes with annotations",
                " ====",
                "@@ -378,6 +395,8 @@ class User {",
                " ----",
                "-`PersonRepository` references `Person` which is annotated with the JPA annotation `@Entity` so this repository clearly belongs to Spring Data JPA. `UserRepository` uses `User` annotated with Spring Data MongoDB's `@Document` annotation.",
                "+`PersonRepository` references `Person`, which is annotated with the JPA `@Entity` annotation, so this repository clearly belongs to Spring Data JPA. `UserRepository` references `User`, which is annotated with Spring Data MongoDB's `@Document` annotation.",
                " ====",
                "-.Repository definitions using Domain Classes with mixed Annotations",
                "+The following bad example shows a repository that uses domain classes with mixed annotations:",
                "+",
                "+.Repository definitions using domain classes with mixed annotations",
                " ====",
                "@@ -399,8 +418,10 @@ class Person {",
                " ----",
                "-This example shows a domain class using both JPA and Spring Data MongoDB annotations. It defines two repositories, `JpaPersonRepository` and `MongoDBPersonRepository`. One is intended for JPA and the other for MongoDB usage. Spring Data is no longer able to tell the repositories apart which leads to undefined behavior.",
                "+This example shows a domain class using both JPA and Spring Data MongoDB annotations. It defines two repositories, `JpaPersonRepository` and `MongoDBPersonRepository`. One is intended for JPA and the other for MongoDB usage. Spring Data is no longer able to tell the repositories apart, which leads to undefined behavior.",
                " ====",
                "-<<repositories.multiple-modules.types,Repository type details>> and <<repositories.multiple-modules.annotations,identifying domain class annotations>> are used for strict repository configuration identify repository candidates for a particular Spring Data module. Using multiple persistence technology-specific annotations on the same domain type is possible to reuse domain types across multiple persistence technologies, but then Spring Data is no longer able to determine a unique module to bind the repository.",
                "+<<repositories.multiple-modules.types,Repository type details>> and <<repositories.multiple-modules.annotations,distinguishing domain class annotations>> are used for strict repository configuration to identify repository candidates for a particular Spring Data module. Using multiple persistence technology-specific annotations on the same domain type is possible and enables reuse of domain types across multiple persistence technologies. However, Spring Data can then no longer determine a unique module with which to bind the repository.",
                "+",
                "+The last way to distinguish repositories is by scoping repository base packages. Base packages define the starting points for scanning for repository interface definitions, which implies having repository definitions located in the appropriate packages. By default, annotation-driven configuration uses the package of the configuration class. The <<repositories.create-instances.spring,base package in XML-based configuration>> is mandatory.",
                "-The last way to distinguish repositories is scoping repository base packages. Base packages define the starting points for scanning for repository interface definitions which  implies to have repository definitions located in the appropriate packages. By default, annotation-driven configuration uses the package of the configuration class. The <<repositories.create-instances.spring,base package in XML-based configuration>> is mandatory.",
                "+The following example shows annotation-driven configuration of base packages:",
                "@@ -417,21 +438,26 @@ interface Configuration { }",
                " [[repositories.query-methods.details]]",
                "-== Defining query methods",
                "+== Defining Query Methods",
                "-The repository proxy has two ways to derive a store-specific query from the method name. It can derive the query from the method name directly, or by using a manually defined query. Available options depend on the actual store. However, there's got to be a strategy that decides what actual query is created. Let's have a look at the available options.",
                "+The repository proxy has two ways to derive a store-specific query from the method name:",
                "+",
                "+* By deriving the query from the method name directly.",
                "+* By using a manually defined query.",
                "+",
                "+Available options depend on the actual store. However, there must be a strategy that decides what actual query is created. The next section describes the available options.",
                " [[repositories.query-methods.query-lookup-strategies]]",
                "-=== Query lookup strategies",
                "+=== Query Lookup Strategies",
                "-The following strategies are available for the repository infrastructure to resolve the query. You can configure the strategy at the namespace through the `query-lookup-strategy` attribute in case of XML configuration or via the `queryLookupStrategy` attribute of the Enable${store}Repositories annotation in case of Java config. Some strategies may not be supported for particular datastores.",
                "+The following strategies are available for the repository infrastructure to resolve the query. With XML configuration, you can configure the strategy at the namespace through the `query-lookup-strategy` attribute. For Java configuration, you can use the `queryLookupStrategy` attribute of the `Enable${store}Repositories` annotation. Some strategies may not be supported for particular datastores.",
                "-- `CREATE` attempts to construct a store-specific query from the query method name. The general approach is to remove a given set of well-known prefixes from the method name and parse the rest of the method. Read more about query construction in <<repositories.query-methods.query-creation>>.",
                "+- `CREATE` attempts to construct a store-specific query from the query method name. The general approach is to remove a given set of well known prefixes from the method name and parse the rest of the method. You can read more about query construction in \"`<<repositories.query-methods.query-creation>>`\".",
                "-- `USE_DECLARED_QUERY` tries to find a declared query and will throw an exception in case it can't find one. The query can be defined by an annotation somewhere or declared by other means. Consult the documentation of the specific store to find available options for that store. If the repository infrastructure does not find a declared query for the method at bootstrap time, it fails.",
                "+- `USE_DECLARED_QUERY` tries to find a declared query and throws an exception if cannot find one. The query can be defined by an annotation somewhere or declared by other means. Consult the documentation of the specific store to find available options for that store. If the repository infrastructure does not find a declared query for the method at bootstrap time, it fails.",
                "-- `CREATE_IF_NOT_FOUND` (default) combines `CREATE` and `USE_DECLARED_QUERY`. It looks up a declared query first, and if no declared query is found, it creates a custom method name-based query. This is the default lookup strategy and thus will be used if you do not configure anything explicitly. It allows quick query definition by method names but also custom-tuning of these queries by introducing declared queries as needed.",
                "+- `CREATE_IF_NOT_FOUND` (default) combines `CREATE` and `USE_DECLARED_QUERY`. It looks up a declared query first, and, if no declared query is found, it creates a custom method name-based query. This is the default lookup strategy and, thus, is used if you do not configure anything explicitly. It allows quick query definition by method names but also custom-tuning of these queries by introducing declared queries as needed.",
                " [[repositories.query-methods.query-creation]]",
                "-=== Query creation",
                "+=== Query Creation",
                "-The query builder mechanism built into Spring Data repository infrastructure is useful for building constraining queries over entities of the repository. The mechanism strips the prefixes `find\u00e2\u0080\u00a6By`, `read\u00e2\u0080\u00a6By`, `query\u00e2\u0080\u00a6By`, `count\u00e2\u0080\u00a6By`, and `get\u00e2\u0080\u00a6By` from the method and starts parsing the rest of it. The introducing clause can contain further expressions such as a `Distinct` to set a distinct flag on the query to be created. However, the first `By` acts as delimiter to indicate the start of the actual criteria. At a very basic level you can define conditions on entity properties and concatenate them with `And` and `Or`.",
                "+The query builder mechanism built into Spring Data repository infrastructure is useful for building constraining queries over entities of the repository. The mechanism strips the prefixes `find\u00e2\u0080\u00a6By`, `read\u00e2\u0080\u00a6By`, `query\u00e2\u0080\u00a6By`, `count\u00e2\u0080\u00a6By`, and `get\u00e2\u0080\u00a6By` from the method and starts parsing the rest of it. The introducing clause can contain further expressions, such as a `Distinct` to set a distinct flag on the query to be created. However, the first `By` acts as delimiter to indicate the start of the actual criteria. At a very basic level, you can define conditions on entity properties and concatenate them with `And` and `Or`. The following example shows how to create a number of queries:",
                "@@ -461,14 +487,14 @@ interface PersonRepository extends Repository<User, Long> {",
                "-The actual result of parsing the method depends on the persistence store for which you create the query. However, there are some general things to notice.",
                "+The actual result of parsing the method depends on the persistence store for which you create the query. However, there are some general things to notice:",
                "-- The expressions are usually property traversals combined with operators that can be concatenated. You can combine property expressions with `AND` and `OR`. You also get support for operators such as `Between`, `LessThan`, `GreaterThan`, `Like` for the property expressions. The supported operators can vary by datastore, so consult the appropriate part of your reference documentation.",
                "+- The expressions are usually property traversals combined with operators that can be concatenated. You can combine property expressions with `AND` and `OR`. You also get support for operators such as `Between`, `LessThan`, `GreaterThan`, and `Like` for the property expressions. The supported operators can vary by datastore, so consult the appropriate part of your reference documentation.",
                "-- The method parser supports setting an `IgnoreCase` flag for individual properties (for example, `findByLastnameIgnoreCase(\u00e2\u0080\u00a6)`) or for all properties of a type that support ignoring case (usually `String` instances, for example, `findByLastnameAndFirstnameAllIgnoreCase(\u00e2\u0080\u00a6)`). Whether ignoring cases is supported may vary by store, so consult the relevant sections in the reference documentation for the store-specific query method.",
                "+- The method parser supports setting an `IgnoreCase` flag for individual properties (for example, `findByLastnameIgnoreCase(\u00e2\u0080\u00a6)`) or for all properties of a type that supports ignoring case (usually `String` instances -- for example, `findByLastnameAndFirstnameAllIgnoreCase(\u00e2\u0080\u00a6)`). Whether ignoring cases is supported may vary by store, so consult the relevant sections in the reference documentation for the store-specific query method.",
                "-- You can apply static ordering by appending an `OrderBy` clause to the query method that references a property and by providing a sorting direction (`Asc` or `Desc`). To create a query method that supports dynamic sorting, see <<repositories.special-parameters>>.",
                "+- You can apply static ordering by appending an `OrderBy` clause to the query method that references a property and by providing a sorting direction (`Asc` or `Desc`). To create a query method that supports dynamic sorting, see \"`<<repositories.special-parameters>>`\".",
                " [[repositories.query-methods.query-property-expressions]]",
                "-=== Property expressions",
                "+=== Property Expressions",
                "-Property expressions can refer only to a direct property of the managed entity, as shown in the preceding example. At query creation time you already make sure that the parsed property is a property of the managed domain class. However, you can also define constraints by traversing nested properties. Assume a `Person` has an `Address` with a `ZipCode`. In that case a method name of",
                "+Property expressions can refer only to a direct property of the managed entity, as shown in the preceding example. At query creation time, you already make sure that the parsed property is a property of the managed domain class. However, you can also define constraints by traversing nested properties. Consider the following method signature:",
                "@@ -479,7 +505,7 @@ List<Person> findByAddressZipCode(ZipCode zipCode);",
                "-creates the property traversal `x.address.zipCode`. The resolution algorithm starts with interpreting the entire part (`AddressZipCode`) as the property and checks the domain class for a property with that name (uncapitalized). If the algorithm succeeds it uses that property. If not, the algorithm splits up the source at the camel case parts from the right side into a head and a tail and tries to find the corresponding property, in our example, `AddressZip` and `Code`. If the algorithm finds a property with that head it takes the tail and continue building the tree down from there, splitting the tail up in the way just described. If the first split does not match, the algorithm move the split point to the left (`Address`, `ZipCode`) and continues.",
                "+Assume a `Person` has an `Address` with a `ZipCode`. In that case, the method creates the property traversal `x.address.zipCode`. The resolution algorithm starts by interpreting the entire part (`AddressZipCode`) as the property and checks the domain class for a property with that name (uncapitalized). If the algorithm succeeds, it uses that property. If not, the algorithm splits up the source at the camel case parts from the right side into a head and a tail and tries to find the corresponding property -- in our example, `AddressZip` and `Code`. If the algorithm finds a property with that head, it takes the tail and continues building the tree down from there, splitting the tail up in the way just described. If the first split does not match, the algorithm moves the split point to the left (`Address`, `ZipCode`) and continues.",
                "-Although this should work for most cases, it is possible for the algorithm to select the wrong property. Suppose the `Person` class has an `addressZip` property as well. The algorithm would match in the first split round already and essentially choose the wrong property and finally fail (as the type of `addressZip` probably has no `code` property).",
                "+Although this should work for most cases, it is possible for the algorithm to select the wrong property. Suppose the `Person` class has an `addressZip` property as well. The algorithm would match in the first split round already, choose the wrong property, and fail (as the type of `addressZip` probably has no `code` property).",
                "-To resolve this ambiguity you can use `\\_` inside your method name to manually define traversal points. So our method name would end up like so:",
                "+To resolve this ambiguity you can use `\\_` inside your method name to manually define traversal points. So our method name would be as follows:",
                "@@ -490,3 +516,3 @@ List<Person> findByAddress_ZipCode(ZipCode zipCode);",
                "-As we treat underscore as a reserved character we strongly advise to follow standard Java naming conventions (i.e. *not* using underscores in property names but camel case instead).",
                "+Because we treat the underscore character as a reserved character, we strongly advise following standard Java naming conventions (that is, not using underscores in property names but using camel case instead).",
                "@@ -494,5 +520,5 @@ As we treat underscore as a reserved character we strongly advise to follow stan",
                " === Special parameter handling",
                "-To handle parameters in your query you simply define method parameters as already seen in the examples above. Besides that the infrastructure will recognize certain specific types like `Pageable` and `Sort` to apply pagination and sorting to your queries dynamically.",
                "+To handle parameters in your query, define method parameters as already seen in the preceding examples. Besides that, the infrastructure recognizes certain specific types like `Pageable` and `Sort`, to apply pagination and sorting to your queries dynamically. The following example demonstrates these features:",
                "-.Using Pageable, Slice and Sort in query methods",
                "+.Using `Pageable`, `Slice`, and `Sort` in query methods",
                " ====",
                "@@ -510,13 +536,13 @@ List<User> findByLastname(String lastname, Pageable pageable);",
                "-The first method allows you to pass an `org.springframework.data.domain.Pageable` instance to the query method to dynamically add paging to your statically defined query. A `Page` knows about the total number of elements and pages available. It does so by the infrastructure triggering a count query to calculate the overall number. As this might be expensive depending on the store used, `Slice` can be used as return instead. A `Slice` only knows about whether there's a next `Slice` available which might be just sufficient when walking through a larger result set.",
                "+The first method lets you pass an `org.springframework.data.domain.Pageable` instance to the query method to dynamically add paging to your statically defined query. A `Page` knows about the total number of elements and pages available. It does so by the infrastructure triggering a count query to calculate the overall number. As this might be expensive (depending on the store used), you can instead return a `Slice`. A `Slice` only knows about whether a next `Slice` is available, which might be sufficient when walking through a larger result set.",
                "-Sorting options are handled through the `Pageable` instance too. If you only need sorting, simply add an `org.springframework.data.domain.Sort` parameter to your method. As you also can see, simply returning a `List` is possible as well. In this case the additional metadata required to build the actual `Page` instance will not be created (which in turn means that the additional count query that would have been necessary not being issued) but rather simply restricts the query to look up only the given range of entities.",
                "+Sorting options are handled through the `Pageable` instance, too. If you only need sorting, add an `org.springframework.data.domain.Sort` parameter to your method. As you can see, returning a `List` is also possible. In this case, the additional metadata required to build the actual `Page` instance is not created (which, in turn, means that the additional count query that would have been necessary is not issued). Rather, it restricts the query to look up only the given range of entities.",
                "-NOTE: To find out how many pages you get for a query entirely you have to trigger an additional count query. By default this query will be derived from the query you actually trigger.",
                "+NOTE: To find out how many pages you get for an entire query, you have to trigger an additional count query. By default, this query is derived from the query you actually trigger.",
                " [[repositories.limit-query-result]]",
                "-=== Limiting query results",
                "+=== Limiting Query Results",
                "-The results of query methods can be limited via the keywords `first` or `top`, which can be used interchangeably. An optional numeric value can be appended to top/first to specify the maximum result size to be returned.",
                "-If the number is left out, a result size of 1 is assumed.",
                "+The results of query methods can be limited by using the `first` or `top` keywords, which can be used interchangeably. An optional numeric value can be appended to `top` or `first` to specify the maximum result size to be returned.",
                "+If the number is left out, a result size of 1 is assumed. The following example shows how to limit the query size:",
                "@@ -540,7 +566,7 @@ List<User> findTop10ByLastname(String lastname, Pageable pageable);",
                "-The limiting expressions also support the `Distinct` keyword. Also, for the queries limiting the result set to one instance, wrapping the result into an `Optional` is supported.",
                "+The limiting expressions also support the `Distinct` keyword. Also, for the queries limiting the result set to one instance, wrapping the result into with the `Optional` keyword is supported.",
                "-If pagination or slicing is applied to a limiting query pagination (and the calculation of the number of pages available) then it is applied within the limited result.",
                "+If pagination or slicing is applied to a limiting query pagination (and the calculation of the number of pages available), it is applied within the limited result.",
                "-NOTE: Note that limiting the results in combination with dynamic sorting via a `Sort` parameter allows to express query methods for the 'K' smallest as well as for the 'K' biggest elements.",
                "+NOTE: Limiting the results in combination with dynamic sorting by using a `Sort` parameter lets you express query methods for the 'K' smallest as well as for the 'K' biggest elements.",
                "@@ -549,3 +575,3 @@ NOTE: Note that limiting the results in combination with dynamic sorting via a `",
                "-The results of query methods can be processed incrementally by using a Java 8 `Stream<T>` as return type. Instead of simply wrapping the query results in a `Stream` data store specific methods are used to perform the streaming.",
                "+The results of query methods can be processed incrementally by using a Java 8 `Stream<T>` as return type. Instead of wrapping the query results in a `Stream` data store, specific methods are used to perform the streaming, as shown in the following example:",
                "@@ -564,3 +590,3 @@ Stream<User> streamAllPaged(Pageable pageable);",
                " ====",
                "-NOTE: A `Stream` potentially wraps underlying data store specific resources and must therefore be closed after usage. You can either manually close the `Stream` using the `close()` method or by using a Java 7 try-with-resources block.",
                "+NOTE: A `Stream` potentially wraps underlying data store-specific resources and must, therefore, be closed after usage. You can either manually close the `Stream` by using the `close()` method or by using a Java 7 `try-with-resources` block, as shown in the following example:",
                "@@ -580,3 +606,3 @@ NOTE: Not all Spring Data modules currently support `Stream<T>` as a return type",
                "-Repository queries can be executed asynchronously using link:{spring-framework-docs}/integration.html#scheduling[Spring's asynchronous method execution capability]. This means the method will return immediately upon invocation and the actual query execution will occur in a task that has been submitted to a Spring TaskExecutor.",
                "+Repository queries can be run asynchronously by using link:{spring-framework-docs}/integration.html#scheduling[Spring's asynchronous method execution capability]. This means the method returns immediately upon invocation while the actual query execution occurs in a task that has been submitted to a Spring `TaskExecutor`. The following example shows a number of asynchronous queries:",
                "@@ -594,5 +620,5 @@ ListenableFuture<User> findOneByLastname(String lastname);    <3>",
                " ----",
                "-<1> Use `java.util.concurrent.Future` as return type.",
                "-<2> Use a Java 8 `java.util.concurrent.CompletableFuture` as return type.",
                "-<3> Use a `org.springframework.util.concurrent.ListenableFuture` as return type.",
                "+<1> Use `java.util.concurrent.Future` as the return type.",
                "+<2> Use a Java 8 `java.util.concurrent.CompletableFuture` as the return type.",
                "+<3> Use a `org.springframework.util.concurrent.ListenableFuture` as the return type.",
                " ====",
                "@@ -600,4 +626,4 @@ ListenableFuture<User> findOneByLastname(String lastname);    <3>",
                " [[repositories.create-instances]]",
                "-== Creating repository instances",
                "-In this section you create instances and bean definitions for the repository interfaces defined. One way to do so is using the Spring namespace that is shipped with each Spring Data module that supports the repository mechanism although we generally recommend to use the Java-Config style configuration.",
                "+== Creating Repository Instances",
                "+In this section, you create instances and bean definitions for the defined repository interfaces. One way to do so is by using the Spring namespace that is shipped with each Spring Data module that supports the repository mechanism, although we generally recommend using Java configuration.",
                "@@ -605,3 +631,3 @@ In this section you create instances and bean definitions for the repository int",
                " === XML configuration",
                "-Each Spring Data module includes a repositories element that allows you to simply define a base package that Spring scans for you.",
                "+Each Spring Data module includes a `repositories` element that lets you define a base package that Spring scans for you, as shown in the following example:",
                "@@ -626,8 +652,8 @@ Each Spring Data module includes a repositories element that allows you to simpl",
                "-In the preceding example, Spring is instructed to scan `com.acme.repositories` and all its sub-packages for interfaces extending `Repository` or one of its sub-interfaces. For each interface found, the infrastructure registers the persistence technology-specific `FactoryBean` to create the appropriate proxies that handle invocations of the query methods. Each bean is registered under a bean name that is derived from the interface name, so an interface of `UserRepository` would be registered under `userRepository`. The `base-package` attribute allows wildcards, so that you can define a pattern of scanned packages.",
                "+In the preceding example, Spring is instructed to scan `com.acme.repositories` and all its sub-packages for interfaces extending `Repository` or one of its sub-interfaces. For each interface found, the infrastructure registers the persistence technology-specific `FactoryBean` to create the appropriate proxies that handle invocations of the query methods. Each bean is registered under a bean name that is derived from the interface name, so an interface of `UserRepository` would be registered under `userRepository`. The `base-package` attribute allows wildcards so that you can define a pattern of scanned packages.",
                " ==== Using filters",
                "-By default the infrastructure picks up every interface extending the persistence technology-specific `Repository` sub-interface located under the configured base package and creates a bean instance for it. However, you might want more fine-grained control over which interfaces bean instances get created for. To do this you use `<include-filter />` and `<exclude-filter />` elements inside `<repositories />`. The semantics are exactly equivalent to the elements in Spring's context namespace. For details, see link:{spring-framework-docs}/core.html#beans-scanning-filters[Spring reference documentation] on these elements.",
                "+By default, the infrastructure picks up every interface extending the persistence technology-specific `Repository` sub-interface located under the configured base package and creates a bean instance for it. However, you might want more fine-grained control over which interfaces have bean instances created for them. To do so, use `<include-filter />` and `<exclude-filter />` elements inside the `<repositories />` element. The semantics are exactly equivalent to the elements in Spring's context namespace. For details, see the link:{spring-framework-docs}/core.html#beans-scanning-filters[Spring reference documentation] for these elements.",
                "-For example, to exclude certain interfaces from instantiation as repository, you could use the following configuration:",
                "+For example, to exclude certain interfaces from instantiation as repository beans, you could use the following configuration:",
                "@@ -643,3 +669,3 @@ For example, to exclude certain interfaces from instantiation as repository, you",
                "-This example excludes all interfaces ending in `SomeRepository` from being instantiated.",
                "+The preceding example excludes all interfaces ending in `SomeRepository` from being instantiated.",
                "@@ -647,5 +673,5 @@ This example excludes all interfaces ending in `SomeRepository` from being insta",
                " === JavaConfig",
                "-The repository infrastructure can also be triggered using a store-specific `@Enable${store}Repositories` annotation on a JavaConfig class. For an introduction into Java-based configuration of the Spring container, see the reference documentation.footnote:[link:{spring-framework-docs}/core.html#beans-java[JavaConfig in the Spring reference documentation]]",
                "+The repository infrastructure can also be triggered by using a store-specific `@Enable${store}Repositories` annotation on a JavaConfig class. For an introduction into Java-based configuration of the Spring container, see link:{spring-framework-docs}/core.html#beans-java[JavaConfig in the Spring reference documentation].",
                "-A sample configuration to enable Spring Data repositories looks something like this.",
                "+A sample configuration to enable Spring Data repositories resembles the following:",
                "@@ -667,3 +693,3 @@ class ApplicationConfiguration {",
                "-NOTE: The sample uses the JPA-specific annotation, which you would change according to the store module you actually use. The same applies to the definition of the `EntityManagerFactory` bean. Consult the sections covering the store-specific configuration.",
                "+NOTE: The preceding example uses the JPA-specific annotation, which you would change according to the store module you actually use. The same applies to the definition of the `EntityManagerFactory` bean. See the sections covering the store-specific configuration.",
                "@@ -671,3 +697,3 @@ NOTE: The sample uses the JPA-specific annotation, which you would change accord",
                " === Standalone usage",
                "-You can also use the repository infrastructure outside of a Spring container, e.g. in CDI environments. You still need some Spring libraries in your classpath, but generally you can set up repositories programmatically as well. The Spring Data modules that provide repository support ship a persistence technology-specific RepositoryFactory that you can use as follows.",
                "+You can also use the repository infrastructure outside of a Spring container -- for example, in CDI environments. You still need some Spring libraries in your classpath, but, generally, you can set up repositories programmatically as well. The Spring Data modules that provide repository support ship a persistence technology-specific `RepositoryFactory` that you can use as follows:",
                "@@ -683,10 +709,10 @@ UserRepository repository = factory.getRepository(UserRepository.class);",
                " [[repositories.custom-implementations]]",
                "-== Custom implementations for Spring Data repositories",
                "-In this section you will learn about repository customization and how fragments form a composite repository.",
                "+== Custom Implementations for Spring Data Repositories",
                "+This section covers repository customization and how fragments form a composite repository.",
                "-When query method require a different behavior or can't be implemented by query derivation than it's necessary to provide a custom implementation. Spring Data repositories easily allow you to provide custom repository code and integrate it with generic CRUD abstraction and query method functionality.",
                "+When a query method requires a different behavior or cannot be implemented by query derivation, then it is necessary to provide a custom implementation. Spring Data repositories let you provide custom repository code and integrate it with generic CRUD abstraction and query method functionality.",
                " [[repositories.single-repository-behavior]]",
                "-=== Customizing individual repositories",
                "-To enrich a repository with custom functionality, you first define a fragment interface and an implementation for the custom functionality. Then let your repository interface additionally extend from the fragment interface.",
                "+=== Customizing Individual Repositories",
                "+To enrich a repository with custom functionality, you must first define a fragment interface and an implementation for the custom functionality, as shown in the following example:",
                "@@ -702,2 +728,4 @@ interface CustomizedUserRepository {",
                "+Then you can let your repository interface additionally extend from the fragment interface, as shown in the following example:",
                "+",
                " .Implementation of custom repository functionality",
                "@@ -715,5 +743,7 @@ class CustomizedUserRepositoryImpl implements CustomizedUserRepository {",
                "-NOTE: The most important bit for the class to be found is the `Impl` postfix of the name on it compared to the fragment interface.",
                "+NOTE: The most important part of the class name that corresponds to the fragment interface is the `Impl` postfix.",
                "+",
                "+The implementation itself does not depend on Spring Data and can be a regular Spring bean. Consequently, you can use standard dependency injection behavior to inject references to other beans (such as a `JdbcTemplate`), take part in aspects, and so on.",
                "-The implementation itself does not depend on Spring Data and can be a regular Spring bean. So you can use standard dependency injection behavior to inject references to other beans like a `JdbcTemplate`, take part in aspects, and so on.",
                "+You can let your repository interface extend the fragment interface, as shown in the following example:",
                "@@ -730,5 +760,7 @@ interface UserRepository extends CrudRepository<User, Long>, CustomizedUserRepos",
                "-Let your repository interface extend the fragment one. Doing so combines the CRUD and custom functionality and makes it available to clients.",
                "+Extending the fragment interface with your repository interface combines the CRUD and custom functionality and makes it available to clients.",
                "-Spring Data repositories are implemented by using fragments that form a repository composition. Fragments are the base repository, functional aspects such as <<core.extensions.querydsl,QueryDsl>> and custom interfaces along with their implementation. Each time you add an interface to your repository interface, you enhance the composition by adding a fragment. The base repository and repository aspect implementations are provided by each Spring Data module.",
                "+Spring Data repositories are implemented by using fragments that form a repository composition. Fragments are the base repository, functional aspects (such as <<core.extensions.querydsl,QueryDsl>>), and custom interfaces along with their implementation. Each time you add an interface to your repository interface, you enhance the composition by adding a fragment. The base repository and repository aspect implementations are provided by each Spring Data module.",
                "+",
                "+The following example shows custom interfaces and their implementations:",
                "@@ -769,2 +801,6 @@ class ContactRepositoryImpl implements ContactRepository {",
                "+// TODO Did you mean to have EmployeeRepositoryImpl after EmployeeRepository? ContactRepositoryImpl comes as a surprise.",
                "+",
                "+The following example shows the interface for a custom repository that extends `CrudRepository`:",
                "+",
                " .Changes to your repository interface",
                "@@ -780,3 +816,5 @@ interface UserRepository extends CrudRepository<User, Long>, HumanRepository, Co",
                "-Repositories may be composed of multiple custom implementations that are imported in the order of their declaration. Custom implementations have a higher priority than the base implementation and repository aspects. This ordering allows you to override base repository and aspect methods and resolves ambiguity if two fragments contribute the same method signature. Repository fragments are not limited to be used in a single repository interface. Multiple repositories may use a fragment interface to reuse customizations across different repositories.",
                "+Repositories may be composed of multiple custom implementations that are imported in the order of their declaration. Custom implementations have a higher priority than the base implementation and repository aspects. This ordering lets you override base repository and aspect methods and resolves ambiguity if two fragments contribute the same method signature. Repository fragments are not limited to use in a single repository interface. Multiple repositories may use a fragment interface, letting you reuse customizations across different repositories.",
                "+",
                "+The following example shows a repository fragment and its implementation:",
                "@@ -799,2 +837,4 @@ class CustomizedSaveImpl<T> implements CustomizedSave<T> {",
                "+The following example shows a repository that uses the preceding repository fragment:",
                "+",
                " .Customized repository interfaces",
                "@@ -812,3 +852,3 @@ interface PersonRepository extends CrudRepository<Person, Long>, CustomizedSave<",
                " ==== Configuration",
                "-If you use namespace configuration, the repository infrastructure tries to autodetect custom implementation fragments by scanning for classes below the package we found a repository in. These classes need to follow the naming convention of appending the namespace element's attribute `repository-impl-postfix` to the found fragment interface name. This postfix defaults to `Impl`.",
                "+If you use namespace configuration, the repository infrastructure tries to autodetect custom implementation fragments by scanning for classes below the package in which it found a repository. These classes need to follow the naming convention of appending the namespace element's `repository-impl-postfix` attribute to the fragment interface name. This postfix defaults to `Impl`. The following example shows a repository that uses the default postfix and a repository that sets a custom value for the postfix:",
                "@@ -820,3 +860,3 @@ If you use namespace configuration, the repository infrastructure tries to autod",
                "-<repositories base-package=\"com.acme.repository\" repository-impl-postfix=\"FooBar\" />",
                "+<repositories base-package=\"com.acme.repository\" repository-impl-postfix=\"MyPostfix\" />",
                " ----",
                "@@ -824,11 +864,11 @@ If you use namespace configuration, the repository infrastructure tries to autod",
                "-The first configuration example will try to look up a class `com.acme.repository.CustomizedUserRepositoryImpl` to act as custom repository implementation, whereas the second example will try to lookup `com.acme.repository.CustomizedUserRepositoryFooBar`.",
                "+The first configuration in the preceding example tries to look up a class called `com.acme.repository.CustomizedUserRepositoryImpl` to act as a custom repository implementation. The second example tries to lookup `com.acme.repository.CustomizedUserRepositoryMyPostfix`.",
                " [[repositories.single-repository-behaviour.ambiguity]]",
                "-===== Resolution of ambiguity",
                "+===== Resolution of Ambiguity",
                "-If multiple implementations with matching class names get found in different packages, Spring Data uses the bean names to identify the correct one to use.",
                "+If multiple implementations with matching class names are found in different packages, Spring Data uses the bean names to identify which one to use.",
                "-Given the following two custom implementations for the `CustomizedUserRepository` introduced above the first implementation will get picked.",
                "-Its bean name is `customizedUserRepositoryImpl` matches that of the fragment interface (`CustomizedUserRepository`) plus the postfix `Impl`.",
                "+Given the following two custom implementations for the `CustomizedUserRepository` shown earlier, the first implementation is used.",
                "+Its bean name is `customizedUserRepositoryImpl`, which matches that of the fragment interface (`CustomizedUserRepository`) plus the postfix `Impl`.",
                "@@ -857,7 +897,8 @@ class CustomizedUserRepositoryImpl implements CustomizedUserRepository {",
                "-If you annotate the `UserRepository` interface with `@Component(\"specialCustom\")` the bean name plus `Impl` matches the one defined for the repository implementation in `com.acme.impl.two` and it will be picked instead of the first one.",
                "+If you annotate the `UserRepository` interface with `@Component(\"specialCustom\")`, the bean name plus `Impl` then matches the one defined for the repository implementation in `com.acme.impl.two`, and it is used instead of the first one.",
                "-===== Manual wiring",
                "+[[repositories.manual-wiring]]",
                "+===== Manual Wiring",
                "-The approach just shown works well if your custom implementation uses annotation-based configuration and autowiring only, as it will be treated as any other Spring bean. If your implementation fragment bean needs special wiring, you simply declare the bean and name it after the conventions just described. The infrastructure will then refer to the manually defined bean definition by name instead of creating one itself.",
                "+If your custom implementation uses annotation-based configuration and autowiring only, the preceding approach shown works well, because it is treated as any other Spring bean. If your implementation fragment bean needs special wiring, you can declare the bean and name it according to the conventions described in the <<repositories.single-repository-behaviour.ambiguity,preceding section>>. The infrastructure then refers to the manually defined bean definition by name instead of creating one itself. The following example shows how to manually wire a custom implementation:",
                "@@ -876,5 +917,5 @@ The approach just shown works well if your custom implementation uses annotation",
                " [[repositories.customize-base-repository]]",
                "-=== Customize the base repository",
                "+=== Customize the Base Repository",
                "-The preceding approach requires customization of all repository interfaces when you want to customize the base repository behavior, so all repositories are affected. To change behavior for all repositories, you need to create an implementation that extends the persistence technology-specific repository base class. This class will then act as a custom base class for the repository proxies.",
                "+The approach described in the <<repositories.manual-wiring,preceding section>> requires customization of each repository interfaces when you want to customize the base repository behavior so that all repositories are affected. To instead change behavior for all repositories, you can create an implementation that extends the persistence technology-specific repository base class. This class then acts as a custom base class for the repository proxies, as shown in the following example:",
                "@@ -905,5 +946,5 @@ class MyRepositoryImpl<T, ID extends Serializable>",
                "-WARNING: The class needs to have a constructor of the super class which the store-specific repository factory implementation is using. In case the repository base class has multiple constructors, override the one taking an `EntityInformation` plus a store specific infrastructure object (e.g. an `EntityManager` or a template class).",
                "+CAUTION: The class needs to have a constructor of the super class which the store-specific repository factory implementation uses. If the repository base class has multiple constructors, override the one taking an `EntityInformation` plus a store specific infrastructure object (such as an `EntityManager` or a template class).",
                "-The final step is to make the Spring Data infrastructure aware of the customized repository base class. In JavaConfig this is achieved by using the `repositoryBaseClass` attribute of the `@Enable\u00e2\u0080\u00a6Repositories` annotation:",
                "+The final step is to make the Spring Data infrastructure aware of the customized repository base class. In Java configuration, you can do so by using the `repositoryBaseClass` attribute of the `@Enable\u00e2\u0080\u00a6Repositories` annotation, as shown in the following example:",
                "@@ -919,3 +960,3 @@ class ApplicationConfiguration { \u00e2\u0080\u00a6 }",
                "-A corresponding attribute is available in the XML namespace.",
                "+A corresponding attribute is available in the XML namespace, as shown in the following example:",
                "@@ -931,3 +972,3 @@ A corresponding attribute is available in the XML namespace.",
                " [[core.domain-events]]",
                "-== Publishing events from aggregate roots",
                "+== Publishing Events from Aggregate Roots",
                "@@ -935,3 +976,3 @@ Entities managed by repositories are aggregate roots.",
                " In a Domain-Driven Design application, these aggregate roots usually publish domain events.",
                "-Spring Data provides an annotation `@DomainEvents` you can use on a method of your aggregate root to make that publication as easy as possible.",
                "+Spring Data provides an annotation called `@DomainEvents` that you can use on a method of your aggregate root to make that publication as easy as possible, as shown in the following example:",
                "@@ -954,12 +995,12 @@ class AnAggregateRoot {",
                " ----",
                "-<1> The method using `@DomainEvents` can either return a single event instance or a collection of events. It must not take any arguments.",
                "-<2> After all events have been published, a method annotated with `@AfterDomainEventPublication`. It e.g. can be used to potentially clean the list of events to be published.",
                "+<1> The method using `@DomainEvents` can return either a single event instance or a collection of events. It must not take any arguments.",
                "+<2> After all events have been published, we have a method annotated with `@AfterDomainEventPublication`. It can be used to potentially clean the list of events to be published (among other uses).",
                " ====",
                "-The methods will be called every time one of a Spring Data repository's `save(\u00e2\u0080\u00a6)` methods is called.",
                "+The methods are called every time one of a Spring Data repository's `save(\u00e2\u0080\u00a6)` methods is called.",
                " [[core.extensions]]",
                "-== Spring Data extensions",
                "+== Spring Data Extensions",
                "-This section documents a set of Spring Data extensions that enable Spring Data usage in a variety of contexts. Currently most of the integration is targeted towards Spring MVC.",
                "+This section documents a set of Spring Data extensions that enable Spring Data usage in a variety of contexts. Currently, most of the integration is targeted towards Spring MVC.",
                "@@ -968,5 +1009,5 @@ This section documents a set of Spring Data extensions that enable Spring Data u",
                "-http://www.querydsl.com/[Querydsl] is a framework which enables the construction of statically typed SQL-like queries via its fluent API.",
                "+http://www.querydsl.com/[Querydsl] is a framework that enables the construction of statically typed SQL-like queries through its fluent API.",
                "-Several Spring Data modules offer integration with Querydsl via `QuerydslPredicateExecutor`.",
                "+Several Spring Data modules offer integration with Querydsl through `QuerydslPredicateExecutor`, as shown in the following example:",
                "@@ -992,6 +1033,6 @@ public interface QuerydslPredicateExecutor<T> {",
                " <3> Returns the number of entities matching the `Predicate`.",
                "-<4> Returns if an entity that matches the `Predicate` exists.",
                "+<4> Returns whether an entity that matches the `Predicate` exists.",
                " ====",
                "-To make use of Querydsl support simply extend `QuerydslPredicateExecutor` on your repository interface.",
                "+To make use of Querydsl support, extend `QuerydslPredicateExecutor` on your repository interface, as shown in the following example",
                "@@ -1007,3 +1048,3 @@ interface UserRepository extends CrudRepository<User, Long>, QuerydslPredicateEx",
                "-The above enables to write typesafe queries using Querydsl `Predicate` s.",
                "+The preceding example lets you write typesafe queries using Querydsl `Predicate` instances, as shown in the following example:",
                "@@ -1020,5 +1061,5 @@ userRepository.findAll(predicate);",
                "-NOTE: This section contains the documentation for the Spring Data web support as it is implemented as of Spring Data Commons in the 1.6 range. As it the newly introduced support changes quite a lot of things we kept the documentation of the former behavior in <<web.legacy>>.",
                "+NOTE: This section contains the documentation for the Spring Data web support as it is implemented in the current (and later) versions of Spring Data Commons. As the newly introduced support changes many things, we kept the documentation of the former behavior in <<web.legacy>>.",
                "-Spring Data modules ships with a variety of web support if the module supports the repository programming model. The web related stuff requires Spring MVC JARs on the classpath, some of them even provide integration with Spring HATEOAS footnote:[Spring HATEOAS - link:$$https://github.com/SpringSource/spring-hateoas$$[https://github.com/SpringSource/spring-hateoas]]. In general, the integration support is enabled by using the `@EnableSpringDataWebSupport` annotation in your JavaConfig configuration class.",
                "+Spring Data modules that support the repository programming model ship with a variety of web support. The web related components require Spring MVC JARs to be on the classpath. Some of them even provide integration with https://github.com/SpringSource/spring-hateoas[Spring HATEOAS]. In general, the integration support is enabled by using the `@EnableSpringDataWebSupport` annotation in your JavaConfig configuration class, as shown in the following example:",
                "@@ -1037,3 +1078,3 @@ The `@EnableSpringDataWebSupport` annotation registers a few components we will",
                "-Alternatively, if you are using XML configuration, register either `SpringDataWebSupport` or `HateoasAwareSpringDataWebSupport` as Spring beans:",
                "+Alternatively, if you use XML configuration, register either `SpringDataWebConfiguration` or `HateoasAwareSpringDataWebConfiguration` as Spring beans, as shown in the following example (for `SpringDataWebConfiguration`):",
                "@@ -1045,3 +1086,3 @@ Alternatively, if you are using XML configuration, register either `SpringDataWe",
                "-<!-- If you're using Spring HATEOAS as well register this one *instead* of the former -->",
                "+<!-- If you use Spring HATEOAS, register this one *instead* of the former -->",
                " <bean class=\"org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration\" />",
                "@@ -1051,11 +1092,11 @@ Alternatively, if you are using XML configuration, register either `SpringDataWe",
                " [[core.web.basic]]",
                "-==== Basic web support",
                "-The configuration setup shown above will register a few basic components:",
                "+==== Basic Web Support",
                "+The configuration shown in the <<core.web,previous section>> registers a few basic components:",
                "-- A `DomainClassConverter` to enable Spring MVC to resolve instances of repository managed domain classes from request parameters or path variables.",
                "-- `HandlerMethodArgumentResolver` implementations to let Spring MVC resolve `Pageable` and `Sort` instances from request parameters.",
                "+- A <<core.web.basic.domain-class-converter>> to let Spring MVC resolve instances of repository-managed domain classes from request parameters or path variables.",
                "+- <<core.web.basic.paging-and-sorting,`HandlerMethodArgumentResolver`>> implementations to let Spring MVC resolve `Pageable` and `Sort` instances from request parameters.",
                " [[core.web.basic.domain-class-converter]]",
                "-===== DomainClassConverter",
                "-The `DomainClassConverter` allows you to use domain types in your Spring MVC controller method signatures directly, so that you don't have to manually lookup the instances via the repository:",
                "+===== `DomainClassConverter`",
                "+The `DomainClassConverter` lets you use domain types in your Spring MVC controller method signatures directly, so that you need not manually lookup the instances through the repository, as shown in the following example:",
                "@@ -1079,5 +1120,5 @@ class UserController {",
                "-As you can see the method receives a User instance directly and no further lookup is necessary. The instance can be resolved by letting Spring MVC convert the path variable into the id type of the domain class first and eventually access the instance through calling `findById(\u00e2\u0080\u00a6)` on the repository instance registered for the domain type.",
                "+As you can see, the method receives a `User` instance directly, and no further lookup is necessary. The instance can be resolved by letting Spring MVC convert the path variable into the `id` type of the domain class first and eventually access the instance through calling `findById(\u00e2\u0080\u00a6)` on the repository instance registered for the domain type.",
                "-NOTE: Currently the repository has to implement `CrudRepository` to be eligible to be discovered for conversion.",
                "+NOTE: Currently, the repository has to implement `CrudRepository` to be eligible to be discovered for conversion.",
                "@@ -1085,3 +1126,3 @@ NOTE: Currently the repository has to implement `CrudRepository` to be eligible",
                " ===== HandlerMethodArgumentResolvers for Pageable and Sort",
                "-The configuration snippet above also registers a `PageableHandlerMethodArgumentResolver` as well as an instance of `SortHandlerMethodArgumentResolver`. The registration enables `Pageable` and `Sort` being valid controller method arguments",
                "+The configuration snippet shown in the <<core.web.basic.domain-class-converter,previous section>> also registers a `PageableHandlerMethodArgumentResolver` as well as an instance of `SortHandlerMethodArgumentResolver`. The registration enables `Pageable` and `Sort` as valid controller method arguments, as shown in the following example:",
                "@@ -1111,13 +1152,13 @@ class UserController {",
                "-This method signature will cause Spring MVC try to derive a Pageable instance from the request parameters using the following default configuration:",
                "+The preceding method signature causes Spring MVC try to derive a `Pageable` instance from the request parameters by using the following default configuration:",
                "-.Request parameters evaluated for Pageable instances",
                "+.Request parameters evaluated for `Pageable` instances",
                " [options = \"autowidth\"]",
                " |===============",
                "-|`page`|Page you want to retrieve, 0 indexed and defaults to 0.",
                "-|`size`|Size of the page you want to retrieve, defaults to 20.",
                "-|`sort`|Properties that should be sorted by in the format `property,property(,ASC\\|DESC)`. Default sort direction is ascending. Use multiple `sort` parameters if you want to switch directions, e.g. `?sort=firstname&sort=lastname,asc`.",
                "+|`page`|Page you want to retrieve. 0-indexed and defaults to 0.",
                "+|`size`|Size of the page you want to retrieve. Defaults to 20.",
                "+|`sort`|Properties that should be sorted by in the format `property,property(,ASC\\|DESC)`. Default sort direction is ascending. Use multiple `sort` parameters if you want to switch directions -- for example, `?sort=firstname&sort=lastname,asc`.",
                " |===============",
                "-To customize this behavior register a bean implementing the interface `PageableHandlerMethodArgumentResolverCustomizer` or `SortHandlerMethodArgumentResolverCustomizer` respectively. It's `customize()` method will get called allowing you to change settings. Like in the following example.",
                "+To customize this behavior, register a bean implementing the `PageableHandlerMethodArgumentResolverCustomizer` interface or the `SortHandlerMethodArgumentResolverCustomizer` interface, respectively. Its `customize()` method gets called, letting you change settings, as shown in the following example:",
                "@@ -1130,5 +1171,5 @@ To customize this behavior register a bean implementing the interface `PageableH",
                "-If setting the properties of an existing `MethodArgumentResolver` isn't sufficient for your purpose extend either `SpringDataWebConfiguration` or the HATEOAS-enabled equivalent and override the `pageableResolver()` or `sortResolver()` methods and import your customized configuration file instead of using the `@Enable`-annotation.",
                "+If setting the properties of an existing `MethodArgumentResolver` is not sufficient for your purpose, extend either `SpringDataWebConfiguration` or the HATEOAS-enabled equivalent, override the `pageableResolver()` or `sortResolver()` methods, and import your customized configuration file instead of using the `@Enable` annotation.",
                "-In case you need multiple `Pageable` or `Sort` instances to be resolved from the request (for multiple tables, for example) you can use Spring's `@Qualifier` annotation to distinguish one from another. The request parameters then have to be prefixed with `${qualifier}_`. So for a method signature like this:",
                "+If you need multiple `Pageable` or `Sort` instances to be resolved from the request (for multiple tables, for example), you can use Spring's `@Qualifier` annotation to distinguish one from another. The request parameters then have to be prefixed with `${qualifier}_`. The followig example shows the resulting method signature:",
                "@@ -1137,13 +1178,13 @@ In case you need multiple `Pageable` or `Sort` instances to be resolved from the",
                " String showUsers(Model model,",
                "-      @Qualifier(\"foo\") Pageable first,",
                "-      @Qualifier(\"bar\") Pageable second) { \u00e2\u0080\u00a6 }",
                "+      @Qualifier(\"thing1\") Pageable first,",
                "+      @Qualifier(\"thing2\") Pageable second) { \u00e2\u0080\u00a6 }",
                " ----",
                "-you have to populate `foo_page` and `bar_page` etc.",
                "+you have to populate `thing1_page` and `thing2_page` and so on.",
                "-The default `Pageable` handed into the method is equivalent to a `new PageRequest(0, 20)` but can be customized using the `@PageableDefault` annotation on the `Pageable` parameter.",
                "+The default `Pageable` passed into the method is equivalent to a `new PageRequest(0, 20)` but can be customized by using the `@PageableDefault` annotation on the `Pageable` parameter.",
                " [[core.web.pageables]]",
                "-==== Hypermedia support for Pageables",
                "-Spring HATEOAS ships with a representation model class `PagedResources` that allows enriching the content of a `Page` instance with the necessary `Page` metadata as well as links to let the clients easily navigate the pages. The conversion of a Page to a `PagedResources` is done by an implementation of the Spring HATEOAS `ResourceAssembler` interface, the `PagedResourcesAssembler`.",
                "+==== Hypermedia Support for Pageables",
                "+Spring HATEOAS ships with a representation model class (`PagedResources`) that allows enriching the content of a `Page` instance with the necessary `Page` metadata as well as links to let the clients easily navigate the pages. The conversion of a Page to a `PagedResources` is done by an implementation of the Spring HATEOAS `ResourceAssembler` interface, called the `PagedResourcesAssembler`. The following example shows how to use a `PagedResourcesAssembler` as a controller method argument:",
                "@@ -1169,9 +1210,9 @@ class PersonController {",
                "-Enabling the configuration as shown above allows the `PagedResourcesAssembler` to be used as controller method argument. Calling `toResources(\u00e2\u0080\u00a6)` on it will cause the following:",
                "+Enabling the configuration as shown in the preceding example lets the `PagedResourcesAssembler` be used as a controller method argument. Calling `toResources(\u00e2\u0080\u00a6)` on it has the following effects:",
                "-- The content of the `Page` will become the content of the `PagedResources` instance.",
                "-- The `PagedResources` will get a `PageMetadata` instance attached populated with information form the `Page` and the underlying `PageRequest`.",
                "-- The `PagedResources` gets `prev` and `next` links attached depending on the page's state. The links will point to the URI the method invoked is mapped to. The pagination parameters added to the method will match the setup of the `PageableHandlerMethodArgumentResolver` to make sure the links can be resolved later on.",
                "+- The content of the `Page` becomes the content of the `PagedResources` instance.",
                "+- The `PagedResources` object gets a `PageMetadata` instance attached, and it is populated with information from the `Page` and the underlying `PageRequest`.",
                "+- The `PagedResources` may get `prev` and `next` links attached, depending on the page's state. The links point to the URI to which the method maps. The pagination parameters added to the method match the setup of the `PageableHandlerMethodArgumentResolver` to make sure the links can be resolved later.",
                "-Assume we have 30 Person instances in the database. You can now trigger a request `GET http://localhost:8080/persons` and you'll see something similar to this:",
                "+Assume we have 30 Person instances in the database. You can now trigger a request (`GET http://localhost:8080/persons`) and see output similar to the following:",
                "@@ -1194,8 +1235,8 @@ Assume we have 30 Person instances in the database. You can now trigger a reques",
                "-You see that the assembler produced the correct URI and also picks up the default configuration present to resolve the parameters into a `Pageable` for an upcoming request. This means, if you change that configuration, the links will automatically adhere to the change. By default the assembler points to the controller method it was invoked in but that can be customized by handing in a custom `Link` to be used as base to build the pagination links to overloads of the `PagedResourcesAssembler.toResource(\u00e2\u0080\u00a6)` method.",
                "+You see that the assembler produced the correct URI and also picked up the default configuration to resolve the parameters into a `Pageable` for an upcoming request. This means that, if you change that configuration, the links automatically adhere to the change. By default, the assembler points to the controller method it was invoked in, but that can be customized by handing in a custom `Link` to be used as base to build the pagination links, which overloads the `PagedResourcesAssembler.toResource(\u00e2\u0080\u00a6)` method.",
                " [[core.web.binding]]",
                "-==== Web databinding support",
                "+==== Web Databinding Support",
                "-Spring Data projections \u00e2\u0080\u0093 generally described in <<projections>> \u00e2\u0080\u0093 can be used to bind incoming request payloads by either using http://goessner.net/articles/JsonPath/[JSONPath] expressions (requires https://github.com/json-path/JsonPath[Jayway JasonPath] or https://www.w3.org/TR/xpath-31/[XPath] expressions (requires https://xmlbeam.org/[XmlBeam]).",
                "+Spring Data projections (described in <<projections>>) can be used to bind incoming request payloads by either using http://goessner.net/articles/JsonPath/[JSONPath] expressions (requires https://github.com/json-path/JsonPath[Jayway JsonPath] or https://www.w3.org/TR/xpath-31/[XPath] expressions (requires https://xmlbeam.org/[XmlBeam]), as shown in the following example:",
                "@@ -1219,7 +1260,7 @@ public interface UserPayload {",
                "-The type above can be used as Spring MVC handler method argument or via `ParameterizedTypeReference` on one of ``RestTemplate``'s methods.",
                "-The method declarations above would try to find `firstname` anywhere in the given document.",
                "-The `lastname` XML looup is performed on the top-level of the incoming document.",
                "-The JSON variant of that tries a top-level `lastname` first but also tries `lastname` nested in a `user` sub-document in case the former doesn't return a value.",
                "-That way changes if the structure of the source document can be mitigated easily without having to touch clients calling the exposed methods (usually a drawback of class-based payload binding).",
                "+The type shown in the preceding example can be used as a Spring MVC handler method argument or by using `ParameterizedTypeReference` on one of ``RestTemplate``'s methods.",
                "+The preceding method declarations would try to find `firstname` anywhere in the given document.",
                "+The `lastname` XML lookup is performed on the top-level of the incoming document.",
                "+The JSON variant of that tries a top-level `lastname` first but also tries `lastname` nested in a `user` sub-document if the former does not return a value.",
                "+That way, changes in the structure of the source document can be mitigated easily without having clients calling the exposed methods (usually a drawback of class-based payload binding).",
                "@@ -1228,4 +1269,4 @@ If the method returns a complex, non-interface type, a Jackson `ObjectMapper` is",
                "-For Spring MVC, the necessary converters are registered automatically, as soon as `@EnableSpringDataWebSupport` is active and the required dependencies are available on the classpath.",
                "-For usage with `RestTemplate` register a `ProjectingJackson2HttpMessageConverter` (JSON) or `XmlBeamHttpMessageConverter` manually.",
                "+For Spring MVC, the necessary converters are registered automatically as soon as `@EnableSpringDataWebSupport` is active and the required dependencies are available on the classpath.",
                "+For usage with `RestTemplate`, register a `ProjectingJackson2HttpMessageConverter` (JSON) or `XmlBeamHttpMessageConverter` manually.",
                "@@ -1234,7 +1275,7 @@ For more information, see the https://github.com/spring-projects/spring-data-exa",
                " [[core.web.type-safe]]",
                "-==== Querydsl web support",
                "+==== Querydsl Web Support",
                "-For those stores having http://www.querydsl.com/[QueryDSL] integration it is possible to derive queries from the attributes contained in a `Request` query string.",
                "+For those stores having http://www.querydsl.com/[QueryDSL] integration, it is possible to derive queries from the attributes contained in a `Request` query string.",
                "-This means that given the `User` object from previous samples a query string",
                "+Consider the following query string:",
                "@@ -1245,3 +1286,3 @@ This means that given the `User` object from previous samples a query string",
                "-can be resolved to",
                "+Given the `User` object from previous examples, a query string can be resolved to the following value by using the `QuerydslPredicateArgumentResolver`.",
                "@@ -1252,9 +1293,9 @@ QUser.user.firstname.eq(\"Dave\").and(QUser.user.lastname.eq(\"Matthews\"))",
                "-using the `QuerydslPredicateArgumentResolver`.",
                "+NOTE: The feature is automatically enabled, along with `@EnableSpringDataWebSupport`, when Querydsl is found on the classpath.",
                "-NOTE: The feature will be automatically enabled along `@EnableSpringDataWebSupport` when Querydsl is found on the classpath.",
                "+Adding a `@QuerydslPredicate` to the method signature provides a ready-to-use `Predicate`, which can be run by using the `QuerydslPredicateExecutor`.",
                "-Adding a `@QuerydslPredicate` to the method signature will provide a ready to use `Predicate` which can be executed via the `QuerydslPredicateExecutor`.",
                "+TIP: Type information is typically resolved from the method's return type. Since that information does not necessarily match the domain type, it might be a good idea to use the `root` attribute of `QuerydslPredicate`.",
                "-TIP: Type information is typically resolved from the methods return type. Since those information does not necessarily match the domain type it might be a good idea to use the `root` attribute of `QuerydslPredicate`.",
                "+The following exampe shows how to use `@QuerydslPredicate` in a method signature:",
                "@@ -1287,3 +1328,3 @@ The default binding is as follows:",
                "-Those bindings can be customized via the `bindings` attribute of `@QuerydslPredicate` or by making use of Java 8 `default methods` adding the `QuerydslBinderCustomizer` to the repository interface.",
                "+Those bindings can be customized through the `bindings` attribute of `@QuerydslPredicate` or by making use of Java 8 `default methods` and adding the `QuerydslBinderCustomizer` method to the repository interface.",
                "@@ -1307,6 +1348,6 @@ interface UserRepository extends CrudRepository<User, String>,",
                " <1> `QuerydslPredicateExecutor` provides access to specific finder methods for `Predicate`.",
                "-<2> `QuerydslBinderCustomizer` defined on the repository interface will be automatically picked up and shortcuts `@QuerydslPredicate(bindings=...)`.",
                "-<3> Define the binding for the `username` property to be a simple contains binding.",
                "-<4> Define the default binding for `String` properties to be a case insensitive contains match.",
                "-<5> Exclude the _password_ property from `Predicate` resolution.",
                "+<2> `QuerydslBinderCustomizer` defined on the repository interface is automatically picked up and shortcuts `@QuerydslPredicate(bindings=...)`.",
                "+<3> Define the binding for the `username` property to be a simple `contains` binding.",
                "+<4> Define the default binding for `String` properties to be a case-insensitive `contains` match.",
                "+<5> Exclude the `password` property from `Predicate` resolution.",
                " ====",
                "@@ -1314,4 +1355,4 @@ interface UserRepository extends CrudRepository<User, String>,",
                " [[core.repository-populators]]",
                "-=== Repository populators",
                "-If you work with the Spring JDBC module, you probably are familiar with the support to populate a `DataSource` using SQL scripts. A similar abstraction is available on the repositories level, although it does not use SQL as the data definition language because it must be store-independent. Thus the populators support XML (through Spring's OXM abstraction) and JSON (through Jackson) to define data with which to populate the repositories.",
                "+=== Repository Populators",
                "+If you work with the Spring JDBC module, you are probably familiar with the support to populate a `DataSource` with SQL scripts. A similar abstraction is available on the repositories level, although it does not use SQL as the data definition language because it must be store-independent. Thus, the populators support XML (through Spring's OXM abstraction) and JSON (through Jackson) to define data with which to populate the repositories.",
                "@@ -1332,3 +1373,3 @@ Assume you have a file `data.json` with the following content:",
                "-You can easily populate your repositories by using the populator elements of the repository namespace provided in Spring Data Commons. To populate the preceding data to your PersonRepository , do the following:",
                "+You can populate your repositories by using the populator elements of the repository namespace provided in Spring Data Commons. To populate the preceding data to your PersonRepository, declare a populator similar to the following:",
                "@@ -1353,8 +1394,8 @@ You can easily populate your repositories by using the populator elements of the",
                "-This declaration causes the `data.json` file to",
                "-be read and deserialized via a Jackson `ObjectMapper`.",
                "+The preceding declaration causes the `data.json` file to",
                "+be read and deserialized by a Jackson `ObjectMapper`.",
                "-The type to which the JSON object will be unmarshalled to will be determined by inspecting the `\\_class` attribute of the JSON document. The infrastructure will eventually select the appropriate repository to handle the object just deserialized.",
                "+The type to which the JSON object is unmarshalled is determined by inspecting the `\\_class` attribute of the JSON document. The infrastructure eventually selects the appropriate repository to handle the object that was deserialized.",
                "-To rather use XML to define the data the repositories shall be populated with, you can use the `unmarshaller-populator` element. You configure it to use one of the XML marshaller options Spring OXM provides you with. See the link:{spring-framework-docs}/data-access.html#oxm[Spring reference documentation] for details.",
                "+To instead use XML to define the data the repositories should be populated with, you can use the `unmarshaller-populator` element. You configure it to use one of the XML marshaller options available in Spring OXM. See the link:{spring-framework-docs}/data-access.html#oxm[Spring reference documentation] for details. The following example shows how to unmarshal a repository populator with JAXB:",
                "@@ -1384,72 +1425 @@ To rather use XML to define the data the repositories shall be populated with, y",
                " ====",
                "-",
                "-[[web.legacy]]",
                "-=== Legacy web support",
                "-",
                "-[[web-domain-class-binding]]",
                "-==== Domain class web binding for Spring MVC",
                "-",
                "-Given you are developing a Spring MVC web application you typically have to resolve domain class ids from URLs. By default your task is to transform that request parameter or URL part into the domain class to hand it to layers below then or execute business logic on the entities directly. This would look something like this:",
                "-",
                "-[source, java]",
                "-----",
                "-@Controller",
                "-@RequestMapping(\"/users\")",
                "-class UserController {",
                "-",
                "-  private final UserRepository userRepository;",
                "-",
                "-  UserController(UserRepository userRepository) {",
                "-    Assert.notNull(repository, \"Repository must not be null!\");",
                "-    this.userRepository = userRepository;",
                "-  }",
                "-",
                "-  @RequestMapping(\"/{id}\")",
                "-  String showUserForm(@PathVariable(\"id\") Long id, Model model) {",
                "-",
                "-    // Do null check for id",
                "-    User user = userRepository.findById(id);",
                "-    // Do null check for user",
                "-",
                "-    model.addAttribute(\"user\", user);",
                "-    return \"user\";",
                "-  }",
                "-}",
                "-----",
                "-",
                "-First you declare a repository dependency for each controller to look up the entity managed by the controller or repository respectively. Looking up the entity is boilerplate as well, as it's always a `findById(\u00e2\u0080\u00a6)` call. Fortunately Spring provides means to register custom components that allow conversion between a `String` value to an arbitrary type.",
                "-",
                "-[[web.legacy.property-editors]]",
                "-===== PropertyEditors",
                "-",
                "-For Spring versions before 3.0 simple Java `PropertyEditors` had to be used. To integrate with that, Spring Data offers a `DomainClassPropertyEditorRegistrar`, which looks up all Spring Data repositories registered in the `ApplicationContext` and registers a custom `PropertyEditor` for the managed domain class.",
                "-",
                "-[source, xml]",
                "-----",
                "-<bean class=\"\u00e2\u0080\u00a6.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">",
                "-  <property name=\"webBindingInitializer\">",
                "-    <bean class=\"\u00e2\u0080\u00a6.web.bind.support.ConfigurableWebBindingInitializer\">",
                "-      <property name=\"propertyEditorRegistrars\">",
                "-        <bean class=\"org.springframework.data.repository.support.DomainClassPropertyEditorRegistrar\" />",
                "-      </property>",
                "-    </bean>",
                "-  </property>",
                "-</bean>",
                "-----",
                "-",
                "-If you have configured Spring MVC as in the preceding example, you can configure your controller as follows, which reduces a lot of the clutter and boilerplate.",
                "-",
                "-[source, java]",
                "-----",
                "-@Controller",
                "-@RequestMapping(\"/users\")",
                "-class UserController {",
                "-",
                "-  @RequestMapping(\"/{id}\")",
                "-  String showUserForm(@PathVariable(\"id\") User user, Model model) {",
                "-",
                "-    model.addAttribute(\"user\", user);",
                "-    return \"userForm\";",
                "-  }",
                "-}",
                "-----",
                "diff --git a/src/main/asciidoc/repository-namespace-reference.adoc b/src/main/asciidoc/repository-namespace-reference.adoc",
                "index 5ec2bfb8d..fa1b0aee5 100644",
                "--- a/src/main/asciidoc/repository-namespace-reference.adoc",
                "+++ b/src/main/asciidoc/repository-namespace-reference.adoc",
                "@@ -5,4 +5,4 @@",
                " [[populator.namespace-dao-config]]",
                "-== The <repositories /> element",
                "-The `<repositories />` element triggers the setup of the Spring Data repository infrastructure. The most important attribute is `base-package` which defines the package to scan for Spring Data repository interfaces.footnote:[see <<repositories.create-instances.spring>>]",
                "+== The `<repositories />` Element",
                "+The `<repositories />` element triggers the setup of the Spring Data repository infrastructure. The most important attribute is `base-package`, which defines the package to scan for Spring Data repository interfaces. See \"`<<repositories.create-instances.spring>>`\". The following table describes the attributes of the `<repositories />` element:",
                "@@ -12,8 +12,7 @@ The `<repositories />` element triggers the setup of the Spring Data repository",
                " |Name|Description",
                "-|`base-package`|Defines the package to be used to be scanned for repository interfaces extending *Repository (actual interface is determined by specific Spring Data module) in auto detection mode. All packages below the configured package will be scanned, too. Wildcards are allowed.",
                "-|`repository-impl-postfix`|Defines the postfix to autodetect custom repository implementations. Classes whose names end with the configured postfix will be considered as candidates. Defaults to `Impl`.",
                "-|`query-lookup-strategy`|Determines the strategy to be used to create finder queries. See <<repositories.query-methods.query-lookup-strategies>> for details. Defaults to `create-if-not-found`.",
                "-|`named-queries-location`|Defines the location to look for a Properties file containing externally defined queries.",
                "-|`consider-nested-repositories`|Controls whether nested repository interface definitions should be considered. Defaults to `false`.",
                "+|`base-package`|Defines the package to be scanned for repository interfaces that extend `*Repository` (the actual interface is determined by the specific Spring Data module) in auto-detection mode. All packages below the configured package are scanned, too. Wildcards are allowed.",
                "+|`repository-impl-postfix`|Defines the postfix to autodetect custom repository implementations. Classes whose names end with the configured postfix are considered as candidates. Defaults to `Impl`.",
                "+|`query-lookup-strategy`|Determines the strategy to be used to create finder queries. See \"`<<repositories.query-methods.query-lookup-strategies>>`\" for details. Defaults to `create-if-not-found`.",
                "+|`named-queries-location`|Defines the location to search for a Properties file containing externally defined queries.",
                "+|`consider-nested-repositories`|Whether nested repository interface definitions should be considered. Defaults to `false`.",
                " |===============",
                "-",
                "diff --git a/src/main/asciidoc/repository-projections.adoc b/src/main/asciidoc/repository-projections.adoc",
                "index 3925fb54a..49ffcbbd3 100644",
                "--- a/src/main/asciidoc/repository-projections.adoc",
                "+++ b/src/main/asciidoc/repository-projections.adoc",
                "@@ -4,6 +4,6 @@",
                " Spring Data query methods usually return one or multiple instances of the aggregate root managed by the repository.",
                "-However, it might sometimes be desirable to rather project on certain attributes of those types.",
                "-Spring Data allows to model dedicated return types to more selectively retrieve partial views onto the managed aggregates.",
                "+However, it might sometimes be desirable to create projections based on certain attributes of those types.",
                "+Spring Data allows modeling dedicated return types, to more selectively retrieve partial views of the managed aggregates.",
                "-Imagine a sample repository and aggregate root type like this:",
                "+Imagine a repository and aggregate root type such as the following example:",
                "@@ -31,9 +31,9 @@ interface PersonRepository extends Repository<Person, UUID> {",
                "-Now imagine we'd want to retrieve the person's name attributes only.",
                "-What means does Spring Data offer to achieve this?",
                "+Now imagine that we want to retrieve the person's name attributes only.",
                "+What means does Spring Data offer to achieve this? The rest of this chapter answers that question.",
                " [[projections.interfaces]]",
                "-== Interface-based projections",
                "+== Interface-based Projections",
                "-The easiest way to limit the result of the queries to expose the name attributes only is by declaring an interface that will expose accessor methods for the properties to be read:",
                "+The easiest way to limit the result of the queries to only the name attributes is by declaring an interface that exposes accessor methods for the properties to be read, as shown in the following example:",
                "@@ -52,3 +52,3 @@ interface NamesOnly {",
                " The important bit here is that the properties defined here exactly match properties in the aggregate root.",
                "-This allows a query method to be added like this:",
                "+Doing so lets a query method be added as follows:",
                "@@ -65,6 +65,6 @@ interface PersonRepository extends Repository<Person, UUID> {",
                "-The query execution engine will create proxy instances of that interface at runtime for each element returned and forward calls to the exposed methods to the target object.",
                "+The query execution engine creates proxy instances of that interface at runtime for each element returned and forwards calls to the exposed methods to the target object.",
                " [[projections.interfaces.nested]]",
                "-Projections can be used recursively. If you wanted to include some of the `Address` information as well, create a projection interface for that and return that interface from the declaration of `getAddress()`.",
                "+Projections can be used recursively. If you want to include some of the `Address` information as well, create a projection interface for that and return that interface from the declaration of `getAddress()`, as shown in the following example:",
                "@@ -87,8 +87,8 @@ interface PersonSummary {",
                "-On method invocation, the `address` property of the target instance will be obtained and wrapped into a projecting proxy in turn.",
                "+On method invocation, the `address` property of the target instance is obtained and wrapped into a projecting proxy in turn.",
                " [[projections.interfaces.closed]]",
                "-=== Closed projections",
                "+=== Closed Projections",
                "-A projection interface whose accessor methods all match properties of the target aggregate are considered closed projections.",
                "+A projection interface whose accessor methods all match properties of the target aggregate is considered to be a closed projection. The following example (which we used earlier in this chapter, too) is a closed projection:",
                "@@ -106,9 +106,9 @@ interface NamesOnly {",
                "-If a closed projection is used, Spring Data modules can even optimize the query execution as we exactly know about all attributes that are needed to back the projection proxy.",
                "-For more details on that, please refer to the module specific part of the reference documentation.",
                "+If you use a closed projection, Spring Data can optimize the query execution, because we know about all the attributes that are needed to back the projection proxy.",
                "+For more details on that, see the module-specific part of the reference documentation.",
                " [[projections.interfaces.open]]",
                "-=== Open projections",
                "+=== Open Projections",
                "-Accessor methods in projection interfaces can also be used to compute new values by using the `@Value` annotation on it:",
                "+Accessor methods in projection interfaces can also be used to compute new values by using the `@Value` annotation, as shown in the following example:",
                "@@ -128,8 +128,8 @@ interface NamesOnly {",
                "-The aggregate root backing the projection is available via the `target` variable.",
                "-A projection interface using `@Value` an open projection.",
                "-Spring Data won't be able to apply query execution optimizations in this case as the SpEL expression could use any attributes of the aggregate root.",
                "+The aggregate root backing the projection is available in the `target` variable.",
                "+A projection interface using `@Value` is an open projection.",
                "+Spring Data cannot apply query execution optimizations in this case, because the SpEL expression could use any attribute of the aggregate root.",
                "-The expressions used in `@Value` shouldn't become too complex as you'd want to avoid programming in ``String``s.",
                "-For very simple expressions, one option might be to resort to default methods:",
                "+The expressions used in `@Value` should not be too complex -- you want to avoid programming in `String` variables.",
                "+For very simple expressions, one option might be to resort to default methods (introduced in Java 8), as shown in the following example:",
                "@@ -153,3 +153,3 @@ interface NamesOnly {",
                " This approach requires you to be able to implement logic purely based on the other accessor methods exposed on the projection interface.",
                "-A second, more flexible option is to implement the custom logic in a Spring bean and then simply invoke that from the SpEL expression:",
                "+A second, more flexible, option is to implement the custom logic in a Spring bean and then invoke that from the SpEL expression, as shown in the following example:",
                "@@ -177,5 +177,5 @@ interface NamesOnly {",
                "-Note, how the SpEL expression refers to `myBean` and invokes the `getFullName(\u00e2\u0080\u00a6)` method forwarding the projection target as method parameter.",
                "-Methods backed by SpEL expression evaluation can also use method parameters which can then be referred to from the expression.",
                "-The method parameters are available via an `Object` array named `args`.",
                "+Notice how the SpEL expression refers to `myBean` and invokes the `getFullName(\u00e2\u0080\u00a6)` method and forwards the projection target as a method parameter.",
                "+Methods backed by SpEL expression evaluation can also use method parameters, which can then be referred to from the expression.",
                "+The method parameters are available through an `Object` array named `args`. The following example shows how to get a method parameter from the `args` array:",
                "@@ -193,11 +193,13 @@ interface NamesOnly {",
                "-Again, for more complex expressions rather use a Spring bean and let the expression just invoke a method as described  <<projections.interfaces.open.bean-reference, above>>.",
                "+Again, for more complex expressions, you should use a Spring bean and let the expression invoke a method, as described  <<projections.interfaces.open.bean-reference,earlier>>.",
                " [[projections.dtos]]",
                "-== Class-based projections (DTOs)",
                "+== Class-based Projections (DTOs)",
                "-Another way of defining projections is using value type DTOs that hold properties for the fields that are supposed to be retrieved.",
                "-These DTO types can be used exactly the same way projection interfaces are used, except that no proxying is going on here and no nested projections can be applied.",
                "+Another way of defining projections is by using value type DTOs (Data Transfer Objects) that hold properties for the fields that are supposed to be retrieved.",
                "+These DTO types can be used in exactly the same way projection interfaces are used, except that no proxying happens and no nested projections can be applied.",
                "-In case the store optimizes the query execution by limiting the fields to be loaded, the ones to be loaded are determined from the parameter names of the constructor that is exposed.",
                "+If the store optimizes the query execution by limiting the fields to be loaded, the fields to be loaded are determined from the parameter names of the constructor that is exposed.",
                "+",
                "+The following example shows a projecting DTO:",
                "@@ -231,6 +233,6 @@ class NamesOnly {",
                " [TIP]",
                "-.Avoiding boilerplate code for projection DTOs",
                "+.Avoid boilerplate code for projection DTOs",
                " ====",
                "-The code that needs to be written for a DTO can be dramatically simplified using https://projectlombok.org[Project Lombok], which provides an `@Value` annotation (not to mix up with Spring's `@Value` annotation shown in the interface examples above).",
                "-The sample DTO above would become this:",
                "+You can dramatically simplify the code for a DTO by using https://projectlombok.org[Project Lombok], which provides an `@Value` annotation (not to be confused with Spring's `@Value` annotation shown in the earlier interface examples).",
                "+If you use Project Lombok's `@Value` annotation, the sample DTO shown earlier would become the following:",
                "@@ -243,3 +245,3 @@ class NamesOnly {",
                " ----",
                "-Fields are private final by default, the class exposes a constructor taking all fields and automatically gets `equals(\u00e2\u0080\u00a6)` and `hashCode()` methods implemented.",
                "+Fields are `private final` by default, and the class exposes a constructor that takes all fields and automatically gets `equals(\u00e2\u0080\u00a6)` and `hashCode()` methods implemented.",
                "@@ -248,7 +250,7 @@ Fields are private final by default, the class exposes a constructor taking all",
                " [[projection.dynamic]]",
                "-== Dynamic projections",
                "+== Dynamic Projections",
                "-So far we have used the projection type as the return type or element type of a collection.",
                "-However, it might be desirable to rather select the type to be used at invocation time.",
                "-To apply dynamic projections, use a query method like this:",
                "+So far, we have used the projection type as the return type or element type of a collection.",
                "+However, you might want to select the type to be used at invocation time (which makes it dynamic).",
                "+To apply dynamic projections, use a query method such as the one shown in the following example:",
                "@@ -265,3 +267,3 @@ interface PersonRepository extends Repository<Person, UUID> {",
                "-This way the method can be used to obtain the aggregates as is, or with a projection applied:",
                "+This way, the method can be used to obtain the aggregates as is or with a projection applied, as shown in the following example:",
                "diff --git a/src/main/asciidoc/repository-query-keywords-reference.adoc b/src/main/asciidoc/repository-query-keywords-reference.adoc",
                "index 8d1ffef53..49b07aa1c 100644",
                "--- a/src/main/asciidoc/repository-query-keywords-reference.adoc",
                "+++ b/src/main/asciidoc/repository-query-keywords-reference.adoc",
                "@@ -5,3 +5,3 @@",
                " == Supported query keywords",
                "-The following table lists the keywords generally supported by the Spring Data repository query derivation mechanism. However, consult the store-specific documentation for the exact list of supported keywords, because some listed here might not be supported in a particular store.",
                "+The following table lists the keywords generally supported by the Spring Data repository query derivation mechanism. However, consult the store-specific documentation for the exact list of supported keywords, because some keywords listed here might not be supported in a particular store.",
                "@@ -40,2 +40 @@ The following table lists the keywords generally supported by the Spring Data re",
                " |===============",
                "-",
                "diff --git a/src/main/asciidoc/repository-query-return-types-reference.adoc b/src/main/asciidoc/repository-query-return-types-reference.adoc",
                "index 12277e8e4..a89e3a5b2 100644",
                "--- a/src/main/asciidoc/repository-query-return-types-reference.adoc",
                "+++ b/src/main/asciidoc/repository-query-return-types-reference.adoc",
                "@@ -4,6 +4,6 @@",
                "-== Supported query return types",
                "-The following table lists the return types generally supported by Spring Data repositories. However, consult the store-specific documentation for the exact list of supported return types, because some listed here might not be supported in a particular store.",
                "+== Supported Query Return Types",
                "+The following table lists the return types generally supported by Spring Data repositories. However, consult the store-specific documentation for the exact list of supported return types, because some types listed here might not be supported in a particular store.",
                "-NOTE: Geospatial types like (`GeoResult`, `GeoResults`, `GeoPage`) are only available for data stores that support geospatial queries.",
                "+NOTE: Geospatial types (such as `GeoResult`, `GeoResults`, and `GeoPage`) are available only for data stores that support geospatial queries.",
                "@@ -16,3 +16,3 @@ NOTE: Geospatial types like (`GeoResult`, `GeoResults`, `GeoPage`) are only avai",
                " |Wrapper types|Java wrapper types.",
                "-|`T`|An unique entity. Expects the query method to return one result at most. In case no result is found `null` is returned. More than one result will trigger an `IncorrectResultSizeDataAccessException`.",
                "+|`T`|An unique entity. Expects the query method to return one result at most. If no result is found, `null` is returned. More than one result triggers an `IncorrectResultSizeDataAccessException`.",
                " |`Iterator<T>`|An `Iterator`.",
                "@@ -20,14 +20,13 @@ NOTE: Geospatial types like (`GeoResult`, `GeoResults`, `GeoPage`) are only avai",
                " |`List<T>`|A `List`.",
                "-|`Optional<T>`|A Java 8 or Guava `Optional`. Expects the query method to return one result at most. In case no result is found `Optional.empty()`/`Optional.absent()` is returned. More than one result will trigger an `IncorrectResultSizeDataAccessException`.",
                "-|`Option<T>`|An either Scala or JavaSlang `Option` type. Semantically same behavior as Java 8's `Optional` described above.",
                "+|`Optional<T>`|A Java 8 or Guava `Optional`. Expects the query method to return one result at most. If no result is found, `Optional.empty()` or `Optional.absent()` is returned. More than one result triggers an `IncorrectResultSizeDataAccessException`.",
                "+|`Option<T>`|Either a Scala or Javaslang `Option` type. Semantically the same behavior as Java 8's `Optional`, described earlier.",
                " |`Stream<T>`|A Java 8 `Stream`.",
                "-|`Future<T>`|A `Future`. Expects method to be annotated with `@Async` and requires Spring's asynchronous method execution capability enabled.",
                "-|`CompletableFuture<T>`|A Java 8 `CompletableFuture`. Expects method to be annotated with `@Async` and requires Spring's asynchronous method execution capability enabled.",
                "-|`ListenableFuture`|A `org.springframework.util.concurrent.ListenableFuture`. Expects method to be annotated with `@Async` and requires Spring's asynchronous method execution capability enabled.",
                "-|`Slice`|A sized chunk of data with information whether there is more data available. Requires a `Pageable` method parameter.",
                "-|`Page<T>`|A `Slice` with additional information, e.g. the total number of results. Requires a `Pageable` method parameter.",
                "-|`GeoResult<T>`|A result entry with additional information, e.g. distance to a reference location.",
                "-|`GeoResults<T>`|A list of `GeoResult<T>` with additional information, e.g. average distance to a reference location.",
                "-|`GeoPage<T>`|A `Page` with `GeoResult<T>`, e.g. average distance to a reference location.",
                "+|`Future<T>`|A `Future`. Expects a method to be annotated with `@Async` and requires Spring's asynchronous method execution capability to be enabled.",
                "+|`CompletableFuture<T>`|A Java 8 `CompletableFuture`. Expects a method to be annotated with `@Async` and requires Spring's asynchronous method execution capability to be enabled.",
                "+|`ListenableFuture`|A `org.springframework.util.concurrent.ListenableFuture`. Expects a method to be annotated with `@Async` and requires Spring's asynchronous method execution capability to be enabled.",
                "+|`Slice`|A sized chunk of data with an indication of whether there is more data available. Requires a `Pageable` method parameter.",
                "+|`Page<T>`|A `Slice` with additional information, such as the total number of results. Requires a `Pageable` method parameter.",
                "+|`GeoResult<T>`|A result entry with additional information, such as the distance to a reference location.",
                "+|`GeoResults<T>`|A list of `GeoResult<T>` with additional information, such as the average distance to a reference location.",
                "+|`GeoPage<T>`|A `Page` with `GeoResult<T>`, such as the average distance to a reference location.",
                " |===============",
                "-"
            ],
            "changed_files": [
                "index-multi.adoc",
                "src/main/asciidoc/auditing.adoc",
                "src/main/asciidoc/dependencies.adoc",
                "src/main/asciidoc/index.adoc",
                "src/main/asciidoc/preface.adoc",
                "src/main/asciidoc/query-by-example.adoc",
                "src/main/asciidoc/repositories.adoc",
                "src/main/asciidoc/repository-namespace-reference.adoc",
                "src/main/asciidoc/repository-projections.adoc",
                "src/main/asciidoc/repository-query-keywords-reference.adoc",
                "src/main/asciidoc/repository-query-return-types-reference.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "281": "Add shared documentation resources for a consistent reference documentation styling spring-projects/spring-data-build#566 Editing pass on documentation [DATACMNS-1291] #1733"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "200e156de80c89dffc7420725bb1391adb2b93cd"
                ],
                [
                    "no-tag",
                    "4da35a8f3282c040d3bfb8f4dd8fb0db9079dcce"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 281",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0dfcfe4186dee3b0f49934de4534a20eea1697e6",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523524085,
            "hunks": 12,
            "message": "DATACMNS-1291 - Polishing. Typo fixes, align Enable\u00e2\u0080\u00a6Repositories annotation wording, document reactive return types. Original pull request: #281.",
            "diff": [
                "diff --git a/src/main/asciidoc/index.adoc b/src/main/asciidoc/index.adoc",
                "index fad8595b8..4fcfa1627 100644",
                "--- a/src/main/asciidoc/index.adoc",
                "+++ b/src/main/asciidoc/index.adoc",
                "@@ -7,3 +7,3 @@ Oliver Gierke; Thomas Darimont; Christoph Strobl; Mark Pollack; Thomas Risberg;",
                " :docinfo: shared",
                "-:toc: left",
                "+:toc:",
                " :toclevels: 4",
                "@@ -13,3 +13,3 @@ Oliver Gierke; Thomas Darimont; Christoph Strobl; Mark Pollack; Thomas Risberg;",
                "-(C) 2008-2017 The original authors.",
                "+(C) 2008-2018 The original authors.",
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index af7ee136e..e85e8b7ef 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -163,3 +163,3 @@ The JPA namespace is used in this example. If you use the repository abstraction",
                " +",
                "-Also, note that the JavaConfig variant does not configure a package explicitly, because the package of the annotated class is used by default. To customize the package to scan, use one of the `basePackage\u00e2\u0080\u00a6` attributes of the data-store-specific repository's `@Enable\u00e2\u0080\u00a6`-annotation.",
                "+Also, note that the JavaConfig variant does not configure a package explicitly, because the package of the annotated class is used by default. To customize the package to scan, use one of the `basePackage\u00e2\u0080\u00a6` attributes of the data-store-specific repository's `@Enable${store}Repositories`-annotation.",
                "@@ -236,3 +236,3 @@ Besides that, Spring Data supports returning the following wrapper types on quer",
                " * `io.vavr.control.Option`",
                "-* `javaslang.control.Option` (deprecated as `javaslang` is deprecated)",
                "+* `javaslang.control.Option` (deprecated as Javaslang is deprecated)",
                "@@ -267,3 +267,3 @@ package com.acme;",
                " Once non-null defaulting is in place, repository query method invocations get validated at runtime for nullability constraints.",
                "-if a query execution result violates the defined constraint, an exception is thrown. This happens when the method would return `null` but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                "+If a query execution result violates the defined constraint, an exception is thrown. This happens when the method would return `null` but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                " If you want to opt-in to nullable results again, selectively use `@Nullable` on individual methods.",
                "@@ -575,3 +575,3 @@ NOTE: Limiting the results in combination with dynamic sorting by using a `Sort`",
                "-The results of query methods can be processed incrementally by using a Java 8 `Stream<T>` as return type. Instead of wrapping the query results in a `Stream` data store, specific methods are used to perform the streaming, as shown in the following example:",
                "+The results of query methods can be processed incrementally by using a Java 8 `Stream<T>` as return type. Instead of wrapping the query results in a `Stream` data store-specific methods are used to perform the streaming, as shown in the following example:",
                "@@ -606,3 +606,3 @@ NOTE: Not all Spring Data modules currently support `Stream<T>` as a return type",
                "-Repository queries can be run asynchronously by using link:{spring-framework-docs}/integration.html#scheduling[Spring's asynchronous method execution capability]. This means the method returns immediately upon invocation while the actual query execution occurs in a task that has been submitted to a Spring `TaskExecutor`. The following example shows a number of asynchronous queries:",
                "+Repository queries can be run asynchronously by using link:{spring-framework-docs}/integration.html#scheduling[Spring's asynchronous method execution capability]. This means the method returns immediately upon invocation while the actual query execution occurs in a task that has been submitted to a Spring `TaskExecutor`. Asynchronous query execution is different from reactive query execution and should not be mixed. Refer to store-specific documentation for more details on reactive support. The following example shows a number of asynchronous queries:",
                "@@ -781,7 +781,7 @@ class HumanRepositoryImpl implements HumanRepository {",
                "-interface EmployeeRepository {",
                "+interface ContactRepository {",
                "-  void someEmployeeMethod(User user);",
                "+  void someContactMethod(User user);",
                "-  User anotherEmployeeMethod(User user);",
                "+  User anotherContactMethod(User user);",
                " }",
                "@@ -801,4 +801,2 @@ class ContactRepositoryImpl implements ContactRepository {",
                "-// TODO Did you mean to have EmployeeRepositoryImpl after EmployeeRepository? ContactRepositoryImpl comes as a surprise.",
                "-",
                " The following example shows the interface for a custom repository that extends `CrudRepository`:",
                "@@ -948,3 +946,3 @@ CAUTION: The class needs to have a constructor of the super class which the stor",
                "-The final step is to make the Spring Data infrastructure aware of the customized repository base class. In Java configuration, you can do so by using the `repositoryBaseClass` attribute of the `@Enable\u00e2\u0080\u00a6Repositories` annotation, as shown in the following example:",
                "+The final step is to make the Spring Data infrastructure aware of the customized repository base class. In Java configuration, you can do so by using the `repositoryBaseClass` attribute of the `@Enable${store}Repositories` annotation, as shown in the following example:",
                "@@ -1043,3 +1041,2 @@ To make use of Querydsl support, extend `QuerydslPredicateExecutor` on your repo",
                " interface UserRepository extends CrudRepository<User, Long>, QuerydslPredicateExecutor<User> {",
                "-",
                " }",
                "diff --git a/src/main/asciidoc/repository-query-return-types-reference.adoc b/src/main/asciidoc/repository-query-return-types-reference.adoc",
                "index a89e3a5b2..6f309247e 100644",
                "--- a/src/main/asciidoc/repository-query-return-types-reference.adoc",
                "+++ b/src/main/asciidoc/repository-query-return-types-reference.adoc",
                "@@ -31,2 +31,7 @@ NOTE: Geospatial types (such as `GeoResult`, `GeoResults`, and `GeoPage`) are av",
                " |`GeoPage<T>`|A `Page` with `GeoResult<T>`, such as the average distance to a reference location.",
                "+|`Mono<T>`|A Project Reactor `Mono` emitting zero or one element using reactive repositories. Expects the query method to return one result at most. If no result is found, `Mono.empty()` is returned. More than one result triggers an `IncorrectResultSizeDataAccessException`.",
                "+|`Flux<T>`|A Project Reactor `Flux` emitting zero, one, or many elements using reactive repositories. Queries returning `Flux` can emit also an infinite number of elements.",
                "+|`Single<T>`|A RxJava `Single` emitting a single element using reactive repositories. Expects the query method to return one result at most. If no result is found, `Mono.empty()` is returned. More than one result triggers an `IncorrectResultSizeDataAccessException`.",
                "+|`Maybe<T>`|A RxJava `Maybe` emitting zero or one element using reactive repositories. Expects the query method to return one result at most. If no result is found, `Mono.empty()` is returned. More than one result triggers an `IncorrectResultSizeDataAccessException`.",
                "+|`Flowable<T>`|A RxJava `Flowable` emitting zero, one, or many elements using reactive repositories. Queries returning `Flowable` can emit also an infinite number of elements.",
                " |==============="
            ],
            "changed_files": [
                "src/main/asciidoc/index.adoc",
                "src/main/asciidoc/repositories.adoc",
                "src/main/asciidoc/repository-query-return-types-reference.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "281": "Add shared documentation resources for a consistent reference documentation styling spring-projects/spring-data-build#566 Editing pass on documentation [DATACMNS-1291] #1733"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f1860f3c141ca1ad5c404abc5e50c7e638a3ed9b"
                ],
                [
                    "no-tag",
                    "ca27ebd39da0934b74887bbb25b7d55c96e8e827"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 281",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1f60389a3610fa47c534e5caeb7605cbb606e17b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523432803,
            "hunks": 1,
            "message": "DATACMNS-1293 - Fixed Querydsl package reference in QuerydslPredicateArgumentResolver Javadoc. Original pull request: #284.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java b/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java",
                "index 031958ed0..70c35262d 100644",
                "--- a/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java",
                "+++ b/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java",
                "@@ -40,3 +40,3 @@ import com.querydsl.core.types.Predicate;",
                " /**",
                "- * {@link HandlerMethodArgumentResolver} to allow injection of {@link com.mysema.query.types.Predicate} into Spring MVC",
                "+ * {@link HandlerMethodArgumentResolver} to allow injection of {@link com.querydsl.core.types.Predicate} into Spring MVC",
                "  * controller methods."
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "284": "QuerydslPredicateArgumentResolver Javadoc points to outdated Querydsl package [DATACMNS-1293] #1735"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6f73508f57a9f7553b25bebe2d643d29c7a4460f"
                ],
                [
                    "no-tag",
                    "6275ded50f3353ebb26262e722053e20cf8520f2"
                ]
            ],
            "tags": [
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 284",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5901a2713023d68d63a0b6665226bb62093ada02",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523023673,
            "hunks": 7,
            "message": "DATACMNS-1290 - Added support for timestamp values of type long. The type long or Long is actually required for custom revision entities by Envers. See also: https://github.com/spring-projects/spring-data-envers/issues/122 Original pull request: #282.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/history/AnnotationRevisionMetadata.java b/src/main/java/org/springframework/data/history/AnnotationRevisionMetadata.java",
                "index 868d536e1..23d80acfd 100755",
                "--- a/src/main/java/org/springframework/data/history/AnnotationRevisionMetadata.java",
                "+++ b/src/main/java/org/springframework/data/history/AnnotationRevisionMetadata.java",
                "@@ -21,3 +21,2 @@ import java.time.LocalDateTime;",
                " import java.time.ZoneOffset;",
                "-import java.time.temporal.TemporalAccessor;",
                " import java.util.Optional;",
                "@@ -41,3 +40,3 @@ public class AnnotationRevisionMetadata<N extends Number & Comparable<N>> implem",
                " \tprivate final Lazy<Optional<N>> revisionNumber;",
                "-\tprivate final Lazy<Optional<TemporalAccessor>> revisionDate;",
                "+\tprivate final Lazy<Optional<Object>> revisionDate;",
                "@@ -108,26 +107,26 @@ public class AnnotationRevisionMetadata<N extends Number & Comparable<N>> implem",
                "-\tprivate static LocalDateTime convertToLocalDateTime(TemporalAccessor temporalAccessor) {",
                "+\tprivate static LocalDateTime convertToLocalDateTime(Object timestamp) {",
                "-\t\tif (temporalAccessor instanceof LocalDateTime) {",
                "-\t\t\treturn (LocalDateTime) temporalAccessor;",
                "+\t\tif (timestamp instanceof LocalDateTime) {",
                "+\t\t\treturn (LocalDateTime) timestamp;",
                " \t\t}",
                "-\t\tif (temporalAccessor instanceof Instant) {",
                "-\t\t\treturn LocalDateTime.ofInstant((Instant) temporalAccessor, ZoneOffset.systemDefault());",
                "-\t\t}",
                "-",
                "-\t\tthrow new IllegalArgumentException(String.format(\"Can't convert %s to LocalDateTime!\", temporalAccessor));",
                "+\t\treturn LocalDateTime.ofInstant(convertToInstant(timestamp), ZoneOffset.systemDefault());",
                " \t}",
                "-\tprivate static Instant convertToInstant(TemporalAccessor temporalAccessor) {",
                "+\tprivate static Instant convertToInstant(Object timestamp) {",
                "+",
                "+\t\tif (timestamp instanceof Instant) {",
                "+\t\t\treturn (Instant) timestamp;",
                "+\t\t}",
                "-\t\tif (temporalAccessor instanceof Instant) {",
                "-\t\t\treturn (Instant) temporalAccessor;",
                "+\t\tif (timestamp instanceof LocalDateTime) {",
                "+\t\t\treturn ((LocalDateTime) timestamp).atZone(ZoneOffset.systemDefault()).toInstant();",
                " \t\t}",
                "-\t\tif (temporalAccessor instanceof LocalDateTime) {",
                "-\t\t\treturn ((LocalDateTime) temporalAccessor).atZone(ZoneOffset.systemDefault()).toInstant();",
                "+\t\tif (timestamp instanceof Long) {",
                "+\t\t\treturn Instant.ofEpochMilli((Long) timestamp);",
                " \t\t}",
                "-\t\tthrow new IllegalArgumentException(String.format(\"Can't convert %s to LocalDateTime!\", temporalAccessor));",
                "+\t\tthrow new IllegalArgumentException(String.format(\"Can't convert %s to Instant!\", timestamp));",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/history/AnnotationRevisionMetadata.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "282": "AnnotationRevisionMetadata assumes field with revisionTimeStampAnnotation is of type TemporalAccessor [DATACMNS-1290] #1732"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1db151ac04f593bab35a389826349230239f01a8"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue, request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 282",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "500a1c627d5a95b2ccbd02beff26e02aeefe78bc",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523020489,
            "hunks": 1,
            "message": "DATACMNS-1289 - Polishing. Original pull request: #280.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "index ff45a536f..4e9648f8d 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "@@ -163,2 +163,8 @@ public interface RepositoryFragment<T> {",
                "+\t\t/**",
                "+\t\t * Creates a new {@link ImplementedRepositoryFragment} for the given interface class and implementation.",
                "+\t\t * ",
                "+\t\t * @param interfaceClass must not be {@literal null}.",
                "+\t\t * @param implementation must not be {@literal null}.",
                "+\t\t */",
                " \t\tpublic ImplementedRepositoryFragment(Optional<Class<T>> interfaceClass, T implementation) {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "280": "Call to save(\u2026) on customized intermediate repository fails with \"Object is not an instance of declaring class.\" [DATACMNS-1289] #1731"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e2e51b7a0e1956c3319ae169d9440cfc6df5978"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 280",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "666447a4c849e5676bf5c3859ca2378121a48f6e",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523536161,
            "hunks": 2,
            "message": "DATACMNS-1293 - Polishing. Fix leftovers pointing to legacy Querydsl packages in Javadoc. Reformat code. Original pull request: #284.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/querydsl/binding/QuerydslPredicate.java b/src/main/java/org/springframework/data/querydsl/binding/QuerydslPredicate.java",
                "index 7f203146e..b2febf1f1 100644",
                "--- a/src/main/java/org/springframework/data/querydsl/binding/QuerydslPredicate.java",
                "+++ b/src/main/java/org/springframework/data/querydsl/binding/QuerydslPredicate.java",
                "@@ -23,4 +23,4 @@ import java.lang.annotation.Target;",
                " /**",
                "- * Annotation to customize the binding of HTTP request parameters to a Querydsl {@link com.mysema.query.types.Predicate}",
                "- * in Spring MVC handler methods.",
                "+ * Annotation to customize the binding of HTTP request parameters to a Querydsl",
                "+ * {@link com.querydsl.core.types.Predicate} in Spring MVC handler methods.",
                "  *",
                "@@ -35,3 +35,3 @@ public @interface QuerydslPredicate {",
                " \t/**",
                "-\t * The root type to create the {@link com.mysema.query.types.Predicate}. Specify this explicitly if the type is not",
                "+\t * The root type to create the {@link com.querydsl.core.types.Predicate}. Specify this explicitly if the type is not",
                " \t * contained in the controller method's return type."
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/querydsl/binding/QuerydslPredicate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "284": "QuerydslPredicateArgumentResolver Javadoc points to outdated Querydsl package [DATACMNS-1293] #1735"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "03317d01c044beffc8134cfa10ab913b22275fc0"
                ],
                [
                    "no-tag",
                    "f4070ce288904cbdcdb9e7258eb621becde8e898"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 284",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac324b22a5c9a5420aa6782034d660bb92510f5a",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1520337661,
            "hunks": 61,
            "message": "DATACMNS-1275 - Introduced MappingContext.findPersistentPropertyPaths(Class<?>, Predicate<P>). MappingContext now exposes a method to detect all property paths pointing to properties matching a given predicate. Extracted PersistentPropertyPath creation into a dedicated factory class so that it can be tested individually. DefaultPersistentPropertyPath now exposes a \u00e2\u0080\u00a6.containsPropertyOfType(\u00e2\u0080\u00a6) to detect whether we've already processed a particular type in the path. Also applied a bit of Java 8 and Lombok polish. InvalidPersistentPropertyPath now collects suggested alternatives to create a better exception message. PersistentEntities now allows to map over a MappingContext and PersistentEntity that a given type is corresponding to. Streamable now exposes an \u00e2\u0080\u00a6.isEmpty(). Removed references to equivalent methods implemented in subtypes.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/PersistentProperty.java b/src/main/java/org/springframework/data/mapping/PersistentProperty.java",
                "index 3d929deb8..cc5be87f5 100644",
                "--- a/src/main/java/org/springframework/data/mapping/PersistentProperty.java",
                "+++ b/src/main/java/org/springframework/data/mapping/PersistentProperty.java",
                "@@ -23,2 +23,3 @@ import java.util.Map;",
                "+import org.springframework.core.annotation.AnnotatedElementUtils;",
                " import org.springframework.core.annotation.AnnotationUtils;",
                "@@ -26,2 +27,3 @@ import org.springframework.data.util.TypeInformation;",
                " import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "@@ -64,12 +66,2 @@ public interface PersistentProperty<P extends PersistentProperty<P>> {",
                "-\t/**",
                "-\t * Returns the {@link TypeInformation} if the property references a {@link PersistentEntity}. Will return",
                "-\t * {@literal null} in case it refers to a simple type. Will return {@link Collection}'s component type or the",
                "-\t * {@link Map}'s value type transparently.",
                "-\t *",
                "-\t * @deprecated Use getPersistentEntityTypes instead.",
                "-\t */",
                "-\t@Deprecated",
                "-\tIterable<? extends TypeInformation<?>> getPersistentEntityType();",
                "-",
                " \t/**",
                "@@ -81,5 +73,3 @@ public interface PersistentProperty<P extends PersistentProperty<P>> {",
                " \t */",
                "-\tdefault Iterable<? extends TypeInformation<?>> getPersistentEntityTypes() {",
                "-\t\treturn getPersistentEntityType();",
                "-\t};",
                "+\tIterable<? extends TypeInformation<?>> getPersistentEntityTypes();",
                "@@ -330,2 +320,17 @@ public interface PersistentProperty<P extends PersistentProperty<P>> {",
                " \tboolean usePropertyAccess();",
                "+",
                "+\t/**",
                "+\t * Returns whether the actual type of the property carries the given annotation.",
                "+\t * ",
                "+\t * @param annotationType must not be {@literal null}.",
                "+\t * @return",
                "+\t * @since 2.1",
                "+\t * @see #getActualType()",
                "+\t */",
                "+\tdefault boolean hasActualTypeAnnotation(Class<? extends Annotation> annotationType) {",
                "+",
                "+\t\tAssert.notNull(annotationType, \"Annotation type must not be null!\");",
                "+",
                "+\t\treturn AnnotatedElementUtils.hasAnnotation(getActualType(), annotationType);",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/springframework/data/mapping/PersistentPropertyAccessor.java b/src/main/java/org/springframework/data/mapping/PersistentPropertyAccessor.java",
                "index b9a14b3bc..85ed388c9 100644",
                "--- a/src/main/java/org/springframework/data/mapping/PersistentPropertyAccessor.java",
                "+++ b/src/main/java/org/springframework/data/mapping/PersistentPropertyAccessor.java",
                "@@ -19,2 +19,3 @@ import org.springframework.data.mapping.model.ConvertingPropertyAccessor;",
                " import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "@@ -42,2 +43,33 @@ public interface PersistentPropertyAccessor {",
                "+\t/**",
                "+\t * Sets the given value for the {@link PersistentProperty} pointed to by the given {@link PersistentPropertyPath}. The",
                "+\t * lookup of intermediate values must not yield {@literal null}.",
                "+\t * ",
                "+\t * @param path must not be {@literal null} or empty.",
                "+\t * @param value can be {@literal null}.",
                "+\t * @since 2.1",
                "+\t */",
                "+\tdefault void setProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path, @Nullable Object value) {",
                "+",
                "+\t\tAssert.notNull(path, \"PersistentPropertyPath must not be null!\");",
                "+\t\tAssert.isTrue(!path.isEmpty(), \"PersistentPropertyPath must not be empty!\");",
                "+",
                "+\t\tPersistentPropertyPath<? extends PersistentProperty<?>> parentPath = path.getParentPath();",
                "+\t\tPersistentProperty<?> leafProperty = path.getRequiredLeafProperty();",
                "+",
                "+\t\tObject parent = parentPath.isEmpty() ? getBean() : getProperty(parentPath);",
                "+",
                "+\t\tif (parent == null) {",
                "+",
                "+\t\t\tString nullIntermediateMessage = \"Cannot lookup property %s on null intermediate! Original path was: %s on %s.\";",
                "+",
                "+\t\t\tthrow new MappingException(String.format(nullIntermediateMessage, parentPath.getLeafProperty(), path.toDotPath(),",
                "+\t\t\t\t\tgetBean().getClass().getName()));",
                "+\t\t}",
                "+",
                "+\t\tPersistentPropertyAccessor accessor = leafProperty.getOwner().getPropertyAccessor(parent);",
                "+",
                "+\t\taccessor.setProperty(leafProperty, value);",
                "+\t}",
                "+",
                " \t/**",
                "@@ -51,2 +83,39 @@ public interface PersistentPropertyAccessor {",
                "+\t/**",
                "+\t * Return the value pointed to by the given {@link PersistentPropertyPath}. If the given path is empty, the wrapped",
                "+\t * bean is returned.",
                "+\t * ",
                "+\t * @param path must not be {@literal null}.",
                "+\t * @return",
                "+\t * @since 2.1",
                "+\t */",
                "+\t@Nullable",
                "+\tdefault Object getProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path) {",
                "+",
                "+\t\tObject bean = getBean();",
                "+\t\tObject current = bean;",
                "+",
                "+\t\tif (path.isEmpty()) {",
                "+\t\t\treturn bean;",
                "+\t\t}",
                "+",
                "+\t\tfor (PersistentProperty<?> property : path) {",
                "+",
                "+\t\t\tif (current == null) {",
                "+",
                "+\t\t\t\tString nullIntermediateMessage = \"Cannot lookup property %s on null intermediate! Original path was: %s on %s.\";",
                "+",
                "+\t\t\t\tthrow new MappingException(",
                "+\t\t\t\t\t\tString.format(nullIntermediateMessage, property, path.toDotPath(), bean.getClass().getName()));",
                "+\t\t\t}",
                "+",
                "+\t\t\tPersistentEntity<?, ? extends PersistentProperty<?>> entity = property.getOwner();",
                "+\t\t\tPersistentPropertyAccessor accessor = entity.getPropertyAccessor(current);",
                "+",
                "+\t\t\tcurrent = accessor.getProperty(property);",
                "+\t\t}",
                "+",
                "+\t\treturn current;",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/mapping/PersistentPropertyPath.java b/src/main/java/org/springframework/data/mapping/PersistentPropertyPath.java",
                "new file mode 100644",
                "index 000000000..ef3eb8c12",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/mapping/PersistentPropertyPath.java",
                "@@ -0,0 +1,132 @@",
                "+/*",
                "+ * Copyright 2011-2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.mapping;",
                "+",
                "+import org.springframework.core.convert.converter.Converter;",
                "+import org.springframework.data.util.Streamable;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * Abstraction of a path of {@link PersistentProperty}s.",
                "+ *",
                "+ * @author Oliver Gierke",
                "+ */",
                "+public interface PersistentPropertyPath<P extends PersistentProperty<P>> extends Streamable<P> {",
                "+",
                "+\t/**",
                "+\t * Returns the dot based path notation using {@link PersistentProperty#getName()}.",
                "+\t *",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tString toDotPath();",
                "+",
                "+\t/**",
                "+\t * Returns the dot based path notation using the given {@link Converter} to translate individual",
                "+\t * {@link PersistentProperty}s to path segments.",
                "+\t *",
                "+\t * @param converter must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tString toDotPath(Converter<? super P, String> converter);",
                "+",
                "+\t/**",
                "+\t * Returns a {@link String} path with the given delimiter based on the {@link PersistentProperty#getName()}.",
                "+\t *",
                "+\t * @param delimiter must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tString toPath(String delimiter);",
                "+",
                "+\t/**",
                "+\t * Returns a {@link String} path with the given delimiter using the given {@link Converter} for",
                "+\t * {@link PersistentProperty} to String conversion.",
                "+\t *",
                "+\t * @param delimiter must not be {@literal null}.",
                "+\t * @param converter must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tString toPath(String delimiter, Converter<? super P, String> converter);",
                "+",
                "+\t/**",
                "+\t * Returns the last property in the {@link PersistentPropertyPath}. So for {@code foo.bar} it will return the",
                "+\t * {@link PersistentProperty} for {@code bar}. For a simple {@code foo} it returns {@link PersistentProperty} for",
                "+\t * {@code foo}.",
                "+\t *",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tP getLeafProperty();",
                "+",
                "+\tdefault P getRequiredLeafProperty() {",
                "+",
                "+\t\tP property = getLeafProperty();",
                "+",
                "+\t\tif (property == null) {",
                "+\t\t\tthrow new IllegalStateException(\"No leaf property found!\");",
                "+\t\t}",
                "+",
                "+\t\treturn property;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the first property in the {@link PersistentPropertyPath}. So for {@code foo.bar} it will return the",
                "+\t * {@link PersistentProperty} for {@code foo}. For a simple {@code foo} it returns {@link PersistentProperty} for",
                "+\t * {@code foo}.",
                "+\t *",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tP getBaseProperty();",
                "+",
                "+\t/**",
                "+\t * Returns whether the given {@link PersistentPropertyPath} is a base path of the current one. This means that the",
                "+\t * current {@link PersistentPropertyPath} is basically an extension of the given one.",
                "+\t *",
                "+\t * @param path must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tboolean isBasePathOf(PersistentPropertyPath<P> path);",
                "+",
                "+\t/**",
                "+\t * Returns the sub-path of the current one as if it was based on the given base path. So for a current path",
                "+\t * {@code foo.bar} and a given base {@code foo} it would return {@code bar}. If the given path is not a base of the",
                "+\t * the current one the current {@link PersistentPropertyPath} will be returned as is.",
                "+\t *",
                "+\t * @param base must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tPersistentPropertyPath<P> getExtensionForBaseOf(PersistentPropertyPath<P> base);",
                "+",
                "+\t/**",
                "+\t * Returns the parent path of the current {@link PersistentPropertyPath}, i.e. the path without the leaf property.",
                "+\t * This happens up to the base property. So for a direct property reference calling this method will result in",
                "+\t * returning the property.",
                "+\t *",
                "+\t * @return",
                "+\t */",
                "+\tPersistentPropertyPath<P> getParentPath();",
                "+",
                "+\t/**",
                "+\t * Returns the length of the {@link PersistentPropertyPath}.",
                "+\t *",
                "+\t * @return",
                "+\t */",
                "+\tint getLength();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/mapping/PersistentPropertyPaths.java b/src/main/java/org/springframework/data/mapping/PersistentPropertyPaths.java",
                "new file mode 100644",
                "index 000000000..02139305c",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/mapping/PersistentPropertyPaths.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.mapping;",
                "+",
                "+import java.util.Optional;",
                "+",
                "+import org.springframework.data.util.Streamable;",
                "+",
                "+/**",
                "+ * A wrapper for a collection of {@link PersistentPropertyPath}s.",
                "+ * ",
                "+ * @author Oliver Gierke",
                "+ * @since 2.1",
                "+ * @soundtrack Stuart McCallum - North Star (City)",
                "+ */",
                "+public interface PersistentPropertyPaths<T, P extends PersistentProperty<P>>",
                "+\t\textends Streamable<PersistentPropertyPath<P>> {",
                "+",
                "+\t/**",
                "+\t * Returns the first {@link PersistentPropertyPath}.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tOptional<PersistentPropertyPath<P>> getFirst();",
                "+",
                "+\t/**",
                "+\t * Returns whether the given path is contained in the current {@link PersistentPropertyPaths}.",
                "+\t * ",
                "+\t * @param path must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tboolean contains(String path);",
                "+",
                "+\t/**",
                "+\t * Returns whether the given {@link PropertyPath} is contained in the current {@link PersistentPropertyPaths}.",
                "+\t * ",
                "+\t * @param path must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tboolean contains(PropertyPath path);",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "index a53e70b46..fc39cca9e 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "@@ -20,3 +20,2 @@ import lombok.NonNull;",
                " import lombok.RequiredArgsConstructor;",
                "-import lombok.Value;",
                "@@ -25,3 +24,2 @@ import java.lang.reflect.Field;",
                " import java.lang.reflect.Modifier;",
                "-import java.util.Arrays;",
                " import java.util.Collection;",
                "@@ -30,4 +28,2 @@ import java.util.HashMap;",
                " import java.util.HashSet;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                " import java.util.Map;",
                "@@ -37,2 +33,3 @@ import java.util.concurrent.locks.Lock;",
                " import java.util.concurrent.locks.ReentrantReadWriteLock;",
                "+import java.util.function.Predicate;",
                " import java.util.stream.Collectors;",
                "@@ -47,2 +44,4 @@ import org.springframework.data.mapping.PersistentEntity;",
                " import org.springframework.data.mapping.PersistentProperty;",
                "+import org.springframework.data.mapping.PersistentPropertyPath;",
                "+import org.springframework.data.mapping.PersistentPropertyPaths;",
                " import org.springframework.data.mapping.PropertyPath;",
                "@@ -55,3 +54,2 @@ import org.springframework.data.util.ClassTypeInformation;",
                " import org.springframework.data.util.Optionals;",
                "-import org.springframework.data.util.Pair;",
                " import org.springframework.data.util.Streamable;",
                "@@ -60,3 +58,2 @@ import org.springframework.lang.Nullable;",
                " import org.springframework.util.Assert;",
                "-import org.springframework.util.ConcurrentReferenceHashMap;",
                " import org.springframework.util.ReflectionUtils;",
                "@@ -64,3 +61,2 @@ import org.springframework.util.ReflectionUtils.FieldCallback;",
                " import org.springframework.util.ReflectionUtils.FieldFilter;",
                "-import org.springframework.util.StringUtils;",
                "@@ -89,4 +85,4 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \tprivate final Map<TypeInformation<?>, Optional<E>> persistentEntities = new HashMap<>();",
                "-\tprivate final Map<TypeAndProperties, PersistentPropertyPath<P>> propertyPaths = new ConcurrentReferenceHashMap<>();",
                " \tprivate final PersistentPropertyAccessorFactory persistentPropertyAccessorFactory = new ClassGeneratingPropertyAccessorFactory();",
                "+\tprivate final PersistentPropertyPathFactory<E, P> persistentPropertyPathFactory;",
                "@@ -102,2 +98,6 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                "+\tprotected AbstractMappingContext() {",
                "+\t\tthis.persistentPropertyPathFactory = new PersistentPropertyPathFactory<>(this);",
                "+\t}",
                "+",
                " \t/*",
                "@@ -255,6 +255,3 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \tpublic PersistentPropertyPath<P> getPersistentPropertyPath(PropertyPath propertyPath) {",
                "-",
                "-\t\tAssert.notNull(propertyPath, \"Property path must not be null!\");",
                "-",
                "-\t\treturn getPersistentPropertyPath(propertyPath.toDotPath(), propertyPath.getOwningType());",
                "+\t\treturn persistentPropertyPathFactory.from(propertyPath);",
                " \t}",
                "@@ -267,7 +264,3 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \tpublic PersistentPropertyPath<P> getPersistentPropertyPath(String propertyPath, Class<?> type) {",
                "-",
                "-\t\tAssert.notNull(propertyPath, \"Property path must not be null!\");",
                "-\t\tAssert.notNull(type, \"Type must not be null!\");",
                "-",
                "-\t\treturn getPersistentPropertyPath(propertyPath, ClassTypeInformation.from(type));",
                "+\t\treturn persistentPropertyPathFactory.from(type, propertyPath);",
                " \t}",
                "@@ -280,61 +273,32 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \tpublic PersistentPropertyPath<P> getPersistentPropertyPath(InvalidPersistentPropertyPath invalidPath) {",
                "-\t\treturn getPersistentPropertyPath(invalidPath.getResolvedPath(), invalidPath.getType());",
                "-\t}",
                "-",
                "-\tprivate PersistentPropertyPath<P> getPersistentPropertyPath(String propertyPath, TypeInformation<?> type) {",
                "-",
                "-\t\treturn propertyPaths.computeIfAbsent(TypeAndProperties.of(type, propertyPath),",
                "-\t\t\t\tit -> createPersistentPropertyPath(it.getPath(), it.getType()));",
                "+\t\treturn persistentPropertyPathFactory.from(invalidPath.getType(), invalidPath.getResolvedPath());",
                " \t}",
                "-\t/**",
                "-\t * Creates a {@link PersistentPropertyPath} for the given parts and {@link TypeInformation}.",
                "-\t *",
                "-\t * @param propertyPath must not be {@literal null}.",
                "-\t * @param type must not be {@literal null}.",
                "-\t * @return",
                "+\t/* ",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.mapping.context.MappingContext#findPersistentPropertyPath(java.lang.Class, java.util.function.Predicate)",
                " \t */",
                "-\tprivate PersistentPropertyPath<P> createPersistentPropertyPath(String propertyPath, TypeInformation<?> type) {",
                "-",
                "-\t\tList<String> parts = Arrays.asList(propertyPath.split(\"\\\\.\"));",
                "-\t\tDefaultPersistentPropertyPath<P> path = DefaultPersistentPropertyPath.empty();",
                "-\t\tIterator<String> iterator = parts.iterator();",
                "-\t\tE current = getRequiredPersistentEntity(type);",
                "-",
                "-\t\twhile (iterator.hasNext()) {",
                "-",
                "-\t\t\tString segment = iterator.next();",
                "-\t\t\tfinal DefaultPersistentPropertyPath<P> foo = path;",
                "-\t\t\tfinal E bar = current;",
                "-",
                "-\t\t\tPair<DefaultPersistentPropertyPath<P>, E> pair = getPair(path, iterator, segment, current);",
                "-",
                "-\t\t\tif (pair == null) {",
                "-",
                "-\t\t\t\tString source = StringUtils.collectionToDelimitedString(parts, \".\");",
                "-\t\t\t\tString resolvedPath = foo.toDotPath();",
                "-",
                "-\t\t\t\tthrow new InvalidPersistentPropertyPath(source, type, segment, resolvedPath,",
                "-\t\t\t\t\t\tString.format(\"No property %s found on %s!\", segment, bar.getName()));",
                "-\t\t\t}",
                "+\t@Override",
                "+\tpublic <T> PersistentPropertyPaths<T, P> findPersistentPropertyPaths(Class<T> type, Predicate<? super P> predicate) {",
                "-\t\t\tpath = pair.getFirst();",
                "-\t\t\tcurrent = pair.getSecond();",
                "-\t\t}",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.notNull(predicate, \"Selection predicate must not be null!\");",
                "-\t\treturn path;",
                "+\t\treturn doFindPersistentPropertyPaths(type, predicate, it -> !it.isAssociation());",
                " \t}",
                "-\t@Nullable",
                "-\tprivate Pair<DefaultPersistentPropertyPath<P>, E> getPair(DefaultPersistentPropertyPath<P> path,",
                "-\t\t\tIterator<String> iterator, String segment, E entity) {",
                "-",
                "-\t\tP property = entity.getPersistentProperty(segment);",
                "-",
                "-\t\tif (property == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-",
                "-\t\tTypeInformation<?> type = property.getTypeInformation().getRequiredActualType();",
                "-\t\treturn Pair.of(path.append(property), iterator.hasNext() ? getRequiredPersistentEntity(type) : entity);",
                "+\t/**",
                "+\t * Actually looks up the {@link PersistentPropertyPaths} for the given type, selection predicate and traversal guard.",
                "+\t * Primary purpose is to allow sub-types to alter the default traversal guard, e.g. used by",
                "+\t * {@link #findPersistentPropertyPaths(Class, Predicate)}.",
                "+\t * ",
                "+\t * @param type will never be {@literal null}.",
                "+\t * @param predicate will never be {@literal null}.",
                "+\t * @param traversalGuard will never be {@literal null}.",
                "+\t * @return will never be {@literal null}.",
                "+\t * @see #findPersistentPropertyPaths(Class, Predicate)",
                "+\t */",
                "+\tprotected final <T> PersistentPropertyPaths<T, P> doFindPersistentPropertyPaths(Class<T> type,",
                "+\t\t\tPredicate<? super P> predicate, Predicate<P> traversalGuard) {",
                "+\t\treturn persistentPropertyPathFactory.from(ClassTypeInformation.from(type), predicate, traversalGuard);",
                " \t}",
                "@@ -575,9 +539,2 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                "-\t@Value(staticConstructor = \"of\")",
                "-\tstatic class TypeAndProperties {",
                "-",
                "-\t\tTypeInformation<?> type;",
                "-\t\tString path;",
                "-\t}",
                "-",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/mapping/context/DefaultPersistentPropertyPath.java b/src/main/java/org/springframework/data/mapping/context/DefaultPersistentPropertyPath.java",
                "index 375c50aef..841966fd8 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/DefaultPersistentPropertyPath.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/DefaultPersistentPropertyPath.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.mapping.context;",
                "+import lombok.EqualsAndHashCode;",
                "+",
                " import java.util.ArrayList;",
                "@@ -21,2 +23,3 @@ import java.util.Iterator;",
                " import java.util.List;",
                "+import java.util.stream.Collectors;",
                "@@ -24,2 +27,4 @@ import org.springframework.core.convert.converter.Converter;",
                " import org.springframework.data.mapping.PersistentProperty;",
                "+import org.springframework.data.mapping.PersistentPropertyPath;",
                "+import org.springframework.data.util.TypeInformation;",
                " import org.springframework.lang.Nullable;",
                "@@ -34,2 +39,3 @@ import org.springframework.util.StringUtils;",
                "  */",
                "+@EqualsAndHashCode",
                " class DefaultPersistentPropertyPath<P extends PersistentProperty<P>> implements PersistentPropertyPath<P> {",
                "@@ -81,3 +87,3 @@ class DefaultPersistentPropertyPath<P extends PersistentProperty<P>> implements",
                " \t\tAssert.isTrue(property.getOwner().getType().equals(leafPropertyType),",
                "-\t\t\t\tString.format(\"Cannot append property %s to type %s!\", property.getName(), leafPropertyType.getName()));",
                "+\t\t\t\t() -> String.format(\"Cannot append property %s to type %s!\", property.getName(), leafPropertyType.getName()));",
                "@@ -126,14 +132,8 @@ class DefaultPersistentPropertyPath<P extends PersistentProperty<P>> implements",
                "-\t\tList<String> result = new ArrayList<>();",
                "-",
                "-\t\tfor (P property : properties) {",
                "-",
                "-\t\t\tString convert = converter.convert(property);",
                "-",
                "-\t\t\tif (StringUtils.hasText(convert)) {",
                "-\t\t\t\tresult.add(convert);",
                "-\t\t\t}",
                "-\t\t}",
                "+\t\tString result = properties.stream() //",
                "+\t\t\t\t.map(converter::convert) //",
                "+\t\t\t\t.filter(StringUtils::hasText) //",
                "+\t\t\t\t.collect(Collectors.joining(delimiter));",
                "-\t\treturn result.isEmpty() ? null : StringUtils.collectionToDelimitedString(result, delimiter);",
                "+\t\treturn result.isEmpty() ? null : result;",
                " \t}",
                "@@ -216,7 +216,3 @@ class DefaultPersistentPropertyPath<P extends PersistentProperty<P>> implements",
                "-\t\tif (size <= 1) {",
                "-\t\t\treturn this;",
                "-\t\t}",
                "-",
                "-\t\treturn new DefaultPersistentPropertyPath<>(properties.subList(0, size - 1));",
                "+\t\treturn size == 0 ? this : new DefaultPersistentPropertyPath<>(properties.subList(0, size - 1));",
                " \t}",
                "@@ -239,37 +235,14 @@ class DefaultPersistentPropertyPath<P extends PersistentProperty<P>> implements",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.mapping.context.PersistentPropertyPath#isEmpty()",
                "-\t */",
                "-\tpublic boolean isEmpty() {",
                "-\t\treturn properties.isEmpty();",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#equals(java.lang.Object)",
                "+\t/**",
                "+\t * Returns whether the current path contains a property of the given type.",
                "+\t * ",
                "+\t * @param type can be {@literal null}.",
                "+\t * @return",
                " \t */",
                "-\t@Override",
                "-\tpublic boolean equals(@Nullable Object obj) {",
                "-",
                "-\t\tif (this == obj) {",
                "-\t\t\treturn true;",
                "-\t\t}",
                "-",
                "-\t\tif (obj == null || !getClass().equals(obj.getClass())) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "+\tpublic boolean containsPropertyOfType(@Nullable TypeInformation<?> type) {",
                "-\t\tDefaultPersistentPropertyPath<?> that = (DefaultPersistentPropertyPath<?>) obj;",
                "-",
                "-\t\treturn this.properties.equals(that.properties);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#hashCode()",
                "-\t */",
                "-\t@Override",
                "-\tpublic int hashCode() {",
                "-\t\treturn properties.hashCode();",
                "+\t\treturn type == null //",
                "+\t\t\t\t? false //",
                "+\t\t\t\t: properties.stream() //",
                "+\t\t\t\t\t\t.anyMatch(property -> type.equals(property.getTypeInformation().getActualType()));",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/mapping/context/InvalidPersistentPropertyPath.java b/src/main/java/org/springframework/data/mapping/context/InvalidPersistentPropertyPath.java",
                "index a969e517a..a89944085 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/InvalidPersistentPropertyPath.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/InvalidPersistentPropertyPath.java",
                "@@ -17,3 +17,10 @@ package org.springframework.data.mapping.context;",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.beans.PropertyMatches;",
                " import org.springframework.data.mapping.MappingException;",
                "+import org.springframework.data.mapping.PersistentProperty;",
                "+import org.springframework.data.mapping.PersistentPropertyPath;",
                " import org.springframework.data.util.TypeInformation;",
                "@@ -21,2 +28,3 @@ import org.springframework.lang.Nullable;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.StringUtils;",
                "@@ -31,2 +39,3 @@ public class InvalidPersistentPropertyPath extends MappingException {",
                " \tprivate static final long serialVersionUID = 2805815643641094488L;",
                "+\tprivate static final String DEFAULT_MESSAGE = \"No property '%s' found on %s! Did you mean: %s?\";",
                "@@ -43,6 +52,7 @@ public class InvalidPersistentPropertyPath extends MappingException {",
                " \t */",
                "-\tInvalidPersistentPropertyPath(String source, TypeInformation<?> type, String unresolvableSegment,",
                "-\t\t\t@Nullable String resolvedPath, String message) {",
                "+\tpublic InvalidPersistentPropertyPath(String source, TypeInformation<?> type, String unresolvableSegment,",
                "+\t\t\tPersistentPropertyPath<? extends PersistentProperty<?>> resolvedPath) {",
                "-\t\tsuper(message);",
                "+\t\tsuper(createMessage(resolvedPath.isEmpty() ? type : resolvedPath.getRequiredLeafProperty().getTypeInformation(),",
                "+\t\t\t\tunresolvableSegment));",
                "@@ -55,3 +65,3 @@ public class InvalidPersistentPropertyPath extends MappingException {",
                " \t\tthis.unresolvableSegment = unresolvableSegment;",
                "-\t\tthis.resolvedPath = resolvedPath == null ? \"\" : resolvedPath;",
                "+\t\tthis.resolvedPath = toDotPathOrEmpty(resolvedPath);",
                " \t}",
                "@@ -93,2 +103,30 @@ public class InvalidPersistentPropertyPath extends MappingException {",
                " \t}",
                "+",
                "+\tprivate static String toDotPathOrEmpty(@Nullable PersistentPropertyPath<? extends PersistentProperty<?>> path) {",
                "+",
                "+\t\tif (path == null) {",
                "+\t\t\treturn \"\";",
                "+\t\t}",
                "+",
                "+\t\tString dotPath = path.toDotPath();",
                "+",
                "+\t\treturn dotPath == null ? \"\" : dotPath;",
                "+\t}",
                "+",
                "+\tprivate static String createMessage(TypeInformation<?> type, String unresolvableSegment) {",
                "+",
                "+\t\tSet<String> potentialMatches = detectPotentialMatches(unresolvableSegment, type.getType());",
                "+\t\tObject match = StringUtils.collectionToCommaDelimitedString(potentialMatches);",
                "+",
                "+\t\treturn String.format(DEFAULT_MESSAGE, unresolvableSegment, type.getType(), match);",
                "+\t}",
                "+",
                "+\tprivate static Set<String> detectPotentialMatches(String propertyName, Class<?> type) {",
                "+",
                "+\t\tSet<String> result = new HashSet<>();",
                "+\t\tresult.addAll(Arrays.asList(PropertyMatches.forField(propertyName, type).getPossibleMatches()));",
                "+\t\tresult.addAll(Arrays.asList(PropertyMatches.forProperty(propertyName, type).getPossibleMatches()));",
                "+",
                "+\t\treturn result;",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/springframework/data/mapping/context/MappingContext.java b/src/main/java/org/springframework/data/mapping/context/MappingContext.java",
                "index 8a2b560d5..6d640d935 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/MappingContext.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/MappingContext.java",
                "@@ -18,2 +18,3 @@ package org.springframework.data.mapping.context;",
                " import java.util.Collection;",
                "+import java.util.function.Predicate;",
                "@@ -22,2 +23,4 @@ import org.springframework.data.mapping.PersistentEntity;",
                " import org.springframework.data.mapping.PersistentProperty;",
                "+import org.springframework.data.mapping.PersistentPropertyPath;",
                "+import org.springframework.data.mapping.PersistentPropertyPaths;",
                " import org.springframework.data.mapping.PropertyPath;",
                "@@ -186,2 +189,15 @@ public interface MappingContext<E extends PersistentEntity<?, P>, P extends Pers",
                "+\t/**",
                "+\t * Returns all {@link PersistentPropertyPath}s pointing to properties on the given type that match the given",
                "+\t * {@link Predicate}. In case of circular references the detection will stop at the property that references a type",
                "+\t * that's already included in the path. Note, that is is a potentially expensive operation as results cannot be",
                "+\t * cached.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param predicate must not be {@literal null}.",
                "+\t * @return",
                "+\t * @since 2.1",
                "+\t */",
                "+\t<T> PersistentPropertyPaths<T, P> findPersistentPropertyPaths(Class<T> type, Predicate<? super P> predicate);",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/mapping/context/PersistentEntities.java b/src/main/java/org/springframework/data/mapping/context/PersistentEntities.java",
                "index 6e8e4d80d..3a0c864bf 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/PersistentEntities.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/PersistentEntities.java",
                "@@ -19,2 +19,3 @@ import java.util.Iterator;",
                " import java.util.Optional;",
                "+import java.util.function.BiFunction;",
                " import java.util.stream.Collectors;",
                "@@ -35,3 +36,3 @@ public class PersistentEntities implements Streamable<PersistentEntity<?, ? exte",
                "-\tprivate final Streamable<? extends MappingContext<?, ?>> contexts;",
                "+\tprivate final Streamable<? extends MappingContext<?, ? extends PersistentProperty<?>>> contexts;",
                "@@ -80,2 +81,22 @@ public class PersistentEntities implements Streamable<PersistentEntity<?, ? exte",
                "+\t/**",
                "+\t * Executes the given {@link BiFunction} on the given {@link MappingContext} and {@link PersistentEntity} based on the",
                "+\t * given type.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param combiner must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic <T> Optional<T> mapOnContext(Class<?> type,",
                "+\t\t\tBiFunction<MappingContext<?, ? extends PersistentProperty<?>>, PersistentEntity<?, ?>, T> combiner) {",
                "+",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.notNull(combiner, \"Combining BiFunction must not be null!\");",
                "+",
                "+\t\treturn contexts.stream() //",
                "+\t\t\t\t.filter(it -> it.hasPersistentEntityFor(type)) //",
                "+\t\t\t\t.map(it -> combiner.apply(it, it.getRequiredPersistentEntity(type))) //",
                "+\t\t\t\t.findFirst();",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/mapping/context/PersistentPropertyPathFactory.java b/src/main/java/org/springframework/data/mapping/context/PersistentPropertyPathFactory.java",
                "new file mode 100644",
                "index 000000000..a6faf1d77",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/mapping/context/PersistentPropertyPathFactory.java",
                "@@ -0,0 +1,387 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.mapping.context;",
                "+",
                "+import lombok.AccessLevel;",
                "+import lombok.RequiredArgsConstructor;",
                "+import lombok.ToString;",
                "+import lombok.Value;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.Comparator;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.Set;",
                "+import java.util.function.Function;",
                "+import java.util.function.Predicate;",
                "+import java.util.stream.Stream;",
                "+",
                "+import org.springframework.data.mapping.AssociationHandler;",
                "+import org.springframework.data.mapping.PersistentEntity;",
                "+import org.springframework.data.mapping.PersistentProperty;",
                "+import org.springframework.data.mapping.PersistentPropertyPath;",
                "+import org.springframework.data.mapping.PersistentPropertyPaths;",
                "+import org.springframework.data.mapping.PropertyHandler;",
                "+import org.springframework.data.mapping.PropertyPath;",
                "+import org.springframework.data.util.ClassTypeInformation;",
                "+import org.springframework.data.util.Pair;",
                "+import org.springframework.data.util.StreamUtils;",
                "+import org.springframework.data.util.TypeInformation;",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+import org.springframework.util.ConcurrentReferenceHashMap;",
                "+import org.springframework.util.StringUtils;",
                "+",
                "+/**",
                "+ * A factory implementation to create {@link PersistentPropertyPath} instances in various ways.",
                "+ * ",
                "+ * @author Oliver Gierke",
                "+ * @since 2.1",
                "+ * @soundtrack Cypress Hill - Boom Biddy Bye Bye (Fugees Remix, Unreleased & Revamped)",
                "+ */",
                "+@RequiredArgsConstructor",
                "+class PersistentPropertyPathFactory<E extends PersistentEntity<?, P>, P extends PersistentProperty<P>> {",
                "+",
                "+\tprivate static final Predicate<PersistentProperty<?>> IS_ENTITY = it -> it.isEntity();",
                "+",
                "+\tprivate final Map<TypeAndPath, PersistentPropertyPath<P>> propertyPaths = new ConcurrentReferenceHashMap<>();",
                "+\tprivate final MappingContext<E, P> context;",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PersistentPropertyPath} for the given property path on the given type.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param propertyPath must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic PersistentPropertyPath<P> from(Class<?> type, String propertyPath) {",
                "+",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.notNull(propertyPath, \"Property path must not be null!\");",
                "+",
                "+\t\treturn getPersistentPropertyPath(ClassTypeInformation.from(type), propertyPath);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PersistentPropertyPath} for the given property path on the given type.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param propertyPath must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic PersistentPropertyPath<P> from(TypeInformation<?> type, String propertyPath) {",
                "+",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.notNull(propertyPath, \"Property path must not be null!\");",
                "+",
                "+\t\treturn getPersistentPropertyPath(type, propertyPath);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PersistentPropertyPath} for the given {@link PropertyPath}.",
                "+\t * ",
                "+\t * @param path must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic PersistentPropertyPath<P> from(PropertyPath path) {",
                "+",
                "+\t\tAssert.notNull(path, \"Property path must not be null!\");",
                "+",
                "+\t\treturn from(path.getOwningType(), path.toDotPath());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PersistentPropertyPath} based on a given type and {@link Predicate} to select properties",
                "+\t * matching it.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param propertyFilter must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic <T> PersistentPropertyPaths<T, P> from(Class<T> type, Predicate<? super P> propertyFilter) {",
                "+",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.notNull(propertyFilter, \"Property filter must not be null!\");",
                "+",
                "+\t\treturn from(ClassTypeInformation.from(type), propertyFilter);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PersistentPropertyPath} based on a given type and {@link Predicate} to select properties",
                "+\t * matching it.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param propertyFilter must not be {@literal null}.",
                "+\t * @param traversalGuard must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic <T> PersistentPropertyPaths<T, P> from(Class<T> type, Predicate<? super P> propertyFilter,",
                "+\t\t\tPredicate<P> traversalGuard) {",
                "+",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.notNull(propertyFilter, \"Property filter must not be null!\");",
                "+\t\tAssert.notNull(traversalGuard, \"Traversal guard must not be null!\");",
                "+",
                "+\t\treturn from(ClassTypeInformation.from(type), propertyFilter, traversalGuard);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PersistentPropertyPath} based on a given type and {@link Predicate} to select properties",
                "+\t * matching it.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param propertyFilter must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic <T> PersistentPropertyPaths<T, P> from(TypeInformation<T> type, Predicate<? super P> propertyFilter) {",
                "+\t\treturn from(type, propertyFilter, it -> !it.isAssociation());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PersistentPropertyPath} based on a given type and {@link Predicate} to select properties",
                "+\t * matching it.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param propertyFilter must not be {@literal null}.",
                "+\t * @param traversalGuard must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic <T> PersistentPropertyPaths<T, P> from(TypeInformation<T> type, Predicate<? super P> propertyFilter,",
                "+\t\t\tPredicate<P> traversalGuard) {",
                "+",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.notNull(propertyFilter, \"Property filter must not be null!\");",
                "+\t\tAssert.notNull(traversalGuard, \"Traversal guard must not be null!\");",
                "+",
                "+\t\treturn DefaultPersistentPropertyPaths.of(type,",
                "+\t\t\t\tfrom(type, propertyFilter, traversalGuard, DefaultPersistentPropertyPath.empty()));",
                "+\t}",
                "+",
                "+\tprivate PersistentPropertyPath<P> getPersistentPropertyPath(TypeInformation<?> type, String propertyPath) {",
                "+",
                "+\t\treturn propertyPaths.computeIfAbsent(TypeAndPath.of(type, propertyPath),",
                "+\t\t\t\tit -> createPersistentPropertyPath(it.getPath(), it.getType()));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a {@link PersistentPropertyPath} for the given parts and {@link TypeInformation}.",
                "+\t *",
                "+\t * @param propertyPath must not be {@literal null}.",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tprivate PersistentPropertyPath<P> createPersistentPropertyPath(String propertyPath, TypeInformation<?> type) {",
                "+",
                "+\t\tString trimmedPath = propertyPath.trim();",
                "+",
                "+\t\tList<String> parts = trimmedPath.isEmpty() //",
                "+\t\t\t\t? Collections.emptyList() //",
                "+\t\t\t\t: Arrays.asList(trimmedPath.split(\"\\\\.\"));",
                "+",
                "+\t\tDefaultPersistentPropertyPath<P> path = DefaultPersistentPropertyPath.empty();",
                "+\t\tIterator<String> iterator = parts.iterator();",
                "+\t\tE current = context.getRequiredPersistentEntity(type);",
                "+",
                "+\t\twhile (iterator.hasNext()) {",
                "+",
                "+\t\t\tString segment = iterator.next();",
                "+\t\t\tfinal DefaultPersistentPropertyPath<P> currentPath = path;",
                "+",
                "+\t\t\tPair<DefaultPersistentPropertyPath<P>, E> pair = getPair(path, iterator, segment, current);",
                "+",
                "+\t\t\tif (pair == null) {",
                "+",
                "+\t\t\t\tString source = StringUtils.collectionToDelimitedString(parts, \".\");",
                "+",
                "+\t\t\t\tthrow new InvalidPersistentPropertyPath(source, type, segment, currentPath);",
                "+\t\t\t}",
                "+",
                "+\t\t\tpath = pair.getFirst();",
                "+\t\t\tcurrent = pair.getSecond();",
                "+\t\t}",
                "+",
                "+\t\treturn path;",
                "+\t}",
                "+",
                "+\t@Nullable",
                "+\tprivate Pair<DefaultPersistentPropertyPath<P>, E> getPair(DefaultPersistentPropertyPath<P> path,",
                "+\t\t\tIterator<String> iterator, String segment, E entity) {",
                "+",
                "+\t\tP property = entity.getPersistentProperty(segment);",
                "+",
                "+\t\tif (property == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\tTypeInformation<?> type = property.getTypeInformation().getRequiredActualType();",
                "+\t\treturn Pair.of(path.append(property), iterator.hasNext() ? context.getRequiredPersistentEntity(type) : entity);",
                "+\t}",
                "+",
                "+\tprivate <T> Collection<PersistentPropertyPath<P>> from(TypeInformation<T> type, Predicate<? super P> filter,",
                "+\t\t\tPredicate<P> traversalGuard, DefaultPersistentPropertyPath<P> basePath) {",
                "+",
                "+\t\tTypeInformation<?> actualType = type.getActualType();",
                "+",
                "+\t\tif (actualType == null) {",
                "+\t\t\treturn Collections.emptyList();",
                "+\t\t}",
                "+",
                "+\t\tE entity = context.getRequiredPersistentEntity(actualType);",
                "+\t\tSet<PersistentPropertyPath<P>> properties = new HashSet<>();",
                "+",
                "+\t\tPropertyHandler<P> propertyTester = persistentProperty -> {",
                "+",
                "+\t\t\tTypeInformation<?> typeInformation = persistentProperty.getTypeInformation();",
                "+\t\t\tTypeInformation<?> actualPropertyType = typeInformation.getActualType();",
                "+",
                "+\t\t\tif (basePath.containsPropertyOfType(actualPropertyType)) {",
                "+\t\t\t\treturn;",
                "+\t\t\t}",
                "+",
                "+\t\t\tDefaultPersistentPropertyPath<P> currentPath = basePath.append(persistentProperty);",
                "+",
                "+\t\t\tif (filter.test(persistentProperty)) {",
                "+\t\t\t\tproperties.add(currentPath);",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (traversalGuard.and(IS_ENTITY).test(persistentProperty)) {",
                "+\t\t\t\tproperties.addAll(from(typeInformation, filter, traversalGuard, currentPath));",
                "+\t\t\t}",
                "+\t\t};",
                "+",
                "+\t\tentity.doWithProperties(propertyTester);",
                "+",
                "+\t\tAssociationHandler<P> handler = association -> propertyTester.doWithPersistentProperty(association.getInverse());",
                "+\t\tentity.doWithAssociations(handler);",
                "+",
                "+\t\treturn properties;",
                "+\t}",
                "+",
                "+\t@Value(staticConstructor = \"of\")",
                "+\tstatic class TypeAndPath {",
                "+",
                "+\t\tTypeInformation<?> type;",
                "+\t\tString path;",
                "+\t}",
                "+",
                "+\t@ToString",
                "+\t@RequiredArgsConstructor(access = AccessLevel.PRIVATE)",
                "+\tstatic class DefaultPersistentPropertyPaths<T, P extends PersistentProperty<P>>",
                "+\t\t\timplements PersistentPropertyPaths<T, P> {",
                "+",
                "+\t\tprivate static final Comparator<PersistentPropertyPath<?>> SHORTEST_PATH = Comparator",
                "+\t\t\t\t.comparingInt(PersistentPropertyPath::getLength);",
                "+",
                "+\t\tprivate final TypeInformation<T> type;",
                "+\t\tprivate final Iterable<PersistentPropertyPath<P>> paths;",
                "+",
                "+\t\t/**",
                "+\t\t * Creates a new {@link DefaultPersistentPropertyPaths} instance",
                "+\t\t * ",
                "+\t\t * @param type",
                "+\t\t * @param paths",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tstatic <T, P extends PersistentProperty<P>> PersistentPropertyPaths<T, P> of(TypeInformation<T> type,",
                "+\t\t\t\tCollection<PersistentPropertyPath<P>> paths) {",
                "+",
                "+\t\t\tList<PersistentPropertyPath<P>> sorted = new ArrayList<>(paths);",
                "+",
                "+\t\t\tCollections.sort(sorted, SHORTEST_PATH.thenComparing(ShortestSegmentFirst.INSTANCE));",
                "+",
                "+\t\t\treturn new DefaultPersistentPropertyPaths<>(type, sorted);",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.mapping.PersistentPropertyPaths#getFirst()",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Optional<PersistentPropertyPath<P>> getFirst() {",
                "+\t\t\treturn isEmpty() ? Optional.empty() : Optional.of(iterator().next());",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.mapping.PersistentPropertyPaths#contains(java.lang.String)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic boolean contains(String path) {",
                "+\t\t\treturn contains(PropertyPath.from(path, type));",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.mapping.PersistentPropertyPaths#contains(org.springframework.data.mapping.PropertyPath)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic boolean contains(PropertyPath path) {",
                "+",
                "+\t\t\tAssert.notNull(path, \"PropertyPath must not be null!\");",
                "+",
                "+\t\t\tif (!path.getOwningType().equals(type)) {",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+",
                "+\t\t\tString dotPath = path.toDotPath();",
                "+",
                "+\t\t\treturn stream().anyMatch(it -> dotPath.equals(it.toDotPath()));",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see java.lang.Iterable#iterator()",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Iterator<PersistentPropertyPath<P>> iterator() {",
                "+\t\t\treturn paths.iterator();",
                "+\t\t}",
                "+",
                "+\t\t/**",
                "+\t\t * Simple {@link Comparator} to sort {@link PersistentPropertyPath} instances by their property segment's name",
                "+\t\t * length.",
                "+\t\t * ",
                "+\t\t * @author Oliver Gierke",
                "+\t\t * @since 2.1",
                "+\t\t */",
                "+\t\tprivate static enum ShortestSegmentFirst",
                "+\t\t\t\timplements Comparator<PersistentPropertyPath<? extends PersistentProperty<?>>> {",
                "+",
                "+\t\t\tINSTANCE;",
                "+",
                "+\t\t\t@Override",
                "+\t\t\t@SuppressWarnings(\"null\")",
                "+\t\t\tpublic int compare(PersistentPropertyPath<?> left, PersistentPropertyPath<?> right) {",
                "+",
                "+\t\t\t\tFunction<PersistentProperty<?>, Integer> mapper = it -> it.getName().length();",
                "+",
                "+\t\t\t\tStream<Integer> leftNames = left.stream().map(mapper);",
                "+\t\t\t\tStream<Integer> rightNames = right.stream().map(mapper);",
                "+",
                "+\t\t\t\treturn StreamUtils.zip(leftNames, rightNames, (l, r) -> l - r) //",
                "+\t\t\t\t\t\t.filter(it -> it != 0) //",
                "+\t\t\t\t\t\t.findFirst() //",
                "+\t\t\t\t\t\t.orElse(0);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java b/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "index f59987762..aa6610f9c 100644",
                "--- a/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "+++ b/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "@@ -132,9 +132,8 @@ public abstract class AbstractPersistentProperty<P extends PersistentProperty<P>",
                "-\t/*",
                "+\t/* ",
                " \t * (non-Javadoc)",
                "-\t * @see org.springframework.data.mapping.PersistentProperty#getPersistentEntityType()",
                "+\t * @see org.springframework.data.mapping.PersistentProperty#getPersistentEntityTypes()",
                " \t */",
                "-\t@Deprecated",
                " \t@Override",
                "-\tpublic Iterable<? extends TypeInformation<?>> getPersistentEntityType() {",
                "+\tpublic Iterable<? extends TypeInformation<?>> getPersistentEntityTypes() {",
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryComposition.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryComposition.java",
                "index 8b235f1f9..a357cfe6f 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryComposition.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryComposition.java",
                "@@ -219,6 +219,5 @@ public class RepositoryComposition {",
                "-\t\tfragments.stream()",
                "-\t\t\t\t.forEach(it -> it.getImplementation() //",
                "-\t\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Fragment %s has no implementation.\",",
                "-\t\t\t\t\t\t\t\tClassUtils.getQualifiedName(it.getSignatureContributor())))));",
                "+\t\tfragments.stream().forEach(it -> it.getImplementation() //",
                "+\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Fragment %s has no implementation.\",",
                "+\t\t\t\t\t\tClassUtils.getQualifiedName(it.getSignatureContributor())))));",
                " \t}",
                "@@ -322,11 +321,2 @@ public class RepositoryComposition {",
                "-\t\t/**",
                "-\t\t * Return {@literal true} if this {@link RepositoryFragments} contains no {@link RepositoryFragment fragments}.",
                "-\t\t *",
                "-\t\t * @return {@literal true} if this {@link RepositoryFragments} contains no {@link RepositoryFragment fragments}.",
                "-\t\t */",
                "-\t\tpublic boolean isEmpty() {",
                "-\t\t\treturn fragments.isEmpty();",
                "-\t\t}",
                "-",
                " \t\t/*",
                "@@ -340,10 +330,2 @@ public class RepositoryComposition {",
                "-\t\t/**",
                "-\t\t * @return {@link Stream} of {@link RepositoryFragment fragments}.",
                "-\t\t */",
                "-\t\t@Override",
                "-\t\tpublic Stream<RepositoryFragment<?>> stream() {",
                "-\t\t\treturn fragments.stream();",
                "-\t\t}",
                "-",
                " \t\t/**",
                "diff --git a/src/main/java/org/springframework/data/util/StreamUtils.java b/src/main/java/org/springframework/data/util/StreamUtils.java",
                "index 54315ba45..c3070299d 100644",
                "--- a/src/main/java/org/springframework/data/util/StreamUtils.java",
                "+++ b/src/main/java/org/springframework/data/util/StreamUtils.java",
                "@@ -25,2 +25,5 @@ import java.util.Spliterator;",
                " import java.util.Spliterators;",
                "+import java.util.Spliterators.AbstractSpliterator;",
                "+import java.util.function.BiFunction;",
                "+import java.util.function.Consumer;",
                " import java.util.function.Function;",
                "@@ -109,2 +112,37 @@ public interface StreamUtils {",
                " \t}",
                "+",
                "+\t/**",
                "+\t * Zips the given {@link Stream}s using the given {@link BiFunction}. The resulting {@link Stream} will have the",
                "+\t * length of the shorter of the two, abbreviating the zipping when the shorter of the two {@link Stream}s is",
                "+\t * exhausted.",
                "+\t * ",
                "+\t * @param left must not be {@literal null}.",
                "+\t * @param right must not be {@literal null}.",
                "+\t * @param combiner must not be {@literal null}.",
                "+\t * @return",
                "+\t * @since 2.1",
                "+\t */",
                "+\tpublic static <L, R, T> Stream<T> zip(Stream<L> left, Stream<R> right, BiFunction<L, R, T> combiner) {",
                "+",
                "+\t\tAssert.notNull(left, \"Left stream must not be null!\");",
                "+\t\tAssert.notNull(right, \"Right must not be null!\");",
                "+\t\tAssert.notNull(combiner, \"Combiner must not be null!\");",
                "+",
                "+\t\tSpliterator<L> lefts = left.spliterator();",
                "+\t\tSpliterator<R> rights = right.spliterator();",
                "+",
                "+\t\tlong size = Long.min(lefts.estimateSize(), rights.estimateSize());",
                "+\t\tint characteristics = lefts.characteristics() & rights.characteristics();",
                "+\t\tboolean parallel = left.isParallel() || right.isParallel();",
                "+",
                "+\t\treturn StreamSupport.stream(new AbstractSpliterator<T>(size, characteristics) {",
                "+",
                "+\t\t\t@Override",
                "+\t\t\t@SuppressWarnings(\"null\")",
                "+\t\t\tpublic boolean tryAdvance(Consumer<? super T> action) {",
                "+\t\t\t\treturn lefts.tryAdvance(left -> rights.tryAdvance(right -> action.accept(combiner.apply(left, right))));",
                "+\t\t\t}",
                "+",
                "+\t\t}, parallel);",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/springframework/data/util/Streamable.java b/src/main/java/org/springframework/data/util/Streamable.java",
                "index 68aed2ac7..a3a0802e4 100644",
                "--- a/src/main/java/org/springframework/data/util/Streamable.java",
                "+++ b/src/main/java/org/springframework/data/util/Streamable.java",
                "@@ -123,2 +123,11 @@ public interface Streamable<T> extends Iterable<T> {",
                " \t}",
                "+",
                "+\t/**",
                "+\t * Returns whether the current {@link Streamable} is empty.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tdefault boolean isEmpty() {",
                "+\t\treturn !iterator().hasNext();",
                "+\t}",
                " }"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/PersistentProperty.java",
                "src/main/java/org/springframework/data/mapping/PersistentPropertyAccessor.java",
                "src/main/java/org/springframework/data/mapping/PersistentPropertyPath.java",
                "src/main/java/org/springframework/data/mapping/PersistentPropertyPaths.java",
                "src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "src/main/java/org/springframework/data/mapping/context/DefaultPersistentPropertyPath.java",
                "src/main/java/org/springframework/data/mapping/context/InvalidPersistentPropertyPath.java",
                "src/main/java/org/springframework/data/mapping/context/MappingContext.java",
                "src/main/java/org/springframework/data/mapping/context/PersistentEntities.java",
                "src/main/java/org/springframework/data/mapping/context/PersistentPropertyPathFactory.java",
                "src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "src/main/java/org/springframework/data/repository/core/support/RepositoryComposition.java",
                "src/main/java/org/springframework/data/util/StreamUtils.java",
                "src/main/java/org/springframework/data/util/Streamable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: path, contain, property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: path, property",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "142c9ddb5c866a7f7a652cc1da7caa0c895861d3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522934870,
            "hunks": 2,
            "message": "DATACMNS-1289 - Allow fragment creation only from implementations that implement their declared class. We now check that fragment implementations created via RepositoryFragment.implemented(Class<T>, T) are a subtype of the given class. This assertion raises an exception that prevents errors during runtime. This change addresses an issue with customized intermediate base repositories in combination with ambiguous naming of implementations. Method invocations fail if a repository derives from a customized base repository interface that implements e.g. CrudRepository and there's an implementation matching the base repository name followed by the implementation suffix. We assume in that case, the implementation contains implementations of the methods declared in the customized base interface. Original pull request: #280.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "index 66fd51e98..51a664e61 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java",
                "@@ -157,3 +157,2 @@ public interface RepositoryFragment<T> {",
                "-\t@RequiredArgsConstructor",
                " \t@EqualsAndHashCode(callSuper = false)",
                "@@ -161,4 +160,20 @@ public interface RepositoryFragment<T> {",
                "-\t\tprivate final @NonNull Optional<Class<T>> interfaceClass;",
                "-\t\tprivate final @NonNull T implementation;",
                "+\t\tprivate final Optional<Class<T>> interfaceClass;",
                "+\t\tprivate final T implementation;",
                "+",
                "+\t\tpublic ImplementedRepositoryFragment(Optional<Class<T>> interfaceClass, T implementation) {",
                "+",
                "+\t\t\tAssert.notNull(interfaceClass, \"Interface class must not be null!\");",
                "+\t\t\tAssert.notNull(implementation, \"Implementation object must not be null!\");",
                "+",
                "+\t\t\tinterfaceClass.ifPresent(it -> {",
                "+",
                "+\t\t\t\tAssert.isTrue(ClassUtils.isAssignableValue(it, implementation),",
                "+\t\t\t\t\t\t() -> String.format(\"Fragment implementation %s does not implement %s!\", ClassUtils.getQualifiedName(it),",
                "+\t\t\t\t\t\t\t\tClassUtils.getQualifiedName(implementation.getClass())));",
                "+\t\t\t});",
                "+",
                "+\t\t\tthis.interfaceClass = interfaceClass;",
                "+\t\t\tthis.implementation = implementation;",
                "+\t\t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFragment.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "280": "Call to save(\u2026) on customized intermediate repository fails with \"Object is not an instance of declaring class.\" [DATACMNS-1289] #1731"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "532af1a6b9d090495a79cd154751ce2b73986655"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue, request, contain",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 280",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "567d665111403ebb75abcd86b08825d5fc66efa6",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523605167,
            "hunks": 1,
            "message": "DATACMNS-1291 - Fix method signature in repository projection documentation. Original pull request: #285.",
            "diff": [
                "diff --git a/src/main/asciidoc/repository-projections.adoc b/src/main/asciidoc/repository-projections.adoc",
                "index 49ffcbbd3..ea707cba8 100644",
                "--- a/src/main/asciidoc/repository-projections.adoc",
                "+++ b/src/main/asciidoc/repository-projections.adoc",
                "@@ -262,3 +262,3 @@ interface PersonRepository extends Repository<Person, UUID> {",
                "-  Collection<T> findByLastname(String lastname, Class<T> type);",
                "+  <T> Collection<T> findByLastname(String lastname, Class<T> type);",
                " }"
            ],
            "changed_files": [
                "src/main/asciidoc/repository-projections.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "285": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "39b82e4ce6c72dbc47f0a4e3e04198f04236cf48"
                ],
                [
                    "no-tag",
                    "e1ec4bc17bfd6bd79b6d582d7da11a4d1e2e2ec7"
                ]
            ],
            "tags": [
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 285",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "73103f35510a5388ed90a243a0a22a68e53f55f3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522158867,
            "hunks": 3,
            "message": "DATACMNS-1281 - Fixed potential concurrency issue in MappingAuditableBeanWrapperFactory. We now use a ConcurrentReferenceHashMap to cache the metadata calculated to prevent ConcurrentModificationExceptions getBeanWrapperFor(\u00e2\u0080\u00a6).",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java b/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "index 28f201eb5..08afabda5 100644",
                "--- a/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "+++ b/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "@@ -18,3 +18,2 @@ package org.springframework.data.auditing;",
                " import java.time.temporal.TemporalAccessor;",
                "-import java.util.HashMap;",
                " import java.util.Map;",
                "@@ -34,2 +33,3 @@ import org.springframework.data.util.Optionals;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ConcurrentReferenceHashMap;",
                "@@ -59,3 +59,3 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\tthis.entities = entities;",
                "-\t\tthis.metadataCache = new HashMap<>();",
                "+\t\tthis.metadataCache = new ConcurrentReferenceHashMap<>();",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8bbcca2ef2b922108da9462e797278e7bd27a15b"
                ],
                [
                    "no-tag",
                    "b0dc8be7f04f32158ef5ca9a4a8aebe0fa40f423"
                ]
            ],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55f9f04c8fd03fbb3db8d2251cc1a0196a8ae8e1",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515749504,
            "hunks": 29,
            "message": "DATACMNS-1206 - Polishing. Moved PropertyDescriptor lookup into dedicated subclass to group functionality around the type and MethodsMetadata instances. Extracted individual stream handling steps into dedicated methods for better understandability. Moved MethodsMetadataReader into classreading package for symmetry with Spring Framework's metadata arrangement. Removed manually declared getters in DefaultMethodsMetadataReader in favor of Lombok getters. Inlined MethodsMetadataReadingVisitor into DefaultMethodsMetadataReader as it's only used there. Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 7f24d23ef..926bc1fa8 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.projection;",
                "+import lombok.extern.slf4j.Slf4j;",
                "+",
                " import java.beans.PropertyDescriptor;",
                "@@ -20,3 +22,2 @@ import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "-import java.util.ArrayList;",
                " import java.util.Arrays;",
                "@@ -31,7 +32,7 @@ import java.util.stream.Stream;",
                " import org.springframework.beans.BeanUtils;",
                "-import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                " import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                "+import org.springframework.data.util.StreamUtils;",
                " import org.springframework.util.Assert;",
                "@@ -63,3 +64,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tthis.projectionType = type;",
                "-\t\tthis.properties = collectDescriptors(type);",
                "+\t\tthis.properties = new PropertyDescriptorSource(type).getDescriptors();",
                " \t}",
                "@@ -109,100 +110,168 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t/**",
                "-\t * Collects {@link PropertyDescriptor}s for all properties exposed by the given type and all its super interfaces.",
                "+\t * Returns whether the given {@link PropertyDescriptor} has a getter that is a Java 8 default method.",
                " \t *",
                "-\t * @param type must not be {@literal null}.",
                "+\t * @param descriptor must not be {@literal null}.",
                " \t * @return",
                " \t */",
                "-\tprivate static List<PropertyDescriptor> collectDescriptors(Class<?> type) {",
                "+\tprivate static boolean hasDefaultGetter(PropertyDescriptor descriptor) {",
                "-\t\tList<PropertyDescriptor> result = new ArrayList<>();",
                "+\t\tMethod method = descriptor.getReadMethod();",
                "-\t\tOptional<MethodsMetadata> metadata = getMetadata(type);",
                "-\t\tStream<PropertyDescriptor> stream = Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "-\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+\t\treturn method == null ? false : method.isDefault();",
                "+\t}",
                "-\t\tStream<PropertyDescriptor> streamToUse = metadata.map(DefaultProjectionInformation::getMethodOrder)",
                "-\t\t\t\t.filter(it -> !it.isEmpty()) //",
                "-\t\t\t\t.map(it -> stream.filter(descriptor -> it.containsKey(descriptor.getReadMethod().getName()))",
                "-\t\t\t\t\t\t.sorted(Comparator.comparingInt(left -> it.get(left.getReadMethod().getName())))) //",
                "-\t\t\t\t.orElse(stream);",
                "+\t/**",
                "+\t * Internal helper to detect {@link PropertyDescriptor} instances for a given type.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @author Oliver Gierke",
                "+\t * @since 2.1",
                "+\t * @soundtrack The Meters - Cissy Strut (Here Comes The Meter Man)",
                "+\t */",
                "+\t@Slf4j",
                "+\tprivate static class PropertyDescriptorSource {",
                "-\t\tresult.addAll(streamToUse.collect(Collectors.toList()));",
                "+\t\tprivate final Class<?> type;",
                "+\t\tprivate final Optional<MethodsMetadata> metadata;",
                "-\t\tif (metadata.isPresent()) {",
                "+\t\t/**",
                "+\t\t * Creates a new {@link PropertyDescriptorSource} for the given type.",
                "+\t\t * ",
                "+\t\t * @param type must not be {@literal null}.",
                "+\t\t */",
                "+\t\tpublic PropertyDescriptorSource(Class<?> type) {",
                "-\t\t\tStream<String> interfaceNames = metadata.map(ClassMetadata::getInterfaceNames) //",
                "-\t\t\t\t\t.map(Arrays::stream) //",
                "-\t\t\t\t\t.orElse(Stream.empty());",
                "+\t\t\tAssert.notNull(type, \"Type must not be null!\");",
                "-\t\t\tresult.addAll(interfaceNames.map(it -> loadClass(it, type.getClassLoader())) //",
                "-\t\t\t\t\t.map(DefaultProjectionInformation::collectDescriptors) //",
                "-\t\t\t\t\t.flatMap(List::stream) //",
                "-\t\t\t\t\t.collect(Collectors.toList()));",
                "-\t\t} else {",
                "+\t\t\tthis.type = type;",
                "+\t\t\tthis.metadata = getMetadata(type);",
                "+\t\t}",
                "-\t\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "-\t\t\t}",
                "+\t\t/**",
                "+\t\t * Returns {@link PropertyDescriptor}s for all properties exposed by the given type and all its super interfaces.",
                "+\t\t *",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tpublic List<PropertyDescriptor> getDescriptors() {",
                "+\t\t\treturn collectDescriptors().distinct().collect(StreamUtils.toUnmodifiableList());",
                " \t\t}",
                "-\t\treturn result.stream().distinct().collect(Collectors.toList());",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Recursively collects {@link PropertyDescriptor}s for all properties exposed by the given type and all its super",
                "+\t\t * interfaces.",
                "+\t\t *",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<PropertyDescriptor> collectDescriptors() {",
                "+",
                "+\t\t\tStream<PropertyDescriptor> allButDefaultGetters = Arrays.stream(BeanUtils.getPropertyDescriptors(type)) //",
                "+\t\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+",
                "+\t\t\tStream<PropertyDescriptor> ownDescriptors = metadata.map(it -> filterAndOrder(allButDefaultGetters, it))",
                "+\t\t\t\t\t.orElse(allButDefaultGetters);",
                "-\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+\t\t\tStream<PropertyDescriptor> superTypeDescriptors = metadata.map(this::fromMetadata) //",
                "+\t\t\t\t\t.orElseGet(this::fromType) //",
                "+\t\t\t\t\t.flatMap(it -> new PropertyDescriptorSource(it).collectDescriptors());",
                "-\t\ttry {",
                "-\t\t\treturn ClassUtils.forName(className, classLoader);",
                "-\t\t} catch (ClassNotFoundException e) {",
                "-\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t\treturn Stream.concat(ownDescriptors, superTypeDescriptors);",
                " \t\t}",
                "-\t}",
                "-\t/**",
                "-\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "-\t *",
                "-\t * @param metadata",
                "-\t * @return",
                "-\t */",
                "-\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+\t\t/**",
                "+\t\t * Returns a Stream of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only returning",
                "+\t\t * methods seen by the given {@link MethodsMetadata}.",
                "+\t\t * ",
                "+\t\t * @param source must not be {@literal null}.",
                "+\t\t * @param metadata must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Stream<PropertyDescriptor> filterAndOrder(Stream<PropertyDescriptor> source,",
                "+\t\t\t\tMethodsMetadata metadata) {",
                "+",
                "+\t\t\tMap<String, Integer> orderedMethods = getMethodOrder(metadata);",
                "+",
                "+\t\t\tif (orderedMethods.isEmpty()) {",
                "+\t\t\t\treturn source;",
                "+\t\t\t}",
                "-\t\tList<String> methods = metadata.getMethods() //",
                "-\t\t\t\t.stream() //",
                "-\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "-\t\t\t\t.distinct() //",
                "-\t\t\t\t.collect(Collectors.toList());",
                "+\t\t\treturn source.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\t\t\t.sorted(Comparator.comparingInt(left -> orderedMethods.get(left.getReadMethod().getName())));",
                "+\t\t}",
                "-\t\treturn IntStream.range(0, methods.size()) //",
                "-\t\t\t\t.boxed() //",
                "-\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Returns a {@link Stream} of interfaces using the given {@link MethodsMetadata} as primary source for ordering.",
                "+\t\t * ",
                "+\t\t * @param metadata must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<Class<?>> fromMetadata(MethodsMetadata metadata) {",
                "+\t\t\treturn Arrays.stream(metadata.getInterfaceNames()).map(it -> findType(it, type.getInterfaces()));",
                "+\t\t}",
                "-\t/**",
                "-\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "-\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "-\t *",
                "-\t * @param type must not be {@literal null}.",
                "-\t * @return the optional {@link MethodsMetadata}.",
                "-\t */",
                "-\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "+\t\t/**",
                "+\t\t * Returns a Stream of interfaces using the given type as primary source for ordering.",
                "+\t\t * ",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<Class<?>> fromType() {",
                "+\t\t\treturn Arrays.stream(type.getInterfaces());",
                "+\t\t}",
                "-\t\ttry {",
                "+\t\t/**",
                "+\t\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t\t *",
                "+\t\t * @param type must not be {@literal null}.",
                "+\t\t * @return the optional {@link MethodsMetadata}.",
                "+\t\t */",
                "+\t\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "-\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "-\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "-\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "-\t\t} catch (IOException e) {",
                "-\t\t\treturn Optional.empty();",
                "+\t\t\ttry {",
                "+",
                "+\t\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+",
                "+\t\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "+",
                "+\t\t\t} catch (IOException e) {",
                "+",
                "+\t\t\t\tLOG.info(\"Couldn't read class metadata for {}. Input property calculation might fail!\", type);",
                "+",
                "+\t\t\t\treturn Optional.empty();",
                "+\t\t\t}",
                " \t\t}",
                "-\t}",
                "-\t/**",
                "-\t * Returns whether the given {@link PropertyDescriptor} has a getter that is a Java 8 default method.",
                "-\t *",
                "-\t * @param descriptor must not be {@literal null}.",
                "-\t * @return",
                "-\t */",
                "-\tprivate static boolean hasDefaultGetter(PropertyDescriptor descriptor) {",
                "+\t\t/**",
                "+\t\t * Find the type with the given name in the given array of {@link Class}.",
                "+\t\t * ",
                "+\t\t * @param name must not be {@literal null} or empty.",
                "+\t\t * @param types must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Class<?> findType(String name, Class<?>[] types) {",
                "+",
                "+\t\t\treturn Arrays.stream(types) //",
                "+\t\t\t\t\t.filter(it -> name.equals(it.getName())) //",
                "+\t\t\t\t\t.findFirst()",
                "+\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Did not find type %s in %s!\", name, types)));",
                "+\t\t}",
                "-\t\tMethod method = descriptor.getReadMethod();",
                "-\t\treturn method == null ? false : method.isDefault();",
                "+\t\t/**",
                "+\t\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t\t *",
                "+\t\t * @param metadata",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\t\tList<String> methods = metadata.getMethods() //",
                "+\t\t\t\t\t.stream() //",
                "+\t\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "+\t\t\t\t\t.distinct() //",
                "+\t\t\t\t\t.collect(Collectors.toList());",
                "+",
                "+\t\t\treturn IntStream.range(0, methods.size()) //",
                "+\t\t\t\t\t.boxed() //",
                "+\t\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "index 74fc84988..d9bc3d601 100644",
                "--- a/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -21,2 +21,3 @@ import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index d201637a8..39e249693 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.type.classreading;",
                "+import lombok.Getter;",
                "+",
                " import java.io.BufferedInputStream;",
                "@@ -20,4 +22,9 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.Set;",
                " import org.springframework.asm.ClassReader;",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                " import org.springframework.core.NestedIOException;",
                "@@ -26,5 +33,9 @@ import org.springframework.core.type.AnnotationMetadata;",
                " import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.util.StreamUtils;",
                " import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "@@ -36,2 +47,3 @@ import org.springframework.lang.Nullable;",
                "  */",
                "+@Getter",
                " class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "@@ -45,54 +57,93 @@ class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tcreateClassReader(resource).accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                " \t\tthis.resource = resource;",
                "+\t\tthis.classMetadata = visitor;",
                "+\t\tthis.annotationMetadata = visitor;",
                "+\t\tthis.methodsMetadata = visitor;",
                "+\t}",
                "-\t\tClassReader classReader;",
                "+\tprivate static ClassReader createClassReader(Resource resource) throws IOException {",
                "+",
                "+\t\ttry (InputStream is = new BufferedInputStream(resource.getInputStream())) {",
                "+",
                "+\t\t\treturn new ClassReader(is);",
                "-\t\ttry (InputStream is = new BufferedInputStream(getResource().getInputStream())) {",
                "-\t\t\tclassReader = new ClassReader(is);",
                " \t\t} catch (IllegalArgumentException ex) {",
                " \t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "-\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + resource, ex);",
                " \t\t}",
                "-",
                "-\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "-\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "-",
                "-\t\tclassMetadata = visitor;",
                "-\t\tannotationMetadata = visitor;",
                "-\t\tmethodsMetadata = visitor;",
                " \t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t/**",
                "+\t * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+\t * class, exposing them through the {@link MethodsMetadata} interface.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @since 2.1",
                "+\t * @see ClassMetadata",
                "+\t * @see MethodMetadata",
                "+\t * @see MethodMetadataReadingVisitor",
                " \t */",
                "-\t@Override",
                "-\tpublic Resource getResource() {",
                "-\t\treturn resource;",
                "-\t}",
                "+\tprivate static class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor",
                "+\t\t\timplements MethodsMetadata {",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic ClassMetadata getClassMetadata() {",
                "-\t\treturn classMetadata;",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t\t *",
                "+\t\t * @param classLoader may be {@literal null}.",
                "+\t\t */",
                "+\t\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "+\t\t\tsuper(classLoader);",
                "+\t\t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "-\t\treturn annotationMetadata;",
                "-\t}",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\t@SuppressWarnings(\"null\")",
                "+\t\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-\t/* (non-Javadoc)",
                "-\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodsMetadata getMethodsMetadata() {",
                "-\t\treturn methodsMetadata;",
                "+\t\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "+",
                "+\t\t\t// Skip constructors",
                "+\t\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "+",
                "+\t\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\t\treturn visitor;",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\t\treturn methodMetadataSet.stream() //",
                "+\t\t\t\t\t.filter(it -> it.getMethodName().equals(name)) //",
                "+\t\t\t\t\t.collect(StreamUtils.toUnmodifiableSet());",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..f5797e473",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the {@link MethodsMetadata} for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "index 6f4d249e0..d8a4f7921 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -23,3 +23,2 @@ import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                " import org.springframework.lang.Nullable;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "deleted file mode 100644",
                "index db3826c7c..000000000",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "+++ /dev/null",
                "@@ -1,107 +0,0 @@",
                "-/*",
                "- * Copyright 2018 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.type.classreading;",
                "-",
                "-import java.util.Collections;",
                "-import java.util.LinkedHashSet;",
                "-import java.util.Set;",
                "-",
                "-import org.springframework.asm.MethodVisitor;",
                "-import org.springframework.asm.Opcodes;",
                "-import org.springframework.asm.Type;",
                "-import org.springframework.core.type.ClassMetadata;",
                "-import org.springframework.core.type.MethodMetadata;",
                "-import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "-import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "-import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.lang.Nullable;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "- * class, exposing them through the {@link MethodsMetadata} interface.",
                "- *",
                "- * @author Mark Paluch",
                "- * @since 2.1",
                "- * @see ClassMetadata",
                "- * @see MethodMetadata",
                "- * @see MethodMetadataReadingVisitor",
                "- */",
                "-class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "-",
                "-\t/**",
                "-\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "-\t *",
                "-\t * @param classLoader may be {@literal null}.",
                "-\t */",
                "-\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "-\t\tsuper(classLoader);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-",
                "-\t\t// Skip bridge methods - we're only interested in original user methods.",
                "-\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "-\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\t// Skip constructors",
                "-\t\tif (name.equals(\"<init>\")) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "-\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "-",
                "-\t\tthis.methodMetadataSet.add(visitor);",
                "-\t\treturn visitor;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods() {",
                "-\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods(String name) {",
                "-",
                "-\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "-",
                "-\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);",
                "-",
                "-\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "-\t\t\tif (metadata.getMethodName().equals(name)) {",
                "-\t\t\t\tresult.add(metadata);",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn Collections.unmodifiableSet(result);",
                "-\t}",
                "-}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, property",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8507a1265e337881aa90591f5adaa561c5448e0c",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1519637510,
            "hunks": 6,
            "message": "DATACMNS-1263 - Allow configuration inspection-classloader customization. We now allow customizing the configuration inspection-classloader with RepositoryConfigurationExtensionSupport.getConfigurationInspectionClassLoader(\u00e2\u0080\u00a6). Subclasses may override this method if a customized/isolated classloader is required. Original pull request: #276.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "index a71a52a74..591a6516a 100644",
                "--- a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "@@ -89,3 +89,4 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t\t\tRepositoryConfiguration<T> configuration = getRepositoryConfiguration(candidate, configSource);",
                "-\t\t\tClass<?> repositoryInterface = loadRepositoryInterface(configuration, loader);",
                "+\t\t\tClass<?> repositoryInterface = loadRepositoryInterface(configuration,",
                "+\t\t\t\t\tgetConfigurationInspectionClassLoader(loader));",
                "@@ -115,2 +116,15 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                "+\t/**",
                "+\t * Returns the {@link ClassLoader} to load repository interfaces for configuration inspection. Subclasses may override",
                "+\t * this method to provide a customized class loader.",
                "+\t *",
                "+\t * @param loader must not be {@literal null}.",
                "+\t * @return the {@link ClassLoader} for repository interfaces configuration inspection.",
                "+\t * @since 2.1",
                "+\t */",
                "+\t@Nullable",
                "+\tprotected ClassLoader getConfigurationInspectionClassLoader(ResourceLoader loader) {",
                "+\t\treturn loader.getClassLoader();",
                "+\t}",
                "+",
                " \t/*",
                "@@ -299,6 +313,6 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t * Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given",
                "-\t * {@link ResourceLoader}.",
                "-\t * ",
                "+\t * {@link ClassLoader}.",
                "+\t *",
                " \t * @param configuration must not be {@literal null}.",
                "-\t * @param loader must not be {@literal null}.",
                "+\t * @param classLoader must not be {@literal null}.",
                " \t * @return the repository interface or {@literal null} if it can't be loaded.",
                "@@ -306,6 +320,5 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t@Nullable",
                "-\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration, ResourceLoader loader) {",
                "+\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration, ClassLoader classLoader) {",
                " \t\tString repositoryInterface = configuration.getRepositoryInterface();",
                "-\t\tClassLoader classLoader = loader.getClassLoader();"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "276": "DATAJPA-1250 - Inspect repository interfaces in isolated classloader. spring-projects/spring-data-jpa#253 Allow configuration inspection-classloader customization [DATACMNS-1263] #1701"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 276",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fc181995722880424572eaf15581e0ce22a749d9",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522171032,
            "hunks": 1,
            "message": "DATACMNS-1283 - Removed explicit Jackson version declaration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e6e0790ad..e0b5390ac 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -58,3 +58,2 @@",
                " \t\t\t<artifactId>jackson-databind</artifactId>",
                "-\t\t\t<version>${jackson}</version>",
                " \t\t\t<optional>true</optional>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6293ff325bcdca2d371909b498bbc1ada820da91"
                ],
                [
                    "no-tag",
                    "4715675a3895c339f524207d4ea7838266dbf1ad"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7efaa1b18aedaa23ee896f7e895e81dd03b0a1ab",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1519654918,
            "hunks": 5,
            "message": "DATACMNS-1263 - Polishing. Fixed nullability constraints on method RepositoryConfigurationExtensionSupport.loadRepositoryInterface(\u00e2\u0080\u00a6). Tweaked method declaration order to have public methods first, protected methods after that. Fixed a tiny typo. Original pull request: #276.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "index 591a6516a..6fb0007c0 100644",
                "--- a/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java",
                "@@ -116,15 +116,2 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                "-\t/**",
                "-\t * Returns the {@link ClassLoader} to load repository interfaces for configuration inspection. Subclasses may override",
                "-\t * this method to provide a customized class loader.",
                "-\t *",
                "-\t * @param loader must not be {@literal null}.",
                "-\t * @return the {@link ClassLoader} for repository interfaces configuration inspection.",
                "-\t * @since 2.1",
                "-\t */",
                "-\t@Nullable",
                "-\tprotected ClassLoader getConfigurationInspectionClassLoader(ResourceLoader loader) {",
                "-\t\treturn loader.getClassLoader();",
                "-\t}",
                "-",
                " \t/*",
                "@@ -190,5 +177,18 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                "+\t/**",
                "+\t * Returns the {@link ClassLoader} to load repository interfaces for configuration inspection. Subclasses may override",
                "+\t * this method to provide a customized class loader.",
                "+\t *",
                "+\t * @param loader must not be {@literal null}.",
                "+\t * @return the {@link ClassLoader} for repository interfaces configuration inspection.",
                "+\t * @since 2.1",
                "+\t */",
                "+\t@Nullable",
                "+\tprotected ClassLoader getConfigurationInspectionClassLoader(ResourceLoader loader) {",
                "+\t\treturn loader.getClassLoader();",
                "+\t}",
                "+",
                " \t/**",
                " \t * Sets the given source on the given {@link AbstractBeanDefinition} and registers it inside the given",
                "-\t * {@link BeanDefinitionRegistry}. For {@link BeanDefinition}s to be registerd once-and-only-once for all",
                "+\t * {@link BeanDefinitionRegistry}. For {@link BeanDefinition}s to be registered once-and-only-once for all",
                " \t * configuration elements (annotation or XML), prefer calling",
                "@@ -316,3 +316,3 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t * @param configuration must not be {@literal null}.",
                "-\t * @param classLoader must not be {@literal null}.",
                "+\t * @param classLoader can be {@literal null}.",
                " \t * @return the repository interface or {@literal null} if it can't be loaded.",
                "@@ -320,3 +320,4 @@ public abstract class RepositoryConfigurationExtensionSupport implements Reposit",
                " \t@Nullable",
                "-\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration, ClassLoader classLoader) {",
                "+\tprivate Class<?> loadRepositoryInterface(RepositoryConfiguration<?> configuration,",
                "+\t\t\t@Nullable ClassLoader classLoader) {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/config/RepositoryConfigurationExtensionSupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "276": "DATAJPA-1250 - Inspect repository interfaces in isolated classloader. spring-projects/spring-data-jpa#253 Allow configuration inspection-classloader customization [DATACMNS-1263] #1701"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 276",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eed005427dc5327374462dd9b5e69d4ff2883b65",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511972706,
            "hunks": 16,
            "message": "DATACMNS-1281 - Backport of addition of API to read methods in declaration order. We now provide MethodsMetadataReader to read method metadata from a class file. MethodMetadata is read for all user-declared methods except for constructors (which are technically methods, too). MethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(); MethodsMetadataReader metadataReader = factory.getMetadataReader(\"com.acme.Foo\"); MethodsMetadata metadata = metadataReader.getMethodsMetadata(); This new API is now used by DefaultProjectionInformation to make sure the order of input properties is based on the declaration order in the projection interfaces. Previously that order could not be guaranteed to be stable. Original pull request: #263. Related tickets: DATACMNS-1206. Original commit: 9e013d3.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 80c345301..3492aa421 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -18,9 +18,21 @@ package org.springframework.data.projection;",
                " import java.beans.PropertyDescriptor;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Method;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.Comparator;",
                "+import java.util.HashMap;",
                " import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.Set;",
                " import org.springframework.beans.BeanUtils;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                " import org.springframework.data.util.ReflectionUtils;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ClassUtils;",
                "@@ -31,2 +43,3 @@ import org.springframework.util.Assert;",
                "  * @author Oliver Gierke",
                "+ * @author Mark Paluch",
                "  * @since 1.12",
                "@@ -43,3 +56,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t */",
                "-\tpublic DefaultProjectionInformation(Class<?> type) {",
                "+\tDefaultProjectionInformation(Class<?> type) {",
                "@@ -107,6 +120,66 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tList<PropertyDescriptor> result = new ArrayList<PropertyDescriptor>();",
                "-\t\tresult.addAll(filterDefaultMethods(BeanUtils.getPropertyDescriptors(type)));",
                "+\t\tMethodsMetadata metadata = getMetadata(type);",
                "+\t\tfinal Map<String, Integer> orders = getMethodOrder(metadata);",
                "-\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\tfor (PropertyDescriptor descriptor : filterDefaultMethods(BeanUtils.getPropertyDescriptors(type))) {",
                "+\t\t\tif (metadata == null || orders.containsKey(descriptor.getReadMethod().getName())) {",
                "+\t\t\t\tresult.add(descriptor);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tif (metadata == null) {",
                "+\t\t\treturn result;",
                "+\t\t}",
                "+",
                "+\t\tCollections.sort(result, new Comparator<PropertyDescriptor>() {",
                "+",
                "+\t\t\t/* ",
                "+\t\t\t * (non-Javadoc)",
                "+\t\t\t * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)",
                "+\t\t\t */",
                "+\t\t\t@Override",
                "+\t\t\tpublic int compare(PropertyDescriptor left, PropertyDescriptor right) {",
                "+\t\t\t\treturn orders.get(left.getReadMethod().getName()) - orders.get(right.getReadMethod().getName());",
                "+\t\t\t}",
                "+\t\t});",
                "+",
                "+\t\tfor (String name : metadata.getInterfaceNames()) {",
                "+\t\t\tresult.addAll(collectDescriptors(loadClass(name, type.getClassLoader())));",
                "+\t\t}",
                "+",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+",
                "+\t\ttry {",
                "+\t\t\treturn ClassUtils.forName(className, classLoader);",
                "+\t\t} catch (ClassNotFoundException e) {",
                "+\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t *",
                "+\t * @param metadata",
                "+\t * @return",
                "+\t */",
                "+\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\tif (metadata == null) {",
                "+\t\t\treturn Collections.emptyMap();",
                "+\t\t}",
                "+",
                "+\t\tSet<MethodMetadata> methods = metadata.getMethods();",
                "+\t\tMap<String, Integer> result = new HashMap<String, Integer>(methods.size());",
                "+\t\tint i = 0;",
                "+",
                "+\t\tfor (MethodMetadata methodMetadata : methods) {",
                "+",
                "+\t\t\tString name = methodMetadata.getMethodName();",
                "+",
                "+\t\t\tif (!result.containsKey(name)) {",
                "+\t\t\t\tresult.put(name, i++);",
                "+\t\t\t}",
                " \t\t}",
                "@@ -116,2 +189,23 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "+\t/**",
                "+\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t *",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @return the optional {@link MethodsMetadata}.",
                "+\t */",
                "+\tprivate static MethodsMetadata getMetadata(Class<?> type) {",
                "+",
                "+\t\ttry {",
                "+",
                "+\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+",
                "+\t\t\treturn metadataReader.getMethodsMetadata();",
                "+",
                "+\t\t} catch (IOException e) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "new file mode 100644",
                "index 000000000..49f73e993",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+",
                "+/**",
                "+ * Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded",
                "+ * yet.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ * @see MethodMetadata",
                "+ * @see ClassMetadata",
                "+ * @see MethodsMetadataReader#getMethodsMetadata()",
                "+ */",
                "+public interface MethodsMetadata extends ClassMetadata {",
                "+",
                "+\t/**",
                "+\t * Return all methods.",
                "+\t *",
                "+\t * @return the methods declared in the class ordered as found in the class file. Order does not necessarily reflect",
                "+\t *         the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods();",
                "+",
                "+\t/**",
                "+\t * Return all methods matching method {@code name}.",
                "+\t *",
                "+\t * @param name name of the method, must not be {@literal null} or empty.",
                "+\t * @return the methods matching method {@code name } declared in the class ordered as found in the class file. Order",
                "+\t *         does not necessarily reflect the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods(String name);",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..7e9ce7644",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the metadata for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..509a6c8c5",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -0,0 +1,111 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.BufferedInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.springframework.asm.ClassReader;",
                "+import org.springframework.core.NestedIOException;",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.type.AnnotationMetadata;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+",
                "+/**",
                "+ * {@link MethodsMetadataReader} implementation based on an ASM {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @auhtor Oliver Gierke",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+",
                "+\tprivate final Resource resource;",
                "+\tprivate final ClassMetadata classMetadata;",
                "+\tprivate final AnnotationMetadata annotationMetadata;",
                "+\tprivate final MethodsMetadata methodsMetadata;",
                "+",
                "+\tDefaultMethodsMetadataReader(Resource resource, ClassLoader classLoader) throws IOException {",
                "+",
                "+\t\tthis.resource = resource;",
                "+",
                "+\t\tClassReader classReader = null;",
                "+\t\tInputStream is = null;",
                "+",
                "+\t\ttry {",
                "+",
                "+\t\t\tis = new BufferedInputStream(getResource().getInputStream());",
                "+\t\t\tclassReader = new ClassReader(is);",
                "+",
                "+\t\t} catch (IllegalArgumentException ex) {",
                "+",
                "+\t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+",
                "+\t\t} finally {",
                "+",
                "+\t\t\tif (is != null) {",
                "+\t\t\t\tis.close();",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                "+\t\tclassMetadata = visitor;",
                "+\t\tannotationMetadata = visitor;",
                "+\t\tmethodsMetadata = visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Resource getResource() {",
                "+\t\treturn resource;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic ClassMetadata getClassMetadata() {",
                "+\t\treturn classMetadata;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "+\t\treturn annotationMetadata;",
                "+\t}",
                "+",
                "+\t/* (non-Javadoc)",
                "+\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadata getMethodsMetadata() {",
                "+\t\treturn methodsMetadata;",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "new file mode 100644",
                "index 000000000..963dbf490",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.io.ResourceLoader;",
                "+import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+",
                "+/**",
                "+ * Extension of {@link SimpleMetadataReaderFactory} that reads {@link MethodsMetadata}, creating a new ASM",
                "+ * {@link MethodsMetadataReader} for every request.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory {",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the default class loader.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory() {}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ResourceLoader}.",
                "+\t *",
                "+\t * @param resourceLoader the Spring {@link ResourceLoader} to use (also determines the {@link ClassLoader} to use).",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(ResourceLoader resourceLoader) {",
                "+\t\tsuper(resourceLoader);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader the class loader to use.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(String className) throws IOException {",
                "+\t\treturn (MethodsMetadataReader) super.getMetadataReader(className);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(Resource resource) throws IOException {",
                "+\t\treturn new DefaultMethodsMetadataReader(resource, getResourceLoader().getClassLoader());",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "new file mode 100644",
                "index 000000000..ea8f0a8db",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+ * class, exposing them through the {@link MethodsMetadata} interface.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ * @see ClassMetadata",
                "+ * @see MethodMetadata",
                "+ * @see MethodMetadataReadingVisitor",
                "+ */",
                "+class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "+",
                "+\t/**",
                "+\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader may be {@literal null}.",
                "+\t */",
                "+\tMethodsMetadataReadingVisitor(ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "+",
                "+\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\t// Skip constructors",
                "+\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\treturn visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\tSet<MethodMetadata> result = new LinkedHashSet<MethodMetadata>(4);",
                "+",
                "+\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "+\t\t\tif (metadata.getMethodName().equals(name)) {",
                "+\t\t\t\tresult.add(metadata);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn Collections.unmodifiableSet(result);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/package-info.java b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "new file mode 100644",
                "index 000000000..0b6b2dd86",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "@@ -0,0 +1,4 @@",
                "+/**",
                "+ * Support classes for reading annotation and class-level metadata.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "diff --git a/src/main/java/org/springframework/data/type/package-info.java b/src/main/java/org/springframework/data/type/package-info.java",
                "new file mode 100644",
                "index 000000000..ec4147ac8",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/package-info.java",
                "@@ -0,0 +1,4 @@",
                "+/**",
                "+ * Core support package for type introspection.",
                "+ */",
                "+package org.springframework.data.type;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "src/main/java/org/springframework/data/type/classreading/package-info.java",
                "src/main/java/org/springframework/data/type/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ddd0ecac533bfceb3db5b30719d7f96a9b51628",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515657582,
            "hunks": 11,
            "message": "DATACMNS-1206 - Polishing. Convert type array to string to construct the exception message. Slight Javadoc tweaks. Reduce method visibility. Simplify hasDefaultGetter check. Remove superfluous throws declaration. Strip trailing whitespaces. Ignore property descriptors without getter (e.g. indexed properties). Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 926bc1fa8..ddb57f85c 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -119,3 +119,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\treturn method == null ? false : method.isDefault();",
                "+\t\treturn method != null && method.isDefault();",
                " \t}",
                "@@ -138,6 +138,6 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Creates a new {@link PropertyDescriptorSource} for the given type.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param type must not be {@literal null}.",
                " \t\t */",
                "-\t\tpublic PropertyDescriptorSource(Class<?> type) {",
                "+\t\tPropertyDescriptorSource(Class<?> type) {",
                "@@ -154,3 +154,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t */",
                "-\t\tpublic List<PropertyDescriptor> getDescriptors() {",
                "+\t\tList<PropertyDescriptor> getDescriptors() {",
                " \t\t\treturn collectDescriptors().distinct().collect(StreamUtils.toUnmodifiableList());",
                "@@ -180,5 +180,5 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t/**",
                "-\t\t * Returns a Stream of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only returning",
                "-\t\t * methods seen by the given {@link MethodsMetadata}.",
                "-\t\t * ",
                "+\t\t * Returns a {@link Stream} of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only",
                "+\t\t * returning methods seen by the given {@link MethodsMetadata}.",
                "+\t\t *",
                " \t\t * @param source must not be {@literal null}.",
                "@@ -196,3 +196,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\t\treturn source.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\treturn source.filter(descriptor -> descriptor.getReadMethod() != null)",
                "+\t\t\t\t\t.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                " \t\t\t\t\t.sorted(Comparator.comparingInt(left -> orderedMethods.get(left.getReadMethod().getName())));",
                "@@ -202,3 +203,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Returns a {@link Stream} of interfaces using the given {@link MethodsMetadata} as primary source for ordering.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param metadata must not be {@literal null}.",
                "@@ -211,4 +212,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t/**",
                "-\t\t * Returns a Stream of interfaces using the given type as primary source for ordering.",
                "-\t\t * ",
                "+\t\t * Returns a {@link Stream} of interfaces using the given type as primary source for ordering.",
                "+\t\t *",
                " \t\t * @return",
                "@@ -245,3 +246,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Find the type with the given name in the given array of {@link Class}.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param name must not be {@literal null} or empty.",
                "@@ -255,3 +256,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t\t\t\t.findFirst()",
                "-\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Did not find type %s in %s!\", name, types)));",
                "+\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(",
                "+\t\t\t\t\t\t\tString.format(\"Did not find type %s in %s!\", name, Arrays.toString(types))));",
                " \t\t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index 39e249693..17404360d 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -45,2 +45,3 @@ import org.springframework.util.Assert;",
                "  * @author Mark Paluch",
                "+ * @author Oliver Gierke",
                "  * @since 2.1"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, property",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0883eb9b9c1355716e9c352ba510e6473b603907",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511972706,
            "hunks": 17,
            "message": "DATACMNS-1206 - Add API to read methods in declaration order. We now provide MethodsMetadataReader to read method metadata from a class file. MethodMetadata is read for all user-declared methods except for constructors (which are technically methods, too). MethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(); MethodsMetadataReader metadataReader = factory.getMetadataReader(\"com.acme.Foo\"); MethodsMetadata metadata = metadataReader.getMethodsMetadata(); This new API is now used by DefaultProjectionInformation to make sure the order of input properties is based on the declaration order in the projection interfaces. Previously that order could not be guaranteed to be stable. Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 901ba2b7a..7f24d23ef 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -18,2 +18,3 @@ package org.springframework.data.projection;",
                " import java.beans.PropertyDescriptor;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "@@ -21,7 +22,18 @@ import java.util.ArrayList;",
                " import java.util.Arrays;",
                "+import java.util.Comparator;",
                " import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                " import java.util.stream.Collectors;",
                "+import java.util.stream.IntStream;",
                "+import java.util.stream.Stream;",
                " import org.springframework.beans.BeanUtils;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ClassUtils;",
                "@@ -33,2 +45,3 @@ import org.springframework.util.Assert;",
                "  * @author Christoph Strobl",
                "+ * @author Mark Paluch",
                "  * @since 1.12",
                "@@ -45,3 +58,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t */",
                "-\tpublic DefaultProjectionInformation(Class<?> type) {",
                "+\tDefaultProjectionInformation(Class<?> type) {",
                "@@ -104,8 +117,30 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tList<PropertyDescriptor> result = new ArrayList<>();",
                "-\t\tresult.addAll(Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "-\t\t\t\t.filter(it -> !hasDefaultGetter(it))//",
                "-\t\t\t\t.collect(Collectors.toList()));",
                "-\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\tOptional<MethodsMetadata> metadata = getMetadata(type);",
                "+\t\tStream<PropertyDescriptor> stream = Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "+\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+",
                "+\t\tStream<PropertyDescriptor> streamToUse = metadata.map(DefaultProjectionInformation::getMethodOrder)",
                "+\t\t\t\t.filter(it -> !it.isEmpty()) //",
                "+\t\t\t\t.map(it -> stream.filter(descriptor -> it.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\t\t\t\t.sorted(Comparator.comparingInt(left -> it.get(left.getReadMethod().getName())))) //",
                "+\t\t\t\t.orElse(stream);",
                "+",
                "+\t\tresult.addAll(streamToUse.collect(Collectors.toList()));",
                "+",
                "+\t\tif (metadata.isPresent()) {",
                "+",
                "+\t\t\tStream<String> interfaceNames = metadata.map(ClassMetadata::getInterfaceNames) //",
                "+\t\t\t\t\t.map(Arrays::stream) //",
                "+\t\t\t\t\t.orElse(Stream.empty());",
                "+",
                "+\t\t\tresult.addAll(interfaceNames.map(it -> loadClass(it, type.getClassLoader())) //",
                "+\t\t\t\t\t.map(DefaultProjectionInformation::collectDescriptors) //",
                "+\t\t\t\t\t.flatMap(List::stream) //",
                "+\t\t\t\t\t.collect(Collectors.toList()));",
                "+\t\t} else {",
                "+",
                "+\t\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "+\t\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\t\t}",
                " \t\t}",
                "@@ -115,2 +150,49 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "+\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+",
                "+\t\ttry {",
                "+\t\t\treturn ClassUtils.forName(className, classLoader);",
                "+\t\t} catch (ClassNotFoundException e) {",
                "+\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t *",
                "+\t * @param metadata",
                "+\t * @return",
                "+\t */",
                "+\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\tList<String> methods = metadata.getMethods() //",
                "+\t\t\t\t.stream() //",
                "+\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "+\t\t\t\t.distinct() //",
                "+\t\t\t\t.collect(Collectors.toList());",
                "+",
                "+\t\treturn IntStream.range(0, methods.size()) //",
                "+\t\t\t\t.boxed() //",
                "+\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t *",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @return the optional {@link MethodsMetadata}.",
                "+\t */",
                "+\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "+",
                "+\t\ttry {",
                "+",
                "+\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "+\t\t} catch (IOException e) {",
                "+\t\t\treturn Optional.empty();",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "new file mode 100644",
                "index 000000000..74fc84988",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+",
                "+/**",
                "+ * Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded",
                "+ * yet.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @see MethodMetadata",
                "+ * @see ClassMetadata",
                "+ * @see MethodsMetadataReader#getMethodsMetadata()",
                "+ */",
                "+public interface MethodsMetadata extends ClassMetadata {",
                "+",
                "+\t/**",
                "+\t * Return all methods.",
                "+\t *",
                "+\t * @return the methods declared in the class ordered as found in the class file. Order does not necessarily reflect",
                "+\t *         the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods();",
                "+",
                "+\t/**",
                "+\t * Return all methods matching method {@code name}.",
                "+\t *",
                "+\t * @param name name of the method, must not be {@literal null} or empty.",
                "+\t * @return the methods matching method {@code name } declared in the class ordered as found in the class file. Order",
                "+\t *         does not necessarily reflect the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods(String name);",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..f21d64a99",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the metadata for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..d201637a8",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -0,0 +1,99 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.BufferedInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.springframework.asm.ClassReader;",
                "+import org.springframework.core.NestedIOException;",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.type.AnnotationMetadata;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * {@link MethodsMetadataReader} implementation based on an ASM {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+",
                "+\tprivate final Resource resource;",
                "+\tprivate final ClassMetadata classMetadata;",
                "+\tprivate final AnnotationMetadata annotationMetadata;",
                "+\tprivate final MethodsMetadata methodsMetadata;",
                "+",
                "+\tDefaultMethodsMetadataReader(Resource resource, @Nullable ClassLoader classLoader) throws IOException {",
                "+",
                "+\t\tthis.resource = resource;",
                "+",
                "+\t\tClassReader classReader;",
                "+",
                "+\t\ttry (InputStream is = new BufferedInputStream(getResource().getInputStream())) {",
                "+\t\t\tclassReader = new ClassReader(is);",
                "+\t\t} catch (IllegalArgumentException ex) {",
                "+\t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+\t\t}",
                "+",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                "+\t\tclassMetadata = visitor;",
                "+\t\tannotationMetadata = visitor;",
                "+\t\tmethodsMetadata = visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Resource getResource() {",
                "+\t\treturn resource;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic ClassMetadata getClassMetadata() {",
                "+\t\treturn classMetadata;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "+\t\treturn annotationMetadata;",
                "+\t}",
                "+",
                "+\t/* (non-Javadoc)",
                "+\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadata getMethodsMetadata() {",
                "+\t\treturn methodsMetadata;",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "new file mode 100644",
                "index 000000000..6f4d249e0",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.io.ResourceLoader;",
                "+import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * Extension of {@link SimpleMetadataReaderFactory} that reads {@link MethodsMetadata}, creating a new ASM",
                "+ * {@link MethodsMetadataReader} for every request.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory {",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the default class loader.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory() {}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ResourceLoader}.",
                "+\t *",
                "+\t * @param resourceLoader the Spring {@link ResourceLoader} to use (also determines the {@link ClassLoader} to use).",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(@Nullable ResourceLoader resourceLoader) {",
                "+\t\tsuper(resourceLoader);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader the class loader to use.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(@Nullable ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(String className) throws IOException {",
                "+\t\treturn (MethodsMetadataReader) super.getMetadataReader(className);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(Resource resource) throws IOException {",
                "+\t\treturn new DefaultMethodsMetadataReader(resource, getResourceLoader().getClassLoader());",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "new file mode 100644",
                "index 000000000..db3826c7c",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+ * class, exposing them through the {@link MethodsMetadata} interface.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @see ClassMetadata",
                "+ * @see MethodMetadata",
                "+ * @see MethodMetadataReadingVisitor",
                "+ */",
                "+class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "+",
                "+\t/**",
                "+\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader may be {@literal null}.",
                "+\t */",
                "+\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "+",
                "+\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\t// Skip constructors",
                "+\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\treturn visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);",
                "+",
                "+\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "+\t\t\tif (metadata.getMethodName().equals(name)) {",
                "+\t\t\t\tresult.add(metadata);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn Collections.unmodifiableSet(result);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/package-info.java b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "new file mode 100644",
                "index 000000000..fe6d22de4",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "@@ -0,0 +1,6 @@",
                "+/**",
                "+ * Support classes for reading annotation and class-level metadata.",
                "+ */",
                "+@org.springframework.lang.NonNullApi",
                "+@org.springframework.lang.NonNullFields",
                "+package org.springframework.data.type.classreading;",
                "diff --git a/src/main/java/org/springframework/data/type/package-info.java b/src/main/java/org/springframework/data/type/package-info.java",
                "new file mode 100644",
                "index 000000000..b887b66b2",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/package-info.java",
                "@@ -0,0 +1,5 @@",
                "+/**",
                "+ * Core support package for type introspection.",
                "+ */",
                "+@org.springframework.lang.NonNullApi",
                "+package org.springframework.data.type;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "src/main/java/org/springframework/data/type/classreading/package-info.java",
                "src/main/java/org/springframework/data/type/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "170c25d3555ee954e542e34442853d36122c3077",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522479677,
            "hunks": 16,
            "message": "DATACMNS-1274 - Auditing now can set metadata in nested objects. Based on the new infrastructure created by DATACMNS-1275, MappingAuditingMetadata now keeps PersistentPropertyPaths to point to the properties reflecting individual auditing metadata items rather than just PersistentPropertyPaths. With that in place we can now find those items in embedded types of the subject entity based on the detection setup of the MappingContext managing metadata for the entity. As that means that multiple paths to a metadata item property can be found, we now use the first path found (the shortest one) for the lookup of the modification date. Related tickets: DATACMNS-1275.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java b/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "index 08afabda5..138189971 100644",
                "--- a/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "+++ b/src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java",
                "@@ -17,5 +17,8 @@ package org.springframework.data.auditing;",
                "+import java.lang.annotation.Annotation;",
                " import java.time.temporal.TemporalAccessor;",
                "+import java.util.Arrays;",
                " import java.util.Map;",
                " import java.util.Optional;",
                "+import java.util.function.Predicate;",
                "@@ -29,5 +32,6 @@ import org.springframework.data.mapping.PersistentProperty;",
                " import org.springframework.data.mapping.PersistentPropertyAccessor;",
                "+import org.springframework.data.mapping.PersistentPropertyPaths;",
                " import org.springframework.data.mapping.context.MappingContext;",
                " import org.springframework.data.mapping.context.PersistentEntities;",
                "-import org.springframework.data.util.Optionals;",
                "+import org.springframework.data.util.Lazy;",
                " import org.springframework.util.Assert;",
                "@@ -75,12 +79,10 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                "-\t\t\tClass<?> type = it.getClass();",
                "+\t\t\treturn entities.mapOnContext(it.getClass(), (context, entity) -> {",
                "-\t\t\treturn entities.getPersistentEntity(type).map(entity -> {",
                "+\t\t\t\tMappingAuditingMetadata metadata = metadataCache.computeIfAbsent(it.getClass(),",
                "+\t\t\t\t\t\tkey -> new MappingAuditingMetadata(context, it.getClass()));",
                "-\t\t\t\tMappingAuditingMetadata metadata = metadataCache.computeIfAbsent(type,",
                "-\t\t\t\t\t\tkey -> new MappingAuditingMetadata(entity));",
                "-",
                "-\t\t\t\treturn Optional.<AuditableBeanWrapper> ofNullable(",
                "-\t\t\t\t\t\tmetadata.isAuditable() ? new MappingMetadataAuditableBeanWrapper(entity.getPropertyAccessor(it), metadata)",
                "-\t\t\t\t\t\t\t\t: null);",
                "+\t\t\t\treturn Optional.<AuditableBeanWrapper> ofNullable(metadata.isAuditable() //",
                "+\t\t\t\t\t\t? new MappingMetadataAuditableBeanWrapper(entity.getPropertyAccessor(it), metadata)",
                "+\t\t\t\t\t\t: null);",
                "@@ -98,4 +100,6 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                "-\t\tprivate final Optional<? extends PersistentProperty<?>> createdByProperty, createdDateProperty,",
                "-\t\t\t\tlastModifiedByProperty, lastModifiedDateProperty;",
                "+\t\tprivate final PersistentPropertyPaths<?, ? extends PersistentProperty<?>> createdByPaths, createdDatePaths,",
                "+\t\t\t\tlastModifiedByPaths, lastModifiedDatePaths;",
                "+",
                "+\t\tprivate final Lazy<Boolean> isAuditable;",
                "@@ -106,10 +110,20 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\t */",
                "-\t\tpublic MappingAuditingMetadata(PersistentEntity<?, ? extends PersistentProperty<?>> entity) {",
                "+\t\tpublic <P> MappingAuditingMetadata(MappingContext<?, ? extends PersistentProperty<?>> context, Class<?> type) {",
                "-\t\t\tAssert.notNull(entity, \"PersistentEntity must not be null!\");",
                "+\t\t\tAssert.notNull(type, \"Type must not be null!\");",
                "-\t\t\tthis.createdByProperty = Optional.ofNullable(entity.getPersistentProperty(CreatedBy.class));",
                "-\t\t\tthis.createdDateProperty = Optional.ofNullable(entity.getPersistentProperty(CreatedDate.class));",
                "-\t\t\tthis.lastModifiedByProperty = Optional.ofNullable(entity.getPersistentProperty(LastModifiedBy.class));",
                "-\t\t\tthis.lastModifiedDateProperty = Optional.ofNullable(entity.getPersistentProperty(LastModifiedDate.class));",
                "+\t\t\tthis.createdByPaths = context.findPersistentPropertyPaths(type, withAnnotation(CreatedBy.class));",
                "+\t\t\tthis.createdDatePaths = context.findPersistentPropertyPaths(type, withAnnotation(CreatedDate.class));",
                "+\t\t\tthis.lastModifiedByPaths = context.findPersistentPropertyPaths(type, withAnnotation(LastModifiedBy.class));",
                "+\t\t\tthis.lastModifiedDatePaths = context.findPersistentPropertyPaths(type, withAnnotation(LastModifiedDate.class));",
                "+",
                "+\t\t\tthis.isAuditable = Lazy.of( //",
                "+\t\t\t\t\t() -> Arrays.asList(createdByPaths, createdDatePaths, lastModifiedByPaths, lastModifiedDatePaths) //",
                "+\t\t\t\t\t\t\t.stream() //",
                "+\t\t\t\t\t\t\t.anyMatch(it -> !it.isEmpty())//",
                "+\t\t\t);",
                "+\t\t}",
                "+",
                "+\t\tprivate static Predicate<PersistentProperty<?>> withAnnotation(Class<? extends Annotation> type) {",
                "+\t\t\treturn t -> t.findAnnotation(type) != null;",
                " \t\t}",
                "@@ -123,4 +137,3 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\tpublic boolean isAuditable() {",
                "-\t\t\treturn Optionals.isAnyPresent(createdByProperty, createdDateProperty, lastModifiedByProperty,",
                "-\t\t\t\t\tlastModifiedDateProperty);",
                "+\t\t\treturn isAuditable.get();",
                " \t\t}",
                "@@ -163,3 +176,3 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                "-\t\t\tmetadata.createdByProperty.ifPresent(it -> this.accessor.setProperty(it, value));",
                "+\t\t\tmetadata.createdByPaths.forEach(it -> this.accessor.setProperty(it, value));",
                "@@ -174,3 +187,3 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\tpublic TemporalAccessor setCreatedDate(TemporalAccessor value) {",
                "-\t\t\treturn setDateProperty(metadata.createdDateProperty, value);",
                "+\t\t\treturn setDateProperty(metadata.createdDatePaths, value);",
                " \t\t}",
                "@@ -183,3 +196,3 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\tpublic Object setLastModifiedBy(Object value) {",
                "-\t\t\treturn setProperty(metadata.lastModifiedByProperty, value);",
                "+\t\t\treturn setProperty(metadata.lastModifiedByPaths, value);",
                " \t\t}",
                "@@ -192,4 +205,7 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\tpublic Optional<TemporalAccessor> getLastModifiedDate() {",
                "-\t\t\treturn getAsTemporalAccessor(metadata.lastModifiedDateProperty.map(accessor::getProperty),",
                "-\t\t\t\t\tTemporalAccessor.class);",
                "+",
                "+\t\t\tOptional<Object> firstValue = metadata.lastModifiedDatePaths.getFirst() //",
                "+\t\t\t\t\t.map(accessor::getProperty);",
                "+",
                "+\t\t\treturn getAsTemporalAccessor(firstValue, TemporalAccessor.class);",
                " \t\t}",
                "@@ -202,8 +218,9 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                " \t\tpublic TemporalAccessor setLastModifiedDate(TemporalAccessor value) {",
                "-\t\t\treturn setDateProperty(metadata.lastModifiedDateProperty, value);",
                "+\t\t\treturn setDateProperty(metadata.lastModifiedDatePaths, value);",
                " \t\t}",
                "-\t\tprivate <T, P extends PersistentProperty<?>> T setProperty(Optional<P> property, T value) {",
                "+\t\tprivate <T, P extends PersistentProperty<?>> T setProperty(",
                "+\t\t\t\tPersistentPropertyPaths<?, ? extends PersistentProperty<?>> paths, T value) {",
                "-\t\t\tproperty.ifPresent(it -> this.accessor.setProperty(it, value));",
                "+\t\t\tpaths.forEach(it -> this.accessor.setProperty(it, value));",
                "@@ -212,7 +229,7 @@ public class MappingAuditableBeanWrapperFactory extends DefaultAuditableBeanWrap",
                "-\t\tprivate <P extends PersistentProperty<?>> TemporalAccessor setDateProperty(Optional<P> property,",
                "-\t\t\t\tTemporalAccessor value) {",
                "+\t\tprivate <P extends PersistentProperty<?>> TemporalAccessor setDateProperty(",
                "+\t\t\t\tPersistentPropertyPaths<?, ? extends PersistentProperty<?>> property, TemporalAccessor value) {",
                "-\t\t\tproperty",
                "-\t\t\t\t\t.ifPresent(it -> this.accessor.setProperty(it, getDateValueToSet(value, it.getType(), accessor.getBean())));",
                "+\t\t\tproperty.forEach(it -> this.accessor.setProperty(it,",
                "+\t\t\t\t\tgetDateValueToSet(value, it.getRequiredLeafProperty().getType(), accessor.getBean())));"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/auditing/MappingAuditableBeanWrapperFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: path, property",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6716d156812b7fbde8635aa10a3717ca35dd0d2b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522850002,
            "hunks": 1,
            "message": "DATACMNS-1267 - Release version 2.0.6 (Kay SR6).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index df1d3a2b7..0e570c712 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.6.BUILD-SNAPSHOT</version>",
                "+\t<version>2.0.6.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "776cc0f4e6f455c02436c6f968bfe31354107306",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522844488,
            "hunks": 1,
            "message": "DATACMNS-1248 - Release version 1.13.11 (Ingalls SR11).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 00cd75f24..4302dcd1d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.11.BUILD-SNAPSHOT</version>",
                "+\t<version>1.13.11.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "870554aef75b0b4ffdb51fa24dda906d8d681bf9",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523622657,
            "hunks": 1,
            "message": "DATACMNS-1257 - Release version 2.1 M2 (Lovelace).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5219c1de6..80bd6a3f7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.1.0.BUILD-SNAPSHOT</version>",
                "+\t<version>2.1.0.M2</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b1a20ae1e82a63f99b3afc6f2aaedb3bf4dc432a",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522160518,
            "hunks": 7,
            "message": "DATACMNS-1282 - Switched to SimpleEvaluationContext in MapDataBinder.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/web/MapDataBinder.java b/src/main/java/org/springframework/data/web/MapDataBinder.java",
                "index fc9d165f2..cf7db6a2b 100644",
                "--- a/src/main/java/org/springframework/data/web/MapDataBinder.java",
                "+++ b/src/main/java/org/springframework/data/web/MapDataBinder.java",
                "@@ -41,12 +41,8 @@ import org.springframework.expression.AccessException;",
                " import org.springframework.expression.EvaluationContext;",
                "-import org.springframework.expression.EvaluationException;",
                " import org.springframework.expression.Expression;",
                "-import org.springframework.expression.TypeLocator;",
                " import org.springframework.expression.TypedValue;",
                " import org.springframework.expression.spel.SpelEvaluationException;",
                "-import org.springframework.expression.spel.SpelMessage;",
                " import org.springframework.expression.spel.SpelParserConfiguration;",
                " import org.springframework.expression.spel.standard.SpelExpressionParser;",
                "-import org.springframework.expression.spel.support.StandardEvaluationContext;",
                "-import org.springframework.expression.spel.support.StandardTypeConverter;",
                "+import org.springframework.expression.spel.support.SimpleEvaluationContext;",
                " import org.springframework.util.Assert;",
                "@@ -110,9 +106,2 @@ class MapDataBinder extends WebDataBinder {",
                " \t\t\t\tnew SpelParserConfiguration(false, true));",
                "-\t\tprivate static final TypeLocator REJECTING_LOCATOR = new TypeLocator() {",
                "-",
                "-\t\t\t@Override",
                "-\t\t\tpublic Class<?> findType(String typeName) throws EvaluationException {",
                "-\t\t\t\tthrow new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName);",
                "-\t\t\t}",
                "-\t\t};",
                "@@ -174,10 +163,2 @@ class MapDataBinder extends WebDataBinder {",
                "-\t\t\tStandardEvaluationContext context = new StandardEvaluationContext();",
                "-\t\t\tcontext.addPropertyAccessor(new PropertyTraversingMapAccessor(type, conversionService));",
                "-\t\t\tcontext.setTypeConverter(new StandardTypeConverter(conversionService));",
                "-\t\t\tcontext.setTypeLocator(REJECTING_LOCATOR);",
                "-\t\t\tcontext.setRootObject(map);",
                "-",
                "-\t\t\tExpression expression = PARSER.parseExpression(propertyName);",
                "-",
                " \t\t\tPropertyPath leafProperty = getPropertyPath(propertyName).getLeafProperty();",
                "@@ -198,2 +179,11 @@ class MapDataBinder extends WebDataBinder {",
                "+\t\t\tEvaluationContext context = SimpleEvaluationContext //",
                "+",
                "+\t\t\t\t\t.forPropertyAccessors(new PropertyTraversingMapAccessor(type, conversionService)) //",
                "+\t\t\t\t\t.withConversionService(conversionService) //",
                "+\t\t\t\t\t.withRootObject(map) //",
                "+\t\t\t\t\t.build();",
                "+",
                "+\t\t\tExpression expression = PARSER.parseExpression(propertyName);",
                "+",
                " \t\t\ttry {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/web/MapDataBinder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae1dd2741ce06d44a0966ecbd6f47beabde2b653"
                ],
                [
                    "no-tag",
                    "08d748a6fd0173a8ba0aa1f240c38afbdaf4ad9f"
                ]
            ],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "797c74650928639c5acb4edc735ddf9f0c86bcea",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522846682,
            "hunks": 1,
            "message": "DATACMNS-1248 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4302dcd1d..962c448f4 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.11.RELEASE</version>",
                "+\t<version>1.13.12.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "999d26436b8327143a7ba620ec6e3834634d7b0c",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522744777,
            "hunks": 2,
            "message": "DATACMNS-1284 - Polishing. Backport of 06116b7. Related ticket: DATACMNS-1206. Original commit: 06116b7.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 73cdb1106..4f83e7cbe 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -124,3 +124,10 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tfor (PropertyDescriptor descriptor : filterDefaultMethods(BeanUtils.getPropertyDescriptors(type))) {",
                "-\t\t\tif (metadata == null || orders.containsKey(descriptor.getReadMethod().getName())) {",
                "+",
                "+\t\t\tMethod readMethod = descriptor.getReadMethod();",
                "+",
                "+\t\t\tif (readMethod == null) {",
                "+\t\t\t\tcontinue;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (metadata == null || orders.containsKey(readMethod.getName())) {",
                " \t\t\t\tresult.add(descriptor);",
                "@@ -239,3 +246,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\treturn method == null ? false : ReflectionUtils.isDefaultMethod(method);",
                "+\t\treturn method != null && ReflectionUtils.isDefaultMethod(method);",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d0d2b8658fdcb21b88418a9ac0f508bb5f6db59e",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522844447,
            "hunks": 2,
            "message": "DATACMNS-1248 - Prepare 1.13.11 (Ingalls SR11).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d5406a68c..00cd75f24 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.11.BUILD-SNAPSHOT</version>",
                "+\t\t<version>1.9.11.RELEASE</version>",
                " \t</parent>",
                "@@ -314,4 +314,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "64aa036dd14f632c69e02cb5ed5ca294505a4365",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523624912,
            "hunks": 1,
            "message": "DATACMNS-1257 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 80bd6a3f7..5219c1de6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.1.0.M2</version>",
                "+\t<version>2.1.0.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "428b0decd5c2fab598aae82c4060a76a557a0379",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522744234,
            "hunks": 13,
            "message": "DATACMNS-1284 - Polishing. Backport of 5eb10a0 but leaving out the Stream execution optimizations. Related ticket: DATACMNS-1206. Original commit: 5eb10a0.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 3492aa421..73cdb1106 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -32,3 +32,3 @@ import org.springframework.core.type.MethodMetadata;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                " import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "index 49f73e993..261d55bb3 100644",
                "--- a/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -21,2 +21,3 @@ import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index 509a6c8c5..809edf5dd 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.type.classreading;",
                "+import lombok.Getter;",
                "+",
                " import java.io.BufferedInputStream;",
                "@@ -20,4 +22,10 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Set;",
                " import org.springframework.asm.ClassReader;",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                " import org.springframework.core.NestedIOException;",
                "@@ -26,4 +34,7 @@ import org.springframework.core.type.AnnotationMetadata;",
                " import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.util.Assert;",
                "@@ -37,2 +48,3 @@ import org.springframework.data.type.MethodsMetadataReader;",
                "  */",
                "+@Getter",
                " class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "@@ -76,35 +88,77 @@ class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t/**",
                "+\t * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+\t * class, exposing them through the {@link MethodsMetadata} interface.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @since 2.1",
                "+\t * @since 1.11.11",
                "+\t * @see ClassMetadata",
                "+\t * @see MethodMetadata",
                "+\t * @see MethodMetadataReadingVisitor",
                " \t */",
                "-\t@Override",
                "-\tpublic Resource getResource() {",
                "-\t\treturn resource;",
                "-\t}",
                "+\tstatic class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "+",
                "+\t\t/**",
                "+\t\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t\t *",
                "+\t\t * @param classLoader may be {@literal null}.",
                "+\t\t */",
                "+\t\tMethodsMetadataReadingVisitor(ClassLoader classLoader) {",
                "+\t\t\tsuper(classLoader);",
                "+\t\t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic ClassMetadata getClassMetadata() {",
                "-\t\treturn classMetadata;",
                "-\t}",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "+",
                "+\t\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "-\t\treturn annotationMetadata;",
                "-\t}",
                "+\t\t\t// Skip constructors",
                "+\t\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "-\t/* (non-Javadoc)",
                "-\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodsMetadata getMethodsMetadata() {",
                "-\t\treturn methodsMetadata;",
                "+\t\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\t\treturn visitor;",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\t\tSet<MethodMetadata> result = new LinkedHashSet<MethodMetadata>(4);",
                "+",
                "+\t\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "+\t\t\t\tif (metadata.getMethodName().equals(name)) {",
                "+\t\t\t\t\tresult.add(metadata);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\treturn Collections.unmodifiableSet(result);",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..9825a8995",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @since 1.11.11",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the {@link MethodsMetadata} for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "index 963dbf490..d3311450f 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -23,3 +23,2 @@ import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "deleted file mode 100644",
                "index ea8f0a8db..000000000",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "+++ /dev/null",
                "@@ -1,107 +0,0 @@",
                "-/*",
                "- * Copyright 2018 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.type.classreading;",
                "-",
                "-import java.util.Collections;",
                "-import java.util.LinkedHashSet;",
                "-import java.util.Set;",
                "-",
                "-import org.springframework.asm.MethodVisitor;",
                "-import org.springframework.asm.Opcodes;",
                "-import org.springframework.asm.Type;",
                "-import org.springframework.core.type.ClassMetadata;",
                "-import org.springframework.core.type.MethodMetadata;",
                "-import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "-import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "-import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "- * class, exposing them through the {@link MethodsMetadata} interface.",
                "- *",
                "- * @author Mark Paluch",
                "- * @since 2.1",
                "- * @since 1.11.11",
                "- * @see ClassMetadata",
                "- * @see MethodMetadata",
                "- * @see MethodMetadataReadingVisitor",
                "- */",
                "-class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "-",
                "-\t/**",
                "-\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "-\t *",
                "-\t * @param classLoader may be {@literal null}.",
                "-\t */",
                "-\tMethodsMetadataReadingVisitor(ClassLoader classLoader) {",
                "-\t\tsuper(classLoader);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-",
                "-\t\t// Skip bridge methods - we're only interested in original user methods.",
                "-\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "-\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\t// Skip constructors",
                "-\t\tif (name.equals(\"<init>\")) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "-\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "-",
                "-\t\tthis.methodMetadataSet.add(visitor);",
                "-\t\treturn visitor;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods() {",
                "-\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods(String name) {",
                "-",
                "-\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "-",
                "-\t\tSet<MethodMetadata> result = new LinkedHashSet<MethodMetadata>(4);",
                "-",
                "-\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "-\t\t\tif (metadata.getMethodName().equals(name)) {",
                "-\t\t\t\tresult.add(metadata);",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn Collections.unmodifiableSet(result);",
                "-\t}",
                "-}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5a0904090a83ffd813b97350fe55a4f98413f003",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523622601,
            "hunks": 2,
            "message": "DATACMNS-1257 - Prepare 2.1 M2 (Lovelace).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 877ee6a00..5219c1de6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.1.0.BUILD-SNAPSHOT</version>",
                "+\t\t<version>2.1.0.M2</version>",
                " \t</parent>",
                "@@ -404,4 +404,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-milestone</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-milestone</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f01607353b907cd4f167a97aee9390f1a7ecee6b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522846683,
            "hunks": 2,
            "message": "DATACMNS-1248 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 962c448f4..c67e886e7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.11.RELEASE</version>",
                "+\t\t<version>1.9.12.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -314,4 +314,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0e772a560b032acec0352d6dcfe6d8bdc47b01ed",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522852953,
            "hunks": 2,
            "message": "DATACMNS-1267 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 79e40782e..c582ae0c3 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.6.RELEASE</version>",
                "+\t\t<version>2.0.7.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -404,4 +404,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5f37a3af9555acf3f951b2ffa4a75b134170bae0",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1523624913,
            "hunks": 2,
            "message": "DATACMNS-1257 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5219c1de6..877ee6a00 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.1.0.M2</version>",
                "+\t\t<version>2.1.0.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -404,4 +404,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-milestone</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-milestone</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e058845610c0e01fe6baddfa2f7348bed1db59e5",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522849951,
            "hunks": 2,
            "message": "DATACMNS-1267 - Prepare 2.0.6 (Kay SR6).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e0b5390ac..df1d3a2b7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.6.BUILD-SNAPSHOT</version>",
                "+\t\t<version>2.0.6.RELEASE</version>",
                " \t</parent>",
                "@@ -404,4 +404,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c9db62c5c0da37357405420c7aaa085637bc6fe3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1522852950,
            "hunks": 1,
            "message": "DATACMNS-1267 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0e570c712..79e40782e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.6.RELEASE</version>",
                "+\t<version>2.0.7.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        }
    ]
}
