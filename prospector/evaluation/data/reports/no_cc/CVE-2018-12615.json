{
    "advisory_record": {
        "cve_id": "CVE-2018-12615",
        "description": "An issue was discovered in switchGroup() in agent/ExecHelper/ExecHelperMain.cpp in Phusion Passenger before 5.3.2. The set of groups (gidset) is not set correctly, leaving it up to randomness (i.e., uninitialized memory) which supplementary groups are actually being set while lowering privileges.",
        "reserved_timestamp": 1664755200,
        "published_timestamp": 1664814127,
        "updated_timestamp": 1664814127,
        "repository_url": null,
        "references": {
            "commit::4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8": 6,
            "": 4
        },
        "affected_products": [
            "ExecHelper",
            "Passenger",
            "switchGroup",
            "Phusion",
            "n/a"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "ExecHelperMain",
            "switchGroup"
        ],
        "keywords": [
            "randomness",
            "group",
            "leave",
            "issue",
            "discover",
            "exechelper",
            "gidset",
            "switchgroup",
            "privilege",
            "memory",
            "lower",
            "agent",
            "passenger",
            "phusion"
        ],
        "files_extension": [
            "cpp"
        ],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527600830,
            "hunks": 1,
            "message": "ExecHelperMain: fix privilege lowering code",
            "diff": [
                "diff --git a/src/agent/ExecHelper/ExecHelperMain.cpp b/src/agent/ExecHelper/ExecHelperMain.cpp",
                "index 1e5ae58e2..1700a5203 100644",
                "--- a/src/agent/ExecHelper/ExecHelperMain.cpp",
                "+++ b/src/agent/ExecHelper/ExecHelperMain.cpp",
                "@@ -203,2 +203,5 @@ switchGroup(uid_t uid, const struct passwd *userInfo, gid_t gid) {",
                " \t\t\t\tgidset.reset(new gid_t[ngroups]);",
                "+\t\t\t\tfor (int i = 0; i < ngroups; i++) {",
                "+\t\t\t\t\tgidset[i] = groups[i];",
                "+\t\t\t\t}",
                " \t\t\t\tif (setgroups(ngroups, gidset.get()) == -1) {"
            ],
            "changed_files": [
                "src/agent/ExecHelper/ExecHelperMain.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 6 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: switchGroup",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/agent/ExecHelper/ExecHelperMain.cpp",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: exechelper, privilege, lower",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: exechelper, agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fd3717a3cd357aa0e80e1e81d4dc94a1eaf928f1",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527689419,
            "hunks": 48,
            "message": "SpawningKit: ensure safe reading of files in the work dir after its finalization After finalization of the work dir, it is owned by the app's user and group. This allows the app to arbitrarily modify the work dir to insert symlinks. In order to prevent the SpawningKit code (which may run as root) from reading arbitrary files through symlink attacks, we use the safeReadFile() function. This function also mitigates various DoS attacks (see its comments).",
            "diff": [
                "diff --git a/src/agent/Core/SpawningKit/DirectSpawner.h b/src/agent/Core/SpawningKit/DirectSpawner.h",
                "index 64f995061..bee9bcc62 100644",
                "--- a/src/agent/Core/SpawningKit/DirectSpawner.h",
                "+++ b/src/agent/Core/SpawningKit/DirectSpawner.h",
                "@@ -43,2 +43,3 @@",
                " #include <pthread.h>",
                "+#include <unistd.h>",
                " #include <adhoc_lve.h>",
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "index 1260fab09..cd55d1d17 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2016-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2016-2018 Phusion Holding B.V.",
                "  *",
                "@@ -149,3 +149,4 @@ private:",
                " \t\t\tstring path = session.responseDir + \"/finish\";",
                "-\t\t\tint fd = syscalls::open(path.c_str(), O_RDONLY);",
                "+\t\t\tint fd = syscalls::openat(session.responseDirFd, \"finish\",",
                "+\t\t\t\tO_RDONLY | O_NOFOLLOW);",
                " \t\t\tif (fd == -1) {",
                "@@ -380,3 +381,3 @@ private:",
                " \t\t// We already checked whether properties.json exists before invoking",
                "-\t\t// this method, so if unsafeReadFile() fails then we can't be sure that",
                "+\t\t// this method, so if safeReadFile() fails then we can't be sure that",
                " \t\t// it's an application problem. This is why we want the SystemException",
                "@@ -386,3 +387,11 @@ private:",
                "-\t\tif (!reader.parse(unsafeReadFile(path), doc)) {",
                "+\t\tpair<string, bool> jsonContent = safeReadFile(session.responseDirFd, \"properties.json\",",
                "+\t\t\tSPAWNINGKIT_MAX_PROPERTIES_JSON_SIZE);",
                "+\t\tif (!jsonContent.second) {",
                "+\t\t\terrors.push_back(\"Error parsing \" + path + \": file bigger than \"",
                "+\t\t\t\t+ toString(SPAWNINGKIT_MAX_PROPERTIES_JSON_SIZE) + \" bytes\");",
                "+\t\t\tthrowSpawnExceptionBecauseOfResultValidationErrors(vector<string>(),",
                "+\t\t\t\terrors);",
                "+\t\t}",
                "+\t\tif (!reader.parse(jsonContent.first, doc)) {",
                " \t\t\terrors.push_back(\"Error parsing \" + path + \": \" +",
                "@@ -925,3 +934,4 @@ private:",
                " \t\tif (fileExists(session.responseDir + \"/error/category\")) {",
                "-\t\t\tstring value = strip(unsafeReadFile(session.responseDir + \"/error/category\"));",
                "+\t\t\tstring value = strip(safeReadFile(session.responseErrorDirFd,",
                "+\t\t\t\t\"category\", SPAWNINGKIT_MAX_ERROR_CATEGORY_SIZE).first);",
                " \t\t\tErrorCategory category = stringToErrorCategory(value);",
                "@@ -1050,4 +1060,9 @@ private:",
                "+\t\t\tmap<JourneyStep, int>::const_iterator it = session.stepDirFds.find(step);",
                "+\t\t\tif (it == session.stepDirFds.end()) {",
                "+\t\t\t\tP_BUG(\"No fd opened for step \" << stepString);",
                "+\t\t\t}",
                "+",
                " \t\t\tloadJourneyStateFromResponseDirForSpecificStep(",
                "-\t\t\t\tsession, pid, stdoutAndErrCapturer, step, stepDir);",
                "+\t\t\t\tsession, pid, stdoutAndErrCapturer, step, stepDir, it->second);",
                " \t\t}",
                "@@ -1057,3 +1072,3 @@ private:",
                " \t\tpid_t pid, const BackgroundIOCapturerPtr &stdoutAndErrCapturer,",
                "-\t\tJourneyStep step, const string &stepDir)",
                "+\t\tJourneyStep step, const string &stepDir, int stepDirFd)",
                " \t{",
                "@@ -1061,3 +1076,4 @@ private:",
                " \t\tstring summary;",
                "-\t\tstring value = strip(unsafeReadFile(stepDir + \"/state\"));",
                "+\t\tstring value = strip(safeReadFile(stepDirFd, \"state\",",
                "+\t\t\tSPAWNINGKIT_MAX_JOURNEY_STEP_FILE_SIZE).first);",
                " \t\tJourneyStepState state = stringToJourneyStepState(value);",
                "@@ -1277,3 +1293,4 @@ private:",
                " \t\tif (fileExists(stepDir + \"/begin_time_monotonic\")) {",
                "-\t\t\tvalue = unsafeReadFile(stepDir + \"/begin_time_monotonic\");",
                "+\t\t\tvalue = safeReadFile(stepDirFd, \"begin_time_monotonic\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_JOURNEY_STEP_FILE_SIZE).first;",
                " \t\t\tMonotonicTimeUsec beginTimeMonotonic = atof(value.c_str()) * 1000000;",
                "@@ -1283,3 +1300,4 @@ private:",
                " \t\t} else if (fileExists(stepDir + \"/begin_time\")) {",
                "-\t\t\tvalue = unsafeReadFile(stepDir + \"/begin_time\");",
                "+\t\t\tvalue = safeReadFile(stepDirFd, \"begin_time\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_JOURNEY_STEP_FILE_SIZE).first;",
                " \t\t\tunsigned long long beginTime = atof(value.c_str()) * 1000000;",
                "@@ -1297,3 +1315,4 @@ private:",
                " \t\tif (fileExists(stepDir + \"/end_time_monotonic\")) {",
                "-\t\t\tvalue = unsafeReadFile(stepDir + \"/end_time_monotonic\");",
                "+\t\t\tvalue = safeReadFile(stepDirFd, \"end_time_monotonic\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_JOURNEY_STEP_FILE_SIZE).first;",
                " \t\t\tMonotonicTimeUsec endTimeMonotonic = atof(value.c_str()) * 1000000;",
                "@@ -1303,3 +1322,4 @@ private:",
                " \t\t} else if (fileExists(stepDir + \"/end_time\")) {",
                "-\t\t\tvalue = unsafeReadFile(stepDir + \"/end_time\");",
                "+\t\t\tvalue = safeReadFile(stepDirFd, \"end_time\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_JOURNEY_STEP_FILE_SIZE).first;",
                " \t\t\tunsigned long long endTime = atof(value.c_str()) * 1000000;",
                "@@ -1336,3 +1356,4 @@ private:",
                " \t\tif (fileExists(responseDir + \"/error/summary\")) {",
                "-\t\t\te.setSummary(strip(unsafeReadFile(responseDir + \"/error/summary\")));",
                "+\t\t\te.setSummary(strip(safeReadFile(session.responseErrorDirFd, \"summary\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE).first));",
                " \t\t}",
                "@@ -1342,4 +1363,4 @@ private:",
                " \t\t{",
                "-\t\t\te.setAdvancedProblemDetails(strip(unsafeReadFile(responseDir",
                "-\t\t\t\t+ \"/error/advanced_problem_details\")));",
                "+\t\t\te.setAdvancedProblemDetails(strip(safeReadFile(session.responseErrorDirFd,",
                "+\t\t\t\t\"advanced_problem_details\", SPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE).first));",
                " \t\t}",
                "@@ -1347,6 +1368,7 @@ private:",
                " \t\tif (fileExists(responseDir + \"/error/problem_description.html\")) {",
                "-\t\t\te.setProblemDescriptionHTML(unsafeReadFile(responseDir + \"/error/problem_description.html\"));",
                "+\t\t\te.setProblemDescriptionHTML(safeReadFile(session.responseErrorDirFd,",
                "+\t\t\t\t\"problem_description.html\", SPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE).first);",
                " \t\t} else if (fileExists(responseDir + \"/error/problem_description.txt\")) {",
                "-\t\t\te.setProblemDescriptionHTML(escapeHTML(strip(unsafeReadFile(",
                "-\t\t\t\tresponseDir + \"/error/problem_description.txt\"))));",
                "+\t\t\te.setProblemDescriptionHTML(escapeHTML(strip(safeReadFile(session.responseErrorDirFd,",
                "+\t\t\t\t\"problem_description.txt\", SPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE).first)));",
                " \t\t}",
                "@@ -1354,6 +1376,7 @@ private:",
                " \t\tif (fileExists(responseDir + \"/error/solution_description.html\")) {",
                "-\t\t\te.setSolutionDescriptionHTML(unsafeReadFile(responseDir + \"/error/solution_description.html\"));",
                "+\t\t\te.setSolutionDescriptionHTML(safeReadFile(session.responseErrorDirFd,",
                "+\t\t\t\t\"solution_description.html\", SPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE).first);",
                " \t\t} else if (fileExists(responseDir + \"/error/solution_description.txt\")) {",
                "-\t\t\te.setSolutionDescriptionHTML(escapeHTML(strip(unsafeReadFile(",
                "-\t\t\t\tresponseDir + \"/error/solution_description.txt\"))));",
                "+\t\t\te.setSolutionDescriptionHTML(escapeHTML(strip(safeReadFile(session.responseErrorDirFd,",
                "+\t\t\t\t\"solution_description.txt\", SPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE).first)));",
                " \t\t}",
                "@@ -1361,3 +1384,4 @@ private:",
                " \t\tstring envvars, userInfo, ulimits;",
                "-\t\tloadBasicInfoFromEnvDumpDir(envDumpDir, envvars, userInfo, ulimits);",
                "+\t\tloadBasicInfoFromEnvDumpDir(envDumpDir, session.envDumpDirFd, envvars,",
                "+\t\t\tuserInfo, ulimits);",
                " \t\te.setSubprocessEnvvars(envvars);",
                "@@ -1390,3 +1414,5 @@ private:",
                " \t\t\t\te.setAnnotation(ent->d_name, strip(",
                "-\t\t\t\t\tunsafeReadFile(path + \"/\" + ent->d_name)));",
                "+\t\t\t\t\tsafeReadFile(session.envDumpAnnotationsDirFd,",
                "+\t\t\t\t\t\tent->d_name, SPAWNINGKIT_MAX_SUBPROCESS_ENVDUMP_SIZE).first",
                "+\t\t\t\t));",
                " \t\t\t}",
                "@@ -1632,12 +1658,15 @@ public:",
                " \tstatic void loadBasicInfoFromEnvDumpDir(const string &envDumpDir,",
                "-\t\tstring &envvars, string &userInfo, string &ulimits)",
                "+\t\tint envDumpDirFd, string &envvars, string &userInfo, string &ulimits)",
                " \t{",
                " \t\tif (fileExists(envDumpDir + \"/envvars\")) {",
                "-\t\t\tenvvars = unsafeReadFile(envDumpDir + \"/envvars\");",
                "+\t\t\tenvvars = safeReadFile(envDumpDirFd, \"envvars\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_SUBPROCESS_ENVDUMP_SIZE).first;",
                " \t\t}",
                " \t\tif (fileExists(envDumpDir + \"/user_info\")) {",
                "-\t\t\tuserInfo = unsafeReadFile(envDumpDir + \"/user_info\");",
                "+\t\t\tuserInfo = safeReadFile(envDumpDirFd, \"user_info\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_SUBPROCESS_ENVDUMP_SIZE).first;",
                " \t\t}",
                " \t\tif (fileExists(envDumpDir + \"/ulimits\")) {",
                "-\t\t\tulimits = unsafeReadFile(envDumpDir + \"/ulimits\");",
                "+\t\t\tulimits = safeReadFile(envDumpDirFd, \"ulimits\",",
                "+\t\t\t\tSPAWNINGKIT_MAX_SUBPROCESS_ENVDUMP_SIZE).first;",
                " \t\t}",
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Prepare.h b/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "index 6e632e287..6093850cf 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2016-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2016-2018 Phusion Holding B.V.",
                "  *",
                "@@ -35,2 +35,3 @@",
                " #include <algorithm>",
                "+#include <utility>",
                " #include <cerrno>",
                "@@ -218,2 +219,39 @@ private:",
                "+\t// Open various workdir subdirectories because we'll use these file descriptors later in",
                "+\t// safeReadFile() calls.",
                "+\tvoid openWorkDirSubdirFds() {",
                "+\t\tsession.workDirFd = openDirFd(session.workDir->getPath());",
                "+\t\tsession.responseDirFd = openDirFd(session.responseDir);",
                "+\t\tsession.responseErrorDirFd = openDirFd(session.responseDir + \"/error\");",
                "+\t\tsession.envDumpDirFd = openDirFd(session.envDumpDir);",
                "+\t\tsession.envDumpAnnotationsDirFd = openDirFd(session.envDumpDir + \"/annotations\");",
                "+\t\topenJourneyStepDirFds(getFirstSubprocessJourneyStep(),",
                "+\t\t\tgetLastSubprocessJourneyStep());",
                "+\t\topenJourneyStepDirFds(getFirstPreloaderJourneyStep(),",
                "+\t\t\tJourneyStep((int) getLastPreloaderJourneyStep() + 1));",
                "+\t}",
                "+",
                "+\tvoid openJourneyStepDirFds(JourneyStep firstStep, JourneyStep lastStep) {",
                "+\t\tJourneyStep step;",
                "+",
                "+\t\tfor (step = firstStep; step < lastStep; step = JourneyStep((int) step + 1)) {",
                "+\t\t\tif (!session.journey.hasStep(step)) {",
                "+\t\t\t\tcontinue;",
                "+\t\t\t}",
                "+",
                "+\t\t\tstring stepString = journeyStepToStringLowerCase(step);",
                "+\t\t\tstring stepDir = session.responseDir + \"/steps/\" + stepString;",
                "+\t\t\tsession.stepDirFds.insert(make_pair(step, openDirFd(stepDir)));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tint openDirFd(const string &path) {",
                "+\t\tint fd = open(path.c_str(), O_RDONLY);",
                "+\t\tif (fd == -1) {",
                "+\t\t\tint e = errno;",
                "+\t\t\tthrow FileSystemException(\"Cannot open \" + path, e, path);",
                "+\t\t}",
                "+\t\treturn fd;",
                "+\t}",
                "+",
                " \tvoid initializeResult() {",
                "@@ -551,2 +589,3 @@ public:",
                " \t\t\tcreateWorkDir();",
                "+\t\t\topenWorkDirSubdirFds();",
                " \t\t\tinitializeResult();",
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Session.h b/src/agent/Core/SpawningKit/Handshake/Session.h",
                "index a35e42110..8fb0dafeb 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Session.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Session.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2016-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2016-2018 Phusion Holding B.V.",
                "  *",
                "@@ -30,2 +30,3 @@",
                " #include <string>",
                "+#include <map>",
                "@@ -52,2 +53,8 @@ struct HandshakeSession {",
                " \tstring envDumpDir;",
                "+\tint workDirFd;",
                "+\tint responseDirFd;",
                "+\tint responseErrorDirFd;",
                "+\tint envDumpDirFd;",
                "+\tint envDumpAnnotationsDirFd;",
                "+\tmap<JourneyStep, int> stepDirFds;",
                " \tJourney journey;",
                "@@ -71,2 +78,7 @@ struct HandshakeSession {",
                " \t\t  config(&_config),",
                "+\t\t  workDirFd(-1),",
                "+\t\t  responseDirFd(-1),",
                "+\t\t  responseErrorDirFd(-1),",
                "+\t\t  envDumpDirFd(-1),",
                "+\t\t  envDumpAnnotationsDirFd(-1),",
                " \t\t  journey(journeyType, !_config.genericApp && _config.startsUsingWrapper),",
                "@@ -79,2 +91,23 @@ struct HandshakeSession {",
                " \t~HandshakeSession() {",
                "+\t\tif (workDirFd != -1) {",
                "+\t\t\tsafelyClose(workDirFd, true);",
                "+\t\t}",
                "+\t\tif (responseDirFd != -1) {",
                "+\t\t\tsafelyClose(responseDirFd, true);",
                "+\t\t}",
                "+\t\tif (responseErrorDirFd != -1) {",
                "+\t\t\tsafelyClose(responseErrorDirFd, true);",
                "+\t\t}",
                "+\t\tif (envDumpDirFd != -1) {",
                "+\t\t\tsafelyClose(envDumpDirFd, true);",
                "+\t\t}",
                "+\t\tif (envDumpAnnotationsDirFd != -1) {",
                "+\t\t\tsafelyClose(envDumpAnnotationsDirFd, true);",
                "+\t\t}",
                "+",
                "+\t\tmap<JourneyStep, int>::iterator it, end = stepDirFds.end();",
                "+\t\tfor (it = stepDirFds.begin(); it != end; it++) {",
                "+\t\t\tsafelyClose(it->second);",
                "+\t\t}",
                "+",
                " \t\tif (config->debugWorkDir && workDir != NULL) {",
                "diff --git a/src/agent/Core/SpawningKit/SmartSpawner.h b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "index 6f03cef8e..f1c66de40 100644",
                "--- a/src/agent/Core/SpawningKit/SmartSpawner.h",
                "+++ b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "@@ -41,2 +41,3 @@",
                " #include <signal.h>",
                "+#include <unistd.h>",
                " #include <cstring>",
                "@@ -179,2 +180,4 @@ private:",
                " \tstruct StdChannelsAsyncOpenState {",
                "+\t\tconst int workDirFd;",
                "+",
                " \t\toxt::thread *stdinOpenThread;",
                "@@ -189,4 +192,5 @@ private:",
                "-\t\tStdChannelsAsyncOpenState()",
                "-\t\t\t: stdinOpenThread(NULL),",
                "+\t\tStdChannelsAsyncOpenState(int _workDirFd)",
                "+\t\t\t: workDirFd(_workDirFd),",
                "+\t\t\t  stdinOpenThread(NULL),",
                " \t\t\t  stdoutAndErrOpenThread(NULL)",
                "@@ -213,3 +217,4 @@ private:",
                " \t{",
                "-\t\tStdChannelsAsyncOpenStatePtr state = boost::make_shared<StdChannelsAsyncOpenState>();",
                "+\t\tStdChannelsAsyncOpenStatePtr state = boost::make_shared<StdChannelsAsyncOpenState>(",
                "+\t\t\tsession.workDirFd);",
                " \t\tstate->stdinOpenThread = new oxt::thread(boost::bind(",
                "@@ -284,3 +289,3 @@ private:",
                " \t{",
                "-\t\tint fd = syscalls::open((workDir + \"/stdin\").c_str(), O_WRONLY | O_APPEND);",
                "+\t\tint fd = syscalls::openat(state->workDirFd, \"stdin\", O_WRONLY | O_APPEND | O_NOFOLLOW);",
                " \t\tint e = errno;",
                "@@ -293,3 +298,3 @@ private:",
                " \t{",
                "-\t\tint fd = syscalls::open((workDir + \"/stdout_and_err\").c_str(), O_RDONLY);",
                "+\t\tint fd = syscalls::openat(state->workDirFd, \"stdout_and_err\", O_RDONLY | O_NOFOLLOW);",
                " \t\tint e = errno;",
                "@@ -431,3 +436,3 @@ private:",
                " \t\t\tHandshakePerform::loadBasicInfoFromEnvDumpDir(session.envDumpDir,",
                "-\t\t\t\tenvvars, userInfo, ulimits);",
                "+\t\t\t\tsession.envDumpDirFd, envvars, userInfo, ulimits);",
                " \t\t\tstring socketAddress = findPreloaderCommandSocketAddress(session);",
                "@@ -443,3 +448,3 @@ private:",
                " \t\t\t\tthis->preloaderAnnotations = loadAnnotationsFromEnvDumpDir(",
                "-\t\t\t\t\tsession.envDumpDir);",
                "+\t\t\t\t\tsession.envDumpDir, session.envDumpAnnotationsDirFd);",
                " \t\t\t}",
                "@@ -1147,3 +1152,5 @@ private:",
                "-\tstatic StringKeyTable<string> loadAnnotationsFromEnvDumpDir(const string &envDumpDir) {",
                "+\tstatic StringKeyTable<string> loadAnnotationsFromEnvDumpDir(const string &envDumpDir,",
                "+\t\tint envDumpAnnotationsDirFd)",
                "+\t{",
                " \t\tstring path = envDumpDir + \"/annotations\";",
                "@@ -1159,5 +1166,4 @@ private:",
                " \t\t\tif (ent->d_name[0] != '.') {",
                "-\t\t\t\tresult.insert(ent->d_name, strip(",
                "-\t\t\t\t\tunsafeReadFile(path + \"/\" + ent->d_name)),",
                "-\t\t\t\t\ttrue);",
                "+\t\t\t\tresult.insert(ent->d_name, strip(safeReadFile(envDumpAnnotationsDirFd,",
                "+\t\t\t\t\tent->d_name, SPAWNINGKIT_MAX_SUBPROCESS_ENVDUMP_SIZE).first), true);",
                " \t\t\t}",
                "diff --git a/src/cxx_supportlib/Constants.h b/src/cxx_supportlib/Constants.h",
                "index 17176651c..d87e51377 100644",
                "--- a/src/cxx_supportlib/Constants.h",
                "+++ b/src/cxx_supportlib/Constants.h",
                "@@ -100,2 +100,7 @@",
                " #define SHORT_PROGRAM_NAME \"Passenger\"",
                "+#define SPAWNINGKIT_MAX_ERROR_CATEGORY_SIZE 32",
                "+#define SPAWNINGKIT_MAX_JOURNEY_STEP_FILE_SIZE 32",
                "+#define SPAWNINGKIT_MAX_PROPERTIES_JSON_SIZE 32768",
                "+#define SPAWNINGKIT_MAX_SUBPROCESS_ENVDUMP_SIZE 131072",
                "+#define SPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE 131072",
                " #define SUPPORT_URL \"https://www.phusionpassenger.com/support\"",
                "diff --git a/src/ruby_supportlib/phusion_passenger/constants.rb b/src/ruby_supportlib/phusion_passenger/constants.rb",
                "index 1d2145d2b..c6e9e14b5 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/constants.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/constants.rb",
                "@@ -78,2 +78,7 @@ module PhusionPassenger",
                "     POOL_HELPER_THREAD_STACK_SIZE = 1024 * 256",
                "+    SPAWNINGKIT_MAX_SUBPROCESS_ERROR_MESSAGE_SIZE = 1024 * 128",
                "+    SPAWNINGKIT_MAX_SUBPROCESS_ENVDUMP_SIZE = 1024 * 128",
                "+    SPAWNINGKIT_MAX_PROPERTIES_JSON_SIZE = 1024 * 32",
                "+    SPAWNINGKIT_MAX_ERROR_CATEGORY_SIZE = 32",
                "+    SPAWNINGKIT_MAX_JOURNEY_STEP_FILE_SIZE = 32",
                "     # Small mbuf sizes avoid memory overhead (up to 1 blocksize per request), but",
                "diff --git a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "index 112095ba7..ce5dfebf1 100644",
                "--- a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "+++ b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "@@ -331,2 +331,24 @@ namespace tut {",
                "+\tTEST_METHOD(20) {",
                "+\t\t// Limited test of whether the code mitigates symlink attacks.",
                "+\t\tset_test_name(\"It does not read from symlinks\");",
                "+",
                "+\t\tinit(SPAWN_DIRECTLY);",
                "+",
                "+\t\tcreateFile(session->responseDir + \"/properties-real.json\",",
                "+\t\t\tcreateGoodPropertiesJson().toStyledString());",
                "+\t\tsymlink(\"properties-real.json\",",
                "+\t\t\t(session->responseDir + \"/properties.json\").c_str());",
                "+\t\tTempThread thr(boost::bind(&Core_SpawningKit_HandshakePerformTest::signalFinish,",
                "+\t\t\tthis));",
                "+",
                "+\t\ttry {",
                "+\t\t\texecute();",
                "+\t\t\tfail(\"SpawnException expected\");",
                "+\t\t} catch (const SpawnException &e) {",
                "+\t\t\tensure(containsSubstring(e.getSummary(),",
                "+\t\t\t\t\"Cannot open 'properties.json'\"));",
                "+\t\t}",
                "+\t}",
                "+"
            ],
            "changed_files": [
                "src/agent/Core/SpawningKit/DirectSpawner.h",
                "src/agent/Core/SpawningKit/Handshake/Perform.h",
                "src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "src/agent/Core/SpawningKit/Handshake/Session.h",
                "src/agent/Core/SpawningKit/SmartSpawner.h",
                "src/cxx_supportlib/Constants.h",
                "src/ruby_supportlib/phusion_passenger/constants.rb",
                "test/cxx/Core/SpawningKit/HandshakePerformTest.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: dos",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: group",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "207870f5b7f5cc240587ab0977d6046782ae1d86",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1526308452,
            "hunks": 4,
            "message": "Fix privilege escalation in the Nginx module The vulnerability is exploitable with a non-standard passenger_instance_registry_dir, via a race condition where after a file was created, it was chowned via the path not the file descriptor. The chown entered the code in 2010, so Passenger 4 + 5 all affected.",
            "diff": [
                "diff --git a/src/nginx_module/ngx_http_passenger_module.c b/src/nginx_module/ngx_http_passenger_module.c",
                "index 39fd2866f..9d47b2e53 100644",
                "--- a/src/nginx_module/ngx_http_passenger_module.c",
                "+++ b/src/nginx_module/ngx_http_passenger_module.c",
                "@@ -285,3 +285,3 @@ open_log_file_for_after_forking(AfterForkData *data, PsgJsonValue *log_target) {",
                " static ngx_int_t",
                "-create_file(ngx_cycle_t *cycle, const u_char *filename, const u_char *contents, size_t len) {",
                "+create_file(ngx_cycle_t *cycle, const u_char *filename, const u_char *contents, size_t len, uid_t uid, gid_t gid) {",
                "     FILE  *f;",
                "@@ -299,2 +299,5 @@ create_file(ngx_cycle_t *cycle, const u_char *filename, const u_char *contents,",
                "         } while (ret == -1 && errno == EINTR);",
                "+        do {",
                "+            ret = fchown(fileno(f), uid, gid);",
                "+        } while (ret == -1 && errno == EINTR);",
                "         do {",
                "@@ -449,3 +452,3 @@ start_watchdog(ngx_cycle_t *cycle) {",
                "     *last = (u_char) '\\0';",
                "-    if (create_file(cycle, filename, (const u_char *) \"\", 0) != NGX_OK) {",
                "+    if (create_file(cycle, filename, (const u_char *) \"\", 0, (uid_t) core_conf->user, (gid_t) -1) != NGX_OK) {",
                "         result = NGX_ERROR;",
                "@@ -453,5 +456,2 @@ start_watchdog(ngx_cycle_t *cycle) {",
                "     }",
                "-    do {",
                "-        ret = chown((const char *) filename, (uid_t) core_conf->user, (gid_t) -1);",
                "-    } while (ret == -1 && errno == EINTR);",
                "     if (ret == -1) {"
            ],
            "changed_files": [
                "src/nginx_module/ngx_http_passenger_module.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: vulnerability",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: privilege",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a346e7cb09e697c62fefb507ebcef3b8ae64b465",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527674007,
            "hunks": 19,
            "message": "Split up the PassengerRoot security check code into its own function and improve its error handling",
            "diff": [
                "diff --git a/build/cxx_tests.rb b/build/cxx_tests.rb",
                "index ca6b3f8fb..b615f9a62 100644",
                "--- a/build/cxx_tests.rb",
                "+++ b/build/cxx_tests.rb",
                "@@ -1,3 +1,3 @@",
                " #  Phusion Passenger - https://www.phusionpassenger.com/",
                "-#  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+#  Copyright (c) 2010-2018 Phusion Holding B.V.",
                " #",
                "@@ -96,2 +96,4 @@ TEST_CXX_OBJECTS = {",
                "     \"test/cxx/DataStructures/StringKeyTableTest.cpp\",",
                "+  \"#{TEST_OUTPUT_DIR}cxx/FileTools/PathSecurityCheckTest.o\" =>",
                "+    \"test/cxx/FileTools/PathSecurityCheckTest.cpp\",",
                "   \"#{TEST_OUTPUT_DIR}cxx/MessageReadersWritersTest.o\" =>",
                "diff --git a/build/support/cxx_dependency_map.rb b/build/support/cxx_dependency_map.rb",
                "index 1d5eb3851..d33944e27 100644",
                "--- a/build/support/cxx_dependency_map.rb",
                "+++ b/build/support/cxx_dependency_map.rb",
                "@@ -5848,2 +5848,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/FileTools/PathManip.h\",",
                "+   \"src/cxx_supportlib/FileTools/PathSecurityCheck.h\",",
                "    \"src/cxx_supportlib/Hooks.h\",",
                "@@ -8385,2 +8386,16 @@ CXX_DEPENDENCY_MAP =",
                "   [],",
                "+ \"src/cxx_supportlib/FileTools/PathSecurityCheck.cpp\"=>",
                "+  [\"src/cxx_supportlib/Exceptions.h\",",
                "+   \"src/cxx_supportlib/FileTools/PathManip.h\",",
                "+   \"src/cxx_supportlib/FileTools/PathSecurityCheck.h\",",
                "+   \"src/cxx_supportlib/StaticString.h\",",
                "+   \"src/cxx_supportlib/Utils.h\",",
                "+   \"src/cxx_supportlib/Utils/StrIntUtils.h\",",
                "+   \"src/cxx_supportlib/oxt/detail/tracable_exception_disabled.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/tracable_exception_enabled.hpp\",",
                "+   \"src/cxx_supportlib/oxt/macros.hpp\",",
                "+   \"src/cxx_supportlib/oxt/tracable_exception.hpp\"],",
                "+ \"src/cxx_supportlib/FileTools/PathSecurityCheck.h\"=>",
                "+  [\"src/cxx_supportlib/StaticString.h\",",
                "+   \"src/cxx_supportlib/oxt/macros.hpp\"],",
                "  \"src/cxx_supportlib/Hooks.h\"=>",
                "@@ -12323,2 +12338,44 @@ CXX_DEPENDENCY_MAP =",
                "    \"test/tut/tut.h\"],",
                "+ \"test/cxx/FileTools/PathSecurityCheckTest.cpp\"=>",
                "+  [\"src/cxx_supportlib/BackgroundEventLoop.h\",",
                "+   \"src/cxx_supportlib/Constants.h\",",
                "+   \"src/cxx_supportlib/DataStructures/HashedStaticString.h\",",
                "+   \"src/cxx_supportlib/Exceptions.h\",",
                "+   \"src/cxx_supportlib/FileDescriptor.h\",",
                "+   \"src/cxx_supportlib/FileTools/FileManip.h\",",
                "+   \"src/cxx_supportlib/FileTools/PathSecurityCheck.h\",",
                "+   \"src/cxx_supportlib/InstanceDirectory.h\",",
                "+   \"src/cxx_supportlib/LoggingKit/Assert.h\",",
                "+   \"src/cxx_supportlib/LoggingKit/Forward.h\",",
                "+   \"src/cxx_supportlib/LoggingKit/Logging.h\",",
                "+   \"src/cxx_supportlib/LoggingKit/LoggingKit.h\",",
                "+   \"src/cxx_supportlib/ProcessManagement/Spawn.h\",",
                "+   \"src/cxx_supportlib/ProcessManagement/Utils.h\",",
                "+   \"src/cxx_supportlib/RandomGenerator.h\",",
                "+   \"src/cxx_supportlib/ResourceLocator.h\",",
                "+   \"src/cxx_supportlib/StaticString.h\",",
                "+   \"src/cxx_supportlib/Utils.h\",",
                "+   \"src/cxx_supportlib/Utils/FastStringStream.h\",",
                "+   \"src/cxx_supportlib/Utils/Hasher.h\",",
                "+   \"src/cxx_supportlib/Utils/IOUtils.h\",",
                "+   \"src/cxx_supportlib/Utils/IniFile.h\",",
                "+   \"src/cxx_supportlib/Utils/StrIntUtils.h\",",
                "+   \"src/cxx_supportlib/Utils/SystemTime.h\",",
                "+   \"src/cxx_supportlib/oxt/backtrace.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/backtrace_disabled.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/backtrace_enabled.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/context.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/spin_lock_darwin.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/spin_lock_gcc_x86.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/spin_lock_portable.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/spin_lock_pthreads.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/tracable_exception_disabled.hpp\",",
                "+   \"src/cxx_supportlib/oxt/detail/tracable_exception_enabled.hpp\",",
                "+   \"src/cxx_supportlib/oxt/macros.hpp\",",
                "+   \"src/cxx_supportlib/oxt/spin_lock.hpp\",",
                "+   \"src/cxx_supportlib/oxt/system_calls.hpp\",",
                "+   \"src/cxx_supportlib/oxt/thread.hpp\",",
                "+   \"src/cxx_supportlib/oxt/tracable_exception.hpp\",",
                "+   \"test/cxx/TestSupport.h\",",
                "+   \"test/tut/tut.h\"],",
                "  \"test/cxx/IOUtilsTest.cpp\"=>",
                "diff --git a/src/agent/Core/CoreMain.cpp b/src/agent/Core/CoreMain.cpp",
                "index e3f1302c1..c13767871 100644",
                "--- a/src/agent/Core/CoreMain.cpp",
                "+++ b/src/agent/Core/CoreMain.cpp",
                "@@ -40,2 +40,3 @@",
                " #include <boost/scoped_ptr.hpp>",
                "+#include <boost/foreach.hpp>",
                " #include <sys/types.h>",
                "@@ -88,2 +89,3 @@",
                " #include <FileTools/FileManip.h>",
                "+#include <FileTools/PathSecurityCheck.h>",
                " #include <Exceptions.h>",
                "@@ -886,46 +888,2 @@ prestartWebApps() {",
                "-/**",
                "- * See warnIfPassengerRootVulnerable()",
                "- */",
                "-static void",
                "-warnIfPathVulnerable(const char *path, string &warnings) {",
                "-\tstruct stat pathStat;",
                "-",
                "-\tif (stat(path, &pathStat) == -1) {",
                "-\t\tP_DEBUG(\"Vulnerability check skipped: stat error on \" << path << \" (errno: \" << errno << \")\");",
                "-\t\treturn; // fatal: we need that stat for both checks below",
                "-\t}",
                "-",
                "-\t// Non-root ownership",
                "-\tstruct passwd pathOwner;",
                "-\tstruct passwd *pwdResult;",
                "-",
                "-\tboost::shared_array<char> strings;",
                "-\tlong stringsBufSize = std::max<long>(1024 * 128, sysconf(_SC_GETPW_R_SIZE_MAX));",
                "-\tstrings.reset(new char[stringsBufSize]);",
                "-\terrno = 0;",
                "-\tif (getpwuid_r(pathStat.st_uid, &pathOwner, strings.get(), stringsBufSize, &pwdResult) == -1) {",
                "-\t\tP_DEBUG(\"Vulnerability check (owner) skipped: getpwuid_r error on \" << path << \" (owner UID: \" <<",
                "-\t\t\t\tpathStat.st_uid << \", errno: \" << errno << \")\");",
                "-\t} else if (pwdResult == NULL) {",
                "-\t\tP_DEBUG(\"Vulnerability check (owner) skipped: getpwuid_r empty on \" << path << \" (owner UID: \" <<",
                "-\t\t\t\tpathStat.st_uid << \", errno: \" << errno << \")\");",
                "-\t} else if (pathOwner.pw_uid != 0) {",
                "-\t\twarnings.append(\"\\nThe path \\\"\");",
                "-\t\twarnings.append(path);",
                "-\t\twarnings.append(\"\\\" can be modified by user \\\"\");",
                "-\t\twarnings.append(pathOwner.pw_name);",
                "-\t\twarnings.append(\"\\\" (or applications running as that user).\"",
                "-\t\t\t\" Change the owner of the path to root, or avoid running \" SHORT_PROGRAM_NAME \" as root.\");",
                "-\t}",
                "-",
                "-\t// World writeable access rights",
                "-\tif ((pathStat.st_mode & S_IWOTH) != 0) {",
                "-\t\twarnings.append(\"\\nThe path \\\"\");",
                "-\t\twarnings.append(path);",
                "-\t\twarnings.append(\"\\\" is writeable by any user (or application).\"",
                "-\t\t\t\" Limit write access on the path to only the root user/group.\");",
                "-\t}",
                "-}",
                "-",
                " /*",
                "@@ -949,15 +907,24 @@ warnIfPassengerRootVulnerable() {",
                " \tstring root = workingObjects->resourceLocator.getInstallSpec();",
                "-\tstring checkPath = absolutizePath(root);",
                "-\t// Check the Passenger root and all dirs above it for ownership and world-writeability",
                "-\tstring warnings;",
                "-\twhile (!checkPath.empty() && checkPath != \"/\") {",
                "-\t\twarnIfPathVulnerable(checkPath.c_str(), warnings);",
                "-",
                "-\t\tcheckPath = extractDirName(checkPath);",
                "-\t}",
                "-\tif (!warnings.empty()) {",
                "-\t\tP_WARN(\"WARNING: potential privilege escalation vulnerability. \"",
                "-\t\t\tPROGRAM_NAME \" is running as root, and part(s) of the \"",
                "-\t\t\tSHORT_PROGRAM_NAME \" root path (\" << root",
                "-\t\t\t<< \") can be changed by non-root user(s):\" << warnings);",
                "+\tvector<string> errors, checkErrors;",
                "+\tif (isPathProbablySecureForRootUse(root, errors, checkErrors)) {",
                "+\t\tif (!checkErrors.empty()) {",
                "+\t\t\tstring message = \"WARNING: unable to perform privilege escalation vulnerability detection:\\n\";",
                "+\t\t\tforeach (string line, checkErrors) {",
                "+\t\t\t\tmessage.append(\"\\n - \" + line);",
                "+\t\t\t}",
                "+\t\t\tP_WARN(message);",
                "+\t\t}",
                "+\t} else {",
                "+\t\tstring message = \"WARNING: potential privilege escalation vulnerability detected. \" \\",
                "+\t\t\tPROGRAM_NAME \" is running as root, and part(s) of the \" SHORT_PROGRAM_NAME",
                "+\t\t\t\" root path (\" + root + \") can be changed by non-root user(s):\\n\";",
                "+\t\tforeach (string line, errors) {",
                "+\t\t\tmessage.append(\"\\n - \" + line);",
                "+\t\t}",
                "+\t\tforeach (string line, checkErrors) {",
                "+\t\t\tmessage.append(\"\\n - \" + line);",
                "+\t\t}",
                "+\t\tmessage.append(\"\\n\\nPlease either fix up the permissions for the insecure paths, or install \"",
                "+\t\t\tSHORT_PROGRAM_NAME \" in a different location that can only be modified by root.\");",
                "+\t\tP_WARN(message);",
                " \t}",
                "diff --git a/src/cxx_supportlib/FileTools/PathSecurityCheck.cpp b/src/cxx_supportlib/FileTools/PathSecurityCheck.cpp",
                "new file mode 100644",
                "index 000000000..c6ea3c77a",
                "--- /dev/null",
                "+++ b/src/cxx_supportlib/FileTools/PathSecurityCheck.cpp",
                "@@ -0,0 +1,99 @@",
                "+/*",
                "+ *  Phusion Passenger - https://www.phusionpassenger.com/",
                "+ *  Copyright (c) 2018 Phusion Holding B.V.",
                "+ *",
                "+ *  \"Passenger\", \"Phusion Passenger\" and \"Union Station\" are registered",
                "+ *  trademarks of Phusion Holding B.V.",
                "+ *",
                "+ *  Permission is hereby granted, free of charge, to any person obtaining a copy",
                "+ *  of this software and associated documentation files (the \"Software\"), to deal",
                "+ *  in the Software without restriction, including without limitation the rights",
                "+ *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
                "+ *  copies of the Software, and to permit persons to whom the Software is",
                "+ *  furnished to do so, subject to the following conditions:",
                "+ *",
                "+ *  The above copyright notice and this permission notice shall be included in",
                "+ *  all copies or substantial portions of the Software.",
                "+ *",
                "+ *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
                "+ *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                "+ *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                "+ *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                "+ *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                "+ *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
                "+ *  THE SOFTWARE.",
                "+ */",
                "+",
                "+#include <sys/stat.h>",
                "+#include <unistd.h>",
                "+",
                "+#include <cerrno>",
                "+",
                "+#include <FileTools/PathSecurityCheck.h>",
                "+#include <FileTools/PathManip.h>",
                "+#include <Utils.h>",
                "+#include <Utils/StrIntUtils.h>",
                "+",
                "+namespace Passenger {",
                "+",
                "+",
                "+static bool",
                "+isSinglePathProbablySecureForRootUse(const string &path,",
                "+\tvector<string> &errors, vector<string> &checkErrors)",
                "+{",
                "+\tstruct stat s;",
                "+\tint ret;",
                "+",
                "+\tdo {",
                "+\t\tret = stat(path.c_str(), &s);",
                "+\t} while (ret == -1 && errno == EAGAIN);",
                "+\tif (ret == -1) {",
                "+\t\tint e = errno;",
                "+\t\tcheckErrors.push_back(\"Security check skipped on \" + path",
                "+\t\t\t+ \": stat() failed: \" + strerror(e) + \" (errno=\"",
                "+\t\t\t+ toString(e) + \")\");",
                "+\t\treturn true;",
                "+\t}",
                "+",
                "+\tif (s.st_uid != 0) {",
                "+\t\terrors.push_back(path + \" is not secure: it can be modified by user \"",
                "+\t\t\t+ getUserName(s.st_uid));",
                "+\t\treturn false;",
                "+\t}",
                "+",
                "+\tif (s.st_mode & S_ISVTX) {",
                "+\t\treturn true;",
                "+\t}",
                "+",
                "+\tif (s.st_mode & S_IWGRP) {",
                "+\t\terrors.push_back(path + \" is not secure: it can be modified by group \"",
                "+\t\t\t+ getGroupName(s.st_gid));",
                "+\t\treturn false;",
                "+\t}",
                "+",
                "+\tif (s.st_mode & S_IWOTH) {",
                "+\t\terrors.push_back(path + \" is not secure: it can be modified by anybody\");",
                "+\t\treturn false;",
                "+\t}",
                "+",
                "+\treturn true;",
                "+}",
                "+",
                "+bool",
                "+isPathProbablySecureForRootUse(const StaticString &path, vector<string> &errors,",
                "+\tvector<string> &checkErrors)",
                "+{",
                "+\tstring fullPath = absolutizePath(path);",
                "+\tbool result = true;",
                "+",
                "+\twhile (!fullPath.empty() && fullPath != \"/\") {",
                "+\t\tresult = isSinglePathProbablySecureForRootUse(fullPath, errors, checkErrors)",
                "+\t\t\t&& result;",
                "+\t\tfullPath = extractDirName(fullPath);",
                "+\t}",
                "+",
                "+\treturn result;",
                "+}",
                "+",
                "+",
                "+} // namespace Passenger",
                "diff --git a/src/cxx_supportlib/FileTools/PathSecurityCheck.h b/src/cxx_supportlib/FileTools/PathSecurityCheck.h",
                "new file mode 100644",
                "index 000000000..f96943f03",
                "--- /dev/null",
                "+++ b/src/cxx_supportlib/FileTools/PathSecurityCheck.h",
                "@@ -0,0 +1,69 @@",
                "+/*",
                "+ *  Phusion Passenger - https://www.phusionpassenger.com/",
                "+ *  Copyright (c) 2018 Phusion Holding B.V.",
                "+ *",
                "+ *  \"Passenger\", \"Phusion Passenger\" and \"Union Station\" are registered",
                "+ *  trademarks of Phusion Holding B.V.",
                "+ *",
                "+ *  Permission is hereby granted, free of charge, to any person obtaining a copy",
                "+ *  of this software and associated documentation files (the \"Software\"), to deal",
                "+ *  in the Software without restriction, including without limitation the rights",
                "+ *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
                "+ *  copies of the Software, and to permit persons to whom the Software is",
                "+ *  furnished to do so, subject to the following conditions:",
                "+ *",
                "+ *  The above copyright notice and this permission notice shall be included in",
                "+ *  all copies or substantial portions of the Software.",
                "+ *",
                "+ *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
                "+ *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                "+ *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                "+ *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                "+ *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                "+ *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
                "+ *  THE SOFTWARE.",
                "+ */",
                "+#ifndef _PASSENGER_FILE_TOOLS_PATH_SECURITY_CHECK_H_",
                "+#define _PASSENGER_FILE_TOOLS_PATH_SECURITY_CHECK_H_",
                "+",
                "+#include <vector>",
                "+#include <string>",
                "+#include <StaticString.h>",
                "+",
                "+namespace Passenger {",
                "+",
                "+using namespace std;",
                "+",
                "+",
                "+/**",
                "+ * Checks whether the given path is secure for use by a root process.",
                "+ * This is done by checking whether the path itself, as well as any of the",
                "+ * parent directories, can only be written to by root. Returns whether the",
                "+ * path is deemed secure.",
                "+ *",
                "+ * If a non-root user can write to any of the directories in the path then that",
                "+ * user can cause the root proces to read an arbitrary file. That file can even",
                "+ * be one that is not owned by said user, through the use of symlinks.",
                "+ *",
                "+ * Checking is done according to normal Unix permissions. ACLs and systems like",
                "+ * SELinux are not taken into consideration. Also, if this function fails to",
                "+ * check a part of the path (e.g. because stat() failed) then this function",
                "+ * simply skips that part. Therefore this function does not perform a full check",
                "+ * and its result (which *can* be a false positive or a false negative) should be",
                "+ * taken with a grain of salt.",
                "+ *",
                "+ * Error messages that can be used to inform the user which parts of the path",
                "+ * are insecure, are outputted into `errors`. This vector becomes non-empty",
                "+ * only if result is false.",
                "+ *",
                "+ * Any errors that occur w.r.t. checking itself (e.g. stat() errors) are",
                "+ * outputted into `checkErrors`. This vector may become non-empty no matter",
                "+ * the result.",
                "+ */",
                "+bool isPathProbablySecureForRootUse(const StaticString &path,",
                "+\tvector<string> &errors, vector<string> &checkErrors);",
                "+",
                "+",
                "+} // namespace Passenger",
                "+",
                "+#endif /* _PASSENGER_FILE_TOOLS_PATH_SECURITY_CHECK_H_ */",
                "diff --git a/src/cxx_supportlib/Utils.cpp b/src/cxx_supportlib/Utils.cpp",
                "index 28f055d7d..6463b94bc 100644",
                "--- a/src/cxx_supportlib/Utils.cpp",
                "+++ b/src/cxx_supportlib/Utils.cpp",
                "@@ -188,5 +188,33 @@ getProcessUsername(bool fallback) {",
                "+string",
                "+getUserName(uid_t uid) {",
                "+\tstruct passwd pwd, *result;",
                "+\tint ret;",
                "+\tlong bufSize;",
                "+\tshared_array<char> strings;",
                "+",
                "+\t// _SC_GETPW_R_SIZE_MAX is not a maximum:",
                "+\t// http://tomlee.co/2012/10/problems-with-large-linux-unix-groups-and-getgrgid_r-getgrnam_r/",
                "+\tbufSize = std::max<long>(1024 * 128, sysconf(_SC_GETPW_R_SIZE_MAX));",
                "+\tstrings.reset(new char[bufSize]);",
                "+",
                "+\tresult = (struct passwd *) NULL;",
                "+\tdo {",
                "+\t\tret = getpwuid_r(uid, &pwd, strings.get(), bufSize, &result);",
                "+\t} while (ret == EAGAIN);",
                "+\tif (ret != 0) {",
                "+\t\tresult = (struct passwd *) NULL;",
                "+\t}",
                "+",
                "+\tif (result == (struct passwd *) NULL || result->pw_name == NULL || result->pw_name[0] == '\\0') {",
                "+\t\treturn toString(uid);",
                "+\t} else {",
                "+\t\treturn result->pw_name;",
                "+\t}",
                "+}",
                "+",
                " string",
                " getGroupName(gid_t gid) {",
                "-\tstruct group grp, *groupEntry;",
                "+\tstruct group grp, *result;",
                "+\tint ret;",
                " \tlong bufSize;",
                "@@ -199,11 +227,14 @@ getGroupName(gid_t gid) {",
                "-\tgroupEntry = (struct group *) NULL;",
                "-\tif (getgrgid_r(gid, &grp, strings.get(), bufSize, &groupEntry) != 0) {",
                "-\t\tgroupEntry = (struct group *) NULL;",
                "+\tresult = (struct group *) NULL;",
                "+\tdo {",
                "+\t\tret = getgrgid_r(gid, &grp, strings.get(), bufSize, &result);",
                "+\t} while (ret == EAGAIN);",
                "+\tif (ret != 0) {",
                "+\t\tresult = (struct group *) NULL;",
                " \t}",
                "-\tif (groupEntry == (struct group *) NULL) {",
                "+\tif (result == (struct group *) NULL || result->gr_name == NULL || result->gr_name[0] == '\\0') {",
                " \t\treturn toString(gid);",
                " \t} else {",
                "-\t\treturn groupEntry->gr_name;",
                "+\t\treturn result->gr_name;",
                " \t}",
                "diff --git a/src/cxx_supportlib/Utils.h b/src/cxx_supportlib/Utils.h",
                "index e64630576..7f697bf26 100644",
                "--- a/src/cxx_supportlib/Utils.h",
                "+++ b/src/cxx_supportlib/Utils.h",
                "@@ -102,2 +102,8 @@ string getProcessUsername(bool fallback = true);",
                "+/**",
                "+ * Returns either the user name for the given UID, or (if the user name",
                "+ * couldn't be looked up) a string representation of the given UID.",
                "+ */",
                "+string getUserName(uid_t uid);",
                "+",
                " /**",
                "diff --git a/src/ruby_supportlib/phusion_passenger/common_library.rb b/src/ruby_supportlib/phusion_passenger/common_library.rb",
                "index 929fd7958..618c385a8 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/common_library.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/common_library.rb",
                "@@ -282,2 +282,5 @@ COMMON_LIBRARY = CommonLibraryBuilder.new do",
                "     :category => :base",
                "+  define_component 'FileTools/PathSecurityCheck.o',",
                "+    :source   => 'FileTools/PathSecurityCheck.cpp',",
                "+    :category => :base",
                "   define_component 'ProcessManagement/Spawn.o',",
                "diff --git a/test/cxx/FileTools/PathSecurityCheckTest.cpp b/test/cxx/FileTools/PathSecurityCheckTest.cpp",
                "new file mode 100644",
                "index 000000000..8f38bb3d0",
                "--- /dev/null",
                "+++ b/test/cxx/FileTools/PathSecurityCheckTest.cpp",
                "@@ -0,0 +1,106 @@",
                "+#include \"TestSupport.h\"",
                "+#include <FileTools/FileManip.h>",
                "+#include <FileTools/PathSecurityCheck.h>",
                "+#include <unistd.h>",
                "+",
                "+using namespace Passenger;",
                "+using namespace std;",
                "+",
                "+namespace tut {",
                "+\tstruct FileTools_PathSecurityCheckTest {",
                "+\t\tstring tmpPath;",
                "+\t\tTempDir tmpDir;",
                "+\t\tvector<string> errors, checkErrors;",
                "+",
                "+\t\tFileTools_PathSecurityCheckTest()",
                "+\t\t\t: tmpPath(\"/tmp/pathsecuritychecktest.\" + toString(getpid())),",
                "+\t\t\t  tmpDir(tmpPath)",
                "+\t\t\t{ }",
                "+\t};",
                "+",
                "+\tDEFINE_TEST_GROUP(FileTools_PathSecurityCheckTest);",
                "+",
                "+\t#define ONLY_RUN_AS_ROOT() \\",
                "+\t\tdo { \\",
                "+\t\t\tif (geteuid() != 0) { \\",
                "+\t\t\t\treturn; \\",
                "+\t\t\t} \\",
                "+\t\t} while (false)",
                "+",
                "+\tTEST_METHOD(1) {",
                "+\t\tset_test_name(\"It succeeds if no directory in the path is writable by a non-root user\");",
                "+\t\tONLY_RUN_AS_ROOT();",
                "+",
                "+\t\tmakeDirTree(tmpPath + \"/a\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b/c\", \"u=rwx,g=rx,o=rx\");",
                "+",
                "+\t\tensure(\"(1)\", isPathProbablySecureForRootUse(tmpPath + \"/a/b/c\",",
                "+\t\t\terrors, checkErrors));",
                "+\t\tensure_equals(\"(2)\", errors.size(), 0u);",
                "+\t\tensure_equals(\"(3)\", checkErrors.size(), 0u);",
                "+\t}",
                "+",
                "+\tTEST_METHOD(2) {",
                "+\t\tset_test_name(\"It fails if parts of the path is owned by a non-root user\");",
                "+\t\tONLY_RUN_AS_ROOT();",
                "+",
                "+\t\tmakeDirTree(tmpPath + \"/a\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b/c\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tchown((tmpPath + \"/a\").c_str(), 1, 0);",
                "+",
                "+\t\tensure(\"(1)\", !isPathProbablySecureForRootUse(tmpPath + \"/a/b/c\",",
                "+\t\t\terrors, checkErrors));",
                "+\t\tensure_equals(\"(2)\", errors.size(), 1u);",
                "+\t\tensure_equals(\"(3)\", checkErrors.size(), 0u);",
                "+\t\tensure(\"(4)\", containsSubstring(errors[0],",
                "+\t\t\ttmpPath + \"/a is not secure: it can be modified by user\"));",
                "+\t}",
                "+",
                "+\tTEST_METHOD(3) {",
                "+\t\tset_test_name(\"It fails if parts of the path is group-writable\");",
                "+\t\tONLY_RUN_AS_ROOT();",
                "+",
                "+\t\tmakeDirTree(tmpPath + \"/a\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b\", \"u=rwx,g=rwx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b/c\", \"u=rwx,g=rx,o=rx\");",
                "+",
                "+\t\tensure(\"(1)\", !isPathProbablySecureForRootUse(tmpPath + \"/a/b/c\",",
                "+\t\t\terrors, checkErrors));",
                "+\t\tensure_equals(\"(2)\", errors.size(), 1u);",
                "+\t\tensure_equals(\"(3)\", checkErrors.size(), 0u);",
                "+\t\tensure(\"(4)\", containsSubstring(errors[0],",
                "+\t\t\ttmpPath + \"/a/b is not secure: it can be modified by group\"));",
                "+\t}",
                "+",
                "+\tTEST_METHOD(4) {",
                "+\t\tset_test_name(\"It fails if parts of the path is world-writable\");",
                "+\t\tONLY_RUN_AS_ROOT();",
                "+",
                "+\t\tmakeDirTree(tmpPath + \"/a\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b\", \"u=rwx,g=rx,o=rwx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b/c\", \"u=rwx,g=rx,o=rx\");",
                "+",
                "+\t\tensure(\"(1)\", !isPathProbablySecureForRootUse(tmpPath + \"/a/b/c\",",
                "+\t\t\terrors, checkErrors));",
                "+\t\tensure_equals(\"(2)\", errors.size(), 1u);",
                "+\t\tensure_equals(\"(3)\", checkErrors.size(), 0u);",
                "+\t\tensure(\"(4)\", containsSubstring(errors[0],",
                "+\t\t\ttmpPath + \"/a/b is not secure: it can be modified by anybody\"));",
                "+\t}",
                "+",
                "+\tTEST_METHOD(5) {",
                "+\t\tset_test_name(\"It does not fail if parts of the path is group- or world-writable as long as it's sticky\");",
                "+\t\tONLY_RUN_AS_ROOT();",
                "+",
                "+\t\tmakeDirTree(tmpPath + \"/a\", \"u=rwx,g=rx,o=rx\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b\", \"u=rwx,g=rwx,o=rwx,+t\");",
                "+\t\tmakeDirTree(tmpPath + \"/a/b/c\", \"u=rwx,g=rx,o=rx\");",
                "+",
                "+\t\tensure(\"(1)\", isPathProbablySecureForRootUse(tmpPath + \"/a/b/c\",",
                "+\t\t\terrors, checkErrors));",
                "+\t\tensure_equals(\"(2)\", errors.size(), 0u);",
                "+\t\tensure_equals(\"(3)\", checkErrors.size(), 0u);",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "build/cxx_tests.rb",
                "build/support/cxx_dependency_map.rb",
                "src/agent/Core/CoreMain.cpp",
                "src/cxx_supportlib/FileTools/PathSecurityCheck.cpp",
                "src/cxx_supportlib/FileTools/PathSecurityCheck.h",
                "src/cxx_supportlib/Utils.cpp",
                "src/cxx_supportlib/Utils.h",
                "src/ruby_supportlib/phusion_passenger/common_library.rb",
                "test/cxx/FileTools/PathSecurityCheckTest.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c3fa5128509a80176a69775be1333b1fa1ad82b9",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527693421,
            "hunks": 3,
            "message": "Warn if instance registry dir insecure We check the instance registry dir in the same way we check the passenger root dir. If the instance registry dir is not secure then that can result in arbitrary file overwrites.",
            "diff": [
                "diff --git a/src/agent/Watchdog/WatchdogMain.cpp b/src/agent/Watchdog/WatchdogMain.cpp",
                "index 1955dc43d..71129b9d6 100644",
                "--- a/src/agent/Watchdog/WatchdogMain.cpp",
                "+++ b/src/agent/Watchdog/WatchdogMain.cpp",
                "@@ -73,2 +73,3 @@",
                " #include <FileDescriptor.h>",
                "+#include <FileTools/PathSecurityCheck.h>",
                " #include <RandomGenerator.h>",
                "@@ -979,2 +980,35 @@ lookupDefaultUidGid(uid_t &uid, gid_t &gid) {",
                "+static void",
                "+warnIfInstanceDirVulnerable(const string &root) {",
                "+\tTRACE_POINT();",
                "+",
                "+\tif (geteuid() != 0) {",
                "+\t\treturn; // Passenger is not root, so no escalation.",
                "+\t}",
                "+",
                "+\tvector<string> errors, checkErrors;",
                "+\tif (isPathProbablySecureForRootUse(root, errors, checkErrors)) {",
                "+\t\tif (!checkErrors.empty()) {",
                "+\t\t\tstring message = \"WARNING: unable to perform privilege escalation vulnerability detection:\\n\";",
                "+\t\t\tforeach (string line, checkErrors) {",
                "+\t\t\t\tmessage.append(\"\\n - \" + line);",
                "+\t\t\t}",
                "+\t\t\tP_WARN(message);",
                "+\t\t}",
                "+\t} else {",
                "+\t\tstring message = \"WARNING: potential privilege escalation vulnerability detected. \" \\",
                "+\t\t\tPROGRAM_NAME \" is running as root, and part(s) of the \" SHORT_PROGRAM_NAME",
                "+\t\t\t\" instance directory (\" + root + \") can be changed by non-root user(s):\\n\";",
                "+\t\tforeach (string line, errors) {",
                "+\t\t\tmessage.append(\"\\n - \" + line);",
                "+\t\t}",
                "+\t\tforeach (string line, checkErrors) {",
                "+\t\t\tmessage.append(\"\\n - \" + line);",
                "+\t\t}",
                "+\t\tmessage.append(\"\\n\\nPlease either fix up the permissions for the insecure paths, or use\" \\",
                "+\t\t\t\t\t   \" a different location for the instance dir that can only be modified by root.\");",
                "+\t\tP_WARN(message);",
                "+\t}",
                "+}",
                "+",
                " static void",
                "@@ -1007,2 +1041,6 @@ initializeWorkingObjects(const WorkingObjectsPtr &wo, InstanceDirToucherPtr &ins",
                " \t}",
                "+",
                "+\t// check if path is safe",
                "+\twarnIfInstanceDirVulnerable(watchdogConfig->get(\"instance_registry_dir\").asString());",
                "+",
                " \two->instanceDir = boost::make_shared<InstanceDirectory>(instanceOptions,"
            ],
            "changed_files": [
                "src/agent/Watchdog/WatchdogMain.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: secure, insecure",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ac5e8d67d7246d79ee714f04d23195237407a977",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527500412,
            "hunks": 21,
            "message": "SpawningKit: do not chown work dir until HandshakePrepare is done So that the application user cannot perform symlink attacks inside the work dir until we are done (at which point the follow-up code will only perform read/write operations after dropping root privileges).",
            "diff": [
                "diff --git a/build/support/cxx_dependency_map.rb b/build/support/cxx_dependency_map.rb",
                "index d57d5e00b..8c6c576e9 100644",
                "--- a/build/support/cxx_dependency_map.rb",
                "+++ b/build/support/cxx_dependency_map.rb",
                "@@ -7126,2 +7126,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/agent/Core/SpawningKit/Exceptions.h\",",
                "+   \"src/agent/Core/SpawningKit/Handshake/WorkDir.h\",",
                "    \"src/agent/Core/SpawningKit/Journey.h\",",
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Prepare.h b/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "index c40da0b92..6e632e287 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "@@ -145,3 +145,3 @@ private:",
                " \t\tTRACE_POINT();",
                "-\t\tsession.workDir.reset(new HandshakeWorkDir(session.uid, session.gid));",
                "+\t\tsession.workDir.reset(new HandshakeWorkDir());",
                "@@ -539,3 +539,3 @@ public:",
                "-\tvoid execute() {",
                "+\tHandshakePrepare &execute() {",
                " \t\tTRACE_POINT();",
                "@@ -578,2 +578,8 @@ public:",
                " \t\t}",
                "+",
                "+\t\treturn *this;",
                "+\t}",
                "+",
                "+\tvoid finalize() {",
                "+\t\tsession.workDir->finalize(session.uid, session.gid);",
                " \t}",
                "diff --git a/src/agent/Core/SpawningKit/Handshake/WorkDir.h b/src/agent/Core/SpawningKit/Handshake/WorkDir.h",
                "index 4a5c72c63..3d1eba62a 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/WorkDir.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/WorkDir.h",
                "@@ -56,3 +56,3 @@ private:",
                " public:",
                "-\tHandshakeWorkDir(uid_t uid, gid_t gid) {",
                "+\tHandshakeWorkDir() {",
                " \t\tchar buf[PATH_MAX + 1];",
                "@@ -72,5 +72,2 @@ public:",
                " \t\t\tpath = result;",
                "-\t\t\tboost::this_thread::disable_interruption di;",
                "-\t\t\tboost::this_thread::disable_syscall_interruption dsi;",
                "-\t\t\tsyscalls::chown(result, uid, gid);",
                " \t\t}",
                "@@ -88,2 +85,6 @@ public:",
                "+\tvoid finalize(uid_t uid, gid_t gid) {",
                "+\t\tfinalize(path, uid, gid);",
                "+\t}",
                "+",
                " \tstring dontRemoveOnDestruction() {",
                "@@ -93,2 +94,17 @@ public:",
                " \t}",
                "+",
                "+\tstatic void finalize(const string &path, uid_t uid, gid_t gid) {",
                "+\t\t// We do not chown() the work dir until:",
                "+\t\t//",
                "+\t\t//  - HandshakePrepare is done populating the work dir,",
                "+\t\t//  - SpawnEnvSetupperMain is done reading from and modifying the work dir",
                "+\t\t//",
                "+\t\t// This way, the application user cannot perform symlink attacks",
                "+\t\t// inside the work dir until we are done (at which point the",
                "+\t\t// follow-up code will only perform read/write operations after",
                "+\t\t// dropping root privileges).",
                "+\t\tboost::this_thread::disable_interruption di;",
                "+\t\tboost::this_thread::disable_syscall_interruption dsi;",
                "+\t\tsyscalls::chown(path.c_str(), uid, gid);",
                "+\t}",
                " };",
                "diff --git a/src/agent/Core/SpawningKit/SmartSpawner.h b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "index 0475cfbe3..7a7d37e3e 100644",
                "--- a/src/agent/Core/SpawningKit/SmartSpawner.h",
                "+++ b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "@@ -1253,4 +1253,6 @@ public:",
                " \t\t\tUPDATE_TRACE_POINT();",
                "-\t\t\tHandshakePrepare(session, extraArgs).execute();",
                "+\t\t\tHandshakePrepare prepare(session, extraArgs);",
                "+\t\t\tprepare.execute();",
                " \t\t\tcreateStdChannelFifos(session);",
                "+\t\t\tprepare.finalize();",
                " \t\t\tsession.journey.setStepPerformed(SPAWNING_KIT_PREPARATION, true);",
                "diff --git a/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp b/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "index 61eeb6fc0..58e71d022 100644",
                "--- a/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "+++ b/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2012-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2012-2018 Phusion Holding B.V.",
                "  *",
                "@@ -67,2 +67,3 @@",
                " #include <Utils/StrIntUtils.h>",
                "+#include <Core/SpawningKit/Handshake/WorkDir.h>",
                " #include <Core/SpawningKit/Exceptions.h>",
                "@@ -361,3 +362,3 @@ lookupUserGroup(const Context &context, uid_t *uid, struct passwd **userInfo,",
                "-void",
                "+static void",
                " chownNewWorkDirFiles(const Context &context, uid_t uid, gid_t gid) {",
                "@@ -379,2 +380,7 @@ chownNewWorkDirFiles(const Context &context, uid_t uid, gid_t gid) {",
                "+static void",
                "+finalizeWorkDir(const Context &context, uid_t uid, gid_t gid) {",
                "+\tSpawningKit::HandshakeWorkDir::finalize(context.workDir, uid, gid);",
                "+}",
                "+",
                " static void",
                "@@ -875,2 +881,4 @@ spawnEnvSetupperMain(int argc, char *argv[]) {",
                " \t\t\t} else {",
                "+\t\t\t\tuid = geteuid();",
                "+\t\t\t\tgid = getegid();",
                " \t\t\t\tshell = lookupCurrentUserShell();",
                "@@ -882,2 +890,3 @@ spawnEnvSetupperMain(int argc, char *argv[]) {",
                " \t\t\t\tchownNewWorkDirFiles(context, uid, gid);",
                "+\t\t\t\tfinalizeWorkDir(context, uid, gid);",
                "@@ -890,2 +899,4 @@ spawnEnvSetupperMain(int argc, char *argv[]) {",
                " \t\t\t\tdumpUserInfo(context.workDir);",
                "+\t\t\t} else {",
                "+\t\t\t\tfinalizeWorkDir(context, uid, gid);",
                " \t\t\t}",
                "diff --git a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "index ccc6ae356..112095ba7 100644",
                "--- a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "+++ b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "@@ -64,3 +64,3 @@ namespace tut {",
                " \t\t\tsession->journey.setStepInProgress(SPAWNING_KIT_PREPARATION);",
                "-\t\t\tHandshakePrepare(*session).execute();",
                "+\t\t\tHandshakePrepare(*session).execute().finalize();",
                "diff --git a/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp b/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp",
                "index bc76c2c8d..525dc293f 100644",
                "--- a/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp",
                "+++ b/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp",
                "@@ -42,3 +42,3 @@ namespace tut {",
                " \t\t\tinit(type);",
                "-\t\t\tHandshakePrepare(*session, extraArgs).execute();",
                "+\t\t\tHandshakePrepare(*session, extraArgs).execute().finalize();",
                " \t\t}",
                "@@ -176,3 +176,3 @@ namespace tut {",
                " \t\tpreparation.debugSupport = &debugSupport;",
                "-\t\tpreparation.execute();",
                "+\t\tpreparation.execute().finalize();",
                "@@ -197,3 +197,3 @@ namespace tut {",
                " \t\ttry {",
                "-\t\t\tpreparation.execute();",
                "+\t\t\tpreparation.execute().finalize();",
                " \t\t\tfail(\"SpawnException expected\");"
            ],
            "changed_files": [
                "build/support/cxx_dependency_map.rb",
                "src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "src/agent/Core/SpawningKit/Handshake/WorkDir.h",
                "src/agent/Core/SpawningKit/SmartSpawner.h",
                "src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: privilege",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3f270a9dd27984a827874bd6612d984204e31abc",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527683166,
            "hunks": 9,
            "message": "SpawningKit: sanity-check Unix domain socket addresses reported by the app If apps can report arbitrary Unix domain socket filenames then they can make Passenger connect to (and forward traffic to) arbitrary sockets. That probably isn't problematic but we don't want to allow it just to be safe. A more important issue is this: if any of the parent directories of the socket is writable by a normal user (Joe) that is not the app's user (Jane), then Joe can swap that directory with something else, with contents controlled by Joe. That way, Joe can cause Passenger to connect to (and forward Jane's traffic to) a process that does not actually belong to Jane. We mitigate these issues with extra permission checks, and by insisting that any sockets must be created inside the instance directory's app.s subdirectory.",
            "diff": [
                "diff --git a/build/support/cxx_dependency_map.rb b/build/support/cxx_dependency_map.rb",
                "index d33944e27..559dce86d 100644",
                "--- a/build/support/cxx_dependency_map.rb",
                "+++ b/build/support/cxx_dependency_map.rb",
                "@@ -6518,2 +6518,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/FileTools/FileManip.h\",",
                "+   \"src/cxx_supportlib/FileTools/PathManip.h\",",
                "    \"src/cxx_supportlib/LoggingKit/Assert.h\",",
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "index cd55d1d17..247cc77c7 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "@@ -51,2 +51,3 @@",
                " #include <FileTools/FileManip.h>",
                "+#include <FileTools/PathManip.h>",
                " #include <Utils.h>",
                "@@ -439,36 +440,40 @@ private:",
                " \t\t\t}",
                "-\t\t} else if (!doc[\"sockets\"].isArray()) {",
                "+\t\t\treturn;",
                "+\t\t}",
                "+\t\tif (!doc[\"sockets\"].isArray()) {",
                " \t\t\terrors.push_back(\"'sockets' must be an array\");",
                "-\t\t} else {",
                "-\t\t\tif (socketsRequired && doc[\"sockets\"].empty()) {",
                "-\t\t\t\terrors.push_back(\"'sockets' must be non-empty\");",
                "-\t\t\t\treturn;",
                "-\t\t\t}",
                "-",
                "-\t\t\tJson::Value::const_iterator it, end = doc[\"sockets\"].end();",
                "-\t\t\tfor (it = doc[\"sockets\"].begin(); it != end; it++) {",
                "-\t\t\t\tconst Json::Value &socketDoc = *it;",
                "+\t\t\treturn;",
                "+\t\t}",
                "+\t\tif (socketsRequired && doc[\"sockets\"].empty()) {",
                "+\t\t\terrors.push_back(\"'sockets' must be non-empty\");",
                "+\t\t\treturn;",
                "+\t\t}",
                "-\t\t\t\tif (!socketDoc.isObject()) {",
                "-\t\t\t\t\terrors.push_back(\"'sockets[\" + toString(it.index())",
                "-\t\t\t\t\t\t+ \"]' must be an object\");",
                "-\t\t\t\t\tcontinue;",
                "-\t\t\t\t}",
                "+\t\tJson::Value::const_iterator it, end = doc[\"sockets\"].end();",
                "+\t\tfor (it = doc[\"sockets\"].begin(); it != end; it++) {",
                "+\t\t\tconst Json::Value &socketDoc = *it;",
                "-\t\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "-\t\t\t\t\t\"address\", Json::stringValue, it.index(),",
                "-\t\t\t\t\ttrue, true, errors);",
                "-\t\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "-\t\t\t\t\t\"protocol\", Json::stringValue, it.index(),",
                "-\t\t\t\t\ttrue, true, errors);",
                "-\t\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "-\t\t\t\t\t\"description\", Json::stringValue, it.index(),",
                "-\t\t\t\t\tfalse, true, errors);",
                "-\t\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "-\t\t\t\t\t\"concurrency\", Json::intValue, it.index(),",
                "-\t\t\t\t\ttrue, false, errors);",
                "-\t\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "-\t\t\t\t\t\"accept_http_requests\", Json::booleanValue, it.index(),",
                "-\t\t\t\t\tfalse, false, errors);",
                "+\t\t\tif (!socketDoc.isObject()) {",
                "+\t\t\t\terrors.push_back(\"'sockets[\" + toString(it.index())",
                "+\t\t\t\t\t+ \"]' must be an object\");",
                "+\t\t\t\tcontinue;",
                " \t\t\t}",
                "+",
                "+\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "+\t\t\t\t\"address\", Json::stringValue, it.index(),",
                "+\t\t\t\ttrue, true, errors);",
                "+\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "+\t\t\t\t\"protocol\", Json::stringValue, it.index(),",
                "+\t\t\t\ttrue, true, errors);",
                "+\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "+\t\t\t\t\"description\", Json::stringValue, it.index(),",
                "+\t\t\t\tfalse, true, errors);",
                "+\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "+\t\t\t\t\"concurrency\", Json::intValue, it.index(),",
                "+\t\t\t\ttrue, false, errors);",
                "+\t\t\tvalidateResultPropertiesFileSocketField(socketDoc,",
                "+\t\t\t\t\"accept_http_requests\", Json::booleanValue, it.index(),",
                "+\t\t\t\tfalse, false, errors);",
                "+\t\t\tvalidateResultPropertiesFileSocketAddress(socketDoc,",
                "+\t\t\t\tit.index(), errors);",
                " \t\t}",
                "@@ -509,2 +514,85 @@ private:",
                "+\tvoid validateResultPropertiesFileSocketAddress(const Json::Value &doc,",
                "+\t\tunsigned int index, vector<string> &errors) const",
                "+\t{",
                "+\t\tif (!doc[\"address\"].isString()",
                "+\t\t || getSocketAddressType(doc[\"address\"].asString()) != SAT_UNIX)",
                "+\t\t{",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                "+\t\tstring filename = parseUnixSocketAddress(doc[\"address\"].asString());",
                "+",
                "+\t\tif (filename.empty()) {",
                "+\t\t\terrors.push_back(\"'sockets[\" + toString(index)",
                "+\t\t\t\t+ \"].address' contains an empty Unix domain socket filename\");",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                "+\t\tif (filename[0] != '/') {",
                "+\t\t\terrors.push_back(\"'sockets[\" + toString(index)",
                "+\t\t\t\t+ \"].address' when referring to a Unix domain socket, must be\"",
                "+\t\t\t\t\" an absolute path (given path: \" + filename + \")\");",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                "+\t\t// If any of the parent directories is writable by a normal user",
                "+\t\t// (Joe) that is not the app's user (Jane), then Joe can swap that",
                "+\t\t// directory with something else, with contents controlled by Joe.",
                "+\t\t// That way, Joe can cause Passenger to connect to (and forward",
                "+\t\t// Jane's traffic to) a process that does not actually belong to",
                "+\t\t// Jane.",
                "+\t\t//",
                "+\t\t// To mitigate this risk, we insist that the socket be placed in a",
                "+\t\t// directory that we know is safe (instanceDir + \"/apps.s\").",
                "+\t\t// We don't rely on isPathProbablySecureForRootUse() because that",
                "+\t\t// function cannot be 100% sure that it is correct.",
                "+",
                "+\t\t// instanceDir is only empty in tests",
                "+\t\tif (!session.context->instanceDir.empty()) {",
                "+\t\t\tStaticString actualDir = extractDirNameStatic(filename);",
                "+\t\t\tstring expectedDir = session.context->instanceDir + \"/apps.s\";",
                "+\t\t\tif (actualDir != expectedDir) {",
                "+\t\t\t\terrors.push_back(\"'sockets[\" + toString(index)",
                "+\t\t\t\t\t+ \"].address', when referring to a Unix domain socket,\"",
                "+\t\t\t\t\t\" must be an absolute path to a file in '\"",
                "+\t\t\t\t\t+ expectedDir + \"' (given path: \" + filename + \")\");",
                "+\t\t\t\treturn;",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tstruct stat s;",
                "+\t\tint ret;",
                "+\t\tdo {",
                "+\t\t\tret = lstat(filename.c_str(), &s);",
                "+\t\t} while (ret == -1 && errno == EAGAIN);",
                "+",
                "+\t\tif (ret == -1) {",
                "+\t\t\tint e = errno;",
                "+\t\t\tif (e == EEXIST) {",
                "+\t\t\t\terrors.push_back(\"'sockets[\" + toString(index)",
                "+\t\t\t\t\t+ \"].address' refers to a non-existant Unix domain\"",
                "+\t\t\t\t\t\" socket file (given path: \" + filename + \")\");",
                "+\t\t\t\treturn;",
                "+\t\t\t} else {",
                "+\t\t\t\tthrow FileSystemException(\"Cannot stat \" + filename,",
                "+\t\t\t\t\te, filename);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\t// We only check the UID, not the GID, because the socket",
                "+\t\t// may be automatically made with a different GID than",
                "+\t\t// the creating process's due to the setgid bit being set",
                "+\t\t// the directory that contains the socket. Furthermore,",
                "+\t\t// on macOS it seems that all directories behave as if",
                "+\t\t// they have the setgid bit set.",
                "+",
                "+\t\tif (s.st_uid != session.uid) {",
                "+\t\t\terrors.push_back(\"'sockets[\" + toString(index)",
                "+\t\t\t\t+ \"].address', when referring to a Unix domain socket file,\"",
                "+\t\t\t\t\" must be owned by user \" + getUserName(session.uid)",
                "+\t\t\t\t+ \" (actual owner: \" + getUserName(s.st_uid) + \")\");",
                "+\t\t}",
                "+\t}",
                "+",
                " \tbool resultHasSocketWithPreloaderProtocol() const {",
                "diff --git a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "index ce5dfebf1..652acf737 100644",
                "--- a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "+++ b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "@@ -31,3 +31,2 @@ namespace tut {",
                " \t\t\tcontext.integrationMode = \"standalone\";",
                "-\t\t\tcontext.finalize();",
                "@@ -61,2 +60,5 @@ namespace tut {",
                " \t\t\tensure(\"Config is valid\", config.validate(errors));",
                "+",
                "+\t\t\tcontext.finalize();",
                "+",
                " \t\t\tsession = boost::make_shared<HandshakeSession>(context, config, type);",
                "@@ -553,2 +555,52 @@ namespace tut {",
                "+\tTEST_METHOD(39) {",
                "+\t\tset_test_name(\"It raises an error if properties.json specifies a Unix domain socket\"",
                "+\t\t\t\" that is not located in the apps.s subdir of the instance directory\");",
                "+",
                "+\t\tTempDir tmpDir(\"tmp.instance\");",
                "+",
                "+\t\tcontext.instanceDir = absolutizePath(\"tmp.instance\");",
                "+\t\tinit(SPAWN_DIRECTLY);",
                "+\t\tJson::Value doc = createGoodPropertiesJson();",
                "+\t\tdoc[\"sockets\"][0][\"address\"] = \"unix:/foo\";",
                "+\t\tcreateFile(session->responseDir + \"/properties.json\", doc.toStyledString());",
                "+\t\tTempThread thr(boost::bind(&Core_SpawningKit_HandshakePerformTest::signalFinish, this));",
                "+",
                "+\t\ttry {",
                "+\t\t\texecute();",
                "+\t\t\tfail(\"SpawnException expected\");",
                "+\t\t} catch (const SpawnException &e) {",
                "+\t\t\tensure(containsSubstring(e.getSummary(),",
                "+\t\t\t\t\"must be an absolute path to a file in\"));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tTEST_METHOD(40) {",
                "+\t\tset_test_name(\"It raises an error if properties.json specifies a Unix domain socket\"",
                "+\t\t\t\" that is not owned by the app\");",
                "+",
                "+\t\tif (geteuid() != 0) {",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                "+\t\tTempDir tmpDir(\"tmp.instance\");",
                "+\t\tmkdir(\"tmp.instance/apps.s\", 0700);",
                "+\t\tstring socketPath = absolutizePath(\"tmp.instance/apps.s/foo.sock\");",
                "+",
                "+\t\tinit(SPAWN_DIRECTLY);",
                "+\t\tJson::Value doc = createGoodPropertiesJson();",
                "+\t\tdoc[\"sockets\"][0][\"address\"] = \"unix:\" + socketPath;",
                "+\t\tcreateFile(session->responseDir + \"/properties.json\", doc.toStyledString());",
                "+\t\tsafelyClose(createUnixServer(socketPath));",
                "+\t\tchown(socketPath.c_str(), 1, 1);",
                "+\t\tTempThread thr(boost::bind(&Core_SpawningKit_HandshakePerformTest::signalFinish, this));",
                "+",
                "+\t\ttry {",
                "+\t\t\texecute();",
                "+\t\t\tfail(\"SpawnException expected\");",
                "+\t\t} catch (const SpawnException &e) {",
                "+\t\t\tensure(\"(1)\", containsSubstring(e.getSummary(), \"must be owned by user\"));",
                "+\t\t}",
                "+\t}",
                "+"
            ],
            "changed_files": [
                "build/support/cxx_dependency_map.rb",
                "src/agent/Core/SpawningKit/Handshake/Perform.h",
                "test/cxx/Core/SpawningKit/HandshakePerformTest.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1e7dfb7d1ffe1f95ee47e16760149abbd3fb7ecf",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527500479,
            "hunks": 4,
            "message": "SpawningKit HandshakePrepare: tighten permissions and increase error checking These changes do not solve any concrete problems, but they may help in detecting bugs or security attacks in the future.",
            "diff": [
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Prepare.h b/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "index 71e0f90c1..c40da0b92 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Prepare.h",
                "@@ -268,2 +268,6 @@ private:",
                "+\t\t// The workDir is a new random dir. the files that we create here",
                "+\t\t// should not exist, so if any exist then have createFile()",
                "+\t\t// throw an error because it could be a bug or an attack.",
                "+",
                " \t\tcreateFile(session.workDir->getPath() + \"/args.json\",",
                "@@ -271,3 +275,3 @@ private:",
                " \t\t\tsession.uid, session.gid,",
                "-\t\t\ttrue, __FILE__, __LINE__);",
                "+\t\t\tfalse, __FILE__, __LINE__);",
                "@@ -291,4 +295,4 @@ private:",
                " \t\t\t\t\tjsonValueToString(*it),",
                "-\t\t\t\t\t0644, session.uid, session.gid,",
                "-\t\t\t\t\ttrue, __FILE__, __LINE__);",
                "+\t\t\t\t\t0600, session.uid, session.gid,",
                "+\t\t\t\t\tfalse, __FILE__, __LINE__);",
                " \t\t\t\tbreak;",
                "@@ -297,4 +301,4 @@ private:",
                " \t\t\t\t\tjsonValueToString(*it),",
                "-\t\t\t\t\t0644, session.uid, session.gid,",
                "-\t\t\t\t\ttrue, __FILE__, __LINE__);",
                "+\t\t\t\t\t0600, session.uid, session.gid,",
                "+\t\t\t\t\tfalse, __FILE__, __LINE__);",
                " \t\t\t\tbreak;"
            ],
            "changed_files": [
                "src/agent/Core/SpawningKit/Handshake/Prepare.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d3bb368bac3c061ff221017811d073b5477a4e29",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527513062,
            "hunks": 64,
            "message": "SmartSpawner and DirectSpawner: use AsyncSignalSafeUtils to print error messages after forking fprintf() is not async-signal safe.",
            "diff": [
                "diff --git a/build/support/cxx_dependency_map.rb b/build/support/cxx_dependency_map.rb",
                "index 87d683385..d57d5e00b 100644",
                "--- a/build/support/cxx_dependency_map.rb",
                "+++ b/build/support/cxx_dependency_map.rb",
                "@@ -252,2 +252,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -349,2 +350,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -430,2 +432,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -512,2 +515,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -593,2 +597,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -684,2 +689,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -781,2 +787,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -878,2 +885,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -975,2 +983,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1072,2 +1081,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1170,2 +1180,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1267,2 +1278,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1364,2 +1376,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1461,2 +1474,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1558,2 +1572,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1655,2 +1670,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1774,2 +1790,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -1903,2 +1920,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2002,2 +2020,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2101,2 +2120,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2200,2 +2220,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2299,2 +2320,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2398,2 +2420,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2497,2 +2520,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2596,2 +2620,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2695,2 +2720,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2793,2 +2819,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2887,2 +2914,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -2979,2 +3007,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -3066,2 +3095,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -3559,2 +3589,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -3759,2 +3790,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -3898,2 +3930,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -4031,2 +4064,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -4168,2 +4202,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -4385,2 +4420,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -4523,2 +4559,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -4673,2 +4710,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -4812,2 +4850,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -4950,2 +4989,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -5088,2 +5128,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -5226,2 +5267,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -5357,2 +5399,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -5494,2 +5537,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -5632,2 +5676,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -6053,2 +6098,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/FastStringStream.h\",",
                "@@ -6275,2 +6321,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -6651,2 +6698,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -10975,2 +11023,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -11079,2 +11128,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -11181,2 +11231,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -11320,2 +11371,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -11458,2 +11510,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "@@ -11644,2 +11697,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/CachedFileStat.hpp\",",
                "@@ -11920,2 +11974,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "+   \"src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h\",",
                "    \"src/cxx_supportlib/Utils/BufferedIO.h\",",
                "diff --git a/src/agent/Core/SpawningKit/DirectSpawner.h b/src/agent/Core/SpawningKit/DirectSpawner.h",
                "index 4c3da6902..64f995061 100644",
                "--- a/src/agent/Core/SpawningKit/DirectSpawner.h",
                "+++ b/src/agent/Core/SpawningKit/DirectSpawner.h",
                "@@ -39,2 +39,3 @@",
                " #include <Utils/IOUtils.h>",
                "+#include <Utils/AsyncSignalSafeUtils.h>",
                "@@ -152,4 +153,7 @@ private:",
                " \t\tif (pid == 0) {",
                "-\t\t\tpurgeStdio(stdout);",
                "-\t\t\tpurgeStdio(stderr);",
                "+\t\t\tint e;",
                "+\t\t\tchar buf[1024];",
                "+\t\t\tconst char *end = buf + sizeof(buf);",
                "+\t\t\tnamespace ASSU = AsyncSignalSafeUtils;",
                "+",
                " \t\t\tresetSignalHandlersAndMask();",
                "@@ -162,2 +166,3 @@ private:",
                " \t\t\tcloseAllFileDescriptors(2, true);",
                "+",
                " \t\t\texeclp(agentFilename.c_str(),",
                "@@ -169,6 +174,12 @@ private:",
                "-\t\t\tint e = errno;",
                "-\t\t\tfprintf(stderr, \"Cannot execute \\\"%s\\\": %s (errno=%d)\\n\",",
                "-\t\t\t\tagentFilename.c_str(), strerror(e), e);",
                "-\t\t\tfflush(stderr);",
                "+\t\t\tchar *pos = buf;",
                "+\t\t\te = errno;",
                "+\t\t\tpos = ASSU::appendData(pos, end, \"Cannot execute \\\"\");",
                "+\t\t\tpos = ASSU::appendData(pos, end, agentFilename.data(), agentFilename.size());",
                "+\t\t\tpos = ASSU::appendData(pos, end, \"\\\": \");",
                "+\t\t\tpos = ASSU::appendData(pos, end, ASSU::limitedStrerror(e));",
                "+\t\t\tpos = ASSU::appendData(pos, end, \" (errno=\");",
                "+\t\t\tpos = ASSU::appendInteger<int, 10>(pos, end, e);",
                "+\t\t\tpos = ASSU::appendData(pos, end, \")\\n\");",
                "+\t\t\tASSU::printError(buf, pos - buf);",
                " \t\t\t_exit(1);",
                "diff --git a/src/agent/Core/SpawningKit/SmartSpawner.h b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "index 95e64bd81..0475cfbe3 100644",
                "--- a/src/agent/Core/SpawningKit/SmartSpawner.h",
                "+++ b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "@@ -41,3 +41,2 @@",
                " #include <signal.h>",
                "-#include <cstdio>",
                " #include <cstring>",
                "@@ -58,2 +57,3 @@",
                " #include <Utils/ProcessMetricsCollector.h>",
                "+#include <Utils/AsyncSignalSafeUtils.h>",
                " #include <LveLoggingDecorator.h>",
                "@@ -359,4 +359,7 @@ private:",
                " \t\tif (pid == 0) {",
                "-\t\t\tpurgeStdio(stdout);",
                "-\t\t\tpurgeStdio(stderr);",
                "+\t\t\tint e;",
                "+\t\t\tchar buf[1024];",
                "+\t\t\tconst char *end = buf + sizeof(buf);",
                "+\t\t\tnamespace ASSU = AsyncSignalSafeUtils;",
                "+",
                " \t\t\tresetSignalHandlersAndMask();",
                "@@ -369,2 +372,3 @@ private:",
                " \t\t\tcloseAllFileDescriptors(2, true);",
                "+",
                " \t\t\texeclp(agentFilename.c_str(),",
                "@@ -376,6 +380,12 @@ private:",
                "-\t\t\tint e = errno;",
                "-\t\t\tfprintf(stderr, \"Cannot execute \\\"%s\\\": %s (errno=%d)\\n\",",
                "-\t\t\t\tagentFilename.c_str(), strerror(e), e);",
                "-\t\t\tfflush(stderr);",
                "+\t\t\tchar *pos = buf;",
                "+\t\t\te = errno;",
                "+\t\t\tpos = ASSU::appendData(pos, end, \"Cannot execute \\\"\");",
                "+\t\t\tpos = ASSU::appendData(pos, end, agentFilename.data(), agentFilename.size());",
                "+\t\t\tpos = ASSU::appendData(pos, end, \"\\\": \");",
                "+\t\t\tpos = ASSU::appendData(pos, end, ASSU::limitedStrerror(e));",
                "+\t\t\tpos = ASSU::appendData(pos, end, \" (errno=\");",
                "+\t\t\tpos = ASSU::appendInteger<int, 10>(pos, end, e);",
                "+\t\t\tpos = ASSU::appendData(pos, end, \")\\n\");",
                "+\t\t\tASSU::printError(buf, pos - buf);",
                " \t\t\t_exit(1);"
            ],
            "changed_files": [
                "build/support/cxx_dependency_map.rb",
                "src/agent/Core/SpawningKit/DirectSpawner.h",
                "src/agent/Core/SpawningKit/SmartSpawner.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3e882a16d8b42f71d2be692238b5bf632acb3166",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527606086,
            "hunks": 171,
            "message": "Split up readAll(path) into safeReadFile() and unsafeReadFile(), and add size limiting to readAll(fd) This is in preparation for a change to fix symlink attacks.",
            "diff": [
                "diff --git a/build/support/cxx_dependency_map.rb b/build/support/cxx_dependency_map.rb",
                "index 8c6c576e9..1d5eb3851 100644",
                "--- a/build/support/cxx_dependency_map.rb",
                "+++ b/build/support/cxx_dependency_map.rb",
                "@@ -6247,2 +6247,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/FileDescriptor.h\",",
                "+   \"src/cxx_supportlib/FileTools/FileManip.h\",",
                "    \"src/cxx_supportlib/LoggingKit/Assert.h\",",
                "@@ -7183,9 +7184,4 @@ CXX_DEPENDENCY_MAP =",
                "   [\"src/cxx_supportlib/Constants.h\",",
                "-   \"src/cxx_supportlib/DataStructures/HashedStaticString.h\",",
                "    \"src/cxx_supportlib/Exceptions.h\",",
                "-   \"src/cxx_supportlib/FileDescriptor.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/Assert.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/Forward.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/Logging.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/LoggingKit.h\",",
                "+   \"src/cxx_supportlib/FileTools/FileManip.h\",",
                "    \"src/cxx_supportlib/StaticString.h\",",
                "@@ -7193,5 +7189,2 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "-   \"src/cxx_supportlib/Utils/FastStringStream.h\",",
                "-   \"src/cxx_supportlib/Utils/Hasher.h\",",
                "-   \"src/cxx_supportlib/Utils/IOUtils.h\",",
                "    \"src/cxx_supportlib/Utils/SpeedMeter.h\",",
                "@@ -7201,5 +7194,2 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/SystemTime.h\",",
                "-   \"src/cxx_supportlib/oxt/backtrace.hpp\",",
                "-   \"src/cxx_supportlib/oxt/detail/backtrace_disabled.hpp\",",
                "-   \"src/cxx_supportlib/oxt/detail/backtrace_enabled.hpp\",",
                "    \"src/cxx_supportlib/oxt/detail/tracable_exception_disabled.hpp\",",
                "@@ -8354,2 +8344,3 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/IOUtils.h\",",
                "+   \"src/cxx_supportlib/Utils/ScopeGuard.h\",",
                "    \"src/cxx_supportlib/Utils/StringMap.h\",",
                "@@ -9900,9 +9891,4 @@ CXX_DEPENDENCY_MAP =",
                "   [\"src/cxx_supportlib/Constants.h\",",
                "-   \"src/cxx_supportlib/DataStructures/HashedStaticString.h\",",
                "    \"src/cxx_supportlib/Exceptions.h\",",
                "-   \"src/cxx_supportlib/FileDescriptor.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/Assert.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/Forward.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/Logging.h\",",
                "-   \"src/cxx_supportlib/LoggingKit/LoggingKit.h\",",
                "+   \"src/cxx_supportlib/FileTools/FileManip.h\",",
                "    \"src/cxx_supportlib/StaticString.h\",",
                "@@ -9910,5 +9896,2 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/AnsiColorConstants.h\",",
                "-   \"src/cxx_supportlib/Utils/FastStringStream.h\",",
                "-   \"src/cxx_supportlib/Utils/Hasher.h\",",
                "-   \"src/cxx_supportlib/Utils/IOUtils.h\",",
                "    \"src/cxx_supportlib/Utils/SpeedMeter.h\",",
                "@@ -9917,5 +9900,2 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/SystemTime.h\",",
                "-   \"src/cxx_supportlib/oxt/backtrace.hpp\",",
                "-   \"src/cxx_supportlib/oxt/detail/backtrace_disabled.hpp\",",
                "-   \"src/cxx_supportlib/oxt/detail/backtrace_enabled.hpp\",",
                "    \"src/cxx_supportlib/oxt/detail/tracable_exception_disabled.hpp\",",
                "@@ -10095,3 +10075,2 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Exceptions.h\",",
                "-   \"src/cxx_supportlib/FileDescriptor.h\",",
                "    \"src/cxx_supportlib/FileTools/PathManip.h\",",
                "@@ -10105,3 +10084,2 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/Utils/Hasher.h\",",
                "-   \"src/cxx_supportlib/Utils/IOUtils.h\",",
                "    \"src/cxx_supportlib/Utils/StrIntUtils.h\",",
                "@@ -10113,3 +10091,2 @@ CXX_DEPENDENCY_MAP =",
                "    \"src/cxx_supportlib/oxt/macros.hpp\",",
                "-   \"src/cxx_supportlib/oxt/system_calls.hpp\",",
                "    \"src/cxx_supportlib/oxt/tracable_exception.hpp\"],",
                "diff --git a/src/agent/Core/AdminPanelConnector.h b/src/agent/Core/AdminPanelConnector.h",
                "index 595dc019b..90b914e9e 100644",
                "--- a/src/agent/Core/AdminPanelConnector.h",
                "+++ b/src/agent/Core/AdminPanelConnector.h",
                "@@ -37,2 +37,3 @@",
                "+#include <limits>",
                " #include <string>",
                "@@ -47,2 +48,3 @@",
                " #include <ProcessManagement/Ruby.h>",
                "+#include <FileTools/FileManip.h>",
                " #include <Utils.h>",
                "@@ -488,3 +490,4 @@ private:",
                " \t\t\t\t\t\tpipe.second.close();",
                "-\t\t\t\t\t\tstring out = readAll(pipe.first);",
                "+\t\t\t\t\t\tstring out = readAll(pipe.first,",
                "+\t\t\t\t\t\t\tstd::numeric_limits<size_t>::max()).first;",
                " \t\t\t\t\t\tLoggingKit::context->saveMonitoredFileLog(key, f.c_str(), f.size(),",
                "@@ -574,3 +577,3 @@ private:",
                "-\t\tif (!reader.parse(readAll(instanceDir + \"/properties.json\"), doc)) {",
                "+\t\tif (!reader.parse(unsafeReadFile(instanceDir + \"/properties.json\"), doc)) {",
                " \t\t\tthrow RuntimeException(\"Cannot parse \" + instanceDir + \"/properties.json: \"",
                "diff --git a/src/agent/Core/CoreMain.cpp b/src/agent/Core/CoreMain.cpp",
                "index 59e1c6b23..e3f1302c1 100644",
                "--- a/src/agent/Core/CoreMain.cpp",
                "+++ b/src/agent/Core/CoreMain.cpp",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2010-2018 Phusion Holding B.V.",
                "  *",
                "@@ -91,3 +91,2 @@",
                " #include <Utils/Timer.h>",
                "-#include <Utils/IOUtils.h>",
                " #include <Utils/MessageIO.h>",
                "@@ -241,3 +240,3 @@ initializePrivilegedWorkingObjects() {",
                " \t} else if (password.isObject()) {",
                "-\t\two->controllerSecureHeadersPassword = strip(readAll(password[\"path\"].asString()));",
                "+\t\two->controllerSecureHeadersPassword = strip(unsafeReadFile(password[\"path\"].asString()));",
                " \t}",
                "diff --git a/src/agent/Core/SpawningKit/ErrorRenderer.h b/src/agent/Core/SpawningKit/ErrorRenderer.h",
                "index b80a7e217..8529e7c7e 100644",
                "--- a/src/agent/Core/SpawningKit/ErrorRenderer.h",
                "+++ b/src/agent/Core/SpawningKit/ErrorRenderer.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2014-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2014-2018 Phusion Holding B.V.",
                "  *",
                "@@ -36,4 +36,4 @@",
                " #include <StaticString.h>",
                "+#include <FileTools/FileManip.h>",
                " #include <Utils/Template.h>",
                "-#include <Utils/IOUtils.h>",
                " #include <Core/SpawningKit/Context.h>",
                "@@ -63,4 +63,4 @@ public:",
                " \t\tstring jsFile = templatesDir + \"/with_details/dist/bundle.js\";",
                "-\t\tstring cssContent = readAll(cssFile);",
                "-\t\tstring jsContent = readAll(jsFile);",
                "+\t\tstring cssContent = unsafeReadFile(cssFile);",
                "+\t\tstring jsContent = unsafeReadFile(jsFile);",
                "@@ -87,3 +87,3 @@ public:",
                "-\t\treturn Template::apply(readAll(htmlFile), params);",
                "+\t\treturn Template::apply(unsafeReadFile(htmlFile), params);",
                " \t}",
                "@@ -95,4 +95,4 @@ public:",
                " \t\tstring jsFile = templatesDir + \"/without_details/dist/bundle.js\";",
                "-\t\tstring cssContent = readAll(cssFile);",
                "-\t\tstring jsContent = readAll(jsFile);",
                "+\t\tstring cssContent = unsafeReadFile(cssFile);",
                "+\t\tstring jsContent = unsafeReadFile(jsFile);",
                "@@ -108,3 +108,3 @@ public:",
                "-\t\treturn Template::apply(readAll(htmlFile), params);",
                "+\t\treturn Template::apply(unsafeReadFile(htmlFile), params);",
                " \t}",
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "index a86c73c63..1260fab09 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "@@ -50,2 +50,3 @@",
                " #include <FileDescriptor.h>",
                "+#include <FileTools/FileManip.h>",
                " #include <Utils.h>",
                "@@ -379,3 +380,3 @@ private:",
                " \t\t// We already checked whether properties.json exists before invoking",
                "-\t\t// this method, so if readAll() fails then we can't be sure that",
                "+\t\t// this method, so if unsafeReadFile() fails then we can't be sure that",
                " \t\t// it's an application problem. This is why we want the SystemException",
                "@@ -385,3 +386,3 @@ private:",
                "-\t\tif (!reader.parse(readAll(path), doc)) {",
                "+\t\tif (!reader.parse(unsafeReadFile(path), doc)) {",
                " \t\t\terrors.push_back(\"Error parsing \" + path + \": \" +",
                "@@ -924,3 +925,3 @@ private:",
                " \t\tif (fileExists(session.responseDir + \"/error/category\")) {",
                "-\t\t\tstring value = strip(readAll(session.responseDir + \"/error/category\"));",
                "+\t\t\tstring value = strip(unsafeReadFile(session.responseDir + \"/error/category\"));",
                " \t\t\tErrorCategory category = stringToErrorCategory(value);",
                "@@ -1060,3 +1061,3 @@ private:",
                " \t\tstring summary;",
                "-\t\tstring value = strip(readAll(stepDir + \"/state\"));",
                "+\t\tstring value = strip(unsafeReadFile(stepDir + \"/state\"));",
                " \t\tJourneyStepState state = stringToJourneyStepState(value);",
                "@@ -1276,3 +1277,3 @@ private:",
                " \t\tif (fileExists(stepDir + \"/begin_time_monotonic\")) {",
                "-\t\t\tvalue = readAll(stepDir + \"/begin_time_monotonic\");",
                "+\t\t\tvalue = unsafeReadFile(stepDir + \"/begin_time_monotonic\");",
                " \t\t\tMonotonicTimeUsec beginTimeMonotonic = atof(value.c_str()) * 1000000;",
                "@@ -1282,3 +1283,3 @@ private:",
                " \t\t} else if (fileExists(stepDir + \"/begin_time\")) {",
                "-\t\t\tvalue = readAll(stepDir + \"/begin_time\");",
                "+\t\t\tvalue = unsafeReadFile(stepDir + \"/begin_time\");",
                " \t\t\tunsigned long long beginTime = atof(value.c_str()) * 1000000;",
                "@@ -1296,3 +1297,3 @@ private:",
                " \t\tif (fileExists(stepDir + \"/end_time_monotonic\")) {",
                "-\t\t\tvalue = readAll(stepDir + \"/end_time_monotonic\");",
                "+\t\t\tvalue = unsafeReadFile(stepDir + \"/end_time_monotonic\");",
                " \t\t\tMonotonicTimeUsec endTimeMonotonic = atof(value.c_str()) * 1000000;",
                "@@ -1302,3 +1303,3 @@ private:",
                " \t\t} else if (fileExists(stepDir + \"/end_time\")) {",
                "-\t\t\tvalue = readAll(stepDir + \"/end_time\");",
                "+\t\t\tvalue = unsafeReadFile(stepDir + \"/end_time\");",
                " \t\t\tunsigned long long endTime = atof(value.c_str()) * 1000000;",
                "@@ -1335,3 +1336,3 @@ private:",
                " \t\tif (fileExists(responseDir + \"/error/summary\")) {",
                "-\t\t\te.setSummary(strip(readAll(responseDir + \"/error/summary\")));",
                "+\t\t\te.setSummary(strip(unsafeReadFile(responseDir + \"/error/summary\")));",
                " \t\t}",
                "@@ -1341,3 +1342,3 @@ private:",
                " \t\t{",
                "-\t\t\te.setAdvancedProblemDetails(strip(readAll(responseDir",
                "+\t\t\te.setAdvancedProblemDetails(strip(unsafeReadFile(responseDir",
                " \t\t\t\t+ \"/error/advanced_problem_details\")));",
                "@@ -1346,5 +1347,5 @@ private:",
                " \t\tif (fileExists(responseDir + \"/error/problem_description.html\")) {",
                "-\t\t\te.setProblemDescriptionHTML(readAll(responseDir + \"/error/problem_description.html\"));",
                "+\t\t\te.setProblemDescriptionHTML(unsafeReadFile(responseDir + \"/error/problem_description.html\"));",
                " \t\t} else if (fileExists(responseDir + \"/error/problem_description.txt\")) {",
                "-\t\t\te.setProblemDescriptionHTML(escapeHTML(strip(readAll(",
                "+\t\t\te.setProblemDescriptionHTML(escapeHTML(strip(unsafeReadFile(",
                " \t\t\t\tresponseDir + \"/error/problem_description.txt\"))));",
                "@@ -1353,5 +1354,5 @@ private:",
                " \t\tif (fileExists(responseDir + \"/error/solution_description.html\")) {",
                "-\t\t\te.setSolutionDescriptionHTML(readAll(responseDir + \"/error/solution_description.html\"));",
                "+\t\t\te.setSolutionDescriptionHTML(unsafeReadFile(responseDir + \"/error/solution_description.html\"));",
                " \t\t} else if (fileExists(responseDir + \"/error/solution_description.txt\")) {",
                "-\t\t\te.setSolutionDescriptionHTML(escapeHTML(strip(readAll(",
                "+\t\t\te.setSolutionDescriptionHTML(escapeHTML(strip(unsafeReadFile(",
                " \t\t\t\tresponseDir + \"/error/solution_description.txt\"))));",
                "@@ -1389,3 +1390,3 @@ private:",
                " \t\t\t\te.setAnnotation(ent->d_name, strip(",
                "-\t\t\t\t\tPassenger::readAll(path + \"/\" + ent->d_name)));",
                "+\t\t\t\t\tunsafeReadFile(path + \"/\" + ent->d_name)));",
                " \t\t\t}",
                "@@ -1634,9 +1635,9 @@ public:",
                " \t\tif (fileExists(envDumpDir + \"/envvars\")) {",
                "-\t\t\tenvvars = readAll(envDumpDir + \"/envvars\");",
                "+\t\t\tenvvars = unsafeReadFile(envDumpDir + \"/envvars\");",
                " \t\t}",
                " \t\tif (fileExists(envDumpDir + \"/user_info\")) {",
                "-\t\t\tuserInfo = readAll(envDumpDir + \"/user_info\");",
                "+\t\t\tuserInfo = unsafeReadFile(envDumpDir + \"/user_info\");",
                " \t\t}",
                " \t\tif (fileExists(envDumpDir + \"/ulimits\")) {",
                "-\t\t\tulimits = readAll(envDumpDir + \"/ulimits\");",
                "+\t\t\tulimits = unsafeReadFile(envDumpDir + \"/ulimits\");",
                " \t\t}",
                "diff --git a/src/agent/Core/SpawningKit/SmartSpawner.h b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "index 7a7d37e3e..6f03cef8e 100644",
                "--- a/src/agent/Core/SpawningKit/SmartSpawner.h",
                "+++ b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "@@ -51,4 +51,4 @@",
                " #include <ProcessManagement/Utils.h>",
                "+#include <FileTools/FileManip.h>",
                " #include <Utils/SystemTime.h>",
                "-#include <Utils/IOUtils.h>",
                " #include <Utils/BufferedIO.h>",
                "@@ -1160,3 +1160,3 @@ private:",
                " \t\t\t\tresult.insert(ent->d_name, strip(",
                "-\t\t\t\t\tPassenger::readAll(path + \"/\" + ent->d_name)),",
                "+\t\t\t\t\tunsafeReadFile(path + \"/\" + ent->d_name)),",
                " \t\t\t\t\ttrue);",
                "diff --git a/src/agent/Shared/ApiAccountUtils.h b/src/agent/Shared/ApiAccountUtils.h",
                "index 46a7a1c3f..6e4e52871 100644",
                "--- a/src/agent/Shared/ApiAccountUtils.h",
                "+++ b/src/agent/Shared/ApiAccountUtils.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2015-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2015-2018 Phusion Holding B.V.",
                "  *",
                "@@ -264,3 +264,3 @@ struct ApiAccount {",
                " \t\t} else {",
                "-\t\t\tpassword = strip(readAll(doc[\"password_file\"].asString()));",
                "+\t\t\tpassword = strip(unsafeReadFile(doc[\"password_file\"].asString()));",
                " \t\t}",
                "diff --git a/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp b/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "index 58e71d022..b4c1a68bb 100644",
                "--- a/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "+++ b/src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "@@ -65,3 +65,2 @@",
                " #include <Utils.h>",
                "-#include <Utils/IOUtils.h>",
                " #include <Utils/StrIntUtils.h>",
                "@@ -103,3 +102,3 @@ readArgsJson(const string &workDir) {",
                " \tJson::Value result;",
                "-\tstring contents = readAll(workDir + \"/args.json\");",
                "+\tstring contents = unsafeReadFile(workDir + \"/args.json\");",
                " \tif (reader.parse(contents, result)) {",
                "diff --git a/src/cxx_supportlib/FileTools/FileManip.cpp b/src/cxx_supportlib/FileTools/FileManip.cpp",
                "index 36d29613e..5e32aa7ea 100644",
                "--- a/src/cxx_supportlib/FileTools/FileManip.cpp",
                "+++ b/src/cxx_supportlib/FileTools/FileManip.cpp",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2010-2018 Phusion Holding B.V.",
                "  *",
                "@@ -36,2 +36,3 @@",
                " #include <cerrno>",
                "+#include <limits>",
                "@@ -46,2 +47,3 @@",
                " #include <Utils/IOUtils.h>",
                "+#include <Utils/ScopeGuard.h>",
                "@@ -183,2 +185,32 @@ createFile(const string &filename, const StaticString &contents, mode_t permissi",
                "+string",
                "+unsafeReadFile(const string &path) {",
                "+\tint fd = open(path.c_str(), O_RDONLY);",
                "+\tif (fd != -1) {",
                "+\t\tFdGuard guard(fd, __FILE__, __LINE__);",
                "+\t\treturn readAll(fd, std::numeric_limits<size_t>::max()).first;",
                "+\t} else {",
                "+\t\tint e = errno;",
                "+\t\tthrow FileSystemException(\"Cannot open '\" + path + \"' for reading\",",
                "+\t\t\te, path);",
                "+\t}",
                "+}",
                "+",
                "+pair<string, bool>",
                "+safeReadFile(int dirfd, const string &basename, size_t maxSize) {",
                "+\tif (basename.find('/') != string::npos) {",
                "+\t\tthrow ArgumentException(\"basename may not contain slashes\");",
                "+\t}",
                "+",
                "+\tint fd = openat(dirfd, basename.c_str(), O_RDONLY | O_NOFOLLOW | O_NONBLOCK);",
                "+\tif (fd != -1) {",
                "+\t\tFdGuard guard(fd, __FILE__, __LINE__);",
                "+\t\treturn readAll(fd, maxSize);",
                "+\t} else {",
                "+\t\tint e = errno;",
                "+\t\tthrow FileSystemException(\"Cannot open '\" + basename + \"' for reading\",",
                "+\t\t\te, basename);",
                "+\t}",
                "+}",
                "+",
                " void",
                "diff --git a/src/cxx_supportlib/FileTools/FileManip.h b/src/cxx_supportlib/FileTools/FileManip.h",
                "index f294be114..99d5fd52e 100644",
                "--- a/src/cxx_supportlib/FileTools/FileManip.h",
                "+++ b/src/cxx_supportlib/FileTools/FileManip.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2010-2018 Phusion Holding B.V.",
                "  *",
                "@@ -33,2 +33,3 @@",
                " #include <string>",
                "+#include <utility>",
                " #include <StaticString.h>",
                "@@ -133,2 +134,58 @@ void createFile(const string &filename, const StaticString &contents,",
                "+/**",
                "+ * Read all data from the given file until EOF.",
                "+ * This function is \"unsafe\" in the sense that it lacks the security",
                "+ * checks implemented by `safeReadFile()`. Read the docs for that function",
                "+ * for more information.",
                "+ *",
                "+ * @throws SystemException",
                "+ */",
                "+string unsafeReadFile(const string &path);",
                "+",
                "+/**",
                "+ * Read all data from the given file until EOF.",
                "+ *",
                "+ *  - `dirfd` is a file descriptor of the directory that contains the file",
                "+ *    you want read from.",
                "+ *  - `basename` is the basename of the file you want to read from. `basename`",
                "+ *    may thus not contain slashes.",
                "+ *  - `maxSize` is the maximum number of bytes you want to read.",
                "+ *",
                "+ * Returns a pair `(contents, eof)`.",
                "+ *",
                "+ *  - `contents` is the read file contents, which is at most `maxSize` bytes.",
                "+ *  - `eof` indicates whether the entire file has been read. If false, then it",
                "+ *    means the amount of data is larger than `maxSize`.",
                "+ *",
                "+ * This function is \"safe\" in following sense:",
                "+ *",
                "+ *  - It mitigates symbolic link attacks. `open(path)` may not be safe for",
                "+ *    processes running as root, because if a user controls any parts of the",
                "+ *    path then the user can swap one of the parent directories, or the file",
                "+ *    itself, with a symlink. This causes us to read an arbitrary file.",
                "+ *",
                "+ *    This function mitigates this attack by requiring a `dirfd` and by opening",
                "+ *    the file with O_NOFOLLOW. The caller must ensure that `dirfd` is created",
                "+ *    at a time when it knows that no user controls any parts of the path to",
                "+ *    that directory.",
                "+ *",
                "+ *    However, this mitigation does mean that safeReadFile() *cannot be used to",
                "+ *    read from a symlink*!",
                "+ *",
                "+ *  - It mitigates DoS attacks through non-regular files which may block the",
                "+ *    reader, like FIFOs or block devices. For example if the path refers to a",
                "+ *    FIFO which a user created, and the user never opens the FIFO on the other",
                "+ *    side, then the open can block indefinitely.",
                "+ *",
                "+ *    This function mitigates this attack by opening the file with O_NONBLOCK.",
                "+ *",
                "+ *  - It mitigates DoS attacks by creating a very large file. Since we slurp",
                "+ *    the entire file into memory, it is a good idea if we impose a limit",
                "+ *    on how much data we read.",
                "+ *",
                "+ * @throws ArgumentException",
                "+ * @throws SystemException",
                "+ */",
                "+pair<string, bool> safeReadFile(int dirfd, const string &basename, size_t maxSize);",
                "+",
                " /**",
                "diff --git a/src/cxx_supportlib/Utils/IOUtils.cpp b/src/cxx_supportlib/Utils/IOUtils.cpp",
                "index 5563f6840..dba508aca 100644",
                "--- a/src/cxx_supportlib/Utils/IOUtils.cpp",
                "+++ b/src/cxx_supportlib/Utils/IOUtils.cpp",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2010-2018 Phusion Holding B.V.",
                "  *",
                "@@ -1356,17 +1356,4 @@ safelyClose(int fd, bool ignoreErrors) {",
                "-string",
                "-readAll(const string &filename) {",
                "-\tFILE *f = fopen(filename.c_str(), \"rb\");",
                "-\tif (f != NULL) {",
                "-\t\tStdioGuard guard(f, NULL, 0);",
                "-\t\treturn readAll(fileno(f));",
                "-\t} else {",
                "-\t\tint e = errno;",
                "-\t\tthrow FileSystemException(\"Cannot open '\" + filename + \"' for reading\",",
                "-\t\t\te, filename);",
                "-\t}",
                "-}",
                "-",
                "-string",
                "-readAll(int fd) {",
                "+pair<string, bool>",
                "+readAll(int fd, size_t maxSize) {",
                " \tstring result;",
                "@@ -1374,3 +1361,5 @@ readAll(int fd) {",
                " \tssize_t ret;",
                "-\twhile (true) {",
                "+\tbool eofReached = false;",
                "+",
                "+\twhile (result.size() < maxSize) {",
                " \t\tdo {",
                "@@ -1379,2 +1368,3 @@ readAll(int fd) {",
                " \t\tif (ret == 0) {",
                "+\t\t\teofReached = true;",
                " \t\t\tbreak;",
                "@@ -1382,2 +1372,3 @@ readAll(int fd) {",
                " \t\t\tif (errno == ECONNRESET) {",
                "+\t\t\t\teofReached = true;",
                " \t\t\t\tbreak;",
                "@@ -1391,3 +1382,4 @@ readAll(int fd) {",
                " \t}",
                "-\treturn result;",
                "+",
                "+\treturn make_pair(result, eofReached);",
                " }",
                "diff --git a/src/cxx_supportlib/Utils/IOUtils.h b/src/cxx_supportlib/Utils/IOUtils.h",
                "index 8b3e1e2ca..01da90cbf 100644",
                "--- a/src/cxx_supportlib/Utils/IOUtils.h",
                "+++ b/src/cxx_supportlib/Utils/IOUtils.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2010-2018 Phusion Holding B.V.",
                "  *",
                "@@ -36,2 +36,3 @@",
                " #include <string>",
                "+#include <utility>",
                " #include <vector>",
                "@@ -644,10 +645,10 @@ void readPeerCredentials(int sock, uid_t *uid, gid_t *gid);",
                " /**",
                "- * Read all data from the given file until EOF.",
                "+ * Read all data from the given file descriptor until EOF, or until `maxSize`",
                "+ * is reached.",
                "  *",
                "- * @throws SystemException",
                "- */",
                "-string readAll(const string &filename);",
                "-",
                "-/**",
                "- * Read all data from the given file descriptor until EOF.",
                "+ * Returns a pair `(contents, eof)`.",
                "+ *",
                "+ *  - `contents` is the read file contents, which is at most `maxSize` bytes.",
                "+ *  - `eof` indicates whether the entire file has been read. If false, then it",
                "+ *    means the amount of data is larger than `maxSize`.",
                "  *",
                "@@ -655,3 +656,3 @@ string readAll(const string &filename);",
                "  */",
                "-string readAll(int fd);",
                "+pair<string, bool> readAll(int fd, size_t maxSize);",
                "diff --git a/src/cxx_supportlib/Utils/SystemMetricsCollector.h b/src/cxx_supportlib/Utils/SystemMetricsCollector.h",
                "index 2b2fc1f13..5c54bb77f 100644",
                "--- a/src/cxx_supportlib/Utils/SystemMetricsCollector.h",
                "+++ b/src/cxx_supportlib/Utils/SystemMetricsCollector.h",
                "@@ -47,4 +47,4 @@",
                " \t#include <Exceptions.h>",
                "+\t#include <FileTools/FileManip.h>",
                " \t#include <Utils/StringScanning.h>",
                "-\t#include <Utils/IOUtils.h>",
                " #endif",
                "@@ -914,3 +914,3 @@ private:",
                " \t\t\ttry {",
                "-\t\t\t\tcontents = readAll(\"/proc/meminfo\");",
                "+\t\t\t\tcontents = unsafeReadFile(\"/proc/meminfo\");",
                " \t\t\t\thasContents = true;",
                "@@ -989,3 +989,3 @@ private:",
                " \t\t\ttry {",
                "-\t\t\t\tcontents = readAll(\"/proc/stat\");",
                "+\t\t\t\tcontents = unsafeReadFile(\"/proc/stat\");",
                " \t\t\t\thasContents = true;",
                "@@ -1068,3 +1068,3 @@ private:",
                " \t\t\ttry {",
                "-\t\t\t\tcontents = readAll(\"/proc/vmstat\");",
                "+\t\t\t\tcontents = unsafeReadFile(\"/proc/vmstat\");",
                " \t\t\t\thasContents = true;",
                "diff --git a/src/cxx_supportlib/WebSocketCommandReverseServer.h b/src/cxx_supportlib/WebSocketCommandReverseServer.h",
                "index 02221c1ee..32e4aa6ac 100644",
                "--- a/src/cxx_supportlib/WebSocketCommandReverseServer.h",
                "+++ b/src/cxx_supportlib/WebSocketCommandReverseServer.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2017-2018 Phusion Holding B.V.",
                "  *",
                "@@ -51,3 +51,2 @@",
                " #include <Utils/StrIntUtils.h>",
                "-#include <Utils/IOUtils.h>",
                "@@ -499,3 +498,3 @@ private:",
                " \t\t} else {",
                "-\t\t\tpassword = strip(readAll(config[\"password_file\"].asString()));",
                "+\t\t\tpassword = strip(unsafeReadFile(config[\"password_file\"].asString()));",
                " \t\t}",
                "diff --git a/test/cxx/Core/ApplicationPool/PoolTest.cpp b/test/cxx/Core/ApplicationPool/PoolTest.cpp",
                "index 2baffa4be..f777323e2 100644",
                "--- a/test/cxx/Core/ApplicationPool/PoolTest.cpp",
                "+++ b/test/cxx/Core/ApplicationPool/PoolTest.cpp",
                "@@ -5,3 +5,2 @@",
                " #include <FileTools/FileManip.h>",
                "-#include <Utils/IOUtils.h>",
                " #include <Utils/StrIntUtils.h>",
                "@@ -191,3 +190,4 @@ namespace tut {",
                " \t\t\tshutdown(currentSession->fd(), SHUT_WR);",
                "-\t\t\tstring body = stripHeaders(readAll(currentSession->fd()));",
                "+\t\t\tstring body = stripHeaders(readAll(currentSession->fd(),",
                "+\t\t\t\t1024 * 1024).first);",
                " \t\t\tProcessPtr process = currentSession->getProcess()->shared_from_this();",
                "@@ -1837,4 +1837,4 @@ namespace tut {",
                " \t\tusleep(20000);",
                "-\t\twriteFile(\"tmp.wsgi/passenger_wsgi.py\", readAll(\"stub/wsgi/passenger_wsgi.py\"));",
                "-\t\tpid_t pid = (pid_t) stringToLL(readAll(\"tmp.wsgi/spawned.txt\"));",
                "+\t\twriteFile(\"tmp.wsgi/passenger_wsgi.py\", unsafeReadFile(\"stub/wsgi/passenger_wsgi.py\"));",
                "+\t\tpid_t pid = (pid_t) stringToLL(unsafeReadFile(\"tmp.wsgi/spawned.txt\"));",
                " \t\tkill(pid, SIGTERM);",
                "diff --git a/test/cxx/Core/ApplicationPool/ProcessTest.cpp b/test/cxx/Core/ApplicationPool/ProcessTest.cpp",
                "index fda387802..3e31ae3a5 100644",
                "--- a/test/cxx/Core/ApplicationPool/ProcessTest.cpp",
                "+++ b/test/cxx/Core/ApplicationPool/ProcessTest.cpp",
                "@@ -3,3 +3,3 @@",
                " #include <LoggingKit/Context.h>",
                "-#include <Utils/IOUtils.h>",
                "+#include <FileTools/FileManip.h>",
                "@@ -217,3 +217,3 @@ namespace tut {",
                " \t\tEVENTUALLY(2,",
                "-\t\t\tstring contents = readAll(\"tmp.log/file\");",
                "+\t\t\tstring contents = unsafeReadFile(\"tmp.log/file\");",
                " \t\t\tresult = contents.find(\"stdout and err 1\\n\") != string::npos",
                "@@ -228,3 +228,3 @@ namespace tut {",
                " \t\tEVENTUALLY(2,",
                "-\t\t\tstring contents = readAll(\"tmp.log/file\");",
                "+\t\t\tstring contents = unsafeReadFile(\"tmp.log/file\");",
                " \t\t\tresult = contents.find(\"stdout and err 3\\n\") != string::npos",
                "diff --git a/test/cxx/Core/ControllerTest.cpp b/test/cxx/Core/ControllerTest.cpp",
                "index 2c3c15092..d347e1b91 100644",
                "--- a/test/cxx/Core/ControllerTest.cpp",
                "+++ b/test/cxx/Core/ControllerTest.cpp",
                "@@ -1,2 +1,3 @@",
                " #include <TestSupport.h>",
                "+#include <limits>",
                " #include <Constants.h>",
                "@@ -203,3 +204,3 @@ namespace tut {",
                " \t\t\ttry {",
                "-\t\t\t\treadAll(testSession.peerFd());",
                "+\t\t\t\treadAll(testSession.peerFd(), std::numeric_limits<size_t>::max());",
                " \t\t\t\tdrained = true;",
                "diff --git a/test/cxx/Core/SpawningKit/DirectSpawnerTest.cpp b/test/cxx/Core/SpawningKit/DirectSpawnerTest.cpp",
                "index d40af3838..8f9ee45e2 100644",
                "--- a/test/cxx/Core/SpawningKit/DirectSpawnerTest.cpp",
                "+++ b/test/cxx/Core/SpawningKit/DirectSpawnerTest.cpp",
                "@@ -85,3 +85,3 @@ namespace tut {",
                " \t\twriteExact(fd, \"ping\\n\");",
                "-\t\tensure_equals(readAll(fd), \"pong\\n\");",
                "+\t\tensure_equals(readAll(fd, 1024).first, \"pong\\n\");",
                " \t}",
                "diff --git a/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp b/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp",
                "index 525dc293f..2be1d199e 100644",
                "--- a/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp",
                "+++ b/test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp",
                "@@ -3,2 +3,3 @@",
                " #include <unistd.h>",
                "+#include <FileTools/FileManip.h>",
                " #include <Utils.h>",
                "@@ -159,3 +160,3 @@ namespace tut {",
                " \t\tensure(fileExists(session->workDir->getPath() + \"/args/app_root\"));",
                "-\t\tensure_equals(readAll(session->workDir->getPath() + \"/args/app_root\"), config.appRoot);",
                "+\t\tensure_equals(unsafeReadFile(session->workDir->getPath() + \"/args/app_root\"), config.appRoot);",
                " \t}",
                "diff --git a/test/cxx/Core/SpawningKit/SpawnerTestCases.cpp b/test/cxx/Core/SpawningKit/SpawnerTestCases.cpp",
                "index 5359a00b5..fe5eb1e50 100644",
                "--- a/test/cxx/Core/SpawningKit/SpawnerTestCases.cpp",
                "+++ b/test/cxx/Core/SpawningKit/SpawnerTestCases.cpp",
                "@@ -17,3 +17,3 @@",
                " \t\twriteExact(fd, \"ping\\n\");",
                "-\t\tensure_equals(readAll(fd), \"pong\\n\");",
                "+\t\tensure_equals(readAll(fd, 1024).first, \"pong\\n\");",
                " \t}",
                "@@ -65,3 +65,3 @@",
                " \t\twriteExact(fd, \"pid\\n\");",
                "-\t\tensure_equals(readAll(fd), toString(result.pid) + \"\\n\");",
                "+\t\tensure_equals(readAll(fd, 1024).first, toString(result.pid) + \"\\n\");",
                " \t}",
                "diff --git a/test/cxx/CxxTestMain.cpp b/test/cxx/CxxTestMain.cpp",
                "index bcc156f8d..d907b3acc 100644",
                "--- a/test/cxx/CxxTestMain.cpp",
                "+++ b/test/cxx/CxxTestMain.cpp",
                "@@ -21,3 +21,2 @@",
                " #include <Utils/SystemTime.h>",
                "-#include <Utils/IOUtils.h>",
                " #include <Utils/StrIntUtils.h>",
                "@@ -157,3 +156,3 @@ loadConfigFile() {",
                " \tJson::Reader reader;",
                "-\tif (!reader.parse(readAll(\"config.json\"), testConfig)) {",
                "+\tif (!reader.parse(unsafeReadFile(\"config.json\"), testConfig)) {",
                " \t\tfprintf(stderr, \"Cannot parse config.json: %s\\n\",",
                "diff --git a/test/cxx/ServerKit/HttpServerTest.cpp b/test/cxx/ServerKit/HttpServerTest.cpp",
                "index b80d89024..be6668f4e 100644",
                "--- a/test/cxx/ServerKit/HttpServerTest.cpp",
                "+++ b/test/cxx/ServerKit/HttpServerTest.cpp",
                "@@ -7,2 +7,3 @@",
                " #include <oxt/system_calls.hpp>",
                "+#include <limits>",
                " #include <BackgroundEventLoop.h>",
                "@@ -504,3 +505,3 @@ namespace tut {",
                " \t\t\t\"Host: foo\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024 * 1024).first;",
                " \t\tensure_equals(response,",
                "@@ -532,3 +533,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response,",
                "@@ -559,3 +560,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response,",
                "@@ -600,3 +601,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response,",
                "@@ -621,3 +622,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(containsSubstring(response, \"Contiguous: 1\"));",
                "@@ -644,3 +645,3 @@ namespace tut {",
                " \t\tsyscalls::shutdown(fd, SHUT_WR);",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response, \"\");",
                "@@ -653,3 +654,3 @@ namespace tut {",
                " \t\tsendRequest(\"whatever\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(containsSubstring(response,",
                "@@ -676,3 +677,3 @@ namespace tut {",
                " \t\t\t\"Host: foo\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(containsSubstring(response,",
                "@@ -698,3 +699,3 @@ namespace tut {",
                " \t\t\t\"Transfer-Encoding: chunked\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(containsSubstring(response,",
                "@@ -722,3 +723,3 @@ namespace tut {",
                " \t\t\t\"Content-Length: 0\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -736,3 +737,3 @@ namespace tut {",
                " \t\t\t\"ok\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -755,3 +756,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -777,3 +778,3 @@ namespace tut {",
                " \t\tstartAcceptingBody();",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -799,3 +800,3 @@ namespace tut {",
                " \t\tstartAcceptingBody();",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -819,3 +820,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -835,3 +836,3 @@ namespace tut {",
                " \t\t\t\"hmok\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -860,3 +861,3 @@ namespace tut {",
                " \t\t\t\"0\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -876,3 +877,3 @@ namespace tut {",
                " \t\t\t\"0\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -908,3 +909,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -925,3 +926,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -952,3 +953,3 @@ namespace tut {",
                " \t\tstartAcceptingBody();",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -969,3 +970,3 @@ namespace tut {",
                " \t\t\t\"ok\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -996,3 +997,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -1012,3 +1013,3 @@ namespace tut {",
                " \t\t\t\"!\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -1027,3 +1028,3 @@ namespace tut {",
                " \t\t\t\"2\\r\\nok!\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -1045,3 +1046,3 @@ namespace tut {",
                " \t\tsyscalls::shutdown(fd, SHUT_WR);",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -1060,3 +1061,3 @@ namespace tut {",
                " \t\tsyscalls::shutdown(fd, SHUT_WR);",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -1080,3 +1081,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -1103,3 +1104,3 @@ namespace tut {",
                " \t\tstartAcceptingBody();",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -1125,3 +1126,3 @@ namespace tut {",
                " \t\tstartAcceptingBody();",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -1139,3 +1140,3 @@ namespace tut {",
                " \t\t\t\"Upgrade: raw\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 422 Unprocessable Entity\\r\\n\"));",
                "@@ -1153,3 +1154,3 @@ namespace tut {",
                " \t\t\t\"Content-Length: 3\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 400 Bad Request\\r\\n\"));",
                "@@ -1167,3 +1168,3 @@ namespace tut {",
                " \t\t\t\"Upgrade: raw\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 400 Bad Request\\r\\n\"));",
                "@@ -1185,3 +1186,3 @@ namespace tut {",
                " \t\t\t\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response,",
                "@@ -1209,3 +1210,3 @@ namespace tut {",
                " \t\t\t\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.0 400 Bad Request\\r\\n\"));",
                "@@ -1225,3 +1226,3 @@ namespace tut {",
                " \t\t\t\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.0 400 Bad Request\\r\\n\"));",
                "@@ -1242,3 +1243,3 @@ namespace tut {",
                " \t\t\t\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -1262,3 +1263,3 @@ namespace tut {",
                " \t\t\t\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.0 400 Bad Request\\r\\n\"));",
                "@@ -1285,3 +1286,3 @@ namespace tut {",
                " \t\t\t\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"HTTP/1.1 200 OK\\r\\n\"));",
                "@@ -1301,3 +1302,3 @@ namespace tut {",
                " \t\t\t\"Host: foo\\r\\n\\r\\n\");",
                "-\t\treadAll(fd); // Does not block",
                "+\t\treadAll(fd, std::numeric_limits<size_t>::max()); // Does not block",
                " \t}",
                "@@ -1317,3 +1318,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response,",
                "@@ -1345,3 +1346,3 @@ namespace tut {",
                " \t\t\t\"Size: 1000000\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024 * 1024).first;",
                " \t\tstring body = stripHeaders(response);",
                "@@ -1368,3 +1369,3 @@ namespace tut {",
                "-\t\tstring data = readAll(fd);",
                "+\t\tstring data = readAll(fd, 1024 * 1024).first;",
                " \t\tstring response2 =",
                "@@ -1403,3 +1404,3 @@ namespace tut {",
                " \t\twriteExact(fd, \"abcd\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024 * 1024).first;",
                " \t\tstring body = stripHeaders(response);",
                "@@ -1436,3 +1437,3 @@ namespace tut {",
                " \t\t\t\"Host: foo\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024 * 1024).first;",
                " \t\tstring body = stripHeaders(response);",
                "@@ -1544,3 +1545,3 @@ namespace tut {",
                " \t\t\t\"Connection: close\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"Connection: close\"));",
                "@@ -1563,3 +1564,3 @@ namespace tut {",
                " \t\tsendRequest(\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"Connection: close\"));",
                "@@ -1585,3 +1586,3 @@ namespace tut {",
                " \t\tsendRequest(\"\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"503 Service Unavailable\"));",
                "@@ -1605,3 +1606,3 @@ namespace tut {",
                " \t\tsendRequest(\"ab\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure(\"(1)\", containsSubstring(response, \"Connection: close\"));",
                "@@ -1626,3 +1627,3 @@ namespace tut {",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response, \"\");",
                "@@ -1641,3 +1642,3 @@ namespace tut {",
                " \t\t\t\"Host: foo\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response,",
                "@@ -1721,3 +1722,3 @@ namespace tut {",
                " \t\t\t\"Host: foo\\r\\n\\r\\n\");",
                "-\t\tstring response = readAll(fd);",
                "+\t\tstring response = readAll(fd, 1024).first;",
                " \t\tensure_equals(response,",
                "diff --git a/test/cxx/ServerKit/ServerTest.cpp b/test/cxx/ServerKit/ServerTest.cpp",
                "index d2950e860..692f9e84c 100644",
                "--- a/test/cxx/ServerKit/ServerTest.cpp",
                "+++ b/test/cxx/ServerKit/ServerTest.cpp",
                "@@ -412,3 +412,3 @@ namespace tut {",
                " \t\tsyscalls::shutdown(fd, SHUT_WR);",
                "-\t\tensure_equals(readAll(fd), \"hello\");",
                "+\t\tensure_equals(readAll(fd, 1024).first, \"hello\");",
                " \t}",
                "diff --git a/test/cxx/SpawnEnvSetupperTest.cpp b/test/cxx/SpawnEnvSetupperTest.cpp",
                "index 3119c7c00..de80bc275 100644",
                "--- a/test/cxx/SpawnEnvSetupperTest.cpp",
                "+++ b/test/cxx/SpawnEnvSetupperTest.cpp",
                "@@ -2,2 +2,3 @@",
                " #include <Core/SpawningKit/Handshake/Prepare.h>",
                "+#include <FileTools/FileManip.h>",
                "@@ -73,3 +74,4 @@ namespace tut {",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_before_first_exec/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_before_first_exec/state\"),",
                " \t\t\t\"STEP_PERFORMED\");",
                "@@ -84,3 +86,4 @@ namespace tut {",
                "-\t\tstring envvars = readAll(session->workDir->getPath() + \"/envdump/envvars\");",
                "+\t\tstring envvars = unsafeReadFile(session->workDir->getPath()",
                "+\t\t\t+ \"/envdump/envvars\");",
                " \t\tensure(containsSubstring(envvars, \"PATH=\"));",
                "@@ -95,3 +98,4 @@ namespace tut {",
                "-\t\tstring envvars = readAll(session->workDir->getPath() + \"/envdump/user_info\");",
                "+\t\tstring envvars = unsafeReadFile(session->workDir->getPath()",
                "+\t\t\t+ \"/envdump/user_info\");",
                " \t\tensure(containsSubstring(envvars, \"uid=\"));",
                "@@ -106,3 +110,4 @@ namespace tut {",
                "-\t\tstring envvars = readAll(session->workDir->getPath() + \"/envdump/ulimits\");",
                "+\t\tstring envvars = unsafeReadFile(session->workDir->getPath()",
                "+\t\t\t+ \"/envdump/ulimits\");",
                " \t\tensure(containsSubstring(envvars, \"open files\")",
                "@@ -118,3 +123,4 @@ namespace tut {",
                "-\t\tstring envvars = readAll(session->workDir->getPath() + \"/envdump/envvars\");",
                "+\t\tstring envvars = unsafeReadFile(session->workDir->getPath()",
                "+\t\t\t+ \"/envdump/envvars\");",
                " \t\tensure(containsSubstring(envvars, \"PASSENGER_APP_ENV=\"));",
                "@@ -147,3 +153,3 @@ namespace tut {",
                " \t\tensure(\"Load environment JSON dump\",",
                "-\t\t\tJson::Reader().parse(readAll(\"tmp.wsgi/env.json\"), doc));",
                "+\t\t\tJson::Reader().parse(unsafeReadFile(\"tmp.wsgi/env.json\"), doc));",
                " \t\tensure_equals(doc[\"MY_VAR\"].asString(), \"value\");",
                "@@ -169,4 +175,4 @@ namespace tut {",
                "-\t\tensure_equals(strip(readAll(\"tmp.wsgi/user.txt\")), user);",
                "-\t\tensure_equals(strip(readAll(\"tmp.wsgi/group.txt\")), group);",
                "+\t\tensure_equals(strip(unsafeReadFile(\"tmp.wsgi/user.txt\")), user);",
                "+\t\tensure_equals(strip(unsafeReadFile(\"tmp.wsgi/group.txt\")), group);",
                " \t}",
                "@@ -190,3 +196,3 @@ namespace tut {",
                "-\t\tensure_equals(strip(readAll(\"tmp.wsgi/openfiles.txt\")), \"128\");",
                "+\t\tensure_equals(strip(unsafeReadFile(\"tmp.wsgi/openfiles.txt\")), \"128\");",
                " \t}",
                "@@ -205,6 +211,8 @@ namespace tut {",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_spawn_env_setupper_before_shell/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_spawn_env_setupper_before_shell/state\"),",
                " \t\t\t\"STEP_PERFORMED\");",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_spawn_env_setupper_after_shell/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_spawn_env_setupper_after_shell/state\"),",
                " \t\t\t\"STEP_PERFORMED\");",
                "@@ -228,3 +236,4 @@ namespace tut {",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_os_shell/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_os_shell/state\"),",
                " \t\t\t\"STEP_PERFORMED\");",
                "@@ -241,3 +250,4 @@ namespace tut {",
                "-\t\tensure(!fileExists(session->workDir->getPath() + \"/response/steps/subprocess_os_shell\"));",
                "+\t\tensure(!fileExists(session->workDir->getPath()",
                "+\t\t\t+ \"/response/steps/subprocess_os_shell\"));",
                " \t}",
                "@@ -255,3 +265,4 @@ namespace tut {",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_exec_wrapper/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_exec_wrapper/state\"),",
                " \t\t\t\"STEP_IN_PROGRESS\");",
                "@@ -272,3 +283,4 @@ namespace tut {",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_exec_wrapper/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_exec_wrapper/state\"),",
                " \t\t\t\"STEP_ERRORED\");",
                "@@ -287,3 +299,4 @@ namespace tut {",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_app_load_or_exec/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_app_load_or_exec/state\"),",
                " \t\t\t\"STEP_IN_PROGRESS\");",
                "@@ -304,3 +317,4 @@ namespace tut {",
                " \t\tensure_equals(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/steps/subprocess_app_load_or_exec/state\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/steps/subprocess_app_load_or_exec/state\"),",
                " \t\t\t\"STEP_ERRORED\");",
                "@@ -336,3 +350,4 @@ namespace tut {",
                " \t\tensure(containsSubstring(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/error/summary\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/error/summary\"),",
                " \t\t\t\"Directory '\" + cwd + \"/tmp.check/a' is inaccessible\"));",
                "@@ -396,3 +411,4 @@ namespace tut {",
                " \t\tensure(containsSubstring(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/error/summary\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/error/summary\"),",
                " \t\t\t\"Directory '\" + cwd + \"/tmp.check/a/b/c' is inaccessible\"));",
                "@@ -425,3 +441,4 @@ namespace tut {",
                " \t\tensure(containsSubstring(",
                "-\t\t\treadAll(session->workDir->getPath() + \"/response/error/summary\"),",
                "+\t\t\tunsafeReadFile(session->workDir->getPath()",
                "+\t\t\t\t+ \"/response/error/summary\"),",
                " \t\t\t\"Directory '\" + cwd + \"/tmp.check/a/b/c' is inaccessible\"));",
                "diff --git a/test/cxx/TestSupport.cpp b/test/cxx/TestSupport.cpp",
                "index 0e6501e7c..d63849523 100644",
                "--- a/test/cxx/TestSupport.cpp",
                "+++ b/test/cxx/TestSupport.cpp",
                "@@ -10,3 +10,3 @@",
                " #include <cassert>",
                "-#include <Utils/IOUtils.h>",
                "+#include <FileTools/FileManip.h>",
                " #include <Utils/ScopeGuard.h>",
                "@@ -81,3 +81,3 @@ void",
                " replaceStringInFile(const char *filename, const string &toFind, const string &replaceWith) {",
                "-\tstring content = readAll(filename);",
                "+\tstring content = unsafeReadFile(filename);",
                " \tFILE *f = fopen(filename, \"w\");",
                "@@ -103,13 +103,3 @@ void",
                " writeFile(const string &filename, const string &contents) {",
                "-\tFILE *f = fopen(filename.c_str(), \"w\");",
                "-\tif (f == NULL) {",
                "-\t\tint e = errno;",
                "-\t\tstring message = \"Cannot open file '\";",
                "-\t\tmessage.append(filename);",
                "-\t\tmessage.append(\"' for writing\");",
                "-\t\tthrow FileSystemException(message, e, filename);",
                "-\t} else {",
                "-\t\tStdioGuard guard(f, __FILE__, __LINE__);",
                "-\t\tfwrite(contents.data(), 1, contents.size(), f);",
                "-\t}",
                "+\tcreateFile(filename, contents);",
                " }"
            ],
            "changed_files": [
                "build/support/cxx_dependency_map.rb",
                "src/agent/Core/AdminPanelConnector.h",
                "src/agent/Core/CoreMain.cpp",
                "src/agent/Core/SpawningKit/ErrorRenderer.h",
                "src/agent/Core/SpawningKit/Handshake/Perform.h",
                "src/agent/Core/SpawningKit/SmartSpawner.h",
                "src/agent/Shared/ApiAccountUtils.h",
                "src/agent/SpawnEnvSetupper/SpawnEnvSetupperMain.cpp",
                "src/cxx_supportlib/FileTools/FileManip.cpp",
                "src/cxx_supportlib/FileTools/FileManip.h",
                "src/cxx_supportlib/Utils/IOUtils.cpp",
                "src/cxx_supportlib/Utils/IOUtils.h",
                "src/cxx_supportlib/Utils/SystemMetricsCollector.h",
                "src/cxx_supportlib/WebSocketCommandReverseServer.h",
                "test/cxx/Core/ApplicationPool/PoolTest.cpp",
                "test/cxx/Core/ApplicationPool/ProcessTest.cpp",
                "test/cxx/Core/ControllerTest.cpp",
                "test/cxx/Core/SpawningKit/DirectSpawnerTest.cpp",
                "test/cxx/Core/SpawningKit/HandshakePrepareTest.cpp",
                "test/cxx/Core/SpawningKit/SpawnerTestCases.cpp",
                "test/cxx/CxxTestMain.cpp",
                "test/cxx/ServerKit/HttpServerTest.cpp",
                "test/cxx/ServerKit/ServerTest.cpp",
                "test/cxx/SpawnEnvSetupperTest.cpp",
                "test/cxx/TestSupport.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a4f2b12d36483505747c1777fd9d30af0baab431",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527750191,
            "hunks": 10,
            "message": "SpawningKit HandshakePerform: add more trace points",
            "diff": [
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "index c4193bace..74e874db9 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "@@ -375,2 +375,3 @@ private:",
                " \tvoid loadResultPropertiesFromResponseDir(bool socketsRequired) {",
                "+\t\tTRACE_POINT();",
                " \t\tResult &result = session.result;",
                "@@ -388,2 +389,3 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\tpair<string, bool> jsonContent = safeReadFile(session.responseDirFd, \"properties.json\",",
                "@@ -403,2 +405,3 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\tvalidateResultPropertiesFile(doc, socketsRequired, errors);",
                "@@ -415,2 +418,3 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\tJson::Value::iterator it, end = doc[\"sockets\"].end();",
                "@@ -436,2 +440,3 @@ private:",
                " \t{",
                "+\t\tTRACE_POINT();",
                " \t\tif (!doc.isMember(\"sockets\")) {",
                "@@ -451,2 +456,3 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\tJson::Value::const_iterator it, end = doc[\"sockets\"].end();",
                "@@ -517,2 +523,3 @@ private:",
                " \t{",
                "+\t\tTRACE_POINT();",
                " \t\tif (!doc[\"address\"].isString()",
                "@@ -550,2 +557,3 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\t// instanceDir is only empty in tests",
                "@@ -563,2 +571,3 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\tstruct stat s;",
                "@@ -589,2 +598,3 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\tif (s.st_uid != session.uid) {"
            ],
            "changed_files": [
                "src/agent/Core/SpawningKit/Handshake/Perform.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b970339aa34c88be6da0418fae5660bf8de5dd90",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527751010,
            "hunks": 1,
            "message": "SpawningKit properties.json validation handling: correctly set errored journey step One of the branches in throwSpawnExceptionBecauseOfResultValidationErrors() always set the errored step to SUBPROCESS_WRAPPER_PREPARATION, but this step is not available in the SPAWN_THROUGH_PRELOADER journey type.",
            "diff": [
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "index 74e874db9..758996942 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "@@ -918,3 +918,13 @@ private:",
                " \t\t\tloadJourneyStateFromResponseDir();",
                "-\t\t\tsession.journey.setStepErrored(SUBPROCESS_WRAPPER_PREPARATION, true);",
                "+\t\t\tswitch (session.journey.getType()) {",
                "+\t\t\tcase SPAWN_DIRECTLY:",
                "+\t\t\tcase START_PRELOADER:",
                "+\t\t\t\tsession.journey.setStepErrored(SUBPROCESS_WRAPPER_PREPARATION, true);",
                "+\t\t\t\tbreak;",
                "+\t\t\tcase SPAWN_THROUGH_PRELOADER:",
                "+\t\t\t\tsession.journey.setStepErrored(SUBPROCESS_PREPARE_AFTER_FORKING_FROM_PRELOADER, true);",
                "+\t\t\t\tbreak;",
                "+\t\t\tdefault:",
                "+\t\t\t\tP_BUG(\"Unknown journey type \" << (int) session.journey.getType());",
                "+\t\t\t}"
            ],
            "changed_files": [
                "src/agent/Core/SpawningKit/Handshake/Perform.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bd779082f9484eb045d3c4296c648b66da5929eb",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527746819,
            "hunks": 14,
            "message": "SpawningKit HandshakePerform: ensure that more SpawnExceptions contain information from the envdump dir",
            "diff": [
                "diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "index 247cc77c7..c4193bace 100644",
                "--- a/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h",
                "@@ -653,2 +653,3 @@ private:",
                " \t\t\te.setStdoutAndErrData(getStdoutErrData());",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                " \t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -714,2 +715,3 @@ private:",
                " \t\t\te.setStdoutAndErrData(getStdoutErrData());",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                " \t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -760,2 +762,3 @@ private:",
                " \t\t\te.setStdoutAndErrData(getStdoutErrData());",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                " \t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -831,2 +834,3 @@ private:",
                " \t\t\te.setStdoutAndErrData(getStdoutErrData());",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                " \t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -873,2 +877,4 @@ private:",
                " \t\t\te.setAdvancedProblemDetails(toString(internalFieldErrors));",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                "+\t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -908,2 +914,3 @@ private:",
                " \t\t\te.setAdvancedProblemDetails(toString(appSuppliedFieldErrors));",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                " \t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -983,2 +990,3 @@ private:",
                " \t\t\te.setStdoutAndErrData(getStdoutErrData());",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                " \t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -1030,2 +1038,3 @@ private:",
                " \t\t\t\te.setSubprocessPid(pid);",
                "+\t\t\t\tloadBasicInfoFromEnvDumpDir(e);",
                " \t\t\t\tloadAnnotationsFromEnvDumpDir(e);",
                "@@ -1202,2 +1211,3 @@ private:",
                " \t\t\t\te.setSubprocessPid(pid);",
                "+\t\t\t\tloadBasicInfoFromEnvDumpDir(e, session);",
                " \t\t\t\tloadAnnotationsFromEnvDumpDir(e, session);",
                "@@ -1294,2 +1304,3 @@ private:",
                " \t\t\te.setSubprocessPid(pid);",
                "+\t\t\tloadBasicInfoFromEnvDumpDir(e, session);",
                " \t\t\tloadAnnotationsFromEnvDumpDir(e, session);",
                "@@ -1441,3 +1452,2 @@ private:",
                " \t\tconst string &responseDir = session.responseDir;",
                "-\t\tconst string &envDumpDir = session.envDumpDir;",
                "@@ -1471,5 +1481,15 @@ private:",
                "+\t\tloadBasicInfoFromEnvDumpDir(e);",
                "+\t\tloadAnnotationsFromEnvDumpDir(e);",
                "+\t}",
                "+",
                "+\tvoid loadBasicInfoFromEnvDumpDir(SpawnException &e) const {",
                "+\t\tloadBasicInfoFromEnvDumpDir(e, session);",
                "+\t}",
                "+",
                "+\tstatic void loadBasicInfoFromEnvDumpDir(SpawnException &e, HandshakeSession &session) {",
                " \t\tstring envvars, userInfo, ulimits;",
                "-\t\tloadBasicInfoFromEnvDumpDir(envDumpDir, session.envDumpDirFd, envvars,",
                "-\t\t\tuserInfo, ulimits);",
                "+",
                "+\t\tloadBasicInfoFromEnvDumpDir(session.envDumpDir, session.envDumpDirFd,",
                "+\t\t\tenvvars, userInfo, ulimits);",
                " \t\te.setSubprocessEnvvars(envvars);",
                "@@ -1477,4 +1497,2 @@ private:",
                " \t\te.setSubprocessUlimits(ulimits);",
                "-",
                "-\t\tloadAnnotationsFromEnvDumpDir(e);",
                " \t}"
            ],
            "changed_files": [
                "src/agent/Core/SpawningKit/Handshake/Perform.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "722d94e30ebe0705714d546b5d4484242079b8dc",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1526393198,
            "hunks": 4,
            "message": "Stop using MAX_PROCESSES header for maxInstancesPerApp",
            "diff": [
                "diff --git a/src/agent/Core/Controller/InitRequest.cpp b/src/agent/Core/Controller/InitRequest.cpp",
                "index 13c9f02ed..18b6982f5 100644",
                "--- a/src/agent/Core/Controller/InitRequest.cpp",
                "+++ b/src/agent/Core/Controller/InitRequest.cpp",
                "@@ -360,3 +360,2 @@ Controller::createNewPoolOptions(Client *client, Request *req,",
                " \tfillPoolOption(req, options.minProcesses, \"!~PASSENGER_MIN_PROCESSES\");",
                "-\tfillPoolOption(req, options.maxProcesses, \"!~PASSENGER_MAX_PROCESSES\");",
                " \tfillPoolOption(req, options.spawnMethod, \"!~PASSENGER_SPAWN_METHOD\");",
                "diff --git a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb",
                "index 9051810e4..53161a71a 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/apache2/config_options.rb",
                "@@ -265,3 +265,2 @@ APACHE2_CONFIGURATION_OPTIONS = [",
                "     :default   => 0,",
                "-    :header    => 'PASSENGER_MAX_PROCESSES',",
                "     :desc      => 'The maximum number of simultaneously alive application instances a single application may occupy.'",
                "diff --git a/src/ruby_supportlib/phusion_passenger/nginx/config_options.rb b/src/ruby_supportlib/phusion_passenger/nginx/config_options.rb",
                "index e4e211786..559e56839 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/nginx/config_options.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/nginx/config_options.rb",
                "@@ -302,4 +302,4 @@ NGINX_CONFIGURATION_OPTIONS = [",
                "     :type     => :uinteger,",
                "+    :header   => nil,",
                "     :default  => 0,",
                "-    :header   => 'PASSENGER_MAX_PROCESSES',",
                "     :struct   => 'NGX_HTTP_MAIN_CONF_OFFSET'"
            ],
            "changed_files": [
                "src/agent/Core/Controller/InitRequest.cpp",
                "src/ruby_supportlib/phusion_passenger/apache2/config_options.rb",
                "src/ruby_supportlib/phusion_passenger/nginx/config_options.rb"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6120509d3dca78b959135529262047febe884498",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1526987109,
            "hunks": 13,
            "message": "Pass maxInstancesPerApp via a global, so that it is respected again. Closes GH-2059. Also explain the various shortcuts taken.",
            "diff": [
                "diff --git a/dev/configkit-schemas/index.json b/dev/configkit-schemas/index.json",
                "index f7abd5ef5..0c58da559 100644",
                "--- a/dev/configkit-schemas/index.json",
                "+++ b/dev/configkit-schemas/index.json",
                "@@ -269,2 +269,6 @@",
                "       },",
                "+      \"max_instances_per_app\" : {",
                "+         \"read_only\" : true,",
                "+         \"type\" : \"unsigned integer\"",
                "+      },",
                "       \"min_spare_clients\" : {",
                "@@ -726,2 +730,6 @@",
                "       },",
                "+      \"max_instances_per_app\" : {",
                "+         \"read_only\" : true,",
                "+         \"type\" : \"unsigned integer\"",
                "+      },",
                "       \"max_pool_size\" : {",
                "@@ -1443,2 +1451,6 @@",
                "       },",
                "+      \"max_instances_per_app\" : {",
                "+         \"read_only\" : true,",
                "+         \"type\" : \"unsigned integer\"",
                "+      },",
                "       \"max_pool_size\" : {",
                "diff --git a/src/agent/Core/ApplicationPool/Group/StateInspection.cpp b/src/agent/Core/ApplicationPool/Group/StateInspection.cpp",
                "index 8df1a9a7f..4aba836cc 100644",
                "--- a/src/agent/Core/ApplicationPool/Group/StateInspection.cpp",
                "+++ b/src/agent/Core/ApplicationPool/Group/StateInspection.cpp",
                "@@ -72,2 +72,4 @@ bool",
                " Group::processUpperLimitsReached() const {",
                "+\t// check maxInstances limit as set by Enterprise (OSS maxInstancesPerApp piggybacks on this,",
                "+\t// see InitRequest.cpp)",
                " \treturn options.maxProcesses != 0 && capacityUsed() >= options.maxProcesses;",
                "diff --git a/src/agent/Core/Config.h b/src/agent/Core/Config.h",
                "index b4b347b92..fd99335fb 100644",
                "--- a/src/agent/Core/Config.h",
                "+++ b/src/agent/Core/Config.h",
                "@@ -142,2 +142,3 @@ using namespace std;",
                "  *   log_target                                                      any                -          default({\"stderr\": true})",
                "+ *   max_instances_per_app                                           unsigned integer   -          read_only",
                "  *   max_pool_size                                                   unsigned integer   -          default(6)",
                "diff --git a/src/agent/Core/Controller/Config.h b/src/agent/Core/Controller/Config.h",
                "index 2af2378b1..8e6c3a8b5 100644",
                "--- a/src/agent/Core/Controller/Config.h",
                "+++ b/src/agent/Core/Controller/Config.h",
                "@@ -109,2 +109,3 @@ parseControllerBenchmarkMode(const StaticString &mode) {",
                "  *   integration_mode                                    string             -          default(\"standalone\"),read_only",
                "+ *   max_instances_per_app                               unsigned integer   -          read_only",
                "  *   min_spare_clients                                   unsigned integer   -          default(0)",
                "@@ -129,2 +130,4 @@ private:",
                "+\t\tadd(\"max_instances_per_app\", UINT_TYPE, OPTIONAL | READ_ONLY);",
                "+",
                " \t\tadd(\"thread_number\", UINT_TYPE, REQUIRED | READ_ONLY);",
                "@@ -309,2 +312,3 @@ public:",
                " \tStaticString serverLogName;",
                "+\tunsigned int maxInstancesPerApp;",
                " \tControllerBenchmarkMode benchmarkMode: 3;",
                "@@ -326,2 +330,3 @@ public:",
                " \t\t  serverLogName(createServerLogName()),",
                "+\t\t  maxInstancesPerApp(config[\"max_instances_per_app\"].asUInt()),",
                " \t\t  benchmarkMode(parseControllerBenchmarkMode(config[\"benchmark_mode\"].asString())),",
                "diff --git a/src/agent/Core/Controller/InitRequest.cpp b/src/agent/Core/Controller/InitRequest.cpp",
                "index 18b6982f5..9065f5898 100644",
                "--- a/src/agent/Core/Controller/InitRequest.cpp",
                "+++ b/src/agent/Core/Controller/InitRequest.cpp",
                "@@ -373,2 +373,8 @@ Controller::createNewPoolOptions(Client *client, Request *req,",
                " \tfillPoolOption(req, options.lveMinUid, \"!~PASSENGER_LVE_MIN_UID\");",
                "+",
                "+\t// maxProcesses is configured per-application by the (Enterprise) maxInstances option (and thus passed",
                "+\t// via request headers). In OSS the max processes can also be configured, but on a global level",
                "+\t// (i.e. the same for all apps) using the maxInstancesPerApp option. As an easy implementation shortcut",
                "+\t// we apply maxInstancesPerApp to options.maxProcesses (which can be overridden by Enterprise).",
                "+\toptions.maxProcesses = mainConfig.maxInstancesPerApp;",
                " \t/******************/",
                "diff --git a/src/agent/Watchdog/Config.h b/src/agent/Watchdog/Config.h",
                "index b9f5b611d..1fd006d4d 100644",
                "--- a/src/agent/Watchdog/Config.h",
                "+++ b/src/agent/Watchdog/Config.h",
                "@@ -134,2 +134,3 @@ using namespace std;",
                "  *   log_target                                                               any                -          default({\"stderr\": true})",
                "+ *   max_instances_per_app                                                    unsigned integer   -          read_only",
                "  *   max_pool_size                                                            unsigned integer   -          default(6)",
                "diff --git a/src/apache2_module/Hooks.cpp b/src/apache2_module/Hooks.cpp",
                "index 1470ab9a1..f233ef6be 100644",
                "--- a/src/apache2_module/Hooks.cpp",
                "+++ b/src/apache2_module/Hooks.cpp",
                "@@ -1328,2 +1328,3 @@ public:",
                " \t\tconfig[\"pool_idle_time\"] = serverConfig.poolIdleTime;",
                "+\t\tconfig[\"max_instances_per_app\"] = serverConfig.maxInstancesPerApp;",
                " \t\tconfig[\"response_buffer_high_watermark\"] = serverConfig.responseBufferHighWatermark;",
                "diff --git a/src/nginx_module/ngx_http_passenger_module.c b/src/nginx_module/ngx_http_passenger_module.c",
                "index 5bf3845c9..39fd2866f 100644",
                "--- a/src/nginx_module/ngx_http_passenger_module.c",
                "+++ b/src/nginx_module/ngx_http_passenger_module.c",
                "@@ -374,2 +374,3 @@ start_watchdog(ngx_cycle_t *cycle) {",
                "     psg_json_value_set_ngx_uint  (w_config, \"pool_idle_time\", autogenerated_main_conf->pool_idle_time);",
                "+    psg_json_value_set_ngx_uint  (w_config, \"max_instances_per_app\", autogenerated_main_conf->max_instances_per_app);",
                "     psg_json_value_set_ngx_uint  (w_config, \"response_buffer_high_watermark\", autogenerated_main_conf->response_buffer_high_watermark);"
            ],
            "changed_files": [
                "dev/configkit-schemas/index.json",
                "src/agent/Core/ApplicationPool/Group/StateInspection.cpp",
                "src/agent/Core/Config.h",
                "src/agent/Core/Controller/Config.h",
                "src/agent/Core/Controller/InitRequest.cpp",
                "src/agent/Watchdog/Config.h",
                "src/apache2_module/Hooks.cpp",
                "src/nginx_module/ngx_http_passenger_module.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent, group",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1e7c82deb4901c438f583737d8c9f2aac264737c",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527689887,
            "hunks": 3,
            "message": "SpawningKit: do not allow killing the PID returned by the preloader until we have verified that it is genuine Otherwise the preloader can trick us into killing an arbitrary process.",
            "diff": [
                "diff --git a/src/agent/Core/SpawningKit/SmartSpawner.h b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "index f1c66de40..dfd617ef5 100644",
                "--- a/src/agent/Core/SpawningKit/SmartSpawner.h",
                "+++ b/src/agent/Core/SpawningKit/SmartSpawner.h",
                "@@ -842,12 +842,52 @@ private:",
                " \t\tpid_t spawnedPid = doc[\"pid\"].asInt();",
                "-\t\tScopeGuard guard(boost::bind(nonInterruptableKillAndWaitpid, spawnedPid));",
                "-\t\tUPDATE_TRACE_POINT();",
                "-\t\twaitForStdChannelFifosToBeOpenedByPeer(stdChannelsAsyncOpenState,",
                "-\t\t\tsession, spawnedPid);",
                "-",
                "-\t\tUPDATE_TRACE_POINT();",
                " \t\t// How do we know the preloader actually forked a process",
                " \t\t// instead of reporting the PID of a random other existing process?",
                "-\t\t// For security reasons we perform a UID check.",
                "+\t\t// For security reasons we perform a bunch of sanity checks,",
                "+\t\t// including checking the PID's UID.",
                "+",
                "+\t\tif (spawnedPid < 1) {",
                "+\t\t\tUPDATE_TRACE_POINT();",
                "+\t\t\tsession.journey.setStepErrored(SPAWNING_KIT_PROCESS_RESPONSE_FROM_PRELOADER);",
                "+",
                "+\t\t\tSpawnException e(INTERNAL_ERROR, session.journey, session.config);",
                "+\t\t\taddPreloaderEnvDumps(e);",
                "+\t\t\te.setSummary(\"The the preloader said it spawned a process with PID \"",
                "+\t\t\t\t+ toString(spawnedPid) + \", which is not allowed.\");",
                "+\t\t\te.setSubprocessPid(spawnedPid);",
                "+\t\t\te.setStdoutAndErrData(getBackgroundIOCapturerData(",
                "+\t\t\t\tstdChannelsAsyncOpenState->stdoutAndErrCapturer));",
                "+\t\t\te.setProblemDescriptionHTML(",
                "+\t\t\t\t\"<h2>Application process has unexpected PID</h2>\"",
                "+\t\t\t\t\"<p>The \" PROGRAM_NAME \" application server tried\"",
                "+\t\t\t\t\" to start the web application by communicating with a\"",
                "+\t\t\t\t\" helper process that we call a \\\"preloader\\\". However,\"",
                "+\t\t\t\t\" the preloader reported that it started a process with\"",
                "+\t\t\t\t\" a PID of \" + toString(spawnedPid) + \", which is not\"",
                "+\t\t\t\t\" allowed.</p>\");",
                "+\t\t\tif (!session.config->genericApp && session.config->startsUsingWrapper",
                "+\t\t\t\t&& session.config->wrapperSuppliedByThirdParty)",
                "+\t\t\t{",
                "+\t\t\t\te.setSolutionDescriptionHTML(",
                "+\t\t\t\t\t\"<h2>Please report this bug</h2>\"",
                "+\t\t\t\t\t\"<p class=\\\"sole-solution\\\">\"",
                "+\t\t\t\t\t\"This is probably a bug in the preloader process. The preloader \"",
                "+\t\t\t\t\t\"wrapper program is not written by the \" PROGRAM_NAME \" authors, \"",
                "+\t\t\t\t\t\"but by a third party. Please report this bug to the author of \"",
                "+\t\t\t\t\t\"the preloader wrapper program.\"",
                "+\t\t\t\t\t\"</p>\");",
                "+\t\t\t} else {",
                "+\t\t\t\te.setSolutionDescriptionHTML(",
                "+\t\t\t\t\t\"<h2>Please report this bug</h2>\"",
                "+\t\t\t\t\t\"<p class=\\\"sole-solution\\\">\"",
                "+\t\t\t\t\t\"This is probably a bug in the preloader process. The preloader \"",
                "+\t\t\t\t\t\"is an internal tool part of \" PROGRAM_NAME \". Please \"",
                "+\t\t\t\t\t\"<a href=\\\"\" SUPPORT_URL \"\\\">\"",
                "+\t\t\t\t\t\"report this bug</a>.\"",
                "+\t\t\t\t\t\"</p>\");",
                "+\t\t\t}",
                "+\t\t\tthrow e.finalize();",
                "+\t\t}",
                "+",
                "+\t\tUPDATE_TRACE_POINT();",
                " \t\tuid_t spawnedUid = getProcessUid(session, spawnedPid,",
                "@@ -899,2 +939,7 @@ private:",
                "+\t\tUPDATE_TRACE_POINT();",
                "+\t\tScopeGuard guard(boost::bind(nonInterruptableKillAndWaitpid, spawnedPid));",
                "+\t\twaitForStdChannelFifosToBeOpenedByPeer(stdChannelsAsyncOpenState,",
                "+\t\t\tsession, spawnedPid);",
                "+",
                " \t\tUPDATE_TRACE_POINT();"
            ],
            "changed_files": [
                "src/agent/Core/SpawningKit/SmartSpawner.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: agent",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a96edf34aa9dd2d92a4769b375c53f7e3d68d80d",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1528124857,
            "hunks": 13,
            "message": "Fixes the meteor loader (non-bundled mode). Closes GH-2082.",
            "diff": [
                "diff --git a/src/helper-scripts/meteor-loader.rb b/src/helper-scripts/meteor-loader.rb",
                "index 7aa92b366..67ee52451 100755",
                "--- a/src/helper-scripts/meteor-loader.rb",
                "+++ b/src/helper-scripts/meteor-loader.rb",
                "@@ -33,2 +33,3 @@ module PhusionPassenger",
                "     def self.options",
                "+      @@options ||= {}",
                "       return @@options",
                "@@ -36,7 +37,9 @@ module PhusionPassenger",
                "-    def self.exit_code_for_exception(e)",
                "-      if e.is_a?(SystemExit)",
                "-        return e.status",
                "-      else",
                "-        return 1",
                "+    def self.try_write_file(path, contents)",
                "+      begin",
                "+        File.open(path, 'wb') do |f|",
                "+          f.write(contents)",
                "+        end",
                "+      rescue SystemCallError => e",
                "+        STDERR.puts \"Warning: unable to write to #{path}: #{e}\"",
                "       end",
                "@@ -44,13 +47,53 @@ module PhusionPassenger",
                "-    def self.handshake_and_read_startup_request",
                "-      STDOUT.sync = true",
                "-      STDERR.sync = true",
                "-      puts \"!> I have control 1.0\"",
                "-      abort \"Invalid initialization header\" if STDIN.readline != \"You have control 1.0\\n\"",
                "+    def self.record_journey_step_begin(step, state, work_dir = nil)",
                "+      dir = work_dir || ENV['PASSENGER_SPAWN_WORK_DIR']",
                "+      step_dir = \"#{dir}/response/steps/#{step.downcase}\"",
                "+      try_write_file(\"#{step_dir}/state\", state)",
                "+      try_write_file(\"#{step_dir}/begin_time\", Time.now.to_f)",
                "+    end",
                "-      @@options = {}",
                "-      while (line = STDIN.readline) != \"\\n\"",
                "-        name, value = line.strip.split(/: */, 2)",
                "-        @@options[name] = value",
                "+    def self.record_journey_step_end(step, state, work_dir = nil)",
                "+      dir = work_dir || ENV['PASSENGER_SPAWN_WORK_DIR']",
                "+      step_dir = \"#{dir}/response/steps/#{step.downcase}\"",
                "+      try_write_file(\"#{step_dir}/state\", state)",
                "+      if !File.exist?(\"#{step_dir}/begin_time\") && !File.exist?(\"#{step_dir}/begin_time_monotonic\")",
                "+        try_write_file(\"#{step_dir}/begin_time\", Time.now.to_f)",
                "       end",
                "+      try_write_file(\"#{step_dir}/end_time\", Time.now.to_f)",
                "+    end",
                "+",
                "+    def self.init_logging",
                "+      logger = Logger.new(STDOUT)",
                "+      logger.level = Logger::WARN",
                "+      logger.formatter = proc do |severity, datetime, progname, msg|",
                "+        \"[ pid=#{Process.pid}, time=#{datetime} ]: #{msg.message}\"",
                "+      end",
                "+    end",
                "+",
                "+    def self.read_startup_arguments",
                "+\t    work_dir = ENV['PASSENGER_SPAWN_WORK_DIR']",
                "+        @@options = File.open(\"#{work_dir}/args.json\", 'rb') do |f|",
                "+          Utils::JSON.parse(f.read)",
                "+        end",
                "+    end",
                "+",
                "+    def self.advertise_port(port)",
                "+      work_dir = ENV['PASSENGER_SPAWN_WORK_DIR']",
                "+\t    path = work_dir + '/response/properties.json'",
                "+\t    doc = {",
                "+\t\t    'sockets': [{",
                "+\t\t\t\t             'name': 'main',",
                "+\t\t\t\t             'address': \"tcp://127.0.0.1:#{port}\",",
                "+\t\t\t\t             'protocol': 'http',",
                "+\t\t\t\t             'concurrency': 0,",
                "+\t\t\t\t             'accept_http_requests': true",
                "+\t\t\t              }]",
                "+\t    }",
                "+\t    File.write(path, Utils::JSON.generate(doc))",
                "+    end",
                "+",
                "+    def self.advertise_readiness",
                "+\t    work_dir = ENV['PASSENGER_SPAWN_WORK_DIR']",
                "+\t    path = work_dir + '/response/finish'",
                "+\t    File.write(path, '1')",
                "     end",
                "@@ -58,6 +101,20 @@ module PhusionPassenger",
                "     def self.init_passenger",
                "-      require \"#{options[\"ruby_libdir\"]}/phusion_passenger\"",
                "-      PhusionPassenger.locate_directories(options[\"passenger_root\"])",
                "-      PhusionPassenger.require_passenger_lib 'message_channel'",
                "-      PhusionPassenger.require_passenger_lib 'utils/tmpio'",
                "+      STDOUT.sync = true",
                "+      STDERR.sync = true",
                "+",
                "+      work_dir = ENV['PASSENGER_SPAWN_WORK_DIR'].to_s",
                "+      if work_dir.empty?",
                "+        abort \"This program may only be invoked from Passenger (error: $PASSENGER_SPAWN_WORK_DIR not set).\"",
                "+      end",
                "+",
                "+      ruby_libdir = File.read(\"#{work_dir}/args/ruby_libdir\").strip",
                "+      passenger_root = File.read(\"#{work_dir}/args/passenger_root\").strip",
                "+      require \"#{ruby_libdir}/phusion_passenger\"",
                "+      PhusionPassenger.locate_directories(passenger_root)",
                "+",
                "+      PhusionPassenger.require_passenger_lib 'loader_shared_helpers'",
                "+      PhusionPassenger.require_passenger_lib 'preloader_shared_helpers'",
                "+      PhusionPassenger.require_passenger_lib 'utils/json'",
                "+      require 'socket'",
                "+",
                "     end",
                "@@ -113,7 +170,7 @@ module PhusionPassenger",
                "         Process.setpgrp",
                "-        ",
                "+",
                "         if options[\"environment\"] == \"production\"",
                "-          puts(\"Warning: meteor running in simulated production mode (--production). For real production use, bundle your app.\")",
                "+          logger.warn(\"Warning: meteor running in simulated production mode (--production). For real production use, bundle your app.\")",
                "         end",
                "-        ",
                "+",
                "         if options[\"meteor_app_settings\"]",
                "@@ -121,3 +178,3 @@ module PhusionPassenger",
                "           app_settings_file = Shellwords.escape(options[\"meteor_app_settings\"])",
                "-          puts(\"Using application settings from file #{app_settings_file}\")",
                "+          logger.info(\"Using application settings from file #{app_settings_file}\")",
                "           exec(\"meteor run -p #{port} --settings #{app_settings_file} #{production}\")",
                "@@ -144,6 +201,29 @@ module PhusionPassenger",
                "-    handshake_and_read_startup_request",
                "     init_passenger",
                "+    init_logging",
                "+",
                "+    record_journey_step_end('SUBPROCESS_EXEC_WRAPPER', 'STEP_PERFORMED')",
                "+",
                "+    record_journey_step_begin('SUBPROCESS_WRAPPER_PREPARATION', 'STEP_IN_PROGRESS')",
                "     begin",
                "-      pid, port = load_app",
                "+\t\t  read_startup_arguments",
                "+    rescue Exception",
                "+\t\t  record_journey_step_end('SUBPROCESS_WRAPPER_PREPARATION', 'STEP_ERRORED')",
                "+\t\t  raise",
                "+\t  else",
                "+\t\t  record_journey_step_end('SUBPROCESS_WRAPPER_PREPARATION', 'STEP_PERFORMED')",
                "+    end",
                "+",
                "+    record_journey_step_begin('SUBPROCESS_APP_LOAD_OR_EXEC', 'STEP_IN_PROGRESS')",
                "+    begin",
                "+\t\t  pid, port = load_app",
                "+\t  rescue Exception",
                "+\t\t  record_journey_step_end('SUBPROCESS_APP_LOAD_OR_EXEC', 'STEP_ERRORED')",
                "+\t\t  raise",
                "+\t  else",
                "+\t\t  record_journey_step_end('SUBPROCESS_APP_LOAD_OR_EXEC', 'STEP_PERFORMED')",
                "+    end",
                "+",
                "+    record_journey_step_begin('SUBPROCESS_LISTEN', 'STEP_IN_PROGRESS')",
                "+\t  begin",
                "       while !ping_port(port)",
                "@@ -151,6 +231,13 @@ module PhusionPassenger",
                "       end",
                "-      puts \"!> Ready\"",
                "-      puts \"!> socket: main;tcp://127.0.0.1:#{port};http_session;0\"",
                "-      puts \"!> \"",
                "-      wait_for_exit_message",
                "+\t  rescue Exception",
                "+\t\t  record_journey_step_end('SUBPROCESS_LISTEN', 'STEP_ERRORED')",
                "+\t\t  raise",
                "+\t  else",
                "+\t\t  record_journey_step_end('SUBPROCESS_LISTEN', 'STEP_PERFORMED')",
                "+    end",
                "+",
                "+    advertise_port(port)",
                "+    advertise_readiness",
                "+    begin",
                "+\t    wait_for_exit_message",
                "     ensure"
            ],
            "changed_files": [
                "src/helper-scripts/meteor-loader.rb"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8621779f4680ac45d4faf3b725873024225dd4df",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527663903,
            "hunks": 4,
            "message": "HandshakePerformTest: assert that expected exceptions are actually thrown",
            "diff": [
                "diff --git a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "index 89ac21e87..ccc6ae356 100644",
                "--- a/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "+++ b/test/cxx/Core/SpawningKit/HandshakePerformTest.cpp",
                "@@ -543,2 +543,3 @@ namespace tut {",
                " \t\t\texecute();",
                "+\t\t\tfail(\"SpawnException expected\");",
                " \t\t} catch (const SpawnException &e) {",
                "@@ -563,2 +564,3 @@ namespace tut {",
                " \t\t\texecute();",
                "+\t\t\tfail(\"SpawnException expected\");",
                " \t\t} catch (const SpawnException &e) {",
                "@@ -605,2 +607,3 @@ namespace tut {",
                " \t\t\texecute();",
                "+\t\t\tfail(\"SpawnException expected\");",
                " \t\t} catch (const SpawnException &e) {",
                "@@ -621,2 +624,3 @@ namespace tut {",
                " \t\t\texecute();",
                "+\t\t\tfail(\"SpawnException expected\");",
                " \t\t} catch (const SpawnException &e) {"
            ],
            "changed_files": [
                "test/cxx/Core/SpawningKit/HandshakePerformTest.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f00947bd987593e923c3b300e28d1a3fa3818d65",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527710065,
            "hunks": 4,
            "message": "monoTimeToJson(): check for ctime_r() errors",
            "diff": [
                "diff --git a/src/cxx_supportlib/Utils/JsonUtils.h b/src/cxx_supportlib/Utils/JsonUtils.h",
                "index 2698dcfa0..6f1de032c 100644",
                "--- a/src/cxx_supportlib/Utils/JsonUtils.h",
                "+++ b/src/cxx_supportlib/Utils/JsonUtils.h",
                "@@ -2,3 +2,3 @@",
                "  *  Phusion Passenger - https://www.phusionpassenger.com/",
                "- *  Copyright (c) 2014-2017 Phusion Holding B.V.",
                "+ *  Copyright (c) 2014-2018 Phusion Holding B.V.",
                "  *",
                "@@ -323,9 +323,11 @@ monoTimeToJson(MonotonicTimeUsec t, MonotonicTimeUsec monoNow, unsigned long lon",
                " \ttime_t wallClockTime = (time_t) (wallClockTimeUsec / 1000000ull);",
                "-\tchar timeStr[32];",
                "+\tchar timeStr[32], *ctimeResult;",
                " \tsize_t len;",
                "-\tctime_r(&wallClockTime, timeStr);",
                "-\tlen = strlen(timeStr);",
                "-\tif (len > 0) {",
                "-\t\t// Get rid of trailing newline",
                "-\t\ttimeStr[len - 1] = '\\0';",
                "+\tctimeResult = ctime_r(&wallClockTime, timeStr);",
                "+\tif (ctimeResult != NULL) {",
                "+\t\tlen = strlen(timeStr);",
                "+\t\tif (len > 0) {",
                "+\t\t\t// Get rid of trailing newline",
                "+\t\t\ttimeStr[len - 1] = '\\0';",
                "+\t\t}",
                " \t}",
                "@@ -334,3 +336,5 @@ monoTimeToJson(MonotonicTimeUsec t, MonotonicTimeUsec monoNow, unsigned long lon",
                " \tdoc[\"timestamp\"] = wallClockTimeUsec / 1000000.0;",
                "-\tdoc[\"local\"] = timeStr;",
                "+\tif (ctimeResult != NULL) {",
                "+\t\tdoc[\"local\"] = timeStr;",
                "+\t}",
                " \tif (t > monoNow) {"
            ],
            "changed_files": [
                "src/cxx_supportlib/Utils/JsonUtils.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a960f5840738c476dee2738e747a5b2572dc3d66",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527662717,
            "hunks": 1,
            "message": "makeDirTree(): use lchown for limited protection against symlink attacks This does not make it immune to symlink attacks but makes things at least a little bit better. True fixes must come from callers.",
            "diff": [
                "diff --git a/src/cxx_supportlib/FileTools/FileManip.cpp b/src/cxx_supportlib/FileTools/FileManip.cpp",
                "index be44b8a7f..36d29613e 100644",
                "--- a/src/cxx_supportlib/FileTools/FileManip.cpp",
                "+++ b/src/cxx_supportlib/FileTools/FileManip.cpp",
                "@@ -242,3 +242,3 @@ makeDirTree(const string &path, const StaticString &mode, uid_t owner, gid_t gro",
                " \t\t\tdo {",
                "-\t\t\t\tret = chown(current.c_str(), owner, group);",
                "+\t\t\t\tret = lchown(current.c_str(), owner, group);",
                " \t\t\t} while (ret == -1 && errno == EINTR);"
            ],
            "changed_files": [
                "src/cxx_supportlib/FileTools/FileManip.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6b6a92bf5b212ea447dbc3a819ec03141e2ec6ea",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527588880,
            "hunks": 4,
            "message": "oxt/system_calls: add wrappers for openat()",
            "diff": [
                "diff --git a/src/cxx_supportlib/oxt/system_calls.cpp b/src/cxx_supportlib/oxt/system_calls.cpp",
                "index f40a7451a..c4e12b190 100644",
                "--- a/src/cxx_supportlib/oxt/system_calls.cpp",
                "+++ b/src/cxx_supportlib/oxt/system_calls.cpp",
                "@@ -4,3 +4,3 @@",
                "  *",
                "- * Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+ * Copyright (c) 2010-2018 Phusion Holding B.V.",
                "  *",
                "@@ -173,2 +173,26 @@ syscalls::open(const char *path, int oflag, mode_t mode) {",
                "+int",
                "+syscalls::openat(int dirfd, const char *path, int oflag) {",
                "+\tint ret;",
                "+\tCHECK_INTERRUPTION(",
                "+\t\tret == -1,",
                "+\t\ttrue,",
                "+\t\tret = -1,",
                "+\t\tret = ::openat(dirfd, path, oflag)",
                "+\t);",
                "+\treturn ret;",
                "+}",
                "+",
                "+int",
                "+syscalls::openat(int dirfd, const char *path, int oflag, mode_t mode) {",
                "+\tint ret;",
                "+\tCHECK_INTERRUPTION(",
                "+\t\tret == -1,",
                "+\t\ttrue,",
                "+\t\tret = -1,",
                "+\t\tret = ::openat(dirfd, path, oflag, mode)",
                "+\t);",
                "+\treturn ret;",
                "+}",
                "+",
                " ssize_t",
                "diff --git a/src/cxx_supportlib/oxt/system_calls.hpp b/src/cxx_supportlib/oxt/system_calls.hpp",
                "index 1d24d2ee0..da2dbab39 100644",
                "--- a/src/cxx_supportlib/oxt/system_calls.hpp",
                "+++ b/src/cxx_supportlib/oxt/system_calls.hpp",
                "@@ -4,3 +4,3 @@",
                "  *",
                "- * Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+ * Copyright (c) 2010-2018 Phusion Holding B.V.",
                "  *",
                "@@ -138,2 +138,4 @@ namespace oxt {",
                " \t\tint open(const char *path, int oflag, mode_t mode);",
                "+\t\tint openat(int dirfd, const char *path, int oflag);",
                "+\t\tint openat(int dirfd, const char *path, int oflag, mode_t mode);",
                " \t\tssize_t read(int fd, void *buf, size_t count);"
            ],
            "changed_files": [
                "src/cxx_supportlib/oxt/system_calls.cpp",
                "src/cxx_supportlib/oxt/system_calls.hpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "170ded2fce6b0169d4375c28c174cf1747825619",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527710036,
            "hunks": 1,
            "message": "SystemTime: fix mocking the monotonic clock",
            "diff": [
                "diff --git a/src/cxx_supportlib/Utils/SystemTime.h b/src/cxx_supportlib/Utils/SystemTime.h",
                "index 87a82d2e7..708c42a71 100644",
                "--- a/src/cxx_supportlib/Utils/SystemTime.h",
                "+++ b/src/cxx_supportlib/Utils/SystemTime.h",
                "@@ -118,3 +118,3 @@ private:",
                " \t\tif (OXT_UNLIKELY(SystemTimeData::hasForcedUsecValue)) {",
                "-\t\t\treturn SystemTimeData::hasForcedValue;",
                "+\t\t\treturn SystemTimeData::forcedUsecValue;",
                " \t\t}"
            ],
            "changed_files": [
                "src/cxx_supportlib/Utils/SystemTime.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c7713bb16b01907307cabdefac4ad985eddc5abb",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527512871,
            "hunks": 5,
            "message": "AsyncSignalSafeUtils::limitedStrerr(): add support for error codes returned by exec*()",
            "diff": [
                "diff --git a/src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h b/src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h",
                "index 0568f90af..a26d242bf 100644",
                "--- a/src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h",
                "+++ b/src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h",
                "@@ -161,8 +161,20 @@ limitedStrerror(int e, const char *defaultResult = \"Unknown error\") {",
                " \t\treturn \"Bad address\";",
                "+\tcase EINVAL:",
                "+\t\treturn \"Invalid argument\";",
                " \tcase EIO:",
                " \t\treturn \"Input/output error\";",
                "+\tcase EISDIR:",
                "+\t\treturn \"Is a directory\";",
                "+\t#ifdef ELIBBAD",
                "+\t\tcase ELIBBAD:",
                "+\t\t\treturn \"Accessing a corrupted shared library\";",
                "+\t#endif",
                " \tcase ELOOP:",
                " \t\treturn \"Too many levels of symbolic links\";",
                "+\tcase EMFILE:",
                "+\t\treturn \"Too many open files\";",
                " \tcase ENAMETOOLONG:",
                " \t\treturn \"File name too long\";",
                "+\tcase ENFILE:",
                "+\t\treturn \"Too many open files in system\";",
                " \tcase ENOENT:",
                "@@ -175,2 +187,4 @@ limitedStrerror(int e, const char *defaultResult = \"Unknown error\") {",
                " \t\treturn \"Not a directory\";",
                "+\tcase EPERM:",
                "+\t\treturn \"Operation not permitted\";",
                " \tcase ETXTBSY:"
            ],
            "changed_files": [
                "src/cxx_supportlib/Utils/AsyncSignalSafeUtils.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f100c81b578ffac9ef93fe0679f9fe17449d788d",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527500324,
            "hunks": 2,
            "message": "absolutizePath: protect against NULL termination problem We do not know whether getcwd() is guaranteed to NULL-terminate the output string when the buffer is full. The documentation is not clear about this. So we guarantee NULL termination just in case.",
            "diff": [
                "diff --git a/src/cxx_supportlib/FileTools/PathManip.cpp b/src/cxx_supportlib/FileTools/PathManip.cpp",
                "index 650ecda66..86f92fed6 100644",
                "--- a/src/cxx_supportlib/FileTools/PathManip.cpp",
                "+++ b/src/cxx_supportlib/FileTools/PathManip.cpp",
                "@@ -86,4 +86,4 @@ absolutizePath(const StaticString &path, const StaticString &workingDir) {",
                " \t\tif (workingDir.empty()) {",
                "-\t\t\tchar buffer[PATH_MAX];",
                "-\t\t\tif (getcwd(buffer, sizeof(buffer)) == NULL) {",
                "+\t\t\tchar buffer[PATH_MAX + 1];",
                "+\t\t\tif (getcwd(buffer, PATH_MAX) == NULL) {",
                " \t\t\t\tint e = errno;",
                "@@ -91,2 +91,3 @@ absolutizePath(const StaticString &path, const StaticString &workingDir) {",
                " \t\t\t}",
                "+\t\t\tbuffer[PATH_MAX] = '\\0';",
                " \t\t\tsplit(buffer + 1, '/', components);"
            ],
            "changed_files": [
                "src/cxx_supportlib/FileTools/PathManip.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9ed61bb4641ba1f5158fca3840d4e4088805b5af",
            "repository": "https://github.com/phusion/passenger",
            "timestamp": 1527659418,
            "hunks": 12,
            "message": "Ruby code: use {f,l}{chmod,chown} where possible to protect against symlink attacks Some of the changes (in particular the one in #mkdir_p_preserve_parent_owner) do not offer full protection but these changes are better than nothing and set a precedence for good practices in the codebase.",
            "diff": [
                "diff --git a/src/helper-scripts/rack-preloader.rb b/src/helper-scripts/rack-preloader.rb",
                "index 135edd9ba..a7c734f55 100644",
                "--- a/src/helper-scripts/rack-preloader.rb",
                "+++ b/src/helper-scripts/rack-preloader.rb",
                "@@ -3,3 +3,3 @@",
                " #  Phusion Passenger - https://www.phusionpassenger.com/",
                "-#  Copyright (c) 2013-2017 Phusion Holding B.V.",
                "+#  Copyright (c) 2013-2018 Phusion Holding B.V.",
                " #",
                "diff --git a/src/ruby_supportlib/phusion_passenger/config/installation_utils.rb b/src/ruby_supportlib/phusion_passenger/config/installation_utils.rb",
                "index b4ddf43a2..34f3a2857 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/config/installation_utils.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/config/installation_utils.rb",
                "@@ -3,3 +3,3 @@",
                " #  Phusion Passenger - https://www.phusionpassenger.com/",
                "-#  Copyright (c) 2014-2017 Phusion Holding B.V.",
                "+#  Copyright (c) 2014-2018 Phusion Holding B.V.",
                " #",
                "@@ -229,3 +229,3 @@ module PhusionPassenger",
                "       # parent directory's UID and GID. This way, running `passenger-config compile-agent`",
                "-      # with sudo privileged, even though Phusion Passenger isn't installed as root,",
                "+      # with sudo privilege, even though Phusion Passenger isn't installed as root,",
                "       # won't mess up permissions.",
                "@@ -237,3 +237,3 @@ module PhusionPassenger",
                "             if Process.euid == 0",
                "-              File.chown(stat.uid, stat.gid, subpath.to_s)",
                "+              File.lchown(stat.uid, stat.gid, subpath.to_s)",
                "             end",
                "diff --git a/src/ruby_supportlib/phusion_passenger/platform_info.rb b/src/ruby_supportlib/phusion_passenger/platform_info.rb",
                "index 5fa1e1192..bfd16886b 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/platform_info.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/platform_info.rb",
                "@@ -2,3 +2,3 @@",
                " #  Phusion Passenger - https://www.phusionpassenger.com/",
                "-#  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+#  Copyright (c) 2010-2018 Phusion Holding B.V.",
                " #",
                "@@ -262,5 +262,5 @@ module PhusionPassenger",
                "         File.open(filename, 'w') do |f|",
                "+          f.chmod(0700)",
                "           f.puts(\"#!/bin/sh\")",
                "         end",
                "-        File.chmod(0700, filename)",
                "         if system(filename)",
                "@@ -285,5 +285,5 @@ module PhusionPassenger",
                "         File.open(filename, 'w') do |f|",
                "+          f.chmod(0700, filename)",
                "           f.puts(\"#!/bin/sh\")",
                "         end",
                "-        File.chmod(0700, filename)",
                "         if system(filename)",
                "diff --git a/src/ruby_supportlib/phusion_passenger/request_handler.rb b/src/ruby_supportlib/phusion_passenger/request_handler.rb",
                "index 801b28144..1a89cd3af 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/request_handler.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/request_handler.rb",
                "@@ -2,3 +2,3 @@",
                " #  Phusion Passenger - https://www.phusionpassenger.com/",
                "-#  Copyright (c) 2010-2017 Phusion Holding B.V.",
                "+#  Copyright (c) 2010-2018 Phusion Holding B.V.",
                " #",
                "diff --git a/src/ruby_supportlib/phusion_passenger/vendor/daemon_controller.rb b/src/ruby_supportlib/phusion_passenger/vendor/daemon_controller.rb",
                "index 811246253..8074ce536 100644",
                "--- a/src/ruby_supportlib/phusion_passenger/vendor/daemon_controller.rb",
                "+++ b/src/ruby_supportlib/phusion_passenger/vendor/daemon_controller.rb",
                "@@ -650,4 +650,4 @@ private",
                "     tempfile = Tempfile.new('daemon-output')",
                "+    tempfile.chmod(0666)",
                "     tempfile_path = tempfile.path",
                "-    File.chmod(0666, tempfile_path)",
                "     tempfile.close"
            ],
            "changed_files": [
                "src/helper-scripts/rack-preloader.rb",
                "src/ruby_supportlib/phusion_passenger/config/installation_utils.rb",
                "src/ruby_supportlib/phusion_passenger/platform_info.rb",
                "src/ruby_supportlib/phusion_passenger/request_handler.rb",
                "src/ruby_supportlib/phusion_passenger/vendor/daemon_controller.rb"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.3.2",
                "release-5.3.3",
                "release-5.3.4",
                "release-5.3.5",
                "release-5.3.6",
                "release-5.3.7",
                "release-6.0.0",
                "release-6.0.1",
                "release-6.0.10",
                "release-6.0.11",
                "release-6.0.12",
                "release-6.0.13",
                "release-6.0.14",
                "release-6.0.15",
                "release-6.0.16",
                "release-6.0.17",
                "release-6.0.18",
                "release-6.0.19",
                "release-6.0.2",
                "release-6.0.20",
                "release-6.0.21",
                "release-6.0.22",
                "release-6.0.3",
                "release-6.0.4",
                "release-6.0.5",
                "release-6.0.6",
                "release-6.0.7",
                "release-6.0.8",
                "release-6.0.9"
            ],
            "matched_rules": []
        }
    ]
}
