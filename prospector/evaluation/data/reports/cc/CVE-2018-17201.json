{
    "advisory_record": {
        "cve_id": "CVE-2018-17201",
        "description": "Certain input files could make the code hang when Apache Sanselan 0.97-incubator was used to parse them, which could be used in a DoS attack. Note that Apache Sanselan (incubating) was renamed to Apache Commons Imaging.",
        "reserved_timestamp": 1537315200,
        "published_timestamp": 1557162431,
        "updated_timestamp": 1557162430,
        "repository_url": null,
        "references": {
            "": 3,
            "https://lists.apache.org/thread.html/cd37861963aa6d2694c8947d464c99614d3e1a9db6c1a2a8b7b5840a%40%3Cdev.commons.apache.org%3E": 2
        },
        "affected_products": [
            "Apache Commons Imaging",
            "Apache",
            "Commons",
            "Imaging",
            "Sanselan",
            "DoS"
        ],
        "versions": {
            "status": "affected",
            "version": "Apache Sanselan 0.97-incubator"
        },
        "files": [
            "DoS"
        ],
        "keywords": [
            "incubating",
            "incubator",
            "rename",
            "attack",
            "imaging",
            "make",
            "file",
            "parse",
            "apache",
            "commons",
            "input",
            "sanselan",
            "note",
            "code",
            "hang"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "071e63ed72e29d2394fa7db74af9a69ecd0614f0",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1533903062,
            "hunks": 5,
            "message": "IMAGING-124: Tidy up IconParser",
            "diff": [
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index d06dbbd4..1b4b2fae 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -48,2 +48,5 @@ The <action> type attribute can be add,update,fix,remove.",
                "     <release version=\"1.0\" date=\"TBA\" description=\"First major release\">",
                "+      <action issue=\"IMAGING-124\" dev=\"kinow\" type=\"update\" due-to=\"Jens Kapitza\">",
                "+        Tidy up IconParser",
                "+      </action>",
                "       <action issue=\"IMAGING-215\" dev=\"kinow\" type=\"fix\">",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java b/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java",
                "index 238f6d33..5764de39 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java",
                "@@ -718,11 +718,6 @@ public class IcoImageParser extends ImageParser {",
                "                     final int argb = palette.getEntry(i);",
                "-                    bos.write(0xff & argb);",
                "-                    bos.write(0xff & (argb >> 8));",
                "-                    bos.write(0xff & (argb >> 16));",
                "+                    bos.write3Bytes(argb);",
                "                     bos.write(0);",
                "                 } else {",
                "-                    bos.write(0);",
                "-                    bos.write(0);",
                "-                    bos.write(0);",
                "-                    bos.write(0);",
                "+                    bos.write4Bytes(0);",
                "                 }",
                "@@ -753,10 +748,5 @@ public class IcoImageParser extends ImageParser {",
                "                 } else if (bitCount == 24) {",
                "-                    bos.write(0xff & argb);",
                "-                    bos.write(0xff & (argb >> 8));",
                "-                    bos.write(0xff & (argb >> 16));",
                "+                    bos.write3Bytes(argb);",
                "                 } else if (bitCount == 32) {",
                "-                    bos.write(0xff & argb);",
                "-                    bos.write(0xff & (argb >> 8));",
                "-                    bos.write(0xff & (argb >> 16));",
                "-                    bos.write(0xff & (argb >> 24));",
                "+                    bos.write4Bytes(argb);",
                "                 }"
            ],
            "changed_files": [
                "src/changes/changes.xml",
                "src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-124": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parse",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse, hang",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-124",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8f8655bb5bb50213227aeafcb2887975119577df",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1534324715,
            "hunks": 258,
            "message": "IMAGING-154: make Debug internal only, and replace System.out by java.util.logging.Logger",
            "diff": [
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index 1b4b2fae..120b2f48 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -48,2 +48,5 @@ The <action> type attribute can be add,update,fix,remove.",
                "     <release version=\"1.0\" date=\"TBA\" description=\"First major release\">",
                "+      <action issue=\"IMAGING-154\" dev=\"kinow\" type=\"update\">",
                "+        Remove Debug class",
                "+      </action>",
                "       <action issue=\"IMAGING-124\" dev=\"kinow\" type=\"update\" due-to=\"Jens Kapitza\">",
                "diff --git a/src/main/java/org/apache/commons/imaging/FormatCompliance.java b/src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "index 80433221..21071c6d 100644",
                "--- a/src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "+++ b/src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "@@ -18,8 +18,9 @@ package org.apache.commons.imaging;",
                "-import java.io.OutputStreamWriter;",
                "+import java.io.IOException;",
                " import java.io.PrintWriter;",
                " import java.io.StringWriter;",
                "-import java.nio.charset.Charset;",
                " import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -30,2 +31,5 @@ import java.util.List;",
                " public class FormatCompliance {",
                "+",
                "+    private final static Logger LOGGER = Logger.getLogger(FormatCompliance.class.getName());",
                "+",
                "     private final boolean failOnError;",
                "@@ -70,3 +74,10 @@ public class FormatCompliance {",
                "     public void dump() {",
                "-        dump(new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset())));",
                "+        try (StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw)) {",
                "+            dump(pw);",
                "+            pw.flush();",
                "+            sw.flush();",
                "+            LOGGER.fine(sw.toString());",
                "+        } catch (IOException e) {",
                "+            LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "+        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/ImageDump.java b/src/main/java/org/apache/commons/imaging/ImageDump.java",
                "index 10add5da..25397da9 100644",
                "--- a/src/main/java/org/apache/commons/imaging/ImageDump.java",
                "+++ b/src/main/java/org/apache/commons/imaging/ImageDump.java",
                "@@ -22,2 +22,3 @@ import java.awt.color.ICC_Profile;",
                " import java.awt.image.BufferedImage;",
                "+import java.util.logging.Logger;",
                "@@ -31,2 +32,5 @@ import org.apache.commons.imaging.icc.IccProfileParser;",
                " public class ImageDump {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(ImageDump.class.getName());",
                "+",
                "     private String colorSpaceTypeToName(final ColorSpace cs) {",
                "@@ -56,3 +60,3 @@ public class ImageDump {",
                "     public void dumpColorSpace(final String prefix, final ColorSpace cs) {",
                "-        System.out.println(prefix + \": \" + \"type: \" + cs.getType() + \" (\"",
                "+        LOGGER.fine(prefix + \": \" + \"type: \" + cs.getType() + \" (\"",
                "                 + colorSpaceTypeToName(cs) + \")\");",
                "@@ -60,3 +64,3 @@ public class ImageDump {",
                "         if (!(cs instanceof ICC_ColorSpace)) {",
                "-            System.out.println(prefix + \": \" + \"Unknown ColorSpace: \"",
                "+            LOGGER.fine(prefix + \": \" + \"Unknown ColorSpace: \"",
                "                     + cs.getClass().getName());",
                "@@ -81,3 +85,3 @@ public class ImageDump {",
                "     public void dump(final String prefix, final BufferedImage src) {",
                "-        System.out.println(prefix + \": \" + \"dump\");",
                "+        LOGGER.fine(prefix + \": \" + \"dump\");",
                "         dumpColorSpace(prefix, src.getColorModel().getColorSpace());",
                "@@ -89,3 +93,3 @@ public class ImageDump {",
                "         if (keys == null) {",
                "-            System.out.println(prefix + \": no props\");",
                "+            LOGGER.fine(prefix + \": no props\");",
                "             return;",
                "@@ -93,3 +97,3 @@ public class ImageDump {",
                "         for (final String key : keys) {",
                "-            System.out.println(prefix + \": \" + key + \": \"",
                "+            LOGGER.fine(prefix + \": \" + key + \": \"",
                "                     + src.getProperty(key));",
                "diff --git a/src/main/java/org/apache/commons/imaging/ImageInfo.java b/src/main/java/org/apache/commons/imaging/ImageInfo.java",
                "index e9de2eff..b85e7491 100644",
                "--- a/src/main/java/org/apache/commons/imaging/ImageInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/ImageInfo.java",
                "@@ -22,2 +22,3 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.logging.Logger;",
                "@@ -78,2 +79,4 @@ public class ImageInfo {",
                "+    private static final Logger LOGGER = Logger.getLogger(ImageInfo.class.getName());",
                "+",
                "     private final String formatDetails; // ie version",
                "@@ -276,3 +279,3 @@ public class ImageInfo {",
                "     public void dump() {",
                "-        System.out.print(toString());",
                "+        LOGGER.fine(toString());",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/ImageParser.java b/src/main/java/org/apache/commons/imaging/ImageParser.java",
                "index 1ad0ea3d..673ac47c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/ImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/ImageParser.java",
                "@@ -29,2 +29,4 @@ import java.util.Locale;",
                " import java.util.Map;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -99,2 +101,4 @@ public abstract class ImageParser extends BinaryFileParser {",
                "+    private static final Logger LOGGER = Logger.getLogger(ImageParser.class.getName());",
                "+",
                "     /**",
                "@@ -268,5 +272,4 @@ public abstract class ImageParser extends BinaryFileParser {",
                "             throws ImageReadException, IOException {",
                "-        if (getDebug()) {",
                "-            System.out.println(getName() + \".getMetadata\" + \": \"",
                "-                    + file.getName());",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(getName() + \".getMetadata\" + \": \" + file.getName());",
                "         }",
                "@@ -758,4 +761,4 @@ public abstract class ImageParser extends BinaryFileParser {",
                "-        if (getDebug()) {",
                "-            System.out.println(getName() + \": \" + file.getName());",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(getName() + \": \" + file.getName());",
                "         }",
                "@@ -814,4 +817,4 @@ public abstract class ImageParser extends BinaryFileParser {",
                "-        if (getDebug()) {",
                "-            System.out.println(getName() + \": \" + file.getName());",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(getName() + \": \" + file.getName());",
                "         }",
                "diff --git a/src/main/java/org/apache/commons/imaging/ImagingConstants.java b/src/main/java/org/apache/commons/imaging/ImagingConstants.java",
                "index 6302249b..91819cff 100644",
                "--- a/src/main/java/org/apache/commons/imaging/ImagingConstants.java",
                "+++ b/src/main/java/org/apache/commons/imaging/ImagingConstants.java",
                "@@ -27,9 +27,2 @@ public final class ImagingConstants {",
                "-    /**",
                "-     * Parameter key. Applies to read and write operations.",
                "-     * <p>",
                "-     * Valid values: Boolean.TRUE and Boolean.FALSE.",
                "-     */",
                "-    public static final String PARAM_KEY_VERBOSE = \"VERBOSE\";",
                "-",
                "     /**",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/BinaryFileParser.java b/src/main/java/org/apache/commons/imaging/common/BinaryFileParser.java",
                "index 09c1245f..c14c726d 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/BinaryFileParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/BinaryFileParser.java",
                "@@ -18,11 +18,15 @@ package org.apache.commons.imaging.common;",
                "-import java.io.OutputStreamWriter;",
                "+import java.io.IOException;",
                " import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                " import java.nio.ByteOrder;",
                "-import java.nio.charset.Charset;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                " public class BinaryFileParser {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(BinaryFileParser.class.getName());",
                "+",
                "     // default byte order for Java, many file formats.",
                "     private ByteOrder byteOrder = ByteOrder.BIG_ENDIAN;",
                "-    private boolean debug;",
                "@@ -47,14 +51,11 @@ public class BinaryFileParser {",
                "-    public boolean getDebug() {",
                "-        return debug;",
                "-    }",
                "-",
                "-    public void setDebug(final boolean debug) {",
                "-        this.debug = debug;",
                "-    }",
                "-",
                "     protected final void debugNumber(final String msg, final int data, final int bytes) {",
                "-        final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()));",
                "-        debugNumber(pw, msg, data, bytes);",
                "-        pw.flush();",
                "+        try (StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw)) {",
                "+            debugNumber(pw, msg, data, bytes);",
                "+            pw.flush();",
                "+            sw.flush();",
                "+            LOGGER.fine(sw.toString());",
                "+        } catch (IOException e) {",
                "+            LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "+        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/BinaryFunctions.java b/src/main/java/org/apache/commons/imaging/common/BinaryFunctions.java",
                "index eb9b5b91..c452cb91 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/BinaryFunctions.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/BinaryFunctions.java",
                "@@ -25,2 +25,3 @@ import java.io.RandomAccessFile;",
                " import java.nio.ByteOrder;",
                "+import java.util.logging.Logger;",
                "@@ -32,2 +33,5 @@ import org.apache.commons.imaging.ImageReadException;",
                " public final class BinaryFunctions {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(BinaryFunctions.class.getName());",
                "+",
                "     private BinaryFunctions() {",
                "@@ -247,3 +251,3 @@ public final class BinaryFunctions {",
                "     public static void printCharQuad(final String msg, final int i) {",
                "-        System.out.println(msg + \": '\" + (char) (0xff & (i >> 24))",
                "+        LOGGER.finest(msg + \": '\" + (char) (0xff & (i >> 24))",
                "                 + (char) (0xff & (i >> 16)) + (char) (0xff & (i >> 8))",
                "@@ -261,3 +265,3 @@ public final class BinaryFunctions {",
                "     public static void printByteBits(final String msg, final byte i) {",
                "-        System.out.println(msg + \": '\" + Integer.toBinaryString(0xff & i));",
                "+        LOGGER.finest(msg + \": '\" + Integer.toBinaryString(0xff & i));",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java",
                "index 1fdff5d8..f1e696c2 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java",
                "@@ -21,3 +21,2 @@ import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_FORMAT;",
                " import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_PIXEL_DENSITY;",
                "-import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_VERBOSE;",
                " import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "@@ -39,2 +38,4 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -56,2 +57,5 @@ import org.apache.commons.imaging.palette.SimplePalette;",
                " public class BmpImageParser extends ImageParser {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(BmpImageParser.class.getName());",
                "+",
                "     private static final String DEFAULT_EXTENSION = \".bmp\";",
                "@@ -92,3 +96,3 @@ public class BmpImageParser extends ImageParser {",
                "     private BmpHeaderInfo readBmpHeaderInfo(final InputStream is,",
                "-            final FormatCompliance formatCompliance, final boolean verbose)",
                "+            final FormatCompliance formatCompliance)",
                "             throws ImageReadException, IOException {",
                "@@ -186,3 +190,3 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "             debugNumber(\"identifier1\", identifier1, 1);",
                "@@ -302,5 +306,5 @@ public class BmpImageParser extends ImageParser {",
                "     private BmpImageContents readImageContents(final InputStream is,",
                "-            final FormatCompliance formatCompliance, final boolean verbose)",
                "+            final FormatCompliance formatCompliance)",
                "             throws ImageReadException, IOException {",
                "-        final BmpHeaderInfo bhi = readBmpHeaderInfo(is, formatCompliance, verbose);",
                "+        final BmpHeaderInfo bhi = readBmpHeaderInfo(is, formatCompliance);",
                "@@ -311,3 +315,3 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "             debugNumber(\"ColorsUsed\", bhi.colorsUsed, 4);",
                "@@ -328,4 +332,4 @@ public class BmpImageParser extends ImageParser {",
                "         case BI_RGB:",
                "-            if (verbose) {",
                "-                System.out.println(\"Compression: BI_RGB\");",
                "+            if (LOGGER.isLoggable(Level.FINE)) {",
                "+                LOGGER.fine(\"Compression: BI_RGB\");",
                "             }",
                "@@ -343,4 +347,4 @@ public class BmpImageParser extends ImageParser {",
                "         case BI_RLE4:",
                "-            if (verbose) {",
                "-                System.out.println(\"Compression: BI_RLE4\");",
                "+            if (LOGGER.isLoggable(Level.FINE)) {",
                "+                LOGGER.fine(\"Compression: BI_RLE4\");",
                "             }",
                "@@ -355,4 +359,4 @@ public class BmpImageParser extends ImageParser {",
                "         case BI_RLE8:",
                "-            if (verbose) {",
                "-                System.out.println(\"Compression: BI_RLE8\");",
                "+            if (LOGGER.isLoggable(Level.FINE)) {",
                "+                LOGGER.fine(\"Compression: BI_RLE8\");",
                "             }",
                "@@ -367,4 +371,4 @@ public class BmpImageParser extends ImageParser {",
                "         case BI_BITFIELDS:",
                "-            if (verbose) {",
                "-                System.out.println(\"Compression: BI_BITFIELDS\");",
                "+            if (LOGGER.isLoggable(Level.FINE)) {",
                "+                LOGGER.fine(\"Compression: BI_BITFIELDS\");",
                "             }",
                "@@ -390,5 +394,5 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "             debugNumber(\"paletteLength\", paletteLength, 4);",
                "-            System.out.println(\"ColorTable: \"",
                "+            LOGGER.fine(\"ColorTable: \"",
                "                     + ((colorTable == null) ? \"null\" : Integer.toString(colorTable.length)));",
                "@@ -398,3 +402,3 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "             final int pixelCount = bhi.width * bhi.height;",
                "@@ -422,3 +426,3 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "             debugNumber(\"bhi.BitmapDataOffset\", bhi.bitmapDataOffset, 4);",
                "@@ -438,3 +442,3 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "             debugNumber(\"imageDataSize\", imageDataSize, 4);",
                "@@ -450,3 +454,3 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "             debugNumber(\"ImageData.length\", imageData.length, 4);",
                "@@ -475,7 +479,6 @@ public class BmpImageParser extends ImageParser {",
                "-    private BmpHeaderInfo readBmpHeaderInfo(final ByteSource byteSource,",
                "-            final boolean verbose) throws ImageReadException, IOException {",
                "+    private BmpHeaderInfo readBmpHeaderInfo(final ByteSource byteSource) throws ImageReadException, IOException {",
                "         try (InputStream is = byteSource.getInputStream()) {",
                "             // readSignature(is);",
                "-            final BmpHeaderInfo ret = readBmpHeaderInfo(is, null, verbose);",
                "+            final BmpHeaderInfo ret = readBmpHeaderInfo(is, null);",
                "             return ret;",
                "@@ -496,8 +499,2 @@ public class BmpImageParser extends ImageParser {",
                "-        final boolean verbose =  Boolean.TRUE.equals(params.get(PARAM_KEY_VERBOSE));",
                "-",
                "-        if (params.containsKey(PARAM_KEY_VERBOSE)) {",
                "-            params.remove(PARAM_KEY_VERBOSE);",
                "-        }",
                "-",
                "         if (!params.isEmpty()) {",
                "@@ -507,3 +504,3 @@ public class BmpImageParser extends ImageParser {",
                "-        final BmpHeaderInfo bhi = readBmpHeaderInfo(byteSource, verbose);",
                "+        final BmpHeaderInfo bhi = readBmpHeaderInfo(byteSource);",
                "@@ -553,8 +550,2 @@ public class BmpImageParser extends ImageParser {",
                "-        final boolean verbose =  Boolean.TRUE.equals(params.get(PARAM_KEY_VERBOSE));",
                "-",
                "-        if (params.containsKey(PARAM_KEY_VERBOSE)) {",
                "-            params.remove(PARAM_KEY_VERBOSE);",
                "-        }",
                "-",
                "         if (!params.isEmpty()) {",
                "@@ -566,3 +557,3 @@ public class BmpImageParser extends ImageParser {",
                "         try (InputStream is = byteSource.getInputStream()) {",
                "-            ic = readImageContents(is, FormatCompliance.getDefault(), verbose);",
                "+            ic = readImageContents(is, FormatCompliance.getDefault());",
                "         }",
                "@@ -637,4 +628,2 @@ public class BmpImageParser extends ImageParser {",
                "             throws ImageReadException, IOException {",
                "-        final boolean verbose = false;",
                "-",
                "         final FormatCompliance result = new FormatCompliance(",
                "@@ -643,3 +632,3 @@ public class BmpImageParser extends ImageParser {",
                "         try (InputStream is = byteSource.getInputStream()) {",
                "-            readImageContents(is, result, verbose);",
                "+            readImageContents(is, result);",
                "         }",
                "@@ -663,7 +652,2 @@ public class BmpImageParser extends ImageParser {",
                "-        final boolean verbose = Boolean.TRUE.equals(params.get(PARAM_KEY_VERBOSE));",
                "-",
                "-        if (params.containsKey(PARAM_KEY_VERBOSE)) {",
                "-            params.remove(PARAM_KEY_VERBOSE);",
                "-        }",
                "         if (params.containsKey(BUFFERED_IMAGE_FACTORY)) {",
                "@@ -677,4 +661,3 @@ public class BmpImageParser extends ImageParser {",
                "-        final BmpImageContents ic = readImageContents(inputStream,",
                "-                FormatCompliance.getDefault(), verbose);",
                "+        final BmpImageContents ic = readImageContents(inputStream, FormatCompliance.getDefault());",
                "         if (ic == null) {",
                "@@ -690,7 +673,7 @@ public class BmpImageParser extends ImageParser {",
                "-        if (verbose) {",
                "-            System.out.println(\"width: \" + width);",
                "-            System.out.println(\"height: \" + height);",
                "-            System.out.println(\"width*height: \" + width * height);",
                "-            System.out.println(\"width*height*4: \" + width * height * 4);",
                "+        if (LOGGER.isLoggable(Level.FINE)) {",
                "+            LOGGER.fine(\"width: \" + width);",
                "+            LOGGER.fine(\"height: \" + height);",
                "+            LOGGER.fine(\"width*height: \" + width * height);",
                "+            LOGGER.fine(\"width*height*4: \" + width * height * 4);",
                "         }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "index 11065200..88f6c343 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "@@ -19,2 +19,3 @@ package org.apache.commons.imaging.formats.bmp;",
                " import java.io.IOException;",
                "+import java.util.logging.Logger;",
                "@@ -26,2 +27,4 @@ class PixelParserRle extends PixelParser {",
                "+    private static final Logger LOGGER = Logger.getLogger(PixelParserRle.class.getName());",
                "+",
                "     public PixelParserRle(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "@@ -77,3 +80,3 @@ class PixelParserRle extends PixelParser {",
                "             } else {",
                "-                System.out.println(\"skipping bad pixel (\" + x + \",\" + y + \")\");",
                "+                LOGGER.fine(\"skipping bad pixel (\" + x + \",\" + y + \")\");",
                "             }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java b/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "index ec6eacf9..29e43ac4 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "@@ -49,3 +49,3 @@ import org.apache.commons.imaging.formats.pcx.PcxImageParser;",
                " public class DcxImageParser extends ImageParser {",
                "-    // See http://www.fileformat.info/format/pcx/egff.htm for documentation",
                "+    // See http://www.fileformat.fine/format/pcx/egff.htm for documentation",
                "     private static final String DEFAULT_EXTENSION = \".dcx\";",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java b/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "index 32c603d0..843a2caa 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "@@ -19,3 +19,2 @@ package org.apache.commons.imaging.formats.gif;",
                " import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_FORMAT;",
                "-import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_VERBOSE;",
                " import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_XMP_XML;",
                "@@ -41,2 +40,4 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -59,2 +60,5 @@ import org.apache.commons.imaging.palette.PaletteFactory;",
                " public class GifImageParser extends ImageParser {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(GifImageParser.class.getName());",
                "+",
                "     private static final String DEFAULT_EXTENSION = \".gif\";",
                "@@ -133,3 +137,3 @@ public class GifImageParser extends ImageParser {",
                "-        if (getDebug()) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "             printCharQuad(\"identifier: \", ((identifier1 << 16)",
                "@@ -157,3 +161,3 @@ public class GifImageParser extends ImageParser {",
                "-        if (getDebug()) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "             printByteBits(\"PackedFields bits\", packedFields);",
                "@@ -162,16 +166,16 @@ public class GifImageParser extends ImageParser {",
                "         final boolean globalColorTableFlag = ((packedFields & 128) > 0);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"GlobalColorTableFlag: \" + globalColorTableFlag);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"GlobalColorTableFlag: \" + globalColorTableFlag);",
                "         }",
                "         final byte colorResolution = (byte) ((packedFields >> 4) & 7);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"ColorResolution: \" + colorResolution);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"ColorResolution: \" + colorResolution);",
                "         }",
                "         final boolean sortFlag = ((packedFields & 8) > 0);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"SortFlag: \" + sortFlag);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"SortFlag: \" + sortFlag);",
                "         }",
                "         final byte sizeofGlobalColorTable = (byte) (packedFields & 7);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"SizeofGlobalColorTable: \"",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"SizeofGlobalColorTable: \"",
                "                     + sizeofGlobalColorTable);",
                "@@ -354,3 +358,3 @@ public class GifImageParser extends ImageParser {",
                "-        if (getDebug()) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "             printByteBits(\"PackedFields bits\", packedFields);",
                "@@ -359,12 +363,12 @@ public class GifImageParser extends ImageParser {",
                "         final boolean localColorTableFlag = (((packedFields >> 7) & 1) > 0);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"LocalColorTableFlag: \" + localColorTableFlag);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"LocalColorTableFlag: \" + localColorTableFlag);",
                "         }",
                "         final boolean interlaceFlag = (((packedFields >> 6) & 1) > 0);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"Interlace Flag: \" + interlaceFlag);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"Interlace Flag: \" + interlaceFlag);",
                "         }",
                "         final boolean sortFlag = (((packedFields >> 5) & 1) > 0);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"Sort Flag: \" + sortFlag);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"Sort Flag: \" + sortFlag);",
                "         }",
                "@@ -372,4 +376,4 @@ public class GifImageParser extends ImageParser {",
                "         final byte sizeOfLocalColorTable = (byte) (packedFields & 7);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"SizeofLocalColorTable: \" + sizeOfLocalColorTable);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"SizeofLocalColorTable: \" + sizeOfLocalColorTable);",
                "         }",
                "@@ -395,4 +399,4 @@ public class GifImageParser extends ImageParser {",
                "             final int LZWMinimumCodeSize = is.read();",
                "-            if (getDebug()) {",
                "-                System.out.println(\"LZWMinimumCodeSize: \" + LZWMinimumCodeSize);",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "+                LOGGER.finest(\"LZWMinimumCodeSize: \" + LZWMinimumCodeSize);",
                "             }",
                "@@ -760,4 +764,2 @@ public class GifImageParser extends ImageParser {",
                "-        final boolean verbose =  Boolean.TRUE.equals(params.get(PARAM_KEY_VERBOSE));",
                "-",
                "         // clear format key.",
                "@@ -766,5 +768,2 @@ public class GifImageParser extends ImageParser {",
                "         }",
                "-        if (params.containsKey(PARAM_KEY_VERBOSE)) {",
                "-            params.remove(PARAM_KEY_VERBOSE);",
                "-        }",
                "@@ -794,7 +793,7 @@ public class GifImageParser extends ImageParser {",
                "             palette2 = new PaletteFactory().makeQuantizedRgbPalette(src, maxColors);",
                "-            if (verbose) {",
                "-                System.out.println(\"quantizing\");",
                "+            if (LOGGER.isLoggable(Level.FINE)) {",
                "+                LOGGER.fine(\"quantizing\");",
                "             }",
                "-        } else if (verbose) {",
                "-            System.out.println(\"exact palette\");",
                "+        } else if (LOGGER.isLoggable(Level.FINE)) {",
                "+            LOGGER.fine(\"exact palette\");",
                "         }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java b/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "index c95321a9..9db5449a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "@@ -19,3 +19,2 @@ package org.apache.commons.imaging.formats.icns;",
                " import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_FORMAT;",
                "-import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_VERBOSE;",
                " import static org.apache.commons.imaging.common.BinaryFunctions.read4Bytes;",
                "@@ -87,6 +86,2 @@ public class IcnsImageParser extends ImageParser {",
                "-        if (params.containsKey(PARAM_KEY_VERBOSE)) {",
                "-            params.remove(PARAM_KEY_VERBOSE);",
                "-        }",
                "-",
                "         if (!params.isEmpty()) {",
                "@@ -116,6 +111,2 @@ public class IcnsImageParser extends ImageParser {",
                "-        if (params.containsKey(PARAM_KEY_VERBOSE)) {",
                "-            params.remove(PARAM_KEY_VERBOSE);",
                "-        }",
                "-",
                "         if (!params.isEmpty()) {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageMetadata.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageMetadata.java",
                "index f0816a65..d7f5cce1 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageMetadata.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageMetadata.java",
                "@@ -36,3 +36,3 @@ import org.apache.commons.imaging.formats.tiff.TiffImageMetadata;",
                " import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "index d409f025..c3b89b4f 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "@@ -31,2 +31,4 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -57,3 +59,3 @@ import org.apache.commons.imaging.formats.tiff.TiffImageParser;",
                " import org.apache.commons.imaging.formats.tiff.constants.TiffTagConstants;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "@@ -63,2 +65,5 @@ import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                " public class JpegImageParser extends ImageParser {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(JpegImageParser.class.getName());",
                "+",
                "     private static final String DEFAULT_EXTENSION = \".jpg\";",
                "@@ -300,8 +305,4 @@ public class JpegImageParser extends ImageParser {",
                "-        if (getDebug()) {",
                "-            System.out.println(\"bytes\" + \": \" + bytes.length);",
                "-        }",
                "-",
                "-        if (getDebug()) {",
                "-            System.out.println(\"\");",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"bytes\" + \": \" + bytes.length);",
                "         }",
                "@@ -371,5 +372,4 @@ public class JpegImageParser extends ImageParser {",
                "         final List<Segment> exifSegments = filterAPP1Segments(segments);",
                "-        if (getDebug()) {",
                "-            System.out.println(\"exif_segments.size\" + \": \"",
                "-                    + exifSegments.size());",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"exif_segments.size\" + \": \" + exifSegments.size());",
                "         }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegPhotoshopMetadata.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegPhotoshopMetadata.java",
                "index 802d1643..734562bc 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegPhotoshopMetadata.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegPhotoshopMetadata.java",
                "@@ -25,3 +25,3 @@ import org.apache.commons.imaging.formats.jpeg.iptc.IptcTypes;",
                " import org.apache.commons.imaging.formats.jpeg.iptc.PhotoshopApp13Data;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegUtils.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegUtils.java",
                "index 7031f9d2..d4401389 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegUtils.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegUtils.java",
                "@@ -31,3 +31,3 @@ import org.apache.commons.imaging.common.ByteConversions;",
                " import org.apache.commons.imaging.common.bytesource.ByteSource;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/Dct.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/Dct.java",
                "index 5869bb4b..dd93470f 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/Dct.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/Dct.java",
                "@@ -254,3 +254,3 @@ final class Dct {",
                "      * Fast inverse Dct using AA&N. This is taken from the beautiful",
                "-     * http://vsr.informatik.tu-chemnitz.de/~jan/MPEG/HTML/IDCT.html which gives",
                "+     * http://vsr.finermatik.tu-chemnitz.de/~jan/MPEG/HTML/IDCT.html which gives",
                "      * easy equations and properly explains constants and scaling factors. Terms",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java",
                "index 907dc7ef..b3308ce9 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java",
                "@@ -37,2 +37,4 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -45,5 +47,8 @@ import org.apache.commons.imaging.common.ByteConversions;",
                " import org.apache.commons.imaging.formats.jpeg.JpegConstants;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                " public class IptcParser extends BinaryFileParser {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(IptcParser.class.getName());",
                "+",
                "     private static final ByteOrder APP13_BYTE_ORDER = ByteOrder.BIG_ENDIAN;",
                "@@ -105,9 +110,7 @@ public class IptcParser extends BinaryFileParser {",
                "         final boolean strict =  params != null && Boolean.TRUE.equals(params.get(ImagingConstants.PARAM_KEY_STRICT));",
                "-        final boolean verbose =  params != null && Boolean.TRUE.equals(params.get(ImagingConstants.PARAM_KEY_VERBOSE));",
                "-        return parsePhotoshopSegment(bytes, verbose, strict);",
                "+        return parsePhotoshopSegment(bytes, strict);",
                "     }",
                "-    public PhotoshopApp13Data parsePhotoshopSegment(final byte[] bytes,",
                "-            final boolean verbose, final boolean strict) throws ImageReadException,",
                "+    public PhotoshopApp13Data parsePhotoshopSegment(final byte[] bytes, final boolean strict) throws ImageReadException,",
                "             IOException {",
                "@@ -115,3 +118,3 @@ public class IptcParser extends BinaryFileParser {",
                "-        final List<IptcBlock> blocks = parseAllBlocks(bytes, verbose, strict);",
                "+        final List<IptcBlock> blocks = parseAllBlocks(bytes, strict);",
                "@@ -123,3 +126,3 @@ public class IptcParser extends BinaryFileParser {",
                "-            records.addAll(parseIPTCBlock(block.blockData, verbose));",
                "+            records.addAll(parseIPTCBlock(block.blockData));",
                "         }",
                "@@ -129,3 +132,3 @@ public class IptcParser extends BinaryFileParser {",
                "-    protected List<IptcRecord> parseIPTCBlock(final byte[] bytes, final boolean verbose)",
                "+    protected List<IptcRecord> parseIPTCBlock(final byte[] bytes)",
                "             throws IOException {",
                "@@ -137,9 +140,7 @@ public class IptcParser extends BinaryFileParser {",
                "             final int tagMarker = 0xff & bytes[index++];",
                "-            if (verbose) {",
                "-                Debug.debug(\"tagMarker: \" + tagMarker + \" (0x\" + Integer.toHexString(tagMarker) + \")\");",
                "-            }",
                "+            Debug.debug(\"tagMarker: \" + tagMarker + \" (0x\" + Integer.toHexString(tagMarker) + \")\");",
                "             if (tagMarker != IptcConstants.IPTC_RECORD_TAG_MARKER) {",
                "-                if (verbose) {",
                "-                    System.out.println(\"Unexpected record tag marker in IPTC data.\");",
                "+                if (LOGGER.isLoggable(Level.FINE)) {",
                "+                    LOGGER.fine(\"Unexpected record tag marker in IPTC data.\");",
                "                 }",
                "@@ -149,5 +150,3 @@ public class IptcParser extends BinaryFileParser {",
                "             final int recordNumber = 0xff & bytes[index++];",
                "-            if (verbose) {",
                "-                Debug.debug(\"recordNumber: \" + recordNumber + \" (0x\" + Integer.toHexString(recordNumber) + \")\");",
                "-            }",
                "+            Debug.debug(\"recordNumber: \" + recordNumber + \" (0x\" + Integer.toHexString(recordNumber) + \")\");",
                "@@ -172,5 +171,3 @@ public class IptcParser extends BinaryFileParser {",
                "             final int recordType = 0xff & bytes[index];",
                "-            if (verbose) {",
                "-                Debug.debug(\"recordType: \" + recordType + \" (0x\" + Integer.toHexString(recordType) + \")\");",
                "-            }",
                "+            Debug.debug(\"recordType: \" + recordType + \" (0x\" + Integer.toHexString(recordType) + \")\");",
                "             index++;",
                "@@ -182,5 +179,4 @@ public class IptcParser extends BinaryFileParser {",
                "             final int dataFieldCountLength = recordSize & 0x7fff;",
                "-            if (extendedDataset && verbose) {",
                "-                Debug.debug(\"extendedDataset. dataFieldCountLength: \"",
                "-                        + dataFieldCountLength);",
                "+            if (extendedDataset) {",
                "+                Debug.debug(\"extendedDataset. dataFieldCountLength: \" + dataFieldCountLength);",
                "             }",
                "@@ -202,5 +198,4 @@ public class IptcParser extends BinaryFileParser {",
                "             if (recordType == 0) {",
                "-                if (verbose) {",
                "-                    System.out.println(\"ignore record version record! \"",
                "-                            + elements.size());",
                "+                if (LOGGER.isLoggable(Level.FINE)) {",
                "+                    LOGGER.fine(\"ignore record version record! \" + elements.size());",
                "                 }",
                "@@ -255,3 +250,3 @@ public class IptcParser extends BinaryFileParser {",
                "-    protected List<IptcBlock> parseAllBlocks(final byte[] bytes, final boolean verbose,",
                "+    protected List<IptcBlock> parseAllBlocks(final byte[] bytes,",
                "             final boolean strict) throws ImageReadException, IOException {",
                "@@ -287,8 +282,6 @@ public class IptcParser extends BinaryFileParser {",
                "                 final int blockType = read2Bytes(\"\", bis, \"Image Resource Block missing type\", APP13_BYTE_ORDER);",
                "-                if (verbose) {",
                "-                    Debug.debug(\"blockType: \" + blockType + \" (0x\" + Integer.toHexString(blockType) + \")\");",
                "-                }",
                "+                Debug.debug(\"blockType: \" + blockType + \" (0x\" + Integer.toHexString(blockType) + \")\");",
                "                 final int blockNameLength = readByte(\"Name length\", bis, \"Image Resource Block missing name length\");",
                "-                if (verbose && blockNameLength > 0) {",
                "+                if (blockNameLength > 0) {",
                "                     Debug.debug(\"blockNameLength: \" + blockNameLength + \" (0x\" ",
                "@@ -317,5 +310,3 @@ public class IptcParser extends BinaryFileParser {",
                "                 final int blockSize = read4Bytes(\"\", bis, \"Image Resource Block missing size\", APP13_BYTE_ORDER);",
                "-                if (verbose) {",
                "-                    Debug.debug(\"blockSize: \" + blockSize + \" (0x\" + Integer.toHexString(blockSize) + \")\");",
                "-                }",
                "+                Debug.debug(\"blockSize: \" + blockSize + \" (0x\" + Integer.toHexString(blockSize) + \")\");",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "index 77105df3..a8f30043 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "@@ -75,6 +75,2 @@ public class JfifSegment extends Segment {",
                "         }",
                "-",
                "-        if (getDebug()) {",
                "-            System.out.println(\"\");",
                "-        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "index 8303a89e..23c6cd13 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "@@ -21,2 +21,4 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -27,2 +29,5 @@ import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                " public class SofnSegment extends Segment {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(SofnSegment.class.getName());",
                "+",
                "     public final int width;",
                "@@ -56,4 +61,4 @@ public class SofnSegment extends Segment {",
                "-        if (getDebug()) {",
                "-            System.out.println(\"SOF0Segment marker_length: \" + markerLength);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"SOF0Segment marker_length: \" + markerLength);",
                "         }",
                "@@ -80,6 +85,2 @@ public class SofnSegment extends Segment {",
                "         }",
                "-",
                "-        if (getDebug()) {",
                "-            System.out.println(\"\");",
                "-        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "index 3127c0f4..31421b80 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "@@ -21,2 +21,4 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -25,2 +27,5 @@ import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                " public class SosSegment extends Segment {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(SosSegment.class.getName());",
                "+",
                "     public final int numberOfComponents;",
                "@@ -52,4 +57,4 @@ public class SosSegment extends Segment {",
                "-        if (getDebug()) {",
                "-            System.out.println(\"SosSegment marker_length: \" + markerLength);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"SosSegment marker_length: \" + markerLength);",
                "         }",
                "@@ -93,6 +98,2 @@ public class SosSegment extends Segment {",
                "         successiveApproximationBitLow = successiveApproximationBitPosition & 0xf;",
                "-",
                "-        if (getDebug()) {",
                "-            System.out.println(\"\");",
                "-        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java b/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "index 909371e3..4a26e527 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "@@ -56,4 +56,4 @@ public class PcxImageParser extends ImageParser {",
                "     // ZSoft's official spec is at http://www.qzx.com/pc-gpe/pcx.txt",
                "-    // (among other places) but it's pretty thin. The fileformat.info document",
                "-    // at http://www.fileformat.info/format/pcx/egff.htm is a little better",
                "+    // (among other places) but it's pretty thin. The fileformat.fine document",
                "+    // at http://www.fileformat.fine/format/pcx/egff.htm is a little better",
                "     // but their gray sample image seems corrupt. PCX files themselves are",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/GammaCorrection.java b/src/main/java/org/apache/commons/imaging/formats/png/GammaCorrection.java",
                "index 5f7fcc51..ce7a7d0e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/GammaCorrection.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/GammaCorrection.java",
                "@@ -18,4 +18,8 @@ package org.apache.commons.imaging.formats.png;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "+",
                " public class GammaCorrection {",
                "-    private static final boolean DEBUG = false;",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(GammaCorrection.class.getName());",
                "@@ -25,5 +29,5 @@ public class GammaCorrection {",
                "-        if (DEBUG) {",
                "-            System.out.println(\"src_gamma: \" + srcGamma);",
                "-            System.out.println(\"dst_gamma: \" + dstGamma);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"src_gamma: \" + srcGamma);",
                "+            LOGGER.finest(\"dst_gamma: \" + dstGamma);",
                "         }",
                "@@ -33,4 +37,4 @@ public class GammaCorrection {",
                "             lookupTable[i] = correctSample(i, srcGamma, dstGamma);",
                "-            if (DEBUG) {",
                "-                System.out.println(\"lookup_table[\" + i + \"]: \" + lookupTable[i]);",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "+                LOGGER.finest(\"lookup_table[\" + i + \"]: \" + lookupTable[i]);",
                "             }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java b/src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java",
                "index 3f703b8d..7952437a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java",
                "@@ -18,3 +18,2 @@ package org.apache.commons.imaging.formats.png;",
                "-import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_VERBOSE;",
                " import static org.apache.commons.imaging.common.BinaryFunctions.printCharQuad;",
                "@@ -41,2 +40,4 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                " import java.util.zip.InflaterInputStream;",
                "@@ -72,2 +73,5 @@ import org.apache.commons.imaging.icc.IccProfileParser;",
                " public class PngImageParser extends ImageParser {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(PngImageParser.class.getName());",
                "+",
                "     private static final String DEFAULT_EXTENSION = \".png\";",
                "@@ -148,6 +152,2 @@ public class PngImageParser extends ImageParser {",
                "         while (true) {",
                "-            if (getDebug()) {",
                "-                System.out.println(\"\");",
                "-            }",
                "-",
                "             final int length = read4Bytes(\"Length\", is, \"Not a Valid PNG File\", getByteOrder());",
                "@@ -155,3 +155,3 @@ public class PngImageParser extends ImageParser {",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"ChunkType\", chunkType);",
                "@@ -169,3 +169,3 @@ public class PngImageParser extends ImageParser {",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 if (bytes != null) {",
                "@@ -484,6 +484,2 @@ public class PngImageParser extends ImageParser {",
                "-        if (params.containsKey(PARAM_KEY_VERBOSE)) {",
                "-            params.remove(PARAM_KEY_VERBOSE);",
                "-        }",
                "-",
                "         // if (params.size() > 0) {",
                "@@ -569,8 +565,8 @@ public class PngImageParser extends ImageParser {",
                "                 // no color management neccesary.",
                "-                if (getDebug()) {",
                "-                    System.out.println(\"sRGB, no color management neccesary.\");",
                "+                if (LOGGER.isLoggable(Level.FINEST)) {",
                "+                    LOGGER.finest(\"sRGB, no color management neccesary.\");",
                "                 }",
                "             } else if (iCCPs.size() == 1) {",
                "-                if (getDebug()) {",
                "-                    System.out.println(\"iCCP.\");",
                "+                if (LOGGER.isLoggable(Level.FINEST)) {",
                "+                    LOGGER.finest(\"iCCP.\");",
                "                 }",
                "@@ -676,4 +672,4 @@ public class PngImageParser extends ImageParser {",
                "         if (IHDRs.size() != 1) {",
                "-            if (getDebug()) {",
                "-                System.out.println(\"PNG contains more than one Header\");",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "+                LOGGER.finest(\"PNG contains more than one Header\");",
                "             }",
                "@@ -705,3 +701,3 @@ public class PngImageParser extends ImageParser {",
                "             throws ImageWriteException, IOException {",
                "-        new PngWriter(params).writeImage(src, os, params);",
                "+        new PngWriter().writeImage(src, os, params);",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java b/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "index 0d5869d9..b7d07541 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "@@ -31,2 +31,3 @@ import org.apache.commons.imaging.ImagingConstants;",
                " import org.apache.commons.imaging.PixelDensity;",
                "+import org.apache.commons.imaging.internal.Debug;",
                " import org.apache.commons.imaging.palette.Palette;",
                "@@ -34,14 +35,4 @@ import org.apache.commons.imaging.palette.PaletteFactory;",
                " import org.apache.commons.imaging.palette.SimplePalette;",
                "-import org.apache.commons.imaging.util.Debug;",
                " class PngWriter {",
                "-    private final boolean verbose;",
                "-",
                "-    public PngWriter(final boolean verbose) {",
                "-        this.verbose = verbose;",
                "-    }",
                "-",
                "-    public PngWriter(final Map<String, Object> params) {",
                "-        this.verbose =  params != null && Boolean.TRUE.equals(params.get(ImagingConstants.PARAM_KEY_VERBOSE));",
                "-    }",
                "@@ -388,6 +379,2 @@ class PngWriter {",
                "         }",
                "-        // clear verbose key.",
                "-        if (params.containsKey(ImagingConstants.PARAM_KEY_VERBOSE)) {",
                "-            params.remove(ImagingConstants.PARAM_KEY_VERBOSE);",
                "-        }",
                "@@ -421,5 +408,3 @@ class PngWriter {",
                "         final boolean hasAlpha = new PaletteFactory().hasTransparency(src);",
                "-        if (verbose) {",
                "-            Debug.debug(\"hasAlpha: \" + hasAlpha);",
                "-        }",
                "+        Debug.debug(\"hasAlpha: \" + hasAlpha);",
                "         // int transparency = new PaletteFactory().getTransparency(src);",
                "@@ -427,5 +412,3 @@ class PngWriter {",
                "         boolean isGrayscale = new PaletteFactory().isGrayscale(src);",
                "-        if (verbose) {",
                "-            Debug.debug(\"isGrayscale: \" + isGrayscale);",
                "-        }",
                "+        Debug.debug(\"isGrayscale: \" + isGrayscale);",
                "@@ -447,5 +430,3 @@ class PngWriter {",
                "             }",
                "-            if (verbose) {",
                "-                Debug.debug(\"colorType: \" + pngColorType);",
                "-            }",
                "+            Debug.debug(\"colorType: \" + pngColorType);",
                "         }",
                "@@ -453,5 +434,3 @@ class PngWriter {",
                "         final byte bitDepth = getBitDepth(pngColorType, params);",
                "-        if (verbose) {",
                "-            Debug.debug(\"bitDepth: \" + bitDepth);",
                "-        }",
                "+        Debug.debug(\"bitDepth: \" + bitDepth);",
                "@@ -463,5 +442,3 @@ class PngWriter {",
                "         }",
                "-        if (verbose) {",
                "-            Debug.debug(\"sampleDepth: \" + sampleDepth);",
                "-        }",
                "+        Debug.debug(\"sampleDepth: \" + sampleDepth);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "index 21e476e1..e0067ab8 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "@@ -21,2 +21,4 @@ import java.io.IOException;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                " import java.util.zip.InflaterInputStream;",
                "@@ -28,2 +30,5 @@ import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                " public class PngChunkIccp extends PngChunk {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(PngChunkIccp.class.getName());",
                "+",
                "     // private final PngImageParser parser;",
                "@@ -59,8 +64,8 @@ public class PngChunkIccp extends PngChunk {",
                "-        if (getDebug()) {",
                "-            System.out.println(\"ProfileName: \" + profileName);",
                "-            System.out.println(\"ProfileName.length(): \" + profileName.length());",
                "-            System.out.println(\"CompressionMethod: \" + compressionMethod);",
                "-            System.out.println(\"CompressedProfileLength: \" + compressedProfileLength);",
                "-            System.out.println(\"bytes.length: \" + bytes.length);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"ProfileName: \" + profileName);",
                "+            LOGGER.finest(\"ProfileName.length(): \" + profileName.length());",
                "+            LOGGER.finest(\"CompressionMethod: \" + compressionMethod);",
                "+            LOGGER.finest(\"CompressedProfileLength: \" + compressedProfileLength);",
                "+            LOGGER.finest(\"bytes.length: \" + bytes.length);",
                "         }",
                "@@ -69,4 +74,4 @@ public class PngChunkIccp extends PngChunk {",
                "-        if (getDebug()) {",
                "-            System.out.println(\"UncompressedProfile: \" + Integer.toString(bytes.length));",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"UncompressedProfile: \" + Integer.toString(bytes.length));",
                "         }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "index fd6d9b8f..86132b1e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "@@ -20,2 +20,4 @@ import java.io.IOException;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -27,2 +29,5 @@ import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                " public class PngChunkText extends PngTextChunk {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(PngChunkText.class.getName());",
                "+",
                "     public final String keyword;",
                "@@ -44,5 +49,5 @@ public class PngChunkText extends PngTextChunk {",
                "-        if (getDebug()) {",
                "-            System.out.println(\"Keyword: \" + keyword);",
                "-            System.out.println(\"Text: \" + text);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"Keyword: \" + keyword);",
                "+            LOGGER.finest(\"Text: \" + text);",
                "         }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceBlock.java b/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceBlock.java",
                "index 73c24e70..7a536f00 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceBlock.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceBlock.java",
                "@@ -20,3 +20,3 @@ import java.nio.charset.StandardCharsets;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/psd/PsdHeaderInfo.java b/src/main/java/org/apache/commons/imaging/formats/psd/PsdHeaderInfo.java",
                "index 6eac7c89..6fc93fd2 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/psd/PsdHeaderInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/psd/PsdHeaderInfo.java",
                "@@ -18,7 +18,12 @@ package org.apache.commons.imaging.formats.psd;",
                "-import java.io.OutputStreamWriter;",
                "+import java.io.IOException;",
                " import java.io.PrintWriter;",
                "-import java.nio.charset.Charset;",
                "+import java.io.StringWriter;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                " public class PsdHeaderInfo {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(PsdHeaderInfo.class.getName());",
                "+",
                "     public final int version;",
                "@@ -47,5 +52,10 @@ public class PsdHeaderInfo {",
                "     public void dump() {",
                "-        final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()));",
                "-        dump(pw);",
                "-        pw.flush();",
                "+        try (StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw)) {",
                "+            dump(pw);",
                "+            pw.flush();",
                "+            sw.flush();",
                "+            LOGGER.fine(sw.toString());",
                "+        } catch (IOException e) {",
                "+            LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "+        }",
                "     }",
                "@@ -64,3 +74,2 @@ public class PsdHeaderInfo {",
                "         pw.flush();",
                "-",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/psd/PsdImageContents.java b/src/main/java/org/apache/commons/imaging/formats/psd/PsdImageContents.java",
                "index 63d352d9..8e9cbd44 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/psd/PsdImageContents.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/psd/PsdImageContents.java",
                "@@ -18,7 +18,12 @@ package org.apache.commons.imaging.formats.psd;",
                "-import java.io.OutputStreamWriter;",
                "+import java.io.IOException;",
                " import java.io.PrintWriter;",
                "-import java.nio.charset.Charset;",
                "+import java.io.StringWriter;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                " public class PsdImageContents {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(PsdImageContents.class.getName());",
                "+",
                "     public final PsdHeaderInfo header;",
                "@@ -42,5 +47,10 @@ public class PsdImageContents {",
                "     public void dump() {",
                "-        final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()));",
                "-        dump(pw);",
                "-        pw.flush();",
                "+        try (StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw)) {",
                "+            dump(pw);",
                "+            pw.flush();",
                "+            sw.flush();",
                "+            LOGGER.fine(sw.toString());",
                "+        } catch (IOException e) {",
                "+            LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "+        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/CompressedDataReader.java b/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/CompressedDataReader.java",
                "index 95d30545..f854a75e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/CompressedDataReader.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/CompressedDataReader.java",
                "@@ -57,3 +57,2 @@ public class CompressedDataReader implements DataReader {",
                "         }",
                "-        bfp.setDebug(false);",
                "         // System.out.println(\"fImageContents.Compression: \"",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/UncompressedDataReader.java b/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/UncompressedDataReader.java",
                "index 62616562..4b2d9e3e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/UncompressedDataReader.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/psd/datareaders/UncompressedDataReader.java",
                "@@ -47,4 +47,2 @@ public class UncompressedDataReader implements DataReader {",
                "-        bfp.setDebug(false);",
                "-",
                "         final int channelCount = dataParser.getBasicChannelsCount();",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/JpegImageData.java b/src/main/java/org/apache/commons/imaging/formats/tiff/JpegImageData.java",
                "index 74d8e270..976b8e12 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/JpegImageData.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/JpegImageData.java",
                "@@ -25,3 +25,3 @@ public class JpegImageData extends TiffElement.DataElement {",
                "     @Override",
                "-    public String getElementDescription(final boolean verbose) {",
                "+    public String getElementDescription() {",
                "         return \"Jpeg image data: \" + getDataLength() + \" bytes\";",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffContents.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffContents.java",
                "index cb9f255d..ca61ed8f 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffContents.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffContents.java",
                "@@ -24,3 +24,3 @@ import org.apache.commons.imaging.ImageReadException;",
                " import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "@@ -73,3 +73,3 @@ public class TiffContents {",
                "-    public void dissect(final boolean verbose) throws ImageReadException {",
                "+    public void dissect() throws ImageReadException {",
                "         final List<TiffElement> elements = getElements();",
                "@@ -90,8 +90,6 @@ public class TiffContents {",
                "                     + (element.offset + element.length) + \": \"",
                "-                    + element.getElementDescription(false));",
                "-            if (verbose) {",
                "-                final String verbosity = element.getElementDescription(true);",
                "-                if (null != verbosity) {",
                "-                    Debug.debug(verbosity);",
                "-                }",
                "+                    + element.getElementDescription());",
                "+            final String verbosity = element.getElementDescription();",
                "+            if (null != verbosity) {",
                "+                Debug.debug(verbosity);",
                "             }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java",
                "index 94990962..691e4308 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java",
                "@@ -81,7 +81,3 @@ public class TiffDirectory extends TiffElement {",
                "     @Override",
                "-    public String getElementDescription(final boolean verbose) {",
                "-        if (!verbose) {",
                "-            return \"TIFF Directory (\" + description() + \")\";",
                "-        }",
                "-",
                "+    public String getElementDescription() {",
                "         long entryOffset = offset + TiffConstants.TIFF_DIRECTORY_HEADER_LENGTH;",
                "@@ -710,6 +706,3 @@ public class TiffDirectory extends TiffElement {",
                "         @Override",
                "-        public String getElementDescription(final boolean verbose) {",
                "-            if (verbose) {",
                "-                return null;",
                "-            }",
                "+        public String getElementDescription() {",
                "             return \"ImageDataElement\";",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "index 5cc7e019..b8c31070 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "@@ -41,7 +41,3 @@ public abstract class TiffElement {",
                "-    public String getElementDescription() {",
                "-        return getElementDescription(false);",
                "-    }",
                "-",
                "-    public abstract String getElementDescription(boolean verbose);",
                "+    public abstract String getElementDescription();",
                "@@ -71,3 +67,3 @@ public abstract class TiffElement {",
                "         @Override",
                "-        public String getElementDescription(final boolean verbose) {",
                "+        public String getElementDescription() {",
                "             return \"Element, offset: \" + offset + \", length: \" + length",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffField.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffField.java",
                "index 8b55784d..40d75a6c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffField.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffField.java",
                "@@ -18,6 +18,6 @@ package org.apache.commons.imaging.formats.tiff;",
                "-import java.io.OutputStreamWriter;",
                "+import java.io.IOException;",
                " import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                " import java.nio.ByteOrder;",
                "-import java.nio.charset.Charset;",
                " import java.text.DateFormat;",
                "@@ -26,2 +26,4 @@ import java.util.Date;",
                " import java.util.Locale;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -38,2 +40,5 @@ import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;",
                " public class TiffField {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(TiffField.class.getName());",
                "+",
                "     private final TagInfo tagInfo;",
                "@@ -147,7 +152,3 @@ public class TiffField {",
                "         @Override",
                "-        public String getElementDescription(final boolean verbose) {",
                "-            if (verbose) {",
                "-                return null;",
                "-            }",
                "-",
                "+        public String getElementDescription() {",
                "             return \"OversizeValueElement, tag: \" + getTagInfo().name",
                "@@ -357,5 +358,10 @@ public class TiffField {",
                "     public void dump() {",
                "-        final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()));",
                "-        dump(pw);",
                "-        pw.flush();",
                "+        try (StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw)) {",
                "+            dump(pw);",
                "+            pw.flush();",
                "+            sw.flush();",
                "+            LOGGER.fine(sw.toString());",
                "+        } catch (IOException e) {",
                "+            LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "+        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffHeader.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffHeader.java",
                "index 074462d3..d6d4551e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffHeader.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffHeader.java",
                "@@ -36,7 +36,3 @@ public class TiffHeader extends TiffElement {",
                "     @Override",
                "-    public String getElementDescription(final boolean verbose) {",
                "-        if (verbose) {",
                "-            return null;",
                "-        }",
                "-",
                "+    public String getElementDescription() {",
                "         return \"TIFF Header\";",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageData.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageData.java",
                "index 19831b75..52d23fb0 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageData.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageData.java",
                "@@ -149,3 +149,3 @@ public abstract class TiffImageData {",
                "         @Override",
                "-        public String getElementDescription(final boolean verbose) {",
                "+        public String getElementDescription() {",
                "             return \"Tiff image data: \" + getDataLength() + \" bytes\";",
                "@@ -164,3 +164,3 @@ public abstract class TiffImageData {",
                "         @Override",
                "-        public String getElementDescription(final boolean verbose) {",
                "+        public String getElementDescription() {",
                "             return \"Tiff image data: \" + getDataLength() + \" bytes\";",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "index 0625f33c..55be2115 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "@@ -91,6 +91,2 @@ public class TiffReader extends BinaryFileParser {",
                "-        if (getDebug()) {",
                "-            System.out.println(\"\");",
                "-        }",
                "-",
                "         return new TiffHeader(byteOrder, tiffVersion, offsetToFirstIFD);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "index 8973daea..323bc451 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "@@ -28,3 +28,3 @@ import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;",
                " import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "index 9d3cd828..815cdff1 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "@@ -27,3 +27,3 @@ import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryConstants;",
                " import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "diff --git a/src/main/java/org/apache/commons/imaging/icc/IccProfileInfo.java b/src/main/java/org/apache/commons/imaging/icc/IccProfileInfo.java",
                "index 68a5081c..22f3a68e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/icc/IccProfileInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/icc/IccProfileInfo.java",
                "@@ -21,2 +21,3 @@ import java.io.PrintWriter;",
                " import java.io.StringWriter;",
                "+import java.util.logging.Logger;",
                "@@ -26,2 +27,4 @@ public class IccProfileInfo {",
                "+    private static final Logger LOGGER = Logger.getLogger(IccProfileInfo.class.getName());",
                "+",
                "     private final byte[] data;",
                "@@ -94,3 +97,3 @@ public class IccProfileInfo {",
                "     public void dump(final String prefix) {",
                "-        System.out.print(toString());",
                "+        LOGGER.fine(toString());",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/icc/IccProfileParser.java b/src/main/java/org/apache/commons/imaging/icc/IccProfileParser.java",
                "index f11ce6f6..3dee15ea 100644",
                "--- a/src/main/java/org/apache/commons/imaging/icc/IccProfileParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/icc/IccProfileParser.java",
                "@@ -27,2 +27,4 @@ import java.io.InputStream;",
                " import java.nio.ByteOrder;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -32,5 +34,7 @@ import org.apache.commons.imaging.common.bytesource.ByteSourceArray;",
                " import org.apache.commons.imaging.common.bytesource.ByteSourceFile;",
                "-import org.apache.commons.imaging.util.Debug;",
                " public class IccProfileParser extends BinaryFileParser {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(IccProfileParser.class.getName());",
                "+",
                "     public IccProfileParser() {",
                "@@ -90,3 +94,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             // Debug.debug(\"Error: \" + file.getAbsolutePath());",
                "-            Debug.debug(e);",
                "+            LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "         } finally {",
                "@@ -97,3 +101,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             } catch (final Exception e) {",
                "-                Debug.debug(e);",
                "+                LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "             }",
                "@@ -102,6 +106,2 @@ public class IccProfileParser extends BinaryFileParser {",
                "-        if (getDebug()) {",
                "-            Debug.debug();",
                "-        }",
                "-",
                "         return null;",
                "@@ -113,9 +113,5 @@ public class IccProfileParser extends BinaryFileParser {",
                "-        if (getDebug()) {",
                "-            Debug.debug();",
                "-        }",
                "-",
                "         // setDebug(true);",
                "-        // if (getDebug())",
                "+        // if (LOGGER.isLoggable(Level.FINEST))",
                "         // Debug.debug(\"length: \" + length);",
                "@@ -137,3 +133,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int cmmTypeSignature = read4Bytes(\"Signature\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"CMMTypeSignature\", cmmTypeSignature);",
                "@@ -145,3 +141,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "                     \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"ProfileDeviceClassSignature\", profileDeviceClassSignature);",
                "@@ -150,3 +146,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int colorSpace = read4Bytes(\"ColorSpace\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"ColorSpace\", colorSpace);",
                "@@ -155,3 +151,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int profileConnectionSpace = read4Bytes(\"ProfileConnectionSpace\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"ProfileConnectionSpace\", profileConnectionSpace);",
                "@@ -162,3 +158,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int profileFileSignature = read4Bytes(\"ProfileFileSignature\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"ProfileFileSignature\", profileFileSignature);",
                "@@ -167,3 +163,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int primaryPlatformSignature = read4Bytes(\"PrimaryPlatformSignature\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"PrimaryPlatformSignature\", primaryPlatformSignature);",
                "@@ -172,3 +168,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int variousFlags = read4Bytes(\"VariousFlags\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"VariousFlags\", profileFileSignature);",
                "@@ -177,3 +173,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int deviceManufacturer = read4Bytes(\"DeviceManufacturer\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"DeviceManufacturer\", deviceManufacturer);",
                "@@ -182,3 +178,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int deviceModel = read4Bytes(\"DeviceModel\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"DeviceModel\", deviceModel);",
                "@@ -189,3 +185,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int renderingIntent = read4Bytes(\"RenderingIntent\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"RenderingIntent\", renderingIntent);",
                "@@ -196,3 +192,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int profileCreatorSignature = read4Bytes(\"ProfileCreatorSignature\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"ProfileCreatorSignature\", profileCreatorSignature);",
                "@@ -204,3 +200,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             // \"Not a Valid ICC Profile\");",
                "-            // if (getDebug())",
                "+            // if (LOGGER.isLoggable(Level.FINEST))",
                "             // System.out",
                "@@ -266,4 +262,4 @@ public class IccProfileParser extends BinaryFileParser {",
                "-            if (getDebug()) {",
                "-                Debug.debug(\"issRGB: \" + result.issRGB());",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "+                LOGGER.finest(\"issRGB: \" + result.issRGB());",
                "             }",
                "@@ -272,3 +268,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "         } catch (final Exception e) {",
                "-            Debug.debug(e);",
                "+            LOGGER.log(Level.SEVERE, e.getMessage(), e);",
                "         }",
                "@@ -301,6 +297,2 @@ public class IccProfileParser extends BinaryFileParser {",
                "     public boolean issRGB(final ByteSource byteSource) throws IOException {",
                "-        if (getDebug()) {",
                "-            Debug.debug();",
                "-        }",
                "-",
                "         // setDebug(true);",
                "@@ -309,3 +301,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "         //",
                "-        // if (getDebug())",
                "+        // if (LOGGER.isLoggable(Level.FINEST))",
                "         // Debug.debug(\"length: \" + length);",
                "@@ -325,3 +317,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int deviceManufacturer = read4Bytes(\"ProfileFileSignature\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"DeviceManufacturer\", deviceManufacturer);",
                "@@ -330,3 +322,3 @@ public class IccProfileParser extends BinaryFileParser {",
                "             final int deviceModel = read4Bytes(\"DeviceModel\", is, \"Not a Valid ICC Profile\", getByteOrder());",
                "-            if (getDebug()) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 printCharQuad(\"DeviceModel\", deviceModel);",
                "diff --git a/src/main/java/org/apache/commons/imaging/icc/IccTag.java b/src/main/java/org/apache/commons/imaging/icc/IccTag.java",
                "index c22970da..e4570c0d 100644",
                "--- a/src/main/java/org/apache/commons/imaging/icc/IccTag.java",
                "+++ b/src/main/java/org/apache/commons/imaging/icc/IccTag.java",
                "@@ -21,8 +21,8 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "-import java.io.OutputStreamWriter;",
                " import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                " import java.nio.ByteOrder;",
                "-import java.nio.charset.Charset;",
                " import java.nio.charset.StandardCharsets;",
                " import java.util.Arrays;",
                "+import java.util.logging.Logger;",
                "@@ -32,2 +32,5 @@ import org.apache.commons.imaging.common.BinaryFunctions;",
                " public class IccTag {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(IccTag.class.getName());",
                "+",
                "     public final int signature;",
                "@@ -75,7 +78,8 @@ public class IccTag {",
                "     public void dump(final String prefix) throws ImageReadException, IOException {",
                "-        final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()));",
                "-",
                "-        dump(pw, prefix);",
                "-",
                "-        pw.flush();",
                "+        try (StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw)) {",
                "+            dump(pw, prefix);",
                "+            pw.flush();",
                "+            sw.flush();",
                "+            LOGGER.fine(sw.toString());",
                "+        }",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java b/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "index 1c70c3ac..a23c6e1b 100644",
                "--- a/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "+++ b/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "@@ -25,2 +25,3 @@ import java.nio.ByteOrder;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.logging.Logger;",
                "@@ -44,3 +45,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "                 final String s = new String(bytes, 12, stringLength - 1, StandardCharsets.US_ASCII);",
                "-                System.out.println(prefix + \"s: '\" + s + \"'\");",
                "+                LOGGER.fine(prefix + \"s: '\" + s + \"'\");",
                "             }",
                "@@ -86,3 +87,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "                 final int thesignature = read4Bytes(\"thesignature \", bis, \"ICC: corrupt tag data\", ByteOrder.BIG_ENDIAN);",
                "-                System.out.println(prefix",
                "+                LOGGER.fine(prefix",
                "                         + \"thesignature: \"",
                "@@ -111,3 +112,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "                 final String s = new String(bytes, 8, bytes.length - 8, StandardCharsets.US_ASCII);",
                "-                System.out.println(prefix + \"s: '\" + s + \"'\");",
                "+                LOGGER.fine(prefix + \"s: '\" + s + \"'\");",
                "             }",
                "@@ -117,2 +118,4 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "+    private static final Logger LOGGER = Logger.getLogger(IccTagDataTypes.class.getName());",
                "+",
                "     public final String name;",
                "diff --git a/src/main/java/org/apache/commons/imaging/internal/Debug.java b/src/main/java/org/apache/commons/imaging/internal/Debug.java",
                "new file mode 100644",
                "index 00000000..10ef1b62",
                "--- /dev/null",
                "+++ b/src/main/java/org/apache/commons/imaging/internal/Debug.java",
                "@@ -0,0 +1,317 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.commons.imaging.internal;",
                "+",
                "+import java.awt.color.ICC_Profile;",
                "+import java.io.File;",
                "+import java.text.DateFormat;",
                "+import java.text.SimpleDateFormat;",
                "+import java.util.ArrayList;",
                "+import java.util.Calendar;",
                "+import java.util.Date;",
                "+import java.util.List;",
                "+import java.util.Locale;",
                "+import java.util.Map;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "+",
                "+/**",
                "+ * Internal-only debug class. Used for collecting extra information when parsing or",
                "+ * modifying images or metadata. These methods are useful for troubleshooting and",
                "+ * issue analysis, but this should not be used directly by end-users, nor extended",
                "+ * in any way. This may change or be removed at any time.",
                "+ */",
                "+public final class Debug {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(Debug.class.getName());",
                "+",
                "+    // public static String newline = System.getProperty(\"line.separator\");",
                "+    private static final String NEWLINE = \"\\r\\n\";",
                "+    private static long counter;",
                "+",
                "+    public static void debug(final String message) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(message);",
                "+        }",
                "+    }",
                "+",
                "+    public static void debug() {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(NEWLINE);",
                "+        }",
                "+    }",
                "+",
                "+    private static String getDebug(final String message, final int[] v) {",
                "+        final StringBuilder result = new StringBuilder();",
                "+",
                "+        if (v == null) {",
                "+            result.append(message + \" (\" + null + \")\" + NEWLINE);",
                "+        } else {",
                "+            result.append(message + \" (\" + v.length + \")\" + NEWLINE);",
                "+            for (final int element : v) {",
                "+                result.append(\"\\t\" + element + NEWLINE);",
                "+            }",
                "+            result.append(NEWLINE);",
                "+        }",
                "+        return result.toString();",
                "+    }",
                "+",
                "+    private static String getDebug(final String message, final byte[] v) {",
                "+        final int max = 250;",
                "+        return getDebug(message, v, max);",
                "+    }",
                "+",
                "+    private static String getDebug(final String message, final byte[] v, final int max) {",
                "+",
                "+        final StringBuilder result = new StringBuilder();",
                "+",
                "+        if (v == null) {",
                "+            result.append(message + \" (\" + null + \")\" + NEWLINE);",
                "+        } else {",
                "+            result.append(message + \" (\" + v.length + \")\" + NEWLINE);",
                "+            for (int i = 0; i < max && i < v.length; i++) {",
                "+                final int b = 0xff & v[i];",
                "+",
                "+                char c;",
                "+                if (b == 0 || b == 10 || b == 11 || b == 13) {",
                "+                    c = ' ';",
                "+                } else {",
                "+                    c = (char) b;",
                "+                }",
                "+",
                "+                result.append(\"\\t\" + i + \": \" + b + \" (\" + c + \", 0x\"",
                "+                        + Integer.toHexString(b) + \")\" + NEWLINE);",
                "+            }",
                "+            if (v.length > max) {",
                "+                result.append(\"\\t...\" + NEWLINE);",
                "+            }",
                "+",
                "+            result.append(NEWLINE);",
                "+        }",
                "+        return result.toString();",
                "+    }",
                "+",
                "+    private static String getDebug(final String message, final char[] v) {",
                "+        final StringBuilder result = new StringBuilder();",
                "+",
                "+        if (v == null) {",
                "+            result.append(message + \" (\" + null + \")\" + NEWLINE);",
                "+        } else {",
                "+            result.append(message + \" (\" + v.length + \")\" + NEWLINE);",
                "+            for (final char element : v) {",
                "+                result.append(\"\\t\" + element + \" (\" + (0xff & element) + \")\" + NEWLINE);",
                "+            }",
                "+            result.append(NEWLINE);",
                "+        }",
                "+        return result.toString();",
                "+    }",
                "+",
                "+    private static void debug(final String message, final Map<?, ?> map) {",
                "+        debug(getDebug(message, map));",
                "+    }",
                "+",
                "+    private static String getDebug(final String message, final Map<?, ?> map) {",
                "+        final StringBuilder result = new StringBuilder();",
                "+",
                "+        if (map == null) {",
                "+            return message + \" map: \" + null;",
                "+        }",
                "+",
                "+        final List<Object> keys = new ArrayList<>(map.keySet());",
                "+        result.append(message + \" map: \" + keys.size() + NEWLINE);",
                "+        for (int i = 0; i < keys.size(); i++) {",
                "+            final Object key = keys.get(i);",
                "+            final Object value = map.get(key);",
                "+            result.append(\"\\t\" + i + \": '\" + key + \"' -> '\" + value + \"'\" + NEWLINE);",
                "+        }",
                "+",
                "+        result.append(NEWLINE);",
                "+",
                "+        return result.toString();",
                "+    }",
                "+",
                "+    private static String byteQuadToString(final int bytequad) {",
                "+        final byte b1 = (byte) ((bytequad >> 24) & 0xff);",
                "+        final byte b2 = (byte) ((bytequad >> 16) & 0xff);",
                "+        final byte b3 = (byte) ((bytequad >> 8) & 0xff);",
                "+        final byte b4 = (byte) ((bytequad >> 0) & 0xff);",
                "+",
                "+        final char c1 = (char) b1;",
                "+        final char c2 = (char) b2;",
                "+        final char c3 = (char) b3;",
                "+        final char c4 = (char) b4;",
                "+        // return new String(new char[] { c1, c2, c3, c4 });",
                "+        final StringBuilder buffer = new StringBuilder(31);",
                "+        buffer.append(new String(new char[]{c1, c2, c3, c4}));",
                "+        buffer.append(\" bytequad: \");",
                "+        buffer.append(bytequad);",
                "+        buffer.append(\" b1: \");",
                "+        buffer.append(b1);",
                "+        buffer.append(\" b2: \");",
                "+        buffer.append(b2);",
                "+        buffer.append(\" b3: \");",
                "+        buffer.append(b3);",
                "+        buffer.append(\" b4: \");",
                "+        buffer.append(b4);",
                "+",
                "+        return buffer.toString();",
                "+    }",
                "+",
                "+    public static void debug(final String message, final Object value) {",
                "+        if (value == null) {",
                "+            debug(message, \"null\");",
                "+        } else if (value instanceof char[]) {",
                "+            debug(message, (char[]) value);",
                "+        } else if (value instanceof byte[]) {",
                "+            debug(message, (byte[]) value);",
                "+        } else if (value instanceof int[]) {",
                "+            debug(message, (int[]) value);",
                "+        } else if (value instanceof String) {",
                "+            debug(message, (String) value);",
                "+        } else if (value instanceof List) {",
                "+            debug(message, (List<?>) value);",
                "+        } else if (value instanceof Map) {",
                "+            debug(message, (Map<?, ?>) value);",
                "+        } else if (value instanceof ICC_Profile) {",
                "+            debug(message, (ICC_Profile) value);",
                "+        } else if (value instanceof File) {",
                "+            debug(message, (File) value);",
                "+        } else if (value instanceof Date) {",
                "+            debug(message, (Date) value);",
                "+        } else if (value instanceof Calendar) {",
                "+            debug(message, (Calendar) value);",
                "+        } else {",
                "+            debug(message, value.toString());",
                "+        }",
                "+    }",
                "+",
                "+    private static void debug(final String message, final byte[] v) {",
                "+        debug(getDebug(message, v));",
                "+    }",
                "+",
                "+    private static void debug(final String message, final char[] v) {",
                "+        debug(getDebug(message, v));",
                "+    }",
                "+",
                "+    private static void debug(final String message, final Calendar value) {",
                "+        final DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\", Locale.ENGLISH);",
                "+        debug(message, (value == null) ? \"null\" : df.format(value.getTime()));",
                "+    }",
                "+",
                "+    private static void debug(final String message, final Date value) {",
                "+        final DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\", Locale.ENGLISH);",
                "+        debug(message, (value == null) ? \"null\" : df.format(value));",
                "+    }",
                "+",
                "+    private static void debug(final String message, final File file) {",
                "+        debug(message + \": \" + ((file == null) ? \"null\" : file.getPath()));",
                "+    }",
                "+",
                "+    private static void debug(final String message, final ICC_Profile value) {",
                "+        debug(\"ICC_Profile \" + message + \": \" + ((value == null) ? \"null\" : value.toString()));",
                "+        if (value != null) {",
                "+            debug(\"\\t getProfileClass: \" + byteQuadToString(value.getProfileClass()));",
                "+            debug(\"\\t getPCSType: \" + byteQuadToString(value.getPCSType()));",
                "+            debug(\"\\t getColorSpaceType() : \" + byteQuadToString(value.getColorSpaceType()));",
                "+        }",
                "+    }",
                "+",
                "+    private static void debug(final String message, final int[] v) {",
                "+        debug(getDebug(message, v));",
                "+    }",
                "+",
                "+    private static void debug(final String message, final List<?> v) {",
                "+        final String suffix = \" [\" + counter++ + \"]\";",
                "+",
                "+        debug(message + \" (\" + v.size() + \")\" + suffix);",
                "+        for (final Object aV : v) {",
                "+            debug(\"\\t\" + aV.toString() + suffix);",
                "+        }",
                "+        debug();",
                "+    }",
                "+",
                "+    private static void debug(final String message, final String value) {",
                "+        debug(message + \" \" + value);",
                "+    }",
                "+",
                "+    public static void debug(final Throwable e) {",
                "+        debug(getDebug(e));",
                "+    }",
                "+",
                "+    public static void debug(final Throwable e, final int value) {",
                "+        debug(getDebug(e, value));",
                "+    }",
                "+",
                "+    private static String getDebug(final Throwable e) {",
                "+        return getDebug(e, -1);",
                "+    }",
                "+",
                "+    private static String getDebug(final Throwable e, final int max) {",
                "+        final StringBuilder result = new StringBuilder(35);",
                "+",
                "+        final SimpleDateFormat timestamp = new SimpleDateFormat(",
                "+                \"yyyy-MM-dd kk:mm:ss:SSS\", Locale.ENGLISH);",
                "+        final String datetime = timestamp.format(new Date()).toLowerCase();",
                "+",
                "+        result.append(NEWLINE);",
                "+        result.append(\"Throwable: \"",
                "+                + ((e == null) ? \"\" : (\"(\" + e.getClass().getName() + \")\"))",
                "+                + \":\" + datetime + NEWLINE);",
                "+        result.append(\"Throwable: \" + ((e == null) ? \"null\" : e.getLocalizedMessage()) + NEWLINE);",
                "+        result.append(NEWLINE);",
                "+",
                "+        result.append(getStackTrace(e, max));",
                "+",
                "+        result.append(\"Caught here:\" + NEWLINE);",
                "+        result.append(getStackTrace(new Exception(), max, 1));",
                "+        // Debug.dumpStack();",
                "+        result.append(NEWLINE);",
                "+        return result.toString();",
                "+    }",
                "+",
                "+    private static String getStackTrace(final Throwable e, final int limit) {",
                "+        return getStackTrace(e, limit, 0);",
                "+    }",
                "+",
                "+    private static String getStackTrace(final Throwable e, final int limit, final int skip) {",
                "+        final StringBuilder result = new StringBuilder();",
                "+",
                "+        if (e != null) {",
                "+            final StackTraceElement[] stes = e.getStackTrace();",
                "+            if (stes != null) {",
                "+                for (int i = skip; i < stes.length && (limit < 0 || i < limit); i++) {",
                "+                    final StackTraceElement ste = stes[i];",
                "+",
                "+                    result.append(\"\\tat \" + ste.getClassName() + \".\"",
                "+                            + ste.getMethodName() + \"(\" + ste.getFileName()",
                "+                            + \":\" + ste.getLineNumber() + \")\" + NEWLINE);",
                "+                }",
                "+                if (limit >= 0 && stes.length > limit) {",
                "+                    result.append(\"\\t...\" + NEWLINE);",
                "+                }",
                "+            }",
                "+",
                "+            // e.printStackTrace(System.out);",
                "+            result.append(NEWLINE);",
                "+        }",
                "+",
                "+        return result.toString();",
                "+    }",
                "+",
                "+    private Debug() {",
                "+    }",
                "+}",
                "diff --git a/src/main/java/org/apache/commons/imaging/internal/package-info.java b/src/main/java/org/apache/commons/imaging/internal/package-info.java",
                "new file mode 100644",
                "index 00000000..e2fb2d89",
                "--- /dev/null",
                "+++ b/src/main/java/org/apache/commons/imaging/internal/package-info.java",
                "@@ -0,0 +1,21 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+/**",
                "+ * Internal utility classes. These classes must not be used by users.",
                "+ */",
                "+package org.apache.commons.imaging.internal;",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/ColorSpaceSubset.java b/src/main/java/org/apache/commons/imaging/palette/ColorSpaceSubset.java",
                "index 8fa8ec5b..6405aa95 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/ColorSpaceSubset.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/ColorSpaceSubset.java",
                "@@ -20,4 +20,8 @@ import java.io.Serializable;",
                " import java.util.Comparator;",
                "+import java.util.logging.Logger;",
                " class ColorSpaceSubset {",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(ColorSpaceSubset.class.getName());",
                "+",
                "     final int[] mins;",
                "@@ -91,3 +95,3 @@ class ColorSpaceSubset {",
                "-        System.out.println(prefix + \": [\" + Integer.toHexString(rgb)",
                "+        LOGGER.fine(prefix + \": [\" + Integer.toHexString(rgb)",
                "                 + \"] total : \" + total",
                "@@ -97,3 +101,3 @@ class ColorSpaceSubset {",
                "                 );",
                "-        System.out.println(\"\\t\" + \"rgb: \" + Integer.toHexString(rgb) + \", \"",
                "+        LOGGER.fine(\"\\t\" + \"rgb: \" + Integer.toHexString(rgb) + \", \"",
                "                 + \"red: \" + Integer.toHexString(mins[0] << (8 - precision))",
                "@@ -104,6 +108,6 @@ class ColorSpaceSubset {",
                "                 + \", \" + Integer.toHexString(maxs[2] << (8 - precision)));",
                "-        System.out.println(\"\\t\" + \"red: \" + mins[0] + \", \" + maxs[0] + \", \"",
                "+        LOGGER.fine(\"\\t\" + \"red: \" + mins[0] + \", \" + maxs[0] + \", \"",
                "                 + \"green: \" + mins[1] + \", \" + maxs[1] + \", \" + \"blue: \"",
                "                 + mins[2] + \", \" + maxs[2]);",
                "-        System.out.println(\"\\t\" + \"rdiff: \" + rdiff + \", \" + \"gdiff: \" + gdiff",
                "+        LOGGER.fine(\"\\t\" + \"rdiff: \" + rdiff + \", \" + \"gdiff: \" + gdiff",
                "                         + \", \" + \"bdiff: \" + bdiff + \", \" + \"colorArea: \"",
                "@@ -113,3 +117,3 @@ class ColorSpaceSubset {",
                "     public void dumpJustRGB(final String prefix) {",
                "-        System.out.println(\"\\t\" + \"rgb: \" + Integer.toHexString(rgb) + \", \"",
                "+        LOGGER.fine(\"\\t\" + \"rgb: \" + Integer.toHexString(rgb) + \", \"",
                "                 + \"red: \" + Integer.toHexString(mins[0] << (8 - precision))",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/MedianCutQuantizer.java b/src/main/java/org/apache/commons/imaging/palette/MedianCutQuantizer.java",
                "index 3ab13138..aee4d724 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/MedianCutQuantizer.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/MedianCutQuantizer.java",
                "@@ -25,3 +25,3 @@ import java.util.Map;",
                " import org.apache.commons.imaging.ImageWriteException;",
                "-import org.apache.commons.imaging.util.Debug;",
                "+import org.apache.commons.imaging.internal.Debug;",
                "@@ -85,3 +85,3 @@ public class MedianCutQuantizer {",
                "     public Palette process(final BufferedImage image, final int maxColors,",
                "-            final MedianCut medianCut, final boolean verbose)",
                "+            final MedianCut medianCut)",
                "             throws ImageWriteException {",
                "@@ -91,5 +91,3 @@ public class MedianCutQuantizer {",
                "         if (discreteColors <= maxColors) {",
                "-            if (verbose) {",
                "-                Debug.debug(\"lossless palette: \" + discreteColors);",
                "-            }",
                "+            Debug.debug(\"lossless palette: \" + discreteColors);",
                "@@ -110,5 +108,3 @@ public class MedianCutQuantizer {",
                "-        if (verbose) {",
                "-            Debug.debug(\"discrete colors: \" + discreteColors);",
                "-        }",
                "+        Debug.debug(\"discrete colors: \" + discreteColors);",
                "@@ -125,5 +121,3 @@ public class MedianCutQuantizer {",
                "         final int paletteSize = colorGroups.size();",
                "-        if (verbose) {",
                "-            Debug.debug(\"palette size: \" + paletteSize);",
                "-        }",
                "+        Debug.debug(\"palette size: \" + paletteSize);",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java b/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java",
                "index 8ebe4fe4..2bb9f2d3 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java",
                "@@ -27,2 +27,4 @@ import java.util.List;",
                " import java.util.Set;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -34,3 +36,5 @@ import org.apache.commons.imaging.ImageWriteException;",
                " public class PaletteFactory {",
                "-    private static final boolean DEBUG = false;",
                "+",
                "+    private static final Logger LOGGER = Logger.getLogger(PaletteFactory.class.getName());",
                "+",
                "     public static final int COMPONENTS = 3; // in bits",
                "@@ -68,4 +72,4 @@ public class PaletteFactory {",
                "-        if (DEBUG) {",
                "-            System.out.println(\"Used colors: \" + count);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"Used colors: \" + count);",
                "         }",
                "@@ -129,3 +133,3 @@ public class PaletteFactory {",
                "             final int component, final int precision, final int sum, final int slice) {",
                "-        if (DEBUG) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "             subset.dump(\"trying (\" + component + \"): \");",
                "@@ -157,9 +161,9 @@ public class PaletteFactory {",
                "-        if (DEBUG) {",
                "-            System.out.println(\"total: \" + total);",
                "-            System.out.println(\"first total: \" + sum);",
                "-            System.out.println(\"second total: \" + (total - sum));",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"total: \" + total);",
                "+            LOGGER.finest(\"first total: \" + sum);",
                "+            LOGGER.finest(\"second total: \" + (total - sum));",
                "             // System.out.println(\"start: \" + start);",
                "             // System.out.println(\"end: \" + end);",
                "-            System.out.println(\"slice: \" + slice);",
                "+            LOGGER.finest(\"slice: \" + slice);",
                "@@ -176,3 +180,3 @@ public class PaletteFactory {",
                "             final ColorSpaceSubset subset, final int component, final int precision) {",
                "-        if (DEBUG) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "             subset.dump(\"trying (\" + component + \"): \");",
                "@@ -293,4 +297,4 @@ public class PaletteFactory {",
                "             }",
                "-            if (DEBUG) {",
                "-                System.out.println(\"\\t\" + \"area: \" + maxArea);",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "+                LOGGER.finest(\"\\t\" + \"area: \" + maxArea);",
                "             }",
                "@@ -336,5 +340,5 @@ public class PaletteFactory {",
                "-        if (DEBUG) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "             final int preTotal = getFrequencyTotal(table, all.mins, all.maxs, precision);",
                "-            System.out.println(\"pre total: \" + preTotal);",
                "+            LOGGER.finest(\"pre total: \" + preTotal);",
                "         }",
                "@@ -352,6 +356,6 @@ public class PaletteFactory {",
                "-        if (DEBUG) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "             final int allTotal = getFrequencyTotal(table, all.mins, all.maxs, precision);",
                "-            System.out.println(\"all total: \" + allTotal);",
                "-            System.out.println(\"width * height: \" + (width * height));",
                "+            LOGGER.finest(\"all total: \" + allTotal);",
                "+            LOGGER.finest(\"width * height: \" + (width * height));",
                "         }",
                "@@ -360,5 +364,5 @@ public class PaletteFactory {",
                "-        if (DEBUG) {",
                "-            System.out.println(\"subsets: \" + subsets.size());",
                "-            System.out.println(\"width*height: \" + width * height);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+            LOGGER.finest(\"subsets: \" + subsets.size());",
                "+            LOGGER.finest(\"width*height: \" + width * height);",
                "         }",
                "@@ -370,3 +374,3 @@ public class PaletteFactory {",
                "-            if (DEBUG) {",
                "+            if (LOGGER.isLoggable(Level.FINEST)) {",
                "                 subset.dump(i + \": \");",
                "@@ -392,3 +396,3 @@ public class PaletteFactory {",
                "         return new MedianCutQuantizer(!transparent).process(src, max,",
                "-                new LongestAxisMedianCut(), false);",
                "+                new LongestAxisMedianCut());",
                "     }"
            ],
            "changed_files": [
                "src/changes/changes.xml",
                "src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "src/main/java/org/apache/commons/imaging/ImageDump.java",
                "src/main/java/org/apache/commons/imaging/ImageInfo.java",
                "src/main/java/org/apache/commons/imaging/ImageParser.java",
                "src/main/java/org/apache/commons/imaging/ImagingConstants.java",
                "src/main/java/org/apache/commons/imaging/common/BinaryFileParser.java",
                "src/main/java/org/apache/commons/imaging/common/BinaryFunctions.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageMetadata.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/JpegPhotoshopMetadata.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/JpegUtils.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/Dct.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/png/GammaCorrection.java",
                "src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceBlock.java",
                "src/main/java/org/apache/commons/imaging/formats/psd/PsdHeaderInfo.java",
                "src/main/java/org/apache/commons/imaging/formats/psd/PsdImageContents.java",
                "src/main/java/org/apache/commons/imaging/formats/psd/datareaders/CompressedDataReader.java",
                "src/main/java/org/apache/commons/imaging/formats/psd/datareaders/UncompressedDataReader.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/JpegImageData.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffContents.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffField.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffHeader.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageData.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "src/main/java/org/apache/commons/imaging/icc/IccProfileInfo.java",
                "src/main/java/org/apache/commons/imaging/icc/IccProfileParser.java",
                "src/main/java/org/apache/commons/imaging/icc/IccTag.java",
                "src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "src/main/java/org/apache/commons/imaging/internal/Debug.java",
                "src/main/java/org/apache/commons/imaging/internal/package-info.java",
                "src/main/java/org/apache/commons/imaging/palette/ColorSpaceSubset.java",
                "src/main/java/org/apache/commons/imaging/palette/MedianCutQuantizer.java",
                "src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-154": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: make",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, parse, code, hang",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-154",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b2eda69ec3e25a5c8a407707eba93453460ae9d4",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1534503788,
            "hunks": 169,
            "message": "IMAGING-103: fix site report checkstyle issues",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/imaging/FormatCompliance.java b/src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "index 26704dc8..b5a3c018 100644",
                "--- a/src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "+++ b/src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "@@ -32,3 +32,3 @@ public class FormatCompliance {",
                "-    private final static Logger LOGGER = Logger.getLogger(FormatCompliance.class.getName());",
                "+    private static final Logger LOGGER = Logger.getLogger(FormatCompliance.class.getName());",
                "diff --git a/src/main/java/org/apache/commons/imaging/Imaging.java b/src/main/java/org/apache/commons/imaging/Imaging.java",
                "index 3dc064ad..1aece536 100644",
                "--- a/src/main/java/org/apache/commons/imaging/Imaging.java",
                "+++ b/src/main/java/org/apache/commons/imaging/Imaging.java",
                "@@ -270,8 +270,6 @@ public final class Imaging {",
                "                 return ImageFormats.GIF;",
                "-            }",
                "-            // else if (b1 == 0x00 && b2 == 0x00) // too similar to TGA",
                "+            // } else if (b1 == 0x00 && b2 == 0x00) // too similar to TGA",
                "             // {",
                "             // return ImageFormat.IMAGE_FORMAT_ICO;",
                "-            // }",
                "-            else if (compareBytePair(MAGIC_NUMBERS_PNG, bytePair)) {",
                "+            } else if (compareBytePair(MAGIC_NUMBERS_PNG, bytePair)) {",
                "                 return ImageFormats.PNG;",
                "diff --git a/src/main/java/org/apache/commons/imaging/color/ColorConversions.java b/src/main/java/org/apache/commons/imaging/color/ColorConversions.java",
                "index 397bd739..84e7d0ec 100644",
                "--- a/src/main/java/org/apache/commons/imaging/color/ColorConversions.java",
                "+++ b/src/main/java/org/apache/commons/imaging/color/ColorConversions.java",
                "@@ -275,5 +275,3 @@ public final class ColorConversions {",
                "-    public static int convertCMYKtoRGB(final int c, final int m, final int y, final int k)",
                "-    // throws ImageReadException, IOException",
                "-    {",
                "+    public static int convertCMYKtoRGB(final int c, final int m, final int y, final int k) {",
                "         final double C = c / 255.0;",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/FastByteArrayOutputStream.java b/src/main/java/org/apache/commons/imaging/common/FastByteArrayOutputStream.java",
                "index 0ab41001..c7f002c3 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/FastByteArrayOutputStream.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/FastByteArrayOutputStream.java",
                "@@ -29,3 +29,3 @@ class FastByteArrayOutputStream extends OutputStream {",
                "-    public FastByteArrayOutputStream(final int length) {",
                "+    FastByteArrayOutputStream(final int length) {",
                "         bytes = new byte[length];",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/bytesource/ByteSourceInputStream.java b/src/main/java/org/apache/commons/imaging/common/bytesource/ByteSourceInputStream.java",
                "index 2398fac8..ccbc9c48 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/bytesource/ByteSourceInputStream.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/bytesource/ByteSourceInputStream.java",
                "@@ -43,3 +43,3 @@ public class ByteSourceInputStream extends ByteSource {",
                "-        public CacheBlock(final byte[] bytes) {",
                "+        CacheBlock(final byte[] bytes) {",
                "             this.bytes = bytes;",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/itu_t4/BitArrayOutputStream.java b/src/main/java/org/apache/commons/imaging/common/itu_t4/BitArrayOutputStream.java",
                "index 1f71ea6a..40d23673 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/itu_t4/BitArrayOutputStream.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/itu_t4/BitArrayOutputStream.java",
                "@@ -30,3 +30,3 @@ class BitArrayOutputStream extends OutputStream {",
                "-    public BitArrayOutputStream() {",
                "+    BitArrayOutputStream() {",
                "         buffer = new byte[16];",
                "@@ -34,3 +34,3 @@ class BitArrayOutputStream extends OutputStream {",
                "-    public BitArrayOutputStream(final int size) {",
                "+    BitArrayOutputStream(final int size) {",
                "         buffer = new byte[size];",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/itu_t4/BitInputStreamFlexible.java b/src/main/java/org/apache/commons/imaging/common/itu_t4/BitInputStreamFlexible.java",
                "index a321ac28..a3f8e01f 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/itu_t4/BitInputStreamFlexible.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/itu_t4/BitInputStreamFlexible.java",
                "@@ -34,3 +34,3 @@ class BitInputStreamFlexible extends InputStream {",
                "-    public BitInputStreamFlexible(final InputStream is) {",
                "+    BitInputStreamFlexible(final InputStream is) {",
                "         this.is = is;",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/itu_t4/HuffmanTreeException.java b/src/main/java/org/apache/commons/imaging/common/itu_t4/HuffmanTreeException.java",
                "index ded4a5be..f63e691e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/itu_t4/HuffmanTreeException.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/itu_t4/HuffmanTreeException.java",
                "@@ -21,3 +21,3 @@ class HuffmanTreeException extends Exception {",
                "-    public HuffmanTreeException(final String message) {",
                "+    HuffmanTreeException(final String message) {",
                "         super(message);",
                "@@ -25,3 +25,3 @@ class HuffmanTreeException extends Exception {",
                "-    public HuffmanTreeException(final String message, final Throwable cause) {",
                "+    HuffmanTreeException(final String message, final Throwable cause) {",
                "         super(message, cause);",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/itu_t4/T4_T6_Tables.java b/src/main/java/org/apache/commons/imaging/common/itu_t4/T4_T6_Tables.java",
                "index 69c848e7..46887e52 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/itu_t4/T4_T6_Tables.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/itu_t4/T4_T6_Tables.java",
                "@@ -246,3 +246,3 @@ class T4_T6_Tables {",
                "-        public Entry(final String bitString, final int value) {",
                "+        Entry(final String bitString, final int value) {",
                "             this.bitString = bitString;",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwCompressor.java b/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwCompressor.java",
                "index 76264e6f..be6e3356 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwCompressor.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwCompressor.java",
                "@@ -89,3 +89,3 @@ public class MyLzwCompressor {",
                "-    private final static class ByteArray {",
                "+    private static final class ByteArray {",
                "         private final byte[] bytes;",
                "@@ -95,3 +95,3 @@ public class MyLzwCompressor {",
                "-        public ByteArray(final byte[] bytes, final int start, final int length) {",
                "+        ByteArray(final byte[] bytes, final int start, final int length) {",
                "             this.bytes = bytes;",
                "diff --git a/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwDecompressor.java b/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwDecompressor.java",
                "index 34e4879d..bb096c66 100644",
                "--- a/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwDecompressor.java",
                "+++ b/src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwDecompressor.java",
                "@@ -162,4 +162,3 @@ public final class MyLzwDecompressor {",
                "                 oldCode = code;",
                "-            } // end of ClearCode case",
                "-            else {",
                "+            } else {",
                "                 if (isInTable(code)) {",
                "@@ -177,3 +176,3 @@ public final class MyLzwDecompressor {",
                "                 }",
                "-            } // end of not-ClearCode case",
                "+            }",
                "@@ -182,3 +181,3 @@ public final class MyLzwDecompressor {",
                "             }",
                "-        } // end of while loop",
                "+        }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpHeaderInfo.java b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpHeaderInfo.java",
                "index 62785d8c..0106dbe6 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpHeaderInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpHeaderInfo.java",
                "@@ -71,3 +71,3 @@ class BmpHeaderInfo {",
                "-    public BmpHeaderInfo(final byte identifier1, final byte identifier2, final int fileSize,",
                "+    BmpHeaderInfo(final byte identifier1, final byte identifier2, final int fileSize,",
                "             final int reserved, final int bitmapDataOffset, final int bitmapHeaderSize,",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageContents.java b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageContents.java",
                "index c3197b31..dcded90e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageContents.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageContents.java",
                "@@ -25,3 +25,3 @@ class BmpImageContents {",
                "-    public BmpImageContents(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData, final PixelParser pixelParser) {",
                "+    BmpImageContents(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData, final PixelParser pixelParser) {",
                "         this.bhi = bhi;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpWriterPalette.java b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpWriterPalette.java",
                "index 17b68593..64f6adca 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/BmpWriterPalette.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/BmpWriterPalette.java",
                "@@ -30,3 +30,3 @@ class BmpWriterPalette implements BmpWriter {",
                "-    public BmpWriterPalette(final SimplePalette palette) {",
                "+    BmpWriterPalette(final SimplePalette palette) {",
                "         this.palette = palette;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParser.java b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParser.java",
                "index cdbf9a2e..0692b74d 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParser.java",
                "@@ -33,3 +33,3 @@ abstract class PixelParser {",
                "-    public PixelParser(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "+    PixelParser(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "         this.bhi = bhi;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserBitFields.java b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserBitFields.java",
                "index 037b344a..42f7ac84 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserBitFields.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserBitFields.java",
                "@@ -18,2 +18,7 @@ package org.apache.commons.imaging.formats.bmp;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read3Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read4Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.IOException;",
                "@@ -23,4 +28,2 @@ import org.apache.commons.imaging.ImageReadException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " class PixelParserBitFields extends PixelParserSimple {",
                "@@ -39,3 +42,3 @@ class PixelParserBitFields extends PixelParserSimple {",
                "-    public PixelParserBitFields(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "+    PixelParserBitFields(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "         super(bhi, colorTable, imageData);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRgb.java b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRgb.java",
                "index 14750898..2b17145d 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRgb.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRgb.java",
                "@@ -18,2 +18,5 @@ package org.apache.commons.imaging.formats.bmp;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.IOException;",
                "@@ -23,4 +26,2 @@ import org.apache.commons.imaging.ImageReadException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " class PixelParserRgb extends PixelParserSimple {",
                "@@ -30,3 +31,3 @@ class PixelParserRgb extends PixelParserSimple {",
                "-    public PixelParserRgb(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "+    PixelParserRgb(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "         super(bhi, colorTable, imageData);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "index 88f6c343..535fe578 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "@@ -29,5 +29,4 @@ class PixelParserRle extends PixelParser {",
                "-    public PixelParserRle(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "+    PixelParserRle(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "         super(bhi, colorTable, imageData);",
                "-",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserSimple.java b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserSimple.java",
                "index b2171d48..92ff910e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserSimple.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserSimple.java",
                "@@ -24,3 +24,3 @@ import org.apache.commons.imaging.common.ImageBuilder;",
                " abstract class PixelParserSimple extends PixelParser {",
                "-    public PixelParserSimple(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "+    PixelParserSimple(final BmpHeaderInfo bhi, final byte[] colorTable, final byte[] imageData) {",
                "         super(bhi, colorTable, imageData);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java b/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "index d60c17a4..4d7dca29 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "@@ -113,3 +113,3 @@ public class DcxImageParser extends ImageParser {",
                "-        public DcxHeader(final int id, final long[] pageTable) {",
                "+        DcxHeader(final int id, final long[] pageTable) {",
                "             this.id = id;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/gif/GenericGifBlock.java b/src/main/java/org/apache/commons/imaging/formats/gif/GenericGifBlock.java",
                "index bc8b30d1..8f04bd87 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/gif/GenericGifBlock.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/gif/GenericGifBlock.java",
                "@@ -25,3 +25,3 @@ class GenericGifBlock extends GifBlock {",
                "-    public GenericGifBlock(final int blockCode, final List<byte[]> subblocks) {",
                "+    GenericGifBlock(final int blockCode, final List<byte[]> subblocks) {",
                "         super(blockCode);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/gif/GifHeaderInfo.java b/src/main/java/org/apache/commons/imaging/formats/gif/GifHeaderInfo.java",
                "index ee4f11fb..eb9c180a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/gif/GifHeaderInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/gif/GifHeaderInfo.java",
                "@@ -36,3 +36,3 @@ class GifHeaderInfo {",
                "-    public GifHeaderInfo(final byte identifier1, final byte identifier2, final byte identifier3,",
                "+    GifHeaderInfo(final byte identifier1, final byte identifier2, final byte identifier3,",
                "             final byte version1, final byte version2, final byte version3,",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java b/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "index 2cb4768d..53b7c8ba 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "@@ -76,6 +76,6 @@ public class GifImageParser extends ImageParser {",
                "             | XMP_EXTENSION;",
                "-    private final static int LOCAL_COLOR_TABLE_FLAG_MASK = 1 << 7;",
                "-    private final static int INTERLACE_FLAG_MASK = 1 << 6;",
                "-    private final static int SORT_FLAG_MASK = 1 << 5;",
                "-    private final static byte[] XMP_APPLICATION_ID_AND_AUTH_CODE = {",
                "+    private static final int LOCAL_COLOR_TABLE_FLAG_MASK = 1 << 7;",
                "+    private static final int INTERLACE_FLAG_MASK = 1 << 6;",
                "+    private static final int SORT_FLAG_MASK = 1 << 5;",
                "+    private static final byte[] XMP_APPLICATION_ID_AND_AUTH_CODE = {",
                "         0x58, // X",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/gif/GraphicControlExtension.java b/src/main/java/org/apache/commons/imaging/formats/gif/GraphicControlExtension.java",
                "index 4a46f996..92ca5db6 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/gif/GraphicControlExtension.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/gif/GraphicControlExtension.java",
                "@@ -26,3 +26,3 @@ class GraphicControlExtension extends GifBlock {",
                "-    public GraphicControlExtension(final int blockCode, final int packed, final int dispose,",
                "+    GraphicControlExtension(final int blockCode, final int packed, final int dispose,",
                "             final boolean transparency, final int delay, final int transparentColorIndex) {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java b/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "index 62153362..f88d06c9 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "@@ -135,3 +135,3 @@ public class IcnsImageParser extends ImageParser {",
                "-        public IcnsHeader(final int magic, final int fileSize) {",
                "+        IcnsHeader(final int magic, final int fileSize) {",
                "             this.magic = magic;",
                "@@ -166,3 +166,3 @@ public class IcnsImageParser extends ImageParser {",
                "-        public IcnsElement(final int type, final int elementSize, final byte[] data) {",
                "+        IcnsElement(final int type, final int elementSize, final byte[] data) {",
                "             this.type = type;",
                "@@ -211,3 +211,3 @@ public class IcnsImageParser extends ImageParser {",
                "-        public IcnsContents(final IcnsHeader icnsHeader, final IcnsElement[] icnsElements) {",
                "+        IcnsContents(final IcnsHeader icnsHeader, final IcnsElement[] icnsElements) {",
                "             super();",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/icns/IcnsType.java b/src/main/java/org/apache/commons/imaging/formats/icns/IcnsType.java",
                "index 5721da42..021cd7de 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/icns/IcnsType.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/icns/IcnsType.java",
                "@@ -87,3 +87,3 @@ enum IcnsType {",
                "-    private IcnsType(final String type, final int width, final int height, final int bitsPerPixel, final boolean hasMask) {",
                "+    IcnsType(final String type, final int width, final int height, final int bitsPerPixel, final boolean hasMask) {",
                "         this.type = typeAsInt(type);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java b/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java",
                "index 43836338..36aec661 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java",
                "@@ -118,3 +118,3 @@ public class IcoImageParser extends ImageParser {",
                "-        public FileHeader(final int reserved, final int iconType, final int iconCount) {",
                "+        FileHeader(final int reserved, final int iconType, final int iconCount) {",
                "             this.reserved = reserved;",
                "@@ -159,3 +159,3 @@ public class IcoImageParser extends ImageParser {",
                "-        public IconInfo(final byte width, final byte height,",
                "+        IconInfo(final byte width, final byte height,",
                "                 final byte colorCount, final byte reserved, final int planes,",
                "@@ -223,3 +223,3 @@ public class IcoImageParser extends ImageParser {",
                "-        public BitmapHeader(final int size, final int width, final int height,",
                "+        BitmapHeader(final int size, final int width, final int height,",
                "                 final int planes, final int bitCount, final int compression,",
                "@@ -258,6 +258,6 @@ public class IcoImageParser extends ImageParser {",
                "-    private static abstract class IconData {",
                "+    private abstract static class IconData {",
                "         public final IconInfo iconInfo;",
                "-        public IconData(final IconInfo iconInfo) {",
                "+        IconData(final IconInfo iconInfo) {",
                "             this.iconInfo = iconInfo;",
                "@@ -281,3 +281,3 @@ public class IcoImageParser extends ImageParser {",
                "-        public BitmapIconData(final IconInfo iconInfo,",
                "+        BitmapIconData(final IconInfo iconInfo,",
                "                 final BitmapHeader header, final BufferedImage bufferedImage) {",
                "@@ -304,3 +304,3 @@ public class IcoImageParser extends ImageParser {",
                "-        public PNGIconData(final IconInfo iconInfo,",
                "+        PNGIconData(final IconInfo iconInfo,",
                "                 final BufferedImage bufferedImage) {",
                "@@ -534,4 +534,3 @@ public class IcoImageParser extends ImageParser {",
                "-        public ImageContents(final FileHeader fileHeader,",
                "-                final IconData[] iconDatas) {",
                "+        ImageContents(final FileHeader fileHeader, final IconData[] iconDatas) {",
                "             super();",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "index fff62714..ea3742d8 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "@@ -18,2 +18,6 @@ package org.apache.commons.imaging.formats.jpeg;",
                "+import static org.apache.commons.imaging.ImagingConstants.PARAM_KEY_READ_THUMBNAILS;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.remainingBytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.startsWith;",
                "+",
                " import java.awt.Dimension;",
                "@@ -61,5 +65,2 @@ import org.apache.commons.imaging.internal.Debug;",
                "-import static org.apache.commons.imaging.ImagingConstants.*;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class JpegImageParser extends ImageParser {",
                "@@ -73,3 +74,2 @@ public class JpegImageParser extends ImageParser {",
                "         setByteOrder(ByteOrder.BIG_ENDIAN);",
                "-        // setDebug(true);",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java",
                "index 0e29971c..3561fcbc 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java",
                "@@ -17,2 +17,5 @@ package org.apache.commons.imaging.formats.jpeg.decoder;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readBytes;",
                "+",
                " import java.awt.image.BufferedImage;",
                "@@ -38,4 +41,2 @@ import org.apache.commons.imaging.formats.jpeg.segments.SosSegment;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class JpegDecoder extends BinaryFileParser implements JpegUtils.Visitor {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegInputStream.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegInputStream.java",
                "index b0691f64..375bed53 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegInputStream.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegInputStream.java",
                "@@ -29,3 +29,3 @@ class JpegInputStream {",
                "-    public JpegInputStream(final InputStream is) {",
                "+    JpegInputStream(final InputStream is) {",
                "         this.is = is;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriter.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriter.java",
                "index 6db70a7e..b5dc6497 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriter.java",
                "@@ -79,3 +79,3 @@ public class ExifRewriter extends BinaryFileParser {",
                "-        public JFIFPieces(final List<JFIFPiece> pieces,",
                "+        JFIFPieces(final List<JFIFPiece> pieces,",
                "                 final List<JFIFPiece> exifPieces) {",
                "@@ -97,3 +97,3 @@ public class ExifRewriter extends BinaryFileParser {",
                "-        public JFIFPieceSegment(final int marker, final byte[] markerBytes,",
                "+        JFIFPieceSegment(final int marker, final byte[] markerBytes,",
                "                 final byte[] markerLengthBytes, final byte[] segmentData) {",
                "@@ -115,3 +115,3 @@ public class ExifRewriter extends BinaryFileParser {",
                "-        public JFIFPieceSegmentExif(final int marker, final byte[] markerBytes,",
                "+        JFIFPieceSegmentExif(final int marker, final byte[] markerBytes,",
                "                 final byte[] markerLengthBytes, final byte[] segmentData) {",
                "@@ -125,3 +125,3 @@ public class ExifRewriter extends BinaryFileParser {",
                "-        public JFIFPieceImageData(final byte[] markerBytes, final byte[] imageData) {",
                "+        JFIFPieceImageData(final byte[] markerBytes, final byte[] imageData) {",
                "             super();",
                "@@ -138,6 +138,3 @@ public class ExifRewriter extends BinaryFileParser {",
                "-    private JFIFPieces analyzeJFIF(final ByteSource byteSource)",
                "-            throws ImageReadException, IOException",
                "-    // , ImageWriteException",
                "-    {",
                "+    private JFIFPieces analyzeJFIF(final ByteSource byteSource) throws ImageReadException, IOException {",
                "         final List<JFIFPiece> pieces = new ArrayList<>();",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App14Segment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App14Segment.java",
                "index a859bd11..2bfaf387 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App14Segment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App14Segment.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.startsWith;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -23,4 +25,2 @@ import java.nio.charset.StandardCharsets;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " /**",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App2Segment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App2Segment.java",
                "index f1b1caa7..ce8c9497 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App2Segment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App2Segment.java",
                "@@ -18,2 +18,7 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readAndVerifyBytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readBytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.startsWith;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -25,4 +30,2 @@ import org.apache.commons.imaging.formats.jpeg.JpegConstants;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class App2Segment extends AppnSegment implements Comparable<App2Segment> {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DhtSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DhtSegment.java",
                "index b12c8fc2..0e276a5c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DhtSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DhtSegment.java",
                "@@ -17,2 +17,4 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -24,4 +26,2 @@ import java.util.List;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class DhtSegment extends Segment {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DqtSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DqtSegment.java",
                "index 1aaf270e..7998c48a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DqtSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DqtSegment.java",
                "@@ -17,2 +17,5 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -25,4 +28,2 @@ import org.apache.commons.imaging.ImageReadException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class DqtSegment extends Segment {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/GenericSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/GenericSegment.java",
                "index 2b64d00f..2abbeb6e 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/GenericSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/GenericSegment.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readBytes;",
                "+",
                " import java.io.IOException;",
                "@@ -23,4 +25,2 @@ import java.io.UnsupportedEncodingException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public abstract class GenericSegment extends Segment {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "index bd3a4a27..d4afe584 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "@@ -18,2 +18,7 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readBytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.skipBytes;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -25,4 +30,2 @@ import org.apache.commons.imaging.formats.jpeg.JpegConstants;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class JfifSegment extends Segment {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "index 4b133123..df319ca1 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "@@ -18,2 +18,5 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -26,4 +29,2 @@ import org.apache.commons.imaging.formats.jpeg.JpegConstants;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class SofnSegment extends Segment {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "index 29f27420..4b070748 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.jpeg.segments;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -24,4 +26,2 @@ import java.util.logging.Logger;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class SosSegment extends Segment {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/jpeg/xmp/JpegRewriter.java b/src/main/java/org/apache/commons/imaging/formats/jpeg/xmp/JpegRewriter.java",
                "index 1e1d2ccb..cc784512 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/jpeg/xmp/JpegRewriter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/jpeg/xmp/JpegRewriter.java",
                "@@ -184,6 +184,3 @@ public class JpegRewriter extends BinaryFileParser {",
                "-    protected JFIFPieces analyzeJFIF(final ByteSource byteSource)",
                "-            throws ImageReadException, IOException",
                "-    // , ImageWriteException",
                "-    {",
                "+    protected JFIFPieces analyzeJFIF(final ByteSource byteSource) throws ImageReadException, IOException {",
                "         final List<JFIFPiece> pieces = new ArrayList<>();",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java b/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "index 4be8d6c4..1bca37aa 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "@@ -182,3 +182,3 @@ public class PcxImageParser extends ImageParser {",
                "-        public PcxHeader(final int manufacturer, final int version,",
                "+        PcxHeader(final int manufacturer, final int version,",
                "                 final int encoding, final int bitsPerPixel, final int xMin,",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pcx/PcxWriter.java b/src/main/java/org/apache/commons/imaging/formats/pcx/PcxWriter.java",
                "index fb5a92da..f484df9c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pcx/PcxWriter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pcx/PcxWriter.java",
                "@@ -39,3 +39,3 @@ class PcxWriter {",
                "-    public PcxWriter(Map<String, Object> params) throws ImageWriteException {",
                "+    PcxWriter(Map<String, Object> params) throws ImageWriteException {",
                "         // make copy of params; we'll clear keys as we consume them.",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/BitParser.java b/src/main/java/org/apache/commons/imaging/formats/png/BitParser.java",
                "index 18bed377..03fcbb54 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/BitParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/BitParser.java",
                "@@ -25,3 +25,3 @@ class BitParser {",
                "-    public BitParser(final byte[] bytes, final int bitsPerPixel, final int bitDepth) {",
                "+    BitParser(final byte[] bytes, final int bitsPerPixel, final int bitDepth) {",
                "         this.bytes = bytes; // TODO clone?",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/ChunkType.java b/src/main/java/org/apache/commons/imaging/formats/png/ChunkType.java",
                "index ef8f8731..f09e2afe 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/ChunkType.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/ChunkType.java",
                "@@ -89,3 +89,3 @@ public enum ChunkType {",
                "-    private ChunkType() {",
                "+    ChunkType() {",
                "         final char[] chars = name().toCharArray();",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/InterlaceMethod.java b/src/main/java/org/apache/commons/imaging/formats/png/InterlaceMethod.java",
                "index 9bc4ec0b..61781d02 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/InterlaceMethod.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/InterlaceMethod.java",
                "@@ -30,3 +30,3 @@ public enum InterlaceMethod {",
                "-    private InterlaceMethod(final boolean progressive) {",
                "+    InterlaceMethod(final boolean progressive) {",
                "         this.progressive = progressive;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java b/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "index 94792b0f..59453448 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "@@ -88,3 +88,3 @@ class PngWriter {",
                "-        public ImageHeader(final int width, final int height, final byte bitDepth,",
                "+        ImageHeader(final int width, final int height, final byte bitDepth,",
                "                 final PngColorType pngColorType, final byte compressionMethod, final byte filterMethod,",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediter.java b/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediter.java",
                "index 97a281ec..9e494c4a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediter.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.png;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readBytes;",
                "+",
                " import java.awt.image.BufferedImage;",
                "@@ -32,4 +34,2 @@ import org.apache.commons.imaging.formats.png.transparencyfilters.TransparencyFi",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " abstract class ScanExpediter {",
                "@@ -47,8 +47,6 @@ abstract class ScanExpediter {",
                "-    public ScanExpediter(final int width, final int height, final InputStream is,",
                "+    ScanExpediter(final int width, final int height, final InputStream is,",
                "             final BufferedImage bi, final PngColorType pngColorType, final int bitDepth, final int bitsPerPixel,",
                "             final PngChunkPlte pngChunkPLTE, final GammaCorrection gammaCorrection,",
                "-            final TransparencyFilter transparencyFilter)",
                "-",
                "-    {",
                "+            final TransparencyFilter transparencyFilter) {",
                "         this.width = width;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterInterlaced.java b/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterInterlaced.java",
                "index 8e8a5132..ff7114d6 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterInterlaced.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterInterlaced.java",
                "@@ -39,5 +39,3 @@ class ScanExpediterInterlaced extends ScanExpediter {",
                "             final GammaCorrection gammaCorrection,",
                "-            final TransparencyFilter transparencyFilter)",
                "-",
                "-    {",
                "+            final TransparencyFilter transparencyFilter) {",
                "         super(width, height, is, bi, pngColorType, bitDepth, bitsPerPixel,",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterSimple.java b/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterSimple.java",
                "index 2c8c13cf..9e2bf82a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterSimple.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterSimple.java",
                "@@ -30,5 +30,3 @@ class ScanExpediterSimple extends ScanExpediter {",
                "             final PngChunkPlte pngChunkPLTE, final GammaCorrection gammaCorrection,",
                "-            final TransparencyFilter transparencyFilter)",
                "-",
                "-    {",
                "+            final TransparencyFilter transparencyFilter) {",
                "         super(width, height, is, bi, pngColorType, bitDepth, bitsPerPixel,",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkGama.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkGama.java",
                "index 53f197d4..f995d0c0 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkGama.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkGama.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read4Bytes;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -21,4 +23,2 @@ import java.io.IOException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class PngChunkGama extends PngChunk {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "index e0067ab8..e3fd1e78 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "@@ -18,2 +18,5 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.findNull;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.getStreamBytes;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -27,4 +30,2 @@ import org.apache.commons.imaging.ImageReadException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class PngChunkIccp extends PngChunk {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIhdr.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIhdr.java",
                "index a864202d..f8ad5327 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIhdr.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIhdr.java",
                "@@ -18,2 +18,5 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read4Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -22,6 +25,4 @@ import java.io.IOException;",
                " import org.apache.commons.imaging.ImageReadException;",
                "-import org.apache.commons.imaging.formats.png.PngColorType;",
                " import org.apache.commons.imaging.formats.png.InterlaceMethod;",
                "-",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "+import org.apache.commons.imaging.formats.png.PngColorType;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkItxt.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkItxt.java",
                "index 73dd19bb..36f6e0d0 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkItxt.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkItxt.java",
                "@@ -18,2 +18,5 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.findNull;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.getStreamBytes;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -27,4 +30,2 @@ import org.apache.commons.imaging.formats.png.PngText;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class PngChunkItxt extends PngTextChunk {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPhys.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPhys.java",
                "index 2fd914d8..742d9527 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPhys.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPhys.java",
                "@@ -18,2 +18,5 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read4Bytes;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -21,4 +24,2 @@ import java.io.IOException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class PngChunkPhys extends PngChunk {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPlte.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPlte.java",
                "index d6957b44..971ef397 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPlte.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPlte.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.readByte;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -24,4 +26,2 @@ import org.apache.commons.imaging.formats.png.GammaCorrection;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class PngChunkPlte extends PngChunk {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "index 86132b1e..a9a68553 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.findNull;",
                "+",
                " import java.io.IOException;",
                "@@ -26,4 +28,2 @@ import org.apache.commons.imaging.formats.png.PngText;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class PngChunkText extends PngTextChunk {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkZtxt.java b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkZtxt.java",
                "index 6a90a3fd..4008c41a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkZtxt.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkZtxt.java",
                "@@ -18,2 +18,5 @@ package org.apache.commons.imaging.formats.png.chunks;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.findNull;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.getStreamBytes;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -27,4 +30,2 @@ import org.apache.commons.imaging.formats.png.PngText;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class PngChunkZtxt extends PngTextChunk {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterGrayscale.java b/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterGrayscale.java",
                "index b5bb7102..00eef5e4 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterGrayscale.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterGrayscale.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.png.transparencyfilters;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -23,4 +25,2 @@ import org.apache.commons.imaging.ImageReadException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class TransparencyFilterGrayscale extends TransparencyFilter {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterTrueColor.java b/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterTrueColor.java",
                "index 9ad774ec..00c6cf16 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterTrueColor.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterTrueColor.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.png.transparencyfilters;",
                "+import static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -23,4 +25,2 @@ import org.apache.commons.imaging.ImageReadException;",
                "-import static org.apache.commons.imaging.common.BinaryFunctions.*;",
                "-",
                " public class TransparencyFilterTrueColor extends TransparencyFilter {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pnm/PamFileInfo.java b/src/main/java/org/apache/commons/imaging/formats/pnm/PamFileInfo.java",
                "index a8e1dee6..651bb2d5 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pnm/PamFileInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pnm/PamFileInfo.java",
                "@@ -118,3 +118,3 @@ class PamFileInfo extends FileInfo {",
                "-        public GrayscaleTupleReader(final ImageInfo.ColorType colorType) {",
                "+        GrayscaleTupleReader(final ImageInfo.ColorType colorType) {",
                "             this.colorType = colorType;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pnm/PgmFileInfo.java b/src/main/java/org/apache/commons/imaging/formats/pnm/PgmFileInfo.java",
                "index b4a7bfe5..ef066e71 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pnm/PgmFileInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pnm/PgmFileInfo.java",
                "@@ -31,3 +31,3 @@ class PgmFileInfo extends FileInfo {",
                "-    public PgmFileInfo(final int width, final int height, final boolean rawbits, final int max) throws ImageReadException {",
                "+    PgmFileInfo(final int width, final int height, final boolean rawbits, final int max) throws ImageReadException {",
                "         super(width, height, rawbits);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pnm/PgmWriter.java b/src/main/java/org/apache/commons/imaging/formats/pnm/PgmWriter.java",
                "index 97563a07..070fb077 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pnm/PgmWriter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pnm/PgmWriter.java",
                "@@ -30,3 +30,3 @@ class PgmWriter implements PnmWriter {",
                "-    public PgmWriter(final boolean rawbits) {",
                "+    PgmWriter(final boolean rawbits) {",
                "         this.rawbits = rawbits;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pnm/PpmFileInfo.java b/src/main/java/org/apache/commons/imaging/formats/pnm/PpmFileInfo.java",
                "index 24ea26e8..599164ff 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pnm/PpmFileInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pnm/PpmFileInfo.java",
                "@@ -31,3 +31,3 @@ class PpmFileInfo extends FileInfo {",
                "-    public PpmFileInfo(final int width, final int height, final boolean rawbits, final int max) throws ImageReadException {",
                "+    PpmFileInfo(final int width, final int height, final boolean rawbits, final int max) throws ImageReadException {",
                "         super(width, height, rawbits);",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pnm/PpmWriter.java b/src/main/java/org/apache/commons/imaging/formats/pnm/PpmWriter.java",
                "index 1bea15f0..53aa6f76 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pnm/PpmWriter.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pnm/PpmWriter.java",
                "@@ -30,3 +30,3 @@ class PpmWriter implements PnmWriter {",
                "-    public PpmWriter(final boolean rawbits) {",
                "+    PpmWriter(final boolean rawbits) {",
                "         this.rawbits = rawbits;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/pnm/WhiteSpaceReader.java b/src/main/java/org/apache/commons/imaging/formats/pnm/WhiteSpaceReader.java",
                "index a4df343d..509df99c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/pnm/WhiteSpaceReader.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/pnm/WhiteSpaceReader.java",
                "@@ -24,3 +24,3 @@ class WhiteSpaceReader {",
                "-    public WhiteSpaceReader(final InputStream is) {",
                "+    WhiteSpaceReader(final InputStream is) {",
                "         this.is = is;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceType.java b/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceType.java",
                "index 602a1b3e..161bfbde 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceType.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceType.java",
                "@@ -129,3 +129,3 @@ class ImageResourceType {",
                "-    public ImageResourceType(final int id, final String description) {",
                "+    ImageResourceType(final int id, final String description) {",
                "         this.from = id;",
                "@@ -135,3 +135,3 @@ class ImageResourceType {",
                "-    public ImageResourceType(final int id, final int id2, final String description) {",
                "+    ImageResourceType(final int id, final int id2, final String description) {",
                "         this.from = id;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/rgbe/InfoHeaderReader.java b/src/main/java/org/apache/commons/imaging/formats/rgbe/InfoHeaderReader.java",
                "index 331ed5b5..fff7e7f3 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/rgbe/InfoHeaderReader.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/rgbe/InfoHeaderReader.java",
                "@@ -24,3 +24,3 @@ class InfoHeaderReader {",
                "-    public InfoHeaderReader(final InputStream is) {",
                "+    InfoHeaderReader(final InputStream is) {",
                "         this.is = is;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "index b8c31070..26e49cf8 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "@@ -43,3 +43,3 @@ public abstract class TiffElement {",
                "-    public static abstract class DataElement extends TiffElement {",
                "+    public abstract static class DataElement extends TiffElement {",
                "         private final byte[] data;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageParser.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageParser.java",
                "index 7235f2e3..6d215a25 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageParser.java",
                "@@ -18,2 +18,11 @@ package org.apache.commons.imaging.formats.tiff;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_CCITT_1D;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_CCITT_GROUP_3;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_CCITT_GROUP_4;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_JPEG;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_LZW;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_PACKBITS;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_UNCOMPRESSED_1;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_UNCOMPRESSED_2;",
                "+",
                " import java.awt.Dimension;",
                "@@ -37,4 +46,4 @@ import org.apache.commons.imaging.ImageReadException;",
                " import org.apache.commons.imaging.ImageWriteException;",
                "-import org.apache.commons.imaging.common.ImageMetadata;",
                " import org.apache.commons.imaging.common.ImageBuilder;",
                "+import org.apache.commons.imaging.common.ImageMetadata;",
                " import org.apache.commons.imaging.common.bytesource.ByteSource;",
                "@@ -55,4 +64,2 @@ import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;",
                "-import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.*;",
                "-",
                " public class TiffImageParser extends ImageParser {",
                "@@ -483,4 +490,3 @@ public class TiffImageParser extends ImageParser {",
                "             final String key, final Map<String, Object>params)",
                "-            throws ImageReadException",
                "-    {",
                "+            throws ImageReadException {",
                "         if (params == null) {",
                "@@ -503,4 +509,3 @@ public class TiffImageParser extends ImageParser {",
                "             final Map<String, Object> params)",
                "-            throws ImageReadException",
                "-    {",
                "+            throws ImageReadException {",
                "         final Integer ix0 = getIntegerParameter(TiffConstants.PARAM_KEY_SUBIMAGE_X, params);",
                "@@ -537,4 +542,3 @@ public class TiffImageParser extends ImageParser {",
                "             final ByteOrder byteOrder, final Map<String, Object> params)",
                "-            throws ImageReadException, IOException",
                "-    {",
                "+            throws ImageReadException, IOException {",
                "         final List<TiffField> entries = directory.entries;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "index 61506451..8e9ea25f 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "@@ -288,3 +288,3 @@ public class TiffReader extends BinaryFileParser {",
                "-        public Collector() {",
                "+        Collector() {",
                "             this(null);",
                "@@ -292,3 +292,3 @@ public class TiffReader extends BinaryFileParser {",
                "-        public Collector(final Map<String, Object> params) {",
                "+        Collector(final Map<String, Object> params) {",
                "             boolean tmpReadThumbnails = true;",
                "@@ -336,3 +336,3 @@ public class TiffReader extends BinaryFileParser {",
                "-        public FirstDirectoryCollector(final boolean readImageData) {",
                "+        FirstDirectoryCollector(final boolean readImageData) {",
                "             this.readImageData = readImageData;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/constants/AdobePhotoshopTagConstants.java b/src/main/java/org/apache/commons/imaging/formats/tiff/constants/AdobePhotoshopTagConstants.java",
                "index a3aab61e..33c8b22b 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/constants/AdobePhotoshopTagConstants.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/constants/AdobePhotoshopTagConstants.java",
                "@@ -34,3 +34,3 @@ public final class AdobePhotoshopTagConstants {",
                "-    public final static TagInfoUndefineds EXIF_TAG_JPEGTABLES = new TagInfoUndefineds(",
                "+    public static final TagInfoUndefineds EXIF_TAG_JPEGTABLES = new TagInfoUndefineds(",
                "             \"JPEGTables\", 0x015b, -1,",
                "@@ -38,3 +38,3 @@ public final class AdobePhotoshopTagConstants {",
                "-    public final static TagInfoUndefineds EXIF_TAG_IMAGE_SOURCE_DATA = new TagInfoUndefineds(",
                "+    public static final TagInfoUndefineds EXIF_TAG_IMAGE_SOURCE_DATA = new TagInfoUndefineds(",
                "             \"ImageSourceData\", 0x935c, -1,",
                "@@ -42,3 +42,3 @@ public final class AdobePhotoshopTagConstants {",
                "-    public final static List<TagInfo> ALL_ADOBE_PHOTOSHOP_TAGS =",
                "+    public static final List<TagInfo> ALL_ADOBE_PHOTOSHOP_TAGS =",
                "             Collections.unmodifiableList(Arrays.<TagInfo> asList(",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/BitInputStream.java b/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/BitInputStream.java",
                "index f20320c0..045643fa 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/BitInputStream.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/BitInputStream.java",
                "@@ -34,3 +34,3 @@ class BitInputStream extends InputStream {",
                "-    public BitInputStream(final InputStream is, final ByteOrder byteOrder) {",
                "+    BitInputStream(final InputStream is, final ByteOrder byteOrder) {",
                "         this.is = is;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java b/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java",
                "index a44bf7dd..113b9781 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java",
                "@@ -223,4 +223,3 @@ public final class DataReaderStrips extends ImageDataReader {",
                "     public BufferedImage readImageData(final Rectangle subImage)",
                "-            throws ImageReadException, IOException",
                "-    {",
                "+            throws ImageReadException, IOException {",
                "         // the legacy code is optimized to the reading of whole",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderTiled.java b/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderTiled.java",
                "index dae6d1fe..d6a206db 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderTiled.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderTiled.java",
                "@@ -185,4 +185,3 @@ public final class DataReaderTiled extends ImageDataReader {",
                "     public BufferedImage readImageData(final Rectangle subImage)",
                "-            throws ImageReadException, IOException",
                "-    {",
                "+            throws ImageReadException, IOException {",
                "         final int bitsPerRow = tileWidth * bitsPerPixel;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "index 90715eac..ed63be66 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "@@ -75,3 +75,3 @@ public final class TagInfoGpsText extends TagInfo {",
                "-        public TextEncoding(final byte[] prefix, final String encodingName) {",
                "+        TextEncoding(final byte[] prefix, final String encodingName) {",
                "             this.prefix = prefix;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoUndefineds.java b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoUndefineds.java",
                "index db198fb9..34c6de0a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoUndefineds.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoUndefineds.java",
                "@@ -25,2 +25,2 @@ public class TagInfoUndefineds extends TagInfoBytes {",
                "     }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterBase.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterBase.java",
                "index 8b67f09d..8a456d97 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterBase.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterBase.java",
                "@@ -18,2 +18,15 @@ package org.apache.commons.imaging.formats.tiff.write;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.DEFAULT_TIFF_BYTE_ORDER;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.PARAM_KEY_LZW_COMPRESSION_BLOCK_SIZE;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.PARAM_KEY_T4_OPTIONS;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.PARAM_KEY_T6_OPTIONS;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_CCITT_1D;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_CCITT_GROUP_3;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_CCITT_GROUP_4;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_LZW;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_PACKBITS;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_COMPRESSION_UNCOMPRESSED;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_FLAG_T6_OPTIONS_UNCOMPRESSED_MODE;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_HEADER_SIZE;",
                "+",
                " import java.awt.image.BufferedImage;",
                "@@ -44,4 +57,2 @@ import org.apache.commons.imaging.formats.tiff.constants.TiffTagConstants;",
                "-import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.*;",
                "-",
                " public abstract class TiffImageWriterBase {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java",
                "index 729615a5..8e2e80dc 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.tiff.write;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_HEADER_SIZE;",
                "+",
                " import java.io.IOException;",
                "@@ -45,4 +47,2 @@ import org.apache.commons.imaging.formats.tiff.constants.ExifTagConstants;",
                "-import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.*;",
                "-",
                " public class TiffImageWriterLossless extends TiffImageWriterBase {",
                "@@ -243,3 +243,3 @@ public class TiffImageWriterLossless extends TiffImageWriterBase {",
                "                 // we couldn't place this item. overflow.",
                "-                if ((overflowIndex & 1l) != 0) {",
                "+                if ((overflowIndex & 1L) != 0) {",
                "                     overflowIndex += 1;",
                "@@ -250,3 +250,3 @@ public class TiffImageWriterLossless extends TiffImageWriterBase {",
                "                 long offset = bestFit.offset;",
                "-                if ((offset & 1l) != 0) {",
                "+                if ((offset & 1L) != 0) {",
                "                     offset += 1;",
                "@@ -276,3 +276,3 @@ public class TiffImageWriterLossless extends TiffImageWriterBase {",
                "-        public BufferOutputStream(final byte[] buffer, final int index) {",
                "+        BufferOutputStream(final byte[] buffer, final int index) {",
                "             this.buffer = buffer;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossy.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossy.java",
                "index c83d990c..2cbafb2c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossy.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossy.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.tiff.write;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_HEADER_SIZE;",
                "+",
                " import java.io.IOException;",
                "@@ -26,4 +28,2 @@ import org.apache.commons.imaging.common.BinaryOutputStream;",
                "-import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.*;",
                "-",
                " public class TiffImageWriterLossy extends TiffImageWriterBase {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputField.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputField.java",
                "index c77d1001..771a684a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputField.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputField.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.tiff.write;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.TIFF_ENTRY_MAX_VALUE_LENGTH;",
                "+",
                " import java.io.IOException;",
                "@@ -27,4 +29,2 @@ import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;",
                "-import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.*;",
                "-",
                " public class TiffOutputField {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputItem.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputItem.java",
                "index 37d486f9..e97fe209 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputItem.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputItem.java",
                "@@ -47,3 +47,3 @@ abstract class TiffOutputItem {",
                "-        public Value(final String name, final byte[] bytes) {",
                "+        Value(final String name, final byte[] bytes) {",
                "             this.name = name;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "index d9f7075a..ceca0b2a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "@@ -18,2 +18,4 @@ package org.apache.commons.imaging.formats.tiff.write;",
                "+import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.DEFAULT_TIFF_BYTE_ORDER;",
                "+",
                " import java.nio.ByteOrder;",
                "@@ -29,4 +31,2 @@ import org.apache.commons.imaging.internal.Debug;",
                "-import static org.apache.commons.imaging.formats.tiff.constants.TiffConstants.*;",
                "-",
                " public final class TiffOutputSet {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSummary.java b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSummary.java",
                "index af91d7b3..bc32ed6c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSummary.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSummary.java",
                "@@ -33,3 +33,3 @@ class TiffOutputSummary {",
                "-    public TiffOutputSummary(final ByteOrder byteOrder,",
                "+    TiffOutputSummary(final ByteOrder byteOrder,",
                "             final TiffOutputDirectory rootDirectory,",
                "@@ -45,4 +45,3 @@ class TiffOutputSummary {",
                "-        public OffsetItem(final TiffOutputItem item,",
                "-                final TiffOutputField itemOffsetField) {",
                "+        OffsetItem(final TiffOutputItem item, final TiffOutputField itemOffsetField) {",
                "             super();",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/wbmp/WbmpImageParser.java b/src/main/java/org/apache/commons/imaging/formats/wbmp/WbmpImageParser.java",
                "index deea19e9..61924ac9 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/wbmp/WbmpImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/wbmp/WbmpImageParser.java",
                "@@ -107,3 +107,3 @@ public class WbmpImageParser extends ImageParser {",
                "-        public WbmpHeader(final int typeField, final byte fixHeaderField, final int width,",
                "+        WbmpHeader(final int typeField, final byte fixHeaderField, final int width,",
                "                 final int height) {",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/xbm/XbmImageParser.java b/src/main/java/org/apache/commons/imaging/formats/xbm/XbmImageParser.java",
                "index 7ca8a43a..c8198aef 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/xbm/XbmImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/xbm/XbmImageParser.java",
                "@@ -111,3 +111,3 @@ public class XbmImageParser extends ImageParser {",
                "-        public XbmHeader(final int width, final int height, final int xHot, final int yHot) {",
                "+        XbmHeader(final int width, final int height, final int xHot, final int yHot) {",
                "             this.width = width;",
                "diff --git a/src/main/java/org/apache/commons/imaging/formats/xpm/XpmImageParser.java b/src/main/java/org/apache/commons/imaging/formats/xpm/XpmImageParser.java",
                "index 8f098de9..1320805a 100644",
                "--- a/src/main/java/org/apache/commons/imaging/formats/xpm/XpmImageParser.java",
                "+++ b/src/main/java/org/apache/commons/imaging/formats/xpm/XpmImageParser.java",
                "@@ -184,3 +184,3 @@ public class XpmImageParser extends ImageParser {",
                "-        public XpmHeader(final int width, final int height, final int numColors,",
                "+        XpmHeader(final int width, final int height, final int numColors,",
                "                 final int numCharsPerPixel, final int xHotSpot, final int yHotSpot, final boolean xpmExt) {",
                "diff --git a/src/main/java/org/apache/commons/imaging/icc/CachingInputStream.java b/src/main/java/org/apache/commons/imaging/icc/CachingInputStream.java",
                "index d580b8a8..71bed465 100644",
                "--- a/src/main/java/org/apache/commons/imaging/icc/CachingInputStream.java",
                "+++ b/src/main/java/org/apache/commons/imaging/icc/CachingInputStream.java",
                "@@ -26,3 +26,3 @@ class CachingInputStream extends InputStream {",
                "-    public CachingInputStream(final InputStream is) {",
                "+    CachingInputStream(final InputStream is) {",
                "         this.is = is;",
                "diff --git a/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java b/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "index 7e65a7a4..9ea08b29 100644",
                "--- a/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "+++ b/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "@@ -34,4 +34,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "         public void dump(final String prefix, final byte[] bytes)",
                "-                throws ImageReadException, IOException",
                "-        {",
                "+                throws ImageReadException, IOException {",
                "             try (InputStream bis = new ByteArrayInputStream(bytes)) {",
                "@@ -55,4 +54,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "         public void dump(final String prefix, final byte[] bytes)",
                "-                throws ImageReadException, IOException",
                "-        {",
                "+                throws ImageReadException, IOException {",
                "             try (InputStream bis = new ByteArrayInputStream(bytes)) {",
                "@@ -68,4 +66,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "         public void dump(final String prefix, final byte[] bytes)",
                "-                throws ImageReadException, IOException",
                "-        {",
                "+                throws ImageReadException, IOException {",
                "             try (InputStream bis = new ByteArrayInputStream(bytes)) {",
                "@@ -81,4 +78,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "         public void dump(final String prefix, final byte[] bytes)",
                "-                throws ImageReadException, IOException",
                "-        {",
                "+                throws ImageReadException, IOException {",
                "             try (InputStream bis = new ByteArrayInputStream(bytes)) {",
                "@@ -106,4 +102,3 @@ public enum IccTagDataTypes implements IccTagDataType {",
                "         public void dump(final String prefix, final byte[] bytes)",
                "-                throws ImageReadException, IOException",
                "-        {",
                "+                throws ImageReadException, IOException {",
                "             try (InputStream bis = new ByteArrayInputStream(bytes)) {",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/ColorComponent.java b/src/main/java/org/apache/commons/imaging/palette/ColorComponent.java",
                "index ba39bd8f..196def8c 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/ColorComponent.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/ColorComponent.java",
                "@@ -26,3 +26,3 @@ enum ColorComponent {",
                "-    private ColorComponent(final int shift) {",
                "+    ColorComponent(final int shift) {",
                "         this.shift = shift;",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/ColorCount.java b/src/main/java/org/apache/commons/imaging/palette/ColorCount.java",
                "index ed48d4b6..b7af6bff 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/ColorCount.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/ColorCount.java",
                "@@ -26,3 +26,3 @@ class ColorCount {",
                "-    public ColorCount(final int argb) {",
                "+    ColorCount(final int argb) {",
                "         this.argb = argb;",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/ColorGroup.java b/src/main/java/org/apache/commons/imaging/palette/ColorGroup.java",
                "index 9d876868..3db565d1 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/ColorGroup.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/ColorGroup.java",
                "@@ -48,3 +48,3 @@ class ColorGroup {",
                "-    public ColorGroup(final List<ColorCount> colorCounts, final boolean ignoreAlpha) throws ImageWriteException {",
                "+    ColorGroup(final List<ColorCount> colorCounts, final boolean ignoreAlpha) throws ImageWriteException {",
                "         this.colorCounts = colorCounts;",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/ColorGroupCut.java b/src/main/java/org/apache/commons/imaging/palette/ColorGroupCut.java",
                "index f4c3e142..a25548fc 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/ColorGroupCut.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/ColorGroupCut.java",
                "@@ -24,3 +24,3 @@ class ColorGroupCut {",
                "-    public ColorGroupCut(final ColorGroup less, final ColorGroup more, final ColorComponent mode, final int limit) {",
                "+    ColorGroupCut(final ColorGroup less, final ColorGroup more, final ColorComponent mode, final int limit) {",
                "         this.less = less;",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/MedianCutPalette.java b/src/main/java/org/apache/commons/imaging/palette/MedianCutPalette.java",
                "index 8bb29b32..977f4b09 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/MedianCutPalette.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/MedianCutPalette.java",
                "@@ -21,3 +21,3 @@ class MedianCutPalette extends SimplePalette {",
                "-    public MedianCutPalette(final ColorGroup root, final int[] palette) {",
                "+    MedianCutPalette(final ColorGroup root, final int[] palette) {",
                "         super(palette);",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/MostPopulatedBoxesMedianCut.java b/src/main/java/org/apache/commons/imaging/palette/MostPopulatedBoxesMedianCut.java",
                "index f8defe95..38647c10 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/MostPopulatedBoxesMedianCut.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/MostPopulatedBoxesMedianCut.java",
                "@@ -142,3 +142,3 @@ public class MostPopulatedBoxesMedianCut implements MedianCut {",
                "-        public ColorComparer(final ColorComponent colorComponent) {",
                "+        ColorComparer(final ColorComponent colorComponent) {",
                "             this.colorComponent = colorComponent;",
                "diff --git a/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java b/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java",
                "index d00c62a0..0a08dcfc 100644",
                "--- a/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java",
                "+++ b/src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java",
                "@@ -264,3 +264,3 @@ public class PaletteFactory {",
                "-        public DivisionCandidate(final ColorSpaceSubset dst_a, final ColorSpaceSubset dst_b) {",
                "+        DivisionCandidate(final ColorSpaceSubset dst_a, final ColorSpaceSubset dst_b) {",
                "             // this.src = src;"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/imaging/FormatCompliance.java",
                "src/main/java/org/apache/commons/imaging/Imaging.java",
                "src/main/java/org/apache/commons/imaging/color/ColorConversions.java",
                "src/main/java/org/apache/commons/imaging/common/FastByteArrayOutputStream.java",
                "src/main/java/org/apache/commons/imaging/common/bytesource/ByteSourceInputStream.java",
                "src/main/java/org/apache/commons/imaging/common/itu_t4/BitArrayOutputStream.java",
                "src/main/java/org/apache/commons/imaging/common/itu_t4/BitInputStreamFlexible.java",
                "src/main/java/org/apache/commons/imaging/common/itu_t4/HuffmanTreeException.java",
                "src/main/java/org/apache/commons/imaging/common/itu_t4/T4_T6_Tables.java",
                "src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwCompressor.java",
                "src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwDecompressor.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/BmpHeaderInfo.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageContents.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/BmpWriterPalette.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/PixelParser.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserBitFields.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRgb.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java",
                "src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserSimple.java",
                "src/main/java/org/apache/commons/imaging/formats/dcx/DcxImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/gif/GenericGifBlock.java",
                "src/main/java/org/apache/commons/imaging/formats/gif/GifHeaderInfo.java",
                "src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/gif/GraphicControlExtension.java",
                "src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/icns/IcnsType.java",
                "src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegInputStream.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriter.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App14Segment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App2Segment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DhtSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/DqtSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/GenericSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java",
                "src/main/java/org/apache/commons/imaging/formats/jpeg/xmp/JpegRewriter.java",
                "src/main/java/org/apache/commons/imaging/formats/pcx/PcxImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/pcx/PcxWriter.java",
                "src/main/java/org/apache/commons/imaging/formats/png/BitParser.java",
                "src/main/java/org/apache/commons/imaging/formats/png/ChunkType.java",
                "src/main/java/org/apache/commons/imaging/formats/png/InterlaceMethod.java",
                "src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java",
                "src/main/java/org/apache/commons/imaging/formats/png/ScanExpediter.java",
                "src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterInterlaced.java",
                "src/main/java/org/apache/commons/imaging/formats/png/ScanExpediterSimple.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkGama.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIccp.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIhdr.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkItxt.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPhys.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkPlte.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkText.java",
                "src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkZtxt.java",
                "src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterGrayscale.java",
                "src/main/java/org/apache/commons/imaging/formats/png/transparencyfilters/TransparencyFilterTrueColor.java",
                "src/main/java/org/apache/commons/imaging/formats/pnm/PamFileInfo.java",
                "src/main/java/org/apache/commons/imaging/formats/pnm/PgmFileInfo.java",
                "src/main/java/org/apache/commons/imaging/formats/pnm/PgmWriter.java",
                "src/main/java/org/apache/commons/imaging/formats/pnm/PpmFileInfo.java",
                "src/main/java/org/apache/commons/imaging/formats/pnm/PpmWriter.java",
                "src/main/java/org/apache/commons/imaging/formats/pnm/WhiteSpaceReader.java",
                "src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceType.java",
                "src/main/java/org/apache/commons/imaging/formats/rgbe/InfoHeaderReader.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffElement.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/constants/AdobePhotoshopTagConstants.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/BitInputStream.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderTiled.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoGpsText.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/taginfos/TagInfoUndefineds.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterBase.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossy.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputField.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputItem.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSet.java",
                "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputSummary.java",
                "src/main/java/org/apache/commons/imaging/formats/wbmp/WbmpImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/xbm/XbmImageParser.java",
                "src/main/java/org/apache/commons/imaging/formats/xpm/XpmImageParser.java",
                "src/main/java/org/apache/commons/imaging/icc/CachingInputStream.java",
                "src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java",
                "src/main/java/org/apache/commons/imaging/palette/ColorComponent.java",
                "src/main/java/org/apache/commons/imaging/palette/ColorCount.java",
                "src/main/java/org/apache/commons/imaging/palette/ColorGroup.java",
                "src/main/java/org/apache/commons/imaging/palette/ColorGroupCut.java",
                "src/main/java/org/apache/commons/imaging/palette/MedianCutPalette.java",
                "src/main/java/org/apache/commons/imaging/palette/MostPopulatedBoxesMedianCut.java",
                "src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, parse, code, input",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c8cb526d40a91da15d09139ad16e17675a06d036",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1540710198,
            "hunks": 36,
            "message": "Prepare 1.0-alpha1 release",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ab167b5e..407b675a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -35,3 +35,3 @@",
                "-  <version>1.0-SNAPSHOT</version>",
                "+  <version>1.0-alpha1-SNAPSHOT</version>",
                "@@ -50,4 +50,4 @@",
                "     <commons.module.name>org.apache.commons.imaging</commons.module.name>",
                "-    <commons.release.version>1.0</commons.release.version>",
                "-    <commons.rc.version>RC5</commons.rc.version>",
                "+    <commons.release.version>1.0-alpha1</commons.release.version>",
                "+    <commons.rc.version>RC1</commons.rc.version>",
                "     <commons.jira.id>IMAGING</commons.jira.id>",
                "@@ -61,2 +61,3 @@",
                "     <checkstyle.plugin.version>3.0.0</checkstyle.plugin.version>",
                "+    <commons.encoding>utf-8</commons.encoding>",
                "   </properties>",
                "@@ -133,4 +134,4 @@",
                "         <configuration>",
                "-          <archive combine.children=\"append\">",
                "-            <manifestEntries>",
                "+          <archive>",
                "+            <manifestEntries combine.children=\"append\">",
                "               <Automatic-Module-Name>${commons.module.name}</Automatic-Module-Name>",
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index 120b2f48..f6e00372 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -48,2 +48,3 @@ The <action> type attribute can be add,update,fix,remove.",
                "     <release version=\"1.0\" date=\"TBA\" description=\"First major release\">",
                "+      <!-- 1.0 alpha1 below here -->",
                "       <action issue=\"IMAGING-154\" dev=\"kinow\" type=\"update\">",
                "diff --git a/src/site/xdoc/download_imaging.xml b/src/site/xdoc/download_imaging.xml",
                "index cab25dfb..75e66ab2 100644",
                "--- a/src/site/xdoc/download_imaging.xml",
                "+++ b/src/site/xdoc/download_imaging.xml",
                "@@ -33,6 +33,17 @@ limitations under the License.",
                "  |    - commons.release.version (required)                              |",
                "- |    - commons.binary.suffix (optional)                                |",
                "+ |    - commons.release.name    (required)                              |",
                "+ |    - commons.binary.suffix   (optional)                              |",
                "  |      (defaults to \"-bin\", set to \"\" for pre-maven2 releases)         |",
                "+ |    - commons.release.desc    (optional)                              |",
                "+ |    - commons.release.subdir  (optional)                              |",
                "+ |                                                                      |",
                "+ |    - commons.release.2/3.version       (conditional)                 |",
                "+ |    - commons.release.2/3.name          (conditional)                 |",
                "+ |    - commons.release.2/3.binary.suffix (optional)                    |",
                "+ |    - commons.release.2/3.desc          (optional)                    |",
                "+ |    - commons.release.2/3.subdir        (optional)                    |",
                "  |                                                                      |",
                "  | 3) Example Properties                                                |",
                "+ |    (commons.release.name inherited by parent:                        |",
                "+ |     ${project.artifactId}-${commons.release.version}                 |",
                "  |                                                                      |",
                "@@ -48,3 +59,3 @@ limitations under the License.",
                "     <title>Download Apache Commons Imaging</title>",
                "-    <author email=\"dev@commons.apache.org\">Commons Documentation Team</author>",
                "+    <author email=\"dev@commons.apache.org\">Apache Commons Documentation Team</author>",
                "   </properties>",
                "@@ -55,6 +66,6 @@ limitations under the License.",
                "         We recommend you use a mirror to download our release",
                "-        builds, but you <strong>must</strong> verify the integrity of",
                "+        builds, but you <strong>must</strong> <a href=\"http://www.apache.org/info/verification.html\">verify the integrity</a> of",
                "         the downloaded files using signatures downloaded from our main",
                "         distribution directories. Recent releases (48 hours) may not yet",
                "-        be available from the mirrors.",
                "+        be available from all the mirrors.",
                "       </p>",
                "@@ -90,6 +101,11 @@ limitations under the License.",
                "       <p>",
                "-        The <a href=\"http://www.apache.org/dist/commons/KEYS\">KEYS</a>",
                "-        link links to the code signing keys used to sign the product.",
                "-        The <code>PGP</code> link downloads the OpenPGP compatible signature from our main site.",
                "-        The <code>MD5</code> link downloads the checksum from the main site.",
                "+        It is essential that you",
                "+        <a href=\"https://www.apache.org/info/verification.html\">verify the integrity</a>",
                "+        of downloaded files, preferably using the <code>PGP</code> signature (<code>*.asc</code> files);",
                "+        failing that using the <code>SHA1</code> hash (<code>*.sha1</code> checksum files).",
                "+      </p>",
                "+      <p>",
                "+        The <a href=\"https://www.apache.org/dist/commons/KEYS\">KEYS</a>",
                "+        file contains the public PGP keys used by Apache Commons developers",
                "+        to sign releases.",
                "       </p>",
                "@@ -97,3 +113,3 @@ limitations under the License.",
                "     </section>",
                "-    <section name=\"Apache Commons Imaging 1.0 \">",
                "+    <section name=\"Apache Commons Imaging 1.0-alpha1 \">",
                "       <subsection name=\"Binaries\">",
                "@@ -101,10 +117,10 @@ limitations under the License.",
                "           <tr>",
                "-              <td><a href=\"[preferred]/commons/imaging/binaries/commons-imaging-1.0-bin.tar.gz\">commons-imaging-1.0-bin.tar.gz</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-bin.tar.gz.md5\">md5</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-bin.tar.gz.asc\">pgp</a></td>",
                "+              <td><a href=\"[preferred]/commons/imaging/binaries/commons-imaging-1.0-alpha1-bin.tar.gz\">commons-imaging-1.0-alpha1-bin.tar.gz</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-alpha1-bin.tar.gz.sha1\">sha1</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-alpha1-bin.tar.gz.asc\">pgp</a></td>",
                "           </tr>",
                "           <tr>",
                "-              <td><a href=\"[preferred]/commons/imaging/binaries/commons-imaging-1.0-bin.zip\">commons-imaging-1.0-bin.zip</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-bin.zip.md5\">md5</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-bin.zip.asc\">pgp</a></td>",
                "+              <td><a href=\"[preferred]/commons/imaging/binaries/commons-imaging-1.0-alpha1-bin.zip\">commons-imaging-1.0-alpha1-bin.zip</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-alpha1-bin.zip.sha1\">sha1</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/binaries/commons-imaging-1.0-alpha1-bin.zip.asc\">pgp</a></td>",
                "           </tr>",
                "@@ -115,10 +131,10 @@ limitations under the License.",
                "           <tr>",
                "-              <td><a href=\"[preferred]/commons/imaging/source/commons-imaging-1.0-src.tar.gz\">commons-imaging-1.0-src.tar.gz</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-src.tar.gz.md5\">md5</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-src.tar.gz.asc\">pgp</a></td>",
                "+              <td><a href=\"[preferred]/commons/imaging/source/commons-imaging-1.0-alpha1-src.tar.gz\">commons-imaging-1.0-alpha1-src.tar.gz</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-alpha1-src.tar.gz.sha1\">sha1</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-alpha1-src.tar.gz.asc\">pgp</a></td>",
                "           </tr>",
                "           <tr>",
                "-              <td><a href=\"[preferred]/commons/imaging/source/commons-imaging-1.0-src.zip\">commons-imaging-1.0-src.zip</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-src.zip.md5\">md5</a></td>",
                "-              <td><a href=\"http://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-src.zip.asc\">pgp</a></td>",
                "+              <td><a href=\"[preferred]/commons/imaging/source/commons-imaging-1.0-alpha1-src.zip\">commons-imaging-1.0-alpha1-src.zip</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-alpha1-src.zip.sha1\">sha1</a></td>",
                "+              <td><a href=\"https://www.apache.org/dist/commons/imaging/source/commons-imaging-1.0-alpha1-src.zip.asc\">pgp</a></td>",
                "           </tr>",
                "@@ -133,3 +149,3 @@ limitations under the License.",
                "           <li class=\"download\"><a href=\"[preferred]/commons/imaging/\">browse download area</a></li>",
                "-          <li><a href=\"http://archive.apache.org/dist/commons/imaging/\">archives...</a></li>",
                "+          <li><a href=\"https://archive.apache.org/dist/commons/imaging/\">archives...</a></li>",
                "         </ul>",
                "diff --git a/src/site/xdoc/issue-tracking.xml b/src/site/xdoc/issue-tracking.xml",
                "index a5711486..1d4da5ed 100644",
                "--- a/src/site/xdoc/issue-tracking.xml",
                "+++ b/src/site/xdoc/issue-tracking.xml",
                "@@ -45,4 +45,4 @@ limitations under the License.",
                "   <properties>",
                "-    <title>Commons Imaging Issue tracking</title>",
                "-    <author email=\"dev@commons.apache.org\">Commons Documentation Team</author>",
                "+    <title>Apache Commons Imaging Issue tracking</title>",
                "+    <author email=\"dev@commons.apache.org\">Apache Commons Documentation Team</author>",
                "   </properties>",
                "@@ -50,6 +50,6 @@ limitations under the License.",
                "-    <section name=\"Commons Imaging Issue tracking\">",
                "+    <section name=\"Apache Commons Imaging Issue tracking\">",
                "       <p>",
                "-      Commons Imaging uses <a href=\"http://issues.apache.org/jira/\">ASF JIRA</a> for tracking issues.",
                "-      See the <a href=\"http://issues.apache.org/jira/browse/IMAGING\">Commons Imaging JIRA project page</a>.",
                "+      Apache Commons Imaging uses <a href=\"https://issues.apache.org/jira/\">ASF JIRA</a> for tracking issues.",
                "+      See the <a href=\"https://issues.apache.org/jira/browse/IMAGING\">Apache Commons Imaging JIRA project page</a>.",
                "       </p>",
                "@@ -57,5 +57,5 @@ limitations under the License.",
                "       <p>",
                "-      To use JIRA you may need to <a href=\"http://issues.apache.org/jira/secure/Signup!default.jspa\">create an account</a>",
                "+      To use JIRA you may need to <a href=\"https://issues.apache.org/jira/secure/Signup!default.jspa\">create an account</a>",
                "       (if you have previously created/updated Commons issues using Bugzilla an account will have been automatically",
                "-      created and you can use the <a href=\"http://issues.apache.org/jira/secure/ForgotPassword!default.jspa\">Forgot Password</a>",
                "+      created and you can use the <a href=\"https://issues.apache.org/jira/secure/ForgotPassword!default.jspa\">Forgot Password</a>",
                "       page to get a new password).",
                "@@ -65,5 +65,5 @@ limitations under the License.",
                "       If you would like to report a bug, or raise an enhancement request with",
                "-      Commons Imaging please do the following:",
                "+      Apache Commons Imaging please do the following:",
                "       <ol>",
                "-        <li><a href=\"http://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC&amp;status=1&amp;status=3&amp;status=4\">Search existing open bugs</a>.",
                "+        <li><a href=\"https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC&amp;status=1&amp;status=3&amp;status=4\">Search existing open bugs</a>.",
                "             If you find your issue listed then please add a comment with your details.</li>",
                "@@ -72,4 +72,4 @@ limitations under the License.",
                "         <li>Decide if your issue is a bug or an enhancement.</li>",
                "-        <li>Submit either a <a href=\"http://issues.apache.org/jira/secure/CreateIssueDetails!init.jspa?pid=12313421&amp;issuetype=1&amp;priority=4&amp;assignee=-1\">bug report</a>",
                "-            or <a href=\"http://issues.apache.org/jira/secure/CreateIssueDetails!init.jspa?pid=12313421&amp;issuetype=4&amp;priority=4&amp;assignee=-1\">enhancement request</a>.</li>",
                "+        <li>Submit either a <a href=\"https://issues.apache.org/jira/secure/CreateIssueDetails!init.jspa?pid=12313421&amp;issuetype=1&amp;priority=4&amp;assignee=-1\">bug report</a>",
                "+            or <a href=\"https://issues.apache.org/jira/secure/CreateIssueDetails!init.jspa?pid=12313421&amp;issuetype=4&amp;priority=4&amp;assignee=-1\">enhancement request</a>.</li>",
                "       </ol>",
                "@@ -82,3 +82,3 @@ limitations under the License.",
                "         <li>test cases are vital, particularly for any proposed enhancements</li>",
                "-        <li>the developers of Commons Imaging are all unpaid volunteers</li>",
                "+        <li>the developers of Apache Commons Imaging are all unpaid volunteers</li>",
                "       </ul>",
                "@@ -94,5 +94,5 @@ limitations under the License.",
                "       <ul>",
                "-        <li><a href=\"http://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC&amp;status=1&amp;status=3&amp;status=4\">All Open Commons Imaging bugs</a></li>",
                "-        <li><a href=\"http://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC&amp;status=5&amp;status=6\">All Resolved Commons Imaging bugs</a></li>",
                "-        <li><a href=\"http://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC\">All Commons Imaging bugs</a></li>",
                "+        <li><a href=\"https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC&amp;status=1&amp;status=3&amp;status=4\">All Open Apache Commons Imaging bugs</a></li>",
                "+        <li><a href=\"https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC&amp;status=5&amp;status=6\">All Resolved Apache Commons Imaging bugs</a></li>",
                "+        <li><a href=\"https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;pid=12313421&amp;sorter/field=issuekey&amp;sorter/order=DESC\">All Apache Commons Imaging bugs</a></li>",
                "       </ul>",
                "diff --git a/src/site/xdoc/mail-lists.xml b/src/site/xdoc/mail-lists.xml",
                "index a6f9196d..6ca0fe0b 100644",
                "--- a/src/site/xdoc/mail-lists.xml",
                "+++ b/src/site/xdoc/mail-lists.xml",
                "@@ -43,4 +43,4 @@ limitations under the License.",
                "   <properties>",
                "-    <title>Commons Imaging Mailing Lists</title>",
                "-    <author email=\"dev@commons.apache.org\">Commons Documentation Team</author>",
                "+    <title>Apache Commons Imaging Mailing Lists</title>",
                "+    <author email=\"dev@commons.apache.org\">Apache Commons Documentation Team</author>",
                "   </properties>",
                "@@ -50,3 +50,3 @@ limitations under the License.",
                "       <p>",
                "-        <a href=\"index.html\">Commons Imaging</a> shares mailing lists with all the other",
                "+        <a href=\"index.html\">Apache Commons Imaging</a> shares mailing lists with all the other",
                "         <a href=\"http://commons.apache.org/components.html\">Commons Components</a>.",
                "@@ -60,3 +60,3 @@ limitations under the License.",
                "       <p>",
                "-        Questions related to the usage of Commons Imaging should be posted to the",
                "+        Questions related to the usage of Apache Commons Imaging should be posted to the",
                "         <a href=\"http://mail-archives.apache.org/mod_mbox/commons-user/\">User List</a>.",
                "@@ -64,3 +64,3 @@ limitations under the License.",
                "         The <a href=\"http://mail-archives.apache.org/mod_mbox/commons-dev/\">Developer List</a>",
                "-        is for questions and discussion related to the development of Commons Imaging.",
                "+        is for questions and discussion related to the development of Apache Commons Imaging.",
                "         <br />",
                "@@ -78,5 +78,5 @@ limitations under the License.",
                "-    <section name=\"Commons Imaging Mailing Lists\">",
                "+    <section name=\"Apache Commons Imaging Mailing Lists\">",
                "       <p>",
                "-        <strong>Please prefix the subject line of any messages for <a href=\"index.html\">Commons Imaging</a>",
                "+        <strong>Please prefix the subject line of any messages for <a href=\"index.html\">Apache Commons Imaging</a>",
                "         with <i>[imaging]</i></strong> - <i>thanks!</i>",
                "@@ -101,3 +101,3 @@ limitations under the License.",
                "             <br /><br />",
                "-            Questions on using Commons Imaging.",
                "+            Questions on using Apache Commons Imaging.",
                "             <br /><br />",
                "@@ -119,3 +119,3 @@ limitations under the License.",
                "             <br /><br />",
                "-            Discussion of development of Commons Imaging.",
                "+            Discussion of development of Apache Commons Imaging.",
                "             <br /><br />"
            ],
            "changed_files": [
                "pom.xml",
                "src/changes/changes.xml",
                "src/site/xdoc/download_imaging.xml",
                "src/site/xdoc/issue-tracking.xml",
                "src/site/xdoc/mail-lists.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hang",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "772ea3919281f3d13e6f39901d894db73efe242c",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1535181028,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/IMAGING-154' This closes #35",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-154": ""
            },
            "ghissue_refs": {
                "35": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-154",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 35",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb98398bd111cdc35b2c9a5fc8022a28d7c99035",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1535193386,
            "hunks": 0,
            "message": "Merge branch 'IMAGING-103'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "170b6b90ed2a884219e24412d4081c0c0ba6275b",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1534501450,
            "hunks": 5,
            "message": "IMAGING-103: remove redundant static from enums",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 985e3f9b..e0915106 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -155,3 +155,3 @@",
                "           <suppressionsLocation>${basedir}/checkstyle-suppressions.xml</suppressionsLocation>",
                "-          <includeTestSourceDirectory>true</includeTestSourceDirectory>",
                "+          <includeTestSourceDirectory>false</includeTestSourceDirectory>",
                "           <enableRulesSummary>false</enableRulesSummary>",
                "@@ -228,6 +228,6 @@",
                "         <configuration>",
                "-          <includeTestSourceDirectory>true</includeTestSourceDirectory>",
                "-          <enableRulesSummary>false</enableRulesSummary>",
                "           <configLocation>${basedir}/checkstyle.xml</configLocation>",
                "           <suppressionsLocation>${basedir}/checkstyle-suppressions.xml</suppressionsLocation>",
                "+          <includeTestSourceDirectory>false</includeTestSourceDirectory>",
                "+          <enableRulesSummary>false</enableRulesSummary>",
                "         </configuration>",
                "diff --git a/src/main/java/org/apache/commons/imaging/ImageInfo.java b/src/main/java/org/apache/commons/imaging/ImageInfo.java",
                "index 94ce62c5..70380eb7 100644",
                "--- a/src/main/java/org/apache/commons/imaging/ImageInfo.java",
                "+++ b/src/main/java/org/apache/commons/imaging/ImageInfo.java",
                "@@ -30,3 +30,3 @@ public class ImageInfo {",
                "-    public static enum ColorType {",
                "+    public enum ColorType {",
                "         BW(\"Black and White\"),",
                "@@ -53,3 +53,3 @@ public class ImageInfo {",
                "-    public static enum CompressionAlgorithm {",
                "+    public enum CompressionAlgorithm {",
                "         UNKNOWN(\"Unknown\"),"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/java/org/apache/commons/imaging/ImageInfo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f09697b7fdaaa114b1c93a6afd944607d1a32cb8",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1534496139,
            "hunks": 18,
            "message": "IMAGING-103: update pom.xml dependencies/build/reporting using lang as reference",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d8558f45..c5a604e4 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "     <artifactId>commons-parent</artifactId>",
                "-    <version>43</version>",
                "+    <version>47</version>",
                "   </parent>",
                "@@ -45,2 +45,3 @@",
                "   <properties>",
                "+    <argLine>-Xmx512m</argLine>",
                "     <maven.compiler.source>1.7</maven.compiler.source>",
                "@@ -59,2 +60,3 @@",
                "     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>",
                "+    <checkstyle.plugin.version>3.0.0</checkstyle.plugin.version>",
                "   </properties>",
                "@@ -76,3 +78,3 @@",
                "   <issueManagement>",
                "-    <system>Jira</system>",
                "+    <system>jira</system>",
                "     <url>http://issues.apache.org/jira/browse/IMAGING</url>",
                "@@ -81,7 +83,4 @@",
                "-  <prerequisites>",
                "-    <maven>2.0.7</maven>",
                "-  </prerequisites>",
                "-",
                "   <build>",
                "+    <defaultGoal>clean verify apache-rat:check clirr:check checkstyle:check findbugs:check javadoc:javadoc</defaultGoal>",
                "     <plugins>",
                "@@ -98,12 +97,2 @@",
                "       </plugin>",
                "-      <plugin>",
                "-        <artifactId>maven-jar-plugin</artifactId>",
                "-        <configuration>",
                "-          <archive>",
                "-            <manifestEntries>",
                "-              <Extension-Name>org.apache.commons.imaging</Extension-Name>",
                "-            </manifestEntries>",
                "-          </archive>",
                "-        </configuration>",
                "-      </plugin>",
                "       <plugin>",
                "@@ -115,3 +104,3 @@",
                "         <artifactId>animal-sniffer-maven-plugin</artifactId>",
                "-        <version>1.16</version>",
                "+        <version>1.17</version>",
                "         <configuration>",
                "@@ -133,2 +122,47 @@",
                "       </plugin>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-jar-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <goals>",
                "+              <goal>test-jar</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+        <configuration>",
                "+          <archive combine.children=\"append\">",
                "+            <manifestEntries>",
                "+              <Automatic-Module-Name>${commons.module.name}</Automatic-Module-Name>",
                "+            </manifestEntries>",
                "+          </archive>",
                "+        </configuration>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-scm-publish-plugin</artifactId>",
                "+        <configuration>",
                "+          <ignorePathsToDelete>",
                "+            <ignorePathToDelete>javadocs</ignorePathToDelete>",
                "+          </ignorePathsToDelete>",
                "+        </configuration>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+        <version>${checkstyle.plugin.version}</version>",
                "+        <configuration>",
                "+          <configLocation>${basedir}/checkstyle.xml</configLocation>",
                "+          <includeTestSourceDirectory>true</includeTestSourceDirectory>",
                "+          <enableRulesSummary>false</enableRulesSummary>",
                "+        </configuration>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <groupId>org.codehaus.mojo</groupId>",
                "+        <artifactId>findbugs-maven-plugin</artifactId>",
                "+        <!-- Use version from parent pom as that is adjusted according to the Java version used to run Maven -->",
                "+        <version>${commons.findbugs.version}</version>",
                "+        <configuration>",
                "+          <excludeFilterFile>${basedir}/findbugs-exclude-filter.xml</excludeFilterFile>",
                "+        </configuration>",
                "+      </plugin>",
                "     </plugins>",
                "@@ -145,42 +179,7 @@",
                "         </plugin>     ",
                "-        <!-- This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->",
                "         <plugin>",
                "-          <groupId>org.eclipse.m2e</groupId>",
                "-          <artifactId>lifecycle-mapping</artifactId>",
                "-          <version>1.0.0</version>",
                "+          <groupId>org.apache.maven.plugins</groupId>",
                "+          <artifactId>maven-javadoc-plugin</artifactId>",
                "           <configuration>",
                "-            <lifecycleMappingMetadata>",
                "-              <pluginExecutions>",
                "-                <pluginExecution>",
                "-                  <pluginExecutionFilter>",
                "-                    <groupId>org.apache.maven.plugins</groupId>",
                "-                    <artifactId>maven-antrun-plugin</artifactId>",
                "-                    <versionRange>[1.6,)</versionRange>",
                "-                    <goals>",
                "-                      <goal>run</goal>",
                "-                    </goals>",
                "-                  </pluginExecutionFilter>",
                "-                  <action>",
                "-                    <execute>",
                "-                      <runOnIncremental>false</runOnIncremental>",
                "-                    </execute>",
                "-                  </action>",
                "-                </pluginExecution>",
                "-                <pluginExecution>",
                "-                  <pluginExecutionFilter>",
                "-                    <groupId>org.apache.felix</groupId>",
                "-                    <artifactId>maven-bundle-plugin</artifactId>",
                "-                    <versionRange>[2.3.5,)</versionRange>",
                "-                    <goals>",
                "-                      <goal>manifest</goal>",
                "-                    </goals>",
                "-                  </pluginExecutionFilter>",
                "-                  <action>",
                "-                    <execute>",
                "-                      <runOnIncremental>false</runOnIncremental>",
                "-                    </execute>",
                "-                  </action>",
                "-                </pluginExecution>",
                "-              </pluginExecutions>",
                "-            </lifecycleMappingMetadata>",
                "+            <excludePackageNames>org.apache.commons.imaging.formats.psd.*:org.apache.commons.imaging.formats.png.*</excludePackageNames>",
                "           </configuration>",
                "@@ -188,6 +187,11 @@",
                "         <plugin>",
                "-          <groupId>org.apache.maven.plugins</groupId>",
                "-          <artifactId>maven-javadoc-plugin</artifactId>",
                "+          <groupId>org.apache.rat</groupId>",
                "+          <artifactId>apache-rat-plugin</artifactId>",
                "           <configuration>",
                "-            <excludePackageNames>org.apache.commons.imaging.formats.psd.*:org.apache.commons.imaging.formats.png.*</excludePackageNames>",
                "+            <excludes>",
                "+              <exclude>site-content/**</exclude>",
                "+              <exclude>src/site/resources/.htaccess</exclude>",
                "+              <exclude>src/site/resources/download_lang.cgi</exclude>",
                "+              <exclude>src/site/resources/release-notes/RELEASE-NOTES-*.txt</exclude>",
                "+            </excludes>",
                "           </configuration>",
                "@@ -215,2 +219,19 @@",
                "     <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+        <version>${checkstyle.plugin.version}</version>",
                "+        <configuration>",
                "+          <configLocation>${basedir}/checkstyle.xml</configLocation>",
                "+          <includeTestSourceDirectory>true</includeTestSourceDirectory>",
                "+          <enableRulesSummary>false</enableRulesSummary>",
                "+        </configuration>",
                "+        <reportSets>",
                "+          <reportSet>",
                "+            <reports>",
                "+              <report>checkstyle</report>",
                "+            </reports>",
                "+          </reportSet>",
                "+        </reportSets>",
                "+      </plugin>",
                "+      <!-- Requires setting 'export MAVEN_OPTS=\"-Xmx512m -XX:MaxPermSize=128m\" ' -->",
                "       <plugin>",
                "@@ -218,6 +239,6 @@",
                "         <artifactId>findbugs-maven-plugin</artifactId>",
                "-        <version>3.0.3</version>",
                "+        <!-- Use version from parent pom as that is adjusted according to the Java version used to run Maven -->",
                "+        <version>${commons.findbugs.version}</version>",
                "         <configuration>",
                "-          <threshold>Normal</threshold>",
                "-          <effort>Default</effort>",
                "+          <excludeFilterFile>${basedir}/src/conf/findbugs-exclude-filter.xml</excludeFilterFile>",
                "         </configuration>",
                "diff --git a/src/conf/findbugs-exclude-filter.xml b/src/conf/findbugs-exclude-filter.xml",
                "new file mode 100644",
                "index 00000000..864b0763",
                "--- /dev/null",
                "+++ b/src/conf/findbugs-exclude-filter.xml",
                "@@ -0,0 +1,153 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+   Licensed to the Apache Software Foundation (ASF) under one or more",
                "+   contributor license agreements.  See the NOTICE file distributed with",
                "+   this work for additional information regarding copyright ownership.",
                "+   The ASF licenses this file to You under the Apache License, Version 2.0",
                "+   (the \"License\"); you may not use this file except in compliance with",
                "+   the License.  You may obtain a copy of the License at",
                "+",
                "+       http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+   Unless required by applicable law or agreed to in writing, software",
                "+   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+   See the License for the specific language governing permissions and",
                "+   limitations under the License.",
                "+-->",
                "+",
                "+<!--",
                "+  This file contains some false positive bugs detected by findbugs. Their",
                "+  false positive nature has been analyzed individually and they have been",
                "+  put here to instruct findbugs it must ignore them.",
                "+-->",
                "+<FindBugsFilter>",
                "+",
                "+  <!-- Reason: Optimization to use == -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.BooleanUtils\" />",
                "+    <Or>",
                "+      <Method name=\"toBoolean\" />",
                "+      <Method name=\"toBooleanObject\" />",
                "+    </Or>",
                "+    <Bug pattern=\"ES_COMPARING_PARAMETER_STRING_WITH_EQ\" />",
                "+  </Match>",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.BooleanUtils\" />",
                "+    <Method name=\"toBoolean\" />",
                "+    <Bug pattern=\"RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: Behavior documented in javadoc -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.BooleanUtils\" />",
                "+    <Or>",
                "+      <Method name=\"negate\" />",
                "+      <Method name=\"toBooleanObject\" />",
                "+    </Or>",
                "+    <Bug pattern=\"NP_BOOLEAN_RETURN_NULL\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: base class cannot be changed and field is properly checked against null so behavior is OK -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.text.ExtendedMessageFormat\" />",
                "+    <Method name=\"applyPattern\" />",
                "+    <Bug pattern=\"UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: Optimization to use == -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.StringUtils\" />",
                "+    <Or>",
                "+      <Method name=\"indexOfDifference\"/>",
                "+      <Method name=\"compare\" params=\"java.lang.String,java.lang.String,boolean\"/>",
                "+      <Method name=\"compareIgnoreCase\" params=\"java.lang.String,java.lang.String,boolean\"/>",
                "+    </Or>",
                "+    <Bug pattern=\"ES_COMPARING_PARAMETER_STRING_WITH_EQ\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: Very much intended to do a fall through on the switch -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.math.NumberUtils\" />",
                "+    <Method name=\"createNumber\"/>",
                "+    <Bug pattern=\"SF_SWITCH_FALLTHROUGH\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: Very much intended to do a fall through on the switch -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.time.DateUtils\" />",
                "+    <Method name=\"getFragment\"/>",
                "+    <Bug pattern=\"SF_SWITCH_FALLTHROUGH\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: toProperString is lazily loaded -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.math.Fraction\" />",
                "+    <Field name=\"toProperString\" />",
                "+    <Bug pattern=\"SE_TRANSIENT_FIELD_NOT_RESTORED\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: It does call super.clone(), but via a subsequent method -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.text.StrTokenizer\" />",
                "+    <Method name=\"clone\"/>",
                "+    <Bug pattern=\"CN_IDIOM_NO_SUPER_CALL\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: Testing shows that new Integer(...) etc is quicker than Integer.valueOf -->",
                "+  <Match>",
                "+    <Bug pattern=\"DM_NUMBER_CTOR\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: FindBugs 2.0.2 used in maven-findbugs-plugin 2.5.2 seems to have problems with detection of default cases",
                "+   in switch statements. All the excluded methods have switch statements that conatin a default case. -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.math.NumberUtils\"/>",
                "+    <Method name=\"createNumber\" />",
                "+    <Bug pattern=\"SF_SWITCH_NO_DEFAULT\" />",
                "+  </Match>",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.text.ExtendedMessageFormat\"/>",
                "+    <Method name=\"insertFormats\" />",
                "+    <Bug pattern=\"SF_SWITCH_NO_DEFAULT\" />",
                "+  </Match>",
                "+  <!-- Reason: FindBugs does not correctly recognize default branches in switch statements without break statements.",
                "+   See, e.g., the report at https://sourceforge.net/p/findbugs/bugs/1298 -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.time.FastDateParser\"/>",
                "+    <Or>",
                "+      <Method name=\"getStrategy\" />",
                "+      <Method name=\"simpleQuote\" params=\"java.lang.StringBuilder, java.lang.String\"/>",
                "+    </Or>",
                "+    <Bug pattern=\"SF_SWITCH_NO_DEFAULT\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: FindBugs cannot correctly recognize default branches in switch statements without break statements.",
                "+   See, e.g., the report at https://sourceforge.net/p/findbugs/bugs/1298 -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.time.FastDatePrinter\"/>",
                "+    <Method name=\"appendFullDigits\" params=\"java.lang.Appendable, int, int\"/>",
                "+    <Bug pattern=\"SF_SWITCH_NO_DEFAULT\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: The fallthrough on the swich statement is intentional -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.time.FastDatePrinter\"/>",
                "+    <Method name=\"appendFullDigits\" params=\"java.lang.Appendable, int, int\"/>",
                "+    <Bug pattern=\"SF_SWITCH_FALLTHROUGH\" />",
                "+  </Match>",
                "+",
                "+  <!-- Reason: Internal class that is used only as a key for an internal FormatCache. For this reason we can",
                "+   be sure, that equals will never be called with null or types other than MultipartKey.",
                "+  -->",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.time.FormatCache$MultipartKey\" />",
                "+    <Method name=\"equals\" />",
                "+    <Bug pattern=\"BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS\" />",
                "+  </Match>",
                "+  <Match>",
                "+    <Class name=\"org.apache.commons.lang3.time.FormatCache$MultipartKey\" />",
                "+    <Method name=\"equals\" />",
                "+    <Bug pattern=\"NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT\" />",
                "+  </Match>",
                "+</FindBugsFilter>"
            ],
            "changed_files": [
                "pom.xml",
                "src/conf/findbugs-exclude-filter.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d2e50af54ee89daae5907a3388cc6c83b10b2a74",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1535192619,
            "hunks": 5,
            "message": "IMAGING-103: add information about logging (IMAGING-154) and remove stale information",
            "diff": [
                "diff --git a/src/site/xdoc/gettingstarted.xml b/src/site/xdoc/gettingstarted.xml",
                "index f0fe6159..7cc43335 100644",
                "--- a/src/site/xdoc/gettingstarted.xml",
                "+++ b/src/site/xdoc/gettingstarted.xml",
                "@@ -26,8 +26,5 @@ limitations under the License.",
                "-  <strong>Outdated:</strong> This page contains information which is not up to date. Help making this page more useful",
                "-  by contributing a patch.",
                "-",
                " <p>",
                "   <ul>",
                "-      <li>Commons Imaging requires Java 1.5 or higher.</li>",
                "+      <li>Commons Imaging requires Java 1.7 or higher.</li>",
                "       <li>The questions of porting to J2ME and Android have been raised, but not yet pursued.</li>",
                "@@ -76,2 +73,19 @@ limitations under the License.",
                "+<section name=\"Logging\">",
                "+<p>",
                "+  Commons Imaging uses the JDK java.util.logging (JUL) classes for logging. You can find out more about",
                "+  JUL in its <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/logging/overview.html\">documentation</a>,",
                "+  or reading the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html\">logging API documentation</a>.",
                "+</p>",
                "+",
                "+<p>",
                "+  <ul>",
                "+    <li>A more verbose output is available by enabling the log level <strong>FINE</strong></li>",
                "+    <li>Information that is useful for debug and troubleshooting is being logged with the <strong>FINEST</strong> log level</li>",
                "+    <li>Some exceptions that are not re-thrown are being logged with the <strong>SEVERE</strong> log level</li>",
                "+    <li>Commons Imaging loggers are created using the class name, so you should be able to filter the log output with the class or package names</li>",
                "+  </ul>",
                "+</p>",
                "+</section>",
                "+",
                " </body>",
                "diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml",
                "index 001a6f58..93c1df1d 100644",
                "--- a/src/site/xdoc/index.xml",
                "+++ b/src/site/xdoc/index.xml",
                "@@ -77,4 +77,3 @@",
                "      <subsection name=\"Help Needed!\">",
                "-       There is currently no stable release of Imaging available, because there are a lot of outstanding issues.",
                "-       If you want to help getting out a release you may:",
                "+       If you want to help out you may:",
                "        <ul>",
                "@@ -87,52 +86,2 @@",
                "      </subsection>",
                "-     <subsection name=\"Latest Imaging SNAPSHOT\">",
                "-         <p>There is currently no stable release of Imaging. You may: </p>",
                "-         <ul>",
                "-             <li>Build Imaging from sources by checking out the source code from the <a href=\"source-repository.html\">SVN repository</a>.</li>",
                "-             <li>Pull the latest snapshot from the Apache snapshot repository</li>",
                "-             <!--<li>Download <a href=\"download_imaging.cgi\">1.0</a></li>-->",
                "-         </ul>",
                "-",
                "-       <p>",
                "-         For pulling the latest snapshot via maven you need to add the Apache snapshot repository to your pom.xml:",
                "-         <pre>",
                "-&lt;repository&gt;",
                "-  &lt;id&gt;apache.snapshots&lt;/id&gt;",
                "-  &lt;name&gt;Apache Development Snapshot Repository&lt;/name&gt;",
                "-  &lt;url&gt;https://repository.apache.org/content/repositories/snapshots/&lt;/url&gt;",
                "-  &lt;releases&gt;",
                "-    &lt;enabled&gt;false&lt;/enabled&gt;",
                "-  &lt;/releases&gt;",
                "-  &lt;snapshots&gt;",
                "-    &lt;enabled&gt;true&lt;/enabled&gt;",
                "-  &lt;/snapshots&gt;",
                "-&lt;/repository&gt;                      ",
                "-         </pre>",
                "-         Then you can use the SNAPSHOT version of Commons Imaging in your pom.xml:",
                "-         <pre>",
                "-&lt;dependency&gt;",
                "-  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;",
                "-  &lt;artifactId&gt;commons-imaging&lt;/artifactId&gt;",
                "-  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;",
                "-&lt;/dependency&gt;",
                "-         </pre>",
                "-       </p>",
                "-     </subsection>",
                "-     <subsection name=\"Final Sanselan Release\">",
                "-         <p>The last stable release of Sanselan, before it was renamed to Imaging, was 0.97 You may: </p>",
                "-         <ul>",
                "-             <li>Download <a href=\"download_sanselan.cgi\">0.97</a></li>",
                "-         </ul>",
                "-",
                "-         <p>",
                "-             Alternatively you can pull it from the central Maven repositories:",
                "-             <pre>",
                "-&lt;dependency&gt;",
                "-  &lt;groupId&gt;org.apache.sanselan&lt;/groupId&gt;",
                "-  &lt;artifactId&gt;sanselan&lt;/artifactId&gt;",
                "-  &lt;version&gt;0.97-incubator&lt;/version&gt;",
                "-&lt;/dependency&gt;",
                "-             </pre>",
                "-         </p>",
                "-     </subsection>"
            ],
            "changed_files": [
                "src/site/xdoc/gettingstarted.xml",
                "src/site/xdoc/index.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": "",
                "IMAGING-154": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103, IMAGING-154",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d61792702a4680671d86b6c138912a3c36bd1755",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1535193339,
            "hunks": 6,
            "message": "IMAGING-103: fix broken links, and replace subversion info by git",
            "diff": [
                "diff --git a/src/site/xdoc/formatsupport.xml b/src/site/xdoc/formatsupport.xml",
                "index 0aa3d682..96d866f0 100644",
                "--- a/src/site/xdoc/formatsupport.xml",
                "+++ b/src/site/xdoc/formatsupport.xml",
                "@@ -178,4 +178,4 @@ limitations under the License.",
                "     <td>",
                "-       <a href=\"http://partners.adobe.com/public/developer/tiff/index.html\">Adobe</a>",
                "-       <a href=\"http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf\">spec</a>",
                "+       <a href=\"https://www.web.archive.org/web/20060116011057/https://partners.adobe.com/public/developer/tiff/index.html\">Adobe</a>",
                "+       <a href=\"https://www.web.archive.org/web/20050828212121/https://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf\">spec</a>",
                "        <a href=\"http://en.wikipedia.org/wiki/TIFF\">wikipedia</a>",
                "@@ -193,3 +193,3 @@ limitations under the License.",
                "        <a href=\"http://en.wikipedia.org/wiki/WBMP\">wikipedia</a>",
                "-       <a href=\"http://www.wapforum.org/what/technical/SPEC-WAESpec-19990524.pdf\">spec</a>",
                "+       <a href=\"https://www.web.archive.org/web/20050824034208/http://www.wapforum.org:80/what/technical/SPEC-WAESpec-19990524.pdf\">spec</a>",
                "     </td>",
                "@@ -205,3 +205,3 @@ limitations under the License.",
                "        <a href=\"http://en.wikipedia.org/wiki/XBM\">wikipedia</a>",
                "-       <a href=\"www.xfree86.org/current/xlib.pdf\">spec</a>",
                "+       <a href=\"http://www.xfree86.org/current/xlib.pdf\">spec</a>",
                "     </td>",
                "diff --git a/src/site/xdoc/gettingstarted.xml b/src/site/xdoc/gettingstarted.xml",
                "index 7cc43335..3ff6144a 100644",
                "--- a/src/site/xdoc/gettingstarted.xml",
                "+++ b/src/site/xdoc/gettingstarted.xml",
                "@@ -56,8 +56,3 @@ limitations under the License.",
                "   <ul>",
                "-      <li>Check out the latest source from <a href=\"source-repository.html\">Subversion</a></li>",
                "-          <ul>",
                "-              <li>1. mkdir imaging-snapshot</li>",
                "-              <li>2. cd imaging-snapshot</li>",
                "-              <li>3. svn checkout <a href=\"https://svn.apache.org/repos/asf/commons/proper/imaging/trunk/\">https://svn.apache.org/repos/asf/commons/proper/imaging/trunk/</a></li>",
                "-          </ul>",
                "+      <li>Check out the latest source from <a href=\"scm.html\">git</a></li>",
                "       <li>Build using <a href=\"http://maven.apache.org\">Maven 2</a></li>",
                "diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml",
                "index 93c1df1d..2c1913ca 100644",
                "--- a/src/site/xdoc/index.xml",
                "+++ b/src/site/xdoc/index.xml",
                "@@ -70,3 +70,3 @@",
                "      <p>",
                "-         The <a href=\"source-repository.html\">git repository</a> can be",
                "+         The <a href=\"scm.html\">git repository</a> can be",
                "          <a href=\"https://git-wip-us.apache.org/repos/asf?p=commons-imaging.git\">browsed</a>, or you can browse/contribute via <a href=\"https://github.com/apache/commons-imaging\">GitHub</a>.",
                "diff --git a/src/site/xdoc/references.xml b/src/site/xdoc/references.xml",
                "index 8c8c0344..0bd56f62 100644",
                "--- a/src/site/xdoc/references.xml",
                "+++ b/src/site/xdoc/references.xml",
                "@@ -33,3 +33,3 @@ limitations under the License.",
                "     <li>Another list of Java image libaries ",
                "-        <a href=\"http://dmoz.org/Computers/Programming/Languages/Java/Class_Libraries/Graphics/Data_Formats/\">http://dmoz.org/Computers/Programming/Languages/Java/Class_Libraries/Graphics/Data_Formats/</a>",
                "+        <a href=\"http://web.archive.org/web/20170310015234/https://www.dmoz.org/Computers/Programming/Languages/Java/Class_Libraries/Graphics/Data_Formats/\">http://web.archive.org/web/20170310015234/https://www.dmoz.org/Computers/Programming/Languages/Java/Class_Libraries/Graphics/Data_Formats/</a>",
                "     </li>"
            ],
            "changed_files": [
                "src/site/xdoc/formatsupport.xml",
                "src/site/xdoc/gettingstarted.xml",
                "src/site/xdoc/index.xml",
                "src/site/xdoc/references.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "023d9551d2177ed964fcef20bef18b63d09cdb94",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1534496224,
            "hunks": 10,
            "message": "IMAGING-103: remove mention to release 1.0 in 2013, as it never happened",
            "diff": [
                "diff --git a/checkstyle-suppressions.xml b/checkstyle-suppressions.xml",
                "new file mode 100644",
                "index 00000000..4594f158",
                "--- /dev/null",
                "+++ b/checkstyle-suppressions.xml",
                "@@ -0,0 +1,23 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one or more",
                "+contributor license agreements.  See the NOTICE file distributed with",
                "+this work for additional information regarding copyright ownership.",
                "+The ASF licenses this file to You under the Apache License, Version 2.0",
                "+(the \"License\"); you may not use this file except in compliance with",
                "+the License.  You may obtain a copy of the License at",
                "+",
                "+     http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+-->",
                "+<!DOCTYPE suppressions PUBLIC \"-//Puppy Crawl//DTD Suppressions 1.1//EN\" \"http://www.puppycrawl.com/dtds/suppressions_1_1.dtd\">",
                "+<suppressions>",
                "+    <suppress checks=\"JavadocMethod\" files=\".*[/\\\\]test[/\\\\].*\"/>",
                "+    <suppress checks=\"JavadocPackage\" files=\".*[/\\\\]test[/\\\\].*\"/>",
                "+    <suppress checks=\"MagicNumber\" files=\"ColorConversions.java\"/>",
                "+</suppressions>",
                "diff --git a/checkstyle.xml b/checkstyle.xml",
                "new file mode 100644",
                "index 00000000..9ba1bccc",
                "--- /dev/null",
                "+++ b/checkstyle.xml",
                "@@ -0,0 +1,59 @@",
                "+<?xml version=\"1.0\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one or more",
                "+contributor license agreements.  See the NOTICE file distributed with",
                "+this work for additional information regarding copyright ownership.",
                "+The ASF licenses this file to You under the Apache License, Version 2.0",
                "+(the \"License\"); you may not use this file except in compliance with",
                "+the License.  You may obtain a copy of the License at",
                "+",
                "+     http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+-->",
                "+",
                "+<!DOCTYPE module PUBLIC",
                "+    \"-//Puppy Crawl//DTD Check Configuration 1.1//EN\"",
                "+    \"http://www.puppycrawl.com/dtds/configuration_1_1.dtd\">",
                "+",
                "+<!-- commons lang customization of default Checkstyle behavior -->",
                "+<module name=\"Checker\">",
                "+  <property name=\"localeLanguage\" value=\"en\"/>",
                "+  <module name=\"JavadocPackage\"/>",
                "+  <module name=\"NewlineAtEndOfFile\">",
                "+    <property name=\"lineSeparator\" value=\"lf\" />",
                "+  </module>",
                "+  <module name=\"FileTabCharacter\">",
                "+    <property name=\"fileExtensions\" value=\"java,xml\"/>",
                "+  </module>",
                "+  <module name=\"RegexpSingleline\">",
                "+    <!-- \\s matches whitespace character, $ matches end of line. -->",
                "+    <property name=\"format\" value=\"\\s+$\"/>",
                "+    <property name=\"message\" value=\"Line has trailing spaces.\"/>",
                "+  </module>",
                "+  <module name=\"SuppressionFilter\">",
                "+    <property name=\"file\" value=\"checkstyle-suppressions.xml\"/>",
                "+  </module>",
                "+  <module name=\"TreeWalker\">",
                "+    <property name=\"cacheFile\" value=\"target/cachefile\"/>",
                "+    <module name=\"AvoidStarImport\"/>",
                "+    <module name=\"IllegalImport\"/>",
                "+    <module name=\"RedundantImport\"/>",
                "+    <module name=\"UnusedImports\"/>",
                "+    <module name=\"NeedBraces\"/>",
                "+    <module name=\"JavadocMethod\">",
                "+      <property name=\"allowUndeclaredRTE\" value=\"true\"/>",
                "+      <property name=\"scope\" value=\"public\" />",
                "+    </module>",
                "+    <module name=\"ModifierOrder\"/>",
                "+    <module name=\"RedundantModifier\"/>",
                "+    <module name=\"UpperEll\" />",
                "+    <module name=\"LeftCurly\"/>",
                "+    <module name=\"NeedBraces\"/>",
                "+    <module name=\"RightCurly\"/>",
                "+ </module>",
                "+</module>",
                "diff --git a/pom.xml b/pom.xml",
                "index c5a604e4..985e3f9b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -154,2 +154,3 @@",
                "           <configLocation>${basedir}/checkstyle.xml</configLocation>",
                "+          <suppressionsLocation>${basedir}/checkstyle-suppressions.xml</suppressionsLocation>",
                "           <includeTestSourceDirectory>true</includeTestSourceDirectory>",
                "@@ -191,6 +192,10 @@",
                "             <excludes>",
                "-              <exclude>site-content/**</exclude>",
                "-              <exclude>src/site/resources/.htaccess</exclude>",
                "-              <exclude>src/site/resources/download_lang.cgi</exclude>",
                "-              <exclude>src/site/resources/release-notes/RELEASE-NOTES-*.txt</exclude>",
                "+              <exclude>src/test/data/images/xpm/1/symbolic.xpm</exclude>",
                "+              <exclude>src/test/data/images/xpm/1/Oregon Scientific DS6639 - DSC_0307 - small.xpm</exclude>",
                "+              <exclude>src/test/data/images/pbm/2/5x5-grayscale.pam</exclude>",
                "+              <exclude>src/test/data/images/pbm/2/5x5-bw.pam</exclude>",
                "+              <exclude>src/test/data/images/pbm/1/Oregon Scientific DS6639 - DSC_0307 - small.pgm</exclude>",
                "+              <exclude>src/test/data/images/xbm/1/Oregon Scientific DS6639 - DSC_0307 - small.xbm</exclude>",
                "+              <exclude>src/test/data/images/xbm/1/Oregon Scientific DS6639 - DSC_0307 - small X10.xbm</exclude>",
                "+              <exclude>src/main/resources/org/apache/commons/imaging/formats/xpm/rgb.txt</exclude>",
                "             </excludes>",
                "@@ -223,5 +228,6 @@",
                "         <configuration>",
                "-          <configLocation>${basedir}/checkstyle.xml</configLocation>",
                "           <includeTestSourceDirectory>true</includeTestSourceDirectory>",
                "           <enableRulesSummary>false</enableRulesSummary>",
                "+          <configLocation>${basedir}/checkstyle.xml</configLocation>",
                "+          <suppressionsLocation>${basedir}/checkstyle-suppressions.xml</suppressionsLocation>",
                "         </configuration>",
                "@@ -266,22 +272,2 @@",
                "       </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-checkstyle-plugin</artifactId>",
                "-        <version>2.11</version>",
                "-        <inherited>false</inherited>",
                "-        <configuration>",
                "-          <configLocation>${basedir}/src/conf/checkstyle.xml</configLocation>",
                "-          <suppressionsLocation>${basedir}/src/conf/checkstyle-suppressions.xml</suppressionsLocation>",
                "-          <enableRulesSummary>false</enableRulesSummary>",
                "-          <propertyExpansion>basedir=${basedir}</propertyExpansion>",
                "-        </configuration>",
                "-        <!-- Work around CHECKSTYLE-172 -->",
                "-        <reportSets>",
                "-          <reportSet>",
                "-            <reports>",
                "-              <report>checkstyle</report>",
                "-            </reports>",
                "-          </reportSet>",
                "-        </reportSets>",
                "-      </plugin>",
                "       <plugin>",
                "diff --git a/src/conf/checkstyle-suppressions.xml b/src/conf/checkstyle-suppressions.xml",
                "deleted file mode 100644",
                "index 7aaf2c94..00000000",
                "--- a/src/conf/checkstyle-suppressions.xml",
                "+++ /dev/null",
                "@@ -1,30 +0,0 @@",
                "-<?xml version=\"1.0\"?>",
                "-",
                "-<!DOCTYPE suppressions PUBLIC",
                "-    \"-//Puppy Crawl//DTD Suppressions 1.0//EN\"",
                "-    \"http://www.puppycrawl.com/dtds/suppressions_1_0.dtd\">",
                "-<!--",
                "-   Licensed to the Apache Software Foundation (ASF) under one or more",
                "-   contributor license agreements.  See the NOTICE file distributed with",
                "-   this work for additional information regarding copyright ownership.",
                "-   The ASF licenses this file to You under the Apache License, Version 2.0",
                "-   (the \"License\"); you may not use this file except in compliance with",
                "-   the License.  You may obtain a copy of the License at",
                "-",
                "-       http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-   Unless required by applicable law or agreed to in writing, software",
                "-   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-   See the License for the specific language governing permissions and",
                "-   limitations under the License.",
                "--->",
                "-<!-- ===================================================================== -->",
                "-<!-- Exceptions for Checkstyle -->",
                "-<!-- $Id$ -->",
                "-<!-- ===================================================================== -->",
                "-",
                "-<suppressions>",
                "-  <suppress checks=\"MagicNumber\" files=\"ColorConversions.java\"/>",
                "-",
                "-</suppressions>",
                "diff --git a/src/conf/checkstyle.xml b/src/conf/checkstyle.xml",
                "deleted file mode 100644",
                "index f1ae1d7c..00000000",
                "--- a/src/conf/checkstyle.xml",
                "+++ /dev/null",
                "@@ -1,177 +0,0 @@",
                "-<?xml version=\"1.0\"?>",
                "-<!--",
                "-Licensed to the Apache Software Foundation (ASF) under one or more",
                "-contributor license agreements.  See the NOTICE file distributed with",
                "-this work for additional information regarding copyright ownership.",
                "-The ASF licenses this file to You under the Apache License, Version 2.0",
                "-(the \"License\"); you may not use this file except in compliance with",
                "-the License.  You may obtain a copy of the License at",
                "-",
                "-     http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-Unless required by applicable law or agreed to in writing, software",
                "-distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-See the License for the specific language governing permissions and",
                "-limitations under the License.",
                "--->",
                "-",
                "-<!DOCTYPE module PUBLIC",
                "-    \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\"",
                "-    \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">",
                "-",
                "-<!-- Commons Imaging customization of default Checkstyle behavior -->",
                "-",
                "-<module name=\"Checker\">",
                "-    <property name=\"localeLanguage\" value=\"en\" />",
                "-",
                "-    <!-- Checks that a package.html file exists for each package.     -->",
                "-    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->",
                "-    <!--",
                "-    <module name=\"JavadocPackage\">",
                "-      <property name=\"allowLegacy\" value=\"true\"/>",
                "-    </module>",
                "-    -->",
                "-",
                "-    <!-- Checks whether files end with a new line.                        -->",
                "-    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->",
                "-    <module name=\"NewlineAtEndOfFile\"/>",
                "-",
                "-    <!-- Checks for Headers                              -->",
                "-    <!-- See http://checkstyle.sf.net/config_header.html -->",
                "-    <module name=\"Header\">",
                "-        <property name=\"headerFile\" value=\"${basedir}/src/conf/HEADER.txt\"/>",
                "-    </module>",
                "-  ",
                "-    <!-- Exceptions -->",
                "-    <module name=\"SuppressionFilter\">",
                "-        <property name=\"file\" value=\"${checkstyle.suppressions.file}\"/>",
                "-    </module>",
                "-",
                "-    <module name=\"FileTabCharacter\"/>",
                "-    <!--",
                "-    <module name=\"RegexpSingleline\">",
                "-        <property name=\"format\" value=\"\\s+$\"/>",
                "-        <property name=\"message\" value=\"Line has trailing spaces.\"/>",
                "-    </module>",
                "-    -->",
                "-    <module name=\"FileLength\"/>",
                "-",
                "-    <module name=\"TreeWalker\">",
                "-",
                "-        <property name=\"cacheFile\" value=\"${checkstyle.cache.file}\"/>",
                "-",
                "-        <!-- Checks for Javadoc comments.                     -->",
                "-        <!-- See http://checkstyle.sf.net/config_javadoc.html -->",
                "-        <!--",
                "-        <module name=\"JavadocMethod\">",
                "-            <property name=\"scope\" value=\"public\"/>",
                "-            <property name=\"allowUndeclaredRTE\" value=\"true\"/>",
                "-\t    <property name=\"allowMissingJavadoc\" value=\"true\"/>",
                "-        </module>",
                "-        <module name=\"JavadocType\">",
                "-        </module>",
                "-        <module name=\"JavadocVariable\"/>",
                "-        -->",
                "-",
                "-",
                "-        <!-- Checks for Naming Conventions.                  -->",
                "-        <!-- See http://checkstyle.sf.net/config_naming.html -->",
                "-        <module name=\"ConstantName\"/>",
                "-        <module name=\"LocalFinalVariableName\"/>",
                "-        <module name=\"LocalVariableName\"/>",
                "-        <module name=\"MemberName\"/>",
                "-        <module name=\"MethodName\"/>",
                "-        <module name=\"PackageName\"/>",
                "-        <module name=\"ParameterName\"/>",
                "-        <module name=\"StaticVariableName\"/>",
                "-        <module name=\"TypeName\"/>",
                "-",
                "-",
                "-        <!-- Following interprets the header file as regular expressions. -->",
                "-        <!-- <module name=\"RegexpHeader\"/>                                -->",
                "-",
                "-",
                "-        <!-- Checks for imports                              -->",
                "-        <!-- See http://checkstyle.sf.net/config_import.html -->",
                "-        <module name=\"AvoidStarImport\">",
                "-            <property name=\"allowStaticMemberImports\" value=\"true\"/>",
                "-        </module>",
                "-        <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->",
                "-        <module name=\"RedundantImport\"/>",
                "-        <module name=\"UnusedImports\"/>",
                "-",
                "-",
                "-        <!-- Checks for Size Violations.                    -->",
                "-        <!-- See http://checkstyle.sf.net/config_sizes.html -->",
                "-        <module name=\"LineLength\">",
                "-            <property name=\"max\" value=\"120\"/>",
                "-        </module>",
                "-        <module name=\"MethodLength\"/>",
                "-        <module name=\"ParameterNumber\"/>",
                "-",
                "-",
                "-        <!-- Checks for whitespace                               -->",
                "-        <!-- See http://checkstyle.sf.net/config_whitespace.html -->",
                "-        <module name=\"EmptyForIteratorPad\"/>",
                "-        <module name=\"OperatorWrap\"/>",
                "-        <module name=\"ParenPad\"/>",
                "-        <module name=\"WhitespaceAfter\"/>",
                "-        <module name=\"WhitespaceAround\"/>",
                "-        <module name=\"GenericWhitespace\"/>",
                "-",
                "-",
                "-        <!-- Modifier Checks                                    -->",
                "-        <!-- See http://checkstyle.sf.net/config_modifiers.html -->",
                "-        <module name=\"ModifierOrder\"/>",
                "-        <module name=\"RedundantModifier\"/>",
                "-",
                "-",
                "-        <!-- Checks for blocks. You know, those {}'s         -->",
                "-        <!-- See http://checkstyle.sf.net/config_blocks.html -->",
                "-        <module name=\"AvoidNestedBlocks\"/>",
                "-        <module name=\"EmptyBlock\"/>",
                "-        <module name=\"NeedBraces\"/>",
                "-",
                "-        <!-- Checks for common coding problems               -->",
                "-        <!-- See http://checkstyle.sf.net/config_coding.html -->",
                "-        <module name=\"CovariantEquals\"/>",
                "-        <module name=\"EqualsHashCode\"/>",
                "-        <module name=\"IllegalInstantiation\"/>",
                "-        <module name=\"InnerAssignment\"/>",
                "-        <module name=\"MagicNumber\">",
                "-            <property name=\"ignoreNumbers\" value=\"-1,0,1,2,3,4,8,16,24,32,64,128,255,256,1024\"/>",
                "-        </module>",
                "-        <module name=\"RedundantThrows\">",
                "-            <property name=\"allowUnchecked\" value=\"true\"/>",
                "-        </module>",
                "-        <module name=\"SimplifyBooleanExpression\"/>",
                "-        <module name=\"SimplifyBooleanReturn\"/>",
                "-        <module name=\"StringLiteralEquality\"/>",
                "-        <module name=\"SuperClone\"/>",
                "-        <module name=\"SuperFinalize\"/>",
                "-        <module name=\"DeclarationOrder\"/>",
                "-        <module name=\"ExplicitInitialization\"/>",
                "-        <module name=\"DefaultComesLast\"/>",
                "-        <module name=\"FallThrough\"/>",
                "-        <module name=\"MultipleVariableDeclarations\"/>",
                "-        <module name=\"UnnecessaryParentheses\"/>",
                "-",
                "-        <!-- Checks for class design                         -->",
                "-        <!-- See http://checkstyle.sf.net/config_design.html -->",
                "-        <module name=\"FinalClass\"/>",
                "-        <module name=\"HideUtilityClassConstructor\"/>",
                "-        <!--",
                "-        <module name=\"VisibilityModifier\">",
                "-            <property name=\"protectedAllowed\" value=\"true\"/>",
                "-        </module>",
                "-        -->",
                "-",
                "-        <!-- Miscellaneous other checks.                   -->",
                "-        <!-- See http://checkstyle.sf.net/config_misc.html -->",
                "-        <module name=\"ArrayTypeStyle\"/>",
                "-        <module name=\"UpperEll\"/>",
                "-",
                "-    </module>",
                "-",
                "-</module>",
                "diff --git a/src/site/xdoc/history.xml b/src/site/xdoc/history.xml",
                "index eeee2855..c2bc5d47 100644",
                "--- a/src/site/xdoc/history.xml",
                "+++ b/src/site/xdoc/history.xml",
                "@@ -27,3 +27,3 @@ limitations under the License.",
                " <p>",
                "-  Version 1.0 released November, 2013, brought many changes and is",
                "+  Version 1.0 released in 2018 brought many changes and is",
                "   best followed in the release notes."
            ],
            "changed_files": [
                "checkstyle-suppressions.xml",
                "checkstyle.xml",
                "pom.xml",
                "src/conf/checkstyle-suppressions.xml",
                "src/conf/checkstyle.xml",
                "src/site/xdoc/history.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d403648a5b5dfb2da3bb9978794bea8f35dd436d",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1535191562,
            "hunks": 1,
            "message": "IMAGING-103: Update version of Apache Maven PMD plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e0915106..ab167b5e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -275,3 +275,3 @@",
                "         <artifactId>maven-pmd-plugin</artifactId>",
                "-        <version>3.3</version>",
                "+        <version>3.9.0</version>",
                "         <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "IMAGING-103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: IMAGING-103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "149d068a31782ca16980f77571b529954d633d4e",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1540885882,
            "hunks": 9,
            "message": "Add settings for the new commons-release-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 06a96a76..e8c2f7fb 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -46,11 +46,18 @@",
                "     <argLine>-Xmx512m</argLine>",
                "+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>",
                "+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>",
                "     <maven.compiler.source>1.7</maven.compiler.source>",
                "     <maven.compiler.target>1.7</maven.compiler.target>",
                "+",
                "     <commons.componentid>imaging</commons.componentid>",
                "     <commons.module.name>org.apache.commons.imaging</commons.module.name>",
                "+",
                "     <commons.release.version>1.0-alpha1</commons.release.version>",
                "     <commons.rc.version>RC1</commons.rc.version>",
                "+",
                "     <commons.jira.id>IMAGING</commons.jira.id>",
                "     <commons.jira.pid>12313421</commons.jira.pid>",
                "+",
                "     <commons.osgi.export>org.apache.commons.imaging.*;version=${project.version};-noimport:=true</commons.osgi.export>",
                "+",
                "     <commons.site.path>imaging</commons.site.path>",
                "@@ -58,6 +65,22 @@",
                "     <commons.scmPubCheckoutDirectory>site-content</commons.scmPubCheckoutDirectory>",
                "-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>",
                "-    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>",
                "+",
                "     <checkstyle.plugin.version>3.0.0</checkstyle.plugin.version>",
                "+    <checkstyle.version>8.13</checkstyle.version>",
                "+",
                "+    <spotbugs.plugin.version>3.1.6</spotbugs.plugin.version>",
                "+",
                "+    <!-- generate report even if there are binary incompatible changes -->",
                "+    <commons.japicmp.breakBuildOnBinaryIncompatibleModifications>false</commons.japicmp.breakBuildOnBinaryIncompatibleModifications>",
                "+    <!-- 0.12.0 dies with a NullPointerException -->",
                "+    <commons.japicmp.version>0.13.0</commons.japicmp.version>",
                "+    <japicmp.skip>false</japicmp.skip>",
                "+",
                "+    <!-- Commons Release Plugin -->",
                "     <commons.encoding>utf-8</commons.encoding>",
                "+    <commons.bc.version>1.5</commons.bc.version>",
                "+    <commons.release-plugin.version>1.4</commons.release-plugin.version>",
                "+    <commons.release.isDistModule>true</commons.release.isDistModule>",
                "+    <commons.distSvnStagingUrl>scm:svn:https://dist.apache.org/repos/dist/dev/commons/${commons.componentid}</commons.distSvnStagingUrl>",
                "+    <commons.releaseManagerName>Bruno P. Kinoshita</commons.releaseManagerName>",
                "+    <commons.releaseManagerKey>33C6E01240C5468C2B7A556954E2764B48A42DF0</commons.releaseManagerKey>",
                "   </properties>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1-RC2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cbed29e329c288fdf324c5fc480c25f874cee77b",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1540711822,
            "hunks": 1,
            "message": "Update version numbers for commons imaging release 1.0-alpha1",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 407b675a..06a96a76 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -35,3 +35,3 @@",
                "-  <version>1.0-alpha1-SNAPSHOT</version>",
                "+  <version>1.0-alpha1</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "858a70610929b2abe68e9ae7df5ece163bbe797b",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1534501822,
            "hunks": 2,
            "message": "IMAGING:103: ignore Checkstyle JavaDocs warnings for now",
            "diff": [
                "diff --git a/checkstyle.xml b/checkstyle.xml",
                "index 9ba1bccc..6982a57a 100644",
                "--- a/checkstyle.xml",
                "+++ b/checkstyle.xml",
                "@@ -47,2 +47,3 @@ limitations under the License.",
                "     <module name=\"NeedBraces\"/>",
                "+    <!--",
                "     <module name=\"JavadocMethod\">",
                "@@ -51,2 +52,3 @@ limitations under the License.",
                "     </module>",
                "+     -->",
                "     <module name=\"ModifierOrder\"/>"
            ],
            "changed_files": [
                "checkstyle.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1",
                "commons-imaging-1.0-alpha1-RC1",
                "commons-imaging-1.0-alpha1-RC2",
                "commons-imaging-1.0-alpha1-RC3",
                "commons-imaging-1.0-alpha2",
                "commons-imaging-1.0-alpha2-RC1",
                "commons-imaging-1.0-alpha3-RC1",
                "commons-imaging-1.0-alpha3-RC2",
                "commons-imaging-1.0.0-alpha4-RC1",
                "commons-imaging-1.0.0-alpha5-RC1",
                "rel/commons-imaging-1.0-alpha3",
                "rel/commons-imaging-1.0.0-alpha4",
                "rel/commons-imaging-1.0.0-alpha5"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e4e1b4dd0da6d4c90205674a730738576f2bee8e",
            "repository": "https://github.com/apache/commons-imaging",
            "timestamp": 1540887456,
            "hunks": 1,
            "message": "Bump from RC1 to RC2",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e8c2f7fb..b7f03676 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -55,3 +55,3 @@",
                "     <commons.release.version>1.0-alpha1</commons.release.version>",
                "-    <commons.rc.version>RC1</commons.rc.version>",
                "+    <commons.rc.version>RC2</commons.rc.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "commons-imaging-1.0-alpha1-RC2"
            ],
            "matched_rules": []
        }
    ]
}
