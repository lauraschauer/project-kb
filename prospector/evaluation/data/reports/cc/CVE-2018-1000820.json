{
    "advisory_record": {
        "cve_id": "CVE-2018-1000820",
        "description": "neo4j-contrib neo4j-apoc-procedures version before commit 45bc09c contains a XML External Entity (XXE) vulnerability in XML Parser that can result in Disclosure of confidential data, denial of service, SSRF, port scanning. This vulnerability appears to have been fixed in after commit 45bc09c.",
        "reserved_timestamp": 1540684800,
        "published_timestamp": 1664814119,
        "updated_timestamp": 1664814119,
        "repository_url": null,
        "references": {
            "": 99,
            "https://github.com/neo4j-contrib/neo4j-apoc-procedures/issues/931": 7,
            "commit::cce30bb37000be6dfd0c2d039e3ebdebe4521b78": 5,
            "commit::5cf5f95acecfd68539f290f7cd9bf9a8aeebb735": 5,
            "commit::e04325c48663994af0bab69a551ad64be2219708": 4,
            "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1208": 4,
            "commit::2d03f5aa318096d44160608f2f4d2e04aaf07331": 4,
            "https://github.com/neo4j-contrib/neo4j-apoc-procedures/issues/1185": 3,
            "https://0dd.zone/2018/10/27/neo4f-apoc-procedures-XXE/": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "commit::fe99ce7f4c5b61d5169452cec33b248919ce69bf": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com/neo4j-contrib/neo4j-apoc-procedures/blob/591f8edba053ee92b65968f76cb68af1aece9898/src/main/java/apoc/load/Xml.java#L74": 1,
            "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/962": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "contrib",
            "External",
            "SSRF",
            "Disclosure",
            "XML",
            "XXE",
            "n/a",
            "Entity",
            "Parser"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "XML",
            "SSRF",
            "neo4j-apoc-procedures",
            "XXE"
        ],
        "keywords": [
            "procedure",
            "contrib",
            "commit",
            "appear",
            "denial",
            "datum",
            "apoc",
            "result",
            "version",
            "ssrf",
            "service",
            "contain",
            "disclosure",
            "scanning",
            "parser",
            "entity",
            "neo4j",
            "external",
            "vulnerability",
            "port"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "cce30bb37000be6dfd0c2d039e3ebdebe4521b78",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558602001,
            "hunks": 7,
            "message": "allow loading of xml with DTD references, fixes #1185 (#1208) loading of xml files was previously forbidden (#931). With this change, an dummy entity resolver is registered that does nothing, e.g. does not load external files.",
            "diff": [
                "diff --git a/src/main/java/apoc/load/Xml.java b/src/main/java/apoc/load/Xml.java",
                "index af60ad9c6..084a2797c 100644",
                "--- a/src/main/java/apoc/load/Xml.java",
                "+++ b/src/main/java/apoc/load/Xml.java",
                "@@ -2,5 +2,5 @@ package apoc.load;",
                "-import apoc.util.FileUtils;",
                " import apoc.result.MapResult;",
                " import apoc.result.NodeResult;",
                "+import apoc.util.FileUtils;",
                " import apoc.util.Util;",
                "@@ -15,2 +15,3 @@ import org.w3c.dom.CharacterData;",
                " import org.w3c.dom.*;",
                "+import org.xml.sax.InputSource;",
                "@@ -30,2 +31,3 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.io.StringReader;",
                " import java.net.URL;",
                "@@ -42,3 +44,3 @@ public class Xml {",
                "-    public static final XMLInputFactory FACTORY = XMLInputFactory.newFactory();",
                "+    private static final XMLInputFactory FACTORY = XMLInputFactory.newFactory();",
                "@@ -71,4 +73,4 @@ public class Xml {",
                "             documentBuilderFactory.setIgnoringElementContentWhitespace(true);",
                "-            documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);",
                "             DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();",
                "+            documentBuilder.setEntityResolver((publicId, systemId) -> new InputSource(new StringReader(\"\")));"
            ],
            "changed_files": [
                "src/main/java/apoc/load/Xml.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1185": "allow loading of xml with DTD references, fixes #1185 #1208",
                "1208": "apoc.load.xml not working on specific API's #1185",
                "931": "apoc.load.xml not working on specific API's #1185 allow loading of xml with DTD references, fixes #1185 #1208 Vulnerability Consumer fasten-project/fasten#33"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2d03f5aa318096d44160608f2f4d2e04aaf07331"
                ],
                [
                    "no-tag",
                    "5cf5f95acecfd68539f290f7cd9bf9a8aeebb735"
                ]
            ],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1185, 1208, 931",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 5 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: XML",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 931 contains some security-related terms: vulnerability",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, external",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1185, 1208, 931",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e04325c48663994af0bab69a551ad64be2219708",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1540553658,
            "hunks": 1,
            "message": "Fixes #931 (#962)",
            "diff": [
                "diff --git a/src/main/java/apoc/load/Xml.java b/src/main/java/apoc/load/Xml.java",
                "index aba6beb43..f199fc580 100644",
                "--- a/src/main/java/apoc/load/Xml.java",
                "+++ b/src/main/java/apoc/load/Xml.java",
                "@@ -67,2 +67,3 @@ public class Xml {",
                "             documentBuilderFactory.setIgnoringElementContentWhitespace(true);",
                "+            documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);",
                "             DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();"
            ],
            "changed_files": [
                "src/main/java/apoc/load/Xml.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "931": "apoc.load.xml not working on specific API's #1185 allow loading of xml with DTD references, fixes #1185 #1208 Vulnerability Consumer fasten-project/fasten#33",
                "962": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 931, 962",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 4 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 931 contains some security-related terms: vulnerability",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 931, 962",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7125a4478798b0434fd50e89bc3b9371783dd731",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558782153,
            "hunks": 1,
            "message": "Documentation additions to export cypher docs, fixes #1210 Memory and debug optioons for cypher-shell",
            "diff": [
                "diff --git a/docs/asciidoc/exportCypher.adoc b/docs/asciidoc/exportCypher.adoc",
                "index 8d40ccc0b..91aea3707 100644",
                "--- a/docs/asciidoc/exportCypher.adoc",
                "+++ b/docs/asciidoc/exportCypher.adoc",
                "@@ -3,2 +3,10 @@",
                "+====",
                "+If you are experimenting with imports that are failing you can add the `--debug` command line parameter, to see which statement was executed last and cause the failure.",
                "+",
                "+Also check the memory configuration of your Neo4j instance, you might want to up the HEAP to *2\u00e2\u0080\u00934GB* with the `dbms.memory.heap.max_size=2G` setting in `neo4j.conf`.",
                "+",
                "+And provide more memory to cypher-shell itself by prefixing the command with: `JAVA_OPTS=-Xmx4G bin/cypher-shell\u00c2\u00a0\u00e2\u0080\u00a6`",
                "+====",
                "+",
                " Make sure to set the config options in your `neo4j.conf`"
            ],
            "changed_files": [
                "docs/asciidoc/exportCypher.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1210": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "63a3aa08d5ed3e068f6f7b8f9febe8fd080c8739"
                ],
                [
                    "no-tag",
                    "d24063184a1edb39c226ed888e18c3a95b21ca81"
                ]
            ],
            "tags": [
                "3.4.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1210",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "290d16a9a8b5715ecabe7ef7541b4c515df70a59",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541771622,
            "hunks": 35,
            "message": "fixes #679 - add an apoc.export.json procedure (#874) fixes #919 - add schema information in apoc.export.json procedure",
            "diff": [
                "diff --git a/docs/data/exportJSON/MapComplex.json b/docs/data/exportJSON/MapComplex.json",
                "new file mode 100644",
                "index 000000000..23abc4e3e",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/MapComplex.json",
                "@@ -0,0 +1 @@",
                "+{\"key\":{\"data\":[10,\"car\",null,{\"crs\":\"wgs-84\",\"latitude\":56.7,\"longitude\":12.78,\"height\":null},{\"crs\":\"wgs-84-3d\",\"latitude\":56.7,\"longitude\":12.78,\"height\":8.0},{\"crs\":\"cartesian\",\"x\":2.3,\"y\":4.5,\"z\":null},{\"crs\":\"cartesian-3d\",\"x\":2.3,\"y\":4.5,\"z\":2.0},\"2018-10-10\",\"2018-10-18T14:21:40.004Z\",\"1984-03-07T12:31:14.645\",{\"x\":1,\"y\":[1,2,3,{\"age\":10}]}],\"value\":1}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/MapNode.json b/docs/data/exportJSON/MapNode.json",
                "new file mode 100644",
                "index 000000000..849a1588d",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/MapNode.json",
                "@@ -0,0 +1 @@",
                "+{\"u\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]},\"d\":{\"name\":\"Jim\",\"age\":42},\"r\":{\"since\":1993}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/MapPath.json b/docs/data/exportJSON/MapPath.json",
                "new file mode 100644",
                "index 000000000..8884d1a5e",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/MapPath.json",
                "@@ -0,0 +1,2 @@",
                "+{\"map\":{\"key\":{\"length\":1,\"rels\":[{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}}],\"nodes\":[{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}},{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}]}},\"name\":\"Kate\"}",
                "+{\"map\":{\"key\":{\"length\":1,\"rels\":[{\"id\":\"20\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1850},\"start\":{\"id\":\"20\",\"labels\":[\"User\"]},\"end\":{\"id\":\"21\",\"labels\":[\"User\"]}}],\"nodes\":[{\"type\":\"node\",\"id\":\"20\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Mike\",\"age\":78,\"male\":true}},{\"type\":\"node\",\"id\":\"21\",\"labels\":[\"User\"],\"properties\":{\"name\":\"John\",\"age\":18}}]}},\"name\":\"Kate\"}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/MapRel.json b/docs/data/exportJSON/MapRel.json",
                "new file mode 100644",
                "index 000000000..bb73df496",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/MapRel.json",
                "@@ -0,0 +1 @@",
                "+{\"rel\":{\"since\":1993}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/all.json b/docs/data/exportJSON/all.json",
                "new file mode 100644",
                "index 000000000..a9197773e",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/all.json",
                "@@ -0,0 +1,4 @@",
                "+{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}}",
                "+{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}",
                "+{\"type\":\"node\",\"id\":\"2\",\"labels\":[\"User\"],\"properties\":{\"age\":12}}",
                "+{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/data.json b/docs/data/exportJSON/data.json",
                "new file mode 100644",
                "index 000000000..a9197773e",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/data.json",
                "@@ -0,0 +1,4 @@",
                "+{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}}",
                "+{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}",
                "+{\"type\":\"node\",\"id\":\"2\",\"labels\":[\"User\"],\"properties\":{\"age\":12}}",
                "+{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/graph.json b/docs/data/exportJSON/graph.json",
                "new file mode 100644",
                "index 000000000..a9197773e",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/graph.json",
                "@@ -0,0 +1,4 @@",
                "+{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}}",
                "+{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}",
                "+{\"type\":\"node\",\"id\":\"2\",\"labels\":[\"User\"],\"properties\":{\"age\":12}}",
                "+{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/listNode.json b/docs/data/exportJSON/listNode.json",
                "new file mode 100644",
                "index 000000000..454ad4d17",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/listNode.json",
                "@@ -0,0 +1 @@",
                "+{\"list\":[{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}},{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}},{\"type\":\"node\",\"id\":\"2\",\"labels\":[\"User\"],\"properties\":{\"age\":12}}]}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/listPath.json b/docs/data/exportJSON/listPath.json",
                "new file mode 100644",
                "index 000000000..b42bf0b71",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/listPath.json",
                "@@ -0,0 +1 @@",
                "+{\"list\":[{\"length\":1,\"rels\":[{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}}],\"nodes\":[{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}},{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}]}]}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/listRel.json b/docs/data/exportJSON/listRel.json",
                "new file mode 100644",
                "index 000000000..8681e0ea8",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/listRel.json",
                "@@ -0,0 +1 @@",
                "+{\"list\":[{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}}]}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/mapPointDatetime.json b/docs/data/exportJSON/mapPointDatetime.json",
                "new file mode 100644",
                "index 000000000..80dfc754c",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/mapPointDatetime.json",
                "@@ -0,0 +1 @@",
                "+{\"map\":{\"data\":1,\"value\":{\"data\":{\"number\":[1,3,5],\"born\":\"2018-10-29\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null}},\"name\":\"Mike\",\"age\":12}},\"theDateTime\":\"2015-06-24T12:50:35.556+01:00\",\"theLocalDateTime\":\"2015-07-04T19:32:24\",\"point\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"date\":\"2015-03-26\",\"time\":\"12:50:35.556+01:00\",\"localTime\":\"12:50:35.556\"}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/query.json b/docs/data/exportJSON/query.json",
                "new file mode 100644",
                "index 000000000..6bb765c39",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/query.json",
                "@@ -0,0 +1,3 @@",
                "+{\"u.age\":42,\"u.name\":\"Adam\",\"u.male\":true,\"u.kids\":[\"Sam\",\"Anna\",\"Grace\"],\"labels(u)\":[\"User\"]}",
                "+{\"u.age\":42,\"u.name\":\"Jim\",\"u.male\":null,\"u.kids\":null,\"labels(u)\":[\"User\"]}",
                "+{\"u.age\":12,\"u.name\":null,\"u.male\":null,\"u.kids\":null,\"labels(u)\":[\"User\"]}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/query_nodes.json b/docs/data/exportJSON/query_nodes.json",
                "new file mode 100644",
                "index 000000000..340d565dd",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/query_nodes.json",
                "@@ -0,0 +1,3 @@",
                "+{\"u\":{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}}}",
                "+{\"u\":{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}}",
                "+{\"u\":{\"type\":\"node\",\"id\":\"2\",\"labels\":[\"User\"],\"properties\":{\"age\":12}}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/query_nodes_count.json b/docs/data/exportJSON/query_nodes_count.json",
                "new file mode 100644",
                "index 000000000..d2af5494a",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/query_nodes_count.json",
                "@@ -0,0 +1 @@",
                "+{\"count(n)\":3}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/query_nodes_param.json b/docs/data/exportJSON/query_nodes_param.json",
                "new file mode 100644",
                "index 000000000..340d565dd",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/query_nodes_param.json",
                "@@ -0,0 +1,3 @@",
                "+{\"u\":{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}}}",
                "+{\"u\":{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}}",
                "+{\"u\":{\"type\":\"node\",\"id\":\"2\",\"labels\":[\"User\"],\"properties\":{\"age\":12}}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/query_nodes_path.json b/docs/data/exportJSON/query_nodes_path.json",
                "new file mode 100644",
                "index 000000000..56e3aff93",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/query_nodes_path.json",
                "@@ -0,0 +1 @@",
                "+{\"u\":{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}},\"rel\":{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}},\"u2\":{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}},\"p\":{\"length\":1,\"rels\":[{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"]},\"end\":{\"id\":\"1\",\"labels\":[\"User\"]}}],\"nodes\":[{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}},{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}]},\"u.name\":\"Adam\"}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/query_two_nodes.json b/docs/data/exportJSON/query_two_nodes.json",
                "new file mode 100644",
                "index 000000000..0c8bd8479",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/query_two_nodes.json",
                "@@ -0,0 +1 @@",
                "+{\"u\":{\"type\":\"node\",\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}},\"l\":{\"type\":\"node\",\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}}",
                "\\ No newline at end of file",
                "diff --git a/docs/data/exportJSON/writeNodeProperties.json b/docs/data/exportJSON/writeNodeProperties.json",
                "new file mode 100644",
                "index 000000000..1e02a9e94",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/writeNodeProperties.json",
                "@@ -0,0 +1 @@",
                "+{\"rel\":{\"id\":\"0\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":1993},\"start\":{\"id\":\"0\",\"labels\":[\"User\"],\"properties\":{\"born\":\"2015-07-04T19:32:24\",\"name\":\"Adam\",\"place\":{\"crs\":\"wgs-84\",\"latitude\":33.46789,\"longitude\":13.1,\"height\":null},\"age\":42,\"male\":true,\"kids\":[\"Sam\",\"Anna\",\"Grace\"]}},\"end\":{\"id\":\"1\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Jim\",\"age\":42}}}}",
                "\\ No newline at end of file",
                "diff --git a/docs/exportJson.adoc b/docs/exportJson.adoc",
                "new file mode 100755",
                "index 000000000..058b20637",
                "--- /dev/null",
                "+++ b/docs/exportJson.adoc",
                "@@ -0,0 +1,154 @@",
                "+Make sure to set the config options in your `neo4j.conf`",
                "+",
                "+.Neo4j.conf",
                "+",
                "+----",
                "+apoc.export.file.enabled=true",
                "+----",
                "+",
                "+// tag::export.json[]",
                "+`YIELD file, source, format, nodes, relationships, properties, time, rows`",
                "+[cols=\"1m,5\"]",
                "+|===",
                "+| apoc.export.json.query(query,file,config) | exports results from the Cypher statement as Json to the provided file",
                "+| apoc.export.json.all(file,config) | exports whole database as Json to the provided file",
                "+| apoc.export.json.data(nodes,rels,file,config) | exports given nodes and relationships as Json to the provided file",
                "+| apoc.export.json.graph(graph,file,config) | exports given graph object as Json to the provided file",
                "+|===",
                "+// end::export.json[]",
                "+",
                "+.Config",
                "+",
                "+|===",
                "+| writeNodeProperties | true/false, if true export properties too.",
                "+|===",
                "+",
                "+",
                "+== Examples",
                "+",
                "+For the examples below we create the following dataset:",
                "+",
                "+[source,cypher]",
                "+----",
                "+CREATE (f:User {name:'Adam',age:42,male:true,kids:['Sam','Anna','Grace'], born:localdatetime('2015185T19:32:24'), place:point({latitude: 13.1, longitude: 33.46789})})-[:KNOWS {since: 1993}]->(b:User {name:'Jim',age:42}),(c:User {age:12})",
                "+----",
                "+",
                "+.Export query",
                "+",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.export.json.query(\"MATCH (u:User) WHERE age > {age} return u\",\"/tmp/query.json\",{params:{age:10}})",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/query_nodes_param.json[leveloffset]",
                "+----",
                "+",
                "+.Export query Complex",
                "+",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.export.json.query(\"RETURN {value:1, data:[10,'car',null, point({ longitude: 56.7, latitude: 12.78 }), point({ longitude: 56.7, latitude: 12.78, height: 8 }), point({ x: 2.3, y: 4.5 }), point({ x: 2.3, y: 4.5, z: 2 }),date('2018-10-10'), datetime('2018-10-18T14:21:40.004Z'), localdatetime({ year:1984, week:10, dayOfWeek:3, hour:12, minute:31, second:14, millisecond: 645 }), {x:1, y:[1,2,3,{age:10}]}]} as key\",\"/tmp/complex.json\")",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/MapComplex.json[leveloffset]",
                "+----",
                "+",
                "+.Export queryList",
                "+",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.export.json.query(\"MATCH (u:User) RETURN COLLECT(u) as list\",\"/tmp/list.json\",{params:{age:10}})",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/listNode.json[leveloffset]",
                "+----",
                "+",
                "+.Export queryMap",
                "+",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.export.json.query(\"MATCH (u:User)-[r:KNOWS]->(d:User) RETURN u {.*}, d {.*}, r {.*}\",\"/tmp/map.json\",{params:{age:10}})",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/MapNode.json[leveloffset]",
                "+----",
                "+",
                "+.Export all",
                "+",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.export.json.all(\"/tmp/all.json\",{useTypes:true})",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/all.json[leveloffset]",
                "+----",
                "+",
                "+.Export graph",
                "+",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.graph.fromDB('test',{}) yield graph",
                "+CALL apoc.export.json.graph(graph,\"tmp/graph.json\",{})",
                "+YIELD nodes, relationships, properties, file, source,format, time",
                "+RETURN *",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/graph.json[leveloffset]",
                "+----",
                "+",
                "+.Export data",
                "+",
                "+[source,cypher]",
                "+----",
                "+MATCH (nod:User)",
                "+MATCH ()-[rels:KNOWS]->()",
                "+WITH collect(nod) as a, collect(rels) as b",
                "+CALL apoc.export.json.data(a, b, \"tmp/data.json\", null)",
                "+YIELD nodes, relationships, properties, file, source,format, time",
                "+RETURN *",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/data.json[leveloffset]",
                "+----",
                "+",
                "+.Export query with config `writeNodeProperties`",
                "+",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.export.json.query(\"MATCH p = (u:User)-[rel:KNOWS]->(u2:User) RETURN rel\",\"/tmp/writeNodeProperties.json\",{writeNodeProperties:true}})",
                "+----",
                "+",
                "+result:",
                "+",
                "+[source,json]",
                "+----",
                "+include::data/exportJSON/writeNodeProperties.json[leveloffset]",
                "+----",
                "diff --git a/docs/overview.adoc b/docs/overview.adoc",
                "index 461546ef9..cb096a14e 100644",
                "--- a/docs/overview.adoc",
                "+++ b/docs/overview.adoc",
                "@@ -81,3 +81,3 @@ NOTE: Please note that there are (case-sensitive) http://neo4j.com/docs/develope",
                " | apoc.index.addNodeByName('name',node,['prop1',...]) | add node to an index for the given name",
                "-| apoc.index.addNodeMap(node,{key:value}) |\u00c2\u00a0add node to an index for each label it has with the given attributes which can also be computed",
                "+| apoc.index.addNodeMap(node,{key:value}) | add node to an index for each label it has with the given attributes which can also be computed",
                " | apoc.index.addNodeMapByName(index, node,{key:value}) | add node to an index for each label it has with the given attributes which can also be computed",
                "@@ -240,2 +240,5 @@ CALL apoc.export.csv.all(null, {stream:true,batchSize:100}) YIELD data RETURN da",
                "+=== Export to Json File",
                "+ include::exportJson.adoc[leveloffset=1]",
                "+",
                " === Export to Cypher Script",
                "@@ -1371,2 +1374,2 @@ RETURN path, weight",
                "-// end::overview[]",
                "+// end::overview[]",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/export/json/ExportJson.java b/src/main/java/apoc/export/json/ExportJson.java",
                "new file mode 100644",
                "index 000000000..23eec34cd",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/export/json/ExportJson.java",
                "@@ -0,0 +1,88 @@",
                "+package apoc.export.json;",
                "+",
                "+import apoc.Description;",
                "+import apoc.export.util.ExportConfig;",
                "+import apoc.export.util.NodesAndRelsSubGraph;",
                "+import apoc.export.util.ProgressReporter;",
                "+import apoc.result.ProgressInfo;",
                "+import apoc.util.Util;",
                "+import org.neo4j.cypher.export.DatabaseSubGraph;",
                "+import org.neo4j.cypher.export.SubGraph;",
                "+import org.neo4j.graphdb.GraphDatabaseService;",
                "+import org.neo4j.graphdb.Node;",
                "+import org.neo4j.graphdb.Relationship;",
                "+import org.neo4j.graphdb.Result;",
                "+import org.neo4j.procedure.Context;",
                "+import org.neo4j.procedure.Name;",
                "+import org.neo4j.procedure.Procedure;",
                "+",
                "+import java.io.PrintWriter;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.stream.Stream;",
                "+",
                "+import static apoc.util.FileUtils.checkWriteAllowed;",
                "+import static apoc.util.FileUtils.getPrintWriter;",
                "+",
                "+public class ExportJson {",
                "+    @Context",
                "+    public GraphDatabaseService db;",
                "+",
                "+    public ExportJson(GraphDatabaseService db) {",
                "+        this.db = db;",
                "+    }",
                "+",
                "+    public ExportJson() {",
                "+    }",
                "+",
                "+    @Procedure",
                "+    @Description(\"apoc.exportJson.json.all(file,config) - exports whole database as json to the provided file\")",
                "+    public Stream<ProgressInfo> all(@Name(\"file\") String fileName, @Name(value = \"config\", defaultValue = \"{}\") Map<String, Object> config) throws Exception {",
                "+",
                "+        String source = String.format(\"database: nodes(%d), rels(%d)\", Util.nodeCount(db), Util.relCount(db));",
                "+        return exportJson(fileName, source, new DatabaseSubGraph(db), config);",
                "+    }",
                "+",
                "+    @Procedure",
                "+    @Description(\"apoc.exportJson.json.data(nodes,rels,file,config) - exports given nodes and relationships as json to the provided file\")",
                "+    public Stream<ProgressInfo> data(@Name(\"nodes\") List<Node> nodes, @Name(\"rels\") List<Relationship> rels, @Name(\"file\") String fileName, @Name(value = \"config\", defaultValue = \"{}\") Map<String, Object> config) throws Exception {",
                "+",
                "+        String source = String.format(\"data: nodes(%d), rels(%d)\", nodes.size(), rels.size());",
                "+        return exportJson(fileName, source, new NodesAndRelsSubGraph(db, nodes, rels), config);",
                "+    }",
                "+    @Procedure",
                "+    @Description(\"apoc.exportJson.json.graph(graph,file,config) - exports given graph object as json to the provided file\")",
                "+    public Stream<ProgressInfo> graph(@Name(\"graph\") Map<String,Object> graph, @Name(\"file\") String fileName, @Name(value = \"config\", defaultValue = \"{}\") Map<String, Object> config) throws Exception {",
                "+",
                "+        Collection<Node> nodes = (Collection<Node>) graph.get(\"nodes\");",
                "+        Collection<Relationship> rels = (Collection<Relationship>) graph.get(\"relationships\");",
                "+        String source = String.format(\"graph: nodes(%d), rels(%d)\", nodes.size(), rels.size());",
                "+        return exportJson(fileName, source, new NodesAndRelsSubGraph(db, nodes, rels), config);",
                "+    }",
                "+",
                "+    @Procedure",
                "+    @Description(\"apoc.exportJson.json.query(query,file,{config,...,params:{params}}) - exports results from the cypher kernelTransaction as json to the provided file\")",
                "+    public Stream<ProgressInfo> query(@Name(\"query\") String query, @Name(\"file\") String fileName, @Name(value = \"config\", defaultValue = \"{}\") Map<String, Object> config) throws Exception {",
                "+        Map<String,Object> params = config == null ? Collections.emptyMap() : (Map<String,Object>)config.getOrDefault(\"params\", Collections.emptyMap());",
                "+        Result result = db.execute(query,params);",
                "+        String source = String.format(\"kernelTransaction: cols(%d)\", result.columns().size());",
                "+        return exportJson(fileName, source,result,config);",
                "+    }",
                "+",
                "+    private Stream<ProgressInfo> exportJson(@Name(\"file\") String fileName, String source, Object data, Map<String,Object> config) throws Exception {",
                "+        checkWriteAllowed();",
                "+        ExportConfig c = new ExportConfig(config);",
                "+        ProgressReporter reporter = new ProgressReporter(null, null, new ProgressInfo(fileName, source, \"json\"));",
                "+        JsonFormat exporter = new JsonFormat(db);",
                "+        try (PrintWriter printWriter = getPrintWriter(fileName, null);) {",
                "+            if (data instanceof SubGraph)",
                "+                exporter.dump(((SubGraph)data),printWriter,reporter,c);",
                "+            if (data instanceof Result)",
                "+                exporter.dump(((Result)data),printWriter,reporter,c);",
                "+        }",
                "+        return reporter.stream();",
                "+    }",
                "+}",
                "+",
                "diff --git a/src/main/java/apoc/export/json/JsonFormat.java b/src/main/java/apoc/export/json/JsonFormat.java",
                "new file mode 100644",
                "index 000000000..1119d4ad8",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/export/json/JsonFormat.java",
                "@@ -0,0 +1,196 @@",
                "+package apoc.export.json;",
                "+",
                "+import apoc.export.util.ExportConfig;",
                "+import apoc.export.util.Format;",
                "+import apoc.export.util.Reporter;",
                "+import apoc.meta.Meta;",
                "+import apoc.result.ProgressInfo;",
                "+import com.fasterxml.jackson.core.JsonFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.core.Version;",
                "+import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.SerializationFeature;",
                "+import com.fasterxml.jackson.databind.module.SimpleModule;",
                "+import org.neo4j.cypher.export.SubGraph;",
                "+import org.neo4j.graphdb.*;",
                "+import org.neo4j.graphdb.spatial.Point;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.Reader;",
                "+import java.io.Writer;",
                "+import java.time.temporal.TemporalAccessor;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.function.Consumer;",
                "+",
                "+public class JsonFormat implements Format {",
                "+    private final GraphDatabaseService db;",
                "+",
                "+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);",
                "+",
                "+    static {",
                "+        SimpleModule module = new SimpleModule(\"Neo4jApocSerializer\", new Version(1, 0, 0, \"\"));",
                "+        module.addSerializer(Point.class, new PointSerializer());",
                "+        module.addSerializer(TemporalAccessor.class, new TemporalSerializer());",
                "+        OBJECT_MAPPER.registerModule(module);",
                "+    }",
                "+",
                "+    public JsonFormat(GraphDatabaseService db) {",
                "+        this.db = db;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ProgressInfo load(Reader reader, Reporter reporter, ExportConfig config) throws Exception {",
                "+        return null;",
                "+    }",
                "+",
                "+    private ProgressInfo dump(Writer writer, Reporter reporter, Consumer<JsonGenerator> consumer) throws Exception {",
                "+        try (Transaction tx = db.beginTx(); JsonGenerator jsonGenerator = getJsonGenerator(writer);) {",
                "+",
                "+            consumer.accept(jsonGenerator);",
                "+",
                "+            tx.success();",
                "+            return reporter.getTotal();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ProgressInfo dump(SubGraph graph, Writer writer, Reporter reporter, ExportConfig config) throws Exception {",
                "+        Consumer<JsonGenerator> consumer = (jsonGenerator) -> {",
                "+            try {",
                "+                writeNodes(graph.getNodes(), reporter, jsonGenerator, config);",
                "+                writeRels(graph.getRelationships(), reporter, jsonGenerator, config);",
                "+            } catch (IOException e) {",
                "+                throw new RuntimeException(e);",
                "+            }",
                "+        };",
                "+        return dump(writer, reporter, consumer);",
                "+    }",
                "+",
                "+    public ProgressInfo dump(Result result, Writer writer, Reporter reporter, ExportConfig config) throws Exception {",
                "+        Consumer<JsonGenerator> consumer = (jsonGenerator) -> {",
                "+            try {",
                "+                String[] header = result.columns().toArray(new String[result.columns().size()]);",
                "+                result.accept((row) -> {",
                "+                    writeJsonResult(reporter, header, jsonGenerator, row, config);",
                "+                    reporter.nextRow();",
                "+                    return true;",
                "+                });",
                "+            } catch (IOException e) {",
                "+                throw new RuntimeException(e);",
                "+            }",
                "+        };",
                "+        return dump(writer, reporter, consumer);",
                "+    }",
                "+",
                "+    private JsonGenerator getJsonGenerator(Writer writer) throws IOException {",
                "+        JsonFactory jsonF = new JsonFactory();",
                "+        JsonGenerator jsonGenerator = jsonF.createGenerator(writer);",
                "+        jsonGenerator.setCodec(OBJECT_MAPPER);",
                "+        jsonGenerator.setPrettyPrinter(new MinimalPrettyPrinter(\"\\n\"));",
                "+        return jsonGenerator;",
                "+    }",
                "+",
                "+    private void writeNodes(Iterable<Node> nodes, Reporter reporter, JsonGenerator jsonGenerator,ExportConfig config) throws IOException {",
                "+        for (Node node : nodes) {",
                "+            writeNode(reporter, jsonGenerator, node, config);",
                "+        }",
                "+    }",
                "+",
                "+    private void writeNode(Reporter reporter, JsonGenerator jsonGenerator, Node node, ExportConfig config) throws IOException {",
                "+        Map<String, Object> allProperties = node.getAllProperties();",
                "+        JsonFormatSerializer.DEFAULT.writeNode(jsonGenerator, node, config);",
                "+        reporter.update(1, 0, allProperties.size());",
                "+    }",
                "+",
                "+    private void writeRels(Iterable<Relationship> rels, Reporter reporter, JsonGenerator jsonGenerator, ExportConfig config) throws IOException {",
                "+        for (Relationship rel : rels) {",
                "+            writeRel(reporter, jsonGenerator, rel, config);",
                "+        }",
                "+    }",
                "+",
                "+    private void writeRel(Reporter reporter, JsonGenerator jsonGenerator, Relationship rel, ExportConfig config) throws IOException {",
                "+        Map<String, Object> allProperties = rel.getAllProperties();",
                "+        JsonFormatSerializer.DEFAULT.writeRelationship(jsonGenerator, rel, config);",
                "+        reporter.update(0, 1, allProperties.size());",
                "+    }",
                "+",
                "+    private void writeJsonResult(Reporter reporter, String[] header, JsonGenerator jsonGenerator, Result.ResultRow row, ExportConfig config) throws IOException {",
                "+        jsonGenerator.writeStartObject();",
                "+        for (int col = 0; col < header.length; col++) {",
                "+            String keyName = header[col];",
                "+            Object value = row.get(keyName);",
                "+            write(reporter, jsonGenerator, config, keyName, value, true);",
                "+        }",
                "+        jsonGenerator.writeEndObject();",
                "+    }",
                "+",
                "+    private void write(Reporter reporter, JsonGenerator jsonGenerator, ExportConfig config, String keyName, Object value, boolean writeKey) throws IOException {",
                "+        Meta.Types type = Meta.Types.of(value);",
                "+        switch (type) {",
                "+            case NODE:",
                "+                writeFieldName(jsonGenerator, keyName, writeKey);",
                "+                writeNode(reporter, jsonGenerator, (Node) value, config);",
                "+                break;",
                "+            case RELATIONSHIP:",
                "+                writeFieldName(jsonGenerator, keyName, writeKey);",
                "+                writeRel(reporter, jsonGenerator, (Relationship) value, config);",
                "+                break;",
                "+            case PATH:",
                "+                writeFieldName(jsonGenerator, keyName, writeKey);",
                "+                writePath(reporter, jsonGenerator, config, (Path) value);",
                "+                break;",
                "+            case MAP:",
                "+                if (writeKey) {",
                "+                    jsonGenerator.writeObjectFieldStart(keyName);",
                "+                } else {",
                "+                    jsonGenerator.writeStartObject();",
                "+                    writeKey = true;",
                "+                }",
                "+                Map<String, Object> map = (HashMap<String, Object>) value;",
                "+                for (Map.Entry<String, Object> entry : map.entrySet()) {",
                "+                    write(reporter, jsonGenerator, config, entry.getKey(), entry.getValue(), writeKey);",
                "+                }",
                "+                jsonGenerator.writeEndObject();",
                "+                break;",
                "+            case LIST:",
                "+                if (writeKey) {",
                "+                    jsonGenerator.writeArrayFieldStart(keyName);",
                "+                } else {",
                "+                    jsonGenerator.writeStartArray();",
                "+                }",
                "+                List<Object> list = (List<Object>) value;",
                "+                for (Object elem : list) {",
                "+                    write(reporter, jsonGenerator, config, keyName, elem, false);",
                "+                }",
                "+                jsonGenerator.writeEndArray();",
                "+                break;",
                "+            default:",
                "+                JsonFormatSerializer.DEFAULT.serializeProperty(jsonGenerator, keyName, value, writeKey);",
                "+                reporter.update(0, 0, 1);",
                "+                break;",
                "+",
                "+        }",
                "+    }",
                "+",
                "+    private void writeFieldName(JsonGenerator jsonGenerator, String keyName, boolean writeKey) throws IOException {",
                "+        if (writeKey) {",
                "+            jsonGenerator.writeFieldName(keyName);",
                "+        }",
                "+    }",
                "+",
                "+    private void writePath(Reporter reporter, JsonGenerator jsonGenerator, ExportConfig config, Path path) throws IOException {",
                "+        jsonGenerator.writeStartObject();",
                "+        jsonGenerator.writeObjectField(\"length\", path.length());",
                "+        jsonGenerator.writeArrayFieldStart(\"rels\");",
                "+        writeRels(path.relationships(), reporter, jsonGenerator, config);",
                "+        jsonGenerator.writeEndArray();",
                "+        jsonGenerator.writeArrayFieldStart(\"nodes\");",
                "+        writeNodes(path.nodes(), reporter, jsonGenerator, config);",
                "+        jsonGenerator.writeEndArray();",
                "+        jsonGenerator.writeEndObject();",
                "+    }",
                "+",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/export/json/JsonFormatSerializer.java b/src/main/java/apoc/export/json/JsonFormatSerializer.java",
                "new file mode 100644",
                "index 000000000..bc71e15fe",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/export/json/JsonFormatSerializer.java",
                "@@ -0,0 +1,99 @@",
                "+package apoc.export.json;",
                "+",
                "+import apoc.export.util.ExportConfig;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+import org.neo4j.graphdb.Label;",
                "+import org.neo4j.graphdb.Node;",
                "+import org.neo4j.graphdb.Relationship;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+",
                "+public enum JsonFormatSerializer {",
                "+",
                "+    DEFAULT() {",
                "+",
                "+        @Override",
                "+        public void writeNode(JsonGenerator jsonGenerator, Node node, ExportConfig config) throws IOException {",
                "+            jsonGenerator.writeStartObject();",
                "+            jsonGenerator.writeStringField(\"type\", \"node\");",
                "+            writeNodeDetails(jsonGenerator, node, true);",
                "+            jsonGenerator.writeEndObject();",
                "+        }",
                "+",
                "+        @Override",
                "+        public void writeRelationship(JsonGenerator jsonGenerator, Relationship rel, ExportConfig config) throws IOException {",
                "+            Node startNode = rel.getStartNode();",
                "+            Node endNode = rel.getEndNode();",
                "+            jsonGenerator.writeStartObject();",
                "+            jsonGenerator.writeStringField(\"id\", String.valueOf(rel.getId()));",
                "+            jsonGenerator.writeStringField(\"type\", \"relationship\");",
                "+            jsonGenerator.writeStringField(\"label\", rel.getType().toString());",
                "+            serializeProperties(jsonGenerator, rel.getAllProperties());",
                "+            writeRelationshipNode(jsonGenerator, \"start\", startNode, config);",
                "+            writeRelationshipNode(jsonGenerator, \"end\", endNode, config);",
                "+            jsonGenerator.writeEndObject();",
                "+        }",
                "+",
                "+        @Override",
                "+        public void serializeProperties(JsonGenerator jsonGenerator, Map<String, Object> properties) throws IOException {",
                "+            if(properties != null && !properties.isEmpty()) {",
                "+                jsonGenerator.writeObjectFieldStart(\"properties\");",
                "+                for (Map.Entry<String, Object> entry : properties.entrySet()) {",
                "+                    String key = entry.getKey();",
                "+                    Object value = entry.getValue();",
                "+                    serializeProperty(jsonGenerator, key, value, true);",
                "+                }",
                "+                jsonGenerator.writeEndObject();",
                "+            }",
                "+        }",
                "+",
                "+        @Override",
                "+        public void serializeProperty(JsonGenerator jsonGenerator, String key, Object value, boolean writeKey) throws IOException {",
                "+            if (value == null) {",
                "+                if (writeKey) {",
                "+                    jsonGenerator.writeNullField(key);",
                "+                } else {",
                "+                    jsonGenerator.writeNull();",
                "+                }",
                "+            } else {",
                "+                if (writeKey) {",
                "+                    jsonGenerator.writeObjectField(key, value);",
                "+                } else {",
                "+                    jsonGenerator.writeObject(value);",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        private void writeNodeDetails(JsonGenerator jsonGenerator, Node node, boolean withNodeProperties) throws IOException {",
                "+            jsonGenerator.writeStringField(\"id\", String.valueOf(node.getId()));",
                "+            Iterable<Label> labels = node.getLabels();",
                "+            if (labels.iterator().hasNext()) {",
                "+                jsonGenerator.writeArrayFieldStart(\"labels\");",
                "+                for (Label label : labels) {",
                "+                    jsonGenerator.writeString(label.toString());",
                "+                }",
                "+                jsonGenerator.writeEndArray();",
                "+            }",
                "+            if (withNodeProperties) {",
                "+                serializeProperties(jsonGenerator, node.getAllProperties());",
                "+            }",
                "+        }",
                "+",
                "+        private void writeRelationshipNode(JsonGenerator jsonGenerator, String type, Node node, ExportConfig config) throws IOException {",
                "+            jsonGenerator.writeObjectFieldStart(type);",
                "+",
                "+            writeNodeDetails(jsonGenerator, node, config.writeNodeProperties());",
                "+            jsonGenerator.writeEndObject();",
                "+        }",
                "+    };",
                "+",
                "+    public abstract void writeNode(JsonGenerator jsonGenerator, Node node, ExportConfig config) throws IOException;",
                "+",
                "+    public abstract void writeRelationship(JsonGenerator jsonGenerator, Relationship relationship, ExportConfig config) throws IOException;",
                "+",
                "+    public abstract void serializeProperties(JsonGenerator jsonGenerator, Map<String,Object> properties) throws IOException;",
                "+",
                "+    public abstract void serializeProperty(JsonGenerator jsonGenerator, String key, Object value, boolean writeKey) throws IOException;",
                "+",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/export/json/PointSerializer.java b/src/main/java/apoc/export/json/PointSerializer.java",
                "new file mode 100644",
                "index 000000000..404dd78b6",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/export/json/PointSerializer.java",
                "@@ -0,0 +1,140 @@",
                "+package apoc.export.json;",
                "+",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.databind.JsonSerializer;",
                "+import com.fasterxml.jackson.databind.SerializerProvider;",
                "+import org.neo4j.graphdb.spatial.Point;",
                "+import org.neo4j.values.storable.CoordinateReferenceSystem;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.List;",
                "+",
                "+public class PointSerializer extends JsonSerializer<Point> {",
                "+    @Override",
                "+    public void serialize(Point value, JsonGenerator jsonGenerator, SerializerProvider serializers) throws IOException {",
                "+",
                "+        String crsType = value.getCRS().getType();",
                "+        List<Double> coordinate = value.getCoordinate().getCoordinate();",
                "+",
                "+        if (crsType.startsWith(CoordinateReferenceSystem.Cartesian.toString())) {",
                "+            if (coordinate.size() == 3) {",
                "+                jsonGenerator.writeObject(new PointCartesian(crsType, coordinate.get(0), coordinate.get(1), coordinate.get(2)));",
                "+            } else {",
                "+                jsonGenerator.writeObject(new PointCartesian(crsType, coordinate.get(0), coordinate.get(1)));",
                "+            }",
                "+        } else {",
                "+            if (coordinate.size() == 3) {",
                "+                jsonGenerator.writeObject(new PointWgs(crsType, coordinate.get(0), coordinate.get(1), coordinate.get(2)));",
                "+            } else {",
                "+                jsonGenerator.writeObject(new PointWgs(crsType, coordinate.get(0), coordinate.get(1)));",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    class PointCartesian {",
                "+        private String crs;",
                "+        private Double x;",
                "+        private Double y;",
                "+        private Double z;",
                "+",
                "+        public PointCartesian(String crs, Double x, Double y, Double z) {",
                "+            this.crs = crs;",
                "+            this.x = x;",
                "+            this.y = y;",
                "+            this.z = z;",
                "+        }",
                "+",
                "+        public PointCartesian(String crs, Double x, Double y) {",
                "+            this.crs = crs;",
                "+            this.x = x;",
                "+            this.y = y;",
                "+        }",
                "+",
                "+        public String getCrs() {",
                "+            return crs;",
                "+        }",
                "+",
                "+        public void setCrs(String crs) {",
                "+            this.crs = crs;",
                "+        }",
                "+",
                "+        public Double getX() {",
                "+            return x;",
                "+        }",
                "+",
                "+        public void setX(Double x) {",
                "+            this.x = x;",
                "+        }",
                "+",
                "+        public Double getY() {",
                "+            return y;",
                "+        }",
                "+",
                "+        public void setY(Double y) {",
                "+            this.y = y;",
                "+        }",
                "+",
                "+        public Double getZ() {",
                "+            return z;",
                "+        }",
                "+",
                "+        public void setZ(Double z) {",
                "+            this.z = z;",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    class PointWgs {",
                "+        private String crs;",
                "+        private Double latitude;",
                "+        private Double longitude;",
                "+        private Double height;",
                "+",
                "+        public PointWgs(String crs, Double latitude, Double longitude, Double height) {",
                "+            this.crs = crs;",
                "+            this.latitude = latitude;",
                "+            this.longitude = longitude;",
                "+            this.height = height;",
                "+        }",
                "+",
                "+        public PointWgs(String crs, Double latitude, Double longitude) {",
                "+            this.crs = crs;",
                "+            this.latitude = latitude;",
                "+            this.longitude = longitude;",
                "+        }",
                "+",
                "+        public String getCrs() {",
                "+            return crs;",
                "+        }",
                "+",
                "+        public void setCrs(String crs) {",
                "+            this.crs = crs;",
                "+        }",
                "+",
                "+        public Double getLatitude() {",
                "+            return latitude;",
                "+        }",
                "+",
                "+        public void setLatitude(Double latitude) {",
                "+            this.latitude = latitude;",
                "+        }",
                "+",
                "+        public Double getLongitude() {",
                "+            return longitude;",
                "+        }",
                "+",
                "+        public void setLongitude(Double longitude) {",
                "+            this.longitude = longitude;",
                "+        }",
                "+",
                "+        public Double getHeight() {",
                "+            return height;",
                "+        }",
                "+",
                "+        public void setHeight(Double height) {",
                "+            this.height = height;",
                "+        }",
                "+    }",
                "+",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/export/json/TemporalSerializer.java b/src/main/java/apoc/export/json/TemporalSerializer.java",
                "new file mode 100644",
                "index 000000000..129b263d1",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/export/json/TemporalSerializer.java",
                "@@ -0,0 +1,19 @@",
                "+package apoc.export.json;",
                "+",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.databind.JsonSerializer;",
                "+import com.fasterxml.jackson.databind.SerializerProvider;",
                "+",
                "+import java.io.IOException;",
                "+import java.time.temporal.TemporalAccessor;",
                "+",
                "+public class TemporalSerializer extends JsonSerializer<TemporalAccessor> {",
                "+",
                "+    @Override",
                "+    public void serialize(TemporalAccessor value, JsonGenerator jsonGenerator, SerializerProvider serializers) throws IOException {",
                "+        if (value == null) {",
                "+            jsonGenerator.writeNull();",
                "+        }",
                "+        jsonGenerator.writeString(value.toString());",
                "+    }",
                "+}",
                "diff --git a/src/main/java/apoc/export/util/ExportConfig.java b/src/main/java/apoc/export/util/ExportConfig.java",
                "index f743851db..2cf6572f4 100644",
                "--- a/src/main/java/apoc/export/util/ExportConfig.java",
                "+++ b/src/main/java/apoc/export/util/ExportConfig.java",
                "@@ -24,2 +24,3 @@ public class ExportConfig {",
                "     private boolean useTypes = false;",
                "+    private boolean writeNodeProperties = false;",
                "     private boolean nodesOfRelationships;",
                "@@ -71,2 +72,3 @@ public class ExportConfig {",
                "         this.streamStatements = toBoolean(config.get(\"streamStatements\")) || toBoolean(config.get(\"stream\"));",
                "+        this.writeNodeProperties = toBoolean(config.get(\"writeNodeProperties\"));",
                "     }",
                "@@ -112,2 +114,6 @@ public class ExportConfig {",
                "     }",
                "+",
                "+    public boolean writeNodeProperties() {",
                "+        return writeNodeProperties;",
                "+    }",
                " }",
                "diff --git a/src/main/java/apoc/meta/Meta.java b/src/main/java/apoc/meta/Meta.java",
                "index 5c3e855d9..beb8dd66a 100644",
                "--- a/src/main/java/apoc/meta/Meta.java",
                "+++ b/src/main/java/apoc/meta/Meta.java",
                "@@ -11,2 +11,3 @@ import org.neo4j.graphdb.schema.IndexDefinition;",
                " import org.neo4j.graphdb.schema.Schema;",
                "+import org.neo4j.graphdb.spatial.Point;",
                " import org.neo4j.helpers.collection.Pair;",
                "@@ -15,3 +16,2 @@ import org.neo4j.internal.kernel.api.TokenRead;",
                " import org.neo4j.kernel.api.KernelTransaction;",
                "-import org.neo4j.kernel.api.Statement;",
                " import org.neo4j.kernel.internal.GraphDatabaseAPI;",
                "@@ -19,2 +19,3 @@ import org.neo4j.procedure.*;",
                "+import java.time.temporal.TemporalAccessor;",
                " import java.util.*;",
                "@@ -515,7 +516,7 @@ public class Meta {",
                "                         case UNIQUENESS: res.unique = true;",
                "-                        node.getLabels().forEach(l -> {",
                "-                            if(res.label != l.name())",
                "-                                res.addLabel(l.name());",
                "-                        });",
                "-                        break;",
                "+                            node.getLabels().forEach(l -> {",
                "+                                if(res.label != l.name())",
                "+                                    res.addLabel(l.name());",
                "+                            });",
                "+                            break;",
                "                         case NODE_PROPERTY_EXISTENCE:res.existence = true; break;",
                "@@ -845,2 +846,2 @@ public class Meta {",
                "     }",
                "-}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/util/JsonUtil.java b/src/main/java/apoc/util/JsonUtil.java",
                "old mode 100644",
                "new mode 100755"
            ],
            "changed_files": [
                "docs/data/exportJSON/MapComplex.json",
                "docs/data/exportJSON/MapNode.json",
                "docs/data/exportJSON/MapPath.json",
                "docs/data/exportJSON/MapRel.json",
                "docs/data/exportJSON/all.json",
                "docs/data/exportJSON/data.json",
                "docs/data/exportJSON/graph.json",
                "docs/data/exportJSON/listNode.json",
                "docs/data/exportJSON/listPath.json",
                "docs/data/exportJSON/listRel.json",
                "docs/data/exportJSON/mapPointDatetime.json",
                "docs/data/exportJSON/query.json",
                "docs/data/exportJSON/query_nodes.json",
                "docs/data/exportJSON/query_nodes_count.json",
                "docs/data/exportJSON/query_nodes_param.json",
                "docs/data/exportJSON/query_nodes_path.json",
                "docs/data/exportJSON/query_two_nodes.json",
                "docs/data/exportJSON/writeNodeProperties.json",
                "docs/exportJson.adoc",
                "docs/overview.adoc",
                "src/main/java/apoc/export/json/ExportJson.java",
                "src/main/java/apoc/export/json/JsonFormat.java",
                "src/main/java/apoc/export/json/JsonFormatSerializer.java",
                "src/main/java/apoc/export/json/PointSerializer.java",
                "src/main/java/apoc/export/json/TemporalSerializer.java",
                "src/main/java/apoc/export/util/ExportConfig.java",
                "src/main/java/apoc/meta/Meta.java",
                "src/main/java/apoc/util/JsonUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "679": "",
                "874": "add schema information in apoc.export.json procedure #919",
                "919": "fixes #679 - add an apoc.export.json procedure #874"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4e6009825bef8dba5bafdf39686db745028c0fea"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 679, 874, 919",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "915a36fe239d2910b2f4a6af3c5b48e26d314764",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558489420,
            "hunks": 6,
            "message": "fixes #1178: Make the `dbms.directories.import` dir root dir for exports (#1179)",
            "diff": [
                "diff --git a/docs/asciidoc/_export_import.adoc b/docs/asciidoc/_export_import.adoc",
                "index 11e6a2583..5a3b79e51 100644",
                "--- a/docs/asciidoc/_export_import.adoc",
                "+++ b/docs/asciidoc/_export_import.adoc",
                "@@ -3,2 +3,5 @@",
                "+[NOTE]",
                "+In case you have the default configuration with `apoc.import.file.use_neo4j_config=true` the export consider as root the directory defined into the `dbms.directories.import` property",
                "+",
                " === Loading Data from Web-APIs",
                "diff --git a/src/main/java/apoc/ApocConfiguration.java b/src/main/java/apoc/ApocConfiguration.java",
                "index 210c365e8..000251686 100644",
                "--- a/src/main/java/apoc/ApocConfiguration.java",
                "+++ b/src/main/java/apoc/ApocConfiguration.java",
                "@@ -75,2 +75,3 @@ public class ApocConfiguration {",
                "     }",
                "+",
                " }",
                "diff --git a/src/main/java/apoc/util/FileUtils.java b/src/main/java/apoc/util/FileUtils.java",
                "index 3521519cf..c02afa1a1 100644",
                "--- a/src/main/java/apoc/util/FileUtils.java",
                "+++ b/src/main/java/apoc/util/FileUtils.java",
                "@@ -10,2 +10,3 @@ import org.apache.commons.io.output.WriterOutputStream;",
                " import java.io.*;",
                "+import java.net.MalformedURLException;",
                " import java.net.URI;",
                "@@ -88,3 +89,3 @@ public class FileUtils {",
                "     public static String changeFileUrlIfImportDirectoryConstrained(String url) throws IOException {",
                "-        if (isFile(url) && ApocConfiguration.isEnabled(\"import.file.use_neo4j_config\")) {",
                "+        if (isFile(url) && isImportUsingNeo4jConfig()) {",
                "             if (!ApocConfiguration.isEnabled(\"import.file.allow_read_from_filesystem\"))",
                "@@ -140,3 +141,4 @@ public class FileUtils {",
                "         } else {",
                "-            outputStream = fileName.equals(\"-\") ? out : new FileOutputStream(fileName);",
                "+            outputStream = getOrCreateOutputStream(fileName, out);",
                "+//            outputStream = fileName.equals(\"-\") ? out : new FileOutputStream(fileName);",
                "         }",
                "@@ -145,2 +147,28 @@ public class FileUtils {",
                "+    private static OutputStream getOrCreateOutputStream(String fileName, OutputStream out) throws FileNotFoundException, MalformedURLException {",
                "+        OutputStream outputStream;",
                "+        if (fileName.equals(\"-\")) {",
                "+            outputStream = out;",
                "+        } else {",
                "+            boolean enabled = isImportUsingNeo4jConfig();",
                "+            if (enabled) {",
                "+                String importDir = getConfiguredImportDirectory();",
                "+                File file = new File(importDir, fileName);",
                "+                outputStream = new FileOutputStream(file);",
                "+            } else {",
                "+                URI uri = URI.create(fileName);",
                "+                outputStream = new FileOutputStream(uri.isAbsolute() ? uri.toURL().getFile() : fileName);",
                "+            }",
                "+        }",
                "+        return outputStream;",
                "+    }",
                "+",
                "+    private static boolean isImportUsingNeo4jConfig() {",
                "+        return ApocConfiguration.isEnabled(\"import.file.use_neo4j_config\");",
                "+    }",
                "+",
                "+    public static String getConfiguredImportDirectory() {",
                "+        return ApocConfiguration.get(\"dbms.directories.import\", \"import\");",
                "+    }",
                "+",
                "     public static void checkReadAllowed(String url) {"
            ],
            "changed_files": [
                "docs/asciidoc/_export_import.adoc",
                "src/main/java/apoc/ApocConfiguration.java",
                "src/main/java/apoc/util/FileUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1178": "fixes #1178: Make the dbms.directories.import dir root dir for exports #1179",
                "1179": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e12bff718194ab0b2f164f52d241cfa70fba0dcc"
                ],
                [
                    "no-tag",
                    "217461e3f7062548489b5785e5a5bff97b65e446"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1178, 1179",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "613817c06b2baaaa3c7259166caa77aff7c28cbc",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541501849,
            "hunks": 8,
            "message": "fixes #957 - apoc.export.cypher.all doesn't work with temporal types (#971)",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 61d0a7905..53176e387 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -70,3 +70,3 @@ dependencies {",
                "     compile group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.9'",
                "-    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.4.4'",
                "+    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.6.3'",
                "     compileOnly group: 'net.biville.florent', name: 'neo4j-sproc-compiler', version: '1.2'",
                "diff --git a/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java b/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java",
                "index 4dec3613b..748ddb090 100644",
                "--- a/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java",
                "+++ b/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java",
                "@@ -6,5 +6,11 @@ import org.neo4j.graphdb.Node;",
                " import org.neo4j.graphdb.Relationship;",
                "+import org.neo4j.graphdb.spatial.Point;",
                " import org.neo4j.helpers.collection.Iterables;",
                "+import org.neo4j.values.storable.DateValue;",
                "+import org.neo4j.values.storable.DurationValue;",
                "+import org.neo4j.values.storable.Value;",
                "+import org.neo4j.values.storable.Values;",
                " import java.lang.reflect.Array;",
                "+import java.time.temporal.Temporal;",
                " import java.util.*;",
                "@@ -18,5 +24,7 @@ public class CypherFormatterUtils {",
                "-\tpublic final static String UNIQUE_ID_LABEL = \"UNIQUE IMPORT LABEL\";",
                "-\tpublic final static String UNIQUE_ID_PROP = \"UNIQUE IMPORT ID\";",
                "-\tpublic final static String Q_UNIQUE_ID_LABEL = quote(UNIQUE_ID_LABEL);",
                "+    public final static String UNIQUE_ID_LABEL = \"UNIQUE IMPORT LABEL\";",
                "+    public final static String UNIQUE_ID_PROP = \"UNIQUE IMPORT ID\";",
                "+    public final static String Q_UNIQUE_ID_LABEL = quote(UNIQUE_ID_LABEL);",
                "+",
                "+    public final static String FUNCTION_TEMPLATE = \"%s('%s')\";",
                "@@ -169,3 +177,3 @@ public class CypherFormatterUtils {",
                "-\t// ---- to string ----",
                "+    // ---- to string ----",
                "@@ -192,19 +200,30 @@ public class CypherFormatterUtils {",
                "     public static String toString(Object value) {",
                "-\t\tif (value == null) return \"null\";",
                "-\t\tif (value instanceof String) return FormatUtils.formatString(value);",
                "-\t\tif (value instanceof Number) {",
                "-\t\t\treturn FormatUtils.formatNumber((Number) value);",
                "-\t\t}",
                "-\t\tif (value instanceof Boolean) return value.toString();",
                "-\t\tif (value instanceof Iterator) {",
                "-\t\t\treturn toString(((Iterator) value));",
                "-\t\t}",
                "-\t\tif (value instanceof Iterable) {",
                "-\t\t\treturn toString(((Iterable) value).iterator());",
                "-\t\t}",
                "-\t\tif (value.getClass().isArray()) {",
                "-\t\t\treturn arrayToString(value);",
                "-\t\t}",
                "-\t\treturn value.toString();",
                "-\t}",
                "+        if (value == null) return \"null\";",
                "+        if (value instanceof String) return FormatUtils.formatString(value);",
                "+        if (value instanceof Number) {",
                "+            return FormatUtils.formatNumber((Number) value);",
                "+        }",
                "+        if (value instanceof Boolean) return value.toString();",
                "+        if (value instanceof Iterator) {",
                "+            return toString(((Iterator) value));",
                "+        }",
                "+        if (value instanceof Iterable) {",
                "+            return toString(((Iterable) value).iterator());",
                "+        }",
                "+        if (value.getClass().isArray()) {",
                "+            return arrayToString(value);",
                "+        }",
                "+        if (value instanceof Temporal){",
                "+            Value val = Values.of(value);",
                "+            return toStringFunction(val);",
                "+        }",
                "+        if (value instanceof DurationValue) {",
                "+            return toStringFunction((DurationValue) value);",
                "+        }",
                "+        return value.toString();",
                "+    }",
                "+",
                "+    private static String toStringFunction(Value value) {",
                "+        return String.format(FUNCTION_TEMPLATE, value.getTypeName().toLowerCase(), value.toString());",
                "+    }",
                "@@ -221,10 +240,10 @@ public class CypherFormatterUtils {",
                "     public static String arrayToString(Object value) {",
                "-\t\tint length = Array.getLength(value);",
                "-\t\tStringBuilder result = new StringBuilder(10 * length);",
                "-\t\tfor (int i = 0; i < length; i++) {",
                "-\t\t\tif (i > 0) result.append(\", \");",
                "-\t\t\tresult.append(toString(Array.get(value, i)));",
                "-\t\t}",
                "-\t\treturn \"[\" + result.toString() + \"]\";",
                "-\t}",
                "-}",
                "+        int length = Array.getLength(value);",
                "+        StringBuilder result = new StringBuilder(10 * length);",
                "+        for (int i = 0; i < length; i++) {",
                "+            if (i > 0) result.append(\", \");",
                "+            result.append(toString(Array.get(value, i)));",
                "+        }",
                "+        return \"[\" + result.toString() + \"]\";",
                "+    }",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "build.gradle",
                "src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "957": "",
                "971": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "007faf8e14180339e5a5ebf2edff5a8f58d8e9cf"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 957, 971",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "75002521ca38bf2e979e30a5b8e714fd20423629",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542369398,
            "hunks": 32,
            "message": "Make queue timeout for streaming export results higher and configurable, fixes #958",
            "diff": [
                "diff --git a/src/main/java/apoc/cypher/Cypher.java b/src/main/java/apoc/cypher/Cypher.java",
                "index 59c06e3b0..dc0049cf6 100644",
                "--- a/src/main/java/apoc/cypher/Cypher.java",
                "+++ b/src/main/java/apoc/cypher/Cypher.java",
                "@@ -66,3 +66,3 @@ public class Cypher {",
                "     @Procedure(mode = WRITE)",
                "-    @Description(\"apoc.cypher.runFile(file or url,[{statistics:true,timeout:10,parameters:{}}]) - runs each kernelTransaction in the file, all semicolon separated - currently no schema operations\")",
                "+    @Description(\"apoc.cypher.runFile(file or url,[{statistics:true,timeout:10,parameters:{}}]) - runs each statement in the file, all semicolon separated - currently no schema operations\")",
                "     public Stream<RowResult> runFile(@Name(\"file\") String fileName, @Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {",
                "@@ -72,3 +72,3 @@ public class Cypher {",
                "     @Procedure(mode = WRITE)",
                "-    @Description(\"apoc.cypher.runFiles([files or urls],[{statistics:true,timeout:10,parameters:{}}])) - runs each kernelTransaction in the files, all semicolon separated\")",
                "+    @Description(\"apoc.cypher.runFiles([files or urls],[{statistics:true,timeout:10,parameters:{}}])) - runs each statement in the files, all semicolon separated\")",
                "     public Stream<RowResult> runFiles(@Name(\"file\") List<String> fileNames, @Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {",
                "@@ -87,3 +87,3 @@ public class Cypher {",
                "     @Procedure(mode=Mode.SCHEMA)",
                "-    @Description(\"apoc.cypher.runSchemaFile(file or url,[{statistics:true,timeout:10}]) - allows only schema operations, runs each schema kernelTransaction in the file, all semicolon separated\")",
                "+    @Description(\"apoc.cypher.runSchemaFile(file or url,[{statistics:true,timeout:10}]) - allows only schema operations, runs each schema statement in the file, all semicolon separated\")",
                "     public Stream<RowResult> runSchemaFile(@Name(\"file\") String fileName, @Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {",
                "@@ -93,3 +93,3 @@ public class Cypher {",
                "     @Procedure(mode=Mode.SCHEMA)",
                "-    @Description(\"apoc.cypher.runSchemaFiles([files or urls],{statistics:true,timeout:10}) - allows only schema operations, runs each schema kernelTransaction in the files, all semicolon separated\")",
                "+    @Description(\"apoc.cypher.runSchemaFiles([files or urls],{statistics:true,timeout:10}) - allows only schema operations, runs each schema statement in the files, all semicolon separated\")",
                "     public Stream<RowResult> runSchemaFiles(@Name(\"file\") List<String> fileNames, @Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {",
                "@@ -109,5 +109,5 @@ public class Cypher {",
                "             if (schemaOperation) {",
                "-                runSchemaStatementsInTx(reader, queue, params, addStatistics);",
                "+                runSchemaStatementsInTx(reader, queue, params, addStatistics,timeout);",
                "             } else {",
                "-                runDataStatementsInTx(reader, queue, params, addStatistics);",
                "+                runDataStatementsInTx(reader, queue, params, addStatistics,timeout);",
                "             }",
                "@@ -119,3 +119,3 @@ public class Cypher {",
                "-    private void runDataStatementsInTx(Reader reader, BlockingQueue<RowResult> queue, Map<String, Object> params, boolean addStatistics) {",
                "+    private void runDataStatementsInTx(Reader reader, BlockingQueue<RowResult> queue, Map<String, Object> params, boolean addStatistics, long timeout) {",
                "         Scanner scanner = new Scanner(reader);",
                "@@ -127,4 +127,4 @@ public class Cypher {",
                "                 if (isPeriodicOperation(stmt))",
                "-                    Util.inThread(() -> executeStatement(queue, stmt, params, addStatistics));",
                "-                else Util.inTx(db, () -> executeStatement(queue, stmt, params, addStatistics));",
                "+                    Util.inThread(() -> executeStatement(queue, stmt, params, addStatistics,timeout));",
                "+                else Util.inTx(db, () -> executeStatement(queue, stmt, params, addStatistics,timeout));",
                "             }",
                "@@ -133,3 +133,3 @@ public class Cypher {",
                "-    private void runSchemaStatementsInTx(Reader reader, BlockingQueue<RowResult> queue, Map<String, Object> params, boolean addStatistics) {",
                "+    private void runSchemaStatementsInTx(Reader reader, BlockingQueue<RowResult> queue, Map<String, Object> params, boolean addStatistics, long timeout) {",
                "         Scanner scanner = new Scanner(reader);",
                "@@ -140,3 +140,3 @@ public class Cypher {",
                "             if (isSchemaOperation(stmt)) {",
                "-                Util.inTx(db, () -> executeStatement(queue, stmt, params, addStatistics));",
                "+                Util.inTx(db, () -> executeStatement(queue, stmt, params, addStatistics, timeout));",
                "             }",
                "@@ -146,3 +146,3 @@ public class Cypher {",
                "     @Procedure(mode = WRITE)",
                "-    @Description(\"apoc.cypher.runMany('cypher;\\\\nstatements;',{params},[{statistics:true,timeout:10}]) - runs each semicolon separated kernelTransaction and returns summary - currently no schema operations\")",
                "+    @Description(\"apoc.cypher.runMany('cypher;\\\\nstatements;',{params},[{statistics:true,timeout:10}]) - runs each semicolon separated statement and returns summary - currently no schema operations\")",
                "     public Stream<RowResult> runMany(@Name(\"cypher\") String cypher, @Name(\"params\") Map<String,Object> params, @Name(value = \"config\",defaultValue = \"{}\") Map<String,Object> config) {",
                "@@ -156,3 +156,3 @@ public class Cypher {",
                "-    private Object executeStatement(BlockingQueue<RowResult> queue, String stmt, Map<String, Object> params, boolean addStatistics) throws InterruptedException {",
                "+    private Object executeStatement(BlockingQueue<RowResult> queue, String stmt, Map<String, Object> params, boolean addStatistics, long timeout) throws InterruptedException {",
                "         try (Result result = db.execute(stmt,params)) {",
                "@@ -165,3 +165,3 @@ public class Cypher {",
                "             if (addStatistics) {",
                "-                queue.offer(new RowResult(-1, toMap(result.getQueryStatistics(), System.currentTimeMillis() - time, row)), 100, TimeUnit.MILLISECONDS);",
                "+                queue.offer(new RowResult(-1, toMap(result.getQueryStatistics(), System.currentTimeMillis() - time, row)), timeout,TimeUnit.SECONDS);",
                "             }",
                "@@ -259,3 +259,3 @@ public class Cypher {",
                "                 }));",
                "-        return db.execute(kernelTransaction,params).stream().map(MapResult::new);",
                "+        return db.execute(statement,params).stream().map(MapResult::new);",
                "         */",
                "@@ -275,3 +275,3 @@ public class Cypher {",
                "     @Description(\"apoc.cypher.mapParallel2(fragment, params, list-to-parallelize) yield value - executes fragment in parallel batches with the list segments being assigned to _\")",
                "-    public Stream<MapResult> mapParallel2(@Name(\"fragment\") String fragment, @Name(\"params\") Map<String, Object> params, @Name(\"list\") List<Object> data, @Name(\"partitions\") long partitions) {",
                "+    public Stream<MapResult> mapParallel2(@Name(\"fragment\") String fragment, @Name(\"params\") Map<String, Object> params, @Name(\"list\") List<Object> data, @Name(\"partitions\") long partitions,@Name(value = \"timeout\",defaultValue = \"10\") long timeout) {",
                "         final String statement = withParamsAndIterator(fragment, params.keySet(), \"_\");",
                "@@ -284,3 +284,3 @@ public class Cypher {",
                "                     try {",
                "-                        return executeStatement(queue, statement, parallelParams(params, \"_\", partition),false);",
                "+                        return executeStatement(queue, statement, parallelParams(params, \"_\", partition),false,timeout);",
                "                     } catch (Exception e) {throw new RuntimeException(e);}}",
                "@@ -290,3 +290,3 @@ public class Cypher {",
                "         });",
                "-        return StreamSupport.stream(new QueueBasedSpliterator<>(queue, RowResult.TOMBSTONE, terminationGuard),true).map((rowResult) -> new MapResult(rowResult.result));",
                "+        return StreamSupport.stream(new QueueBasedSpliterator<>(queue, RowResult.TOMBSTONE, terminationGuard, timeout),true).map((rowResult) -> new MapResult(rowResult.result));",
                "     }",
                "diff --git a/src/main/java/apoc/export/csv/ExportCSV.java b/src/main/java/apoc/export/csv/ExportCSV.java",
                "index d516396b0..c588e779f 100644",
                "--- a/src/main/java/apoc/export/csv/ExportCSV.java",
                "+++ b/src/main/java/apoc/export/csv/ExportCSV.java",
                "@@ -4,3 +4,2 @@ import apoc.Description;",
                " import apoc.Pools;",
                "-import apoc.export.cypher.ExportCypher;",
                " import apoc.export.util.ExportConfig;",
                "@@ -81,3 +80,3 @@ public class ExportCSV {",
                "     @Procedure",
                "-    @Description(\"apoc.export.csv.query(query,file,{config,...,params:{params}}) - exports results from the cypher kernelTransaction as csv to the provided file\")",
                "+    @Description(\"apoc.export.csv.query(query,file,{config,...,params:{params}}) - exports results from the cypher statement as csv to the provided file\")",
                "     public Stream<ProgressInfo> query(@Name(\"query\") String query, @Name(\"file\") String fileName, @Name(\"config\") Map<String, Object> config) throws Exception {",
                "@@ -86,3 +85,3 @@ public class ExportCSV {",
                "-        String source = String.format(\"kernelTransaction: cols(%d)\", result.columns().size());",
                "+        String source = String.format(\"statement: cols(%d)\", result.columns().size());",
                "         return exportCsv(fileName, source,result,config);",
                "@@ -99,14 +98,10 @@ public class ExportCSV {",
                "         if (c.streamStatements()) {",
                "-            Future<Boolean> future = null;",
                "-            try {",
                "-                StringWriter writer = new StringWriter(10_000);",
                "-                final ArrayBlockingQueue<ProgressInfo> queue = new ArrayBlockingQueue<>(1000);",
                "-                ProgressReporter reporterWithConsumer = reporter.withConsumer(",
                "-                        (pi) -> queue.offer(pi == ProgressInfo.EMPTY ? ProgressInfo.EMPTY : new ProgressInfo(pi).drain(writer)));",
                "-                future = Util.inTxFuture(Pools.DEFAULT, db, () -> { dump(data, c, reporterWithConsumer, writer, exporter); return true; });",
                "-                QueueBasedSpliterator<ProgressInfo> spliterator = new QueueBasedSpliterator<>(queue, ProgressInfo.EMPTY, terminationGuard);",
                "-                return StreamSupport.stream(spliterator, false);",
                "-            } finally {",
                "-                Util.waitForFutures(Collections.singletonList(future));",
                "-            }",
                "+            long timeout = c.getTimeoutSeconds();",
                "+            StringWriter writer = new StringWriter(10_000);",
                "+            final ArrayBlockingQueue<ProgressInfo> queue = new ArrayBlockingQueue<>(1000);",
                "+            ProgressReporter reporterWithConsumer = reporter.withConsumer(",
                "+                    (pi) -> Util.put(queue, pi == ProgressInfo.EMPTY ? ProgressInfo.EMPTY : new ProgressInfo(pi).drain(writer),timeout));",
                "+            Util.inTxFuture(Pools.DEFAULT, db, () -> { dump(data, c, reporterWithConsumer, writer, exporter); return true; });",
                "+            QueueBasedSpliterator<ProgressInfo> spliterator = new QueueBasedSpliterator<>(queue, ProgressInfo.EMPTY, terminationGuard, timeout);",
                "+            return StreamSupport.stream(spliterator, false);",
                "         } else {",
                "diff --git a/src/main/java/apoc/export/cypher/ExportCypher.java b/src/main/java/apoc/export/cypher/ExportCypher.java",
                "index 4d7abe3b8..b47d96725 100644",
                "--- a/src/main/java/apoc/export/cypher/ExportCypher.java",
                "+++ b/src/main/java/apoc/export/cypher/ExportCypher.java",
                "@@ -22,3 +22,5 @@ import java.util.*;",
                " import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.BlockingQueue;",
                " import java.util.concurrent.Future;",
                "+import java.util.concurrent.TimeUnit;",
                " import java.util.stream.Stream;",
                "@@ -74,3 +76,3 @@ public class ExportCypher {",
                "     @Procedure",
                "-    @Description(\"apoc.export.cypher.query(query,file,config) - exports nodes and relationships from the cypher kernelTransaction incl. indexes as cypher statements to the provided file\")",
                "+    @Description(\"apoc.export.cypher.query(query,file,config) - exports nodes and relationships from the cypher statement incl. indexes as cypher statements to the provided file\")",
                "     public Stream<DataProgressInfo> query(@Name(\"query\") String query, @Name(value = \"file\",defaultValue = \"\") String fileName, @Name(value = \"config\",defaultValue = \"{}\") Map<String, Object> config) throws IOException {",
                "@@ -80,3 +82,3 @@ public class ExportCypher {",
                "         SubGraph graph = CypherResultSubGraph.from(result, db, c.getRelsInBetween());",
                "-        String source = String.format(\"kernelTransaction: nodes(%d), rels(%d)\",",
                "+        String source = String.format(\"statement: nodes(%d), rels(%d)\",",
                "                 Iterables.count(graph.getNodes()), Iterables.count(graph.getRelationships()));",
                "@@ -103,13 +105,9 @@ public class ExportCypher {",
                "         if (c.streamStatements()) {",
                "-            Future<Boolean> future = null;",
                "-            try {",
                "-                final ArrayBlockingQueue<DataProgressInfo> queue = new ArrayBlockingQueue<>(1000);",
                "-                ProgressReporter reporterWithConsumer = reporter.withConsumer(",
                "-                        (pi) -> queue.offer(pi == ProgressInfo.EMPTY ? DataProgressInfo.EMPTY : new DataProgressInfo(pi).enrich(cypherFileManager)));",
                "-                future = Util.inTxFuture(Pools.DEFAULT, db, () -> { doExport(graph, c, onlySchema, reporterWithConsumer, cypherFileManager); return true; });",
                "-                QueueBasedSpliterator<DataProgressInfo> spliterator = new QueueBasedSpliterator<>(queue, DataProgressInfo.EMPTY, terminationGuard);",
                "-                return StreamSupport.stream(spliterator, false);",
                "-            } finally {",
                "-                Util.waitForFutures(Collections.singletonList(future));",
                "-            }",
                "+            long timeout = c.getTimeoutSeconds();",
                "+            final BlockingQueue<DataProgressInfo> queue = new ArrayBlockingQueue<>(1000);",
                "+            ProgressReporter reporterWithConsumer = reporter.withConsumer(",
                "+                    (pi) -> Util.put(queue,pi == ProgressInfo.EMPTY ? DataProgressInfo.EMPTY : new DataProgressInfo(pi).enrich(cypherFileManager),timeout));",
                "+            Util.inTxFuture(Pools.DEFAULT, db, () -> { doExport(graph, c, onlySchema, reporterWithConsumer, cypherFileManager); return true; });",
                "+            QueueBasedSpliterator<DataProgressInfo> spliterator = new QueueBasedSpliterator<>(queue, DataProgressInfo.EMPTY, terminationGuard, timeout);",
                "+            return StreamSupport.stream(spliterator, false);",
                "         } else {",
                "diff --git a/src/main/java/apoc/export/util/ExportConfig.java b/src/main/java/apoc/export/util/ExportConfig.java",
                "index 2cf6572f4..7d5503aa0 100644",
                "--- a/src/main/java/apoc/export/util/ExportConfig.java",
                "+++ b/src/main/java/apoc/export/util/ExportConfig.java",
                "@@ -3,2 +3,3 @@ package apoc.export.util;",
                " import apoc.export.cypher.formatter.CypherFormat;",
                "+import apoc.util.Util;",
                "@@ -118,2 +119,6 @@ public class ExportConfig {",
                "     }",
                "+",
                "+    public long getTimeoutSeconds() {",
                "+        return Util.toLong(config.getOrDefault(\"timeoutSeconds\",100));",
                "+    }",
                " }",
                "diff --git a/src/main/java/apoc/util/QueueBasedSpliterator.java b/src/main/java/apoc/util/QueueBasedSpliterator.java",
                "index 0c2dea902..6cddc40ff 100644",
                "--- a/src/main/java/apoc/util/QueueBasedSpliterator.java",
                "+++ b/src/main/java/apoc/util/QueueBasedSpliterator.java",
                "@@ -19,3 +19,3 @@ public class QueueBasedSpliterator<T> implements Spliterator<T> {",
                "     private TerminationGuard terminationGuard;",
                "-    private final int timeout;",
                "+    private final long timeout;",
                "@@ -25,3 +25,3 @@ public class QueueBasedSpliterator<T> implements Spliterator<T> {",
                "-    public QueueBasedSpliterator(BlockingQueue<T> queue, T tombstone, TerminationGuard terminationGuard, int timeout) {",
                "+    public QueueBasedSpliterator(BlockingQueue<T> queue, T tombstone, TerminationGuard terminationGuard, long timeout) {",
                "         this.queue = queue;",
                "diff --git a/src/main/java/apoc/util/Util.java b/src/main/java/apoc/util/Util.java",
                "index 7fcf1ddf3..b2dd77a06 100644",
                "--- a/src/main/java/apoc/util/Util.java",
                "+++ b/src/main/java/apoc/util/Util.java",
                "@@ -22,6 +22,3 @@ import java.net.*;",
                " import java.util.*;",
                "-import java.util.concurrent.Callable;",
                "-import java.util.concurrent.ExecutionException;",
                "-import java.util.concurrent.ExecutorService;",
                "-import java.util.concurrent.Future;",
                "+import java.util.concurrent.*;",
                " import java.util.concurrent.atomic.AtomicInteger;",
                "@@ -688,2 +685,11 @@ public class Util {",
                "     }",
                "+",
                "+    public static <T> void put(BlockingQueue<T> queue, T item, long timeoutSeconds) {",
                "+        try {",
                "+            boolean success = queue.offer(item, timeoutSeconds, TimeUnit.SECONDS);",
                "+            if (!success) throw new RuntimeException(\"Error queuing item before timeout of \"+timeoutSeconds+\" seconds\");",
                "+        } catch (InterruptedException e) {",
                "+            throw new RuntimeException(\"Queue offer interrupted before \"+timeoutSeconds+\" seconds\",e);",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/apoc/cypher/Cypher.java",
                "src/main/java/apoc/export/csv/ExportCSV.java",
                "src/main/java/apoc/export/cypher/ExportCypher.java",
                "src/main/java/apoc/export/util/ExportConfig.java",
                "src/main/java/apoc/util/QueueBasedSpliterator.java",
                "src/main/java/apoc/util/Util.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "958": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae7bab6747b172e5c40a2cad8435df2e60bf8478"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: result, port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 958",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0b24ca3e3eb7dd882d9b594d58fe0f633bebd6c8",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558618646,
            "hunks": 8,
            "message": "fixes #1188: headers incorrect order after apoc csv export in enterprise edition 3.5.4, 3.5.5 (#1192)",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 1dcfd4372..061a618c7 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -160,2 +160,5 @@ dependencies {",
                "+    testCompile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.9.7'",
                "+",
                "+",
                "     configurations.all {",
                "diff --git a/docs/asciidoc/_export_import.adoc b/docs/asciidoc/_export_import.adoc",
                "index 5a3b79e51..12ec0cc1d 100644",
                "--- a/docs/asciidoc/_export_import.adoc",
                "+++ b/docs/asciidoc/_export_import.adoc",
                "@@ -93,2 +93,8 @@ If the file name is passed as `null` and the config `stream:true` the results ar",
                "+For `apoc.export.csv.all/data/graph` nodes and relationships properties are ordered alphabetically, following this general structure:",
                "+",
                "+`_id,_labels,<list_nodes_properties_naturally_sorted>,_start,_end,_type,<list_rel_properties_naturally_sorted>`, so for instance:",
                "+",
                "+`_id,_labels,age,city,kids,male,name,street,_start,_end,_type,bar,foo`",
                "+",
                " The labels exported are ordered alphabetically.",
                "diff --git a/src/main/java/apoc/export/csv/CsvFormat.java b/src/main/java/apoc/export/csv/CsvFormat.java",
                "index 7388daf82..0daf3be00 100644",
                "--- a/src/main/java/apoc/export/csv/CsvFormat.java",
                "+++ b/src/main/java/apoc/export/csv/CsvFormat.java",
                "@@ -15,2 +15,3 @@ import java.util.*;",
                " import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                " import java.util.stream.StreamSupport;",
                "@@ -96,3 +97,4 @@ public class CsvFormat implements Format {",
                "                 for (int col = 0; col < header.length; col++) {",
                "-                    Object value = row.get(header[col]);",
                "+                    String key = header[col];",
                "+                    Object value = row.get(key);",
                "                     data[col] = FormatUtils.toString(value);",
                "@@ -112,3 +114,2 @@ public class CsvFormat implements Format {",
                "         List<String> columns = result.columns();",
                "-        columns.sort(Comparator.naturalOrder());",
                "         int cols = columns.size();",
                "@@ -125,3 +126,4 @@ public class CsvFormat implements Format {",
                "         List<String> relHeader = generateHeader(relPropTypes, config.useTypes(), \"_start:id\", \"_end:id\", \"_type:label\");",
                "-        List<String> header = new ArrayList<>(nodeHeader); header.addAll(relHeader);",
                "+        List<String> header = new ArrayList<>(nodeHeader);",
                "+        header.addAll(relHeader);",
                "         out.writeNext(header.toArray(new String[header.size()]), applyQuotesToAll);",
                "@@ -244,9 +246,15 @@ public class CsvFormat implements Format {",
                "         List<String> result = new ArrayList<>();",
                "-        Collections.addAll(result,starters);",
                "-        for (Map.Entry<String, Class> entry : propTypes.entrySet()) {",
                "-            String type = MetaInformation.typeFor(entry.getValue(), null);",
                "-            if (type==null || type.equals(\"string\") || !useTypes) result.add(entry.getKey());",
                "-            else result.add(entry.getKey()+\":\"+ type);",
                "+        if (useTypes) {",
                "+            Collections.addAll(result, starters);",
                "+        } else {",
                "+            result.addAll(Stream.of(starters).map(s -> s.split(\":\")[0]).collect(Collectors.toList()));",
                "         }",
                "-        if (!useTypes) return result.stream().map( s -> s.split(\":\")[0]).collect(Collectors.toList());",
                "+        result.addAll(propTypes.entrySet().stream()",
                "+                .map(entry -> {",
                "+                    String type = MetaInformation.typeFor(entry.getValue(), null);",
                "+                    return (type == null || type.equals(\"string\") || !useTypes)",
                "+                            ? entry.getKey() : entry.getKey() + \":\" + type;",
                "+                })",
                "+                .sorted()",
                "+                .collect(Collectors.toList()));",
                "         return result;"
            ],
            "changed_files": [
                "build.gradle",
                "docs/asciidoc/_export_import.adoc",
                "src/main/java/apoc/export/csv/CsvFormat.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1188": "headers incorrect order after apoc csv export in enterprise edition 3.5.4, 3.5.5 neo4j/neo4j#12210 fixes #1188: headers incorrect order after apoc csv export in enterprise edition 3.5.4, 3.5.5 #1192 Incorrect headers order after apoc csv export in community edition 3.5.6 #1246",
                "1192": "Incorrect headers order after apoc csv export in community edition 3.5.6 #1246"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "907e8fa72cc94f600792d8745b082379febc452f"
                ],
                [
                    "no-tag",
                    "41e8465341379b836ae67d29e0821882df8ecc72"
                ]
            ],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1188, 1192",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c5887576a4f41e11684037d1def26857d98a3c2c",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542901159,
            "hunks": 45,
            "message": "fixes #930 - export function label ordering (#995)",
            "diff": [
                "diff --git a/docs/data/exportJSON/query_node_labels.json b/docs/data/exportJSON/query_node_labels.json",
                "new file mode 100644",
                "index 000000000..5771bd742",
                "--- /dev/null",
                "+++ b/docs/data/exportJSON/query_node_labels.json",
                "@@ -0,0 +1 @@",
                "+{\"u\":{\"type\":\"node\",\"id\":\"20\",\"labels\":[\"User\",\"User0\",\"User1\",\"User12\"],\"properties\":{\"name\":\"Alan\"}}}",
                "\\ No newline at end of file",
                "diff --git a/docs/exportCypher.adoc b/docs/exportCypher.adoc",
                "index f8b9a424a..3bca02d3e 100644",
                "--- a/docs/exportCypher.adoc",
                "+++ b/docs/exportCypher.adoc",
                "@@ -52,2 +52,7 @@ call apoc.export.cypher.query(",
                "+==== Note:",
                "+",
                "+The labels exported are ordered alphabetically.",
                "+The output of `labels()` function is not sorted, use it in combination with `apoc.coll.sort()`.",
                "+",
                " === Roundtrip Example",
                "diff --git a/docs/exportJson.adoc b/docs/exportJson.adoc",
                "index 058b20637..3962fdbb4 100755",
                "--- a/docs/exportJson.adoc",
                "+++ b/docs/exportJson.adoc",
                "@@ -25,2 +25,6 @@ apoc.export.file.enabled=true",
                "+==== Note:",
                "+",
                "+The labels exported are ordered alphabetically.",
                "+The output of `labels()` function is not sorted, use it in combination with `apoc.coll.sort()`.",
                "diff --git a/docs/overview.adoc b/docs/overview.adoc",
                "index a97020f1a..24aaacb2a 100644",
                "--- a/docs/overview.adoc",
                "+++ b/docs/overview.adoc",
                "@@ -217,3 +217,2 @@ RETURN apoc.meta.isType(n.age,\"INTEGER\") as ageType",
                "-",
                " === Export to CSV",
                "@@ -233,2 +232,7 @@ If the file name is passed as `null` and the config `stream:true` the results ar",
                "+==== Note:",
                "+",
                "+The labels exported are ordered alphabetically.",
                "+The output of `labels()` function is not sorted, use it in combination with `apoc.coll.sort()`.",
                "+",
                " [source,cypher]",
                "@@ -265,2 +269,7 @@ GraphML is used by other tools, like Gephi and CytoScape to read graph data.",
                "+==== Note:",
                "+",
                "+The labels exported are ordered alphabetically.",
                "+The output of `labels()` function is not sorted, use it in combination with `apoc.coll.sort()`.",
                "+",
                " .configuration options",
                "diff --git a/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java b/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java",
                "index 748ddb090..fd4a73c6b 100644",
                "--- a/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java",
                "+++ b/src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java",
                "@@ -3,8 +3,5 @@ package apoc.export.cypher.formatter;",
                " import apoc.export.util.FormatUtils;",
                "-import org.neo4j.graphdb.Label;",
                " import org.neo4j.graphdb.Node;",
                " import org.neo4j.graphdb.Relationship;",
                "-import org.neo4j.graphdb.spatial.Point;",
                " import org.neo4j.helpers.collection.Iterables;",
                "-import org.neo4j.values.storable.DateValue;",
                " import org.neo4j.values.storable.DurationValue;",
                "@@ -17,2 +14,4 @@ import java.util.*;",
                "+import static apoc.export.util.FormatUtils.getLabelsSorted;",
                "+",
                " /**",
                "@@ -57,4 +56,6 @@ public class CypherFormatterUtils {",
                "         boolean uniqueLabelFound = false;",
                "-        for (Label label : node.getLabels()) {",
                "-            String prop = uniqueConstraints.get(label.name());",
                "+        List<String> list = getLabelsSorted(node);",
                "+",
                "+        for (String labelName : list) {",
                "+            String prop = uniqueConstraints.get(labelName);",
                "             if (prop != null && node.hasProperty(prop)) {",
                "@@ -75,4 +76,5 @@ public class CypherFormatterUtils {",
                "         boolean uniqueLabelFound = false;",
                "-        for (Label label : node.getLabels()) {",
                "-            String labelName = label.name();",
                "+        List<String> list = getLabelsSorted(node);",
                "+",
                "+        for (String labelName : list) {",
                "             String prop = uniqueConstraints.get(labelName);",
                "@@ -93,4 +95,6 @@ public class CypherFormatterUtils {",
                "         StringBuilder result = new StringBuilder(100);",
                "-        for (Label label : node.getLabels()) {",
                "-            String prop = uniqueConstraints.get(label.name());",
                "+        List<String> list = getLabelsSorted(node);",
                "+",
                "+        for (String labelName : list) {",
                "+            String prop = uniqueConstraints.get(labelName);",
                "             if (!node.hasProperty(prop)) {",
                "@@ -98,3 +102,3 @@ public class CypherFormatterUtils {",
                "                 result.append(id);",
                "-                result.append(label(label.name()));",
                "+                result.append(label(labelName));",
                "             }",
                "@@ -107,4 +111,5 @@ public class CypherFormatterUtils {",
                "         boolean uniqueLabelFound = false;",
                "-        for (Label label : node.getLabels()) {",
                "-            String labelName = label.name();",
                "+        List<String> list = getLabelsSorted(node);",
                "+",
                "+        for (String labelName : list) {",
                "             String prop = uniqueConstraints.get(labelName);",
                "diff --git a/src/main/java/apoc/export/graphml/ExportGraphML.java b/src/main/java/apoc/export/graphml/ExportGraphML.java",
                "index e4d67e656..8faaf4f33 100644",
                "--- a/src/main/java/apoc/export/graphml/ExportGraphML.java",
                "+++ b/src/main/java/apoc/export/graphml/ExportGraphML.java",
                "@@ -81,3 +81,3 @@ public class ExportGraphML {",
                "     @Procedure",
                "-    @Description(\"apoc.export.graphml.query(query,file,config) - exports nodes and relationships from the cypher kernelTransaction as graphml to the provided file\")",
                "+    @Description(\"apoc.export.graphml.query(query,file,config) - exports nodes and relationships from the cypher statement as graphml to the provided file\")",
                "     public Stream<ProgressInfo> query(@Name(\"query\") String query, @Name(\"file\") String fileName, @Name(\"config\") Map<String, Object> config) throws Exception {",
                "@@ -86,3 +86,3 @@ public class ExportGraphML {",
                "         SubGraph graph = CypherResultSubGraph.from(result, db, c.getRelsInBetween());",
                "-        String source = String.format(\"kernelTransaction: nodes(%d), rels(%d)\",",
                "+        String source = String.format(\"statement: nodes(%d), rels(%d)\",",
                "                 Iterables.count(graph.getNodes()), Iterables.count(graph.getRelationships()));",
                "diff --git a/src/main/java/apoc/export/json/ExportJson.java b/src/main/java/apoc/export/json/ExportJson.java",
                "index 23eec34cd..9db28185c 100644",
                "--- a/src/main/java/apoc/export/json/ExportJson.java",
                "+++ b/src/main/java/apoc/export/json/ExportJson.java",
                "@@ -65,3 +65,3 @@ public class ExportJson {",
                "     @Procedure",
                "-    @Description(\"apoc.exportJson.json.query(query,file,{config,...,params:{params}}) - exports results from the cypher kernelTransaction as json to the provided file\")",
                "+    @Description(\"apoc.exportJson.json.query(query,file,{config,...,params:{params}}) - exports results from the cypher statement as json to the provided file\")",
                "     public Stream<ProgressInfo> query(@Name(\"query\") String query, @Name(\"file\") String fileName, @Name(value = \"config\", defaultValue = \"{}\") Map<String, Object> config) throws Exception {",
                "@@ -69,3 +69,3 @@ public class ExportJson {",
                "         Result result = db.execute(query,params);",
                "-        String source = String.format(\"kernelTransaction: cols(%d)\", result.columns().size());",
                "+        String source = String.format(\"statement: cols(%d)\", result.columns().size());",
                "         return exportJson(fileName, source,result,config);",
                "diff --git a/src/main/java/apoc/export/json/JsonFormat.java b/src/main/java/apoc/export/json/JsonFormat.java",
                "index 1119d4ad8..524aa3ee3 100644",
                "--- a/src/main/java/apoc/export/json/JsonFormat.java",
                "+++ b/src/main/java/apoc/export/json/JsonFormat.java",
                "@@ -7,12 +7,8 @@ import apoc.meta.Meta;",
                " import apoc.result.ProgressInfo;",
                "+import apoc.util.JsonUtil;",
                " import com.fasterxml.jackson.core.JsonFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-import com.fasterxml.jackson.core.Version;",
                " import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "-import com.fasterxml.jackson.databind.SerializationFeature;",
                "-import com.fasterxml.jackson.databind.module.SimpleModule;",
                " import org.neo4j.cypher.export.SubGraph;",
                " import org.neo4j.graphdb.*;",
                "-import org.neo4j.graphdb.spatial.Point;",
                "@@ -21,3 +17,2 @@ import java.io.Reader;",
                " import java.io.Writer;",
                "-import java.time.temporal.TemporalAccessor;",
                " import java.util.HashMap;",
                "@@ -30,11 +25,2 @@ public class JsonFormat implements Format {",
                "-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);",
                "-",
                "-    static {",
                "-        SimpleModule module = new SimpleModule(\"Neo4jApocSerializer\", new Version(1, 0, 0, \"\"));",
                "-        module.addSerializer(Point.class, new PointSerializer());",
                "-        module.addSerializer(TemporalAccessor.class, new TemporalSerializer());",
                "-        OBJECT_MAPPER.registerModule(module);",
                "-    }",
                "-",
                "     public JsonFormat(GraphDatabaseService db) {",
                "@@ -90,3 +76,3 @@ public class JsonFormat implements Format {",
                "         JsonGenerator jsonGenerator = jsonF.createGenerator(writer);",
                "-        jsonGenerator.setCodec(OBJECT_MAPPER);",
                "+        jsonGenerator.setCodec(JsonUtil.OBJECT_MAPPER);",
                "         jsonGenerator.setPrettyPrinter(new MinimalPrettyPrinter(\"\\n\"));",
                "diff --git a/src/main/java/apoc/export/json/JsonFormatSerializer.java b/src/main/java/apoc/export/json/JsonFormatSerializer.java",
                "index bc71e15fe..0fb05b565 100644",
                "--- a/src/main/java/apoc/export/json/JsonFormatSerializer.java",
                "+++ b/src/main/java/apoc/export/json/JsonFormatSerializer.java",
                "@@ -9,4 +9,7 @@ import org.neo4j.graphdb.Relationship;",
                " import java.io.IOException;",
                "+import java.util.List;",
                " import java.util.Map;",
                "+import static apoc.export.util.FormatUtils.getLabelsSorted;",
                "+",
                " public enum JsonFormatSerializer {",
                "@@ -69,7 +72,9 @@ public enum JsonFormatSerializer {",
                "             jsonGenerator.writeStringField(\"id\", String.valueOf(node.getId()));",
                "-            Iterable<Label> labels = node.getLabels();",
                "-            if (labels.iterator().hasNext()) {",
                "+",
                "+            if (node.getLabels().iterator().hasNext()) {",
                "                 jsonGenerator.writeArrayFieldStart(\"labels\");",
                "-                for (Label label : labels) {",
                "-                    jsonGenerator.writeString(label.toString());",
                "+",
                "+                List<String> labels = getLabelsSorted(node);",
                "+                for (String label : labels) {",
                "+                    jsonGenerator.writeString(label);",
                "                 }",
                "@@ -98,2 +103,2 @@ public enum JsonFormatSerializer {",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/src/main/java/apoc/export/util/FormatUtils.java b/src/main/java/apoc/export/util/FormatUtils.java",
                "index 5e877acff..e06f27688 100644",
                "--- a/src/main/java/apoc/export/util/FormatUtils.java",
                "+++ b/src/main/java/apoc/export/util/FormatUtils.java",
                "@@ -7,4 +7,6 @@ import java.text.DecimalFormat;",
                " import java.text.DecimalFormatSymbols;",
                "+import java.util.List;",
                " import java.util.Map;",
                " import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                " import java.util.stream.StreamSupport;",
                "@@ -41,3 +43,3 @@ public class FormatUtils {",
                "     public static String joinLabels(Node node, String delimiter) {",
                "-        return StreamSupport.stream(node.getLabels().spliterator(),false).map(Label::name).sorted().collect(Collectors.joining(delimiter));",
                "+        return getLabelsAsStream(node).collect(Collectors.joining(delimiter));",
                "     }",
                "@@ -75,2 +77,10 @@ public class FormatUtils {",
                "     }",
                "+",
                "+    public static List<String> getLabelsSorted(Node node) {",
                "+        return getLabelsAsStream(node).collect(Collectors.toList());",
                "+    }",
                "+",
                "+    private static Stream<String> getLabelsAsStream(Node node) {",
                "+        return StreamSupport.stream(node.getLabels().spliterator(),false).map(Label::name).sorted();",
                "+    }",
                " }",
                "diff --git a/src/main/java/apoc/export/util/MetaInformation.java b/src/main/java/apoc/export/util/MetaInformation.java",
                "index 24c9f1e6f..9c271d591 100644",
                "--- a/src/main/java/apoc/export/util/MetaInformation.java",
                "+++ b/src/main/java/apoc/export/util/MetaInformation.java",
                "@@ -7,6 +7,3 @@ import org.neo4j.graphdb.Relationship;",
                "-import java.util.HashSet;",
                "-import java.util.LinkedHashMap;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "+import java.util.*;",
                "@@ -63,3 +60,3 @@ public class MetaInformation {",
                "         String delimiter = \":\";",
                "-        return \":\" + FormatUtils.joinLabels(node, delimiter);",
                "+        return delimiter + FormatUtils.joinLabels(node, delimiter);",
                "     }",
                "diff --git a/src/main/java/apoc/export/util/PointSerializer.java b/src/main/java/apoc/export/util/PointSerializer.java",
                "new file mode 100644",
                "index 000000000..803c8e0ad",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/export/util/PointSerializer.java",
                "@@ -0,0 +1,140 @@",
                "+package apoc.export.util;",
                "+",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.databind.JsonSerializer;",
                "+import com.fasterxml.jackson.databind.SerializerProvider;",
                "+import org.neo4j.graphdb.spatial.Point;",
                "+import org.neo4j.values.storable.CoordinateReferenceSystem;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.List;",
                "+",
                "+public class PointSerializer extends JsonSerializer<Point> {",
                "+    @Override",
                "+    public void serialize(Point value, JsonGenerator jsonGenerator, SerializerProvider serializers) throws IOException {",
                "+",
                "+        String crsType = value.getCRS().getType();",
                "+        List<Double> coordinate = value.getCoordinate().getCoordinate();",
                "+",
                "+        if (crsType.startsWith(CoordinateReferenceSystem.Cartesian.toString())) {",
                "+            if (coordinate.size() == 3) {",
                "+                jsonGenerator.writeObject(new PointCartesian(crsType, coordinate.get(0), coordinate.get(1), coordinate.get(2)));",
                "+            } else {",
                "+                jsonGenerator.writeObject(new PointCartesian(crsType, coordinate.get(0), coordinate.get(1)));",
                "+            }",
                "+        } else {",
                "+            if (coordinate.size() == 3) {",
                "+                jsonGenerator.writeObject(new PointWgs(crsType, coordinate.get(0), coordinate.get(1), coordinate.get(2)));",
                "+            } else {",
                "+                jsonGenerator.writeObject(new PointWgs(crsType, coordinate.get(0), coordinate.get(1)));",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    class PointCartesian {",
                "+        private String crs;",
                "+        private Double x;",
                "+        private Double y;",
                "+        private Double z;",
                "+",
                "+        public PointCartesian(String crs, Double x, Double y, Double z) {",
                "+            this.crs = crs;",
                "+            this.x = x;",
                "+            this.y = y;",
                "+            this.z = z;",
                "+        }",
                "+",
                "+        public PointCartesian(String crs, Double x, Double y) {",
                "+            this.crs = crs;",
                "+            this.x = x;",
                "+            this.y = y;",
                "+        }",
                "+",
                "+        public String getCrs() {",
                "+            return crs;",
                "+        }",
                "+",
                "+        public void setCrs(String crs) {",
                "+            this.crs = crs;",
                "+        }",
                "+",
                "+        public Double getX() {",
                "+            return x;",
                "+        }",
                "+",
                "+        public void setX(Double x) {",
                "+            this.x = x;",
                "+        }",
                "+",
                "+        public Double getY() {",
                "+            return y;",
                "+        }",
                "+",
                "+        public void setY(Double y) {",
                "+            this.y = y;",
                "+        }",
                "+",
                "+        public Double getZ() {",
                "+            return z;",
                "+        }",
                "+",
                "+        public void setZ(Double z) {",
                "+            this.z = z;",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    class PointWgs {",
                "+        private String crs;",
                "+        private Double latitude;",
                "+        private Double longitude;",
                "+        private Double height;",
                "+",
                "+        public PointWgs(String crs, Double latitude, Double longitude, Double height) {",
                "+            this.crs = crs;",
                "+            this.latitude = latitude;",
                "+            this.longitude = longitude;",
                "+            this.height = height;",
                "+        }",
                "+",
                "+        public PointWgs(String crs, Double latitude, Double longitude) {",
                "+            this.crs = crs;",
                "+            this.latitude = latitude;",
                "+            this.longitude = longitude;",
                "+        }",
                "+",
                "+        public String getCrs() {",
                "+            return crs;",
                "+        }",
                "+",
                "+        public void setCrs(String crs) {",
                "+            this.crs = crs;",
                "+        }",
                "+",
                "+        public Double getLatitude() {",
                "+            return latitude;",
                "+        }",
                "+",
                "+        public void setLatitude(Double latitude) {",
                "+            this.latitude = latitude;",
                "+        }",
                "+",
                "+        public Double getLongitude() {",
                "+            return longitude;",
                "+        }",
                "+",
                "+        public void setLongitude(Double longitude) {",
                "+            this.longitude = longitude;",
                "+        }",
                "+",
                "+        public Double getHeight() {",
                "+            return height;",
                "+        }",
                "+",
                "+        public void setHeight(Double height) {",
                "+            this.height = height;",
                "+        }",
                "+    }",
                "+",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/export/util/TemporalSerializer.java b/src/main/java/apoc/export/util/TemporalSerializer.java",
                "new file mode 100644",
                "index 000000000..5fdb6c427",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/export/util/TemporalSerializer.java",
                "@@ -0,0 +1,19 @@",
                "+package apoc.export.util;",
                "+",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.databind.JsonSerializer;",
                "+import com.fasterxml.jackson.databind.SerializerProvider;",
                "+",
                "+import java.io.IOException;",
                "+import java.time.temporal.TemporalAccessor;",
                "+",
                "+public class TemporalSerializer extends JsonSerializer<TemporalAccessor> {",
                "+",
                "+    @Override",
                "+    public void serialize(TemporalAccessor value, JsonGenerator jsonGenerator, SerializerProvider serializers) throws IOException {",
                "+        if (value == null) {",
                "+            jsonGenerator.writeNull();",
                "+        }",
                "+        jsonGenerator.writeString(value.toString());",
                "+    }",
                "+}",
                "diff --git a/src/main/java/apoc/util/JsonUtil.java b/src/main/java/apoc/util/JsonUtil.java",
                "index 6a15dc46a..d981e4df0 100755",
                "--- a/src/main/java/apoc/util/JsonUtil.java",
                "+++ b/src/main/java/apoc/util/JsonUtil.java",
                "@@ -2,2 +2,4 @@ package apoc.util;",
                "+import apoc.export.util.PointSerializer;",
                "+import apoc.export.util.TemporalSerializer;",
                " import com.fasterxml.jackson.core.JsonParser;",
                "@@ -6,2 +8,3 @@ import com.fasterxml.jackson.databind.MappingIterator;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.module.SimpleModule;",
                " import com.jayway.jsonpath.Configuration;",
                "@@ -11,2 +14,3 @@ import com.jayway.jsonpath.spi.json.JacksonJsonProvider;",
                " import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;",
                "+import org.neo4j.graphdb.spatial.Point;",
                " import org.neo4j.procedure.Name;",
                "@@ -16,2 +20,3 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.time.temporal.Temporal;",
                " import java.util.Map;",
                "@@ -38,2 +43,6 @@ public class JsonUtil {",
                "         OBJECT_MAPPER.enable(DeserializationFeature.USE_LONG_FOR_INTS);",
                "+        SimpleModule module = new SimpleModule(\"Neo4jApocSerializer\");",
                "+        module.addSerializer(Point.class, new PointSerializer());",
                "+        module.addSerializer(Temporal.class, new TemporalSerializer());",
                "+        OBJECT_MAPPER.registerModule(module);",
                "         JSON_PATH_CONFIG = Configuration.builder()"
            ],
            "changed_files": [
                "docs/data/exportJSON/query_node_labels.json",
                "docs/exportCypher.adoc",
                "docs/exportJson.adoc",
                "docs/overview.adoc",
                "src/main/java/apoc/export/cypher/formatter/CypherFormatterUtils.java",
                "src/main/java/apoc/export/graphml/ExportGraphML.java",
                "src/main/java/apoc/export/json/ExportJson.java",
                "src/main/java/apoc/export/json/JsonFormat.java",
                "src/main/java/apoc/export/json/JsonFormatSerializer.java",
                "src/main/java/apoc/export/util/FormatUtils.java",
                "src/main/java/apoc/export/util/MetaInformation.java",
                "src/main/java/apoc/export/util/PointSerializer.java",
                "src/main/java/apoc/export/util/TemporalSerializer.java",
                "src/main/java/apoc/util/JsonUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "930": "fixes #930 - export function label ordering #995",
                "995": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 930, 995",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fe29f8c9ab4b6b82d23f37b578614732d9941890",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559216387,
            "hunks": 2,
            "message": "fixes ordering in bulk import",
            "diff": [
                "diff --git a/src/main/java/apoc/export/csv/CsvFormat.java b/src/main/java/apoc/export/csv/CsvFormat.java",
                "index 0daf3be00..8717e44c1 100644",
                "--- a/src/main/java/apoc/export/csv/CsvFormat.java",
                "+++ b/src/main/java/apoc/export/csv/CsvFormat.java",
                "@@ -206,3 +206,6 @@ public class CsvFormat implements Format {",
                "         entrySet.getValue().forEach(node -> updateKeyTypes(keyTypes, node));",
                "-        headerNode.addAll(keyTypes.entrySet().stream().map(stringClassEntry -> formatHeader(stringClassEntry)).collect(Collectors.toCollection(LinkedHashSet::new)));",
                "+        headerNode.addAll(keyTypes.entrySet().stream()",
                "+                .sorted(Map.Entry.comparingByKey())",
                "+                .map(stringClassEntry -> formatHeader(stringClassEntry))",
                "+                .collect(Collectors.toCollection(LinkedHashSet::new)));",
                "         headerNode.add(\":LABEL\");",
                "@@ -215,3 +218,5 @@ public class CsvFormat implements Format {",
                "         entrySet.getValue().forEach(relationship -> updateKeyTypes(keyTypes, relationship));",
                "-        headerNode.addAll(keyTypes.entrySet().stream().map(stringClassEntry -> formatHeader(stringClassEntry)).collect(Collectors.toCollection(LinkedHashSet::new)));",
                "+        headerNode.addAll(keyTypes.entrySet().stream()",
                "+                .sorted(Map.Entry.comparingByKey())",
                "+                .map(stringClassEntry -> formatHeader(stringClassEntry)).collect(Collectors.toCollection(LinkedHashSet::new)));",
                "         headerNode.add(\":START_ID\");"
            ],
            "changed_files": [
                "src/main/java/apoc/export/csv/CsvFormat.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d665e4c0772bf05bb82fdcfd68ef23e885fa3a22"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e166d672be60aed1d501eb73c2cd93e72c5fee59",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541687541,
            "hunks": 20,
            "message": "fixes #820 - Support Temporal types in apoc.load.jdbc (#946)",
            "diff": [
                "diff --git a/docs/loadjdbc.adoc b/docs/loadjdbc.adoc",
                "index c2dff6f14..3a3c36dd0 100644",
                "--- a/docs/loadjdbc.adoc",
                "+++ b/docs/loadjdbc.adoc",
                "@@ -430,3 +430,3 @@ There are a number of blog posts / examples that details usage of apoc.load.jdbc",
                "-The jdbcUpdate is use for update relational database, from a SQL kernelTransaction with optional parameters",
                "+The jdbcUpdate is use for update relational database, from a SQL statement with optional parameters",
                "@@ -460 +460,33 @@ CALL apoc.load.jdbcUpdate('jdbc:mysql:....','INSERT INTO RECOMMENDATIONS values(",
                " ----",
                "+",
                "+=== Load JDBC format date",
                "+",
                "+Starting from Neo4j 3.4 there is the support for https://neo4j.com/docs/developer-manual/current/cypher/syntax/temporal/[Temporal Values]",
                "+",
                "+If the returning JdbcType, from the load operation, is TIMESTAMP or TIMESTAMP_WITH_TIMEZONE you could provide the configuration parameter **timezone** with type https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html[java.time.ZoneId]",
                "+",
                "+[source, cypher]",
                "+----",
                "+CALL apoc.load.jdbc('key or url','table or statement', config) YIELD row",
                "+----",
                "+",
                "+=== Config",
                "+",
                "+Config param is optional, the default value is an empty map.",
                "+",
                "+[cols=\"3m,2\"]",
                "+|===",
                "+|timezone| default value: null",
                "+|===",
                "+",
                "+Example:",
                "+",
                "+.with timezone",
                "+[source, cypher]",
                "+----",
                "+CALL apoc.load.jdbc('jdbc:derby:derbyDB','SELECT * FROM PERSON WHERE NAME = ?',['John'], {timezone: \"Asia/Tokyo\"})",
                "+----",
                "+",
                "+----",
                "+2018-10-31T01:32:25.012+09:00[Asia/Tokyo]",
                "+----",
                "diff --git a/src/main/java/apoc/load/Jdbc.java b/src/main/java/apoc/load/Jdbc.java",
                "index 6f54612ea..fcd01221c 100644",
                "--- a/src/main/java/apoc/load/Jdbc.java",
                "+++ b/src/main/java/apoc/load/Jdbc.java",
                "@@ -2,2 +2,3 @@ package apoc.load;",
                "+import apoc.load.util.LoadJdbcConfig;",
                " import apoc.result.RowResult;",
                "@@ -25,3 +26,5 @@ import java.security.PrivilegedExceptionAction;",
                " import java.sql.*;",
                "+import java.time.*;",
                " import java.util.*;",
                "+import java.util.Date;",
                " import java.util.stream.Stream;",
                "@@ -70,6 +73,6 @@ public class Jdbc {",
                "     @Procedure",
                "-    @Description(\"apoc.load.jdbc('key or url','table or kernelTransaction') YIELD row - load from relational database, from a full table or a sql kernelTransaction\")",
                "+    @Description(\"apoc.load.jdbc('key or url','table or statement', config) YIELD row - load from relational database, from a full table or a sql statement\")",
                "     public Stream<RowResult> jdbc(@Name(\"jdbc\") String urlOrKey, @Name(\"tableOrSql\") String tableOrSelect, @Name",
                "-            (value = \"params\", defaultValue = \"[]\") List<Object> params) {",
                "-        return executeQuery(urlOrKey, tableOrSelect, params.toArray(new Object[params.size()]));",
                "+            (value = \"params\", defaultValue = \"[]\") List<Object> params, @Name(value = \"config\",defaultValue = \"{}\") Map<String, Object> config) {",
                "+        return executeQuery(urlOrKey, tableOrSelect, config, params.toArray(new Object[params.size()]));",
                "     }",
                "@@ -78,8 +81,9 @@ public class Jdbc {",
                "     @Deprecated",
                "-    @Description(\"deprecated - please use: apoc.load.jdbc('key or url','kernelTransaction',[params]) YIELD row - load from relational database, from a sql kernelTransaction with parameters\")",
                "-    public Stream<RowResult> jdbcParams(@Name(\"jdbc\") String urlOrKey, @Name(\"sql\") String select, @Name(\"params\") List<Object> params) {",
                "-        return executeQuery(urlOrKey, select,params.toArray(new Object[params.size()]));",
                "+    @Description(\"deprecated - please use: apoc.load.jdbc('key or url','',[params]) YIELD row - load from relational database, from a sql statement with parameters\")",
                "+    public Stream<RowResult> jdbcParams(@Name(\"jdbc\") String urlOrKey, @Name(\"sql\") String select, @Name(\"params\") List<Object> params, @Name(value = \"config\",defaultValue = \"{}\") Map<String, Object> config) {",
                "+        return executeQuery(urlOrKey, select, config, params.toArray(new Object[params.size()]));",
                "     }",
                "-    private Stream<RowResult> executeQuery(String urlOrKey, String tableOrSelect, Object...params) {",
                "+    private Stream<RowResult> executeQuery(String urlOrKey, String tableOrSelect, Map<String, Object> config, Object... params) {",
                "+        LoadJdbcConfig loadJdbcConfig = new LoadJdbcConfig(config);",
                "         String url = urlOrKey.contains(\":\") ? urlOrKey : getJdbcUrl(urlOrKey);",
                "@@ -94,3 +98,3 @@ public class Jdbc {",
                "                     rs.setFetchSize(5000);",
                "-                    Iterator<Map<String, Object>> supplier = new ResultSetIterator(log, rs, true);",
                "+                    Iterator<Map<String, Object>> supplier = new ResultSetIterator(log, rs, true, loadJdbcConfig);",
                "                     Spliterator<Map<String, Object>> spliterator = Spliterators.spliteratorUnknownSize(supplier, Spliterator.ORDERED);",
                "@@ -108,5 +112,5 @@ public class Jdbc {",
                "         } catch (Exception e) {",
                "-            log.error(String.format(\"Cannot execute SQL kernelTransaction `%s`.%nError:%n%s\", query, e.getMessage()),e);",
                "-            String errorMessage = \"Cannot execute SQL kernelTransaction `%s`.%nError:%n%s\";",
                "-            if(e.getMessage().contains(\"No suitable driver\")) errorMessage=\"Cannot execute SQL kernelTransaction `%s`.%nError:%n%s%n%s\";",
                "+            log.error(String.format(\"Cannot execute SQL statement `%s`.%nError:%n%s\", query, e.getMessage()),e);",
                "+            String errorMessage = \"Cannot execute SQL statement `%s`.%nError:%n%s\";",
                "+            if(e.getMessage().contains(\"No suitable driver\")) errorMessage=\"Cannot execute SQL statement `%s`.%nError:%n%s%n%s\";",
                "             throw new RuntimeException(String.format(errorMessage, query, e.getMessage(), \"Please download and copy the JDBC driver into $NEO4J_HOME/plugins,more details at https://neo4j-contrib.github.io/neo4j-apoc-procedures/#_load_jdbc_resources\"), e);",
                "@@ -116,3 +120,3 @@ public class Jdbc {",
                "     @Procedure",
                "-    @Description(\"apoc.load.jdbcUpdate('key or url','kernelTransaction',[params]) YIELD row - update relational database, from a SQL kernelTransaction with optional parameters\")",
                "+    @Description(\"apoc.load.jdbcUpdate('key or url','statement',[params]) YIELD row - update relational database, from a SQL statement with optional parameters\")",
                "     public Stream<RowResult> jdbcUpdate(@Name(\"jdbc\") String urlOrKey, @Name(\"query\") String query, @Name(value = \"params\", defaultValue = \"[]\") List<Object> params) {",
                "@@ -127,3 +131,3 @@ public class Jdbc {",
                "             try {",
                "-            PreparedStatement stmt = connection.prepareStatement(query);",
                "+                PreparedStatement stmt = connection.prepareStatement(query);",
                "                 try {",
                "@@ -144,5 +148,5 @@ public class Jdbc {",
                "         } catch (Exception e) {",
                "-            log.error(String.format(\"Cannot execute SQL kernelTransaction `%s`.%nError:%n%s\", query, e.getMessage()),e);",
                "-            String errorMessage = \"Cannot execute SQL kernelTransaction `%s`.%nError:%n%s\";",
                "-            if(e.getMessage().contains(\"No suitable driver\")) errorMessage=\"Cannot execute SQL kernelTransaction `%s`.%nError:%n%s%n%s\";",
                "+            log.error(String.format(\"Cannot execute SQL statement `%s`.%nError:%n%s\", query, e.getMessage()),e);",
                "+            String errorMessage = \"Cannot execute SQL statement `%s`.%nError:%n%s\";",
                "+            if(e.getMessage().contains(\"No suitable driver\")) errorMessage=\"Cannot execute SQL statement `%s`.%nError:%n%s%n%s\";",
                "             throw new RuntimeException(String.format(errorMessage, query, e.getMessage(), \"Please download and copy the JDBC driver into $NEO4J_HOME/plugins,more details at https://neo4j-contrib.github.io/neo4j-apoc-procedures/#_load_jdbc_resources\"), e);",
                "@@ -176,4 +180,7 @@ public class Jdbc {",
                "         private Map<String, Object> map;",
                "+        private LoadJdbcConfig config;",
                "+",
                "-        public ResultSetIterator(Log log, ResultSet rs, boolean closeConnection) throws SQLException {",
                "+        public ResultSetIterator(Log log, ResultSet rs, boolean closeConnection, LoadJdbcConfig config) throws SQLException {",
                "+            this.config = config;",
                "             this.log = log;",
                "@@ -212,3 +219,3 @@ public class Jdbc {",
                "                 for (int col = 1; col < columns.length; col++) {",
                "-                    row.put(columns[col], convert(rs.getObject(col)));",
                "+                    row.put(columns[col], convert(rs.getObject(col), rs.getMetaData().getColumnType(col)));",
                "                 }",
                "@@ -222,3 +229,3 @@ public class Jdbc {",
                "-        private Object convert(Object value) {",
                "+        private Object convert(Object value, int sqlType) {",
                "             if (value instanceof UUID || value instanceof BigInteger || value instanceof BigDecimal) {",
                "@@ -226,4 +233,28 @@ public class Jdbc {",
                "             }",
                "-            if (value instanceof java.util.Date) {",
                "-                return ((java.util.Date) value).getTime();",
                "+            if (Types.TIME == sqlType) {",
                "+                return ((java.sql.Time)value).toLocalTime();",
                "+            }",
                "+            if (Types.TIME_WITH_TIMEZONE == sqlType) {",
                "+                return OffsetTime.parse(value.toString());",
                "+            }",
                "+            if (Types.TIMESTAMP == sqlType) {",
                "+                if (config.getZoneId() != null) {",
                "+                    return ((java.sql.Timestamp)value).toInstant()",
                "+                            .atZone(config.getZoneId())",
                "+                            .toOffsetDateTime();",
                "+                } else {",
                "+                    return ((java.sql.Timestamp)value).toLocalDateTime();",
                "+                }",
                "+            }",
                "+            if (Types.TIMESTAMP_WITH_TIMEZONE == sqlType) {",
                "+                if (config.getZoneId() != null) {",
                "+                    return ((java.sql.Timestamp)value).toInstant()",
                "+                            .atZone(config.getZoneId())",
                "+                            .toOffsetDateTime();",
                "+                } else {",
                "+                    return OffsetDateTime.parse(value.toString());",
                "+                }",
                "+            }",
                "+            if (Types.DATE == sqlType) {",
                "+                return ((java.sql.Date)value).toLocalDate();",
                "             }",
                "@@ -263,2 +294,2 @@ public class Jdbc {",
                "     }",
                "-}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/load/util/LoadJdbcConfig.java b/src/main/java/apoc/load/util/LoadJdbcConfig.java",
                "new file mode 100644",
                "index 000000000..4a9ff41f6",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/load/util/LoadJdbcConfig.java",
                "@@ -0,0 +1,30 @@",
                "+package apoc.load.util;",
                "+",
                "+import java.time.DateTimeException;",
                "+import java.time.ZoneId;",
                "+import java.util.Collections;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * @author ab-Larus",
                "+ * @since 03-10-18",
                "+ */",
                "+public class LoadJdbcConfig {",
                "+",
                "+    private ZoneId zoneId = null;",
                "+",
                "+    public LoadJdbcConfig(Map<String,Object> config) {",
                "+        config = config != null ? config : Collections.emptyMap();",
                "+        try {",
                "+            this.zoneId = config.containsKey(\"timezone\") ?",
                "+                    ZoneId.of(config.get(\"timezone\").toString()) : null;",
                "+        } catch (DateTimeException e) {",
                "+            throw new IllegalArgumentException(String.format(\"The timezone field contains an error: %s\", e.getMessage()));",
                "+        }",
                "+    }",
                "+",
                "+    public ZoneId getZoneId(){",
                "+        return this.zoneId;",
                "+    }",
                "+",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "docs/loadjdbc.adoc",
                "src/main/java/apoc/load/Jdbc.java",
                "src/main/java/apoc/load/util/LoadJdbcConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "820": "",
                "946": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c19f7192097bd383fe0dd39e8fe0f09486f0a348"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 820, 946",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9acb8151b0072cf2bc5abeceae2a1bef10364692",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559268776,
            "hunks": 7,
            "message": "Version updates triggered by Apoc-build-2653",
            "diff": [
                "diff --git a/versions.json b/versions.json",
                "index d4b458cb9..350e38f58 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -3,5 +3,5 @@",
                "         \"neo4j\": \"3.5.6\",",
                "-        \"apoc\": \"3.5.0.3\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.3\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.3/apoc-3.5.0.3-all.jar\"",
                "+        \"apoc\": \"3.5.0.4\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.4\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.4/apoc-3.5.0.4-all.jar\"",
                "     },",
                "@@ -9,5 +9,5 @@",
                "         \"neo4j\": \"3.5.5\",",
                "-        \"apoc\": \"3.5.0.3\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.3\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.3/apoc-3.5.0.3-all.jar\"",
                "+        \"apoc\": \"3.5.0.4\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.4\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.4/apoc-3.5.0.4-all.jar\"",
                "     },",
                "@@ -15,5 +15,5 @@",
                "         \"neo4j\": \"3.5.4\",",
                "-        \"apoc\": \"3.5.0.3\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.3\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.3/apoc-3.5.0.3-all.jar\"",
                "+        \"apoc\": \"3.5.0.4\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.4\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.4/apoc-3.5.0.4-all.jar\"",
                "     },",
                "@@ -21,5 +21,5 @@",
                "         \"neo4j\": \"3.5.3\",",
                "-        \"apoc\": \"3.5.0.3\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.3\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.3/apoc-3.5.0.3-all.jar\"",
                "+        \"apoc\": \"3.5.0.4\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.4\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.4/apoc-3.5.0.4-all.jar\"",
                "     },",
                "@@ -123,5 +123,5 @@",
                "         \"neo4j\": \"3.4.14\",",
                "-        \"apoc\": \"3.4.0.6\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.6\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.6/apoc-3.4.0.6-all.jar\"",
                "+        \"apoc\": \"3.4.0.7\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.7\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.7/apoc-3.4.0.7-all.jar\"",
                "     },",
                "@@ -129,5 +129,5 @@",
                "         \"neo4j\": \"3.4.13\",",
                "-        \"apoc\": \"3.4.0.6\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.6\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.6/apoc-3.4.0.6-all.jar\"",
                "+        \"apoc\": \"3.4.0.7\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.7\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.7/apoc-3.4.0.7-all.jar\"",
                "     },",
                "@@ -135,5 +135,5 @@",
                "         \"neo4j\": \"3.4.12\",",
                "-        \"apoc\": \"3.4.0.6\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.6\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.6/apoc-3.4.0.6-all.jar\"",
                "+        \"apoc\": \"3.4.0.7\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.7\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.7/apoc-3.4.0.7-all.jar\"",
                "     },"
            ],
            "changed_files": [
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e10acf3bf9d484f2799c59019c6a72eccbde538a",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542151842,
            "hunks": 1,
            "message": "fixes #917 - single line xml import fails with apoc.load.xml (#983)",
            "diff": [
                "diff --git a/src/main/java/apoc/load/Xml.java b/src/main/java/apoc/load/Xml.java",
                "index 7e8f68547..af0e37444 100644",
                "--- a/src/main/java/apoc/load/Xml.java",
                "+++ b/src/main/java/apoc/load/Xml.java",
                "@@ -223,3 +223,3 @@ public class Xml {",
                "-        if (children.getLength() > 1) {",
                "+        if (children.getLength() > 0) {",
                "             if (!stack.isEmpty()) {"
            ],
            "changed_files": [
                "src/main/java/apoc/load/Xml.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "917": "",
                "983": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "35508fe1372bfa6cee450fb48ea8b6d877edb004"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 917, 983",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d19c0669b578c0605764b5d03776aa05ece7fc6f",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542389832,
            "hunks": 60,
            "message": "Docs & Versions for 3.4.0.4",
            "diff": [
                "diff --git a/index34.html b/index34.html",
                "index 38f32c190..98fbfb096 100644",
                "--- a/index34.html",
                "+++ b/index34.html",
                "@@ -7,3 +7,3 @@",
                " <meta name=\"generator\" content=\"Asciidoctor 1.5.6.1\">",
                "-<title>APOC User Guide 3.4.0.3</title>",
                "+<title>APOC User Guide 3.4.0.4</title>",
                " <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\">",
                "@@ -429,3 +429,3 @@ body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-b",
                " <div id=\"header\">",
                "-<h1>APOC User Guide 3.4.0.3</h1>",
                "+<h1>APOC User Guide 3.4.0.4</h1>",
                " <div id=\"toc\" class=\"toc2\">",
                "@@ -718,2 +718,3 @@ body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-b",
                " </li>",
                "+<li><a href=\"#_cypher_init_script\">Cypher init script</a></li>",
                " <li><a href=\"#_appendix_complete_overview\">Appendix: Complete Overview</a>",
                "@@ -735,2 +736,3 @@ body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-b",
                " <li><a href=\"#_export_to_csv\">Export to CSV</a></li>",
                "+<li><a href=\"#_export_to_json_file\">Export to Json File</a></li>",
                " <li><a href=\"#_export_to_cypher_script\">Export to Cypher Script</a></li>",
                "@@ -774,2 +776,3 @@ body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-b",
                " <li><a href=\"#_node_functions\">Node Functions</a></li>",
                "+<li><a href=\"#_neighbor_functions\">Neighbor Functions</a></li>",
                " <li><a href=\"#_math_functions\">Math Functions</a></li>",
                "@@ -783,3 +786,3 @@ body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-b",
                " <li><a href=\"#_utilities\">Utilities</a></li>",
                "-<li><a href=\"#_config\">Config</a></li>",
                "+<li><a href=\"#_config_2\">Config</a></li>",
                " <li><a href=\"#_time_to_live_ttl\">Time to Live (TTL)</a></li>",
                "@@ -1088,3 +1091,3 @@ RETURN name AS undocumented</code></pre>",
                " <div class=\"paragraph\">",
                "-<p>Go to <a href=\"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.3\" class=\"bare\">http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.3</a>",
                "+<p>Go to <a href=\"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.4\" class=\"bare\">http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.4</a>",
                " to find the latest release and download the binary jar to place into your <code>$NEO4J_HOME/plugins</code> folder.</p>",
                "@@ -1141,5 +1144,5 @@ See, this <a href=\"https://github.com/neo4j-contrib/neo4j-apoc-procedures/issues",
                " pushd plugins",
                "-wget https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.3/apoc-3.4.0.3-all.jar",
                "+wget https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.4/apoc-3.4.0.4-all.jar",
                " popd",
                "-docker run --rm -e NEO4J_AUTH=none -p 7474:7474 -v $PWD/plugins:/plugins -p 7687:7687 neo4j:3.4.7</code></pre>",
                "+docker run --rm -e NEO4J_AUTH=none -p 7474:7474 -v $PWD/plugins:/plugins -p 7687:7687 neo4j:3.4.10</code></pre>",
                " </div>",
                "@@ -1269,2 +1272,7 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.trigger.removeAll</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.trigger.list</p></td>",
                "@@ -1600,3 +1608,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFile</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFile(file or url,[{statistics:true,timeout:10,parameters:{}}]) - runs each kernelTransaction in the file, all semicolon separated - currently no schema operations</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFile(file or url,[{statistics:true,timeout:10,parameters:{}}]) - runs each statement in the file, all semicolon separated - currently no schema operations</p></td>",
                " </tr>",
                "@@ -1605,3 +1613,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFiles</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFiles([files or urls],[{statistics:true,timeout:10,parameters:{}}])) - runs each kernelTransaction in the files, all semicolon separated</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFiles([files or urls],[{statistics:true,timeout:10,parameters:{}}])) - runs each statement in the files, all semicolon separated</p></td>",
                " </tr>",
                "@@ -1610,3 +1618,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFile</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFile(file or url,[{statistics:true,timeout:10}]) - allows only schema operations, runs each schema kernelTransaction in the file, all semicolon separated</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFile(file or url,[{statistics:true,timeout:10}]) - allows only schema operations, runs each schema statement in the file, all semicolon separated</p></td>",
                " </tr>",
                "@@ -1615,3 +1623,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFiles</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFiles([files or urls],{statistics:true,timeout:10}) - allows only schema operations, runs each schema kernelTransaction in the files, all semicolon separated</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFiles([files or urls],{statistics:true,timeout:10}) - allows only schema operations, runs each schema statement in the files, all semicolon separated</p></td>",
                " </tr>",
                "@@ -1620,3 +1628,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runMany</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runMany('cypher;\\nstatements;',{params},[{statistics:true,timeout:10}]) - runs each semicolon separated kernelTransaction and returns summary - currently no schema operations</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runMany('cypher;\\nstatements;',{params},[{statistics:true,timeout:10}]) - runs each semicolon separated statement and returns summary - currently no schema operations</p></td>",
                " </tr>",
                "@@ -1827,3 +1835,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.load.jdbc</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.load.jdbc('key or url','table or kernelTransaction') YIELD row - load from relational database, from a full table or a sql kernelTransaction</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.load.jdbc('key or url','table or statement', config) YIELD row - load from relational database, from a full table or a sql statement</p></td>",
                " </tr>",
                "@@ -1832,3 +1840,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.load.jdbcParams</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">deprecated - please use: apoc.load.jdbc('key or url','kernelTransaction',[params]) YIELD row - load from relational database, from a sql kernelTransaction with parameters</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">deprecated - please use: apoc.load.jdbc('key or url','',[params]) YIELD row - load from relational database, from a sql statement with parameters</p></td>",
                " </tr>",
                "@@ -1837,3 +1845,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.load.jdbcUpdate</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.load.jdbcUpdate('key or url','kernelTransaction',[params]) YIELD row - update relational database, from a SQL kernelTransaction with optional parameters</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.load.jdbcUpdate('key or url','statement',[params]) YIELD row - update relational database, from a SQL statement with optional parameters</p></td>",
                " </tr>",
                "@@ -2127,3 +2135,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.export.cypher.query</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.export.cypher.query(query,file,config) - exports nodes and relationships from the cypher kernelTransaction incl. indexes as cypher statements to the provided file</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.export.cypher.query(query,file,config) - exports nodes and relationships from the cypher statement incl. indexes as cypher statements to the provided file</p></td>",
                " </tr>",
                "@@ -2136,2 +2144,22 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.export.json.all</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.export.json.data</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.export.json.graph</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.export.json.query</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.import.csv</p></td>",
                "@@ -2382,3 +2410,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.refactor.mergeNodes</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.refactor.mergeNodes([node1,node2],[{properties:'override' or 'discard' or 'combine'}]) merge nodes onto first in list</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.refactor.mergeNodes([node1,node2],[{properties:'overwrite' or 'discard' or 'combine'}]) merge nodes onto first in list</p></td>",
                " </tr>",
                "@@ -2431,2 +2459,32 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.tohop</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.tohop(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern up to a certain distance, can use '&gt;' or '&lt;' for all outgoing or incoming relationships</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.tohop.count</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.tohop.count(node, rel-direction-pattern, distance) - returns distinct count of nodes of the given relationships in the pattern up to a certain distance, can use '&gt;' or '&lt;' for all outgoing or incoming relationships</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.byhop</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.byhop(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at each distance, can use '&gt;' or '&lt;' for all outgoing or incoming relationships</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.byhop.count</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.byhop.count(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at each distance, can use '&gt;' or '&lt;' for all outgoing or incoming relationships</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.athop</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.athop(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at a distance, can use '&gt;' or '&lt;' for all outgoing or incoming relationships</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.athop.count</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.neighbors.athop.count(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at a distance, can use '&gt;' or '&lt;' for all outgoing or incoming relationships</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">procedure</p></td>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.couchbase.get</p></td>",
                "@@ -2722,3 +2780,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnMany</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnMany(statement, params, expectMultipleValues) - executes statement with given parameters, returns first column only collected into a list, params are available as identifiers</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnMany(statement, params) - executes statement with given parameters, returns first column only collected into a list, params are available as identifiers</p></td>",
                " </tr>",
                "@@ -2727,3 +2785,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnSingle</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnSingle(statement, params, expectMultipleValues) - executes statement with given parameters, returns first element of the first column only, params are available as identifiers</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnSingle(statement, params) - executes statement with given parameters, returns first element of the first column only, params are available as identifiers</p></td>",
                " </tr>",
                "@@ -3021,2 +3079,7 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">function</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.coll.frequenciesAsMap</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.coll.frequenciesAsMap(coll) - return a map of frequencies of the items in the collection, key <code>item</code>, value <code>count</code> (e.g., <code>{1:2, 2:1}</code>)</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">function</p></td>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.coll.occurrences</p></td>",
                "@@ -3302,3 +3365,3 @@ apoc.monitor.locks(minWaitTime) yield advertedDeadLocks, lockCount, contendedLoc",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.text.format</p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.text.format(text,[params]) - sprintf format the string with the params given</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.text.format(text,[params],language) - sprintf format the string with the params given</p></td>",
                " </tr>",
                "@@ -4672,2 +4735,8 @@ RETURN apoc.data.domain(url) // will return 'www.example.com'</code></pre>",
                " <div class=\"paragraph\">",
                "+<p>Some nodes are not meant to live forever.",
                "+That&#8217;s why with APOC you can specify a time by when they are removed from the database, by utilizing a schema index and an additional label.",
                "+A few convenience procedures help with that.</p>",
                "+</div>",
                "+<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e9aoQ9xOmoU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "+<div class=\"paragraph\">",
                " <p>Enable cleanup of expired nodes in <code>neo4j.conf</code> with <code>apoc.ttl.enabled=true</code></p>",
                "@@ -6601,2 +6670,22 @@ Cypher is pretty good at deconstructing nested documents with dot syntax, slices",
                " </div>",
                "+<div class=\"paragraph\">",
                "+<p>To simplify the JSON URL syntax, you can configure aliases in <code>conf/neo4j.conf</code>:</p>",
                "+</div>",
                "+<div class=\"listingblock\">",
                "+<div class=\"content\">",
                "+<pre>apoc.json.myJson.url=https://api.stackexchange.com/2.2/questions?pagesize=100&amp;order=desc&amp;sort=creation&amp;tagged=neo4j&amp;site=stackoverflow&amp;filter=!5-i6Zw8Y)4W7vpy91PMYsKM-k9yzEsSC1_Uxlf</pre>",
                "+</div>",
                "+</div>",
                "+<div class=\"listingblock\">",
                "+<div class=\"content\">",
                "+<pre>CALL apoc.load.json('https://api.stackexchange.com/2.2/questions?pagesize=100&amp;order=desc&amp;sort=creation&amp;tagged=neo4j&amp;site=stackoverflow&amp;filter=!5-i6Zw8Y)4W7vpy91PMYsKM-k9yzEsSC1_Uxlf')",
                "+",
                "+becomes",
                "+",
                "+CALL apoc.load.json('myJson')</pre>",
                "+</div>",
                "+</div>",
                "+<div class=\"paragraph\">",
                "+<p>The 3rd value in the <code>apoc.json.&lt;alias&gt;.url=</code> effectively defines an alias to be used in  <code>apoc.load.json('&lt;alias&gt;',&#8230;&#8203;.</code></p>",
                "+</div>",
                " </div>",
                "@@ -6837,3 +6926,3 @@ CALL apoc.load.jdbc('myDB','PERSON')</pre>",
                " <div class=\"content\">",
                "-<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">cypher CALL apoc.load.driver(\"com.mysql.jdbc.Driver\");</code></pre>",
                "+<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">CALL apoc.load.driver(\"com.mysql.jdbc.Driver\");</code></pre>",
                " </div>",
                "@@ -6844,3 +6933,3 @@ CALL apoc.load.jdbc('myDB','PERSON')</pre>",
                " <pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">with \"jdbc:mysql://localhost:3306/northwind?user=root\" as url",
                "-cypher CALL apoc.load.jdbc(url,\"products\") YIELD row",
                "+CALL apoc.load.jdbc(url,\"products\") YIELD row",
                " RETURN count(*);</code></pre>",
                "@@ -6863,3 +6952,3 @@ RETURN count(*);</code></pre>",
                " <pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">with \"jdbc:mysql://localhost:3306/northwind?user=root\" as url",
                "-cypher CALL apoc.load.jdbc(url,\"products\") YIELD row",
                "+CALL apoc.load.jdbc(url,\"products\") YIELD row",
                " RETURN row limit 1;</code></pre>",
                "@@ -6889,3 +6978,3 @@ RETURN row limit 1;</code></pre>",
                " <pre>with \"select firstname, lastname from employees where firstname like ? and lastname like ?\" as sql",
                "-cypher call apoc.load.jdbcParams(\"northwind\", sql, ['F%', '%w']) yield row",
                "+call apoc.load.jdbcParams(\"northwind\", sql, ['F%', '%w']) yield row",
                " return row</pre>",
                "@@ -7328,3 +7417,3 @@ Put the JDBC driver into the <code>$NEO4J_HOME/plugins</code> directory and conf",
                " <div class=\"paragraph\">",
                "-<p>The jdbcUpdate is use for update relational database, from a SQL kernelTransaction with optional parameters</p>",
                "+<p>The jdbcUpdate is use for update relational database, from a SQL statement with optional parameters</p>",
                " </div>",
                "@@ -7362,2 +7451,48 @@ WHERE score &gt; 1000</code></pre>",
                " </div>",
                "+<div class=\"sect4\">",
                "+<h5 id=\"_load_jdbc_format_date\"><a class=\"link\" href=\"#_load_jdbc_format_date\">Load JDBC format date</a></h5>",
                "+<div class=\"paragraph\">",
                "+<p>Starting from Neo4j 3.4 there is the support for <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/syntax/temporal/\">Temporal Values</a></p>",
                "+</div>",
                "+<div class=\"paragraph\">",
                "+<p>If the returning JdbcType, from the load operation, is TIMESTAMP or TIMESTAMP_WITH_TIMEZONE you could provide the configuration parameter <strong>timezone</strong> with type <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html\">java.time.ZoneId</a></p>",
                "+</div>",
                "+<div class=\"listingblock\">",
                "+<div class=\"content\">",
                "+<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">CALL apoc.load.jdbc('key or url','table or statement', config) YIELD row</code></pre>",
                "+</div>",
                "+</div>",
                "+</div>",
                "+<div class=\"sect4\">",
                "+<h5 id=\"_config\"><a class=\"link\" href=\"#_config\">Config</a></h5>",
                "+<div class=\"paragraph\">",
                "+<p>Config param is optional, the default value is an empty map.</p>",
                "+</div>",
                "+<table class=\"tableblock frame-all grid-all spread\">",
                "+<colgroup>",
                "+<col style=\"width: 60%;\">",
                "+<col style=\"width: 40%;\">",
                "+</colgroup>",
                "+<tbody>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>timezone</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">default value: null</p></td>",
                "+</tr>",
                "+</tbody>",
                "+</table>",
                "+<div class=\"paragraph\">",
                "+<p>Example:</p>",
                "+</div>",
                "+<div class=\"listingblock\">",
                "+<div class=\"title\">with timezone</div>",
                "+<div class=\"content\">",
                "+<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">CALL apoc.load.jdbc('jdbc:derby:derbyDB','SELECT * FROM PERSON WHERE NAME = ?',['John'], {timezone: \"Asia/Tokyo\"})</code></pre>",
                "+</div>",
                "+</div>",
                "+<div class=\"listingblock\">",
                "+<div class=\"content\">",
                "+<pre>2018-10-31T01:32:25.012+09:00[Asia/Tokyo]</pre>",
                "+</div>",
                "+</div>",
                "+</div>",
                " </div>",
                "@@ -7670,3 +7805,3 @@ in previous releases we&#8217;ve had <code>apoc.load.xmlSimple</code>. This is n",
                " <div class=\"paragraph\">",
                "-<p>CSV files with headers that confirm the <a href=\"https://neo4j.com/docs/operations-manual/current/tools/import/file-header-format/\">Neo4j import tool&#8217;s header format</a> can be imported using the <code>apoc.import.csv</code> procedure. This procedure is intended for small- to medium-sized data sets. For bulk importing larger data sets, it is recommended to use the offline import tool.</p>",
                "+<p>CSV files that comply with the <a href=\"https://neo4j.com/docs/operations-manual/current/tools/import/file-header-format/\">Neo4j import tool&#8217;s header format</a> can be imported using the <code>apoc.import.csv</code> procedure. This procedure is intended to load small- to medium-sized data sets in an online database. For importing larger data sets, it is recommended to perform a batch import using the (<a href=\"https://neo4j.com/docs/operations-manual/current/tools/import/\">import tool</a>, which loads data in bulk to an offline (initially empty) database.</p>",
                " </div>",
                "@@ -7822,3 +7957,3 @@ Jane</pre>",
                " <div class=\"content\">",
                "-<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">CALL apoc.import.csv([{filename: 'file:/persons.csv', labels: ['Person']}], [], {})</code></pre>",
                "+<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">CALL apoc.import.csv([{fileName: 'file:/persons.csv', labels: ['Person']}], [], {})</code></pre>",
                " </div>",
                "@@ -7850,4 +7985,4 @@ Jane</pre>",
                " <pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">CALL apoc.import.csv(",
                "-  [{filename: 'file:/persons.csv', labels: ['Person']}],",
                "-  [{filename: 'file:/knows.csv', type: 'KNOWS'}],",
                "+  [{fileName: 'file:/persons.csv', labels: ['Person']}],",
                "+  [{fileName: 'file:/knows.csv', type: 'KNOWS'}],",
                "   {delimiter: '|', arrayDelimiter: ',', stringIds: false}",
                "@@ -8991,3 +9126,3 @@ RETURN node</code></pre>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.cypher.runFile</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFile(file or url,[{statistics:true,timeout:10,parameters:{}}]) - runs each kernelTransaction in the file, all semicolon separated - currently no schema operations</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFile(file or url,[{statistics:true,timeout:10,parameters:{}}]) - runs each statement in the file, all semicolon separated - currently no schema operations</p></td>",
                " </tr>",
                "@@ -8996,3 +9131,3 @@ RETURN node</code></pre>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.cypher.runFiles</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFiles([files or urls],[{statistics:true,timeout:10,parameters:{}}])) - runs each kernelTransaction in the files, all semicolon separated</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFiles([files or urls],[{statistics:true,timeout:10,parameters:{}}])) - runs each statement in the files, all semicolon separated</p></td>",
                " </tr>",
                "@@ -9001,3 +9136,3 @@ RETURN node</code></pre>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.cypher.runSchemaFile</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFile(file or url,[{statistics:true,timeout:10}]) - allows only schema operations, runs each schema kernelTransaction in the file, all semicolon separated</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFile(file or url,[{statistics:true,timeout:10}]) - allows only schema operations, runs each schema statement in the file, all semicolon separated</p></td>",
                " </tr>",
                "@@ -9006,3 +9141,3 @@ RETURN node</code></pre>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.cypher.runSchemaFiles</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFiles([files or urls],{statistics:true,timeout:10}) - allows only schema operations, runs each schema kernelTransaction in the files, all semicolon separated</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runSchemaFiles([files or urls],{statistics:true,timeout:10}) - allows only schema operations, runs each schema statement in the files, all semicolon separated</p></td>",
                " </tr>",
                "@@ -9011,3 +9146,3 @@ RETURN node</code></pre>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.cypher.runMany</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runMany('cypher;\\nstatements;',{params},[{statistics:true,timeout:10}]) - runs each semicolon separated kernelTransaction and returns summary - currently no schema operations</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runMany('cypher;\\nstatements;',{params},[{statistics:true,timeout:10}]) - runs each semicolon separated statement and returns summary - currently no schema operations</p></td>",
                " </tr>",
                "@@ -9066,3 +9201,3 @@ RETURN node</code></pre>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.cypher.runFirstColumnMany</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnMany(statement, params, expectMultipleValues) - executes statement with given parameters, returns first column only collected into a list, params are available as identifiers</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnMany(statement, params) - executes statement with given parameters, returns first column only collected into a list, params are available as identifiers</p></td>",
                " </tr>",
                "@@ -9071,3 +9206,3 @@ RETURN node</code></pre>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.cypher.runFirstColumnSingle</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnSingle(statement, params, expectMultipleValues) - executes statement with given parameters, returns first element of the first column only, params are available as identifiers</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">apoc.cypher.runFirstColumnSingle(statement, params) - executes statement with given parameters, returns first element of the first column only, params are available as identifiers</p></td>",
                " </tr>",
                "@@ -9595,2 +9730,14 @@ RETURN row.answer</pre>",
                " </div>",
                "+<div class=\"admonitionblock note\">",
                "+<table>",
                "+<tr>",
                "+<td class=\"icon\">",
                "+<div class=\"title\">Note</div>",
                "+</td>",
                "+<td class=\"content\">",
                "+If you override procedures or functions you might need to call <code>call dbms.clearQueryCaches()</code> as lookups to internal id&#8217;s are kept in compiled query plans.",
                "+</td>",
                "+</tr>",
                "+</table>",
                "+</div>",
                " <div class=\"sect3\">",
                "@@ -9630,2 +9777,9 @@ RETURN row.answer</pre>",
                " <tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>mode</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>read</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><div><div class=\"paragraph\">",
                "+<p>execution mode of the procedure: read, write, or schema</p>",
                "+</div></div></td>",
                "+</tr>",
                "+<tr>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>outputs</code></p></td>",
                "@@ -9684,7 +9838,7 @@ The default values are parsed as JSON.</p>",
                " <div class=\"content\">",
                "-<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">call apoc.custom.asProcdure('neighbours',",
                "-  'MATCH (n:Person {name:$name})--&gt;(nb) RETURN neighbour',",
                "+<pre class=\"highlight\"><code class=\"language-cypher\" data-lang=\"cypher\">CALL apoc.custom.asProcedure('neighbours',",
                "+  'MATCH (n:Person {name:$name})--&gt;(nb) RETURN nb as neighbour','read',",
                "   [['neighbour','NODE']],[['name','STRING']]);",
                "-call custom.neighbours('Joe') YIELD neighbour;</code></pre>",
                "+CALL custom.neighbours('Keanu Reeves') YIELD neighbour;</code></pre>",
                " </div>",
                "@@ -10763,2 +10917,6 @@ They return the list of eventually impacted constraints and indexes, the user sh",
                " <tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>CALL apoc.trigger.removeAll() yield name, statement, installed</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">removes all previously added triggers , returns trigger information</p></td>",
                "+</tr>",
                "+<tr>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>CALL apoc.trigger.list() yield name, statement, installed</code></p></td>",
                "@@ -11806,2 +11964,22 @@ Is&#8217;s a map of values, the values that we don&#8217;t pass to the config, a",
                " <div class=\"sect1\">",
                "+<h2 id=\"_cypher_init_script\"><a class=\"link\" href=\"#_cypher_init_script\">Cypher init script</a></h2>",
                "+<div class=\"sectionbody\">",
                "+<div class=\"paragraph\">",
                "+<p>Apoc optionally allows you to run a cypher command after database initialization is finished. This can e.g. be used to ensure indexes/constraints are created up front.</p>",
                "+</div>",
                "+<div class=\"paragraph\">",
                "+<p>To use this feature use a config option:</p>",
                "+</div>",
                "+<div class=\"listingblock\">",
                "+<div class=\"content\">",
                "+<pre class=\"highlight\"><code class=\"language-config\" data-lang=\"config\">apoc.initializer.cypher=CALL apoc.cypher.runSchemaFile(\"file:///indexes.cypher\")</code></pre>",
                "+</div>",
                "+</div>",
                "+<div class=\"paragraph\">",
                "+<p>For running multiple statements you can also add suffixes to the config options, like <code>cypher.1</code>, <code>cypher.2</code>.",
                "+The statements will then be executed in sort-order.</p>",
                "+</div>",
                "+</div>",
                "+</div>",
                "+<div class=\"sect1\">",
                " <h2 id=\"_appendix_complete_overview\"><a class=\"link\" href=\"#_appendix_complete_overview\">Appendix: Complete Overview</a></h2>",
                "@@ -11916,3 +12094,3 @@ Please note that there are (case-sensitive) <a href=\"http://neo4j.com/docs/devel",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.index.addNodeMap(node,{key:value})</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">\u00c2\u00a0add node to an index for each label it has with the given attributes which can also be computed</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">add node to an index for each label it has with the given attributes which can also be computed</p></td>",
                " </tr>",
                "@@ -12284,2 +12462,10 @@ RETURN apoc.meta.isType(n.age,\"INTEGER\") as ageType</code></pre>",
                " <div class=\"sect3\">",
                "+<h4 id=\"_export_to_json_file\"><a class=\"link\" href=\"#_export_to_json_file\">Export to Json File</a></h4>",
                "+<div class=\"literalblock\">",
                "+<div class=\"content\">",
                "+<pre>include::exportJson.adoc[leveloffset=1]</pre>",
                "+</div>",
                "+</div>",
                "+</div>",
                "+<div class=\"sect3\">",
                " <h4 id=\"_export_to_cypher_script\"><a class=\"link\" href=\"#_export_to_cypher_script\">Export to Cypher Script</a></h4>",
                "@@ -13413,2 +13599,6 @@ CALL apoc.generate.simple([2,2,2,2], null, null)</code></pre>",
                " <tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>CALL apoc.trigger.removeAll() yield name, statement, installed</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">removes all previously added triggers , returns trigger information</p></td>",
                "+</tr>",
                "+<tr>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>CALL apoc.trigger.list() yield name, statement, installed</code></p></td>",
                "@@ -13935,2 +14125,6 @@ If relationships have different start/end nodes (related to direction), relation",
                " <tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.coll.frequenciesAsMap(coll)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">return a map of frequencies of the items in the collection, keyed by <code>item</code> and <code>count</code> (e.g., <code>{1: 2, 3: 2}</code>)</p></td>",
                "+</tr>",
                "+<tr>",
                " <td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.coll.sortMulti</code></p></td>",
                "@@ -14073,2 +14267,37 @@ If relationships have different start/end nodes (related to direction), relation",
                " <div class=\"sect3\">",
                "+<h4 id=\"_neighbor_functions\"><a class=\"link\" href=\"#_neighbor_functions\">Neighbor Functions</a></h4>",
                "+<table class=\"tableblock frame-all grid-all spread\">",
                "+<colgroup>",
                "+<col style=\"width: 16.6666%;\">",
                "+<col style=\"width: 83.3334%;\">",
                "+</colgroup>",
                "+<tbody>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.neighbors.tohop(node, rel-direction-pattern, distance)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">returns distinct nodes of the given relationships in the pattern up to a certain distance</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.neighbors.tohop.count(node, rel-direction-pattern, distance)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">returns the count of distinct nodes of the given relationships in the pattern up to a certain distance</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.neighbors.byhop(node, rel-direction-pattern, distance)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">returns distinct nodes of the given relationships in the pattern grouped by distance</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.neighbors.byhop.count(node, rel-direction-pattern, distance)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">returns the count distinct nodes of the given relationships in the pattern grouped by distance</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.neighbors.athop(node, rel-direction-pattern, distance)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">returns distinct nodes of the given relationships in the pattern at a certain distance</p></td>",
                "+</tr>",
                "+<tr>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.neighbors.athop.count(node, rel-direction-pattern, distance)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">returns the count of distinct nodes of the given relationships in the pattern at a certain distance</p></td>",
                "+</tr>",
                "+</tbody>",
                "+</table>",
                "+</div>",
                "+<div class=\"sect3\">",
                " <h4 id=\"_math_functions\"><a class=\"link\" href=\"#_math_functions\">Math Functions</a></h4>",
                "@@ -14156,4 +14385,4 @@ If relationships have different start/end nodes (related to direction), relation",
                " <tr>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.text.format(text,[params])</code></p></td>",
                "-<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">sprintf format the string with the params given</p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>apoc.text.format(text,[params],language)</code></p></td>",
                "+<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">sprintf format the string with the params given, and optional param language (default value is 'en').</p></td>",
                " </tr>",
                "@@ -14392,3 +14621,3 @@ If relationships have different start/end nodes (related to direction), relation",
                " <div class=\"sect2\">",
                "-<h3 id=\"_config\"><a class=\"link\" href=\"#_config\">Config</a></h3>",
                "+<h3 id=\"_config_2\"><a class=\"link\" href=\"#_config_2\">Config</a></h3>",
                " <table class=\"tableblock frame-all grid-all spread\">",
                "@@ -16023,3 +16252,3 @@ The export file has to convert into UTF-8.</p>",
                " <div id=\"footer-text\">",
                "-Last updated 2018-09-20 09:33:50 EDT",
                "+Last updated 2018-11-16 18:35:49 MEZ",
                " </div>",
                "diff --git a/versions.json b/versions.json",
                "index 38d60c0ed..e56b14ab7 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -2,72 +2,6 @@",
                "     {",
                "-        \"neo4j\": \"3.5.0-beta03\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-beta02\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-beta01\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha09\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha08\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha07\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha06\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha05\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha04\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha03\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha02\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "-    },",
                "-    {",
                "-        \"neo4j\": \"3.5.0-alpha01\",",
                "-        \"apoc\": \"3.5.0.0\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+        \"neo4j\": \"3.4.10\",",
                "+        \"apoc\": \"3.4.0.3\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.3\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.3/apoc-3.4.0.3-all.jar\"",
                "     },",
                "@@ -211,2 +145,14 @@",
                "     },",
                "+    {",
                "+        \"neo4j\": \"3.3.9\",",
                "+        \"apoc\": \"3.3.0.4\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.3.0.4\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.4/apoc-3.3.0.4-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.3.8\",",
                "+        \"apoc\": \"3.3.0.4\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.3.0.4\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.4/apoc-3.3.0.4-all.jar\"",
                "+    },",
                "     {"
            ],
            "changed_files": [
                "index34.html",
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "32d470dcfaf7963da97430c9380c86ba203a71ba",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542793614,
            "hunks": 1,
            "message": "3.5-beta/rc in versions.json",
            "diff": [
                "diff --git a/versions.json b/versions.json",
                "index 019b9cecd..b29213ba0 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -1,2 +1,80 @@",
                " [",
                "+    {",
                "+        \"neo4j\": \"3.5.0-rc01\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-beta03\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-beta02\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-beta01\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha09\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha08\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha07\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha06\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha05\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha04\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha03\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha02\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha01\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "     {"
            ],
            "changed_files": [
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5c3e7cf7d4f1bc0e3ca3ca8e65fd40d7a5716304",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541507296,
            "hunks": 1,
            "message": "Warmup report pagecache events, fixes #954",
            "diff": [
                "diff --git a/src/main/java/apoc/warmup/Warmup.java b/src/main/java/apoc/warmup/Warmup.java",
                "index a6f367ea3..ef6453aa4 100644",
                "--- a/src/main/java/apoc/warmup/Warmup.java",
                "+++ b/src/main/java/apoc/warmup/Warmup.java",
                "@@ -102,2 +102,4 @@ public class Warmup {",
                "                         return new PageResult(fileName, index, -1L, pages, e.getMessage(), start);",
                "+                    } finally {",
                "+                        pageCache.reportEvents();",
                "                     }"
            ],
            "changed_files": [
                "src/main/java/apoc/warmup/Warmup.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "954": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "023c9bd60b176a14e6140155b8a63dbed7f4ef7d"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 954",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c17f270640f75d7c98bc85e2f46cad1d3e9d0fff",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558534419,
            "hunks": 1,
            "message": "Version updates triggered by Apoc-build-2476",
            "diff": [
                "diff --git a/versions.json b/versions.json",
                "index aa39a8ce5..070e80bd7 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -115,2 +115,8 @@",
                "     },",
                "+    {",
                "+        \"neo4j\": \"3.4.14\",",
                "+        \"apoc\": \"3.4.0.6\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.6\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.6/apoc-3.4.0.6-all.jar\"",
                "+    },",
                "     {"
            ],
            "changed_files": [
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8ecd8e6f3286228efda80b17e999dfa34338fd42",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542390845,
            "hunks": 1,
            "message": "version 3.4.0.4",
            "diff": [
                "diff --git a/versions.json b/versions.json",
                "index e56b14ab7..019b9cecd 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -3,5 +3,5 @@",
                "         \"neo4j\": \"3.4.10\",",
                "-        \"apoc\": \"3.4.0.3\",",
                "-        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.3\",",
                "-        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.3/apoc-3.4.0.3-all.jar\"",
                "+        \"apoc\": \"3.4.0.4\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.4\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.4.0.4/apoc-3.4.0.4-all.jar\"",
                "     },"
            ],
            "changed_files": [
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "12106f930e1528ae9a4dafbbef52d1b8cdc3b492",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1553671533,
            "hunks": 5,
            "message": "Issue 1041: test container support for cassandra, jdbc(postgres), neo4j (#1131)",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 22413d77a..4592df758 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -42,2 +42,3 @@ ext {",
                "     neo4jVersionEffective = project.hasProperty(\"neo4jVersionOverride\") ? project.getProperty(\"neo4jVersionOverride\") : neo4jVersion",
                "+    testContainersVersion = '1.11.0'",
                " }",
                "@@ -155,10 +156,15 @@ dependencies {",
                "-    // Test Containers",
                "-    testCompile group: 'org.testcontainers', name: 'testcontainers', version: '1.10.2'",
                "-    testCompile group: 'org.testcontainers', name: 'elasticsearch', version: '1.10.2'",
                "-    testCompile group: 'org.testcontainers', name: 'couchbase', version: '1.10.2'",
                "-",
                "-    testCompile group: 'org.testcontainers', name: 'mysql', version: '1.10.2'",
                "+    testCompile group: 'org.gradle', name: 'gradle-tooling-api', version: '4.3'",
                "     testCompile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.2.1'",
                "+    testCompile group: 'com.github.adejanovski', name: 'cassandra-jdbc-wrapper', version: '3.1.0'",
                "+",
                "+    // Test Containers",
                "+    testCompile group: 'org.testcontainers', name: 'testcontainers', version: testContainersVersion",
                "+    testCompile group: 'org.testcontainers', name: 'neo4j', version: testContainersVersion",
                "+    testCompile group: 'org.testcontainers', name: 'elasticsearch', version: testContainersVersion",
                "+    testCompile group: 'org.testcontainers', name: 'couchbase', version: testContainersVersion",
                "+    testCompile group: 'org.testcontainers', name: 'mysql', version: testContainersVersion",
                "+    testCompile group: 'org.testcontainers', name: 'postgresql', version: testContainersVersion",
                "+    testCompile group: 'org.testcontainers', name: 'cassandra', version: testContainersVersion",
                "diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties",
                "index f16d26666..2d6c9deeb 100644",
                "--- a/gradle/wrapper/gradle-wrapper.properties",
                "+++ b/gradle/wrapper/gradle-wrapper.properties",
                "@@ -1 +1,2 @@",
                "+#Fri Mar 01 16:58:03 CET 2019",
                " distributionBase=GRADLE_USER_HOME",
                "@@ -4,2 +5,2 @@ zipStoreBase=GRADLE_USER_HOME",
                " zipStorePath=wrapper/dists",
                "-distributionUrl=https\\://services.gradle.org/distributions/gradle-4.1-bin.zip",
                "+distributionUrl=https\\://services.gradle.org/distributions/gradle-5.2-all.zip"
            ],
            "changed_files": [
                "build.gradle",
                "gradle/wrapper/gradle-wrapper.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1131": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "121ac9544f249239b781bac2dbd0e22e5af8b25c"
                ]
            ],
            "tags": [
                "3.4.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port, contain",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1131",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1eaa07bb0db8549ae105ce4032f1c9cbdcc2b09e",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558490375,
            "hunks": 3,
            "message": "fixes #1203 - Added rfc_1123_date_time to DateFormatUtil. (#1204) Added apoc.date.convertFormats for String date conversions.",
            "diff": [
                "diff --git a/src/main/java/apoc/date/Date.java b/src/main/java/apoc/date/Date.java",
                "index a33a09ef4..03c4d2cff 100644",
                "--- a/src/main/java/apoc/date/Date.java",
                "+++ b/src/main/java/apoc/date/Date.java",
                "@@ -2,2 +2,3 @@ package apoc.date;",
                "+import apoc.util.DateFormatUtil;",
                " import apoc.util.Util;",
                "@@ -193,2 +194,17 @@ public class Date {",
                "+\t@UserFunction",
                "+\t@Description(\"apoc.date.convertFormat('Tue, 14 May 2019 14:52:06 -0400', 'rfc_1123_date_time', 'iso_date_time') convert a String of one date format into a String of another date format.\")",
                "+\tpublic String convertFormat( @Name( \"temporal\" ) String input, @Name( value = \"currentFormat\" ) String currentFormat, @Name( value = \"convertTo\" , defaultValue = \"yyyy-MM-dd\" ) String convertTo )",
                "+\t{",
                "+\t\tif (input == null || input.isEmpty())",
                "+\t\t{",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\tDateTimeFormatter currentFormatter = DateFormatUtil.getOrCreate( currentFormat );",
                "+\t\tDateTimeFormatter convertToFormatter = DateFormatUtil.getOrCreate( convertTo );",
                "+",
                "+\t\treturn convertToFormatter.format(  currentFormatter.parse( input ) );",
                "+\t}",
                "+",
                " \t@UserFunction",
                "diff --git a/src/main/java/apoc/util/DateFormatUtil.java b/src/main/java/apoc/util/DateFormatUtil.java",
                "index 7b0ef8ccb..a5e54349a 100644",
                "--- a/src/main/java/apoc/util/DateFormatUtil.java",
                "+++ b/src/main/java/apoc/util/DateFormatUtil.java",
                "@@ -71,2 +71,3 @@ public class DateFormatUtil {",
                "         map.put(\"year_month_day\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));",
                "+        map.put( \"rfc_1123_date_time\", DateTimeFormatter.RFC_1123_DATE_TIME );",
                "         ISO_DATE_FORMAT = Collections.unmodifiableMap(map);"
            ],
            "changed_files": [
                "src/main/java/apoc/date/Date.java",
                "src/main/java/apoc/util/DateFormatUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1203": "fixes #1203 - Added RFC date support and date string converter function #1204",
                "1204": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "78b4bca59f7c9c04eefe93aa706d651d8a8c9e51"
                ]
            ],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1203, 1204",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c045ab3d1347573eafc67a399d9cbba89bb03658",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558707131,
            "hunks": 1,
            "message": "Version updates triggered by Apoc-build-2518",
            "diff": [
                "diff --git a/versions.json b/versions.json",
                "index 070e80bd7..d4b458cb9 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -1,2 +1,8 @@",
                " [",
                "+    {",
                "+        \"neo4j\": \"3.5.6\",",
                "+        \"apoc\": \"3.5.0.3\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.3\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.3/apoc-3.5.0.3-all.jar\"",
                "+    },",
                "     {"
            ],
            "changed_files": [
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dcef76afda0a0d40903664d0a08cf5f7340776e0",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1539805164,
            "hunks": 2,
            "message": "3.5 versions",
            "diff": [
                "diff --git a/versions.json b/versions.json",
                "index f1feabd2e..d6d1fb4b5 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -1,2 +1,68 @@",
                " [",
                "+    {",
                "+        \"neo4j\": \"3.5.0-beta02\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-beta01\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha09\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha08\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha07\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha06\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha05\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha04\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha03\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha02\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "+    {",
                "+        \"neo4j\": \"3.5.0-alpha01\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "     {",
                "@@ -247,2 +313,8 @@",
                "     },",
                "+    {",
                "+        \"neo4j\": \"3.2.13\",",
                "+        \"apoc\": \"3.2.3.6\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.2.3.6\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.2.3.6/apoc-3.2.3.6-all.jar\"",
                "+    },",
                "     {"
            ],
            "changed_files": [
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a1c39eadf06fcf89beadcb5e9b8ac37a72eb01e3",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1539390665,
            "hunks": 3,
            "message": "Handle separator and quote chars properly, fixes #948 (#949) Also fix handlign quotation characters, which was made possible by PR #879",
            "diff": [
                "diff --git a/src/main/java/apoc/export/csv/CsvEntityLoader.java b/src/main/java/apoc/export/csv/CsvEntityLoader.java",
                "index 859f36c78..dccd027f0 100644",
                "--- a/src/main/java/apoc/export/csv/CsvEntityLoader.java",
                "+++ b/src/main/java/apoc/export/csv/CsvEntityLoader.java",
                "@@ -81,3 +81,3 @@ public class CsvEntityLoader {",
                "-        final CSVReader csv = new CSVReader(reader, clc.getDelimiter());",
                "+        final CSVReader csv = new CSVReader(reader, clc.getDelimiter(), clc.getQuotationCharacter());",
                "diff --git a/src/main/java/apoc/export/csv/CsvLoaderConfig.java b/src/main/java/apoc/export/csv/CsvLoaderConfig.java",
                "index 19acd5a5e..f90d3e834 100644",
                "--- a/src/main/java/apoc/export/csv/CsvLoaderConfig.java",
                "+++ b/src/main/java/apoc/export/csv/CsvLoaderConfig.java",
                "@@ -73,2 +73,17 @@ public class CsvLoaderConfig {",
                "+    public static Character getCharacterOrString(Map<String, Object> config, String name) {",
                "+        Object o = config.get(name);",
                "+        if (o instanceof String) {",
                "+            String s = (String) o;",
                "+            if (s.length() != 1) {",
                "+                throw new IllegalStateException(name + \" must have a length of one.\");",
                "+            }",
                "+            return s.charAt(0);",
                "+        }",
                "+        if (o instanceof Character) {",
                "+            return (Character) o;",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "     public static CsvLoaderConfig from(Map<String, Object> config) {",
                "@@ -76,5 +91,5 @@ public class CsvLoaderConfig {",
                "-        if (config.get(DELIMITER) != null) builder.delimiter((char) config.get(DELIMITER));",
                "-        if (config.get(ARRAY_DELIMITER) != null) builder.arrayDelimiter((char) config.get(ARRAY_DELIMITER));",
                "-        if (config.get(QUOTATION_CHARACTER) != null) builder.quotationCharacter((char) config.get(QUOTATION_CHARACTER));",
                "+        if (config.get(DELIMITER) != null) builder.delimiter(getCharacterOrString(config, DELIMITER));",
                "+        if (config.get(ARRAY_DELIMITER) != null) builder.arrayDelimiter(getCharacterOrString(config, ARRAY_DELIMITER));",
                "+        if (config.get(QUOTATION_CHARACTER) != null) builder.quotationCharacter(getCharacterOrString(config, QUOTATION_CHARACTER));",
                "         if (config.get(STRING_IDS) != null) builder.stringIds((boolean) config.get(STRING_IDS));"
            ],
            "changed_files": [
                "src/main/java/apoc/export/csv/CsvEntityLoader.java",
                "src/main/java/apoc/export/csv/CsvLoaderConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "948": "Handle separator and quote chars properly, fixes #948 #949",
                "949": "",
                "879": "Configuration of export CSV is inconsistent with the docs #652 Handle separator and quote chars properly, fixes #948 #949 Passing a delimiter to apoc.import.csv results in \"String cannot be cast\" error #948 Configuration of export CSV is inconsistent with the docs neo4j/apoc#147"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity, port",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 948, 949, 879",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7bb5a517e668769c6162d62501bcfcbfe4328292",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541669879,
            "hunks": 3,
            "message": "Wrap JDBC ResultSet.isClosed in a try-catch for older JDBC drivers that don't implement that method.",
            "diff": [
                "diff --git a/src/main/java/apoc/load/Jdbc.java b/src/main/java/apoc/load/Jdbc.java",
                "index fcd01221c..940a5d7e4 100644",
                "--- a/src/main/java/apoc/load/Jdbc.java",
                "+++ b/src/main/java/apoc/load/Jdbc.java",
                "@@ -264,3 +264,3 @@ public class Jdbc {",
                "         private boolean handleEndOfResults() throws SQLException {",
                "-            Boolean closed = ignore(rs::isClosed);",
                "+            Boolean closed = isRsClosed();",
                "             if (closed!=null && closed) {",
                "@@ -276,3 +276,3 @@ public class Jdbc {",
                "         private void closeRs() {",
                "-            Boolean closed = ignore(rs::isClosed);",
                "+            Boolean closed = isRsClosed();",
                "             if (closed==null || !closed) {",
                "@@ -282,2 +282,10 @@ public class Jdbc {",
                "+        private Boolean isRsClosed() {",
                "+            try {",
                "+                return ignore(rs::isClosed);",
                "+            } catch(AbstractMethodError ame) {",
                "+                return null;",
                "+            }",
                "+        }",
                "+",
                "     }"
            ],
            "changed_files": [
                "src/main/java/apoc/load/Jdbc.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a5b4ff4aa9e3cd089524ab88cd8d41350bb8248d"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: result",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ee97e6bd26f408b1fe7e180dcda6a1fb7c83eda4",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1540680752,
            "hunks": 1,
            "message": "3.5.0-b3",
            "diff": [
                "diff --git a/versions.json b/versions.json",
                "index d6d1fb4b5..38d60c0ed 100644",
                "--- a/versions.json",
                "+++ b/versions.json",
                "@@ -1,2 +1,8 @@",
                " [",
                "+    {",
                "+        \"neo4j\": \"3.5.0-beta03\",",
                "+        \"apoc\": \"3.5.0.0\",",
                "+        \"url\": \"http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.0\",",
                "+        \"jar\": \"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.5.0.0/apoc-3.5.0.0-all.jar\"",
                "+    },",
                "     {"
            ],
            "changed_files": [
                "versions.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ce72d5104c94f6e2a2615d8877df6923dc8d3d06"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "325f9bfd3b2ed8c682fc05e0d4e7aa1a8df27097",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558490208,
            "hunks": 13,
            "message": "fixes #1181: APOC 3.5.0.3 changes import file URL paths too aggressively (#1202)",
            "diff": [
                "diff --git a/src/main/java/apoc/load/LoadCsv.java b/src/main/java/apoc/load/LoadCsv.java",
                "index 841f59238..fc0d31dab 100644",
                "--- a/src/main/java/apoc/load/LoadCsv.java",
                "+++ b/src/main/java/apoc/load/LoadCsv.java",
                "@@ -24,2 +24,5 @@ import java.util.stream.StreamSupport;",
                "+import static apoc.load.util.LoadCsvConfig.DEFAULT_ARRAY_SEP;",
                "+import static apoc.load.util.LoadCsvConfig.Results;",
                "+import static apoc.util.FileUtils.closeReaderSafely;",
                " import static apoc.util.Util.cleanUrl;",
                "@@ -29,3 +32,2 @@ import static java.util.Collections.emptyList;",
                " import static java.util.Collections.emptyMap;",
                "-import static apoc.load.util.LoadCsvConfig.*;",
                "@@ -41,21 +43,10 @@ public class LoadCsv {",
                "         LoadCsvConfig config = new LoadCsvConfig(configMap);",
                "+        CountingReader reader = null;",
                "         try {",
                "-            CountingReader reader = FileUtils.readerFor(url);",
                "-",
                "-            // new CSVReader(...) is deprecated, moved to the new builder",
                "-            CSVReader csv = new CSVReaderBuilder(reader)",
                "-                    .withCSVParser(new CSVParserBuilder()",
                "-                            .withQuoteChar(config.getQuoteChar())",
                "-                            .withSeparator(config.getSeparator())",
                "-                            .build())",
                "-                    .build();",
                "-",
                "-            String[] header = getHeader(csv, config);",
                "-            boolean checkIgnore = !config.getIgnore().isEmpty() || config.getMappings().values().stream().anyMatch( m -> m.ignore);",
                "-            return StreamSupport.stream(new CSVSpliterator(csv, header, url, config.getSkip(), config.getLimit(),",
                "-                    checkIgnore, config.getMappings(), config.getNullValues(), config.getResults(), config.getIgnoreErrors()), false);",
                "+            reader = FileUtils.readerFor(url);",
                "+            return streamCsv(url, config, reader);",
                "         } catch (IOException e) {",
                "-",
                "+            closeReaderSafely(reader);",
                "             if(!config.isFailOnError())",
                "-                return Stream.of(new  CSVResult(new String[0], new String[0], 0, true, Collections.emptyMap(), emptyList(), EnumSet.noneOf(Results.class)));",
                "+                return Stream.of(new CSVResult(new String[0], new String[0], 0, true, Collections.emptyMap(), emptyList(), EnumSet.noneOf(Results.class)));",
                "             else",
                "@@ -65,2 +56,18 @@ public class LoadCsv {",
                "+    public Stream<CSVResult> streamCsv(@Name(\"url\") String url, LoadCsvConfig config, CountingReader reader) throws IOException {",
                "+",
                "+        CSVReader csv = new CSVReaderBuilder(reader)",
                "+                .withCSVParser(new CSVParserBuilder()",
                "+                        .withQuoteChar(config.getQuoteChar())",
                "+                        .withSeparator(config.getSeparator())",
                "+                        .build())",
                "+                .build();",
                "+",
                "+        String[] header = getHeader(csv, config);",
                "+        boolean checkIgnore = !config.getIgnore().isEmpty() || config.getMappings().values().stream().anyMatch(m -> m.ignore);",
                "+        return StreamSupport.stream(new CSVSpliterator(csv, header, url, config.getSkip(), config.getLimit(),",
                "+                checkIgnore, config.getMappings(), config.getNullValues(), config.getResults(), config.getIgnoreErrors()), false)",
                "+                .onClose(() -> closeReaderSafely(reader));",
                "+    }",
                "+",
                "     public static class Mapping {",
                "diff --git a/src/main/java/apoc/metrics/Metrics.java b/src/main/java/apoc/metrics/Metrics.java",
                "index ee6a5f804..6f46781a5 100644",
                "--- a/src/main/java/apoc/metrics/Metrics.java",
                "+++ b/src/main/java/apoc/metrics/Metrics.java",
                "@@ -3,3 +3,5 @@ package apoc.metrics;",
                " import apoc.ApocConfiguration;",
                "+import apoc.export.util.CountingReader;",
                " import apoc.load.LoadCsv;",
                "+import apoc.load.util.LoadCsvConfig;",
                " import apoc.util.FileUtils;",
                "@@ -17,2 +19,4 @@ import java.util.stream.Stream;",
                "+import static apoc.util.FileUtils.closeReaderSafely;",
                "+",
                " /**",
                "@@ -164,6 +168,14 @@ public class Metrics {",
                "-        String url = new File(metricsDir, metricName + \".csv\").toURI().toString();",
                "-        return new LoadCsv().csv(url, config)",
                "-                .filter(Metrics.duplicatedHeaderRows)",
                "-                .map(csvResult -> new GenericMetric(metricName, Util.toLong(csvResult.map.get(\"t\")), csvResult.map));",
                "+        String url = new File(metricsDir, metricName + \".csv\").getAbsolutePath();",
                "+        CountingReader reader = null;",
                "+        try {",
                "+            reader = FileUtils.readFile(url);",
                "+            return new LoadCsv()",
                "+                    .streamCsv(url, new LoadCsvConfig(config), reader)",
                "+                    .filter(Metrics.duplicatedHeaderRows)",
                "+                    .map(csvResult -> new GenericMetric(metricName, Util.toLong(csvResult.map.get(\"t\")), csvResult.map));",
                "+        } catch (Exception e) {",
                "+            closeReaderSafely(reader);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "diff --git a/src/main/java/apoc/util/FileUtils.java b/src/main/java/apoc/util/FileUtils.java",
                "index c02afa1a1..9976f8f62 100644",
                "--- a/src/main/java/apoc/util/FileUtils.java",
                "+++ b/src/main/java/apoc/util/FileUtils.java",
                "@@ -76,3 +76,3 @@ public class FileUtils {",
                "-    private static CountingReader readFile(String fileName) throws IOException, FileNotFoundException {",
                "+    public static CountingReader readFile(String fileName) throws IOException, FileNotFoundException {",
                "         File file = new File(fileName);",
                "@@ -290,2 +290,8 @@ public class FileUtils {",
                "     );",
                "+",
                "+    public static void closeReaderSafely(CountingReader reader) {",
                "+        if (reader != null) {",
                "+            try { reader.close(); } catch (IOException ignored) { }",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/apoc/load/LoadCsv.java",
                "src/main/java/apoc/metrics/Metrics.java",
                "src/main/java/apoc/util/FileUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1181": "Gain access to server CSV metrics and log files moxious/halin#60 fixes #1181: APOC 3.5.0.3 changes import file URL paths too aggressively #1202",
                "1202": "Add tests for file streaming in containers #1080"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: port",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1181, 1202",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3c2aa7a8c57b00102856dc19fb1a49e0e03c8ce5",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558490597,
            "hunks": 3,
            "message": "fixes #1206 alias sql statements in conf for apoc.load.jdbc (#1207)",
            "diff": [
                "diff --git a/src/main/java/apoc/load/Jdbc.java b/src/main/java/apoc/load/Jdbc.java",
                "index 85477d3e4..cf5b40fe8 100644",
                "--- a/src/main/java/apoc/load/Jdbc.java",
                "+++ b/src/main/java/apoc/load/Jdbc.java",
                "@@ -22,4 +22,3 @@ import java.util.stream.StreamSupport;",
                "-import static apoc.load.util.JdbcUtil.getConnection;",
                "-import static apoc.load.util.JdbcUtil.getUrlOrKey;",
                "+import static apoc.load.util.JdbcUtil.*;",
                "@@ -74,3 +73,3 @@ public class Jdbc {",
                "         String url = getUrlOrKey(urlOrKey);",
                "-        String query = tableOrSelect.indexOf(' ') == -1 ? \"SELECT * FROM \" + tableOrSelect : tableOrSelect;",
                "+        String query = getSqlOrKey(tableOrSelect);",
                "         try {",
                "diff --git a/src/main/java/apoc/load/util/JdbcUtil.java b/src/main/java/apoc/load/util/JdbcUtil.java",
                "index 74a40242a..d31ab168f 100644",
                "--- a/src/main/java/apoc/load/util/JdbcUtil.java",
                "+++ b/src/main/java/apoc/load/util/JdbcUtil.java",
                "@@ -61,2 +61,6 @@ public class JdbcUtil {",
                "     }",
                "+",
                "+    public static String getSqlOrKey(String sqlOrKey) {",
                "+        return sqlOrKey.contains(\" \") ? sqlOrKey : Util.getLoadUrlByConfigFile(LOAD_TYPE, sqlOrKey, \"sql\").orElse(\"SELECT * FROM \" + sqlOrKey);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/apoc/load/Jdbc.java",
                "src/main/java/apoc/load/util/JdbcUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1206": "fixes #1206 alias sql statements in conf for apoc.load.jdbc #1207",
                "1207": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1ffa8606e80cea650e25a65f532750de16a290a7"
                ],
                [
                    "no-tag",
                    "194178f5472771abfaaae71523f140d53d5b16f7"
                ]
            ],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1206, 1207",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "11b7f4180605f5248bf7991d129968dba75a26b3",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541407054,
            "hunks": 1,
            "message": "fixes #968 (#969)",
            "diff": [
                "diff --git a/src/main/java/apoc/util/Util.java b/src/main/java/apoc/util/Util.java",
                "index a18a2044e..7fcf1ddf3 100644",
                "--- a/src/main/java/apoc/util/Util.java",
                "+++ b/src/main/java/apoc/util/Util.java",
                "@@ -285,3 +285,3 @@ public class Util {",
                "         InputStream stream;",
                "-        if (urlAddress.contains(\"!\")) {",
                "+        if (urlAddress.contains(\"!\") && (urlAddress.contains(\".zip\") || urlAddress.contains(\".tar\") || urlAddress.contains(\".tgz\"))) {",
                "             return getStreamCompressedFile(urlAddress, headers, payload);"
            ],
            "changed_files": [
                "src/main/java/apoc/util/Util.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "968": "",
                "969": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e52485fd3bdc71ee6cf337ba0160d70f2a57556f"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 968, 969",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "73e24f3fba74259cc6e884588e3ec927ce4ec056",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558767462,
            "hunks": 16,
            "message": "fixes #1072: Make sure custom procedures are also recreated on other cluster members (#1169) * fixes #1072: Make sure custom procedures are also recreated on other cluster members * Changed Implementation to just add the Timer",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 061a618c7..5de1d8aec 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -71,3 +71,3 @@ dependencies {",
                "     compile group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.9'",
                "-    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.6.3'",
                "+    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.7.3'",
                "diff --git a/docs/asciidoc/custom.adoc b/docs/asciidoc/custom.adoc",
                "index e2c77db0c..ba59816ea 100644",
                "--- a/docs/asciidoc/custom.adoc",
                "+++ b/docs/asciidoc/custom.adoc",
                "@@ -120 +120,13 @@ The the output will look like the following table:",
                " |===",
                "+",
                "+",
                "+=== How to manage procedure/function replication in a Causal Cluster",
                "+",
                "+In order to replicate the procedure/function in a cluster environment you can tune the following parameters:",
                "+",
                "+[%autowidth,opts=header]",
                "+|===",
                "+| name | type | description",
                "+| `apoc.custom.procedures.refresh` | long (default `60000`) | the refresh time that allows replicating the procedure/function",
                "+changes to each cluster member",
                "+|===",
                "diff --git a/src/main/java/apoc/custom/CypherProcedures.java b/src/main/java/apoc/custom/CypherProcedures.java",
                "index 066af5a29..a2e028c47 100644",
                "--- a/src/main/java/apoc/custom/CypherProcedures.java",
                "+++ b/src/main/java/apoc/custom/CypherProcedures.java",
                "@@ -2,2 +2,3 @@ package apoc.custom;",
                "+import apoc.ApocConfiguration;",
                " import apoc.util.JsonUtil;",
                "@@ -6,2 +7,3 @@ import org.neo4j.collection.PrefetchingRawIterator;",
                " import org.neo4j.collection.RawIterator;",
                "+import org.neo4j.graphdb.GraphDatabaseService;",
                " import org.neo4j.graphdb.Result;",
                "@@ -346,2 +348,3 @@ public class CypherProcedures {",
                "         public static final String APOC_CUSTOM = \"apoc.custom\";",
                "+        public static final String APOC_CUSTOM_UPDATE = \"apoc.custom.update\";",
                "         private GraphProperties properties;",
                "@@ -349,2 +352,4 @@ public class CypherProcedures {",
                "         private final Log log;",
                "+        private Timer timer = new Timer(getClass().getSimpleName(), true);",
                "+        private long lastUpdate;",
                "@@ -359,2 +364,8 @@ public class CypherProcedures {",
                "             restoreProcedures();",
                "+            long refreshInterval = Long.valueOf(ApocConfiguration.get(\"custom.procedures.refresh\", \"60000\"));",
                "+            timer.scheduleAtFixedRate(new TimerTask() {",
                "+                public void run() {",
                "+                    restoreProcedures();",
                "+                }",
                "+            }, refreshInterval, refreshInterval);",
                "         }",
                "@@ -366,7 +377,9 @@ public class CypherProcedures {",
                "         private void restoreProcedures() {",
                "+            if (getLastUpdate(properties) <= lastUpdate) return;",
                "+            lastUpdate = System.currentTimeMillis();",
                "             CustomStatementRegistry registry = new CustomStatementRegistry(api, log);",
                "-            Map<String, Map<String,Map<String, Object>>> stored = readData(properties);",
                "+            Map<String, Map<String, Map<String, Object>>> stored = readData(properties);",
                "             stored.get(FUNCTIONS).forEach((name, data) -> {",
                "                 registry.registerFunction(name, (String) data.get(\"statement\"), (String) data.get(\"output\"),",
                "-                        (List<List<String>>) data.get(\"inputs\"), (Boolean)data.get(\"forceSingle\"), (String) data.get(\"description\"));",
                "+                        (List<List<String>>) data.get(\"inputs\"), (Boolean) data.get(\"forceSingle\"), (String) data.get(\"description\"));",
                "             });",
                "@@ -376,2 +389,3 @@ public class CypherProcedures {",
                "             });",
                "+            clearQueryCaches(api);",
                "         }",
                "@@ -380,2 +394,5 @@ public class CypherProcedures {",
                "         public void unavailable() {",
                "+            if (timer != null) {",
                "+                timer.cancel();",
                "+            }",
                "             properties = null;",
                "@@ -405,2 +422,3 @@ public class CypherProcedures {",
                "                     properties.setProperty(APOC_CUSTOM, Util.toJson(data));",
                "+                    properties.setProperty(APOC_CUSTOM_UPDATE, System.currentTimeMillis());",
                "                 }",
                "@@ -411,2 +429,9 @@ public class CypherProcedures {",
                "+        private static long getLastUpdate(GraphProperties properties) {",
                "+            try (Transaction tx = properties.getGraphDatabase().beginTx()) {",
                "+                long lastUpdate = (long) properties.getProperty(APOC_CUSTOM_UPDATE, 0L);",
                "+                tx.success();",
                "+                return lastUpdate;",
                "+            }",
                "+        }",
                "         private static Map<String, Map<String,Map<String, Object>>> readData(GraphProperties properties) {",
                "@@ -420,2 +445,10 @@ public class CypherProcedures {",
                "+        private static void clearQueryCaches(GraphDatabaseService db) {",
                "+            try (Transaction tx = db.beginTx()) {",
                "+                db.execute(\"call dbms.clearQueryCaches()\").close();",
                "+                tx.success();",
                "+            }",
                "+        }",
                "+",
                "+",
                "         public List<CustomProcedureInfo> list() {",
                "@@ -445,2 +478,2 @@ public class CypherProcedures {",
                "     }",
                "-}",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "build.gradle",
                "docs/asciidoc/custom.adoc",
                "src/main/java/apoc/custom/CypherProcedures.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1072": "fixes #1072: Make sure custom procedures are also recreated on other cluster members #1169",
                "1169": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ded19684eb05268313043f6fd4f46614352cf33b"
                ],
                [
                    "no-tag",
                    "284b02c8e2d1d60f7785ede8c7693a477ec99c9b"
                ]
            ],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1072, 1169",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3c3c28bdb5e88d67f5dd068b52cd6b56e901d082",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1554358242,
            "hunks": 9,
            "message": "Prepend cypher runtime=slotted in apoc.periodic.iterate driving statement, fixes #1070",
            "diff": [
                "diff --git a/src/main/java/apoc/load/LoadCsv.java b/src/main/java/apoc/load/LoadCsv.java",
                "index 02dd74fe9..841f59238 100644",
                "--- a/src/main/java/apoc/load/LoadCsv.java",
                "+++ b/src/main/java/apoc/load/LoadCsv.java",
                "@@ -49,3 +49,2 @@ public class LoadCsv {",
                "                             .withSeparator(config.getSeparator())",
                "-                            .withIgnoreQuotations( config.isIgnoreQuotations() )",
                "                             .build())",
                "@@ -56,3 +55,3 @@ public class LoadCsv {",
                "             return StreamSupport.stream(new CSVSpliterator(csv, header, url, config.getSkip(), config.getLimit(),",
                "-                    checkIgnore, config.getMappings(), config.getNullValues(), config.getResults(),!config.isFailOnError()), false);",
                "+                    checkIgnore, config.getMappings(), config.getNullValues(), config.getResults(), config.getIgnoreErrors()), false);",
                "         } catch (IOException e) {",
                "diff --git a/src/main/java/apoc/load/util/LoadCsvConfig.java b/src/main/java/apoc/load/util/LoadCsvConfig.java",
                "index 8a3c35c8e..1031d18cf 100644",
                "--- a/src/main/java/apoc/load/util/LoadCsvConfig.java",
                "+++ b/src/main/java/apoc/load/util/LoadCsvConfig.java",
                "@@ -3,2 +3,3 @@ package apoc.load.util;",
                " import apoc.load.LoadCsv;",
                "+import apoc.util.Util;",
                "@@ -16,2 +17,3 @@ public class LoadCsvConfig {",
                "+    private final boolean ignoreErrors;",
                "     private char separator;",
                "@@ -24,3 +26,2 @@ public class LoadCsvConfig {",
                "     private boolean failOnError;",
                "-    private boolean ignoreQuotations;",
                "@@ -41,2 +42,3 @@ public class LoadCsvConfig {",
                "         }",
                "+        ignoreErrors = Util.toBoolean(config.getOrDefault(\"ignoreErrors\", false));",
                "         separator = parseCharFromConfig(config, \"sep\", DEFAULT_SEP);",
                "@@ -48,3 +50,2 @@ public class LoadCsvConfig {",
                "         failOnError = (boolean) config.getOrDefault(\"failOnError\", true);",
                "-        ignoreQuotations = (boolean) config.getOrDefault(\"ignoreQuotations\", false);",
                "@@ -120,4 +121,4 @@ public class LoadCsvConfig {",
                "-    public boolean isIgnoreQuotations() {",
                "-        return ignoreQuotations;",
                "+    public boolean getIgnoreErrors() {",
                "+        return ignoreErrors;",
                "     }",
                "diff --git a/src/main/java/apoc/periodic/Periodic.java b/src/main/java/apoc/periodic/Periodic.java",
                "index 14ecdcb30..47284634b 100644",
                "--- a/src/main/java/apoc/periodic/Periodic.java",
                "+++ b/src/main/java/apoc/periodic/Periodic.java",
                "@@ -285,3 +285,3 @@ public class Periodic {",
                "         }",
                "-        Matcher matcher = CYPHER_PREFIX_PATTERN.matcher(cypherIterate.substring(0, Math.min(15, cypherIterate.length())));",
                "+        Matcher matcher = CYPHER_PREFIX_PATTERN.matcher(cypherIterate.substring(0, Math.min(15,cypherIterate.length())));",
                "         return matcher.find() ? CYPHER_PREFIX_PATTERN.matcher(cypherIterate).replaceFirst(CYPHER_RUNTIME_SLOTTED) : CYPHER_RUNTIME_SLOTTED + cypherIterate;"
            ],
            "changed_files": [
                "src/main/java/apoc/load/LoadCsv.java",
                "src/main/java/apoc/load/util/LoadCsvConfig.java",
                "src/main/java/apoc/periodic/Periodic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1070": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "08078a2bfea7efbd025a55e12c4e24df5a6f8ed5"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1070",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "088bf122f54105800e1d23f2feff473d93bdf705",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542151807,
            "hunks": 2,
            "message": "fixes #913 - Function similar to apoc.coll.frequencies that returns a map (#982)",
            "diff": [
                "diff --git a/docs/overview.adoc b/docs/overview.adoc",
                "index cb096a14e..acd14bb77 100644",
                "--- a/docs/overview.adoc",
                "+++ b/docs/overview.adoc",
                "@@ -860,2 +860,3 @@ Sometimes type information gets lost, these functions help you to coerce an \"Any",
                " | apoc.coll.frequencies(coll) | returns a list of frequencies of the items in the collection, keyed by `item` and `count` (e.g., `[{item: xyz, count:2}, {item:zyx, count:5}, {item:abc, count:1}]`)",
                "+| apoc.coll.frequenciesAsMap(coll) | return a map of frequencies of the items in the collection, keyed by `item` and `count` (e.g., `{1: 2, 3: 2}`)",
                " | apoc.coll.sortMulti | sort list of maps by several sort fields (ascending with ^ prefix) and optionally applies limit and skip",
                "diff --git a/src/main/java/apoc/coll/Coll.java b/src/main/java/apoc/coll/Coll.java",
                "index d1c5043bb..53a8b9d68 100644",
                "--- a/src/main/java/apoc/coll/Coll.java",
                "+++ b/src/main/java/apoc/coll/Coll.java",
                "@@ -675,2 +675,9 @@ public class Coll {",
                "+    @UserFunction",
                "+    @Description(\"apoc.coll.frequenciesAsMap(coll) - return a map of frequencies of the items in the collection, key `item`, value `count` (e.g., `{1:2, 2:1}`)\")",
                "+    public Map<String, Object> frequenciesAsMap(@Name(\"coll\") List<Object> coll) {",
                "+",
                "+        return frequencies(coll).stream().collect(Collectors.toMap(t -> t.get(\"item\").toString(), v-> v.get(\"count\")));",
                "+    }",
                "+",
                "     @UserFunction"
            ],
            "changed_files": [
                "docs/overview.adoc",
                "src/main/java/apoc/coll/Coll.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "913": "",
                "982": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "85f97e27313782061cdf3adb447fb2f0eb04cfe2"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 913, 982",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a5c590a11db45cf5888845bc18ac2602d65aa2f4",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558618752,
            "hunks": 5,
            "message": "#1177 keep the mongodb connection open until stream is closed (#1180)",
            "diff": [
                "diff --git a/src/main/java/apoc/mongodb/MongoDB.java b/src/main/java/apoc/mongodb/MongoDB.java",
                "index 53f6f37a8..53e6f8ab4 100644",
                "--- a/src/main/java/apoc/mongodb/MongoDB.java",
                "+++ b/src/main/java/apoc/mongodb/MongoDB.java",
                "@@ -59,3 +59,4 @@ public class MongoDB {",
                "                                  @Name(\"query\") Map<String, Object> query,",
                "-                                 @Name(value = \"compatibleValues\", defaultValue = \"false\") boolean compatibleValues, @Name(value = \"skip\", defaultValue = \"0\") Long skip,",
                "+                                 @Name(value = \"compatibleValues\", defaultValue = \"false\") boolean compatibleValues, ",
                "+                                 @Name(value = \"skip\", defaultValue = \"0\") Long skip,",
                "                                  @Name(value = \"limit\", defaultValue = \"0\") Long limit) {",
                "diff --git a/src/main/java/apoc/mongodb/MongoDBColl.java b/src/main/java/apoc/mongodb/MongoDBColl.java",
                "index cb18e86ff..19288dc87 100644",
                "--- a/src/main/java/apoc/mongodb/MongoDBColl.java",
                "+++ b/src/main/java/apoc/mongodb/MongoDBColl.java",
                "@@ -33,2 +33,3 @@ class MongoDBColl implements MongoDB.Coll {",
                "     private boolean compatibleValues = false;",
                "+    private boolean doorStop = false;",
                "@@ -55,2 +56,3 @@ class MongoDBColl implements MongoDB.Coll {",
                "     public void close() throws IOException {",
                "+        if (doorStop) return;",
                "         mongoClient.close();",
                "@@ -113,4 +115,11 @@ class MongoDBColl implements MongoDB.Coll {",
                "     private Stream<Map<String, Object>> asStream(FindIterable<Document> result) {",
                "+        this.doorStop = true;",
                "         Iterable<Document> it = () -> result.iterator();",
                "-        return StreamSupport.stream(it.spliterator(), false).map(doc -> this.documentToPackableMap(doc)).onClose(result.iterator()::close);",
                "+        return StreamSupport",
                "+                .stream(it.spliterator(), false)",
                "+                .map(doc -> this.documentToPackableMap(doc))",
                "+                .onClose( () -> {",
                "+                        result.iterator().close();",
                "+                        mongoClient.close();",
                "+                    } );",
                "     }"
            ],
            "changed_files": [
                "src/main/java/apoc/mongodb/MongoDB.java",
                "src/main/java/apoc/mongodb/MongoDBColl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1177": "#1177 keep the mongodb connection open until stream is closed #1180 fixes #1177: MongoDB Connection State is not 'open' #1201",
                "1180": "fixes #1177: MongoDB Connection State is not 'open' #1201"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3dbf4a7e5f6a729003863c037f75a41d5e2caca9"
                ],
                [
                    "no-tag",
                    "9f6cf4fc256eb7505fdfa48c6a8f749d8bf352f1"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1177, 1180",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0cc0451d8713be57035d4e30cc01c64474876a50",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541750301,
            "hunks": 3,
            "message": "Fixing Couchbase Tests, fixes #934",
            "diff": [
                "diff --git a/src/main/java/apoc/couchbase/CouchbaseConnection.java b/src/main/java/apoc/couchbase/CouchbaseConnection.java",
                "index 2360ebdf9..2232c8683 100644",
                "--- a/src/main/java/apoc/couchbase/CouchbaseConnection.java",
                "+++ b/src/main/java/apoc/couchbase/CouchbaseConnection.java",
                "@@ -102,3 +102,3 @@ public class CouchbaseConnection implements AutoCloseable {",
                "     protected int getMajorVersion() {",
                "-        return this.cluster.authenticate(this.passwordAuthenticator).clusterManager().info().getMinVersion().major();",
                "+        return this.cluster.authenticate(this.passwordAuthenticator).clusterManager().info(5,TimeUnit.SECONDS).getMinVersion().major();",
                "     }",
                "diff --git a/src/main/java/apoc/couchbase/CouchbaseManager.java b/src/main/java/apoc/couchbase/CouchbaseManager.java",
                "index 07487f026..f32039cd3 100644",
                "--- a/src/main/java/apoc/couchbase/CouchbaseManager.java",
                "+++ b/src/main/java/apoc/couchbase/CouchbaseManager.java",
                "@@ -3,2 +3,4 @@ package apoc.couchbase;",
                " import apoc.ApocConfiguration;",
                "+import com.couchbase.client.core.retry.FailFastRetryStrategy;",
                "+import com.couchbase.client.core.retry.RetryStrategy;",
                " import com.couchbase.client.java.Bucket;",
                "@@ -29,3 +31,3 @@ public class CouchbaseManager {",
                "-    public static final DefaultCouchbaseEnvironment DEFAULT_COUCHBASE_ENVIRONMENT = DefaultCouchbaseEnvironment.create();",
                "+    public static final DefaultCouchbaseEnvironment DEFAULT_COUCHBASE_ENVIRONMENT = DefaultCouchbaseEnvironment.builder().retryStrategy(FailFastRetryStrategy.INSTANCE).build();"
            ],
            "changed_files": [
                "src/main/java/apoc/couchbase/CouchbaseConnection.java",
                "src/main/java/apoc/couchbase/CouchbaseManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "934": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "373e4a5d937260f335b6501a93f7222d159bba85"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 934",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "894334c1519725f69c37946341533a0dd165ebbd",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542220208,
            "hunks": 4,
            "message": "fixes #985 - Provide Locale as option in apoc.text.format (#990)",
            "diff": [
                "diff --git a/docs/overview.adoc b/docs/overview.adoc",
                "index acd14bb77..a97020f1a 100644",
                "--- a/docs/overview.adoc",
                "+++ b/docs/overview.adoc",
                "@@ -946,3 +946,3 @@ Example: `'FRIEND|MENTORS>|<REPORTS_TO'` will match to :FRIEND relationships in",
                " | apoc.text.join(['text1','text2',...], delimiter) | join the given strings with the given delimiter.",
                "-| apoc.text.format(text,[params]) | sprintf format the string with the params given",
                "+| apoc.text.format(text,[params],language) | sprintf format the string with the params given, and optional param language (default value is 'en').",
                " | apoc.text.lpad(text,count,delim) | left pad the string to the given width",
                "diff --git a/docs/text.adoc b/docs/text.adoc",
                "index a3951b80b..631d56ab0 100644",
                "--- a/docs/text.adoc",
                "+++ b/docs/text.adoc",
                "@@ -10,2 +10,20 @@ Cleaning will strip the string of all non-alphanumeric characters (including spa",
                "+== Formatting Text",
                "+",
                "+Format the string with the params given, and optional param language.",
                "+",
                "+.without language param ('en' default)",
                "+",
                "+[source,cypher]",
                "+----",
                "+RETURN apoc.text.format('ab%s %d %.1f %s%n',['cd',42,3.14,true]) AS value // abcd 42 3.1 true",
                "+----",
                "+",
                "+.with language param",
                "+",
                "+[source,cypher]",
                "+----",
                "+RETURN apoc.text.format('ab%s %d %.1f %s%n',['cd',42,3.14,true],'it') AS value // abcd 42 3,1 true",
                "+----",
                "+",
                " == String Search",
                "diff --git a/src/main/java/apoc/text/Strings.java b/src/main/java/apoc/text/Strings.java",
                "index cd5403cd9..3653ad733 100644",
                "--- a/src/main/java/apoc/text/Strings.java",
                "+++ b/src/main/java/apoc/text/Strings.java",
                "@@ -305,7 +305,7 @@ public class Strings {",
                "     @UserFunction",
                "-    @Description(\"apoc.text.format(text,[params]) - sprintf format the string with the params given\")",
                "-    public String format(@Name(\"text\") String text, @Name(\"params\") List<Object> params) {",
                "+    @Description(\"apoc.text.format(text,[params],language) - sprintf format the string with the params given\")",
                "+    public String format(@Name(\"text\") String text, @Name(\"params\") List<Object> params, @Name(value = \"language\",defaultValue = \"en\") String lang) {",
                "         if (text == null) return null;",
                "         if (params == null) return text;",
                "-        return String.format(Locale.ENGLISH,text, params.toArray());",
                "+        return String.format(new Locale(lang),text, params.toArray());",
                "     }"
            ],
            "changed_files": [
                "docs/overview.adoc",
                "docs/text.adoc",
                "src/main/java/apoc/text/Strings.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "985": "apoc.number.format(number, decimals, language) #964 fixes #985 - Provide Locale as option in apoc.text.format #990",
                "990": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "944d4a06753b3a141604f9633752594324c30ba1"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 985, 990",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f7b5b6f63a6cebbf5edeefb48fa6241a3f7e66ff",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541669002,
            "hunks": 5,
            "message": "feature: cypher initializers (#975) cypher initializer are configurable cypher statement to be run after DB has started up and is available.",
            "diff": [
                "diff --git a/docs/cypher_init.adoc b/docs/cypher_init.adoc",
                "new file mode 100644",
                "index 000000000..62d4d967f",
                "--- /dev/null",
                "+++ b/docs/cypher_init.adoc",
                "@@ -0,0 +1,11 @@",
                "+Apoc optionally allows you to run a cypher command after database initialization is finished. This can e.g. be used to ensure indexes/constraints are created up front.",
                "+",
                "+To use this feature use a config option:",
                "+",
                "+[source,config]",
                "+----",
                "+apoc.initializer.cypher=CALL apoc.cypher.runSchemaFile(\"file:///indexes.cypher\")",
                "+----",
                "+",
                "+For running multiple statements you can also add suffixes to the config options, like `cypher.1`, `cypher.2`.",
                "+The statements will then be executed in sort-order.",
                "diff --git a/docs/index.adoc b/docs/index.adoc",
                "index 99238edc7..282b0cf84 100644",
                "--- a/docs/index.adoc",
                "+++ b/docs/index.adoc",
                "@@ -206,2 +206,6 @@ include::bolt.adoc[leveloffset=1]",
                "+== Cypher init script",
                "+",
                "+include::cypher_init.adoc[leveloffset=1]",
                "+",
                " == Appendix: Complete Overview",
                "diff --git a/src/main/java/apoc/ApocKernelExtensionFactory.java b/src/main/java/apoc/ApocKernelExtensionFactory.java",
                "index e173cd798..f9f79ab9f 100644",
                "--- a/src/main/java/apoc/ApocKernelExtensionFactory.java",
                "+++ b/src/main/java/apoc/ApocKernelExtensionFactory.java",
                "@@ -3,2 +3,3 @@ package apoc;",
                " import apoc.custom.CypherProcedures;",
                "+import apoc.cypher.CypherInitializer;",
                " import apoc.index.IndexUpdateTransactionEventHandler;",
                "@@ -91,3 +92,5 @@ public class ApocKernelExtensionFactory extends KernelExtensionFactory<ApocKerne",
                "             customProcedureStorage = new CypherProcedures.CustomProcedureStorage(db, log.getUserLog(CypherProcedures.class));",
                "-            dependencies.availabilityGuard().addListener(customProcedureStorage);",
                "+            AvailabilityGuard availabilityGuard = dependencies.availabilityGuard();",
                "+            availabilityGuard.addListener(customProcedureStorage);",
                "+            availabilityGuard.addListener(new CypherInitializer(db, log.getUserLog(CypherInitializer.class)));",
                "         }",
                "diff --git a/src/main/java/apoc/cypher/CypherInitializer.java b/src/main/java/apoc/cypher/CypherInitializer.java",
                "new file mode 100644",
                "index 000000000..a49da29f9",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/cypher/CypherInitializer.java",
                "@@ -0,0 +1,38 @@",
                "+package apoc.cypher;",
                "+",
                "+import apoc.ApocConfiguration;",
                "+import org.neo4j.kernel.availability.AvailabilityListener;",
                "+import org.neo4j.kernel.internal.GraphDatabaseAPI;",
                "+import org.neo4j.logging.Log;",
                "+",
                "+import java.util.SortedMap;",
                "+import java.util.TreeMap;",
                "+",
                "+public class CypherInitializer implements AvailabilityListener {",
                "+    private final GraphDatabaseAPI db;",
                "+    private final Log userLog;",
                "+",
                "+    public CypherInitializer(GraphDatabaseAPI db, Log userLog) {",
                "+        this.db = db;",
                "+        this.userLog = userLog;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void available() {",
                "+        SortedMap<String, Object> initializers = new TreeMap<>(ApocConfiguration.get(\"initializer.cypher\"));",
                "+        for (Object initializer: initializers.values()) {",
                "+            String query = initializer.toString();",
                "+            try {",
                "+                db.execute(query);",
                "+                userLog.info(\"successfully initialized: \" + query);",
                "+            } catch (Exception e) {",
                "+                userLog.warn(\"error upon initialization, running: \"+query, e);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void unavailable() {",
                "+        // intentionally empty",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "docs/cypher_init.adoc",
                "docs/index.adoc",
                "src/main/java/apoc/ApocKernelExtensionFactory.java",
                "src/main/java/apoc/cypher/CypherInitializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "975": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b9b10637a411dac082d61b20021dbe26ce5d2455"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 975",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "97d2d586fdbb2ce8bac6355198b732a77c493199",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542379496,
            "hunks": 27,
            "message": "fixes #816 - requesting ability to bury url for apoc.load.json into neo4j.conf (#984)",
            "diff": [
                "diff --git a/docs/loadjson.adoc b/docs/loadjson.adoc",
                "index 7314f186f..d61f40875 100644",
                "--- a/docs/loadjson.adoc",
                "+++ b/docs/loadjson.adoc",
                "@@ -45,2 +45,18 @@ There is also a direct `apoc.json.path(json,path)` function.",
                "+To simplify the JSON URL syntax, you can configure aliases in `conf/neo4j.conf`:",
                "+",
                "+----",
                "+apoc.json.myJson.url=https://api.stackexchange.com/2.2/questions?pagesize=100&order=desc&sort=creation&tagged=neo4j&site=stackoverflow&filter=!5-i6Zw8Y)4W7vpy91PMYsKM-k9yzEsSC1_Uxlf",
                "+----",
                "+",
                "+----",
                "+CALL apoc.load.json('https://api.stackexchange.com/2.2/questions?pagesize=100&order=desc&sort=creation&tagged=neo4j&site=stackoverflow&filter=!5-i6Zw8Y)4W7vpy91PMYsKM-k9yzEsSC1_Uxlf')",
                "+",
                "+becomes",
                "+",
                "+CALL apoc.load.json('myJson')",
                "+----",
                "+",
                "+The 3rd value in the `apoc.json.<alias>.url=` effectively defines an alias to be used in  `apoc.load.json('<alias>',....`",
                "+",
                " == Load JSON StackOverflow Example",
                "diff --git a/src/main/java/apoc/load/Jdbc.java b/src/main/java/apoc/load/Jdbc.java",
                "index 940a5d7e4..af92f1c8c 100644",
                "--- a/src/main/java/apoc/load/Jdbc.java",
                "+++ b/src/main/java/apoc/load/Jdbc.java",
                "@@ -2,7 +2,7 @@ package apoc.load;",
                "+import apoc.ApocConfiguration;",
                " import apoc.load.util.LoadJdbcConfig;",
                " import apoc.result.RowResult;",
                "-import apoc.ApocConfiguration;",
                " import apoc.util.MapUtil;",
                "-import org.apache.commons.compress.utils.IOUtils;",
                "+import apoc.util.Util;",
                " import org.neo4j.logging.Log;",
                "@@ -15,16 +15,7 @@ import java.math.BigDecimal;",
                " import java.math.BigInteger;",
                "-import javax.security.auth.Subject;",
                "-import javax.security.auth.callback.Callback;",
                "-import javax.security.auth.callback.NameCallback;",
                "-import javax.security.auth.callback.PasswordCallback;",
                "-import javax.security.auth.login.LoginContext;",
                "-import java.io.InputStream;",
                " import java.net.URI;",
                "-import java.net.URL;",
                "-import java.security.PrivilegedActionException;",
                "-import java.security.PrivilegedExceptionAction;",
                " import java.sql.*;",
                "-import java.time.*;",
                "+import java.time.OffsetDateTime;",
                "+import java.time.OffsetTime;",
                " import java.util.*;",
                "-import java.util.Date;",
                " import java.util.stream.Stream;",
                "@@ -38,2 +29,5 @@ public class Jdbc {",
                "+    private static final String LOAD_TYPE = \"jdbc\";",
                "+    private static final String KEY_NOT_FOUND_MESSAGE = \"No apoc.jdbc.%s.url url specified\";",
                "+",
                "     static {",
                "@@ -88,3 +82,3 @@ public class Jdbc {",
                "         LoadJdbcConfig loadJdbcConfig = new LoadJdbcConfig(config);",
                "-        String url = urlOrKey.contains(\":\") ? urlOrKey : getJdbcUrl(urlOrKey);",
                "+        String url = getUrlOrKey(urlOrKey);",
                "         String query = tableOrSelect.indexOf(' ') == -1 ? \"SELECT * FROM \" + tableOrSelect : tableOrSelect;",
                "@@ -127,3 +121,3 @@ public class Jdbc {",
                "     private Stream<RowResult> executeUpdate(String urlOrKey, String query, Object...params) {",
                "-        String url = urlOrKey.contains(\":\") ? urlOrKey : getJdbcUrl(urlOrKey);",
                "+        String url = getUrlOrKey(urlOrKey);",
                "         try {",
                "@@ -168,8 +162,2 @@ public class Jdbc {",
                "-    private static String getJdbcUrl(String key) {",
                "-        Object value = ApocConfiguration.get(\"jdbc\").get(key + \".url\");",
                "-        if (value == null) throw new RuntimeException(\"No apoc.jdbc.\"+key+\".url jdbc url specified\");",
                "-        return value.toString();",
                "-    }",
                "-",
                "     private static class ResultSetIterator implements Iterator<Map<String, Object>> {",
                "@@ -302,2 +290,6 @@ public class Jdbc {",
                "     }",
                "+",
                "+    private String getUrlOrKey(String urlOrKey) {",
                "+        return urlOrKey.contains(\":\") ? urlOrKey : Util.getLoadUrlByConfigFile(LOAD_TYPE, urlOrKey, \"url\").orElseThrow(() -> new RuntimeException(String.format(KEY_NOT_FOUND_MESSAGE, urlOrKey)));",
                "+    }",
                " }",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/apoc/load/LoadJson.java b/src/main/java/apoc/load/LoadJson.java",
                "index 880dd9c80..c908d38ab 100644",
                "--- a/src/main/java/apoc/load/LoadJson.java",
                "+++ b/src/main/java/apoc/load/LoadJson.java",
                "@@ -2,3 +2,2 @@ package apoc.load;",
                "-import org.neo4j.procedure.Description;",
                " import apoc.result.MapResult;",
                "@@ -7,4 +6,6 @@ import apoc.util.JsonUtil;",
                " import apoc.util.MapUtil;",
                "+import apoc.util.Util;",
                " import org.neo4j.graphdb.GraphDatabaseService;",
                " import org.neo4j.procedure.Context;",
                "+import org.neo4j.procedure.Description;",
                " import org.neo4j.procedure.Name;",
                "@@ -19,2 +20,3 @@ public class LoadJson {",
                "     private static final String AUTH_HEADER_KEY = \"Authorization\";",
                "+    private static final String LOAD_TYPE = \"json\";",
                "@@ -48,6 +50,6 @@ public class LoadJson {",
                "     @Description(\"apoc.load.jsonParams('url',{header:value},payload, config) YIELD value - load from JSON URL (e.g. web-api) while sending headers / payload to import JSON as stream of values if the JSON was an array or a single value if it was a map\")",
                "-    public Stream<MapResult> jsonParams(@Name(\"url\") String url, @Name(\"headers\") Map<String,Object> headers, @Name(\"payload\") String payload, @Name(value = \"path\",defaultValue = \"\") String path, @Name(value = \"config\",defaultValue = \"{}\") Map<String, Object> config) {",
                "+    public Stream<MapResult> jsonParams(@Name(\"urlOrKey\") String urlOrKey, @Name(\"headers\") Map<String,Object> headers, @Name(\"payload\") String payload, @Name(value = \"path\",defaultValue = \"\") String path, @Name(value = \"config\",defaultValue = \"{}\") Map<String, Object> config) {",
                "         if (config == null) config = Collections.emptyMap();",
                "         boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);",
                "-        return loadJsonStream(url, headers, payload, path, failOnError);",
                "+        return loadJsonStream(urlOrKey, headers, payload, path, failOnError);",
                "     }",
                "diff --git a/src/main/java/apoc/util/JsonUtil.java b/src/main/java/apoc/util/JsonUtil.java",
                "index 0527779c0..6a15dc46a 100755",
                "--- a/src/main/java/apoc/util/JsonUtil.java",
                "+++ b/src/main/java/apoc/util/JsonUtil.java",
                "@@ -61,2 +61,3 @@ public class JsonUtil {",
                "         try {",
                "+            url = Util.getLoadUrlByConfigFile(\"json\",url, \"url\").orElse(url);",
                "             FileUtils.checkReadAllowed(url);",
                "@@ -73,3 +74,3 @@ public class JsonUtil {",
                "             else",
                "-                throw new RuntimeException(\"Can't read url \" + u + \" as json: \"+e.getMessage(), e);",
                "+                throw new RuntimeException(\"Can't read url or key \" + u + \" as json: \"+e.getMessage());",
                "         }",
                "diff --git a/src/main/java/apoc/util/UrlResolver.java b/src/main/java/apoc/util/UrlResolver.java",
                "index ad38e8d99..3f5ce4937 100644",
                "--- a/src/main/java/apoc/util/UrlResolver.java",
                "+++ b/src/main/java/apoc/util/UrlResolver.java",
                "@@ -31,7 +31,7 @@ public class UrlResolver {",
                "     public String getConfiguredUrl(String prefix, String key) {",
                "-        String base = prefix + \".\" + key + (key == null || key.isEmpty() ? \"\" : \".\");",
                "-        String url = ApocConfiguration.get(base + \"url\", null);",
                "-        if (url != null) return url;",
                "-        String host = ApocConfiguration.get(base + \"host\", null);",
                "-        return resolveHost(host);",
                "+        String url = Util.getLoadUrlByConfigFile(prefix, key, \"url\")",
                "+                .orElse(Util.getLoadUrlByConfigFile(prefix, key, \"host\")",
                "+                        .map(this::resolveHost)",
                "+                        .orElse(null));",
                "+        return url;",
                "     }",
                "diff --git a/src/main/java/apoc/util/Util.java b/src/main/java/apoc/util/Util.java",
                "index b2dd77a06..02f22d651 100644",
                "--- a/src/main/java/apoc/util/Util.java",
                "+++ b/src/main/java/apoc/util/Util.java",
                "@@ -7,2 +7,3 @@ import apoc.path.RelationshipTypeAndDirections;",
                " import org.apache.commons.io.IOUtils;",
                "+import org.apache.commons.lang.StringUtils;",
                " import org.neo4j.collection.primitive.PrimitiveLongIterator;",
                "@@ -527,3 +528,3 @@ public class Util {",
                "         } catch (MalformedURLException mfu) {",
                "-            return \"invalid URL\";",
                "+            return String.format(\"invalid URL (%s)\", url);",
                "         }",
                "@@ -689,7 +690,14 @@ public class Util {",
                "             boolean success = queue.offer(item, timeoutSeconds, TimeUnit.SECONDS);",
                "-            if (!success) throw new RuntimeException(\"Error queuing item before timeout of \"+timeoutSeconds+\" seconds\");",
                "+            if (!success)",
                "+                throw new RuntimeException(\"Error queuing item before timeout of \" + timeoutSeconds + \" seconds\");",
                "         } catch (InterruptedException e) {",
                "-            throw new RuntimeException(\"Queue offer interrupted before \"+timeoutSeconds+\" seconds\",e);",
                "+            throw new RuntimeException(\"Queue offer interrupted before \" + timeoutSeconds + \" seconds\", e);",
                "         }",
                "     }",
                "+",
                "+    public static Optional<String> getLoadUrlByConfigFile(String loadType, String key, String suffix){",
                "+        key = Optional.ofNullable(key).map(s -> s + \".\" + suffix).orElse(StringUtils.EMPTY);",
                "+        Object value = ApocConfiguration.get(loadType).get(key);",
                "+        return Optional.ofNullable(value).map(Object::toString);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "docs/loadjson.adoc",
                "src/main/java/apoc/load/Jdbc.java",
                "src/main/java/apoc/load/LoadJson.java",
                "src/main/java/apoc/util/JsonUtil.java",
                "src/main/java/apoc/util/UrlResolver.java",
                "src/main/java/apoc/util/Util.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "816": "",
                "984": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6bb4a3752be4d25f9e863e297329155672288d19"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 816, 984",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3ea605a2a1fb3f215b7b69c184d56a00b64bc8aa",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1557012407,
            "hunks": 2,
            "message": "Added apoc.map.(m)get and apoc.map.submap that fail on missing keys, fixes #1190",
            "diff": [
                "diff --git a/docs/asciidoc/_utilities.adoc b/docs/asciidoc/_utilities.adoc",
                "index 1d123fcd2..5048f0fd4 100644",
                "--- a/docs/asciidoc/_utilities.adoc",
                "+++ b/docs/asciidoc/_utilities.adoc",
                "@@ -72,2 +72,5 @@ endif::[]",
                " | apoc.map.values(map, [key1,key2,key3,...],[addNullsForMissing]) returns list of values indicated by the keys",
                "+| apoc.map.submap(map,keys,[[defaults]],[fail=true]) | returns submap for keys or throws exception if one of the key doesn't exist and no default value given at that position",
                "+| apoc.map.mget(map,keys,[[defaults]],[fail=true]) | returns list of values for keys or throws exception if one of the key doesn't exist and no default value given at that position",
                "+| apoc.map.get(map,key,[default],[fail=true]) | returns value for key or throws exception if key doesn't exist and no default given",
                " |===",
                "diff --git a/src/main/java/apoc/map/Maps.java b/src/main/java/apoc/map/Maps.java",
                "index 71209d979..5f1597d9f 100644",
                "--- a/src/main/java/apoc/map/Maps.java",
                "+++ b/src/main/java/apoc/map/Maps.java",
                "@@ -115,2 +115,36 @@ public class Maps {",
                "+    @UserFunction",
                "+    @Description(\"apoc.map.get(map,key,[default],[fail=true]) - returns value for key or throws exception if key doesn't exist and no default given\")",
                "+    public Object get(@Name(\"map\") Map<String,Object> map, @Name(\"key\") String key, @Name(value = \"value\", defaultValue = \"null\") Object value, @Name(value = \"fail\",defaultValue = \"true\") boolean fail) {",
                "+        if (fail && value == null && !map.containsKey(key)) throw new IllegalArgumentException(\"Key \"+key+\" is not of one of the existing keys \"+map.keySet());",
                "+        return map.getOrDefault(key, value);",
                "+    }",
                "+",
                "+    @UserFunction",
                "+    @Description(\"apoc.map.mget(map,key,[defaults],[fail=true])  - returns list of values for keys or throws exception if one of the key doesn't exist and no default value given at that position\")",
                "+    public List<Object> mget(@Name(\"map\") Map<String,Object> map, @Name(\"keys\") List<String> keys, @Name(value = \"values\", defaultValue = \"[]\") List<Object> values, @Name(value = \"fail\",defaultValue = \"true\") boolean fail) {",
                "+        if (keys==null || map==null) return null;",
                "+        int keySize = keys.size();",
                "+        List<Object> result = new ArrayList<>(keySize);",
                "+        int valuesSize = values == null ? -1 : values.size();",
                "+        for (int i = 0; i < keySize; i++) {",
                "+            result.add(get(map, keys.get(i), i < valuesSize ? values.get(i) : null,fail));",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "+    @UserFunction",
                "+    @Description(\"apoc.map.submap(map,keys,[defaults],[fail=true])  - returns submap for keys or throws exception if one of the key doesn't exist and no default value given at that position\")",
                "+    public Map<String, Object> submap(@Name(\"map\") Map<String,Object> map, @Name(\"keys\") List<String> keys, @Name(value = \"values\", defaultValue = \"[]\") List<Object> values, @Name(value = \"fail\",defaultValue = \"true\") boolean fail) {",
                "+        if (keys==null || map==null) return null;",
                "+        int keySize = keys.size();",
                "+        Map<String,Object> result = new LinkedHashMap<>(keySize);",
                "+        int valuesSize = values == null ? -1 : values.size();",
                "+        for (int i = 0; i < keySize; i++) {",
                "+            String key = keys.get(i);",
                "+            result.put(key, get(map, key, i < valuesSize ? values.get(i) : null,fail));",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "     @UserFunction"
            ],
            "changed_files": [
                "docs/asciidoc/_utilities.adoc",
                "src/main/java/apoc/map/Maps.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1190": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1a7c2bff608561a0c4e0bcf5511ba70e9398b735"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1190",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "35580845b22663925be9cc7985936834394d2687",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541687463,
            "hunks": 19,
            "message": "relative path issue on load csv,json,xml - fixes #841 #605 #706 (#966)",
            "diff": [
                "diff --git a/src/main/java/apoc/ApocConfiguration.java b/src/main/java/apoc/ApocConfiguration.java",
                "index a6a82b82d..6a0f2dfaf 100644",
                "--- a/src/main/java/apoc/ApocConfiguration.java",
                "+++ b/src/main/java/apoc/ApocConfiguration.java",
                "@@ -9,2 +9,3 @@ import java.util.HashMap;",
                " import java.util.Map;",
                "+import java.util.Optional;",
                " import java.util.regex.Pattern;",
                "@@ -29,6 +30,12 @@ public class ApocConfiguration {",
                "         Static.clear();",
                "-        Map<String, String> params = db.getDependencyResolver().resolveDependency(Config.class).getRaw();",
                "+        Config neo4jConfig = db.getDependencyResolver().resolveDependency(Config.class);",
                "+        Map<String, String> params = neo4jConfig.getRaw();",
                "         apocConfig.clear();",
                "         apocConfig.putAll(Util.subMap(params, PREFIX));",
                "-        PARAM_WHITELIST.forEach((k, v) -> apocConfig.put(v, params.get(k)) );",
                "+        PARAM_WHITELIST.forEach((k, v) -> {",
                "+            Optional<Object> configValue = neo4jConfig.getValue(k);",
                "+            if (configValue.isPresent()) {",
                "+                apocConfig.put(v, configValue.get().toString());",
                "+            }",
                "+        });",
                "         config.clear();",
                "diff --git a/src/main/java/apoc/load/Xml.java b/src/main/java/apoc/load/Xml.java",
                "index f199fc580..7e8f68547 100644",
                "--- a/src/main/java/apoc/load/Xml.java",
                "+++ b/src/main/java/apoc/load/Xml.java",
                "@@ -71,2 +71,3 @@ public class Xml {",
                "             FileUtils.checkReadAllowed(url);",
                "+            url = FileUtils.changeFileUrlIfImportDirectoryConstrained(url);",
                "@@ -123,2 +124,3 @@ public class Xml {",
                "         FileUtils.checkReadAllowed(url);",
                "+        url = FileUtils.changeFileUrlIfImportDirectoryConstrained(url);",
                "         URLConnection urlConnection = new URL(url).openConnection();",
                "diff --git a/src/main/java/apoc/util/FileUtils.java b/src/main/java/apoc/util/FileUtils.java",
                "index 900ff3a2a..e6d8c29da 100644",
                "--- a/src/main/java/apoc/util/FileUtils.java",
                "+++ b/src/main/java/apoc/util/FileUtils.java",
                "@@ -31,7 +31,7 @@ public class FileUtils {",
                "         if (fileName.matches(\"^\\\\w+:/.+\")) {",
                "-        \tif (isHdfs(fileName)) {",
                "-        \t\treturn readHdfs(fileName);",
                "-        \t} else {",
                "-        \t\treturn Util.openInputStream(fileName,null,null).asReader();",
                "-        \t}",
                "+            if (isHdfs(fileName)) {",
                "+                return readHdfs(fileName);",
                "+            } else {",
                "+                return Util.openInputStream(fileName,null,null).asReader();",
                "+            }",
                "         }",
                "@@ -44,7 +44,7 @@ public class FileUtils {",
                "         if (fileName.matches(\"^\\\\w+:/.+\")) {",
                "-        \tif (isHdfs(fileName)) {",
                "-        \t\treturn readHdfsStream(fileName);",
                "-        \t} else {",
                "-        \t\treturn Util.openInputStream(fileName,null,null);",
                "-        \t}",
                "+            if (isHdfs(fileName)) {",
                "+                return readHdfsStream(fileName);",
                "+            } else {",
                "+                return Util.openInputStream(fileName,null,null);",
                "+            }",
                "         }",
                "@@ -53,32 +53,32 @@ public class FileUtils {",
                "-\tprivate static CountingInputStream readHdfsStream(String fileName) {",
                "-\t\ttry {",
                "-\t        StreamConnection streamConnection = HDFSUtils.readFile(fileName);",
                "-\t\t\treturn new CountingInputStream(streamConnection.getInputStream(), streamConnection.getLength());",
                "-\t\t} catch (Exception e) {",
                "-\t\t\tthrow new RuntimeException(e);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate static CountingReader readHdfs(String fileName) {",
                "-\t\ttry {",
                "-\t        StreamConnection streamConnection = HDFSUtils.readFile(fileName);",
                "-\t\t\tReader reader = new BufferedReader(new InputStreamReader(streamConnection.getInputStream(), \"UTF-8\"));",
                "-\t\t\treturn new CountingReader(reader, streamConnection.getLength());",
                "-\t\t} catch (Exception e) {",
                "-\t\t\tthrow new RuntimeException(e);",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate static CountingReader readFile(String fileName) throws IOException, FileNotFoundException {",
                "-\t\tFile file = new File(fileName);",
                "+    private static CountingInputStream readHdfsStream(String fileName) {",
                "+        try {",
                "+            StreamConnection streamConnection = HDFSUtils.readFile(fileName);",
                "+            return new CountingInputStream(streamConnection.getInputStream(), streamConnection.getLength());",
                "+        } catch (Exception e) {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+    }",
                "+",
                "+    private static CountingReader readHdfs(String fileName) {",
                "+        try {",
                "+            StreamConnection streamConnection = HDFSUtils.readFile(fileName);",
                "+            Reader reader = new BufferedReader(new InputStreamReader(streamConnection.getInputStream(), \"UTF-8\"));",
                "+            return new CountingReader(reader, streamConnection.getLength());",
                "+        } catch (Exception e) {",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+    }",
                "+",
                "+    private static CountingReader readFile(String fileName) throws IOException, FileNotFoundException {",
                "+        File file = new File(fileName);",
                "         if (!file.exists() || !file.isFile() || !file.canRead()) throw new IOException(\"Cannot open file \"+fileName+\" for reading.\");",
                "         return new CountingReader(file);",
                "-\t}",
                "+    }",
                "-\tprivate static CountingInputStream readFileStream(String fileName) throws IOException, FileNotFoundException {",
                "-\t\tFile file = new File(fileName);",
                "+    private static CountingInputStream readFileStream(String fileName) throws IOException, FileNotFoundException {",
                "+        File file = new File(fileName);",
                "         if (!file.exists() || !file.isFile() || !file.canRead()) throw new IOException(\"Cannot open file \"+fileName+\" for reading.\");",
                "         return new CountingInputStream(file);",
                "-\t}",
                "+    }",
                "@@ -88,17 +88,14 @@ public class FileUtils {",
                "                 throw new RuntimeException(\"Import file \"+url+\" not enabled, please set dbms.security.allow_csv_import_from_file_urls=true in your neo4j.conf\");",
                "+",
                "             String importDir = ApocConfiguration.get(\"import.file.directory\", null);",
                "+",
                "+            URI uri = URI.create(url);",
                "+            if(uri == null) throw new RuntimeException(\"Path not valid!\");",
                "+",
                "             if (importDir != null && !importDir.isEmpty()) {",
                "                 try {",
                "-                    File dir = new File(importDir);",
                "-                    if (!dir.exists() || !dir.isDirectory() || !dir.canRead()) throw new Exception();",
                "-                    String fileAsUrl = null;",
                "-                    try { fileAsUrl = new URI(url).getPath(); } catch (Exception e) { /*no protocol*/ }",
                "-                    if (\"\".equals(fileAsUrl)){",
                "-                        String newUrl = url.replace(\"file://\", \"file:///\");",
                "-                        fileAsUrl = new URI(newUrl).getPath();",
                "-                        if (\"\".equals(fileAsUrl)) fileAsUrl=newUrl.replace(\"file://\",\"\");",
                "-                    }",
                "-                    File file = url.startsWith(importDir) ? new File(fileAsUrl) : new File(dir.getAbsolutePath(), fileAsUrl);",
                "-                    if (!file.exists() || !file.isFile() || !file.canRead()) throw new Exception();",
                "-                    return new URL(\"file\",\"\",file.getAbsolutePath()).toString();",
                "+                    String relativeFilePath = !uri.getPath().isEmpty() ? uri.getPath() : uri.getHost();",
                "+                    String absolutePath = url.startsWith(importDir) ? url : new File(importDir, relativeFilePath).getAbsolutePath();",
                "+",
                "+                    return new File(absolutePath).toURI().toString();",
                "                 } catch (Exception e){",
                "@@ -106,2 +103,8 @@ public class FileUtils {",
                "                 }",
                "+            } else {",
                "+                try {",
                "+                    return new File(uri.getPath()).toURI().toString();",
                "+                } catch (Exception e) {",
                "+                    throw new IOException(\"Cannot open file \"+url+\" for reading.\");",
                "+                }",
                "             }",
                "@@ -122,13 +125,13 @@ public class FileUtils {",
                "         Writer writer;",
                "-        ",
                "+",
                "         if (isHdfs(fileName)) {",
                "-        \ttry {",
                "-\t\t\t\twriter = new OutputStreamWriter(HDFSUtils.writeFile(fileName));",
                "-\t\t\t} catch (Exception e) {",
                "-\t\t\t\tthrow new RuntimeException(e);",
                "-\t\t\t}",
                "+            try {",
                "+                writer = new OutputStreamWriter(HDFSUtils.writeFile(fileName));",
                "+            } catch (Exception e) {",
                "+                throw new RuntimeException(e);",
                "+            }",
                "         } else {",
                "-        \twriter = fileName.equals(\"-\") ? out : new BufferedWriter(new FileWriter(fileName));",
                "+            writer = fileName.equals(\"-\") ? out : new BufferedWriter(new FileWriter(fileName));",
                "         }",
                "-        ",
                "+",
                "         return new PrintWriter(writer);",
                "@@ -179,2 +182,2 @@ public class FileUtils {",
                "     }",
                "-}",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "src/main/java/apoc/ApocConfiguration.java",
                "src/main/java/apoc/load/Xml.java",
                "src/main/java/apoc/util/FileUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "841": "",
                "605": "",
                "706": "",
                "966": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0245473600baddd3794bedc338a372aaa186539f"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 841, 605, 706, 966",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "beb2496fa0cc02e7f955cb9ec803518a5f331981",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1557771954,
            "hunks": 8,
            "message": "fixes #1177: MongoDB Connection State is not 'open' (#1201)",
            "diff": [
                "diff --git a/src/main/java/apoc/mongodb/MongoDB.java b/src/main/java/apoc/mongodb/MongoDB.java",
                "index 0891f02b4..53f6f37a8 100644",
                "--- a/src/main/java/apoc/mongodb/MongoDB.java",
                "+++ b/src/main/java/apoc/mongodb/MongoDB.java",
                "@@ -16,2 +16,4 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.function.Consumer;",
                "+import java.util.function.Function;",
                " import java.util.stream.Stream;",
                "@@ -59,8 +61,5 @@ public class MongoDB {",
                "                                  @Name(value = \"limit\", defaultValue = \"0\") Long limit) {",
                "-        try (Coll coll = getMongoColl(hostOrKey, db, collection, compatibleValues)) {",
                "-            return coll.all(query, skip, limit).map(MapResult::new); // .onClose(coll::safeClose);",
                "-        } catch (Exception e) {",
                "-            log.error(\"apoc.mongodb.get - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], compatibleValues = [\" + compatibleValues + \"], skip = [\" + skip + \"], limit = [\" + limit + \"]\", e);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        return executeMongoQuery(hostOrKey, db, collection, compatibleValues,",
                "+                coll -> coll.all(query, skip, limit).map(MapResult::new),",
                "+                e -> log.error(\"apoc.mongodb.get - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], compatibleValues = [\" + compatibleValues + \"], skip = [\" + skip + \"], limit = [\" + limit + \"]\", e));",
                "     }",
                "@@ -70,9 +69,8 @@ public class MongoDB {",
                "     public Stream<LongResult> count(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query) {",
                "-        try (Coll coll = getMongoColl(hostOrKey, db, collection, false)) {",
                "-            long count = coll.count(query);",
                "-            return Stream.of(new LongResult(count)); // .onClose(coll::safeClose);",
                "-        } catch (Exception e) {",
                "-            log.error(\"apoc.mongodb.count - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"]\",e);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        return executeMongoQuery(hostOrKey, db, collection, false,",
                "+                coll -> {",
                "+                    long count = coll.count(query);",
                "+                    return Stream.of(new LongResult(count));",
                "+                },",
                "+                e -> log.error(\"apoc.mongodb.count - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"]\",e));",
                "     }",
                "@@ -87,9 +85,8 @@ public class MongoDB {",
                "     public Stream<MapResult> first(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query, @Name(value = \"compatibleValues\", defaultValue = \"false\") boolean compatibleValues) {",
                "-        try (Coll coll = getMongoColl(hostOrKey, db, collection, compatibleValues)) {",
                "-            Map<String, Object> result = coll.first(query);",
                "-            return result == null || result.isEmpty() ? Stream.empty() : Stream.of(new MapResult(result)); // .onClose(coll::safeClose);",
                "-        } catch (Exception e) {",
                "-            log.error(\"apoc.mongodb.first - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], compatibleValues = [\" + compatibleValues + \"]\",e);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        return executeMongoQuery(hostOrKey, db, collection, compatibleValues,",
                "+                coll -> {",
                "+                    Map<String, Object> result = coll.first(query);",
                "+                    return result == null || result.isEmpty() ? Stream.empty() : Stream.of(new MapResult(result));",
                "+                },",
                "+                e -> log.error(\"apoc.mongodb.first - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], compatibleValues = [\" + compatibleValues + \"]\",e));",
                "     }",
                "@@ -107,8 +104,5 @@ public class MongoDB {",
                "                                   @Name(value = \"limit\", defaultValue = \"0\") Long limit) {",
                "-        try (Coll coll = getMongoColl(hostOrKey, db, collection, compatibleValues)) {",
                "-            return coll.find(query, project, sort, skip, limit).map(MapResult::new); // .onClose(coll::safeClose);",
                "-        } catch (Exception e) {",
                "-            log.error(\"apoc.mongodb.find - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], project = [\" + project + \"], sort = [\" + sort + \"], compatibleValues = [\" + compatibleValues + \"], skip = [\" + skip + \"], limit = [\" + limit + \"]\",e);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        return executeMongoQuery(hostOrKey, db, collection, compatibleValues,",
                "+                coll -> coll.find(query, project, sort, skip, limit).map(MapResult::new),",
                "+                e -> log.error(\"apoc.mongodb.find - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], project = [\" + project + \"], sort = [\" + sort + \"], compatibleValues = [\" + compatibleValues + \"], skip = [\" + skip + \"], limit = [\" + limit + \"]\",e));",
                "     }",
                "@@ -129,8 +123,5 @@ public class MongoDB {",
                "     public Stream<LongResult> delete(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query) {",
                "-        try (Coll coll = getMongoColl(hostOrKey, db, collection, false)) {",
                "-            return Stream.of(new LongResult(coll.delete(query))); // .onClose(coll::safeClose);",
                "-        } catch (Exception e) {",
                "-            log.error(\"apoc.mongodb.delete - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"]\",e);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        return executeMongoQuery(hostOrKey, db, collection, false,",
                "+                coll -> Stream.of(new LongResult(coll.delete(query))),",
                "+                e -> log.error(\"apoc.mongodb.delete - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"]\",e));",
                "     }",
                "@@ -140,8 +131,5 @@ public class MongoDB {",
                "     public Stream<LongResult> update(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query, @Name(\"update\") Map<String, Object> update) {",
                "-        try (Coll coll = getMongoColl(hostOrKey, db, collection, false)) {",
                "-            return Stream.of(new LongResult(coll.update(query, update))); // .onClose(coll::safeClose);",
                "-        } catch (Exception e) {",
                "-            log.error(\"apoc.mongodb.update - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], update = [\" + update + \"]\",e);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        return executeMongoQuery(hostOrKey, db, collection, false,",
                "+                coll -> Stream.of(new LongResult(coll.update(query, update))),",
                "+                e -> log.error(\"apoc.mongodb.update - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], update = [\" + update + \"]\",e));",
                "     }",
                "@@ -206,2 +194,17 @@ public class MongoDB {",
                "     }",
                "+",
                "+    private <T> Stream<T> executeMongoQuery(String hostOrKey, String db, String collection, boolean compatibleValues,",
                "+                                            Function<Coll, Stream<T>> execute, Consumer<Exception> onError) {",
                "+        Coll coll = null;",
                "+        try {",
                "+            coll = getMongoColl(hostOrKey, db, collection, compatibleValues);",
                "+            return execute.apply(coll).onClose(coll::safeClose);",
                "+        } catch (Exception e) {",
                "+            if (coll != null) {",
                "+                coll.safeClose();",
                "+            }",
                "+            onError.accept(e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/apoc/mongodb/MongoDB.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1177": "#1177 keep the mongodb connection open until stream is closed #1180 fixes #1177: MongoDB Connection State is not 'open' #1201",
                "1201": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6bb2255487c1c5e51a7a19adddd64ca64fb48474"
                ],
                [
                    "no-tag",
                    "92a5fe04e05e02e318d8cccb2b2a785d69e4f5c6"
                ]
            ],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1177, 1201",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9708ed5fcfcfa6bdb757bfe8806a7112d4f5e701",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541524031,
            "hunks": 1,
            "message": "fixes #912 - CALL apoc.schema.assert({},{}) does not drop existence constraints (#973)",
            "diff": [
                "diff --git a/src/main/java/apoc/schema/Schemas.java b/src/main/java/apoc/schema/Schemas.java",
                "index 9f2e0df0e..57cb224a3 100644",
                "--- a/src/main/java/apoc/schema/Schemas.java",
                "+++ b/src/main/java/apoc/schema/Schemas.java",
                "@@ -81,4 +81,3 @@ public class Schemas {",
                "         for (ConstraintDefinition definition : schema.getConstraints()) {",
                "-            if (!(definition.isConstraintType(ConstraintType.UNIQUENESS) || definition.isConstraintType(ConstraintType.NODE_KEY))) continue;",
                "-            String label = definition.getLabel().name();",
                "+            String label = definition.isConstraintType(ConstraintType.RELATIONSHIP_PROPERTY_EXISTENCE) ? definition.getRelationshipType().name() : definition.getLabel().name();",
                "             AssertSchemaResult info = new AssertSchemaResult(label, Iterables.asList(definition.getPropertyKeys())).unique();"
            ],
            "changed_files": [
                "src/main/java/apoc/schema/Schemas.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "912": "",
                "973": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "97fcc2caf35f922561da6d5eab4acdd25e8b8842"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 912, 973",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1a6f87007a453e8a5453e8049a2a8ebedede7b80",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541670560,
            "hunks": 4,
            "message": "Adding Neighbors stored procedures. (#932) * adding neighbors * moved large neighbors into regular, added athop procedures",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index d9fb53c4f..82bea4096 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -82,2 +82,4 @@ dependencies {",
                "+    compile group: 'org.roaringbitmap', name: 'RoaringBitmap', version: '0.7.17'",
                "+",
                "     testCompile 'net.sourceforge.jexcelapi:jxl:2.6.12'",
                "diff --git a/docs/neighbors.adoc b/docs/neighbors.adoc",
                "new file mode 100644",
                "index 000000000..45203ac85",
                "--- /dev/null",
                "+++ b/docs/neighbors.adoc",
                "@@ -0,0 +1,70 @@",
                "+== Node Neighbors",
                "+",
                "+You can find the distinct connected nodes \"n\" levels or away quickly with these following procedures.",
                "+",
                "+You can use '>' or '<' for all outgoing or incoming relationships, or specify the types you are interested in.",
                "+",
                "+[cols=\"1m,5\"]",
                "+|===",
                "+| apoc.neighbors.tohop(node, rel-direction-pattern, distance) | returns distinct nodes of the given relationships in the pattern up to a certain distance",
                "+| apoc.neighbors.tohop.count(node, rel-direction-pattern, distance) | returns the count of distinct nodes of the given relationships in the pattern up to a certain distance",
                "+| apoc.neighbors.byhop(node, rel-direction-pattern, distance) | returns distinct nodes of the given relationships in the pattern grouped by distance",
                "+| apoc.neighbors.byhop.count(node, rel-direction-pattern, distance) | returns the count distinct nodes of the given relationships in the pattern grouped by distance",
                "+| apoc.neighbors.athop(node, rel-direction-pattern, distance) | returns distinct nodes of the given relationships in the pattern at a certain distance",
                "+| apoc.neighbors.athop.count(node, rel-direction-pattern, distance) | returns the count of distinct nodes of the given relationships in the pattern at a certain distance",
                "+|===",
                "+",
                "+",
                "+",
                "+",
                "+=== Example",
                "+",
                "+.Graph Setup",
                "+[source,cypher]",
                "+----",
                "+CREATE (a:First), (b:Neighbor), (c:Neighbor), (d:Neighbor),",
                "+(a)-[:KNOWS]->(b), (b)-[:KNOWS]->(a),",
                "+(b)-[:KNOWS]->(c), (c)-[:KNOWS]->(d)",
                "+----",
                "+",
                "+[source,cypher]",
                "+----",
                "+MATCH (n:First) WITH n",
                "+CALL apoc.neighbors.tohop(n,'KNOWS>', 3) YIELD node AS neighbor",
                "+RETURN neighbor",
                "+----",
                "+",
                "+[source,cypher]",
                "+----",
                "+MATCH (n:First) WITH n",
                "+CALL apoc.neighbors.tohop.count(n,'KNOWS>', 3) YIELD value AS number",
                "+RETURN number",
                "+----",
                "+",
                "+[source,cypher]",
                "+----",
                "+MATCH (n:First) WITH n",
                "+CALL apoc.neighbors.byhop(n,'KNOWS>', 3) YIELD nodes AS neighbors",
                "+RETURN neighbors",
                "+----",
                "+",
                "+[source,cypher]",
                "+----",
                "+MATCH (n:First) WITH n",
                "+CALL apoc.neighbors.byhop.count(n,'KNOWS>', 3) YIELD value AS numbers",
                "+RETURN numbers",
                "+----",
                "+",
                "+[source,cypher]",
                "+----",
                "+MATCH (n:First) WITH n",
                "+CALL apoc.neighbors.athop(n,'KNOWS>', 3) YIELD nodes AS neighbors",
                "+RETURN neighbors",
                "+----",
                "+",
                "+[source,cypher]",
                "+----",
                "+MATCH (n:First) WITH n",
                "+CALL apoc.neighbors.athop.count(n,'KNOWS>', 3) YIELD value AS numbers",
                "+RETURN numbers",
                "+----",
                "\\ No newline at end of file",
                "diff --git a/docs/overview.adoc b/docs/overview.adoc",
                "index 284fdf0f3..461546ef9 100644",
                "--- a/docs/overview.adoc",
                "+++ b/docs/overview.adoc",
                "@@ -903,2 +903,14 @@ Example: `'FRIEND|MENTORS>|<REPORTS_TO'` will match to :FRIEND relationships in",
                "+=== Neighbor Functions",
                "+",
                "+[cols=\"1m,5\"]",
                "+|===",
                "+| apoc.neighbors.tohop(node, rel-direction-pattern, distance) | returns distinct nodes of the given relationships in the pattern up to a certain distance",
                "+| apoc.neighbors.tohop.count(node, rel-direction-pattern, distance) | returns the count of distinct nodes of the given relationships in the pattern up to a certain distance",
                "+| apoc.neighbors.byhop(node, rel-direction-pattern, distance) | returns distinct nodes of the given relationships in the pattern grouped by distance",
                "+| apoc.neighbors.byhop.count(node, rel-direction-pattern, distance) | returns the count distinct nodes of the given relationships in the pattern grouped by distance",
                "+| apoc.neighbors.athop(node, rel-direction-pattern, distance) | returns distinct nodes of the given relationships in the pattern at a certain distance",
                "+| apoc.neighbors.athop.count(node, rel-direction-pattern, distance) | returns the count of distinct nodes of the given relationships in the pattern at a certain distance",
                "+|===",
                "+",
                "diff --git a/src/main/java/apoc/neighbors/Neighbors.java b/src/main/java/apoc/neighbors/Neighbors.java",
                "new file mode 100644",
                "index 000000000..fec1232ea",
                "--- /dev/null",
                "+++ b/src/main/java/apoc/neighbors/Neighbors.java",
                "@@ -0,0 +1,327 @@",
                "+package apoc.neighbors;",
                "+",
                "+import apoc.result.*;",
                "+import org.neo4j.graphdb.*;",
                "+import org.neo4j.graphdb.Node;",
                "+import org.neo4j.helpers.collection.Pair;",
                "+import org.neo4j.procedure.*;",
                "+import org.roaringbitmap.RoaringBitmap;",
                "+import org.roaringbitmap.longlong.LongBitmapDataProvider;",
                "+import org.roaringbitmap.longlong.Roaring64NavigableMap;",
                "+",
                "+import java.util.*;",
                "+import java.util.stream.*;",
                "+",
                "+import static apoc.path.RelationshipTypeAndDirections.parse;",
                "+",
                "+public class Neighbors {",
                "+",
                "+    @Context",
                "+    public GraphDatabaseService db;",
                "+",
                "+    @Procedure(\"apoc.neighbors.tohop\")",
                "+    @Description(\"apoc.neighbors.tohop(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern up to a certain distance, can use '>' or '<' for all outgoing or incoming relationships\")",
                "+    public Stream<NodeResult> neighbors(@Name(\"node\") Node node, @Name(value = \"types\", defaultValue = \"\") String types, @Name(value=\"distance\", defaultValue = \"1\") Long distance) {",
                "+        if (distance < 1) return Stream.empty();",
                "+        if (types==null || types.isEmpty()) return Stream.empty();",
                "+",
                "+        // Initialize bitmaps for iteration",
                "+        Roaring64NavigableMap seen = new Roaring64NavigableMap();",
                "+        Roaring64NavigableMap nextA = new Roaring64NavigableMap();",
                "+        Roaring64NavigableMap nextB = new Roaring64NavigableMap();",
                "+        long nodeId = node.getId();",
                "+        seen.addLong(nodeId);",
                "+        Iterator<Long> iterator;",
                "+",
                "+        // First Hop",
                "+        for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+            for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                nextB.addLong(r.getOtherNodeId(nodeId));",
                "+            }",
                "+        }",
                "+",
                "+        for(int i = 1; i < distance; i++) {",
                "+            // next even Hop",
                "+            nextB.andNot(seen);",
                "+            seen.or(nextB);",
                "+            nextA.clear();",
                "+            iterator = nextB.iterator();",
                "+            while (iterator.hasNext()) {",
                "+                nodeId = iterator.next();",
                "+                node = db.getNodeById(nodeId);",
                "+                for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                    for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                        nextA.add((r.getOtherNodeId(nodeId)));",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            i++;",
                "+            if (i < distance) {",
                "+                // next odd Hop",
                "+                nextA.andNot(seen);",
                "+                seen.or(nextA);",
                "+                nextB.clear();",
                "+                iterator = nextA.iterator();",
                "+                while (iterator.hasNext()) {",
                "+                    nodeId = iterator.next();",
                "+                    node = db.getNodeById(nodeId);",
                "+                    for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                        for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                            nextB.add(r.getOtherNodeId(nodeId));",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+        if((distance % 2) == 0) {",
                "+            seen.or(nextA);",
                "+        } else {",
                "+            seen.or(nextB);",
                "+        }",
                "+        // remove starting node",
                "+        seen.removeLong(node.getId());",
                "+",
                "+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(seen.iterator(), Spliterator.SORTED), false)",
                "+                .map(x -> new NodeResult(db.getNodeById(x)));",
                "+    }",
                "+",
                "+    @Procedure(\"apoc.neighbors.tohop.count\")",
                "+    @Description(\"apoc.neighbors.tohop.count(node, rel-direction-pattern, distance) - returns distinct count of nodes of the given relationships in the pattern up to a certain distance, can use '>' or '<' for all outgoing or incoming relationships\")",
                "+    public Stream<LongResult> neighborsCount(@Name(\"node\") Node node, @Name(value = \"types\", defaultValue = \"\") String types, @Name(value=\"distance\", defaultValue = \"1\") Long distance) {",
                "+        if (distance < 1) return Stream.empty();",
                "+        if (types==null || types.isEmpty()) return Stream.empty();",
                "+",
                "+        // Initialize bitmaps for iteration",
                "+        Roaring64NavigableMap seen = new Roaring64NavigableMap();",
                "+        Roaring64NavigableMap nextA = new Roaring64NavigableMap();",
                "+        Roaring64NavigableMap nextB = new Roaring64NavigableMap();",
                "+        long nodeId = node.getId();",
                "+        seen.add(nodeId);",
                "+        Iterator<Long> iterator;",
                "+",
                "+        // First Hop",
                "+        for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+            for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                nextB.add(r.getOtherNodeId(nodeId));",
                "+            }",
                "+        }",
                "+",
                "+        for(int i = 1; i < distance; i++) {",
                "+            // next even Hop",
                "+            nextB.andNot(seen);",
                "+            seen.or(nextB);",
                "+            nextA.clear();",
                "+            iterator = nextB.iterator();",
                "+            while (iterator.hasNext()) {",
                "+                nodeId = iterator.next();",
                "+                node = db.getNodeById(nodeId);",
                "+                for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                    for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                        nextA.add(r.getOtherNodeId(nodeId));",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            i++;",
                "+            if (i < distance) {",
                "+                // next odd Hop",
                "+                nextA.andNot(seen);",
                "+                seen.or(nextA);",
                "+                nextB.clear();",
                "+                iterator = nextA.iterator();",
                "+                while (iterator.hasNext()) {",
                "+                    nodeId = iterator.next();",
                "+                    node = db.getNodeById(nodeId);",
                "+                    for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                        for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                            nextB.add(r.getOtherNodeId(nodeId));",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+        if((distance % 2) == 0) {",
                "+            seen.or(nextA);",
                "+        } else {",
                "+            seen.or(nextB);",
                "+        }",
                "+        // remove starting node",
                "+        seen.removeLong(node.getId());",
                "+",
                "+        return Stream.of(new LongResult(seen.getLongCardinality()));",
                "+    }",
                "+",
                "+    @Procedure(\"apoc.neighbors.byhop\")",
                "+    @Description(\"apoc.neighbors.byhop(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at each distance, can use '>' or '<' for all outgoing or incoming relationships\")",
                "+    public Stream<NodeListResult> neighborsByHop(@Name(\"node\") Node node, @Name(value = \"types\", defaultValue = \"\") String types, @Name(value=\"distance\", defaultValue = \"1\") Long distance) {",
                "+        if (distance < 1) return Stream.empty();",
                "+        if (types==null || types.isEmpty()) return Stream.empty();",
                "+",
                "+        // Initialize bitmaps for iteration",
                "+        Roaring64NavigableMap[] seen = new Roaring64NavigableMap[distance.intValue()];",
                "+        for(int i = 0; i < distance; i++) {",
                "+            seen[i] = new Roaring64NavigableMap();",
                "+        }",
                "+        long nodeId = node.getId();",
                "+",
                "+        Iterator<Long> iterator;",
                "+",
                "+        // First Hop",
                "+        for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+            for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                seen[0].add(r.getOtherNodeId(nodeId));",
                "+            }",
                "+        }",
                "+",
                "+        for(int i = 1; i < distance; i++) {",
                "+            iterator = seen[i-1].iterator();",
                "+            while (iterator.hasNext()) {",
                "+                node = db.getNodeById(iterator.next());",
                "+                for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                    for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                        seen[i].add(r.getOtherNodeId(node.getId()));",
                "+                    }",
                "+                }",
                "+            }",
                "+            for(int j = 0; j < i; j++){",
                "+                seen[i].andNot(seen[j]);",
                "+                seen[i].removeLong(nodeId);",
                "+            }",
                "+        }",
                "+",
                "+        return Arrays.stream(seen).map(x -> new NodeListResult(",
                "+                StreamSupport.stream(Spliterators.spliteratorUnknownSize(x.iterator(), Spliterator.SORTED), false)",
                "+                        .map(y -> db.getNodeById((long) y))",
                "+                        .collect(Collectors.toList())));",
                "+    }",
                "+",
                "+    @Procedure(\"apoc.neighbors.byhop.count\")",
                "+    @Description(\"apoc.neighbors.byhop.count(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at each distance, can use '>' or '<' for all outgoing or incoming relationships\")",
                "+    public Stream<ListResult> neighborsByHopCount(@Name(\"node\") Node node, @Name(value = \"types\", defaultValue = \"\") String types, @Name(value=\"distance\", defaultValue = \"1\") Long distance) {",
                "+        if (distance < 1) return Stream.empty();",
                "+        if (types==null || types.isEmpty()) return Stream.empty();",
                "+",
                "+        // Initialize bitmaps for iteration",
                "+        Roaring64NavigableMap[] seen = new Roaring64NavigableMap[distance.intValue()];",
                "+        for(int i = 0; i < distance; i++) {",
                "+            seen[i] = new Roaring64NavigableMap();",
                "+        }",
                "+        long nodeId = node.getId();",
                "+",
                "+        Iterator<Long> iterator;",
                "+",
                "+        // First Hop",
                "+        for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+            for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                seen[0].add(r.getOtherNodeId(nodeId));",
                "+            }",
                "+        }",
                "+",
                "+        for(int i = 1; i < distance; i++) {",
                "+            iterator = seen[i-1].iterator();",
                "+            while (iterator.hasNext()) {",
                "+                node = db.getNodeById(iterator.next());",
                "+                for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                    for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                        seen[i].add(r.getOtherNodeId(node.getId()));",
                "+                    }",
                "+                }",
                "+            }",
                "+            for(int j = 0; j < i; j++){",
                "+                seen[i].andNot(seen[j]);",
                "+                seen[i].removeLong(nodeId);",
                "+            }",
                "+        }",
                "+",
                "+        ArrayList counts = new ArrayList<Long>();",
                "+        for(int i = 0; i < distance; i++) {",
                "+            counts.add(seen[i].getLongCardinality());",
                "+        }",
                "+",
                "+        return Stream.of(new ListResult(counts));",
                "+    }",
                "+",
                "+    @Procedure(\"apoc.neighbors.athop\")",
                "+    @Description(\"apoc.neighbors.athop(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at a distance, can use '>' or '<' for all outgoing or incoming relationships\")",
                "+    public Stream<NodeResult> neighborsAtHop(@Name(\"node\") Node node, @Name(value = \"types\", defaultValue = \"\") String types, @Name(value=\"distance\", defaultValue = \"1\") Long distance) {",
                "+        if (distance < 1) return Stream.empty();",
                "+        if (types==null || types.isEmpty()) return Stream.empty();",
                "+",
                "+        // Initialize bitmaps for iteration",
                "+        Roaring64NavigableMap[] seen = new Roaring64NavigableMap[distance.intValue()];",
                "+        for(int i = 0; i < distance; i++) {",
                "+            seen[i] = new Roaring64NavigableMap();",
                "+        }",
                "+        long nodeId = node.getId();",
                "+",
                "+        Iterator<Long> iterator;",
                "+",
                "+        // First Hop",
                "+        for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+            for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                seen[0].add(r.getOtherNodeId(nodeId));",
                "+            }",
                "+        }",
                "+",
                "+        for(int i = 1; i < distance; i++) {",
                "+            iterator = seen[i-1].iterator();",
                "+            while (iterator.hasNext()) {",
                "+                node = db.getNodeById(iterator.next());",
                "+                for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                    for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                        seen[i].add(r.getOtherNodeId(node.getId()));",
                "+                    }",
                "+                }",
                "+            }",
                "+            for(int j = 0; j < i; j++){",
                "+                seen[i].andNot(seen[j]);",
                "+                seen[i].removeLong(nodeId);",
                "+            }",
                "+        }",
                "+",
                "+        return StreamSupport",
                "+                .stream(Spliterators.spliteratorUnknownSize(seen[distance.intValue() - 1].iterator(), Spliterator.SORTED), false).map(y -> new NodeResult(db.getNodeById(y)));",
                "+    }",
                "+",
                "+    @Procedure(\"apoc.neighbors.athop.count\")",
                "+    @Description(\"apoc.neighbors.athop.count(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at a distance, can use '>' or '<' for all outgoing or incoming relationships\")",
                "+    public Stream<LongResult> neighborsAtHopCount(@Name(\"node\") Node node, @Name(value = \"types\", defaultValue = \"\") String types, @Name(value=\"distance\", defaultValue = \"1\") Long distance) {",
                "+        if (distance < 1) return Stream.empty();",
                "+        if (types == null || types.isEmpty()) return Stream.empty();",
                "+",
                "+        // Initialize bitmaps for iteration",
                "+        Roaring64NavigableMap[] seen = new Roaring64NavigableMap[distance.intValue()];",
                "+        for (int i = 0; i < distance; i++) {",
                "+            seen[i] = new Roaring64NavigableMap();",
                "+        }",
                "+        long nodeId = node.getId();",
                "+",
                "+        Iterator<Long> iterator;",
                "+",
                "+        // First Hop",
                "+        for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+            for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                seen[0].add(r.getOtherNodeId(nodeId));",
                "+            }",
                "+        }",
                "+",
                "+        for (int i = 1; i < distance; i++) {",
                "+            iterator = seen[i - 1].iterator();",
                "+            while (iterator.hasNext()) {",
                "+                node = db.getNodeById(iterator.next());",
                "+                for (Pair<RelationshipType, Direction> pair : parse(types)) {",
                "+                    for (Relationship r : node.getRelationships(pair.first(), pair.other())) {",
                "+                        seen[i].add(r.getOtherNodeId(node.getId()));",
                "+                    }",
                "+                }",
                "+            }",
                "+            for (int j = 0; j < i; j++) {",
                "+                seen[i].andNot(seen[j]);",
                "+                seen[i].removeLong(nodeId);",
                "+            }",
                "+        }",
                "+",
                "+        return Stream.of(new LongResult(seen[distance.intValue() - 1].getLongCardinality()));",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "build.gradle",
                "docs/neighbors.adoc",
                "docs/overview.adoc",
                "src/main/java/apoc/neighbors/Neighbors.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "932": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e0158cdb958d24b698d2530d542ad2c9964062d"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 932",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "14b85ad0d9a4d95cd4ebd45a5868654d727ffe75",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558618702,
            "hunks": 4,
            "message": "fixes #1194 - Adds ignoreQuotations configuration to apoc.load.csv (#1197)",
            "diff": [
                "diff --git a/src/main/java/apoc/load/LoadCsv.java b/src/main/java/apoc/load/LoadCsv.java",
                "index 43807ecc4..02dd74fe9 100644",
                "--- a/src/main/java/apoc/load/LoadCsv.java",
                "+++ b/src/main/java/apoc/load/LoadCsv.java",
                "@@ -49,2 +49,3 @@ public class LoadCsv {",
                "                             .withSeparator(config.getSeparator())",
                "+                            .withIgnoreQuotations( config.isIgnoreQuotations() )",
                "                             .build())",
                "diff --git a/src/main/java/apoc/load/util/LoadCsvConfig.java b/src/main/java/apoc/load/util/LoadCsvConfig.java",
                "index 8befc8de0..8a3c35c8e 100644",
                "--- a/src/main/java/apoc/load/util/LoadCsvConfig.java",
                "+++ b/src/main/java/apoc/load/util/LoadCsvConfig.java",
                "@@ -24,2 +24,3 @@ public class LoadCsvConfig {",
                "     private boolean failOnError;",
                "+    private boolean ignoreQuotations;",
                "@@ -47,2 +48,3 @@ public class LoadCsvConfig {",
                "         failOnError = (boolean) config.getOrDefault(\"failOnError\", true);",
                "+        ignoreQuotations = (boolean) config.getOrDefault(\"ignoreQuotations\", false);",
                "@@ -117,2 +119,6 @@ public class LoadCsvConfig {",
                "     }",
                "+",
                "+    public boolean isIgnoreQuotations() {",
                "+        return ignoreQuotations;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/apoc/load/LoadCsv.java",
                "src/main/java/apoc/load/util/LoadCsvConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1194": "Story 1194 3.4 ignore quotations #1195 fixes #1194 - Adds ignoreQuotations configuration to apoc.load.csv - Branch 3.5 #1196 fixes #1194 - Adds ignoreQuotations configuration to apoc.load.csv - Branch 3.4 #1197",
                "1197": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eaf2357a5d3bfae8352306390102515175360648"
                ]
            ],
            "tags": [
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1194, 1197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "17c858a83cc94f9b8a239430876742ad8bc10b65",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542220307,
            "hunks": 13,
            "message": "fixes #830 - Help me with apoc (mongodb) (#989)",
            "diff": [
                "diff --git a/src/main/java/apoc/mongodb/MongoDB.java b/src/main/java/apoc/mongodb/MongoDB.java",
                "index 098be30e9..abb3b6a7c 100644",
                "--- a/src/main/java/apoc/mongodb/MongoDB.java",
                "+++ b/src/main/java/apoc/mongodb/MongoDB.java",
                "@@ -6,2 +6,4 @@ import apoc.util.MissingDependencyException;",
                " import apoc.util.UrlResolver;",
                "+import org.neo4j.logging.Log;",
                "+import org.neo4j.procedure.Context;",
                " import org.neo4j.procedure.Description;",
                "@@ -10,3 +12,2 @@ import org.neo4j.procedure.Procedure;",
                "-import java.io.Closeable;",
                " import java.lang.reflect.InvocationTargetException;",
                "@@ -46,2 +47,5 @@ public class MongoDB {",
                "+    @Context",
                "+    public Log log;",
                "+",
                "     @Procedure",
                "@@ -54,3 +58,8 @@ public class MongoDB {",
                "                                  @Name(value = \"limit\", defaultValue = \"0\") Long limit) {",
                "-        return getMongoColl(hostOrKey, db, collection, compatibleValues).all(query, skip, limit).map(MapResult::new);",
                "+        try (Coll coll = getMongoColl(hostOrKey, db, collection, compatibleValues)) {",
                "+            return coll.all(query, skip, limit).map(MapResult::new).onClose(coll::safeClose);",
                "+        } catch (Exception e) {",
                "+            log.error(\"apoc.mongodb.get - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], compatibleValues = [\" + compatibleValues + \"], skip = [\" + skip + \"], limit = [\" + limit + \"]\", e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "@@ -60,4 +69,9 @@ public class MongoDB {",
                "     public Stream<LongResult> count(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query) {",
                "-        long count = getMongoColl(hostOrKey, db, collection, false).count(query);",
                "-        return Stream.of(new LongResult(count));",
                "+        try (Coll coll = getMongoColl(hostOrKey, db, collection, false)) {",
                "+            long count = coll.count(query);",
                "+            return Stream.of(new LongResult(count)).onClose(coll::safeClose);",
                "+        } catch (Exception e) {",
                "+            log.error(\"apoc.mongodb.count - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"]\",e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "@@ -72,4 +86,9 @@ public class MongoDB {",
                "     public Stream<MapResult> first(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query, @Name(value = \"compatibleValues\", defaultValue = \"false\") boolean compatibleValues) {",
                "-        Map<String, Object> result = getMongoColl(hostOrKey, db, collection, compatibleValues).first(query);",
                "-        return Stream.of(new MapResult(result));",
                "+        try (Coll coll = getMongoColl(hostOrKey, db, collection, compatibleValues)) {",
                "+            Map<String, Object> result = coll.first(query);",
                "+            return Stream.of(new MapResult(result)).onClose(coll::safeClose);",
                "+        } catch (Exception e) {",
                "+            log.error(\"apoc.mongodb.first - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], compatibleValues = [\" + compatibleValues + \"]\",e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "@@ -87,3 +106,8 @@ public class MongoDB {",
                "                                   @Name(value = \"limit\", defaultValue = \"0\") Long limit) {",
                "-        return getMongoColl(hostOrKey, db, collection, compatibleValues).find(query, project, sort, skip, limit).map(MapResult::new);",
                "+        try (Coll coll = getMongoColl(hostOrKey, db, collection, compatibleValues)) {",
                "+            return coll.find(query, project, sort, skip, limit).map(MapResult::new).onClose(coll::safeClose);",
                "+        } catch (Exception e) {",
                "+            log.error(\"apoc.mongodb.find - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], project = [\" + project + \"], sort = [\" + sort + \"], compatibleValues = [\" + compatibleValues + \"], skip = [\" + skip + \"], limit = [\" + limit + \"]\",e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "@@ -93,3 +117,8 @@ public class MongoDB {",
                "     public void insert(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"documents\") List<Map<String, Object>> documents) {",
                "-        getMongoColl(hostOrKey, db, collection, false).insert(documents);",
                "+        try (Coll coll = getMongoColl(hostOrKey, db, collection, false)) {",
                "+            coll.insert(documents);",
                "+        } catch (Exception e) {",
                "+            log.error(\"apoc.mongodb.insert - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], documents = [\" + documents + \"]\",e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "@@ -99,3 +128,8 @@ public class MongoDB {",
                "     public Stream<LongResult> delete(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query) {",
                "-        return Stream.of(new LongResult(getMongoColl(hostOrKey, db, collection, false).delete(query)));",
                "+        try (Coll coll = getMongoColl(hostOrKey, db, collection, false)) {",
                "+            return Stream.of(new LongResult(coll.delete(query))).onClose(coll::safeClose);",
                "+        } catch (Exception e) {",
                "+            log.error(\"apoc.mongodb.delete - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"]\",e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "@@ -105,3 +139,8 @@ public class MongoDB {",
                "     public Stream<LongResult> update(@Name(\"host\") String hostOrKey, @Name(\"db\") String db, @Name(\"collection\") String collection, @Name(\"query\") Map<String, Object> query, @Name(\"update\") Map<String, Object> update) {",
                "-        return Stream.of(new LongResult(getMongoColl(hostOrKey, db, collection, false).update(query, update)));",
                "+        try (Coll coll = getMongoColl(hostOrKey, db, collection, false)) {",
                "+            return Stream.of(new LongResult(coll.update(query, update))).onClose(coll::safeClose);",
                "+        } catch (Exception e) {",
                "+            log.error(\"apoc.mongodb.update - hostOrKey = [\" + hostOrKey + \"], db = [\" + db + \"], collection = [\" + collection + \"], query = [\" + query + \"], update = [\" + update + \"]\",e);",
                "+            throw new RuntimeException(e);",
                "+        }",
                "     }",
                "@@ -132,3 +171,3 @@ public class MongoDB {",
                "-    interface Coll extends Closeable {",
                "+    interface Coll extends AutoCloseable {",
                "         Map<String, Object> first(Map<String, Object> params);",
                "@@ -147,2 +186,4 @@ public class MongoDB {",
                "+        void safeClose();",
                "+",
                "         class Factory {",
                "diff --git a/src/main/java/apoc/mongodb/MongoDBColl.java b/src/main/java/apoc/mongodb/MongoDBColl.java",
                "index 31d57961b..761c861a8 100644",
                "--- a/src/main/java/apoc/mongodb/MongoDBColl.java",
                "+++ b/src/main/java/apoc/mongodb/MongoDBColl.java",
                "@@ -146,2 +146,11 @@ class MongoDBColl implements MongoDB.Coll {",
                "     }",
                "+",
                "+    @Override",
                "+    public void safeClose() {",
                "+        try{",
                "+            this.close();",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "src/main/java/apoc/mongodb/MongoDB.java",
                "src/main/java/apoc/mongodb/MongoDBColl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "830": "",
                "989": "fixes #907: Add TestContainer Integration #1032"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9bb72d9e5df8bc25397aa1b80fae549473a53675"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 830, 989",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e014633430886a9c8794b98a2e541a632feea58d",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541502454,
            "hunks": 7,
            "message": "fixes #789 - APOC Intersection JSON Number parsing issue (#967)",
            "diff": [
                "diff --git a/src/main/java/apoc/util/JsonUtil.java b/src/main/java/apoc/util/JsonUtil.java",
                "index 2c9a66059..0527779c0 100644",
                "--- a/src/main/java/apoc/util/JsonUtil.java",
                "+++ b/src/main/java/apoc/util/JsonUtil.java",
                "@@ -2,2 +2,6 @@ package apoc.util;",
                "+import com.fasterxml.jackson.core.JsonParser;",
                "+import com.fasterxml.jackson.databind.DeserializationFeature;",
                "+import com.fasterxml.jackson.databind.MappingIterator;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                " import com.jayway.jsonpath.Configuration;",
                "@@ -5,5 +9,4 @@ import com.jayway.jsonpath.JsonPath;",
                " import com.jayway.jsonpath.Option;",
                "-import org.codehaus.jackson.JsonParser;",
                "-import org.codehaus.jackson.map.MappingIterator;",
                "-import org.codehaus.jackson.map.ObjectMapper;",
                "+import com.jayway.jsonpath.spi.json.JacksonJsonProvider;",
                "+import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;",
                " import org.neo4j.procedure.Name;",
                "@@ -25,3 +28,3 @@ public class JsonUtil {",
                "     public static Object TOMB = new Object();",
                "-    private static final Configuration JSON_PATH_CONFIG = Configuration.builder().options(Option.DEFAULT_PATH_LEAF_TO_NULL, Option.SUPPRESS_EXCEPTIONS).build();",
                "+    private static final Configuration JSON_PATH_CONFIG;",
                "     static {",
                "@@ -34,2 +37,8 @@ public class JsonUtil {",
                "         OBJECT_MAPPER.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);",
                "+        OBJECT_MAPPER.enable(DeserializationFeature.USE_LONG_FOR_INTS);",
                "+        JSON_PATH_CONFIG = Configuration.builder()",
                "+                .options(Option.DEFAULT_PATH_LEAF_TO_NULL, Option.SUPPRESS_EXCEPTIONS)",
                "+                .jsonProvider(new JacksonJsonProvider(OBJECT_MAPPER))",
                "+                .mappingProvider(new JacksonMappingProvider(OBJECT_MAPPER))",
                "+                .build();",
                "     }",
                "@@ -55,3 +64,3 @@ public class JsonUtil {",
                "             InputStream input = Util.openInputStream(url, headers, payload);",
                "-            JsonParser parser = OBJECT_MAPPER.getJsonFactory().createJsonParser(input);",
                "+            JsonParser parser = OBJECT_MAPPER.getFactory().createParser(input);",
                "             MappingIterator<Object> it = OBJECT_MAPPER.readValues(parser, Object.class);",
                "@@ -75,4 +84,6 @@ public class JsonUtil {",
                "         try {",
                "-            if (path == null || path.isEmpty()) return OBJECT_MAPPER.readValue(json, type);",
                "-            return JsonPath.parse(json,JSON_PATH_CONFIG).read(path,type);",
                "+            if (path == null || path.isEmpty()) {",
                "+                return OBJECT_MAPPER.readValue(json, type);",
                "+            }",
                "+            return JsonPath.parse(json,JSON_PATH_CONFIG).read(path, type);",
                "         } catch (IOException e) {",
                "@@ -81,2 +92,2 @@ public class JsonUtil {",
                "     }",
                "-}",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "src/main/java/apoc/util/JsonUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "789": "",
                "967": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "60affd8eb7c53a3be0ae840eccb8e033e664c449"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 789, 967",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1d4956f80d4f19635136a9c971d5127b14729847",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541516653,
            "hunks": 5,
            "message": "Added apoc.trigger.removeAll, fixes #974",
            "diff": [
                "diff --git a/docs/overview.adoc b/docs/overview.adoc",
                "index 03d33e974..284fdf0f3 100644",
                "--- a/docs/overview.adoc",
                "+++ b/docs/overview.adoc",
                "@@ -662,2 +662,3 @@ Enable `apoc.trigger.enabled=true` in `$NEO4J_HOME/config/neo4j.conf` first.",
                " | CALL apoc.trigger.remove(name) yield name, statement, installed | remove previously added trigger, returns trigger information",
                "+| CALL apoc.trigger.removeAll() yield name, statement, installed | removes all previously added triggers , returns trigger information",
                " | CALL apoc.trigger.list() yield name, statement, installed | update and list all installed triggers",
                "diff --git a/docs/trigger.adoc b/docs/trigger.adoc",
                "index 678986123..d06377661 100644",
                "--- a/docs/trigger.adoc",
                "+++ b/docs/trigger.adoc",
                "@@ -9,2 +9,3 @@ Enable `apoc.trigger.enabled=true` in `$NEO4J_HOME/config/neo4j.conf` first.",
                " | CALL apoc.trigger.remove(name) yield name, statement, installed | remove previously added trigger, returns trigger information",
                "+| CALL apoc.trigger.removeAll() yield name, statement, installed | removes all previously added triggers , returns trigger information",
                " | CALL apoc.trigger.list() yield name, statement, installed | update and list all installed triggers",
                "diff --git a/src/main/java/apoc/trigger/Trigger.java b/src/main/java/apoc/trigger/Trigger.java",
                "index 1898ffdba..6b7d83efe 100644",
                "--- a/src/main/java/apoc/trigger/Trigger.java",
                "+++ b/src/main/java/apoc/trigger/Trigger.java",
                "@@ -119,3 +119,3 @@ public class Trigger {",
                "         if (removed == null) {",
                "-            Stream.of(new TriggerInfo(name, null, null, false, false));",
                "+            return Stream.of(new TriggerInfo(name, null, null, false, false));",
                "         }",
                "@@ -124,2 +124,25 @@ public class Trigger {",
                "+    @Procedure(mode = Mode.WRITE)",
                "+    @Description(\"removes all previously added trigger, returns trigger information\")",
                "+    public Stream<TriggerInfo> removeAll() {",
                "+        Map<String, Object> removed = TriggerHandler.removeAll();",
                "+        if (removed == null) {",
                "+            return Stream.of(new TriggerInfo(null, null, null, false, false));",
                "+        }",
                "+        return removed.entrySet().stream().map(this::toTriggerInfo);",
                "+    }",
                "+",
                "+    public TriggerInfo toTriggerInfo(Map.Entry<String, Object> e) {",
                "+        String name = e.getKey();",
                "+        if (e.getValue() instanceof Map) {",
                "+            try {",
                "+                Map<String, Object> value = (Map<String, Object>) e.getValue();",
                "+                return new TriggerInfo(name, (String) value.get(\"kernelTransaction\"), (Map<String, Object>) value.get(\"selector\"), (Map<String, Object>) value.get(\"params\"), false, false);",
                "+            } catch(Exception ex) {",
                "+                return new TriggerInfo(name, ex.getMessage(), null, false, false);",
                "+            }",
                "+        }",
                "+        return new TriggerInfo(name, null, null, false, false);",
                "+    }",
                "+",
                "     @Procedure(mode = Mode.WRITE)",
                "@@ -219,2 +242,13 @@ public class Trigger {",
                "+        public synchronized static Map<String, Object> removeAll() {",
                "+            try (Transaction tx = properties.getGraphDatabase().beginTx()) {",
                "+                triggers.clear();",
                "+                String previous = (String) properties.removeProperty(APOC_TRIGGER);",
                "+                tx.success();",
                "+                return previous == null ? null : Util.fromJson(previous, Map.class);",
                "+            } catch (Exception e) {",
                "+                return null;",
                "+            }",
                "+        }",
                "+",
                "         public static Map<String,Map<String,Object>> list() {"
            ],
            "changed_files": [
                "docs/overview.adoc",
                "docs/trigger.adoc",
                "src/main/java/apoc/trigger/Trigger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "974": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d969cd132fb75b045cd66835828349576f5aca92"
                ]
            ],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 974",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a5ca9c610b968e953cea22c6e3d10e60f040a2dd",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542793447,
            "hunks": 31,
            "message": "Better null handling for collection functions",
            "diff": [
                "diff --git a/src/main/java/apoc/coll/Coll.java b/src/main/java/apoc/coll/Coll.java",
                "index 53a8b9d68..a47518607 100644",
                "--- a/src/main/java/apoc/coll/Coll.java",
                "+++ b/src/main/java/apoc/coll/Coll.java",
                "@@ -39,2 +39,4 @@ public class Coll {",
                "     public List<List<Object>> zip(@Name(\"list1\") List<Object> list1, @Name(\"list2\") List<Object> list2) {",
                "+\t\tif (list1 == null || list2 == null) return null;",
                "+\t\tif (list1.isEmpty() || list2.isEmpty()) return Collections.emptyList();",
                "         List<List<Object>> result = new ArrayList<>(list1.size());",
                "@@ -50,2 +52,4 @@ public class Coll {",
                "     public List<List<Object>> pairs(@Name(\"list\") List<Object> list) {",
                "+\t\tif (list == null) return null;",
                "+\t\tif (list.isEmpty()) return Collections.emptyList();",
                "         return zip(list,list.subList(1,list.size()));",
                "@@ -55,2 +59,4 @@ public class Coll {",
                "     public List<List<Object>> pairsMin(@Name(\"list\") List<Object> list) {",
                "+\t\tif (list == null) return null;",
                "+\t\tif (list.isEmpty()) return Collections.emptyList();",
                "         return zip(list.subList(0,list.size()-1),list.subList(1,list.size()));",
                "@@ -60,3 +66,4 @@ public class Coll {",
                "     @Description(\"apoc.coll.sum([0.5,1,2.3])\")",
                "-    public double sum(@Name(\"numbers\") List<Number> list) {",
                "+    public Double sum(@Name(\"numbers\") List<Number> list) {",
                "+\t\tif (list == null || list.isEmpty()) return null;",
                "         double sum = 0;",
                "@@ -70,3 +77,4 @@ public class Coll {",
                "     @Description(\"apoc.coll.avg([0.5,1,2.3])\")",
                "-    public double avg(@Name(\"numbers\") List<Number> list) {",
                "+    public Double avg(@Name(\"numbers\") List<Number> list) {",
                "+\t\tif (list == null || list.isEmpty()) return null;",
                "         double avg = 0;",
                "@@ -80,2 +88,3 @@ public class Coll {",
                "     public Object min(@Name(\"values\") List<Object> list) {",
                "+\t\tif (list == null || list.isEmpty()) return null;",
                "         return Collections.min((List)list, Coll::compareAsDoubles);",
                "@@ -86,2 +95,3 @@ public class Coll {",
                "     public Object max(@Name(\"values\") List<Object> list) {",
                "+\t\tif (list == null || list.isEmpty()) return null;",
                "         return Collections.max((List)list, Coll::compareAsDoubles);",
                "@@ -297,2 +307,3 @@ public class Coll {",
                "     public Stream<ListResult> partition(@Name(\"values\") List<Object> list, @Name(\"batchSize\") long batchSize) {",
                "+\t    if (list==null || list.isEmpty()) return Stream.empty();",
                "         return partitionList(list, (int) batchSize).map(ListResult::new);",
                "@@ -303,2 +314,3 @@ public class Coll {",
                "     public Stream<ListResult> split(@Name(\"values\") List<Object> list, @Name(\"value\") Object value) {",
                "+\t    if (list==null || list.isEmpty()) return Stream.empty();",
                "         List<Object> l = new ArrayList<>(list);",
                "@@ -329,2 +341,3 @@ public class Coll {",
                "     public boolean contains(@Name(\"coll\") List<Object> coll, @Name(\"value\") Object value) {",
                "+        if (coll == null || coll.isEmpty()) return false;",
                "         return  new HashSet<>(coll).contains(value);",
                "@@ -384,2 +397,3 @@ public class Coll {",
                "     public long indexOf(@Name(\"coll\") List<Object> coll, @Name(\"value\") Object value) {",
                "+        if (coll == null || coll.isEmpty()) return -1;",
                "         return  new ArrayList<>(coll).indexOf(value);",
                "@@ -390,2 +404,3 @@ public class Coll {",
                "     public boolean containsAll(@Name(\"coll\") List<Object> coll, @Name(\"values\") List<Object> values) {",
                "+        if (coll == null || coll.isEmpty()) return false;",
                "         return new HashSet<>(coll).containsAll(values);",
                "@@ -396,2 +411,3 @@ public class Coll {",
                "     public boolean containsSorted(@Name(\"coll\") List<Object> coll, @Name(\"value\") Object value) {",
                "+        if (coll == null || coll.isEmpty()) return false;",
                "         int batchSize = 5000-1; // Collections.binarySearchThreshold",
                "@@ -406,2 +422,3 @@ public class Coll {",
                "     public boolean containsAllSorted(@Name(\"coll\") List<Object> coll, @Name(\"values\") List<Object> values) {",
                "+        if (coll == null || values == null) return false;",
                "         int batchSize = 5000-1; // Collections.binarySearchThreshold",
                "@@ -419,2 +436,3 @@ public class Coll {",
                "     public List<Object> toSet(@Name(\"values\") List<Object> list) {",
                "+\t    if (list == null) return null;",
                "         return new SetBackedList(new LinkedHashSet(list));",
                "@@ -424,3 +442,4 @@ public class Coll {",
                "     @Description(\"apoc.coll.sumLongs([1,3,3])\")",
                "-    public long sumLongs(@Name(\"numbers\") List<Number> list) {",
                "+    public Long sumLongs(@Name(\"numbers\") List<Number> list) {",
                "+        if (list == null) return null;",
                "         long sum = 0;",
                "@@ -435,2 +454,3 @@ public class Coll {",
                "     public List<Object> sort(@Name(\"coll\") List<Object> coll) {",
                "+\t    if (coll == null || coll.isEmpty()) return Collections.emptyList();",
                "         List sorted = new ArrayList<>(coll);",
                "@@ -443,2 +463,3 @@ public class Coll {",
                "     public List<Node> sortNodes(@Name(\"coll\") List<Node> coll, @Name(\"prop\") String prop) {",
                "+\t    if (coll == null || coll.isEmpty()) return Collections.emptyList();",
                "         List<Node> sorted = new ArrayList<>(coll);",
                "@@ -453,2 +474,3 @@ public class Coll {",
                "     public List<Map<String,Object>> sortMaps(@Name(\"coll\") List<Map<String,Object>> coll, @Name(\"prop\") String prop) {",
                "+\t    if (coll == null || coll.isEmpty()) return Collections.emptyList();",
                "         List<Map<String,Object>> sorted = new ArrayList<>(coll);",
                "@@ -486,2 +508,4 @@ public class Coll {",
                "     public List<Object> union(@Name(\"first\") List<Object> first, @Name(\"second\") List<Object> second) {",
                "+\t\tif (first == null) return second;",
                "+\t\tif (second == null) return first;",
                "         Set<Object> set = new HashSet<>(first);",
                "@@ -493,4 +517,5 @@ public class Coll {",
                "     public List<Object> subtract(@Name(\"first\") List<Object> first, @Name(\"second\") List<Object> second) {",
                "+\t\tif (first == null) return null;",
                "         Set<Object> set = new HashSet<>(first);",
                "-        set.removeAll(second);",
                "+        if (second!=null) set.removeAll(second);",
                "         return new SetBackedList(set);",
                "@@ -500,4 +525,5 @@ public class Coll {",
                "     public List<Object> removeAll(@Name(\"first\") List<Object> first, @Name(\"second\") List<Object> second) {",
                "+\t\tif (first == null) return null;",
                "         List<Object> list = new ArrayList<>(first);",
                "-        list.removeAll(second);",
                "+        if (second!=null) list.removeAll(second);",
                "         return list;",
                "@@ -508,2 +534,3 @@ public class Coll {",
                "     public List<Object> intersection(@Name(\"first\") List<Object> first, @Name(\"second\") List<Object> second) {",
                "+        if (first == null || second == null) return Collections.emptyList();",
                "         Set<Object> set = new HashSet<>(first);",
                "@@ -516,2 +543,4 @@ public class Coll {",
                "     public List<Object> disjunction(@Name(\"first\") List<Object> first, @Name(\"second\") List<Object> second) {",
                "+        if (first == null) return second;",
                "+        if (second == null) return first;",
                "         Set<Object> intersection = new HashSet<>(first);",
                "@@ -526,2 +555,4 @@ public class Coll {",
                "     public List<Object> unionAll(@Name(\"first\") List<Object> first, @Name(\"second\") List<Object> second) {",
                "+        if (first == null) return second;",
                "+        if (second == null) return first;",
                "         List<Object> list = new ArrayList<>(first);",
                "@@ -678,3 +709,3 @@ public class Coll {",
                "     public Map<String, Object> frequenciesAsMap(@Name(\"coll\") List<Object> coll) {",
                "-",
                "+\t    if (coll == null) return Collections.emptyMap();",
                "         return frequencies(coll).stream().collect(Collectors.toMap(t -> t.get(\"item\").toString(), v-> v.get(\"count\")));",
                "@@ -704,2 +735,3 @@ public class Coll {",
                "     public List<Object> flatten(@Name(\"coll\") List<List<Object>> coll) {",
                "+\t    if (coll == null) return Collections.emptyList();",
                "         return coll.stream().flatMap(Collection::stream).collect(Collectors.toList());",
                "@@ -707,2 +739,3 @@ public class Coll {",
                "+    @Deprecated",
                "     @UserFunction",
                "@@ -794,2 +827,3 @@ public class Coll {",
                "     public boolean different(@Name(\"values\") List<Object> values) {",
                "+\t\tif (values == null) return false;",
                "         return new HashSet(values).size() == values.size();"
            ],
            "changed_files": [
                "src/main/java/apoc/coll/Coll.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d62712f22aa33fff3182b5c6010cbc336ed1dbc8"
                ]
            ],
            "tags": [
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "29b889b01d187d498f66714102ac82adac4fae3d",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1558681460,
            "hunks": 4,
            "message": "Fix merge procedure docs",
            "diff": [
                "diff --git a/src/main/java/apoc/merge/Merge.java b/src/main/java/apoc/merge/Merge.java",
                "index 9081574cf..ef3422c7a 100644",
                "--- a/src/main/java/apoc/merge/Merge.java",
                "+++ b/src/main/java/apoc/merge/Merge.java",
                "@@ -22,3 +22,3 @@ public class Merge {",
                "     @Procedure(value=\"apoc.merge.node.eager\", mode = Mode.WRITE, eager = true)",
                "-    @Description(\"apoc.merge.node.eager(['Label'], identProps:{key:value, ...}, config:{onCreateProps:{key:value,...}, onMatchProps:{key:value,...}}) - merge node with dynamic labels, with support for setting properties ON CREATE or ON MATCH\")",
                "+    @Description(\"apoc.merge.node.eager(['Label'], identProps:{key:value, ...}, onCreateProps:{key:value,...}, onMatchProps:{key:value,...}}) - merge nodes eagerly, with dynamic labels, with support for setting properties ON CREATE or ON MATCH\")",
                "     public Stream<NodeResult> nodesEager(@Name(\"label\") List<String> labelNames,",
                "@@ -31,3 +31,3 @@ public class Merge {",
                "     @Procedure(value=\"apoc.merge.node\", mode = Mode.WRITE)",
                "-    @Description(\"apoc.merge.node(['Label'], identProps:{key:value, ...}, config:{onCreateProps:{key:value,...}, onMatchProps:{key:value,...}}) - merge node with dynamic labels, with support for setting properties ON CREATE or ON MATCH\")",
                "+    @Description(\"\\\"apoc.merge.node.eager(['Label'], identProps:{key:value, ...}, onCreateProps:{key:value,...}, onMatchProps:{key:value,...}}) - merge nodes with dynamic labels, with support for setting properties ON CREATE or ON MATCH\")",
                "     public Stream<NodeResult> nodes(@Name(\"label\") List<String> labelNames,",
                "@@ -50,3 +50,3 @@ public class Merge {",
                "     @Procedure(value = \"apoc.merge.relationship\", mode = Mode.WRITE)",
                "-    @Description(\"apoc.merge.relationship(startNode, relType,  identProps:{key:value, ...}, config:{onCreateProps:{key:value, ...}, onMatchProps:{key:value, ...}}, endNode) - merge relationship with dynamic type, with support for setting properties ON CREATE or ON MATCH\")",
                "+    @Description(\"apoc.merge.relationship(startNode, relType,  identProps:{key:value, ...}, onCreateProps:{key:value, ...}, endNode, onMatchProps:{key:value, ...}) - merge relationship with dynamic type, with support for setting properties ON CREATE or ON MATCH\")",
                "     public Stream<RelationshipResult> relationship(@Name(\"startNode\") Node startNode, @Name(\"relationshipType\") String relType,",
                "@@ -70,3 +70,3 @@ public class Merge {",
                "     @Procedure(value = \"apoc.merge.relationship.eager\", mode = Mode.WRITE, eager = true)",
                "-    @Description(\"apoc.merge.relationship.eager(startNode, relType,  identProps:{key:value, ...}, config:{onCreateProps:{key:value, ...}, onMatchProps:{key:value, ...}}, endNode) - merge relationship with dynamic type, with support for setting properties ON CREATE or ON MATCH\")",
                "+    @Description(\"apoc.merge.relationship(startNode, relType,  identProps:{key:value, ...}, onCreateProps:{key:value, ...}, endNode, onMatchProps:{key:value, ...}) - merge relationship with dynamic type, with support for setting properties ON CREATE or ON MATCH\")",
                "     public Stream<RelationshipResult> relationshipEager(@Name(\"startNode\") Node startNode, @Name(\"relationshipType\") String relType,"
            ],
            "changed_files": [
                "src/main/java/apoc/merge/Merge.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dc7c1cea03d148e13460fcd0cd02a44fd0dc1b5f"
                ],
                [
                    "no-tag",
                    "282edee9e71f769f29bc369c2336b94811abd7a8"
                ]
            ],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5ee7fb362ca2328b971bfd0ac282155e681b0409",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1556317663,
            "hunks": 11,
            "message": "Added apoc.merge.node.eager() and apoc.merge.relationship.eager() These procs can also match to multiple existing nodes",
            "diff": [
                "diff --git a/src/main/java/apoc/merge/Merge.java b/src/main/java/apoc/merge/Merge.java",
                "index 64fb0c554..9081574cf 100644",
                "--- a/src/main/java/apoc/merge/Merge.java",
                "+++ b/src/main/java/apoc/merge/Merge.java",
                "@@ -4,2 +4,3 @@ import apoc.result.*;",
                " import apoc.util.Util;",
                "+import com.google.common.collect.Lists;",
                " import org.neo4j.graphdb.*;",
                "@@ -12,2 +13,5 @@ import java.util.stream.Stream;",
                "+import static apoc.util.Util.labelString;",
                "+import static java.util.Collections.emptyMap;",
                "+",
                " public class Merge {",
                "@@ -17,6 +21,18 @@ public class Merge {",
                "-    @Procedure(mode = Mode.WRITE)",
                "-    @Description(\"apoc.merge.node(['Label'], {key:value, ...}, {key:value,...}) - merge node with dynamic labels\")",
                "-    public Stream<NodeResult> node(@Name(\"label\") List<String> labelNames, @Name(\"identProps\") Map<String, Object> identProps, @Name(\"props\") Map<String, Object> props) {",
                "-        if ((identProps==null) || (identProps.isEmpty())) {",
                "+    @Procedure(value=\"apoc.merge.node.eager\", mode = Mode.WRITE, eager = true)",
                "+    @Description(\"apoc.merge.node.eager(['Label'], identProps:{key:value, ...}, config:{onCreateProps:{key:value,...}, onMatchProps:{key:value,...}}) - merge node with dynamic labels, with support for setting properties ON CREATE or ON MATCH\")",
                "+    public Stream<NodeResult> nodesEager(@Name(\"label\") List<String> labelNames,",
                "+                                        @Name(\"identProps\") Map<String, Object> identProps,",
                "+                                        @Name(value = \"props\",defaultValue = \"{}\") Map<String, Object> props,",
                "+                                        @Name(value = \"onMatchProps\",defaultValue = \"{}\") Map<String, Object> onMatchProps) {",
                "+        return nodes(labelNames, identProps,props,onMatchProps);",
                "+    }",
                "+",
                "+    @Procedure(value=\"apoc.merge.node\", mode = Mode.WRITE)",
                "+    @Description(\"apoc.merge.node(['Label'], identProps:{key:value, ...}, config:{onCreateProps:{key:value,...}, onMatchProps:{key:value,...}}) - merge node with dynamic labels, with support for setting properties ON CREATE or ON MATCH\")",
                "+    public Stream<NodeResult> nodes(@Name(\"label\") List<String> labelNames,",
                "+                                        @Name(\"identProps\") Map<String, Object> identProps,",
                "+                                        @Name(value = \"props\",defaultValue = \"{}\") Map<String, Object> props,",
                "+                                        @Name(value = \"onMatchProps\",defaultValue = \"{}\") Map<String, Object> onMatchProps) {",
                "+        if (identProps==null || identProps.isEmpty()) {",
                "             throw new IllegalArgumentException(\"you need to supply at least one identifying property for a merge\");",
                "@@ -24,47 +40,48 @@ public class Merge {",
                "-        String labels = labelNames.stream().map(s -> wrapInBacktics(s)).collect(Collectors.joining(\":\"));",
                "+        String labels = labelString(labelNames);",
                "-        Map<String, Object> params = new HashMap<>();",
                "-        params.put(\"props\", Util.merge(identProps, props));",
                "+        Map<String, Object> params = Util.map(\"identProps\", identProps, \"onCreateProps\", props, \"onMatchProps\", onMatchProps);",
                "         String identPropsString = buildIdentPropsString(identProps);",
                "-        final String cypher = \"MERGE (n:\" + labels + \"{\" + identPropsString + \"}) ON CREATE SET n += $props RETURN n\";",
                "-        Node node = Iterators.single(db.execute(cypher, params ).columnAs(\"n\"));",
                "-        return Stream.of(new NodeResult(node));",
                "+        final String cypher = \"MERGE (n:\" + labels + \"{\" + identPropsString + \"}) ON CREATE SET n += $onCreateProps ON MATCH SET n += $onMatchProps RETURN n\";",
                "+        return db.execute(cypher, params ).columnAs(\"n\").stream().map(node -> new NodeResult((Node) node));",
                "     }",
                "-    private String wrapInBacktics(String s) {",
                "-        return \"`\" + s + \"`\";",
                "-    }",
                "-",
                "-    @Procedure(mode = Mode.WRITE)",
                "-    @Description(\"apoc.merge.relationship(startNode, relType,  {key:value, ...}, {key:value, ...}, endNode) - merge relationship with dynamic type\")",
                "+    @Procedure(value = \"apoc.merge.relationship\", mode = Mode.WRITE)",
                "+    @Description(\"apoc.merge.relationship(startNode, relType,  identProps:{key:value, ...}, config:{onCreateProps:{key:value, ...}, onMatchProps:{key:value, ...}}, endNode) - merge relationship with dynamic type, with support for setting properties ON CREATE or ON MATCH\")",
                "     public Stream<RelationshipResult> relationship(@Name(\"startNode\") Node startNode, @Name(\"relationshipType\") String relType,",
                "-                                                   @Name(\"identProps\") Map<String, Object> identProps, @Name(\"props\") Map<String, Object> props, @Name(\"endNode\") Node endNode) {",
                "+                                                        @Name(\"identProps\") Map<String, Object> identProps,",
                "+                                                        @Name(\"props\") Map<String, Object> onCreateProps,",
                "+                                                        @Name(\"endNode\") Node endNode,",
                "+                                                        @Name(value = \"onMatchProps\",defaultValue = \"{}\") Map<String, Object> onMatchProps) {",
                "         String identPropsString = buildIdentPropsString(identProps);",
                "-        Map<String, Object> params = new HashMap<>();",
                "-        params.put(\"props\", Util.merge(identProps, props));",
                "-        params.put(\"startNode\", startNode);",
                "-        params.put(\"endNode\", endNode);",
                "+        Map<String, Object> params = Util.map(\"identProps\", identProps, \"onCreateProps\", onCreateProps==null ? emptyMap() : onCreateProps,",
                "+                \"onMatchProps\", onMatchProps == null ? emptyMap() : onMatchProps, \"startNode\", startNode, \"endNode\", endNode);",
                "-        final String cypher = \"WITH $startNode as startNode, $endNode as endNode MERGE (startNode)-[r:\"+ wrapInBacktics(relType) +\"{\"+identPropsString+\"}]->(endNode) ON CREATE SET r+= $props RETURN r\";",
                "-        Relationship rel = Iterators.single(db.execute(cypher, params ).columnAs(\"r\"));",
                "-        return Stream.of(new RelationshipResult(rel));",
                "+        final String cypher =",
                "+                \"WITH $startNode as startNode, $endNode as endNode \" +",
                "+                \"MERGE (startNode)-[r:\"+ Util.quote(relType) +\"{\"+identPropsString+\"}]->(endNode) \" +",
                "+                \"ON CREATE SET r+= $onCreateProps \" +",
                "+                \"ON MATCH SET r+= $onMatchProps \" +",
                "+                \"RETURN r\";",
                "+        return db.execute(cypher, params ).columnAs(\"r\").stream().map(rel -> new RelationshipResult((Relationship) rel));",
                "     }",
                "-",
                "-    private String buildIdentPropsString(Map<String, Object> identProps) {",
                "-        if (identProps==null) {",
                "-            return \"\";",
                "-        } else {",
                "-            return identProps.keySet().stream().map(s -> \"`\"+s+\"`:$props.`\" + s+\"`\").collect(Collectors.joining(\",\"));",
                "-        }",
                "+    @Procedure(value = \"apoc.merge.relationship.eager\", mode = Mode.WRITE, eager = true)",
                "+    @Description(\"apoc.merge.relationship.eager(startNode, relType,  identProps:{key:value, ...}, config:{onCreateProps:{key:value, ...}, onMatchProps:{key:value, ...}}, endNode) - merge relationship with dynamic type, with support for setting properties ON CREATE or ON MATCH\")",
                "+    public Stream<RelationshipResult> relationshipEager(@Name(\"startNode\") Node startNode, @Name(\"relationshipType\") String relType,",
                "+                                                        @Name(\"identProps\") Map<String, Object> identProps,",
                "+                                                        @Name(\"props\") Map<String, Object> onCreateProps,",
                "+                                                        @Name(\"endNode\") Node endNode,",
                "+                                                        @Name(value = \"onMatchProps\",defaultValue = \"{}\") Map<String, Object> onMatchProps) {",
                "+        return relationship(startNode, relType, identProps, onCreateProps, endNode, onMatchProps );",
                "     }",
                "-    private Map<String, Object> buildParams(Map<String, Object> identProps, Map<String, Object> props) {",
                "-        Map<String, Object> map = identProps == null ? new HashMap<>() : new HashMap<>(identProps);",
                "-        map.put(\"props\", props == null ? Collections.EMPTY_MAP : props);",
                "-        return map;",
                "-    }",
                "+    private String buildIdentPropsString(Map<String, Object> identProps) {",
                "+        if (identProps == null) return \"\";",
                "+        return identProps.keySet().stream().map(Util::quote)",
                "+                .map(s -> \"`\"+s+\"`:$identProps.`\" + s+\"`\")",
                "+                .collect(Collectors.joining(\",\"));",
                "+    }",
                " }",
                "diff --git a/src/main/java/apoc/util/Util.java b/src/main/java/apoc/util/Util.java",
                "index 7968eee1e..cba72f00c 100644",
                "--- a/src/main/java/apoc/util/Util.java",
                "+++ b/src/main/java/apoc/util/Util.java",
                "@@ -48,2 +48,6 @@ public class Util {",
                "+    public static String labelString(List<String> labelNames) {",
                "+        return labelNames.stream().map(Util::quote).collect(Collectors.joining(\":\"));",
                "+    }",
                "+",
                "     public static String labelString(Node n) {"
            ],
            "changed_files": [
                "src/main/java/apoc/merge/Merge.java",
                "src/main/java/apoc/util/Util.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16001229bccdb14c7994abff35004dbcf0c7570a"
                ],
                [
                    "no-tag",
                    "2a494c55c925622dfa589e8cc87a9641c0625db5"
                ]
            ],
            "tags": [
                "3.4.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7bff313910707f7b73fcede9bd48a488c84f0f3f",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559246397,
            "hunks": 5,
            "message": "Release 3.4.0.7 Neo4j 3.4.12",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index a8761f78a..bd88c82e4 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -26,3 +26,3 @@ idea {",
                " group = 'org.neo4j.procedure'",
                "-version = '3.4.0.6'",
                "+version = '3.4.0.7'",
                " archivesBaseName = 'apoc'",
                "@@ -240,3 +240,3 @@ asciidoctor {",
                "     attributes  'apoc-version' : version,",
                "-                'apoc-release' : \"3.4.0.6\",",
                "+                'apoc-release' : \"3.4.0.7\",",
                "                 'neo4j-version' : neo4jVersionEffective,",
                "diff --git a/docs/build.gradle b/docs/build.gradle",
                "index 6984ab9da..88775172f 100644",
                "--- a/docs/build.gradle",
                "+++ b/docs/build.gradle",
                "@@ -31,3 +31,3 @@ plugins {",
                "-if (!project.hasProperty('apocVersion')) { ext.apocVersion = '3.4.0.6' }",
                "+if (!project.hasProperty('apocVersion')) { ext.apocVersion = '3.4.0.7' }",
                "diff --git a/readme.adoc b/readme.adoc",
                "index e94790cac..78a0338ee 100644",
                "--- a/readme.adoc",
                "+++ b/readme.adoc",
                "@@ -3,3 +3,3 @@",
                " :docs: https://neo4j-contrib.github.io/neo4j-apoc-procedures/index34.html",
                "-:apoc-release: 3.4.0.6",
                "+:apoc-release: 3.4.0.7",
                " :neo4j-version: 3.4.12",
                "@@ -174,4 +174,4 @@ The trailing `<apoc>` part of the version number will be incremented with every",
                " |apoc version | neo4j version",
                "-| http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.2[3.5.0.2^] | 3.5.3 (3.5.x)",
                "-| http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.6[3.4.0.6^] | 3.4.12 (3.4.x)",
                "+| http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.4[3.5.0.4^] | 3.5.6 (3.5.x)",
                "+| http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.7[3.4.0.7^] | 3.4.12 (3.4.x)",
                " | http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.3.0.4[3.3.0.4^] | 3.3.6 (3.3.x)"
            ],
            "changed_files": [
                "build.gradle",
                "docs/build.gradle",
                "readme.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c8f6b0e3aa7f403edb3ae6f1089ede6cb83d0832"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5451e15bbbf2c11165e383ae45ff65b5089a6cf0",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559577235,
            "hunks": 1,
            "message": "add the -all suffix back again",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index bd88c82e4..40b364b53 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -55,2 +55,6 @@ configurations {",
                "+shadowJar {",
                "+    classifier = 'all'  ",
                "+}",
                "+",
                " compileJava {"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0c1880bec8ae4132fadea6daa8d4d71e275e6bad"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "72b16a47c424278ab9481b14bd2278fe5e7ce7c9",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1539390622,
            "hunks": 5,
            "message": "Fix example. (#950) * Fix example. The word `cypher` was wrong. * Fix several more occurences.",
            "diff": [
                "diff --git a/docs/loadjdbc.adoc b/docs/loadjdbc.adoc",
                "index f050afa4a..c2dff6f14 100644",
                "--- a/docs/loadjdbc.adoc",
                "+++ b/docs/loadjdbc.adoc",
                "@@ -88,3 +88,3 @@ describe products;",
                " ----",
                "-cypher CALL apoc.load.driver(\"com.mysql.jdbc.Driver\");",
                "+CALL apoc.load.driver(\"com.mysql.jdbc.Driver\");",
                " ----",
                "@@ -95,3 +95,3 @@ cypher CALL apoc.load.driver(\"com.mysql.jdbc.Driver\");",
                " with \"jdbc:mysql://localhost:3306/northwind?user=root\" as url",
                "-cypher CALL apoc.load.jdbc(url,\"products\") YIELD row",
                "+CALL apoc.load.jdbc(url,\"products\") YIELD row",
                " RETURN count(*);",
                "@@ -113,3 +113,3 @@ RETURN count(*);",
                " with \"jdbc:mysql://localhost:3306/northwind?user=root\" as url",
                "-cypher CALL apoc.load.jdbc(url,\"products\") YIELD row",
                "+CALL apoc.load.jdbc(url,\"products\") YIELD row",
                " RETURN row limit 1;",
                "@@ -135,3 +135,3 @@ image::{img}/apoc-load-jdbc.jpg[width=800]",
                " with \"select firstname, lastname from employees where firstname like ? and lastname like ?\" as sql",
                "-cypher call apoc.load.jdbcParams(\"northwind\", sql, ['F%', '%w']) yield row",
                "+call apoc.load.jdbcParams(\"northwind\", sql, ['F%', '%w']) yield row",
                " return row",
                "@@ -459,2 +459,2 @@ You can call the procedure without param:",
                " CALL apoc.load.jdbcUpdate('jdbc:mysql:....','INSERT INTO RECOMMENDATIONS values(user.id, reco.id, score)') YIELD row;",
                "-----",
                "\\ No newline at end of file",
                "+----"
            ],
            "changed_files": [
                "docs/loadjdbc.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "950": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 950",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1a98480e8d0767a469eca03427f010ed7c8ff57",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1539254047,
            "hunks": 6,
            "message": "fixes #893 - date format functions - argument handling (#940) * fixes #893 - date format functions - argument handling * Update Date.java",
            "diff": [
                "diff --git a/src/main/java/apoc/date/Date.java b/src/main/java/apoc/date/Date.java",
                "index 43d8f42a8..a33a09ef4 100644",
                "--- a/src/main/java/apoc/date/Date.java",
                "+++ b/src/main/java/apoc/date/Date.java",
                "@@ -99,6 +99,6 @@ public class Date {",
                " \t\treturn (time == null)",
                "-\t\t\t   ? null",
                "-\t\t\t   : (long) ZonedDateTime",
                "-\t\t\t\t\t   .ofInstant( Instant.ofEpochMilli( time ), ZoneId.of( timezone ) )",
                "-\t\t\t\t\t   .get( chronoField( unit ) );",
                "+\t\t\t\t? null",
                "+\t\t\t\t: (long) ZonedDateTime",
                "+\t\t\t\t.ofInstant( Instant.ofEpochMilli( time ), ZoneId.of( timezone ) )",
                "+\t\t\t\t.get( chronoField( unit ) );",
                " \t}",
                "@@ -106,7 +106,7 @@ public class Date {",
                " \t@UserFunction",
                "-    @Description( \"apoc.date.currentTimestamp() - returns System.currentTimeMillis()\" )",
                "-    public long currentTimestamp()",
                "-    {",
                "-        return System.currentTimeMillis();",
                "-    }",
                "+\t@Description( \"apoc.date.currentTimestamp() - returns System.currentTimeMillis()\" )",
                "+\tpublic long currentTimestamp()",
                "+\t{",
                "+\t\treturn System.currentTimeMillis();",
                "+\t}",
                "@@ -134,3 +134,6 @@ public class Date {",
                " \t\t}",
                "-\t\treturn TimeUnit.MILLISECONDS;",
                "+",
                "+\t\tthrow new IllegalArgumentException(\"The unit: \"+ unit + \" is not correct\");",
                "+",
                "+\t\t//return TimeUnit.MILLISECONDS;",
                " \t}",
                "@@ -139,12 +142,14 @@ public class Date {",
                " \t\tswitch (unit.toLowerCase()) {",
                "-\t\tcase \"ms\": case \"milli\":  case \"millis\": case \"milliseconds\": return ChronoField.MILLI_OF_SECOND;",
                "-\t\tcase \"s\":  case \"second\": case \"seconds\": return ChronoField.SECOND_OF_MINUTE;",
                "-\t\tcase \"m\":  case \"minute\": case \"minutes\": return ChronoField.MINUTE_OF_HOUR;",
                "-\t\tcase \"h\":  case \"hour\":   case \"hours\":   return ChronoField.HOUR_OF_DAY;",
                "-\t\tcase \"d\":  case \"day\":    case \"days\":    return ChronoField.DAY_OF_MONTH;",
                "-\t\tcase \"w\":  case \"weekday\": case \"weekdays\": return ChronoField.DAY_OF_WEEK; ",
                "-\t\tcase \"month\":case \"months\": return ChronoField.MONTH_OF_YEAR;",
                "-\t\tcase \"year\":case \"years\": return ChronoField.YEAR;",
                "-\t\tdefault: return ChronoField.YEAR;",
                "+\t\t\tcase \"ms\": case \"milli\":  case \"millis\": case \"milliseconds\": return ChronoField.MILLI_OF_SECOND;",
                "+\t\t\tcase \"s\":  case \"second\": case \"seconds\": return ChronoField.SECOND_OF_MINUTE;",
                "+\t\t\tcase \"m\":  case \"minute\": case \"minutes\": return ChronoField.MINUTE_OF_HOUR;",
                "+\t\t\tcase \"h\":  case \"hour\":   case \"hours\":   return ChronoField.HOUR_OF_DAY;",
                "+\t\t\tcase \"d\":  case \"day\":    case \"days\":    return ChronoField.DAY_OF_MONTH;",
                "+\t\t\tcase \"w\":  case \"weekday\": case \"weekdays\": return ChronoField.DAY_OF_WEEK;",
                "+\t\t\tcase \"month\":case \"months\": return ChronoField.MONTH_OF_YEAR;",
                "+\t\t\tcase \"year\":case \"years\": return ChronoField.YEAR;",
                "+//\t\t\tdefault: return ChronoField.YEAR;",
                " \t\t}",
                "+",
                "+\t\tthrow new IllegalArgumentException(\"The unit: \"+ unit + \" is not correct\");",
                " \t}",
                "@@ -201,3 +206,8 @@ public class Date {",
                " \t\tString actualPattern = getPattern(pattern);",
                "-\t\tSimpleDateFormat format = new SimpleDateFormat(actualPattern);",
                "+\t\tSimpleDateFormat format = null;",
                "+\t\ttry {",
                "+\t\t\tformat = new SimpleDateFormat(actualPattern);",
                "+\t\t} catch(Exception e){",
                "+\t\t\tthrow new IllegalArgumentException(\"The pattern: \"+pattern+\" is not correct\");",
                "+\t\t}",
                " \t\tif (timezone != null && !\"\".equals(timezone)) {"
            ],
            "changed_files": [
                "src/main/java/apoc/date/Date.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "893": "",
                "940": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 893, 940",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81e530850d9bb6a5c6af42f46d962887e116c090",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541504914,
            "hunks": 2,
            "message": "Docs Update: - added video to TTL docs - updated custom procedures docs, missing parameter",
            "diff": [
                "diff --git a/docs/custom.adoc b/docs/custom.adoc",
                "index 2cee6492e..4bd9c2fad 100644",
                "--- a/docs/custom.adoc",
                "+++ b/docs/custom.adoc",
                "@@ -42,2 +42,3 @@ Given statement will be registered as a procedure, the results will be turned in",
                " | statement | none | cypher statement to run, can use $parameters",
                "+| mode | read | execution mode of the procedure: read, write, or schema",
                " | outputs | [[\"row\",\"MAP\"]] | List of pairs of name-type to be used as output columns, need to be in-order with the cypher statement, the default is a special case, that will collect all columns of the statement result into a map",
                "diff --git a/docs/ttl.adoc b/docs/ttl.adoc",
                "index ff01487a6..e02486cea 100644",
                "--- a/docs/ttl.adoc",
                "+++ b/docs/ttl.adoc",
                "@@ -2,2 +2,11 @@",
                "+",
                "+Some nodes are not meant to live forever.",
                "+That's why with APOC you can specify a time by when they are removed from the database, by utilizing a schema index and an additional label.",
                "+A few convenience procedures help with that.",
                "+",
                "+++++",
                "+<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e9aoQ9xOmoU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "+++++",
                "+",
                " Enable cleanup of expired nodes in `neo4j.conf` with `apoc.ttl.enabled=true`"
            ],
            "changed_files": [
                "docs/custom.adoc",
                "docs/ttl.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6cd48ab0980e86054818a3d231e4fac152e6d3f5"
                ]
            ],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "79be054155381caa4e671348f6ead0f7bb5286e0",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1540553833,
            "hunks": 0,
            "message": "Fixes #959 (#960)",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "959": "",
                "960": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 959, 960",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "11f202e27c8502c8d67bf2b3192726453d467ccd",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559201796,
            "hunks": 6,
            "message": "fixes for v 3.4",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index acb2241e4..a8761f78a 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -3,10 +3,10 @@ plugins {",
                "     id 'idea'",
                "-    id 'com.github.johnrengelman.shadow' version '2.0.1'",
                "-    id \"org.asciidoctor.convert\" version \"1.5.3\"",
                "+    id 'com.github.johnrengelman.shadow' version '4.0.2'",
                "+    id \"org.asciidoctor.convert\" version \"1.5.9.2\"",
                "     id \"com.bmuschko.nexus\" version \"2.3.1\"",
                "-    id \"me.champeau.gradle.jmh\" version \"0.4.4\"",
                "-    id \"io.codearte.nexus-staging\" version \"0.9.0\"",
                "+    id \"me.champeau.gradle.jmh\" version \"0.4.8\"",
                "+    id \"io.codearte.nexus-staging\" version \"0.20.0\"",
                " }",
                " asciidoctorj {",
                "-    version = '1.5.6'",
                "+    version = '1.6.1'",
                " }",
                "@@ -42,3 +42,2 @@ ext {",
                "     neo4jVersionEffective = project.hasProperty(\"neo4jVersionOverride\") ? project.getProperty(\"neo4jVersionOverride\") : neo4jVersion",
                "-    testContainersVersion = '1.11.0'",
                " }",
                "@@ -159,12 +158,14 @@ dependencies {",
                "     testCompile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.2.1'",
                "-    testCompile group: 'com.github.adejanovski', name: 'cassandra-jdbc-wrapper', version: '3.1.0'",
                "     // Test Containers",
                "-    testCompile group: 'org.testcontainers', name: 'testcontainers', version: testContainersVersion",
                "-    testCompile group: 'org.testcontainers', name: 'neo4j', version: testContainersVersion",
                "-    testCompile group: 'org.testcontainers', name: 'elasticsearch', version: testContainersVersion",
                "-    testCompile group: 'org.testcontainers', name: 'couchbase', version: testContainersVersion",
                "-    testCompile group: 'org.testcontainers', name: 'mysql', version: testContainersVersion",
                "-    testCompile group: 'org.testcontainers', name: 'postgresql', version: testContainersVersion",
                "-    testCompile group: 'org.testcontainers', name: 'cassandra', version: testContainersVersion",
                "+    testCompile group: 'org.testcontainers', name: 'testcontainers', version: '1.11.0'",
                "+    testCompile group: 'org.testcontainers', name: 'neo4j', version: '1.11.0'",
                "+    testCompile group: 'org.testcontainers', name: 'elasticsearch', version: '1.11.0'",
                "+    testCompile group: 'org.testcontainers', name: 'couchbase', version: '1.11.0'",
                "+    testCompile group: 'org.testcontainers', name: 'mysql', version: '1.11.0'",
                "+    testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.11.0'",
                "+",
                "+    testCompile group: 'com.github.adejanovski', name: 'cassandra-jdbc-wrapper', version: '3.1.0'",
                "+    testCompile group: 'com.codahale.metrics', name: 'metrics-core', version: '3.0.2'",
                "+    testCompile group: 'org.testcontainers', name: 'cassandra', version: '1.11.0'"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e95febc6e9f02eafdaaa2765befaaf4762d08350"
                ]
            ],
            "tags": [
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "de6f457c8bab3e8653b7f25113fd3139c4ca3472",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1539390770,
            "hunks": 14,
            "message": "fixes #890 - apoc.schema.assert are not deleted all indexes (#939) * fixes #890 - apoc.schema.assert are not deleted all indexes * Added EnterpriseGraphDatabaseFactory in order to test Enterprise features",
            "diff": [
                "diff --git a/src/main/java/apoc/schema/Schemas.java b/src/main/java/apoc/schema/Schemas.java",
                "index 9d7b9479c..4886c558d 100644",
                "--- a/src/main/java/apoc/schema/Schemas.java",
                "+++ b/src/main/java/apoc/schema/Schemas.java",
                "@@ -16,2 +16,3 @@ import org.neo4j.internal.kernel.api.*;",
                " import org.neo4j.internal.kernel.api.exceptions.schema.IndexNotFoundKernelException;",
                "+import org.neo4j.internal.kernel.api.schema.constraints.ConstraintDescriptor;",
                " import org.neo4j.kernel.api.KernelTransaction;",
                "@@ -23,2 +24,3 @@ import java.util.*;",
                " import java.util.concurrent.ExecutionException;",
                "+import java.util.stream.Collectors;",
                " import java.util.stream.Stream;",
                "@@ -37,3 +39,3 @@ public class Schemas {",
                "     @Description(\"apoc.schema.assert({indexLabel:[[indexKeys]], ...}, {constraintLabel:[constraintKeys], ...}, dropExisting : true) yield label, key, keys, unique, action - drops all other existing indexes and constraints when `dropExisting` is `true` (default is `true`), and asserts that at the end of the operation the given indexes and unique constraints are there, each label:key pair is considered one constraint/label. Non-constraint indexes can define compound indexes with label:[key1,key2...] pairings.\")",
                "-    public Stream<AssertSchemaResult> schemaAssert(@Name(\"indexes\") Map<String, List<Object>> indexes, @Name(\"constraints\") Map<String, List<String>> constraints, @Name(value = \"dropExisting\", defaultValue = \"true\") boolean dropExisting) throws ExecutionException, InterruptedException {",
                "+    public Stream<AssertSchemaResult> schemaAssert(@Name(\"indexes\") Map<String, List<Object>> indexes, @Name(\"constraints\") Map<String, List<Object>> constraints, @Name(value = \"dropExisting\", defaultValue = \"true\") boolean dropExisting) throws ExecutionException, InterruptedException {",
                "         return Stream.concat(",
                "@@ -73,4 +75,4 @@ public class Schemas {",
                "-    public List<AssertSchemaResult> assertConstraints(Map<String, List<String>> constraints0, boolean dropExisting) throws ExecutionException, InterruptedException {",
                "-        Map<String, List<String>> constraints = copy(constraints0);",
                "+    public List<AssertSchemaResult> assertConstraints(Map<String, List<Object>> constraints0, boolean dropExisting) throws ExecutionException, InterruptedException {",
                "+        Map<String, List<Object>> constraints = copyMapOfObjects(constraints0);",
                "         List<AssertSchemaResult> result = new ArrayList<>(constraints.size());",
                "@@ -79,9 +81,6 @@ public class Schemas {",
                "         for (ConstraintDefinition definition : schema.getConstraints()) {",
                "-            if (!definition.isConstraintType(ConstraintType.UNIQUENESS)) continue;",
                "-",
                "+            if (!(definition.isConstraintType(ConstraintType.UNIQUENESS) || definition.isConstraintType(ConstraintType.NODE_KEY))) continue;",
                "             String label = definition.getLabel().name();",
                "-            String key = Iterables.single(definition.getPropertyKeys());",
                "-",
                "-            AssertSchemaResult info = new AssertSchemaResult(label, key).unique();",
                "-            if (!constraints.containsKey(label) || !constraints.get(label).remove(key)) {",
                "+            AssertSchemaResult info = new AssertSchemaResult(label, Iterables.asList(definition.getPropertyKeys())).unique();",
                "+            if (!constraints.containsKey(label) || !constraints.get(label).remove(info.key)) {",
                "                 if (dropExisting) {",
                "@@ -94,9 +93,11 @@ public class Schemas {",
                "-        for (Map.Entry<String, List<String>> constraint : constraints.entrySet()) {",
                "-            for (String key : constraint.getValue()) {",
                "-                schema.constraintFor(label(constraint.getKey())).assertPropertyIsUnique(key).create();",
                "-                result.add(new AssertSchemaResult(constraint.getKey(), key).unique().created());",
                "+        for (Map.Entry<String, List<Object>> constraint : constraints.entrySet()) {",
                "+            for (Object key : constraint.getValue()) {",
                "+                if (key instanceof String) {",
                "+                    result.add(createUniqueConstraint(schema, constraint.getKey(), key.toString()));",
                "+                } else if (key instanceof List) {",
                "+                    result.add(createNodeKeyConstraint(constraint.getKey(), (List<Object>) key));",
                "+                }",
                "             }",
                "         }",
                "-",
                "         return result;",
                "@@ -104,2 +105,16 @@ public class Schemas {",
                "+    private AssertSchemaResult createNodeKeyConstraint(String lbl, List<Object> keys) {",
                "+        String keyProperties = keys.stream()",
                "+                .map( property -> String.format(\"n.`%s`\", property))",
                "+                .collect( Collectors.joining( \",\" ) );",
                "+        db.execute(String.format(\"CREATE CONSTRAINT ON (n:`%s`) ASSERT (%s) IS NODE KEY\", lbl, keyProperties)).close();",
                "+        List<String> keysToSting = keys.stream().map(Object::toString).collect(Collectors.toList());",
                "+        return new AssertSchemaResult(lbl, keysToSting).unique().created();",
                "+    }",
                "+",
                "+    private AssertSchemaResult createUniqueConstraint(Schema schema, String lbl, String key) {",
                "+        schema.constraintFor(label(lbl)).assertPropertyIsUnique(key).create();",
                "+        return new AssertSchemaResult(lbl, key).unique().created();",
                "+    }",
                "+",
                "     public List<AssertSchemaResult> assertIndexes(Map<String, List<Object>> indexes0, boolean dropExisting) throws ExecutionException, InterruptedException, IllegalArgumentException {",
                "@@ -257,4 +272,3 @@ public class Schemas {",
                "      */",
                "-    private Stream<IndexConstraintNodeInfo> indexesAndConstraintsForNode() throws IndexNotFoundKernelException {",
                "-        Schema schema = db.schema();",
                "+    private Stream<IndexConstraintNodeInfo> indexesAndConstraintsForNode() {",
                "         try ( Statement ignore = tx.acquireStatement() ) {",
                "@@ -265,5 +279,14 @@ public class Schemas {",
                "             Iterable<IndexReference> indexesIterator = () -> schemaRead.indexesGetAll();",
                "-            return StreamSupport.stream(indexesIterator.spliterator(), false)",
                "-                   .map(indexReference -> this.nodeInfoFromIndexDefinition(indexReference, schemaRead, tokens))",
                "+",
                "+            Iterable<ConstraintDescriptor> constraintsIterator = () -> schemaRead.constraintsGetAll();",
                "+            Stream<IndexConstraintNodeInfo> constraintNodeInfoStream = StreamSupport.stream(constraintsIterator.spliterator(), false)",
                "+                    .filter(constraintDescriptor -> constraintDescriptor.type().equals(ConstraintDescriptor.Type.EXISTS))",
                "+                    .map(constraintDescriptor -> this.nodeInfoFromConstraintDescriptor(constraintDescriptor, tokens))",
                "                     .sorted(Comparator.comparing(i -> i.label));",
                "+",
                "+            Stream<IndexConstraintNodeInfo> indexNodeInfoStream = StreamSupport.stream(indexesIterator.spliterator(), false)",
                "+                    .map(indexReference -> this.nodeInfoFromIndexDefinition(indexReference, schemaRead, tokens))",
                "+                    .sorted(Comparator.comparing(i -> i.label));",
                "+",
                "+            return Stream.of(constraintNodeInfoStream, indexNodeInfoStream).flatMap(e -> e);",
                "         }",
                "@@ -284,2 +307,29 @@ public class Schemas {",
                "+",
                "+    /**",
                "+     * ConstraintInfo info from ConstraintDescriptor",
                "+     *",
                "+     * @param constraintDescriptor",
                "+     * @param tokens",
                "+     * @return",
                "+     */",
                "+    private IndexConstraintNodeInfo nodeInfoFromConstraintDescriptor(ConstraintDescriptor constraintDescriptor, TokenNameLookup tokens) {",
                "+        String labelName =  tokens.labelGetName(constraintDescriptor.schema().keyId());",
                "+        List<String> properties = new ArrayList<>();",
                "+        Arrays.stream(constraintDescriptor.schema().getPropertyIds()).forEach((i) -> properties.add(tokens.propertyKeyGetName(i)));",
                "+        return new IndexConstraintNodeInfo(",
                "+                // Pretty print for index name",
                "+                String.format(\":%s(%s)\", labelName, StringUtils.join(properties, \",\")),",
                "+                labelName,",
                "+                properties,",
                "+                StringUtils.EMPTY,",
                "+                ConstraintType.NODE_PROPERTY_EXISTENCE.toString(),",
                "+                \"NO FAILURE\",",
                "+                0,",
                "+                0,",
                "+                0,",
                "+                constraintDescriptor.userDescription(tokens)",
                "+        );",
                "+    }",
                "+",
                "     /**",
                "@@ -289,2 +339,3 @@ public class Schemas {",
                "      * @param schemaRead",
                "+     * @param tokens",
                "      * @return"
            ],
            "changed_files": [
                "src/main/java/apoc/schema/Schemas.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "890": "",
                "939": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 890, 939",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f753fdd8114fb86e5545a9df398a2175a649cfb8",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1539254063,
            "hunks": 2,
            "message": "Fix typo in fileName attribute (#947)",
            "diff": [
                "diff --git a/docs/loadcsv.adoc b/docs/loadcsv.adoc",
                "index 0eb427b0b..91b21fa7f 100644",
                "--- a/docs/loadcsv.adoc",
                "+++ b/docs/loadcsv.adoc",
                "@@ -190,3 +190,3 @@ Jane",
                " ----",
                "-CALL apoc.import.csv([{filename: 'file:/persons.csv', labels: ['Person']}], [], {})",
                "+CALL apoc.import.csv([{fileName: 'file:/persons.csv', labels: ['Person']}], [], {})",
                " ----",
                "@@ -213,4 +213,4 @@ Given the following CSV files and procedure call, the database loads two `Person",
                " CALL apoc.import.csv(",
                "-  [{filename: 'file:/persons.csv', labels: ['Person']}],",
                "-  [{filename: 'file:/knows.csv', type: 'KNOWS'}],",
                "+  [{fileName: 'file:/persons.csv', labels: ['Person']}],",
                "+  [{fileName: 'file:/knows.csv', type: 'KNOWS'}],",
                "   {delimiter: '|', arrayDelimiter: ',', stringIds: false}"
            ],
            "changed_files": [
                "docs/loadcsv.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "947": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 947",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4debe735a944bc70c9cb65f73f03af9f6c07f743",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542983436,
            "hunks": 17,
            "message": "fixes #994 - Provide a configuration parameter map with user/pass for JDBC (#997)",
            "diff": [
                "diff --git a/docs/loadjdbc.adoc b/docs/loadjdbc.adoc",
                "index 3a3c36dd0..6f67b306a 100644",
                "--- a/docs/loadjdbc.adoc",
                "+++ b/docs/loadjdbc.adoc",
                "@@ -379,2 +379,16 @@ Put the JDBC driver into the `$NEO4J_HOME/plugins` directory and configure the J",
                "+Credentials can be passed in two ways:",
                "+",
                "+* into url",
                "+",
                "+----",
                "+CALL apoc.load.jdbc('jdbc:derby:derbyDB;user=apoc;password=Ap0c!#Db;create=true', 'PERSON')",
                "+----",
                "+",
                "+* by config parameter.",
                "+",
                "+----",
                "+CALL apoc.load.jdbc('jdbc:derby:derbyDB', 'PERSON',[],{credentials:{user:'apoc',password:'Ap0c!#Db'}})",
                "+----",
                "+",
                " [options=\"header\",cols=\"a,3m,a\"]",
                "@@ -434,3 +448,3 @@ The jdbcUpdate is use for update relational database, from a SQL statement with",
                " ----",
                "-CALL apoc.load.jdbcUpdate(jdbc-url,statement, params) YIELD  row;",
                "+CALL apoc.load.jdbcUpdate(jdbc-url,statement, params, config) YIELD  row;",
                " ----",
                "@@ -479,2 +493,3 @@ Config param is optional, the default value is an empty map.",
                " |timezone| default value: null",
                "+|credentials| default value: {}",
                " |===",
                "@@ -492 +507,12 @@ CALL apoc.load.jdbc('jdbc:derby:derbyDB','SELECT * FROM PERSON WHERE NAME = ?',[",
                " ----",
                "+",
                "+",
                "+.with credentials",
                "+[source,cypher]",
                "+----",
                "+CALL apoc.load.jdbcUpdate('jdbc:derby:derbyDB','UPDATE PERSON SET NAME = ? WHERE NAME = ?',['John','John'],{credentials:{user:'apoc',password:'Ap0c!#Db'}})",
                "+----",
                "+",
                "+----",
                "+CALL apoc.load.jdbc('jdbc:derby:derbyDB', 'PERSON',[],{credentials:{user:'apoc',password:'Ap0c!#Db'}})",
                "+----",
                "diff --git a/src/main/java/apoc/load/Jdbc.java b/src/main/java/apoc/load/Jdbc.java",
                "index af92f1c8c..a5ca90ed3 100644",
                "--- a/src/main/java/apoc/load/Jdbc.java",
                "+++ b/src/main/java/apoc/load/Jdbc.java",
                "@@ -41,11 +41,15 @@ public class Jdbc {",
                "-    private static Connection getConnection(String jdbcUrl) throws Exception {",
                "-        URI uri = new URI(jdbcUrl.substring(\"jdbc:\".length()));",
                "-        String userInfo = uri.getUserInfo();",
                "-        if (userInfo != null) {",
                "-            String[] user = userInfo.split(\":\");",
                "-            String cleanUrl = jdbcUrl.substring(0,jdbcUrl.indexOf(\"://\")+3)+jdbcUrl.substring(jdbcUrl.indexOf(\"@\")+1);",
                "-            return DriverManager.getConnection(cleanUrl, user[0], user[1]);",
                "+    private static Connection getConnection(String jdbcUrl, LoadJdbcConfig config) throws Exception {",
                "+        if(config.hasCredentials()) {",
                "+            return DriverManager.getConnection(jdbcUrl, config.getCredentials().getUser(), config.getCredentials().getPassword());",
                "+        } else {",
                "+            URI uri = new URI(jdbcUrl.substring(\"jdbc:\".length()));",
                "+            String userInfo = uri.getUserInfo();",
                "+            if (userInfo != null) {",
                "+                String[] user = userInfo.split(\":\");",
                "+                String cleanUrl = jdbcUrl.substring(0, jdbcUrl.indexOf(\"://\") + 3) + jdbcUrl.substring(jdbcUrl.indexOf(\"@\") + 1);",
                "+                return DriverManager.getConnection(cleanUrl, user[0], user[1]);",
                "+            }",
                "+            return DriverManager.getConnection(jdbcUrl);",
                "         }",
                "-        return DriverManager.getConnection(jdbcUrl);",
                "     }",
                "@@ -67,3 +71,3 @@ public class Jdbc {",
                "     @Procedure",
                "-    @Description(\"apoc.load.jdbc('key or url','table or statement', config) YIELD row - load from relational database, from a full table or a sql statement\")",
                "+    @Description(\"apoc.load.jdbc('key or url','table or statement', params, config) YIELD row - load from relational database, from a full table or a sql statement\")",
                "     public Stream<RowResult> jdbc(@Name(\"jdbc\") String urlOrKey, @Name(\"tableOrSql\") String tableOrSelect, @Name",
                "@@ -85,3 +89,3 @@ public class Jdbc {",
                "         try {",
                "-            Connection connection = getConnection(url);",
                "+            Connection connection = getConnection(url,loadJdbcConfig);",
                "             try {",
                "@@ -114,12 +118,13 @@ public class Jdbc {",
                "     @Procedure",
                "-    @Description(\"apoc.load.jdbcUpdate('key or url','statement',[params]) YIELD row - update relational database, from a SQL statement with optional parameters\")",
                "-    public Stream<RowResult> jdbcUpdate(@Name(\"jdbc\") String urlOrKey, @Name(\"query\") String query, @Name(value = \"params\", defaultValue = \"[]\") List<Object> params) {",
                "+    @Description(\"apoc.load.jdbcUpdate('key or url','statement',[params],config) YIELD row - update relational database, from a SQL statement with optional parameters\")",
                "+    public Stream<RowResult> jdbcUpdate(@Name(\"jdbc\") String urlOrKey, @Name(\"query\") String query, @Name(value = \"params\", defaultValue = \"[]\") List<Object> params,  @Name(value = \"config\",defaultValue = \"{}\") Map<String, Object> config) {",
                "         log.info( String.format( \"Executing SQL update: %s\", query ) );",
                "-        return executeUpdate(urlOrKey, query, params.toArray(new Object[params.size()]));",
                "+        return executeUpdate(urlOrKey, query, config, params.toArray(new Object[params.size()]));",
                "     }",
                "-    private Stream<RowResult> executeUpdate(String urlOrKey, String query, Object...params) {",
                "+    private Stream<RowResult> executeUpdate(String urlOrKey, String query, Map<String, Object> config, Object...params) {",
                "         String url = getUrlOrKey(urlOrKey);",
                "+        LoadJdbcConfig jdbcConfig = new LoadJdbcConfig(config);",
                "         try {",
                "-            Connection connection = getConnection(url);",
                "+            Connection connection = getConnection(url,jdbcConfig);",
                "             try {",
                "diff --git a/src/main/java/apoc/load/util/LoadJdbcConfig.java b/src/main/java/apoc/load/util/LoadJdbcConfig.java",
                "index 4a9ff41f6..7e1a69385 100644",
                "--- a/src/main/java/apoc/load/util/LoadJdbcConfig.java",
                "+++ b/src/main/java/apoc/load/util/LoadJdbcConfig.java",
                "@@ -2,2 +2,4 @@ package apoc.load.util;",
                "+import org.apache.commons.lang.StringUtils;",
                "+",
                " import java.time.DateTimeException;",
                "@@ -15,2 +17,4 @@ public class LoadJdbcConfig {",
                "+    private Credentials credentials;",
                "+",
                "     public LoadJdbcConfig(Map<String,Object> config) {",
                "@@ -23,2 +27,3 @@ public class LoadJdbcConfig {",
                "         }",
                "+        this.credentials = config.containsKey(\"credentials\") ? createCredentials((Map<String, String>) config.get(\"credentials\")) : null;",
                "     }",
                "@@ -29,2 +34,38 @@ public class LoadJdbcConfig {",
                "+    public Credentials getCredentials() {",
                "+        return this.credentials;",
                "+    }",
                "+",
                "+    private Credentials createCredentials(Map<String,String> credentials) {",
                "+        if (!credentials.getOrDefault(\"user\", StringUtils.EMPTY).equals(StringUtils.EMPTY) && !credentials.getOrDefault(\"password\", StringUtils.EMPTY).equals(StringUtils.EMPTY)) {",
                "+            return new Credentials(credentials.get(\"user\"), credentials.get(\"password\"));",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"In config param credentials must be passed both user and password.\");",
                "+        }",
                "+    }",
                "+",
                "+    public class Credentials {",
                "+        private String user;",
                "+",
                "+        private String password;",
                "+",
                "+        public Credentials(String user, String password){",
                "+            this.user = user;",
                "+",
                "+            this.password = password;",
                "+        }",
                "+",
                "+        public String getUser() {",
                "+            return user;",
                "+        }",
                "+",
                "+        public String getPassword() {",
                "+            return password;",
                "+        }",
                "+    }",
                "+",
                "+    public boolean hasCredentials() {",
                "+        return this.credentials != null;",
                "+    }",
                "+",
                " }",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "docs/loadjdbc.adoc",
                "src/main/java/apoc/load/Jdbc.java",
                "src/main/java/apoc/load/util/LoadJdbcConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "994": "fixes #994 - Provide a configuration parameter map with user/pass for JDBC #997",
                "997": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 994, 997",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ba6ceada373a2227d230267d0662f8c8f06a1277",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559572259,
            "hunks": 1,
            "message": "print tag and file name",
            "diff": [
                "diff --git a/release.py b/release.py",
                "index d044bba1d..db629063e 100644",
                "--- a/release.py",
                "+++ b/release.py",
                "@@ -35,2 +35,3 @@ if __name__ == \"__main__\":",
                "     file_name = sys.argv[2]",
                "+    print(f\"Deploying release for tag {tag_name} and file {file_name}\")",
                "     main(token, tag_name, file_name)"
            ],
            "changed_files": [
                "release.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "5a15ec456ef74a44856a1a779a5f873b98b3f9b6",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542803227,
            "hunks": 6,
            "message": "Updated build.grade to use the enterprise binaries from bintray",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 82bea4096..3028bb228 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -39,3 +39,3 @@ ext {",
                "     // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic",
                "-    neo4jVersion = \"3.5.0-beta03\"",
                "+    neo4jVersion = \"3.5.0-rc01\"",
                "     // instead we apply the override logic here",
                "@@ -48,2 +48,9 @@ repositories {",
                "     maven { url \"http://oss.sonatype.org/content/repositories/snapshots/\" }",
                "+    maven {",
                "+        url \"https://neo4j.bintray.com/enterprise/\"",
                "+        credentials {",
                "+            username = 'neo4j-enterprise'",
                "+            password = project.getProperty(\"neo4jEnterpriseRepoPassword\")",
                "+        }",
                "+    }",
                "     flatDir { dirs 'lib' }",
                "@@ -95,9 +102,9 @@ dependencies {",
                "-    testCompile group: 'org.neo4j', name: 'neo4j-enterprise', version: neo4jVersionEffective",
                "+    testCompile group: 'com.neo4j', name: 'neo4j-enterprise', version: neo4jVersionEffective",
                "     testCompile group: 'org.neo4j', name: 'neo4j-common', version: neo4jVersionEffective, classifier: \"tests\"",
                "-    testCompile group: 'org.neo4j', name: 'neo4j-com', version: neo4jVersionEffective, classifier: \"tests\"",
                "+    testCompile group: 'com.neo4j', name: 'neo4j-com', version: neo4jVersionEffective, classifier: \"tests\"",
                "     testCompile group: 'org.neo4j.community', name: 'it-test-support', version: neo4jVersionEffective // , classifier: \"tests\"",
                "-    testCompile group: 'org.neo4j', name: 'neo4j-causal-clustering', version: neo4jVersionEffective, classifier: \"tests\"",
                "+    testCompile group: 'com.neo4j', name: 'neo4j-causal-clustering', version: neo4jVersionEffective, classifier: \"tests\"",
                "     testCompile group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersionEffective, classifier: \"tests\"",
                "@@ -127,3 +134,3 @@ dependencies {",
                "     compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective",
                "-    compileOnly group: 'org.neo4j', name: 'neo4j-enterprise', version: neo4jVersionEffective",
                "+    compileOnly group: 'com.neo4j', name: 'neo4j-enterprise', version: neo4jVersionEffective",
                "     compileOnly group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.7'"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5ac2f86ebeb115c233042628009f86085ff82ba7",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559572792,
            "hunks": 1,
            "message": "typo",
            "diff": [
                "diff --git a/release.py b/release.py",
                "index 18deafe91..651cf9be6 100644",
                "--- a/release.py",
                "+++ b/release.py",
                "@@ -9,3 +9,3 @@ def main(token, tag_name, file_name):",
                "     data = {'tag_name': tag_name}",
                "-    response = requests.post(\"https://api.github.com/repos/neo4j-contrib/neo4j-apoc-procedure/releases\",",
                "+    response = requests.post(\"https://api.github.com/repos/neo4j-contrib/neo4j-apoc-procedures/releases\",",
                "                              data=json.dumps(data), headers=headers)"
            ],
            "changed_files": [
                "release.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "91afb8d7d227787e060d72d591a6f14087625469",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1542388328,
            "hunks": 4,
            "message": "Release 3.4.0.4, Neo4j 3.4.10",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 823c8a556..b580775af 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -26,3 +26,3 @@ idea {",
                " group = 'org.neo4j.procedure'",
                "-version = '3.4.0.3'",
                "+version = '3.4.0.4'",
                " archivesBaseName = 'apoc'",
                "@@ -39,3 +39,3 @@ ext {",
                "     // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic",
                "-    neo4jVersion = \"3.4.9\"",
                "+    neo4jVersion = \"3.4.10\"",
                "     // instead we apply the override logic here",
                "@@ -204,3 +204,3 @@ asciidoctor {",
                "     attributes  'apoc-version' : version,",
                "-                'apoc-release' : \"3.4.0.3\",",
                "+                'apoc-release' : \"3.4.0.4\",",
                "                 'neo4j-version' : neo4jVersionEffective,",
                "diff --git a/readme.adoc b/readme.adoc",
                "index a88845e71..9ba0d4407 100644",
                "--- a/readme.adoc",
                "+++ b/readme.adoc",
                "@@ -3,4 +3,4 @@",
                " :docs: https://neo4j-contrib.github.io/neo4j-apoc-procedures/index33.html",
                "-:apoc-release: 3.4.0.3",
                "-:neo4j-version: 3.4.7",
                "+:apoc-release: 3.4.0.4",
                "+:neo4j-version: 3.4.10",
                " :img: https://raw.githubusercontent.com/neo4j-contrib/neo4j-apoc-procedures/{branch}/docs/img"
            ],
            "changed_files": [
                "build.gradle",
                "readme.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "eceec75dcd360d5871306c6ab75ae615149e6d6f",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1540305277,
            "hunks": 1,
            "message": "Neo4j 3.4.9",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 6c042fede..61d0a7905 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -39,3 +39,3 @@ ext {",
                "     // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic",
                "-    neo4jVersion = \"3.4.7\"",
                "+    neo4jVersion = \"3.4.9\"",
                "     // instead we apply the override logic here"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0ee0e84fa00959351ced5ee980122e9666c263a2",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559025693,
            "hunks": 5,
            "message": "Release 3.5.0.4 with Neo4j 3.5.6",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 5de1d8aec..9e614f6f6 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -26,3 +26,3 @@ idea {",
                " group = 'org.neo4j.procedure'",
                "-version = '3.5.0.3'",
                "+version = '3.5.0.4'",
                " archivesBaseName = 'apoc'",
                "@@ -229,3 +229,3 @@ asciidoctor {",
                "     attributes  'apoc-version' : version,",
                "-                'apoc-release' : \"3.5.0.3\",",
                "+                'apoc-release' : \"3.5.0.4\",",
                "                 'neo4j-version' : neo4jVersionEffective,",
                "diff --git a/docs/build.gradle b/docs/build.gradle",
                "index 5646e4daf..55a3a53ae 100644",
                "--- a/docs/build.gradle",
                "+++ b/docs/build.gradle",
                "@@ -31,3 +31,3 @@ plugins {",
                "-if (!project.hasProperty('apocVersion')) { ext.apocVersion = '3.5.0.3' }",
                "+if (!project.hasProperty('apocVersion')) { ext.apocVersion = '3.5.0.4' }",
                "diff --git a/readme.adoc b/readme.adoc",
                "index f337b2d9e..4d69d831a 100644",
                "--- a/readme.adoc",
                "+++ b/readme.adoc",
                "@@ -3,4 +3,4 @@",
                " :docs: https://neo4j-contrib.github.io/neo4j-apoc-procedures/index35.html",
                "-:apoc-release: 3.5.0.3",
                "-:neo4j-version: 3.5.4",
                "+:apoc-release: 3.5.0.4",
                "+:neo4j-version: 3.5.6",
                " :img: https://raw.githubusercontent.com/neo4j-contrib/neo4j-apoc-procedures/{branch}/docs/images",
                "@@ -174,3 +174,3 @@ The trailing `<apoc>` part of the version number will be incremented with every",
                " |apoc version | neo4j version",
                "-| http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.3[3.5.0.3^] | 3.5.4 (3.5.x)",
                "+| http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.5.0.4[3.5.0.4^] | 3.5.6 (3.5.x)",
                " | http://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/3.4.0.4[3.4.0.6^] | 3.4.12 (3.4.x)"
            ],
            "changed_files": [
                "build.gradle",
                "docs/build.gradle",
                "readme.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "77f729a8d249ee61540811f72de715936bbe69be",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1559572622,
            "hunks": 1,
            "message": "string formatting unhappy",
            "diff": [
                "diff --git a/release.py b/release.py",
                "index db629063e..18deafe91 100644",
                "--- a/release.py",
                "+++ b/release.py",
                "@@ -35,3 +35,3 @@ if __name__ == \"__main__\":",
                "     file_name = sys.argv[2]",
                "-    print(f\"Deploying release for tag {tag_name} and file {file_name}\")",
                "+    print(\"Deploying release for tag \" + tag_name + \"  and \" + file_name)",
                "     main(token, tag_name, file_name)"
            ],
            "changed_files": [
                "release.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "faecbc088a6e233fd6753892f2ed678795744913",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1550257466,
            "hunks": 1,
            "message": "Update dependency for saxon library",
            "diff": [
                "diff --git a/docs/build.gradle b/docs/build.gradle",
                "index 8372e251b..6984ab9da 100644",
                "--- a/docs/build.gradle",
                "+++ b/docs/build.gradle",
                "@@ -27,3 +27,3 @@ plugins {",
                "     id 'base'",
                "-    id 'org.neo4j.doc.build.saxon' version '1.0-alpha01'",
                "+    id 'org.neo4j.doc.build.saxon' version '1.0-alpha02'",
                "     id 'org.neo4j.doc.build.docbook' version '1.0-alpha03'"
            ],
            "changed_files": [
                "docs/build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6b728bace45867acd20b4fa665c1625f3db1a0ad",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1540304621,
            "hunks": 1,
            "message": "update 3.5.0-b2",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 235df7c24..d1a7d46c4 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -39,3 +39,3 @@ ext {",
                "     // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic",
                "-    neo4jVersion = \"3.5.0-beta01\"",
                "+    neo4jVersion = \"3.5.0-beta02\"",
                "     // instead we apply the override logic here"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.5.0.1",
                "3.5.0.11",
                "3.5.0.12",
                "3.5.0.13",
                "3.5.0.14",
                "3.5.0.15",
                "3.5.0.15-fix",
                "3.5.0.16",
                "3.5.0.17",
                "3.5.0.18",
                "3.5.0.19",
                "3.5.0.2",
                "3.5.0.20",
                "3.5.0.21",
                "3.5.0.3",
                "3.5.0.4",
                "3.5.0.5",
                "3.5.0.6",
                "3.5.0.7",
                "3.5.0.8",
                "3.5.0.9",
                "4.0.0-rc01",
                "4.0.0.0",
                "4.0.0.1",
                "4.0.0.10",
                "4.0.0.11",
                "4.0.0.12",
                "4.0.0.13",
                "4.0.0.14",
                "4.0.0.15",
                "4.0.0.16",
                "4.0.0.17",
                "4.0.0.18",
                "4.0.0.2",
                "4.0.0.3",
                "4.0.0.4",
                "4.0.0.5",
                "4.0.0.6",
                "4.0.0.7",
                "4.0.0.8",
                "4.0.0.9",
                "4.1.0-rc01",
                "4.1.0.0",
                "4.1.0.1",
                "4.1.0.10",
                "4.1.0.11",
                "4.1.0.12",
                "4.1.0.2",
                "4.1.0.3",
                "4.1.0.4",
                "4.1.0.5",
                "4.1.0.6",
                "4.1.0.7",
                "4.1.0.8",
                "4.1.0.9",
                "4.2.0-rc01",
                "4.2.0.0",
                "4.2.0.1",
                "4.2.0.10",
                "4.2.0.11",
                "4.2.0.12",
                "4.2.0.2",
                "4.2.0.3",
                "4.2.0.4",
                "4.2.0.5",
                "4.2.0.6",
                "4.2.0.7",
                "4.2.0.8",
                "4.2.0.9",
                "4.3.0-rc01",
                "4.3.0-rc03",
                "4.3.0-rc2",
                "4.3.0.0",
                "4.3.0.1",
                "4.3.0.10",
                "4.3.0.11",
                "4.3.0.12",
                "4.3.0.2",
                "4.3.0.3",
                "4.3.0.4",
                "4.3.0.5",
                "4.3.0.6",
                "4.3.0.7",
                "4.3.0.8",
                "4.3.0.9",
                "4.4.0.0",
                "4.4.0.0-alpha01",
                "4.4.0.1",
                "4.4.0.10",
                "4.4.0.11",
                "4.4.0.12",
                "4.4.0.13",
                "4.4.0.14",
                "4.4.0.15",
                "4.4.0.16",
                "4.4.0.17",
                "4.4.0.18",
                "4.4.0.19",
                "4.4.0.2",
                "4.4.0.20",
                "4.4.0.21",
                "4.4.0.22",
                "4.4.0.23",
                "4.4.0.24",
                "4.4.0.25",
                "4.4.0.26",
                "4.4.0.27",
                "4.4.0.28",
                "4.4.0.29",
                "4.4.0.3",
                "4.4.0.4",
                "4.4.0.5",
                "4.4.0.6",
                "4.4.0.7",
                "4.4.0.8",
                "4.4.0.9",
                "5.1.0",
                "5.10.0",
                "5.11.0",
                "5.12.0",
                "5.13.0",
                "5.14.0",
                "5.15.0",
                "5.16.0",
                "5.17.1",
                "5.18.0",
                "5.19.0",
                "5.2.0",
                "5.20.0",
                "5.21.0",
                "5.3.0",
                "5.3.1",
                "5.4.0",
                "5.5.0",
                "5.6.0",
                "5.7.0",
                "5.8.0",
                "5.8.1",
                "5.9.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6b123270ae23ff2467c1d0b199ba81bdbf8138b0",
            "repository": "https://github.com/neo4j-contrib/neo4j-apoc-procedures",
            "timestamp": 1541715541,
            "hunks": 2,
            "message": "fix compile error",
            "diff": [
                "diff --git a/src/main/java/apoc/cypher/CypherInitializer.java b/src/main/java/apoc/cypher/CypherInitializer.java",
                "index eb3785d6f..7f9f12a42 100644",
                "--- a/src/main/java/apoc/cypher/CypherInitializer.java",
                "+++ b/src/main/java/apoc/cypher/CypherInitializer.java",
                "@@ -25,4 +25,4 @@ public class CypherInitializer implements AvailabilityGuard.AvailabilityListener",
                "         for (Object initializer: initializers.values()) {",
                "+            String query = initializer.toString();",
                "             try {",
                "-                String query = initializer.toString();",
                "                 db.execute(query);"
            ],
            "changed_files": [
                "src/main/java/apoc/cypher/CypherInitializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.4.0.4",
                "3.4.0.5",
                "3.4.0.6",
                "3.4.0.7",
                "3.4.0.8"
            ],
            "matched_rules": []
        }
    ]
}
