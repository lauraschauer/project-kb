{
    "advisory_record": {
        "cve_id": "CVE-2018-8017",
        "description": "In Apache Tika 1.2 to 1.18, a carefully crafted file can trigger an infinite loop in the IptcAnpaParser.",
        "reserved_timestamp": 1520553600,
        "published_timestamp": 1537315200,
        "updated_timestamp": 1538733421,
        "repository_url": null,
        "references": {
            "": 57,
            "https://access.redhat.com/support/": 5,
            "https://access.redhat.com/downloads/": 4,
            "https://access.redhat.com/errata/": 3,
            "https://access.redhat.com/labs/": 3,
            "https://lists.apache.org/thread.html/72df7a3f0dda49a912143a1404b489837a11f374dfd1961061873a91%40%3Cdev.tika.apache.org%3E": 2,
            "http://www.securityfocus.com/bid/105513": 2,
            "https://www.openwall.com/lists/oss-security/2018/09/19/6": 2,
            "https://lists.apache.org/thread.html/72df7a3f0dda49a912143a1404b489837a11f374dfd1961061873a91@%3Cdev.tika.apache.org%3E": 2,
            "commit::62926cae31a02d4f23d21148435804b96c543cc7": 2,
            "https://www.modzero.ch/modlog/archives/2018/09/20/java_bugs_with_and_without_fuzzing/index.html": 2,
            "https://github.com/modzero/mod0javaFuzzingResults/blob/master/12_hang_tika_iptc.iptc": 2,
            "https://access.redhat.com/security/cve/cve-2018-8017": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://access.redhat.com/management/": 2,
            "https://access.redhat.com/": 2,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 2,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 2,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 2,
            "https://access.redhat.com/products/": 2,
            "https://access.redhat.com/documentation": 2,
            "https://access.redhat.com/product-life-cycles/": 2,
            "https://access.redhat.com/security": 2,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 2,
            "https://access.redhat.com/security/security-updates/#/cve": 2,
            "https://access.redhat.com/support/contact/": 2,
            "https://status.redhat.com": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://access.redhat.com/downloads/content/package-browser": 1,
            "https://catalog.redhat.com/software/containers/explore/": 1,
            "https://access.redhat.com/articles/1202803": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 1,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 1,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 1,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 1,
            "https://access.redhat.com/documentation/": 1,
            "https://access.redhat.com/security/": 1,
            "https://access.redhat.com/security/vulnerabilities": 1,
            "https://access.redhat.com/security/data": 1,
            "https://access.redhat.com/security/security-updates/#/security-labs": 1,
            "https://access.redhat.com/security/updates/backporting/": 1,
            "https://access.redhat.com/support/cases/": 1,
            "https://access.redhat.com/support/cases/#/troubleshoot": 1,
            "https://access.redhat.com/community": 1,
            "https://access.redhat.com/community/": 1,
            "https://access.redhat.com/discussions/": 1,
            "https://access.redhat.com/announcements/": 1,
            "https://access.redhat.com/accelerators/": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 1,
            "https://cloud.redhat.com/insights": 1,
            "https://access.redhat.com/changeLanguage?language=en": 1,
            "https://access.redhat.com/changeLanguage?language=fr": 1,
            "https://access.redhat.com/changeLanguage?language=ko": 1,
            "https://access.redhat.com/changeLanguage?language=ja": 1,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 1,
            "https://access.redhat.com/products/red-hat-satellite/": 1,
            "https://access.redhat.com/products/red-hat-subscription-management/": 1,
            "https://access.redhat.com/products/red-hat-insights/": 1,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 1,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-quay/": 1,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 1,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 1,
            "https://access.redhat.com/products/red-hat-storage/": 1,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 1,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 1,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 1,
            "https://access.redhat.com/products/red-hat-runtimes/": 1,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 1,
            "https://access.redhat.com/products/red-hat-data-grid/": 1,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 1,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 1,
            "https://access.redhat.com/products/spring-boot/": 1,
            "https://access.redhat.com/products/nodejs/": 1,
            "https://access.redhat.com/products/quarkus/": 1,
            "https://access.redhat.com/products/red-hat-application-foundations/": 1,
            "https://access.redhat.com/products/red-hat-fuse/": 1,
            "https://access.redhat.com/products/red-hat-amq/": 1,
            "https://access.redhat.com/products/red-hat-3scale/": 1,
            "https://redhat.com/en": 1,
            "https://twitter.com/RedHat": 1,
            "https://access.redhat.com/management": 1,
            "https://access.redhat.com/support": 1,
            "https://access.redhat.com/support/customer-service": 1,
            "https://access.redhat.com/articles/33844": 1,
            "https://access.redhat.com/help/login_assistance": 1,
            "https://www.redhat.com/en/trust": 1,
            "https://www.redhat.com/en/about/browser-support": 1,
            "https://www.redhat.com/en/about/digital-accessibility": 1,
            "https://access.redhat.com/recognition/": 1,
            "https://access.redhat.com/help/colophon/": 1,
            "https://www.redhat.com/": 1,
            "http://developers.redhat.com/": 1,
            "https://connect.redhat.com/": 1,
            "https://cloud.redhat.com/": 1,
            "https://access.redhat.com/subscription-value": 1,
            "https://www.redhat.com/about/": 1,
            "http://jobs.redhat.com": 1,
            "https://redhat.com/en/about/company": 1,
            "https://redhat.com/en/jobs": 1,
            "https://redhat.com/en/events": 1,
            "https://redhat.com/en/about/office-locations": 1,
            "https://redhat.com/en/contact": 1,
            "https://redhat.com/en/blog": 1,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 1,
            "https://coolstuff.redhat.com/": 1,
            "https://www.redhat.com/en/summit": 1,
            "https://redhat.com/en/about/privacy-policy": 1,
            "https://redhat.com/en/about/terms-use": 1,
            "https://redhat.com/en/about/all-policies-guidelines": 1,
            "https://redhat.com/en/about/digital-accessibility": 1
        },
        "affected_products": [
            "Apache",
            "Tika",
            "Apache Tika"
        ],
        "versions": {
            "status": "affected",
            "version": "1.2 to 1.18"
        },
        "files": [
            "IptcAnpaParser"
        ],
        "keywords": [
            "file",
            "iptcanpaparser",
            "trigger",
            "craft",
            "tika",
            "apache",
            "loop"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "62926cae31a02d4f23d21148435804b96c543cc7",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527259247,
            "hunks": 6,
            "message": "fix logic in iptc parser",
            "diff": [
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "index ec436e069..c9b628fbf 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "@@ -465,3 +465,3 @@ public class IptcAnpaParser implements Parser {",
                "                   val_next =  (read < value.length) ? value[read++] : 0x00;",
                "-                  if (read > value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "+                  if (read >= value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "                }",
                "@@ -510,3 +510,3 @@ public class IptcAnpaParser implements Parser {",
                "                   val_next =  (read < value.length) ? value[read++] : 0x00;",
                "-                  if (read > value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "+                  if (read >= value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "                }",
                "@@ -577,3 +577,3 @@ public class IptcAnpaParser implements Parser {",
                "                   val_next =  (read < value.length) ? value[read++] : 0x00;",
                "-                  if (read > value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "+                  if (read >= value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "                }",
                "@@ -676,3 +676,3 @@ public class IptcAnpaParser implements Parser {",
                "                   val_next =  (read < value.length) ? value[read++] : 0x00;",
                "-                  if (read > value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "+                  if (read >= value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "                }",
                "@@ -715,3 +715,3 @@ public class IptcAnpaParser implements Parser {",
                "             read++;",
                "-            if (read > value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "+            if (read >= value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "          }",
                "@@ -722,3 +722,3 @@ public class IptcAnpaParser implements Parser {",
                "             val_next =  (read < value.length) ? value[read++] : 0x00;  // skip the new lines",
                "-            if (read > value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "+            if (read >= value.length) { break; }  // shouldn't ever hit this, but save a NPE",
                "          }"
            ],
            "changed_files": [
                "tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8a6a9e1344f5b10ebfa1a189dc3c30d0da2b9d4b"
                ]
            ],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: IptcAnpaParser",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: iptcanpaparser",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f9722b4b7d406caae41f4646ced50695affa2807",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526580576,
            "hunks": 74,
            "message": "TIKA-2644 improve api for recursiveparserwrapper",
            "diff": [
                "diff --git a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "index 31d18a6d3..4175f1ecc 100644",
                "--- a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "@@ -105,2 +105,3 @@ import org.apache.tika.sax.ContentHandlerFactory;",
                " import org.apache.tika.sax.ExpandedTitleContentHandler;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.xmp.XMPMetadata;",
                "@@ -504,5 +505,6 @@ public class TikaCLI {",
                "         Metadata metadata = new Metadata();",
                "-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser, getContentHandlerFactory(type));",
                "+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);",
                "+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(getContentHandlerFactory(type), -1);",
                "         try (InputStream input = TikaInputStream.get(url, metadata)) {",
                "-            wrapper.parse(input, null, metadata, context);",
                "+            wrapper.parse(input, handler, metadata, context);",
                "         }",
                "@@ -511,3 +513,3 @@ public class TikaCLI {",
                "         try {",
                "-            JsonMetadataList.toJson(wrapper.getMetadata(), writer);",
                "+            JsonMetadataList.toJson(handler.getMetadataList(), writer);",
                "         } finally {",
                "diff --git a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "index 5ecc7630f..257a62403 100644",
                "--- a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "+++ b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "@@ -82,2 +82,3 @@ import org.apache.tika.sax.BodyContentHandler;",
                " import org.apache.tika.sax.ContentHandlerDecorator;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "@@ -397,9 +398,12 @@ public class TikaGUI extends JFrame",
                "         if (isReset) {",
                "-            RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser,",
                "-                    new BasicContentHandlerFactory(",
                "-                            BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1));",
                "-            wrapper.parse(input, null, new Metadata(), new ParseContext());",
                "+            RecursiveParserWrapperHandler recursiveParserWrapperHandler =",
                "+                    new RecursiveParserWrapperHandler(",
                "+                            new BasicContentHandlerFactory(",
                "+                                    BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1),",
                "+                            -1);",
                "+            RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);",
                "+            wrapper.parse(input, recursiveParserWrapperHandler, new Metadata(), new ParseContext());",
                "             StringWriter jsonBuffer = new StringWriter();",
                "             JsonMetadataList.setPrettyPrinting(true);",
                "-            JsonMetadataList.toJson(wrapper.getMetadata(), jsonBuffer);",
                "+            JsonMetadataList.toJson(recursiveParserWrapperHandler.getMetadataList(), jsonBuffer);",
                "             setText(json, jsonBuffer.toString());",
                "diff --git a/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java b/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "index 087a482b6..5ccab1737 100644",
                "--- a/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "+++ b/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "@@ -24,2 +24,4 @@ import java.io.OutputStream;",
                " import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.concurrent.ArrayBlockingQueue;",
                "@@ -47,9 +49,18 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "     private boolean parseRecursively = true;",
                "-    private final ParserFactory parserFactory;",
                "+    private final Parser parser;",
                "     private final ContentHandlerFactory contentHandlerFactory;",
                "     private final OutputStreamFactory fsOSFactory;",
                "-    private final TikaConfig config;",
                "-    private String outputEncoding = UTF_8.toString();",
                "-",
                "+    private Charset outputEncoding = StandardCharsets.UTF_8;",
                "+",
                "+    /**",
                "+     * @param queue",
                "+     * @param parserFactory",
                "+     * @param contentHandlerFactory",
                "+     * @param fsOSFactory",
                "+     * @param tikaConfig",
                "+     *",
                "+     * @deprecated use {@link BasicTikaFSConsumer#BasicTikaFSConsumer(ArrayBlockingQueue, Parser, ContentHandlerFactory, OutputStreamFactory)}",
                "+     */",
                "+    @Deprecated",
                "     public BasicTikaFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "@@ -57,9 +68,17 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "                                ContentHandlerFactory contentHandlerFactory,",
                "-                               OutputStreamFactory fsOSFactory,",
                "-                               TikaConfig config) {",
                "+                               OutputStreamFactory fsOSFactory, TikaConfig tikaConfig) {",
                "+        super(queue);",
                "+        this.parser = parserFactory.getParser(tikaConfig);",
                "+        this.contentHandlerFactory = contentHandlerFactory;",
                "+        this.fsOSFactory = fsOSFactory;",
                "+    }",
                "+",
                "+    public BasicTikaFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "+                               Parser parser,",
                "+                               ContentHandlerFactory contentHandlerFactory,",
                "+                               OutputStreamFactory fsOSFactory) {",
                "         super(queue);",
                "-        this.parserFactory = parserFactory;",
                "+        this.parser = parser;",
                "         this.contentHandlerFactory = contentHandlerFactory;",
                "         this.fsOSFactory = fsOSFactory;",
                "-        this.config = config;",
                "     }",
                "@@ -69,3 +88,2 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "-        Parser parser = parserFactory.getParser(config);",
                "         ParseContext context = new ParseContext();",
                "@@ -89,10 +107,4 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "         ContentHandler handler;",
                "-        try {",
                "-            handler = contentHandlerFactory.getNewContentHandler(os, getOutputEncoding());",
                "-        } catch (UnsupportedEncodingException e) {",
                "-            incrementHandledExceptions();",
                "-            LOG.error(getXMLifiedLogMsg(\"output_encoding_ex\", fileResource.getResourceId(), e));",
                "-            flushAndClose(os);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        handler = contentHandlerFactory.getNewContentHandler(os, getOutputEncoding());",
                "+",
                "@@ -117,3 +129,3 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "-    public String getOutputEncoding() {",
                "+    public Charset getOutputEncoding() {",
                "         return outputEncoding;",
                "@@ -121,4 +133,4 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "-    public void setOutputEncoding(String outputEncoding) {",
                "-        this.outputEncoding = outputEncoding;",
                "+    public void setOutputEncoding(Charset charset) {",
                "+        this.outputEncoding = charset;",
                "     }",
                "diff --git a/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java b/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "index f95bcbb09..259157f0b 100644",
                "--- a/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "+++ b/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.parser.RecursiveParserWrapper;",
                " import org.apache.tika.sax.ContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "@@ -51,7 +52,5 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "-",
                "-    private final ParserFactory parserFactory;",
                "+    private final Parser parser;",
                "     private final ContentHandlerFactory contentHandlerFactory;",
                "     private final OutputStreamFactory fsOSFactory;",
                "-    private final TikaConfig tikaConfig;",
                "     private String outputEncoding = \"UTF-8\";",
                "@@ -59,2 +58,10 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "+    /**",
                "+     * @deprecated use {@link RecursiveParserWrapperFSConsumer#RecursiveParserWrapperFSConsumer(ArrayBlockingQueue, Parser, ContentHandlerFactory, OutputStreamFactory)}",
                "+     * @param queue",
                "+     * @param parserFactory",
                "+     * @param contentHandlerFactory",
                "+     * @param fsOSFactory",
                "+     * @param config",
                "+     */",
                "     public RecursiveParserWrapperFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "@@ -62,8 +69,18 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "                                             ContentHandlerFactory contentHandlerFactory,",
                "-                                            OutputStreamFactory fsOSFactory, TikaConfig tikaConfig) {",
                "+                                            OutputStreamFactory fsOSFactory, TikaConfig config) {",
                "         super(queue);",
                "-        this.parserFactory = parserFactory;",
                "         this.contentHandlerFactory = contentHandlerFactory;",
                "         this.fsOSFactory = fsOSFactory;",
                "-        this.tikaConfig = tikaConfig;",
                "+        Parser parserToWrap = parserFactory.getParser(config);",
                "+        this.parser = new RecursiveParserWrapper(parserToWrap, contentHandlerFactory);",
                "+    }",
                "+",
                "+    public RecursiveParserWrapperFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "+                                            Parser parserToWrap,",
                "+                                            ContentHandlerFactory contentHandlerFactory,",
                "+                                            OutputStreamFactory fsOSFactory) {",
                "+        super(queue);",
                "+        this.contentHandlerFactory = contentHandlerFactory;",
                "+        this.fsOSFactory = fsOSFactory;",
                "+        this.parser = new RecursiveParserWrapper(parserToWrap, contentHandlerFactory);",
                "     }",
                "@@ -73,10 +90,4 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "-        Parser wrapped = parserFactory.getParser(tikaConfig);",
                "-        RecursiveParserWrapper parser = new RecursiveParserWrapper(wrapped, contentHandlerFactory);",
                "         ParseContext context = new ParseContext();",
                "-//        if (parseRecursively == true) {",
                "-        context.set(Parser.class, parser);",
                "-//        }",
                "-",
                "         //try to open outputstream first",
                "@@ -102,9 +113,10 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "         Metadata containerMetadata = fileResource.getMetadata();",
                "+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(contentHandlerFactory, -1);",
                "         try {",
                "-            parse(fileResource.getResourceId(), parser, is, new DefaultHandler(),",
                "+            parse(fileResource.getResourceId(), parser, is, handler,",
                "                     containerMetadata, context);",
                "-            metadataList = parser.getMetadata();",
                "+            metadataList = handler.getMetadataList();",
                "         } catch (Throwable t) {",
                "             thrown = t;",
                "-            metadataList = parser.getMetadata();",
                "+            metadataList = handler.getMetadataList();",
                "             if (metadataList == null) {",
                "diff --git a/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java b/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "index 4879af416..d55f3be7a 100644",
                "--- a/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "+++ b/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "@@ -43,2 +43,3 @@ import org.apache.tika.batch.fs.RecursiveParserWrapperFSConsumer;",
                " import org.apache.tika.config.TikaConfig;",
                "+import org.apache.tika.parser.Parser;",
                " import org.apache.tika.sax.BasicContentHandlerFactory;",
                "@@ -131,3 +132,3 @@ public class BasicTikaFSConsumersBuilder extends AbstractConsumersBuilder {",
                "                 contentHandlerFactory, recursiveParserWrapper);",
                "-",
                "+        Parser parser = parserFactory.getParser(config);",
                "         if (recursiveParserWrapper) {",
                "@@ -135,3 +136,3 @@ public class BasicTikaFSConsumersBuilder extends AbstractConsumersBuilder {",
                "                 FileResourceConsumer c = new RecursiveParserWrapperFSConsumer(queue,",
                "-                        parserFactory, contentHandlerFactory, outputStreamFactory, config);",
                "+                        parser, contentHandlerFactory, outputStreamFactory);",
                "                 consumers.add(c);",
                "@@ -141,3 +142,3 @@ public class BasicTikaFSConsumersBuilder extends AbstractConsumersBuilder {",
                "                 FileResourceConsumer c = new BasicTikaFSConsumer(queue,",
                "-                        parserFactory, contentHandlerFactory, outputStreamFactory, config);",
                "+                        parser, contentHandlerFactory, outputStreamFactory);",
                "                 consumers.add(c);",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "new file mode 100644",
                "index 000000000..58f9ec65f",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "@@ -0,0 +1,119 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.sax;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.metadata.Property;",
                "+import org.apache.tika.metadata.TikaCoreProperties;",
                "+import org.apache.tika.utils.ParserUtils;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import java.io.OutputStream;",
                "+import java.nio.charset.Charset;",
                "+",
                "+/**",
                "+ * This is a special handler to be used only with the {@link org.apache.tika.parser.RecursiveParserWrapper}.",
                "+ * It allows for finer-grained processing of embedded documents than in the legacy handlers.",
                "+ * Subclasses can choose how to process individual embedded documents.",
                "+ */",
                "+public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandler {",
                "+",
                "+    public final static Property TIKA_CONTENT = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"content\");",
                "+    public final static Property PARSE_TIME_MILLIS = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX + \"parse_time_millis\");",
                "+    public final static Property WRITE_LIMIT_REACHED =",
                "+            Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"write_limit_reached\");",
                "+    public final static Property EMBEDDED_RESOURCE_LIMIT_REACHED =",
                "+            Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"embedded_resource_limit_reached\");",
                "+",
                "+    public final static Property EMBEDDED_EXCEPTION = ParserUtils.EMBEDDED_EXCEPTION;",
                "+",
                "+    public final static Property EMBEDDED_RESOURCE_PATH =",
                "+            Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"embedded_resource_path\");",
                "+",
                "+    private final ContentHandlerFactory contentHandlerFactory;",
                "+    private final int maxEmbeddedResources;",
                "+    private int embeddedResources = 0;",
                "+",
                "+    public AbstractRecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory) {",
                "+        this(contentHandlerFactory, -1);",
                "+    }",
                "+",
                "+    public AbstractRecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory, int maxEmbeddedResources) {",
                "+        this.contentHandlerFactory = contentHandlerFactory;",
                "+        this.maxEmbeddedResources = maxEmbeddedResources;",
                "+    }",
                "+",
                "+    public ContentHandler getNewContentHandler() {",
                "+        return contentHandlerFactory.getNewContentHandler();",
                "+    }",
                "+",
                "+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {",
                "+        return contentHandlerFactory.getNewContentHandler(os, charset);",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called before parsing each embedded document.  Override this",
                "+     * for custom behavior.  Make sure to call this in your custom classes",
                "+     * because this tracks the number of embedded documents.",
                "+     *",
                "+     * @param contentHandler local handler to be used on this embedded document",
                "+     * @param metadata embedded document's metadata",
                "+     */",
                "+    public void startEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        embeddedResources++;",
                "+    }",
                "+    /**",
                "+     * This is called after parsing each embedded document.  Override this",
                "+     * for custom behavior.  This is currently a no-op.",
                "+     *",
                "+     * @param contentHandler content handler that was used on this embedded document",
                "+     * @param metadata metadata for this embedded document",
                "+     * @throws SAXException",
                "+     */",
                "+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called after the full parse has completed.  Override this",
                "+     * for custom behavior.  Make sure to call this as <code>super.endDocument(...)</code>",
                "+     * in subclasses because this adds whether or not the embedded resource",
                "+     * maximum has been hit to the metadata.",
                "+     *",
                "+     * @param contentHandler content handler that was used on the main document",
                "+     * @param metadata metadata that was gathered for the main document",
                "+     * @throws SAXException",
                "+     */",
                "+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        if (hasHitMaximumEmbeddedResources()) {",
                "+            metadata.set(EMBEDDED_RESOURCE_LIMIT_REACHED, \"true\");",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @return whether this handler has hit the maximum embedded resources during the parse",
                "+     */",
                "+    public boolean hasHitMaximumEmbeddedResources() {",
                "+        if (maxEmbeddedResources > -1 && embeddedResources > maxEmbeddedResources) {",
                "+            return true;",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java b/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "index c611f098a..899994e05 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "@@ -21,2 +21,3 @@ import java.io.OutputStreamWriter;",
                " import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                " import java.util.Locale;",
                "@@ -118,2 +119,7 @@ public class BasicContentHandlerFactory implements ContentHandlerFactory {",
                "     public ContentHandler getNewContentHandler(OutputStream os, String encoding) throws UnsupportedEncodingException {",
                "+        return getNewContentHandler(os, Charset.forName(encoding));",
                "+    }",
                "+",
                "+    @Override",
                "+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {",
                "@@ -122,32 +128,35 @@ public class BasicContentHandlerFactory implements ContentHandlerFactory {",
                "         }",
                "-",
                "-        if (writeLimit > -1) {",
                "-            switch(type) {",
                "-                case BODY:",
                "-                    return new WriteOutContentHandler(",
                "-                            new BodyContentHandler(",
                "-                                    new OutputStreamWriter(os, encoding)), writeLimit);",
                "-                case TEXT:",
                "-                    return new WriteOutContentHandler(new ToTextContentHandler(os, encoding), writeLimit);",
                "-                case HTML:",
                "-                    return new WriteOutContentHandler(new ToHTMLContentHandler(os, encoding), writeLimit);",
                "-                case XML:",
                "-                    return new WriteOutContentHandler(new ToXMLContentHandler(os, encoding), writeLimit);",
                "-                default:",
                "-                    return new WriteOutContentHandler(new ToTextContentHandler(os, encoding), writeLimit);",
                "-            }",
                "-        } else {",
                "-            switch (type) {",
                "-                case BODY:",
                "-                    return new BodyContentHandler(new OutputStreamWriter(os, encoding));",
                "-                case TEXT:",
                "-                    return new ToTextContentHandler(os, encoding);",
                "-                case HTML:",
                "-                    return new ToHTMLContentHandler(os, encoding);",
                "-                case XML:",
                "-                    return new ToXMLContentHandler(os, encoding);",
                "-                default:",
                "-                    return new ToTextContentHandler(os, encoding);",
                "-",
                "+        try {",
                "+            if (writeLimit > -1) {",
                "+                switch (type) {",
                "+                    case BODY:",
                "+                        return new WriteOutContentHandler(",
                "+                                new BodyContentHandler(",
                "+                                        new OutputStreamWriter(os, charset)), writeLimit);",
                "+                    case TEXT:",
                "+                        return new WriteOutContentHandler(new ToTextContentHandler(os, charset.name()), writeLimit);",
                "+                    case HTML:",
                "+                        return new WriteOutContentHandler(new ToHTMLContentHandler(os, charset.name()), writeLimit);",
                "+                    case XML:",
                "+                        return new WriteOutContentHandler(new ToXMLContentHandler(os, charset.name()), writeLimit);",
                "+                    default:",
                "+                        return new WriteOutContentHandler(new ToTextContentHandler(os, charset.name()), writeLimit);",
                "+                }",
                "+            } else {",
                "+                switch (type) {",
                "+                    case BODY:",
                "+                        return new BodyContentHandler(new OutputStreamWriter(os, charset));",
                "+                    case TEXT:",
                "+                        return new ToTextContentHandler(os, charset.name());",
                "+                    case HTML:",
                "+                        return new ToHTMLContentHandler(os, charset.name());",
                "+                    case XML:",
                "+                        return new ToXMLContentHandler(os, charset.name());",
                "+                    default:",
                "+                        return new ToTextContentHandler(os, charset.name());",
                "+",
                "+                }",
                "             }",
                "+        } catch (UnsupportedEncodingException e) {",
                "+            throw new RuntimeException(\"couldn't find charset for name: \"+charset);",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "index c69b980e9..9dd74c499 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "@@ -23,2 +23,3 @@ import java.io.OutputStream;",
                " import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                "@@ -29,3 +30,8 @@ public interface ContentHandlerFactory {",
                "     public ContentHandler getNewContentHandler();",
                "+    /**",
                "+     * @deprecated use {@link #getNewContentHandler(OutputStream, Charset)}",
                "+     */",
                "+    @Deprecated",
                "     public ContentHandler getNewContentHandler(OutputStream os, String encoding) throws UnsupportedEncodingException;",
                "+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset);",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "new file mode 100644",
                "index 000000000..2444a9c1b",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "@@ -0,0 +1,120 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.sax;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.utils.ParserUtils;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * This is the default implementation of {@link AbstractRecursiveParserWrapperHandler}.",
                "+ * See its documentation for more details.",
                "+ *",
                "+ * This caches the a metadata object for each embedded file and for the container file.",
                "+ * It places the extracted content in the metadata object, with this key: {@link AbstractRecursiveParserWrapperHandler#TIKA_CONTENT}",
                "+ * If memory is a concern, subclass AbstractRecursiveParserWrapperHandler to handle each",
                "+ * embedded document.",
                "+ * <p>",
                "+ *     <b>NOTE: This handler must only be used with the {@link org.apache.tika.parser.RecursiveParserWrapper}</b>",
                "+ * </p>",
                "+ */",
                "+public class RecursiveParserWrapperHandler extends AbstractRecursiveParserWrapperHandler {",
                "+",
                "+    private final List<Metadata> metadataList = new LinkedList<>();",
                "+",
                "+    /**",
                "+     * Create a handler with no limit on the number of embedded resources",
                "+     */",
                "+    public RecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory) {",
                "+        super(contentHandlerFactory);",
                "+    }",
                "+",
                "+    /**",
                "+     * Create a handler that limits the number of embedded resources that will be",
                "+     * parsed",
                "+     * @param maxEmbeddedResources number of embedded resources that will be parsed",
                "+     */",
                "+    public RecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory, int maxEmbeddedResources) {",
                "+        super(contentHandlerFactory, maxEmbeddedResources);",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called before parsing an embedded document",
                "+     *",
                "+     * @param contentHandler - local content handler to use on the embedded document",
                "+     * @param metadata metadata to use for the embedded document",
                "+     * @throws SAXException",
                "+     */",
                "+    @Override",
                "+    public void startEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        super.startEmbeddedDocument(contentHandler, metadata);",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called after parsing an embedded document.",
                "+     * @param contentHandler local contenthandler used on the embedded document",
                "+     * @param metadata metadata from the embedded document",
                "+     * @throws SAXException",
                "+     */",
                "+    @Override",
                "+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        super.endEmbeddedDocument(contentHandler, metadata);",
                "+        addContent(contentHandler, metadata);",
                "+        metadataList.add(ParserUtils.cloneMetadata(metadata));",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @param contentHandler content handler used on the main document",
                "+     * @param metadata metadata from the main document",
                "+     * @throws SAXException",
                "+     */",
                "+    @Override",
                "+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        super.endDocument(contentHandler, metadata);",
                "+        addContent(contentHandler, metadata);",
                "+",
                "+        metadataList.add(0, ParserUtils.cloneMetadata(metadata));",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @return a list of Metadata objects, one for the main document and one for each embedded document",
                "+     */",
                "+    public List<Metadata> getMetadataList() {",
                "+        return metadataList;",
                "+    }",
                "+",
                "+    private void addContent(ContentHandler handler, Metadata metadata) {",
                "+",
                "+        if (handler.getClass().equals(DefaultHandler.class)){",
                "+            //no-op: we can't rely on just testing for",
                "+            //empty content because DefaultHandler's toString()",
                "+            //returns e.g. \"org.xml.sax.helpers.DefaultHandler@6c8b1edd\"",
                "+        } else {",
                "+            String content = handler.toString();",
                "+            if (content != null && content.trim().length() > 0 ) {",
                "+                metadata.add(TIKA_CONTENT, content);",
                "+            }",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/ParserUtils.java b/tika-core/src/main/java/org/apache/tika/utils/ParserUtils.java",
                "new file mode 100644",
                "index 000000000..02958c2f1",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/ParserUtils.java",
                "@@ -0,0 +1,142 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.utils;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.apache.tika.io.TemporaryResources;",
                "+import org.apache.tika.io.TikaInputStream;",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.metadata.Property;",
                "+import org.apache.tika.metadata.TikaCoreProperties;",
                "+import org.apache.tika.parser.Parser;",
                "+import org.apache.tika.parser.ParserDecorator;",
                "+",
                "+/**",
                "+ * Helper util methods for Parsers themselves.",
                "+ */",
                "+public class ParserUtils {",
                "+    public final static String X_PARSED_BY = \"X-Parsed-By\"; ",
                "+    public final static Property EMBEDDED_PARSER =",
                "+            Property.internalText(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"embedded_parser\");",
                "+    public final static Property EMBEDDED_EXCEPTION =",
                "+            Property.internalText(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"embedded_exception\");",
                "+    ",
                "+    /**",
                "+     * Does a deep clone of a Metadata object.",
                "+     */",
                "+    public static Metadata cloneMetadata(Metadata m) {",
                "+        Metadata clone = new Metadata();",
                "+        ",
                "+        for (String n : m.names()){",
                "+            if (! m.isMultiValued(n)) {",
                "+                clone.set(n, m.get(n));",
                "+            } else {",
                "+                String[] vals = m.getValues(n);",
                "+                for (int i = 0; i < vals.length; i++) {",
                "+                    clone.add(n, vals[i]);",
                "+                }",
                "+            }",
                "+        }",
                "+        return clone;",
                "+    }",
                "+",
                "+    /**",
                "+     * Identifies the real class name of the {@link Parser}, unwrapping",
                "+     *  any {@link ParserDecorator} decorations on top of it.",
                "+     */",
                "+    public static String getParserClassname(Parser parser) {",
                "+        if (parser instanceof ParserDecorator){",
                "+            return ((ParserDecorator) parser).getWrappedParser().getClass().getName();",
                "+        } else {",
                "+            return parser.getClass().getName();",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Records details of the {@link Parser} used to the {@link Metadata},",
                "+     *  typically wanted where multiple parsers could be picked between",
                "+     *  or used.",
                "+     */",
                "+    public static void recordParserDetails(Parser parser, Metadata metadata) {",
                "+        metadata.add(X_PARSED_BY, getParserClassname(parser));",
                "+    }",
                "+",
                "+    /**",
                "+     * Records details of a {@link Parser}'s failure to the",
                "+     *  {@link Metadata}, so you can check what went wrong even if the",
                "+     *  {@link Exception} wasn't immediately thrown (eg when several different",
                "+     *  Parsers are used)",
                "+     */",
                "+    public static void recordParserFailure(Parser parser, Exception failure, ",
                "+                                           Metadata metadata) {",
                "+        String trace = ExceptionUtils.getStackTrace(failure);",
                "+        metadata.add(EMBEDDED_EXCEPTION, trace);",
                "+        metadata.add(EMBEDDED_PARSER, getParserClassname(parser));",
                "+    }",
                "+",
                "+    /**",
                "+     * Ensures that the Stream will be able to be re-read, by buffering to",
                "+     *  a temporary file if required.",
                "+     * Streams that are automatically OK include {@link TikaInputStream}s",
                "+     *  created from Files or InputStreamFactories, and {@link RereadableInputStream}.",
                "+     */",
                "+    public static InputStream ensureStreamReReadable(InputStream stream, TemporaryResources tmp) throws IOException {",
                "+        // If it's re-readable, we're done",
                "+        if (stream instanceof RereadableInputStream) return stream;",
                "+",
                "+        // Make sure it's a TikaInputStream",
                "+        TikaInputStream tstream = TikaInputStream.cast(stream);",
                "+        if (tstream == null) {",
                "+            tstream = TikaInputStream.get(stream, tmp);",
                "+        }",
                "+",
                "+        // If it's factory based, it's ok",
                "+        if (tstream.getInputStreamFactory() != null) return tstream;",
                "+",
                "+        // Ensure it's file based",
                "+        tstream.getFile();",
                "+        // Prepare for future re-reads",
                "+        tstream.mark(-1);",
                "+        return tstream;",
                "+    }",
                "+    /**",
                "+     * Resets the given {@link TikaInputStream} (checked by ",
                "+     *  {@link #ensureStreamReReadable(InputStream, TemporaryResources)})",
                "+     * so that it can be re-read again.",
                "+     */",
                "+    public static InputStream streamResetForReRead(InputStream stream, TemporaryResources tmp) throws IOException {",
                "+        // If re-readable, rewind to start",
                "+        if (stream instanceof RereadableInputStream) {",
                "+            ((RereadableInputStream)stream).rewind();",
                "+            return stream;",
                "+        }",
                "+",
                "+        // File or Factory based?",
                "+        TikaInputStream tstream = (TikaInputStream)stream;",
                "+        if (tstream.getInputStreamFactory() != null) {",
                "+            // Just get a fresh one each time from the factory",
                "+            return TikaInputStream.get(tstream.getInputStreamFactory(), tmp);",
                "+        }",
                "+",
                "+        // File based, reset stream to beginning of File",
                "+        tstream.reset();",
                "+        tstream.mark(-1);",
                "+        return tstream;",
                "+    }",
                "+}",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java b/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "index 5029ecfab..0a67ad037 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "@@ -63,2 +63,3 @@ import org.apache.tika.metadata.TikaCoreProperties;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "@@ -256,3 +257,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "             data.put(Cols.IS_EMBEDDED, TRUE);",
                "-            data.put(Cols.FILE_NAME, getFileName(m.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH)));",
                "+            data.put(Cols.FILE_NAME, getFileName(m.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH)));",
                "         }",
                "@@ -393,3 +394,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "-        String v = m.get(RecursiveParserWrapper.PARSE_TIME_MILLIS);",
                "+        String v = m.get(AbstractRecursiveParserWrapperHandler.PARSE_TIME_MILLIS);",
                "         if (v != null) {",
                "@@ -416,3 +417,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         if (fullTrace == null) {",
                "-            fullTrace = metadata.get(RecursiveParserWrapper.EMBEDDED_EXCEPTION);",
                "+            fullTrace = metadata.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_EXCEPTION);",
                "         }",
                "@@ -477,3 +478,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         }",
                "-        String c = metadata.get(RecursiveParserWrapper.TIKA_CONTENT);",
                "+        String c = metadata.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);",
                "         if (c == null) {",
                "@@ -725,3 +726,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         for (int i = 1; i < list.size(); i++) {",
                "-            String path = list.get(i).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+            String path = list.get(i).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "             if (path == null) {",
                "@@ -747,3 +748,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         for (int i = 1; i < list.size(); i++) {",
                "-            Integer count = counts.get(list.get(i).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));",
                "+            Integer count = counts.get(list.get(i).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));",
                "             if (count == null) {",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java b/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "index fd1c3824e..749b45045 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "@@ -47,2 +47,3 @@ import org.apache.tika.metadata.TikaCoreProperties;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "@@ -354,6 +355,6 @@ public class ExtractComparer extends AbstractProfiler {",
                "         if (mA != null) {",
                "-            pathA = mA.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+            pathA = mA.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "         }",
                "         if (mB != null) {",
                "-            pathB = mB.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+            pathB = mB.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "         }",
                "@@ -392,3 +393,3 @@ public class ExtractComparer extends AbstractProfiler {",
                "     /**",
                "-     * Try to find the matching metadata based on the RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH",
                "+     * Try to find the matching metadata based on the AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH",
                "      * If you can't find it, return -1;",
                "@@ -421,3 +422,3 @@ public class ExtractComparer extends AbstractProfiler {",
                "         Metadata thisMetadata = metadataListA.get(i);",
                "-        String embeddedPath = thisMetadata.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+        String embeddedPath = thisMetadata.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "         if (embeddedPath != null) {",
                "@@ -425,3 +426,3 @@ public class ExtractComparer extends AbstractProfiler {",
                "                 String thatEmbeddedPath = metadataListB.get(j).get(",
                "-                        RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+                        AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "                 if (embeddedPath.equals(thatEmbeddedPath)) {",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java b/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "index d5f9af3c9..200bf33ca 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.metadata.Metadata;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "@@ -249,3 +250,3 @@ public class ExtractProfiler extends AbstractProfiler {",
                "         data.put(Cols.EMBEDDED_FILE_PATH,",
                "-                m.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));",
                "+                m.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));",
                "         try {",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java b/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "index 2a46b8409..6f2075c8e 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "@@ -25,2 +25,3 @@ import org.apache.tika.mime.MediaType;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.slf4j.Logger;",
                "@@ -150,3 +151,3 @@ public class ExtractReader {",
                "                         Metadata m = metadataList.get(i);",
                "-                        String c = m.get(RecursiveParserWrapper.TIKA_CONTENT);",
                "+                        String c = m.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);",
                "                         if (c != null) {",
                "@@ -156,3 +157,3 @@ public class ExtractReader {",
                "                     }",
                "-                    containerMetadata.set(RecursiveParserWrapper.TIKA_CONTENT, sb.toString());",
                "+                    containerMetadata.set(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT, sb.toString());",
                "                     while (metadataList.size() > 1) {",
                "@@ -180,3 +181,3 @@ public class ExtractReader {",
                "         Metadata m = new Metadata();",
                "-        m.set(RecursiveParserWrapper.TIKA_CONTENT, content);",
                "+        m.set(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT, content);",
                "         //Let's hope the file name has a suffix that can",
                "diff --git a/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java b/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "index 5e3201fae..631099fe5 100644",
                "--- a/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "+++ b/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "@@ -41,2 +41,3 @@ import org.apache.tika.sax.BodyContentHandler;",
                " import org.apache.tika.sax.ContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.xml.sax.SAXException;",
                "@@ -165,3 +166,3 @@ public class ParsingExample {",
                "-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p, factory);",
                "+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p);",
                "         Metadata metadata = new Metadata();",
                "@@ -169,7 +170,8 @@ public class ParsingExample {",
                "         ParseContext context = new ParseContext();",
                "-",
                "+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(factory, -1);",
                "         try (InputStream stream = ParsingExample.class.getResourceAsStream(\"test_recursive_embedded.docx\")) {",
                "-            wrapper.parse(stream, new DefaultHandler(), metadata, context);",
                "+            wrapper.parse(stream, handler, metadata, context);",
                "         }",
                "-        return wrapper.getMetadata();",
                "+",
                "+        return handler.getMetadataList();",
                "     }",
                "diff --git a/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java b/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "index 9a18a8ab1..5516c1d46 100644",
                "--- a/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "+++ b/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "@@ -28,3 +28,3 @@ public class PrettyMetadataKeyComparator implements java.util.Comparator<String>",
                "-        //this is stinky.  This should reference RecursiveParserWrapper.TIKA_CONTENT",
                "+        //this is stinky.  This should reference AbstractRecursiveParserWrapperHandler.TIKA_CONTENT",
                "         //but that would require making core a dependency of serialization...",
                "diff --git a/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java b/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java",
                "index 739794c1d..0658fc415 100644",
                "--- a/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java",
                "+++ b/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.parser.RecursiveParserWrapper;",
                " import org.apache.tika.sax.BasicContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.server.MetadataList;",
                "@@ -130,6 +131,5 @@ public class RecursiveMetadataResource {",
                " \t\t// TODO: parameterize choice of max chars/max embedded attachments",
                "-\t\tBasicContentHandlerFactory.HANDLER_TYPE type =",
                "-                BasicContentHandlerFactory.parseHandlerType(handlerTypeName, DEFAULT_HANDLER_TYPE);",
                "-\t\tRecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser,",
                "-\t\t\t\tnew BasicContentHandlerFactory(type, -1));",
                "+\t\tRecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);",
                "+",
                "+",
                " \t\tTikaResource.fillMetadata(parser, metadata, context, httpHeaders);",
                "@@ -138,4 +138,11 @@ public class RecursiveMetadataResource {",
                " \t\tTikaResource.logRequest(LOG, info, metadata);",
                "-\t\tTikaResource.parse(wrapper, LOG, info.getPath(), is,",
                "-\t\t\t\tnew LanguageHandler() {",
                "+",
                "+        BasicContentHandlerFactory.HANDLER_TYPE type =",
                "+                BasicContentHandlerFactory.parseHandlerType(handlerTypeName, DEFAULT_HANDLER_TYPE);",
                "+\t\tRecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(",
                "+\t\t        new BasicContentHandlerFactory(type, -1), -1);",
                "+\t\tTikaResource.parse(wrapper, LOG, info.getPath(), is, handler, metadata, context);",
                "+\t\t/*",
                "+\t\t    We used to have this non-functional bit of code...refactor to add it back and make it work?",
                "+\t\t\t\t\t\tnew LanguageHandler() {",
                " \t\t\t\t\tpublic void endDocument() {",
                "@@ -143,5 +150,7 @@ public class RecursiveMetadataResource {",
                " \t\t\t\t\t}",
                "-\t\t\t\t}, metadata, context);",
                "-\t\treturn new MetadataList(wrapper.getMetadata());",
                "+\t\t\t\t},",
                "+\t\t */",
                "+\t\treturn new MetadataList(handler.getMetadataList());",
                " \t}",
                "+",
                " }"
            ],
            "changed_files": [
                "tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "tika-core/src/main/java/org/apache/tika/utils/ParserUtils.java",
                "tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2644": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "64fef4ebf77c6e7d1be47c53810986df657eb508"
                ]
            ],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2644",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5c1143b305d8f616d2ffbd35a3a1a082f7fbed37",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527173477,
            "hunks": 9,
            "message": "TIKA-2520 optimize OptimaizeLangDetector default loadModel() \tWhen using tika-server, every single call triggers loadModel and \tthis method is very CPU intensive. \tOptimaize uses immutable objects so we can easily reuse the \tdefault model when no configuration is provided, it's a \t20x improvement for my workload.",
            "diff": [
                "diff --git a/tika-langdetect/src/main/java/org/apache/tika/langdetect/OptimaizeLangDetector.java b/tika-langdetect/src/main/java/org/apache/tika/langdetect/OptimaizeLangDetector.java",
                "index d31559238..585b74819 100644",
                "--- a/tika-langdetect/src/main/java/org/apache/tika/langdetect/OptimaizeLangDetector.java",
                "+++ b/tika-langdetect/src/main/java/org/apache/tika/langdetect/OptimaizeLangDetector.java",
                "@@ -32,2 +32,4 @@ import org.apache.tika.language.detect.LanguageResult;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                " import com.optimaize.langdetect.DetectedLanguage;",
                "@@ -46,2 +48,23 @@ public class OptimaizeLangDetector extends LanguageDetector {",
                "+\tprivate static final List<LanguageProfile> DEFAULT_LANGUAGE_PROFILES;",
                "+\tprivate static final ImmutableSet<String> DEFAULT_LANGUAGES;",
                "+\tprivate static final com.optimaize.langdetect.LanguageDetector DEFAULT_DETECTOR;",
                "+",
                "+",
                "+\tstatic {",
                "+\t\ttry {",
                "+\t\t\tDEFAULT_LANGUAGE_PROFILES = ImmutableList.copyOf(new LanguageProfileReader().readAllBuiltIn());",
                "+",
                "+\t\t\tImmutableSet.Builder<String> builder = new ImmutableSet.Builder<>();",
                "+\t\t\tfor (LanguageProfile profile : DEFAULT_LANGUAGE_PROFILES) {",
                "+\t\t\t\tbuilder.add(makeLanguageName(profile.getLocale()));",
                "+\t\t\t}",
                "+\t\t\tDEFAULT_LANGUAGES = builder.build();",
                "+",
                "+\t\t\tDEFAULT_DETECTOR = createDetector(DEFAULT_LANGUAGE_PROFILES, null);",
                "+\t\t} catch (IOException e) {",
                "+\t\t\tthrow new RuntimeException(\"can't initialize OptimaizeLangDetector\");",
                "+\t\t}",
                "+\t}",
                "+",
                " \tprivate static final int MAX_CHARS_FOR_DETECTION = 20000;",
                "@@ -53,3 +76,3 @@ public class OptimaizeLangDetector extends LanguageDetector {",
                " \tprivate Map<String, Float> languageProbabilities;",
                "-\t",
                "+",
                " \tpublic OptimaizeLangDetector() {",
                "@@ -61,15 +84,14 @@ public class OptimaizeLangDetector extends LanguageDetector {",
                " \t@Override",
                "-\tpublic LanguageDetector loadModels() throws IOException {",
                "-\t\tList<LanguageProfile> languageProfiles = new LanguageProfileReader().readAllBuiltIn();",
                "-\t\t",
                "+\tpublic LanguageDetector loadModels() {",
                " \t\t// FUTURE when the \"language-detector\" project supports short profiles, check if",
                " \t\t// isShortText() returns true and switch to those.",
                "-\t\t",
                "-\t\tlanguages = new HashSet<>();",
                "-\t\tfor (LanguageProfile profile : languageProfiles) {",
                "-\t\t\tlanguages.add(makeLanguageName(profile.getLocale()));",
                "+",
                "+\t\tlanguages = DEFAULT_LANGUAGES;",
                "+",
                "+\t\tif (languageProbabilities != null) {",
                "+\t\t\tdetector = createDetector(DEFAULT_LANGUAGE_PROFILES, languageProbabilities);",
                "+\t\t} else {",
                "+\t\t\tdetector = DEFAULT_DETECTOR;",
                " \t\t}",
                "-\t\t",
                "-\t\tdetector = createDetector(languageProfiles);",
                "-\t\t",
                "+",
                " \t\treturn this;",
                "@@ -78,3 +100,3 @@ public class OptimaizeLangDetector extends LanguageDetector {",
                "-\tprivate String makeLanguageName(LdLocale locale) {",
                "+\tprivate static String makeLanguageName(LdLocale locale) {",
                " \t\treturn LanguageNames.makeName(locale.getLanguage(), locale.getScript().orNull(), locale.getRegion().orNull());",
                "@@ -100,3 +122,3 @@ public class OptimaizeLangDetector extends LanguageDetector {",
                "-\t\tdetector = createDetector(new LanguageProfileReader().readBuiltIn(locales));",
                "+\t\tdetector = createDetector(new LanguageProfileReader().readBuiltIn(locales), languageProbabilities);",
                "@@ -105,3 +127,3 @@ public class OptimaizeLangDetector extends LanguageDetector {",
                "-\tprivate com.optimaize.langdetect.LanguageDetector createDetector(List<LanguageProfile> languageProfiles) {",
                "+\tprivate static com.optimaize.langdetect.LanguageDetector createDetector(List<LanguageProfile> languageProfiles, Map<String, Float> languageProbabilities) {",
                " \t\t// FUTURE currently the short text algorithm doesn't normalize probabilities until the end, which"
            ],
            "changed_files": [
                "tika-langdetect/src/main/java/org/apache/tika/langdetect/OptimaizeLangDetector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2520": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "124a06dc4cd30831d7ee23ebb7f52cd333871d9a"
                ]
            ],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: trigger",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2520",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5f05b511d7d1184f6f25a2b644b615c4f21b8e68",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526580576,
            "hunks": 117,
            "message": "TIKA-2644 - refactor recursiveparserwrapper api",
            "diff": [
                "diff --git a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "index 2af7e043d..399152d6c 100644",
                "--- a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "@@ -104,2 +104,3 @@ import org.apache.tika.sax.ContentHandlerFactory;",
                " import org.apache.tika.sax.ExpandedTitleContentHandler;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.xmp.XMPMetadata;",
                "@@ -500,5 +501,6 @@ public class TikaCLI {",
                "         Metadata metadata = new Metadata();",
                "-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser, getContentHandlerFactory(type));",
                "+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);",
                "+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(getContentHandlerFactory(type), -1);",
                "         try (InputStream input = TikaInputStream.get(url, metadata)) {",
                "-            wrapper.parse(input, null, metadata, context);",
                "+            wrapper.parse(input, handler, metadata, context);",
                "         }",
                "@@ -507,3 +509,3 @@ public class TikaCLI {",
                "         try {",
                "-            JsonMetadataList.toJson(wrapper.getMetadata(), writer);",
                "+            JsonMetadataList.toJson(handler.getMetadataList(), writer);",
                "         } finally {",
                "diff --git a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "index bfec92106..3f40dd324 100644",
                "--- a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "+++ b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "@@ -83,2 +83,3 @@ import org.apache.tika.sax.BodyContentHandler;",
                " import org.apache.tika.sax.ContentHandlerDecorator;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "@@ -398,9 +399,12 @@ public class TikaGUI extends JFrame",
                "         if (isReset) {",
                "-            RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser,",
                "-                    new BasicContentHandlerFactory(",
                "-                            BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1));",
                "-            wrapper.parse(input, null, new Metadata(), new ParseContext());",
                "+            RecursiveParserWrapperHandler recursiveParserWrapperHandler =",
                "+                    new RecursiveParserWrapperHandler(",
                "+                            new BasicContentHandlerFactory(",
                "+                                    BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1),",
                "+                            -1);",
                "+            RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);",
                "+            wrapper.parse(input, recursiveParserWrapperHandler, new Metadata(), new ParseContext());",
                "             StringWriter jsonBuffer = new StringWriter();",
                "             JsonMetadataList.setPrettyPrinting(true);",
                "-            JsonMetadataList.toJson(wrapper.getMetadata(), jsonBuffer);",
                "+            JsonMetadataList.toJson(recursiveParserWrapperHandler.getMetadataList(), jsonBuffer);",
                "             setText(json, jsonBuffer.toString());",
                "diff --git a/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java b/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "index 087a482b6..5ccab1737 100644",
                "--- a/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "+++ b/tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "@@ -24,2 +24,4 @@ import java.io.OutputStream;",
                " import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.concurrent.ArrayBlockingQueue;",
                "@@ -47,9 +49,18 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "     private boolean parseRecursively = true;",
                "-    private final ParserFactory parserFactory;",
                "+    private final Parser parser;",
                "     private final ContentHandlerFactory contentHandlerFactory;",
                "     private final OutputStreamFactory fsOSFactory;",
                "-    private final TikaConfig config;",
                "-    private String outputEncoding = UTF_8.toString();",
                "-",
                "+    private Charset outputEncoding = StandardCharsets.UTF_8;",
                "+",
                "+    /**",
                "+     * @param queue",
                "+     * @param parserFactory",
                "+     * @param contentHandlerFactory",
                "+     * @param fsOSFactory",
                "+     * @param tikaConfig",
                "+     *",
                "+     * @deprecated use {@link BasicTikaFSConsumer#BasicTikaFSConsumer(ArrayBlockingQueue, Parser, ContentHandlerFactory, OutputStreamFactory)}",
                "+     */",
                "+    @Deprecated",
                "     public BasicTikaFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "@@ -57,9 +68,17 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "                                ContentHandlerFactory contentHandlerFactory,",
                "-                               OutputStreamFactory fsOSFactory,",
                "-                               TikaConfig config) {",
                "+                               OutputStreamFactory fsOSFactory, TikaConfig tikaConfig) {",
                "+        super(queue);",
                "+        this.parser = parserFactory.getParser(tikaConfig);",
                "+        this.contentHandlerFactory = contentHandlerFactory;",
                "+        this.fsOSFactory = fsOSFactory;",
                "+    }",
                "+",
                "+    public BasicTikaFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "+                               Parser parser,",
                "+                               ContentHandlerFactory contentHandlerFactory,",
                "+                               OutputStreamFactory fsOSFactory) {",
                "         super(queue);",
                "-        this.parserFactory = parserFactory;",
                "+        this.parser = parser;",
                "         this.contentHandlerFactory = contentHandlerFactory;",
                "         this.fsOSFactory = fsOSFactory;",
                "-        this.config = config;",
                "     }",
                "@@ -69,3 +88,2 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "-        Parser parser = parserFactory.getParser(config);",
                "         ParseContext context = new ParseContext();",
                "@@ -89,10 +107,4 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "         ContentHandler handler;",
                "-        try {",
                "-            handler = contentHandlerFactory.getNewContentHandler(os, getOutputEncoding());",
                "-        } catch (UnsupportedEncodingException e) {",
                "-            incrementHandledExceptions();",
                "-            LOG.error(getXMLifiedLogMsg(\"output_encoding_ex\", fileResource.getResourceId(), e));",
                "-            flushAndClose(os);",
                "-            throw new RuntimeException(e);",
                "-        }",
                "+        handler = contentHandlerFactory.getNewContentHandler(os, getOutputEncoding());",
                "+",
                "@@ -117,3 +129,3 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "-    public String getOutputEncoding() {",
                "+    public Charset getOutputEncoding() {",
                "         return outputEncoding;",
                "@@ -121,4 +133,4 @@ public class BasicTikaFSConsumer extends AbstractFSConsumer {",
                "-    public void setOutputEncoding(String outputEncoding) {",
                "-        this.outputEncoding = outputEncoding;",
                "+    public void setOutputEncoding(Charset charset) {",
                "+        this.outputEncoding = charset;",
                "     }",
                "diff --git a/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java b/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "index f95bcbb09..259157f0b 100644",
                "--- a/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "+++ b/tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.parser.RecursiveParserWrapper;",
                " import org.apache.tika.sax.ContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "@@ -51,7 +52,5 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "-",
                "-    private final ParserFactory parserFactory;",
                "+    private final Parser parser;",
                "     private final ContentHandlerFactory contentHandlerFactory;",
                "     private final OutputStreamFactory fsOSFactory;",
                "-    private final TikaConfig tikaConfig;",
                "     private String outputEncoding = \"UTF-8\";",
                "@@ -59,2 +58,10 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "+    /**",
                "+     * @deprecated use {@link RecursiveParserWrapperFSConsumer#RecursiveParserWrapperFSConsumer(ArrayBlockingQueue, Parser, ContentHandlerFactory, OutputStreamFactory)}",
                "+     * @param queue",
                "+     * @param parserFactory",
                "+     * @param contentHandlerFactory",
                "+     * @param fsOSFactory",
                "+     * @param config",
                "+     */",
                "     public RecursiveParserWrapperFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "@@ -62,8 +69,18 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "                                             ContentHandlerFactory contentHandlerFactory,",
                "-                                            OutputStreamFactory fsOSFactory, TikaConfig tikaConfig) {",
                "+                                            OutputStreamFactory fsOSFactory, TikaConfig config) {",
                "         super(queue);",
                "-        this.parserFactory = parserFactory;",
                "         this.contentHandlerFactory = contentHandlerFactory;",
                "         this.fsOSFactory = fsOSFactory;",
                "-        this.tikaConfig = tikaConfig;",
                "+        Parser parserToWrap = parserFactory.getParser(config);",
                "+        this.parser = new RecursiveParserWrapper(parserToWrap, contentHandlerFactory);",
                "+    }",
                "+",
                "+    public RecursiveParserWrapperFSConsumer(ArrayBlockingQueue<FileResource> queue,",
                "+                                            Parser parserToWrap,",
                "+                                            ContentHandlerFactory contentHandlerFactory,",
                "+                                            OutputStreamFactory fsOSFactory) {",
                "+        super(queue);",
                "+        this.contentHandlerFactory = contentHandlerFactory;",
                "+        this.fsOSFactory = fsOSFactory;",
                "+        this.parser = new RecursiveParserWrapper(parserToWrap, contentHandlerFactory);",
                "     }",
                "@@ -73,10 +90,4 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "-        Parser wrapped = parserFactory.getParser(tikaConfig);",
                "-        RecursiveParserWrapper parser = new RecursiveParserWrapper(wrapped, contentHandlerFactory);",
                "         ParseContext context = new ParseContext();",
                "-//        if (parseRecursively == true) {",
                "-        context.set(Parser.class, parser);",
                "-//        }",
                "-",
                "         //try to open outputstream first",
                "@@ -102,9 +113,10 @@ public class RecursiveParserWrapperFSConsumer extends AbstractFSConsumer {",
                "         Metadata containerMetadata = fileResource.getMetadata();",
                "+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(contentHandlerFactory, -1);",
                "         try {",
                "-            parse(fileResource.getResourceId(), parser, is, new DefaultHandler(),",
                "+            parse(fileResource.getResourceId(), parser, is, handler,",
                "                     containerMetadata, context);",
                "-            metadataList = parser.getMetadata();",
                "+            metadataList = handler.getMetadataList();",
                "         } catch (Throwable t) {",
                "             thrown = t;",
                "-            metadataList = parser.getMetadata();",
                "+            metadataList = handler.getMetadataList();",
                "             if (metadataList == null) {",
                "diff --git a/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java b/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "index 4879af416..d55f3be7a 100644",
                "--- a/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "+++ b/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "@@ -43,2 +43,3 @@ import org.apache.tika.batch.fs.RecursiveParserWrapperFSConsumer;",
                " import org.apache.tika.config.TikaConfig;",
                "+import org.apache.tika.parser.Parser;",
                " import org.apache.tika.sax.BasicContentHandlerFactory;",
                "@@ -131,3 +132,3 @@ public class BasicTikaFSConsumersBuilder extends AbstractConsumersBuilder {",
                "                 contentHandlerFactory, recursiveParserWrapper);",
                "-",
                "+        Parser parser = parserFactory.getParser(config);",
                "         if (recursiveParserWrapper) {",
                "@@ -135,3 +136,3 @@ public class BasicTikaFSConsumersBuilder extends AbstractConsumersBuilder {",
                "                 FileResourceConsumer c = new RecursiveParserWrapperFSConsumer(queue,",
                "-                        parserFactory, contentHandlerFactory, outputStreamFactory, config);",
                "+                        parser, contentHandlerFactory, outputStreamFactory);",
                "                 consumers.add(c);",
                "@@ -141,3 +142,3 @@ public class BasicTikaFSConsumersBuilder extends AbstractConsumersBuilder {",
                "                 FileResourceConsumer c = new BasicTikaFSConsumer(queue,",
                "-                        parserFactory, contentHandlerFactory, outputStreamFactory, config);",
                "+                        parser, contentHandlerFactory, outputStreamFactory);",
                "                 consumers.add(c);",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "index ad0ff3f69..c1fb815ec 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "@@ -19,9 +19,2 @@ package org.apache.tika.parser;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.util.Date;",
                "-import java.util.LinkedList;",
                "-import java.util.List;",
                "-import java.util.Set;",
                "-",
                " import org.apache.tika.exception.TikaException;",
                "@@ -32,3 +25,5 @@ import org.apache.tika.metadata.TikaCoreProperties;",
                " import org.apache.tika.mime.MediaType;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.apache.tika.sax.ContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.utils.ParserUtils;",
                "@@ -36,3 +31,7 @@ import org.xml.sax.ContentHandler;",
                " import org.xml.sax.SAXException;",
                "-import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "@@ -78,18 +77,43 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "-    //move this to TikaCoreProperties?",
                "-    public final static Property TIKA_CONTENT = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"content\");",
                "-    public final static Property PARSE_TIME_MILLIS = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX + \"parse_time_millis\");",
                "+    /**",
                "+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#TIKA_CONTENT}",
                "+     */",
                "+    @Deprecated",
                "+    public final static Property TIKA_CONTENT = AbstractRecursiveParserWrapperHandler.TIKA_CONTENT;",
                "+    /**",
                "+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#PARSE_TIME_MILLIS}",
                "+     */",
                "+    @Deprecated",
                "+    public final static Property PARSE_TIME_MILLIS = AbstractRecursiveParserWrapperHandler.PARSE_TIME_MILLIS;",
                "+",
                "+    /**",
                "+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_EXCEPTION}",
                "+     */",
                "+    @Deprecated",
                "     public final static Property WRITE_LIMIT_REACHED =",
                "-                Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"write_limit_reached\");",
                "-    public final static Property EMBEDDED_RESOURCE_LIMIT_REACHED = ",
                "-                Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"embedded_resource_limit_reached\");",
                "+            AbstractRecursiveParserWrapperHandler.WRITE_LIMIT_REACHED;",
                "+    /**",
                "+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_RESOURCE_LIMIT_REACHED}",
                "+     */",
                "+    @Deprecated",
                "+    public final static Property EMBEDDED_RESOURCE_LIMIT_REACHED =",
                "+            AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_LIMIT_REACHED;",
                "-    public final static Property EMBEDDED_EXCEPTION = ParserUtils.EMBEDDED_EXCEPTION;",
                "-    //move this to TikaCoreProperties?",
                "-    public final static Property EMBEDDED_RESOURCE_PATH = ",
                "-                Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"embedded_resource_path\");",
                "- ",
                "-    private final Parser wrappedParser;",
                "-    private final ContentHandlerFactory contentHandlerFactory;",
                "-    private final List<Metadata> metadatas = new LinkedList<>();",
                "+    /**",
                "+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_EXCEPTION}",
                "+     */",
                "+    @Deprecated",
                "+    public final static Property EMBEDDED_EXCEPTION = AbstractRecursiveParserWrapperHandler.EMBEDDED_EXCEPTION;",
                "+",
                "+    /**",
                "+     * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_RESOURCE_PATH}",
                "+     */",
                "+    @Deprecated",
                "+    public final static Property EMBEDDED_RESOURCE_PATH = AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH;",
                "+",
                "+    /**",
                "+     * @deprecated this should be passed in via the {@link RecursiveParserWrapperHandler}",
                "+     */",
                "+    @Deprecated",
                "+    private ContentHandlerFactory contentHandlerFactory = null;",
                "@@ -97,7 +121,35 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "-    //used in naming embedded resources that don't have a name.",
                "-    private int unknownCount = 0;   ",
                "+    /**",
                "+     * set this on the RecursiveParserWrapperHandler instead",
                "+     * @deprecated this is here only for legacy behavior; it will be removed in 2.0 and/or 1.20",
                "+     */",
                "+    @Deprecated",
                "     private int maxEmbeddedResources = -1;",
                "-    private boolean hitMaxEmbeddedResources = false;",
                "+    /**",
                "+     * @deprecated this is here only for legacy behavior; it will be removed in 2.0 and/or 1.20",
                "+     */",
                "+    @Deprecated",
                "+    private ParserState lastParseState = null;",
                "+    /**",
                "+     * Initialize the wrapper with {@link #catchEmbeddedExceptions} set",
                "+     * to <code>true</code> as default.",
                "+     *",
                "+     * @param wrappedParser parser to use for the container documents and the embedded documents",
                "+     */",
                "+    public RecursiveParserWrapper(Parser wrappedParser) {",
                "+        this(wrappedParser, true);",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @param wrappedParser parser to wrap",
                "+     * @param catchEmbeddedExceptions whether or not to catch+record embedded exceptions.",
                "+     *                                If set to <code>false</code>, embedded exceptions will be thrown and",
                "+     *                                the rest of the file will not be parsed",
                "+     */",
                "+    public RecursiveParserWrapper(Parser wrappedParser, boolean catchEmbeddedExceptions) {",
                "+        super(wrappedParser);",
                "+        this.catchEmbeddedExceptions = catchEmbeddedExceptions;",
                "+    }",
                "     /**",
                "@@ -109,3 +161,5 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "      *                              the container document and each embedded document",
                "+     * @deprecated use {@link RecursiveParserWrapper#RecursiveParserWrapper(Parser)}",
                "      */",
                "+    @Deprecated",
                "     public RecursiveParserWrapper(Parser wrappedParser, ContentHandlerFactory contentHandlerFactory) {",
                "@@ -123,3 +177,5 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "      *                                the metadata object with key: {@link #EMBEDDED_EXCEPTION}.",
                "+     * @deprecated use {@link RecursiveParserWrapper#RecursiveParserWrapper(Parser, boolean)}",
                "      */",
                "+    @Deprecated",
                "     public RecursiveParserWrapper(Parser wrappedParser,",
                "@@ -127,3 +183,2 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "         super(wrappedParser);",
                "-        this.wrappedParser = wrappedParser;",
                "         this.contentHandlerFactory = contentHandlerFactory;",
                "@@ -134,3 +189,3 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "     public Set<MediaType> getSupportedTypes(ParseContext context) {",
                "-        return wrappedParser.getSupportedTypes(context);",
                "+        return getWrappedParser().getSupportedTypes(context);",
                "     }",
                "@@ -147,12 +202,20 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "     @Override",
                "-    public void parse(InputStream stream, ContentHandler ignore,",
                "+    public void parse(InputStream stream, ContentHandler recursiveParserWrapperHandler,",
                "             Metadata metadata, ParseContext context) throws IOException,",
                "             SAXException, TikaException {",
                "-",
                "-        EmbeddedParserDecorator decorator = new EmbeddedParserDecorator(\"/\");",
                "+        //this tracks the state of the parent parser, per call to #parse",
                "+        //in future versions, we can remove lastParseState, and this will be thread-safe",
                "+        ParserState parserState;",
                "+        if (recursiveParserWrapperHandler instanceof AbstractRecursiveParserWrapperHandler) {",
                "+            parserState = new ParserState((AbstractRecursiveParserWrapperHandler)recursiveParserWrapperHandler);",
                "+        } else {",
                "+            parserState = new ParserState(new RecursiveParserWrapperHandler(contentHandlerFactory, maxEmbeddedResources));",
                "+            lastParseState = parserState;",
                "+        }",
                "+        EmbeddedParserDecorator decorator = new EmbeddedParserDecorator(getWrappedParser(), \"/\", parserState);",
                "         context.set(Parser.class, decorator);",
                "-        ContentHandler localHandler = contentHandlerFactory.getNewContentHandler();",
                "-        long started = new Date().getTime();",
                "+        ContentHandler localHandler = parserState.recursiveParserWrapperHandler.getNewContentHandler();",
                "+        long started = System.currentTimeMillis();",
                "         try {",
                "-            wrappedParser.parse(stream, localHandler, metadata, context);",
                "+            getWrappedParser().parse(stream, localHandler, metadata, context);",
                "         } catch (SAXException e) {",
                "@@ -162,12 +225,7 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             }",
                "-            metadata.set(WRITE_LIMIT_REACHED, \"true\");",
                "+            metadata.set(RecursiveParserWrapperHandler.WRITE_LIMIT_REACHED, \"true\");",
                "         } finally {",
                "-            long elapsedMillis = new Date().getTime() - started;",
                "-            metadata.set(PARSE_TIME_MILLIS, Long.toString(elapsedMillis));",
                "-            addContent(localHandler, metadata);",
                "-",
                "-            if (hitMaxEmbeddedResources) {",
                "-                metadata.set(EMBEDDED_RESOURCE_LIMIT_REACHED, \"true\");",
                "-            }",
                "-            metadatas.add(0, ParserUtils.cloneMetadata(metadata));",
                "+            long elapsedMillis = System.currentTimeMillis() - started;",
                "+            metadata.set(RecursiveParserWrapperHandler.PARSE_TIME_MILLIS, Long.toString(elapsedMillis));",
                "+            parserState.recursiveParserWrapperHandler.endDocument(localHandler, metadata);",
                "         }",
                "@@ -180,7 +238,16 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "      * about the ordering of the list after that.",
                "-     * ",
                "+     *",
                "+     * @deprecated use a {@link RecursiveParserWrapperHandler} instead",
                "+     *",
                "      * @return list of Metadata objects that were gathered during the parse",
                "+     * @throws IllegalStateException if you've used a {@link RecursiveParserWrapperHandler} in your last",
                "+     * call to {@link #parse(InputStream, ContentHandler, Metadata, ParseContext)}",
                "      */",
                "+    @Deprecated",
                "     public List<Metadata> getMetadata() {",
                "-        return metadatas;",
                "+        if (lastParseState != null) {",
                "+            return ((RecursiveParserWrapperHandler) lastParseState.recursiveParserWrapperHandler).getMetadataList();",
                "+        } else {",
                "+            throw new IllegalStateException(\"This is deprecated; please use a RecursiveParserWrapperHandler instead\");",
                "+        }",
                "     }",
                "@@ -194,5 +261,6 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "      * If this value is < 0 (the default), the wrapper will store all Metadata.",
                "-     * ",
                "+     * @deprecated set this on a {@link RecursiveParserWrapperHandler}",
                "      * @param max maximum number of embedded resources to store",
                "      */",
                "+    @Deprecated",
                "     public void setMaxEmbeddedResources(int max) {",
                "@@ -203,9 +271,15 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "     /**",
                "-     * This clears the metadata list and resets {@link #unknownCount} and",
                "-     * {@link #hitMaxEmbeddedResources}",
                "+     * This clears the last parser state (metadata list, unknown count, hit embeddedresource count)",
                "+     *",
                "+     * @deprecated use a {@link org.apache.tika.sax.RecursiveParserWrapperHandler} instead",
                "+     * @throws IllegalStateException if you used a {@link RecursiveParserWrapper} in your call",
                "+     * to {@link #parse(InputStream, ContentHandler, Metadata, ParseContext)}",
                "      */",
                "+    @Deprecated",
                "     public void reset() {",
                "-        metadatas.clear();",
                "-        unknownCount = 0;",
                "-        hitMaxEmbeddedResources = false;",
                "+        if (lastParseState != null) {",
                "+            lastParseState = new ParserState(new RecursiveParserWrapperHandler(contentHandlerFactory, maxEmbeddedResources));",
                "+        } else {",
                "+            throw new IllegalStateException(\"This is deprecated; please use a RecursiveParserWrapperHandler instead\");",
                "+        }",
                "     }",
                "@@ -227,4 +301,4 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "     }",
                "-    ",
                "-    private String getResourceName(Metadata metadata) {",
                "+",
                "+    private String getResourceName(Metadata metadata, ParserState state) {",
                "         String objectName = \"\";",
                "@@ -232,26 +306,11 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             objectName = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);",
                "-         } else if (metadata.get(TikaCoreProperties.EMBEDDED_RELATIONSHIP_ID) != null) {",
                "+        } else if (metadata.get(TikaCoreProperties.EMBEDDED_RELATIONSHIP_ID) != null) {",
                "             objectName = metadata.get(TikaCoreProperties.EMBEDDED_RELATIONSHIP_ID);",
                "-         } else {",
                "-            objectName = \"embedded-\" + (++unknownCount);",
                "-         }",
                "-         //make sure that there isn't any path info in the objectName",
                "-         //some parsers can return paths, not just file names",
                "-         objectName = FilenameUtils.getName(objectName);",
                "-         return objectName;",
                "-    }",
                "-    ",
                "-    private void addContent(ContentHandler handler, Metadata metadata) {",
                "-        ",
                "-        if (handler.getClass().equals(DefaultHandler.class)){",
                "-            //no-op: we can't rely on just testing for ",
                "-            //empty content because DefaultHandler's toString()",
                "-            //returns e.g. \"org.xml.sax.helpers.DefaultHandler@6c8b1edd\"",
                "         } else {",
                "-            String content = handler.toString();",
                "-            if (content != null && content.trim().length() > 0 ) {",
                "-                metadata.add(TIKA_CONTENT, content);",
                "-            }",
                "+            objectName = \"embedded-\" + (++state.unknownCount);",
                "         }",
                "-",
                "+        //make sure that there isn't any path info in the objectName",
                "+        //some parsers can return paths, not just file names",
                "+        objectName = FilenameUtils.getName(objectName);",
                "+        return objectName;",
                "     }",
                "@@ -264,6 +323,7 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "         private String location = null;",
                "+        private final ParserState parserState;",
                "-        private EmbeddedParserDecorator(String location) {",
                "-            super(wrappedParser);",
                "+        private EmbeddedParserDecorator(Parser parser, String location, ParserState parseState) {",
                "+            super(parser);",
                "             this.location = location;",
                "@@ -272,2 +332,3 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             }",
                "+            this.parserState = parseState;",
                "         }",
                "@@ -279,5 +340,3 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             //Test to see if we should avoid parsing",
                "-            if (maxEmbeddedResources > -1 && ",
                "-                    metadatas.size() >= maxEmbeddedResources) {",
                "-                hitMaxEmbeddedResources = true;",
                "+            if (parserState.recursiveParserWrapperHandler.hasHitMaximumEmbeddedResources()) {",
                "                 return;",
                "@@ -285,14 +344,15 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             // Work out what this thing is",
                "-            String objectName = getResourceName(metadata);",
                "+            String objectName = getResourceName(metadata, parserState);",
                "             String objectLocation = this.location + objectName;",
                "-            metadata.add(EMBEDDED_RESOURCE_PATH, objectLocation);",
                "+            metadata.add(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH, objectLocation);",
                "+",
                "+",
                "+            //get a fresh handler",
                "+            ContentHandler localHandler = parserState.recursiveParserWrapperHandler.getNewContentHandler();",
                "+            parserState.recursiveParserWrapperHandler.startEmbeddedDocument(localHandler, metadata);",
                "-            //ignore the content handler that is passed in",
                "-            //and get a fresh handler",
                "-            ContentHandler localHandler = contentHandlerFactory.getNewContentHandler();",
                "-            ",
                "             Parser preContextParser = context.get(Parser.class);",
                "-            context.set(Parser.class, new EmbeddedParserDecorator(objectLocation));",
                "-            long started = new Date().getTime();",
                "+            context.set(Parser.class, new EmbeddedParserDecorator(getWrappedParser(), objectLocation, parserState));",
                "+            long started = System.currentTimeMillis();",
                "             try {",
                "@@ -318,3 +378,3 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "                 context.set(Parser.class, preContextParser);",
                "-                long elapsedMillis = new Date().getTime() - started;",
                "+                long elapsedMillis = System.currentTimeMillis() - started;",
                "                 metadata.set(PARSE_TIME_MILLIS, Long.toString(elapsedMillis));",
                "@@ -325,10 +385,21 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             //number of stored resources",
                "-            if (maxEmbeddedResources > -1 && ",
                "-                    metadatas.size() >= maxEmbeddedResources) {",
                "-                hitMaxEmbeddedResources = true;",
                "+            if (parserState.recursiveParserWrapperHandler.hasHitMaximumEmbeddedResources()) {",
                "                 return;",
                "             }",
                "-            addContent(localHandler, metadata);",
                "-            metadatas.add(ParserUtils.cloneMetadata(metadata));",
                "-        }        ",
                "+            parserState.recursiveParserWrapperHandler.endEmbeddedDocument(localHandler, metadata);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * This tracks the state of the parse of a single document.",
                "+     * In future versions, this will allow the RecursiveParserWrapper to be thread safe.",
                "+     */",
                "+    private class ParserState {",
                "+        private int unknownCount = 0;",
                "+        private final AbstractRecursiveParserWrapperHandler recursiveParserWrapperHandler;",
                "+        private ParserState(AbstractRecursiveParserWrapperHandler handler) {",
                "+            this.recursiveParserWrapperHandler = handler;",
                "+        }",
                "+",
                "+",
                "     }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "new file mode 100644",
                "index 000000000..58f9ec65f",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "@@ -0,0 +1,119 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.sax;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.metadata.Property;",
                "+import org.apache.tika.metadata.TikaCoreProperties;",
                "+import org.apache.tika.utils.ParserUtils;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import java.io.OutputStream;",
                "+import java.nio.charset.Charset;",
                "+",
                "+/**",
                "+ * This is a special handler to be used only with the {@link org.apache.tika.parser.RecursiveParserWrapper}.",
                "+ * It allows for finer-grained processing of embedded documents than in the legacy handlers.",
                "+ * Subclasses can choose how to process individual embedded documents.",
                "+ */",
                "+public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandler {",
                "+",
                "+    public final static Property TIKA_CONTENT = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"content\");",
                "+    public final static Property PARSE_TIME_MILLIS = Property.internalText(TikaCoreProperties.TIKA_META_PREFIX + \"parse_time_millis\");",
                "+    public final static Property WRITE_LIMIT_REACHED =",
                "+            Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"write_limit_reached\");",
                "+    public final static Property EMBEDDED_RESOURCE_LIMIT_REACHED =",
                "+            Property.internalBoolean(TikaCoreProperties.TIKA_META_EXCEPTION_PREFIX + \"embedded_resource_limit_reached\");",
                "+",
                "+    public final static Property EMBEDDED_EXCEPTION = ParserUtils.EMBEDDED_EXCEPTION;",
                "+",
                "+    public final static Property EMBEDDED_RESOURCE_PATH =",
                "+            Property.internalText(TikaCoreProperties.TIKA_META_PREFIX+\"embedded_resource_path\");",
                "+",
                "+    private final ContentHandlerFactory contentHandlerFactory;",
                "+    private final int maxEmbeddedResources;",
                "+    private int embeddedResources = 0;",
                "+",
                "+    public AbstractRecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory) {",
                "+        this(contentHandlerFactory, -1);",
                "+    }",
                "+",
                "+    public AbstractRecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory, int maxEmbeddedResources) {",
                "+        this.contentHandlerFactory = contentHandlerFactory;",
                "+        this.maxEmbeddedResources = maxEmbeddedResources;",
                "+    }",
                "+",
                "+    public ContentHandler getNewContentHandler() {",
                "+        return contentHandlerFactory.getNewContentHandler();",
                "+    }",
                "+",
                "+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {",
                "+        return contentHandlerFactory.getNewContentHandler(os, charset);",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called before parsing each embedded document.  Override this",
                "+     * for custom behavior.  Make sure to call this in your custom classes",
                "+     * because this tracks the number of embedded documents.",
                "+     *",
                "+     * @param contentHandler local handler to be used on this embedded document",
                "+     * @param metadata embedded document's metadata",
                "+     */",
                "+    public void startEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        embeddedResources++;",
                "+    }",
                "+    /**",
                "+     * This is called after parsing each embedded document.  Override this",
                "+     * for custom behavior.  This is currently a no-op.",
                "+     *",
                "+     * @param contentHandler content handler that was used on this embedded document",
                "+     * @param metadata metadata for this embedded document",
                "+     * @throws SAXException",
                "+     */",
                "+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called after the full parse has completed.  Override this",
                "+     * for custom behavior.  Make sure to call this as <code>super.endDocument(...)</code>",
                "+     * in subclasses because this adds whether or not the embedded resource",
                "+     * maximum has been hit to the metadata.",
                "+     *",
                "+     * @param contentHandler content handler that was used on the main document",
                "+     * @param metadata metadata that was gathered for the main document",
                "+     * @throws SAXException",
                "+     */",
                "+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        if (hasHitMaximumEmbeddedResources()) {",
                "+            metadata.set(EMBEDDED_RESOURCE_LIMIT_REACHED, \"true\");",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @return whether this handler has hit the maximum embedded resources during the parse",
                "+     */",
                "+    public boolean hasHitMaximumEmbeddedResources() {",
                "+        if (maxEmbeddedResources > -1 && embeddedResources > maxEmbeddedResources) {",
                "+            return true;",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java b/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "index c611f098a..899994e05 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "@@ -21,2 +21,3 @@ import java.io.OutputStreamWriter;",
                " import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                " import java.util.Locale;",
                "@@ -118,2 +119,7 @@ public class BasicContentHandlerFactory implements ContentHandlerFactory {",
                "     public ContentHandler getNewContentHandler(OutputStream os, String encoding) throws UnsupportedEncodingException {",
                "+        return getNewContentHandler(os, Charset.forName(encoding));",
                "+    }",
                "+",
                "+    @Override",
                "+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {",
                "@@ -122,32 +128,35 @@ public class BasicContentHandlerFactory implements ContentHandlerFactory {",
                "         }",
                "-",
                "-        if (writeLimit > -1) {",
                "-            switch(type) {",
                "-                case BODY:",
                "-                    return new WriteOutContentHandler(",
                "-                            new BodyContentHandler(",
                "-                                    new OutputStreamWriter(os, encoding)), writeLimit);",
                "-                case TEXT:",
                "-                    return new WriteOutContentHandler(new ToTextContentHandler(os, encoding), writeLimit);",
                "-                case HTML:",
                "-                    return new WriteOutContentHandler(new ToHTMLContentHandler(os, encoding), writeLimit);",
                "-                case XML:",
                "-                    return new WriteOutContentHandler(new ToXMLContentHandler(os, encoding), writeLimit);",
                "-                default:",
                "-                    return new WriteOutContentHandler(new ToTextContentHandler(os, encoding), writeLimit);",
                "-            }",
                "-        } else {",
                "-            switch (type) {",
                "-                case BODY:",
                "-                    return new BodyContentHandler(new OutputStreamWriter(os, encoding));",
                "-                case TEXT:",
                "-                    return new ToTextContentHandler(os, encoding);",
                "-                case HTML:",
                "-                    return new ToHTMLContentHandler(os, encoding);",
                "-                case XML:",
                "-                    return new ToXMLContentHandler(os, encoding);",
                "-                default:",
                "-                    return new ToTextContentHandler(os, encoding);",
                "-",
                "+        try {",
                "+            if (writeLimit > -1) {",
                "+                switch (type) {",
                "+                    case BODY:",
                "+                        return new WriteOutContentHandler(",
                "+                                new BodyContentHandler(",
                "+                                        new OutputStreamWriter(os, charset)), writeLimit);",
                "+                    case TEXT:",
                "+                        return new WriteOutContentHandler(new ToTextContentHandler(os, charset.name()), writeLimit);",
                "+                    case HTML:",
                "+                        return new WriteOutContentHandler(new ToHTMLContentHandler(os, charset.name()), writeLimit);",
                "+                    case XML:",
                "+                        return new WriteOutContentHandler(new ToXMLContentHandler(os, charset.name()), writeLimit);",
                "+                    default:",
                "+                        return new WriteOutContentHandler(new ToTextContentHandler(os, charset.name()), writeLimit);",
                "+                }",
                "+            } else {",
                "+                switch (type) {",
                "+                    case BODY:",
                "+                        return new BodyContentHandler(new OutputStreamWriter(os, charset));",
                "+                    case TEXT:",
                "+                        return new ToTextContentHandler(os, charset.name());",
                "+                    case HTML:",
                "+                        return new ToHTMLContentHandler(os, charset.name());",
                "+                    case XML:",
                "+                        return new ToXMLContentHandler(os, charset.name());",
                "+                    default:",
                "+                        return new ToTextContentHandler(os, charset.name());",
                "+",
                "+                }",
                "             }",
                "+        } catch (UnsupportedEncodingException e) {",
                "+            throw new RuntimeException(\"couldn't find charset for name: \"+charset);",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "index c69b980e9..9dd74c499 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "@@ -23,2 +23,3 @@ import java.io.OutputStream;",
                " import java.io.UnsupportedEncodingException;",
                "+import java.nio.charset.Charset;",
                "@@ -29,3 +30,8 @@ public interface ContentHandlerFactory {",
                "     public ContentHandler getNewContentHandler();",
                "+    /**",
                "+     * @deprecated use {@link #getNewContentHandler(OutputStream, Charset)}",
                "+     */",
                "+    @Deprecated",
                "     public ContentHandler getNewContentHandler(OutputStream os, String encoding) throws UnsupportedEncodingException;",
                "+    public ContentHandler getNewContentHandler(OutputStream os, Charset charset);",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "new file mode 100644",
                "index 000000000..2444a9c1b",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "@@ -0,0 +1,120 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.sax;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.utils.ParserUtils;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * This is the default implementation of {@link AbstractRecursiveParserWrapperHandler}.",
                "+ * See its documentation for more details.",
                "+ *",
                "+ * This caches the a metadata object for each embedded file and for the container file.",
                "+ * It places the extracted content in the metadata object, with this key: {@link AbstractRecursiveParserWrapperHandler#TIKA_CONTENT}",
                "+ * If memory is a concern, subclass AbstractRecursiveParserWrapperHandler to handle each",
                "+ * embedded document.",
                "+ * <p>",
                "+ *     <b>NOTE: This handler must only be used with the {@link org.apache.tika.parser.RecursiveParserWrapper}</b>",
                "+ * </p>",
                "+ */",
                "+public class RecursiveParserWrapperHandler extends AbstractRecursiveParserWrapperHandler {",
                "+",
                "+    private final List<Metadata> metadataList = new LinkedList<>();",
                "+",
                "+    /**",
                "+     * Create a handler with no limit on the number of embedded resources",
                "+     */",
                "+    public RecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory) {",
                "+        super(contentHandlerFactory);",
                "+    }",
                "+",
                "+    /**",
                "+     * Create a handler that limits the number of embedded resources that will be",
                "+     * parsed",
                "+     * @param maxEmbeddedResources number of embedded resources that will be parsed",
                "+     */",
                "+    public RecursiveParserWrapperHandler(ContentHandlerFactory contentHandlerFactory, int maxEmbeddedResources) {",
                "+        super(contentHandlerFactory, maxEmbeddedResources);",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called before parsing an embedded document",
                "+     *",
                "+     * @param contentHandler - local content handler to use on the embedded document",
                "+     * @param metadata metadata to use for the embedded document",
                "+     * @throws SAXException",
                "+     */",
                "+    @Override",
                "+    public void startEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        super.startEmbeddedDocument(contentHandler, metadata);",
                "+    }",
                "+",
                "+    /**",
                "+     * This is called after parsing an embedded document.",
                "+     * @param contentHandler local contenthandler used on the embedded document",
                "+     * @param metadata metadata from the embedded document",
                "+     * @throws SAXException",
                "+     */",
                "+    @Override",
                "+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        super.endEmbeddedDocument(contentHandler, metadata);",
                "+        addContent(contentHandler, metadata);",
                "+        metadataList.add(ParserUtils.cloneMetadata(metadata));",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @param contentHandler content handler used on the main document",
                "+     * @param metadata metadata from the main document",
                "+     * @throws SAXException",
                "+     */",
                "+    @Override",
                "+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        super.endDocument(contentHandler, metadata);",
                "+        addContent(contentHandler, metadata);",
                "+",
                "+        metadataList.add(0, ParserUtils.cloneMetadata(metadata));",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @return a list of Metadata objects, one for the main document and one for each embedded document",
                "+     */",
                "+    public List<Metadata> getMetadataList() {",
                "+        return metadataList;",
                "+    }",
                "+",
                "+    private void addContent(ContentHandler handler, Metadata metadata) {",
                "+",
                "+        if (handler.getClass().equals(DefaultHandler.class)){",
                "+            //no-op: we can't rely on just testing for",
                "+            //empty content because DefaultHandler's toString()",
                "+            //returns e.g. \"org.xml.sax.helpers.DefaultHandler@6c8b1edd\"",
                "+        } else {",
                "+            String content = handler.toString();",
                "+            if (content != null && content.trim().length() > 0 ) {",
                "+                metadata.add(TIKA_CONTENT, content);",
                "+            }",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java b/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "index 5029ecfab..0a67ad037 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "@@ -63,2 +63,3 @@ import org.apache.tika.metadata.TikaCoreProperties;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "@@ -256,3 +257,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "             data.put(Cols.IS_EMBEDDED, TRUE);",
                "-            data.put(Cols.FILE_NAME, getFileName(m.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH)));",
                "+            data.put(Cols.FILE_NAME, getFileName(m.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH)));",
                "         }",
                "@@ -393,3 +394,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "-        String v = m.get(RecursiveParserWrapper.PARSE_TIME_MILLIS);",
                "+        String v = m.get(AbstractRecursiveParserWrapperHandler.PARSE_TIME_MILLIS);",
                "         if (v != null) {",
                "@@ -416,3 +417,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         if (fullTrace == null) {",
                "-            fullTrace = metadata.get(RecursiveParserWrapper.EMBEDDED_EXCEPTION);",
                "+            fullTrace = metadata.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_EXCEPTION);",
                "         }",
                "@@ -477,3 +478,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         }",
                "-        String c = metadata.get(RecursiveParserWrapper.TIKA_CONTENT);",
                "+        String c = metadata.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);",
                "         if (c == null) {",
                "@@ -725,3 +726,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         for (int i = 1; i < list.size(); i++) {",
                "-            String path = list.get(i).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+            String path = list.get(i).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "             if (path == null) {",
                "@@ -747,3 +748,3 @@ public abstract class AbstractProfiler extends FileResourceConsumer {",
                "         for (int i = 1; i < list.size(); i++) {",
                "-            Integer count = counts.get(list.get(i).get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));",
                "+            Integer count = counts.get(list.get(i).get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));",
                "             if (count == null) {",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java b/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "index f142c5b58..1ff5f0b6a 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "@@ -47,2 +47,3 @@ import org.apache.tika.metadata.TikaCoreProperties;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "@@ -354,6 +355,6 @@ public class ExtractComparer extends AbstractProfiler {",
                "         if (mA != null) {",
                "-            pathA = mA.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+            pathA = mA.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "         }",
                "         if (mB != null) {",
                "-            pathB = mB.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+            pathB = mB.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "         }",
                "@@ -392,3 +393,3 @@ public class ExtractComparer extends AbstractProfiler {",
                "     /**",
                "-     * Try to find the matching metadata based on the RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH",
                "+     * Try to find the matching metadata based on the AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH",
                "      * If you can't find it, return -1;",
                "@@ -421,3 +422,3 @@ public class ExtractComparer extends AbstractProfiler {",
                "         Metadata thisMetadata = metadataListA.get(i);",
                "-        String embeddedPath = thisMetadata.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+        String embeddedPath = thisMetadata.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "         if (embeddedPath != null) {",
                "@@ -425,3 +426,3 @@ public class ExtractComparer extends AbstractProfiler {",
                "                 String thatEmbeddedPath = metadataListB.get(j).get(",
                "-                        RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH);",
                "+                        AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH);",
                "                 if (embeddedPath.equals(thatEmbeddedPath)) {",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java b/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "index d5f9af3c9..200bf33ca 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.metadata.Metadata;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "@@ -249,3 +250,3 @@ public class ExtractProfiler extends AbstractProfiler {",
                "         data.put(Cols.EMBEDDED_FILE_PATH,",
                "-                m.get(RecursiveParserWrapper.EMBEDDED_RESOURCE_PATH));",
                "+                m.get(AbstractRecursiveParserWrapperHandler.EMBEDDED_RESOURCE_PATH));",
                "         try {",
                "diff --git a/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java b/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "index 7bafa97eb..d4069190e 100644",
                "--- a/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "+++ b/tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "@@ -26,2 +26,3 @@ import org.apache.tika.mime.MediaType;",
                " import org.apache.tika.parser.RecursiveParserWrapper;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.slf4j.Logger;",
                "@@ -151,3 +152,3 @@ public class ExtractReader {",
                "                         Metadata m = metadataList.get(i);",
                "-                        String c = m.get(RecursiveParserWrapper.TIKA_CONTENT);",
                "+                        String c = m.get(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT);",
                "                         if (c != null) {",
                "@@ -157,3 +158,3 @@ public class ExtractReader {",
                "                     }",
                "-                    containerMetadata.set(RecursiveParserWrapper.TIKA_CONTENT, sb.toString());",
                "+                    containerMetadata.set(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT, sb.toString());",
                "                     while (metadataList.size() > 1) {",
                "@@ -181,3 +182,3 @@ public class ExtractReader {",
                "         Metadata m = new Metadata();",
                "-        m.set(RecursiveParserWrapper.TIKA_CONTENT, content);",
                "+        m.set(AbstractRecursiveParserWrapperHandler.TIKA_CONTENT, content);",
                "         //Let's hope the file name has a suffix that can",
                "diff --git a/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java b/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "index a5d2c3b5c..d85c2af66 100644",
                "--- a/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "+++ b/tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "@@ -42,2 +42,3 @@ import org.apache.tika.sax.BodyContentHandler;",
                " import org.apache.tika.sax.ContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.xml.sax.SAXException;",
                "@@ -166,3 +167,3 @@ public class ParsingExample {",
                "-        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p, factory);",
                "+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p);",
                "         Metadata metadata = new Metadata();",
                "@@ -170,7 +171,8 @@ public class ParsingExample {",
                "         ParseContext context = new ParseContext();",
                "-",
                "+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(factory, -1);",
                "         try (InputStream stream = ParsingExample.class.getResourceAsStream(\"test_recursive_embedded.docx\")) {",
                "-            wrapper.parse(stream, new DefaultHandler(), metadata, context);",
                "+            wrapper.parse(stream, handler, metadata, context);",
                "         }",
                "-        return wrapper.getMetadata();",
                "+",
                "+        return handler.getMetadataList();",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/multiple/PickBestTextEncodingParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/multiple/PickBestTextEncodingParser.java",
                "index b1a0caa0f..104429873 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/multiple/PickBestTextEncodingParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/multiple/PickBestTextEncodingParser.java",
                "@@ -172,2 +172,7 @@ public class PickBestTextEncodingParser extends AbstractMultipleParser {",
                "         }",
                "+",
                "+        @Override",
                "+        public ContentHandler getNewContentHandler(OutputStream os, Charset charset) {",
                "+            return getNewContentHandler();",
                "+        }",
                "     }",
                "diff --git a/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java b/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "index 9a18a8ab1..5516c1d46 100644",
                "--- a/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "+++ b/tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "@@ -28,3 +28,3 @@ public class PrettyMetadataKeyComparator implements java.util.Comparator<String>",
                "-        //this is stinky.  This should reference RecursiveParserWrapper.TIKA_CONTENT",
                "+        //this is stinky.  This should reference AbstractRecursiveParserWrapperHandler.TIKA_CONTENT",
                "         //but that would require making core a dependency of serialization...",
                "diff --git a/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java b/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java",
                "index 739794c1d..0658fc415 100644",
                "--- a/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java",
                "+++ b/tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.parser.RecursiveParserWrapper;",
                " import org.apache.tika.sax.BasicContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.apache.tika.server.MetadataList;",
                "@@ -130,6 +131,5 @@ public class RecursiveMetadataResource {",
                " \t\t// TODO: parameterize choice of max chars/max embedded attachments",
                "-\t\tBasicContentHandlerFactory.HANDLER_TYPE type =",
                "-                BasicContentHandlerFactory.parseHandlerType(handlerTypeName, DEFAULT_HANDLER_TYPE);",
                "-\t\tRecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser,",
                "-\t\t\t\tnew BasicContentHandlerFactory(type, -1));",
                "+\t\tRecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);",
                "+",
                "+",
                " \t\tTikaResource.fillMetadata(parser, metadata, context, httpHeaders);",
                "@@ -138,4 +138,11 @@ public class RecursiveMetadataResource {",
                " \t\tTikaResource.logRequest(LOG, info, metadata);",
                "-\t\tTikaResource.parse(wrapper, LOG, info.getPath(), is,",
                "-\t\t\t\tnew LanguageHandler() {",
                "+",
                "+        BasicContentHandlerFactory.HANDLER_TYPE type =",
                "+                BasicContentHandlerFactory.parseHandlerType(handlerTypeName, DEFAULT_HANDLER_TYPE);",
                "+\t\tRecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(",
                "+\t\t        new BasicContentHandlerFactory(type, -1), -1);",
                "+\t\tTikaResource.parse(wrapper, LOG, info.getPath(), is, handler, metadata, context);",
                "+\t\t/*",
                "+\t\t    We used to have this non-functional bit of code...refactor to add it back and make it work?",
                "+\t\t\t\t\t\tnew LanguageHandler() {",
                " \t\t\t\t\tpublic void endDocument() {",
                "@@ -143,5 +150,7 @@ public class RecursiveMetadataResource {",
                " \t\t\t\t\t}",
                "-\t\t\t\t}, metadata, context);",
                "-\t\treturn new MetadataList(wrapper.getMetadata());",
                "+\t\t\t\t},",
                "+\t\t */",
                "+\t\treturn new MetadataList(handler.getMetadataList());",
                " \t}",
                "+",
                " }"
            ],
            "changed_files": [
                "tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "tika-batch/src/main/java/org/apache/tika/batch/fs/BasicTikaFSConsumer.java",
                "tika-batch/src/main/java/org/apache/tika/batch/fs/RecursiveParserWrapperFSConsumer.java",
                "tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "tika-core/src/main/java/org/apache/tika/sax/BasicContentHandlerFactory.java",
                "tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "tika-eval/src/main/java/org/apache/tika/eval/AbstractProfiler.java",
                "tika-eval/src/main/java/org/apache/tika/eval/ExtractComparer.java",
                "tika-eval/src/main/java/org/apache/tika/eval/ExtractProfiler.java",
                "tika-eval/src/main/java/org/apache/tika/eval/io/ExtractReader.java",
                "tika-example/src/main/java/org/apache/tika/example/ParsingExample.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/multiple/PickBestTextEncodingParser.java",
                "tika-serialization/src/main/java/org/apache/tika/metadata/serialization/PrettyMetadataKeyComparator.java",
                "tika-server/src/main/java/org/apache/tika/server/resource/RecursiveMetadataResource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2644": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2644",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "536df9ce90a18ea6e8827e704e54afe162719953",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527090914,
            "hunks": 14,
            "message": "TIKA-2648 detect interpreted server-side script languages mime detection based on resource name used to detect the mime-type of \"http://example.com/test.php\" as being \"text/x-php\" whereas given such an URL, the file extension doesn't give us any information about the mime type that will be returned by the server",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeType.java b/tika-core/src/main/java/org/apache/tika/mime/MimeType.java",
                "index b4d651e42..d52c20b3d 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/mime/MimeType.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeType.java",
                "@@ -112,2 +112,8 @@ public final class MimeType implements Comparable<MimeType>, Serializable {",
                "+    /**",
                "+     * Whether this mime-type is used for server-side scripts,",
                "+     * and thus cannot reliably be used for filename-based type detection",
                "+     */",
                "+    private boolean isInterpreted = false;",
                "+",
                "     /**",
                "@@ -304,2 +310,13 @@ public final class MimeType implements Comparable<MimeType>, Serializable {",
                "+    /**",
                "+     * whether the type is used as a server-side scripting technology",
                "+     */",
                "+    boolean isInterpreted() {",
                "+        return isInterpreted;",
                "+    }",
                "+",
                "+    void setInterpreted(boolean interpreted) {",
                "+        isInterpreted = interpreted;",
                "+    }",
                "+",
                "     /**",
                "diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java",
                "index 4acfe0155..501793e57 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java",
                "@@ -504,2 +504,3 @@ public final class MimeTypes implements Detector, Serializable {",
                "             String name = null;",
                "+            boolean isHttp = false;",
                "@@ -508,2 +509,4 @@ public final class MimeTypes implements Detector, Serializable {",
                "                 URI uri = new URI(resourceName);",
                "+                String scheme = uri.getScheme();",
                "+                isHttp = scheme != null && scheme.startsWith(\"http\"); // http or https",
                "                 String path = uri.getPath();",
                "@@ -521,7 +524,10 @@ public final class MimeTypes implements Detector, Serializable {",
                "                 MimeType hint = getMimeType(name);",
                "-                ",
                "-                // If we have some types based on mime magic, try to specialise",
                "-                //  and/or select the type based on that",
                "-                // Otherwise, use the type identified from the name",
                "-                possibleTypes = applyHint(possibleTypes, hint);",
                "+",
                "+                // For server-side scripting languages, we cannot rely on the filename to detect the mime type",
                "+                if (!(isHttp && hint.isInterpreted())) {",
                "+                    // If we have some types based on mime magic, try to specialise",
                "+                    //  and/or select the type based on that",
                "+                    // Otherwise, use the type identified from the name",
                "+                    possibleTypes = applyHint(possibleTypes, hint);",
                "+                }",
                "             }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "index 565aaf83d..50cc21b62 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "@@ -171,4 +171,7 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "                 String name = attributes.getValue(MIME_TYPE_TYPE_ATTR);",
                "+                String interpretedAttr = attributes.getValue(INTERPRETED_ATTR);",
                "+                boolean interpreted = \"true\".equals(interpretedAttr);",
                "                 try {",
                "                     type = types.forName(name);",
                "+                    type.setInterpreted(interpreted);",
                "                 } catch (MimeTypeException e) {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReaderMetKeys.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReaderMetKeys.java",
                "index 98bfee5cc..c77cc5c43 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReaderMetKeys.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReaderMetKeys.java",
                "@@ -29,2 +29,4 @@ public interface MimeTypesReaderMetKeys {",
                "+    String INTERPRETED_ATTR = \"interpreted\";",
                "+",
                "     String ACRONYM_TAG = \"acronym\";",
                "diff --git a/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml b/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml",
                "index 104cd2ce7..256c26fd4 100644",
                "--- a/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml",
                "+++ b/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml",
                "@@ -5989,3 +5989,3 @@",
                "-  <mime-type type=\"text/asp\">",
                "+  <mime-type type=\"text/asp\" interpreted=\"true\">",
                "     <_comment>Active Server Page</_comment>",
                "@@ -5995,3 +5995,3 @@",
                "-  <mime-type type=\"text/aspdotnet\">",
                "+  <mime-type type=\"text/aspdotnet\" interpreted=\"true\">",
                "     <_comment>ASP .NET</_comment>",
                "@@ -6416,3 +6416,3 @@",
                "-  <mime-type type=\"text/x-cgi\">",
                "+  <mime-type type=\"text/x-cgi\" interpreted=\"true\">",
                "     <_comment>CGI script</_comment>",
                "@@ -6470,3 +6470,3 @@",
                "-  <mime-type type=\"text/x-coldfusion\">",
                "+  <mime-type type=\"text/x-coldfusion\" interpreted=\"true\">",
                "     <_comment>ColdFusion source code</_comment>",
                "@@ -6586,3 +6586,3 @@",
                "-  <mime-type type=\"text/x-jsp\">",
                "+  <mime-type type=\"text/x-jsp\" interpreted=\"true\">",
                "     <_comment>Java Server Page</_comment>",
                "@@ -6714,3 +6714,3 @@",
                "-  <mime-type type=\"text/x-php\">",
                "+  <mime-type type=\"text/x-php\" interpreted=\"true\">",
                "     <_comment>PHP script</_comment>"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/mime/MimeType.java",
                "tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java",
                "tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "tika-core/src/main/java/org/apache/tika/mime/MimeTypesReaderMetKeys.java",
                "tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2648": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2648",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb33286282a3cb17ddd3b1911738e2068fd4d742",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527862285,
            "hunks": 1,
            "message": "TIKA-2658: add olympus raw file magic numbers",
            "diff": [
                "diff --git a/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml b/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml",
                "index 104cd2ce7..41ba203f4 100644",
                "--- a/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml",
                "+++ b/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml",
                "@@ -5680,2 +5680,5 @@",
                "     <_comment>Olympus raw image</_comment>",
                "+    <magic priority=\"50\">",
                "+      <match offset=\"0\" type=\"string\" value=\"\\x49\\x49\\x52\\x4F\"/>",
                "+    </magic>",
                "     <glob pattern=\"*.orf\"/>"
            ],
            "changed_files": [
                "tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2658": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2658",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8d26096e9d579bee74ac01df9ae773e66e0bfc74",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527250446,
            "hunks": 4,
            "message": "TIKA-2100 extract content language from html lang attribute",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/XHTMLContentHandler.java b/tika-core/src/main/java/org/apache/tika/sax/XHTMLContentHandler.java",
                "index 4742339fa..a2008208f 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/XHTMLContentHandler.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/XHTMLContentHandler.java",
                "@@ -140,3 +140,8 @@ public class XHTMLContentHandler extends SafeContentHandler {",
                "             // ignore these elements.",
                "-            super.startElement(XHTML, \"html\", \"html\", EMPTY_ATTRIBUTES);",
                "+            AttributesImpl htmlAttrs = new AttributesImpl();",
                "+            String lang = metadata.get(Metadata.CONTENT_LANGUAGE);",
                "+            if (lang != null) {",
                "+                htmlAttrs.addAttribute(\"\", \"lang\", \"lang\", \"CDATA\", lang);",
                "+            }",
                "+            super.startElement(XHTML, \"html\", \"html\", htmlAttrs);",
                "             newline();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java",
                "index e453db1e1..ab3af5587 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java",
                "@@ -18,16 +18,2 @@ package org.apache.tika.parser.html;",
                "-import java.io.ByteArrayInputStream;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.net.MalformedURLException;",
                "-import java.net.URL;",
                "-import java.nio.charset.StandardCharsets;",
                "-import java.util.Arrays;",
                "-import java.util.HashSet;",
                "-import java.util.List;",
                "-import java.util.Locale;",
                "-import java.util.Set;",
                "-import java.util.regex.Matcher;",
                "-import java.util.regex.Pattern;",
                "-",
                " import org.apache.tika.extractor.EmbeddedDocumentExtractor;",
                "@@ -49,2 +35,12 @@ import org.xml.sax.helpers.AttributesImpl;",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.net.MalformedURLException;",
                "+import java.net.URL;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.*;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                " class HtmlHandler extends TextContentHandler {",
                "@@ -121,2 +117,5 @@ class HtmlHandler extends TextContentHandler {",
                "+        if (\"HTML\".equals(name) && atts.getValue(\"lang\") != null) {",
                "+            metadata.set(Metadata.CONTENT_LANGUAGE, atts.getValue(\"lang\"));",
                "+        }",
                "         if (\"SCRIPT\".equals(name)) {"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/sax/XHTMLContentHandler.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2100": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7536ed91afd9a3fe744464e34f95f3108c6bd5a2"
                ]
            ],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2100",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4afd8f0cc4b732261a0382039d6c23f0df4bf07b",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527617852,
            "hunks": 1,
            "message": "TIKA-2653 -- fix debugger on ForkParser test",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index f48adfb2e..7a66ff4a0 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -204,3 +204,4 @@ class ForkClient {",
                "             } else {",
                "-                throw new IOException(\"Unexpected byte while waiting for start beacon: \"+type);",
                "+                //can't do this because of ForkParserIntegrationTest#testAttachingADebuggerOnTheForkedParserShouldWork",
                "+//                throw new IOException(\"Unexpected byte while waiting for start beacon: \"+type);",
                "             }"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2653": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "56ff337b65a5ee66c582ad0e877c6bc583bc3adf"
                ]
            ],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2653",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0101164e1c525191da9a571b97739bf289ea32b4",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526925356,
            "hunks": 69,
            "message": "TIKA-2645 - use a pool for SAXParsers -- tika-parsers package",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java b/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "index 0f338b758..78b72467f 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "@@ -44,2 +44,4 @@ import org.xml.sax.helpers.DefaultHandler;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                " public class NetworkParser extends AbstractParser {",
                "@@ -126,4 +128,6 @@ public class NetworkParser extends AbstractParser {",
                "                     new OfflineContentHandler(handler));",
                "+            SAXParser parser = null;",
                "             try {",
                "-                context.getSAXParser().parse(",
                "+                parser = context.acquireSAXParser();",
                "+                parser.parse(",
                "                         stream, new TeeContentHandler(",
                "@@ -138,2 +142,3 @@ public class NetworkParser extends AbstractParser {",
                "             } finally {",
                "+                context.releaseParser(parser);",
                "                 try {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "index 2a3afcde4..6ad85ff7b 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "@@ -54,3 +54,2 @@ public class ParseContext implements Serializable {",
                "-    private final XMLReaderUtils xmlReaderUtils = new XMLReaderUtils();",
                "     /** Map of objects in this context */",
                "@@ -155,3 +154,3 @@ public class ParseContext implements Serializable {",
                "         }",
                "-        return xmlReaderUtils.acquireSAXParser();",
                "+        return XMLReaderUtils.acquireSAXParser();",
                "     }",
                "@@ -165,3 +164,3 @@ public class ParseContext implements Serializable {",
                "      */",
                "-    public void releaseParser(SAXParser parser) throws TikaException {",
                "+    public void releaseParser(SAXParser parser) {",
                "         if (context.containsKey(SAXParser.class)) {",
                "@@ -169,3 +168,3 @@ public class ParseContext implements Serializable {",
                "         }",
                "-        xmlReaderUtils.releaseParser(parser);",
                "+        XMLReaderUtils.releaseParser(parser);",
                "     }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "index 4ed58b463..a2ad9fcb8 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "@@ -290,2 +290,3 @@ public class XMLReaderUtils implements Serializable {",
                "             throws TikaException {",
                "+        int waiting = 0;",
                "         while (true) {",
                "@@ -294,3 +295,3 @@ public class XMLReaderUtils implements Serializable {",
                "                 READ_WRITE_LOCK.readLock().lock();",
                "-                parser = SAX_PARSERS.poll(10, TimeUnit.MILLISECONDS);",
                "+                parser = SAX_PARSERS.poll(100, TimeUnit.MILLISECONDS);",
                "             } catch (InterruptedException e) {",
                "@@ -299,3 +300,2 @@ public class XMLReaderUtils implements Serializable {",
                "                 READ_WRITE_LOCK.readLock().unlock();",
                "-",
                "             }",
                "@@ -304,2 +304,8 @@ public class XMLReaderUtils implements Serializable {",
                "             }",
                "+            waiting++;",
                "+            if (waiting > 3000) {",
                "+                //better to get an exception than have permahang by a bug in one of our parsers",
                "+                throw new TikaException(\"Waited more than 5 minutes for a SAXParser; this could indicate SAXParser leakage.  \" +",
                "+                        \"Please report this to the Tika team dev@tika.apache.org\");",
                "+            }",
                "         }",
                "@@ -323,2 +329,6 @@ public class XMLReaderUtils implements Serializable {",
                "             boolean success = SAX_PARSERS.offer(parser);",
                "+            if (! success) {",
                "+                LOG.warning(\"SAXParser not taken back into pool.  If you haven't resized the pool, this could \" +",
                "+                        \"be a sign that there are more calls to 'acquire' than to 'release'\");",
                "+            }",
                "         } finally {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "index 5957508cf..237fa0bc1 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "@@ -38,2 +38,4 @@ import org.xml.sax.SAXException;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                " public class DIFParser extends AbstractParser {",
                "@@ -63,4 +65,6 @@ public class DIFParser extends AbstractParser {",
                " \t\tTaggedContentHandler tagged = new TaggedContentHandler(handler);",
                "+\t\tSAXParser parser = null;",
                " \t\ttry {",
                "-\t\t\tcontext.getSAXParser().parse(",
                "+\t\t\tparser = context.acquireSAXParser();",
                "+\t\t\tparser.parse(",
                " \t\t\t\t\tnew CloseShieldInputStream(stream),",
                "@@ -72,2 +76,3 @@ public class DIFParser extends AbstractParser {",
                " \t\t} finally {",
                "+\t\t\tcontext.releaseParser(parser);",
                " \t\t\txhtml.endElement(\"p\");",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "index 83686d93d..44d5f7211 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "@@ -50,6 +50,12 @@ public class EpubContentParser extends AbstractParser {",
                "-        SAXParser parser = context.getSAXParser();",
                "-        parser.parse(",
                "-                new CloseShieldInputStream(stream),",
                "-                new OfflineContentHandler(handler));",
                "+        SAXParser parser = null;",
                "+        try {",
                "+            parser = context.acquireSAXParser();",
                "+",
                "+            parser.parse(",
                "+                    new CloseShieldInputStream(stream),",
                "+                    new OfflineContentHandler(handler));",
                "+        } finally {",
                "+            context.releaseParser(parser);",
                "+        }",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "index 79d82e857..17d30e99c 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "@@ -27,2 +27,3 @@ import java.util.Set;",
                " import javax.xml.namespace.QName;",
                "+import javax.xml.parsers.SAXParser;",
                "@@ -205,6 +206,13 @@ public class IWorkPackageParser extends AbstractParser {",
                "                if (contentHandler != null) {",
                "-                  context.getSAXParser().parse(",
                "-                          new CloseShieldInputStream(entryStream),",
                "-                          new OfflineContentHandler(contentHandler)",
                "-                  );",
                "+                   SAXParser parser = null;",
                "+                   try {",
                "+                       parser = context.acquireSAXParser();",
                "+",
                "+                       parser.parse(",
                "+                               new CloseShieldInputStream(entryStream),",
                "+                               new OfflineContentHandler(contentHandler)",
                "+                       );",
                "+                   } finally {",
                "+                       context.releaseParser(parser);",
                "+                   }",
                "                }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "index 288e99cc6..2453cb973 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "@@ -70,2 +70,4 @@ import org.xml.sax.helpers.AttributesImpl;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                " /**",
                "@@ -517,4 +519,6 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {",
                "                     PackagePart relatedPartPart = parentPart.getRelatedPart(relatedPartPackageRelationship);",
                "+                    SAXParser parser = null;",
                "                     try (InputStream stream = relatedPartPart.getInputStream()) {",
                "-                        context.getSAXParser().parse(stream,",
                "+                        parser = context.acquireSAXParser();",
                "+                        parser.parse(stream,",
                "                                 new OfflineContentHandler(new EmbeddedContentHandler(contentHandler)));",
                "@@ -524,2 +528,4 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {",
                "                                 ExceptionUtils.getStackTrace(e));",
                "+                    } finally {",
                "+                        context.releaseParser(parser);",
                "                     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "index 47d0a0772..46cfc9831 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "@@ -51,2 +51,4 @@ import org.xml.sax.helpers.DefaultHandler;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                " /**",
                "@@ -160,4 +162,6 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "             }",
                "+            SAXParser parser = null;",
                "             try (InputStream stream = commentAuthorsPart.getInputStream()) {",
                "-                context.getSAXParser().parse(",
                "+                parser = context.acquireSAXParser();",
                "+                parser.parse(",
                "                         new CloseShieldInputStream(stream),",
                "@@ -168,2 +172,4 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "                         ExceptionUtils.getStackTrace(e));",
                "+            } finally {",
                "+                context.releaseParser(parser);",
                "             }",
                "@@ -178,4 +184,6 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "         xhtml.startElement(\"div\", \"class\", \"slide-content\");",
                "+        SAXParser parser = null;",
                "         try (InputStream stream = slidePart.getInputStream()) {",
                "-            context.getSAXParser().parse(",
                "+            parser = context.acquireSAXParser();",
                "+            parser.parse(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -188,2 +196,4 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     ExceptionUtils.getStackTrace(e));",
                "+        } finally {",
                "+            context.releaseParser(parser);",
                "         }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "index 287a129d8..82919d328 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "@@ -49,2 +49,4 @@ import org.xml.sax.SAXException;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                " /**",
                "@@ -189,4 +191,6 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {",
                "         Map<String, String> linkedRelationships = loadLinkedRelationships(packagePart, true, metadata);",
                "+        SAXParser parser = null;",
                "         try (InputStream stream = packagePart.getInputStream()) {",
                "-            context.getSAXParser().parse(",
                "+            parser = context.acquireSAXParser();",
                "+            parser.parse(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -199,3 +203,4 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     ExceptionUtils.getStackTrace(e));",
                "-",
                "+        } finally {",
                "+            context.releaseParser(parser);",
                "         }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "index c3b728540..06f8cbf44 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "@@ -197,4 +197,5 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "         //consider adding this back to POI",
                "+        SAXParser parser = null;",
                "         try (InputStream wbData = xssfReader.getWorkbookData()) {",
                "-            SAXParser parser = parseContext.getSAXParser();",
                "+            parser = parseContext.acquireSAXParser();",
                "             parser.parse(wbData, new OfflineContentHandler(new AbsPathExtractorHandler()));",
                "@@ -202,2 +203,4 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             //swallow",
                "+        } finally {",
                "+            parseContext.releaseParser(parser);",
                "         }",
                "@@ -337,4 +340,7 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "         InputSource sheetSource = new InputSource(sheetInputStream);",
                "+        SAXParser parser = null;",
                "         try {",
                "-            XMLReader sheetParser = parseContext.getXMLReader();",
                "+            parser = parseContext.acquireSAXParser();",
                "+",
                "+            XMLReader sheetParser = parser.getXMLReader();",
                "             XSSFSheetInterestingPartsCapturer handler =",
                "@@ -351,2 +357,4 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             throw new RuntimeException(\"SAX parser appears to be broken - \" + e.getMessage());",
                "+        } finally {",
                "+            parseContext.releaseParser(parser);",
                "         }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "index 689db28dc..9ef992de5 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "@@ -42,2 +42,3 @@ import org.xml.sax.helpers.DefaultHandler;",
                "+import javax.xml.parsers.SAXParser;",
                " import java.io.IOException;",
                "@@ -130,5 +131,6 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                                  XHTMLContentHandler xhtml) throws IOException, SAXException, TikaException {",
                "-",
                "+        SAXParser parser = null;",
                "         try (InputStream stream = pkg.getPart(packageRelationship).getInputStream()) {",
                "-            context.getSAXParser().parse(",
                "+            parser = context.acquireSAXParser();",
                "+            parser.parse(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -136,2 +138,4 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                             new FixedDocSeqHandler(xhtml))));",
                "+        } finally {",
                "+            context.releaseParser(parser);",
                "         }",
                "@@ -181,4 +185,6 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "             if (pkg instanceof ZipPackage) {",
                "+                SAXParser parser = null;",
                "                 try (InputStream stream = getZipStream(zipPath, pkg)) {",
                "-                    context.getSAXParser().parse(",
                "+                    parser = context.acquireSAXParser();",
                "+                    parser.parse(",
                "                             new CloseShieldInputStream(stream),",
                "@@ -189,2 +195,4 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     throw new SAXException(new TikaException(\"IOException trying to read: \" + docRef));",
                "+                } finally {",
                "+                    context.releaseParser(parser);",
                "                 }",
                "@@ -228,4 +236,6 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     }",
                "+                    SAXParser parser = null;",
                "                     try (InputStream stream = getZipStream(pagePath, pkg)) {",
                "-                        context.getSAXParser().parse(",
                "+                        parser = context.acquireSAXParser();",
                "+                        parser.parse(",
                "                                 new CloseShieldInputStream(stream),",
                "@@ -237,2 +247,4 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                         throw new SAXException(e);",
                "+                    } finally {",
                "+                        context.releaseParser(parser);",
                "                     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "index 08837475d..1b5e76bfc 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "@@ -33,2 +33,4 @@ import org.xml.sax.helpers.DefaultHandler;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                " /**",
                "@@ -60,4 +62,10 @@ public class XWPFStylesShim {",
                "     private void onDocumentLoad(ParseContext parseContext, InputStream stream) throws TikaException, IOException, SAXException {",
                "-        parseContext.getSAXParser().parse(stream,",
                "-                new OfflineContentHandler(new StylesStripper()));",
                "+        SAXParser parser = null;",
                "+        try {",
                "+            parser = parseContext.acquireSAXParser();",
                "+            parser.parse(stream,",
                "+                    new OfflineContentHandler(new StylesStripper()));",
                "+        } finally {",
                "+            parseContext.releaseParser(parser);",
                "+        }",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "index ff8a43da6..4b78e6f65 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "@@ -36,2 +36,4 @@ import org.xml.sax.SAXException;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                "@@ -57,5 +59,6 @@ public class Word2006MLParser extends AbstractOfficeParser {",
                "         xhtml.startDocument();",
                "-",
                "+        SAXParser parser = null;",
                "         try {",
                "-            context.getSAXParser().parse(",
                "+            parser = context.acquireSAXParser();",
                "+            parser.parse(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -66,2 +69,3 @@ public class Word2006MLParser extends AbstractOfficeParser {",
                "         } finally {",
                "+            context.releaseParser(parser);",
                "             xhtml.endDocument();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "index 18e54868c..8ad4fe258 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "@@ -42,2 +42,4 @@ import org.xml.sax.helpers.AttributesImpl;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                "@@ -96,4 +98,6 @@ public abstract class AbstractXML2003Parser extends AbstractParser {",
                "         TaggedContentHandler tagged = new TaggedContentHandler(xhtml);",
                "+        SAXParser parser = null;",
                "         try {",
                "-            context.getSAXParser().parse(",
                "+            parser = context.acquireSAXParser();",
                "+            parser.parse(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -105,2 +109,3 @@ public abstract class AbstractXML2003Parser extends AbstractParser {",
                "         } finally {",
                "+            context.releaseParser(parser);",
                "             xhtml.endDocument();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "index 478fed7c8..7d5397638 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "@@ -594,6 +594,13 @@ public class TesseractOCRParser extends AbstractParser implements Initializable",
                "         }",
                "-        SAXParser parser = parseContext.getSAXParser();",
                "+",
                "         xhtml.startElement(\"div\", \"class\", \"ocr\");",
                "-        parser.parse(is, new OfflineContentHandler(new HOCRPassThroughHandler(xhtml)));",
                "+        SAXParser parser = null;",
                "+        try {",
                "+            parser = parseContext.acquireSAXParser();",
                "+            parser.parse(is, new OfflineContentHandler(new HOCRPassThroughHandler(xhtml)));",
                "+        } finally {",
                "+            parseContext.releaseParser(parser);",
                "+        }",
                "         xhtml.endElement(\"div\");",
                "+",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "index 18ebc49c7..da71755f0 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "@@ -598,7 +598,11 @@ public class OpenDocumentContentParser extends AbstractParser {",
                "-        SAXParser parser = context.getSAXParser();",
                "-        parser.parse(",
                "-                new CloseShieldInputStream(stream),",
                "-                new OfflineContentHandler(",
                "-                        new NSNormalizerContentHandler(dh)));",
                "+        SAXParser parser = context.acquireSAXParser();",
                "+        try {",
                "+            parser.parse(",
                "+                    new CloseShieldInputStream(stream),",
                "+                    new OfflineContentHandler(",
                "+                            new NSNormalizerContentHandler(dh)));",
                "+        } finally {",
                "+            context.releaseParser(parser);",
                "+        }",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "index b17058d1a..328b71108 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "@@ -39,2 +39,4 @@ import org.xml.sax.SAXException;",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                " /**",
                "@@ -70,4 +72,6 @@ public class XMLParser extends AbstractParser {",
                "         TaggedContentHandler tagged = new TaggedContentHandler(handler);",
                "+        SAXParser parser = null;",
                "         try {",
                "-            context.getSAXParser().parse(",
                "+            parser = context.acquireSAXParser();",
                "+            parser.parse(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -79,2 +83,3 @@ public class XMLParser extends AbstractParser {",
                "         } finally {",
                "+            context.releaseParser(parser);",
                "             xhtml.endElement(\"p\");"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2645": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "64bb30844e0caafff1c9ebac7c8b0c5b512ea81e"
                ]
            ],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2645",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "34c6e126690a806537b66634263b5bcf4a4d214e",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526926437,
            "hunks": 1,
            "message": "TIKA-2645 - remove commons math from dependencies",
            "diff": [
                "diff --git a/tika-parsers/pom.xml b/tika-parsers/pom.xml",
                "index 0cfa62185..d4902d2dd 100644",
                "--- a/tika-parsers/pom.xml",
                "+++ b/tika-parsers/pom.xml",
                "@@ -741,8 +741,2 @@",
                "     </dependency>",
                "-    <dependency>",
                "-      <groupId>org.apache.commons</groupId>",
                "-      <artifactId>commons-math3</artifactId>",
                "-      <version>3.6.1</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "   </dependencies>"
            ],
            "changed_files": [
                "tika-parsers/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2645": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "017096f64b5fba27f4208a65d636ee53b22f520f"
                ]
            ],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2645",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4b38d6228f4ba5ee912735dc692275499bbf45f6",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526922640,
            "hunks": 43,
            "message": "TIKA-2645 for tika-core",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "index 74d994dfc..63c0edd6e 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "@@ -21,11 +21,11 @@ import java.io.InputStream;",
                "-import javax.xml.XMLConstants;",
                " import javax.xml.namespace.QName;",
                "-import javax.xml.parsers.SAXParserFactory;",
                "+import javax.xml.parsers.SAXParser;",
                "+import org.apache.tika.exception.TikaException;",
                " import org.apache.tika.io.CloseShieldInputStream;",
                " import org.apache.tika.sax.OfflineContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                " import org.xml.sax.SAXException;",
                "-import org.xml.sax.SAXNotRecognizedException;",
                " import org.xml.sax.helpers.DefaultHandler;",
                "@@ -49,15 +49,6 @@ public class XmlRootExtractor {",
                "         ExtractorHandler handler = new ExtractorHandler();",
                "+        SAXParser parser = null;",
                "         try {",
                "-            SAXParserFactory factory = SAXParserFactory.newInstance();",
                "-            factory.setNamespaceAware(true);",
                "-            factory.setValidating(false);",
                "-            try {",
                "-                factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);",
                "-            } catch (SAXNotRecognizedException e) {",
                "-                // TIKA-271 and TIKA-1000: Some XML parsers do not support the secure-processing",
                "-                // feature, even though it's required by JAXP in Java 5. Ignoring",
                "-                // the exception is fine here, deployments without this feature",
                "-                // are inherently vulnerable to XML denial-of-service attacks.",
                "-            }",
                "-            factory.newSAXParser().parse(",
                "+            parser = XMLReaderUtils.acquireSAXParser();",
                "+            parser.parse(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -65,2 +56,4 @@ public class XmlRootExtractor {",
                "         } catch (Exception ignore) {",
                "+        } finally {",
                "+                XMLReaderUtils.releaseParser(parser);",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "index d25cac3a2..71561a82d 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "@@ -35,3 +35,7 @@ import java.util.Collections;",
                " import java.util.List;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.locks.ReentrantReadWriteLock;",
                "+import org.apache.tika.exception.TikaException;",
                " import org.w3c.dom.Document;",
                "@@ -101,3 +105,18 @@ import org.xml.sax.helpers.DefaultHandler;",
                " public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMetKeys {",
                "-    protected final MimeTypes types;",
                "+    /**",
                "+     * Parser pool size",
                "+     */",
                "+    private static int POOL_SIZE = 10;",
                "+",
                "+    private static final ReentrantReadWriteLock READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "+",
                "+    private static ArrayBlockingQueue<SAXParser> SAX_PARSERS = new ArrayBlockingQueue<>(POOL_SIZE);",
                "+",
                "+    static {",
                "+        try {",
                "+            setPoolSize(POOL_SIZE);",
                "+        } catch (TikaException e) {",
                "+            throw new RuntimeException(\"problem initializing SAXParser pool\", e);",
                "+        }",
                "+    }    protected final MimeTypes types;",
                "@@ -115,10 +134,8 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "     public void read(InputStream stream) throws IOException, MimeTypeException {",
                "+        SAXParser parser = null;",
                "         try {",
                "-            SAXParserFactory factory = SAXParserFactory.newInstance();",
                "-            factory.setNamespaceAware(false);",
                "-            factory.setFeature(",
                "-                    XMLConstants.FEATURE_SECURE_PROCESSING, true);",
                "-            SAXParser parser = factory.newSAXParser();",
                "+",
                "+            parser = acquireSAXParser();",
                "             parser.parse(stream, this);",
                "-        } catch (ParserConfigurationException e) {",
                "+        } catch (TikaException e) {",
                "             throw new MimeTypeException(\"Unable to create an XML parser\", e);",
                "@@ -126,2 +143,4 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "             throw new MimeTypeException(\"Invalid type configuration\", e);",
                "+        } finally {",
                "+            releaseParser(parser);",
                "         }",
                "@@ -132,2 +151,3 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "             TransformerFactory factory = TransformerFactory.newInstance();",
                "+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);",
                "             Transformer transformer = factory.newTransformer();",
                "@@ -293,3 +313,82 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "     }",
                "+    /**",
                "+     * Acquire a SAXParser from the pool; create one if it",
                "+     * doesn't exist.  Make sure to {@link #releaseParser(SAXParser)} in",
                "+     * a <code>finally</code> block every time you call this.",
                "+     *",
                "+     * @return a SAXParser",
                "+     * @throws TikaException",
                "+     */",
                "+    public static SAXParser acquireSAXParser()",
                "+            throws TikaException {",
                "+        while (true) {",
                "+            SAXParser parser = null;",
                "+            try {",
                "+                READ_WRITE_LOCK.readLock().lock();",
                "+                parser = SAX_PARSERS.poll(10, TimeUnit.MILLISECONDS);",
                "+            } catch (InterruptedException e) {",
                "+                throw new TikaException(\"interrupted while waiting for SAXParser\", e);",
                "+            } finally {",
                "+                READ_WRITE_LOCK.readLock().unlock();",
                "+            }",
                "+            if (parser != null) {",
                "+                return parser;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Return parser to the pool for reuse",
                "+     *",
                "+     * @param parser parser to return",
                "+     */",
                "+    public static void releaseParser(SAXParser parser) {",
                "+        try {",
                "+            parser.reset();",
                "+        } catch (UnsupportedOperationException e) {",
                "+            //ignore",
                "+        }",
                "+        try {",
                "+            READ_WRITE_LOCK.readLock().lock();",
                "+            //if there are extra parsers (e.g. after a reset of the pool to a smaller size),",
                "+            // this parser will not be added and will then be gc'd",
                "+            SAX_PARSERS.offer(parser);",
                "+        } finally {",
                "+            READ_WRITE_LOCK.readLock().unlock();",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the pool size for cached XML parsers.",
                "+     *",
                "+     * @param poolSize",
                "+     */",
                "+    public static void setPoolSize(int poolSize) throws TikaException {",
                "+        try {",
                "+            //stop the world with a write lock",
                "+            //parsers that are currently in use will be offered, but not",
                "+            //accepted and will be gc'd",
                "+            READ_WRITE_LOCK.writeLock().lock();",
                "+            SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);",
                "+            for (int i = 0; i < poolSize; i++) {",
                "+                SAX_PARSERS.offer(newSAXParser());",
                "+            }",
                "+            POOL_SIZE = poolSize;",
                "+        } finally {",
                "+            READ_WRITE_LOCK.writeLock().unlock();",
                "+        }",
                "+    }",
                "+",
                "+    private static SAXParser newSAXParser() throws TikaException {",
                "+        SAXParserFactory factory = SAXParserFactory.newInstance();",
                "+        factory.setNamespaceAware(false);",
                "+        try {",
                "+            factory.setFeature(",
                "+                    XMLConstants.FEATURE_SECURE_PROCESSING, true);",
                "+            return factory.newSAXParser();",
                "+        } catch (ParserConfigurationException|SAXException e) {",
                "+            throw new TikaException(\"prooblem creating SAX parser factory\", e);",
                "+        }",
                "+    }",
                " }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "index 68df47bd5..2a3afcde4 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "@@ -54,2 +54,3 @@ public class ParseContext implements Serializable {",
                "+    private final XMLReaderUtils xmlReaderUtils = new XMLReaderUtils();",
                "     /** Map of objects in this context */",
                "@@ -139,2 +140,34 @@ public class ParseContext implements Serializable {",
                "+    /**",
                "+     * Returns the SAX parser specified in this parsing context. If a parser",
                "+     * is not explicitly specified, then one is acquired from the pool.",
                "+     * <p>",
                "+     * Make sure to {@link #releaseParser(SAXParser)} in",
                "+     * a <code>finally</code> block every time you call this.",
                "+     * </p>",
                "+     *",
                "+     * @return SAXParser",
                "+     * @throws TikaException",
                "+     */",
                "+    public SAXParser acquireSAXParser() throws TikaException {",
                "+        if (context.containsKey(SAXParser.class)) {",
                "+            return get(SAXParser.class);",
                "+        }",
                "+        return xmlReaderUtils.acquireSAXParser();",
                "+    }",
                "+",
                "+    /**",
                "+     * If the context already has a SAXParser, this is a no-op.",
                "+     * Otherwise, this returns the parser to the pool",
                "+     *",
                "+     * @param parser",
                "+     * @throws TikaException",
                "+     */",
                "+    public void releaseParser(SAXParser parser) throws TikaException {",
                "+        if (context.containsKey(SAXParser.class)) {",
                "+            return;",
                "+        }",
                "+        xmlReaderUtils.releaseParser(parser);",
                "+    }",
                "+",
                "     /**",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "index eeedcc6f9..4ed58b463 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "@@ -40,5 +40,8 @@ import javax.xml.transform.TransformerFactory;",
                " import javax.xml.transform.TransformerFactoryConfigurationError;",
                "-",
                " import java.io.IOException;",
                "+import java.io.Serializable;",
                " import java.io.StringReader;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.locks.ReentrantReadWriteLock;",
                " import java.util.logging.Level;",
                "@@ -51,5 +54,29 @@ import java.util.logging.Logger;",
                "  */",
                "-public class XMLReaderUtils {",
                "+public class XMLReaderUtils implements Serializable {",
                "+",
                "+    /**",
                "+     * Serial version UID",
                "+     */",
                "+    private static final long serialVersionUID = 6110455808615143122L;",
                "+",
                "     private static final Logger LOG = Logger.getLogger(XMLReaderUtils.class.getName());",
                "+    /**",
                "+     * Parser pool size",
                "+     */",
                "+    private static int POOL_SIZE = 10;",
                "+",
                "+    private static final ReentrantReadWriteLock READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "+",
                "+    private static ArrayBlockingQueue<SAXParser> SAX_PARSERS = new ArrayBlockingQueue<>(POOL_SIZE);",
                "+",
                "+    static {",
                "+        try {",
                "+            setPoolSize(POOL_SIZE);",
                "+        } catch (TikaException e) {",
                "+            throw new RuntimeException(\"problem initializing SAXParser pool\", e);",
                "+        }",
                "+    }",
                "+",
                "+",
                "     private static final EntityResolver IGNORING_SAX_ENTITY_RESOLVER = new EntityResolver() {",
                "@@ -74,6 +101,6 @@ public class XMLReaderUtils {",
                "      *",
                "-     * @see #getSAXParser()",
                "-     * @since Apache Tika 1.13",
                "      * @return XMLReader",
                "      * @throws TikaException",
                "+     * @see #getSAXParser()",
                "+     * @since Apache Tika 1.13",
                "      */",
                "@@ -98,8 +125,7 @@ public class XMLReaderUtils {",
                "      * </p>",
                "-",
                "      *",
                "-     * @see #getSAXParserFactory()",
                "-     * @since Apache Tika 0.8",
                "      * @return SAX parser",
                "      * @throws TikaException if a SAX parser could not be created",
                "+     * @see #getSAXParserFactory()",
                "+     * @since Apache Tika 0.8",
                "      */",
                "@@ -126,4 +152,4 @@ public class XMLReaderUtils {",
                "      *",
                "-     * @since Apache Tika 0.8",
                "      * @return SAX parser factory",
                "+     * @since Apache Tika 0.8",
                "      */",
                "@@ -156,4 +182,4 @@ public class XMLReaderUtils {",
                "      *",
                "-     * @since Apache Tika 1.13",
                "      * @return DOM parser factory",
                "+     * @since Apache Tika 1.13",
                "      */",
                "@@ -181,4 +207,4 @@ public class XMLReaderUtils {",
                "      *",
                "-     * @since Apache Tika 1.13",
                "      * @return DOM Builder",
                "+     * @since Apache Tika 1.13",
                "      */",
                "@@ -203,4 +229,4 @@ public class XMLReaderUtils {",
                "      *",
                "-     * @since Apache Tika 1.13",
                "      * @return StAX input factory",
                "+     * @since Apache Tika 1.13",
                "      */",
                "@@ -220,5 +246,5 @@ public class XMLReaderUtils {",
                "         } catch (Exception e) {",
                "-            LOG.log(Level.WARNING, \"SAX Feature unsupported: \"+feature, e);",
                "+            LOG.log(Level.WARNING, \"SAX Feature unsupported: \" + feature, e);",
                "         } catch (AbstractMethodError ame) {",
                "-            LOG.log(Level.WARNING, \"Cannot set SAX feature because outdated XML parser in classpath: \"+ feature, ame);",
                "+            LOG.log(Level.WARNING, \"Cannot set SAX feature because outdated XML parser in classpath: \" + feature, ame);",
                "         }",
                "@@ -236,3 +262,3 @@ public class XMLReaderUtils {",
                "      * Returns a new transformer",
                "-     * ",
                "+     * <p>",
                "      * The transformer instance is configured to to use",
                "@@ -240,5 +266,5 @@ public class XMLReaderUtils {",
                "      *",
                "-     * @since Apache Tika 1.17",
                "      * @return Transformer",
                "      * @throws TikaException when the transformer can not be created",
                "+     * @since Apache Tika 1.17",
                "      */",
                "@@ -251,5 +277,76 @@ public class XMLReaderUtils {",
                "             throw new TikaException(\"Transformer not available\", e);",
                "-        }        ",
                "+        }",
                "     }",
                "+    /**",
                "+     * Acquire a SAXParser from the pool; create one if it",
                "+     * doesn't exist.  Make sure to {@link #releaseParser(SAXParser)} in",
                "+     * a <code>finally</code> block every time you call this.",
                "+     *",
                "+     * @return a SAXParser",
                "+     * @throws TikaException",
                "+     */",
                "+    public static SAXParser acquireSAXParser()",
                "+            throws TikaException {",
                "+        while (true) {",
                "+            SAXParser parser = null;",
                "+            try {",
                "+                READ_WRITE_LOCK.readLock().lock();",
                "+                parser = SAX_PARSERS.poll(10, TimeUnit.MILLISECONDS);",
                "+            } catch (InterruptedException e) {",
                "+                throw new TikaException(\"interrupted while waiting for SAXParser\", e);",
                "+            } finally {",
                "+                READ_WRITE_LOCK.readLock().unlock();",
                "+",
                "+            }",
                "+            if (parser != null) {",
                "+                return parser;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Return parser to the pool for reuse",
                "+     *",
                "+     * @param parser parser to return",
                "+     */",
                "+    public static void releaseParser(SAXParser parser) {",
                "+        try {",
                "+            parser.reset();",
                "+        } catch (UnsupportedOperationException e) {",
                "+            //ignore",
                "+        }",
                "+        try {",
                "+            READ_WRITE_LOCK.readLock().lock();",
                "+            //if there are extra parsers (e.g. after a reset of the pool to a smaller size),",
                "+            // this parser will not be added and will then be gc'd",
                "+            boolean success = SAX_PARSERS.offer(parser);",
                "+        } finally {",
                "+            READ_WRITE_LOCK.readLock().unlock();",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the pool size for cached XML parsers.",
                "+     *",
                "+     * @param poolSize",
                "+     */",
                "+    public static void setPoolSize(int poolSize) throws TikaException {",
                "+        try {",
                "+            //stop the world with a write lock.",
                "+            //parsers that are currently in use will be offered, but not",
                "+            //accepted and will be gc'd",
                "+            READ_WRITE_LOCK.writeLock().lock();",
                "+            if (SAX_PARSERS.size() == poolSize) {",
                "+                return;",
                "+            }",
                "+            SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);",
                "+            for (int i = 0; i < poolSize; i++) {",
                "+                SAX_PARSERS.offer(getSAXParser());",
                "+            }",
                "+            POOL_SIZE = poolSize;",
                "+        } finally {",
                "+            READ_WRITE_LOCK.writeLock().unlock();",
                "+        }",
                "+    }",
                " }",
                "diff --git a/tika-parsers/pom.xml b/tika-parsers/pom.xml",
                "index c5fbcb10d..0cfa62185 100644",
                "--- a/tika-parsers/pom.xml",
                "+++ b/tika-parsers/pom.xml",
                "@@ -741,3 +741,8 @@",
                "     </dependency>",
                "-",
                "+    <dependency>",
                "+      <groupId>org.apache.commons</groupId>",
                "+      <artifactId>commons-math3</artifactId>",
                "+      <version>3.6.1</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "   </dependencies>"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "tika-parsers/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2645": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c203ef3c8b850900fc885badab9390d7e5540440"
                ]
            ],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2645",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "929dcd75b8480a2a2d19a1801a88973b5e9358ac",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527857447,
            "hunks": 40,
            "message": "TIKA-2656 -- allow absolute timeout for ForkParser",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index fc8678454..a79de48a8 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -55,49 +55,6 @@ class ForkClient {",
                "-    private final InputStream error;",
                "-",
                "-    public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory, List<String> java, long serverPulseMillis) throws IOException, TikaException {",
                "-        jar = null;",
                "-        loader = null;",
                "-        boolean ok = false;",
                "-        ProcessBuilder builder = new ProcessBuilder();",
                "-        List<String> command = new ArrayList<>();",
                "-        command.addAll(java);",
                "-        command.add(\"-cp\");",
                "-        String dirString = tikaDir.toAbsolutePath().toString();",
                "-        if (!dirString.endsWith(\"/\")) {",
                "-            dirString += \"/*\";",
                "-        } else {",
                "-            dirString += \"/\";",
                "-        }",
                "-        dirString = ProcessUtils.escapeCommandLine(dirString);",
                "-        command.add(dirString);",
                "-        command.add(\"org.apache.tika.fork.ForkServer\");",
                "-        command.add(Long.toString(serverPulseMillis));",
                "-        builder.command(command);",
                "-        builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "-        try {",
                "-            this.process = builder.start();",
                "-",
                "-            this.output = new DataOutputStream(process.getOutputStream());",
                "-            this.input = new DataInputStream(process.getInputStream());",
                "-            this.error = process.getErrorStream();",
                "-",
                "-            waitForStartBeacon();",
                "-            output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY);",
                "-            output.flush();",
                "-            sendObject(parserFactoryFactory, resources);",
                "-",
                "-            waitForStartBeacon();",
                "-",
                "-            ok = true;",
                "-        } catch (Throwable t) {",
                "-            t.printStackTrace();",
                "-            throw t;",
                "-        } finally {",
                "-            if (!ok) {",
                "-                close();",
                "-            }",
                "-        }",
                "+    public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory, List<String> java,",
                "+                      TimeoutLimits timeoutLimits) throws IOException, TikaException {",
                "+        this(tikaDir, parserFactoryFactory, null, java, timeoutLimits);",
                "     }",
                "-",
                "     /**",
                "@@ -108,3 +65,2 @@ class ForkClient {",
                "      * @param java java commandline to use for the commandline server",
                "-     * @param serverPulseMillis how often to check if the server has been active",
                "      * @throws IOException",
                "@@ -113,3 +69,3 @@ class ForkClient {",
                "     public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory, ClassLoader classLoader,",
                "-                      List<String> java, long serverPulseMillis) throws IOException, TikaException {",
                "+                      List<String> java, TimeoutLimits timeoutLimits) throws IOException, TikaException {",
                "         jar = null;",
                "@@ -130,3 +86,5 @@ class ForkClient {",
                "         command.add(\"org.apache.tika.fork.ForkServer\");",
                "-        command.add(Long.toString(serverPulseMillis));",
                "+        command.add(Long.toString(timeoutLimits.getPulseMS()));",
                "+        command.add(Long.toString(timeoutLimits.getParseTimeoutMS()));",
                "+        command.add(Long.toString(timeoutLimits.getWaitTimeoutMS()));",
                "         builder.command(command);",
                "@@ -138,9 +96,14 @@ class ForkClient {",
                "             this.input = new DataInputStream(process.getInputStream());",
                "-            this.error = process.getErrorStream();",
                "             waitForStartBeacon();",
                "-            output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY_LOADER);",
                "+            if (classLoader != null) {",
                "+                output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY_LOADER);",
                "+            } else {",
                "+                output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY);",
                "+            }",
                "             output.flush();",
                "             sendObject(parserFactoryFactory, resources);",
                "-            sendObject(classLoader, resources);",
                "+            if (classLoader != null) {",
                "+                sendObject(classLoader, resources);",
                "+            }",
                "             waitForStartBeacon();",
                "@@ -158,3 +121,3 @@ class ForkClient {",
                "-    public ForkClient(ClassLoader loader, Object object, List<String> java, long serverPulseMillis)",
                "+    public ForkClient(ClassLoader loader, Object object, List<String> java, TimeoutLimits timeoutLimits)",
                "             throws IOException, TikaException {",
                "@@ -170,3 +133,5 @@ class ForkClient {",
                "             command.add(jar.getPath());",
                "-            command.add(Long.toString(serverPulseMillis));",
                "+            command.add(Long.toString(timeoutLimits.getPulseMS()));",
                "+            command.add(Long.toString(timeoutLimits.getParseTimeoutMS()));",
                "+            command.add(Long.toString(timeoutLimits.getWaitTimeoutMS()));",
                "             builder.command(command);",
                "@@ -177,3 +142,2 @@ class ForkClient {",
                "             this.input = new DataInputStream(process.getInputStream());",
                "-            this.error = process.getErrorStream();",
                "@@ -285,5 +249,2 @@ class ForkClient {",
                "             }",
                "-            if (error != null) {",
                "-                error.close();",
                "-            }",
                "         } catch (IOException ignore) {",
                "@@ -291,3 +252,3 @@ class ForkClient {",
                "         if (process != null) {",
                "-            process.destroy();",
                "+            process.destroyForcibly();",
                "             try {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index 3df982651..da0b573d7 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -29,2 +29,3 @@ import java.util.Set;",
                "+import org.apache.tika.config.Field;",
                " import org.apache.tika.exception.TikaException;",
                "@@ -59,2 +60,3 @@ public class ForkParser extends AbstractParser {",
                "     /** Process pool size */",
                "+    @Field",
                "     private int poolSize = 5;",
                "@@ -65,3 +67,8 @@ public class ForkParser extends AbstractParser {",
                "-    private long serverPulseMillis = 5000;",
                "+    @Field",
                "+    private long serverPulseMillis = 1000;",
                "+    @Field",
                "+    private long serverParseTimeoutMillis = 60000;",
                "+    @Field",
                "+    private long serverWaitTimeoutMillis = 60000;",
                "@@ -321,9 +328,9 @@ public class ForkParser extends AbstractParser {",
                "     private ForkClient newClient() throws IOException, TikaException {",
                "-",
                "+        TimeoutLimits timeoutLimits = new TimeoutLimits(serverPulseMillis, serverParseTimeoutMillis, serverWaitTimeoutMillis);",
                "         if (loader == null && parser == null && tikaBin != null && parserFactoryFactory != null) {",
                "-            return new ForkClient(tikaBin, parserFactoryFactory, java, serverPulseMillis);",
                "+            return new ForkClient(tikaBin, parserFactoryFactory, java, timeoutLimits);",
                "         } else if (loader != null && parser != null && tikaBin == null && parserFactoryFactory == null) {",
                "-           return new ForkClient(loader, parser, java, serverPulseMillis);",
                "+           return new ForkClient(loader, parser, java, timeoutLimits);",
                "         } else if (loader != null && parser == null && tikaBin != null && parserFactoryFactory != null) {",
                "-            return new ForkClient(tikaBin, parserFactoryFactory, loader, java, serverPulseMillis);",
                "+            return new ForkClient(tikaBin, parserFactoryFactory, loader, java, timeoutLimits);",
                "         } else {",
                "@@ -347,4 +354,4 @@ public class ForkParser extends AbstractParser {",
                "      * The amount of time in milliseconds that the server",
                "-     * should wait for any input or output.  If it receives no",
                "-     * input or output in this amount of time, it will shutdown.",
                "+     * should wait before checking to see if the parse has timed out",
                "+     * or if the wait has timed out",
                "      * The default is 5 seconds.",
                "@@ -357,2 +364,23 @@ public class ForkParser extends AbstractParser {",
                "+    /**",
                "+     * The maximum amount of time allowed for the server to try to parse a file.",
                "+     * If more than this time elapses, the server shuts down, and the ForkParser",
                "+     * throws an exception.",
                "+     *",
                "+     * @param serverParseTimeoutMillis",
                "+     */",
                "+    public void setServerParseTimeoutMillis(long serverParseTimeoutMillis) {",
                "+        this.serverParseTimeoutMillis = serverParseTimeoutMillis;",
                "+    }",
                "+",
                "+    /**",
                "+     * The maximum amount of time allowed for the server to wait for a new request to parse",
                "+     * a file.  The server will shutdown after this amount of time, and a new server will have",
                "+     * to be started by a new client.",
                "+     * @param serverWaitTimeoutMillis",
                "+     */",
                "+    public void setServerWaitTimeoutMillis(long serverWaitTimeoutMillis) {",
                "+        this.serverWaitTimeoutMillis = serverWaitTimeoutMillis;",
                "+    }",
                "+",
                " }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index f4c49daa8..18345db55 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -29,2 +29,3 @@ import java.io.NotSerializableException;",
                " import java.io.OutputStream;",
                "+import java.io.Serializable;",
                " import java.lang.reflect.InvocationTargetException;",
                "@@ -36,3 +37,3 @@ import java.util.zip.Checksum;",
                "-class ForkServer implements Runnable, Checksum {",
                "+class ForkServer implements Runnable {",
                "@@ -59,2 +60,7 @@ class ForkServer implements Runnable, Checksum {",
                "     private long serverPulseMillis = 5000;",
                "+    private long serverParserTimeoutMillis = 60000;",
                "+    private long serverWaitTimeoutMillis = 60000;",
                "+",
                "+    private Object[] lock = new Object[0];",
                "+",
                "     /**",
                "@@ -69,9 +75,10 @@ class ForkServer implements Runnable, Checksum {",
                "     public static void main(String[] args) throws Exception {",
                "-        long serverPulseMillis = -1;",
                "-        if (args.length > 0) {",
                "-            serverPulseMillis = Long.parseLong(args[0]);",
                "-        }",
                "+        long serverPulseMillis = Long.parseLong(args[0]);",
                "+        long serverParseTimeoutMillis = Long.parseLong(args[1]);",
                "+        long serverWaitTimeoutMillis = Long.parseLong(args[2]);",
                "+",
                "         URL.setURLStreamHandlerFactory(new MemoryURLStreamHandlerFactory());",
                "-        ForkServer server = new ForkServer(System.in, System.out, serverPulseMillis);",
                "+        ForkServer server = new ForkServer(System.in, System.out,",
                "+                serverPulseMillis, serverParseTimeoutMillis, serverWaitTimeoutMillis);",
                "         System.setIn(new ByteArrayInputStream(new byte[0]));",
                "@@ -99,2 +106,5 @@ class ForkServer implements Runnable, Checksum {",
                "+    private boolean parsing = false;",
                "+    private long since;",
                "+",
                "     /**",
                "@@ -107,9 +117,14 @@ class ForkServer implements Runnable, Checksum {",
                "      */",
                "-    public ForkServer(InputStream input, OutputStream output, long serverPulseMillis)",
                "+    public ForkServer(InputStream input, OutputStream output,",
                "+                      long serverPulseMillis, long serverParserTimeoutMillis, long serverWaitTimeoutMillis)",
                "             throws IOException {",
                "         this.input =",
                "-            new DataInputStream(new CheckedInputStream(input, this));",
                "+            new DataInputStream(input);",
                "         this.output =",
                "-            new DataOutputStream(new CheckedOutputStream(output, this));",
                "+            new DataOutputStream(output);",
                "         this.serverPulseMillis = serverPulseMillis;",
                "+        this.serverParserTimeoutMillis = serverParserTimeoutMillis;",
                "+        this.serverWaitTimeoutMillis = serverWaitTimeoutMillis;",
                "+        this.parsing = false;",
                "+        this.since = System.currentTimeMillis();",
                "     }",
                "@@ -118,4 +133,11 @@ class ForkServer implements Runnable, Checksum {",
                "         try {",
                "-            while (active) {",
                "-                active = false;",
                "+            while (true) {",
                "+                synchronized (lock) {",
                "+                    long elapsed = System.currentTimeMillis()-since;",
                "+                    if (parsing && elapsed > serverParserTimeoutMillis) {",
                "+                        break;",
                "+                    } else if (!parsing && serverWaitTimeoutMillis > 0 && elapsed > serverWaitTimeoutMillis) {",
                "+                        break;",
                "+                    }",
                "+                }",
                "                 Thread.sleep(serverPulseMillis);",
                "@@ -128,2 +150,3 @@ class ForkServer implements Runnable, Checksum {",
                "     public void processRequests() {",
                "+        //initialize",
                "         try {",
                "@@ -142,2 +165,3 @@ class ForkServer implements Runnable, Checksum {",
                "         }",
                "+        //main loop",
                "         try {",
                "@@ -212,22 +236,34 @@ class ForkServer implements Runnable, Checksum {",
                "     private void call(ClassLoader loader, Object object) throws Exception {",
                "-        Method method = getMethod(object, input.readUTF());",
                "-        Object[] args =",
                "-            new Object[method.getParameterTypes().length];",
                "-        for (int i = 0; i < args.length; i++) {",
                "-            args[i] = readObject(loader);",
                "+        synchronized (lock) {",
                "+            parsing = true;",
                "+            since = System.currentTimeMillis();",
                "         }",
                "         try {",
                "-            method.invoke(object, args);",
                "-            output.write(DONE);",
                "-        } catch (InvocationTargetException e) {",
                "-            output.write(ERROR);",
                "-            // Try to send the underlying Exception itself",
                "-            Throwable toSend = e.getCause();",
                "+            Method method = getMethod(object, input.readUTF());",
                "+            Object[] args =",
                "+                    new Object[method.getParameterTypes().length];",
                "+            for (int i = 0; i < args.length; i++) {",
                "+                args[i] = readObject(loader);",
                "+            }",
                "             try {",
                "-               ForkObjectInputStream.sendObject(toSend, output);",
                "-            } catch (NotSerializableException nse) {",
                "-               // Need to build a serializable version of it",
                "-               TikaException te = new TikaException( toSend.getMessage() );",
                "-               te.setStackTrace( toSend.getStackTrace() );",
                "-               ForkObjectInputStream.sendObject(te, output);",
                "+                method.invoke(object, args);",
                "+                output.write(DONE);",
                "+            } catch (InvocationTargetException e) {",
                "+                output.write(ERROR);",
                "+                // Try to send the underlying Exception itself",
                "+                Throwable toSend = e.getCause();",
                "+                try {",
                "+                    ForkObjectInputStream.sendObject(toSend, output);",
                "+                } catch (NotSerializableException nse) {",
                "+                    // Need to build a serializable version of it",
                "+                    TikaException te = new TikaException(toSend.getMessage());",
                "+                    te.setStackTrace(toSend.getStackTrace());",
                "+                    ForkObjectInputStream.sendObject(te, output);",
                "+                }",
                "+",
                "+            }",
                "+        } finally {",
                "+            synchronized (lock) {",
                "+                parsing = false;",
                "+                since = System.currentTimeMillis();",
                "             }",
                "@@ -273,20 +309,2 @@ class ForkServer implements Runnable, Checksum {",
                "     }",
                "-",
                "-    //------------------------------------------------------------< Checksum >",
                "-",
                "-    public void update(int b) {",
                "-        active = true;",
                "-    }",
                "-",
                "-    public void update(byte[] b, int off, int len) {",
                "-        active = true;",
                "-    }",
                "-",
                "-    public long getValue() {",
                "-        return 0;",
                "-    }",
                "-",
                "-    public void reset() {",
                "-    }",
                "-",
                " }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/TimeoutLimits.java b/tika-core/src/main/java/org/apache/tika/fork/TimeoutLimits.java",
                "new file mode 100644",
                "index 000000000..6610437c8",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/TimeoutLimits.java",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.fork;",
                "+",
                "+class TimeoutLimits {",
                "+",
                "+    private final long pulseMS;",
                "+    private final long parseTimeoutMS;",
                "+    private final long waitTimeoutMS;",
                "+",
                "+",
                "+    TimeoutLimits(long pulseMS, long parseTimeoutMS, long waitTimeoutMS) {",
                "+        this.pulseMS = pulseMS;",
                "+        this.parseTimeoutMS = parseTimeoutMS;",
                "+        this.waitTimeoutMS = waitTimeoutMS;",
                "+    }",
                "+",
                "+    public long getPulseMS() {",
                "+        return pulseMS;",
                "+    }",
                "+",
                "+    public long getParseTimeoutMS() {",
                "+        return parseTimeoutMS;",
                "+    }",
                "+",
                "+    public long getWaitTimeoutMS() {",
                "+        return waitTimeoutMS;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "tika-core/src/main/java/org/apache/tika/fork/TimeoutLimits.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2656": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "00ff640a2f524c47cbb038d1d9b9ef98378ea226"
                ]
            ],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2656",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa1a749af66e5223665782c3184adc2c1152952f",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526926096,
            "hunks": 7,
            "message": "TIKA-2645 - use a pool for SAXParsers -- improve comments and avoid permanent hangs if a parser has forgotten to release its SAXParser.",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "index 6ad85ff7b..45d0c8f53 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "@@ -143,4 +143,5 @@ public class ParseContext implements Serializable {",
                "      * <p>",
                "-     * Make sure to {@link #releaseParser(SAXParser)} in",
                "-     * a <code>finally</code> block every time you call this.",
                "+     * Make sure to {@link #releaseParser(SAXParser)} as the",
                "+     * first call in a <code>finally</code> block every time",
                "+     * you call this!",
                "      * </p>",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "index a2ad9fcb8..c48a07850 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "@@ -306,5 +306,9 @@ public class XMLReaderUtils implements Serializable {",
                "             if (waiting > 3000) {",
                "+                //freshen the pool.  Something went very wrong...",
                "+                setPoolSize(POOL_SIZE);",
                "                 //better to get an exception than have permahang by a bug in one of our parsers",
                "-                throw new TikaException(\"Waited more than 5 minutes for a SAXParser; this could indicate SAXParser leakage.  \" +",
                "-                        \"Please report this to the Tika team dev@tika.apache.org\");",
                "+                throw new TikaException(\"Waited more than 5 minutes for a SAXParser; \" +",
                "+                        \"This could indicate that a parser has not correctly released its SAXParser. \" +",
                "+                        \"Please report this to the Tika team: dev@tika.apache.org\");",
                "+",
                "             }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "index 237fa0bc1..33dad3c3a 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "@@ -76,2 +76,4 @@ public class DIFParser extends AbstractParser {",
                " \t\t} finally {",
                "+\t\t\t//make sure to release the parser before doing",
                "+\t\t\t//something that could cause an exception!",
                " \t\t\tcontext.releaseParser(parser);",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "index 4b78e6f65..c517ba147 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "@@ -69,2 +69,4 @@ public class Word2006MLParser extends AbstractOfficeParser {",
                "         } finally {",
                "+            //make sure to release the parser before doing",
                "+            //something that could cause an exception!",
                "             context.releaseParser(parser);",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "index 8ad4fe258..226c7b77e 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "@@ -109,2 +109,4 @@ public abstract class AbstractXML2003Parser extends AbstractParser {",
                "         } finally {",
                "+            //make sure to release the parser before doing",
                "+            //something that could cause an exception!",
                "             context.releaseParser(parser);",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "index 328b71108..f05e343bb 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "@@ -83,2 +83,4 @@ public class XMLParser extends AbstractParser {",
                "         } finally {",
                "+            //make sure to release the parser before doing",
                "+            //something that could cause an exception!",
                "             context.releaseParser(parser);"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2645": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8110645cc4b181fefd9663b1592213e79a298b0e"
                ]
            ],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2645",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "18f4e24451b1d835ab1897f49389788f78063a52",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527618276,
            "hunks": 0,
            "message": "Merge pull request #238 from GerardBouchar/TIKA-2100 TIKA-2100 extract content language from html lang attribute",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2100": ""
            },
            "ghissue_refs": {
                "238": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2100",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 238",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e3e34caf0a4dbe10bf953d2c3c443f630b5f63a",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527175362,
            "hunks": 0,
            "message": "Merge branch 'TIKA-2520' of https://github.com/mbaechler/tika into branch_1x",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2520": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2520",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3aba5c4d96c2ddb925d8b9b3cbde3cbfd95edc7c",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527265213,
            "hunks": 2,
            "message": "revert changes to imports",
            "diff": [
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java",
                "index ab3af5587..413a17ea1 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java",
                "@@ -18,2 +18,16 @@ package org.apache.tika.parser.html;",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.net.MalformedURLException;",
                "+import java.net.URL;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Locale;",
                "+import java.util.Set;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                " import org.apache.tika.extractor.EmbeddedDocumentExtractor;",
                "@@ -35,12 +49,2 @@ import org.xml.sax.helpers.AttributesImpl;",
                "-import java.io.ByteArrayInputStream;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.net.MalformedURLException;",
                "-import java.net.URL;",
                "-import java.nio.charset.StandardCharsets;",
                "-import java.util.*;",
                "-import java.util.regex.Matcher;",
                "-import java.util.regex.Pattern;",
                "-",
                " class HtmlHandler extends TextContentHandler {"
            ],
            "changed_files": [
                "tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1ffbb7a2144f1dd6957bdae644fe5769aa980094"
                ]
            ],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cb1bbc052188bf5e45e5dc17570180df1fe27df9",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527794708,
            "hunks": 2,
            "message": "Merge remote-tracking branch 'origin/master' into TIKA-2653 # Conflicts: #\ttika-core/src/main/java/org/apache/tika/fork/ForkClient.java #\ttika-core/src/test/java/org/apache/tika/fork/ForkParserTest.java",
            "diff": [
                "diff --cc tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index 8a76b2acd,0dffd0851..fc8678454",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@@ -36,3 -35,4 +36,5 @@@ import org.apache.tika.exception.TikaEx",
                "  import org.apache.tika.io.IOUtils;",
                " +import org.apache.tika.utils.ProcessUtils;",
                "+ import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+ import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                "  import org.xml.sax.ContentHandler;",
                "diff --cc tika-core/src/test/java/org/apache/tika/fork/ForkParserTest.java",
                "index 7c6544f3b,029fcee57..1759d5b32",
                "--- a/tika-core/src/test/java/org/apache/tika/fork/ForkParserTest.java",
                "+++ b/tika-core/src/test/java/org/apache/tika/fork/ForkParserTest.java",
                "@@@ -28,3 -35,7 +35,8 @@@ import java.nio.charset.Charset",
                "  import java.nio.charset.StandardCharsets;",
                " +import java.nio.file.Paths;",
                "+ import java.nio.file.Files;",
                "+ import java.nio.file.Path;",
                "+ import java.util.ArrayList;",
                "+ import java.util.LinkedList;",
                "+ import java.util.List;",
                "  import java.util.concurrent.Semaphore;"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2653": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2653",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "348b87e7f41b79ff115e17d9c91d2dad63a57c15",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526652932,
            "hunks": 6,
            "message": "TIKA-2479 Update XLS missing cell/row handling to match XLSX and XLSB, add unit test for missing rows, and enable the Columnar tests for the Excel formats",
            "diff": [
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java",
                "index 0dc33ee06..ff5971aab 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java",
                "@@ -18,3 +18,3 @@ package org.apache.tika.parser.microsoft;",
                "-import java.awt.*;",
                "+import java.awt.Point;",
                " import java.io.IOException;",
                "@@ -44,3 +44,2 @@ import org.apache.poi.hssf.record.DrawingGroupRecord;",
                " import org.apache.poi.hssf.record.EOFRecord;",
                "-import org.apache.poi.hssf.record.ExtSSTRecord;",
                " import org.apache.poi.hssf.record.ExtendedFormatRecord;",
                "@@ -283,3 +282,2 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {",
                "                 throws IOException, SAXException, TikaException {",
                "-",
                "             // Set up listener and register the records we want to process",
                "@@ -496,3 +494,3 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {",
                "                     }",
                "-                \tbreak;",
                "+                    break;",
                "@@ -503,4 +501,3 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {",
                "                     }",
                "-                \tbreak;",
                "-",
                "+                    break;",
                "             }",
                "@@ -601,8 +598,13 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {",
                "             for (Map.Entry<Point, Cell> entry : currentSheet.entrySet()) {",
                "-                while (currentRow < entry.getKey().y) {",
                "-                    handler.endElement(\"td\");",
                "-                    handler.endElement(\"tr\");",
                "-                    handler.startElement(\"tr\");",
                "-                    handler.startElement(\"td\");",
                "-                    currentRow++;",
                "+                if (currentRow != entry.getKey().y) {",
                "+                    // We've moved onto a new row, possibly skipping some",
                "+                    do {",
                "+                        handler.endElement(\"td\");",
                "+                        handler.endElement(\"tr\");",
                "+                        handler.startElement(\"tr\");",
                "+                        handler.startElement(\"td\");",
                "+                        currentRow++;",
                "+                    } while (officeParserConfig.getIncludeMissingRows() &&",
                "+                             currentRow < entry.getKey().y);",
                "+                    currentRow = entry.getKey().y;",
                "                     currentColumn = 0;"
            ],
            "changed_files": [
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2479": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2479",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "41bc34ca7e5c7d868755b0adaf992104cabd0c57",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527621344,
            "hunks": 4,
            "message": "improve audioparser",
            "diff": [
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/audio/AudioParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/audio/AudioParser.java",
                "index 50cd8b766..18267d7a1 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/audio/AudioParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/audio/AudioParser.java",
                "@@ -34,3 +34,5 @@ import javax.sound.sampled.UnsupportedAudioFileException;",
                "+import org.apache.commons.io.IOUtils;",
                " import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.io.ProxyInputStream;",
                " import org.apache.tika.metadata.Metadata;",
                "@@ -68,2 +70,3 @@ public class AudioParser extends AbstractParser {",
                "         }",
                "+        stream = new SkipFullyInputStream(stream);",
                "         try {",
                "@@ -139,2 +142,15 @@ public class AudioParser extends AbstractParser {",
                "+    private static class SkipFullyInputStream extends ProxyInputStream {",
                "+",
                "+        public SkipFullyInputStream(InputStream proxy) {",
                "+            super(proxy);",
                "+        }",
                "+",
                "+        @Override",
                "+        public long skip(long ln) throws IOException {",
                "+            IOUtils.skipFully(in, ln);",
                "+            return ln;",
                "+        }",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "tika-parsers/src/main/java/org/apache/tika/parser/audio/AudioParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "70662cdbb6da03daf46a5168ab88e68e5c5b2544"
                ]
            ],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "43b84c24fa26520ab0a4edcef1accbf49f23b101",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527298271,
            "hunks": 0,
            "message": "Merge branch 'TIKA-2468' of https://github.com/bitsgalore/tika",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2468": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2468",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bcf09e04d7b232a3d5ac56bd858045e63e41205d",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527279490,
            "hunks": 21,
            "message": "TIKA-2653 first, rough draft",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index dd1d033a8..c9830ab30 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -27,2 +27,3 @@ import java.io.InputStream;",
                " import java.io.NotSerializableException;",
                "+import java.nio.file.Path;",
                " import java.util.ArrayList;",
                "@@ -35,2 +36,4 @@ import org.apache.tika.exception.TikaException;",
                " import org.apache.tika.io.IOUtils;",
                "+import org.apache.tika.parser.ParserFactoryFactory;",
                "+import org.apache.tika.utils.ProcessUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -53,2 +56,40 @@ class ForkClient {",
                "+    public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory, List<String> java, long serverPulseMillis) throws IOException, TikaException {",
                "+        jar = null;",
                "+        loader = null;",
                "+        boolean ok = false;",
                "+        ProcessBuilder builder = new ProcessBuilder();",
                "+        List<String> command = new ArrayList<>();",
                "+        command.addAll(java);",
                "+        command.add(\"-cp\");",
                "+        String dirString = tikaDir.toAbsolutePath().toString();",
                "+        if (!dirString.endsWith(\"/\")) {",
                "+            dirString += \"/*\";",
                "+        } else {",
                "+            dirString += \"/\";",
                "+        }",
                "+        dirString = ProcessUtils.escapeCommandLine(dirString);",
                "+        command.add(dirString);",
                "+        command.add(\"org.apache.tika.fork.ForkServer\");",
                "+        command.add(Long.toString(serverPulseMillis));",
                "+        builder.command(command);",
                "+        try {",
                "+            this.process = builder.start();",
                "+",
                "+            this.output = new DataOutputStream(process.getOutputStream());",
                "+            this.input = new DataInputStream(process.getInputStream());",
                "+            this.error = process.getErrorStream();",
                "+",
                "+            waitForStartBeacon();",
                "+",
                "+            sendObject(parserFactoryFactory, resources);",
                "+",
                "+            ok = true;",
                "+        } finally {",
                "+            if (!ok) {",
                "+                close();",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     public ForkClient(ClassLoader loader, Object object, List<String> java, long serverPulseMillis)",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index c69b11c47..580073a56 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -20,2 +20,3 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.nio.file.Path;",
                " import java.util.ArrayList;",
                "@@ -35,2 +36,4 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.parser.Parser;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+import org.apache.tika.parser.ParserFactoryFactory;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "@@ -44,6 +47,11 @@ public class ForkParser extends AbstractParser {",
                "+    //these are used by the legacy usage",
                "     private final ClassLoader loader;",
                "-",
                "     private final Parser parser;",
                "+    //these are used when the server builds a parser via a directory",
                "+    //of jars, not via legacy bootstrap etc.",
                "+    private final Path tikaBin;",
                "+    private final ParserFactoryFactory parserFactoryFactory;",
                "+",
                "     /** Java command line */",
                "@@ -60,2 +68,9 @@ public class ForkParser extends AbstractParser {",
                "+    public ForkParser(Path tikaBin, ParserFactoryFactory factoryFactory) {",
                "+        loader = null;",
                "+        parser = null;",
                "+        this.tikaBin = tikaBin;",
                "+        this.parserFactoryFactory = factoryFactory;",
                "+    }",
                "+",
                "     /**",
                "@@ -68,2 +83,4 @@ public class ForkParser extends AbstractParser {",
                "         }",
                "+        this.tikaBin = null;",
                "+        this.parserFactoryFactory = null;",
                "         this.loader = loader;",
                "@@ -216,3 +233,3 @@ public class ForkParser extends AbstractParser {",
                "             if (client == null && currentlyInUse < poolSize) {",
                "-                client = new ForkClient(loader, parser, java, serverPulseMillis);",
                "+                client = newClient();",
                "             }",
                "@@ -239,2 +256,14 @@ public class ForkParser extends AbstractParser {",
                "+    private ForkClient newClient() throws IOException, TikaException {",
                "+        if (loader == null && parser == null && tikaBin != null && parserFactoryFactory != null) {",
                "+            return new ForkClient(tikaBin, parserFactoryFactory, java, serverPulseMillis);",
                "+        } else if (loader != null && parser != null && tikaBin == null && parserFactoryFactory == null) {",
                "+           return new ForkClient(loader, parser, java, serverPulseMillis);",
                "+        } else {",
                "+            throw new IllegalStateException(\"Either a) loader and parser must be not null \" +",
                "+                    \"or b) tikaBin and parserFactoryFactory must not be null\");",
                "+        }",
                "+",
                "+    }",
                "+",
                "     private synchronized void releaseClient(ForkClient client, boolean alive) {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index 68d203db3..364b94f92 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -33,2 +33,4 @@ import java.util.zip.Checksum;",
                " import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+import org.apache.tika.parser.ParserFactoryFactory;",
                "@@ -119,7 +121,22 @@ class ForkServer implements Runnable, Checksum {",
                "-            ClassLoader loader = (ClassLoader) readObject(",
                "+            final ClassLoader loader;",
                "+            Object parser = null;",
                "+            Object firstObject = readObject(",
                "                     ForkServer.class.getClassLoader());",
                "-            Thread.currentThread().setContextClassLoader(loader);",
                "-            Object object = readObject(loader);",
                "+            //legacy behavior",
                "+            if (firstObject instanceof ClassLoader) {",
                "+                loader = (ClassLoader) firstObject;",
                "+                Thread.currentThread().setContextClassLoader(loader);",
                "+                //parser from parent process",
                "+                parser = readObject(loader);",
                "+            } else if (firstObject instanceof ParserFactoryFactory) {",
                "+                //the user has submitted a parser factory",
                "+                loader = ForkServer.class.getClassLoader();",
                "+                ParserFactory parserFactory = ((ParserFactoryFactory) firstObject).build();",
                "+                parser = parserFactory.build();",
                "+            } else {",
                "+                throw new IllegalStateException(\"Was expecting ClassLoader or ParserFactoryFactory, not\"+firstObject.getClass());",
                "+            }",
                "+",
                "             while (true) {",
                "@@ -131,3 +148,3 @@ class ForkServer implements Runnable, Checksum {",
                "                 } else if (request == CALL) {",
                "-                    call(loader, object);",
                "+                    call(loader, parser);",
                "                 } else {",
                "@@ -189,3 +206,2 @@ class ForkServer implements Runnable, Checksum {",
                "      *",
                "-     * @param input input stream from which the serialized object is read",
                "      * @param loader class loader to be used for loading referenced classes",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "new file mode 100644",
                "index 000000000..c8a92e736",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.tika.parser;",
                "+",
                "+",
                "+import org.apache.tika.exception.TikaException;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+",
                "+public abstract class ParserFactory {",
                "+",
                "+    final Map<String, String> args;",
                "+",
                "+    public ParserFactory(Map<String, String> args) {",
                "+        this.args = args;",
                "+    }",
                "+",
                "+    public abstract Parser build() throws IOException, TikaException;",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java b/tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java",
                "new file mode 100644",
                "index 000000000..e44ba805e",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java",
                "@@ -0,0 +1,53 @@",
                "+package org.apache.tika.parser;",
                "+",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+import org.apache.tika.exception.TikaException;",
                "+",
                "+import java.io.Serializable;",
                "+import java.lang.reflect.Constructor;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Lightweight, easily serializable class that contains enough information",
                "+ * to build a {@link ParserFactory}",
                "+ */",
                "+public class ParserFactoryFactory implements Serializable {",
                "+",
                "+    /** Serial version UID */",
                "+    private static final long serialVersionUID = 4710974869988895410L;",
                "+",
                "+    private final String className;",
                "+    private final Map<String, String> args;",
                "+",
                "+    public ParserFactoryFactory(String className, Map<String, String> args) {",
                "+        this.className = className;",
                "+        this.args = args;",
                "+    }",
                "+",
                "+    public ParserFactory build() throws TikaException {",
                "+        try {",
                "+            Class<?> clazz = Class.forName(className);",
                "+            Constructor<?> con = clazz.getConstructor(Map.class);",
                "+            return (ParserFactory) con.newInstance(args);",
                "+        } catch (ReflectiveOperationException|IllegalStateException e) {",
                "+            throw new TikaException(\"Couldn't create factory\", e);",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java b/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "new file mode 100644",
                "index 000000000..588a00bd2",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "@@ -0,0 +1,25 @@",
                "+package org.apache.tika.utils;",
                "+",
                "+",
                "+public class ProcessUtils {",
                "+",
                "+    /**",
                "+     * This should correctly put double-quotes around an argument if",
                "+     * ProcessBuilder doesn't seem to work (as it doesn't",
                "+     * on paths with spaces on Windows)",
                "+     *",
                "+     * @param arg",
                "+     * @return",
                "+     */",
                "+    public static String escapeCommandLine(String arg) {",
                "+        if (arg == null) {",
                "+            return arg;",
                "+        }",
                "+        //need to test for \" \" on windows, can't just add double quotes",
                "+        //across platforms.",
                "+        if (arg.contains(\" \") && SystemUtils.IS_OS_WINDOWS) {",
                "+            arg = \"\\\"\" + arg + \"\\\"\";",
                "+        }",
                "+        return arg;",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java b/tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java",
                "new file mode 100644",
                "index 000000000..889f62c6c",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java",
                "@@ -0,0 +1,61 @@",
                "+/**",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.utils;",
                "+",
                "+/**",
                "+ * Copied from commons-lang to avoid requiring the dependency",
                "+ */",
                "+public class SystemUtils {",
                "+",
                "+    private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\";",
                "+    public static final String OS_NAME = getSystemProperty(\"os.name\");",
                "+    public static final String OS_VERSION = getSystemProperty(\"os.version\");",
                "+    public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\");",
                "+    public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\");",
                "+    public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\");",
                "+    public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\");",
                "+    public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\");",
                "+    public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\");",
                "+    public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\");",
                "+    public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\");",
                "+    public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\");",
                "+    public static final boolean IS_OS_UNIX;",
                "+    public static final boolean IS_OS_WINDOWS;",
                "+",
                "+",
                "+    private static String getSystemProperty(String property) {",
                "+        try {",
                "+            return System.getProperty(property);",
                "+        } catch (SecurityException var2) {",
                "+            return null;",
                "+        }",
                "+    }",
                "+",
                "+    private static boolean getOSMatchesName(String osNamePrefix) {",
                "+        return isOSNameMatch(OS_NAME, osNamePrefix);",
                "+    }",
                "+",
                "+    static boolean isOSNameMatch(String osName, String osNamePrefix) {",
                "+        return osName == null ? false : osName.startsWith(osNamePrefix);",
                "+    }",
                "+",
                "+    static {",
                "+        IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX || IS_OS_SOLARIS || IS_OS_SUN_OS;",
                "+        IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX);",
                "+    }",
                "+",
                "+}"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java",
                "tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2653": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2653",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5ae7cc5d59006e15baa3347954e0545468c0dc94",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527792822,
            "hunks": 25,
            "message": "TIKA-2655--update to allow handlers to process data on the server and not have to proxy it back.  Handle non-serializable contenthandlers slightly better.",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index 051a2087c..0dffd0851 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -36,2 +36,3 @@ import org.apache.tika.io.IOUtils;",
                " import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.xml.sax.ContentHandler;",
                "@@ -144,6 +145,7 @@ class ForkClient {",
                "             object = new InputStreamProxy(n);",
                "-        } else if (object instanceof AbstractRecursiveParserWrapperHandler) {",
                "-            resources.add(new RecursiveMetadataContentHandlerResource((AbstractRecursiveParserWrapperHandler) object));",
                "-            object = new RecursiveMetadataContentHandlerProxy(n, ((AbstractRecursiveParserWrapperHandler)object).getContentHandlerFactory());",
                "-        } else if (object instanceof ContentHandler) {",
                "+        } else if (object instanceof RecursiveParserWrapperHandler) {",
                "+            resources.add(new RecursiveMetadataContentHandlerResource((RecursiveParserWrapperHandler) object));",
                "+            object = new RecursiveMetadataContentHandlerProxy(n, ((RecursiveParserWrapperHandler)object).getContentHandlerFactory());",
                "+        } else if (object instanceof ContentHandler",
                "+                && ! (object instanceof AbstractRecursiveParserWrapperHandler)) {",
                "             resources.add(new ContentHandlerResource((ContentHandler) object));",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index 77cd23fc1..94e8d3592 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -158,2 +158,41 @@ public class ForkParser extends AbstractParser {",
                "+    /**",
                "+     *",
                "+     * This sends the objects to the server for parsing, and the server via",
                "+     * the proxies acts on the handler as if it were updating it directly.",
                "+     * <p>",
                "+     * If using a RecursiveParserWrapper, there are two options:",
                "+     * </p>",
                "+     * <p>",
                "+     *     <ol>",
                "+     *         <li>Send in a class that extends {@link org.apache.tika.sax.RecursiveParserWrapperHandler},",
                "+     *              and the server will proxy back the data as best it can[0].</li>",
                "+     *         <li>Send in a class that extends {@link AbstractRecursiveParserWrapperHandler}",
                "+     *              and the server will act on the class but not proxy back the data.  This",
                "+     *              can be used, for example, if all you want to do is write to disc, extend",
                "+     *              {@link AbstractRecursiveParserWrapperHandler} to write to disc when",
                "+     *              {@link AbstractRecursiveParserWrapperHandler#endDocument(ContentHandler, Metadata)}",
                "+     *              is called, and the server will take care of the writing via the handler.</li>",
                "+     *     </ol>",
                "+     * </p>",
                "+     * <p>",
                "+     *     <b>NOTE:</b>[0] &quot;the server will proxy back the data as best it can&quot;.  If the handler",
                "+     *     implements Serializable and is actually serializable, the server will send it and the",
                "+     *     {@link Metadata} back upon {@link org.apache.tika.sax.RecursiveParserWrapperHandler#endEmbeddedDocument(ContentHandler, Metadata)}",
                "+     *     or {@link org.apache.tika.sax.RecursiveParserWrapperHandler#endEmbeddedDocument(ContentHandler, Metadata)}.",
                "+     *     If the handler does not implement {@link java.io.Serializable} or if there is a",
                "+     *     {@link java.io.NotSerializableException} thrown during serialization, the server will",
                "+     *     call {@link ContentHandler#toString()} on the ContentHandler and set that value with the",
                "+     *     {@link org.apache.tika.sax.RecursiveParserWrapperHandler#TIKA_CONTENT} key and then",
                "+     *     serialize and proxy that data back.",
                "+     * </p>",
                "+     *",
                "+     * @param stream the document stream (input)",
                "+     * @param handler handler for the XHTML SAX events (output)",
                "+     * @param metadata document metadata (input and output)",
                "+     * @param context parse context",
                "+     * @throws IOException",
                "+     * @throws SAXException",
                "+     * @throws TikaException",
                "+     */",
                "     public void parse(",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "index 591845738..7e89bc17b 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "@@ -29,3 +29,5 @@ import java.io.DataOutputStream;",
                " import java.io.IOException;",
                "+import java.io.NotSerializableException;",
                " import java.io.ObjectOutputStream;",
                "+import java.io.Serializable;",
                "@@ -39,7 +41,9 @@ import java.io.ObjectOutputStream;",
                "  */",
                "-class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrapperHandler implements ForkProxy {",
                "+class RecursiveMetadataContentHandlerProxy extends RecursiveParserWrapperHandler implements ForkProxy {",
                "-    public static final int EMBEDDED_DOCUMENT         =  1;",
                "-    public static final int MAIN_DOCUMENT           =  2;",
                "-    public static final int COMPLETE   =  3;",
                "+    public static final byte EMBEDDED_DOCUMENT         =  1;",
                "+    public static final byte MAIN_DOCUMENT           =  2;",
                "+    public static final byte HANDLER_AND_METADATA = 3;",
                "+    public static final byte METADATA_ONLY = 4;",
                "+    public static final byte COMPLETE   =  5;",
                "@@ -63,23 +67,6 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "     public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "-        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "-",
                "-        try {",
                "-            output.write(ForkServer.RESOURCE);",
                "-            output.writeByte(resource);",
                "-            output.writeByte(EMBEDDED_DOCUMENT);",
                "-            byte[] serialized = serialize(metadata);",
                "-            output.writeInt(serialized.length);",
                "-            output.write(serialized);",
                "-            output.writeByte(COMPLETE);",
                "-        } catch (IOException e) {",
                "-            throw new SAXException(e);",
                "-        } finally {",
                "-            doneSending();",
                "-        }",
                "+        proxyBackToClient(EMBEDDED_DOCUMENT, contentHandler, metadata);",
                "     }",
                "-",
                "     @Override",
                "     public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "-",
                "-        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "         if (hasHitMaximumEmbeddedResources()) {",
                "@@ -87,2 +74,7 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "         }",
                "+        proxyBackToClient(MAIN_DOCUMENT, contentHandler, metadata);",
                "+    }",
                "+",
                "+    private void proxyBackToClient(int embeddedOrMainDocument,",
                "+                                   ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "         try {",
                "@@ -90,7 +82,27 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "             output.writeByte(resource);",
                "-            output.writeByte(MAIN_DOCUMENT);",
                "-",
                "-            byte[] serialized = serialize(metadata);",
                "-            output.writeInt(serialized.length);",
                "-            output.write(serialized);",
                "+            output.writeByte(embeddedOrMainDocument);",
                "+            boolean success = false;",
                "+            if (contentHandler instanceof Serializable) {",
                "+                byte[] bytes = null;",
                "+                try {",
                "+                    bytes = serialize(contentHandler);",
                "+                    success = true;",
                "+                } catch (NotSerializableException e) {",
                "+                    //object lied",
                "+                }",
                "+                if (success) {",
                "+",
                "+                    output.write(HANDLER_AND_METADATA);",
                "+                    sendBytes(bytes);",
                "+                    send(metadata);",
                "+                    output.writeByte(COMPLETE);",
                "+                    return;",
                "+                }",
                "+            }",
                "+            //if contenthandler is not allegedly or actually Serializable",
                "+            //fall back to adding contentHandler.toString() to the metadata object",
                "+            //and send that.",
                "+            metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "+            output.writeByte(METADATA_ONLY);",
                "+            send(metadata);",
                "             output.writeByte(COMPLETE);",
                "@@ -103,2 +115,13 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "+    private void send(Object object) throws IOException {",
                "+        byte[] bytes = serialize(object);",
                "+        sendBytes(bytes);",
                "+    }",
                "+",
                "+    private void sendBytes(byte[] bytes) throws IOException {",
                "+        output.writeInt(bytes.length);",
                "+        output.write(bytes);",
                "+        output.flush();",
                "+    }",
                "+",
                "     private byte[] serialize(Object object) throws IOException {",
                "@@ -113,2 +136,3 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "         return bos.toByteArray();",
                "+",
                "     }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "index 57976f2b4..29aefb477 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "@@ -20,2 +20,3 @@ import org.apache.tika.metadata.Metadata;",
                " import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.xml.sax.ContentHandler;",
                "@@ -29,2 +30,3 @@ import java.io.IOException;",
                " import java.io.ObjectInputStream;",
                "+import java.util.Arrays;",
                "@@ -35,3 +37,3 @@ class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "-    public RecursiveMetadataContentHandlerResource(AbstractRecursiveParserWrapperHandler handler) {",
                "+    public RecursiveMetadataContentHandlerResource(RecursiveParserWrapperHandler handler) {",
                "         this.handler = handler;",
                "@@ -51,54 +53,30 @@ class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "             throws IOException, SAXException {",
                "-        int type = input.readByte();",
                "-        if (type == RecursiveMetadataContentHandlerProxy.EMBEDDED_DOCUMENT) {",
                "-            Metadata metadata = null;",
                "-            try {",
                "-                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "-            } catch (ClassNotFoundException e) {",
                "-                throw new IOException(e);",
                "-            }",
                "-            byte isComplete = input.readByte();",
                "-            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "-                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "-            }",
                "-            handler.endEmbeddedDocument(DEFAULT_HANDLER, metadata);",
                "-        } else if (type == RecursiveMetadataContentHandlerProxy.MAIN_DOCUMENT) {",
                "-            Metadata metadata = null;",
                "-            try {",
                "-                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "-            } catch (ClassNotFoundException e) {",
                "-                throw new IOException(e);",
                "-            }",
                "-            byte isComplete = input.readByte();",
                "-            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "-                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "-            }",
                "-            handler.endDocument(DEFAULT_HANDLER, metadata);",
                "-        } else {",
                "-            throw new IllegalArgumentException(\"I regret that I don't understand: \"+type);",
                "-        }",
                "-    }",
                "+        byte embeddedOrMain = input.readByte();",
                "+        byte handlerAndMetadataOrMetadataOnly = input.readByte();",
                "-    private Metadata deserializeMetadata(DataInputStream dataInputStream) throws IOException {",
                "-        int length = dataInputStream.readInt();",
                "-        byte[] data = new byte[length];",
                "-        dataInputStream.readFully(data);",
                "+        ContentHandler localContentHandler = DEFAULT_HANDLER;",
                "+        if (handlerAndMetadataOrMetadataOnly == RecursiveMetadataContentHandlerProxy.HANDLER_AND_METADATA) {",
                "+            localContentHandler = (ContentHandler)readObject(input);",
                "+        } else if (handlerAndMetadataOrMetadataOnly != RecursiveMetadataContentHandlerProxy.METADATA_ONLY) {",
                "+            throw new IllegalArgumentException(\"Expected HANDLER_AND_METADATA or METADATA_ONLY, but got:\"",
                "+                    +handlerAndMetadataOrMetadataOnly);",
                "+        }",
                "-        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "-        Object obj = null;",
                "-        try {",
                "-            obj = ois.readObject();",
                "-        } catch (ClassNotFoundException e) {",
                "-            throw new IOException(e);",
                "+        Metadata metadata = (Metadata) readObject(input);",
                "+        if (embeddedOrMain == RecursiveMetadataContentHandlerProxy.EMBEDDED_DOCUMENT) {",
                "+            handler.endEmbeddedDocument(localContentHandler, metadata);",
                "+        } else if (embeddedOrMain == RecursiveMetadataContentHandlerProxy.MAIN_DOCUMENT) {",
                "+            handler.endDocument(localContentHandler, metadata);",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"Expected either 0x01 or 0x02, but got: \"+embeddedOrMain);",
                "+        }",
                "+        byte isComplete = input.readByte();",
                "+        if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "+            throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "         }",
                "-        return (Metadata) obj;",
                "     }",
                "-    private ContentHandler deserializeContentHandler(DataInputStream dataInputStream) throws IOException {",
                "-        int length = dataInputStream.readInt();",
                "-        byte[] data = new byte[length];",
                "-        dataInputStream.readFully(data);",
                "-        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "-        Object obj = null;",
                "+",
                "+    private Object readObject(DataInputStream inputStream) throws IOException {",
                "         try {",
                "-            obj = ois.readObject();",
                "+            return ForkObjectInputStream.readObject(inputStream, this.getClass().getClassLoader());",
                "         } catch (ClassNotFoundException e) {",
                "@@ -106,3 +84,3 @@ class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "         }",
                "-        return (ContentHandler)obj;",
                "+",
                "     }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "index c1fb815ec..23304af4e 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "@@ -218,2 +218,3 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "         long started = System.currentTimeMillis();",
                "+        parserState.recursiveParserWrapperHandler.startDocument();",
                "         try {",
                "@@ -230,2 +231,4 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             parserState.recursiveParserWrapperHandler.endDocument(localHandler, metadata);",
                "+            parserState.recursiveParserWrapperHandler.endDocument();",
                "+",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "index 2444a9c1b..5faf3a409 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "@@ -41,3 +41,3 @@ public class RecursiveParserWrapperHandler extends AbstractRecursiveParserWrappe",
                "-    private final List<Metadata> metadataList = new LinkedList<>();",
                "+    protected final List<Metadata> metadataList = new LinkedList<>();",
                "@@ -106,3 +106,3 @@ public class RecursiveParserWrapperHandler extends AbstractRecursiveParserWrappe",
                "-    private void addContent(ContentHandler handler, Metadata metadata) {",
                "+    void addContent(ContentHandler handler, Metadata metadata) {"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2655": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2655",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e24e6afb1c2a37be266839767115ad6adc5f8dcf",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527034073,
            "hunks": 126,
            "message": "TIKA-2645 - use a pool for SAXParsers and DOMBuilders -- make the static poll/offer calls private to XMLReaderUtils for cleaner encapsulation.",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "index 63c0edd6e..20a0be548 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "@@ -26,2 +26,3 @@ import org.apache.tika.exception.TikaException;",
                " import org.apache.tika.io.CloseShieldInputStream;",
                "+import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.sax.OfflineContentHandler;",
                "@@ -39,2 +40,3 @@ import org.xml.sax.helpers.DefaultHandler;",
                " public class XmlRootExtractor {",
                "+    private static final ParseContext EMPTY_CONTEXT = new ParseContext();",
                "@@ -49,11 +51,7 @@ public class XmlRootExtractor {",
                "         ExtractorHandler handler = new ExtractorHandler();",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = XMLReaderUtils.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "-                    new OfflineContentHandler(handler));",
                "+                    new OfflineContentHandler(handler), EMPTY_CONTEXT);",
                "         } catch (Exception ignore) {",
                "-        } finally {",
                "-                XMLReaderUtils.releaseParser(parser);",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "index 71561a82d..565aaf83d 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "@@ -321,3 +321,3 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "      */",
                "-    public static SAXParser acquireSAXParser()",
                "+    private static SAXParser acquireSAXParser()",
                "             throws TikaException {",
                "@@ -345,3 +345,3 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "      */",
                "-    public static void releaseParser(SAXParser parser) {",
                "+    private static void releaseParser(SAXParser parser) {",
                "         try {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java b/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "index 78b72467f..65b5d537e 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.sax.TaggedContentHandler;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -128,8 +129,6 @@ public class NetworkParser extends AbstractParser {",
                "                     new OfflineContentHandler(handler));",
                "-            SAXParser parser = null;",
                "             try {",
                "-                parser = context.acquireSAXParser();",
                "-                parser.parse(",
                "+                XMLReaderUtils.parseSAX(",
                "                         stream, new TeeContentHandler(",
                "-                                tagged, new MetaHandler(metadata)));",
                "+                                tagged, new MetaHandler(metadata)), context);",
                "             } catch (SAXException e) {",
                "@@ -142,3 +141,2 @@ public class NetworkParser extends AbstractParser {",
                "             } finally {",
                "-                context.releaseParser(parser);",
                "                 try {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "index 45d0c8f53..f5c3169bf 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "@@ -25,10 +25,5 @@ import javax.xml.parsers.SAXParserFactory;",
                " import javax.xml.stream.XMLInputFactory;",
                "-import javax.xml.stream.XMLResolver;",
                "-import javax.xml.stream.XMLStreamException;",
                " import javax.xml.transform.Transformer;",
                "-import javax.xml.transform.TransformerConfigurationException;",
                "-import javax.xml.transform.TransformerFactory;",
                "-import javax.xml.transform.TransformerFactoryConfigurationError;",
                "-import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.io.Serializable;",
                "@@ -42,2 +37,3 @@ import org.xml.sax.SAXNotSupportedException;",
                " import org.xml.sax.XMLReader;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "@@ -123,3 +119,5 @@ public class ParseContext implements Serializable {",
                "      * is not explicitly specified, then one is created using the specified",
                "-     * or the default SAX parser factory.",
                "+     * or the default SAX parser factory. Consider using",
                "+     * {@link XMLReaderUtils#parseSAX(InputStream, DefaultHandler, ParseContext)}",
                "+     * for more efficient reuse of SAXParsers.",
                "      *",
                "@@ -139,35 +137,2 @@ public class ParseContext implements Serializable {",
                "-    /**",
                "-     * Returns the SAX parser specified in this parsing context. If a parser",
                "-     * is not explicitly specified, then one is acquired from the pool.",
                "-     * <p>",
                "-     * Make sure to {@link #releaseParser(SAXParser)} as the",
                "-     * first call in a <code>finally</code> block every time",
                "-     * you call this!",
                "-     * </p>",
                "-     *",
                "-     * @return SAXParser",
                "-     * @throws TikaException",
                "-     */",
                "-    public SAXParser acquireSAXParser() throws TikaException {",
                "-        if (context.containsKey(SAXParser.class)) {",
                "-            return get(SAXParser.class);",
                "-        }",
                "-        return XMLReaderUtils.acquireSAXParser();",
                "-    }",
                "-",
                "-    /**",
                "-     * If the context already has a SAXParser, this is a no-op.",
                "-     * Otherwise, this returns the parser to the pool",
                "-     *",
                "-     * @param parser",
                "-     * @throws TikaException",
                "-     */",
                "-    public void releaseParser(SAXParser parser) {",
                "-        if (context.containsKey(SAXParser.class)) {",
                "-            return;",
                "-        }",
                "-        XMLReaderUtils.releaseParser(parser);",
                "-    }",
                "-",
                "     /**",
                "@@ -230,2 +195,4 @@ public class ParseContext implements Serializable {",
                "      * and it sets the ErrorHandler to <code>null</code>.",
                "+     * Consider using {@link XMLReaderUtils#buildDOM(InputStream, ParseContext)}",
                "+     * instead for more efficient reuse of document builders.",
                "      *",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "index c48a07850..10c22745b 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "@@ -20,2 +20,4 @@ package org.apache.tika.utils;",
                " import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParseContext;",
                "+import org.w3c.dom.Document;",
                " import org.xml.sax.EntityResolver;",
                "@@ -26,2 +28,3 @@ import org.xml.sax.SAXNotSupportedException;",
                " import org.xml.sax.XMLReader;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "@@ -41,2 +44,3 @@ import javax.xml.transform.TransformerFactoryConfigurationError;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.io.Serializable;",
                "@@ -68,5 +72,8 @@ public class XMLReaderUtils implements Serializable {",
                "-    private static final ReentrantReadWriteLock READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "+    //TODO: figure out if the rw lock is any better than a simple lock",
                "+    private static final ReentrantReadWriteLock SAX_READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "+    private static final ReentrantReadWriteLock DOM_READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "     private static ArrayBlockingQueue<SAXParser> SAX_PARSERS = new ArrayBlockingQueue<>(POOL_SIZE);",
                "+    private static ArrayBlockingQueue<DocumentBuilder> DOM_BUILDERS = new ArrayBlockingQueue<>(POOL_SIZE);",
                "@@ -76,3 +83,3 @@ public class XMLReaderUtils implements Serializable {",
                "         } catch (TikaException e) {",
                "-            throw new RuntimeException(\"problem initializing SAXParser pool\", e);",
                "+            throw new RuntimeException(\"problem initializing SAXParser and DOMBuilder pools\", e);",
                "         }",
                "@@ -281,4 +288,118 @@ public class XMLReaderUtils implements Serializable {",
                "     /**",
                "-     * Acquire a SAXParser from the pool; create one if it",
                "-     * doesn't exist.  Make sure to {@link #releaseParser(SAXParser)} in",
                "+     * This checks context for a user specified {@link DocumentBuilder}.",
                "+     * If one is not found, this reuses a DocumentBuilder from the pool.",
                "+     *",
                "+     * @since Apache Tika 1.19",
                "+     * @param is InputStream to parse",
                "+     * @param context context to use",
                "+     * @return a document",
                "+     * @throws TikaException",
                "+     * @throws IOException",
                "+     * @throws SAXException",
                "+     */",
                "+    public static Document buildDOM(InputStream is, ParseContext context) throws TikaException, IOException, SAXException {",
                "+        DocumentBuilder builderFromContext = context.get(DocumentBuilder.class);",
                "+        DocumentBuilder builder = (builderFromContext == null) ? acquireDOMBuilder() : builderFromContext;",
                "+",
                "+        try {",
                "+            return builder.parse(is);",
                "+        } finally {",
                "+            if (builderFromContext == null) {",
                "+                releaseDOMBuilder(builder);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * This checks context for a user specified {@link SAXParser}.",
                "+     * If one is not found, this reuses a SAXParser from the pool.",
                "+     *",
                "+     * @since Apache Tika 1.19",
                "+     * @param is InputStream to parse",
                "+     * @param contentHandler handler to use",
                "+     * @param context context to use",
                "+     * @return",
                "+     * @throws TikaException",
                "+     * @throws IOException",
                "+     * @throws SAXException",
                "+     */",
                "+    public static void parseSAX(InputStream is, DefaultHandler contentHandler, ParseContext context)",
                "+            throws TikaException, IOException, SAXException {",
                "+        SAXParser contextParser = context.get(SAXParser.class);",
                "+        SAXParser parser = (contextParser == null) ? acquireSAXParser() : contextParser;",
                "+        try {",
                "+            parser.parse(is, contentHandler);",
                "+        } finally {",
                "+            if (contextParser == null) {",
                "+                releaseParser(parser);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Acquire a SAXParser from the pool.  Make sure to",
                "+     * {@link #releaseParser(SAXParser)} in",
                "+     * a <code>finally</code> block every time you call this.",
                "+     *",
                "+     * @return a SAXParser",
                "+     * @throws TikaException",
                "+     */",
                "+    private static DocumentBuilder acquireDOMBuilder()",
                "+            throws TikaException {",
                "+        int waiting = 0;",
                "+        while (true) {",
                "+            DocumentBuilder builder = null;",
                "+            try {",
                "+                DOM_READ_WRITE_LOCK.readLock().lock();",
                "+                builder = DOM_BUILDERS.poll(100, TimeUnit.MILLISECONDS);",
                "+            } catch (InterruptedException e) {",
                "+                throw new TikaException(\"interrupted while waiting for DOMBuilder\", e);",
                "+            } finally {",
                "+                DOM_READ_WRITE_LOCK.readLock().unlock();",
                "+            }",
                "+            if (builder != null) {",
                "+                return builder;",
                "+            }",
                "+            waiting++;",
                "+            if (waiting > 3000) {",
                "+                //freshen the pool.  Something went very wrong...",
                "+                setPoolSize(POOL_SIZE);",
                "+                //better to get an exception than have permahang by a bug in one of our parsers",
                "+                throw new TikaException(\"Waited more than 5 minutes for a DocumentBuilder; \" +",
                "+                        \"This could indicate that a parser has not correctly released its DocumentBuilder. \" +",
                "+                        \"Please report this to the Tika team: dev@tika.apache.org\");",
                "+",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Return parser to the pool for reuse.",
                "+     *",
                "+     * @param builder builder to return",
                "+     */",
                "+    private static void releaseDOMBuilder(DocumentBuilder builder) {",
                "+        try {",
                "+            builder.reset();",
                "+        } catch (UnsupportedOperationException e) {",
                "+            //ignore",
                "+        }",
                "+        try {",
                "+            DOM_READ_WRITE_LOCK.readLock().lock();",
                "+            //if there are extra parsers (e.g. after a reset of the pool to a smaller size),",
                "+            // this parser will not be added and will then be gc'd",
                "+            boolean success = DOM_BUILDERS.offer(builder);",
                "+            if (! success) {",
                "+                LOG.warning(\"DocumentBuilder not taken back into pool.  If you haven't resized the pool, this could \" +",
                "+                        \"be a sign that there are more calls to 'acquire' than to 'release'\");",
                "+            }",
                "+        } finally {",
                "+            DOM_READ_WRITE_LOCK.readLock().unlock();",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Acquire a SAXParser from the pool.  Make sure to",
                "+     * {@link #releaseParser(SAXParser)} in",
                "      * a <code>finally</code> block every time you call this.",
                "@@ -288,3 +409,3 @@ public class XMLReaderUtils implements Serializable {",
                "      */",
                "-    public static SAXParser acquireSAXParser()",
                "+    private static SAXParser acquireSAXParser()",
                "             throws TikaException {",
                "@@ -294,3 +415,3 @@ public class XMLReaderUtils implements Serializable {",
                "             try {",
                "-                READ_WRITE_LOCK.readLock().lock();",
                "+                SAX_READ_WRITE_LOCK.readLock().lock();",
                "                 parser = SAX_PARSERS.poll(100, TimeUnit.MILLISECONDS);",
                "@@ -299,3 +420,3 @@ public class XMLReaderUtils implements Serializable {",
                "             } finally {",
                "-                READ_WRITE_LOCK.readLock().unlock();",
                "+                SAX_READ_WRITE_LOCK.readLock().unlock();",
                "             }",
                "@@ -322,3 +443,3 @@ public class XMLReaderUtils implements Serializable {",
                "      */",
                "-    public static void releaseParser(SAXParser parser) {",
                "+    private static void releaseParser(SAXParser parser) {",
                "         try {",
                "@@ -329,3 +450,3 @@ public class XMLReaderUtils implements Serializable {",
                "         try {",
                "-            READ_WRITE_LOCK.readLock().lock();",
                "+            SAX_READ_WRITE_LOCK.readLock().lock();",
                "             //if there are extra parsers (e.g. after a reset of the pool to a smaller size),",
                "@@ -338,3 +459,3 @@ public class XMLReaderUtils implements Serializable {",
                "         } finally {",
                "-            READ_WRITE_LOCK.readLock().unlock();",
                "+            SAX_READ_WRITE_LOCK.readLock().unlock();",
                "         }",
                "@@ -345,2 +466,3 @@ public class XMLReaderUtils implements Serializable {",
                "      *",
                "+     * @since Apache Tika 1.19",
                "      * @param poolSize",
                "@@ -350,16 +472,30 @@ public class XMLReaderUtils implements Serializable {",
                "             //stop the world with a write lock.",
                "-            //parsers that are currently in use will be offered, but not",
                "-            //accepted and will be gc'd",
                "-            READ_WRITE_LOCK.writeLock().lock();",
                "-            if (SAX_PARSERS.size() == poolSize) {",
                "-                return;",
                "+            //parsers that are currently in use will be offered later (once the lock is released),",
                "+            //but not accepted and will be gc'd.  We have to do this locking and",
                "+            //the read locking in case one thread resizes the pool when the",
                "+            //parsers have already started.  We could have an NPE on SAX_PARSERS",
                "+            //if we didn't lock.",
                "+            SAX_READ_WRITE_LOCK.writeLock().lock();",
                "+            if (SAX_PARSERS.size() != poolSize) {",
                "+                SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);",
                "+                for (int i = 0; i < poolSize; i++) {",
                "+                    SAX_PARSERS.offer(getSAXParser());",
                "+                }",
                "             }",
                "-            SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);",
                "-            for (int i = 0; i < poolSize; i++) {",
                "-                SAX_PARSERS.offer(getSAXParser());",
                "+        } finally {",
                "+            SAX_READ_WRITE_LOCK.writeLock().unlock();",
                "+        }",
                "+        try {",
                "+            DOM_READ_WRITE_LOCK.writeLock().lock();",
                "+",
                "+            if (DOM_BUILDERS.size() != poolSize) {",
                "+                DOM_BUILDERS = new ArrayBlockingQueue<>(poolSize);",
                "+                for (int i = 0; i < poolSize; i++) {",
                "+                    DOM_BUILDERS.offer(getDocumentBuilder());",
                "+                }",
                "             }",
                "-            POOL_SIZE = poolSize;",
                "         } finally {",
                "-            READ_WRITE_LOCK.writeLock().unlock();",
                "+            DOM_READ_WRITE_LOCK.writeLock().unlock();",
                "         }",
                "+        POOL_SIZE = poolSize;",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "index 33dad3c3a..00b1ed102 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "@@ -35,2 +35,3 @@ import org.apache.tika.sax.TaggedContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -65,9 +66,7 @@ public class DIFParser extends AbstractParser {",
                " \t\tTaggedContentHandler tagged = new TaggedContentHandler(handler);",
                "-\t\tSAXParser parser = null;",
                " \t\ttry {",
                "-\t\t\tparser = context.acquireSAXParser();",
                "-\t\t\tparser.parse(",
                "+\t\t\tXMLReaderUtils.parseSAX(",
                " \t\t\t\t\tnew CloseShieldInputStream(stream),",
                " \t\t\t\t\tnew OfflineContentHandler(new EmbeddedContentHandler(",
                "-\t\t\t\t\t\t\tgetContentHandler(tagged, metadata, context))));",
                "+\t\t\t\t\t\t\tgetContentHandler(tagged, metadata, context))), context);",
                " \t\t} catch (SAXException e) {",
                "@@ -76,5 +75,2 @@ public class DIFParser extends AbstractParser {",
                " \t\t} finally {",
                "-\t\t\t//make sure to release the parser before doing",
                "-\t\t\t//something that could cause an exception!",
                "-\t\t\tcontext.releaseParser(parser);",
                " \t\t\txhtml.endElement(\"p\");",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "index 44d5f7211..ce188fdff 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "@@ -18,8 +18,2 @@ package org.apache.tika.parser.epub;",
                "-import javax.xml.parsers.SAXParser;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.util.Collections;",
                "-import java.util.Set;",
                "-",
                " import org.apache.commons.io.input.CloseShieldInputStream;",
                "@@ -31,2 +25,3 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.sax.OfflineContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -34,2 +29,7 @@ import org.xml.sax.SAXException;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.Set;",
                "+",
                " /**",
                "@@ -50,12 +50,5 @@ public class EpubContentParser extends AbstractParser {",
                "-        SAXParser parser = null;",
                "-        try {",
                "-            parser = context.acquireSAXParser();",
                "-",
                "-            parser.parse(",
                "-                    new CloseShieldInputStream(stream),",
                "-                    new OfflineContentHandler(handler));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "-        }",
                "+        XMLReaderUtils.parseSAX(",
                "+                new CloseShieldInputStream(stream),",
                "+                new OfflineContentHandler(handler), context);",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "index e17c41c10..1e293c02e 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "@@ -59,2 +59,3 @@ import org.apache.tika.metadata.TIFF;",
                " import org.apache.tika.metadata.TikaCoreProperties;",
                "+import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.parser.image.xmp.JempboxExtractor;",
                "@@ -72,3 +73,4 @@ import org.xml.sax.SAXException;",
                " public class ImageMetadataExtractor {",
                "-",
                "+    //TODO: add this to the signatures from the actual parse",
                "+    private static final ParseContext EMPTY_PARSE_CONTEXT = new ParseContext();",
                "     private static final String GEO_DECIMAL_FORMAT_STRING = \"#.######\"; // 6 dp seems to be reasonable",
                "@@ -185,3 +187,3 @@ public class ImageMetadataExtractor {",
                "         ) {",
                "-            Document dom = XMLReaderUtils.getDocumentBuilder().parse(decoded);",
                "+            Document dom = XMLReaderUtils.buildDOM(decoded, EMPTY_PARSE_CONTEXT);",
                "             if (dom != null) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "index dff64dc16..0f4f73b32 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "@@ -37,2 +37,3 @@ import org.apache.tika.metadata.TikaCoreProperties;",
                " import org.apache.tika.metadata.XMPMM;",
                "+import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.utils.DateUtils;",
                "@@ -44,3 +45,4 @@ public class JempboxExtractor {",
                "-",
                "+    //TODO: change signature to require parsecontext from parse",
                "+    private static final ParseContext EMPTY_PARSE_CONTEXT = new ParseContext();",
                "     private static volatile int MAX_EVENT_HISTORY_IN_XMPMM = 1024;",
                "@@ -68,3 +70,3 @@ public class JempboxExtractor {",
                "         ) {",
                "-            Document dom = XMLReaderUtils.getDocumentBuilder().parse(decoded);",
                "+            Document dom = XMLReaderUtils.buildDOM(decoded, EMPTY_PARSE_CONTEXT);",
                "             if (dom != null) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "index 17d30e99c..5d8f01a97 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "@@ -18,13 +18,2 @@ package org.apache.tika.parser.iwork;",
                "-import java.io.BufferedInputStream;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.util.Arrays;",
                "-import java.util.Collections;",
                "-import java.util.HashSet;",
                "-import java.util.Set;",
                "-",
                "-import javax.xml.namespace.QName;",
                "-import javax.xml.parsers.SAXParser;",
                "-",
                " import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;",
                "@@ -42,2 +31,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -45,2 +35,11 @@ import org.xml.sax.SAXException;",
                "+import javax.xml.namespace.QName;",
                "+import java.io.BufferedInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+",
                " /**",
                "@@ -205,15 +204,9 @@ public class IWorkPackageParser extends AbstractParser {",
                "                xhtml.startDocument();",
                "-               if (contentHandler != null) {",
                "-                   SAXParser parser = null;",
                "-                   try {",
                "-                       parser = context.acquireSAXParser();",
                "-",
                "-                       parser.parse(",
                "-                               new CloseShieldInputStream(entryStream),",
                "-                               new OfflineContentHandler(contentHandler)",
                "-                       );",
                "-                   } finally {",
                "-                       context.releaseParser(parser);",
                "-                   }",
                "-               }",
                "+                if (contentHandler != null) {",
                "+                    XMLReaderUtils.parseSAX(",
                "+                            new CloseShieldInputStream(entryStream),",
                "+                            new OfflineContentHandler(contentHandler),",
                "+                            context",
                "+                    );",
                "+                }",
                "                xhtml.endDocument();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "index 6438bdd5d..b79ec9390 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "@@ -28,2 +28,3 @@ import org.apache.tika.metadata.Metadata;",
                " import org.apache.tika.parser.ParseContext;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.w3c.dom.Document;",
                "@@ -42,5 +43,5 @@ public class TEIDOMParser {",
                "-        Document root = parseContext.getDocumentBuilder().parse(",
                "-                new ByteArrayInputStream(source.getBytes(StandardCharsets.UTF_8))",
                "-        );",
                "+        Document root = XMLReaderUtils.buildDOM(",
                "+                new ByteArrayInputStream(source.getBytes(StandardCharsets.UTF_8)), parseContext);",
                "+",
                "         Metadata metadata = new Metadata();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "index 6f4f5a395..d2eb87a90 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "@@ -65,2 +65,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.apache.xmlbeans.XmlException;",
                "@@ -519,7 +520,5 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {",
                "                     PackagePart relatedPartPart = parentPart.getRelatedPart(relatedPartPackageRelationship);",
                "-                    SAXParser parser = null;",
                "                     try (InputStream stream = relatedPartPart.getInputStream()) {",
                "-                        parser = context.acquireSAXParser();",
                "-                        parser.parse(stream,",
                "-                                new OfflineContentHandler(new EmbeddedContentHandler(contentHandler)));",
                "+                        XMLReaderUtils.parseSAX(stream,",
                "+                                new OfflineContentHandler(new EmbeddedContentHandler(contentHandler)), context);",
                "@@ -528,6 +527,3 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {",
                "                                 ExceptionUtils.getStackTrace(e));",
                "-                    } finally {",
                "-                        context.releaseParser(parser);",
                "                     }",
                "-",
                "                 } catch (InvalidFormatException e) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "index 46cfc9831..10ff76e12 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "@@ -46,2 +46,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -162,8 +163,7 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "             }",
                "-            SAXParser parser = null;",
                "             try (InputStream stream = commentAuthorsPart.getInputStream()) {",
                "-                parser = context.acquireSAXParser();",
                "-                parser.parse(",
                "+                XMLReaderUtils.parseSAX(",
                "                         new CloseShieldInputStream(stream),",
                "-                        new OfflineContentHandler(new XSLFCommentAuthorHandler()));",
                "+                        new OfflineContentHandler(new XSLFCommentAuthorHandler()),",
                "+                        context);",
                "@@ -172,4 +172,2 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "                         ExceptionUtils.getStackTrace(e));",
                "-            } finally {",
                "-                context.releaseParser(parser);",
                "             }",
                "@@ -184,6 +182,4 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "         xhtml.startElement(\"div\", \"class\", \"slide-content\");",
                "-        SAXParser parser = null;",
                "         try (InputStream stream = slidePart.getInputStream()) {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -191,9 +187,8 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "                             new OOXMLWordAndPowerPointTextHandler(",
                "-                                    new OOXMLTikaBodyPartHandler(xhtml), linkedRelationships))));",
                "+                                    new OOXMLTikaBodyPartHandler(xhtml), linkedRelationships))),",
                "+                    context);",
                "-        } catch (TikaException e) {",
                "+        } catch (TikaException|IOException e) {",
                "             metadata.add(TikaCoreProperties.TIKA_META_EXCEPTION_WARNING,",
                "                     ExceptionUtils.getStackTrace(e));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "         }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "index 82919d328..0641a81ba 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "@@ -46,2 +46,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.apache.xmlbeans.XmlException;",
                "@@ -191,6 +192,4 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {",
                "         Map<String, String> linkedRelationships = loadLinkedRelationships(packagePart, true, metadata);",
                "-        SAXParser parser = null;",
                "         try (InputStream stream = packagePart.getInputStream()) {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -199,8 +198,7 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {",
                "                                     new OOXMLTikaBodyPartHandler(xhtml, styles, listManager,",
                "-                                            config), linkedRelationships, config.getIncludeShapeBasedContent(), config.getConcatenatePhoneticRuns()))));",
                "-        } catch (TikaException e) {",
                "+                                            config), linkedRelationships, config.getIncludeShapeBasedContent(), config.getConcatenatePhoneticRuns()))),",
                "+                    context);",
                "+        } catch (TikaException|IOException e) {",
                "             metadata.add(TikaCoreProperties.TIKA_META_EXCEPTION_WARNING,",
                "                     ExceptionUtils.getStackTrace(e));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "         }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "index ecae502f9..848945f28 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "@@ -62,2 +62,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.apache.xmlbeans.XmlException;",
                "@@ -196,10 +197,6 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "         //consider adding this back to POI",
                "-        SAXParser parser = null;",
                "         try (InputStream wbData = xssfReader.getWorkbookData()) {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            parser.parse(wbData, new OfflineContentHandler(new AbsPathExtractorHandler()));",
                "+            XMLReaderUtils.parseSAX(wbData, new OfflineContentHandler(new AbsPathExtractorHandler()), parseContext);",
                "         } catch (InvalidFormatException|TikaException e) {",
                "             //swallow",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "         }",
                "@@ -338,8 +335,4 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             throws IOException, SAXException {",
                "-        InputSource sheetSource = new InputSource(sheetInputStream);",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            XMLReader sheetParser = parser.getXMLReader();",
                "             XSSFSheetInterestingPartsCapturer handler =",
                "@@ -347,4 +340,3 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "                             styles, comments, strings, sheetContentsExtractor, formatter, false));",
                "-            sheetParser.setContentHandler(handler);",
                "-            sheetParser.parse(sheetSource);",
                "+            XMLReaderUtils.parseSAX(sheetInputStream, handler, parseContext);",
                "             sheetInputStream.close();",
                "@@ -356,4 +348,2 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             throw new RuntimeException(\"SAX parser appears to be broken - \" + e.getMessage());",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "         }",
                "@@ -524,3 +514,3 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "      */",
                "-    protected static class XSSFSheetInterestingPartsCapturer implements ContentHandler {",
                "+    protected static class XSSFSheetInterestingPartsCapturer extends DefaultHandler {",
                "         private ContentHandler delegate;",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "index 9ef992de5..50e1e9a6d 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "@@ -38,2 +38,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -131,11 +132,8 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                                  XHTMLContentHandler xhtml) throws IOException, SAXException, TikaException {",
                "-        SAXParser parser = null;",
                "         try (InputStream stream = pkg.getPart(packageRelationship).getInputStream()) {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            new FixedDocSeqHandler(xhtml))));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "+                            new FixedDocSeqHandler(xhtml))),",
                "+                    context);",
                "         }",
                "@@ -185,9 +183,8 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "             if (pkg instanceof ZipPackage) {",
                "-                SAXParser parser = null;",
                "                 try (InputStream stream = getZipStream(zipPath, pkg)) {",
                "-                    parser = context.acquireSAXParser();",
                "-                    parser.parse(",
                "+                XMLReaderUtils.parseSAX(",
                "                             new CloseShieldInputStream(stream),",
                "                             new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                                    new PageContentPartHandler(relativeRoot, xhtml))));",
                "+                                    new PageContentPartHandler(relativeRoot, xhtml))),",
                "+                        context);",
                "@@ -195,4 +192,2 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     throw new SAXException(new TikaException(\"IOException trying to read: \" + docRef));",
                "-                } finally {",
                "-                    context.releaseParser(parser);",
                "                 }",
                "@@ -236,6 +231,4 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     }",
                "-                    SAXParser parser = null;",
                "                     try (InputStream stream = getZipStream(pagePath, pkg)) {",
                "-                        parser = context.acquireSAXParser();",
                "-                        parser.parse(",
                "+                        XMLReaderUtils.parseSAX(",
                "                                 new CloseShieldInputStream(stream),",
                "@@ -243,3 +236,4 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                                         new XPSPageContentHandler(xhtml, embeddedImages)",
                "-                                )",
                "+                                ),",
                "+                                context",
                "                         );",
                "@@ -247,4 +241,2 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                         throw new SAXException(e);",
                "-                    } finally {",
                "-                        context.releaseParser(parser);",
                "                     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "index 1b5e76bfc..1228d598a 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "@@ -29,2 +29,3 @@ import org.apache.tika.parser.microsoft.ooxml.OOXMLWordAndPowerPointTextHandler;",
                " import org.apache.tika.sax.OfflineContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -62,10 +63,4 @@ public class XWPFStylesShim {",
                "     private void onDocumentLoad(ParseContext parseContext, InputStream stream) throws TikaException, IOException, SAXException {",
                "-        SAXParser parser = null;",
                "-        try {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            parser.parse(stream,",
                "-                    new OfflineContentHandler(new StylesStripper()));",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "-        }",
                "+            XMLReaderUtils.parseSAX(stream,",
                "+                    new OfflineContentHandler(new StylesStripper()), parseContext);",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "index c517ba147..3ef99ca45 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "@@ -33,2 +33,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -59,19 +60,13 @@ public class Word2006MLParser extends AbstractOfficeParser {",
                "         xhtml.startDocument();",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            new Word2006MLDocHandler(xhtml, metadata, context))));",
                "+                            new Word2006MLDocHandler(xhtml, metadata, context))),",
                "+                    context);",
                "         } catch (SAXException e) {",
                "             throw new TikaException(\"XML parse error\", e);",
                "-        } finally {",
                "-            //make sure to release the parser before doing",
                "-            //something that could cause an exception!",
                "-            context.releaseParser(parser);",
                "-            xhtml.endDocument();",
                "         }",
                "+            xhtml.endDocument();",
                "     }",
                "-",
                " }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "index 226c7b77e..7210d8c21 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "@@ -37,2 +37,3 @@ import org.apache.tika.sax.TeeContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -98,9 +99,8 @@ public abstract class AbstractXML2003Parser extends AbstractParser {",
                "         TaggedContentHandler tagged = new TaggedContentHandler(xhtml);",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            getContentHandler(tagged, metadata, context))));",
                "+                            getContentHandler(tagged, metadata, context))),",
                "+                    context);",
                "         } catch (SAXException e) {",
                "@@ -109,5 +109,2 @@ public abstract class AbstractXML2003Parser extends AbstractParser {",
                "         } finally {",
                "-            //make sure to release the parser before doing",
                "-            //something that could cause an exception!",
                "-            context.releaseParser(parser);",
                "             xhtml.endDocument();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "index 7d5397638..d3238c23a 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "@@ -78,2 +78,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.slf4j.Logger;",
                "@@ -596,9 +597,3 @@ public class TesseractOCRParser extends AbstractParser implements Initializable",
                "         xhtml.startElement(\"div\", \"class\", \"ocr\");",
                "-        SAXParser parser = null;",
                "-        try {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            parser.parse(is, new OfflineContentHandler(new HOCRPassThroughHandler(xhtml)));",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "-        }",
                "+        XMLReaderUtils.parseSAX(is, new OfflineContentHandler(new HOCRPassThroughHandler(xhtml)), parseContext);",
                "         xhtml.endElement(\"div\");",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "index da71755f0..066f3e950 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "@@ -18,15 +18,2 @@ package org.apache.tika.parser.odf;",
                "-import static org.apache.tika.sax.XHTMLContentHandler.XHTML;",
                "-",
                "-import javax.xml.namespace.QName;",
                "-import javax.xml.parsers.SAXParser;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.util.BitSet;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "-import java.util.Stack;",
                "-",
                " import org.apache.commons.io.input.CloseShieldInputStream;",
                "@@ -41,2 +28,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -47,2 +35,14 @@ import org.xml.sax.helpers.DefaultHandler;",
                "+import javax.xml.namespace.QName;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.BitSet;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.Stack;",
                "+",
                "+import static org.apache.tika.sax.XHTMLContentHandler.XHTML;",
                "+",
                " /**",
                "@@ -598,11 +598,7 @@ public class OpenDocumentContentParser extends AbstractParser {",
                "-        SAXParser parser = context.acquireSAXParser();",
                "-        try {",
                "-            parser.parse(",
                "-                    new CloseShieldInputStream(stream),",
                "-                    new OfflineContentHandler(",
                "-                            new NSNormalizerContentHandler(dh)));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "-        }",
                "+        XMLReaderUtils.parseSAX(",
                "+                new CloseShieldInputStream(stream),",
                "+                new OfflineContentHandler(",
                "+                        new NSNormalizerContentHandler(dh)),",
                "+                context);",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "index cd847db4d..a87991135 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "@@ -73,2 +73,3 @@ import org.apache.tika.parser.ocr.TesseractOCRParser;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.w3c.dom.Document;",
                "@@ -740,5 +741,3 @@ public class PDFParser extends AbstractParser implements Initializable {",
                "             }",
                "-            DocumentBuilder documentBuilder = context.getDocumentBuilder();",
                "-            documentBuilder.setErrorHandler((ErrorHandler)null);",
                "-            return documentBuilder.parse(is);",
                "+            return XMLReaderUtils.buildDOM(is, context);",
                "         } catch (IOException|SAXException|TikaException e) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "index f05e343bb..93c661483 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "@@ -36,2 +36,3 @@ import org.apache.tika.sax.TextContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -72,9 +73,7 @@ public class XMLParser extends AbstractParser {",
                "         TaggedContentHandler tagged = new TaggedContentHandler(handler);",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            getContentHandler(tagged, metadata, context))));",
                "+                            getContentHandler(tagged, metadata, context))), context);",
                "         } catch (SAXException e) {",
                "@@ -83,5 +82,2 @@ public class XMLParser extends AbstractParser {",
                "         } finally {",
                "-            //make sure to release the parser before doing",
                "-            //something that could cause an exception!",
                "-            context.releaseParser(parser);",
                "             xhtml.endElement(\"p\");"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2645": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2645",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6c747d12ec7656b7220fa06e7da0a0e60936b9ba",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527792822,
            "hunks": 25,
            "message": "TIKA-2655 - allow handlers to be proxied back or not when the handler is an AbstractRecursiveParserWrapperHandler",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index 051a2087c..0dffd0851 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -36,2 +36,3 @@ import org.apache.tika.io.IOUtils;",
                " import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.xml.sax.ContentHandler;",
                "@@ -144,6 +145,7 @@ class ForkClient {",
                "             object = new InputStreamProxy(n);",
                "-        } else if (object instanceof AbstractRecursiveParserWrapperHandler) {",
                "-            resources.add(new RecursiveMetadataContentHandlerResource((AbstractRecursiveParserWrapperHandler) object));",
                "-            object = new RecursiveMetadataContentHandlerProxy(n, ((AbstractRecursiveParserWrapperHandler)object).getContentHandlerFactory());",
                "-        } else if (object instanceof ContentHandler) {",
                "+        } else if (object instanceof RecursiveParserWrapperHandler) {",
                "+            resources.add(new RecursiveMetadataContentHandlerResource((RecursiveParserWrapperHandler) object));",
                "+            object = new RecursiveMetadataContentHandlerProxy(n, ((RecursiveParserWrapperHandler)object).getContentHandlerFactory());",
                "+        } else if (object instanceof ContentHandler",
                "+                && ! (object instanceof AbstractRecursiveParserWrapperHandler)) {",
                "             resources.add(new ContentHandlerResource((ContentHandler) object));",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index 77cd23fc1..94e8d3592 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -158,2 +158,41 @@ public class ForkParser extends AbstractParser {",
                "+    /**",
                "+     *",
                "+     * This sends the objects to the server for parsing, and the server via",
                "+     * the proxies acts on the handler as if it were updating it directly.",
                "+     * <p>",
                "+     * If using a RecursiveParserWrapper, there are two options:",
                "+     * </p>",
                "+     * <p>",
                "+     *     <ol>",
                "+     *         <li>Send in a class that extends {@link org.apache.tika.sax.RecursiveParserWrapperHandler},",
                "+     *              and the server will proxy back the data as best it can[0].</li>",
                "+     *         <li>Send in a class that extends {@link AbstractRecursiveParserWrapperHandler}",
                "+     *              and the server will act on the class but not proxy back the data.  This",
                "+     *              can be used, for example, if all you want to do is write to disc, extend",
                "+     *              {@link AbstractRecursiveParserWrapperHandler} to write to disc when",
                "+     *              {@link AbstractRecursiveParserWrapperHandler#endDocument(ContentHandler, Metadata)}",
                "+     *              is called, and the server will take care of the writing via the handler.</li>",
                "+     *     </ol>",
                "+     * </p>",
                "+     * <p>",
                "+     *     <b>NOTE:</b>[0] &quot;the server will proxy back the data as best it can&quot;.  If the handler",
                "+     *     implements Serializable and is actually serializable, the server will send it and the",
                "+     *     {@link Metadata} back upon {@link org.apache.tika.sax.RecursiveParserWrapperHandler#endEmbeddedDocument(ContentHandler, Metadata)}",
                "+     *     or {@link org.apache.tika.sax.RecursiveParserWrapperHandler#endEmbeddedDocument(ContentHandler, Metadata)}.",
                "+     *     If the handler does not implement {@link java.io.Serializable} or if there is a",
                "+     *     {@link java.io.NotSerializableException} thrown during serialization, the server will",
                "+     *     call {@link ContentHandler#toString()} on the ContentHandler and set that value with the",
                "+     *     {@link org.apache.tika.sax.RecursiveParserWrapperHandler#TIKA_CONTENT} key and then",
                "+     *     serialize and proxy that data back.",
                "+     * </p>",
                "+     *",
                "+     * @param stream the document stream (input)",
                "+     * @param handler handler for the XHTML SAX events (output)",
                "+     * @param metadata document metadata (input and output)",
                "+     * @param context parse context",
                "+     * @throws IOException",
                "+     * @throws SAXException",
                "+     * @throws TikaException",
                "+     */",
                "     public void parse(",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "index 591845738..7e89bc17b 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "@@ -29,3 +29,5 @@ import java.io.DataOutputStream;",
                " import java.io.IOException;",
                "+import java.io.NotSerializableException;",
                " import java.io.ObjectOutputStream;",
                "+import java.io.Serializable;",
                "@@ -39,7 +41,9 @@ import java.io.ObjectOutputStream;",
                "  */",
                "-class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrapperHandler implements ForkProxy {",
                "+class RecursiveMetadataContentHandlerProxy extends RecursiveParserWrapperHandler implements ForkProxy {",
                "-    public static final int EMBEDDED_DOCUMENT         =  1;",
                "-    public static final int MAIN_DOCUMENT           =  2;",
                "-    public static final int COMPLETE   =  3;",
                "+    public static final byte EMBEDDED_DOCUMENT         =  1;",
                "+    public static final byte MAIN_DOCUMENT           =  2;",
                "+    public static final byte HANDLER_AND_METADATA = 3;",
                "+    public static final byte METADATA_ONLY = 4;",
                "+    public static final byte COMPLETE   =  5;",
                "@@ -63,23 +67,6 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "     public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "-        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "-",
                "-        try {",
                "-            output.write(ForkServer.RESOURCE);",
                "-            output.writeByte(resource);",
                "-            output.writeByte(EMBEDDED_DOCUMENT);",
                "-            byte[] serialized = serialize(metadata);",
                "-            output.writeInt(serialized.length);",
                "-            output.write(serialized);",
                "-            output.writeByte(COMPLETE);",
                "-        } catch (IOException e) {",
                "-            throw new SAXException(e);",
                "-        } finally {",
                "-            doneSending();",
                "-        }",
                "+        proxyBackToClient(EMBEDDED_DOCUMENT, contentHandler, metadata);",
                "     }",
                "-",
                "     @Override",
                "     public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "-",
                "-        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "         if (hasHitMaximumEmbeddedResources()) {",
                "@@ -87,2 +74,7 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "         }",
                "+        proxyBackToClient(MAIN_DOCUMENT, contentHandler, metadata);",
                "+    }",
                "+",
                "+    private void proxyBackToClient(int embeddedOrMainDocument,",
                "+                                   ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "         try {",
                "@@ -90,7 +82,27 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "             output.writeByte(resource);",
                "-            output.writeByte(MAIN_DOCUMENT);",
                "-",
                "-            byte[] serialized = serialize(metadata);",
                "-            output.writeInt(serialized.length);",
                "-            output.write(serialized);",
                "+            output.writeByte(embeddedOrMainDocument);",
                "+            boolean success = false;",
                "+            if (contentHandler instanceof Serializable) {",
                "+                byte[] bytes = null;",
                "+                try {",
                "+                    bytes = serialize(contentHandler);",
                "+                    success = true;",
                "+                } catch (NotSerializableException e) {",
                "+                    //object lied",
                "+                }",
                "+                if (success) {",
                "+",
                "+                    output.write(HANDLER_AND_METADATA);",
                "+                    sendBytes(bytes);",
                "+                    send(metadata);",
                "+                    output.writeByte(COMPLETE);",
                "+                    return;",
                "+                }",
                "+            }",
                "+            //if contenthandler is not allegedly or actually Serializable",
                "+            //fall back to adding contentHandler.toString() to the metadata object",
                "+            //and send that.",
                "+            metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "+            output.writeByte(METADATA_ONLY);",
                "+            send(metadata);",
                "             output.writeByte(COMPLETE);",
                "@@ -103,2 +115,13 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "+    private void send(Object object) throws IOException {",
                "+        byte[] bytes = serialize(object);",
                "+        sendBytes(bytes);",
                "+    }",
                "+",
                "+    private void sendBytes(byte[] bytes) throws IOException {",
                "+        output.writeInt(bytes.length);",
                "+        output.write(bytes);",
                "+        output.flush();",
                "+    }",
                "+",
                "     private byte[] serialize(Object object) throws IOException {",
                "@@ -113,2 +136,3 @@ class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrappe",
                "         return bos.toByteArray();",
                "+",
                "     }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "index 57976f2b4..29aefb477 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "@@ -20,2 +20,3 @@ import org.apache.tika.metadata.Metadata;",
                " import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                " import org.xml.sax.ContentHandler;",
                "@@ -29,2 +30,3 @@ import java.io.IOException;",
                " import java.io.ObjectInputStream;",
                "+import java.util.Arrays;",
                "@@ -35,3 +37,3 @@ class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "-    public RecursiveMetadataContentHandlerResource(AbstractRecursiveParserWrapperHandler handler) {",
                "+    public RecursiveMetadataContentHandlerResource(RecursiveParserWrapperHandler handler) {",
                "         this.handler = handler;",
                "@@ -51,54 +53,30 @@ class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "             throws IOException, SAXException {",
                "-        int type = input.readByte();",
                "-        if (type == RecursiveMetadataContentHandlerProxy.EMBEDDED_DOCUMENT) {",
                "-            Metadata metadata = null;",
                "-            try {",
                "-                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "-            } catch (ClassNotFoundException e) {",
                "-                throw new IOException(e);",
                "-            }",
                "-            byte isComplete = input.readByte();",
                "-            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "-                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "-            }",
                "-            handler.endEmbeddedDocument(DEFAULT_HANDLER, metadata);",
                "-        } else if (type == RecursiveMetadataContentHandlerProxy.MAIN_DOCUMENT) {",
                "-            Metadata metadata = null;",
                "-            try {",
                "-                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "-            } catch (ClassNotFoundException e) {",
                "-                throw new IOException(e);",
                "-            }",
                "-            byte isComplete = input.readByte();",
                "-            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "-                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "-            }",
                "-            handler.endDocument(DEFAULT_HANDLER, metadata);",
                "-        } else {",
                "-            throw new IllegalArgumentException(\"I regret that I don't understand: \"+type);",
                "-        }",
                "-    }",
                "+        byte embeddedOrMain = input.readByte();",
                "+        byte handlerAndMetadataOrMetadataOnly = input.readByte();",
                "-    private Metadata deserializeMetadata(DataInputStream dataInputStream) throws IOException {",
                "-        int length = dataInputStream.readInt();",
                "-        byte[] data = new byte[length];",
                "-        dataInputStream.readFully(data);",
                "+        ContentHandler localContentHandler = DEFAULT_HANDLER;",
                "+        if (handlerAndMetadataOrMetadataOnly == RecursiveMetadataContentHandlerProxy.HANDLER_AND_METADATA) {",
                "+            localContentHandler = (ContentHandler)readObject(input);",
                "+        } else if (handlerAndMetadataOrMetadataOnly != RecursiveMetadataContentHandlerProxy.METADATA_ONLY) {",
                "+            throw new IllegalArgumentException(\"Expected HANDLER_AND_METADATA or METADATA_ONLY, but got:\"",
                "+                    +handlerAndMetadataOrMetadataOnly);",
                "+        }",
                "-        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "-        Object obj = null;",
                "-        try {",
                "-            obj = ois.readObject();",
                "-        } catch (ClassNotFoundException e) {",
                "-            throw new IOException(e);",
                "+        Metadata metadata = (Metadata) readObject(input);",
                "+        if (embeddedOrMain == RecursiveMetadataContentHandlerProxy.EMBEDDED_DOCUMENT) {",
                "+            handler.endEmbeddedDocument(localContentHandler, metadata);",
                "+        } else if (embeddedOrMain == RecursiveMetadataContentHandlerProxy.MAIN_DOCUMENT) {",
                "+            handler.endDocument(localContentHandler, metadata);",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"Expected either 0x01 or 0x02, but got: \"+embeddedOrMain);",
                "+        }",
                "+        byte isComplete = input.readByte();",
                "+        if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "+            throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "         }",
                "-        return (Metadata) obj;",
                "     }",
                "-    private ContentHandler deserializeContentHandler(DataInputStream dataInputStream) throws IOException {",
                "-        int length = dataInputStream.readInt();",
                "-        byte[] data = new byte[length];",
                "-        dataInputStream.readFully(data);",
                "-        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "-        Object obj = null;",
                "+",
                "+    private Object readObject(DataInputStream inputStream) throws IOException {",
                "         try {",
                "-            obj = ois.readObject();",
                "+            return ForkObjectInputStream.readObject(inputStream, this.getClass().getClassLoader());",
                "         } catch (ClassNotFoundException e) {",
                "@@ -106,3 +84,3 @@ class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "         }",
                "-        return (ContentHandler)obj;",
                "+",
                "     }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "index ee60f2942..be0bf0a5e 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "@@ -218,2 +218,3 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "         long started = System.currentTimeMillis();",
                "+        parserState.recursiveParserWrapperHandler.startDocument();",
                "         try {",
                "@@ -230,2 +231,4 @@ public class RecursiveParserWrapper extends ParserDecorator {",
                "             parserState.recursiveParserWrapperHandler.endDocument(localHandler, metadata);",
                "+            parserState.recursiveParserWrapperHandler.endDocument();",
                "+",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "index 2444a9c1b..5faf3a409 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "@@ -41,3 +41,3 @@ public class RecursiveParserWrapperHandler extends AbstractRecursiveParserWrappe",
                "-    private final List<Metadata> metadataList = new LinkedList<>();",
                "+    protected final List<Metadata> metadataList = new LinkedList<>();",
                "@@ -106,3 +106,3 @@ public class RecursiveParserWrapperHandler extends AbstractRecursiveParserWrappe",
                "-    private void addContent(ContentHandler handler, Metadata metadata) {",
                "+    void addContent(ContentHandler handler, Metadata metadata) {"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java",
                "tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2655": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2655",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cdca0f7263e3fed04b59877d77f8b6bd9bc3e6af",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527034073,
            "hunks": 124,
            "message": "TIKA-2645 -- make pool methods private for better encapsulation and add a pool for DOM building",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "index 63c0edd6e..20a0be548 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "@@ -26,2 +26,3 @@ import org.apache.tika.exception.TikaException;",
                " import org.apache.tika.io.CloseShieldInputStream;",
                "+import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.sax.OfflineContentHandler;",
                "@@ -39,2 +40,3 @@ import org.xml.sax.helpers.DefaultHandler;",
                " public class XmlRootExtractor {",
                "+    private static final ParseContext EMPTY_CONTEXT = new ParseContext();",
                "@@ -49,11 +51,7 @@ public class XmlRootExtractor {",
                "         ExtractorHandler handler = new ExtractorHandler();",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = XMLReaderUtils.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "-                    new OfflineContentHandler(handler));",
                "+                    new OfflineContentHandler(handler), EMPTY_CONTEXT);",
                "         } catch (Exception ignore) {",
                "-        } finally {",
                "-                XMLReaderUtils.releaseParser(parser);",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "index b9953b001..ad7bd8078 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "@@ -321,3 +321,3 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "      */",
                "-    public static SAXParser acquireSAXParser()",
                "+    private static SAXParser acquireSAXParser()",
                "             throws TikaException {",
                "@@ -345,3 +345,3 @@ public class MimeTypesReader extends DefaultHandler implements MimeTypesReaderMe",
                "      */",
                "-    public static void releaseParser(SAXParser parser) {",
                "+    private static void releaseParser(SAXParser parser) {",
                "         try {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java b/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "index 78b72467f..65b5d537e 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "@@ -39,2 +39,3 @@ import org.apache.tika.sax.TaggedContentHandler;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -128,8 +129,6 @@ public class NetworkParser extends AbstractParser {",
                "                     new OfflineContentHandler(handler));",
                "-            SAXParser parser = null;",
                "             try {",
                "-                parser = context.acquireSAXParser();",
                "-                parser.parse(",
                "+                XMLReaderUtils.parseSAX(",
                "                         stream, new TeeContentHandler(",
                "-                                tagged, new MetaHandler(metadata)));",
                "+                                tagged, new MetaHandler(metadata)), context);",
                "             } catch (SAXException e) {",
                "@@ -142,3 +141,2 @@ public class NetworkParser extends AbstractParser {",
                "             } finally {",
                "-                context.releaseParser(parser);",
                "                 try {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "index 45d0c8f53..f5c3169bf 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "@@ -25,10 +25,5 @@ import javax.xml.parsers.SAXParserFactory;",
                " import javax.xml.stream.XMLInputFactory;",
                "-import javax.xml.stream.XMLResolver;",
                "-import javax.xml.stream.XMLStreamException;",
                " import javax.xml.transform.Transformer;",
                "-import javax.xml.transform.TransformerConfigurationException;",
                "-import javax.xml.transform.TransformerFactory;",
                "-import javax.xml.transform.TransformerFactoryConfigurationError;",
                "-import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.io.Serializable;",
                "@@ -42,2 +37,3 @@ import org.xml.sax.SAXNotSupportedException;",
                " import org.xml.sax.XMLReader;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "@@ -123,3 +119,5 @@ public class ParseContext implements Serializable {",
                "      * is not explicitly specified, then one is created using the specified",
                "-     * or the default SAX parser factory.",
                "+     * or the default SAX parser factory. Consider using",
                "+     * {@link XMLReaderUtils#parseSAX(InputStream, DefaultHandler, ParseContext)}",
                "+     * for more efficient reuse of SAXParsers.",
                "      *",
                "@@ -139,35 +137,2 @@ public class ParseContext implements Serializable {",
                "-    /**",
                "-     * Returns the SAX parser specified in this parsing context. If a parser",
                "-     * is not explicitly specified, then one is acquired from the pool.",
                "-     * <p>",
                "-     * Make sure to {@link #releaseParser(SAXParser)} as the",
                "-     * first call in a <code>finally</code> block every time",
                "-     * you call this!",
                "-     * </p>",
                "-     *",
                "-     * @return SAXParser",
                "-     * @throws TikaException",
                "-     */",
                "-    public SAXParser acquireSAXParser() throws TikaException {",
                "-        if (context.containsKey(SAXParser.class)) {",
                "-            return get(SAXParser.class);",
                "-        }",
                "-        return XMLReaderUtils.acquireSAXParser();",
                "-    }",
                "-",
                "-    /**",
                "-     * If the context already has a SAXParser, this is a no-op.",
                "-     * Otherwise, this returns the parser to the pool",
                "-     *",
                "-     * @param parser",
                "-     * @throws TikaException",
                "-     */",
                "-    public void releaseParser(SAXParser parser) {",
                "-        if (context.containsKey(SAXParser.class)) {",
                "-            return;",
                "-        }",
                "-        XMLReaderUtils.releaseParser(parser);",
                "-    }",
                "-",
                "     /**",
                "@@ -230,2 +195,4 @@ public class ParseContext implements Serializable {",
                "      * and it sets the ErrorHandler to <code>null</code>.",
                "+     * Consider using {@link XMLReaderUtils#buildDOM(InputStream, ParseContext)}",
                "+     * instead for more efficient reuse of document builders.",
                "      *",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "index c48a07850..10c22745b 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "@@ -20,2 +20,4 @@ package org.apache.tika.utils;",
                " import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParseContext;",
                "+import org.w3c.dom.Document;",
                " import org.xml.sax.EntityResolver;",
                "@@ -26,2 +28,3 @@ import org.xml.sax.SAXNotSupportedException;",
                " import org.xml.sax.XMLReader;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "@@ -41,2 +44,3 @@ import javax.xml.transform.TransformerFactoryConfigurationError;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.io.Serializable;",
                "@@ -68,5 +72,8 @@ public class XMLReaderUtils implements Serializable {",
                "-    private static final ReentrantReadWriteLock READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "+    //TODO: figure out if the rw lock is any better than a simple lock",
                "+    private static final ReentrantReadWriteLock SAX_READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "+    private static final ReentrantReadWriteLock DOM_READ_WRITE_LOCK = new ReentrantReadWriteLock();",
                "     private static ArrayBlockingQueue<SAXParser> SAX_PARSERS = new ArrayBlockingQueue<>(POOL_SIZE);",
                "+    private static ArrayBlockingQueue<DocumentBuilder> DOM_BUILDERS = new ArrayBlockingQueue<>(POOL_SIZE);",
                "@@ -76,3 +83,3 @@ public class XMLReaderUtils implements Serializable {",
                "         } catch (TikaException e) {",
                "-            throw new RuntimeException(\"problem initializing SAXParser pool\", e);",
                "+            throw new RuntimeException(\"problem initializing SAXParser and DOMBuilder pools\", e);",
                "         }",
                "@@ -281,4 +288,118 @@ public class XMLReaderUtils implements Serializable {",
                "     /**",
                "-     * Acquire a SAXParser from the pool; create one if it",
                "-     * doesn't exist.  Make sure to {@link #releaseParser(SAXParser)} in",
                "+     * This checks context for a user specified {@link DocumentBuilder}.",
                "+     * If one is not found, this reuses a DocumentBuilder from the pool.",
                "+     *",
                "+     * @since Apache Tika 1.19",
                "+     * @param is InputStream to parse",
                "+     * @param context context to use",
                "+     * @return a document",
                "+     * @throws TikaException",
                "+     * @throws IOException",
                "+     * @throws SAXException",
                "+     */",
                "+    public static Document buildDOM(InputStream is, ParseContext context) throws TikaException, IOException, SAXException {",
                "+        DocumentBuilder builderFromContext = context.get(DocumentBuilder.class);",
                "+        DocumentBuilder builder = (builderFromContext == null) ? acquireDOMBuilder() : builderFromContext;",
                "+",
                "+        try {",
                "+            return builder.parse(is);",
                "+        } finally {",
                "+            if (builderFromContext == null) {",
                "+                releaseDOMBuilder(builder);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * This checks context for a user specified {@link SAXParser}.",
                "+     * If one is not found, this reuses a SAXParser from the pool.",
                "+     *",
                "+     * @since Apache Tika 1.19",
                "+     * @param is InputStream to parse",
                "+     * @param contentHandler handler to use",
                "+     * @param context context to use",
                "+     * @return",
                "+     * @throws TikaException",
                "+     * @throws IOException",
                "+     * @throws SAXException",
                "+     */",
                "+    public static void parseSAX(InputStream is, DefaultHandler contentHandler, ParseContext context)",
                "+            throws TikaException, IOException, SAXException {",
                "+        SAXParser contextParser = context.get(SAXParser.class);",
                "+        SAXParser parser = (contextParser == null) ? acquireSAXParser() : contextParser;",
                "+        try {",
                "+            parser.parse(is, contentHandler);",
                "+        } finally {",
                "+            if (contextParser == null) {",
                "+                releaseParser(parser);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Acquire a SAXParser from the pool.  Make sure to",
                "+     * {@link #releaseParser(SAXParser)} in",
                "+     * a <code>finally</code> block every time you call this.",
                "+     *",
                "+     * @return a SAXParser",
                "+     * @throws TikaException",
                "+     */",
                "+    private static DocumentBuilder acquireDOMBuilder()",
                "+            throws TikaException {",
                "+        int waiting = 0;",
                "+        while (true) {",
                "+            DocumentBuilder builder = null;",
                "+            try {",
                "+                DOM_READ_WRITE_LOCK.readLock().lock();",
                "+                builder = DOM_BUILDERS.poll(100, TimeUnit.MILLISECONDS);",
                "+            } catch (InterruptedException e) {",
                "+                throw new TikaException(\"interrupted while waiting for DOMBuilder\", e);",
                "+            } finally {",
                "+                DOM_READ_WRITE_LOCK.readLock().unlock();",
                "+            }",
                "+            if (builder != null) {",
                "+                return builder;",
                "+            }",
                "+            waiting++;",
                "+            if (waiting > 3000) {",
                "+                //freshen the pool.  Something went very wrong...",
                "+                setPoolSize(POOL_SIZE);",
                "+                //better to get an exception than have permahang by a bug in one of our parsers",
                "+                throw new TikaException(\"Waited more than 5 minutes for a DocumentBuilder; \" +",
                "+                        \"This could indicate that a parser has not correctly released its DocumentBuilder. \" +",
                "+                        \"Please report this to the Tika team: dev@tika.apache.org\");",
                "+",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Return parser to the pool for reuse.",
                "+     *",
                "+     * @param builder builder to return",
                "+     */",
                "+    private static void releaseDOMBuilder(DocumentBuilder builder) {",
                "+        try {",
                "+            builder.reset();",
                "+        } catch (UnsupportedOperationException e) {",
                "+            //ignore",
                "+        }",
                "+        try {",
                "+            DOM_READ_WRITE_LOCK.readLock().lock();",
                "+            //if there are extra parsers (e.g. after a reset of the pool to a smaller size),",
                "+            // this parser will not be added and will then be gc'd",
                "+            boolean success = DOM_BUILDERS.offer(builder);",
                "+            if (! success) {",
                "+                LOG.warning(\"DocumentBuilder not taken back into pool.  If you haven't resized the pool, this could \" +",
                "+                        \"be a sign that there are more calls to 'acquire' than to 'release'\");",
                "+            }",
                "+        } finally {",
                "+            DOM_READ_WRITE_LOCK.readLock().unlock();",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Acquire a SAXParser from the pool.  Make sure to",
                "+     * {@link #releaseParser(SAXParser)} in",
                "      * a <code>finally</code> block every time you call this.",
                "@@ -288,3 +409,3 @@ public class XMLReaderUtils implements Serializable {",
                "      */",
                "-    public static SAXParser acquireSAXParser()",
                "+    private static SAXParser acquireSAXParser()",
                "             throws TikaException {",
                "@@ -294,3 +415,3 @@ public class XMLReaderUtils implements Serializable {",
                "             try {",
                "-                READ_WRITE_LOCK.readLock().lock();",
                "+                SAX_READ_WRITE_LOCK.readLock().lock();",
                "                 parser = SAX_PARSERS.poll(100, TimeUnit.MILLISECONDS);",
                "@@ -299,3 +420,3 @@ public class XMLReaderUtils implements Serializable {",
                "             } finally {",
                "-                READ_WRITE_LOCK.readLock().unlock();",
                "+                SAX_READ_WRITE_LOCK.readLock().unlock();",
                "             }",
                "@@ -322,3 +443,3 @@ public class XMLReaderUtils implements Serializable {",
                "      */",
                "-    public static void releaseParser(SAXParser parser) {",
                "+    private static void releaseParser(SAXParser parser) {",
                "         try {",
                "@@ -329,3 +450,3 @@ public class XMLReaderUtils implements Serializable {",
                "         try {",
                "-            READ_WRITE_LOCK.readLock().lock();",
                "+            SAX_READ_WRITE_LOCK.readLock().lock();",
                "             //if there are extra parsers (e.g. after a reset of the pool to a smaller size),",
                "@@ -338,3 +459,3 @@ public class XMLReaderUtils implements Serializable {",
                "         } finally {",
                "-            READ_WRITE_LOCK.readLock().unlock();",
                "+            SAX_READ_WRITE_LOCK.readLock().unlock();",
                "         }",
                "@@ -345,2 +466,3 @@ public class XMLReaderUtils implements Serializable {",
                "      *",
                "+     * @since Apache Tika 1.19",
                "      * @param poolSize",
                "@@ -350,16 +472,30 @@ public class XMLReaderUtils implements Serializable {",
                "             //stop the world with a write lock.",
                "-            //parsers that are currently in use will be offered, but not",
                "-            //accepted and will be gc'd",
                "-            READ_WRITE_LOCK.writeLock().lock();",
                "-            if (SAX_PARSERS.size() == poolSize) {",
                "-                return;",
                "+            //parsers that are currently in use will be offered later (once the lock is released),",
                "+            //but not accepted and will be gc'd.  We have to do this locking and",
                "+            //the read locking in case one thread resizes the pool when the",
                "+            //parsers have already started.  We could have an NPE on SAX_PARSERS",
                "+            //if we didn't lock.",
                "+            SAX_READ_WRITE_LOCK.writeLock().lock();",
                "+            if (SAX_PARSERS.size() != poolSize) {",
                "+                SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);",
                "+                for (int i = 0; i < poolSize; i++) {",
                "+                    SAX_PARSERS.offer(getSAXParser());",
                "+                }",
                "             }",
                "-            SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);",
                "-            for (int i = 0; i < poolSize; i++) {",
                "-                SAX_PARSERS.offer(getSAXParser());",
                "+        } finally {",
                "+            SAX_READ_WRITE_LOCK.writeLock().unlock();",
                "+        }",
                "+        try {",
                "+            DOM_READ_WRITE_LOCK.writeLock().lock();",
                "+",
                "+            if (DOM_BUILDERS.size() != poolSize) {",
                "+                DOM_BUILDERS = new ArrayBlockingQueue<>(poolSize);",
                "+                for (int i = 0; i < poolSize; i++) {",
                "+                    DOM_BUILDERS.offer(getDocumentBuilder());",
                "+                }",
                "             }",
                "-            POOL_SIZE = poolSize;",
                "         } finally {",
                "-            READ_WRITE_LOCK.writeLock().unlock();",
                "+            DOM_READ_WRITE_LOCK.writeLock().unlock();",
                "         }",
                "+        POOL_SIZE = poolSize;",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "index 33dad3c3a..00b1ed102 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "@@ -35,2 +35,3 @@ import org.apache.tika.sax.TaggedContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -65,9 +66,7 @@ public class DIFParser extends AbstractParser {",
                " \t\tTaggedContentHandler tagged = new TaggedContentHandler(handler);",
                "-\t\tSAXParser parser = null;",
                " \t\ttry {",
                "-\t\t\tparser = context.acquireSAXParser();",
                "-\t\t\tparser.parse(",
                "+\t\t\tXMLReaderUtils.parseSAX(",
                " \t\t\t\t\tnew CloseShieldInputStream(stream),",
                " \t\t\t\t\tnew OfflineContentHandler(new EmbeddedContentHandler(",
                "-\t\t\t\t\t\t\tgetContentHandler(tagged, metadata, context))));",
                "+\t\t\t\t\t\t\tgetContentHandler(tagged, metadata, context))), context);",
                " \t\t} catch (SAXException e) {",
                "@@ -76,5 +75,2 @@ public class DIFParser extends AbstractParser {",
                " \t\t} finally {",
                "-\t\t\t//make sure to release the parser before doing",
                "-\t\t\t//something that could cause an exception!",
                "-\t\t\tcontext.releaseParser(parser);",
                " \t\t\txhtml.endElement(\"p\");",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "index 44d5f7211..ce188fdff 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "@@ -18,8 +18,2 @@ package org.apache.tika.parser.epub;",
                "-import javax.xml.parsers.SAXParser;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.util.Collections;",
                "-import java.util.Set;",
                "-",
                " import org.apache.commons.io.input.CloseShieldInputStream;",
                "@@ -31,2 +25,3 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.sax.OfflineContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -34,2 +29,7 @@ import org.xml.sax.SAXException;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.Set;",
                "+",
                " /**",
                "@@ -50,12 +50,5 @@ public class EpubContentParser extends AbstractParser {",
                "-        SAXParser parser = null;",
                "-        try {",
                "-            parser = context.acquireSAXParser();",
                "-",
                "-            parser.parse(",
                "-                    new CloseShieldInputStream(stream),",
                "-                    new OfflineContentHandler(handler));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "-        }",
                "+        XMLReaderUtils.parseSAX(",
                "+                new CloseShieldInputStream(stream),",
                "+                new OfflineContentHandler(handler), context);",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "index d2ee0c63e..eab3bd54a 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "@@ -73,3 +73,4 @@ import org.xml.sax.SAXException;",
                " public class ImageMetadataExtractor {",
                "-",
                "+    //TODO: add this to the signatures from the actual parse",
                "+    private static final ParseContext EMPTY_PARSE_CONTEXT = new ParseContext();",
                "     private static final String GEO_DECIMAL_FORMAT_STRING = \"#.######\"; // 6 dp seems to be reasonable",
                "@@ -186,3 +187,3 @@ public class ImageMetadataExtractor {",
                "         ) {",
                "-            Document dom = XMLReaderUtils.getDocumentBuilder().parse(decoded);",
                "+            Document dom = XMLReaderUtils.buildDOM(decoded, EMPTY_PARSE_CONTEXT);",
                "             if (dom != null) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "index e847615af..8b16fffca 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "@@ -45,3 +45,4 @@ public class JempboxExtractor {",
                "-",
                "+    //TODO: change signature to require parsecontext from parse",
                "+    private static final ParseContext EMPTY_PARSE_CONTEXT = new ParseContext();",
                "     private static volatile int MAX_EVENT_HISTORY_IN_XMPMM = 1024;",
                "@@ -69,3 +70,3 @@ public class JempboxExtractor {",
                "         ) {",
                "-            Document dom = XMLReaderUtils.getDocumentBuilder().parse(decoded);",
                "+            Document dom = XMLReaderUtils.buildDOM(decoded, EMPTY_PARSE_CONTEXT);",
                "             if (dom != null) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "index 17d30e99c..5d8f01a97 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "@@ -18,13 +18,2 @@ package org.apache.tika.parser.iwork;",
                "-import java.io.BufferedInputStream;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.util.Arrays;",
                "-import java.util.Collections;",
                "-import java.util.HashSet;",
                "-import java.util.Set;",
                "-",
                "-import javax.xml.namespace.QName;",
                "-import javax.xml.parsers.SAXParser;",
                "-",
                " import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;",
                "@@ -42,2 +31,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -45,2 +35,11 @@ import org.xml.sax.SAXException;",
                "+import javax.xml.namespace.QName;",
                "+import java.io.BufferedInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+",
                " /**",
                "@@ -205,15 +204,9 @@ public class IWorkPackageParser extends AbstractParser {",
                "                xhtml.startDocument();",
                "-               if (contentHandler != null) {",
                "-                   SAXParser parser = null;",
                "-                   try {",
                "-                       parser = context.acquireSAXParser();",
                "-",
                "-                       parser.parse(",
                "-                               new CloseShieldInputStream(entryStream),",
                "-                               new OfflineContentHandler(contentHandler)",
                "-                       );",
                "-                   } finally {",
                "-                       context.releaseParser(parser);",
                "-                   }",
                "-               }",
                "+                if (contentHandler != null) {",
                "+                    XMLReaderUtils.parseSAX(",
                "+                            new CloseShieldInputStream(entryStream),",
                "+                            new OfflineContentHandler(contentHandler),",
                "+                            context",
                "+                    );",
                "+                }",
                "                xhtml.endDocument();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "index 6438bdd5d..b79ec9390 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "@@ -28,2 +28,3 @@ import org.apache.tika.metadata.Metadata;",
                " import org.apache.tika.parser.ParseContext;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.w3c.dom.Document;",
                "@@ -42,5 +43,5 @@ public class TEIDOMParser {",
                "-        Document root = parseContext.getDocumentBuilder().parse(",
                "-                new ByteArrayInputStream(source.getBytes(StandardCharsets.UTF_8))",
                "-        );",
                "+        Document root = XMLReaderUtils.buildDOM(",
                "+                new ByteArrayInputStream(source.getBytes(StandardCharsets.UTF_8)), parseContext);",
                "+",
                "         Metadata metadata = new Metadata();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "index 2453cb973..c0727233a 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "@@ -65,2 +65,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.apache.xmlbeans.XmlException;",
                "@@ -519,7 +520,5 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {",
                "                     PackagePart relatedPartPart = parentPart.getRelatedPart(relatedPartPackageRelationship);",
                "-                    SAXParser parser = null;",
                "                     try (InputStream stream = relatedPartPart.getInputStream()) {",
                "-                        parser = context.acquireSAXParser();",
                "-                        parser.parse(stream,",
                "-                                new OfflineContentHandler(new EmbeddedContentHandler(contentHandler)));",
                "+                        XMLReaderUtils.parseSAX(stream,",
                "+                                new OfflineContentHandler(new EmbeddedContentHandler(contentHandler)), context);",
                "@@ -528,6 +527,3 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {",
                "                                 ExceptionUtils.getStackTrace(e));",
                "-                    } finally {",
                "-                        context.releaseParser(parser);",
                "                     }",
                "-",
                "                 } catch (InvalidFormatException e) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "index 46cfc9831..10ff76e12 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "@@ -46,2 +46,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -162,8 +163,7 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "             }",
                "-            SAXParser parser = null;",
                "             try (InputStream stream = commentAuthorsPart.getInputStream()) {",
                "-                parser = context.acquireSAXParser();",
                "-                parser.parse(",
                "+                XMLReaderUtils.parseSAX(",
                "                         new CloseShieldInputStream(stream),",
                "-                        new OfflineContentHandler(new XSLFCommentAuthorHandler()));",
                "+                        new OfflineContentHandler(new XSLFCommentAuthorHandler()),",
                "+                        context);",
                "@@ -172,4 +172,2 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "                         ExceptionUtils.getStackTrace(e));",
                "-            } finally {",
                "-                context.releaseParser(parser);",
                "             }",
                "@@ -184,6 +182,4 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "         xhtml.startElement(\"div\", \"class\", \"slide-content\");",
                "-        SAXParser parser = null;",
                "         try (InputStream stream = slidePart.getInputStream()) {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -191,9 +187,8 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {",
                "                             new OOXMLWordAndPowerPointTextHandler(",
                "-                                    new OOXMLTikaBodyPartHandler(xhtml), linkedRelationships))));",
                "+                                    new OOXMLTikaBodyPartHandler(xhtml), linkedRelationships))),",
                "+                    context);",
                "-        } catch (TikaException e) {",
                "+        } catch (TikaException|IOException e) {",
                "             metadata.add(TikaCoreProperties.TIKA_META_EXCEPTION_WARNING,",
                "                     ExceptionUtils.getStackTrace(e));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "         }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "index 82919d328..0641a81ba 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "@@ -46,2 +46,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.apache.xmlbeans.XmlException;",
                "@@ -191,6 +192,4 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {",
                "         Map<String, String> linkedRelationships = loadLinkedRelationships(packagePart, true, metadata);",
                "-        SAXParser parser = null;",
                "         try (InputStream stream = packagePart.getInputStream()) {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "@@ -199,8 +198,7 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {",
                "                                     new OOXMLTikaBodyPartHandler(xhtml, styles, listManager,",
                "-                                            config), linkedRelationships, config.getIncludeShapeBasedContent(), config.getConcatenatePhoneticRuns()))));",
                "-        } catch (TikaException e) {",
                "+                                            config), linkedRelationships, config.getIncludeShapeBasedContent(), config.getConcatenatePhoneticRuns()))),",
                "+                    context);",
                "+        } catch (TikaException|IOException e) {",
                "             metadata.add(TikaCoreProperties.TIKA_META_EXCEPTION_WARNING,",
                "                     ExceptionUtils.getStackTrace(e));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "         }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "index 06f8cbf44..bf6505b1e 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "@@ -62,2 +62,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.apache.xmlbeans.XmlException;",
                "@@ -197,10 +198,6 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "         //consider adding this back to POI",
                "-        SAXParser parser = null;",
                "         try (InputStream wbData = xssfReader.getWorkbookData()) {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            parser.parse(wbData, new OfflineContentHandler(new AbsPathExtractorHandler()));",
                "+            XMLReaderUtils.parseSAX(wbData, new OfflineContentHandler(new AbsPathExtractorHandler()), parseContext);",
                "         } catch (InvalidFormatException|TikaException e) {",
                "             //swallow",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "         }",
                "@@ -339,8 +336,4 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             throws IOException, SAXException {",
                "-        InputSource sheetSource = new InputSource(sheetInputStream);",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            XMLReader sheetParser = parser.getXMLReader();",
                "             XSSFSheetInterestingPartsCapturer handler =",
                "@@ -348,4 +341,3 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "                             styles, comments, strings, sheetContentsExtractor, formatter, false));",
                "-            sheetParser.setContentHandler(handler);",
                "-            sheetParser.parse(sheetSource);",
                "+            XMLReaderUtils.parseSAX(sheetInputStream, handler, parseContext);",
                "             sheetInputStream.close();",
                "@@ -357,4 +349,2 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             throw new RuntimeException(\"SAX parser appears to be broken - \" + e.getMessage());",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "         }",
                "@@ -500,3 +490,3 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "      */",
                "-    protected static class XSSFSheetInterestingPartsCapturer implements ContentHandler {",
                "+    protected static class XSSFSheetInterestingPartsCapturer extends DefaultHandler {",
                "         private ContentHandler delegate;",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "index 9ef992de5..50e1e9a6d 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "@@ -38,2 +38,3 @@ import org.apache.tika.sax.XHTMLContentHandler;",
                " import org.apache.tika.utils.ExceptionUtils;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -131,11 +132,8 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                                  XHTMLContentHandler xhtml) throws IOException, SAXException, TikaException {",
                "-        SAXParser parser = null;",
                "         try (InputStream stream = pkg.getPart(packageRelationship).getInputStream()) {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            new FixedDocSeqHandler(xhtml))));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "+                            new FixedDocSeqHandler(xhtml))),",
                "+                    context);",
                "         }",
                "@@ -185,9 +183,8 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "             if (pkg instanceof ZipPackage) {",
                "-                SAXParser parser = null;",
                "                 try (InputStream stream = getZipStream(zipPath, pkg)) {",
                "-                    parser = context.acquireSAXParser();",
                "-                    parser.parse(",
                "+                XMLReaderUtils.parseSAX(",
                "                             new CloseShieldInputStream(stream),",
                "                             new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                                    new PageContentPartHandler(relativeRoot, xhtml))));",
                "+                                    new PageContentPartHandler(relativeRoot, xhtml))),",
                "+                        context);",
                "@@ -195,4 +192,2 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     throw new SAXException(new TikaException(\"IOException trying to read: \" + docRef));",
                "-                } finally {",
                "-                    context.releaseParser(parser);",
                "                 }",
                "@@ -236,6 +231,4 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                     }",
                "-                    SAXParser parser = null;",
                "                     try (InputStream stream = getZipStream(pagePath, pkg)) {",
                "-                        parser = context.acquireSAXParser();",
                "-                        parser.parse(",
                "+                        XMLReaderUtils.parseSAX(",
                "                                 new CloseShieldInputStream(stream),",
                "@@ -243,3 +236,4 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                                         new XPSPageContentHandler(xhtml, embeddedImages)",
                "-                                )",
                "+                                ),",
                "+                                context",
                "                         );",
                "@@ -247,4 +241,2 @@ public class XPSExtractorDecorator extends AbstractOOXMLExtractor {",
                "                         throw new SAXException(e);",
                "-                    } finally {",
                "-                        context.releaseParser(parser);",
                "                     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "index 1b5e76bfc..1228d598a 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "@@ -29,2 +29,3 @@ import org.apache.tika.parser.microsoft.ooxml.OOXMLWordAndPowerPointTextHandler;",
                " import org.apache.tika.sax.OfflineContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -62,10 +63,4 @@ public class XWPFStylesShim {",
                "     private void onDocumentLoad(ParseContext parseContext, InputStream stream) throws TikaException, IOException, SAXException {",
                "-        SAXParser parser = null;",
                "-        try {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            parser.parse(stream,",
                "-                    new OfflineContentHandler(new StylesStripper()));",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "-        }",
                "+            XMLReaderUtils.parseSAX(stream,",
                "+                    new OfflineContentHandler(new StylesStripper()), parseContext);",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "index c517ba147..3ef99ca45 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "@@ -33,2 +33,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -59,19 +60,13 @@ public class Word2006MLParser extends AbstractOfficeParser {",
                "         xhtml.startDocument();",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            new Word2006MLDocHandler(xhtml, metadata, context))));",
                "+                            new Word2006MLDocHandler(xhtml, metadata, context))),",
                "+                    context);",
                "         } catch (SAXException e) {",
                "             throw new TikaException(\"XML parse error\", e);",
                "-        } finally {",
                "-            //make sure to release the parser before doing",
                "-            //something that could cause an exception!",
                "-            context.releaseParser(parser);",
                "-            xhtml.endDocument();",
                "         }",
                "+            xhtml.endDocument();",
                "     }",
                "-",
                " }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "index 226c7b77e..7210d8c21 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "@@ -37,2 +37,3 @@ import org.apache.tika.sax.TeeContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -98,9 +99,8 @@ public abstract class AbstractXML2003Parser extends AbstractParser {",
                "         TaggedContentHandler tagged = new TaggedContentHandler(xhtml);",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            getContentHandler(tagged, metadata, context))));",
                "+                            getContentHandler(tagged, metadata, context))),",
                "+                    context);",
                "         } catch (SAXException e) {",
                "@@ -109,5 +109,2 @@ public abstract class AbstractXML2003Parser extends AbstractParser {",
                "         } finally {",
                "-            //make sure to release the parser before doing",
                "-            //something that could cause an exception!",
                "-            context.releaseParser(parser);",
                "             xhtml.endDocument();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "index 7d5397638..d3238c23a 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "@@ -78,2 +78,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.slf4j.Logger;",
                "@@ -596,9 +597,3 @@ public class TesseractOCRParser extends AbstractParser implements Initializable",
                "         xhtml.startElement(\"div\", \"class\", \"ocr\");",
                "-        SAXParser parser = null;",
                "-        try {",
                "-            parser = parseContext.acquireSAXParser();",
                "-            parser.parse(is, new OfflineContentHandler(new HOCRPassThroughHandler(xhtml)));",
                "-        } finally {",
                "-            parseContext.releaseParser(parser);",
                "-        }",
                "+        XMLReaderUtils.parseSAX(is, new OfflineContentHandler(new HOCRPassThroughHandler(xhtml)), parseContext);",
                "         xhtml.endElement(\"div\");",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "index da71755f0..066f3e950 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "@@ -18,15 +18,2 @@ package org.apache.tika.parser.odf;",
                "-import static org.apache.tika.sax.XHTMLContentHandler.XHTML;",
                "-",
                "-import javax.xml.namespace.QName;",
                "-import javax.xml.parsers.SAXParser;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.util.BitSet;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "-import java.util.Stack;",
                "-",
                " import org.apache.commons.io.input.CloseShieldInputStream;",
                "@@ -41,2 +28,3 @@ import org.apache.tika.sax.OfflineContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.Attributes;",
                "@@ -47,2 +35,14 @@ import org.xml.sax.helpers.DefaultHandler;",
                "+import javax.xml.namespace.QName;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.BitSet;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.Stack;",
                "+",
                "+import static org.apache.tika.sax.XHTMLContentHandler.XHTML;",
                "+",
                " /**",
                "@@ -598,11 +598,7 @@ public class OpenDocumentContentParser extends AbstractParser {",
                "-        SAXParser parser = context.acquireSAXParser();",
                "-        try {",
                "-            parser.parse(",
                "-                    new CloseShieldInputStream(stream),",
                "-                    new OfflineContentHandler(",
                "-                            new NSNormalizerContentHandler(dh)));",
                "-        } finally {",
                "-            context.releaseParser(parser);",
                "-        }",
                "+        XMLReaderUtils.parseSAX(",
                "+                new CloseShieldInputStream(stream),",
                "+                new OfflineContentHandler(",
                "+                        new NSNormalizerContentHandler(dh)),",
                "+                context);",
                "     }",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "index 406bbd3a0..7108ab3ba 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "@@ -71,2 +71,3 @@ import org.apache.tika.parser.ocr.TesseractOCRParser;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.w3c.dom.Document;",
                "@@ -741,5 +742,3 @@ public class PDFParser extends AbstractParser implements Initializable {",
                "             }",
                "-            DocumentBuilder documentBuilder = context.getDocumentBuilder();",
                "-            documentBuilder.setErrorHandler((ErrorHandler)null);",
                "-            return documentBuilder.parse(is);",
                "+            return XMLReaderUtils.buildDOM(is, context);",
                "         } catch (IOException|SAXException|TikaException e) {",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "index f05e343bb..93c661483 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java",
                "@@ -36,2 +36,3 @@ import org.apache.tika.sax.TextContentHandler;",
                " import org.apache.tika.sax.XHTMLContentHandler;",
                "+import org.apache.tika.utils.XMLReaderUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -72,9 +73,7 @@ public class XMLParser extends AbstractParser {",
                "         TaggedContentHandler tagged = new TaggedContentHandler(handler);",
                "-        SAXParser parser = null;",
                "         try {",
                "-            parser = context.acquireSAXParser();",
                "-            parser.parse(",
                "+            XMLReaderUtils.parseSAX(",
                "                     new CloseShieldInputStream(stream),",
                "                     new OfflineContentHandler(new EmbeddedContentHandler(",
                "-                            getContentHandler(tagged, metadata, context))));",
                "+                            getContentHandler(tagged, metadata, context))), context);",
                "         } catch (SAXException e) {",
                "@@ -83,5 +82,2 @@ public class XMLParser extends AbstractParser {",
                "         } finally {",
                "-            //make sure to release the parser before doing",
                "-            //something that could cause an exception!",
                "-            context.releaseParser(parser);",
                "             xhtml.endElement(\"p\");"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java",
                "tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java",
                "tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParseContext.java",
                "tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/dif/DIFParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubContentParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xps/XPSExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFStylesShim.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/Word2006MLParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentContentParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/xml/XMLParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2645": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2645",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a1e42a0659ba33e90cb1bba0a0a10eeb97d4fac7",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526591734,
            "hunks": 3,
            "message": "TIKA-2479 Option to request missing rows where possible in Excel-like formats",
            "diff": [
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java",
                "index 34b865e67..5d34b2e0c 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java",
                "@@ -31,2 +31,3 @@ public class OfficeParserConfig implements Serializable {",
                "     private boolean includeHeadersAndFooters = true;",
                "+    private boolean includeMissingRows = false;",
                "     private boolean concatenatePhoneticRuns = true;",
                "@@ -190,3 +191,2 @@ public class OfficeParserConfig implements Serializable {",
                "-",
                "     public boolean getExtractAllAlternativesFromMSG() {",
                "@@ -194,2 +194,16 @@ public class OfficeParserConfig implements Serializable {",
                "     }",
                "+",
                "+    /**",
                "+     * For table-like formats, and tables within other formats, should",
                "+     *  missing rows in sparse tables be output where detected?",
                "+     * The default is to only output rows defined within the file, which",
                "+     *  avoid lots of blank lines, but means layout isn't preserved.",
                "+     */",
                "+    public void setIncludeMissingRows(boolean includeMissingRows) {",
                "+        this.includeMissingRows = includeMissingRows;",
                "+    }",
                "+",
                "+    public boolean getIncludeMissingRows() {",
                "+        return includeMissingRows;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2479": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2479",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b9cf2f392e4831565e8e61ccf7b3ba3c38157d2c",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527711865,
            "hunks": 14,
            "message": "TIKA-2655 - Allow the RecursiveParserWrapper to work with the ForkParser",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index dd1d033a8..051a2087c 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -35,2 +35,3 @@ import org.apache.tika.exception.TikaException;",
                " import org.apache.tika.io.IOUtils;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.xml.sax.ContentHandler;",
                "@@ -67,2 +68,3 @@ class ForkClient {",
                "             builder.command(command);",
                "+            builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "             this.process = builder.start();",
                "@@ -142,2 +144,5 @@ class ForkClient {",
                "             object = new InputStreamProxy(n);",
                "+        } else if (object instanceof AbstractRecursiveParserWrapperHandler) {",
                "+            resources.add(new RecursiveMetadataContentHandlerResource((AbstractRecursiveParserWrapperHandler) object));",
                "+            object = new RecursiveMetadataContentHandlerProxy(n, ((AbstractRecursiveParserWrapperHandler)object).getContentHandlerFactory());",
                "         } else if (object instanceof ContentHandler) {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index c69b11c47..77cd23fc1 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -35,2 +35,3 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.parser.Parser;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "@@ -170,4 +171,6 @@ public class ForkParser extends AbstractParser {",
                "         try {",
                "-            ContentHandler tee = new TeeContentHandler(",
                "+            ContentHandler tee = (handler instanceof AbstractRecursiveParserWrapperHandler) ? handler :",
                "+                    new TeeContentHandler(",
                "                     handler, new MetadataContentHandler(metadata));",
                "+",
                "             t = client.call(\"parse\", stream, tee, metadata, context);",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index 68d203db3..845113b37 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -155,3 +155,2 @@ class ForkServer implements Runnable, Checksum {",
                "             output.write(ERROR);",
                "-            ",
                "             // Try to send the underlying Exception itself",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "new file mode 100644",
                "index 000000000..591845738",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "@@ -0,0 +1,123 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.fork;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.apache.tika.sax.ContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.DataInputStream;",
                "+import java.io.DataOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.ObjectOutputStream;",
                "+",
                "+/**",
                "+ * <p>This class calls #toString() on the ContentHandler, inserts it into the Metadata object",
                "+ * and serializes the Metadata object.",
                "+ * </p>",
                "+ * Ideally, this would serialize the ContentHandler and the Metadata object as separate objects,",
                "+ * but we can't guarantee that the ContentHandler is Serializable (e.g. the StringWriter in",
                "+ * the WriteOutContentHandler).",
                "+ */",
                "+class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrapperHandler implements ForkProxy {",
                "+",
                "+    public static final int EMBEDDED_DOCUMENT         =  1;",
                "+    public static final int MAIN_DOCUMENT           =  2;",
                "+    public static final int COMPLETE   =  3;",
                "+",
                "+    /** Serial version UID */",
                "+    private static final long serialVersionUID = 737511106054617524L;",
                "+",
                "+    private final int resource;",
                "+",
                "+    private transient DataOutputStream output;",
                "+",
                "+    public RecursiveMetadataContentHandlerProxy(int resource, ContentHandlerFactory contentHandlerFactory) {",
                "+        super(contentHandlerFactory);",
                "+        this.resource = resource;",
                "+    }",
                "+",
                "+    public void init(DataInputStream input, DataOutputStream output) {",
                "+        this.output = output;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "+",
                "+        try {",
                "+            output.write(ForkServer.RESOURCE);",
                "+            output.writeByte(resource);",
                "+            output.writeByte(EMBEDDED_DOCUMENT);",
                "+            byte[] serialized = serialize(metadata);",
                "+            output.writeInt(serialized.length);",
                "+            output.write(serialized);",
                "+            output.writeByte(COMPLETE);",
                "+        } catch (IOException e) {",
                "+            throw new SAXException(e);",
                "+        } finally {",
                "+            doneSending();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+",
                "+        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "+        if (hasHitMaximumEmbeddedResources()) {",
                "+            metadata.set(EMBEDDED_RESOURCE_LIMIT_REACHED, \"true\");",
                "+        }",
                "+        try {",
                "+            output.write(ForkServer.RESOURCE);",
                "+            output.writeByte(resource);",
                "+            output.writeByte(MAIN_DOCUMENT);",
                "+",
                "+            byte[] serialized = serialize(metadata);",
                "+            output.writeInt(serialized.length);",
                "+            output.write(serialized);",
                "+            output.writeByte(COMPLETE);",
                "+        } catch (IOException e) {",
                "+            throw new SAXException(e);",
                "+        } finally {",
                "+            doneSending();",
                "+        }",
                "+    }",
                "+",
                "+    private byte[] serialize(Object object) throws IOException {",
                "+        //can't figure out why I'm getting an IllegalAccessException",
                "+        //when I try to use ForkedObjectInputStream, but",
                "+        //not when I do this manually ?!",
                "+        ByteArrayOutputStream bos = new ByteArrayOutputStream();",
                "+        ObjectOutputStream oos = new ObjectOutputStream(bos);",
                "+        oos.writeObject(object);",
                "+        oos.flush();",
                "+        oos.close();",
                "+        return bos.toByteArray();",
                "+    }",
                "+",
                "+    private void doneSending() throws SAXException {",
                "+        try {",
                "+            output.flush();",
                "+        } catch (IOException e) {",
                "+            throw new SAXException(\"Unexpected fork proxy problem\", e);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "new file mode 100644",
                "index 000000000..57976f2b4",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "@@ -0,0 +1,109 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.fork;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.DataInputStream;",
                "+import java.io.DataOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.ObjectInputStream;",
                "+",
                "+class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "+",
                "+    private static final ContentHandler DEFAULT_HANDLER = new DefaultHandler();",
                "+    private final AbstractRecursiveParserWrapperHandler handler;",
                "+",
                "+    public RecursiveMetadataContentHandlerResource(AbstractRecursiveParserWrapperHandler handler) {",
                "+        this.handler = handler;",
                "+    }",
                "+",
                "+    public Throwable process(DataInputStream input, DataOutputStream output)",
                "+            throws IOException {",
                "+        try {",
                "+            internalProcess(input);",
                "+            return null;",
                "+        } catch (SAXException e) {",
                "+            return e;",
                "+        }",
                "+    }",
                "+",
                "+    private void internalProcess(DataInputStream input)",
                "+            throws IOException, SAXException {",
                "+        int type = input.readByte();",
                "+        if (type == RecursiveMetadataContentHandlerProxy.EMBEDDED_DOCUMENT) {",
                "+            Metadata metadata = null;",
                "+            try {",
                "+                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "+            } catch (ClassNotFoundException e) {",
                "+                throw new IOException(e);",
                "+            }",
                "+            byte isComplete = input.readByte();",
                "+            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "+                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "+            }",
                "+            handler.endEmbeddedDocument(DEFAULT_HANDLER, metadata);",
                "+        } else if (type == RecursiveMetadataContentHandlerProxy.MAIN_DOCUMENT) {",
                "+            Metadata metadata = null;",
                "+            try {",
                "+                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "+            } catch (ClassNotFoundException e) {",
                "+                throw new IOException(e);",
                "+            }",
                "+            byte isComplete = input.readByte();",
                "+            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "+                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "+            }",
                "+            handler.endDocument(DEFAULT_HANDLER, metadata);",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"I regret that I don't understand: \"+type);",
                "+        }",
                "+    }",
                "+",
                "+    private Metadata deserializeMetadata(DataInputStream dataInputStream) throws IOException {",
                "+        int length = dataInputStream.readInt();",
                "+        byte[] data = new byte[length];",
                "+        dataInputStream.readFully(data);",
                "+",
                "+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "+        Object obj = null;",
                "+        try {",
                "+            obj = ois.readObject();",
                "+        } catch (ClassNotFoundException e) {",
                "+            throw new IOException(e);",
                "+        }",
                "+        return (Metadata) obj;",
                "+    }",
                "+    private ContentHandler deserializeContentHandler(DataInputStream dataInputStream) throws IOException {",
                "+        int length = dataInputStream.readInt();",
                "+        byte[] data = new byte[length];",
                "+        dataInputStream.readFully(data);",
                "+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "+        Object obj = null;",
                "+        try {",
                "+            obj = ois.readObject();",
                "+        } catch (ClassNotFoundException e) {",
                "+            throw new IOException(e);",
                "+        }",
                "+        return (ContentHandler)obj;",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "index 58f9ec65f..11f7ff632 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "@@ -27,2 +27,3 @@ import org.xml.sax.helpers.DefaultHandler;",
                " import java.io.OutputStream;",
                "+import java.io.Serializable;",
                " import java.nio.charset.Charset;",
                "@@ -34,3 +35,3 @@ import java.nio.charset.Charset;",
                "  */",
                "-public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandler {",
                "+public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandler implements Serializable {",
                "@@ -118,2 +119,5 @@ public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandl",
                "+    public ContentHandlerFactory getContentHandlerFactory() {",
                "+        return contentHandlerFactory;",
                "+    }",
                " }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "index 9dd74c499..555001c67 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "@@ -22,2 +22,3 @@ import org.xml.sax.ContentHandler;",
                " import java.io.OutputStream;",
                "+import java.io.Serializable;",
                " import java.io.UnsupportedEncodingException;",
                "@@ -28,3 +29,3 @@ import java.nio.charset.Charset;",
                "  */",
                "-public interface ContentHandlerFactory {",
                "+public interface ContentHandlerFactory extends Serializable {",
                "     public ContentHandler getNewContentHandler();"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2655": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2655",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b1b035e6bbcff0db24e133b682ac79916f92f599",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526594824,
            "hunks": 10,
            "message": "TIKA-2479 Output missing left/mid cells in XLSX and XLSB, and optionally also missing rows",
            "diff": [
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFBExcelExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFBExcelExtractorDecorator.java",
                "index dcde62be7..33dbb7e04 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFBExcelExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFBExcelExtractorDecorator.java",
                "@@ -119,3 +119,3 @@ public class XSSFBExcelExtractorDecorator extends XSSFExcelExtractorDecorator {",
                "-            SheetTextAsHTML sheetExtractor = new SheetTextAsHTML(config.getIncludeHeadersAndFooters(), xhtml);",
                "+            SheetTextAsHTML sheetExtractor = new SheetTextAsHTML(config, xhtml);",
                "             XSSFBCommentsTable comments = iter.getXSSFBSheetComments();",
                "diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "index 9a2b01734..7e1a7cd62 100644",
                "--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java",
                "@@ -27,3 +27,2 @@ import java.util.Map;",
                "-import org.apache.poi.POIXMLDocument;",
                " import org.apache.poi.POIXMLTextExtractor;",
                "@@ -41,2 +40,3 @@ import org.apache.poi.ss.usermodel.DataFormatter;",
                " import org.apache.poi.ss.usermodel.HeaderFooter;",
                "+import org.apache.poi.ss.util.CellReference;",
                " import org.apache.poi.xssf.eventusermodel.ReadOnlySharedStringsTable;",
                "@@ -58,2 +58,3 @@ import org.apache.tika.metadata.TikaCoreProperties;",
                " import org.apache.tika.parser.ParseContext;",
                "+import org.apache.tika.parser.microsoft.OfficeParserConfig;",
                " import org.apache.tika.parser.microsoft.TikaExcelDataFormatter;",
                "@@ -146,4 +147,3 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "         while (iter.hasNext()) {",
                "-",
                "-            SheetTextAsHTML sheetExtractor = new SheetTextAsHTML(config.getIncludeHeadersAndFooters(), xhtml);",
                "+            SheetTextAsHTML sheetExtractor = new SheetTextAsHTML(config, xhtml);",
                "             PackagePart sheetPart = null;",
                "@@ -399,7 +399,11 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "         private final boolean includeHeadersFooters;",
                "+        private final boolean includeMissingRows;",
                "         protected List<String> headers;",
                "         protected List<String> footers;",
                "+        private int lastSeenRow = -1;",
                "+        private int lastSeenCol = -1;",
                "-        protected SheetTextAsHTML(boolean includeHeaderFooters, XHTMLContentHandler xhtml) {",
                "-            this.includeHeadersFooters = includeHeaderFooters;",
                "+        protected SheetTextAsHTML(OfficeParserConfig config, XHTMLContentHandler xhtml) {",
                "+            this.includeHeadersFooters = config.getIncludeHeadersAndFooters();",
                "+            this.includeMissingRows = config.getIncludeMissingRows();",
                "             this.xhtml = xhtml;",
                "@@ -411,3 +415,15 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             try {",
                "+                // Missing rows, if desired, with a single empty row",
                "+                if (includeMissingRows && rowNum > (lastSeenRow+1)) {",
                "+                    for (int rn=lastSeenRow+1; rn<rowNum; rn++) {",
                "+                        xhtml.startElement(\"tr\");",
                "+                        xhtml.startElement(\"td\");",
                "+                        xhtml.endElement(\"td\");",
                "+                        xhtml.endElement(\"tr\");",
                "+                    }",
                "+                }",
                "+",
                "+                // Start the new row",
                "                 xhtml.startElement(\"tr\");",
                "+                lastSeenCol = -1;",
                "             } catch (SAXException e) {",
                "@@ -425,2 +441,11 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {",
                "             try {",
                "+                // Handle any missing cells",
                "+                int colNum = (new CellReference(cellRef)).getCol();",
                "+                for (int cn=lastSeenCol+1; cn<colNum; cn++) {",
                "+                    xhtml.startElement(\"td\");",
                "+                    xhtml.endElement(\"td\");",
                "+                }",
                "+                lastSeenCol = colNum;",
                "+",
                "+                // Start this cell",
                "                 xhtml.startElement(\"td\");"
            ],
            "changed_files": [
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFBExcelExtractorDecorator.java",
                "tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2479": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2479",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0e8f44459fbbed991171e9eafb3395df6060fb7a",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527711865,
            "hunks": 14,
            "message": "TIKA-2655",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index dd1d033a8..051a2087c 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -35,2 +35,3 @@ import org.apache.tika.exception.TikaException;",
                " import org.apache.tika.io.IOUtils;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.xml.sax.ContentHandler;",
                "@@ -67,2 +68,3 @@ class ForkClient {",
                "             builder.command(command);",
                "+            builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "             this.process = builder.start();",
                "@@ -142,2 +144,5 @@ class ForkClient {",
                "             object = new InputStreamProxy(n);",
                "+        } else if (object instanceof AbstractRecursiveParserWrapperHandler) {",
                "+            resources.add(new RecursiveMetadataContentHandlerResource((AbstractRecursiveParserWrapperHandler) object));",
                "+            object = new RecursiveMetadataContentHandlerProxy(n, ((AbstractRecursiveParserWrapperHandler)object).getContentHandlerFactory());",
                "         } else if (object instanceof ContentHandler) {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index c69b11c47..77cd23fc1 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -35,2 +35,3 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.parser.Parser;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "@@ -170,4 +171,6 @@ public class ForkParser extends AbstractParser {",
                "         try {",
                "-            ContentHandler tee = new TeeContentHandler(",
                "+            ContentHandler tee = (handler instanceof AbstractRecursiveParserWrapperHandler) ? handler :",
                "+                    new TeeContentHandler(",
                "                     handler, new MetadataContentHandler(metadata));",
                "+",
                "             t = client.call(\"parse\", stream, tee, metadata, context);",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index 68d203db3..845113b37 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -155,3 +155,2 @@ class ForkServer implements Runnable, Checksum {",
                "             output.write(ERROR);",
                "-            ",
                "             // Try to send the underlying Exception itself",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "new file mode 100644",
                "index 000000000..591845738",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "@@ -0,0 +1,123 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.fork;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.apache.tika.sax.ContentHandlerFactory;",
                "+import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.DataInputStream;",
                "+import java.io.DataOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.ObjectOutputStream;",
                "+",
                "+/**",
                "+ * <p>This class calls #toString() on the ContentHandler, inserts it into the Metadata object",
                "+ * and serializes the Metadata object.",
                "+ * </p>",
                "+ * Ideally, this would serialize the ContentHandler and the Metadata object as separate objects,",
                "+ * but we can't guarantee that the ContentHandler is Serializable (e.g. the StringWriter in",
                "+ * the WriteOutContentHandler).",
                "+ */",
                "+class RecursiveMetadataContentHandlerProxy extends AbstractRecursiveParserWrapperHandler implements ForkProxy {",
                "+",
                "+    public static final int EMBEDDED_DOCUMENT         =  1;",
                "+    public static final int MAIN_DOCUMENT           =  2;",
                "+    public static final int COMPLETE   =  3;",
                "+",
                "+    /** Serial version UID */",
                "+    private static final long serialVersionUID = 737511106054617524L;",
                "+",
                "+    private final int resource;",
                "+",
                "+    private transient DataOutputStream output;",
                "+",
                "+    public RecursiveMetadataContentHandlerProxy(int resource, ContentHandlerFactory contentHandlerFactory) {",
                "+        super(contentHandlerFactory);",
                "+        this.resource = resource;",
                "+    }",
                "+",
                "+    public void init(DataInputStream input, DataOutputStream output) {",
                "+        this.output = output;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void endEmbeddedDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "+",
                "+        try {",
                "+            output.write(ForkServer.RESOURCE);",
                "+            output.writeByte(resource);",
                "+            output.writeByte(EMBEDDED_DOCUMENT);",
                "+            byte[] serialized = serialize(metadata);",
                "+            output.writeInt(serialized.length);",
                "+            output.write(serialized);",
                "+            output.writeByte(COMPLETE);",
                "+        } catch (IOException e) {",
                "+            throw new SAXException(e);",
                "+        } finally {",
                "+            doneSending();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void endDocument(ContentHandler contentHandler, Metadata metadata) throws SAXException {",
                "+",
                "+        metadata.set(RecursiveParserWrapperHandler.TIKA_CONTENT, contentHandler.toString());",
                "+        if (hasHitMaximumEmbeddedResources()) {",
                "+            metadata.set(EMBEDDED_RESOURCE_LIMIT_REACHED, \"true\");",
                "+        }",
                "+        try {",
                "+            output.write(ForkServer.RESOURCE);",
                "+            output.writeByte(resource);",
                "+            output.writeByte(MAIN_DOCUMENT);",
                "+",
                "+            byte[] serialized = serialize(metadata);",
                "+            output.writeInt(serialized.length);",
                "+            output.write(serialized);",
                "+            output.writeByte(COMPLETE);",
                "+        } catch (IOException e) {",
                "+            throw new SAXException(e);",
                "+        } finally {",
                "+            doneSending();",
                "+        }",
                "+    }",
                "+",
                "+    private byte[] serialize(Object object) throws IOException {",
                "+        //can't figure out why I'm getting an IllegalAccessException",
                "+        //when I try to use ForkedObjectInputStream, but",
                "+        //not when I do this manually ?!",
                "+        ByteArrayOutputStream bos = new ByteArrayOutputStream();",
                "+        ObjectOutputStream oos = new ObjectOutputStream(bos);",
                "+        oos.writeObject(object);",
                "+        oos.flush();",
                "+        oos.close();",
                "+        return bos.toByteArray();",
                "+    }",
                "+",
                "+    private void doneSending() throws SAXException {",
                "+        try {",
                "+            output.flush();",
                "+        } catch (IOException e) {",
                "+            throw new SAXException(\"Unexpected fork proxy problem\", e);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "new file mode 100644",
                "index 000000000..57976f2b4",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "@@ -0,0 +1,109 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.fork;",
                "+",
                "+import org.apache.tika.metadata.Metadata;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.xml.sax.ContentHandler;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.DataInputStream;",
                "+import java.io.DataOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.ObjectInputStream;",
                "+",
                "+class RecursiveMetadataContentHandlerResource implements ForkResource {",
                "+",
                "+    private static final ContentHandler DEFAULT_HANDLER = new DefaultHandler();",
                "+    private final AbstractRecursiveParserWrapperHandler handler;",
                "+",
                "+    public RecursiveMetadataContentHandlerResource(AbstractRecursiveParserWrapperHandler handler) {",
                "+        this.handler = handler;",
                "+    }",
                "+",
                "+    public Throwable process(DataInputStream input, DataOutputStream output)",
                "+            throws IOException {",
                "+        try {",
                "+            internalProcess(input);",
                "+            return null;",
                "+        } catch (SAXException e) {",
                "+            return e;",
                "+        }",
                "+    }",
                "+",
                "+    private void internalProcess(DataInputStream input)",
                "+            throws IOException, SAXException {",
                "+        int type = input.readByte();",
                "+        if (type == RecursiveMetadataContentHandlerProxy.EMBEDDED_DOCUMENT) {",
                "+            Metadata metadata = null;",
                "+            try {",
                "+                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "+            } catch (ClassNotFoundException e) {",
                "+                throw new IOException(e);",
                "+            }",
                "+            byte isComplete = input.readByte();",
                "+            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "+                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "+            }",
                "+            handler.endEmbeddedDocument(DEFAULT_HANDLER, metadata);",
                "+        } else if (type == RecursiveMetadataContentHandlerProxy.MAIN_DOCUMENT) {",
                "+            Metadata metadata = null;",
                "+            try {",
                "+                metadata = (Metadata)ForkObjectInputStream.readObject(input, this.getClass().getClassLoader());",
                "+            } catch (ClassNotFoundException e) {",
                "+                throw new IOException(e);",
                "+            }",
                "+            byte isComplete = input.readByte();",
                "+            if (isComplete != RecursiveMetadataContentHandlerProxy.COMPLETE) {",
                "+                throw new IOException(\"Expected the 'complete' signal, but got: \"+isComplete);",
                "+            }",
                "+            handler.endDocument(DEFAULT_HANDLER, metadata);",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"I regret that I don't understand: \"+type);",
                "+        }",
                "+    }",
                "+",
                "+    private Metadata deserializeMetadata(DataInputStream dataInputStream) throws IOException {",
                "+        int length = dataInputStream.readInt();",
                "+        byte[] data = new byte[length];",
                "+        dataInputStream.readFully(data);",
                "+",
                "+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "+        Object obj = null;",
                "+        try {",
                "+            obj = ois.readObject();",
                "+        } catch (ClassNotFoundException e) {",
                "+            throw new IOException(e);",
                "+        }",
                "+        return (Metadata) obj;",
                "+    }",
                "+    private ContentHandler deserializeContentHandler(DataInputStream dataInputStream) throws IOException {",
                "+        int length = dataInputStream.readInt();",
                "+        byte[] data = new byte[length];",
                "+        dataInputStream.readFully(data);",
                "+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));",
                "+        Object obj = null;",
                "+        try {",
                "+            obj = ois.readObject();",
                "+        } catch (ClassNotFoundException e) {",
                "+            throw new IOException(e);",
                "+        }",
                "+        return (ContentHandler)obj;",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "index 58f9ec65f..11f7ff632 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "@@ -27,2 +27,3 @@ import org.xml.sax.helpers.DefaultHandler;",
                " import java.io.OutputStream;",
                "+import java.io.Serializable;",
                " import java.nio.charset.Charset;",
                "@@ -34,3 +35,3 @@ import java.nio.charset.Charset;",
                "  */",
                "-public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandler {",
                "+public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandler implements Serializable {",
                "@@ -118,2 +119,5 @@ public abstract class AbstractRecursiveParserWrapperHandler extends DefaultHandl",
                "+    public ContentHandlerFactory getContentHandlerFactory() {",
                "+        return contentHandlerFactory;",
                "+    }",
                " }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "index 9dd74c499..555001c67 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java",
                "@@ -22,2 +22,3 @@ import org.xml.sax.ContentHandler;",
                " import java.io.OutputStream;",
                "+import java.io.Serializable;",
                " import java.io.UnsupportedEncodingException;",
                "@@ -28,3 +29,3 @@ import java.nio.charset.Charset;",
                "  */",
                "-public interface ContentHandlerFactory {",
                "+public interface ContentHandlerFactory extends Serializable {",
                "     public ContentHandler getNewContentHandler();"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerProxy.java",
                "tika-core/src/main/java/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java",
                "tika-core/src/main/java/org/apache/tika/sax/AbstractRecursiveParserWrapperHandler.java",
                "tika-core/src/main/java/org/apache/tika/sax/ContentHandlerFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "TIKA-2655": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: TIKA-2655",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "12693ea18f1a05894272aa3a9293d41215f63c06",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1526654106,
            "hunks": 1,
            "message": "Add the other jackcess jar to the bundle",
            "diff": [
                "diff --git a/tika-bundle/pom.xml b/tika-bundle/pom.xml",
                "index 2b500d767..fa13e21ce 100644",
                "--- a/tika-bundle/pom.xml",
                "+++ b/tika-bundle/pom.xml",
                "@@ -172,2 +172,3 @@",
                "               jackcess|",
                "+              jackcess-encrypt|",
                "               commons-lang|"
            ],
            "changed_files": [
                "tika-bundle/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e2156ce44ebf1eb49efc608e12dbec905112f39f",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527617406,
            "hunks": 37,
            "message": "Add parserfactoryfactory + classloader as options; include more unit tests; add AutoDetectParserFactory",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index c9830ab30..4fcc55667 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -36,3 +36,2 @@ import org.apache.tika.exception.TikaException;",
                " import org.apache.tika.io.IOUtils;",
                "-import org.apache.tika.parser.ParserFactoryFactory;",
                " import org.apache.tika.utils.ProcessUtils;",
                "@@ -75,2 +74,3 @@ class ForkClient {",
                "         builder.command(command);",
                "+        builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "         try {",
                "@@ -83,6 +83,67 @@ class ForkClient {",
                "             waitForStartBeacon();",
                "-",
                "+            output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY);",
                "+            output.flush();",
                "             sendObject(parserFactoryFactory, resources);",
                "+            waitForStartBeacon();",
                "+",
                "+            ok = true;",
                "+        } catch (Throwable t) {",
                "+            t.printStackTrace();",
                "+            throw t;",
                "+        } finally {",
                "+            if (!ok) {",
                "+                close();",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @param tikaDir directory containing jars from which to start the child server and load the Parser",
                "+     * @param parserFactoryFactory factory to send to child process to build parser upon arrival",
                "+     * @param classLoader class loader to use for non-parser resource (content-handler, etc.)",
                "+     * @param java java commandline to use for the commandline server",
                "+     * @param serverPulseMillis how often to check if the server has been active",
                "+     * @throws IOException",
                "+     * @throws TikaException",
                "+     */",
                "+    public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory, ClassLoader classLoader,",
                "+                      List<String> java, long serverPulseMillis) throws IOException, TikaException {",
                "+        jar = null;",
                "+        loader = null;",
                "+        boolean ok = false;",
                "+        ProcessBuilder builder = new ProcessBuilder();",
                "+        List<String> command = new ArrayList<>();",
                "+        command.addAll(java);",
                "+        command.add(\"-cp\");",
                "+        String dirString = tikaDir.toAbsolutePath().toString();",
                "+        if (!dirString.endsWith(\"/\")) {",
                "+            dirString += \"/*\";",
                "+        } else {",
                "+            dirString += \"/\";",
                "+        }",
                "+        dirString = ProcessUtils.escapeCommandLine(dirString);",
                "+        command.add(dirString);",
                "+        command.add(\"org.apache.tika.fork.ForkServer\");",
                "+        command.add(Long.toString(serverPulseMillis));",
                "+        builder.command(command);",
                "+        builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "+        try {",
                "+            this.process = builder.start();",
                "+",
                "+            this.output = new DataOutputStream(process.getOutputStream());",
                "+            this.input = new DataInputStream(process.getInputStream());",
                "+            this.error = process.getErrorStream();",
                "+",
                "+            waitForStartBeacon();",
                "+            output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY_LOADER);",
                "+            output.flush();",
                "+            sendObject(parserFactoryFactory, resources);",
                "+            sendObject(classLoader, resources);",
                "+            waitForStartBeacon();",
                "             ok = true;",
                "+        } catch (Throwable t) {",
                "+            t.printStackTrace();",
                "+            throw t;",
                "         } finally {",
                "@@ -94,2 +155,3 @@ class ForkClient {",
                "+",
                "     public ForkClient(ClassLoader loader, Object object, List<String> java, long serverPulseMillis)",
                "@@ -107,2 +169,3 @@ class ForkClient {",
                "             command.add(Long.toString(serverPulseMillis));",
                "+            builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "             builder.command(command);",
                "@@ -115,5 +178,7 @@ class ForkClient {",
                "             waitForStartBeacon();",
                "-",
                "+            output.writeByte(ForkServer.INIT_LOADER_PARSER);",
                "+            output.flush();",
                "             sendObject(loader, resources);",
                "             sendObject(object, resources);",
                "+            waitForStartBeacon();",
                "@@ -129,7 +194,11 @@ class ForkClient {",
                "         while (true) {",
                "-            consumeErrorStream();",
                "             int type = input.read();",
                "             if ((byte) type == ForkServer.READY) {",
                "-                consumeErrorStream();",
                "                 return;",
                "+            } else if ((byte)type == ForkServer.FAILED_TO_START) {",
                "+                throw new IOException(\"Server had a catastrophic initialization failure\");",
                "+            } else if (type == -1) {",
                "+                throw new IOException(\"EOF while waiting for start beacon\");",
                "+            } else {",
                "+                throw new IOException(\"Unexpected byte while waiting for start beacon: \"+type);",
                "             }",
                "@@ -143,6 +212,4 @@ class ForkClient {",
                "             while (true) {",
                "-                consumeErrorStream();",
                "                 int type = input.read();",
                "                 if (type == ForkServer.PING) {",
                "-                    consumeErrorStream();",
                "                     return true;",
                "@@ -234,6 +301,4 @@ class ForkClient {",
                "         while (true) {",
                "-            consumeErrorStream();",
                "             int type = input.read();",
                "             if (type == -1) {",
                "-                consumeErrorStream();",
                "                 throw new IOException(",
                "@@ -258,22 +323,2 @@ class ForkClient {",
                "-    /**",
                "-     * Consumes all pending bytes from the standard error stream of the",
                "-     * forked server process, and prints them out to the standard error",
                "-     * stream of this process. This method should be called always before",
                "-     * expecting some output from the server, to prevent the server from",
                "-     * blocking due to a filled up pipe buffer of the error stream.",
                "-     *",
                "-     * @throws IOException if the error stream could not be read",
                "-     */",
                "-    private void consumeErrorStream() throws IOException {",
                "-        int n;",
                "-        while ((n = error.available()) > 0) {",
                "-            byte[] b = new byte[n];",
                "-            n = error.read(b);",
                "-            if (n > 0) {",
                "-                System.err.write(b, 0, n);",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     /**",
                "@@ -319,3 +364,3 @@ class ForkClient {",
                "                     MemoryURLStreamHandlerFactory.class,",
                "-                    MemoryURLStreamRecord.class",
                "+                    MemoryURLStreamRecord.class, TikaException.class",
                "             };",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index 580073a56..513a3039a 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -36,4 +36,2 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.parser.Parser;",
                "-import org.apache.tika.parser.ParserFactory;",
                "-import org.apache.tika.parser.ParserFactoryFactory;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "@@ -68,2 +66,11 @@ public class ForkParser extends AbstractParser {",
                "+    /**",
                "+     * If you have a directory with, say, tike-app.jar and you want the child process/server to build a parser",
                "+     * and run it from that -- so that you can keep all of those dependencies out of your client code, use",
                "+     * this initializer.",
                "+     *",
                "+     * @param tikaBin directory containing the tika-app.jar or similar -- full jar including tika-core and all",
                "+     *                desired parsers and dependencies",
                "+     * @param factoryFactory",
                "+     */",
                "     public ForkParser(Path tikaBin, ParserFactoryFactory factoryFactory) {",
                "@@ -75,2 +82,16 @@ public class ForkParser extends AbstractParser {",
                "+    /**",
                "+     * <b>EXPERT</b>",
                "+     * @param tikaBin directory containing the tika-app.jar or similar -- full jar including tika-core and all",
                "+     *                desired parsers and dependencies",
                "+     * @param parserFactoryFactory -- the factory to use to generate the parser factory in the child process/server",
                "+     * @param classLoader to use for all classes besides the parser in the child process/server",
                "+     */",
                "+    public ForkParser(Path tikaBin, ParserFactoryFactory parserFactoryFactory, ClassLoader classLoader) {",
                "+        parser = null;",
                "+        loader = classLoader;",
                "+        this.tikaBin = tikaBin;",
                "+        this.parserFactoryFactory = parserFactoryFactory;",
                "+    }",
                "+",
                "     /**",
                "@@ -144,3 +165,4 @@ public class ForkParser extends AbstractParser {",
                "      * Sets the command used to start the forked server process.",
                "-     * The arguments \"-jar\" and \"/path/to/bootstrap.jar\" are",
                "+     * The arguments \"-jar\" and \"/path/to/bootstrap.jar\"",
                "+     * or \"-cp\" and \"/path/to/tika_bin\" are",
                "      * appended to the given command when starting the process.",
                "@@ -257,2 +279,3 @@ public class ForkParser extends AbstractParser {",
                "     private ForkClient newClient() throws IOException, TikaException {",
                "+",
                "         if (loader == null && parser == null && tikaBin != null && parserFactoryFactory != null) {",
                "@@ -261,5 +284,7 @@ public class ForkParser extends AbstractParser {",
                "            return new ForkClient(loader, parser, java, serverPulseMillis);",
                "+        } else if (loader != null && parser == null && tikaBin != null && parserFactoryFactory != null) {",
                "+            return new ForkClient(tikaBin, parserFactoryFactory, loader, java, serverPulseMillis);",
                "         } else {",
                "-            throw new IllegalStateException(\"Either a) loader and parser must be not null \" +",
                "-                    \"or b) tikaBin and parserFactoryFactory must not be null\");",
                "+            //TODO: make this more useful",
                "+            throw new IllegalStateException(\"Unexpected combination of state items\");",
                "         }",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index 364b94f92..8e3d8e972 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -18,2 +18,6 @@ package org.apache.tika.fork;",
                "+import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+import org.xml.sax.SAXException;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -32,6 +36,2 @@ import java.util.zip.Checksum;",
                "-import org.apache.tika.exception.TikaException;",
                "-import org.apache.tika.parser.ParserFactory;",
                "-import org.apache.tika.parser.ParserFactoryFactory;",
                "-",
                " class ForkServer implements Runnable, Checksum {",
                "@@ -50,2 +50,8 @@ class ForkServer implements Runnable, Checksum {",
                "+    public static final byte FAILED_TO_START = 5;",
                "+",
                "+    public static final byte INIT_PARSER_FACTORY_FACTORY = 6;",
                "+    public static final byte INIT_LOADER_PARSER = 7;",
                "+    public static final byte INIT_PARSER_FACTORY_FACTORY_LOADER = 8;",
                "+",
                "     //milliseconds to sleep before checking to see if there has been any reading/writing",
                "@@ -88,2 +94,7 @@ class ForkServer implements Runnable, Checksum {",
                "+    //can't be class Parser because then you'd",
                "+    //have to include that in bootstrap jar (legacy mode)",
                "+    private Object parser;",
                "+    private ClassLoader classLoader;",
                "+",
                "     /**",
                "@@ -118,25 +129,16 @@ class ForkServer implements Runnable, Checksum {",
                "         try {",
                "-            output.writeByte(READY);",
                "-            output.flush();",
                "-",
                "-            final ClassLoader loader;",
                "-            Object parser = null;",
                "-            Object firstObject = readObject(",
                "-                    ForkServer.class.getClassLoader());",
                "-",
                "-            //legacy behavior",
                "-            if (firstObject instanceof ClassLoader) {",
                "-                loader = (ClassLoader) firstObject;",
                "-                Thread.currentThread().setContextClassLoader(loader);",
                "-                //parser from parent process",
                "-                parser = readObject(loader);",
                "-            } else if (firstObject instanceof ParserFactoryFactory) {",
                "-                //the user has submitted a parser factory",
                "-                loader = ForkServer.class.getClassLoader();",
                "-                ParserFactory parserFactory = ((ParserFactoryFactory) firstObject).build();",
                "-                parser = parserFactory.build();",
                "-            } else {",
                "-                throw new IllegalStateException(\"Was expecting ClassLoader or ParserFactoryFactory, not\"+firstObject.getClass());",
                "+            initializeParserAndLoader();",
                "+        } catch (Throwable t) {",
                "+            t.printStackTrace();",
                "+            System.err.flush();",
                "+            try {",
                "+                output.writeByte(FAILED_TO_START);",
                "+                output.flush();",
                "+            } catch (IOException e) {",
                "+                e.printStackTrace();",
                "+                System.err.flush();",
                "             }",
                "-",
                "+            return;",
                "+        }",
                "+        try {",
                "             while (true) {",
                "@@ -148,3 +150,3 @@ class ForkServer implements Runnable, Checksum {",
                "                 } else if (request == CALL) {",
                "-                    call(loader, parser);",
                "+                    call(classLoader, parser);",
                "                 } else {",
                "@@ -160,2 +162,51 @@ class ForkServer implements Runnable, Checksum {",
                "+    private void initializeParserAndLoader() throws IOException, ClassNotFoundException,",
                "+            TikaException, SAXException {",
                "+        output.writeByte(READY);",
                "+        output.flush();",
                "+",
                "+        int configIndex = input.read();",
                "+        if (configIndex == -1) {",
                "+            throw new TikaException(\"eof! pipe closed?!\");",
                "+        }",
                "+",
                "+        Object firstObject = readObject(",
                "+                ForkServer.class.getClassLoader());",
                "+        switch (configIndex) {",
                "+            case INIT_PARSER_FACTORY_FACTORY:",
                "+                if (firstObject instanceof ParserFactoryFactory) {",
                "+                    //the user has submitted a parser factory, but no class loader",
                "+                    classLoader = ForkServer.class.getClassLoader();",
                "+                    ParserFactory parserFactory = ((ParserFactoryFactory) firstObject).build();",
                "+                    parser = parserFactory.build();",
                "+                } else {",
                "+                    throw new IllegalArgumentException(\"Expecting only one object of class ParserFactoryFactory\");",
                "+                }",
                "+                break;",
                "+            case INIT_LOADER_PARSER:",
                "+                if (firstObject instanceof ClassLoader) {",
                "+                    classLoader = (ClassLoader) firstObject;",
                "+                    Thread.currentThread().setContextClassLoader(classLoader);",
                "+                    //parser from parent process",
                "+                    parser = readObject(classLoader);",
                "+                } else {",
                "+                    throw new IllegalArgumentException(\"Expecting ClassLoader followed by a Parser\");",
                "+                }",
                "+                break;",
                "+            case INIT_PARSER_FACTORY_FACTORY_LOADER:",
                "+                if (firstObject instanceof ParserFactoryFactory) {",
                "+                    //the user has submitted a parser factory and a class loader",
                "+                    ParserFactory parserFactory = ((ParserFactoryFactory) firstObject).build();",
                "+                    parser = parserFactory.build();",
                "+                    classLoader = (ClassLoader) readObject(ForkServer.class.getClassLoader());",
                "+                    Thread.currentThread().setContextClassLoader(classLoader);",
                "+                } else {",
                "+                    throw new IllegalStateException(\"Expecing ParserFactoryFactory followed by a class loader\");",
                "+                }",
                "+                break;",
                "+        }",
                "+        output.writeByte(READY);",
                "+        output.flush();",
                "+    }",
                "+",
                "     private void call(ClassLoader loader, Object object) throws Exception {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java b/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "new file mode 100644",
                "index 000000000..f40d3ed16",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.tika.fork;",
                "+",
                "+",
                "+",
                "+import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+",
                "+import java.io.Serializable;",
                "+import java.lang.reflect.Constructor;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Lightweight, easily serializable class that contains enough information",
                "+ * to build a {@link ParserFactory}",
                "+ */",
                "+public class ParserFactoryFactory implements Serializable {",
                "+",
                "+    /** Serial version UID */",
                "+    private static final long serialVersionUID = 4710974869988895410L;",
                "+",
                "+    private final String className;",
                "+    private final Map<String, String> args;",
                "+",
                "+    public ParserFactoryFactory(String className, Map<String, String> args) {",
                "+        this.className = className;",
                "+        this.args = args;",
                "+    }",
                "+",
                "+    public ParserFactory build() throws TikaException {",
                "+        try {",
                "+            Class<?> clazz = Class.forName(className);",
                "+            Constructor<?> con = clazz.getConstructor(Map.class);",
                "+            return (ParserFactory) con.newInstance(args);",
                "+        } catch (ReflectiveOperationException|IllegalStateException e) {",
                "+            throw new TikaException(\"Couldn't create factory\", e);",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java b/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java",
                "new file mode 100644",
                "index 000000000..d00f59de1",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.tika.parser;",
                "+",
                "+import org.apache.tika.config.TikaConfig;",
                "+import org.apache.tika.exception.TikaException;",
                "+import org.xml.sax.SAXException;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Paths;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Factory for an AutoDetectParser",
                "+ */",
                "+public class AutoDetectParserFactory extends ParserFactory {",
                "+",
                "+    /**",
                "+     * Path to a tika-config file.  This must be a literal",
                "+     * file or findable on the classpath.",
                "+     */",
                "+    public static final String TIKA_CONFIG_PATH = \"tika_config_path\";",
                "+",
                "+    public AutoDetectParserFactory(Map<String, String> args) {",
                "+        super(args);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Parser build() throws IOException, SAXException, TikaException {",
                "+        String tikaConfigPath = args.remove(TIKA_CONFIG_PATH);",
                "+        TikaConfig tikaConfig = null;",
                "+        if (tikaConfigPath != null) {",
                "+            if (Files.isReadable(Paths.get(tikaConfigPath))) {",
                "+                tikaConfig = new TikaConfig(Paths.get(tikaConfigPath));",
                "+            } else if (this.getClass().getResource(tikaConfigPath) != null) {",
                "+                try (InputStream is = this.getClass().getResourceAsStream(tikaConfigPath)) {",
                "+                    tikaConfig = new TikaConfig(is);",
                "+                }",
                "+            }",
                "+        }",
                "+        if (tikaConfig == null) {",
                "+            tikaConfig = TikaConfig.getDefaultConfig();",
                "+        }",
                "+        return new AutoDetectParser(tikaConfig);",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "index c8a92e736..ab61785c2 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "@@ -21,2 +21,3 @@ package org.apache.tika.parser;",
                " import org.apache.tika.exception.TikaException;",
                "+import org.xml.sax.SAXException;",
                "@@ -33,3 +34,3 @@ public abstract class ParserFactory {",
                "-    public abstract Parser build() throws IOException, TikaException;",
                "+    public abstract Parser build() throws IOException, SAXException, TikaException;"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "12f455cfb1a2457f112e39b9eacd0d340dd76be6",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527797562,
            "hunks": 5,
            "message": "ForkParser -- update to master; handful of fixes",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ClassLoaderProxy.java b/tika-core/src/main/java/org/apache/tika/fork/ClassLoaderProxy.java",
                "index 920926d74..01b0ba548 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ClassLoaderProxy.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ClassLoaderProxy.java",
                "@@ -114,3 +114,5 @@ class ClassLoaderProxy extends ClassLoader implements ForkProxy {",
                "                 byte[] data = readStream();",
                "-                return defineClass(name, data, 0, data.length);",
                "+                Class<?> clazz = defineClass(name, data, 0, data.length);",
                "+                definePackageIfNecessary(name, clazz);",
                "+                return clazz;",
                "             } else {",
                "@@ -123,2 +125,17 @@ class ClassLoaderProxy extends ClassLoader implements ForkProxy {",
                "+    private void definePackageIfNecessary(String className, Class<?> clazz) {",
                "+        String packageName = toPackageName(className);",
                "+        if (packageName != null && getPackage(packageName) == null) {",
                "+            definePackage(packageName, null, null, null, null, null, null, null);",
                "+        }",
                "+    }",
                "+",
                "+    private String toPackageName(String className) {",
                "+        int packageEndIndex = className.lastIndexOf('.');",
                "+        if (packageEndIndex > 0) {",
                "+            return className.substring(0, packageEndIndex);",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "     private byte[] readStream() throws IOException {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index 7a66ff4a0..baa30059e 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -171,4 +171,4 @@ class ForkClient {",
                "             command.add(Long.toString(serverPulseMillis));",
                "-            builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "             builder.command(command);",
                "+            builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "             this.process = builder.start();",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index 6add9f418..f4c49daa8 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -36,3 +36,2 @@ import java.util.zip.Checksum;",
                "-",
                " class ForkServer implements Runnable, Checksum {"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ClassLoaderProxy.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0edd73e7ce6f32cafb9554eb8bbca76c413efa1f",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527621415,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0-ALPHA",
                "2.0.0-ALPHA-rc1",
                "2.0.0-BETA",
                "2.1.0",
                "2.1.0-rc2",
                "2.2.0",
                "2.2.1",
                "2.2.1-rc1",
                "2.2.1-rc2",
                "2.2.1-rc3",
                "2.3.0",
                "2.3.0-rc1",
                "2.4.0",
                "2.4.0-rc1",
                "2.4.1",
                "2.5.0",
                "2.6.0",
                "2.7.0",
                "2.8.0",
                "2.9.0",
                "2.9.1",
                "2.9.2",
                "3.0.0-BETA",
                "tika-2.1.0-rc1",
                "tika-3.0.0-BETA2-rc1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0e1f4e77e63ba1d72714af305e39ee9a208f622a",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527617406,
            "hunks": 38,
            "message": "merge conflicts",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "index 0dffd0851..f48adfb2e 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "@@ -27,2 +27,3 @@ import java.io.InputStream;",
                " import java.io.NotSerializableException;",
                "+import java.nio.file.Path;",
                " import java.util.ArrayList;",
                "@@ -37,2 +38,3 @@ import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.apache.tika.sax.RecursiveParserWrapperHandler;",
                "+import org.apache.tika.utils.ProcessUtils;",
                " import org.xml.sax.ContentHandler;",
                "@@ -55,2 +57,103 @@ class ForkClient {",
                "+    public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory, List<String> java, long serverPulseMillis) throws IOException, TikaException {",
                "+        jar = null;",
                "+        loader = null;",
                "+        boolean ok = false;",
                "+        ProcessBuilder builder = new ProcessBuilder();",
                "+        List<String> command = new ArrayList<>();",
                "+        command.addAll(java);",
                "+        command.add(\"-cp\");",
                "+        String dirString = tikaDir.toAbsolutePath().toString();",
                "+        if (!dirString.endsWith(\"/\")) {",
                "+            dirString += \"/*\";",
                "+        } else {",
                "+            dirString += \"/\";",
                "+        }",
                "+        dirString = ProcessUtils.escapeCommandLine(dirString);",
                "+        command.add(dirString);",
                "+        command.add(\"org.apache.tika.fork.ForkServer\");",
                "+        command.add(Long.toString(serverPulseMillis));",
                "+        builder.command(command);",
                "+        builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "+        try {",
                "+            this.process = builder.start();",
                "+",
                "+            this.output = new DataOutputStream(process.getOutputStream());",
                "+            this.input = new DataInputStream(process.getInputStream());",
                "+            this.error = process.getErrorStream();",
                "+",
                "+            waitForStartBeacon();",
                "+            output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY);",
                "+            output.flush();",
                "+            sendObject(parserFactoryFactory, resources);",
                "+",
                "+            waitForStartBeacon();",
                "+",
                "+            ok = true;",
                "+        } catch (Throwable t) {",
                "+            t.printStackTrace();",
                "+            throw t;",
                "+        } finally {",
                "+            if (!ok) {",
                "+                close();",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     *",
                "+     * @param tikaDir directory containing jars from which to start the child server and load the Parser",
                "+     * @param parserFactoryFactory factory to send to child process to build parser upon arrival",
                "+     * @param classLoader class loader to use for non-parser resource (content-handler, etc.)",
                "+     * @param java java commandline to use for the commandline server",
                "+     * @param serverPulseMillis how often to check if the server has been active",
                "+     * @throws IOException",
                "+     * @throws TikaException",
                "+     */",
                "+    public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory, ClassLoader classLoader,",
                "+                      List<String> java, long serverPulseMillis) throws IOException, TikaException {",
                "+        jar = null;",
                "+        loader = null;",
                "+        boolean ok = false;",
                "+        ProcessBuilder builder = new ProcessBuilder();",
                "+        List<String> command = new ArrayList<>();",
                "+        command.addAll(java);",
                "+        command.add(\"-cp\");",
                "+        String dirString = tikaDir.toAbsolutePath().toString();",
                "+        if (!dirString.endsWith(\"/\")) {",
                "+            dirString += \"/*\";",
                "+        } else {",
                "+            dirString += \"/\";",
                "+        }",
                "+        dirString = ProcessUtils.escapeCommandLine(dirString);",
                "+        command.add(dirString);",
                "+        command.add(\"org.apache.tika.fork.ForkServer\");",
                "+        command.add(Long.toString(serverPulseMillis));",
                "+        builder.command(command);",
                "+        builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "+        try {",
                "+            this.process = builder.start();",
                "+",
                "+            this.output = new DataOutputStream(process.getOutputStream());",
                "+            this.input = new DataInputStream(process.getInputStream());",
                "+            this.error = process.getErrorStream();",
                "+",
                "+            waitForStartBeacon();",
                "+            output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY_LOADER);",
                "+            output.flush();",
                "+            sendObject(parserFactoryFactory, resources);",
                "+            sendObject(classLoader, resources);",
                "+            waitForStartBeacon();",
                "+            ok = true;",
                "+        } catch (Throwable t) {",
                "+            t.printStackTrace();",
                "+            throw t;",
                "+        } finally {",
                "+            if (!ok) {",
                "+                close();",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+",
                "     public ForkClient(ClassLoader loader, Object object, List<String> java, long serverPulseMillis)",
                "@@ -68,4 +171,4 @@ class ForkClient {",
                "             command.add(Long.toString(serverPulseMillis));",
                "-            builder.command(command);",
                "             builder.redirectError(ProcessBuilder.Redirect.INHERIT);",
                "+            builder.command(command);",
                "             this.process = builder.start();",
                "@@ -77,5 +180,7 @@ class ForkClient {",
                "             waitForStartBeacon();",
                "-",
                "+            output.writeByte(ForkServer.INIT_LOADER_PARSER);",
                "+            output.flush();",
                "             sendObject(loader, resources);",
                "             sendObject(object, resources);",
                "+            waitForStartBeacon();",
                "@@ -91,7 +196,11 @@ class ForkClient {",
                "         while (true) {",
                "-            consumeErrorStream();",
                "             int type = input.read();",
                "             if ((byte) type == ForkServer.READY) {",
                "-                consumeErrorStream();",
                "                 return;",
                "+            } else if ((byte)type == ForkServer.FAILED_TO_START) {",
                "+                throw new IOException(\"Server had a catastrophic initialization failure\");",
                "+            } else if (type == -1) {",
                "+                throw new IOException(\"EOF while waiting for start beacon\");",
                "+            } else {",
                "+                throw new IOException(\"Unexpected byte while waiting for start beacon: \"+type);",
                "             }",
                "@@ -105,6 +214,4 @@ class ForkClient {",
                "             while (true) {",
                "-                consumeErrorStream();",
                "                 int type = input.read();",
                "                 if (type == ForkServer.PING) {",
                "-                    consumeErrorStream();",
                "                     return true;",
                "@@ -200,6 +307,4 @@ class ForkClient {",
                "         while (true) {",
                "-            consumeErrorStream();",
                "             int type = input.read();",
                "             if (type == -1) {",
                "-                consumeErrorStream();",
                "                 throw new IOException(",
                "@@ -224,22 +329,2 @@ class ForkClient {",
                "-    /**",
                "-     * Consumes all pending bytes from the standard error stream of the",
                "-     * forked server process, and prints them out to the standard error",
                "-     * stream of this process. This method should be called always before",
                "-     * expecting some output from the server, to prevent the server from",
                "-     * blocking due to a filled up pipe buffer of the error stream.",
                "-     *",
                "-     * @throws IOException if the error stream could not be read",
                "-     */",
                "-    private void consumeErrorStream() throws IOException {",
                "-        int n;",
                "-        while ((n = error.available()) > 0) {",
                "-            byte[] b = new byte[n];",
                "-            n = error.read(b);",
                "-            if (n > 0) {",
                "-                System.err.write(b, 0, n);",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     /**",
                "@@ -285,3 +370,3 @@ class ForkClient {",
                "                     MemoryURLStreamHandlerFactory.class,",
                "-                    MemoryURLStreamRecord.class",
                "+                    MemoryURLStreamRecord.class, TikaException.class",
                "             };",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index 94e8d3592..d95a63d40 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -20,2 +20,3 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.nio.file.Path;",
                " import java.util.ArrayList;",
                "@@ -35,3 +36,4 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.parser.Parser;",
                "-import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+import org.apache.tika.parser.ParserFactoryFactory;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "@@ -45,6 +47,11 @@ public class ForkParser extends AbstractParser {",
                "+    //these are used by the legacy usage",
                "     private final ClassLoader loader;",
                "-",
                "     private final Parser parser;",
                "+    //these are used when the server builds a parser via a directory",
                "+    //of jars, not via legacy bootstrap etc.",
                "+    private final Path tikaBin;",
                "+    private final ParserFactoryFactory parserFactoryFactory;",
                "+",
                "     /** Java command line */",
                "@@ -61,2 +68,32 @@ public class ForkParser extends AbstractParser {",
                "+    /**",
                "+     * If you have a directory with, say, tike-app.jar and you want the child process/server to build a parser",
                "+     * and run it from that -- so that you can keep all of those dependencies out of your client code, use",
                "+     * this initializer.",
                "+     *",
                "+     * @param tikaBin directory containing the tika-app.jar or similar -- full jar including tika-core and all",
                "+     *                desired parsers and dependencies",
                "+     * @param factoryFactory",
                "+     */",
                "+    public ForkParser(Path tikaBin, ParserFactoryFactory factoryFactory) {",
                "+        loader = null;",
                "+        parser = null;",
                "+        this.tikaBin = tikaBin;",
                "+        this.parserFactoryFactory = factoryFactory;",
                "+    }",
                "+",
                "+    /**",
                "+     * <b>EXPERT</b>",
                "+     * @param tikaBin directory containing the tika-app.jar or similar -- full jar including tika-core and all",
                "+     *                desired parsers and dependencies",
                "+     * @param parserFactoryFactory -- the factory to use to generate the parser factory in the child process/server",
                "+     * @param classLoader to use for all classes besides the parser in the child process/server",
                "+     */",
                "+    public ForkParser(Path tikaBin, ParserFactoryFactory parserFactoryFactory, ClassLoader classLoader) {",
                "+        parser = null;",
                "+        loader = classLoader;",
                "+        this.tikaBin = tikaBin;",
                "+        this.parserFactoryFactory = parserFactoryFactory;",
                "+    }",
                "+",
                "     /**",
                "@@ -69,2 +106,4 @@ public class ForkParser extends AbstractParser {",
                "         }",
                "+        this.tikaBin = null;",
                "+        this.parserFactoryFactory = null;",
                "         this.loader = loader;",
                "@@ -128,3 +167,4 @@ public class ForkParser extends AbstractParser {",
                "      * Sets the command used to start the forked server process.",
                "-     * The arguments \"-jar\" and \"/path/to/bootstrap.jar\" are",
                "+     * The arguments \"-jar\" and \"/path/to/bootstrap.jar\"",
                "+     * or \"-cp\" and \"/path/to/tika_bin\" are",
                "      * appended to the given command when starting the process.",
                "@@ -258,3 +298,3 @@ public class ForkParser extends AbstractParser {",
                "             if (client == null && currentlyInUse < poolSize) {",
                "-                client = new ForkClient(loader, parser, java, serverPulseMillis);",
                "+                client = newClient();",
                "             }",
                "@@ -281,2 +321,17 @@ public class ForkParser extends AbstractParser {",
                "+    private ForkClient newClient() throws IOException, TikaException {",
                "+",
                "+        if (loader == null && parser == null && tikaBin != null && parserFactoryFactory != null) {",
                "+            return new ForkClient(tikaBin, parserFactoryFactory, java, serverPulseMillis);",
                "+        } else if (loader != null && parser != null && tikaBin == null && parserFactoryFactory == null) {",
                "+           return new ForkClient(loader, parser, java, serverPulseMillis);",
                "+        } else if (loader != null && parser == null && tikaBin != null && parserFactoryFactory != null) {",
                "+            return new ForkClient(tikaBin, parserFactoryFactory, loader, java, serverPulseMillis);",
                "+        } else {",
                "+            //TODO: make this more useful",
                "+            throw new IllegalStateException(\"Unexpected combination of state items\");",
                "+        }",
                "+",
                "+    }",
                "+",
                "     private synchronized void releaseClient(ForkClient client, boolean alive) {",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index 845113b37..30690b9c6 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -18,2 +18,6 @@ package org.apache.tika.fork;",
                "+import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+import org.xml.sax.SAXException;",
                "+",
                " import java.io.ByteArrayInputStream;",
                "@@ -33,2 +37,4 @@ import java.util.zip.Checksum;",
                " import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+import org.apache.tika.parser.ParserFactoryFactory;",
                "@@ -48,2 +54,8 @@ class ForkServer implements Runnable, Checksum {",
                "+    public static final byte FAILED_TO_START = 5;",
                "+",
                "+    public static final byte INIT_PARSER_FACTORY_FACTORY = 6;",
                "+    public static final byte INIT_LOADER_PARSER = 7;",
                "+    public static final byte INIT_PARSER_FACTORY_FACTORY_LOADER = 8;",
                "+",
                "     //milliseconds to sleep before checking to see if there has been any reading/writing",
                "@@ -86,2 +98,7 @@ class ForkServer implements Runnable, Checksum {",
                "+    //can't be class Parser because then you'd",
                "+    //have to include that in bootstrap jar (legacy mode)",
                "+    private Object parser;",
                "+    private ClassLoader classLoader;",
                "+",
                "     /**",
                "@@ -116,10 +133,16 @@ class ForkServer implements Runnable, Checksum {",
                "         try {",
                "-            output.writeByte(READY);",
                "-            output.flush();",
                "-",
                "-            ClassLoader loader = (ClassLoader) readObject(",
                "-                    ForkServer.class.getClassLoader());",
                "-            Thread.currentThread().setContextClassLoader(loader);",
                "-",
                "-            Object object = readObject(loader);",
                "+            initializeParserAndLoader();",
                "+        } catch (Throwable t) {",
                "+            t.printStackTrace();",
                "+            System.err.flush();",
                "+            try {",
                "+                output.writeByte(FAILED_TO_START);",
                "+                output.flush();",
                "+            } catch (IOException e) {",
                "+                e.printStackTrace();",
                "+                System.err.flush();",
                "+            }",
                "+            return;",
                "+        }",
                "+        try {",
                "             while (true) {",
                "@@ -131,3 +154,3 @@ class ForkServer implements Runnable, Checksum {",
                "                 } else if (request == CALL) {",
                "-                    call(loader, object);",
                "+                    call(classLoader, parser);",
                "                 } else {",
                "@@ -143,2 +166,51 @@ class ForkServer implements Runnable, Checksum {",
                "+    private void initializeParserAndLoader() throws IOException, ClassNotFoundException,",
                "+            TikaException, SAXException {",
                "+        output.writeByte(READY);",
                "+        output.flush();",
                "+",
                "+        int configIndex = input.read();",
                "+        if (configIndex == -1) {",
                "+            throw new TikaException(\"eof! pipe closed?!\");",
                "+        }",
                "+",
                "+        Object firstObject = readObject(",
                "+                ForkServer.class.getClassLoader());",
                "+        switch (configIndex) {",
                "+            case INIT_PARSER_FACTORY_FACTORY:",
                "+                if (firstObject instanceof ParserFactoryFactory) {",
                "+                    //the user has submitted a parser factory, but no class loader",
                "+                    classLoader = ForkServer.class.getClassLoader();",
                "+                    ParserFactory parserFactory = ((ParserFactoryFactory) firstObject).build();",
                "+                    parser = parserFactory.build();",
                "+                } else {",
                "+                    throw new IllegalArgumentException(\"Expecting only one object of class ParserFactoryFactory\");",
                "+                }",
                "+                break;",
                "+            case INIT_LOADER_PARSER:",
                "+                if (firstObject instanceof ClassLoader) {",
                "+                    classLoader = (ClassLoader) firstObject;",
                "+                    Thread.currentThread().setContextClassLoader(classLoader);",
                "+                    //parser from parent process",
                "+                    parser = readObject(classLoader);",
                "+                } else {",
                "+                    throw new IllegalArgumentException(\"Expecting ClassLoader followed by a Parser\");",
                "+                }",
                "+                break;",
                "+            case INIT_PARSER_FACTORY_FACTORY_LOADER:",
                "+                if (firstObject instanceof ParserFactoryFactory) {",
                "+                    //the user has submitted a parser factory and a class loader",
                "+                    ParserFactory parserFactory = ((ParserFactoryFactory) firstObject).build();",
                "+                    parser = parserFactory.build();",
                "+                    classLoader = (ClassLoader) readObject(ForkServer.class.getClassLoader());",
                "+                    Thread.currentThread().setContextClassLoader(classLoader);",
                "+                } else {",
                "+                    throw new IllegalStateException(\"Expecing ParserFactoryFactory followed by a class loader\");",
                "+                }",
                "+                break;",
                "+        }",
                "+        output.writeByte(READY);",
                "+        output.flush();",
                "+    }",
                "+",
                "     private void call(ClassLoader loader, Object object) throws Exception {",
                "@@ -188,3 +260,2 @@ class ForkServer implements Runnable, Checksum {",
                "      *",
                "-     * @param input input stream from which the serialized object is read",
                "      * @param loader class loader to be used for loading referenced classes",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java b/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "new file mode 100644",
                "index 000000000..f40d3ed16",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.tika.fork;",
                "+",
                "+",
                "+",
                "+import org.apache.tika.exception.TikaException;",
                "+import org.apache.tika.parser.ParserFactory;",
                "+",
                "+import java.io.Serializable;",
                "+import java.lang.reflect.Constructor;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Lightweight, easily serializable class that contains enough information",
                "+ * to build a {@link ParserFactory}",
                "+ */",
                "+public class ParserFactoryFactory implements Serializable {",
                "+",
                "+    /** Serial version UID */",
                "+    private static final long serialVersionUID = 4710974869988895410L;",
                "+",
                "+    private final String className;",
                "+    private final Map<String, String> args;",
                "+",
                "+    public ParserFactoryFactory(String className, Map<String, String> args) {",
                "+        this.className = className;",
                "+        this.args = args;",
                "+    }",
                "+",
                "+    public ParserFactory build() throws TikaException {",
                "+        try {",
                "+            Class<?> clazz = Class.forName(className);",
                "+            Constructor<?> con = clazz.getConstructor(Map.class);",
                "+            return (ParserFactory) con.newInstance(args);",
                "+        } catch (ReflectiveOperationException|IllegalStateException e) {",
                "+            throw new TikaException(\"Couldn't create factory\", e);",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java b/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java",
                "new file mode 100644",
                "index 000000000..d00f59de1",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.tika.parser;",
                "+",
                "+import org.apache.tika.config.TikaConfig;",
                "+import org.apache.tika.exception.TikaException;",
                "+import org.xml.sax.SAXException;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Paths;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Factory for an AutoDetectParser",
                "+ */",
                "+public class AutoDetectParserFactory extends ParserFactory {",
                "+",
                "+    /**",
                "+     * Path to a tika-config file.  This must be a literal",
                "+     * file or findable on the classpath.",
                "+     */",
                "+    public static final String TIKA_CONFIG_PATH = \"tika_config_path\";",
                "+",
                "+    public AutoDetectParserFactory(Map<String, String> args) {",
                "+        super(args);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Parser build() throws IOException, SAXException, TikaException {",
                "+        String tikaConfigPath = args.remove(TIKA_CONFIG_PATH);",
                "+        TikaConfig tikaConfig = null;",
                "+        if (tikaConfigPath != null) {",
                "+            if (Files.isReadable(Paths.get(tikaConfigPath))) {",
                "+                tikaConfig = new TikaConfig(Paths.get(tikaConfigPath));",
                "+            } else if (this.getClass().getResource(tikaConfigPath) != null) {",
                "+                try (InputStream is = this.getClass().getResourceAsStream(tikaConfigPath)) {",
                "+                    tikaConfig = new TikaConfig(is);",
                "+                }",
                "+            }",
                "+        }",
                "+        if (tikaConfig == null) {",
                "+            tikaConfig = TikaConfig.getDefaultConfig();",
                "+        }",
                "+        return new AutoDetectParser(tikaConfig);",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "index c8a92e736..ab61785c2 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "@@ -21,2 +21,3 @@ package org.apache.tika.parser;",
                " import org.apache.tika.exception.TikaException;",
                "+import org.xml.sax.SAXException;",
                "@@ -33,3 +34,3 @@ public abstract class ParserFactory {",
                "-    public abstract Parser build() throws IOException, TikaException;",
                "+    public abstract Parser build() throws IOException, SAXException, TikaException;"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "tika-core/src/main/java/org/apache/tika/parser/AutoDetectParserFactory.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4a7bf9a839692b2e430813aa37d49e3a5ad77c95",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527279490,
            "hunks": 4,
            "message": "merge conflicts",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "new file mode 100644",
                "index 000000000..c8a92e736",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.tika.parser;",
                "+",
                "+",
                "+import org.apache.tika.exception.TikaException;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+",
                "+public abstract class ParserFactory {",
                "+",
                "+    final Map<String, String> args;",
                "+",
                "+    public ParserFactory(Map<String, String> args) {",
                "+        this.args = args;",
                "+    }",
                "+",
                "+    public abstract Parser build() throws IOException, TikaException;",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java b/tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java",
                "new file mode 100644",
                "index 000000000..e44ba805e",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java",
                "@@ -0,0 +1,53 @@",
                "+package org.apache.tika.parser;",
                "+",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+import org.apache.tika.exception.TikaException;",
                "+",
                "+import java.io.Serializable;",
                "+import java.lang.reflect.Constructor;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Lightweight, easily serializable class that contains enough information",
                "+ * to build a {@link ParserFactory}",
                "+ */",
                "+public class ParserFactoryFactory implements Serializable {",
                "+",
                "+    /** Serial version UID */",
                "+    private static final long serialVersionUID = 4710974869988895410L;",
                "+",
                "+    private final String className;",
                "+    private final Map<String, String> args;",
                "+",
                "+    public ParserFactoryFactory(String className, Map<String, String> args) {",
                "+        this.className = className;",
                "+        this.args = args;",
                "+    }",
                "+",
                "+    public ParserFactory build() throws TikaException {",
                "+        try {",
                "+            Class<?> clazz = Class.forName(className);",
                "+            Constructor<?> con = clazz.getConstructor(Map.class);",
                "+            return (ParserFactory) con.newInstance(args);",
                "+        } catch (ReflectiveOperationException|IllegalStateException e) {",
                "+            throw new TikaException(\"Couldn't create factory\", e);",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java b/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "new file mode 100644",
                "index 000000000..588a00bd2",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "@@ -0,0 +1,25 @@",
                "+package org.apache.tika.utils;",
                "+",
                "+",
                "+public class ProcessUtils {",
                "+",
                "+    /**",
                "+     * This should correctly put double-quotes around an argument if",
                "+     * ProcessBuilder doesn't seem to work (as it doesn't",
                "+     * on paths with spaces on Windows)",
                "+     *",
                "+     * @param arg",
                "+     * @return",
                "+     */",
                "+    public static String escapeCommandLine(String arg) {",
                "+        if (arg == null) {",
                "+            return arg;",
                "+        }",
                "+        //need to test for \" \" on windows, can't just add double quotes",
                "+        //across platforms.",
                "+        if (arg.contains(\" \") && SystemUtils.IS_OS_WINDOWS) {",
                "+            arg = \"\\\"\" + arg + \"\\\"\";",
                "+        }",
                "+        return arg;",
                "+    }",
                "+}",
                "diff --git a/tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java b/tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java",
                "new file mode 100644",
                "index 000000000..889f62c6c",
                "--- /dev/null",
                "+++ b/tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java",
                "@@ -0,0 +1,61 @@",
                "+/**",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.tika.utils;",
                "+",
                "+/**",
                "+ * Copied from commons-lang to avoid requiring the dependency",
                "+ */",
                "+public class SystemUtils {",
                "+",
                "+    private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\";",
                "+    public static final String OS_NAME = getSystemProperty(\"os.name\");",
                "+    public static final String OS_VERSION = getSystemProperty(\"os.version\");",
                "+    public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\");",
                "+    public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\");",
                "+    public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\");",
                "+    public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\");",
                "+    public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\");",
                "+    public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\");",
                "+    public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\");",
                "+    public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\");",
                "+    public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\");",
                "+    public static final boolean IS_OS_UNIX;",
                "+    public static final boolean IS_OS_WINDOWS;",
                "+",
                "+",
                "+    private static String getSystemProperty(String property) {",
                "+        try {",
                "+            return System.getProperty(property);",
                "+        } catch (SecurityException var2) {",
                "+            return null;",
                "+        }",
                "+    }",
                "+",
                "+    private static boolean getOSMatchesName(String osNamePrefix) {",
                "+        return isOSNameMatch(OS_NAME, osNamePrefix);",
                "+    }",
                "+",
                "+    static boolean isOSNameMatch(String osName, String osNamePrefix) {",
                "+        return osName == null ? false : osName.startsWith(osNamePrefix);",
                "+    }",
                "+",
                "+    static {",
                "+        IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX || IS_OS_SOLARIS || IS_OS_SUN_OS;",
                "+        IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX);",
                "+    }",
                "+",
                "+}"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/parser/ParserFactory.java",
                "tika-core/src/main/java/org/apache/tika/parser/ParserFactoryFactory.java",
                "tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "tika-core/src/main/java/org/apache/tika/utils/SystemUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5ee06ca4799a3195c1b9b1b2078842685f8945f6",
            "repository": "https://github.com/apache/tika",
            "timestamp": 1527796745,
            "hunks": 2,
            "message": "merge conflicts",
            "diff": [
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "index d95a63d40..3df982651 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "@@ -36,4 +36,3 @@ import org.apache.tika.parser.ParseContext;",
                " import org.apache.tika.parser.Parser;",
                "-import org.apache.tika.parser.ParserFactory;",
                "-import org.apache.tika.parser.ParserFactoryFactory;",
                "+import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;",
                " import org.apache.tika.sax.TeeContentHandler;",
                "diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "index 30690b9c6..6add9f418 100644",
                "--- a/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "@@ -36,5 +36,2 @@ import java.util.zip.Checksum;",
                "-import org.apache.tika.exception.TikaException;",
                "-import org.apache.tika.parser.ParserFactory;",
                "-import org.apache.tika.parser.ParserFactoryFactory;"
            ],
            "changed_files": [
                "tika-core/src/main/java/org/apache/tika/fork/ForkParser.java",
                "tika-core/src/main/java/org/apache/tika/fork/ForkServer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.19",
                "1.19.1",
                "1.19.1-rc1",
                "1.20",
                "1.21",
                "1.22",
                "1.23",
                "1.23-rc1",
                "1.24",
                "1.24.1",
                "1.25",
                "1.26",
                "1.27",
                "1.28",
                "1.28-rc2",
                "1.28-rc3",
                "1.28.1",
                "1.28.1-rc1",
                "1.28.2",
                "1.28.3",
                "1.28.3-rc1",
                "1.28.4",
                "1.28.5",
                "tika-1.28.2-rc1"
            ],
            "matched_rules": []
        }
    ]
}
