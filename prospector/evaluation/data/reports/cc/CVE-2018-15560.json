{
    "advisory_record": {
        "cve_id": "CVE-2018-15560",
        "description": "PyCryptodome before 3.6.6 has an integer overflow in the data_len variable in AESNI.c, related to the AESNI_encrypt and AESNI_decrypt functions, leading to the mishandling of messages shorter than 16 bytes.",
        "reserved_timestamp": 1534636800,
        "published_timestamp": 1534723200,
        "updated_timestamp": 1534726621,
        "repository_url": null,
        "references": {
            "": 100,
            "https://github.com/Legrandin/pycryptodome/issues/198": 9,
            "commit::d1739c62b9b845f8a5b342de08d6bf6e2722d247": 5,
            "https://whitehatck01.blogspot.com/2018/08/integer-overflow-vulnerability-in.html": 4,
            "commit::7c57e7d94cb84544f97472761b2d95d99291a564": 3,
            "commit::e1c7272f732abf3f2e2ea1326444ccbd339d17f2": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "commit::b05efe34912a9250f185d160687616af93c3e259": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "n/a"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "AESNI_decrypt",
            "data_len",
            "AESNI_encrypt",
            "PyCryptodome",
            "AESNI"
        ],
        "keywords": [
            "function",
            "lead",
            "variable",
            "message",
            "have",
            "mishandling",
            "byte",
            "relate",
            "overflow"
        ],
        "files_extension": [
            "c"
        ],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "d1739c62b9b845f8a5b342de08d6bf6e2722d247",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1534520396,
            "hunks": 5,
            "message": "Fix issue #198: AESNI breaks with messages shorter than 16 bytes",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_AES.py b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "index e6dd69f6..3733fb98 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "@@ -1267,2 +1267,23 @@ class TestMultipleBlocks(unittest.TestCase):",
                "+class TestIncompleteBlocks(unittest.TestCase):",
                "+",
                "+    def __init__(self, use_aesni):",
                "+        unittest.TestCase.__init__(self)",
                "+        self.use_aesni = use_aesni",
                "+",
                "+    def runTest(self):",
                "+        # Encrypt data with length not multiple of 16 bytes",
                "+",
                "+        cipher = AES.new(b'4'*16, AES.MODE_ECB, use_aesni=self.use_aesni)",
                "+",
                "+        for msg_len in range(1, 16):",
                "+            self.assertRaises(ValueError, cipher.encrypt, b'1' * msg_len)",
                "+            self.assertRaises(ValueError, cipher.encrypt, b'1' * (msg_len+16))",
                "+            self.assertRaises(ValueError, cipher.decrypt, b'1' * msg_len)",
                "+            self.assertRaises(ValueError, cipher.decrypt, b'1' * (msg_len+16))",
                "+",
                "+        self.assertEqual(cipher.encrypt(b''), b'')",
                "+        self.assertEqual(cipher.decrypt(b''), b'')",
                "+",
                "+",
                " def get_tests(config={}):",
                "@@ -1273,2 +1294,3 @@ def get_tests(config={}):",
                "     tests += [ TestMultipleBlocks(False) ]",
                "+    tests += [ TestIncompleteBlocks(False) ]",
                "     if _cpu_features.have_aes_ni():",
                "@@ -1277,2 +1299,3 @@ def get_tests(config={}):",
                "         tests += [ TestMultipleBlocks(True) ]",
                "+        tests += [ TestIncompleteBlocks(True) ]",
                "     else:",
                "diff --git a/src/AESNI.c b/src/AESNI.c",
                "index 7c1a9232..38acfa0c 100644",
                "--- a/src/AESNI.c",
                "+++ b/src/AESNI.c",
                "@@ -224,3 +224,3 @@ static int AESNI_encrypt(const BlockBase *bb, const uint8_t *in, uint8_t *out, s",
                "     /** There are 7 blocks or fewer left **/",
                "-    for (;data_len>0; data_len-=16, in+=16, out+=16) {",
                "+    for (;data_len>=BLOCK_SIZE; data_len-=BLOCK_SIZE, in+=BLOCK_SIZE, out+=BLOCK_SIZE) {",
                "         __m128i pt, data;",
                "@@ -333,3 +333,3 @@ static int AESNI_decrypt(const BlockBase *bb, const uint8_t *in, uint8_t *out, s",
                "     /** There are 7 blocks or fewer left **/",
                "-    for (;data_len>0; data_len-=16, in+=16, out+=16) {",
                "+    for (;data_len>=BLOCK_SIZE; data_len-=BLOCK_SIZE, in+=BLOCK_SIZE, out+=BLOCK_SIZE) {",
                "         __m128i ct, data;"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Cipher/test_AES.py",
                "src/AESNI.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "198": "segmentation fault in AESNI_decrypt.part.1 #199 set pycryptodome version to 3.6.6 to fix a recently discovered vulnerability ethereum/eth-hash#21 Relax pycryptodome requirements ahknight/httpsig#13 Use pycryptodome 3.6.6 on Travis Nextdoor/ndkale#56 Bump pycryptodome from 3.4.3 to 3.6.6 in /testing Haneenhussain1/internet-technologies-1440#2 set pycryptodome version to >= 3.6.6 Leiaz/python-awox-mesh-light#27 set pycryptodome version to >= 3.6.6 umeshchaudhary/cherrypyrest#1 set pycryptodome version to >= 3.6.6 BobDu/aes-sha1prng#2"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 198",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 5 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI_decrypt, data_len, AESNI_encrypt, AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/AESNI.c",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 198 contains some security-related terms: vulnerability",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: byte, message",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 198",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1c7272f732abf3f2e2ea1326444ccbd339d17f2",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527967892,
            "hunks": 27,
            "message": "With AESNI, encrypt 8 blocks in parallel",
            "diff": [
                "diff --git a/lib/Crypto/Cipher/__init__.py b/lib/Crypto/Cipher/__init__.py",
                "index e71c4da7..efce938d 100644",
                "--- a/lib/Crypto/Cipher/__init__.py",
                "+++ b/lib/Crypto/Cipher/__init__.py",
                "@@ -1 +1,25 @@",
                "+#",
                "+# A block cipher is instantiated as a combination of:",
                "+# 1. A base cipher (such as AES)",
                "+# 2. A mode of operation (such as CBC)",
                "+#",
                "+# Both items are implemented as C modules.",
                "+#",
                "+# The API of #1 is (replace \"AES\" with the name of the actual cipher):",
                "+# - AES_start_operaion(key) --> base_cipher_state",
                "+# - AES_encrypt(base_cipher_state, in, out, length)",
                "+# - AES_decrypt(base_cipher_state, in, out, length)",
                "+# - AES_stop_operation(base_cipher_state)",
                "+#",
                "+# Where base_cipher_state is AES_State, a struct with BlockBase (set of",
                "+# pointers to encrypt/decrypt/stop) followed by cipher-specific data.",
                "+#",
                "+# The API of #2 is (replace \"CBC\" with the name of the actual mode):",
                "+# - CBC_start_operation(base_cipher_state) --> mode_state",
                "+# - CBC_encrypt(mode_state, in, out, length)",
                "+# - CBC_decrypt(mode_state, in, out, length)",
                "+# - CBC_stop_operation(mode_state)",
                "+#",
                "+# where mode_state is a a pointer to base_cipher_state plus mode-specific data.",
                "+",
                " import os",
                "diff --git a/src/AESNI.c b/src/AESNI.c",
                "index d096149f..28bbe6e6 100644",
                "--- a/src/AESNI.c",
                "+++ b/src/AESNI.c",
                "@@ -35,2 +35,3 @@",
                " #include <stdlib.h>",
                "+#include <stdio.h>",
                "@@ -42,4 +43,4 @@ FAKE_INIT(raw_aesni)",
                " struct block_state {",
                "-    __m128i *erk;   /** 11, 13 or 15 elements **/",
                "-    __m128i *drk;",
                "+    __m128i *erk;   /** Round keys for encryption (11, 13 or 15 elements) **/",
                "+    __m128i *drk;   /** Round keys for decryption **/",
                "     unsigned rounds;",
                "@@ -47,2 +48,7 @@ struct block_state {",
                "+typedef struct {",
                "+    BlockBase  base_state;",
                "+    struct block_state algo_state;",
                "+} AESNI_State;",
                "+",
                " /*",
                "@@ -133,9 +139,231 @@ static int expand_key(__m128i *erk, __m128i *drk, const uint8_t *key, unsigned N",
                "-static void block_finalize(struct block_state* state)",
                "+static int AESNI_encrypt(const BlockBase *bb, const uint8_t *in, uint8_t *out, size_t data_len)",
                " {",
                "-    align_free(state->erk);",
                "-    align_free(state->drk);",
                "+    unsigned rounds;",
                "+    __m128i r[14+1];",
                "+    const struct block_state *state;",
                "+    unsigned k;",
                "+",
                "+    if ((bb == NULL) || (in == NULL) || (out == NULL))",
                "+        return ERR_NULL;",
                "+",
                "+    state = &((AESNI_State*)bb)->algo_state;",
                "+    rounds = state->rounds;",
                "+",
                "+    for (k=0; k<=rounds; k++) {",
                "+        r[k] = state->erk[k];",
                "+    }",
                "+",
                "+    /** Encrypt 8 blocks (128 bytes) in parallel, when possible **/",
                "+    for (; data_len >= 8*16; data_len -= 8*16) {",
                "+        __m128i pt[8], data[8];",
                "+        unsigned j;",
                "+",
                "+        pt[0] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        pt[1] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        pt[2] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        pt[3] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        pt[4] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        pt[5] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        pt[6] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        pt[7] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+",
                "+        data[0] = _mm_xor_si128(pt[0], r[0]);",
                "+        data[1] = _mm_xor_si128(pt[1], r[0]);",
                "+        data[2] = _mm_xor_si128(pt[2], r[0]);",
                "+        data[3] = _mm_xor_si128(pt[3], r[0]);",
                "+        data[4] = _mm_xor_si128(pt[4], r[0]);",
                "+        data[5] = _mm_xor_si128(pt[5], r[0]);",
                "+        data[6] = _mm_xor_si128(pt[6], r[0]);",
                "+        data[7] = _mm_xor_si128(pt[7], r[0]);",
                "+",
                "+        for (j=1; j<10; j++) {",
                "+            data[0] = _mm_aesenc_si128(data[0], r[j]);",
                "+            data[1] = _mm_aesenc_si128(data[1], r[j]);",
                "+            data[2] = _mm_aesenc_si128(data[2], r[j]);",
                "+            data[3] = _mm_aesenc_si128(data[3], r[j]);",
                "+            data[4] = _mm_aesenc_si128(data[4], r[j]);",
                "+            data[5] = _mm_aesenc_si128(data[5], r[j]);",
                "+            data[6] = _mm_aesenc_si128(data[6], r[j]);",
                "+            data[7] = _mm_aesenc_si128(data[7], r[j]);",
                "+        }",
                "+    ",
                "+        for (; j<rounds; j++) {",
                "+            assert(0);",
                "+            data[0] = _mm_aesenc_si128(data[0], r[j]);",
                "+            data[1] = _mm_aesenc_si128(data[1], r[j]);",
                "+            data[2] = _mm_aesenc_si128(data[2], r[j]);",
                "+            data[3] = _mm_aesenc_si128(data[3], r[j]);",
                "+            data[4] = _mm_aesenc_si128(data[4], r[j]);",
                "+            data[5] = _mm_aesenc_si128(data[5], r[j]);",
                "+            data[6] = _mm_aesenc_si128(data[6], r[j]);",
                "+            data[7] = _mm_aesenc_si128(data[7], r[j]);",
                "+        }",
                "+        ",
                "+        data[0] = _mm_aesenclast_si128(data[0], r[rounds]);",
                "+        data[1] = _mm_aesenclast_si128(data[1], r[rounds]);",
                "+        data[2] = _mm_aesenclast_si128(data[2], r[rounds]);",
                "+        data[3] = _mm_aesenclast_si128(data[3], r[rounds]);",
                "+        data[4] = _mm_aesenclast_si128(data[4], r[rounds]);",
                "+        data[5] = _mm_aesenclast_si128(data[5], r[rounds]);",
                "+        data[6] = _mm_aesenclast_si128(data[6], r[rounds]);",
                "+        data[7] = _mm_aesenclast_si128(data[7], r[rounds]);",
                "+",
                "+        _mm_storeu_si128((__m128i*)out, data[0]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[1]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[2]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[3]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[4]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[5]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[6]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[7]); out+=16;",
                "+    }",
                "+",
                "+    /** There are 7 blocks or fewer left **/",
                "+    for (;data_len>0; data_len-=16, in+=16, out+=16) {",
                "+        __m128i pt, data;",
                "+        unsigned i;",
                "+",
                "+        pt = _mm_loadu_si128((__m128i*)in);",
                "+        data = _mm_xor_si128(pt, r[0]);",
                "+        for (i=1; i<10; i++) {",
                "+            data = _mm_aesenc_si128(data, r[i]);",
                "+        }",
                "+        for (; i<rounds; i+=2) {",
                "+            data = _mm_aesenc_si128(data, r[i]);",
                "+            data = _mm_aesenc_si128(data, r[i+1]);",
                "+        }",
                "+        data = _mm_aesenclast_si128(data, r[rounds]);",
                "+        _mm_storeu_si128((__m128i*)out, data);",
                "+    }",
                "+",
                "+    if (data_len) {",
                "+        return ERR_NOT_ENOUGH_DATA;",
                "+    }",
                "+",
                "+    return 0;",
                "+}",
                "+",
                "+static int AESNI_decrypt(const BlockBase *bb, const uint8_t *in, uint8_t *out, size_t data_len)",
                "+{",
                "+    unsigned rounds;",
                "+    __m128i r[14+1];",
                "+    const struct block_state *state;",
                "+    unsigned k;",
                "+",
                "+    if ((bb == NULL) || (in == NULL) || (out == NULL))",
                "+        return ERR_NULL;",
                "+",
                "+    state = &((AESNI_State*)bb)->algo_state;",
                "+    rounds = state->rounds;",
                "+",
                "+    for (k=0; k<=rounds; k++) {",
                "+        r[k] = state->drk[k];",
                "+    }",
                "+",
                "+    /** Decrypt 8 blocks (128 bytes) in parallel, when possible **/",
                "+    for (; data_len >= 8*16; data_len -= 8*16) {",
                "+        __m128i ct[8], data[8];",
                "+        unsigned j;",
                "+",
                "+        ct[0] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        ct[1] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        ct[2] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        ct[3] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        ct[4] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        ct[5] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        ct[6] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+        ct[7] = _mm_loadu_si128((__m128i*)in); in+=16;",
                "+",
                "+        data[0] = _mm_xor_si128(ct[0], r[0]);",
                "+        data[1] = _mm_xor_si128(ct[1], r[0]);",
                "+        data[2] = _mm_xor_si128(ct[2], r[0]);",
                "+        data[3] = _mm_xor_si128(ct[3], r[0]);",
                "+        data[4] = _mm_xor_si128(ct[4], r[0]);",
                "+        data[5] = _mm_xor_si128(ct[5], r[0]);",
                "+        data[6] = _mm_xor_si128(ct[6], r[0]);",
                "+        data[7] = _mm_xor_si128(ct[7], r[0]);",
                "+",
                "+        for (j=1; j<10; j++) {",
                "+            data[0] = _mm_aesdec_si128(data[0], r[j]);",
                "+            data[1] = _mm_aesdec_si128(data[1], r[j]);",
                "+            data[2] = _mm_aesdec_si128(data[2], r[j]);",
                "+            data[3] = _mm_aesdec_si128(data[3], r[j]);",
                "+            data[4] = _mm_aesdec_si128(data[4], r[j]);",
                "+            data[5] = _mm_aesdec_si128(data[5], r[j]);",
                "+            data[6] = _mm_aesdec_si128(data[6], r[j]);",
                "+            data[7] = _mm_aesdec_si128(data[7], r[j]);",
                "+        }",
                "+    ",
                "+        for (; j<rounds; j++) {",
                "+            assert(0);",
                "+            data[0] = _mm_aesdec_si128(data[0], r[j]);",
                "+            data[1] = _mm_aesdec_si128(data[1], r[j]);",
                "+            data[2] = _mm_aesdec_si128(data[2], r[j]);",
                "+            data[3] = _mm_aesdec_si128(data[3], r[j]);",
                "+            data[4] = _mm_aesdec_si128(data[4], r[j]);",
                "+            data[5] = _mm_aesdec_si128(data[5], r[j]);",
                "+            data[6] = _mm_aesdec_si128(data[6], r[j]);",
                "+            data[7] = _mm_aesdec_si128(data[7], r[j]);",
                "+        }",
                "+        ",
                "+        data[0] = _mm_aesdeclast_si128(data[0], r[rounds]);",
                "+        data[1] = _mm_aesdeclast_si128(data[1], r[rounds]);",
                "+        data[2] = _mm_aesdeclast_si128(data[2], r[rounds]);",
                "+        data[3] = _mm_aesdeclast_si128(data[3], r[rounds]);",
                "+        data[4] = _mm_aesdeclast_si128(data[4], r[rounds]);",
                "+        data[5] = _mm_aesdeclast_si128(data[5], r[rounds]);",
                "+        data[6] = _mm_aesdeclast_si128(data[6], r[rounds]);",
                "+        data[7] = _mm_aesdeclast_si128(data[7], r[rounds]);",
                "+",
                "+        _mm_storeu_si128((__m128i*)out, data[0]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[1]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[2]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[3]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[4]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[5]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[6]); out+=16;",
                "+        _mm_storeu_si128((__m128i*)out, data[7]); out+=16;",
                "+    }",
                "+",
                "+    /** There are 7 blocks or fewer left **/",
                "+    for (;data_len>0; data_len-=16, in+=16, out+=16) {",
                "+        __m128i ct, data;",
                "+        unsigned i;",
                "+",
                "+        ct = _mm_loadu_si128((__m128i*)in);",
                "+        data = _mm_xor_si128(ct, r[0]);",
                "+        for (i=1; i<10; i++) {",
                "+            data = _mm_aesdec_si128(data, r[i]);",
                "+        }",
                "+        for (; i<rounds; i+=2) {",
                "+            data = _mm_aesdec_si128(data, r[i]);",
                "+            data = _mm_aesdec_si128(data, r[i+1]);",
                "+        }",
                "+        data = _mm_aesdeclast_si128(data, r[rounds]);",
                "+        _mm_storeu_si128((__m128i*)out, data);",
                "+    }",
                "+",
                "+    if (data_len) {",
                "+        return ERR_NOT_ENOUGH_DATA;",
                "+    }",
                "+",
                "+    return 0;",
                "+}",
                "+",
                "+EXPORT_SYM int AESNI_stop_operation(BlockBase *bb)",
                "+{",
                "+    AESNI_State *state;",
                "+",
                "+    if (NULL == bb)",
                "+        return ERR_NULL;",
                "+",
                "+    state = (AESNI_State*)bb;",
                "+    align_free(state->algo_state.erk);",
                "+    align_free(state->algo_state.drk);",
                "+    free(state);",
                "+    return 0;",
                " }",
                "-static int block_init(struct block_state* state, const uint8_t* key, size_t keylen)",
                "+EXPORT_SYM int AESNI_start_operation(const uint8_t key[], size_t key_len, AESNI_State **pResult)",
                " {",
                "@@ -144,4 +372,9 @@ static int block_init(struct block_state* state, const uint8_t* key, size_t keyl",
                "     int result;",
                "+    struct block_state *state;",
                "+    BlockBase *block_base;",
                "+    ",
                "+    if ((NULL == key) || (NULL == pResult))",
                "+        return ERR_NULL;",
                "-    switch (keylen) {",
                "+    switch (key_len) {",
                "         case 16: Nr = 10; break;",
                "@@ -149,5 +382,16 @@ static int block_init(struct block_state* state, const uint8_t* key, size_t keyl",
                "         case 32: Nr = 14; break;",
                "-        default: abort();",
                "+        default: return ERR_KEY_SIZE;",
                "     }",
                "+    ",
                "+    *pResult= calloc(1, sizeof(AESNI_State));",
                "+    if (NULL == *pResult)",
                "+        return ERR_MEMORY;",
                "+    ",
                "+    block_base = &((*pResult)->base_state);",
                "+    block_base->encrypt = &AESNI_encrypt;",
                "+    block_base->decrypt = &AESNI_decrypt;",
                "+    block_base->destructor = &AESNI_stop_operation;",
                "+    block_base->block_len = BLOCK_SIZE;",
                "+    state = &((*pResult)->algo_state);",
                "     state->rounds = Nr;",
                "@@ -165,3 +409,3 @@ static int block_init(struct block_state* state, const uint8_t* key, size_t keyl",
                "-    result = expand_key(state->erk, state->drk, key, (unsigned)keylen/4, Nr);",
                "+    result = expand_key(state->erk, state->drk, key, (unsigned)key_len/4, Nr);",
                "     if (result) {",
                "@@ -172,3 +416,5 @@ static int block_init(struct block_state* state, const uint8_t* key, size_t keyl",
                " error:",
                "-    block_finalize(state);",
                "+    align_free(state->erk);",
                "+    align_free(state->drk);",
                "+    free(*pResult);",
                "     return result;",
                "@@ -176,59 +422,23 @@ error:",
                "-static void block_encrypt(struct block_state* state, const uint8_t* in, uint8_t* out)",
                "-{",
                "-    __m128i pt, data;",
                "-    unsigned rounds = state->rounds;",
                "-",
                "-    pt = _mm_loadu_si128((__m128i*)in);",
                "-    data = _mm_xor_si128(pt, state->erk[0]);",
                "-    data = _mm_aesenc_si128(data, state->erk[1]);",
                "-    data = _mm_aesenc_si128(data, state->erk[2]);",
                "-    data = _mm_aesenc_si128(data, state->erk[3]);",
                "-    data = _mm_aesenc_si128(data, state->erk[4]);",
                "-    data = _mm_aesenc_si128(data, state->erk[5]);",
                "-    data = _mm_aesenc_si128(data, state->erk[6]);",
                "-    data = _mm_aesenc_si128(data, state->erk[7]);",
                "-    data = _mm_aesenc_si128(data, state->erk[8]);",
                "-    data = _mm_aesenc_si128(data, state->erk[9]);",
                "-    if (rounds > 10) {",
                "-        data = _mm_aesenc_si128(data, state->erk[10]);",
                "-        data = _mm_aesenc_si128(data, state->erk[11]);",
                "-        if (rounds > 12) {",
                "-            data = _mm_aesenc_si128(data, state->erk[12]);",
                "-            data = _mm_aesenc_si128(data, state->erk[13]);",
                "-        }",
                "-    }",
                "-    data = _mm_aesenclast_si128(data, state->erk[rounds]);",
                "-    _mm_storeu_si128((__m128i*)out, data);",
                "-}",
                "-static void block_decrypt(struct block_state* state, const uint8_t* in, uint8_t* out)",
                "+#ifdef MAIN",
                "+#include <stdio.h>",
                "+int main(void)",
                " {",
                "-    __m128i ct, data;",
                "-    unsigned rounds;",
                "+    void *c, *d;",
                "+    uint8_t key[16] = { 0 };",
                "+    struct block_state *s;",
                "+    int i;",
                "+    int q = 1000000*16;",
                "-    rounds = state->rounds;",
                "-    ct = _mm_loadu_si128((__m128i*)in);",
                "-    data = _mm_xor_si128(ct, state->drk[0]);",
                "-    data = _mm_aesdec_si128(data, state->drk[1]);",
                "-    data = _mm_aesdec_si128(data, state->drk[2]);",
                "-    data = _mm_aesdec_si128(data, state->drk[3]);",
                "-    data = _mm_aesdec_si128(data, state->drk[4]);",
                "-    data = _mm_aesdec_si128(data, state->drk[5]);",
                "-    data = _mm_aesdec_si128(data, state->drk[6]);",
                "-    data = _mm_aesdec_si128(data, state->drk[7]);",
                "-    data = _mm_aesdec_si128(data, state->drk[8]);",
                "-    data = _mm_aesdec_si128(data, state->drk[9]);",
                "-    if (rounds > 10) {",
                "-        data = _mm_aesdec_si128(data, state->drk[10]);",
                "-        data = _mm_aesdec_si128(data, state->drk[11]);",
                "-        if (rounds > 12) {",
                "-            data = _mm_aesdec_si128(data, state->drk[12]);",
                "-            data = _mm_aesdec_si128(data, state->drk[13]);",
                "-        }",
                "-    }",
                "-    data = _mm_aesdeclast_si128(data, state->drk[rounds]);",
                "-    _mm_storeu_si128((__m128i*)out, data);",
                "+    AESNI_start_operation(key, 16, &s);",
                "+    c = malloc(q);",
                "+    d = malloc(q);",
                "+  ",
                "+    for (i=0; i<1000; i++) ",
                "+        AESNI_encrypt((void*)s, c, d, q);",
                "+    ",
                "+    printf(\"Done.\\n\");",
                "+    return 0;",
                " }",
                "-",
                "-#include \"block_common.c\"",
                "+#endif",
                "diff --git a/src/block_base.h b/src/block_base.h",
                "index 2e2b983e..248beb84 100644",
                "--- a/src/block_base.h",
                "+++ b/src/block_base.h",
                "@@ -19,2 +19,3 @@ struct block_state;",
                " #ifdef MODULE_NAME",
                "+",
                " #ifndef NON_STANDARD_START_OPERATION",
                "@@ -22,5 +23,10 @@ static int block_init(struct block_state *state, const uint8_t *key, size_t keyl",
                " #endif",
                "-static void block_finalize(struct block_state* self);",
                "+",
                "+#ifndef NON_STANDARD_ENCRYPT_OPERATION",
                " static void block_encrypt(struct block_state *self, const uint8_t *in, uint8_t *out);",
                "+#endif",
                "+",
                " static void block_decrypt(struct block_state *self, const uint8_t *in, uint8_t *out);",
                "+static void block_finalize(struct block_state* self);",
                "+",
                " #endif",
                "diff --git a/src/block_common.c b/src/block_common.c",
                "index 70e75c22..169200a6 100644",
                "--- a/src/block_common.c",
                "+++ b/src/block_common.c",
                "@@ -49,2 +49,4 @@ static int CIPHER_ENCRYPT",
                " {",
                "+    size_t block_len;",
                "+",
                "     if ((state == NULL) || (in == NULL) || (out == NULL))",
                "@@ -52,6 +54,12 @@ static int CIPHER_ENCRYPT",
                "-    if (data_len != state->block_len)",
                "-        return ERR_NOT_ENOUGH_DATA;",
                "+    block_len = state->block_len;",
                "-    block_encrypt(&((CIPHER_STATE_TYPE*)state)->algo_state, (uint8_t*)in, out);",
                "+    for (; data_len>=block_len; data_len-=block_len) {",
                "+        block_encrypt(&((CIPHER_STATE_TYPE*)state)->algo_state, (uint8_t*)in, out);",
                "+        in += block_len;",
                "+        out += block_len;",
                "+    }",
                "+",
                "+    if (data_len)",
                "+        return ERR_NOT_ENOUGH_DATA;",
                "@@ -63,2 +71,4 @@ static int CIPHER_DECRYPT",
                " {",
                "+    size_t block_len;",
                "+",
                "     if ((state == NULL) || (in == NULL) || (out == NULL))",
                "@@ -66,6 +76,13 @@ static int CIPHER_DECRYPT",
                "-    if (data_len != state->block_len)",
                "-        return ERR_NOT_ENOUGH_DATA;",
                "+    block_len = state->block_len;",
                "-    block_decrypt(&((CIPHER_STATE_TYPE*)state)->algo_state, (uint8_t*)in, out);",
                "+    for (; data_len>=block_len; data_len-=block_len) {",
                "+        block_decrypt(&((CIPHER_STATE_TYPE*)state)->algo_state, (uint8_t*)in, out);",
                "+        in += block_len;",
                "+        out += block_len;",
                "+    }",
                "+",
                "+    if (data_len)",
                "+        return ERR_NOT_ENOUGH_DATA;",
                "+    ",
                "     return 0;",
                "diff --git a/src/raw_ecb.c b/src/raw_ecb.c",
                "index b6687e2b..f59beb57 100644",
                "--- a/src/raw_ecb.c",
                "+++ b/src/raw_ecb.c",
                "@@ -55,4 +55,2 @@ EXPORT_SYM int ECB_encrypt(EcbModeState *ecbState,",
                " {",
                "-    size_t block_len;",
                "-",
                "     if ((NULL == ecbState) || (NULL == in) || (NULL == out))",
                "@@ -60,20 +58,3 @@ EXPORT_SYM int ECB_encrypt(EcbModeState *ecbState,",
                "-    block_len = ecbState->block_len;",
                "-",
                "-    while (data_len > 0) {",
                "-        int result;",
                "-",
                "-        if (data_len < block_len)",
                "-            return ERR_NOT_ENOUGH_DATA;",
                "-",
                "-        result = ecbState->encrypt((BlockBase*)ecbState, in, out, block_len);",
                "-        if (result)",
                "-            return result;",
                "-",
                "-        data_len -= block_len;",
                "-        in += block_len;",
                "-        out += block_len;",
                "-    }",
                "-",
                "-    return 0;",
                "+    return ecbState->encrypt((BlockBase*)ecbState, in, out, data_len);",
                " }",
                "@@ -85,25 +66,6 @@ EXPORT_SYM int ECB_decrypt(EcbModeState *ecbState,",
                " {",
                "-    size_t block_len;",
                "-",
                "     if ((NULL == ecbState) || (NULL == in) || (NULL == out))",
                "         return ERR_NULL;",
                "-",
                "-    block_len = ecbState->block_len;",
                "-",
                "-    while (data_len > 0) {",
                "-        int result;",
                "-",
                "-        if (data_len < block_len)",
                "-            return ERR_NOT_ENOUGH_DATA;",
                "-",
                "-        result = ecbState->decrypt((BlockBase*)ecbState, in, out, block_len);",
                "-        if (result)",
                "-            return result;",
                "-",
                "-        data_len -= block_len;",
                "-        in += block_len;",
                "-        out += block_len;",
                "-    }",
                "-",
                "-    return 0;",
                "+    ",
                "+    return ecbState->decrypt((BlockBase*)ecbState, in, out, data_len);",
                " }"
            ],
            "changed_files": [
                "lib/Crypto/Cipher/__init__.py",
                "src/AESNI.c",
                "src/block_base.h",
                "src/block_common.c",
                "src/raw_ecb.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI_decrypt, data_len, AESNI_encrypt, AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/AESNI.c",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8f9971aa3243fbe79c583bdc548c4b6b2eb7c0a4",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528313908,
            "hunks": 3,
            "message": "Add ECB tests to cover parallelized code for AESNI with 192 and 256 bit keys",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_AES.py b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "index ef128db6..34fa7006 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "@@ -1247,9 +1247,16 @@ class TestMultipleBlocks(unittest.TestCase):",
                "-        cipher = AES.new(b'a' * 16, AES.MODE_ECB, use_aesni=self.use_aesni)",
                "-        h = SHA256.new()",
                "+        tvs = [",
                "+                (b'a' * 16, 'c0b27011eb15bf144d2fc9fae80ea16d4c231cb230416c5fac02e6835ad9d7d0'),",
                "+                (b'a' * 24, 'df8435ce361a78c535b41dcb57da952abbf9ee5954dc6fbcd75fd00fa626915d'),",
                "+                (b'a' * 32, '211402de6c80db1f92ba255881178e1f70783b8cfd3b37808205e48b80486cd8')",
                "+        ]",
                "-        expected = 'c0b27011eb15bf144d2fc9fae80ea16d4c231cb230416c5fac02e6835ad9d7d0'",
                "-        pt = b\"\".join([ tobytes('{0:016x}'.format(x)) for x in range(20) ])",
                "-        ct = cipher.encrypt(pt)",
                "-        self.assertEqual(SHA256.new(ct).hexdigest(), expected)",
                "+        for key, expected in tvs:",
                "+",
                "+            cipher = AES.new(key, AES.MODE_ECB, use_aesni=self.use_aesni)",
                "+            h = SHA256.new()",
                "+",
                "+            pt = b\"\".join([ tobytes('{0:016x}'.format(x)) for x in range(20) ])",
                "+            ct = cipher.encrypt(pt)",
                "+            self.assertEqual(SHA256.new(ct).hexdigest(), expected)",
                "diff --git a/src/AESNI.c b/src/AESNI.c",
                "index 28bbe6e6..54672aa7 100644",
                "--- a/src/AESNI.c",
                "+++ b/src/AESNI.c",
                "@@ -191,3 +191,2 @@ static int AESNI_encrypt(const BlockBase *bb, const uint8_t *in, uint8_t *out, s",
                "         for (; j<rounds; j++) {",
                "-            assert(0);",
                "             data[0] = _mm_aesenc_si128(data[0], r[j]);",
                "@@ -298,3 +297,2 @@ static int AESNI_decrypt(const BlockBase *bb, const uint8_t *in, uint8_t *out, s",
                "         for (; j<rounds; j++) {",
                "-            assert(0);",
                "             data[0] = _mm_aesdec_si128(data[0], r[j]);"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Cipher/test_AES.py",
                "src/AESNI.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "911dbd3b73bc0ecd74f96b0b26f386fd0ac8d5f1"
                ]
            ],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI_decrypt, AESNI_encrypt, AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/AESNI.c",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8738836d4e78fcb6caa8440862ca644ef1b79acd",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1526064789,
            "hunks": 27,
            "message": "Rewrite AESNI code",
            "diff": [
                "diff --git a/src/AESNI.c b/src/AESNI.c",
                "index 0452e93b..d096149f 100644",
                "--- a/src/AESNI.c",
                "+++ b/src/AESNI.c",
                "@@ -1,22 +1,29 @@",
                "-/*",
                "- *  AESNI.c: AES using AES-NI instructions",
                "+/* ===================================================================",
                "  *",
                "- * Written in 2013 by Sebastian Ramacher <sebastian@ramacher.at>",
                "+ * Copyright (c) 2018, Helder Eijs <helderijs@gmail.com>",
                "+ * All rights reserved.",
                "  *",
                "- * ===================================================================",
                "- * The contents of this file are dedicated to the public domain.  To",
                "- * the extent that dedication to the public domain is not available,",
                "- * everyone is granted a worldwide, perpetual, royalty-free,",
                "- * non-exclusive license to exercise all rights associated with the",
                "- * contents of this file for any purpose whatsoever.",
                "- * No rights are reserved.",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions",
                "+ * are met:",
                "+ *",
                "+ * 1. Redistributions of source code must retain the above copyright",
                "+ *    notice, this list of conditions and the following disclaimer.",
                "+ * 2. Redistributions in binary form must reproduce the above copyright",
                "+ *    notice, this list of conditions and the following disclaimer in",
                "+ *    the documentation and/or other materials provided with the",
                "+ *    distribution.",
                "  *",
                "- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",
                "- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
                "- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",
                "- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS",
                "- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN",
                "- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",
                "- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
                "- * SOFTWARE.",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS",
                "+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",
                "+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,",
                "+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,",
                "+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
                "+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
                "+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT",
                "+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN",
                "+ * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "  * ===================================================================",
                "@@ -33,231 +40,193 @@ FAKE_INIT(raw_aesni)",
                " #define BLOCK_SIZE 16",
                "-#define KEY_SIZE 0",
                "-",
                "-#define MAXKC (256/32)",
                "-#define MAXKB (256/8)",
                "-#define MAXNR 14",
                "-",
                "-#define ALIGNMENT 16",
                " struct block_state {",
                "-    /** Both ek and dk points into the buffer and are aligned to the 16 byte boundary **/",
                "-    __m128i* ek;",
                "-    __m128i* dk;",
                "+    __m128i *erk;   /** 11, 13 or 15 elements **/",
                "+    __m128i *drk;",
                "     unsigned rounds;",
                "-",
                "-    uint8_t buffer[(MAXNR+1)*sizeof(__m128i)*2 + ALIGNMENT];",
                " };",
                "-/* Helper functions to expand keys */",
                "+/*",
                "+ * See https://www.cosic.esat.kuleuven.be/ecrypt/AESday/slides/Use_of_the_AES_Instruction_Set.pdf",
                "+ */",
                "+",
                "+enum SubType { OnlySub, SubRotXor };",
                "-static __m128i aes128_keyexpand(__m128i key)",
                "+static uint32_t sub_rot(uint32_t w, unsigned idx /** round/Nk **/, enum SubType subType)",
                " {",
                "-    key = _mm_xor_si128(key, _mm_slli_si128(key, 4));",
                "-    key = _mm_xor_si128(key, _mm_slli_si128(key, 4));",
                "-    return _mm_xor_si128(key, _mm_slli_si128(key, 4));",
                "+    uint32_t result;",
                "+    __m128i x, y, z;",
                "+",
                "+    assert((idx>=1) && (idx<=10));",
                "+",
                "+    x = _mm_castps_si128(_mm_load1_ps((float const*)&w));   /* { W, W, W, W } */",
                "+    ",
                "+    switch (idx) {",
                "+    case 1:  y = _mm_aeskeygenassist_si128(x, 0x01); break;",
                "+    case 2:  y = _mm_aeskeygenassist_si128(x, 0x02); break;",
                "+    case 3:  y = _mm_aeskeygenassist_si128(x, 0x04); break;",
                "+    case 4:  y = _mm_aeskeygenassist_si128(x, 0x08); break;",
                "+    case 5:  y = _mm_aeskeygenassist_si128(x, 0x10); break;",
                "+    case 6:  y = _mm_aeskeygenassist_si128(x, 0x20); break;",
                "+    case 7:  y = _mm_aeskeygenassist_si128(x, 0x40); break;",
                "+    case 8:  y = _mm_aeskeygenassist_si128(x, 0x80); break;",
                "+    case 9:  y = _mm_aeskeygenassist_si128(x, 0x1b); break;",
                "+    case 10: y = _mm_aeskeygenassist_si128(x, 0x36); break;",
                "+    }",
                "+",
                "+    /** Y0 contains SubWord(W) **/",
                "+    /** Y1 contains RotWord(SubWord(W)) xor RCON **/",
                "+    ",
                "+    z = y;",
                "+    if (subType == SubRotXor) {",
                "+        z = _mm_srli_si128(y, 4);",
                "+    }",
                "+    _mm_store_ss((float*)&result, _mm_castsi128_ps(z));",
                "+    return result;",
                " }",
                "-static __m128i aes192_keyexpand_2(__m128i key, __m128i key2)",
                "+static int expand_key(__m128i *erk, __m128i *drk, const uint8_t *key, unsigned Nk, unsigned Nr)",
                " {",
                "-    key = _mm_shuffle_epi32(key, 0xff);",
                "-    key2 = _mm_xor_si128(key2, _mm_slli_si128(key2, 4));",
                "-    return _mm_xor_si128(key, key2);",
                "-}",
                "+    uint32_t rk[4*(14+2)];",
                "+    unsigned tot_words;",
                "+    unsigned i;",
                "-#define KEYEXP128_H(K1, K2, I, S) _mm_xor_si128(aes128_keyexpand(K1), \\",
                "-        _mm_shuffle_epi32(_mm_aeskeygenassist_si128(K2, I), S))",
                "+    assert(",
                "+            ((Nk==4) && (Nr==10)) ||    /** AES-128 **/",
                "+            ((Nk==6) && (Nr==12)) ||    /** AES-192 **/",
                "+            ((Nk==8) && (Nr==14))       /** AES-256 **/",
                "+    );",
                "-#define KEYEXP128(K, I) KEYEXP128_H(K, K, I, 0xff)",
                "-#define KEYEXP192(K1, K2, I) KEYEXP128_H(K1, K2, I, 0x55)",
                "-#define KEYEXP192_2(K1, K2) aes192_keyexpand_2(K1, K2)",
                "-#define KEYEXP256(K1, K2, I)  KEYEXP128_H(K1, K2, I, 0xff)",
                "-#define KEYEXP256_2(K1, K2) KEYEXP128_H(K1, K2, 0x00, 0xaa)",
                "+    tot_words = 4*(Nr+1);",
                "-#define SHUFFLE128_0(a, b)      \\",
                "-    _mm_castpd_si128(           \\",
                "-      _mm_shuffle_pd(           \\",
                "-        _mm_castsi128_pd(a),    \\",
                "-        _mm_castsi128_pd(b),    \\",
                "-        0))",
                "+    for (i=0; i<Nk; i++) {",
                "+        rk[i] = LOAD_U32_LITTLE(key);",
                "+        key += 4;",
                "+    }",
                "-#define SHUFFLE128_1(a, b)      \\",
                "-    _mm_castpd_si128(           \\",
                "-      _mm_shuffle_pd(           \\",
                "-        _mm_castsi128_pd(a),    \\",
                "-        _mm_castsi128_pd(b),    \\",
                "-        1))",
                "+    for (i=Nk; i<tot_words; i++) {",
                "+        uint32_t tmp;",
                "-/* Encryption key setup */",
                "-static void aes_key_setup_enc(__m128i *rk, const uint8_t* cipherKey, unsigned keylen)",
                "-{",
                "-    switch (keylen) {",
                "-        case 16:",
                "-        {",
                "-            /* 128 bit key setup */",
                "-            rk[0] = _mm_loadu_si128((const __m128i*) cipherKey);",
                "-            rk[1] = KEYEXP128(rk[0], 0x01);",
                "-            rk[2] = KEYEXP128(rk[1], 0x02);",
                "-            rk[3] = KEYEXP128(rk[2], 0x04);",
                "-            rk[4] = KEYEXP128(rk[3], 0x08);",
                "-            rk[5] = KEYEXP128(rk[4], 0x10);",
                "-            rk[6] = KEYEXP128(rk[5], 0x20);",
                "-            rk[7] = KEYEXP128(rk[6], 0x40);",
                "-            rk[8] = KEYEXP128(rk[7], 0x80);",
                "-            rk[9] = KEYEXP128(rk[8], 0x1B);",
                "-            rk[10] = KEYEXP128(rk[9], 0x36);",
                "-            break;",
                "+        tmp = rk[i-1];",
                "+        if (i % Nk == 0) {",
                "+            tmp = sub_rot(tmp, i/Nk, SubRotXor);",
                "+        } else {",
                "+            if ((i % Nk == 4) && (Nk == 8)) {  // AES-256 only",
                "+                tmp = sub_rot(tmp, i/Nk, OnlySub);",
                "+            }",
                "         }",
                "-        case 24:",
                "-        {",
                "-            /* 192 bit key setup */",
                "-            uint8_t key[24];",
                "+        rk[i] = rk[i-Nk] ^ tmp;",
                "+    }",
                "-            __m128i temp[2];",
                "-            memcpy(key, cipherKey, 24);",
                "-            rk[0] = _mm_loadu_si128((const __m128i*) key);",
                "-            rk[1] = _mm_loadu_si128((const __m128i*) (key+16));",
                "-            temp[0] = KEYEXP192(rk[0], rk[1], 0x01);",
                "-            temp[1] = KEYEXP192_2(temp[0], rk[1]);",
                "-            rk[1] = SHUFFLE128_0(rk[1], temp[0]);",
                "-            rk[2] = SHUFFLE128_1(temp[0], temp[1]);",
                "-            rk[3] = KEYEXP192(temp[0], temp[1], 0x02);",
                "-            rk[4] = KEYEXP192_2(rk[3], temp[1]);",
                "-            temp[0] = KEYEXP192(rk[3], rk[4], 0x04);",
                "-            temp[1] = KEYEXP192_2(temp[0], rk[4]);",
                "-            rk[4] = SHUFFLE128_0(rk[4], temp[0]);",
                "-            rk[5] = SHUFFLE128_1(temp[0], temp[1]);",
                "-            rk[6] = KEYEXP192(temp[0], temp[1], 0x08);",
                "-            rk[7] = KEYEXP192_2(rk[6], temp[1]);",
                "-            temp[0] = KEYEXP192(rk[6], rk[7], 0x10);",
                "-            temp[1] = KEYEXP192_2(temp[0], rk[7]);",
                "-            rk[7] = SHUFFLE128_0(rk[7], temp[0]);",
                "-            rk[8] = SHUFFLE128_1(temp[0], temp[1]);",
                "-            rk[9] = KEYEXP192(temp[0], temp[1], 0x20);",
                "-            rk[10] = KEYEXP192_2(rk[9], temp[1]);",
                "-            temp[0] = KEYEXP192(rk[9], rk[10], 0x40);",
                "-            temp[1] = KEYEXP192_2(temp[0], rk[10]);",
                "-            rk[10] = SHUFFLE128_0(rk[10], temp[0]);",
                "-            rk[11] = SHUFFLE128_1(temp[0], temp[1]);",
                "-            rk[12] = KEYEXP192(temp[0], temp[1], 0x80);",
                "-            break;",
                "-        }",
                "-        case 32:",
                "-        {",
                "-            /* 256 bit key setup */",
                "-            rk[0] = _mm_loadu_si128((const __m128i*) cipherKey);",
                "-            rk[1] = _mm_loadu_si128((const __m128i*) (cipherKey+16));",
                "-            rk[2] = KEYEXP256(rk[0], rk[1], 0x01);",
                "-            rk[3] = KEYEXP256_2(rk[1], rk[2]);",
                "-            rk[4] = KEYEXP256(rk[2], rk[3], 0x02);",
                "-            rk[5] = KEYEXP256_2(rk[3], rk[4]);",
                "-            rk[6] = KEYEXP256(rk[4], rk[5], 0x04);",
                "-            rk[7] = KEYEXP256_2(rk[5], rk[6]);",
                "-            rk[8] = KEYEXP256(rk[6], rk[7], 0x08);",
                "-            rk[9] = KEYEXP256_2(rk[7], rk[8]);",
                "-            rk[10] = KEYEXP256(rk[8], rk[9], 0x10);",
                "-            rk[11] = KEYEXP256_2(rk[9], rk[10]);",
                "-            rk[12] = KEYEXP256(rk[10], rk[11], 0x20);",
                "-            rk[13] = KEYEXP256_2(rk[11], rk[12]);",
                "-            rk[14] = KEYEXP256(rk[12], rk[13], 0x40);",
                "-            break;",
                "-        }",
                "+    for (i=0; i<tot_words; i+=4) {",
                "+        *erk++ = _mm_loadu_si128((__m128i*)&rk[i]);",
                "     }",
                "+",
                "+    erk--;  /** Point to the last round **/",
                "+    *drk++ = *erk--;",
                "+    for (i=0; i<Nr-1; i++) {",
                "+        *drk++ = _mm_aesimc_si128(*erk--);",
                "+    }",
                "+    *drk = *erk;",
                "+",
                "+    return 0;",
                " }",
                "-/* Decryption key setup */",
                "-static void aes_key_setup_dec(__m128i *dk, const __m128i *ek, unsigned rounds)",
                "+static void block_finalize(struct block_state* state)",
                " {",
                "-    unsigned i;",
                "-",
                "-    dk[rounds] = ek[0];",
                "-    for (i = 1; i < rounds; ++i) {",
                "-        dk[rounds - i] = _mm_aesimc_si128(ek[i]);",
                "-    }",
                "-    dk[0] = ek[rounds];",
                "+    align_free(state->erk);",
                "+    align_free(state->drk);",
                " }",
                "-static int block_init(struct block_state* self, const uint8_t* key, size_t keylen)",
                "+static int block_init(struct block_state* state, const uint8_t* key, size_t keylen)",
                " {",
                "-    unsigned nr = 0;",
                "-    int offset;",
                "+    unsigned Nr;",
                "+    const unsigned Nb = 4;",
                "+    int result;",
                "     switch (keylen) {",
                "-        case 16: nr = 10; break;",
                "-        case 24: nr = 12; break;",
                "-        case 32: nr = 14; break;",
                "-        default:",
                "-            return ERR_NR_ROUNDS;",
                "+        case 16: Nr = 10; break;",
                "+        case 24: Nr = 12; break;",
                "+        case 32: Nr = 14; break;",
                "+        default: abort();",
                "     }",
                "-    /* ensure that self->ek and self->dk are aligned to 16 byte boundaries */",
                "-    offset = ALIGNMENT - (int)((uintptr_t)self->buffer & (ALIGNMENT-1));",
                "-    self->ek = (__m128i*)((uint8_t*)self->buffer + offset);",
                "-    self->dk = (__m128i*)((uint8_t*)self->ek + (MAXNR+1)*sizeof(__m128i));",
                "-",
                "-    self->rounds = nr;",
                "-    aes_key_setup_enc(self->ek, key, (unsigned)keylen);",
                "-    aes_key_setup_dec(self->dk, self->ek, nr);",
                "-",
                "+    state->rounds = Nr;",
                "+    state->erk = align_alloc(Nb*(Nr+1)*sizeof(uint32_t), 16);",
                "+    if (state->erk == NULL) {",
                "+        result = ERR_MEMORY;",
                "+        goto error;",
                "+    }",
                "+    ",
                "+    state->drk = align_alloc(Nb*(Nr+1)*sizeof(uint32_t), 16);",
                "+    if (state->drk == NULL) {",
                "+        result = ERR_MEMORY;",
                "+        goto error;",
                "+    }",
                "+    ",
                "+    result = expand_key(state->erk, state->drk, key, (unsigned)keylen/4, Nr);",
                "+    if (result) {",
                "+        goto error;",
                "+    }",
                "     return 0;",
                "-}",
                "-static void block_finalize(struct block_state* self)",
                "-{",
                "-    memset(self, 0, sizeof(*self));",
                "+error:",
                "+    block_finalize(state);",
                "+    return result;",
                " }",
                "-static void block_encrypt(struct block_state* self, const uint8_t* in, uint8_t* out)",
                "+static void block_encrypt(struct block_state* state, const uint8_t* in, uint8_t* out)",
                " {",
                "-    __m128i m = _mm_loadu_si128((const __m128i*) in);",
                "-    /* first 9 rounds */",
                "-    m = _mm_xor_si128(m, self->ek[0]);",
                "-    m = _mm_aesenc_si128(m, self->ek[1]);",
                "-    m = _mm_aesenc_si128(m, self->ek[2]);",
                "-    m = _mm_aesenc_si128(m, self->ek[3]);",
                "-    m = _mm_aesenc_si128(m, self->ek[4]);",
                "-    m = _mm_aesenc_si128(m, self->ek[5]);",
                "-    m = _mm_aesenc_si128(m, self->ek[6]);",
                "-    m = _mm_aesenc_si128(m, self->ek[7]);",
                "-    m = _mm_aesenc_si128(m, self->ek[8]);",
                "-    m = _mm_aesenc_si128(m, self->ek[9]);",
                "-    if (self->rounds != 10) {",
                "-        /* two additional rounds for AES-192/256 */",
                "-        m = _mm_aesenc_si128(m, self->ek[10]);",
                "-        m = _mm_aesenc_si128(m, self->ek[11]);",
                "-        if (self->rounds == 14) {",
                "-            /* another two additional rounds for AES-256 */",
                "-            m = _mm_aesenc_si128(m, self->ek[12]);",
                "-            m = _mm_aesenc_si128(m, self->ek[13]);",
                "+    __m128i pt, data;",
                "+    unsigned rounds = state->rounds;",
                "+",
                "+    pt = _mm_loadu_si128((__m128i*)in);",
                "+    data = _mm_xor_si128(pt, state->erk[0]);",
                "+    data = _mm_aesenc_si128(data, state->erk[1]);",
                "+    data = _mm_aesenc_si128(data, state->erk[2]);",
                "+    data = _mm_aesenc_si128(data, state->erk[3]);",
                "+    data = _mm_aesenc_si128(data, state->erk[4]);",
                "+    data = _mm_aesenc_si128(data, state->erk[5]);",
                "+    data = _mm_aesenc_si128(data, state->erk[6]);",
                "+    data = _mm_aesenc_si128(data, state->erk[7]);",
                "+    data = _mm_aesenc_si128(data, state->erk[8]);",
                "+    data = _mm_aesenc_si128(data, state->erk[9]);",
                "+    if (rounds > 10) {",
                "+        data = _mm_aesenc_si128(data, state->erk[10]);",
                "+        data = _mm_aesenc_si128(data, state->erk[11]);",
                "+        if (rounds > 12) {",
                "+            data = _mm_aesenc_si128(data, state->erk[12]);",
                "+            data = _mm_aesenc_si128(data, state->erk[13]);",
                "         }",
                "     }",
                "-    m = _mm_aesenclast_si128(m, self->ek[self->rounds]);",
                "-    _mm_storeu_si128((__m128i*) out, m);",
                "+    data = _mm_aesenclast_si128(data, state->erk[rounds]);",
                "+    _mm_storeu_si128((__m128i*)out, data);",
                " }",
                "-static void block_decrypt(struct block_state* self, const uint8_t* in, uint8_t* out)",
                "+static void block_decrypt(struct block_state* state, const uint8_t* in, uint8_t* out)",
                " {",
                "-    __m128i m = _mm_loadu_si128((const __m128i*) in);",
                "-    /* first 9 rounds */",
                "-    m = _mm_xor_si128(m, self->dk[0]);",
                "-    m = _mm_aesdec_si128(m, self->dk[1]);",
                "-    m = _mm_aesdec_si128(m, self->dk[2]);",
                "-    m = _mm_aesdec_si128(m, self->dk[3]);",
                "-    m = _mm_aesdec_si128(m, self->dk[4]);",
                "-    m = _mm_aesdec_si128(m, self->dk[5]);",
                "-    m = _mm_aesdec_si128(m, self->dk[6]);",
                "-    m = _mm_aesdec_si128(m, self->dk[7]);",
                "-    m = _mm_aesdec_si128(m, self->dk[8]);",
                "-    m = _mm_aesdec_si128(m, self->dk[9]);",
                "-    if (self->rounds != 10) {",
                "-        /* two additional rounds for AES-192/256 */",
                "-        m = _mm_aesdec_si128(m, self->dk[10]);",
                "-        m = _mm_aesdec_si128(m, self->dk[11]);",
                "-        if (self->rounds == 14) {",
                "-            /* another two additional rounds for AES-256 */",
                "-            m = _mm_aesdec_si128(m, self->dk[12]);",
                "-            m = _mm_aesdec_si128(m, self->dk[13]);",
                "+    __m128i ct, data;",
                "+    unsigned rounds;",
                "+",
                "+    rounds = state->rounds;",
                "+    ct = _mm_loadu_si128((__m128i*)in);",
                "+    data = _mm_xor_si128(ct, state->drk[0]);",
                "+    data = _mm_aesdec_si128(data, state->drk[1]);",
                "+    data = _mm_aesdec_si128(data, state->drk[2]);",
                "+    data = _mm_aesdec_si128(data, state->drk[3]);",
                "+    data = _mm_aesdec_si128(data, state->drk[4]);",
                "+    data = _mm_aesdec_si128(data, state->drk[5]);",
                "+    data = _mm_aesdec_si128(data, state->drk[6]);",
                "+    data = _mm_aesdec_si128(data, state->drk[7]);",
                "+    data = _mm_aesdec_si128(data, state->drk[8]);",
                "+    data = _mm_aesdec_si128(data, state->drk[9]);",
                "+    if (rounds > 10) {",
                "+        data = _mm_aesdec_si128(data, state->drk[10]);",
                "+        data = _mm_aesdec_si128(data, state->drk[11]);",
                "+        if (rounds > 12) {",
                "+            data = _mm_aesdec_si128(data, state->drk[12]);",
                "+            data = _mm_aesdec_si128(data, state->drk[13]);",
                "         }",
                "     }",
                "-    m = _mm_aesdeclast_si128(m, self->dk[self->rounds]);",
                "-    _mm_storeu_si128((__m128i*) out, m);",
                "+    data = _mm_aesdeclast_si128(data, state->drk[rounds]);",
                "+    _mm_storeu_si128((__m128i*)out, data);",
                " }",
                "diff --git a/src/common.h b/src/common.h",
                "index 742caefe..aac017c1 100644",
                "--- a/src/common.h",
                "+++ b/src/common.h",
                "@@ -107,2 +107,33 @@ typedef unsigned __int64 uint64_t;",
                "+/*",
                "+ * Platform specific routine for aligned allocation",
                "+ */",
                "+",
                "+static inline void* align_alloc(size_t size, unsigned boundary)",
                "+{",
                "+#if defined(_MSC_VER) || defined(__MINGW32__)",
                "+    return _aligned_malloc(size, boundary);",
                "+#else",
                "+    int result;",
                "+    void *new_mem;",
                "+    result = posix_memalign((void**)&new_mem, boundary, size);",
                "+    return result ? NULL : new_mem;",
                "+#endif",
                "+}",
                "+",
                "+static inline void align_free(void *mem)",
                "+{",
                "+#if defined(_MSC_VER) || defined(__MINGW32__)",
                "+    if (mem) {",
                "+        _aligned_free(mem);",
                "+    }",
                "+#else",
                "+    free(mem);",
                "+#endif",
                "+}",
                "+",
                "+/*",
                "+ * Endianess convesion",
                "+ */",
                "+",
                " static inline void u32to8_little(uint8_t *p, const uint32_t *w)"
            ],
            "changed_files": [
                "src/AESNI.c",
                "src/common.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/AESNI.c",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "f3f84de2369b1012a92871b76d14708a85a63797",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528053424,
            "hunks": 5,
            "message": "Test 8 lane parallelization in AESNI code",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_AES.py b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "index d84792a6..ef128db6 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "@@ -26,2 +26,5 @@",
                "+import unittest",
                "+from Crypto.Hash import SHA256",
                "+from Crypto.Cipher import AES",
                " from Crypto.Util.py3compat import *",
                "@@ -1232,4 +1235,24 @@ test_data = [",
                "+",
                "+class TestMultipleBlocks(unittest.TestCase):",
                "+",
                "+    def __init__(self, use_aesni):",
                "+        unittest.TestCase.__init__(self)",
                "+        self.use_aesni = use_aesni",
                "+",
                "+    def runTest(self):",
                "+        # Encrypt data which is 8*2+4 bytes long, so as to trigger (for the",
                "+        # AESNI variant) both the path that parallelizes 8 lanes and the one",
                "+        # that processes data serially",
                "+",
                "+        cipher = AES.new(b'a' * 16, AES.MODE_ECB, use_aesni=self.use_aesni)",
                "+        h = SHA256.new()",
                "+",
                "+        expected = 'c0b27011eb15bf144d2fc9fae80ea16d4c231cb230416c5fac02e6835ad9d7d0'",
                "+        pt = b\"\".join([ tobytes('{0:016x}'.format(x)) for x in range(20) ])",
                "+        ct = cipher.encrypt(pt)",
                "+        self.assertEqual(SHA256.new(ct).hexdigest(), expected)",
                "+",
                "+",
                " def get_tests(config={}):",
                "-    from Crypto.Cipher import AES",
                "     from Crypto.Util import _cpuid",
                "@@ -1238,2 +1261,3 @@ def get_tests(config={}):",
                "     tests = make_block_tests(AES, \"AES\", test_data, {'use_aesni': False})",
                "+    tests += [ TestMultipleBlocks(False) ]",
                "     if _cpuid.have_aes_ni():",
                "@@ -1241,2 +1265,3 @@ def get_tests(config={}):",
                "         tests += make_block_tests(AES, \"AESNI\", test_data, {'use_aesni': True})",
                "+        tests += [ TestMultipleBlocks(True) ]",
                "     else:"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Cipher/test_AES.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: AESNI",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "63d51033904cef6ec423bc70ee7043bd296fdc34",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528444968,
            "hunks": 11,
            "message": "Handle the case of a 128-bit counter (no nonce) Also, don't left shift by an amount larger than variable size (UB).",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_CTR.py b/lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "index 090b71a0..0da8e0e8 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "@@ -108,4 +108,5 @@ class CtrTests(unittest.TestCase):",
                "         # Nonce can be zero-length",
                "-        cipher = AES.new(self.key_128, AES.MODE_CTR, nonce=b(\"\"))",
                "-        self.assertEqual(b(\"\"), cipher.nonce)",
                "+        cipher = AES.new(self.key_128, AES.MODE_CTR, nonce=b\"\")",
                "+        self.assertEqual(b\"\", cipher.nonce)",
                "+        cipher.encrypt(b'0'*300)",
                "diff --git a/src/raw_ctr.c b/src/raw_ctr.c",
                "index 9b37d87b..df090bda 100644",
                "--- a/src/raw_ctr.c",
                "+++ b/src/raw_ctr.c",
                "@@ -182,9 +182,12 @@ EXPORT_SYM int CTR_start_operation(BlockBase *cipher,",
                "     ctr_state->length_lo = ctr_state->length_hi = 0;",
                "+    ctr_state->length_max_lo = ctr_state->length_max_hi = 0;",
                "     assert(block_len < 256);",
                "-    ctr_state->length_max_lo = (uint64_t)block_len << (counter_len*8);",
                "-    if (counter_len >= 8)",
                "+    assert(block_len > 0);",
                "+    if (counter_len < 8) ",
                "+        ctr_state->length_max_lo = (uint64_t)block_len << (counter_len*8);",
                "+    if (counter_len >= 8 && counter_len < 16)",
                "         ctr_state->length_max_hi = (uint64_t)block_len << ((counter_len-8)*8);",
                "-    else",
                "-        ctr_state->length_max_hi = 0;",
                "+",
                "+    /** length_max_hi and length_max_lo are both zero when counter_len is 16 **/",
                "@@ -235,2 +238,3 @@ EXPORT_SYM int CTR_encrypt(CtrModeState *ctr_state,",
                "     size_t block_len;",
                "+    uint64_t max_hi, max_lo;",
                "@@ -240,2 +244,5 @@ EXPORT_SYM int CTR_encrypt(CtrModeState *ctr_state,",
                "     block_len = ctr_state->cipher->block_len;",
                "+    max_hi = ctr_state->length_max_hi;",
                "+    max_lo = ctr_state->length_max_lo;",
                "+",
                "     while (data_len > 0) {",
                "@@ -248,4 +255,5 @@ EXPORT_SYM int CTR_encrypt(CtrModeState *ctr_state,",
                "             update_keystream(ctr_state);",
                "-    ",
                "+        ",
                "         ks_to_use = MIN(data_len, ks_size - ctr_state->used_ks);",
                "+        ",
                "         for (j=0; j<ks_to_use; j++) {",
                "@@ -258,9 +266,16 @@ EXPORT_SYM int CTR_encrypt(CtrModeState *ctr_state,",
                "         ctr_state->length_lo += ks_to_use;",
                "-        if (ctr_state->length_lo < ks_to_use)",
                "+        if (ctr_state->length_lo < ks_to_use) {",
                "             ctr_state->length_hi++;",
                "+            if (ctr_state->length_hi == 0)",
                "+                return ERR_CTR_REPEATED_KEY_STREAM;",
                "+        }",
                "+",
                "+        /** 128-bit counter **/",
                "+        if (0 == max_lo && 0 == max_hi)",
                "+            continue;",
                "-        if (ctr_state->length_hi > ctr_state->length_max_hi)",
                "+        if (ctr_state->length_hi > max_hi)",
                "             return ERR_CTR_REPEATED_KEY_STREAM;",
                "-        if (ctr_state->length_hi == ctr_state->length_max_hi)",
                "-            if (ctr_state->length_lo > ctr_state->length_max_lo)",
                "+        if (ctr_state->length_hi == max_hi &&",
                "+            ctr_state->length_lo > max_lo)",
                "                 return ERR_CTR_REPEATED_KEY_STREAM;"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "src/raw_ctr.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: data_len",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: variable",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d97a099faf0de9014d76c16008bd9858a5f51215",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1534025612,
            "hunks": 1,
            "message": "Deal with strict aliasing when extracting SSE2 values",
            "diff": [
                "diff --git a/src/AESNI.c b/src/AESNI.c",
                "index 132292e8..7c1a9232 100644",
                "--- a/src/AESNI.c",
                "+++ b/src/AESNI.c",
                "@@ -88,3 +88,3 @@ static uint32_t sub_rot(uint32_t w, unsigned idx /** round/Nk **/, enum SubType",
                "     }",
                "-    _mm_store_ss((float*)&result, _mm_castsi128_ps(z));",
                "+    result = _mm_cvtsi128_si32(z);",
                "     return result;"
            ],
            "changed_files": [
                "src/AESNI.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/AESNI.c",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "42f4ba34e38b331dd7bba3019461ac0c3fee2eb1",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528027690,
            "hunks": 2,
            "message": "Fix removal of ghash_cmul.c when CLMUL is not available",
            "diff": [
                "diff --git a/setup.py b/setup.py",
                "index d251ed64..c492f190 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -302,26 +302,24 @@ class PCTBuildExt (build_ext):",
                "         # AESNI",
                "-        if (cpuid_h_present or intrin_h_present):",
                "-            aesni_result = self.compiler_supports_aesni()",
                "-            aesni_mod_name = package_root + \".Cipher._raw_aesni\"",
                "-            if aesni_result:",
                "-                PrintErr(\"Compiling support for AESNI instructions\")",
                "-                aes_mods = [ x for x in self.extensions if x.name == aesni_mod_name ]",
                "-                for x in aes_mods:",
                "-                    x.extra_compile_args += aesni_result['extra_options']",
                "-            else:",
                "-                PrintErr (\"Warning: compiler does not support AESNI instructions\")",
                "-                self.remove_extensions(self.aesni_mod_name)",
                "+        aesni_result = (cpuid_h_present or intrin_h_present) and self.compiler_supports_aesni()",
                "+        aesni_mod_name = package_root + \".Cipher._raw_aesni\"",
                "+        if aesni_result:",
                "+            PrintErr(\"Compiling support for AESNI instructions\")",
                "+            aes_mods = [ x for x in self.extensions if x.name == aesni_mod_name ]",
                "+            for x in aes_mods:",
                "+                x.extra_compile_args += aesni_result['extra_options']",
                "+        else:",
                "+            PrintErr (\"Warning: compiler does not support AESNI instructions\")",
                "+            self.remove_extensions(aesni_mod_name)",
                "         # CLMUL",
                "-        if (cpuid_h_present or intrin_h_present):",
                "-            clmul_result = self.compiler_supports_clmul()",
                "-            clmul_mod_name = package_root + \".Hash._ghash_clmul\"",
                "-            if clmul_result:",
                "-                PrintErr(\"Compiling support for CLMUL instructions\")",
                "-                clmul_mods = [ x for x in self.extensions if x.name == clmul_mod_name ]",
                "-                for x in clmul_mods:",
                "-                    x.extra_compile_args += clmul_result['extra_options']",
                "-            else:",
                "-                PrintErr (\"Warning: compiler does not support CLMUL instructions\")",
                "-                self.remove_extensions(self.clmul_mod_name)",
                "+        clmul_result = (cpuid_h_present or intrin_h_present) and self.compiler_supports_clmul()",
                "+        clmul_mod_name = package_root + \".Hash._ghash_clmul\"",
                "+        if clmul_result:",
                "+            PrintErr(\"Compiling support for CLMUL instructions\")",
                "+            clmul_mods = [ x for x in self.extensions if x.name == clmul_mod_name ]",
                "+            for x in clmul_mods:",
                "+                x.extra_compile_args += clmul_result['extra_options']",
                "+        else:",
                "+            PrintErr (\"Warning: compiler does not support CLMUL instructions\")",
                "+            self.remove_extensions(clmul_mod_name)"
            ],
            "changed_files": [
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "518bfec8ca4844b8b4841397c946d42355dbec29",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528660544,
            "hunks": 9,
            "message": "Correctly handle targets not supporting AESNI/PCLMULQDQ",
            "diff": [
                "diff --git a/lib/Crypto/Cipher/_mode_gcm.py b/lib/Crypto/Cipher/_mode_gcm.py",
                "index 76e8f095..10fd73ca 100644",
                "--- a/lib/Crypto/Cipher/_mode_gcm.py",
                "+++ b/lib/Crypto/Cipher/_mode_gcm.py",
                "@@ -59,2 +59,3 @@ _ghash_api_portable = \"\"\"",
                " \"\"\"",
                "+",
                " _raw_ghash_portable_lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_portable\",",
                "@@ -62,23 +63,24 @@ _raw_ghash_portable_lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_portable",
                "+_funcs = ( \"ghash\", \"ghash_expand\", \"ghash_destroy\" )",
                " class _GHASH_Portable(object):",
                "     pass",
                "-_GHASH_Portable.ghash         = _raw_ghash_portable_lib.ghash_portable",
                "-_GHASH_Portable.ghash_expand  = _raw_ghash_portable_lib.ghash_expand_portable",
                "-_GHASH_Portable.ghash_destroy = _raw_ghash_portable_lib.ghash_destroy_portable",
                "+for func in _funcs:",
                "+    impl_func = getattr(_raw_ghash_portable_lib, func + \"_portable\")",
                "+    setattr(_GHASH_Portable, func, impl_func)",
                " # Try to load GHASH based on CMUL (it might not have been compiled)",
                "-try:",
                "-    _raw_ghash_clmul_lib = None",
                "-    _ghash_api_clmul = _ghash_api_portable.replace(\"portable\", \"clmul\")",
                "-    if _cpuid.have_clmul():",
                "+_ghash_api_clmul = _ghash_api_portable.replace(\"portable\", \"clmul\")",
                "+_raw_ghash_clmul_lib = None",
                "+if _cpuid.have_clmul():",
                "+    try:",
                "         _raw_ghash_clmul_lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_clmul\",",
                "-                                                        _ghash_api_clmul)",
                "-    class _GHASH_CLMUL(object):",
                "+                                                         _ghash_api_clmul)",
                "+        class _GHASH_CLMUL(object):",
                "+            pass",
                "+        for func in _funcs:",
                "+            impl_func = getattr(_raw_ghash_clmul_lib, func + \"_clmul\")",
                "+            setattr(_GHASH_CLMUL, func, impl_func)",
                "+    except OSError:",
                "         pass",
                "-    _GHASH_CLMUL.ghash         = _raw_ghash_clmul_lib.ghash_clmul",
                "-    _GHASH_CLMUL.ghash_expand  = _raw_ghash_clmul_lib.ghash_expand_clmul",
                "-    _GHASH_CLMUL.ghash_destroy = _raw_ghash_clmul_lib.ghash_destroy_clmul",
                "-except OSError:",
                "-    pass",
                "-",
                "+del _funcs",
                "diff --git a/setup.py b/setup.py",
                "index 5d8b5f12..88556487 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -311,3 +311,3 @@ class PCTBuildExt (build_ext):",
                "             PrintErr (\"Warning: compiler does not support AESNI instructions\")",
                "-            self.remove_extensions(aesni_mod_name)",
                "+            self.remove_extension(aesni_mod_name)",
                "@@ -323,5 +323,5 @@ class PCTBuildExt (build_ext):",
                "             PrintErr (\"Warning: compiler does not support CLMUL instructions\")",
                "-            self.remove_extensions(clmul_mod_name)",
                "+            self.remove_extension(clmul_mod_name)",
                "-    def remove_extensions(self, names):",
                "+    def remove_extension(self, name):",
                "         \"\"\"Remove the specified extension from the list of extensions",
                "@@ -329,3 +329,3 @@ class PCTBuildExt (build_ext):",
                "-        self.extensions = [ x for x in self.extensions if x.name not in names ]",
                "+        self.extensions = [ x for x in self.extensions if x.name != name ]"
            ],
            "changed_files": [
                "lib/Crypto/Cipher/_mode_gcm.py",
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "aabc6694c07424674295e3c7245de85be34c0702",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528404845,
            "hunks": 39,
            "message": "Encrypt/decrypt 8 blocks at once with CTR mode",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_AES.py b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "index 34fa7006..09846b49 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "@@ -1235,2 +1235,6 @@ test_data = [",
                "+test_data_8_lanes = []",
                "+for td in test_data:",
                "+    test_data_8_lanes.append((td[0] * 8, td[1] * 8, td[2], td[3]))",
                "+test_data += test_data_8_lanes",
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_CTR.py b/lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "index 417079ae..090b71a0 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "@@ -33,3 +33,3 @@ import unittest",
                " from Crypto.SelfTest.st_common import list_test_cases",
                "-from Crypto.Util.py3compat import tobytes, b, unhexlify, bchr",
                "+from Crypto.Util.py3compat import tobytes, b, unhexlify, bchr, hexlify",
                " from Crypto.Cipher import AES, DES3",
                "@@ -151,3 +151,3 @@ class CtrTests(unittest.TestCase):",
                "                           nonce=self.nonce_64, initial_value=b(\"5\")*9)",
                "-        ",
                "+",
                "         # Fail if the iv is too short",
                "@@ -221,12 +221,20 @@ class CtrTests(unittest.TestCase):",
                "     def test_wrap_around(self):",
                "+        # Counter is only 8 bits, so we can only encrypt/decrypt 256 blocks (=4096 bytes)",
                "         counter = Counter.new(8, prefix=bchr(9) * 15)",
                "+        max_bytes = 4096",
                "+",
                "+        cipher = AES.new(self.key_128, AES.MODE_CTR, counter=counter)",
                "+        cipher.encrypt(b'9' * max_bytes)",
                "+        self.assertRaises(OverflowError, cipher.encrypt, b'9')",
                "         cipher = AES.new(self.key_128, AES.MODE_CTR, counter=counter)",
                "-        cipher.encrypt(bchr(9) * 16 * 255)",
                "-        self.assertRaises(OverflowError, cipher.encrypt, bchr(9) * 16)",
                "+        self.assertRaises(OverflowError, cipher.encrypt, b'9' * (max_bytes + 1))",
                "         cipher = AES.new(self.key_128, AES.MODE_CTR, counter=counter)",
                "-        cipher.decrypt(bchr(9) * 16 * 255)",
                "-        self.assertRaises(OverflowError, cipher.decrypt, bchr(9) * 16)",
                "-    ",
                "+        cipher.decrypt(b'9' * max_bytes)",
                "+        self.assertRaises(OverflowError, cipher.decrypt, b'9')",
                "+",
                "+        cipher = AES.new(self.key_128, AES.MODE_CTR, counter=counter)",
                "+        self.assertRaises(OverflowError, cipher.decrypt, b'9' * (max_bytes + 1))",
                "+",
                "     def test_bytearray(self):",
                "@@ -264,4 +272,4 @@ class CtrTests(unittest.TestCase):",
                " class SP800TestVectors(unittest.TestCase):",
                "-    \"\"\"Class exercising the CTR test vectors found in Section F.3",
                "-    of NIST SP 800-3A\"\"\"",
                "+    \"\"\"Class exercising the CTR test vectors found in Section F.5",
                "+    of NIST SP 800-38A\"\"\"",
                "@@ -342,3 +350,3 @@ class RFC3686TestVectors(unittest.TestCase):",
                "     # - key (AES 128, 192 or 256 bits)",
                "-    # - counter prefix",
                "+    # - counter prefix (4 byte nonce + 8 byte nonce)",
                "     data = (",
                "@@ -347,3 +355,3 @@ class RFC3686TestVectors(unittest.TestCase):",
                "              'ae6852f8121067cc4bf7a5765577f39e',",
                "-             '00000030'+'0000000000000000'),",
                "+             '000000300000000000000000'),",
                "             ('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f',",
                "@@ -391,3 +399,3 @@ class RFC3686TestVectors(unittest.TestCase):",
                "             result = cipher.encrypt(pt)",
                "-            self.assertEqual(ct, result)",
                "+            self.assertEqual(hexlify(ct), hexlify(result))",
                "diff --git a/src/common.h b/src/common.h",
                "index aac017c1..ba81cbdf 100644",
                "--- a/src/common.h",
                "+++ b/src/common.h",
                "@@ -33,2 +33,4 @@",
                "+#include <stdio.h>",
                "+",
                " #ifndef MAX",
                "diff --git a/src/raw_ctr.c b/src/raw_ctr.c",
                "index 0ecd46ac..9b37d87b 100644",
                "--- a/src/raw_ctr.c",
                "+++ b/src/raw_ctr.c",
                "@@ -40,2 +40,4 @@ FAKE_INIT(raw_ctr)",
                "+#define NR_BLOCKS 8",
                "+",
                " typedef struct {",
                "@@ -43,24 +45,28 @@ typedef struct {",
                "-    /** How many bytes at the beginning of the key stream",
                "-      * have already been used.",
                "-      */",
                "-    uint8_t usedKeyStream;",
                "-",
                "     /**",
                "-      * The counter is an area within the counter block.",
                "+     *  A counter block is always as big as a cipher block.",
                "+     *  It is made up by three areas:",
                "+     *  1) Prefix  - immutable - can be empty",
                "+     *  2) Counter - mutable (+1 per block) - at least 1 byte",
                "+     *  3) Postfix - immutable - can be empty",
                "       */",
                "-    uint8_t *counter;",
                "+    uint8_t *counter_blocks;    /** block_len * NR_BLOCKS bytes **/",
                "+    ",
                "+    uint8_t *counter;           /** point to counter in 1st block within counter_blocks **/  ",
                "     size_t  counter_len;",
                "+    unsigned little_endian;",
                "-    void (*increment)(uint8_t *counter, size_t counter_len);",
                "+    uint8_t *keystream; /** block_len * NR_BLOCKS bytes **/",
                "+    size_t used_ks;     /** Bytes we already used in the key stream **/",
                "-    /**",
                "-      * originalCounterBlock - block_len bytes",
                "-      * counterBlock - block_len bytes",
                "-      * keyStream - block_len bytes",
                "-      */",
                "-    uint8_t buffer[0];",
                "+    /** Number of bytes we have encrypted so far **/",
                "+    uint64_t length_lo, length_hi;",
                "+",
                "+    /** Max number of blocks we may encrypt at most **/",
                "+    uint64_t length_max_lo, length_max_hi;",
                " } CtrModeState;",
                "-static void increment_le(uint8_t *pCounter, size_t counter_len) {",
                "+typedef void (*Increment)(uint8_t *pCounter, size_t counter_len);",
                "+",
                "+static inline void increment_le(uint8_t *pCounter, size_t counter_len) {",
                "     size_t i;",
                "@@ -73,3 +79,3 @@ static void increment_le(uint8_t *pCounter, size_t counter_len) {",
                "-static void increment_be(uint8_t *pCounter, size_t counter_len) {",
                "+static inline void increment_be(uint8_t *pCounter, size_t counter_len) {",
                "     size_t i;",
                "@@ -83,14 +89,57 @@ static void increment_be(uint8_t *pCounter, size_t counter_len) {",
                "+/*",
                "+ * Create the initial sequence of counter blocks",
                "+ */",
                "+static uint8_t* create_counter_blocks(uint8_t *counter_block0, unsigned block_len, size_t prefix_len, unsigned counter_len, Increment increment)",
                "+{",
                "+    unsigned i;",
                "+    uint8_t *counter_blocks, *current;",
                "+",
                "+    counter_blocks = current = calloc(1, block_len * NR_BLOCKS);",
                "+    if (NULL == counter_blocks) {",
                "+        return NULL;",
                "+    }",
                "+ ",
                "+    memcpy(current, counter_block0, block_len);",
                "+    current += block_len;",
                "+",
                "+    for (i=0; i<NR_BLOCKS-1; i++ ) {",
                "+        memcpy(current, current - block_len, block_len);",
                "+        increment(current + prefix_len, counter_len);",
                "+        current += block_len;",
                "+    }",
                "+",
                "+    return counter_blocks;",
                "+}",
                "+",
                "+static uint8_t* create_keystream(BlockBase *cipher, uint8_t *counter_blocks, size_t block_len)",
                "+{",
                "+    uint8_t *keystream;",
                "+",
                "+    keystream = calloc(1, block_len * NR_BLOCKS);",
                "+    if (NULL == keystream) {",
                "+        return NULL;",
                "+    }",
                "+",
                "+    cipher->encrypt(cipher,",
                "+                    counter_blocks,",
                "+                    keystream,",
                "+                    cipher->block_len * NR_BLOCKS);",
                "+",
                "+    return keystream;",
                "+}",
                "+ ",
                " EXPORT_SYM int CTR_start_operation(BlockBase *cipher,",
                "-                                   uint8_t   initialCounterBlock[],",
                "-                                   size_t    initialCounterBlock_len,",
                "+                                   uint8_t   counter_block0[],",
                "+                                   size_t    counter_block0_len,",
                "                                    size_t    prefix_len,",
                "                                    unsigned  counter_len,",
                "-                                   unsigned  littleEndian,",
                "+                                   unsigned  little_endian,",
                "                                    CtrModeState **pResult)",
                " {",
                "-    CtrModeState *ctrState = NULL;",
                "+    CtrModeState *ctr_state;",
                "     size_t block_len;",
                "+    Increment increment = little_endian ? increment_le : increment_be;",
                "-    if ((NULL == cipher) || (NULL == initialCounterBlock) || (NULL == pResult)) {",
                "+    if (NULL == cipher || NULL == counter_block0 || NULL == pResult) {",
                "         return ERR_NULL;",
                "@@ -99,7 +148,6 @@ EXPORT_SYM int CTR_start_operation(BlockBase *cipher,",
                "     block_len = cipher->block_len;",
                "-    assert(block_len < 256);",
                "-    if ((block_len != initialCounterBlock_len) ||",
                "-        (counter_len == 0) ||",
                "-        (block_len < (prefix_len + counter_len))) {",
                "+    if (block_len != counter_block0_len ||",
                "+        counter_len == 0 || counter_len > block_len ||",
                "+        block_len < (prefix_len + counter_len)) {",
                "         return ERR_CTR_COUNTER_BLOCK_LEN;",
                "@@ -107,4 +155,4 @@ EXPORT_SYM int CTR_start_operation(BlockBase *cipher,",
                "-    ctrState = calloc(1, sizeof(CtrModeState) + block_len*3);",
                "-    if (NULL == ctrState) {",
                "+    ctr_state = calloc(1, sizeof(CtrModeState));",
                "+    if (NULL == ctr_state) {",
                "         return ERR_MEMORY;",
                "@@ -112,18 +160,72 @@ EXPORT_SYM int CTR_start_operation(BlockBase *cipher,",
                "-    /** Original counter block **/",
                "-    memcpy(&ctrState->buffer[0], initialCounterBlock, block_len);",
                "-    /** Current counter block **/",
                "-    memcpy(&ctrState->buffer[block_len], initialCounterBlock, block_len);",
                "+    ctr_state->cipher = cipher;",
                "+    ",
                "+    ctr_state->counter_blocks = create_counter_blocks(counter_block0,",
                "+                                                      block_len,",
                "+                                                      prefix_len,",
                "+                                                      counter_len,",
                "+                                                      increment);",
                "+    if (NULL == ctr_state->counter_blocks) {",
                "+        goto error;",
                "+    }",
                "+    ",
                "+    ctr_state->counter = ctr_state->counter_blocks + prefix_len;",
                "+    ctr_state->counter_len = counter_len;",
                "+    ctr_state->little_endian = little_endian;",
                "+    ",
                "+    ctr_state->keystream = create_keystream(cipher, ctr_state->counter_blocks, block_len);",
                "+    if (NULL == ctr_state->keystream) {",
                "+        goto error;",
                "+    }",
                "+    ctr_state->used_ks = 0;",
                "+",
                "+    ctr_state->length_lo = ctr_state->length_hi = 0;",
                "-    ctrState->cipher = cipher;",
                "-    ctrState->usedKeyStream = (uint8_t)block_len;   /** All key stream (in buffer) is invalid **/",
                "-    ctrState->counter = ctrState->buffer + block_len + prefix_len;",
                "-    ctrState->counter_len = counter_len;",
                "-    ctrState->increment = littleEndian ? &increment_le : &increment_be;",
                "+    assert(block_len < 256);",
                "+    ctr_state->length_max_lo = (uint64_t)block_len << (counter_len*8);",
                "+    if (counter_len >= 8)",
                "+        ctr_state->length_max_hi = (uint64_t)block_len << ((counter_len-8)*8);",
                "+    else",
                "+        ctr_state->length_max_hi = 0;",
                "-    *pResult = ctrState;",
                "+    *pResult = ctr_state;",
                "     return 0;",
                "+",
                "+error:",
                "+    free(ctr_state->keystream);",
                "+    free(ctr_state->counter_blocks);",
                "+    free(ctr_state);",
                "+    return ERR_MEMORY;",
                " }",
                "-EXPORT_SYM int CTR_encrypt(CtrModeState *ctrState,",
                "+static inline void update_keystream(CtrModeState *ctr_state)",
                "+{",
                "+    unsigned i;",
                "+    uint8_t *counter;",
                "+    size_t block_len;",
                "+",
                "+    counter = ctr_state->counter;",
                "+    block_len = ctr_state->cipher->block_len;",
                "+   ",
                "+   /** Update all consecutive counter blocks **/ ",
                "+    if (ctr_state->little_endian) {",
                "+        for (i=0; i<NR_BLOCKS; i++) {",
                "+            increment_le(counter, ctr_state->counter_len);",
                "+            counter += block_len;",
                "+        }",
                "+    } else {",
                "+        for (i=0; i<NR_BLOCKS; i++) {",
                "+            increment_be(counter, ctr_state->counter_len);",
                "+            counter += block_len;",
                "+        }",
                "+    }",
                "+    ",
                "+    ctr_state->cipher->encrypt(ctr_state->cipher,",
                "+                               ctr_state->counter_blocks,",
                "+                               ctr_state->keystream,",
                "+                               ctr_state->cipher->block_len * NR_BLOCKS);",
                "+    ctr_state->used_ks = 0;",
                "+}",
                "+",
                "+EXPORT_SYM int CTR_encrypt(CtrModeState *ctr_state,",
                "                            const uint8_t *in,",
                "@@ -133,42 +235,33 @@ EXPORT_SYM int CTR_encrypt(CtrModeState *ctrState,",
                "     size_t block_len;",
                "-    uint8_t *keyStream;",
                "-    uint8_t *counterBlock;",
                "-    uint8_t *originalCounterBlock;",
                "-    if ((NULL == ctrState) || (NULL == in) || (NULL == out))",
                "+    if (NULL == ctr_state || NULL == in || NULL == out)",
                "         return ERR_NULL;",
                "-    block_len = ctrState->cipher->block_len;",
                "-    originalCounterBlock = &ctrState->buffer[0];",
                "-    counterBlock = &ctrState->buffer[block_len];",
                "-    keyStream = &ctrState->buffer[2*block_len];",
                "-",
                "+    block_len = ctr_state->cipher->block_len;",
                "     while (data_len > 0) {",
                "+        size_t ks_to_use;",
                "+        size_t ks_size;",
                "         unsigned j;",
                "-        size_t keyStreamToUse;",
                "-",
                "-        if (ctrState->usedKeyStream == block_len) {",
                "+        ",
                "+        ks_size = block_len * NR_BLOCKS;",
                "+        if (ctr_state->used_ks == ks_size)",
                "+            update_keystream(ctr_state);",
                "+    ",
                "+        ks_to_use = MIN(data_len, ks_size - ctr_state->used_ks);",
                "+        for (j=0; j<ks_to_use; j++) {",
                "+            *out++ = *in++ ^ ctr_state->keystream[j + ctr_state->used_ks];",
                "+        }",
                "-            ctrState->cipher->encrypt(ctrState->cipher,",
                "-                                      counterBlock,",
                "-                                      keyStream,",
                "-                                      block_len);",
                "-            ctrState->usedKeyStream = 0;",
                "+        data_len -= ks_to_use;",
                "+        ctr_state->used_ks += ks_to_use;",
                "-            /* Prepare next counter block */",
                "-            ctrState->increment(ctrState->counter, ctrState->counter_len);",
                "+        ctr_state->length_lo += ks_to_use;",
                "+        if (ctr_state->length_lo < ks_to_use)",
                "+            ctr_state->length_hi++;",
                "-            /* Fail if key stream is ever reused **/",
                "-            if (0 == memcmp(originalCounterBlock,",
                "-                            counterBlock,",
                "-                            block_len))",
                "+        if (ctr_state->length_hi > ctr_state->length_max_hi)",
                "+            return ERR_CTR_REPEATED_KEY_STREAM;",
                "+        if (ctr_state->length_hi == ctr_state->length_max_hi)",
                "+            if (ctr_state->length_lo > ctr_state->length_max_lo)",
                "                 return ERR_CTR_REPEATED_KEY_STREAM;",
                "-        }",
                "-",
                "-        keyStreamToUse = MIN(data_len, block_len - ctrState->usedKeyStream);",
                "-        for (j=0; j<keyStreamToUse; j++)",
                "-            *out++ = *in++ ^ keyStream[j + ctrState->usedKeyStream];",
                "-",
                "-        data_len -= keyStreamToUse;",
                "-        ctrState->usedKeyStream = (uint8_t)(ctrState->usedKeyStream  + keyStreamToUse);",
                "     }",
                "@@ -178,3 +271,3 @@ EXPORT_SYM int CTR_encrypt(CtrModeState *ctrState,",
                "-EXPORT_SYM int CTR_decrypt(CtrModeState *ctrState,",
                "+EXPORT_SYM int CTR_decrypt(CtrModeState *ctr_state,",
                "                            const uint8_t *in,",
                "@@ -183,11 +276,13 @@ EXPORT_SYM int CTR_decrypt(CtrModeState *ctrState,",
                " {",
                "-    return CTR_encrypt(ctrState, in, out, data_len);",
                "+    return CTR_encrypt(ctr_state, in, out, data_len);",
                " }",
                "-EXPORT_SYM int CTR_stop_operation(CtrModeState *ctrState)",
                "+EXPORT_SYM int CTR_stop_operation(CtrModeState *ctr_state)",
                " {",
                "-    if (NULL == ctrState)",
                "+    if (NULL == ctr_state)",
                "         return ERR_NULL;",
                "-    ctrState->cipher->destructor(ctrState->cipher);",
                "-    free(ctrState);",
                "+    ctr_state->cipher->destructor(ctr_state->cipher);",
                "+    free(ctr_state->keystream);",
                "+    free(ctr_state->counter_blocks);",
                "+    free(ctr_state);",
                "     return 0;"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Cipher/test_AES.py",
                "lib/Crypto/SelfTest/Cipher/test_CTR.py",
                "src/common.h",
                "src/raw_ctr.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: data_len",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "2522b86c2868a9f49925a09a0f9c1b68a8423d89",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527799286,
            "hunks": 54,
            "message": "Speed up AES-GCM with PCLMULDQD",
            "diff": [
                "diff --git a/lib/Crypto/Cipher/AES.py b/lib/Crypto/Cipher/AES.py",
                "index e75d6fad..a140c8c8 100644",
                "--- a/lib/Crypto/Cipher/AES.py",
                "+++ b/lib/Crypto/Cipher/AES.py",
                "@@ -44,5 +44,4 @@ from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,",
                "+from Crypto.Util import _cpuid",
                "-_raw_cpuid_lib = load_pycryptodome_raw_lib(\"Crypto.Util._cpuid\",",
                "-                                           \"int have_aes_ni(void);\")",
                "@@ -64,2 +63,3 @@ _cproto = \"\"\"",
                "+# Load portable AES",
                " _raw_aes_lib = load_pycryptodome_raw_lib(\"Crypto.Cipher._raw_aes\",",
                "@@ -67,8 +67,10 @@ _raw_aes_lib = load_pycryptodome_raw_lib(\"Crypto.Cipher._raw_aes\",",
                "-_raw_aesni_lib = None",
                "+# Try to load AES with AES NI instructions",
                " try:",
                "-    if _raw_cpuid_lib.have_aes_ni() == 1:",
                "+    _raw_aesni_lib = None",
                "+    if _cpuid.have_aes_ni():",
                "         _raw_aesni_lib = load_pycryptodome_raw_lib(\"Crypto.Cipher._raw_aesni\",",
                "                                                    _cproto.replace(\"AES\",",
                "-                                                                  \"AESNI\"))",
                "+                                                                   \"AESNI\"))",
                "+# _raw_aesni may not have been compiled in",
                " except OSError:",
                "@@ -201,2 +203,3 @@ def new(key, mode, *args, **kwargs):",
                "+",
                " MODE_ECB = 1",
                "diff --git a/lib/Crypto/Cipher/_mode_gcm.py b/lib/Crypto/Cipher/_mode_gcm.py",
                "index ad0d902a..76e8f095 100644",
                "--- a/lib/Crypto/Cipher/_mode_gcm.py",
                "+++ b/lib/Crypto/Cipher/_mode_gcm.py",
                "@@ -46,13 +46,38 @@ from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,",
                "-_raw_galois_lib = load_pycryptodome_raw_lib(\"Crypto.Util._galois\",",
                "-                    \"\"\"",
                "-                    int ghash(  uint8_t y_out[16],",
                "-                                const uint8_t block_data[],",
                "-                                size_t len,",
                "-                                const uint8_t y_in[16],",
                "-                                const void *exp_key);",
                "-                    int ghash_expand(const uint8_t h[16],",
                "-                                     void **ghash_tables);",
                "-                    int ghash_destroy(void *ghash_tables);",
                "-                    \"\"\")",
                "+from Crypto.Util import _cpuid",
                "+",
                "+# Load portable GHASH",
                "+_ghash_api_portable = \"\"\"",
                "+    int ghash_portable(uint8_t y_out[16],",
                "+                       const uint8_t block_data[],",
                "+                       size_t len,",
                "+                       const uint8_t y_in[16],",
                "+                       const void *exp_key);",
                "+    int ghash_expand_portable(const uint8_t h[16],",
                "+                              void **ghash_tables);",
                "+    int ghash_destroy_portable(void *ghash_tables);",
                "+\"\"\"",
                "+_raw_ghash_portable_lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_portable\",",
                "+                                                    _ghash_api_portable)",
                "+",
                "+class _GHASH_Portable(object):",
                "+    pass",
                "+_GHASH_Portable.ghash         = _raw_ghash_portable_lib.ghash_portable",
                "+_GHASH_Portable.ghash_expand  = _raw_ghash_portable_lib.ghash_expand_portable",
                "+_GHASH_Portable.ghash_destroy = _raw_ghash_portable_lib.ghash_destroy_portable",
                "+",
                "+# Try to load GHASH based on CMUL (it might not have been compiled)",
                "+try:",
                "+    _raw_ghash_clmul_lib = None",
                "+    _ghash_api_clmul = _ghash_api_portable.replace(\"portable\", \"clmul\")",
                "+    if _cpuid.have_clmul():",
                "+        _raw_ghash_clmul_lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_clmul\",",
                "+                                                        _ghash_api_clmul)",
                "+    class _GHASH_CLMUL(object):",
                "+        pass",
                "+    _GHASH_CLMUL.ghash         = _raw_ghash_clmul_lib.ghash_clmul",
                "+    _GHASH_CLMUL.ghash_expand  = _raw_ghash_clmul_lib.ghash_expand_clmul",
                "+    _GHASH_CLMUL.ghash_destroy = _raw_ghash_clmul_lib.ghash_destroy_clmul",
                "+except OSError:",
                "+    pass",
                "@@ -71,13 +96,15 @@ class _GHASH(object):",
                "-    def __init__(self, subkey):",
                "+    def __init__(self, subkey, ghash_c):",
                "         assert len(subkey) == 16",
                "+        self.ghash_c = ghash_c",
                "+",
                "         self._exp_key = VoidPointer()",
                "-        result = _raw_galois_lib.ghash_expand(c_uint8_ptr(subkey),",
                "-                                              self._exp_key.address_of())",
                "+        result = ghash_c.ghash_expand(c_uint8_ptr(subkey),",
                "+                                      self._exp_key.address_of())",
                "         if result:",
                "-            raise ValueError(\"Error %d while expanding the GMAC key\" % result)",
                "+            raise ValueError(\"Error %d while expanding the GHASH key\" % result)",
                "         self._exp_key = SmartPointer(self._exp_key.get(),",
                "-                                     _raw_galois_lib.ghash_destroy)",
                "+                                     ghash_c.ghash_destroy)",
                "@@ -89,9 +116,9 @@ class _GHASH(object):",
                "-        result = _raw_galois_lib.ghash(self._last_y,",
                "-                                       c_uint8_ptr(block_data),",
                "-                                       c_size_t(len(block_data)),",
                "-                                       self._last_y,",
                "-                                       self._exp_key.get())",
                "+        result = self.ghash_c.ghash(self._last_y,",
                "+                                    c_uint8_ptr(block_data),",
                "+                                    c_size_t(len(block_data)),",
                "+                                    self._last_y,",
                "+                                    self._exp_key.get())",
                "         if result:",
                "-            raise ValueError(\"Error %d while updating GMAC\" % result)",
                "+            raise ValueError(\"Error %d while updating GHASH\" % result)",
                "@@ -135,3 +162,3 @@ class GcmMode(object):",
                "-    def __init__(self, factory, key, nonce, mac_len, cipher_params):",
                "+    def __init__(self, factory, key, nonce, mac_len, cipher_params, ghash_c):",
                "@@ -146,3 +173,3 @@ class GcmMode(object):",
                "             raise TypeError(\"Nonce must be a byte string\")",
                "-        ",
                "+",
                "         # See NIST SP 800 38D, 5.2.1.1",
                "@@ -190,3 +217,3 @@ class GcmMode(object):",
                "                         long_to_bytes(8 * len(nonce), 8))",
                "-            self._j0 = bytes_to_long(_GHASH(hash_subkey)",
                "+            self._j0 = bytes_to_long(_GHASH(hash_subkey, ghash_c)",
                "                                      .update(ghash_in)",
                "@@ -204,3 +231,3 @@ class GcmMode(object):",
                "         # Step 5 - Bootstrat GHASH",
                "-        self._signer = _GHASH(hash_subkey)",
                "+        self._signer = _GHASH(hash_subkey, ghash_c)",
                "@@ -549,2 +576,9 @@ def _create_gcm_cipher(factory, **kwargs):",
                "-    return GcmMode(factory, key, nonce, mac_len, kwargs)",
                "+    # Not documented - only used for testing",
                "+    use_clmul = kwargs.pop(\"use_clmul\", True)",
                "+    if use_clmul and _raw_ghash_clmul_lib:",
                "+        ghash_c = _GHASH_CLMUL",
                "+    else:",
                "+        ghash_c = _GHASH_Portable",
                "+",
                "+    return GcmMode(factory, key, nonce, mac_len, kwargs, ghash_c)",
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_AES.py b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "index d6f2f87f..d84792a6 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_AES.py",
                "@@ -1234,3 +1234,3 @@ def get_tests(config={}):",
                "     from Crypto.Cipher import AES",
                "-    from Crypto.Cipher.AES import _raw_cpuid_lib",
                "+    from Crypto.Util import _cpuid",
                "     from common import make_block_tests",
                "@@ -1238,3 +1238,3 @@ def get_tests(config={}):",
                "     tests = make_block_tests(AES, \"AES\", test_data, {'use_aesni': False})",
                "-    if _raw_cpuid_lib.have_aes_ni():",
                "+    if _cpuid.have_aes_ni():",
                "         # Run tests with AES-NI instructions if they are available.",
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_GCM.py b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "index 5cf8e856..f895017e 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "@@ -34,2 +34,4 @@ import unittest",
                " from Crypto.SelfTest.st_common import list_test_cases",
                "+from Crypto.SelfTest.loader import load_tests",
                "+",
                " from Crypto.Util.py3compat import unhexlify, tobytes, bchr, b, _memoryview",
                "@@ -707,7 +709,15 @@ class TestVectorsGueronKrasnov(unittest.TestCase):",
                "-from Crypto.SelfTest.loader import load_tests",
                "-",
                " class NISTTestVectorsGCM(unittest.TestCase):",
                "-    pass",
                "+",
                "+    def __init__(self, a):",
                "+        self.use_clmul = True",
                "+        unittest.TestCase.__init__(self, a)",
                "+",
                "+class NISTTestVectorsGCM_no_clmul(unittest.TestCase):",
                "+",
                "+    def __init__(self, a):",
                "+        self.use_clmul = False",
                "+        unittest.TestCase.__init__(self, a)",
                "+",
                "@@ -735,3 +745,3 @@ for idx, tv in enumerate(test_vectors_nist):",
                "             cipher = AES.new(tv.key, AES.MODE_GCM, nonce=tv.iv,",
                "-                             mac_len=len(tv.tag))",
                "+                             mac_len=len(tv.tag), use_clmul=self.use_clmul)",
                "             cipher.update(tv.aad)",
                "@@ -745,2 +755,3 @@ for idx, tv in enumerate(test_vectors_nist):",
                "     setattr(NISTTestVectorsGCM, \"test_%d\" % idx, single_test)",
                "+    setattr(NISTTestVectorsGCM_no_clmul, \"test_%d\" % idx, single_test)",
                "@@ -749,5 +760,6 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "-    def __init__(self, wycheproof_warnings):",
                "+    def __init__(self, wycheproof_warnings, **extra_params):",
                "         unittest.TestCase.__init__(self)",
                "         self._wycheproof_warnings = wycheproof_warnings",
                "+        self._extra_params = extra_params",
                "@@ -787,5 +799,6 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "         self._id = \"Wycheproof Encrypt GCM Test #\" + str(tv.id)",
                "-        ",
                "+",
                "         try:",
                "-            cipher = AES.new(tv.key, AES.MODE_GCM, tv.iv, mac_len=tv.tag_size)",
                "+            cipher = AES.new(tv.key, AES.MODE_GCM, tv.iv, mac_len=tv.tag_size,",
                "+                    **self._extra_params)",
                "         except ValueError, e:",
                "@@ -804,5 +817,6 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "         self._id = \"Wycheproof Decrypt GCM Test #\" + str(tv.id)",
                "-        ",
                "+",
                "         try:",
                "-            cipher = AES.new(tv.key, AES.MODE_GCM, tv.iv, mac_len=tv.tag_size)",
                "+            cipher = AES.new(tv.key, AES.MODE_GCM, tv.iv, mac_len=tv.tag_size,",
                "+                    **self._extra_params)",
                "         except ValueError, e:",
                "@@ -826,3 +840,4 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "             return",
                "-        cipher = AES.new(tv.key, AES.MODE_GCM, tv.iv, mac_len=tv.tag_size)",
                "+        cipher = AES.new(tv.key, AES.MODE_GCM, tv.iv, mac_len=tv.tag_size,",
                "+                **self._extra_params)",
                "         cipher.update(tv.aad)",
                "@@ -840,2 +855,4 @@ class TestVectorsWycheproof(unittest.TestCase):",
                " def get_tests(config={}):",
                "+    from Crypto.Util import _cpuid",
                "+",
                "     wycheproof_warnings = config.get('wycheproof_warnings')",
                "@@ -850,2 +867,10 @@ def get_tests(config={}):",
                "         tests += list_test_cases(NISTTestVectorsGCM)",
                "+",
                "+    if _cpuid.have_clmul():",
                "+        tests += [ TestVectorsWycheproof(wycheproof_warnings, use_clmul=False) ]",
                "+        if config.get('slow_tests'):",
                "+            tests += list_test_cases(NISTTestVectorsGCM_no_clmul)",
                "+    else:",
                "+        print \"Skipping test of PCLMULDQD in AES GCM\"",
                "+",
                "     return tests",
                "diff --git a/lib/Crypto/Util/_cpuid.py b/lib/Crypto/Util/_cpuid.py",
                "new file mode 100644",
                "index 00000000..b3039b58",
                "--- /dev/null",
                "+++ b/lib/Crypto/Util/_cpuid.py",
                "@@ -0,0 +1,46 @@",
                "+# ===================================================================",
                "+#",
                "+# Copyright (c) 2018, Helder Eijs <helderijs@gmail.com>",
                "+# All rights reserved.",
                "+#",
                "+# Redistribution and use in source and binary forms, with or without",
                "+# modification, are permitted provided that the following conditions",
                "+# are met:",
                "+#",
                "+# 1. Redistributions of source code must retain the above copyright",
                "+#    notice, this list of conditions and the following disclaimer.",
                "+# 2. Redistributions in binary form must reproduce the above copyright",
                "+#    notice, this list of conditions and the following disclaimer in",
                "+#    the documentation and/or other materials provided with the",
                "+#    distribution.",
                "+#",
                "+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "+# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS",
                "+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",
                "+# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,",
                "+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,",
                "+# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
                "+# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
                "+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT",
                "+# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN",
                "+# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+# POSSIBILITY OF SUCH DAMAGE.",
                "+# ===================================================================",
                "+",
                "+from Crypto.Util._raw_api import load_pycryptodome_raw_lib",
                "+",
                "+",
                "+_raw_cpuid_lib = load_pycryptodome_raw_lib(\"Crypto.Util._cpuid_c\",",
                "+                                           \"\"\"",
                "+                                           int have_aes_ni(void);",
                "+                                           int have_clmul(void);",
                "+                                           \"\"\")",
                "+",
                "+",
                "+def have_aes_ni():",
                "+    return _raw_cpuid_lib.have_aes_ni()",
                "+",
                "+",
                "+def have_clmul():",
                "+    return _raw_cpuid_lib.have_clmul()",
                "diff --git a/setup.py b/setup.py",
                "index f568b5fd..fbfb000b 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -200,4 +200,2 @@ class PCTBuildExt (build_ext):",
                "-    aesni_mod_names = package_root + \".Cipher._raw_aesni\",",
                "-",
                "     # Avoid linking Python's dynamic library",
                "@@ -216,10 +214,7 @@ class PCTBuildExt (build_ext):",
                "-    def check_cpuid_h(self):",
                "-        # UNIX",
                "+    def compiler_supports_uint128(self):",
                "         source = \"\"\"",
                "-        #include <cpuid.h>",
                "         int main(void)",
                "         {",
                "-            unsigned int eax, ebx, ecx, edx;",
                "-            __get_cpuid(1, &eax, &ebx, &ecx, &edx);",
                "+            __uint128_t x;",
                "             return 0;",
                "@@ -227,9 +222,5 @@ class PCTBuildExt (build_ext):",
                "         \"\"\"",
                "-        if test_compilation(source, msg=\"cpuid.h header\"):",
                "-            self.compiler.define_macro(\"HAVE_CPUID_H\")",
                "-            return True",
                "-        else:",
                "-            return False",
                "+        return test_compilation(source, msg=\"128-bit integer\")",
                "-    def check_intrin_h(self):",
                "+    def compiler_has_intrin_h(self):",
                "         # Windows",
                "@@ -244,10 +235,18 @@ class PCTBuildExt (build_ext):",
                "         \"\"\"",
                "-        if test_compilation(source, msg=\"intrin.h header\"):",
                "-            self.compiler.define_macro(\"HAVE_INTRIN_H\")",
                "-            return True",
                "-        else:",
                "-            return False",
                "+        return test_compilation(source, msg=\"intrin.h header\")",
                "-    def check_aesni(self):",
                "+    def compiler_has_cpuid_h(self):",
                "+        # UNIX",
                "+        source = \"\"\"",
                "+        #include <cpuid.h>",
                "+        int main(void)",
                "+        {",
                "+            unsigned int eax, ebx, ecx, edx;",
                "+            __get_cpuid(1, &eax, &ebx, &ecx, &edx);",
                "+            return 0;",
                "+        }",
                "+        \"\"\"",
                "+        return test_compilation(source, msg=\"cpuid.h header\")",
                "+    def compiler_supports_aesni(self):",
                "         source = \"\"\"",
                "@@ -262,16 +261,17 @@ class PCTBuildExt (build_ext):",
                "-        aes_mods = [ x for x in self.extensions if x.name in self.aesni_mod_names ]",
                "-        result = test_compilation(source)",
                "-        if not result:",
                "-            result = test_compilation(source, extra_cc_options=['-maes'], msg='wmmintrin.h header')",
                "-            if result:",
                "-                for x in aes_mods:",
                "-                    x.extra_compile_args += ['-maes']",
                "-        return result",
                "+        if test_compilation(source):",
                "+            return {'extra_options':[]}",
                "-    def check_uint128(self):",
                "+        if test_compilation(source, extra_cc_options=['-maes'], msg='AESNI intrinsics'):",
                "+            return {'extra_options':['-maes']}",
                "+",
                "+        return False",
                "+",
                "+    def compiler_supports_clmul(self):",
                "         source = \"\"\"",
                "-        int main(void)",
                "-        {",
                "-            __uint128_t x;",
                "+        #include <wmmintrin.h>",
                "+        __m128i f(__m128i x, __m128i y) {",
                "+            return _mm_clmulepi64_si128(x, y, 0x00);",
                "+        }",
                "+        int main(void) {",
                "             return 0;",
                "@@ -279,7 +279,10 @@ class PCTBuildExt (build_ext):",
                "         \"\"\"",
                "-        if test_compilation(source, msg=\"128-bit integer\"):",
                "-            self.compiler.define_macro(\"HAVE_UINT128\")",
                "-            return True",
                "-        else:",
                "-            return False",
                "+",
                "+        if test_compilation(source):",
                "+            return {'extra_options':[]}",
                "+",
                "+        if test_compilation(source, extra_cc_options=['-mpclmul','-mssse3'], msg='CLMUL intrinsics'):",
                "+            return {'extra_options':['-mpclmul', '-mssse3']}",
                "+",
                "+        return False",
                "@@ -287,11 +290,38 @@ class PCTBuildExt (build_ext):",
                "-        self.check_uint128()",
                "-        has_intrin_h = self.check_intrin_h()",
                "+        if self.compiler_supports_uint128():",
                "+            self.compiler.define_macro(\"HAVE_UINT128\")",
                "-        # Detect compiler support for CPUID instruction and AESNI",
                "-        if (self.check_cpuid_h() or has_intrin_h) and self.check_aesni():",
                "-            PrintErr(\"Compiling support for Intel AES instructions\")",
                "-        else:",
                "-            PrintErr (\"warning: no support for Intel AESNI instructions\")",
                "-            self.remove_extensions(self.aesni_mod_names)",
                "+        intrin_h_present = self.compiler_has_intrin_h()",
                "+        if intrin_h_present:",
                "+            self.compiler.define_macro(\"HAVE_INTRIN_H\")",
                "+",
                "+        cpuid_h_present = self.compiler_has_cpuid_h()",
                "+        if cpuid_h_present:",
                "+            self.compiler.define_macro(\"HAVE_CPUID_H\")",
                "+",
                "+        # AESNI",
                "+        if (cpuid_h_present or intrin_h_present):",
                "+            aesni_result = self.compiler_supports_aesni()",
                "+            aesni_mod_name = package_root + \".Cipher._raw_aesni\"",
                "+            if aesni_result:",
                "+                PrintErr(\"Compiling support for AESNI instructions\")",
                "+                aes_mods = [ x for x in self.extensions if x.name == aesni_mod_name ]",
                "+                for x in aes_mods:",
                "+                    x.extra_compile_args += aesni_result['extra_options']",
                "+            else:",
                "+                PrintErr (\"Warning: compiler does not support AESNI instructions\")",
                "+                self.remove_extensions(self.aesni_mod_name)",
                "+",
                "+        # CLMUL",
                "+        if (cpuid_h_present or intrin_h_present):",
                "+            clmul_result = self.compiler_supports_clmul()",
                "+            clmul_mod_name = package_root + \".Hash._ghash_clmul\"",
                "+            if clmul_result:",
                "+                PrintErr(\"Compiling support for CMUL instructions\")",
                "+                clmul_mods = [ x for x in self.extensions if x.name == clmul_mod_name ]",
                "+                for x in clmul_mods:",
                "+                    x.extra_compile_args += clmul_result['extra_options']",
                "+            else:",
                "+                PrintErr (\"Warning: compiler does not support CMUL instructions\")",
                "+                self.remove_extensions(self.clmul_mod_name)",
                "@@ -538,2 +568,8 @@ ext_modules = [",
                "         sources=[\"src/blake2s.c\"]),",
                "+    Extension(\"Crypto.Hash._ghash_portable\",",
                "+        include_dirs=['src/'],",
                "+        sources=['src/ghash_portable.c']),",
                "+    Extension(\"Crypto.Hash._ghash_clmul\",",
                "+        include_dirs=['src/'],",
                "+        sources=['src/ghash_clmul.c']),",
                "@@ -561,6 +597,3 @@ ext_modules = [",
                "         sources=[\"src/DES3.c\"]),",
                "-    Extension(\"Crypto.Util._galois\",",
                "-        include_dirs=['src/'],",
                "-        sources=['src/galois.c']),",
                "-    Extension(\"Crypto.Util._cpuid\",",
                "+    Extension(\"Crypto.Util._cpuid_c\",",
                "         include_dirs=['src/'],",
                "diff --git a/src/cpuid.c b/src/cpuid.c",
                "index a6bcbee9..8eb997e2 100644",
                "--- a/src/cpuid.c",
                "+++ b/src/cpuid.c",
                "@@ -41,4 +41,4 @@ FAKE_INIT(cpuid)",
                "-/** Return 1 if the CPU supports the AESNI extension **/",
                "-EXPORT_SYM int have_aes_ni(void)",
                "+/** Call X86 CPUID for Leaf 1: return CX **/",
                "+static uint32_t leaf1_ecx(void)",
                " {",
                "@@ -47,9 +47,5 @@ EXPORT_SYM int have_aes_ni(void)",
                "     memset(info, 0, sizeof info);",
                "-    ",
                "-    /* Call cpuid to retrieve x86 Processor Info and Feature bits.",
                "-     * info[2] is ecx. If bit 25 is set, the CPU supports the",
                "-     * AES-NI extension. */",
                "-#if defined HAVE_CPUID_H",
                "+ #if defined(HAVE_CPUID_H)",
                "     __get_cpuid(1, info, info+1, info+2, info+3);",
                "-#elif defined HAVE_INTRIN_H",
                "+#elif defined(HAVE_INTRIN_H)",
                "     __cpuidex(info, 1, 0);",
                "@@ -57,3 +53,23 @@ EXPORT_SYM int have_aes_ni(void)",
                "-    return (info[2] & ((int)1<<25)) ? 1 : 0;",
                "+    return info[2];",
                "+}",
                "+",
                "+",
                "+/** Return 1 if the CPU supports the AESNI extension **/",
                "+EXPORT_SYM int have_aes_ni(void)",
                "+{",
                "+    uint32_t ecx;",
                "+",
                "+    ecx = leaf1_ecx();",
                "+    return (ecx & (1UL<<25)) ? 1 : 0;",
                "+}",
                "+",
                "+/** Return non-zero if the CPU supports the PCLMULQDQ instruction (carry-less",
                "+ * multiplication). **/",
                "+EXPORT_SYM int have_clmul(void)",
                "+{",
                "+    uint32_t ecx;",
                "+",
                "+    ecx = leaf1_ecx();",
                "+    return (ecx >> 1) & 1;",
                " }",
                "diff --git a/src/ghash_clmul.c b/src/ghash_clmul.c",
                "new file mode 100644",
                "index 00000000..27bc2cd2",
                "--- /dev/null",
                "+++ b/src/ghash_clmul.c",
                "@@ -0,0 +1,285 @@",
                "+/* ===================================================================",
                "+ *",
                "+ * Copyright (c) 2018, Helder Eijs <helderijs@gmail.com>",
                "+ * All rights reserved.",
                "+ *",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions",
                "+ * are met:",
                "+ *",
                "+ * 1. Redistributions of source code must retain the above copyright",
                "+ *    notice, this list of conditions and the following disclaimer.",
                "+ * 2. Redistributions in binary form must reproduce the above copyright",
                "+ *    notice, this list of conditions and the following disclaimer in",
                "+ *    the documentation and/or other materials provided with the",
                "+ *    distribution.",
                "+ *",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS",
                "+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",
                "+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,",
                "+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,",
                "+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
                "+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
                "+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT",
                "+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN",
                "+ * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "+ * ===================================================================",
                "+ */",
                "+",
                "+#include \"common.h\"",
                "+",
                "+#if defined(HAVE_INTRIN_H)",
                "+#include <intrin.h>",
                "+#else",
                "+#include <x86intrin.h>",
                "+#endif",
                "+",
                "+/**",
                "+ * This module implement the basic GHASH multiplication, as described in",
                "+ * NIST SP 800-38D.",
                "+ *",
                "+ * Specifically, we perform the multiplication of two elements in GF(2^128)",
                "+ * represented as polynomials, modulo P(x) = x^128 + x^7 + x + 1.",
                "+ *",
                "+ * The coefficients of the two polynomials are encoded little endian",
                "+ * byte wise, but big endian bit wise (within a byte).",
                "+ *",
                "+ * In other words, the 16-bit byte string in memory:",
                "+ *",
                "+ *      0x40 0x01",
                "+ *",
                "+ * represents the polynomial:",
                "+ *",
                "+ *      x^15 + x^2 = 0x8002",
                "+ *",
                "+ * Of course, polynomials in this case have degree 127, not 15.",
                "+ *",
                "+ * Internally, we prefer to operate with the conventional representation of",
                "+ * bits within a byte (leftmost bit is LSB). To that end, as explained in [3],",
                "+ * it is possible to work with the *reflected* values.",
                "+ *",
                "+ * References:",
                "+ * [1] http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.447.379&rep=rep1&type=pdf",
                "+ * [2] https://crypto.stanford.edu/RealWorldCrypto/slides/gueron.pdf",
                "+ * [3] https://blog.quarkslab.com/reversing-a-finite-field-multiplication-optimization.html",
                "+ */",
                "+",
                "+/**",
                "+ * Perform the Montgomery reduction on a polynomial of degree 255,",
                "+ * using basis x^128 and modulus p(x) = x^128 + x^127 + x^126 + x^121 + 1.",
                "+ *",
                "+ * See at the bottom for an explaination.",
                "+ */",
                "+static inline __m128i reduce(__m128i prod_high, __m128i prod_low)",
                "+{",
                "+    const uint64_t c2 = 0xc200000000000000U;",
                "+    __m128i t1, t2, t3, t4, t7;",
                "+   ",
                "+    t1 = prod_high;     // U3:U2",
                "+    t7 = prod_low;      // U1:U0",
                "+    t3 = _mm_loadl_epi64((__m128i*)&c2);",
                "+    t2 = _mm_clmulepi64_si128(t3, t7, 0x00);    // A",
                "+    t4 = _mm_shuffle_epi32(t7, _MM_SHUFFLE(1,0,3,2));   // U0:U1",
                "+    t4 = _mm_xor_si128(t4, t2); // B",
                "+    t2 = _mm_clmulepi64_si128(t3, t4, 0x00);    // C",
                "+    t4 = _mm_shuffle_epi32(t4, _MM_SHUFFLE(1,0,3,2));   // B0:B1",
                "+    t4 = _mm_xor_si128(t4, t2); // D",
                "+    t1 = _mm_xor_si128(t1, t4); // T",
                "+    ",
                "+    return t1;",
                "+}",
                "+",
                "+/**",
                "+ * Perform the carry-less multiplication of two polynomials of degree 127.",
                "+ */",
                "+static inline void clmult(__m128i *prod_high, __m128i *prod_low, __m128i *a, __m128i *b)",
                "+{",
                "+    __m128i c, d, e, f, g, h, i;",
                "+",
                "+    c = _mm_clmulepi64_si128(*a, *b, 0x00);   // A0*B0",
                "+    d = _mm_clmulepi64_si128(*a, *b, 0x11);   // A1*B1",
                "+    e = _mm_clmulepi64_si128(*a, *b, 0x10);   // A0*B1",
                "+    f = _mm_clmulepi64_si128(*a, *b, 0x01);   // A1*B0",
                "+    g = _mm_xor_si128(e, f);                // E1+F1:E0+F0",
                "+    h = _mm_slli_si128(g, 8);               // E0+F0:0",
                "+    i = _mm_srli_si128(g, 8);               // 0:E1+F1",
                "+    *prod_high = _mm_xor_si128(d, i);",
                "+    *prod_low  = _mm_xor_si128(c, h);",
                "+}",
                "+",
                "+/**",
                "+ * Multiply a polynomial of degree 127 by x, modulo p(x) = x^128 + x^127 + x^126 + x^121 + 1",
                "+ */",
                "+static inline __m128i multx(__m128i a)",
                "+{",
                "+    int msb;",
                "+    int64_t r;",
                "+    uint64_t p0, p1;",
                "+    __m128i t0, t1, t2, t3, t4, t5, t6, t7;",
                "+",
                "+    msb = _mm_movemask_epi8(a) >> 15;       // Bit 0 is a[127]",
                "+    r = (msb ^ 1) - 1;                      // Msb is copied in all 64 positions",
                "+    p0 = (uint64_t)r & 0x0000000000000001U; // Zero or XOR mask (low)",
                "+    p1 = (uint64_t)r & 0xc200000000000000U; // Zero or XOR mask (high)",
                "+    t0 = _mm_loadl_epi64((__m128i*)&p0);",
                "+    t1 = _mm_loadl_epi64((__m128i*)&p1);",
                "+    t2 = _mm_unpacklo_epi64(t0, t1);        // Zero or XOR mask",
                "+",
                "+    // Shift value a left by 1 bit",
                "+    t3 = _mm_bslli_si128(a, 8);     // Shift a left by 64 bits (lower 64 bits are zero)",
                "+    t4 = _mm_srli_epi64(t3, 63);    // Bit 64 is now a[63], all other bits are 0",
                "+    t5 = _mm_slli_epi64(a, 1);      // Shift left by 1 bit, but bit 64 is zero, not a[63]",
                "+    t6 = _mm_or_si128(t4, t5);      // Actual result of shift left by 1 bit",
                "+",
                "+    // XOR conditional mask",
                "+    t7 = _mm_xor_si128(t2, t6);",
                "+    ",
                "+    return t7;",
                "+}",
                "+",
                "+/** Swap bytes in an XMM register **/",
                "+static inline __m128i swap(__m128i a)",
                "+{",
                "+    __m128i mask;",
                "+",
                "+    mask = _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);",
                "+    return _mm_shuffle_epi8(a, mask);",
                "+}",
                "+",
                "+/**",
                "+ * Multiply two polynomials A and B in GF(2^128) modulo x^128 + x^7 + x + 1.",
                "+ *",
                "+ * b[] is actually pre-swapped and pre-multiplied by x.",
                "+ *",
                "+ * We use the fundamental result that the product is equivalent to:",
                "+ *",
                "+ *  A * (B * x) * x^{-128} modulo x^128 + x^127 + x^126 + x^121 + 1",
                "+ */",
                "+static inline __m128i ghash_mult(__m128i *a, __m128i *bx)",
                "+{",
                "+    __m128i a128, prod_hi, prod_lo, result;",
                "+",
                "+    a128 = swap(*a);",
                "+    clmult(&prod_hi, &prod_lo, &a128, bx);",
                "+    result = reduce(prod_hi, prod_lo);",
                "+    return swap(result);",
                "+}",
                "+",
                "+EXPORT_SYM int ghash_expand_clmul(const uint8_t h[16], __m128i **expanded)",
                "+{",
                "+    __m128i h128;",
                "+",
                "+    if (NULL==h || NULL==expanded)",
                "+        return ERR_NULL;",
                "+",
                "+    *expanded = align_alloc(16, 16);",
                "+    if (NULL == *expanded)",
                "+        return ERR_MEMORY;",
                "+",
                "+    /** Pre-swap and pre-multiply h by x **/",
                "+    h128 = swap(_mm_loadu_si128((__m128i*)h));",
                "+    **expanded = multx(h128);",
                "+",
                "+    return 0;",
                "+}",
                "+",
                "+EXPORT_SYM int ghash_destroy_clmul(__m128i *expanded)",
                "+{",
                "+    align_free(expanded);",
                "+    return 0;",
                "+}",
                "+",
                "+EXPORT_SYM int ghash_clmul(",
                "+        uint8_t y_out[16],",
                "+        const uint8_t block_data[],",
                "+        size_t len,",
                "+        const uint8_t y_in[16],",
                "+        __m128i *expanded",
                "+        )",
                "+{",
                "+    unsigned i;",
                "+    __m128i y_temp;",
                "+",
                "+    if (NULL==y_out || NULL==block_data || NULL==y_in || NULL==expanded)",
                "+        return ERR_NULL;",
                "+",
                "+    if (len % 16)",
                "+        return ERR_NOT_ENOUGH_DATA;",
                "+",
                "+    y_temp = _mm_loadu_si128((__m128i*)y_in);",
                "+    for (i=0; i<len; i+=16) {",
                "+        __m128i x, data;",
                "+",
                "+        data = _mm_loadu_si128((__m128i*)&block_data[i]);",
                "+        x = _mm_xor_si128(y_temp, data);",
                "+        y_temp = ghash_mult(&x, expanded);",
                "+    }",
                "+",
                "+    _mm_storeu_si128((__m128i*)y_out, y_temp);",
                "+    return 0;",
                "+}",
                "+",
                "+/**",
                "+ * The function reduce() computes the Montgomery reduction",
                "+ * of U (input, 256 bits) with FastREDC algorithm:",
                "+ *",
                "+ *  Q = ((U mod X^128) * p' mod X^128",
                "+ *  T = (U + Q*p) div X^128",
                "+ *",
                "+ * where:",
                "+ *  p = 1:C200000000000000:1 = 1:c2:1",
                "+ *  p' = p^{-1} mod X^128 = C200000000000000:1 = c2:1",
                "+ *",
                "+ * U3:U2 : U1:U0 (256 bit)",
                "+ * Q1:Q0 (128 bit)",
                "+ * T1:T0 (128 bit)",
                "+ *",
                "+ * Q = (U mod X^128) * p' mod X^128",
                "+ *   = (U1:U0) * p' mod X^128 = (U1:U0) * (c2:1) mod X^128 = Q1:Q0",
                "+ *   Q0 = U0",
                "+ *   Q1 = L(U0*c2) + U1",
                "+ *",
                "+ * T = (U + Q*p) div X^128 = T1:T0",
                "+ *",
                "+ * Q*p = S = Q1:Q0 * 1:c2:1",
                "+ *   S0 = Q0 (dropped)",
                "+ *   S1 = L(c2*Q0) + Q1 (dropped)",
                "+ *   S2 = Q0 + L(c2*Q1) + H(c2*Q0)",
                "+ *   S3 = Q1 + H(c2*Q1)",
                "+ *",
                "+ * T0 = S2 + U2",
                "+ * T1 = S3 + U3",
                "+ *",
                "+ * Q1 = L(U0*c2) + U1",
                "+ * T0 = U0 + L(c2*Q1) + H(c2*U0) + U2",
                "+ * T1 = Q1 + H(c2*Q1) + U3",
                "+ *",
                "+ * A = c2*U0",
                "+ * Q1 = A0 + U1",
                "+ * T0 = U0 + L(c2*Q1) + A1 + U2",
                "+ * T1 = Q1 + H(c2*Q1) + U3",
                "+ *",
                "+ * A = c2*U0",
                "+ * B = A + U0:U1 = B1:Q1",
                "+ * T0 = L(c2*B0) + B1 + U2",
                "+ * T1 = B0 + H(c2*B0) + U3",
                "+ *",
                "+ * A = c2*U0",
                "+ * B = A + U0:U1",
                "+ * C = c2*B0",
                "+ * T0 = C0 + B1 + U2",
                "+ * T1 = B0 + C1 + U3",
                "+ *",
                "+ * A = c2*U0",
                "+ * B = A + U0:U1",
                "+ * C = c2*B0",
                "+ * D = C + B0:B1",
                "+ * T0 = D0 + U2",
                "+ * T1 = D1 + U3",
                "+ */",
                "+",
                "+",
                "+",
                "diff --git a/src/ghash_portable.c b/src/ghash_portable.c",
                "new file mode 100644",
                "index 00000000..2d261e4d",
                "--- /dev/null",
                "+++ b/src/ghash_portable.c",
                "@@ -0,0 +1,187 @@",
                "+/*",
                "+ *  galois.c: arithmetic in Galois Fields",
                "+ *",
                "+ * ===================================================================",
                "+ * The contents of this file are dedicated to the public domain.  To",
                "+ * the extent that dedication to the public domain is not available,",
                "+ * everyone is granted a worldwide, perpetual, royalty-free,",
                "+ * non-exclusive license to exercise all rights associated with the",
                "+ * contents of this file for any purpose whatsoever.",
                "+ * No rights are reserved.",
                "+ *",
                "+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",
                "+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
                "+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",
                "+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS",
                "+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN",
                "+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",
                "+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
                "+ * SOFTWARE.",
                "+ * ===================================================================",
                "+ */",
                "+",
                "+#include \"common.h\"",
                "+",
                "+FAKE_INIT(galois)",
                "+",
                "+#define ALIGNMENT 32",
                "+",
                "+/**",
                "+ * A V table is a 4096 bytes table that will contain the expanded",
                "+ * GHASH key (H). It is used to speed up the GF(128) multiplication Z = X*H.",
                "+ *",
                "+ * The table contains 128 entries, one for each bit of X.",
                "+ * Each entry takes 32 bytes and can fit into the cache line of a modern",
                "+ * processor. If we assume that access to memory mapped to the same",
                "+ * cache line is somewhat constant, we can make GHASH robust again",
                "+ * cache timing attacks.",
                "+ */",
                "+typedef uint64_t t_v_tables[128][2][2];",
                "+",
                "+/**",
                "+ * To ensure that the V table is aligned to a 32-byte memory boundary,",
                "+ * we allocate a larger piece of memory and carve the V table from there.",
                "+ */",
                "+typedef struct {",
                "+    uint8_t buffer[sizeof(t_v_tables)+ALIGNMENT];",
                "+    int offset;",
                "+} t_exp_key;",
                "+",
                "+/**",
                "+ * Create a V table. V[i] is the value H*x^i (i=0..127).",
                "+ * \\param h         The 16 byte GHASH key",
                "+ * \\param tables    A pointer to an allocated V table",
                "+ */",
                "+static void make_v_tables(const uint8_t h[16], t_v_tables *tables)",
                "+{",
                "+    uint64_t (*cur)[2];",
                "+    int i;",
                "+",
                "+    memset(tables, 0, sizeof(t_v_tables));",
                "+",
                "+    cur = &((*tables)[0][1]);",
                "+",
                "+    (*cur)[0] = LOAD_U64_BIG(&h[0]);",
                "+    (*cur)[1] = LOAD_U64_BIG(&h[8]);",
                "+",
                "+    for (i=1; i<128; i++) {",
                "+        uint64_t c;",
                "+        uint64_t (*next)[2];",
                "+",
                "+        next = &((*tables)[i][1]);",
                "+",
                "+        /** v = (v&1)*0xE1000000000000000000000000000000L ^ (v>>1) **/",
                "+        c = (*cur)[1]&1 ? 0xE100000000000000 : 0;",
                "+        (*next)[1] = (*cur)[1]>>1 | (*cur)[0]<<63;",
                "+        (*next)[0] = (*cur)[0]>>1 ^ c;",
                "+",
                "+        cur = next;",
                "+    }",
                "+}",
                "+",
                "+/**",
                "+ * Multiply two elements of GF(2**128) using the reducing polynomial",
                "+ * (x^128 + x^7 + x^2 + x + 1).",
                "+ *",
                "+ * \\param   out         The 16 byte buffer that will receive the result",
                "+ * \\param   key_tables  One factor, expanded into a V table",
                "+ * \\param   x           The other factor (16 bytes)",
                "+ */",
                "+static void gcm_mult2(uint8_t out[16], const t_v_tables *key_tables, const uint8_t x[16])",
                "+{",
                "+    int i, bit_scan_128;",
                "+    uint64_t z[2];",
                "+",
                "+    z[0] = z[1] = 0;",
                "+    bit_scan_128 = 0;",
                "+    for (i=0; i<16; i++) {",
                "+        unsigned xi;",
                "+        int j;",
                "+",
                "+        xi = x[i];",
                "+        for (j=0; j<8; j++) {",
                "+            unsigned bit;",
                "+",
                "+            bit = xi>>7 & 1; /** Constant time */",
                "+            z[0] ^= (*key_tables)[bit_scan_128][bit][0];",
                "+            z[1] ^= (*key_tables)[bit_scan_128][bit][1];",
                "+",
                "+            xi <<= 1;",
                "+            bit_scan_128++;",
                "+        }",
                "+    }",
                "+    ",
                "+    STORE_U64_BIG(out,   z[0]);",
                "+    STORE_U64_BIG(out+8, z[1]);",
                "+}",
                "+",
                "+/**",
                "+ * Compute the GHASH of a piece of data given an arbitrary Y_0,",
                "+ * as specified in NIST SP 800 38D.",
                "+ *",
                "+ * \\param y_out      The resulting GHASH (16 bytes).",
                "+ * \\param block_data Pointer to the data to hash.",
                "+ * \\param len        Length of the data to hash (multiple of 16).",
                "+ * \\param y_in       The initial Y (Y_0, 16 bytes).",
                "+ * \\param exp_key    The expanded hash key (16*256*16 bytes + alignment).",
                "+ *",
                "+ * y_out and y_int can point to the same buffer.",
                "+ */",
                "+EXPORT_SYM int ghash_portable(",
                "+        uint8_t y_out[16],",
                "+        const uint8_t block_data[],",
                "+        size_t len,",
                "+        const uint8_t y_in[16],",
                "+        const t_exp_key *exp_key",
                "+        )",
                "+{",
                "+    unsigned i;",
                "+    const t_v_tables *v_tables;",
                "+",
                "+    if (NULL==y_out || NULL==block_data || NULL==y_in || NULL==exp_key)",
                "+        return ERR_NULL;",
                "+",
                "+    if (len % 16)",
                "+        return ERR_NOT_ENOUGH_DATA;",
                "+     ",
                "+    v_tables = (const t_v_tables*)(exp_key->buffer + exp_key->offset);",
                "+",
                "+    memcpy(y_out, y_in, 16);",
                "+    for (i=0; i<len; i+=16) {",
                "+        unsigned j;",
                "+        uint8_t x[16];",
                "+",
                "+        for (j=0; j<16; j++) {",
                "+            x[j] = y_out[j] ^ block_data[i+j];",
                "+        }",
                "+        gcm_mult2(y_out, v_tables, x);",
                "+    }",
                "+",
                "+    return 0;",
                "+}",
                "+",
                "+/**",
                "+ * Expand the AES key into a Python (byte) string object.",
                "+ */ ",
                "+EXPORT_SYM int ghash_expand_portable(const uint8_t h[16], t_exp_key **ghash_tables)",
                "+{",
                "+    t_exp_key *exp_key;",
                "+",
                "+    if (NULL==h || NULL==ghash_tables)",
                "+        return ERR_NULL;",
                "+",
                "+    *ghash_tables = exp_key = calloc(1, sizeof(t_exp_key));",
                "+    if (NULL == exp_key)",
                "+        return ERR_MEMORY;",
                "+    ",
                "+    exp_key->offset = ALIGNMENT - (int)((uintptr_t)exp_key->buffer & (ALIGNMENT-1));",
                "+    make_v_tables(h, (t_v_tables*)(exp_key->buffer + exp_key->offset));",
                "+    ",
                "+    return 0;",
                "+}",
                "+",
                "+EXPORT_SYM int ghash_destroy_portable(t_exp_key *ghash_tables)",
                "+{",
                "+    free(ghash_tables);",
                "+    return 0;",
                "+}"
            ],
            "changed_files": [
                "lib/Crypto/Cipher/AES.py",
                "lib/Crypto/Cipher/_mode_gcm.py",
                "lib/Crypto/SelfTest/Cipher/test_AES.py",
                "lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "lib/Crypto/Util/_cpuid.py",
                "setup.py",
                "src/cpuid.c",
                "src/ghash_clmul.c",
                "src/ghash_portable.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AESNI",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "a98fa382ba9817c5dac26952b07f3f79b245e63c",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528577189,
            "hunks": 4,
            "message": "Add GCM test for messages between 0 and 159 bytes",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_GCM.py b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "index f895017e..42804324 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "@@ -38,3 +38,3 @@ from Crypto.Util.py3compat import unhexlify, tobytes, bchr, b, _memoryview",
                " from Crypto.Cipher import AES",
                "-from Crypto.Hash import SHAKE128",
                "+from Crypto.Hash import SHAKE128, SHA256",
                "@@ -854,2 +854,23 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "+class TestVariableLength(unittest.TestCase):",
                "+",
                "+    def __init__(self, **extra_params):",
                "+        unittest.TestCase.__init__(self)",
                "+        self._extra_params = extra_params",
                "+",
                "+    def runTest(self):",
                "+        key = b'0' * 16",
                "+        h = SHA256.new()",
                "+",
                "+        for length in range(160):",
                "+            nonce = '{0:04d}'.format(length).encode('utf-8')",
                "+            data = bchr(length) * length",
                "+            cipher = AES.new(key, AES.MODE_GCM, nonce=nonce, **self._extra_params)",
                "+            ct, tag = cipher.encrypt_and_digest(data)",
                "+            h.update(ct)",
                "+            h.update(tag)",
                "+",
                "+        self.assertEqual(h.hexdigest(), '1057d9559f55227fd4e36bab8716ebcfe6671b5603fdceb046a33591175ee5e4')",
                "+",
                "+",
                " def get_tests(config={}):",
                "@@ -865,2 +886,3 @@ def get_tests(config={}):",
                "     tests += list_test_cases(TestVectorsGueronKrasnov)",
                "+    tests += [ TestVariableLength() ]",
                "     if config.get('slow_tests'):",
                "@@ -870,2 +892,3 @@ def get_tests(config={}):",
                "         tests += [ TestVectorsWycheproof(wycheproof_warnings, use_clmul=False) ]",
                "+        tests += [ TestVariableLength(use_clmul = False) ]",
                "         if config.get('slow_tests'):"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Cipher/test_GCM.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: byte, message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "97b426e624df14035c9effccda6761c0b50e8dd6",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528706429,
            "hunks": 1,
            "message": "Fix Crypto.Util.number.bytes_to_long for Python 2.6",
            "diff": [
                "diff --git a/lib/Crypto/Util/number.py b/lib/Crypto/Util/number.py",
                "index 46a0b2c2..07b54a81 100644",
                "--- a/lib/Crypto/Util/number.py",
                "+++ b/lib/Crypto/Util/number.py",
                "@@ -427,3 +427,3 @@ def bytes_to_long(s):",
                "             s = bytes(s)",
                "-        elif isinstance(s, memoryview):",
                "+        elif isinstance(s, _memoryview):",
                "             s = s.tobytes()"
            ],
            "changed_files": [
                "lib/Crypto/Util/number.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: byte",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "321f5f29eb6a0f8ec4fdd34f2a534bb498b38236",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533421643,
            "hunks": 1,
            "message": "Bump version",
            "diff": [
                "diff --git a/lib/Crypto/__init__.py b/lib/Crypto/__init__.py",
                "index 7d1e7a1e..c244839a 100644",
                "--- a/lib/Crypto/__init__.py",
                "+++ b/lib/Crypto/__init__.py",
                "@@ -3,3 +3,3 @@ __all__ = ['Cipher', 'Hash', 'Protocol', 'PublicKey', 'Util', 'Signature',",
                "-version_info = (3, 6, 4)",
                "+version_info = (3, 6, 5, \"a0\")"
            ],
            "changed_files": [
                "lib/Crypto/__init__.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "df800357717cc8519d200e4548f410053825cd00"
                ],
                [
                    "no-tag",
                    "979aa2a13b6392108f4e14a71646fceb087cd300"
                ]
            ],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5fa1dcf932e8ab76fe3731f8163e8d85c5a76128",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527280418,
            "hunks": 0,
            "message": "Merge pull request #164 from paulfurley/patch-1 Docs: Call `verify` on the verifier object, not the hash",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "164": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 164",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9788edcd38f2104ae6def75caab90346eb3d4c69",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1455953387,
            "hunks": 0,
            "message": "Build pycryptodomex",
            "diff": [
                "diff --git a/.separate_namespace b/.separate_namespace",
                "new file mode 100644",
                "index 00000000..e69de29b"
            ],
            "changed_files": [
                ".separate_namespace"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e49d8f4891f285d9d4e350e3ee75f1f7ff1d79cc"
                ]
            ],
            "tags": [
                "v3.6.6x"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "83c2b4bf76489d91f682c73760f0a4b5e041a549",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533813464,
            "hunks": 0,
            "message": "Merge pull request #197 from BoboTiG/fix-deprecation-warning-invalid-sequence Fix DeprecationWarning: invalid escape sequence",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "197": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e16bc2263991df6fa304dfd616bbb96185386cb3",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1534080479,
            "hunks": 1,
            "message": "Update to Changelog",
            "diff": [
                "diff --git a/lib/Crypto/__init__.py b/lib/Crypto/__init__.py",
                "index c244839a..efd9d7bb 100644",
                "--- a/lib/Crypto/__init__.py",
                "+++ b/lib/Crypto/__init__.py",
                "@@ -3,3 +3,3 @@ __all__ = ['Cipher', 'Hash', 'Protocol', 'PublicKey', 'Util', 'Signature',",
                "-version_info = (3, 6, 5, \"a0\")",
                "+version_info = (3, 6, 5)"
            ],
            "changed_files": [
                "lib/Crypto/__init__.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3506836f34b9008ba714e7beab097fecb42832da"
                ]
            ],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c1b899ba791a058ab69661314b9e6de2db5ea33e",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533065841,
            "hunks": 3,
            "message": "Remove max limit for searching for D in Lucas test",
            "diff": [
                "diff --git a/lib/Crypto/Math/Primality.py b/lib/Crypto/Math/Primality.py",
                "index e2124068..74e4d545 100644",
                "--- a/lib/Crypto/Math/Primality.py",
                "+++ b/lib/Crypto/Math/Primality.py",
                "@@ -136,7 +136,10 @@ def lucas_test(candidate):",
                "     def alternate():",
                "-        sgn = 1",
                "         value = 5",
                "-        for x in xrange(20):",
                "-            yield sgn * value",
                "-            sgn, value = -sgn, value + 2",
                "+        while True:",
                "+            yield value",
                "+            if value > 0:",
                "+                value += 2",
                "+            else:",
                "+                value -= 2",
                "+            value = -value",
                "@@ -148,4 +151,2 @@ def lucas_test(candidate):",
                "             break",
                "-    else:",
                "-        return COMPOSITE",
                "     # Found D. P=1 and Q=(1-D)/4 (note that Q is guaranteed to be an integer)"
            ],
            "changed_files": [
                "lib/Crypto/Math/Primality.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3eca533fe1c1d0eaf5780ff9615bbf38e963faad",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528465308,
            "hunks": 2,
            "message": "Remove GCC pragmas for O3 optimization (done globally)",
            "diff": [
                "diff --git a/src/multiply.h b/src/multiply.h",
                "index d16ed99a..b84975d7 100644",
                "--- a/src/multiply.h",
                "+++ b/src/multiply.h",
                "@@ -21,7 +21,3 @@",
                "-uint64_t static inline dp_mult_128_32(uint64_t a, uint64_t b, uint64_t *oh)",
                "-#if defined(__GNUC__) && !defined(__clang__)",
                "-__attribute__((optimize(\"-O3\")))",
                "-#endif",
                "-;",
                "+uint64_t static inline dp_mult_128_32(uint64_t a, uint64_t b, uint64_t *oh);",
                "@@ -55,12 +51,4 @@ uint64_t static inline dp_mult_128_32(uint64_t a, uint64_t b, uint64_t *oh)",
                "-size_t square_w(uint64_t *t, const uint64_t *a, size_t words)",
                "-#if defined(__GNUC__) && !defined(__clang__)",
                "-__attribute__((optimize(\"-O3\")))",
                "-#endif",
                "-;",
                "+size_t square_w(uint64_t *t, const uint64_t *a, size_t words);",
                "-size_t addmul128(uint64_t * RESTRICT t, const uint64_t * RESTRICT a, uint64_t b0, uint64_t b1, size_t words)",
                "-#if defined(__GNUC__) && !defined(__clang__)",
                "-__attribute__((optimize(\"-O3\")))",
                "-#endif",
                "-;",
                "+size_t addmul128(uint64_t * RESTRICT t, const uint64_t * RESTRICT a, uint64_t b0, uint64_t b1, size_t words);"
            ],
            "changed_files": [
                "src/multiply.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e7d152ff119cd9dc729cd4b873ea206a9a783d21",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527964687,
            "hunks": 2,
            "message": "Fix typos",
            "diff": [
                "diff --git a/setup.py b/setup.py",
                "index fbfb000b..d251ed64 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -319,3 +319,3 @@ class PCTBuildExt (build_ext):",
                "             if clmul_result:",
                "-                PrintErr(\"Compiling support for CMUL instructions\")",
                "+                PrintErr(\"Compiling support for CLMUL instructions\")",
                "                 clmul_mods = [ x for x in self.extensions if x.name == clmul_mod_name ]",
                "@@ -324,3 +324,3 @@ class PCTBuildExt (build_ext):",
                "             else:",
                "-                PrintErr (\"Warning: compiler does not support CMUL instructions\")",
                "+                PrintErr (\"Warning: compiler does not support CLMUL instructions\")",
                "                 self.remove_extensions(self.clmul_mod_name)"
            ],
            "changed_files": [
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "66fdb1fdd437669513d9ad0095f8023950a8421d",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533847704,
            "hunks": 11,
            "message": "Increase testing for primality",
            "diff": [
                "diff --git a/lib/Crypto/Math/Primality.py b/lib/Crypto/Math/Primality.py",
                "index 74e4d545..8ae0f61f 100644",
                "--- a/lib/Crypto/Math/Primality.py",
                "+++ b/lib/Crypto/Math/Primality.py",
                "@@ -65,2 +65,5 @@ def miller_rabin_test(candidate, iterations, randfunc=None):",
                "+    if candidate in (1, 2, 3, 5):",
                "+        return PROBABLY_PRIME",
                "+    ",
                "     if candidate.is_even():",
                "@@ -131,2 +134,4 @@ def lucas_test(candidate):",
                "     # Step 1",
                "+    if candidate in (1, 2, 3, 5):",
                "+        return PROBABLY_PRIME",
                "     if candidate.is_even() or candidate.is_perfect_square():",
                "@@ -146,2 +151,4 @@ def lucas_test(candidate):",
                "     for D in alternate():",
                "+        if candidate in (D, -D):",
                "+            continue",
                "         js = Integer.jacobi_symbol(D, candidate)",
                "@@ -208,3 +215,3 @@ from Crypto.Util.number import sieve_base as _sieve_base",
                " ## is probably dependent on the platform and the candidate size",
                "-_sieve_base = _sieve_base[:100]",
                "+_sieve_base = set(_sieve_base[:100])",
                "@@ -239,3 +246,5 @@ def test_probable_prime(candidate, randfunc=None):",
                "-    # First,  check trial division by the smallest primes",
                "+    # First, check trial division by the smallest primes",
                "+    if int(candidate) in _sieve_base:",
                "+        return PROBABLY_PRIME",
                "     try:",
                "@@ -243,3 +252,3 @@ def test_probable_prime(candidate, randfunc=None):",
                "     except ValueError:",
                "-        return False",
                "+        return COMPOSITE",
                "diff --git a/lib/Crypto/SelfTest/Math/test_Primality.py b/lib/Crypto/SelfTest/Math/test_Primality.py",
                "index f89e1bf6..85297b3f 100644",
                "--- a/lib/Crypto/SelfTest/Math/test_Primality.py",
                "+++ b/lib/Crypto/SelfTest/Math/test_Primality.py",
                "@@ -53,4 +53,4 @@ class TestPrimality(unittest.TestCase):",
                "-    primes = (13, 17, 19, 23, 2**127-1, 175637383534939453397801320455508570374088202376942372758907369518414308188137781042871856139027160010343454418881888953150175357127346872102307696660678617989191485418582475696230580407111841072614783095326672517315988762029036079794994990250662362650625650262324085116467511357592728695033227611029693067539)",
                "-    composites = (12, 7*23, (2**19-1)*(2**67-1), 9746347772161,)",
                "+    primes = (1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 2**127-1, 175637383534939453397801320455508570374088202376942372758907369518414308188137781042871856139027160010343454418881888953150175357127346872102307696660678617989191485418582475696230580407111841072614783095326672517315988762029036079794994990250662362650625650262324085116467511357592728695033227611029693067539)",
                "+    composites = (0, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 7*23, (2**19-1)*(2**67-1), 9746347772161,)",
                "@@ -61,2 +61,3 @@ class TestPrimality(unittest.TestCase):",
                "             self.assertEqual(miller_rabin_test(composite, 3), COMPOSITE)",
                "+        self.assertRaises(ValueError, miller_rabin_test, -1, 3)",
                "@@ -64,5 +65,8 @@ class TestPrimality(unittest.TestCase):",
                "         for prime in self.primes:",
                "-            self.assertEqual(lucas_test(prime), PROBABLY_PRIME)",
                "+            res = lucas_test(prime)",
                "+            self.assertEqual(res, PROBABLY_PRIME)",
                "         for composite in self.composites:",
                "-            self.assertEqual(lucas_test(composite), COMPOSITE)",
                "+            res = lucas_test(composite)",
                "+            self.assertEqual(res, COMPOSITE)",
                "+        self.assertRaises(ValueError, lucas_test, -1)",
                "@@ -84,2 +88,7 @@ class TestPrimality(unittest.TestCase):",
                "+        from Crypto.Util.number import sieve_base",
                "+        for p in sieve_base[:100]:",
                "+            res = test_probable_prime(p)",
                "+            self.assertEqual(res, PROBABLY_PRIME)",
                "+",
                "     def test_generate_prime_bit_size(self):"
            ],
            "changed_files": [
                "lib/Crypto/Math/Primality.py",
                "lib/Crypto/SelfTest/Math/test_Primality.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "572357ff83c95fee19baf9c54aed1898f16091b0",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528756626,
            "hunks": 1,
            "message": "Fix incorrect API for portable GHASH",
            "diff": [
                "diff --git a/lib/Crypto/Cipher/_mode_gcm.py b/lib/Crypto/Cipher/_mode_gcm.py",
                "index 445d7ea3..c1fac1aa 100644",
                "--- a/lib/Crypto/Cipher/_mode_gcm.py",
                "+++ b/lib/Crypto/Cipher/_mode_gcm.py",
                "@@ -75,3 +75,3 @@ def _build_impl(lib, postfix):",
                " def _get_ghash_portable():",
                "-    api = _ghash_api_template.replace(\"%imp%\", \"template\")",
                "+    api = _ghash_api_template.replace(\"%imp%\", \"portable\")",
                "     lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_portable\", api)"
            ],
            "changed_files": [
                "lib/Crypto/Cipher/_mode_gcm.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f64df6f47efdaf42bbb674cba9af56cbd09d341d",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533813797,
            "hunks": 19,
            "message": "Fixes ResourceWarnings and DeprecationWarnings",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_EAX.py b/lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "index 587908dd..5589b486 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "@@ -596,6 +596,5 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "     def setUp(self):",
                "-        file_in = open(pycryptodome_filename(",
                "-                        \"Crypto.SelfTest.Cipher.test_vectors.wycheproof\".split(\".\"),",
                "-                        \"aes_eax_test.json\"), \"rt\")",
                "-        tv_tree = json.load(file_in)",
                "+        comps = \"Crypto.SelfTest.Cipher.test_vectors.wycheproof\".split(\".\")",
                "+        with open(pycryptodome_filename(comps, \"aes_eax_test.json\"), \"rt\") as file_in:",
                "+            tv_tree = json.load(file_in)",
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_GCM.py b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "index b8c51371..c0bdc106 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "@@ -766,6 +766,5 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "     def setUp(self):",
                "-        file_in = open(pycryptodome_filename(",
                "-                        \"Crypto.SelfTest.Cipher.test_vectors.wycheproof\".split(\".\"),",
                "-                        \"aes_gcm_test.json\"), \"rt\")",
                "-        tv_tree = json.load(file_in)",
                "+        comps = \"Crypto.SelfTest.Cipher.test_vectors.wycheproof\".split(\".\")",
                "+        with open(pycryptodome_filename(comps, \"aes_gcm_test.json\"), \"rt\") as file_in:",
                "+            tv_tree = json.load(file_in)",
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_SIV.py b/lib/Crypto/SelfTest/Cipher/test_SIV.py",
                "index c55391d8..7a9b4d3d 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_SIV.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_SIV.py",
                "@@ -402,6 +402,5 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "     def setUp(self):",
                "-        file_in = open(pycryptodome_filename(",
                "-                        \"Crypto.SelfTest.Cipher.test_vectors.wycheproof\".split(\".\"),",
                "-                        \"aes_siv_cmac_test.json\"), \"rt\")",
                "-        tv_tree = json.load(file_in)",
                "+        comps = \"Crypto.SelfTest.Cipher.test_vectors.wycheproof\".split(\".\")",
                "+        with open(pycryptodome_filename(comps, \"aes_siv_cmac_test.json\"), \"rt\") as file_in:",
                "+            tv_tree = json.load(file_in)",
                "diff --git a/lib/Crypto/SelfTest/Hash/test_BLAKE2.py b/lib/Crypto/SelfTest/Hash/test_BLAKE2.py",
                "index 6b92ba7d..0fd876da 100644",
                "--- a/lib/Crypto/SelfTest/Hash/test_BLAKE2.py",
                "+++ b/lib/Crypto/SelfTest/Hash/test_BLAKE2.py",
                "@@ -276,26 +276,27 @@ class Blake2OfficialTestVector(unittest.TestCase):",
                "         self.test_vectors = []",
                "-        for line_number, line in enumerate(open(test_vector_file, \"rt\")):",
                "-",
                "-            if line.strip() == \"\" or line.startswith(\"#\"):",
                "-                continue",
                "-",
                "-            res = re.match(\"%s:\\t([0-9A-Fa-f]*)\" % expected, line)",
                "-            if not res:",
                "-                raise ValueError(\"Incorrect test vector format (line %d)\"",
                "-                                 % line_number)",
                "-",
                "-            if res.group(1):",
                "-                bin_value = unhexlify(tobytes(res.group(1)))",
                "-            else:",
                "-                bin_value = b\"\"",
                "-            if expected == \"in\":",
                "-                input_data = bin_value",
                "-                expected = \"key\"",
                "-            elif expected == \"key\":",
                "-                key = bin_value",
                "-                expected = \"hash\"",
                "-            else:",
                "-                result = bin_value",
                "-                expected = \"in\"",
                "-                self.test_vectors.append((input_data, key, result))",
                "+        with open(test_vector_file, \"rt\") as test_vector_fd:",
                "+            for line_number, line in enumerate(test_vector_fd):",
                "+",
                "+                if line.strip() == \"\" or line.startswith(\"#\"):",
                "+                    continue",
                "+",
                "+                res = re.match(\"%s:\\t([0-9A-Fa-f]*)\" % expected, line)",
                "+                if not res:",
                "+                    raise ValueError(\"Incorrect test vector format (line %d)\"",
                "+                                     % line_number)",
                "+",
                "+                if res.group(1):",
                "+                    bin_value = unhexlify(tobytes(res.group(1)))",
                "+                else:",
                "+                    bin_value = b\"\"",
                "+                if expected == \"in\":",
                "+                    input_data = bin_value",
                "+                    expected = \"key\"",
                "+                elif expected == \"key\":",
                "+                    key = bin_value",
                "+                    expected = \"hash\"",
                "+                else:",
                "+                    result = bin_value",
                "+                    expected = \"in\"",
                "+                    self.test_vectors.append((input_data, key, result))",
                "@@ -334,11 +335,12 @@ class Blake2TestVector1(unittest.TestCase):",
                "         self.test_vectors = []",
                "-        for line_number, line in enumerate(open(test_vector_file, \"rt\")):",
                "-            if line.strip() == \"\" or line.startswith(\"#\"):",
                "-                continue",
                "-            res = re.match(\"digest: ([0-9A-Fa-f]*)\", line)",
                "-            if not res:",
                "-                raise ValueError(\"Incorrect test vector format (line %d)\"",
                "-                                 % line_number)",
                "+        with open(test_vector_file, \"rt\") as test_vector_fd:",
                "+            for line_number, line in enumerate(test_vector_fd):",
                "+                if line.strip() == \"\" or line.startswith(\"#\"):",
                "+                    continue",
                "+                res = re.match(\"digest: ([0-9A-Fa-f]*)\", line)",
                "+                if not res:",
                "+                    raise ValueError(\"Incorrect test vector format (line %d)\"",
                "+                                     % line_number)",
                "-            self.test_vectors.append(unhexlify(tobytes(res.group(1))))",
                "+                self.test_vectors.append(unhexlify(tobytes(res.group(1))))",
                "@@ -378,13 +380,14 @@ class Blake2TestVector2(unittest.TestCase):",
                "         self.test_vectors = []",
                "-        for line_number, line in enumerate(open(test_vector_file, \"rt\")):",
                "-            if line.strip() == \"\" or line.startswith(\"#\"):",
                "-                continue",
                "-            res = re.match(\"digest\\(([0-9]+)\\): ([0-9A-Fa-f]*)\", line)",
                "-            if not res:",
                "-                raise ValueError(\"Incorrect test vector format (line %d)\"",
                "-                                 % line_number)",
                "-",
                "-            key_size = int(res.group(1))",
                "-            result = unhexlify(tobytes(res.group(2)))",
                "-            self.test_vectors.append((key_size, result))",
                "+        with open(test_vector_file, \"rt\") as test_vector_fd:",
                "+            for line_number, line in enumerate(test_vector_fd):",
                "+                if line.strip() == \"\" or line.startswith(\"#\"):",
                "+                    continue",
                "+                res = re.match(r\"digest\\(([0-9]+)\\): ([0-9A-Fa-f]*)\", line)",
                "+                if not res:",
                "+                    raise ValueError(\"Incorrect test vector format (line %d)\"",
                "+                                     % line_number)",
                "+",
                "+                key_size = int(res.group(1))",
                "+                result = unhexlify(tobytes(res.group(2)))",
                "+                self.test_vectors.append((key_size, result))",
                "diff --git a/lib/Crypto/SelfTest/Hash/test_CMAC.py b/lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "index 14a8597b..65bea185 100644",
                "--- a/lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "+++ b/lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "@@ -348,6 +348,5 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "     def setUp(self):",
                "-        file_in = open(pycryptodome_filename(",
                "-                        \"Crypto.SelfTest.Hash.test_vectors.wycheproof\".split(\".\"),",
                "-                        \"aes_cmac_test.json\"), \"rt\")",
                "-        tv_tree = json.load(file_in)",
                "+        comps = \"Crypto.SelfTest.Hash.test_vectors.wycheproof\".split(\".\")",
                "+        with open(pycryptodome_filename(comps, \"aes_cmac_test.json\"), \"rt\") as file_in:",
                "+            tv_tree = json.load(file_in)",
                "diff --git a/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py b/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "index b5f076c7..3830dab6 100644",
                "--- a/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "+++ b/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "@@ -40,10 +40,5 @@ from Crypto.PublicKey import ECC",
                " def load_file(filename, mode=\"rb\"):",
                "-    fd = open(pycryptodome_filename([",
                "-                                    \"Crypto\",",
                "-                                    \"SelfTest\",",
                "-                                    \"PublicKey\",",
                "-                                    \"test_vectors\",",
                "-                                    \"ECC\",",
                "-                                    ], filename), mode)",
                "-    return fd.read()",
                "+    comps = [ \"Crypto\", \"SelfTest\", \"PublicKey\", \"test_vectors\", \"ECC\" ]",
                "+    with open(pycryptodome_filename(comps, filename), mode) as fd:",
                "+        return fd.read()",
                "diff --git a/lib/Crypto/SelfTest/Signature/test_dss.py b/lib/Crypto/SelfTest/Signature/test_dss.py",
                "index 76e2ff33..e76c35f2 100644",
                "--- a/lib/Crypto/SelfTest/Signature/test_dss.py",
                "+++ b/lib/Crypto/SelfTest/Signature/test_dss.py",
                "@@ -166,3 +166,3 @@ for idx, tv in enumerate(test_vectors_verify):",
                "     if isinstance(tv, basestring):",
                "-        res = re.match(\"\\[mod = L=([0-9]+), N=([0-9]+), ([a-zA-Z0-9-]+)\\]\", tv)",
                "+        res = re.match(r\"\\[mod = L=([0-9]+), N=([0-9]+), ([a-zA-Z0-9-]+)\\]\", tv)",
                "         hash_name = res.group(3).replace(\"-\", \"\")",
                "@@ -201,3 +201,3 @@ for idx, tv in enumerate(test_vectors_sign):",
                "     if isinstance(tv, basestring):",
                "-        res = re.match(\"\\[mod = L=([0-9]+), N=([0-9]+), ([a-zA-Z0-9-]+)\\]\", tv)",
                "+        res = re.match(r\"\\[mod = L=([0-9]+), N=([0-9]+), ([a-zA-Z0-9-]+)\\]\", tv)",
                "         hash_name = res.group(3).replace(\"-\", \"\")",
                "@@ -299,3 +299,3 @@ for idx, tv in enumerate(test_vectors_verify):",
                "     if isinstance(tv, basestring):",
                "-        res = re.match(\"\\[P-256,(SHA-[0-9]+)\\]\", tv)",
                "+        res = re.match(r\"\\[P-256,(SHA-[0-9]+)\\]\", tv)",
                "         assert res",
                "@@ -329,3 +329,3 @@ for idx, tv in enumerate(test_vectors_sign):",
                "     if isinstance(tv, basestring):",
                "-        res = re.match(\"\\[P-256,(SHA-[0-9]+)\\]\", tv)",
                "+        res = re.match(r\"\\[P-256,(SHA-[0-9]+)\\]\", tv)",
                "         assert res",
                "@@ -735,6 +735,5 @@ class TestVectorsDSAWycheproof(unittest.TestCase):",
                "     def setUp(self):",
                "-        file_in = open(pycryptodome_filename(",
                "-                        \"Crypto.SelfTest.Signature.test_vectors.wycheproof\".split(\".\"),",
                "-                        \"dsa_test.json\"), \"rt\")",
                "-        tv_tree = json.load(file_in)",
                "+        comps = \"Crypto.SelfTest.Signature.test_vectors.wycheproof\".split(\".\")",
                "+        with open(pycryptodome_filename(comps, \"dsa_test.json\"), \"rt\") as file_in:",
                "+            tv_tree = json.load(file_in)",
                "@@ -809,6 +808,5 @@ class TestVectorsECDSAWycheproof(unittest.TestCase):",
                "     def add_tests(self, filename):",
                "-        file_in = open(pycryptodome_filename(",
                "-                        \"Crypto.SelfTest.Signature.test_vectors.wycheproof\".split(\".\"),",
                "-                        filename), \"rt\")",
                "-        tv_tree = json.load(file_in)",
                "+        comps = \"Crypto.SelfTest.Signature.test_vectors.wycheproof\".split(\".\")",
                "+        with open(pycryptodome_filename(comps, filename), \"rt\") as file_in:",
                "+            tv_tree = json.load(file_in)",
                "diff --git a/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py b/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "index e2175cb4..76520d1c 100644",
                "--- a/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "+++ b/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "@@ -229,6 +229,5 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "     def setUp(self):",
                "-        file_in = open(pycryptodome_filename(",
                "-                        \"Crypto.SelfTest.Signature.test_vectors.wycheproof\".split(\".\"),",
                "-                        \"rsa_signature_test.json\"), \"rt\")",
                "-        tv_tree = json.load(file_in)",
                "+        comps = \"Crypto.SelfTest.Signature.test_vectors.wycheproof\".split(\".\")",
                "+        with open(pycryptodome_filename(comps, \"rsa_signature_test.json\"), \"rt\") as file_in:",
                "+            tv_tree = json.load(file_in)",
                "diff --git a/lib/Crypto/SelfTest/loader.py b/lib/Crypto/SelfTest/loader.py",
                "index 7b85438b..da02244a 100644",
                "--- a/lib/Crypto/SelfTest/loader.py",
                "+++ b/lib/Crypto/SelfTest/loader.py",
                "@@ -38,3 +38,3 @@ from Crypto.Util._file_system import pycryptodome_filename",
                "-def load_tests(dir_comps, file_name, description, conversions):",
                "+def _load_tests(dir_comps, file_in, description, conversions):",
                "     \"\"\"Load and parse a test vector file",
                "@@ -47,5 +47,2 @@ def load_tests(dir_comps, file_name, description, conversions):",
                "-    file_in = open(pycryptodome_filename(dir_comps, file_name))",
                "-    description = \"%s test (%s)\" % (description, file_name)",
                "-",
                "     line_number = 0",
                "@@ -108 +105,16 @@ def load_tests(dir_comps, file_name, description, conversions):",
                "     return results",
                "+",
                "+def load_tests(dir_comps, file_name, description, conversions):",
                "+    \"\"\"Load and parse a test vector file",
                "+",
                "+    This function returnis a list of objects, one per group of adjacent",
                "+    KV lines or for a single line in the form \"[.*]\".",
                "+",
                "+    For a group of lines, the object has one attribute per line.",
                "+    \"\"\"",
                "+    ",
                "+    description = \"%s test (%s)\" % (description, file_name)",
                "+",
                "+    with open(pycryptodome_filename(dir_comps, file_name)) as file_in:",
                "+        results = _load_tests(dir_comps, file_in, description, conversions)",
                "+    return results",
                "diff --git a/setup.py b/setup.py",
                "index 344d50eb..2efdb142 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -731,5 +731,6 @@ if use_separate_namespace:",
                " # By doing this we neeed to change version information in a single file",
                "-for line in open(os.path.join(\"lib\", package_root, \"__init__.py\")):",
                "-    if line.startswith(\"version_info\"):",
                "-        version_tuple = eval(line.split(\"=\")[1])",
                "+with open(os.path.join(\"lib\", package_root, \"__init__.py\")) as init_root:",
                "+    for line in init_root:",
                "+        if line.startswith(\"version_info\"):",
                "+            version_tuple = eval(line.split(\"=\")[1])"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "lib/Crypto/SelfTest/Cipher/test_SIV.py",
                "lib/Crypto/SelfTest/Hash/test_BLAKE2.py",
                "lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "lib/Crypto/SelfTest/Signature/test_dss.py",
                "lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "lib/Crypto/SelfTest/loader.py",
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3bb6b31c17b43c58d15423363c128462ed376260",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527283597,
            "hunks": 2,
            "message": "Simplify montgomery.c",
            "diff": [
                "diff --git a/src/montgomery.c b/src/montgomery.c",
                "index 36e99ee0..6ee4ec96 100644",
                "--- a/src/montgomery.c",
                "+++ b/src/montgomery.c",
                "@@ -376,10 +376,3 @@ int allocate_montgomery(struct Montgomery *m, size_t words)",
                "-#if defined(_MSC_VER) || defined(__MINGW32__)",
                "-    m->prot = _aligned_malloc((1<<WINDOW_SIZE)*words*8, CACHE_LINE_SIZE);",
                "-#else",
                "-    result = posix_memalign((void**)&m->prot, CACHE_LINE_SIZE, (1<<WINDOW_SIZE)*words*8);",
                "-    if (result) {",
                "-        m->prot = NULL;",
                "-    }",
                "-#endif",
                "+    m->prot = align_alloc((1<<WINDOW_SIZE)*words*8, CACHE_LINE_SIZE);",
                "     if (NULL == m->prot) {",
                "@@ -410,10 +403,4 @@ void deallocate_montgomery(struct Montgomery *m)",
                "     free(m->power_idx);",
                "-    ",
                "-#if defined(_MSC_VER) || defined(__MINGW32__)",
                "-    if (m->prot) {",
                "-        _aligned_free(m->prot);",
                "-    }",
                "-#else",
                "-    free(m->prot);",
                "-#endif",
                "+   ",
                "+    align_free(m->prot); "
            ],
            "changed_files": [
                "src/montgomery.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8bdb02edcd995f49abd2e4d93ed60f9a49a80891",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533848061,
            "hunks": 0,
            "message": "Merge branch 'lucas'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f25c0e536c5d40275f9140449a8e67219555ac6a",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533906954,
            "hunks": 1,
            "message": "Drop mpir.dll from packaging",
            "diff": [
                "diff --git a/setup.py b/setup.py",
                "index 2efdb142..b45e7926 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -576,3 +576,2 @@ package_data = {",
                "     ],",
                "-    \"Crypto.Math\" : [ \"mpir.dll\" ],",
                " }"
            ],
            "changed_files": [
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "365c528352dfbc96987f4c91ce64d583acfe0c3d",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528711848,
            "hunks": 5,
            "message": "Removed Crypto.Util._number_new",
            "diff": [
                "diff --git a/lib/Crypto/SelfTest/Util/test_number.py b/lib/Crypto/SelfTest/Util/test_number.py",
                "index 4e392544..411bc650 100644",
                "--- a/lib/Crypto/SelfTest/Util/test_number.py",
                "+++ b/lib/Crypto/SelfTest/Util/test_number.py",
                "@@ -42,53 +42,2 @@ class MiscTests(unittest.TestCase):",
                "-    def test_ceil_shift(self):",
                "-        \"\"\"Util.number.ceil_shift\"\"\"",
                "-        self.assertRaises(AssertionError, number.ceil_shift, -1, 1)",
                "-        self.assertRaises(AssertionError, number.ceil_shift, 1, -1)",
                "-",
                "-        # b = 0",
                "-        self.assertEqual(0, number.ceil_shift(0, 0))",
                "-        self.assertEqual(1, number.ceil_shift(1, 0))",
                "-        self.assertEqual(2, number.ceil_shift(2, 0))",
                "-        self.assertEqual(3, number.ceil_shift(3, 0))",
                "-",
                "-        # b = 1",
                "-        self.assertEqual(0, number.ceil_shift(0, 1))",
                "-        self.assertEqual(1, number.ceil_shift(1, 1))",
                "-        self.assertEqual(1, number.ceil_shift(2, 1))",
                "-        self.assertEqual(2, number.ceil_shift(3, 1))",
                "-",
                "-        # b = 2",
                "-        self.assertEqual(0, number.ceil_shift(0, 2))",
                "-        self.assertEqual(1, number.ceil_shift(1, 2))",
                "-        self.assertEqual(1, number.ceil_shift(2, 2))",
                "-        self.assertEqual(1, number.ceil_shift(3, 2))",
                "-        self.assertEqual(1, number.ceil_shift(4, 2))",
                "-        self.assertEqual(2, number.ceil_shift(5, 2))",
                "-        self.assertEqual(2, number.ceil_shift(6, 2))",
                "-        self.assertEqual(2, number.ceil_shift(7, 2))",
                "-        self.assertEqual(2, number.ceil_shift(8, 2))",
                "-        self.assertEqual(3, number.ceil_shift(9, 2))",
                "-",
                "-        for b in range(3, 1+129, 3):    # 3, 6, ... , 129",
                "-            self.assertEqual(0, number.ceil_shift(0, b))",
                "-",
                "-            n = 1L",
                "-            while n <= 2L**(b+2):",
                "-                (q, r) = divmod(n-1, 2L**b)",
                "-                expected = q + int(not not r)",
                "-                self.assertEqual((n-1, b, expected),",
                "-                                 (n-1, b, number.ceil_shift(n-1, b)))",
                "-",
                "-                (q, r) = divmod(n, 2L**b)",
                "-                expected = q + int(not not r)",
                "-                self.assertEqual((n, b, expected),",
                "-                                 (n, b, number.ceil_shift(n, b)))",
                "-",
                "-                (q, r) = divmod(n+1, 2L**b)",
                "-                expected = q + int(not not r)",
                "-                self.assertEqual((n+1, b, expected),",
                "-                                 (n+1, b, number.ceil_shift(n+1, b)))",
                "-",
                "-                n *= 2",
                "-",
                "     def test_ceil_div(self):",
                "@@ -99,8 +48,2 @@ class MiscTests(unittest.TestCase):",
                "-        # b = -1",
                "-        self.assertEqual(0, number.ceil_div(0, -1))",
                "-        self.assertEqual(-1, number.ceil_div(1, -1))",
                "-        self.assertEqual(-2, number.ceil_div(2, -1))",
                "-        self.assertEqual(-3, number.ceil_div(3, -1))",
                "-",
                "         # b = 1",
                "@@ -141,90 +84,2 @@ class MiscTests(unittest.TestCase):",
                "-        # b = -4",
                "-        self.assertEqual(3, number.ceil_div(-9, -4))",
                "-        self.assertEqual(2, number.ceil_div(-8, -4))",
                "-        self.assertEqual(2, number.ceil_div(-7, -4))",
                "-        self.assertEqual(2, number.ceil_div(-6, -4))",
                "-        self.assertEqual(2, number.ceil_div(-5, -4))",
                "-        self.assertEqual(1, number.ceil_div(-4, -4))",
                "-        self.assertEqual(1, number.ceil_div(-3, -4))",
                "-        self.assertEqual(1, number.ceil_div(-2, -4))",
                "-        self.assertEqual(1, number.ceil_div(-1, -4))",
                "-        self.assertEqual(0, number.ceil_div(0, -4))",
                "-        self.assertEqual(0, number.ceil_div(1, -4))",
                "-        self.assertEqual(0, number.ceil_div(2, -4))",
                "-        self.assertEqual(0, number.ceil_div(3, -4))",
                "-        self.assertEqual(-1, number.ceil_div(4, -4))",
                "-        self.assertEqual(-1, number.ceil_div(5, -4))",
                "-        self.assertEqual(-1, number.ceil_div(6, -4))",
                "-        self.assertEqual(-1, number.ceil_div(7, -4))",
                "-        self.assertEqual(-2, number.ceil_div(8, -4))",
                "-        self.assertEqual(-2, number.ceil_div(9, -4))",
                "-",
                "-    def test_exact_log2(self):",
                "-        \"\"\"Util.number.exact_log2\"\"\"",
                "-        self.assertRaises(TypeError, number.exact_log2, \"0\")",
                "-        self.assertRaises(ValueError, number.exact_log2, -1)",
                "-        self.assertRaises(ValueError, number.exact_log2, 0)",
                "-        self.assertEqual(0, number.exact_log2(1))",
                "-        self.assertEqual(1, number.exact_log2(2))",
                "-        self.assertRaises(ValueError, number.exact_log2, 3)",
                "-        self.assertEqual(2, number.exact_log2(4))",
                "-        self.assertRaises(ValueError, number.exact_log2, 5)",
                "-        self.assertRaises(ValueError, number.exact_log2, 6)",
                "-        self.assertRaises(ValueError, number.exact_log2, 7)",
                "-        e = 3",
                "-        n = 8",
                "-        while e < 16:",
                "-            if n == 2**e:",
                "-                self.assertEqual(e, number.exact_log2(n), \"expected=2**%d, n=%d\" % (e, n))",
                "-                e += 1",
                "-            else:",
                "-                self.assertRaises(ValueError, number.exact_log2, n)",
                "-            n += 1",
                "-",
                "-        for e in range(16, 1+64, 2):",
                "-            self.assertRaises(ValueError, number.exact_log2, 2L**e-1)",
                "-            self.assertEqual(e, number.exact_log2(2L**e))",
                "-            self.assertRaises(ValueError, number.exact_log2, 2L**e+1)",
                "-",
                "-    def test_exact_div(self):",
                "-        \"\"\"Util.number.exact_div\"\"\"",
                "-",
                "-        # Positive numbers",
                "-        self.assertEqual(1, number.exact_div(1, 1))",
                "-        self.assertRaises(ValueError, number.exact_div, 1, 2)",
                "-        self.assertEqual(1, number.exact_div(2, 2))",
                "-        self.assertRaises(ValueError, number.exact_div, 3, 2)",
                "-        self.assertEqual(2, number.exact_div(4, 2))",
                "-",
                "-        # Negative numbers",
                "-        self.assertEqual(-1, number.exact_div(-1, 1))",
                "-        self.assertEqual(-1, number.exact_div(1, -1))",
                "-        self.assertRaises(ValueError, number.exact_div, -1, 2)",
                "-        self.assertEqual(1, number.exact_div(-2, -2))",
                "-        self.assertEqual(-2, number.exact_div(-4, 2))",
                "-",
                "-        # Zero dividend",
                "-        self.assertEqual(0, number.exact_div(0, 1))",
                "-        self.assertEqual(0, number.exact_div(0, 2))",
                "-",
                "-        # Zero divisor (allow_divzero == False)",
                "-        self.assertRaises(ZeroDivisionError, number.exact_div, 0, 0)",
                "-        self.assertRaises(ZeroDivisionError, number.exact_div, 1, 0)",
                "-",
                "-        # Zero divisor (allow_divzero == True)",
                "-        self.assertEqual(0, number.exact_div(0, 0, allow_divzero=True))",
                "-        self.assertRaises(ValueError, number.exact_div, 1, 0, allow_divzero=True)",
                "-",
                "-    def test_floor_div(self):",
                "-        \"\"\"Util.number.floor_div\"\"\"",
                "-        self.assertRaises(TypeError, number.floor_div, \"1\", 1)",
                "-        for a in range(-10, 10):",
                "-            for b in range(-10, 10):",
                "-                if b == 0:",
                "-                    self.assertRaises(ZeroDivisionError, number.floor_div, a, b)",
                "-                else:",
                "-                    self.assertEqual((a, b, int(math.floor(float(a) / b))),",
                "-                                     (a, b, number.floor_div(a, b)))",
                "-",
                "     def test_getStrongPrime(self):",
                "diff --git a/lib/Crypto/Util/_number_new.py b/lib/Crypto/Util/_number_new.py",
                "deleted file mode 100644",
                "index 78619919..00000000",
                "--- a/lib/Crypto/Util/_number_new.py",
                "+++ /dev/null",
                "@@ -1,114 +0,0 @@",
                "-# -*- coding: ascii -*-",
                "-#",
                "-#  Util/_number_new.py : utility functions",
                "-#",
                "-# Written in 2008 by Dwayne C. Litzenberger <dlitz@dlitz.net>",
                "-#",
                "-# ===================================================================",
                "-# The contents of this file are dedicated to the public domain.  To",
                "-# the extent that dedication to the public domain is not available,",
                "-# everyone is granted a worldwide, perpetual, royalty-free,",
                "-# non-exclusive license to exercise all rights associated with the",
                "-# contents of this file for any purpose whatsoever.",
                "-# No rights are reserved.",
                "-#",
                "-# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",
                "-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
                "-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",
                "-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS",
                "-# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN",
                "-# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",
                "-# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
                "-# SOFTWARE.",
                "-# ===================================================================",
                "-",
                "-## NOTE: Do not import this module directly.  Import these functions from Crypto.Util.number.",
                "-",
                "-__all__ = ['ceil_shift', 'ceil_div', 'floor_div', 'exact_log2', 'exact_div']",
                "-",
                "-def ceil_shift(n, b):",
                "-    \"\"\"Return ceil(n / 2**b) without performing any floating-point or division operations.",
                "-",
                "-    This is done by right-shifting n by b bits and incrementing the result by 1",
                "-    if any '1' bits were shifted out.",
                "-    \"\"\"",
                "-    if not isinstance(n, (int, long)) or not isinstance(b, (int, long)):",
                "-        raise TypeError(\"unsupported operand type(s): %r and %r\" % (type(n).__name__, type(b).__name__))",
                "-",
                "-    assert n >= 0 and b >= 0    # I haven't tested or even thought about negative values",
                "-    mask = (1 << b) - 1",
                "-    if n & mask:",
                "-        return (n >> b) + 1",
                "-    else:",
                "-        return n >> b",
                "-",
                "-def ceil_div(a, b):",
                "-    \"\"\"Return ceil(a / b) without performing any floating-point operations.\"\"\"",
                "-",
                "-    if not isinstance(a, (int, long)) or not isinstance(b, (int, long)):",
                "-        raise TypeError(\"unsupported operand type(s): %r and %r\" % (type(a).__name__, type(b).__name__))",
                "-",
                "-    (q, r) = divmod(a, b)",
                "-    if r:",
                "-        return q + 1",
                "-    else:",
                "-        return q",
                "-",
                "-def floor_div(a, b):",
                "-    if not isinstance(a, (int, long)) or not isinstance(b, (int, long)):",
                "-        raise TypeError(\"unsupported operand type(s): %r and %r\" % (type(a).__name__, type(b).__name__))",
                "-",
                "-    (q, r) = divmod(a, b)",
                "-    return q",
                "-",
                "-def exact_log2(num):",
                "-    \"\"\"Find and return an integer i >= 0 such that num == 2**i.",
                "-",
                "-    If no such integer exists, this function raises ValueError.",
                "-    \"\"\"",
                "-",
                "-    if not isinstance(num, (int, long)):",
                "-        raise TypeError(\"unsupported operand type: %r\" % (type(num).__name__,))",
                "-",
                "-    n = long(num)",
                "-    if n <= 0:",
                "-        raise ValueError(\"cannot compute logarithm of non-positive number\")",
                "-",
                "-    i = 0",
                "-    while n != 0:",
                "-        if (n & 1) and n != 1:",
                "-            raise ValueError(\"No solution could be found\")",
                "-        i += 1",
                "-        n >>= 1",
                "-    i -= 1",
                "-",
                "-    assert num == (1 << i)",
                "-    return i",
                "-",
                "-def exact_div(p, d, allow_divzero=False):",
                "-    \"\"\"Find and return an integer n such that p == n * d",
                "-",
                "-    If no such integer exists, this function raises ValueError.",
                "-",
                "-    Both operands must be integers.",
                "-",
                "-    If the second operand is zero, this function will raise ZeroDivisionError",
                "-    unless allow_divzero is true (default: False).",
                "-    \"\"\"",
                "-",
                "-    if not isinstance(p, (int, long)) or not isinstance(d, (int, long)):",
                "-        raise TypeError(\"unsupported operand type(s): %r and %r\" % (type(p).__name__, type(d).__name__))",
                "-",
                "-    if d == 0 and allow_divzero:",
                "-        n = 0",
                "-        if p != n * d:",
                "-            raise ValueError(\"No solution could be found\")",
                "-    else:",
                "-        (n, r) = divmod(p, d)",
                "-        if r != 0:",
                "-            raise ValueError(\"No solution could be found\")",
                "-",
                "-    assert p == n * d",
                "-    return n",
                "-",
                "-# vim:set ts=4 sw=4 sts=4 expandtab:",
                "diff --git a/lib/Crypto/Util/number.py b/lib/Crypto/Util/number.py",
                "index b24fc627..f5b19e34 100644",
                "--- a/lib/Crypto/Util/number.py",
                "+++ b/lib/Crypto/Util/number.py",
                "@@ -35,4 +35,15 @@ _fastmath = None",
                "-# New functions",
                "-from _number_new import *",
                "+",
                "+def ceil_div(n, d):",
                "+    \"\"\"Return ceil(n/d), that is, the smallest integer r such that r*d >= n\"\"\"",
                "+",
                "+    if d == 0:",
                "+        raise ZeroDivisionError()",
                "+    if (n < 0) or (d < 0):",
                "+        raise ValueError(\"Non positive values\")",
                "+    r, q = divmod(n, d)",
                "+    if (n != 0) and (q != 0):",
                "+        r += 1",
                "+    return r",
                "+"
            ],
            "changed_files": [
                "lib/Crypto/SelfTest/Util/test_number.py",
                "lib/Crypto/Util/_number_new.py",
                "lib/Crypto/Util/number.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "21c179b980c8e1c608893169ca31cd8b655247eb",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528699371,
            "hunks": 1,
            "message": "struct.unpack does not support memoryviews for Python < 2.7.3",
            "diff": [
                "diff --git a/lib/Crypto/Util/number.py b/lib/Crypto/Util/number.py",
                "index e8f46da2..46a0b2c2 100644",
                "--- a/lib/Crypto/Util/number.py",
                "+++ b/lib/Crypto/Util/number.py",
                "@@ -421,7 +421,11 @@ def bytes_to_long(s):",
                "     unpack = struct.unpack",
                "-    ",
                "-    # Up to Python 2.7.3, struct.unpack can't work with bytearrays",
                "-    if sys.version_info[0] < 3 and isinstance(s, bytearray):",
                "-        s = bytes(s)",
                "-    ",
                "+",
                "+    # Up to Python 2.7.4, struct.unpack can't work with bytearrays nor",
                "+    # memoryviews",
                "+    if sys.version_info[0:3] < (2, 7, 4):",
                "+        if isinstance(s, bytearray):",
                "+            s = bytes(s)",
                "+        elif isinstance(s, memoryview):",
                "+            s = s.tobytes()",
                "+",
                "     length = len(s)"
            ],
            "changed_files": [
                "lib/Crypto/Util/number.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1faa1e685059f7d5c610f499ab01cab47256d6d5",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528147139,
            "hunks": 5,
            "message": "Add -O3 with gcc or clang",
            "diff": [
                "diff --git a/setup.py b/setup.py",
                "index c492f190..5d8b5f12 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -37,2 +37,6 @@ import shutil",
                " import struct",
                "+if sys.version_info[0:2] == (2, 6):",
                "+    from distutils import sysconfig",
                "+else:",
                "+    import sysconfig",
                "@@ -106,6 +110,2 @@ All the code can be downloaded from `GitHub`_.",
                "-if sys.version[0:1] == '1':",
                "-    raise RuntimeError(\"The Python Cryptography Toolkit requires \"",
                "-                       \"Python 2.x or 3.x to build.\")",
                "-",
                " try:",
                "@@ -454,3 +454,3 @@ def create_cryptodome_lib():",
                "-def enable_gcc_sse2(extensions):",
                "+def compiler_supports_sse2():",
                "     source = \"\"\"",
                "@@ -464,7 +464,22 @@ def enable_gcc_sse2(extensions):",
                "     \"\"\"",
                "-    if test_compilation(source, extra_cc_options=['-msse2'], msg=\"x86intrin.h header\"):",
                "-        for x in extensions:",
                "-            x.extra_compile_args += ['-msse2']",
                "-            x.define_macros += [ (\"HAVE_X86INTRIN_H\", None) ]",
                "+    return test_compilation(source, extra_cc_options=['-msse2'], msg=\"x86intrin.h header\")",
                "+",
                "+def enable_compiler_specific_options(extensions):",
                "+    def check_compiler(compiler):",
                "+        result = compiler in os.environ.get('CC', '')",
                "+        builtin = sysconfig.get_config_vars('CC')[0]",
                "+        result = result or (builtin and compiler in builtin)",
                "+        return result",
                "+",
                "+    clang = check_compiler(\"clang\")",
                "+    gcc = check_compiler(\"gcc\")",
                "+",
                "+    if clang or gcc:",
                "+        sse2 = compiler_supports_sse2()",
                "+        for x in extensions:",
                "+            x.extra_compile_args += ['-O3']",
                "+            if sse2:",
                "+                x.extra_compile_args += ['-msse2']",
                "+                x.define_macros += [ (\"HAVE_X86INTRIN_H\", None) ]",
                "@@ -647,4 +662,4 @@ ext_modules = [",
                "-# Enable SSE2 for GCC",
                "-enable_gcc_sse2(ext_modules)",
                "+# Enable some optimization if we know the compiler",
                "+enable_compiler_specific_options(ext_modules)"
            ],
            "changed_files": [
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "41f7ee03e5d5185b9214f34eb4bab47d0329d586",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527964980,
            "hunks": 0,
            "message": "Merge branch 'cmul'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4242e82e9e36c01ef7dab5450279d470bfa53ea6",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528805739,
            "hunks": 31,
            "message": "Modern syntax for except statement",
            "diff": [
                "diff --git a/lib/Crypto/Cipher/ARC4.py b/lib/Crypto/Cipher/ARC4.py",
                "index 465ebc5b..2ac987d4 100644",
                "--- a/lib/Crypto/Cipher/ARC4.py",
                "+++ b/lib/Crypto/Cipher/ARC4.py",
                "@@ -106,3 +106,3 @@ class ARC4Cipher:",
                "             return self.encrypt(ciphertext)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             raise ValueError(str(e).replace(\"enc\", \"dec\"))",
                "diff --git a/lib/Crypto/Cipher/ChaCha20.py b/lib/Crypto/Cipher/ChaCha20.py",
                "index 0207223f..b75dce5c 100644",
                "--- a/lib/Crypto/Cipher/ChaCha20.py",
                "+++ b/lib/Crypto/Cipher/ChaCha20.py",
                "@@ -132,3 +132,3 @@ class ChaCha20Cipher:",
                "             return self._encrypt(ciphertext)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             raise ValueError(str(e).replace(\"enc\", \"dec\"))",
                "@@ -175,3 +175,3 @@ def new(**kwargs):",
                "         key = kwargs.pop(\"key\")",
                "-    except KeyError, e:",
                "+    except KeyError as e:",
                "         raise TypeError(\"Missing parameter %s\" % e)",
                "diff --git a/lib/Crypto/Cipher/Salsa20.py b/lib/Crypto/Cipher/Salsa20.py",
                "index 3edadb85..64034cb7 100644",
                "--- a/lib/Crypto/Cipher/Salsa20.py",
                "+++ b/lib/Crypto/Cipher/Salsa20.py",
                "@@ -112,3 +112,3 @@ class Salsa20Cipher:",
                "             return self.encrypt(ciphertext)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             raise ValueError(str(e).replace(\"enc\", \"dec\"))",
                "diff --git a/lib/Crypto/Cipher/_mode_ccm.py b/lib/Crypto/Cipher/_mode_ccm.py",
                "index 26cae2ec..cab7b52d 100644",
                "--- a/lib/Crypto/Cipher/_mode_ccm.py",
                "+++ b/lib/Crypto/Cipher/_mode_ccm.py",
                "@@ -612,3 +612,3 @@ def _create_ccm_cipher(factory, **kwargs):",
                "         key = key = kwargs.pop(\"key\")",
                "-    except KeyError, e:",
                "+    except KeyError as e:",
                "         raise TypeError(\"Missing parameter: \" + str(e))",
                "diff --git a/lib/Crypto/Cipher/_mode_eax.py b/lib/Crypto/Cipher/_mode_eax.py",
                "index bdccbb7b..7ede0d22 100644",
                "--- a/lib/Crypto/Cipher/_mode_eax.py",
                "+++ b/lib/Crypto/Cipher/_mode_eax.py",
                "@@ -377,3 +377,3 @@ def _create_eax_cipher(factory, **kwargs):",
                "         mac_len = kwargs.pop(\"mac_len\", factory.block_size)",
                "-    except KeyError, e:",
                "+    except KeyError as e:",
                "         raise TypeError(\"Missing parameter: \" + str(e))",
                "diff --git a/lib/Crypto/Cipher/_mode_gcm.py b/lib/Crypto/Cipher/_mode_gcm.py",
                "index c1fac1aa..f8ecd655 100644",
                "--- a/lib/Crypto/Cipher/_mode_gcm.py",
                "+++ b/lib/Crypto/Cipher/_mode_gcm.py",
                "@@ -581,3 +581,3 @@ def _create_gcm_cipher(factory, **kwargs):",
                "         key = kwargs.pop(\"key\")",
                "-    except KeyError, e:",
                "+    except KeyError as e:",
                "         raise TypeError(\"Missing parameter:\" + str(e))",
                "diff --git a/lib/Crypto/Cipher/_mode_ocb.py b/lib/Crypto/Cipher/_mode_ocb.py",
                "index de23772e..da9ece74 100644",
                "--- a/lib/Crypto/Cipher/_mode_ocb.py",
                "+++ b/lib/Crypto/Cipher/_mode_ocb.py",
                "@@ -520,3 +520,3 @@ def _create_ocb_cipher(factory, **kwargs):",
                "         mac_len = kwargs.pop(\"mac_len\", 16)",
                "-    except KeyError, e:",
                "+    except KeyError as e:",
                "         raise TypeError(\"Keyword missing: \" + str(e))",
                "diff --git a/lib/Crypto/Cipher/_mode_openpgp.py b/lib/Crypto/Cipher/_mode_openpgp.py",
                "index bb45f07f..d079d591 100644",
                "--- a/lib/Crypto/Cipher/_mode_openpgp.py",
                "+++ b/lib/Crypto/Cipher/_mode_openpgp.py",
                "@@ -202,3 +202,3 @@ def _create_openpgp_cipher(factory, **kwargs):",
                "         key = kwargs.pop(\"key\")",
                "-    except KeyError, e:",
                "+    except KeyError as e:",
                "         raise TypeError(\"Missing component: \" + str(e))",
                "diff --git a/lib/Crypto/Cipher/_mode_siv.py b/lib/Crypto/Cipher/_mode_siv.py",
                "index 832e3473..dd0d6938 100644",
                "--- a/lib/Crypto/Cipher/_mode_siv.py",
                "+++ b/lib/Crypto/Cipher/_mode_siv.py",
                "@@ -373,3 +373,3 @@ def _create_siv_cipher(factory, **kwargs):",
                "         key = kwargs.pop(\"key\")",
                "-    except KeyError, e:",
                "+    except KeyError as e:",
                "         raise TypeError(\"Missing parameter: \" + str(e))",
                "diff --git a/lib/Crypto/IO/PKCS8.py b/lib/Crypto/IO/PKCS8.py",
                "index f8069e6e..3bda834f 100644",
                "--- a/lib/Crypto/IO/PKCS8.py",
                "+++ b/lib/Crypto/IO/PKCS8.py",
                "@@ -170,3 +170,3 @@ def unwrap(p8_private_key, passphrase=None):",
                "             found = True",
                "-        except PbesError, e:",
                "+        except PbesError as e:",
                "             error_str = \"PBES1[%s]\" % str(e)",
                "@@ -179,3 +179,3 @@ def unwrap(p8_private_key, passphrase=None):",
                "                 found = True",
                "-            except PbesError, e:",
                "+            except PbesError as e:",
                "                 error_str += \",PBES2[%s]\" % str(e)",
                "diff --git a/lib/Crypto/PublicKey/ECC.py b/lib/Crypto/PublicKey/ECC.py",
                "index fb303524..16e5e1ee 100644",
                "--- a/lib/Crypto/PublicKey/ECC.py",
                "+++ b/lib/Crypto/PublicKey/ECC.py",
                "@@ -793,3 +793,3 @@ def _import_der(encoded, passphrase):",
                "         return _import_subjectPublicKeyInfo(encoded, passphrase)",
                "-    except UnsupportedEccFeature, err:",
                "+    except UnsupportedEccFeature as err:",
                "         raise err",
                "@@ -800,3 +800,3 @@ def _import_der(encoded, passphrase):",
                "         return _import_x509_cert(encoded, passphrase)",
                "-    except UnsupportedEccFeature, err:",
                "+    except UnsupportedEccFeature as err:",
                "         raise err",
                "@@ -807,3 +807,3 @@ def _import_der(encoded, passphrase):",
                "         return _import_private_der(encoded, passphrase)",
                "-    except UnsupportedEccFeature, err:",
                "+    except UnsupportedEccFeature as err:",
                "         raise err",
                "@@ -814,3 +814,3 @@ def _import_der(encoded, passphrase):",
                "         return _import_pkcs8(encoded, passphrase)",
                "-    except UnsupportedEccFeature, err:",
                "+    except UnsupportedEccFeature as err:",
                "         raise err",
                "@@ -888,3 +888,3 @@ def import_key(encoded, passphrase=None):",
                "             result = _import_der(der_encoded, passphrase)",
                "-        except UnsupportedEccFeature, uef:",
                "+        except UnsupportedEccFeature as uef:",
                "             raise uef",
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_EAX.py b/lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "index b45f193f..587908dd 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "@@ -632,3 +632,3 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "             cipher = AES.new(tv.key, AES.MODE_EAX, tv.iv, mac_len=tv.tag_size)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             assert len(tv.iv) == 0 and \"Nonce cannot be empty\" in str(e)",
                "@@ -648,3 +648,3 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "             cipher = AES.new(tv.key, AES.MODE_EAX, tv.iv, mac_len=tv.tag_size)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             assert len(tv.iv) == 0 and \"Nonce cannot be empty\" in str(e)",
                "diff --git a/lib/Crypto/SelfTest/Cipher/test_GCM.py b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "index 42804324..51784aca 100644",
                "--- a/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "+++ b/lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "@@ -803,3 +803,3 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "                     **self._extra_params)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             if len(tv.iv) == 0 and \"Nonce cannot be empty\" in str(e):",
                "@@ -821,3 +821,3 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "                     **self._extra_params)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             if len(tv.iv) == 0 and \"Nonce cannot be empty\" in str(e):",
                "diff --git a/lib/Crypto/SelfTest/Hash/test_CMAC.py b/lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "index f82dc167..14a8597b 100644",
                "--- a/lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "+++ b/lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "@@ -384,3 +384,3 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "             tag = CMAC.new(tv.key, tv.msg, ciphermod=AES, mac_len=tv.tag_size).digest()",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             if len(tv.key) not in (16, 24, 32) and \"key length\" in str(e):",
                "@@ -397,3 +397,3 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "             mac = CMAC.new(tv.key, tv.msg, ciphermod=AES, mac_len=tv.tag_size)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             if len(tv.key) not in (16, 24, 32) and \"key length\" in str(e):",
                "diff --git a/lib/Crypto/SelfTest/Math/test_Numbers.py b/lib/Crypto/SelfTest/Math/test_Numbers.py",
                "index 49aef804..de76bc04 100644",
                "--- a/lib/Crypto/SelfTest/Math/test_Numbers.py",
                "+++ b/lib/Crypto/SelfTest/Math/test_Numbers.py",
                "@@ -706,3 +706,3 @@ def get_tests(config={}):",
                "         tests += list_test_cases(TestIntegerGMP)",
                "-    except (ImportError, OSError), e:",
                "+    except (ImportError, OSError) as e:",
                "         import sys",
                "@@ -720,3 +720,3 @@ def get_tests(config={}):",
                "         tests += list_test_cases(TestIntegerCustomModexp)",
                "-    except (ImportError, OSError), e:",
                "+    except (ImportError, OSError) as e:",
                "         import sys",
                "diff --git a/lib/Crypto/SelfTest/Protocol/test_KDF.py b/lib/Crypto/SelfTest/Protocol/test_KDF.py",
                "index 851a7f75..82fb576d 100644",
                "--- a/lib/Crypto/SelfTest/Protocol/test_KDF.py",
                "+++ b/lib/Crypto/SelfTest/Protocol/test_KDF.py",
                "@@ -422,3 +422,3 @@ class scrypt_Tests(unittest.TestCase):",
                "                 output = scrypt(tv.P, tv.S, tv.dkLen, tv.N, tv.r, tv.p)",
                "-            except ValueError, e:",
                "+            except ValueError as e:",
                "                 if \" 2 \" in str(e) and tv.N >= 1048576:",
                "diff --git a/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py b/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "index bbc7f1b1..b5f076c7 100644",
                "--- a/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "+++ b/lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "@@ -426,3 +426,3 @@ gVnJp9EBND/tHQ==",
                "             ECC.import_key(curve)",
                "-        except UnsupportedEccFeature, uef:",
                "+        except UnsupportedEccFeature as uef:",
                "             assert(\"1.3.132.0.33\" in str(uef))",
                "diff --git a/lib/Crypto/SelfTest/Signature/test_dss.py b/lib/Crypto/SelfTest/Signature/test_dss.py",
                "index eda3de9f..76e2ff33 100644",
                "--- a/lib/Crypto/SelfTest/Signature/test_dss.py",
                "+++ b/lib/Crypto/SelfTest/Signature/test_dss.py",
                "@@ -785,3 +785,3 @@ class TestVectorsDSAWycheproof(unittest.TestCase):",
                "             signature = signer.verify(hashed_msg, tv.sig)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             if tv.warning:",
                "@@ -865,3 +865,3 @@ class TestVectorsECDSAWycheproof(unittest.TestCase):",
                "             signature = signer.verify(hashed_msg, tv.sig)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             if tv.warning:",
                "diff --git a/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py b/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "index bd2f3967..e2175cb4 100644",
                "--- a/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "+++ b/lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "@@ -279,3 +279,3 @@ class TestVectorsWycheproof(unittest.TestCase):",
                "             signature = signer.verify(hashed_msg, tv.sig)",
                "-        except ValueError, e:",
                "+        except ValueError as e:",
                "             if tv.warning:",
                "diff --git a/lib/Crypto/Util/_raw_api.py b/lib/Crypto/Util/_raw_api.py",
                "index 4e02ac22..fca544f2 100644",
                "--- a/lib/Crypto/Util/_raw_api.py",
                "+++ b/lib/Crypto/Util/_raw_api.py",
                "@@ -255,3 +255,3 @@ def load_pycryptodome_raw_lib(name, cdecl):",
                "                             cdecl)",
                "-        except OSError, exp:",
                "+        except OSError as exp:",
                "             attempts.append(\"Trying '%s': %s\" % (filename, str(exp)))"
            ],
            "changed_files": [
                "lib/Crypto/Cipher/ARC4.py",
                "lib/Crypto/Cipher/ChaCha20.py",
                "lib/Crypto/Cipher/Salsa20.py",
                "lib/Crypto/Cipher/_mode_ccm.py",
                "lib/Crypto/Cipher/_mode_eax.py",
                "lib/Crypto/Cipher/_mode_gcm.py",
                "lib/Crypto/Cipher/_mode_ocb.py",
                "lib/Crypto/Cipher/_mode_openpgp.py",
                "lib/Crypto/Cipher/_mode_siv.py",
                "lib/Crypto/IO/PKCS8.py",
                "lib/Crypto/PublicKey/ECC.py",
                "lib/Crypto/SelfTest/Cipher/test_EAX.py",
                "lib/Crypto/SelfTest/Cipher/test_GCM.py",
                "lib/Crypto/SelfTest/Hash/test_CMAC.py",
                "lib/Crypto/SelfTest/Math/test_Numbers.py",
                "lib/Crypto/SelfTest/Protocol/test_KDF.py",
                "lib/Crypto/SelfTest/PublicKey/test_import_ECC.py",
                "lib/Crypto/SelfTest/Signature/test_dss.py",
                "lib/Crypto/SelfTest/Signature/test_pkcs1_15.py",
                "lib/Crypto/Util/_raw_api.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "29240f78cbe885b923af47f00488fd529131a629",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527964351,
            "hunks": 4,
            "message": "Add unit test for reduce()",
            "diff": [
                "diff --git a/src/ghash_clmul.c b/src/ghash_clmul.c",
                "index 5ddd524e..88e3dca9 100644",
                "--- a/src/ghash_clmul.c",
                "+++ b/src/ghash_clmul.c",
                "@@ -79,3 +79,3 @@ FAKE_INIT(ghash_clmul)",
                "  */",
                "-static inline __m128i reduce(__m128i prod_high, __m128i prod_low)",
                "+static inline __m128i reduce(__m128i *prod_high, __m128i *prod_low)",
                " {",
                "@@ -84,4 +84,4 @@ static inline __m128i reduce(__m128i prod_high, __m128i prod_low)",
                "-    t1 = prod_high;     // U3:U2",
                "-    t7 = prod_low;      // U1:U0",
                "+    t1 = *prod_high;     // U3:U2",
                "+    t7 = *prod_low;      // U1:U0",
                "     t3 = _mm_loadl_epi64((__m128i*)&c2);",
                "@@ -94,3 +94,3 @@ static inline __m128i reduce(__m128i prod_high, __m128i prod_low)",
                "     t1 = _mm_xor_si128(t1, t4); // T",
                "-    ",
                "+",
                "     return t1;",
                "@@ -170,3 +170,3 @@ static inline __m128i ghash_mult(__m128i *a, __m128i *bx)",
                "     clmult(&prod_hi, &prod_lo, &a128, bx);",
                "-    result = reduce(prod_hi, prod_lo);",
                "+    result = reduce(&prod_hi, &prod_lo);",
                "     return swap(result);"
            ],
            "changed_files": [
                "src/ghash_clmul.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1a31f322df783496647c32ab314fd8d9732c23a1",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528578149,
            "hunks": 5,
            "message": "Use aligned memory in CTR mode",
            "diff": [
                "diff --git a/src/raw_ctr.c b/src/raw_ctr.c",
                "index df090bda..415e784d 100644",
                "--- a/src/raw_ctr.c",
                "+++ b/src/raw_ctr.c",
                "@@ -64,3 +64,3 @@ typedef struct {",
                "-    /** Max number of blocks we may encrypt at most **/",
                "+    /** Max number of bytes we may encrypt at most **/",
                "     uint64_t length_max_lo, length_max_hi;",
                "@@ -97,3 +97,3 @@ static uint8_t* create_counter_blocks(uint8_t *counter_block0, unsigned block_le",
                "-    counter_blocks = current = calloc(1, block_len * NR_BLOCKS);",
                "+    counter_blocks = current = align_alloc(block_len * NR_BLOCKS, block_len);",
                "     if (NULL == counter_blocks) {",
                "@@ -118,3 +118,3 @@ static uint8_t* create_keystream(BlockBase *cipher, uint8_t *counter_blocks, siz",
                "-    keystream = calloc(1, block_len * NR_BLOCKS);",
                "+    keystream = align_alloc(block_len * NR_BLOCKS, block_len);",
                "     if (NULL == keystream) {",
                "@@ -197,4 +197,4 @@ EXPORT_SYM int CTR_start_operation(BlockBase *cipher,",
                " error:",
                "-    free(ctr_state->keystream);",
                "-    free(ctr_state->counter_blocks);",
                "+    align_free(ctr_state->keystream);",
                "+    align_free(ctr_state->counter_blocks);",
                "     free(ctr_state);",
                "@@ -299,4 +299,4 @@ EXPORT_SYM int CTR_stop_operation(CtrModeState *ctr_state)",
                "     ctr_state->cipher->destructor(ctr_state->cipher);",
                "-    free(ctr_state->keystream);",
                "-    free(ctr_state->counter_blocks);",
                "+    align_free(ctr_state->keystream);",
                "+    align_free(ctr_state->counter_blocks);",
                "     free(ctr_state);"
            ],
            "changed_files": [
                "src/raw_ctr.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ee3a8fd095731c889850926bf9bb5e547b46849c",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527892360,
            "hunks": 1,
            "message": "Add wmmintrin.h include",
            "diff": [
                "diff --git a/src/ghash_clmul.c b/src/ghash_clmul.c",
                "index aa664f11..54f9123d 100644",
                "--- a/src/ghash_clmul.c",
                "+++ b/src/ghash_clmul.c",
                "@@ -35,2 +35,4 @@ FAKE_INIT(ghash_clmul)",
                "+#include <wmmintrin.h>",
                "+",
                " #if defined(HAVE_INTRIN_H)"
            ],
            "changed_files": [
                "src/ghash_clmul.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a29e4f3edc325f77cdc229c2ecb06016637a1655",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527892051,
            "hunks": 3,
            "message": "Add symbols for Windows",
            "diff": [
                "diff --git a/src/cpuid.c b/src/cpuid.c",
                "index 8eb997e2..45d31e9c 100644",
                "--- a/src/cpuid.c",
                "+++ b/src/cpuid.c",
                "@@ -33,3 +33,3 @@",
                "-FAKE_INIT(cpuid)",
                "+FAKE_INIT(cpuid_c)",
                "diff --git a/src/ghash_clmul.c b/src/ghash_clmul.c",
                "index 27bc2cd2..aa664f11 100644",
                "--- a/src/ghash_clmul.c",
                "+++ b/src/ghash_clmul.c",
                "@@ -33,2 +33,4 @@",
                "+FAKE_INIT(ghash_clmul)",
                "+",
                " #if defined(HAVE_INTRIN_H)",
                "diff --git a/src/ghash_portable.c b/src/ghash_portable.c",
                "index 2d261e4d..f0d4da78 100644",
                "--- a/src/ghash_portable.c",
                "+++ b/src/ghash_portable.c",
                "@@ -24,3 +24,3 @@",
                "-FAKE_INIT(galois)",
                "+FAKE_INIT(ghash_portable)"
            ],
            "changed_files": [
                "src/cpuid.c",
                "src/ghash_clmul.c",
                "src/ghash_portable.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "256f946544f2c9320de9857862e9dbff9edbdcff",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528469971,
            "hunks": 24,
            "message": "Reduce only once every 4 blocks",
            "diff": [
                "diff --git a/src/ghash_clmul.c b/src/ghash_clmul.c",
                "index 88e3dca9..5afea4a3 100644",
                "--- a/src/ghash_clmul.c",
                "+++ b/src/ghash_clmul.c",
                "@@ -47,21 +47,33 @@ FAKE_INIT(ghash_clmul)",
                "  *",
                "- * Specifically, we perform the multiplication of two elements in GF(2^128)",
                "- * represented as polynomials, modulo P(x) = x^128 + x^7 + x + 1.",
                "+ * At the core, we perform a binary polynomial multiplication (carry-less)",
                "+ * modulo P(x) = x^128 + x^7 + x + 1, that is a finite field multiplication in",
                "+ * GF(2^128).",
                "  *",
                "- * The coefficients of the two polynomials are encoded little endian",
                "- * byte wise, but big endian bit wise (within a byte).",
                "+ * The GCM standard requires that coefficients of the two polynomials are encoded",
                "+ * little-endian byte-wise but also (oddly enough) bit-wise (i.e. within a byte).",
                "  *",
                "- * In other words, the 16-bit byte string in memory:",
                "+ * In other words, the unity element x is encoded in memory as:",
                "  *",
                "- *      0x40 0x01",
                "+ * 0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 = (binary) 100000.....0",
                "  *",
                "- * represents the polynomial:",
                "+ * Note how the least significant bit (LSB) is the leftmost one in the first byte.",
                "  *",
                "- *      x^15 + x^2 = 0x8002",
                "+ * In order to use the native CPU instructions though, the conventional representation of",
                "+ * bits within a byte (with leftmost bit being the most significant) must be in place.",
                "  *",
                "- * Of course, polynomials in this case have degree 127, not 15.",
                "+ * To that end, instead of performing expensive bit-swapping, computing the",
                "+ * multiplication, and then bit-swapping again, we can use an equivalent",
                "+ * expression (see [2][3]) that operates directly on *bit-reflected* data.",
                "+ * Such expression interprets the original encoding of the factors as if the",
                "+ * rightmost bit was the most significant.",
                "  *",
                "- * Internally, we prefer to operate with the conventional representation of",
                "- * bits within a byte (leftmost bit is LSB). To that end, as explained in [3],",
                "- * it is possible to work with the *reflected* values.",
                "+ * The new expression A * (B * x) * x^{-128} modulo p(x) = x^128 + x^127 + x^126 + x^121 + 1",
                "+ *",
                "+ * For instance, what used to be the unity element x for the original multiplication,",
                "+ * is now the value x^127 for the equivalent expression. Within each byte, the",
                "+ * leftmost bit is the most significant as desired.",
                "+ *",
                "+ * However, this also means that bytes end up encoded big-endian in memory. In",
                "+ * order to use x86 arithmetic (and the XMM registers), data must be",
                "+ * byte-swapped when loaded from or stored into memory.",
                "  *",
                "@@ -73,2 +85,14 @@ FAKE_INIT(ghash_clmul)",
                "+struct exp_key {",
                "+    /**",
                "+     *  Powers of H (already swapped in byte endianess, and pre-multiplied by X)",
                "+     *",
                "+     *  h[0] is x*H   mod p(x)",
                "+     *  h[1] is x*H^2 mod p(x)",
                "+     *  h[2] is x*H^3 mod p(x)",
                "+     *  h[3] is x*H^4 mod p(x)",
                "+     */",
                "+    __m128i h[4];",
                "+};",
                "+",
                " /**",
                "@@ -77,5 +101,5 @@ FAKE_INIT(ghash_clmul)",
                "  *",
                "- * See at the bottom for an explaination.",
                "+ * See at the bottom for an explanation.",
                "  */",
                "-static inline __m128i reduce(__m128i *prod_high, __m128i *prod_low)",
                "+static inline __m128i reduce(__m128i prod_high, __m128i prod_low)",
                " {",
                "@@ -84,4 +108,4 @@ static inline __m128i reduce(__m128i *prod_high, __m128i *prod_low)",
                "-    t1 = *prod_high;     // U3:U2",
                "-    t7 = *prod_low;      // U1:U0",
                "+    t1 = prod_high;     // U3:U2",
                "+    t7 = prod_low;      // U1:U0",
                "     t3 = _mm_loadl_epi64((__m128i*)&c2);",
                "@@ -101,3 +125,3 @@ static inline __m128i reduce(__m128i *prod_high, __m128i *prod_low)",
                "  */",
                "-static inline void clmult(__m128i *prod_high, __m128i *prod_low, __m128i *a, __m128i *b)",
                "+static inline void clmult(__m128i *prod_high, __m128i *prod_low, __m128i a, __m128i b)",
                " {",
                "@@ -105,6 +129,6 @@ static inline void clmult(__m128i *prod_high, __m128i *prod_low, __m128i *a, __m",
                "-    c = _mm_clmulepi64_si128(*a, *b, 0x00);   // A0*B0",
                "-    d = _mm_clmulepi64_si128(*a, *b, 0x11);   // A1*B1",
                "-    e = _mm_clmulepi64_si128(*a, *b, 0x10);   // A0*B1",
                "-    f = _mm_clmulepi64_si128(*a, *b, 0x01);   // A1*B0",
                "+    c = _mm_clmulepi64_si128(a, b, 0x00);   // A0*B0",
                "+    d = _mm_clmulepi64_si128(a, b, 0x11);   // A1*B1",
                "+    e = _mm_clmulepi64_si128(a, b, 0x10);   // A0*B1",
                "+    f = _mm_clmulepi64_si128(a, b, 0x01);   // A1*B0",
                "     g = _mm_xor_si128(e, f);                // E1+F1:E0+F0",
                "@@ -155,24 +179,6 @@ static inline __m128i swap(__m128i a)",
                "-/**",
                "- * Multiply two polynomials A and B in GF(2^128) modulo x^128 + x^7 + x + 1.",
                "- *",
                "- * b[] is actually pre-swapped and pre-multiplied by x.",
                "- *",
                "- * We use the fundamental result that the product is equivalent to:",
                "- *",
                "- *  A * (B * x) * x^{-128} modulo x^128 + x^127 + x^126 + x^121 + 1",
                "- */",
                "-static inline __m128i ghash_mult(__m128i *a, __m128i *bx)",
                "-{",
                "-    __m128i a128, prod_hi, prod_lo, result;",
                "-",
                "-    a128 = swap(*a);",
                "-    clmult(&prod_hi, &prod_lo, &a128, bx);",
                "-    result = reduce(&prod_hi, &prod_lo);",
                "-    return swap(result);",
                "-}",
                "-",
                "-EXPORT_SYM int ghash_expand_clmul(const uint8_t h[16], __m128i **expanded)",
                "+EXPORT_SYM int ghash_expand_clmul(const uint8_t h[16], struct exp_key **expanded)",
                " {",
                "     __m128i h128;",
                "+    unsigned i;",
                "@@ -181,3 +187,3 @@ EXPORT_SYM int ghash_expand_clmul(const uint8_t h[16], __m128i **expanded)",
                "-    *expanded = align_alloc(16, 16);",
                "+    *expanded = align_alloc(sizeof(struct exp_key), 16);",
                "     if (NULL == *expanded)",
                "@@ -185,5 +191,11 @@ EXPORT_SYM int ghash_expand_clmul(const uint8_t h[16], __m128i **expanded)",
                "-    /** Pre-swap and pre-multiply h by x **/",
                "     h128 = swap(_mm_loadu_si128((__m128i*)h));",
                "-    **expanded = multx(h128);",
                "+    (*expanded)->h[0] = multx(h128);    /** x*H **/",
                "+    ",
                "+    for (i=1; i<4; i++) {",
                "+        __m128i r0, r1;",
                "+        ",
                "+        clmult(&r0, &r1, (*expanded)->h[i-1], (*expanded)->h[0]);",
                "+        (*expanded)->h[i] = reduce(r0, r1);",
                "+    }",
                "@@ -192,3 +204,3 @@ EXPORT_SYM int ghash_expand_clmul(const uint8_t h[16], __m128i **expanded)",
                "-EXPORT_SYM int ghash_destroy_clmul(__m128i *expanded)",
                "+EXPORT_SYM int ghash_destroy_clmul(struct exp_key *expanded)",
                " {",
                "@@ -203,3 +215,3 @@ EXPORT_SYM int ghash_clmul(",
                "         const uint8_t y_in[16],",
                "-        __m128i *expanded",
                "+        struct exp_key *expanded",
                "         )",
                "@@ -208,2 +220,3 @@ EXPORT_SYM int ghash_clmul(",
                "     __m128i y_temp;",
                "+    size_t len16;",
                "@@ -215,11 +228,51 @@ EXPORT_SYM int ghash_clmul(",
                "-    y_temp = _mm_loadu_si128((__m128i*)y_in);",
                "-    for (i=0; i<len; i+=16) {",
                "-        __m128i x, data;",
                "+    y_temp = swap(_mm_loadu_si128((__m128i*)y_in));",
                "+",
                "+    /** Authenticate 64 bytes per cycle **/",
                "+    len16 = len ^ (len & 0x3F);",
                "+    for (i=0; i<len16; i+=16*4) {",
                "+        __m128i sum0, sum1;",
                "+        __m128i xm3, xm2, xm1, x;",
                "+        __m128i r0, r1, r2, r3, r4, r5, r6;",
                "+",
                "+        xm3 = swap(_mm_loadu_si128((__m128i*)&block_data[i]));",
                "+        xm2 = swap(_mm_loadu_si128((__m128i*)&block_data[i+16]));",
                "+        xm1 = swap(_mm_loadu_si128((__m128i*)&block_data[i+16*2]));",
                "+        x = swap(_mm_loadu_si128((__m128i*)&block_data[i+16*3]));",
                "+",
                "+        /** (X_{i-3} + Y_{i-4}) * H^4 **/",
                "+        r0 = _mm_xor_si128(xm3, y_temp);",
                "+        clmult(&sum0, &sum1, r0, expanded->h[3]);",
                "+        ",
                "+        /** X_{i-2} * H^3 **/",
                "+        clmult(&r1, &r2, xm2, expanded->h[2]);",
                "+        sum0 = _mm_xor_si128(sum0, r1);",
                "+        sum1 = _mm_xor_si128(sum1, r2);",
                "+        ",
                "+        /** X_{i-1} * H^2 **/",
                "+        clmult(&r3, &r4, xm1, expanded->h[1]);",
                "+        sum0 = _mm_xor_si128(sum0, r3);",
                "+        sum1 = _mm_xor_si128(sum1, r4);",
                "+",
                "+        /** X_{i} * H **/",
                "+        clmult(&r5, &r6, x, expanded->h[0]);",
                "+        sum0 = _mm_xor_si128(sum0, r5);",
                "+        sum1 = _mm_xor_si128(sum1, r6);",
                "+",
                "+        /** mod P **/",
                "+        y_temp = reduce(sum0, sum1);",
                "+    }",
                "+",
                "+    /** Y_i = (X_i + Y_{i-1}) * H mod P **/",
                "+    for (; i<len; i+=16) {",
                "+        __m128i z, xi;",
                "+        __m128i prod_hi, prod_lo;",
                "-        data = _mm_loadu_si128((__m128i*)&block_data[i]);",
                "-        x = _mm_xor_si128(y_temp, data);",
                "-        y_temp = ghash_mult(&x, expanded);",
                "+        xi = swap(_mm_loadu_si128((__m128i*)&block_data[i]));",
                "+        z = _mm_xor_si128(y_temp, xi);",
                "+        clmult(&prod_hi, &prod_lo, z, expanded->h[0]);",
                "+        y_temp = reduce(prod_hi, prod_lo);",
                "     }",
                "+    y_temp = swap(y_temp);",
                "     _mm_storeu_si128((__m128i*)y_out, y_temp);"
            ],
            "changed_files": [
                "src/ghash_clmul.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8547ba2211534b8cfb125837e248a7669e750bfe",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528745348,
            "hunks": 7,
            "message": "Revisit how modules are loaded in _mode_gcm.py",
            "diff": [
                "diff --git a/Doc/conf.py b/Doc/conf.py",
                "index b4b50b7b..ecfd3681 100644",
                "--- a/Doc/conf.py",
                "+++ b/Doc/conf.py",
                "@@ -270 +270,3 @@ texinfo_documents = [",
                " #texinfo_show_urls = 'footnote'",
                "+",
                "+autodoc_mock_imports = [ \"Crypto.Util._cpuid\" ]",
                "diff --git a/lib/Crypto/Cipher/_mode_gcm.py b/lib/Crypto/Cipher/_mode_gcm.py",
                "index 10fd73ca..445d7ea3 100644",
                "--- a/lib/Crypto/Cipher/_mode_gcm.py",
                "+++ b/lib/Crypto/Cipher/_mode_gcm.py",
                "@@ -48,39 +48,50 @@ from Crypto.Util import _cpuid",
                "-# Load portable GHASH",
                "-_ghash_api_portable = \"\"\"",
                "-    int ghash_portable(uint8_t y_out[16],",
                "-                       const uint8_t block_data[],",
                "-                       size_t len,",
                "-                       const uint8_t y_in[16],",
                "-                       const void *exp_key);",
                "-    int ghash_expand_portable(const uint8_t h[16],",
                "-                              void **ghash_tables);",
                "-    int ghash_destroy_portable(void *ghash_tables);",
                "+",
                "+# C API by module implementing GHASH",
                "+_ghash_api_template = \"\"\"",
                "+    int ghash_%imp%(uint8_t y_out[16],",
                "+                    const uint8_t block_data[],",
                "+                    size_t len,",
                "+                    const uint8_t y_in[16],",
                "+                    const void *exp_key);",
                "+    int ghash_expand_%imp%(const uint8_t h[16],",
                "+                           void **ghash_tables);",
                "+    int ghash_destroy_%imp%(void *ghash_tables);",
                " \"\"\"",
                "-_raw_ghash_portable_lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_portable\",",
                "-                                                    _ghash_api_portable)",
                "+def _build_impl(lib, postfix):",
                "+    from collections import namedtuple",
                "+",
                "+    funcs = ( \"ghash\", \"ghash_expand\", \"ghash_destroy\" )",
                "+    GHASH_Imp = namedtuple('_GHash_Imp', funcs)",
                "+    try:",
                "+        imp_funcs = [ getattr(lib, x + \"_\" + postfix) for x in funcs ]",
                "+    except AttributeError:      # Make sphinx stop complaining with its mocklib",
                "+        imp_funcs = [ None ] * 3",
                "+    params = dict(zip(funcs, imp_funcs))",
                "+    return GHASH_Imp(**params)",
                "+",
                "-_funcs = ( \"ghash\", \"ghash_expand\", \"ghash_destroy\" )",
                "-class _GHASH_Portable(object):",
                "-    pass",
                "-for func in _funcs:",
                "-    impl_func = getattr(_raw_ghash_portable_lib, func + \"_portable\")",
                "-    setattr(_GHASH_Portable, func, impl_func)",
                "+def _get_ghash_portable():",
                "+    api = _ghash_api_template.replace(\"%imp%\", \"template\")",
                "+    lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_portable\", api)",
                "+    result = _build_impl(lib, \"portable\")",
                "+    return result",
                "+_ghash_portable = _get_ghash_portable()",
                "-# Try to load GHASH based on CMUL (it might not have been compiled)",
                "-_ghash_api_clmul = _ghash_api_portable.replace(\"portable\", \"clmul\")",
                "-_raw_ghash_clmul_lib = None",
                "-if _cpuid.have_clmul():",
                "+",
                "+def _get_ghash_clmul():",
                "+    \"\"\"Return None if CLMUL implementation is not available\"\"\"",
                "+",
                "+    if not _cpuid.have_clmul():",
                "+        return None",
                "     try:",
                "-        _raw_ghash_clmul_lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_clmul\",",
                "-                                                         _ghash_api_clmul)",
                "-        class _GHASH_CLMUL(object):",
                "-            pass",
                "-        for func in _funcs:",
                "-            impl_func = getattr(_raw_ghash_clmul_lib, func + \"_clmul\")",
                "-            setattr(_GHASH_CLMUL, func, impl_func)",
                "+        api = _ghash_api_template.replace(\"%imp%\", \"clmul\")",
                "+        lib = load_pycryptodome_raw_lib(\"Crypto.Hash._ghash_clmul\", api)",
                "+        result = _build_impl(lib, \"clmul\")",
                "     except OSError:",
                "-        pass",
                "-del _funcs",
                "+        result = None",
                "+    return result",
                "+_ghash_clmul = _get_ghash_clmul()",
                "+",
                "@@ -580,6 +591,6 @@ def _create_gcm_cipher(factory, **kwargs):",
                "     use_clmul = kwargs.pop(\"use_clmul\", True)",
                "-    if use_clmul and _raw_ghash_clmul_lib:",
                "-        ghash_c = _GHASH_CLMUL",
                "+    if use_clmul and _ghash_clmul:",
                "+        ghash_c = _ghash_clmul",
                "     else:",
                "-        ghash_c = _GHASH_Portable",
                "+        ghash_c = _ghash_portable"
            ],
            "changed_files": [
                "Doc/conf.py",
                "lib/Crypto/Cipher/_mode_gcm.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8a49df21faa2a67bf03b11eecf332368c75fee81",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528709600,
            "hunks": 1,
            "message": "Actual fix for Python 2.6",
            "diff": [
                "diff --git a/lib/Crypto/Util/number.py b/lib/Crypto/Util/number.py",
                "index 07b54a81..b24fc627 100644",
                "--- a/lib/Crypto/Util/number.py",
                "+++ b/lib/Crypto/Util/number.py",
                "@@ -30,3 +30,3 @@ import struct",
                " from Crypto import Random",
                "-from Crypto.Util.py3compat import *",
                "+from Crypto.Util.py3compat import _memoryview"
            ],
            "changed_files": [
                "lib/Crypto/Util/number.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9990033025ee7cc60aa6a4098769afcd4ec9fe88",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533898721,
            "hunks": 3,
            "message": "Jacobi symbol not defined for negative n, add more test vectors",
            "diff": [
                "diff --git a/lib/Crypto/Math/_Numbers_int.py b/lib/Crypto/Math/_Numbers_int.py",
                "index 937fa19d..d24e11ea 100644",
                "--- a/lib/Crypto/Math/_Numbers_int.py",
                "+++ b/lib/Crypto/Math/_Numbers_int.py",
                "@@ -392,2 +392,5 @@ class Integer(object):",
                "+        if n <= 0:",
                "+            raise ValueError(\"n must be a positive integer\")",
                "+",
                "         if (n & 1) == 0:",
                "diff --git a/lib/Crypto/SelfTest/Math/test_Numbers.py b/lib/Crypto/SelfTest/Math/test_Numbers.py",
                "index de76bc04..296b4e8d 100644",
                "--- a/lib/Crypto/SelfTest/Math/test_Numbers.py",
                "+++ b/lib/Crypto/SelfTest/Math/test_Numbers.py",
                "@@ -620,2 +620,18 @@ class TestIntegerBase(unittest.TestCase):",
                "+        # Jacobi symbol is always 1 for k==1 or n==1",
                "+        for k in range(1, 30):",
                "+            self.assertEqual(js(k, 1), 1)",
                "+        for n in range(1, 30, 2):",
                "+            self.assertEqual(js(1, n), 1)",
                "+",
                "+        # Fail if n is not positive odd",
                "+        self.assertRaises(ValueError, js, 6, -2)",
                "+        self.assertRaises(ValueError, js, 6, -1)",
                "+        self.assertRaises(ValueError, js, 6, 0)",
                "+        self.assertRaises(ValueError, js, 0, 0)",
                "+        self.assertRaises(ValueError, js, 6, 2)",
                "+        self.assertRaises(ValueError, js, 6, 4)",
                "+        self.assertRaises(ValueError, js, 6, 6)",
                "+        self.assertRaises(ValueError, js, 6, 8)",
                "+",
                "         for tv in data:",
                "@@ -625,3 +641,28 @@ class TestIntegerBase(unittest.TestCase):",
                "-        self.assertRaises(ValueError, js, 6, 8)",
                "+    def test_jacobi_symbol_wikipedia(self):",
                "+",
                "+\t\t# Test vectors from https://en.wikipedia.org/wiki/Jacobi_symbol",
                "+        tv = [",
                "+            (3, [(1, 1), (2, -1), (3, 0), (4, 1), (5, -1), (6, 0), (7, 1), (8, -1), (9, 0), (10, 1), (11, -1), (12, 0), (13, 1), (14, -1), (15, 0), (16, 1), (17, -1), (18, 0), (19, 1), (20, -1), (21, 0), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 0)]),",
                "+            (5, [(1, 1), (2, -1), (3, -1), (4, 1), (5, 0), (6, 1), (7, -1), (8, -1), (9, 1), (10, 0), (11, 1), (12, -1), (13, -1), (14, 1), (15, 0), (16, 1), (17, -1), (18, -1), (19, 1), (20, 0), (21, 1), (22, -1), (23, -1), (24, 1), (25, 0), (26, 1), (27, -1), (28, -1), (29, 1), (30, 0)]),",
                "+            (7, [(1, 1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, 0), (8, 1), (9, 1), (10, -1), (11, 1), (12, -1), (13, -1), (14, 0), (15, 1), (16, 1), (17, -1), (18, 1), (19, -1), (20, -1), (21, 0), (22, 1), (23, 1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 0), (29, 1), (30, 1)]),",
                "+            (9, [(1, 1), (2, 1), (3, 0), (4, 1), (5, 1), (6, 0), (7, 1), (8, 1), (9, 0), (10, 1), (11, 1), (12, 0), (13, 1), (14, 1), (15, 0), (16, 1), (17, 1), (18, 0), (19, 1), (20, 1), (21, 0), (22, 1), (23, 1), (24, 0), (25, 1), (26, 1), (27, 0), (28, 1), (29, 1), (30, 0)]),",
                "+            (11, [(1, 1), (2, -1), (3, 1), (4, 1), (5, 1), (6, -1), (7, -1), (8, -1), (9, 1), (10, -1), (11, 0), (12, 1), (13, -1), (14, 1), (15, 1), (16, 1), (17, -1), (18, -1), (19, -1), (20, 1), (21, -1), (22, 0), (23, 1), (24, -1), (25, 1), (26, 1), (27, 1), (28, -1), (29, -1), (30, -1)]),",
                "+            (13, [(1, 1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 1), (10, 1), (11, -1), (12, 1), (13, 0), (14, 1), (15, -1), (16, 1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 1), (26, 0), (27, 1), (28, -1), (29, 1), (30, 1)]),",
                "+            (15, [(1, 1), (2, 1), (3, 0), (4, 1), (5, 0), (6, 0), (7, -1), (8, 1), (9, 0), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 1), (17, 1), (18, 0), (19, 1), (20, 0), (21, 0), (22, -1), (23, 1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0)]),",
                "+            (17, [(1, 1), (2, 1), (3, -1), (4, 1), (5, -1), (6, -1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 1), (14, -1), (15, 1), (16, 1), (17, 0), (18, 1), (19, 1), (20, -1), (21, 1), (22, -1), (23, -1), (24, -1), (25, 1), (26, 1), (27, -1), (28, -1), (29, -1), (30, 1)]),",
                "+            (19, [(1, 1), (2, -1), (3, -1), (4, 1), (5, 1), (6, 1), (7, 1), (8, -1), (9, 1), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 1), (17, 1), (18, -1), (19, 0), (20, 1), (21, -1), (22, -1), (23, 1), (24, 1), (25, 1), (26, 1), (27, -1), (28, 1), (29, -1), (30, 1)]),",
                "+            (21, [(1, 1), (2, -1), (3, 0), (4, 1), (5, 1), (6, 0), (7, 0), (8, -1), (9, 0), (10, -1), (11, -1), (12, 0), (13, -1), (14, 0), (15, 0), (16, 1), (17, 1), (18, 0), (19, -1), (20, 1), (21, 0), (22, 1), (23, -1), (24, 0), (25, 1), (26, 1), (27, 0), (28, 0), (29, -1), (30, 0)]),",
                "+            (23, [(1, 1), (2, 1), (3, 1), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, 1), (13, 1), (14, -1), (15, -1), (16, 1), (17, -1), (18, 1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 1), (25, 1), (26, 1), (27, 1), (28, -1), (29, 1), (30, -1)]),",
                "+            (25, [(1, 1), (2, 1), (3, 1), (4, 1), (5, 0), (6, 1), (7, 1), (8, 1), (9, 1), (10, 0), (11, 1), (12, 1), (13, 1), (14, 1), (15, 0), (16, 1), (17, 1), (18, 1), (19, 1), (20, 0), (21, 1), (22, 1), (23, 1), (24, 1), (25, 0), (26, 1), (27, 1), (28, 1), (29, 1), (30, 0)]),",
                "+            (27, [(1, 1), (2, -1), (3, 0), (4, 1), (5, -1), (6, 0), (7, 1), (8, -1), (9, 0), (10, 1), (11, -1), (12, 0), (13, 1), (14, -1), (15, 0), (16, 1), (17, -1), (18, 0), (19, 1), (20, -1), (21, 0), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 0)]),",
                "+            (29, [(1, 1), (2, -1), (3, -1), (4, 1), (5, 1), (6, 1), (7, 1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 1), (14, -1), (15, -1), (16, 1), (17, -1), (18, -1), (19, -1), (20, 1), (21, -1), (22, 1), (23, 1), (24, 1), (25, 1), (26, -1), (27, -1), (28, 1), (29, 0), (30, 1)]),",
                "+            ]",
                "+",
                "+        js = self.Integer.jacobi_symbol",
                "+",
                "+        for n, kj in tv:",
                "+            for k, j in kj:",
                "+                self.assertEqual(js(k, n), j)",
                "+"
            ],
            "changed_files": [
                "lib/Crypto/Math/_Numbers_int.py",
                "lib/Crypto/SelfTest/Math/test_Numbers.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8efbc39480b5c0a8fb2d1c12ee5eba7e959efd8a",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1527892648,
            "hunks": 1,
            "message": "Replace _mm_bslli_si128 with _mm_slli_si128",
            "diff": [
                "diff --git a/src/ghash_clmul.c b/src/ghash_clmul.c",
                "index 54f9123d..5ddd524e 100644",
                "--- a/src/ghash_clmul.c",
                "+++ b/src/ghash_clmul.c",
                "@@ -135,3 +135,3 @@ static inline __m128i multx(__m128i a)",
                "     // Shift value a left by 1 bit",
                "-    t3 = _mm_bslli_si128(a, 8);     // Shift a left by 64 bits (lower 64 bits are zero)",
                "+    t3 = _mm_slli_si128(a, 8);     // Shift a left by 64 bits (lower 64 bits are zero)",
                "     t4 = _mm_srli_epi64(t3, 63);    // Bit 64 is now a[63], all other bits are 0"
            ],
            "changed_files": [
                "src/ghash_clmul.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fc3b14bcdbf480d7764dc4e9ccf8a213fefb1401",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528225334,
            "hunks": 0,
            "message": "Merge branch 'aesni'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f2528def7e8882a4fa21cb022d8d16e9f47fd936",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1526074577,
            "hunks": 1,
            "message": "_aligned_free() is called with MinGW32",
            "diff": [
                "diff --git a/src/montgomery.c b/src/montgomery.c",
                "index 5b4c7e65..36e99ee0 100644",
                "--- a/src/montgomery.c",
                "+++ b/src/montgomery.c",
                "@@ -411,3 +411,3 @@ void deallocate_montgomery(struct Montgomery *m)",
                "-#ifdef _MSC_VER",
                "+#if defined(_MSC_VER) || defined(__MINGW32__)",
                "     if (m->prot) {"
            ],
            "changed_files": [
                "src/montgomery.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "dc2e9b9e3cc5cd43997a16815317fdef54e2db7a",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1533745750,
            "hunks": 1,
            "message": "Fix DeprecationWarning: invalid escape sequence",
            "diff": [
                "diff --git a/lib/Crypto/Util/number.py b/lib/Crypto/Util/number.py",
                "index f5b19e34..9ff34246 100644",
                "--- a/lib/Crypto/Util/number.py",
                "+++ b/lib/Crypto/Util/number.py",
                "@@ -333,3 +333,3 @@ def getStrongPrime(N, e=0, false_positive_prob=1e-6, randfunc=None):",
                " def isPrime(N, false_positive_prob=1e-6, randfunc=None):",
                "-    \"\"\"Test if a number *N* is a prime.",
                "+    r\"\"\"Test if a number *N* is a prime."
            ],
            "changed_files": [
                "lib/Crypto/Util/number.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b556220eeeccdbcca7e5f7193e511997c4a500e1",
            "repository": "https://github.com/Legrandin/pycryptodome",
            "timestamp": 1528465639,
            "hunks": 0,
            "message": "Merge branch 'aesni'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "test_wheel_1",
                "v3.10.0",
                "v3.10.1",
                "v3.10.1x",
                "v3.10.2x",
                "v3.10.3x",
                "v3.10.4",
                "v3.10.4x",
                "v3.11.0",
                "v3.11.0x",
                "v3.12.0",
                "v3.12.0x",
                "v3.13.0",
                "v3.13.0x",
                "v3.14.0",
                "v3.14.0x",
                "v3.14.1",
                "v3.14.1x",
                "v3.15.0",
                "v3.15.0x",
                "v3.16.0",
                "v3.16.0x",
                "v3.17.0",
                "v3.17.0x",
                "v3.18.0",
                "v3.18.0x",
                "v3.19.0",
                "v3.19.0x",
                "v3.19.1",
                "v3.19.1x",
                "v3.20.0",
                "v3.20.0x",
                "v3.6.2",
                "v3.6.2x",
                "v3.6.3",
                "v3.6.3x",
                "v3.6.4",
                "v3.6.4x",
                "v3.6.5",
                "v3.6.5x",
                "v3.6.6",
                "v3.6.6x",
                "v3.6.7",
                "v3.7.0",
                "v3.7.0x",
                "v3.7.1",
                "v3.7.1x",
                "v3.7.2",
                "v3.7.2x",
                "v3.7.3",
                "v3.7.3x",
                "v3.8.0",
                "v3.8.0x",
                "v3.8.1",
                "v3.8.1x",
                "v3.8.2",
                "v3.8.2x",
                "v3.9.0",
                "v3.9.0x",
                "v3.9.1",
                "v3.9.1x",
                "v3.9.2",
                "v3.9.2x",
                "v3.9.3",
                "v3.9.3x",
                "v3.9.4",
                "v3.9.4x",
                "v3.9.5",
                "v3.9.5x",
                "v3.9.6",
                "v3.9.6x",
                "v3.9.7",
                "v3.9.7x",
                "v3.9.8",
                "v3.9.8x",
                "v3.9.9",
                "v3.9.9_build_py34_win32",
                "v3.9.9x"
            ],
            "matched_rules": []
        }
    ]
}
